uint64_t specialized GeometryEffectTransform.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value;
  uint64_t v3;
  double v4;
  double v5;
  double *v6;
  uint64_t v7;
  CGFloat v8;
  double v9;
  double v10;
  double *v11;
  double v12;
  double v13;
  double b;
  double a;
  double d;
  double c;
  CGFloat ty;
  double tx;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t result;
  double v29;
  double v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  double v36;
  double v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44[9];
  double v45[9];
  CGAffineTransform v46;
  uint64_t v47;
  __int128 v48;
  CGAffineTransform v49;
  CGFloat v50;
  CGFloat v51;
  uint64_t v52;

  Value = AGGraphGetValue();
  v3 = *(_QWORD *)Value;
  v4 = *(double *)(Value + 8);
  v5 = *(double *)(Value + 16);
  v41 = *(double *)(Value + 32);
  v42 = *(double *)(Value + 24);
  v6 = (double *)AGGraphGetValue();
  v39 = v6[1] - v5;
  v40 = *v6 - v4;
  v7 = AGGraphGetValue();
  v8 = *(double *)v7;
  v9 = *(double *)(v7 + 8);
  v10 = *(double *)(v7 + 16);
  type metadata accessor for CGSize(0);
  v11 = (double *)AGGraphGetValue();
  v12 = *v11;
  v13 = v11[1];
  CGAffineTransformMakeTranslation(&v49, v9 * *v11, v10 * v13);
  CGAffineTransformRotate(&v46, &v49, v8);
  v49 = v46;
  CGAffineTransformTranslate(&v46, &v49, -(v9 * v12), -(v10 * v13));
  a = v46.a;
  b = v46.b;
  c = v46.c;
  d = v46.d;
  tx = v46.tx;
  ty = v46.ty;
  v49.a = v46.a;
  v49.b = v46.b;
  v49.c = 0.0;
  v49.d = v46.c;
  v49.tx = v46.d;
  v49.ty = 0.0;
  v50 = v46.tx;
  v51 = v46.ty;
  v52 = 0x3FF0000000000000;
  if (*(_BYTE *)AGGraphGetValue() == 1)
  {
    v20 = *(_QWORD *)AGGraphGetValue();
    v46.a = -1.0;
    memset(&v46.b, 0, 24);
    *(_OWORD *)&v46.tx = xmmword_235281560;
    v47 = v20;
    v48 = xmmword_23528A280;
    ProjectionTransform.concatenating(_:)(&v49.a, v44);
    ProjectionTransform.concatenating(_:)(&v46.a, v45);
    a = v45[0];
    b = v45[1];
    v21 = v45[2];
    c = v45[3];
    d = v45[4];
    v22 = v45[5];
    tx = v45[6];
    v43 = v45[7];
    v23 = v45[8];
  }
  else
  {
    v43 = ty;
    v23 = 1.0;
    v21 = 0.0;
    v22 = 0.0;
  }
  v24 = v42 - v40;
  v25 = v41 - v39;
  if (v21 == 0.0 && v22 == 0.0 && v23 == 1.0)
  {
    if (a * d - b * c != 0.0)
    {
      if (a == 1.0 && b == 0.0 && c == 0.0 && d == 1.0)
      {
        v26 = v24 - tx;
        v27 = v25 - v43;
        result = swift_retain();
        v29 = v27;
        v30 = v26;
LABEL_22:
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = v3;
        *(double *)(a1 + 24) = v30;
        *(double *)(a1 + 32) = v29;
        return result;
      }
      goto LABEL_19;
    }
LABEL_14:
    swift_retain();
    _StringGuts.grow(_:)(28);
    v31._object = (void *)0x80000002352E1010;
    v31._countAndFlagsBits = 0xD00000000000001ALL;
    String.append(_:)(v31);
    _print_unlocked<A, B>(_:_:)();
    specialized static Log.externalWarning(_:)(0, 0xE000000000000000);
    result = swift_bridgeObjectRelease();
    v29 = v41 - v39;
    v30 = v42 - v40;
    goto LABEL_22;
  }
  if (v21 * (c * v43 - d * tx) + a * (d * v23 - v22 * v43) - b * (c * v23 - v22 * tx) == 0.0)
    goto LABEL_14;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for Element<ProjectionTransformElement>, (uint64_t (*)(void))lazy protocol witness table accessor for type ProjectionTransformElement and conformance ProjectionTransformElement, (uint64_t)&type metadata for ProjectionTransformElement, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Element);
  v32 = swift_allocObject();
  *(double *)(v32 + 32) = v42 - v40;
  *(double *)(v32 + 40) = v41 - v39;
  *(double *)(v32 + 48) = a;
  *(double *)(v32 + 56) = b;
  *(double *)(v32 + 64) = v21;
  *(double *)(v32 + 72) = c;
  *(double *)(v32 + 80) = d;
  *(double *)(v32 + 88) = v22;
  *(double *)(v32 + 96) = tx;
  *(double *)(v32 + 104) = v43;
  *(double *)(v32 + 112) = v23;
  v33 = 1;
  *(_BYTE *)(v32 + 120) = 1;
  *(_QWORD *)(v32 + 16) = v3;
  if (!v3)
    goto LABEL_21;
  v34 = *(_QWORD *)(v3 + 24);
  v35 = __OFADD__(v34, 1);
  v33 = v34 + 1;
  if (!v35)
    goto LABEL_21;
  __break(1u);
LABEL_19:
  v36 = v24;
  v37 = v25;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for Element<AffineTransformElement>, (uint64_t (*)(void))lazy protocol witness table accessor for type AffineTransformElement and conformance AffineTransformElement, (uint64_t)&type metadata for AffineTransformElement, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Element);
  result = swift_allocObject();
  v32 = result;
  *(double *)(result + 32) = v36;
  *(double *)(result + 40) = v37;
  *(double *)(result + 48) = a;
  *(double *)(result + 56) = b;
  *(double *)(result + 64) = c;
  *(double *)(result + 72) = d;
  *(double *)(result + 80) = tx;
  *(double *)(result + 88) = v43;
  v33 = 1;
  *(_BYTE *)(result + 96) = 1;
  *(_QWORD *)(result + 16) = v3;
  if (!v3 || (v38 = *(_QWORD *)(v3 + 24), v35 = __OFADD__(v38, 1), v33 = v38 + 1, !v35))
  {
LABEL_21:
    *(_QWORD *)(v32 + 24) = v33;
    result = swift_retain();
    v30 = 0.0;
    v3 = v32;
    v29 = 0.0;
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t specialized RendererEffectDisplayList.value.getter@<X0>(uint64_t a1@<X8>)
{
  int *v1;
  int v3;
  uint64_t v4;
  unsigned __int16 v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  double *v32;
  double v33;
  double v34;
  double *v35;
  unint64_t v36;
  unint64_t v37;
  __int128 *v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  __int128 v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  unint64_t v49;
  uint64_t result;
  uint64_t Value;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unsigned __int16 v56;
  uint64_t v57;
  unsigned __int8 v58;
  uint64_t v59;
  unint64_t v60;
  __int128 v61;
  unint64_t v62;
  unint64_t v63;
  __int128 v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unsigned __int16 v69;
  unsigned __int8 v70;
  int v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  v3 = *MEMORY[0x24BE096C0];
  v4 = MEMORY[0x24BEE4AF8];
  if (v1[8] != *MEMORY[0x24BE096C0])
  {
    Value = AGGraphGetValue();
    v7 = *(_QWORD *)Value;
    v5 = *(_WORD *)(Value + 8);
    v6 = *(_BYTE *)(Value + 10);
    swift_bridgeObjectRetain();
    if (*(_QWORD *)(v7 + 16))
      goto LABEL_3;
LABEL_10:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a1 = v4;
    *(_WORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 10) = 0;
    return result;
  }
  v5 = 0;
  v6 = 0;
  v7 = MEMORY[0x24BEE4AF8];
  if (!*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
    goto LABEL_10;
LABEL_3:
  v8 = ++static DisplayList.Version.lastValue;
  if (AGGraphGetCurrentAttribute() == v3)
  {
    __break(1u);
    JUMPOUT(0x234E1E0B0);
  }
  v59 = a1;
  v60 = v8;
  v58 = v6;
  v9 = AGCreateWeakAttribute();
  v10 = v9;
  v55 = HIDWORD(v9);
  v11 = AGCreateWeakAttribute();
  v12 = v11;
  v54 = HIDWORD(v11);
  v13 = AGCreateWeakAttribute();
  v14 = v13;
  v53 = HIDWORD(v13);
  v15 = AGCreateWeakAttribute();
  v16 = v15;
  v57 = v7;
  v17 = HIDWORD(v15);
  v18 = AGCreateWeakAttribute();
  v56 = v5;
  v19 = v18;
  v20 = HIDWORD(v18);
  v21 = AGCreateWeakAttribute();
  v22 = v21;
  v23 = HIDWORD(v21);
  _threadGeometryProxyData();
  v62 = __PAIR64__(v55, v10);
  v63 = __PAIR64__(v54, v12);
  *(_QWORD *)&v64 = __PAIR64__(v53, v14);
  *((_QWORD *)&v64 + 1) = __PAIR64__(v17, v16);
  v65 = __PAIR64__(v20, v19);
  v66 = __PAIR64__(v23, v22);
  LODWORD(v67) = v60;
  _setThreadGeometryProxyData();
  v24 = AGGraphGetValue();
  v25 = *(_QWORD *)v24;
  v26 = *(unsigned __int8 *)(v24 + 12);
  v27 = *(unsigned int *)(v24 + 8);
  LOBYTE(v23) = *(_BYTE *)(v24 + 14);
  LOBYTE(v12) = *(_BYTE *)(v24 + 15);
  v28 = *(_QWORD *)(v24 + 16);
  v29 = *(_DWORD *)(v24 + 24);
  LOBYTE(v10) = *(_BYTE *)(v24 + 13);
  v30 = swift_allocObject();
  *(_QWORD *)(v30 + 16) = v25;
  *(_BYTE *)(v30 + 28) = v26;
  *(_DWORD *)(v30 + 24) = v27;
  *(_BYTE *)(v30 + 29) = v10;
  *(_BYTE *)(v30 + 30) = v23;
  *(_BYTE *)(v30 + 31) = v12;
  *(_QWORD *)(v30 + 32) = v28;
  *(_DWORD *)(v30 + 40) = v29;
  v31 = v30;
  outlined copy of ContentTransition.Storage(v25, v27 | (v26 << 32), v10);
  swift_retain();
  _setThreadGeometryProxyData();
  v32 = (double *)AGGraphGetValue();
  v33 = *v32;
  v34 = v32[1];
  v35 = (double *)AGGraphGetValue();
  *(double *)&v36 = v33 - *v35;
  *(double *)&v37 = v34 - v35[1];
  v38 = (__int128 *)AGGraphGetValue();
  v39 = *v1;
  v62 = v36;
  v63 = v37;
  v64 = *v38;
  v65 = v60;
  v66 = v31;
  v67 = 0x4000000B00000000;
  v68 = v57;
  v70 = v58;
  v69 = v56;
  v71 = v39;
  LOBYTE(v61) = *((_BYTE *)v1 + 36);
  swift_retain();
  DisplayList.Item.canonicalize(options:)((char *)&v61);
  v40 = v62;
  v41 = v63;
  v42 = v64;
  v44 = v65;
  v43 = v66;
  v46 = v67;
  v45 = v68;
  v47 = v69 | (v70 << 16);
  v48 = v71;
  v49 = v67 >> 62;
  if (v67 >> 62 != 3 || (v47 & 0xFFFFFF) != 0 || v67 != 0xC000000000000000 || v68 | v66)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v52 = swift_allocObject();
    *(_OWORD *)(v52 + 16) = xmmword_23527E860;
    *(_QWORD *)(v52 + 32) = v40;
    *(_QWORD *)(v52 + 40) = v41;
    *(_OWORD *)(v52 + 48) = v42;
    *(_QWORD *)(v52 + 64) = v44;
    *(_QWORD *)(v52 + 72) = v43;
    *(_QWORD *)(v52 + 80) = v46;
    *(_QWORD *)(v52 + 88) = v45;
    *(_BYTE *)(v52 + 98) = BYTE2(v47);
    *(_WORD *)(v52 + 96) = v47;
    *(_DWORD *)(v52 + 100) = v48;
    __asm { BR              X10 }
  }
  swift_release();
  result = outlined consume of DisplayList.Item.Value(0, 0xC000000000000000);
  *(_QWORD *)v59 = MEMORY[0x24BEE4AF8];
  *(_WORD *)(v59 + 8) = 0;
  *(_BYTE *)(v59 + 10) = 0;
  return result;
}

{
  int *v1;
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  double *v23;
  double v24;
  double v25;
  double *v26;
  unint64_t v27;
  unint64_t v28;
  __int128 *v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v33;
  unint64_t v34;
  uint64_t v35;
  __int128 v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t result;
  uint64_t Value;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  __int128 v54;
  unint64_t v55;
  __int128 v56;
  uint64_t v57;
  unsigned __int16 v58;
  unsigned __int8 v59;
  int v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v3 = *MEMORY[0x24BE096C0];
  v4 = MEMORY[0x24BEE4AF8];
  if (v1[8] != *MEMORY[0x24BE096C0])
  {
    Value = AGGraphGetValue();
    v6 = *(_QWORD *)Value;
    v50 = *(_WORD *)(Value + 8);
    v5 = *(_BYTE *)(Value + 10);
    swift_bridgeObjectRetain();
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_3;
LABEL_10:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a1 = v4;
    *(_WORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 10) = 0;
    return result;
  }
  v50 = 0;
  v5 = 0;
  v6 = MEMORY[0x24BEE4AF8];
  if (!*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
    goto LABEL_10;
LABEL_3:
  v7 = ++static DisplayList.Version.lastValue;
  if (AGGraphGetCurrentAttribute() == v3)
  {
    __break(1u);
    JUMPOUT(0x234E1EBC0);
  }
  v48 = v6;
  v49 = a1;
  v47 = v5;
  v8 = AGCreateWeakAttribute();
  v9 = v8;
  v46 = HIDWORD(v8);
  v10 = AGCreateWeakAttribute();
  v11 = v10;
  v45 = HIDWORD(v10);
  v12 = AGCreateWeakAttribute();
  v13 = v12;
  v44 = HIDWORD(v12);
  v14 = AGCreateWeakAttribute();
  v15 = v14;
  v43 = HIDWORD(v14);
  v16 = AGCreateWeakAttribute();
  v17 = v16;
  v18 = HIDWORD(v16);
  v19 = AGCreateWeakAttribute();
  v20 = v19;
  v21 = v7;
  v22 = HIDWORD(v19);
  _threadGeometryProxyData();
  v52 = __PAIR64__(v46, v9);
  v53 = __PAIR64__(v45, v11);
  *(_QWORD *)&v54 = __PAIR64__(v44, v13);
  *((_QWORD *)&v54 + 1) = __PAIR64__(v43, v15);
  v55 = __PAIR64__(v18, v17);
  *(_QWORD *)&v56 = __PAIR64__(v22, v20);
  DWORD2(v56) = v21;
  _setThreadGeometryProxyData();
  _setThreadGeometryProxyData();
  v23 = (double *)AGGraphGetValue();
  v24 = *v23;
  v25 = v23[1];
  v26 = (double *)AGGraphGetValue();
  *(double *)&v27 = v24 - *v26;
  *(double *)&v28 = v25 - v26[1];
  v29 = (__int128 *)AGGraphGetValue();
  v30 = *v1;
  v52 = v27;
  v53 = v28;
  v54 = *v29;
  v55 = v21;
  v56 = xmmword_2352A5D90;
  v57 = v48;
  v59 = v47;
  v58 = v50;
  v60 = v30;
  LOBYTE(v51) = *((_BYTE *)v1 + 36);
  DisplayList.Item.canonicalize(options:)((char *)&v51);
  v31 = v52;
  v32 = v53;
  v33 = v54;
  v34 = v55;
  v36 = v56;
  v35 = v57;
  v37 = v58 | (v59 << 16);
  v38 = v60;
  v39 = *((_QWORD *)&v56 + 1) >> 62;
  if (*((_QWORD *)&v56 + 1) >> 62 != 3
    || (v37 & 0xFFFFFF) != 0
    || *((_QWORD *)&v56 + 1) != 0xC000000000000000
    || v57 | (unint64_t)v56)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v42 = swift_allocObject();
    *(_OWORD *)(v42 + 16) = xmmword_23527E860;
    *(_QWORD *)(v42 + 32) = v31;
    *(_QWORD *)(v42 + 40) = v32;
    *(_OWORD *)(v42 + 48) = v33;
    *(_QWORD *)(v42 + 64) = v34;
    *(_OWORD *)(v42 + 72) = v36;
    *(_QWORD *)(v42 + 88) = v35;
    *(_BYTE *)(v42 + 98) = BYTE2(v37);
    *(_WORD *)(v42 + 96) = v37;
    *(_DWORD *)(v42 + 100) = v38;
    __asm { BR              X10 }
  }
  result = outlined consume of DisplayList.Item.Value(0, 0xC000000000000000);
  *(_QWORD *)v49 = MEMORY[0x24BEE4AF8];
  *(_WORD *)(v49 + 8) = 0;
  *(_BYTE *)(v49 + 10) = 0;
  return result;
}

{
  int *v1;
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  double v27;
  double v28;
  double *v29;
  unint64_t v30;
  unint64_t v31;
  __int128 *v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  __int128 v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  unint64_t v42;
  uint64_t result;
  uint64_t Value;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  id v49;
  uint64_t v50;
  unsigned __int8 v51;
  uint64_t v52;
  unsigned __int16 v53;
  int v54;
  __int128 v55;
  unint64_t v56;
  unint64_t v57;
  __int128 v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unsigned __int16 v63;
  unsigned __int8 v64;
  int v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v3 = *MEMORY[0x24BE096C0];
  v4 = MEMORY[0x24BEE4AF8];
  if (v1[8] != *MEMORY[0x24BE096C0])
  {
    Value = AGGraphGetValue();
    v6 = *(_QWORD *)Value;
    v53 = *(_WORD *)(Value + 8);
    v5 = *(_BYTE *)(Value + 10);
    swift_bridgeObjectRetain();
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_3;
LABEL_10:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a1 = v4;
    *(_WORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 10) = 0;
    return result;
  }
  v53 = 0;
  v5 = 0;
  v6 = MEMORY[0x24BEE4AF8];
  if (!*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
    goto LABEL_10;
LABEL_3:
  v7 = ++static DisplayList.Version.lastValue;
  if (AGGraphGetCurrentAttribute() == v3)
  {
    __break(1u);
    JUMPOUT(0x234E1F79CLL);
  }
  v52 = a1;
  v49 = (id)v7;
  v8 = AGCreateWeakAttribute();
  v9 = v8;
  v48 = HIDWORD(v8);
  v10 = AGCreateWeakAttribute();
  v11 = v10;
  v47 = HIDWORD(v10);
  v12 = AGCreateWeakAttribute();
  v13 = v12;
  v46 = HIDWORD(v12);
  v14 = AGCreateWeakAttribute();
  v15 = v14;
  v51 = v5;
  v16 = HIDWORD(v14);
  v17 = AGCreateWeakAttribute();
  v18 = v17;
  v50 = v6;
  v19 = HIDWORD(v17);
  v20 = AGCreateWeakAttribute();
  v21 = v20;
  v22 = HIDWORD(v20);
  _threadGeometryProxyData();
  v56 = __PAIR64__(v48, v9);
  v57 = __PAIR64__(v47, v11);
  *(_QWORD *)&v58 = __PAIR64__(v46, v13);
  *((_QWORD *)&v58 + 1) = __PAIR64__(v16, v15);
  v59 = __PAIR64__(v19, v18);
  v60 = __PAIR64__(v22, v21);
  LODWORD(v61) = (_DWORD)v49;
  _setThreadGeometryProxyData();
  v23 = AGGraphGetValue();
  v24 = *(_QWORD *)v23;
  v25 = *(unsigned __int8 *)(v23 + 8);
  outlined copy of GraphicsBlendMode(*(_QWORD *)v23, v25);
  _setThreadGeometryProxyData();
  v26 = (double *)AGGraphGetValue();
  v27 = *v26;
  v28 = v26[1];
  v29 = (double *)AGGraphGetValue();
  *(double *)&v30 = v27 - *v29;
  *(double *)&v31 = v28 - v29[1];
  v32 = (__int128 *)AGGraphGetValue();
  v33 = *v1;
  v56 = v30;
  v57 = v31;
  v58 = *v32;
  v59 = (unint64_t)v49;
  v60 = v24;
  v61 = v25 | 0x4000000500000000;
  v62 = v50;
  v64 = v51;
  v63 = v53;
  v65 = v33;
  LOBYTE(v55) = *((_BYTE *)v1 + 36);
  outlined copy of GraphicsBlendMode(v24, v25);
  DisplayList.Item.canonicalize(options:)((char *)&v55);
  v34 = v56;
  v35 = v57;
  v36 = v58;
  v37 = v59;
  v38 = v60;
  v40 = v61;
  v39 = v62;
  v41 = v63 | (v64 << 16);
  v54 = v65;
  v42 = v61 >> 62;
  if (v61 >> 62 != 3 || (v41 & 0xFFFFFF) != 0 || v61 != 0xC000000000000000 || v62 | v60)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v45 = swift_allocObject();
    *(_OWORD *)(v45 + 16) = xmmword_23527E860;
    *(_QWORD *)(v45 + 32) = v34;
    *(_QWORD *)(v45 + 40) = v35;
    *(_OWORD *)(v45 + 48) = v36;
    *(_QWORD *)(v45 + 64) = v37;
    *(_QWORD *)(v45 + 72) = v38;
    *(_QWORD *)(v45 + 80) = v40;
    *(_QWORD *)(v45 + 88) = v39;
    *(_BYTE *)(v45 + 98) = BYTE2(v41);
    *(_WORD *)(v45 + 96) = v41;
    *(_DWORD *)(v45 + 100) = v54;
    __asm { BR              X10 }
  }
  outlined consume of GraphicsBlendMode(v24, v25);
  result = outlined consume of DisplayList.Item.Value(0, 0xC000000000000000);
  *(_QWORD *)v52 = MEMORY[0x24BEE4AF8];
  *(_WORD *)(v52 + 8) = 0;
  *(_BYTE *)(v52 + 10) = 0;
  return result;
}

{
  int *v1;
  int v3;
  uint64_t v4;
  unsigned __int16 v5;
  unsigned __int8 v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  double *v34;
  double v35;
  double v36;
  double *v37;
  unint64_t v38;
  unint64_t v39;
  __int128 *v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  __int128 v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  int v50;
  unint64_t v51;
  uint64_t result;
  uint64_t Value;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unsigned __int16 v59;
  id v60;
  unsigned __int8 v61;
  uint64_t v62;
  __int128 v63;
  unint64_t v64;
  unint64_t v65;
  __int128 v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unsigned __int16 v71;
  unsigned __int8 v72;
  int v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  v3 = *MEMORY[0x24BE096C0];
  v4 = MEMORY[0x24BEE4AF8];
  if (v1[8] != *MEMORY[0x24BE096C0])
  {
    Value = AGGraphGetValue();
    v7 = *(_QWORD **)Value;
    v5 = *(_WORD *)(Value + 8);
    v6 = *(_BYTE *)(Value + 10);
    swift_bridgeObjectRetain();
    if (v7[2])
      goto LABEL_3;
LABEL_10:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a1 = v4;
    *(_WORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 10) = 0;
    return result;
  }
  v5 = 0;
  v6 = 0;
  v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (!*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
    goto LABEL_10;
LABEL_3:
  v8 = ++static DisplayList.Version.lastValue;
  if (AGGraphGetCurrentAttribute() == v3)
  {
    __break(1u);
    JUMPOUT(0x234E20398);
  }
  v62 = a1;
  v58 = v8;
  v61 = v6;
  v9 = AGCreateWeakAttribute();
  v10 = v9;
  v57 = HIDWORD(v9);
  v11 = AGCreateWeakAttribute();
  v12 = v11;
  v56 = HIDWORD(v11);
  v13 = AGCreateWeakAttribute();
  v14 = v13;
  v55 = HIDWORD(v13);
  v15 = AGCreateWeakAttribute();
  v16 = v15;
  v60 = v7;
  v17 = HIDWORD(v15);
  v18 = AGCreateWeakAttribute();
  v19 = v18;
  v59 = v5;
  v20 = HIDWORD(v18);
  v21 = AGCreateWeakAttribute();
  v22 = v21;
  v23 = HIDWORD(v21);
  _threadGeometryProxyData();
  v64 = __PAIR64__(v57, v10);
  v65 = __PAIR64__(v56, v12);
  *(_QWORD *)&v66 = __PAIR64__(v55, v14);
  *((_QWORD *)&v66 + 1) = __PAIR64__(v17, v16);
  v67 = __PAIR64__(v20, v19);
  v68 = __PAIR64__(v23, v22);
  LODWORD(v69) = v58;
  _setThreadGeometryProxyData();
  v24 = AGGraphGetValue();
  v25 = *(void **)v24;
  v26 = *(_QWORD *)(v24 + 8);
  v27 = *(_QWORD *)(v24 + 16);
  v28 = *(unsigned int *)(v24 + 24);
  v29 = (uint64_t *)AGGraphGetValue();
  v30 = *v29;
  v31 = v29[1];
  v32 = swift_allocObject();
  *(_QWORD *)(v32 + 16) = v25;
  *(_QWORD *)(v32 + 24) = v26;
  *(_QWORD *)(v32 + 32) = v27;
  *(_QWORD *)(v32 + 40) = v28;
  *(_QWORD *)(v32 + 48) = v30;
  *(_QWORD *)(v32 + 56) = v31;
  *(_OWORD *)(v32 + 64) = 0u;
  *(_OWORD *)(v32 + 80) = 0u;
  *(_OWORD *)(v32 + 96) = 0u;
  *(_OWORD *)(v32 + 112) = 0u;
  *(_DWORD *)(v32 + 128) = 0;
  *(_BYTE *)(v32 + 132) = 15;
  v33 = v25;
  _setThreadGeometryProxyData();
  v34 = (double *)AGGraphGetValue();
  v35 = *v34;
  v36 = v34[1];
  v37 = (double *)AGGraphGetValue();
  *(double *)&v38 = v35 - *v37;
  *(double *)&v39 = v36 - v37[1];
  v40 = (__int128 *)AGGraphGetValue();
  v41 = *v1;
  v64 = v38;
  v65 = v39;
  v66 = *v40;
  v67 = v58;
  v68 = v32;
  v69 = 0x4000000900000000;
  v70 = (unint64_t)v60;
  v72 = v61;
  v71 = v59;
  v73 = v41;
  LOBYTE(v63) = *((_BYTE *)v1 + 36);
  swift_retain();
  DisplayList.Item.canonicalize(options:)((char *)&v63);
  v42 = v64;
  v43 = v65;
  v44 = v66;
  v46 = v67;
  v45 = v68;
  v48 = v69;
  v47 = v70;
  v49 = v71 | (v72 << 16);
  v50 = v73;
  v51 = v69 >> 62;
  if (v69 >> 62 != 3 || (v49 & 0xFFFFFF) != 0 || v69 != 0xC000000000000000 || v70 | v68)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v54 = swift_allocObject();
    *(_OWORD *)(v54 + 16) = xmmword_23527E860;
    *(_QWORD *)(v54 + 32) = v42;
    *(_QWORD *)(v54 + 40) = v43;
    *(_OWORD *)(v54 + 48) = v44;
    *(_QWORD *)(v54 + 64) = v46;
    *(_QWORD *)(v54 + 72) = v45;
    *(_QWORD *)(v54 + 80) = v48;
    *(_QWORD *)(v54 + 88) = v47;
    *(_BYTE *)(v54 + 98) = BYTE2(v49);
    *(_WORD *)(v54 + 96) = v49;
    *(_DWORD *)(v54 + 100) = v50;
    __asm { BR              X10 }
  }
  swift_release();
  result = outlined consume of DisplayList.Item.Value(0, 0xC000000000000000);
  *(_QWORD *)v62 = MEMORY[0x24BEE4AF8];
  *(_WORD *)(v62 + 8) = 0;
  *(_BYTE *)(v62 + 10) = 0;
  return result;
}

{
  int *v1;
  int v3;
  uint64_t v4;
  unsigned __int16 v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  double *v26;
  double v27;
  double v28;
  double *v29;
  unint64_t v30;
  unint64_t v31;
  __int128 *v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  __int128 v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  int v42;
  unint64_t v43;
  uint64_t result;
  uint64_t Value;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unsigned __int16 v51;
  uint64_t v52;
  unsigned __int8 v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  __int128 v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unsigned __int16 v63;
  unsigned __int8 v64;
  int v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v3 = *MEMORY[0x24BE096C0];
  v4 = MEMORY[0x24BEE4AF8];
  if (v1[8] != *MEMORY[0x24BE096C0])
  {
    Value = AGGraphGetValue();
    v7 = *(_QWORD *)Value;
    v5 = *(_WORD *)(Value + 8);
    v6 = *(_BYTE *)(Value + 10);
    swift_bridgeObjectRetain();
    if (*(_QWORD *)(v7 + 16))
      goto LABEL_3;
LABEL_10:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a1 = v4;
    *(_WORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 10) = 0;
    return result;
  }
  v5 = 0;
  v6 = 0;
  v7 = MEMORY[0x24BEE4AF8];
  if (!*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
    goto LABEL_10;
LABEL_3:
  v8 = ++static DisplayList.Version.lastValue;
  if (AGGraphGetCurrentAttribute() == v3)
  {
    __break(1u);
    JUMPOUT(0x234E20EC8);
  }
  v54 = a1;
  v53 = v6;
  v9 = AGCreateWeakAttribute();
  v10 = v9;
  v50 = HIDWORD(v9);
  v11 = AGCreateWeakAttribute();
  v12 = v11;
  v48 = HIDWORD(v11);
  v13 = AGCreateWeakAttribute();
  v14 = v13;
  v47 = HIDWORD(v13);
  v15 = AGCreateWeakAttribute();
  v16 = v15;
  v52 = v7;
  v17 = HIDWORD(v15);
  v18 = AGCreateWeakAttribute();
  v49 = v8;
  v19 = v18;
  v20 = HIDWORD(v18);
  v21 = AGCreateWeakAttribute();
  v22 = v21;
  v51 = v5;
  v23 = HIDWORD(v21);
  _threadGeometryProxyData();
  v56 = __PAIR64__(v50, v10);
  v57 = __PAIR64__(v48, v12);
  *(_QWORD *)&v58 = __PAIR64__(v47, v14);
  *((_QWORD *)&v58 + 1) = __PAIR64__(v17, v16);
  v59 = __PAIR64__(v20, v19);
  v60 = __PAIR64__(v23, v22);
  LODWORD(v61) = v49;
  _setThreadGeometryProxyData();
  *(float *)&v24 = *(double *)AGGraphGetValue();
  v25 = v24;
  _setThreadGeometryProxyData();
  v26 = (double *)AGGraphGetValue();
  v27 = *v26;
  v28 = v26[1];
  v29 = (double *)AGGraphGetValue();
  *(double *)&v30 = v27 - *v29;
  *(double *)&v31 = v28 - v29[1];
  v32 = (__int128 *)AGGraphGetValue();
  v33 = *v1;
  v56 = v30;
  v57 = v31;
  v58 = *v32;
  v59 = v49;
  v60 = v25;
  v61 = 0x4000000400000000;
  v62 = v52;
  v64 = v53;
  v63 = v51;
  v65 = v33;
  LOBYTE(v55) = *((_BYTE *)v1 + 36);
  DisplayList.Item.canonicalize(options:)((char *)&v55);
  v34 = v56;
  v35 = v57;
  v36 = v58;
  v38 = v59;
  v37 = v60;
  v40 = v61;
  v39 = v62;
  v41 = v63 | (v64 << 16);
  v42 = v65;
  v43 = v61 >> 62;
  if (v61 >> 62 != 3 || (v41 & 0xFFFFFF) != 0 || v61 != 0xC000000000000000 || v62 | v60)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v46 = swift_allocObject();
    *(_OWORD *)(v46 + 16) = xmmword_23527E860;
    *(_QWORD *)(v46 + 32) = v34;
    *(_QWORD *)(v46 + 40) = v35;
    *(_OWORD *)(v46 + 48) = v36;
    *(_QWORD *)(v46 + 64) = v38;
    *(_QWORD *)(v46 + 72) = v37;
    *(_QWORD *)(v46 + 80) = v40;
    *(_QWORD *)(v46 + 88) = v39;
    *(_BYTE *)(v46 + 98) = BYTE2(v41);
    *(_WORD *)(v46 + 96) = v41;
    *(_DWORD *)(v46 + 100) = v42;
    __asm { BR              X10 }
  }
  result = outlined consume of DisplayList.Item.Value(0, 0xC000000000000000);
  *(_QWORD *)v54 = MEMORY[0x24BEE4AF8];
  *(_WORD *)(v54 + 8) = 0;
  *(_BYTE *)(v54 + 10) = 0;
  return result;
}

{
  int *v1;
  int v3;
  uint64_t v4;
  unsigned __int16 v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t Value;
  uint64_t result;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double *v33;
  double v34;
  double v35;
  double *v36;
  unint64_t v37;
  unint64_t v38;
  __int128 *v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  __int128 v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  unsigned __int8 v51;
  uint64_t v52;
  unsigned __int16 v53;
  unint64_t v54;
  id v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  __int128 v60;
  unint64_t v61;
  unint64_t v62;
  __int128 v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unsigned __int16 v68;
  unsigned __int8 v69;
  int v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v3 = *MEMORY[0x24BE096C0];
  v4 = MEMORY[0x24BEE4AF8];
  if (v1[8] != *MEMORY[0x24BE096C0])
  {
    Value = AGGraphGetValue();
    v7 = *(_QWORD *)Value;
    v5 = *(_WORD *)(Value + 8);
    v6 = *(_BYTE *)(Value + 10);
    swift_bridgeObjectRetain();
    if (*(_QWORD *)(v7 + 16))
      goto LABEL_3;
LABEL_7:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a1 = v4;
    *(_WORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 10) = 0;
    return result;
  }
  v5 = 0;
  v6 = 0;
  v7 = MEMORY[0x24BEE4AF8];
  if (!*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
    goto LABEL_7;
LABEL_3:
  v8 = ++static DisplayList.Version.lastValue;
  if (AGGraphGetCurrentAttribute() == v3)
  {
    __break(1u);
    JUMPOUT(0x234E21B74);
  }
  v51 = v6;
  v52 = v7;
  v53 = v5;
  v57 = a1;
  v58 = v8;
  v9 = AGCreateWeakAttribute();
  v10 = v9;
  v56 = HIDWORD(v9);
  v11 = AGCreateWeakAttribute();
  v12 = v11;
  v55 = (id)HIDWORD(v11);
  v13 = AGCreateWeakAttribute();
  v14 = v13;
  v54 = HIDWORD(v13);
  v15 = AGCreateWeakAttribute();
  v16 = v15;
  v17 = HIDWORD(v15);
  v18 = AGCreateWeakAttribute();
  v19 = v18;
  v20 = HIDWORD(v18);
  v21 = AGCreateWeakAttribute();
  v22 = v21;
  v23 = HIDWORD(v21);
  _threadGeometryProxyData();
  v61 = __PAIR64__(v56, v10);
  v62 = __PAIR64__(v55, v12);
  *(_QWORD *)&v63 = __PAIR64__(v54, v14);
  *((_QWORD *)&v63 + 1) = __PAIR64__(v17, v16);
  v64 = __PAIR64__(v20, v19);
  v65 = __PAIR64__(v23, v22);
  LODWORD(v66) = v58;
  _setThreadGeometryProxyData();
  v24 = AGGraphGetValue();
  if (*(_BYTE *)(v24 + 28) == 1)
  {
    v25 = 0;
    v26 = 19;
  }
  else
  {
    v29 = *(_DWORD *)(v24 + 24);
    v31 = *(_QWORD *)(v24 + 8);
    v30 = *(_QWORD *)(v24 + 16);
    v32 = *(_QWORD *)v24;
    v25 = swift_allocObject();
    *(_QWORD *)(v25 + 16) = v31;
    *(_QWORD *)(v25 + 24) = v30;
    *(_DWORD *)(v25 + 32) = v29;
    *(_BYTE *)(v25 + 36) = 0;
    *(_QWORD *)(v25 + 40) = v32;
    swift_retain();
    v26 = 18;
  }
  _setThreadGeometryProxyData();
  v33 = (double *)AGGraphGetValue();
  v34 = *v33;
  v35 = v33[1];
  v36 = (double *)AGGraphGetValue();
  *(double *)&v37 = v34 - *v36;
  *(double *)&v38 = v35 - v36[1];
  v39 = (__int128 *)AGGraphGetValue();
  v40 = *v1;
  v61 = v37;
  v62 = v38;
  v63 = *v39;
  v64 = v58;
  v65 = v25;
  v66 = (v26 << 32) | 0x4000000000000000;
  v67 = v52;
  v69 = v51;
  v68 = v53;
  v70 = v40;
  LOBYTE(v60) = *((_BYTE *)v1 + 36);
  outlined copy of DisplayList.Effect(v25, 0, v26);
  DisplayList.Item.canonicalize(options:)((char *)&v60);
  v41 = v61;
  v42 = v62;
  v43 = v63;
  v44 = v64;
  v45 = v65;
  v46 = v66;
  v47 = v67;
  v48 = v68 | (v69 << 16);
  v59 = v70;
  v49 = v66 >> 62;
  if (v66 >> 62 != 3 || (v48 & 0xFFFFFF) != 0 || v66 != 0xC000000000000000 || v67 | v65)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v50 = swift_allocObject();
    *(_OWORD *)(v50 + 16) = xmmword_23527E860;
    *(_QWORD *)(v50 + 32) = v41;
    *(_QWORD *)(v50 + 40) = v42;
    *(_OWORD *)(v50 + 48) = v43;
    *(_QWORD *)(v50 + 64) = v44;
    *(_QWORD *)(v50 + 72) = v45;
    *(_QWORD *)(v50 + 80) = v46;
    *(_QWORD *)(v50 + 88) = v47;
    *(_BYTE *)(v50 + 98) = BYTE2(v48);
    *(_WORD *)(v50 + 96) = v48;
    *(_DWORD *)(v50 + 100) = v59;
    __asm { BR              X10 }
  }
  outlined consume of DisplayList.Effect(v25, 0, v26);
  *(_QWORD *)v57 = MEMORY[0x24BEE4AF8];
  *(_WORD *)(v57 + 8) = 0;
  *(_BYTE *)(v57 + 10) = 0;
  return outlined consume of DisplayList.Item.Value(v45, 0xC000000000000000);
}

{
  int *v1;
  int v3;
  uint64_t v4;
  unsigned __int16 v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double *v25;
  double v26;
  double v27;
  double *v28;
  unint64_t v29;
  unint64_t v30;
  __int128 *v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  __int128 v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  unint64_t v42;
  uint64_t Value;
  uint64_t v44;
  uint64_t result;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unsigned __int16 v50;
  unsigned __int8 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  __int128 v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unsigned __int16 v62;
  unsigned __int8 v63;
  int v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v3 = *MEMORY[0x24BE096C0];
  v4 = MEMORY[0x24BEE4AF8];
  if (v1[8] != *MEMORY[0x24BE096C0])
  {
    Value = AGGraphGetValue();
    v7 = *(_QWORD *)Value;
    v5 = *(_WORD *)(Value + 8);
    v6 = *(_BYTE *)(Value + 10);
    swift_bridgeObjectRetain();
    if (*(_QWORD *)(v7 + 16))
      goto LABEL_3;
LABEL_10:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a1 = v4;
    *(_WORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 10) = 0;
    return result;
  }
  v5 = 0;
  v6 = 0;
  v7 = MEMORY[0x24BEE4AF8];
  if (!*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
    goto LABEL_10;
LABEL_3:
  v8 = ++static DisplayList.Version.lastValue;
  if (AGGraphGetCurrentAttribute() == v3)
  {
    __break(1u);
    JUMPOUT(0x234E22704);
  }
  v52 = v7;
  v53 = a1;
  v51 = v6;
  v9 = AGCreateWeakAttribute();
  v10 = v9;
  v49 = HIDWORD(v9);
  v11 = AGCreateWeakAttribute();
  v12 = v11;
  v48 = HIDWORD(v11);
  v13 = AGCreateWeakAttribute();
  v14 = v13;
  v47 = HIDWORD(v13);
  v15 = AGCreateWeakAttribute();
  v16 = v15;
  v50 = v5;
  v46 = HIDWORD(v15);
  v17 = AGCreateWeakAttribute();
  v18 = v17;
  v19 = HIDWORD(v17);
  v20 = AGCreateWeakAttribute();
  v21 = v20;
  v22 = v8;
  v23 = HIDWORD(v20);
  _threadGeometryProxyData();
  v55 = __PAIR64__(v49, v10);
  v56 = __PAIR64__(v48, v12);
  *(_QWORD *)&v57 = __PAIR64__(v47, v14);
  *((_QWORD *)&v57 + 1) = __PAIR64__(v46, v16);
  v58 = __PAIR64__(v19, v18);
  v59 = __PAIR64__(v23, v21);
  LODWORD(v60) = v22;
  _setThreadGeometryProxyData();
  v24 = *(unsigned __int8 *)AGGraphGetValue();
  _setThreadGeometryProxyData();
  v25 = (double *)AGGraphGetValue();
  v26 = *v25;
  v27 = v25[1];
  v28 = (double *)AGGraphGetValue();
  *(double *)&v29 = v26 - *v28;
  *(double *)&v30 = v27 - v28[1];
  v31 = (__int128 *)AGGraphGetValue();
  v32 = *v1;
  v55 = v29;
  v56 = v30;
  v57 = *v31;
  v58 = v22;
  v59 = v24;
  v60 = 0x4000000200000000;
  v61 = v52;
  v63 = v51;
  v62 = v50;
  v64 = v32;
  LOBYTE(v54) = *((_BYTE *)v1 + 36);
  DisplayList.Item.canonicalize(options:)((char *)&v54);
  v33 = v55;
  v34 = v56;
  v35 = v57;
  v37 = v58;
  v36 = v59;
  v38 = v60;
  v39 = v61;
  v40 = v62 | (v63 << 16);
  v41 = v64;
  v42 = v60 >> 62;
  if (v60 >> 62 != 3 || (v40 & 0xFFFFFF) != 0 || v60 != 0xC000000000000000 || v61 | v59)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v44 = swift_allocObject();
    *(_OWORD *)(v44 + 16) = xmmword_23527E860;
    *(_QWORD *)(v44 + 32) = v33;
    *(_QWORD *)(v44 + 40) = v34;
    *(_OWORD *)(v44 + 48) = v35;
    *(_QWORD *)(v44 + 64) = v37;
    *(_QWORD *)(v44 + 72) = v36;
    *(_QWORD *)(v44 + 80) = v38;
    *(_QWORD *)(v44 + 88) = v39;
    *(_BYTE *)(v44 + 98) = BYTE2(v40);
    *(_WORD *)(v44 + 96) = v40;
    *(_DWORD *)(v44 + 100) = v41;
    __asm { BR              X10 }
  }
  *(_QWORD *)v53 = MEMORY[0x24BEE4AF8];
  *(_WORD *)(v53 + 8) = 0;
  *(_BYTE *)(v53 + 10) = 0;
  return outlined consume of DisplayList.Item.Value(v36, 0xC000000000000000);
}

{
  int *v1;
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  double *v23;
  double v24;
  double v25;
  double *v26;
  unint64_t v27;
  unint64_t v28;
  __int128 *v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v33;
  unint64_t v34;
  uint64_t v35;
  __int128 v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t Value;
  uint64_t v41;
  uint64_t result;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  __int128 v54;
  unint64_t v55;
  __int128 v56;
  uint64_t v57;
  unsigned __int16 v58;
  unsigned __int8 v59;
  int v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v3 = *MEMORY[0x24BE096C0];
  v4 = MEMORY[0x24BEE4AF8];
  if (v1[8] != *MEMORY[0x24BE096C0])
  {
    Value = AGGraphGetValue();
    v6 = *(_QWORD *)Value;
    v50 = *(_WORD *)(Value + 8);
    v5 = *(_BYTE *)(Value + 10);
    swift_bridgeObjectRetain();
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_3;
LABEL_10:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a1 = v4;
    *(_WORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 10) = 0;
    return result;
  }
  v50 = 0;
  v5 = 0;
  v6 = MEMORY[0x24BEE4AF8];
  if (!*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
    goto LABEL_10;
LABEL_3:
  v7 = ++static DisplayList.Version.lastValue;
  if (AGGraphGetCurrentAttribute() == v3)
  {
    __break(1u);
    JUMPOUT(0x234E23284);
  }
  v48 = v6;
  v49 = a1;
  v47 = v5;
  v8 = AGCreateWeakAttribute();
  v9 = v8;
  v46 = HIDWORD(v8);
  v10 = AGCreateWeakAttribute();
  v11 = v10;
  v45 = HIDWORD(v10);
  v12 = AGCreateWeakAttribute();
  v13 = v12;
  v44 = HIDWORD(v12);
  v14 = AGCreateWeakAttribute();
  v15 = v14;
  v43 = HIDWORD(v14);
  v16 = AGCreateWeakAttribute();
  v17 = v16;
  v18 = HIDWORD(v16);
  v19 = AGCreateWeakAttribute();
  v20 = v19;
  v21 = v7;
  v22 = HIDWORD(v19);
  _threadGeometryProxyData();
  v52 = __PAIR64__(v46, v9);
  v53 = __PAIR64__(v45, v11);
  *(_QWORD *)&v54 = __PAIR64__(v44, v13);
  *((_QWORD *)&v54 + 1) = __PAIR64__(v43, v15);
  v55 = __PAIR64__(v18, v17);
  *(_QWORD *)&v56 = __PAIR64__(v22, v20);
  DWORD2(v56) = v21;
  _setThreadGeometryProxyData();
  _setThreadGeometryProxyData();
  v23 = (double *)AGGraphGetValue();
  v24 = *v23;
  v25 = v23[1];
  v26 = (double *)AGGraphGetValue();
  *(double *)&v27 = v24 - *v26;
  *(double *)&v28 = v25 - v26[1];
  v29 = (__int128 *)AGGraphGetValue();
  v30 = *v1;
  v52 = v27;
  v53 = v28;
  v54 = *v29;
  v55 = v21;
  v56 = xmmword_2352A5DA0;
  v57 = v48;
  v59 = v47;
  v58 = v50;
  v60 = v30;
  LOBYTE(v51) = *((_BYTE *)v1 + 36);
  DisplayList.Item.canonicalize(options:)((char *)&v51);
  v31 = v52;
  v32 = v53;
  v33 = v54;
  v34 = v55;
  v36 = v56;
  v35 = v57;
  v37 = v58 | (v59 << 16);
  v38 = v60;
  v39 = *((_QWORD *)&v56 + 1) >> 62;
  if (*((_QWORD *)&v56 + 1) >> 62 != 3
    || (v37 & 0xFFFFFF) != 0
    || *((_QWORD *)&v56 + 1) != 0xC000000000000000
    || v57 | (unint64_t)v56)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v41 = swift_allocObject();
    *(_OWORD *)(v41 + 16) = xmmword_23527E860;
    *(_QWORD *)(v41 + 32) = v31;
    *(_QWORD *)(v41 + 40) = v32;
    *(_OWORD *)(v41 + 48) = v33;
    *(_QWORD *)(v41 + 64) = v34;
    *(_OWORD *)(v41 + 72) = v36;
    *(_QWORD *)(v41 + 88) = v35;
    *(_BYTE *)(v41 + 98) = BYTE2(v37);
    *(_WORD *)(v41 + 96) = v37;
    *(_DWORD *)(v41 + 100) = v38;
    __asm { BR              X10 }
  }
  *(_QWORD *)v49 = MEMORY[0x24BEE4AF8];
  *(_WORD *)(v49 + 8) = 0;
  *(_BYTE *)(v49 + 10) = 0;
  return outlined consume of DisplayList.Item.Value(v36, 0xC000000000000000);
}

{
  int *v1;
  int v3;
  uint64_t v4;
  unsigned __int16 v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double *v25;
  double v26;
  double v27;
  double *v28;
  unint64_t v29;
  unint64_t v30;
  __int128 *v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  __int128 v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  unint64_t v42;
  uint64_t Value;
  uint64_t v44;
  uint64_t result;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unsigned __int16 v50;
  unsigned __int8 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  __int128 v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unsigned __int16 v62;
  unsigned __int8 v63;
  int v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v3 = *MEMORY[0x24BE096C0];
  v4 = MEMORY[0x24BEE4AF8];
  if (v1[8] != *MEMORY[0x24BE096C0])
  {
    Value = AGGraphGetValue();
    v7 = *(_QWORD *)Value;
    v5 = *(_WORD *)(Value + 8);
    v6 = *(_BYTE *)(Value + 10);
    swift_bridgeObjectRetain();
    if (*(_QWORD *)(v7 + 16))
      goto LABEL_3;
LABEL_10:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a1 = v4;
    *(_WORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 10) = 0;
    return result;
  }
  v5 = 0;
  v6 = 0;
  v7 = MEMORY[0x24BEE4AF8];
  if (!*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
    goto LABEL_10;
LABEL_3:
  v8 = ++static DisplayList.Version.lastValue;
  if (AGGraphGetCurrentAttribute() == v3)
  {
    __break(1u);
    JUMPOUT(0x234E23E14);
  }
  v52 = v7;
  v53 = a1;
  v51 = v6;
  v9 = AGCreateWeakAttribute();
  v10 = v9;
  v49 = HIDWORD(v9);
  v11 = AGCreateWeakAttribute();
  v12 = v11;
  v48 = HIDWORD(v11);
  v13 = AGCreateWeakAttribute();
  v14 = v13;
  v47 = HIDWORD(v13);
  v15 = AGCreateWeakAttribute();
  v16 = v15;
  v50 = v5;
  v46 = HIDWORD(v15);
  v17 = AGCreateWeakAttribute();
  v18 = v17;
  v19 = HIDWORD(v17);
  v20 = AGCreateWeakAttribute();
  v21 = v20;
  v22 = v8;
  v23 = HIDWORD(v20);
  _threadGeometryProxyData();
  v55 = __PAIR64__(v49, v10);
  v56 = __PAIR64__(v48, v12);
  *(_QWORD *)&v57 = __PAIR64__(v47, v14);
  *((_QWORD *)&v57 + 1) = __PAIR64__(v46, v16);
  v58 = __PAIR64__(v19, v18);
  v59 = __PAIR64__(v23, v21);
  LODWORD(v60) = v22;
  _setThreadGeometryProxyData();
  v24 = *(unsigned int *)AGGraphGetValue();
  _setThreadGeometryProxyData();
  v25 = (double *)AGGraphGetValue();
  v26 = *v25;
  v27 = v25[1];
  v28 = (double *)AGGraphGetValue();
  *(double *)&v29 = v26 - *v28;
  *(double *)&v30 = v27 - v28[1];
  v31 = (__int128 *)AGGraphGetValue();
  v32 = *v1;
  v55 = v29;
  v56 = v30;
  v57 = *v31;
  v58 = v22;
  v59 = v24;
  v60 = 0x4000000500000000;
  v61 = v52;
  v63 = v51;
  v62 = v50;
  v64 = v32;
  LOBYTE(v54) = *((_BYTE *)v1 + 36);
  DisplayList.Item.canonicalize(options:)((char *)&v54);
  v33 = v55;
  v34 = v56;
  v35 = v57;
  v37 = v58;
  v36 = v59;
  v38 = v60;
  v39 = v61;
  v40 = v62 | (v63 << 16);
  v41 = v64;
  v42 = v60 >> 62;
  if (v60 >> 62 != 3 || (v40 & 0xFFFFFF) != 0 || v60 != 0xC000000000000000 || v61 | v59)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v44 = swift_allocObject();
    *(_OWORD *)(v44 + 16) = xmmword_23527E860;
    *(_QWORD *)(v44 + 32) = v33;
    *(_QWORD *)(v44 + 40) = v34;
    *(_OWORD *)(v44 + 48) = v35;
    *(_QWORD *)(v44 + 64) = v37;
    *(_QWORD *)(v44 + 72) = v36;
    *(_QWORD *)(v44 + 80) = v38;
    *(_QWORD *)(v44 + 88) = v39;
    *(_BYTE *)(v44 + 98) = BYTE2(v40);
    *(_WORD *)(v44 + 96) = v40;
    *(_DWORD *)(v44 + 100) = v41;
    __asm { BR              X10 }
  }
  *(_QWORD *)v53 = MEMORY[0x24BEE4AF8];
  *(_WORD *)(v53 + 8) = 0;
  *(_BYTE *)(v53 + 10) = 0;
  return outlined consume of DisplayList.Item.Value(v36, 0xC000000000000000);
}

{
  int *v1;
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  double *v23;
  double v24;
  double v25;
  double *v26;
  unint64_t v27;
  unint64_t v28;
  __int128 *v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v33;
  unint64_t v34;
  uint64_t v35;
  __int128 v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t Value;
  uint64_t v41;
  uint64_t result;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  __int128 v54;
  unint64_t v55;
  __int128 v56;
  uint64_t v57;
  unsigned __int16 v58;
  unsigned __int8 v59;
  int v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v3 = *MEMORY[0x24BE096C0];
  v4 = MEMORY[0x24BEE4AF8];
  if (v1[8] != *MEMORY[0x24BE096C0])
  {
    Value = AGGraphGetValue();
    v6 = *(_QWORD *)Value;
    v50 = *(_WORD *)(Value + 8);
    v5 = *(_BYTE *)(Value + 10);
    swift_bridgeObjectRetain();
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_3;
LABEL_10:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a1 = v4;
    *(_WORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 10) = 0;
    return result;
  }
  v50 = 0;
  v5 = 0;
  v6 = MEMORY[0x24BEE4AF8];
  if (!*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
    goto LABEL_10;
LABEL_3:
  v7 = ++static DisplayList.Version.lastValue;
  if (AGGraphGetCurrentAttribute() == v3)
  {
    __break(1u);
    JUMPOUT(0x234E24994);
  }
  v48 = v6;
  v49 = a1;
  v47 = v5;
  v8 = AGCreateWeakAttribute();
  v9 = v8;
  v46 = HIDWORD(v8);
  v10 = AGCreateWeakAttribute();
  v11 = v10;
  v45 = HIDWORD(v10);
  v12 = AGCreateWeakAttribute();
  v13 = v12;
  v44 = HIDWORD(v12);
  v14 = AGCreateWeakAttribute();
  v15 = v14;
  v43 = HIDWORD(v14);
  v16 = AGCreateWeakAttribute();
  v17 = v16;
  v18 = HIDWORD(v16);
  v19 = AGCreateWeakAttribute();
  v20 = v19;
  v21 = v7;
  v22 = HIDWORD(v19);
  _threadGeometryProxyData();
  v52 = __PAIR64__(v46, v9);
  v53 = __PAIR64__(v45, v11);
  *(_QWORD *)&v54 = __PAIR64__(v44, v13);
  *((_QWORD *)&v54 + 1) = __PAIR64__(v43, v15);
  v55 = __PAIR64__(v18, v17);
  *(_QWORD *)&v56 = __PAIR64__(v22, v20);
  DWORD2(v56) = v21;
  _setThreadGeometryProxyData();
  _setThreadGeometryProxyData();
  v23 = (double *)AGGraphGetValue();
  v24 = *v23;
  v25 = v23[1];
  v26 = (double *)AGGraphGetValue();
  *(double *)&v27 = v24 - *v26;
  *(double *)&v28 = v25 - v26[1];
  v29 = (__int128 *)AGGraphGetValue();
  v30 = *v1;
  v52 = v27;
  v53 = v28;
  v54 = *v29;
  v55 = v21;
  v56 = xmmword_23529EF20;
  v57 = v48;
  v59 = v47;
  v58 = v50;
  v60 = v30;
  LOBYTE(v51) = *((_BYTE *)v1 + 36);
  DisplayList.Item.canonicalize(options:)((char *)&v51);
  v31 = v52;
  v32 = v53;
  v33 = v54;
  v34 = v55;
  v36 = v56;
  v35 = v57;
  v37 = v58 | (v59 << 16);
  v38 = v60;
  v39 = *((_QWORD *)&v56 + 1) >> 62;
  if (*((_QWORD *)&v56 + 1) >> 62 != 3
    || (v37 & 0xFFFFFF) != 0
    || *((_QWORD *)&v56 + 1) != 0xC000000000000000
    || v57 | (unint64_t)v56)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v41 = swift_allocObject();
    *(_OWORD *)(v41 + 16) = xmmword_23527E860;
    *(_QWORD *)(v41 + 32) = v31;
    *(_QWORD *)(v41 + 40) = v32;
    *(_OWORD *)(v41 + 48) = v33;
    *(_QWORD *)(v41 + 64) = v34;
    *(_OWORD *)(v41 + 72) = v36;
    *(_QWORD *)(v41 + 88) = v35;
    *(_BYTE *)(v41 + 98) = BYTE2(v37);
    *(_WORD *)(v41 + 96) = v37;
    *(_DWORD *)(v41 + 100) = v38;
    __asm { BR              X10 }
  }
  *(_QWORD *)v49 = MEMORY[0x24BEE4AF8];
  *(_WORD *)(v49 + 8) = 0;
  *(_BYTE *)(v49 + 10) = 0;
  return outlined consume of DisplayList.Item.Value(v36, 0xC000000000000000);
}

{
  int *v1;
  int v3;
  uint64_t v4;
  unsigned __int16 v5;
  unsigned __int8 v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double *v30;
  double v31;
  double v32;
  double *v33;
  unint64_t v34;
  unint64_t v35;
  __int128 *v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  __int128 v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  int v46;
  unint64_t v47;
  uint64_t Value;
  uint64_t v49;
  uint64_t result;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unsigned __int16 v55;
  id v56;
  unsigned __int8 v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  __int128 v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unsigned __int16 v67;
  unsigned __int8 v68;
  int v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  v3 = *MEMORY[0x24BE096C0];
  v4 = MEMORY[0x24BEE4AF8];
  if (v1[8] != *MEMORY[0x24BE096C0])
  {
    Value = AGGraphGetValue();
    v7 = *(_QWORD **)Value;
    v5 = *(_WORD *)(Value + 8);
    v6 = *(_BYTE *)(Value + 10);
    swift_bridgeObjectRetain();
    if (v7[2])
      goto LABEL_3;
LABEL_10:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a1 = v4;
    *(_WORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 10) = 0;
    return result;
  }
  v5 = 0;
  v6 = 0;
  v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (!*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
    goto LABEL_10;
LABEL_3:
  v8 = ++static DisplayList.Version.lastValue;
  if (AGGraphGetCurrentAttribute() == v3)
  {
    __break(1u);
    JUMPOUT(0x234E255E0);
  }
  v58 = a1;
  v54 = v8;
  v57 = v6;
  v9 = AGCreateWeakAttribute();
  v10 = v9;
  v53 = HIDWORD(v9);
  v11 = AGCreateWeakAttribute();
  v12 = v11;
  v52 = HIDWORD(v11);
  v13 = AGCreateWeakAttribute();
  v14 = v13;
  v51 = HIDWORD(v13);
  v15 = AGCreateWeakAttribute();
  v16 = v15;
  v56 = v7;
  v17 = HIDWORD(v15);
  v18 = AGCreateWeakAttribute();
  v55 = v5;
  v19 = v18;
  v20 = HIDWORD(v18);
  v21 = AGCreateWeakAttribute();
  v22 = v21;
  v23 = HIDWORD(v21);
  _threadGeometryProxyData();
  v60 = __PAIR64__(v53, v10);
  v61 = __PAIR64__(v52, v12);
  *(_QWORD *)&v62 = __PAIR64__(v51, v14);
  *((_QWORD *)&v62 + 1) = __PAIR64__(v17, v16);
  v63 = __PAIR64__(v20, v19);
  v64 = __PAIR64__(v23, v22);
  LODWORD(v65) = v54;
  _setThreadGeometryProxyData();
  v24 = AGGraphGetValue();
  v25 = *(_QWORD *)v24;
  v26 = *(_QWORD *)(v24 + 8);
  v28 = *(unsigned int *)(v24 + 16);
  v27 = *(unsigned int *)(v24 + 20);
  v29 = swift_allocObject();
  *(_QWORD *)(v29 + 16) = v25;
  *(_QWORD *)(v29 + 24) = v26;
  *(_QWORD *)(v29 + 32) = v27 | (v28 << 32);
  *(_OWORD *)(v29 + 40) = 0u;
  *(_OWORD *)(v29 + 56) = 0u;
  *(_OWORD *)(v29 + 72) = 0u;
  *(_OWORD *)(v29 + 88) = 0u;
  *(_OWORD *)(v29 + 104) = 0u;
  *(_OWORD *)(v29 + 116) = 0u;
  *(_BYTE *)(v29 + 132) = 11;
  _setThreadGeometryProxyData();
  v30 = (double *)AGGraphGetValue();
  v31 = *v30;
  v32 = v30[1];
  v33 = (double *)AGGraphGetValue();
  *(double *)&v34 = v31 - *v33;
  *(double *)&v35 = v32 - v33[1];
  v36 = (__int128 *)AGGraphGetValue();
  v37 = *v1;
  v60 = v34;
  v61 = v35;
  v62 = *v36;
  v63 = v54;
  v64 = v29;
  v65 = 0x4000000900000000;
  v66 = (unint64_t)v56;
  v68 = v57;
  v67 = v55;
  v69 = v37;
  LOBYTE(v59) = *((_BYTE *)v1 + 36);
  swift_retain();
  DisplayList.Item.canonicalize(options:)((char *)&v59);
  v38 = v60;
  v39 = v61;
  v40 = v62;
  v42 = v63;
  v41 = v64;
  v43 = v65;
  v44 = v66;
  v45 = v67 | (v68 << 16);
  v46 = v69;
  v47 = v65 >> 62;
  if (v65 >> 62 != 3 || (v45 & 0xFFFFFF) != 0 || v65 != 0xC000000000000000 || v66 | v64)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v49 = swift_allocObject();
    *(_OWORD *)(v49 + 16) = xmmword_23527E860;
    *(_QWORD *)(v49 + 32) = v38;
    *(_QWORD *)(v49 + 40) = v39;
    *(_OWORD *)(v49 + 48) = v40;
    *(_QWORD *)(v49 + 64) = v42;
    *(_QWORD *)(v49 + 72) = v41;
    *(_QWORD *)(v49 + 80) = v43;
    *(_QWORD *)(v49 + 88) = v44;
    *(_BYTE *)(v49 + 98) = BYTE2(v45);
    *(_WORD *)(v49 + 96) = v45;
    *(_DWORD *)(v49 + 100) = v46;
    __asm { BR              X10 }
  }
  swift_release();
  *(_QWORD *)v58 = MEMORY[0x24BEE4AF8];
  *(_WORD *)(v58 + 8) = 0;
  *(_BYTE *)(v58 + 10) = 0;
  return outlined consume of DisplayList.Item.Value(v41, 0xC000000000000000);
}

{
  int *v1;
  int v3;
  uint64_t v4;
  unsigned __int16 v5;
  unsigned __int8 v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  double v29;
  double v30;
  double *v31;
  unint64_t v32;
  unint64_t v33;
  __int128 *v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  int v44;
  unint64_t v45;
  uint64_t Value;
  uint64_t v47;
  uint64_t result;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unsigned __int16 v53;
  id v54;
  unsigned __int8 v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  __int128 v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unsigned __int16 v65;
  unsigned __int8 v66;
  int v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  v3 = *MEMORY[0x24BE096C0];
  v4 = MEMORY[0x24BEE4AF8];
  if (v1[8] != *MEMORY[0x24BE096C0])
  {
    Value = AGGraphGetValue();
    v7 = *(_QWORD **)Value;
    v5 = *(_WORD *)(Value + 8);
    v6 = *(_BYTE *)(Value + 10);
    swift_bridgeObjectRetain();
    if (v7[2])
      goto LABEL_3;
LABEL_10:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a1 = v4;
    *(_WORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 10) = 0;
    return result;
  }
  v5 = 0;
  v6 = 0;
  v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (!*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
    goto LABEL_10;
LABEL_3:
  v8 = ++static DisplayList.Version.lastValue;
  if (AGGraphGetCurrentAttribute() == v3)
  {
    __break(1u);
    JUMPOUT(0x234E26218);
  }
  v56 = a1;
  v52 = v8;
  v55 = v6;
  v9 = AGCreateWeakAttribute();
  v10 = v9;
  v51 = HIDWORD(v9);
  v11 = AGCreateWeakAttribute();
  v12 = v11;
  v50 = HIDWORD(v11);
  v13 = AGCreateWeakAttribute();
  v14 = v13;
  v49 = HIDWORD(v13);
  v15 = AGCreateWeakAttribute();
  v16 = v15;
  v54 = v7;
  v17 = HIDWORD(v15);
  v18 = AGCreateWeakAttribute();
  v53 = v5;
  v19 = v18;
  v20 = HIDWORD(v18);
  v21 = AGCreateWeakAttribute();
  v22 = v21;
  v23 = HIDWORD(v21);
  _threadGeometryProxyData();
  v58 = __PAIR64__(v51, v10);
  v59 = __PAIR64__(v50, v12);
  *(_QWORD *)&v60 = __PAIR64__(v49, v14);
  *((_QWORD *)&v60 + 1) = __PAIR64__(v17, v16);
  v61 = __PAIR64__(v20, v19);
  v62 = __PAIR64__(v23, v22);
  LODWORD(v63) = v52;
  _setThreadGeometryProxyData();
  v24 = (uint64_t *)AGGraphGetValue();
  v25 = *v24;
  v26 = v24[1];
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = v25;
  *(_QWORD *)(v27 + 24) = v26;
  *(_OWORD *)(v27 + 32) = 0u;
  *(_OWORD *)(v27 + 48) = 0u;
  *(_OWORD *)(v27 + 64) = 0u;
  *(_OWORD *)(v27 + 80) = 0u;
  *(_OWORD *)(v27 + 96) = 0u;
  *(_OWORD *)(v27 + 112) = 0u;
  *(_DWORD *)(v27 + 128) = 0;
  *(_BYTE *)(v27 + 132) = 5;
  _setThreadGeometryProxyData();
  v28 = (double *)AGGraphGetValue();
  v29 = *v28;
  v30 = v28[1];
  v31 = (double *)AGGraphGetValue();
  *(double *)&v32 = v29 - *v31;
  *(double *)&v33 = v30 - v31[1];
  v34 = (__int128 *)AGGraphGetValue();
  v35 = *v1;
  v58 = v32;
  v59 = v33;
  v60 = *v34;
  v61 = v52;
  v62 = v27;
  v63 = 0x4000000900000000;
  v64 = (unint64_t)v54;
  v66 = v55;
  v65 = v53;
  v67 = v35;
  LOBYTE(v57) = *((_BYTE *)v1 + 36);
  swift_retain();
  DisplayList.Item.canonicalize(options:)((char *)&v57);
  v36 = v58;
  v37 = v59;
  v38 = v60;
  v40 = v61;
  v39 = v62;
  v41 = v63;
  v42 = v64;
  v43 = v65 | (v66 << 16);
  v44 = v67;
  v45 = v63 >> 62;
  if (v63 >> 62 != 3 || (v43 & 0xFFFFFF) != 0 || v63 != 0xC000000000000000 || v64 | v62)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v47 = swift_allocObject();
    *(_OWORD *)(v47 + 16) = xmmword_23527E860;
    *(_QWORD *)(v47 + 32) = v36;
    *(_QWORD *)(v47 + 40) = v37;
    *(_OWORD *)(v47 + 48) = v38;
    *(_QWORD *)(v47 + 64) = v40;
    *(_QWORD *)(v47 + 72) = v39;
    *(_QWORD *)(v47 + 80) = v41;
    *(_QWORD *)(v47 + 88) = v42;
    *(_BYTE *)(v47 + 98) = BYTE2(v43);
    *(_WORD *)(v47 + 96) = v43;
    *(_DWORD *)(v47 + 100) = v44;
    __asm { BR              X10 }
  }
  swift_release();
  *(_QWORD *)v56 = MEMORY[0x24BEE4AF8];
  *(_WORD *)(v56 + 8) = 0;
  *(_BYTE *)(v56 + 10) = 0;
  return outlined consume of DisplayList.Item.Value(v39, 0xC000000000000000);
}

{
  int *v1;
  int v3;
  uint64_t v4;
  unsigned __int16 v5;
  unsigned __int8 v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double *v29;
  double v30;
  double v31;
  double *v32;
  unint64_t v33;
  unint64_t v34;
  __int128 *v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  __int128 v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  int v45;
  unint64_t v46;
  uint64_t Value;
  uint64_t v48;
  uint64_t result;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unsigned __int16 v54;
  id v55;
  unsigned __int8 v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  __int128 v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unsigned __int16 v66;
  unsigned __int8 v67;
  int v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v3 = *MEMORY[0x24BE096C0];
  v4 = MEMORY[0x24BEE4AF8];
  if (v1[8] != *MEMORY[0x24BE096C0])
  {
    Value = AGGraphGetValue();
    v7 = *(_QWORD **)Value;
    v5 = *(_WORD *)(Value + 8);
    v6 = *(_BYTE *)(Value + 10);
    swift_bridgeObjectRetain();
    if (v7[2])
      goto LABEL_3;
LABEL_10:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a1 = v4;
    *(_WORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 10) = 0;
    return result;
  }
  v5 = 0;
  v6 = 0;
  v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (!*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
    goto LABEL_10;
LABEL_3:
  v8 = ++static DisplayList.Version.lastValue;
  if (AGGraphGetCurrentAttribute() == v3)
  {
    __break(1u);
    JUMPOUT(0x234E26E60);
  }
  v57 = a1;
  v53 = v8;
  v56 = v6;
  v9 = AGCreateWeakAttribute();
  v10 = v9;
  v52 = HIDWORD(v9);
  v11 = AGCreateWeakAttribute();
  v12 = v11;
  v51 = HIDWORD(v11);
  v13 = AGCreateWeakAttribute();
  v14 = v13;
  v50 = HIDWORD(v13);
  v15 = AGCreateWeakAttribute();
  v16 = v15;
  v55 = v7;
  v17 = HIDWORD(v15);
  v18 = AGCreateWeakAttribute();
  v54 = v5;
  v19 = v18;
  v20 = HIDWORD(v18);
  v21 = AGCreateWeakAttribute();
  v22 = v21;
  v23 = HIDWORD(v21);
  _threadGeometryProxyData();
  v59 = __PAIR64__(v52, v10);
  v60 = __PAIR64__(v51, v12);
  *(_QWORD *)&v61 = __PAIR64__(v50, v14);
  *((_QWORD *)&v61 + 1) = __PAIR64__(v17, v16);
  v62 = __PAIR64__(v20, v19);
  v63 = __PAIR64__(v23, v22);
  LODWORD(v64) = v53;
  _setThreadGeometryProxyData();
  v24 = AGGraphGetValue();
  v25 = *(_QWORD *)v24;
  v26 = *(_QWORD *)(v24 + 8);
  v27 = *(unsigned int *)(v24 + 16);
  v28 = swift_allocObject();
  *(_QWORD *)(v28 + 16) = v25;
  *(_QWORD *)(v28 + 24) = v26;
  *(_QWORD *)(v28 + 32) = v27;
  *(_OWORD *)(v28 + 40) = 0u;
  *(_OWORD *)(v28 + 56) = 0u;
  *(_OWORD *)(v28 + 72) = 0u;
  *(_OWORD *)(v28 + 88) = 0u;
  *(_OWORD *)(v28 + 104) = 0u;
  *(_OWORD *)(v28 + 116) = 0u;
  *(_BYTE *)(v28 + 132) = 13;
  _setThreadGeometryProxyData();
  v29 = (double *)AGGraphGetValue();
  v30 = *v29;
  v31 = v29[1];
  v32 = (double *)AGGraphGetValue();
  *(double *)&v33 = v30 - *v32;
  *(double *)&v34 = v31 - v32[1];
  v35 = (__int128 *)AGGraphGetValue();
  v36 = *v1;
  v59 = v33;
  v60 = v34;
  v61 = *v35;
  v62 = v53;
  v63 = v28;
  v64 = 0x4000000900000000;
  v65 = (unint64_t)v55;
  v67 = v56;
  v66 = v54;
  v68 = v36;
  LOBYTE(v58) = *((_BYTE *)v1 + 36);
  swift_retain();
  DisplayList.Item.canonicalize(options:)((char *)&v58);
  v37 = v59;
  v38 = v60;
  v39 = v61;
  v41 = v62;
  v40 = v63;
  v42 = v64;
  v43 = v65;
  v44 = v66 | (v67 << 16);
  v45 = v68;
  v46 = v64 >> 62;
  if (v64 >> 62 != 3 || (v44 & 0xFFFFFF) != 0 || v64 != 0xC000000000000000 || v65 | v63)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v48 = swift_allocObject();
    *(_OWORD *)(v48 + 16) = xmmword_23527E860;
    *(_QWORD *)(v48 + 32) = v37;
    *(_QWORD *)(v48 + 40) = v38;
    *(_OWORD *)(v48 + 48) = v39;
    *(_QWORD *)(v48 + 64) = v41;
    *(_QWORD *)(v48 + 72) = v40;
    *(_QWORD *)(v48 + 80) = v42;
    *(_QWORD *)(v48 + 88) = v43;
    *(_BYTE *)(v48 + 98) = BYTE2(v44);
    *(_WORD *)(v48 + 96) = v44;
    *(_DWORD *)(v48 + 100) = v45;
    __asm { BR              X10 }
  }
  swift_release();
  *(_QWORD *)v57 = MEMORY[0x24BEE4AF8];
  *(_WORD *)(v57 + 8) = 0;
  *(_BYTE *)(v57 + 10) = 0;
  return outlined consume of DisplayList.Item.Value(v40, 0xC000000000000000);
}

{
  int *v1;
  int v3;
  uint64_t v4;
  unsigned __int16 v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  double *v35;
  double v36;
  double v37;
  double *v38;
  unint64_t v39;
  unint64_t v40;
  __int128 *v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  uint64_t Value;
  uint64_t v54;
  uint64_t result;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int16 v68;
  unsigned __int8 v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  __int128 v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unsigned __int16 v80;
  unsigned __int8 v81;
  int v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  v3 = *MEMORY[0x24BE096C0];
  v4 = MEMORY[0x24BEE4AF8];
  if (v1[8] != *MEMORY[0x24BE096C0])
  {
    Value = AGGraphGetValue();
    v7 = *(_QWORD *)Value;
    v5 = *(_WORD *)(Value + 8);
    v6 = *(_BYTE *)(Value + 10);
    swift_bridgeObjectRetain();
    if (*(_QWORD *)(v7 + 16))
      goto LABEL_3;
LABEL_12:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a1 = v4;
    *(_WORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 10) = 0;
    return result;
  }
  v5 = 0;
  v6 = 0;
  v7 = MEMORY[0x24BEE4AF8];
  if (!*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
    goto LABEL_12;
LABEL_3:
  v8 = ++static DisplayList.Version.lastValue;
  if (AGGraphGetCurrentAttribute() == v3)
  {
    __break(1u);
    JUMPOUT(0x234E29370);
  }
  v70 = a1;
  v71 = v8;
  v69 = v6;
  v9 = AGCreateWeakAttribute();
  v10 = v9;
  v65 = HIDWORD(v9);
  v11 = AGCreateWeakAttribute();
  v12 = v11;
  v63 = HIDWORD(v11);
  v13 = AGCreateWeakAttribute();
  v14 = v13;
  v61 = HIDWORD(v13);
  v15 = AGCreateWeakAttribute();
  v16 = v15;
  v68 = v5;
  v17 = HIDWORD(v15);
  v18 = AGCreateWeakAttribute();
  v19 = v18;
  v67 = v7;
  v20 = HIDWORD(v18);
  v21 = AGCreateWeakAttribute();
  v22 = v21;
  v23 = HIDWORD(v21);
  _threadGeometryProxyData();
  v73 = __PAIR64__(v65, v10);
  v74 = __PAIR64__(v63, v12);
  *(_QWORD *)&v75 = __PAIR64__(v61, v14);
  *((_QWORD *)&v75 + 1) = __PAIR64__(v17, v16);
  v76 = __PAIR64__(v20, v19);
  v77 = __PAIR64__(v23, v22);
  LODWORD(v78) = v71;
  _setThreadGeometryProxyData();
  v24 = AGGraphGetValue();
  v64 = *(unsigned __int8 *)(v24 + 8);
  v66 = *(_QWORD *)v24;
  LODWORD(v23) = *(unsigned __int8 *)(v24 + 9);
  v60 = *(_QWORD *)(v24 + 24);
  v62 = *(void **)(v24 + 16);
  v25 = *(_QWORD *)(v24 + 40);
  v26 = *(_QWORD *)(v24 + 48);
  v58 = *(_QWORD *)(v24 + 56);
  v59 = *(_QWORD *)(v24 + 32);
  v27 = *(_QWORD *)(v24 + 80);
  v56 = *(_QWORD *)(v24 + 72);
  v57 = *(_QWORD *)(v24 + 64);
  v28 = *(_QWORD *)(v24 + 88);
  v29 = *(_QWORD *)(v24 + 96);
  v30 = *(_QWORD *)(v24 + 104);
  v31 = *(_DWORD *)(v24 + 112);
  v32 = swift_allocObject();
  v33 = v32;
  v34 = 256;
  if (!(_DWORD)v23)
    v34 = 0;
  *(_QWORD *)(v32 + 16) = v66;
  *(_QWORD *)(v32 + 24) = v34 | v64;
  *(_QWORD *)(v32 + 32) = v62;
  *(_QWORD *)(v32 + 40) = v60;
  *(_QWORD *)(v32 + 48) = v59;
  *(_QWORD *)(v32 + 56) = v25;
  *(_QWORD *)(v32 + 64) = v26;
  *(_QWORD *)(v32 + 72) = v58;
  *(_QWORD *)(v32 + 80) = v57;
  *(_QWORD *)(v32 + 88) = v56;
  *(_QWORD *)(v32 + 96) = v27;
  *(_QWORD *)(v32 + 104) = v28;
  *(_QWORD *)(v32 + 112) = v29;
  *(_QWORD *)(v32 + 120) = v30;
  *(_DWORD *)(v32 + 128) = v31;
  *(_BYTE *)(v32 + 132) = 1;
  outlined copy of VariableBlurStyle.Mask(v62, v60, v59, v25, v26, v58, v57, v56, v27, v28, v29, v30, v31, BYTE1(v31));
  _setThreadGeometryProxyData();
  v35 = (double *)AGGraphGetValue();
  v36 = *v35;
  v37 = v35[1];
  v38 = (double *)AGGraphGetValue();
  *(double *)&v39 = v36 - *v38;
  *(double *)&v40 = v37 - v38[1];
  v41 = (__int128 *)AGGraphGetValue();
  v42 = *v1;
  v73 = v39;
  v74 = v40;
  v75 = *v41;
  v76 = v71;
  v77 = v33;
  v78 = 0x4000000900000000;
  v79 = v67;
  v81 = v69;
  v80 = v68;
  v82 = v42;
  LOBYTE(v72) = *((_BYTE *)v1 + 36);
  swift_retain();
  DisplayList.Item.canonicalize(options:)((char *)&v72);
  v43 = v73;
  v44 = v74;
  v45 = v75;
  v47 = v76;
  v46 = v77;
  v48 = v78;
  v49 = v79;
  v50 = v80 | (v81 << 16);
  v51 = v82;
  v52 = v78 >> 62;
  if (v78 >> 62 != 3 || (v50 & 0xFFFFFF) != 0 || v78 != 0xC000000000000000 || v79 | v77)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v54 = swift_allocObject();
    *(_OWORD *)(v54 + 16) = xmmword_23527E860;
    *(_QWORD *)(v54 + 32) = v43;
    *(_QWORD *)(v54 + 40) = v44;
    *(_OWORD *)(v54 + 48) = v45;
    *(_QWORD *)(v54 + 64) = v47;
    *(_QWORD *)(v54 + 72) = v46;
    *(_QWORD *)(v54 + 80) = v48;
    *(_QWORD *)(v54 + 88) = v49;
    *(_BYTE *)(v54 + 98) = BYTE2(v50);
    *(_WORD *)(v54 + 96) = v50;
    *(_DWORD *)(v54 + 100) = v51;
    __asm { BR              X10 }
  }
  swift_release();
  *(_QWORD *)v70 = MEMORY[0x24BEE4AF8];
  *(_WORD *)(v70 + 8) = 0;
  *(_BYTE *)(v70 + 10) = 0;
  return outlined consume of DisplayList.Item.Value(v46, 0xC000000000000000);
}

{
  int *v1;
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  double v27;
  double v28;
  double *v29;
  unint64_t v30;
  unint64_t v31;
  __int128 *v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  __int128 v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  uint64_t Value;
  uint64_t v44;
  uint64_t result;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  id v49;
  uint64_t v50;
  unsigned __int8 v51;
  uint64_t v52;
  unsigned __int16 v53;
  int v54;
  __int128 v55;
  unint64_t v56;
  unint64_t v57;
  __int128 v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unsigned __int16 v63;
  unsigned __int8 v64;
  int v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v3 = *MEMORY[0x24BE096C0];
  v4 = MEMORY[0x24BEE4AF8];
  if (v1[8] != *MEMORY[0x24BE096C0])
  {
    Value = AGGraphGetValue();
    v6 = *(_QWORD *)Value;
    v53 = *(_WORD *)(Value + 8);
    v5 = *(_BYTE *)(Value + 10);
    swift_bridgeObjectRetain();
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_3;
LABEL_10:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a1 = v4;
    *(_WORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 10) = 0;
    return result;
  }
  v53 = 0;
  v5 = 0;
  v6 = MEMORY[0x24BEE4AF8];
  if (!*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
    goto LABEL_10;
LABEL_3:
  v7 = ++static DisplayList.Version.lastValue;
  if (AGGraphGetCurrentAttribute() == v3)
  {
    __break(1u);
    JUMPOUT(0x234E29FD8);
  }
  v52 = a1;
  v49 = (id)v7;
  v8 = AGCreateWeakAttribute();
  v9 = v8;
  v48 = HIDWORD(v8);
  v10 = AGCreateWeakAttribute();
  v11 = v10;
  v47 = HIDWORD(v10);
  v12 = AGCreateWeakAttribute();
  v13 = v12;
  v46 = HIDWORD(v12);
  v14 = AGCreateWeakAttribute();
  v15 = v14;
  v51 = v5;
  v16 = HIDWORD(v14);
  v17 = AGCreateWeakAttribute();
  v18 = v17;
  v50 = v6;
  v19 = HIDWORD(v17);
  v20 = AGCreateWeakAttribute();
  v21 = v20;
  v22 = HIDWORD(v20);
  _threadGeometryProxyData();
  v56 = __PAIR64__(v48, v9);
  v57 = __PAIR64__(v47, v11);
  *(_QWORD *)&v58 = __PAIR64__(v46, v13);
  *((_QWORD *)&v58 + 1) = __PAIR64__(v16, v15);
  v59 = __PAIR64__(v19, v18);
  v60 = __PAIR64__(v22, v21);
  LODWORD(v61) = (_DWORD)v49;
  _setThreadGeometryProxyData();
  v23 = AGGraphGetValue();
  v24 = *(_QWORD *)v23;
  v25 = *(unsigned __int8 *)(v23 + 8);
  outlined copy of GraphicsBlendMode(*(_QWORD *)v23, v25);
  _setThreadGeometryProxyData();
  v26 = (double *)AGGraphGetValue();
  v27 = *v26;
  v28 = v26[1];
  v29 = (double *)AGGraphGetValue();
  *(double *)&v30 = v27 - *v29;
  *(double *)&v31 = v28 - v29[1];
  v32 = (__int128 *)AGGraphGetValue();
  v33 = *v1;
  v56 = v30;
  v57 = v31;
  v58 = *v32;
  v59 = (unint64_t)v49;
  v60 = v24;
  v61 = v25 | 0x4000000500000000;
  v62 = v50;
  v64 = v51;
  v63 = v53;
  v65 = v33;
  LOBYTE(v55) = *((_BYTE *)v1 + 36);
  outlined copy of GraphicsBlendMode(v24, v25);
  DisplayList.Item.canonicalize(options:)((char *)&v55);
  v34 = v56;
  v35 = v57;
  v36 = v58;
  v37 = v59;
  v38 = v60;
  v39 = v61;
  v40 = v62;
  v41 = v63 | (v64 << 16);
  v54 = v65;
  v42 = v61 >> 62;
  if (v61 >> 62 != 3 || (v41 & 0xFFFFFF) != 0 || v61 != 0xC000000000000000 || v62 | v60)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v44 = swift_allocObject();
    *(_OWORD *)(v44 + 16) = xmmword_23527E860;
    *(_QWORD *)(v44 + 32) = v34;
    *(_QWORD *)(v44 + 40) = v35;
    *(_OWORD *)(v44 + 48) = v36;
    *(_QWORD *)(v44 + 64) = v37;
    *(_QWORD *)(v44 + 72) = v38;
    *(_QWORD *)(v44 + 80) = v39;
    *(_QWORD *)(v44 + 88) = v40;
    *(_BYTE *)(v44 + 98) = BYTE2(v41);
    *(_WORD *)(v44 + 96) = v41;
    *(_DWORD *)(v44 + 100) = v54;
    __asm { BR              X10 }
  }
  outlined consume of GraphicsBlendMode(v24, v25);
  *(_QWORD *)v52 = MEMORY[0x24BEE4AF8];
  *(_WORD *)(v52 + 8) = 0;
  *(_BYTE *)(v52 + 10) = 0;
  return outlined consume of DisplayList.Item.Value(v38, 0xC000000000000000);
}

{
  int *v1;
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double *v25;
  double v26;
  double v27;
  double *v28;
  unint64_t v29;
  unint64_t v30;
  __int128 *v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  __int128 v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  uint64_t Value;
  uint64_t v43;
  uint64_t result;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  id v48;
  uint64_t v49;
  unsigned __int8 v50;
  uint64_t v51;
  unsigned __int16 v52;
  int v53;
  __int16 v54;
  uint64_t v55;
  unsigned __int8 v56;
  unint64_t v57;
  unint64_t v58;
  __int128 v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unsigned __int16 v64;
  unsigned __int8 v65;
  int v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v3 = *MEMORY[0x24BE096C0];
  v4 = MEMORY[0x24BEE4AF8];
  if (v1[8] != *MEMORY[0x24BE096C0])
  {
    Value = AGGraphGetValue();
    v6 = *(_QWORD *)Value;
    v52 = *(_WORD *)(Value + 8);
    v5 = *(_BYTE *)(Value + 10);
    swift_bridgeObjectRetain();
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_3;
LABEL_10:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a1 = v4;
    *(_WORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 10) = 0;
    return result;
  }
  v52 = 0;
  v5 = 0;
  v6 = MEMORY[0x24BEE4AF8];
  if (!*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
    goto LABEL_10;
LABEL_3:
  v7 = ++static DisplayList.Version.lastValue;
  if (AGGraphGetCurrentAttribute() == v3)
  {
    __break(1u);
    JUMPOUT(0x234E2AC48);
  }
  v51 = a1;
  v48 = (id)v7;
  v8 = AGCreateWeakAttribute();
  v9 = v8;
  v47 = HIDWORD(v8);
  v10 = AGCreateWeakAttribute();
  v11 = v10;
  v46 = HIDWORD(v10);
  v12 = AGCreateWeakAttribute();
  v13 = v12;
  v45 = HIDWORD(v12);
  v14 = AGCreateWeakAttribute();
  v15 = v14;
  v50 = v5;
  v16 = HIDWORD(v14);
  v17 = AGCreateWeakAttribute();
  v18 = v17;
  v49 = v6;
  v19 = HIDWORD(v17);
  v20 = AGCreateWeakAttribute();
  v21 = v20;
  v22 = HIDWORD(v20);
  _threadGeometryProxyData();
  v57 = __PAIR64__(v47, v9);
  v58 = __PAIR64__(v46, v11);
  *(_QWORD *)&v59 = __PAIR64__(v45, v13);
  *((_QWORD *)&v59 + 1) = __PAIR64__(v16, v15);
  v60 = __PAIR64__(v19, v18);
  v61 = __PAIR64__(v22, v21);
  LODWORD(v62) = (_DWORD)v48;
  _setThreadGeometryProxyData();
  LOBYTE(v54) = *(_BYTE *)AGGraphGetValue();
  GraphicsBlendMode.init(_:)((char *)&v54, (uint64_t)&v55);
  v23 = v55;
  v24 = v56;
  _setThreadGeometryProxyData();
  v25 = (double *)AGGraphGetValue();
  v26 = *v25;
  v27 = v25[1];
  v28 = (double *)AGGraphGetValue();
  *(double *)&v29 = v26 - *v28;
  *(double *)&v30 = v27 - v28[1];
  v31 = (__int128 *)AGGraphGetValue();
  v32 = *v1;
  v57 = v29;
  v58 = v30;
  v59 = *v31;
  v60 = (unint64_t)v48;
  v61 = v23;
  v62 = v24 | 0x4000000500000000;
  v63 = v49;
  v65 = v50;
  v64 = v52;
  v66 = v32;
  LOBYTE(v55) = *((_BYTE *)v1 + 36);
  outlined copy of GraphicsBlendMode(v23, v24);
  DisplayList.Item.canonicalize(options:)((char *)&v55);
  v33 = v57;
  v34 = v58;
  v35 = v59;
  v36 = v60;
  v37 = v61;
  v38 = v62;
  v39 = v63;
  v40 = v64 | (v65 << 16);
  v53 = v66;
  v41 = v62 >> 62;
  if (v62 >> 62 != 3 || (v40 & 0xFFFFFF) != 0 || v62 != 0xC000000000000000 || v63 | v61)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v43 = swift_allocObject();
    *(_OWORD *)(v43 + 16) = xmmword_23527E860;
    *(_QWORD *)(v43 + 32) = v33;
    *(_QWORD *)(v43 + 40) = v34;
    *(_OWORD *)(v43 + 48) = v35;
    *(_QWORD *)(v43 + 64) = v36;
    *(_QWORD *)(v43 + 72) = v37;
    *(_QWORD *)(v43 + 80) = v38;
    *(_QWORD *)(v43 + 88) = v39;
    *(_BYTE *)(v43 + 98) = BYTE2(v40);
    *(_WORD *)(v43 + 96) = v40;
    *(_DWORD *)(v43 + 100) = v53;
    __asm { BR              X10 }
  }
  outlined consume of GraphicsBlendMode(v23, v24);
  *(_QWORD *)v51 = MEMORY[0x24BEE4AF8];
  *(_WORD *)(v51 + 8) = 0;
  *(_BYTE *)(v51 + 10) = 0;
  return outlined consume of DisplayList.Item.Value(v37, 0xC000000000000000);
}

{
  int *v1;
  int v3;
  uint64_t v4;
  unsigned __int16 v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  double *v33;
  double v34;
  double v35;
  double *v36;
  unint64_t v37;
  unint64_t v38;
  __int128 *v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  __int128 v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  unint64_t v50;
  uint64_t Value;
  uint64_t v52;
  uint64_t result;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  unsigned __int16 v65;
  uint64_t v66;
  unsigned __int8 v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  __int128 v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unsigned __int16 v78;
  unsigned __int8 v79;
  int v80;
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  v3 = *MEMORY[0x24BE096C0];
  v4 = MEMORY[0x24BEE4AF8];
  if (v1[8] != *MEMORY[0x24BE096C0])
  {
    Value = AGGraphGetValue();
    v7 = *(_QWORD *)Value;
    v5 = *(_WORD *)(Value + 8);
    v6 = *(_BYTE *)(Value + 10);
    swift_bridgeObjectRetain();
    if (*(_QWORD *)(v7 + 16))
      goto LABEL_3;
LABEL_10:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a1 = v4;
    *(_WORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 10) = 0;
    return result;
  }
  v5 = 0;
  v6 = 0;
  v7 = MEMORY[0x24BEE4AF8];
  if (!*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
    goto LABEL_10;
LABEL_3:
  v8 = ++static DisplayList.Version.lastValue;
  if (AGGraphGetCurrentAttribute() == v3)
  {
    __break(1u);
    JUMPOUT(0x234E2C4F0);
  }
  v68 = a1;
  v69 = v8;
  v67 = v6;
  v9 = AGCreateWeakAttribute();
  v10 = v9;
  v63 = HIDWORD(v9);
  v11 = AGCreateWeakAttribute();
  v12 = v11;
  v61 = HIDWORD(v11);
  v13 = AGCreateWeakAttribute();
  v14 = v13;
  v59 = HIDWORD(v13);
  v15 = AGCreateWeakAttribute();
  v16 = v15;
  v66 = v7;
  v17 = HIDWORD(v15);
  v18 = AGCreateWeakAttribute();
  v65 = v5;
  v19 = v18;
  v20 = HIDWORD(v18);
  v21 = AGCreateWeakAttribute();
  v22 = v21;
  v23 = HIDWORD(v21);
  _threadGeometryProxyData();
  v71 = __PAIR64__(v63, v10);
  v72 = __PAIR64__(v61, v12);
  *(_QWORD *)&v73 = __PAIR64__(v59, v14);
  *((_QWORD *)&v73 + 1) = __PAIR64__(v17, v16);
  v74 = __PAIR64__(v20, v19);
  v75 = __PAIR64__(v23, v22);
  LODWORD(v76) = v69;
  _setThreadGeometryProxyData();
  v24 = AGGraphGetValue();
  v62 = *(_QWORD *)(v24 + 8);
  v64 = *(void **)v24;
  v58 = *(_QWORD *)(v24 + 24);
  v60 = *(void **)(v24 + 16);
  v56 = *(_QWORD *)(v24 + 40);
  v57 = *(_QWORD *)(v24 + 32);
  v25 = *(_QWORD *)(v24 + 64);
  v54 = *(_QWORD *)(v24 + 56);
  v55 = *(_QWORD *)(v24 + 48);
  v26 = *(_QWORD *)(v24 + 72);
  v27 = *(_QWORD *)(v24 + 80);
  v28 = *(_QWORD *)(v24 + 88);
  v29 = *(_QWORD *)(v24 + 96);
  v30 = *(_QWORD *)(v24 + 104);
  v31 = *(_DWORD *)(v24 + 112);
  LOBYTE(v10) = *(_BYTE *)(v24 + 116);
  v32 = swift_allocObject();
  *(_QWORD *)(v32 + 16) = v64;
  *(_QWORD *)(v32 + 24) = v62;
  *(_QWORD *)(v32 + 32) = v60;
  *(_QWORD *)(v32 + 40) = v58;
  *(_QWORD *)(v32 + 48) = v57;
  *(_QWORD *)(v32 + 56) = v56;
  *(_QWORD *)(v32 + 64) = v55;
  *(_QWORD *)(v32 + 72) = v54;
  *(_QWORD *)(v32 + 80) = v25;
  *(_QWORD *)(v32 + 88) = v26;
  *(_QWORD *)(v32 + 96) = v27;
  *(_QWORD *)(v32 + 104) = v28;
  *(_QWORD *)(v32 + 112) = v29;
  *(_QWORD *)(v32 + 120) = v30;
  *(_DWORD *)(v32 + 128) = v31;
  *(_BYTE *)(v32 + 132) = v10;
  outlined copy of GraphicsFilter(v64, v62, v60, v58, v57, v56, v55, v54, v25, v26, v27, v28, v29, v30, v31, SBYTE2(v31));
  _setThreadGeometryProxyData();
  v33 = (double *)AGGraphGetValue();
  v34 = *v33;
  v35 = v33[1];
  v36 = (double *)AGGraphGetValue();
  *(double *)&v37 = v34 - *v36;
  *(double *)&v38 = v35 - v36[1];
  v39 = (__int128 *)AGGraphGetValue();
  v40 = *v1;
  v71 = v37;
  v72 = v38;
  v73 = *v39;
  v74 = v69;
  v75 = v32;
  v76 = 0x4000000900000000;
  v77 = v66;
  v79 = v67;
  v78 = v65;
  v80 = v40;
  LOBYTE(v70) = *((_BYTE *)v1 + 36);
  swift_retain();
  DisplayList.Item.canonicalize(options:)((char *)&v70);
  v41 = v71;
  v42 = v72;
  v43 = v73;
  v45 = v74;
  v44 = v75;
  v46 = v76;
  v47 = v77;
  v48 = v78 | (v79 << 16);
  v49 = v80;
  v50 = v76 >> 62;
  if (v76 >> 62 != 3 || (v48 & 0xFFFFFF) != 0 || v76 != 0xC000000000000000 || v77 | v75)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v52 = swift_allocObject();
    *(_OWORD *)(v52 + 16) = xmmword_23527E860;
    *(_QWORD *)(v52 + 32) = v41;
    *(_QWORD *)(v52 + 40) = v42;
    *(_OWORD *)(v52 + 48) = v43;
    *(_QWORD *)(v52 + 64) = v45;
    *(_QWORD *)(v52 + 72) = v44;
    *(_QWORD *)(v52 + 80) = v46;
    *(_QWORD *)(v52 + 88) = v47;
    *(_BYTE *)(v52 + 98) = BYTE2(v48);
    *(_WORD *)(v52 + 96) = v48;
    *(_DWORD *)(v52 + 100) = v49;
    __asm { BR              X10 }
  }
  swift_release();
  *(_QWORD *)v68 = MEMORY[0x24BEE4AF8];
  *(_WORD *)(v68 + 8) = 0;
  *(_BYTE *)(v68 + 10) = 0;
  return outlined consume of DisplayList.Item.Value(v44, 0xC000000000000000);
}

{
  int *v1;
  int v3;
  uint64_t v4;
  unsigned __int16 v5;
  unsigned __int8 v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double *v29;
  double v30;
  double v31;
  double *v32;
  unint64_t v33;
  unint64_t v34;
  __int128 *v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  __int128 v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  int v45;
  unint64_t v46;
  uint64_t Value;
  uint64_t v48;
  uint64_t result;
  unint64_t v50;
  unint64_t v51;
  __int128 v52;
  unint64_t v53;
  __int128 v54;
  unint64_t v55;
  unsigned __int16 v56;
  id v57;
  unsigned __int8 v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  __int128 v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unsigned __int16 v68;
  unsigned __int8 v69;
  int v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v3 = *MEMORY[0x24BE096C0];
  v4 = MEMORY[0x24BEE4AF8];
  if (v1[8] != *MEMORY[0x24BE096C0])
  {
    Value = AGGraphGetValue();
    v7 = *(_QWORD **)Value;
    v5 = *(_WORD *)(Value + 8);
    v6 = *(_BYTE *)(Value + 10);
    swift_bridgeObjectRetain();
    if (v7[2])
      goto LABEL_3;
LABEL_10:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a1 = v4;
    *(_WORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 10) = 0;
    return result;
  }
  v5 = 0;
  v6 = 0;
  v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (!*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
    goto LABEL_10;
LABEL_3:
  v8 = ++static DisplayList.Version.lastValue;
  if (AGGraphGetCurrentAttribute() == v3)
  {
    __break(1u);
    JUMPOUT(0x234E2D148);
  }
  v59 = a1;
  v55 = v8;
  v58 = v6;
  v9 = AGCreateWeakAttribute();
  v10 = v9;
  v53 = HIDWORD(v9);
  v11 = AGCreateWeakAttribute();
  v12 = v11;
  v51 = HIDWORD(v11);
  v13 = AGCreateWeakAttribute();
  v14 = v13;
  v50 = HIDWORD(v13);
  v15 = AGCreateWeakAttribute();
  v16 = v15;
  v57 = v7;
  v17 = HIDWORD(v15);
  v18 = AGCreateWeakAttribute();
  v56 = v5;
  v19 = v18;
  v20 = HIDWORD(v18);
  v21 = AGCreateWeakAttribute();
  v22 = v21;
  v23 = HIDWORD(v21);
  _threadGeometryProxyData();
  v61 = __PAIR64__(v53, v10);
  v62 = __PAIR64__(v51, v12);
  *(_QWORD *)&v63 = __PAIR64__(v50, v14);
  *((_QWORD *)&v63 + 1) = __PAIR64__(v17, v16);
  v64 = __PAIR64__(v20, v19);
  v65 = __PAIR64__(v23, v22);
  LODWORD(v66) = v55;
  _setThreadGeometryProxyData();
  v24 = AGGraphGetValue();
  v52 = *(_OWORD *)(v24 + 16);
  v54 = *(_OWORD *)v24;
  v25 = *(_QWORD *)(v24 + 32);
  v26 = *(unsigned int *)(v24 + 40);
  v27 = *(unsigned __int8 *)(v24 + 44);
  v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = v54;
  *(_OWORD *)(v28 + 32) = v52;
  *(_QWORD *)(v28 + 48) = v25;
  *(_QWORD *)(v28 + 56) = v26 | (v27 << 32);
  *(_OWORD *)(v28 + 64) = 0u;
  *(_OWORD *)(v28 + 80) = 0u;
  *(_OWORD *)(v28 + 96) = 0u;
  *(_OWORD *)(v28 + 112) = 0u;
  *(_DWORD *)(v28 + 128) = 0;
  *(_BYTE *)(v28 + 132) = 2;
  _setThreadGeometryProxyData();
  v29 = (double *)AGGraphGetValue();
  v30 = *v29;
  v31 = v29[1];
  v32 = (double *)AGGraphGetValue();
  *(double *)&v33 = v30 - *v32;
  *(double *)&v34 = v31 - v32[1];
  v35 = (__int128 *)AGGraphGetValue();
  v36 = *v1;
  v61 = v33;
  v62 = v34;
  v63 = *v35;
  v64 = v55;
  v65 = v28;
  v66 = 0x4000000900000000;
  v67 = (unint64_t)v57;
  v69 = v58;
  v68 = v56;
  v70 = v36;
  LOBYTE(v60) = *((_BYTE *)v1 + 36);
  swift_retain();
  DisplayList.Item.canonicalize(options:)((char *)&v60);
  v37 = v61;
  v38 = v62;
  v39 = v63;
  v41 = v64;
  v40 = v65;
  v42 = v66;
  v43 = v67;
  v44 = v68 | (v69 << 16);
  v45 = v70;
  v46 = v66 >> 62;
  if (v66 >> 62 != 3 || (v44 & 0xFFFFFF) != 0 || v66 != 0xC000000000000000 || v67 | v65)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v48 = swift_allocObject();
    *(_OWORD *)(v48 + 16) = xmmword_23527E860;
    *(_QWORD *)(v48 + 32) = v37;
    *(_QWORD *)(v48 + 40) = v38;
    *(_OWORD *)(v48 + 48) = v39;
    *(_QWORD *)(v48 + 64) = v41;
    *(_QWORD *)(v48 + 72) = v40;
    *(_QWORD *)(v48 + 80) = v42;
    *(_QWORD *)(v48 + 88) = v43;
    *(_BYTE *)(v48 + 98) = BYTE2(v44);
    *(_WORD *)(v48 + 96) = v44;
    *(_DWORD *)(v48 + 100) = v45;
    __asm { BR              X10 }
  }
  swift_release();
  *(_QWORD *)v59 = MEMORY[0x24BEE4AF8];
  *(_WORD *)(v59 + 8) = 0;
  *(_BYTE *)(v59 + 10) = 0;
  return outlined consume of DisplayList.Item.Value(v40, 0xC000000000000000);
}

{
  int *v1;
  int v3;
  uint64_t v4;
  unsigned __int16 v5;
  unsigned __int8 v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  double v29;
  double v30;
  double *v31;
  unint64_t v32;
  unint64_t v33;
  __int128 *v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  int v44;
  unint64_t v45;
  uint64_t Value;
  uint64_t v47;
  uint64_t result;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unsigned __int16 v53;
  id v54;
  unsigned __int8 v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  __int128 v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unsigned __int16 v65;
  unsigned __int8 v66;
  int v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  v3 = *MEMORY[0x24BE096C0];
  v4 = MEMORY[0x24BEE4AF8];
  if (v1[8] != *MEMORY[0x24BE096C0])
  {
    Value = AGGraphGetValue();
    v7 = *(_QWORD **)Value;
    v5 = *(_WORD *)(Value + 8);
    v6 = *(_BYTE *)(Value + 10);
    swift_bridgeObjectRetain();
    if (v7[2])
      goto LABEL_3;
LABEL_10:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a1 = v4;
    *(_WORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 10) = 0;
    return result;
  }
  v5 = 0;
  v6 = 0;
  v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (!*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
    goto LABEL_10;
LABEL_3:
  v8 = ++static DisplayList.Version.lastValue;
  if (AGGraphGetCurrentAttribute() == v3)
  {
    __break(1u);
    JUMPOUT(0x234E2DD7CLL);
  }
  v56 = a1;
  v52 = v8;
  v55 = v6;
  v9 = AGCreateWeakAttribute();
  v10 = v9;
  v51 = HIDWORD(v9);
  v11 = AGCreateWeakAttribute();
  v12 = v11;
  v50 = HIDWORD(v11);
  v13 = AGCreateWeakAttribute();
  v14 = v13;
  v49 = HIDWORD(v13);
  v15 = AGCreateWeakAttribute();
  v16 = v15;
  v54 = v7;
  v17 = HIDWORD(v15);
  v18 = AGCreateWeakAttribute();
  v53 = v5;
  v19 = v18;
  v20 = HIDWORD(v18);
  v21 = AGCreateWeakAttribute();
  v22 = v21;
  v23 = HIDWORD(v21);
  _threadGeometryProxyData();
  v58 = __PAIR64__(v51, v10);
  v59 = __PAIR64__(v50, v12);
  *(_QWORD *)&v60 = __PAIR64__(v49, v14);
  *((_QWORD *)&v60 + 1) = __PAIR64__(v17, v16);
  v61 = __PAIR64__(v20, v19);
  v62 = __PAIR64__(v23, v22);
  LODWORD(v63) = v52;
  _setThreadGeometryProxyData();
  v24 = AGGraphGetValue();
  v25 = *(_QWORD *)v24;
  v26 = *(unsigned __int8 *)(v24 + 8);
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = v25;
  *(_QWORD *)(v27 + 24) = v26;
  *(_OWORD *)(v27 + 32) = 0u;
  *(_OWORD *)(v27 + 48) = 0u;
  *(_OWORD *)(v27 + 64) = 0u;
  *(_OWORD *)(v27 + 80) = 0u;
  *(_OWORD *)(v27 + 96) = 0u;
  *(_OWORD *)(v27 + 112) = 0u;
  *(_QWORD *)(v27 + 125) = 0;
  _setThreadGeometryProxyData();
  v28 = (double *)AGGraphGetValue();
  v29 = *v28;
  v30 = v28[1];
  v31 = (double *)AGGraphGetValue();
  *(double *)&v32 = v29 - *v31;
  *(double *)&v33 = v30 - v31[1];
  v34 = (__int128 *)AGGraphGetValue();
  v35 = *v1;
  v58 = v32;
  v59 = v33;
  v60 = *v34;
  v61 = v52;
  v62 = v27;
  v63 = 0x4000000900000000;
  v64 = (unint64_t)v54;
  v66 = v55;
  v65 = v53;
  v67 = v35;
  LOBYTE(v57) = *((_BYTE *)v1 + 36);
  swift_retain();
  DisplayList.Item.canonicalize(options:)((char *)&v57);
  v36 = v58;
  v37 = v59;
  v38 = v60;
  v40 = v61;
  v39 = v62;
  v41 = v63;
  v42 = v64;
  v43 = v65 | (v66 << 16);
  v44 = v67;
  v45 = v63 >> 62;
  if (v63 >> 62 != 3 || (v43 & 0xFFFFFF) != 0 || v63 != 0xC000000000000000 || v64 | v62)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v47 = swift_allocObject();
    *(_OWORD *)(v47 + 16) = xmmword_23527E860;
    *(_QWORD *)(v47 + 32) = v36;
    *(_QWORD *)(v47 + 40) = v37;
    *(_OWORD *)(v47 + 48) = v38;
    *(_QWORD *)(v47 + 64) = v40;
    *(_QWORD *)(v47 + 72) = v39;
    *(_QWORD *)(v47 + 80) = v41;
    *(_QWORD *)(v47 + 88) = v42;
    *(_BYTE *)(v47 + 98) = BYTE2(v43);
    *(_WORD *)(v47 + 96) = v43;
    *(_DWORD *)(v47 + 100) = v44;
    __asm { BR              X10 }
  }
  swift_release();
  *(_QWORD *)v56 = MEMORY[0x24BEE4AF8];
  *(_WORD *)(v56 + 8) = 0;
  *(_BYTE *)(v56 + 10) = 0;
  return outlined consume of DisplayList.Item.Value(v39, 0xC000000000000000);
}

uint64_t specialized RendererEffectDisplayList.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int *v2;
  int v5;
  uint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double *v29;
  double v30;
  double v31;
  double *v32;
  unint64_t v33;
  unint64_t v34;
  __int128 *v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  __int128 v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  unint64_t v46;
  uint64_t Value;
  uint64_t v48;
  uint64_t result;
  unint64_t v50;
  __int128 v51;
  unint64_t v52;
  __int128 v53;
  unint64_t v54;
  __int128 v55;
  unint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int16 v60;
  uint64_t v61;
  unsigned __int8 v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  __int128 v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unsigned __int16 v71;
  unsigned __int8 v72;
  int v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  v5 = *MEMORY[0x24BE096C0];
  v6 = MEMORY[0x24BEE4AF8];
  if (v2[8] != *MEMORY[0x24BE096C0])
  {
    Value = AGGraphGetValue();
    v8 = *(_QWORD *)Value;
    v7 = *(_WORD *)(Value + 8);
    v62 = *(_BYTE *)(Value + 10);
    swift_bridgeObjectRetain();
    if (*(_QWORD *)(v8 + 16))
      goto LABEL_3;
LABEL_10:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a2 = v6;
    *(_WORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 10) = 0;
    return result;
  }
  v7 = 0;
  v62 = 0;
  v8 = MEMORY[0x24BEE4AF8];
  if (!*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
    goto LABEL_10;
LABEL_3:
  v9 = ++static DisplayList.Version.lastValue;
  if (AGGraphGetCurrentAttribute() == v5)
  {
    __break(1u);
    JUMPOUT(0x234E27ACCLL);
  }
  v61 = a2;
  v58 = a1;
  v10 = AGCreateWeakAttribute();
  v11 = v10;
  v54 = HIDWORD(v10);
  v12 = AGCreateWeakAttribute();
  v60 = v7;
  v13 = v12;
  v52 = HIDWORD(v12);
  v14 = AGCreateWeakAttribute();
  v15 = v14;
  v50 = HIDWORD(v14);
  v16 = AGCreateWeakAttribute();
  v56 = v9;
  v17 = v16;
  v18 = HIDWORD(v16);
  v19 = AGCreateWeakAttribute();
  v59 = v8;
  v20 = v19;
  v21 = HIDWORD(v19);
  v22 = AGCreateWeakAttribute();
  v23 = v22;
  v24 = HIDWORD(v22);
  _threadGeometryProxyData();
  v64 = __PAIR64__(v54, v11);
  v65 = __PAIR64__(v52, v13);
  *(_QWORD *)&v66 = __PAIR64__(v50, v15);
  *((_QWORD *)&v66 + 1) = __PAIR64__(v18, v17);
  v67 = __PAIR64__(v21, v20);
  v68 = __PAIR64__(v24, v23);
  LODWORD(v69) = v56;
  _setThreadGeometryProxyData();
  v25 = AGGraphGetValue();
  v57 = *(_OWORD *)v25;
  v53 = *(_OWORD *)(v25 + 32);
  v55 = *(_OWORD *)(v25 + 16);
  v51 = *(_OWORD *)(v25 + 48);
  v26 = *(_QWORD *)(v25 + 64);
  v27 = *(_QWORD *)(v25 + 72);
  v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = v57;
  *(_OWORD *)(v28 + 32) = v55;
  *(_OWORD *)(v28 + 48) = v53;
  *(_OWORD *)(v28 + 64) = v51;
  *(_QWORD *)(v28 + 80) = v26;
  *(_QWORD *)(v28 + 88) = v27;
  *(_QWORD *)(v28 + 96) = v58;
  *(_BYTE *)(v28 + 132) = 4;
  _setThreadGeometryProxyData();
  v29 = (double *)AGGraphGetValue();
  v30 = *v29;
  v31 = v29[1];
  v32 = (double *)AGGraphGetValue();
  *(double *)&v33 = v30 - *v32;
  *(double *)&v34 = v31 - v32[1];
  v35 = (__int128 *)AGGraphGetValue();
  v36 = *v2;
  v64 = v33;
  v65 = v34;
  v66 = *v35;
  v67 = v56;
  v68 = v28;
  v69 = 0x4000000900000000;
  v70 = v59;
  v72 = v62;
  v71 = v60;
  v73 = v36;
  LOBYTE(v63) = *((_BYTE *)v2 + 36);
  swift_retain();
  DisplayList.Item.canonicalize(options:)((char *)&v63);
  v37 = v64;
  v38 = v65;
  v39 = v66;
  v41 = v67;
  v40 = v68;
  v42 = v69;
  v43 = v70;
  v44 = v71 | (v72 << 16);
  v45 = v73;
  v46 = v69 >> 62;
  if (v69 >> 62 != 3 || (v44 & 0xFFFFFF) != 0 || v69 != 0xC000000000000000 || v70 | v68)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v48 = swift_allocObject();
    *(_OWORD *)(v48 + 16) = xmmword_23527E860;
    *(_QWORD *)(v48 + 32) = v37;
    *(_QWORD *)(v48 + 40) = v38;
    *(_OWORD *)(v48 + 48) = v39;
    *(_QWORD *)(v48 + 64) = v41;
    *(_QWORD *)(v48 + 72) = v40;
    *(_QWORD *)(v48 + 80) = v42;
    *(_QWORD *)(v48 + 88) = v43;
    *(_BYTE *)(v48 + 98) = BYTE2(v44);
    *(_WORD *)(v48 + 96) = v44;
    *(_DWORD *)(v48 + 100) = v45;
    __asm { BR              X10 }
  }
  swift_release();
  *(_QWORD *)v61 = MEMORY[0x24BEE4AF8];
  *(_WORD *)(v61 + 8) = 0;
  *(_BYTE *)(v61 + 10) = 0;
  return outlined consume of DisplayList.Item.Value(v40, 0xC000000000000000);
}

uint64_t specialized RendererEffectDisplayList.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v2;
  int v5;
  uint64_t v6;
  unsigned __int16 v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  double *v27;
  double v28;
  double v29;
  double *v30;
  unint64_t v31;
  unint64_t v32;
  __int128 *v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  unint64_t v44;
  uint64_t Value;
  uint64_t v46;
  uint64_t result;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int16 v54;
  unsigned __int8 v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  __int128 v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unsigned __int16 v65;
  unsigned __int8 v66;
  int v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  v5 = *MEMORY[0x24BE096C0];
  v6 = MEMORY[0x24BEE4AF8];
  if (v2[8] != *MEMORY[0x24BE096C0])
  {
    Value = AGGraphGetValue();
    v9 = *(_QWORD *)Value;
    v7 = *(_WORD *)(Value + 8);
    v8 = *(_BYTE *)(Value + 10);
    swift_bridgeObjectRetain();
    if (*(_QWORD *)(v9 + 16))
      goto LABEL_3;
LABEL_10:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a2 = v6;
    *(_WORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 10) = 0;
    return result;
  }
  v7 = 0;
  v8 = 0;
  v9 = MEMORY[0x24BEE4AF8];
  if (!*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
    goto LABEL_10;
LABEL_3:
  v10 = ++static DisplayList.Version.lastValue;
  if (AGGraphGetCurrentAttribute() == v5)
  {
    __break(1u);
    JUMPOUT(0x234E28704);
  }
  v56 = a2;
  v51 = v10;
  v52 = a1;
  v11 = AGCreateWeakAttribute();
  v12 = v11;
  v50 = HIDWORD(v11);
  v13 = AGCreateWeakAttribute();
  v14 = v13;
  v49 = HIDWORD(v13);
  v15 = AGCreateWeakAttribute();
  v16 = v15;
  v48 = HIDWORD(v15);
  v17 = AGCreateWeakAttribute();
  v18 = v17;
  v55 = v8;
  v19 = HIDWORD(v17);
  v20 = AGCreateWeakAttribute();
  v54 = v7;
  v21 = v20;
  v53 = v9;
  v22 = HIDWORD(v20);
  v23 = AGCreateWeakAttribute();
  v24 = v23;
  v25 = HIDWORD(v23);
  _threadGeometryProxyData();
  v58 = __PAIR64__(v50, v12);
  v59 = __PAIR64__(v49, v14);
  *(_QWORD *)&v60 = __PAIR64__(v48, v16);
  *((_QWORD *)&v60 + 1) = __PAIR64__(v19, v18);
  v61 = __PAIR64__(v22, v21);
  v62 = __PAIR64__(v25, v24);
  LODWORD(v63) = v51;
  _setThreadGeometryProxyData();
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = v52;
  *(_OWORD *)(v26 + 24) = 0u;
  *(_OWORD *)(v26 + 40) = 0u;
  *(_OWORD *)(v26 + 56) = 0u;
  *(_OWORD *)(v26 + 72) = 0u;
  *(_OWORD *)(v26 + 88) = 0u;
  *(_OWORD *)(v26 + 104) = 0u;
  *(_OWORD *)(v26 + 116) = 0u;
  *(_BYTE *)(v26 + 132) = 16;
  _setThreadGeometryProxyData();
  v27 = (double *)AGGraphGetValue();
  v28 = *v27;
  v29 = v27[1];
  v30 = (double *)AGGraphGetValue();
  *(double *)&v31 = v28 - *v30;
  *(double *)&v32 = v29 - v30[1];
  v33 = (__int128 *)AGGraphGetValue();
  v34 = *v2;
  v58 = v31;
  v59 = v32;
  v60 = *v33;
  v61 = v51;
  v62 = v26;
  v63 = 0x4000000900000000;
  v64 = v53;
  v66 = v55;
  v65 = v54;
  v67 = v34;
  LOBYTE(v57) = *((_BYTE *)v2 + 36);
  swift_retain();
  DisplayList.Item.canonicalize(options:)((char *)&v57);
  v35 = v58;
  v36 = v59;
  v37 = v60;
  v39 = v61;
  v38 = v62;
  v40 = v63;
  v41 = v64;
  v42 = v65 | (v66 << 16);
  v43 = v67;
  v44 = v63 >> 62;
  if (v63 >> 62 != 3 || (v42 & 0xFFFFFF) != 0 || v63 != 0xC000000000000000 || v64 | v62)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v46 = swift_allocObject();
    *(_OWORD *)(v46 + 16) = xmmword_23527E860;
    *(_QWORD *)(v46 + 32) = v35;
    *(_QWORD *)(v46 + 40) = v36;
    *(_OWORD *)(v46 + 48) = v37;
    *(_QWORD *)(v46 + 64) = v39;
    *(_QWORD *)(v46 + 72) = v38;
    *(_QWORD *)(v46 + 80) = v40;
    *(_QWORD *)(v46 + 88) = v41;
    *(_BYTE *)(v46 + 98) = BYTE2(v42);
    *(_WORD *)(v46 + 96) = v42;
    *(_DWORD *)(v46 + 100) = v43;
    __asm { BR              X10 }
  }
  swift_release();
  *(_QWORD *)v56 = MEMORY[0x24BEE4AF8];
  *(_WORD *)(v56 + 8) = 0;
  *(_BYTE *)(v56 + 10) = 0;
  return outlined consume of DisplayList.Item.Value(v38, 0xC000000000000000);
}

uint64_t specialized RendererEffectDisplayList.value.getter@<X0>(char a1@<W1>, uint64_t a2@<X8>)
{
  int *v2;
  int v5;
  uint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double *v27;
  double v28;
  double v29;
  double *v30;
  unint64_t v31;
  unint64_t v32;
  __int128 *v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  unint64_t v44;
  uint64_t Value;
  uint64_t v46;
  uint64_t result;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  unsigned __int16 v54;
  uint64_t v55;
  unsigned __int8 v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  __int128 v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unsigned __int16 v65;
  unsigned __int8 v66;
  int v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  v5 = *MEMORY[0x24BE096C0];
  v6 = MEMORY[0x24BEE4AF8];
  if (v2[8] != *MEMORY[0x24BE096C0])
  {
    Value = AGGraphGetValue();
    v8 = *(_QWORD *)Value;
    v7 = *(_WORD *)(Value + 8);
    v56 = *(_BYTE *)(Value + 10);
    swift_bridgeObjectRetain();
    if (*(_QWORD *)(v8 + 16))
      goto LABEL_3;
LABEL_10:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a2 = v6;
    *(_WORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 10) = 0;
    return result;
  }
  v7 = 0;
  v56 = 0;
  v8 = MEMORY[0x24BEE4AF8];
  if (!*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
    goto LABEL_10;
LABEL_3:
  v9 = ++static DisplayList.Version.lastValue;
  if (AGGraphGetCurrentAttribute() == v5)
  {
    __break(1u);
    JUMPOUT(0x234E2B898);
  }
  v55 = a2;
  v52 = a1;
  v10 = AGCreateWeakAttribute();
  v11 = v10;
  v50 = HIDWORD(v10);
  v12 = AGCreateWeakAttribute();
  v54 = v7;
  v13 = v12;
  v49 = HIDWORD(v12);
  v14 = AGCreateWeakAttribute();
  v15 = v14;
  v48 = HIDWORD(v14);
  v16 = AGCreateWeakAttribute();
  v51 = v9;
  v17 = v16;
  v18 = HIDWORD(v16);
  v19 = AGCreateWeakAttribute();
  v53 = v8;
  v20 = v19;
  v21 = HIDWORD(v19);
  v22 = AGCreateWeakAttribute();
  v23 = v22;
  v24 = HIDWORD(v22);
  _threadGeometryProxyData();
  v58 = __PAIR64__(v50, v11);
  v59 = __PAIR64__(v49, v13);
  *(_QWORD *)&v60 = __PAIR64__(v48, v15);
  *((_QWORD *)&v60 + 1) = __PAIR64__(v18, v17);
  v61 = __PAIR64__(v21, v20);
  v62 = __PAIR64__(v24, v23);
  LODWORD(v63) = v51;
  _setThreadGeometryProxyData();
  v25 = *(_QWORD *)AGGraphGetValue();
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = v25;
  *(_OWORD *)(v26 + 24) = 0u;
  *(_OWORD *)(v26 + 40) = 0u;
  *(_OWORD *)(v26 + 56) = 0u;
  *(_OWORD *)(v26 + 72) = 0u;
  *(_OWORD *)(v26 + 88) = 0u;
  *(_OWORD *)(v26 + 104) = 0u;
  *(_OWORD *)(v26 + 116) = 0u;
  *(_BYTE *)(v26 + 132) = v52;
  _setThreadGeometryProxyData();
  v27 = (double *)AGGraphGetValue();
  v28 = *v27;
  v29 = v27[1];
  v30 = (double *)AGGraphGetValue();
  *(double *)&v31 = v28 - *v30;
  *(double *)&v32 = v29 - v30[1];
  v33 = (__int128 *)AGGraphGetValue();
  v34 = *v2;
  v58 = v31;
  v59 = v32;
  v60 = *v33;
  v61 = v51;
  v62 = v26;
  v63 = 0x4000000900000000;
  v64 = v53;
  v66 = v56;
  v65 = v54;
  v67 = v34;
  LOBYTE(v57) = *((_BYTE *)v2 + 36);
  swift_retain();
  DisplayList.Item.canonicalize(options:)((char *)&v57);
  v35 = v58;
  v36 = v59;
  v37 = v60;
  v39 = v61;
  v38 = v62;
  v40 = v63;
  v41 = v64;
  v42 = v65 | (v66 << 16);
  v43 = v67;
  v44 = v63 >> 62;
  if (v63 >> 62 != 3 || (v42 & 0xFFFFFF) != 0 || v63 != 0xC000000000000000 || v64 | v62)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v46 = swift_allocObject();
    *(_OWORD *)(v46 + 16) = xmmword_23527E860;
    *(_QWORD *)(v46 + 32) = v35;
    *(_QWORD *)(v46 + 40) = v36;
    *(_OWORD *)(v46 + 48) = v37;
    *(_QWORD *)(v46 + 64) = v39;
    *(_QWORD *)(v46 + 72) = v38;
    *(_QWORD *)(v46 + 80) = v40;
    *(_QWORD *)(v46 + 88) = v41;
    *(_BYTE *)(v46 + 98) = BYTE2(v42);
    *(_WORD *)(v46 + 96) = v42;
    *(_DWORD *)(v46 + 100) = v43;
    __asm { BR              X10 }
  }
  swift_release();
  *(_QWORD *)v55 = MEMORY[0x24BEE4AF8];
  *(_WORD *)(v55 + 8) = 0;
  *(_BYTE *)(v55 + 10) = 0;
  return outlined consume of DisplayList.Item.Value(v38, 0xC000000000000000);
}

uint64_t specialized CoordinateSpaceEvents.value.getter()
{
  uint64_t v0;
  uint64_t Value;
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double *v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  char v17;
  _BYTE v18[48];
  uint64_t v19;

  type metadata accessor for [EventID : EventType]();
  v19 = *(_QWORD *)AGGraphGetValue();
  v0 = MEMORY[0x24BEE50B0];
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for CoordinateSpaceGesture<CGFloat>, MEMORY[0x24BEE50B0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for CoordinateSpaceGesture);
  Value = AGGraphGetValue();
  outlined init with copy of _VariadicView_Children.Element?(Value, (uint64_t)&v12, &lazy cache variable for type metadata for CoordinateSpaceGesture<CGFloat>, v0, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for CoordinateSpaceGesture);
  outlined init with take of CoordinateSpace((uint64_t)&v12, (uint64_t)v18);
  outlined init with copy of CoordinateSpace((uint64_t)v18, (uint64_t)&v12);
  if (v17)
  {
    if (v17 != 1 && !(*(_QWORD *)&v15 | *(_QWORD *)&v16 | v12 | *(_QWORD *)&v14 | *(_QWORD *)&v13))
    {
      swift_bridgeObjectRetain();
      specialized defaultConvertEventLocations<A>(_:converter:)(&v19);
      outlined destroy of CoordinateSpace((uint64_t)v18);
      return v19;
    }
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRetain();
    outlined destroy of CoordinateSpace((uint64_t)&v12);
  }
  AGGraphClearUpdate();
  v2 = AGGraphGetValue();
  v3 = *(double *)(v2 + 8);
  v4 = *(double *)(v2 + 16);
  v5 = *(double *)(v2 + 24);
  v6 = *(double *)(v2 + 32);
  v12 = *(_QWORD *)v2;
  swift_retain();
  AGGraphSetUpdate();
  AGGraphClearUpdate();
  v7 = (double *)AGGraphGetValue();
  v8 = *v7;
  v9 = v7[1];
  v10 = AGGraphSetUpdate();
  v15 = v5 - (v8 - v3);
  v16 = v6 - (v9 - v4);
  v13 = v8;
  v14 = v9;
  MEMORY[0x24BDAC7A8](v10);
  specialized defaultConvertEventLocations<A>(_:converter:)(&v19, (void (*)(_QWORD **))partial apply for closure #4 in CoordinateSpaceEvents.value.getter);
  outlined destroy of CoordinateSpace((uint64_t)v18);
  swift_release();
  return v19;
}

void *specialized GestureDebug.Value.value.getter@<X0>(uint64_t a1@<X8>)
{
  char *v1;
  uint64_t Value;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  char v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  void *result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  char v35;
  int v36;
  char v37;
  _BYTE __src[289];
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[32];
  uint64_t v42;
  char v43;
  char v44;

  Value = AGGraphGetValue();
  v4 = *(_QWORD *)Value;
  v5 = *(_QWORD *)(Value + 8);
  v6 = *(_QWORD *)(Value + 16);
  v7 = *(double *)(Value + 24);
  v8 = *(double *)(Value + 32);
  v42 = 0;
  memset(v41, 0, sizeof(v41));
  v43 = 2;
  v44 = 2;
  v9 = (uint64_t *)AGGraphGetValue();
  v10 = *v9;
  v11 = v9[1];
  if (v4 || v7 != 0.0 || v8 != 0.0)
  {
    v39 = *v9;
    v40 = v11;
    *(_QWORD *)__src = v4;
    *(_QWORD *)&__src[8] = v5;
    *(_QWORD *)&__src[16] = v6;
    *(double *)&__src[24] = v7;
    *(double *)&__src[32] = v8;
    swift_retain();
    specialized ViewTransform.convert(_:_:)((uint64_t)v41, (uint64_t)__src);
    v10 = v39;
    v11 = v40;
  }
  outlined destroy of ViewTransform.Conversion((uint64_t)v41);
  swift_release();
  specialized GestureDebug.Value.childData.getter(__src);
  v12 = *((_DWORD *)v1 + 5);
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for GesturePhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
  v13 = AGGraphGetValue();
  v14 = *(unsigned __int8 *)(v13 + 24);
  v37 = v15;
  if ((v14 - 1) >= 2)
  {
    if (*(_BYTE *)(v13 + 24) || *(_QWORD *)(v13 + 16) != 1)
    {
      v37 = 0;
      LOBYTE(v39) = 0;
    }
    else
    {
      outlined consume of GesturePhase<TappableEvent>(*(_QWORD *)v13, *(_QWORD *)(v13 + 8), 1, 0);
      v37 = 1;
      LOBYTE(v39) = 1;
    }
  }
  v16 = *(_DWORD *)AGGraphGetValue();
  v17 = (uint64_t *)AGGraphGetValue();
  v18 = *v17;
  v19 = v17[1];
  v35 = v14;
  v36 = v12;
  v34 = v16;
  if (*((_DWORD *)v1 + 4) == *MEMORY[0x24BE096C0])
  {
    v32 = 0;
    v33 = 0;
    v31 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 3;
  }
  else
  {
    type metadata accessor for ArrayWith2Inline<(String, String)>(0);
    v26 = AGGraphGetValue();
    v20 = *(_QWORD *)(v26 + 24);
    v21 = *(_QWORD *)(v26 + 32);
    v22 = *(_QWORD *)(v26 + 40);
    v23 = *(_QWORD *)(v26 + 48);
    v24 = *(_QWORD *)(v26 + 56);
    v25 = *(_BYTE *)(v26 + 64);
    v32 = *(_QWORD *)(v26 + 8);
    v33 = *(_QWORD *)v26;
    v31 = *(_QWORD *)(v26 + 16);
    outlined copy of ArrayWith2Inline<(String, String)>.Storage(*(_QWORD *)v26, v32, v31, v20, v21, v22, v23, v24, v25);
  }
  v27 = *v1;
  v28 = *((_QWORD *)v1 + 1);
  v29 = swift_allocObject();
  result = memcpy((void *)(v29 + 16), __src, 0x121uLL);
  *(_BYTE *)a1 = v27;
  *(_QWORD *)(a1 + 8) = v28;
  *(_BYTE *)(a1 + 16) = v37;
  *(_BYTE *)(a1 + 17) = v35;
  *(_DWORD *)(a1 + 20) = v36;
  *(_DWORD *)(a1 + 24) = v34;
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 48) = v18;
  *(_QWORD *)(a1 + 56) = v19;
  *(_QWORD *)(a1 + 64) = v33;
  *(_QWORD *)(a1 + 72) = v32;
  *(_QWORD *)(a1 + 80) = v31;
  *(_QWORD *)(a1 + 88) = v20;
  *(_QWORD *)(a1 + 96) = v21;
  *(_QWORD *)(a1 + 104) = v22;
  *(_QWORD *)(a1 + 112) = v23;
  *(_QWORD *)(a1 + 120) = v24;
  *(_BYTE *)(a1 + 128) = v25;
  *(_QWORD *)(a1 + 136) = v29;
  return result;
}

{
  char *v1;
  uint64_t Value;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  char v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  void *result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  char v35;
  int v36;
  char v37;
  _BYTE __src[289];
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[32];
  uint64_t v42;
  char v43;
  char v44;

  Value = AGGraphGetValue();
  v4 = *(_QWORD *)Value;
  v5 = *(_QWORD *)(Value + 8);
  v6 = *(_QWORD *)(Value + 16);
  v7 = *(double *)(Value + 24);
  v8 = *(double *)(Value + 32);
  v42 = 0;
  memset(v41, 0, sizeof(v41));
  v43 = 2;
  v44 = 2;
  v9 = (uint64_t *)AGGraphGetValue();
  v10 = *v9;
  v11 = v9[1];
  if (v4 || v7 != 0.0 || v8 != 0.0)
  {
    v39 = *v9;
    v40 = v11;
    *(_QWORD *)__src = v4;
    *(_QWORD *)&__src[8] = v5;
    *(_QWORD *)&__src[16] = v6;
    *(double *)&__src[24] = v7;
    *(double *)&__src[32] = v8;
    swift_retain();
    specialized ViewTransform.convert(_:_:)((uint64_t)v41, (uint64_t)__src);
    v10 = v39;
    v11 = v40;
  }
  outlined destroy of ViewTransform.Conversion((uint64_t)v41);
  swift_release();
  specialized GestureDebug.Value.childData.getter(__src);
  v12 = *((_DWORD *)v1 + 5);
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for GesturePhase<SpatialEvent>, (uint64_t)&type metadata for SpatialEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
  v13 = AGGraphGetValue();
  v14 = *(unsigned __int8 *)(v13 + 72);
  v37 = v15;
  if ((v14 - 1) >= 2)
  {
    if (*(_BYTE *)(v13 + 72) || *(_QWORD *)(v13 + 16) != 1)
    {
      v37 = 0;
      LOBYTE(v39) = 0;
    }
    else
    {
      outlined consume of GesturePhase<SpatialEvent>(*(_QWORD *)v13, *(_QWORD *)(v13 + 8), 1, *(_QWORD *)(v13 + 24), *(_QWORD *)(v13 + 32), *(_QWORD *)(v13 + 40), *(_QWORD *)(v13 + 48), *(_QWORD *)(v13 + 56), *(_QWORD *)(v13 + 64), 0);
      v37 = 1;
      LOBYTE(v39) = 1;
    }
  }
  v16 = *(_DWORD *)AGGraphGetValue();
  v17 = (uint64_t *)AGGraphGetValue();
  v18 = *v17;
  v19 = v17[1];
  v35 = v14;
  v36 = v12;
  v34 = v16;
  if (*((_DWORD *)v1 + 4) == *MEMORY[0x24BE096C0])
  {
    v32 = 0;
    v33 = 0;
    v31 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 3;
  }
  else
  {
    type metadata accessor for ArrayWith2Inline<(String, String)>(0);
    v26 = AGGraphGetValue();
    v20 = *(_QWORD *)(v26 + 24);
    v21 = *(_QWORD *)(v26 + 32);
    v22 = *(_QWORD *)(v26 + 40);
    v23 = *(_QWORD *)(v26 + 48);
    v24 = *(_QWORD *)(v26 + 56);
    v25 = *(_BYTE *)(v26 + 64);
    v32 = *(_QWORD *)(v26 + 8);
    v33 = *(_QWORD *)v26;
    v31 = *(_QWORD *)(v26 + 16);
    outlined copy of ArrayWith2Inline<(String, String)>.Storage(*(_QWORD *)v26, v32, v31, v20, v21, v22, v23, v24, v25);
  }
  v27 = *v1;
  v28 = *((_QWORD *)v1 + 1);
  v29 = swift_allocObject();
  result = memcpy((void *)(v29 + 16), __src, 0x121uLL);
  *(_BYTE *)a1 = v27;
  *(_QWORD *)(a1 + 8) = v28;
  *(_BYTE *)(a1 + 16) = v37;
  *(_BYTE *)(a1 + 17) = v35;
  *(_DWORD *)(a1 + 20) = v36;
  *(_DWORD *)(a1 + 24) = v34;
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 48) = v18;
  *(_QWORD *)(a1 + 56) = v19;
  *(_QWORD *)(a1 + 64) = v33;
  *(_QWORD *)(a1 + 72) = v32;
  *(_QWORD *)(a1 + 80) = v31;
  *(_QWORD *)(a1 + 88) = v20;
  *(_QWORD *)(a1 + 96) = v21;
  *(_QWORD *)(a1 + 104) = v22;
  *(_QWORD *)(a1 + 112) = v23;
  *(_QWORD *)(a1 + 120) = v24;
  *(_BYTE *)(a1 + 128) = v25;
  *(_QWORD *)(a1 + 136) = v29;
  return result;
}

{
  char *v1;
  uint64_t Value;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char *v13;
  char v14;
  int v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  void *result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  char v35;
  char v36;
  int v37;
  _BYTE __src[289];
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[32];
  uint64_t v42;
  char v43;
  char v44;

  Value = AGGraphGetValue();
  v4 = *(_QWORD *)Value;
  v5 = *(_QWORD *)(Value + 8);
  v6 = *(_QWORD *)(Value + 16);
  v7 = *(double *)(Value + 24);
  v8 = *(double *)(Value + 32);
  v42 = 0;
  memset(v41, 0, sizeof(v41));
  v43 = 2;
  v44 = 2;
  v9 = (uint64_t *)AGGraphGetValue();
  v10 = *v9;
  v11 = v9[1];
  if (v4 || v7 != 0.0 || v8 != 0.0)
  {
    v39 = *v9;
    v40 = v11;
    *(_QWORD *)__src = v4;
    *(_QWORD *)&__src[8] = v5;
    *(_QWORD *)&__src[16] = v6;
    *(double *)&__src[24] = v7;
    *(double *)&__src[32] = v8;
    swift_retain();
    specialized ViewTransform.convert(_:_:)((uint64_t)v41, (uint64_t)__src);
    v10 = v39;
    v11 = v40;
  }
  outlined destroy of ViewTransform.Conversion((uint64_t)v41);
  swift_release();
  specialized GestureDebug.Value.childData.getter(__src);
  v12 = *((_DWORD *)v1 + 5);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
  v13 = (char *)AGGraphGetValue();
  v14 = 0;
  v15 = v13[1];
  if ((v15 - 1) >= 2)
  {
    v14 = *v13;
    if (v13[1] || (*v13 & 1) != 0)
    {
      LOBYTE(v39) = *v13;
    }
    else
    {
      v14 = 0;
      LOBYTE(v39) = 0;
    }
  }
  v16 = *(_DWORD *)AGGraphGetValue();
  v17 = (uint64_t *)AGGraphGetValue();
  v18 = *v17;
  v19 = v17[1];
  v36 = v15;
  v37 = v12;
  v34 = v16;
  v35 = v14;
  if (*((_DWORD *)v1 + 4) == *MEMORY[0x24BE096C0])
  {
    v32 = 0;
    v33 = 0;
    v31 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 3;
  }
  else
  {
    type metadata accessor for ArrayWith2Inline<(String, String)>(0);
    v26 = AGGraphGetValue();
    v20 = *(_QWORD *)(v26 + 24);
    v21 = *(_QWORD *)(v26 + 32);
    v22 = *(_QWORD *)(v26 + 40);
    v23 = *(_QWORD *)(v26 + 48);
    v24 = *(_QWORD *)(v26 + 56);
    v25 = *(_BYTE *)(v26 + 64);
    v32 = *(_QWORD *)(v26 + 8);
    v33 = *(_QWORD *)v26;
    v31 = *(_QWORD *)(v26 + 16);
    outlined copy of ArrayWith2Inline<(String, String)>.Storage(*(_QWORD *)v26, v32, v31, v20, v21, v22, v23, v24, v25);
  }
  v27 = *v1;
  v28 = *((_QWORD *)v1 + 1);
  v29 = swift_allocObject();
  result = memcpy((void *)(v29 + 16), __src, 0x121uLL);
  *(_BYTE *)a1 = v27;
  *(_QWORD *)(a1 + 8) = v28;
  *(_BYTE *)(a1 + 16) = v35;
  *(_BYTE *)(a1 + 17) = v36;
  *(_DWORD *)(a1 + 20) = v37;
  *(_DWORD *)(a1 + 24) = v34;
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 48) = v18;
  *(_QWORD *)(a1 + 56) = v19;
  *(_QWORD *)(a1 + 64) = v33;
  *(_QWORD *)(a1 + 72) = v32;
  *(_QWORD *)(a1 + 80) = v31;
  *(_QWORD *)(a1 + 88) = v20;
  *(_QWORD *)(a1 + 96) = v21;
  *(_QWORD *)(a1 + 104) = v22;
  *(_QWORD *)(a1 + 112) = v23;
  *(_QWORD *)(a1 + 120) = v24;
  *(_BYTE *)(a1 + 128) = v25;
  *(_QWORD *)(a1 + 136) = v29;
  return result;
}

{
  char *v1;
  uint64_t Value;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _BYTE *v13;
  int v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  void *result;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  char v35;
  int v36;
  _BYTE __src[289];
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[32];
  uint64_t v41;
  char v42;
  char v43;

  Value = AGGraphGetValue();
  v4 = *(_QWORD *)Value;
  v5 = *(_QWORD *)(Value + 8);
  v6 = *(_QWORD *)(Value + 16);
  v7 = *(double *)(Value + 24);
  v8 = *(double *)(Value + 32);
  v41 = 0;
  memset(v40, 0, sizeof(v40));
  v42 = 2;
  v43 = 2;
  v9 = (uint64_t *)AGGraphGetValue();
  v10 = *v9;
  v11 = v9[1];
  if (v4 || v7 != 0.0 || v8 != 0.0)
  {
    v38 = *v9;
    v39 = v11;
    *(_QWORD *)__src = v4;
    *(_QWORD *)&__src[8] = v5;
    *(_QWORD *)&__src[16] = v6;
    *(double *)&__src[24] = v7;
    *(double *)&__src[32] = v8;
    swift_retain();
    specialized ViewTransform.convert(_:_:)((uint64_t)v40, (uint64_t)__src);
    v10 = v38;
    v11 = v39;
  }
  outlined destroy of ViewTransform.Conversion((uint64_t)v40);
  swift_release();
  specialized GestureDebug.Value.childData.getter(__src);
  v12 = *((_DWORD *)v1 + 5);
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for GesturePhase<Never>, MEMORY[0x24BEE4078], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
  v13 = (_BYTE *)AGGraphGetValue();
  v14 = v13[1];
  if ((v14 - 1) >= 2)
  {
    if (!v13[1] && (*v13 & 1) != 0)
    {
      v30 = 1;
      LOBYTE(v38) = 1;
    }
    else
    {
      v30 = 0;
      LOBYTE(v38) = 0;
    }
  }
  v15 = *(_DWORD *)AGGraphGetValue();
  v16 = (uint64_t *)AGGraphGetValue();
  v17 = *v16;
  v18 = v16[1];
  v35 = v14;
  v36 = v12;
  v34 = v15;
  if (*((_DWORD *)v1 + 4) == *MEMORY[0x24BE096C0])
  {
    v32 = 0;
    v33 = 0;
    v31 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 3;
  }
  else
  {
    type metadata accessor for ArrayWith2Inline<(String, String)>(0);
    v25 = AGGraphGetValue();
    v19 = *(_QWORD *)(v25 + 24);
    v20 = *(_QWORD *)(v25 + 32);
    v21 = *(_QWORD *)(v25 + 40);
    v22 = *(_QWORD *)(v25 + 48);
    v23 = *(_QWORD *)(v25 + 56);
    v24 = *(_BYTE *)(v25 + 64);
    v32 = *(_QWORD *)(v25 + 8);
    v33 = *(_QWORD *)v25;
    v31 = *(_QWORD *)(v25 + 16);
    outlined copy of ArrayWith2Inline<(String, String)>.Storage(*(_QWORD *)v25, v32, v31, v19, v20, v21, v22, v23, v24);
  }
  v26 = *v1;
  v27 = *((_QWORD *)v1 + 1);
  v28 = swift_allocObject();
  result = memcpy((void *)(v28 + 16), __src, 0x121uLL);
  *(_BYTE *)a1 = v26;
  *(_QWORD *)(a1 + 8) = v27;
  *(_BYTE *)(a1 + 16) = v30;
  *(_BYTE *)(a1 + 17) = v35;
  *(_DWORD *)(a1 + 20) = v36;
  *(_DWORD *)(a1 + 24) = v34;
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 48) = v17;
  *(_QWORD *)(a1 + 56) = v18;
  *(_QWORD *)(a1 + 64) = v33;
  *(_QWORD *)(a1 + 72) = v32;
  *(_QWORD *)(a1 + 80) = v31;
  *(_QWORD *)(a1 + 88) = v19;
  *(_QWORD *)(a1 + 96) = v20;
  *(_QWORD *)(a1 + 104) = v21;
  *(_QWORD *)(a1 + 112) = v22;
  *(_QWORD *)(a1 + 120) = v23;
  *(_BYTE *)(a1 + 128) = v24;
  *(_QWORD *)(a1 + 136) = v28;
  return result;
}

void *specialized GestureDebug.Value.value.getter@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char *v3;
  uint64_t Value;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  void *result;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char v39;
  int v40;
  _BYTE __src[289];
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[32];
  uint64_t v45;
  char v46;
  char v47;

  Value = AGGraphGetValue();
  v8 = *(_QWORD *)Value;
  v9 = *(_QWORD *)(Value + 8);
  v10 = *(_QWORD *)(Value + 16);
  v11 = *(double *)(Value + 24);
  v12 = *(double *)(Value + 32);
  v45 = 0;
  memset(v44, 0, sizeof(v44));
  v46 = 2;
  v47 = 2;
  v13 = (uint64_t *)AGGraphGetValue();
  v14 = *v13;
  v15 = v13[1];
  if (v8 || v11 != 0.0 || v12 != 0.0)
  {
    v42 = *v13;
    v43 = v15;
    *(_QWORD *)__src = v8;
    *(_QWORD *)&__src[8] = v9;
    *(_QWORD *)&__src[16] = v10;
    *(double *)&__src[24] = v11;
    *(double *)&__src[32] = v12;
    swift_retain();
    specialized ViewTransform.convert(_:_:)((uint64_t)v44, (uint64_t)__src);
    v14 = v42;
    v15 = v43;
  }
  outlined destroy of ViewTransform.Conversion((uint64_t)v44);
  swift_release();
  specialized GestureDebug.Value.childData.getter(__src);
  v16 = *((_DWORD *)v3 + 5);
  type metadata accessor for MutableBox<CachedEnvironment>(0, a1, a2, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
  v17 = AGGraphGetValue();
  v18 = *(unsigned __int8 *)(v17 + 9);
  if ((v18 - 1) >= 2)
  {
    if (!*(_BYTE *)(v17 + 9) && (*(_BYTE *)(v17 + 8) & 1) != 0)
    {
      v34 = 1;
      LOBYTE(v42) = 1;
    }
    else
    {
      v34 = 0;
      LOBYTE(v42) = 0;
    }
  }
  v19 = *(_DWORD *)AGGraphGetValue();
  v20 = (uint64_t *)AGGraphGetValue();
  v21 = *v20;
  v22 = v20[1];
  v39 = v18;
  v40 = v16;
  v38 = v19;
  if (*((_DWORD *)v3 + 4) == *MEMORY[0x24BE096C0])
  {
    v36 = 0;
    v37 = 0;
    v35 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 3;
  }
  else
  {
    type metadata accessor for ArrayWith2Inline<(String, String)>(0);
    v29 = AGGraphGetValue();
    v23 = *(_QWORD *)(v29 + 24);
    v24 = *(_QWORD *)(v29 + 32);
    v25 = *(_QWORD *)(v29 + 40);
    v26 = *(_QWORD *)(v29 + 48);
    v27 = *(_QWORD *)(v29 + 56);
    v28 = *(_BYTE *)(v29 + 64);
    v36 = *(_QWORD *)(v29 + 8);
    v37 = *(_QWORD *)v29;
    v35 = *(_QWORD *)(v29 + 16);
    outlined copy of ArrayWith2Inline<(String, String)>.Storage(*(_QWORD *)v29, v36, v35, v23, v24, v25, v26, v27, v28);
  }
  v30 = *v3;
  v31 = *((_QWORD *)v3 + 1);
  v32 = swift_allocObject();
  result = memcpy((void *)(v32 + 16), __src, 0x121uLL);
  *(_BYTE *)a3 = v30;
  *(_QWORD *)(a3 + 8) = v31;
  *(_BYTE *)(a3 + 16) = v34;
  *(_BYTE *)(a3 + 17) = v39;
  *(_DWORD *)(a3 + 20) = v40;
  *(_DWORD *)(a3 + 24) = v38;
  *(_QWORD *)(a3 + 32) = v14;
  *(_QWORD *)(a3 + 40) = v15;
  *(_QWORD *)(a3 + 48) = v21;
  *(_QWORD *)(a3 + 56) = v22;
  *(_QWORD *)(a3 + 64) = v37;
  *(_QWORD *)(a3 + 72) = v36;
  *(_QWORD *)(a3 + 80) = v35;
  *(_QWORD *)(a3 + 88) = v23;
  *(_QWORD *)(a3 + 96) = v24;
  *(_QWORD *)(a3 + 104) = v25;
  *(_QWORD *)(a3 + 112) = v26;
  *(_QWORD *)(a3 + 120) = v27;
  *(_BYTE *)(a3 + 128) = v28;
  *(_QWORD *)(a3 + 136) = v32;
  return result;
}

uint64_t specialized GestureDebug.Value.childData.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  int v3;
  _OWORD *Value;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _OWORD v34[2];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _OWORD v60[9];
  _BYTE v61[144];

  v3 = *MEMORY[0x24BE096C0];
  if (*(_DWORD *)(v1 + 40) == *MEMORY[0x24BE096C0])
  {
    _s7SwiftUI15TextRenderLayer33_FB86B422571764190CF2C7C4C92612D4LLC6LayoutVSgWOi0_(v34);
  }
  else
  {
    Value = (_OWORD *)AGGraphGetValue();
    v60[0] = *Value;
    v5 = Value[4];
    v7 = Value[1];
    v6 = Value[2];
    v60[3] = Value[3];
    v60[4] = v5;
    v60[1] = v7;
    v60[2] = v6;
    v8 = Value[8];
    v10 = Value[5];
    v9 = Value[6];
    v60[7] = Value[7];
    v60[8] = v8;
    v60[5] = v10;
    v60[6] = v9;
    memmove(v34, Value, 0x90uLL);
    _ViewInputs.base.modify(v34, v11);
    outlined retain of GestureDebug.Data((uint64_t)v60);
  }
  outlined init with take of Image.ResizingInfo?((uint64_t)v34, (uint64_t)v61, &lazy cache variable for type metadata for GestureDebug.Data?, (uint64_t)&type metadata for GestureDebug.Data, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  if (*(_DWORD *)(v1 + 44) == v3)
  {
    _s7SwiftUI15TextRenderLayer33_FB86B422571764190CF2C7C4C92612D4LLC6LayoutVSgWOi0_(v34);
  }
  else
  {
    v12 = (__int128 *)AGGraphGetValue();
    v51 = *v12;
    v13 = v12[4];
    v15 = v12[1];
    v14 = v12[2];
    v54 = v12[3];
    v55 = v13;
    v52 = v15;
    v53 = v14;
    v16 = v12[8];
    v18 = v12[5];
    v17 = v12[6];
    v58 = v12[7];
    v59 = v16;
    v56 = v18;
    v57 = v17;
    memmove(v34, v12, 0x90uLL);
    _ViewInputs.base.modify(v34, v19);
    outlined retain of GestureDebug.Data((uint64_t)&v51);
  }
  outlined init with take of Image.ResizingInfo?((uint64_t)v34, (uint64_t)v60, &lazy cache variable for type metadata for GestureDebug.Data?, (uint64_t)&type metadata for GestureDebug.Data, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  outlined init with take of Image.ResizingInfo?((uint64_t)v61, (uint64_t)&v51, &lazy cache variable for type metadata for GestureDebug.Data?, (uint64_t)&type metadata for GestureDebug.Data, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  if (_s7SwiftUI12GestureDebugO4DataVSgWOg((uint64_t)&v51) == 1)
  {
    outlined init with take of Image.ResizingInfo?((uint64_t)v60, (uint64_t)&v42, &lazy cache variable for type metadata for GestureDebug.Data?, (uint64_t)&type metadata for GestureDebug.Data, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    if (_s7SwiftUI12GestureDebugO4DataVSgWOg((uint64_t)&v42) == 1)
    {
      _s7SwiftUI16ArrayWith2InlineV7StorageOyAA12GestureDebugO4DataV_GWOi2_((uint64_t)v34);
      return outlined init with take of Image.ResizingInfo?((uint64_t)v34, (uint64_t)a1, &lazy cache variable for type metadata for ArrayWith2Inline<GestureDebug.Data>.Storage, (uint64_t)&type metadata for GestureDebug.Data, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ArrayWith2Inline.Storage);
    }
    v39 = v48;
    v40 = v49;
    v41 = v50;
    v35 = v44;
    v36 = v45;
    v37 = v46;
    v38 = v47;
    v21 = v42;
    v20 = v43;
LABEL_13:
    v34[0] = v21;
    v34[1] = v20;
    _s7SwiftUI16ArrayWith2InlineV7StorageOyAA12GestureDebugO4DataV_GWOi_((uint64_t)v34);
    return outlined init with take of Image.ResizingInfo?((uint64_t)v34, (uint64_t)a1, &lazy cache variable for type metadata for ArrayWith2Inline<GestureDebug.Data>.Storage, (uint64_t)&type metadata for GestureDebug.Data, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ArrayWith2Inline.Storage);
  }
  outlined init with take of Image.ResizingInfo?((uint64_t)v60, (uint64_t)&v42, &lazy cache variable for type metadata for GestureDebug.Data?, (uint64_t)&type metadata for GestureDebug.Data, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  if (_s7SwiftUI12GestureDebugO4DataVSgWOg((uint64_t)&v42) == 1)
  {
    v39 = v57;
    v40 = v58;
    v41 = v59;
    v35 = v53;
    v36 = v54;
    v37 = v55;
    v38 = v56;
    v21 = v51;
    v20 = v52;
    goto LABEL_13;
  }
  v23 = v58;
  a1[6] = v57;
  a1[7] = v23;
  v24 = v54;
  a1[2] = v53;
  a1[3] = v24;
  v25 = v56;
  a1[4] = v55;
  a1[5] = v25;
  v26 = v52;
  *a1 = v51;
  a1[1] = v26;
  v27 = v48;
  v28 = v49;
  v29 = v46;
  a1[14] = v47;
  a1[15] = v27;
  v30 = v50;
  a1[16] = v28;
  a1[17] = v30;
  v31 = v44;
  v32 = v45;
  v33 = v42;
  a1[10] = v43;
  a1[11] = v31;
  a1[12] = v32;
  a1[13] = v29;
  a1[8] = v59;
  a1[9] = v33;
  return _s7SwiftUI16ArrayWith2InlineV7StorageOyAA12GestureDebugO4DataV_GWOi0_((uint64_t)a1);
}

uint64_t protocol witness for static UnaryLayout.makeViewImpl(modifier:inputs:body:) in conformance _AspectRatioLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, __int128 *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t *a7@<X8>)
{
  unint64_t v7;
  int v8;
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int OffsetAttribute2;
  int v22;
  uint64_t v23;
  int v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  int v30;
  uint64_t result;
  uint64_t KeyPath;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  _BYTE v58[16];
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  unsigned int v69;
  int v70;
  int v71;
  uint64_t v72;
  void (*v73)(unint64_t *__return_ptr, uint64_t, unint64_t *);
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  unint64_t v81;
  int v82;
  int v83;
  unint64_t v84;
  int v85;
  int v86;
  unint64_t v87;
  int v88;
  int v89;
  int v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  unsigned int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  uint64_t v101;

  v101 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)a2;
  v8 = *(_DWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_DWORD *)(a2 + 24);
  v11 = *(_DWORD *)(a2 + 28);
  v12 = *(_DWORD *)(a2 + 32);
  v13 = *(_DWORD *)(a2 + 36);
  v15 = *(_QWORD *)(a2 + 40);
  v14 = *(_QWORD *)(a2 + 48);
  v17 = *(_DWORD *)(a2 + 56);
  v16 = *(_DWORD *)(a2 + 60);
  v19 = *(_DWORD *)(a2 + 64);
  v18 = *(_DWORD *)(a2 + 68);
  OffsetAttribute2 = *(_DWORD *)(a2 + 72);
  v20 = *(_DWORD *)(a2 + 76);
  v22 = *(_DWORD *)(a2 + 80);
  if ((v13 & 0x22) != 0)
  {
    v68 = *(_DWORD *)(a2 + 56);
    v69 = v16;
    v70 = v18;
    LODWORD(v79) = v20;
    v71 = v22;
    v72 = a4;
    v73 = a3;
    v77 = a7;
    v78 = 0;
    LODWORD(v81) = *a1;
    v84 = v7;
    v65 = v8;
    v85 = v8;
    v87 = v9;
    v66 = v10;
    v88 = v10;
    v89 = v11;
    v67 = v11;
    v90 = v12;
    v91 = v13;
    v92 = v15;
    v23 = *(_QWORD *)(a6 + 8);
    v64 = v12;
    v75 = a5;
    v76 = a6;
    v74 = static Animatable.makeAnimatable(value:inputs:)((unsigned int *)&v81, (uint64_t *)&v84, a5, v23);
    if ((v13 & 0x20) != 0)
    {
      HIDWORD(v61) = OffsetAttribute2;
      KeyPath = swift_getKeyPath();
      swift_beginAccess();
      swift_retain_n();
      swift_retain_n();
      v63 = v15;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      v33 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
      swift_endAccess();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      v34 = swift_release();
      v62 = &v61;
      v35 = *(_DWORD *)(v9 + 16);
      v36 = *MEMORY[0x24BE096C0];
      v84 = __PAIR64__(v33, v74);
      v85 = HIDWORD(v61);
      v86 = v19;
      v29 = v69;
      v87 = __PAIR64__(v35, v69);
      v88 = v36;
      v89 = v79;
      MEMORY[0x24BDAC7A8](v34);
      v59 = type metadata accessor for UnaryPositionAwareChildGeometry(0, a5, a6, v37);
      v60 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnaryPositionAwareChildGeometry<A>, v59);
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Attribute<ViewGeometry>, (uint64_t)&type metadata for ViewGeometry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE095F0]);
      v38 = v78;
      _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v84, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_9, (uint64_t)v58, v59, MEMORY[0x24BEE4078], v39, MEMORY[0x24BEE40A8], v40);
      v78 = v38;
      OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      v41 = AGGraphCreateOffsetAttribute2();
      v28 = v79;
      v19 = v41;
      v30 = v64 | 0x18;
      v26 = v13 | 2;
      v27 = v63;
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v26 = v13;
      v27 = v15;
      v28 = v79;
      v29 = v69;
      v30 = v64;
    }
    v84 = v7;
    v85 = v65;
    v87 = v9;
    v88 = v66;
    v89 = v67;
    v90 = v30;
    v91 = v26;
    v92 = v27;
    v93 = v14;
    v94 = v68;
    v95 = v29;
    v96 = v19;
    v97 = v70;
    v98 = OffsetAttribute2;
    v99 = v28;
    v100 = v71;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v42 = swift_bridgeObjectRetain();
    v73(&v81, v42, &v84);
    v79 = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v43 = swift_release();
    v44 = v81;
    v46 = v82;
    v45 = v83;
    if ((v13 & 0x20) != 0)
    {
      MEMORY[0x24BDAC7A8](v43);
      v47 = v75;
      v48 = v76;
      *(_QWORD *)&v58[-32] = v75;
      *(_QWORD *)&v58[-24] = v48;
      *(_QWORD *)&v58[-16] = v44;
      *(_DWORD *)&v58[-8] = v46;
      *(_DWORD *)&v58[-4] = v45;
      v50 = type metadata accessor for UnaryPositionAwareChildGeometry(0, v47, v48, v49);
      MEMORY[0x24BDAC7A8](v50);
      *(_QWORD *)&v58[-32] = v51;
      *(_QWORD *)&v58[-24] = partial apply for closure #1 in static UnaryLayout<>.makeViewImpl(modifier:inputs:body:);
      *(_QWORD *)&v58[-16] = &v58[-48];
      AGGraphMutateAttribute();
    }
    if ((v13 & 2) != 0)
    {
      v52 = swift_beginAccess();
      v81 = __PAIR64__(*(_DWORD *)(v9 + 16), v74);
      v82 = v45;
      MEMORY[0x24BDAC7A8](v52);
      v54 = type metadata accessor for UnaryPositionAwareLayoutComputer(0, v75, v76, v53);
      *(_QWORD *)&v58[-16] = v54;
      *(_QWORD *)&v58[-8] = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnaryPositionAwareLayoutComputer<A>, v54);
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Attribute<LayoutComputer>, (uint64_t)&type metadata for LayoutComputer, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE095F0]);
      _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v81, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_4, (uint64_t)&v58[-32], v54, MEMORY[0x24BEE4078], v55, MEMORY[0x24BEE40A8], v56);
      v45 = v80;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      result = swift_release();
      v46 |= 0x80u;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      result = swift_release();
    }
    v57 = v77;
    *v77 = v44;
    *((_DWORD *)v57 + 2) = v46;
    *((_DWORD *)v57 + 3) = v45;
  }
  else
  {
    v84 = *(_QWORD *)a2;
    v85 = v8;
    v87 = v9;
    v88 = v10;
    v89 = v11;
    v90 = v12;
    v91 = v13;
    v92 = v15;
    v93 = v14;
    v94 = v17;
    v95 = v16;
    v96 = v19;
    v97 = v18;
    v98 = OffsetAttribute2;
    v99 = v20;
    v100 = v22;
    return ((uint64_t (*)(_DWORD *, unint64_t *))a3)(a1, &v84);
  }
  return result;
}

uint64_t LayoutPositionQuery.init(parentPosition:localPosition:)@<X0>(uint64_t result@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

double UnaryPositionAwareLayoutEngine.init(layout:layoutContext:child:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int v11;
  int v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double result;

  v11 = *(_DWORD *)(a2 + 8);
  v12 = *(_DWORD *)(a3 + 8);
  v13 = (int *)type metadata accessor for UnaryPositionAwareLayoutEngine(0, a4, a5, a4);
  v14 = a6 + v13[11];
  *(_OWORD *)v14 = 0u;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_BYTE *)(v14 + 48) = 1;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_BYTE *)(v14 + 104) = 1;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 128) = 0u;
  *(_OWORD *)(v14 + 144) = 0u;
  *(_BYTE *)(v14 + 160) = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a6, a1, a4);
  v15 = a6 + v13[9];
  *(_QWORD *)v15 = *(_QWORD *)a2;
  *(_DWORD *)(v15 + 8) = v11;
  v16 = a6 + v13[10];
  result = *(double *)a3;
  *(_QWORD *)v16 = *(_QWORD *)a3;
  *(_DWORD *)(v16 + 8) = v12;
  return result;
}

uint64_t protocol witness for StatefulRule.updateValue() in conformance UnaryPositionAwareLayoutComputer<A>(uint64_t a1)
{
  return UnaryPositionAwareLayoutComputer.updateValue()(a1, (uint64_t)type metadata accessor for UnaryPositionAwareLayoutEngine, (void (*)(char *, _DWORD *, _DWORD *, uint64_t, uint64_t))UnaryPositionAwareLayoutEngine.init(layout:layoutContext:child:), (uint64_t)&protocol conformance descriptor for UnaryPositionAwareLayoutComputer<A>, (uint64_t)&protocol witness table for UnaryPositionAwareLayoutEngine<A>);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance UnaryPositionAwareLayoutComputer<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnaryPositionAwareLayoutComputer<A>, a1);
  return static AsyncAttribute.flags.getter();
}

float64x2_t *specialized UnaryPositionAwareChildGeometry.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, float64x2_t *a4@<X8>)
{
  float64x2_t *result;
  int v9;
  int v10;
  double v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned __int8 v19[12];
  uint64_t v20;

  result = (float64x2_t *)AGGraphGetCurrentAttribute();
  v9 = *MEMORY[0x24BE096C0];
  if ((_DWORD)result == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v10 = (int)result;
    AGGraphGetValue();
    v12 = v10;
    v13 = v10;
    v14 = a1;
    v15 = HIDWORD(a2);
    v16 = a2;
    v17 = HIDWORD(a1);
    v18 = HIDWORD(a3);
    _SafeAreaRegionsIgnoringLayout.placement(of:in:)(&v12, -1, (uint64_t)&v20);
    v12 = v10;
    v13 = a3;
    v14 = v9;
    v11 = *(double *)AGGraphGetValue();
    v19[0] = *(_BYTE *)AGGraphGetValue();
    LayoutProxy.finallyPlaced(at:in:layoutDirection:)(&v20, v19, (uint64_t)a4, v11);
    result = (float64x2_t *)AGGraphGetValue();
    *a4 = vaddq_f64(*result, *a4);
  }
  return result;
}

{
  float64x2_t *result;
  int v9;
  int v10;
  uint64_t v11;
  double v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unsigned __int8 v20[12];
  uint64_t v21;

  result = (float64x2_t *)AGGraphGetCurrentAttribute();
  v9 = *MEMORY[0x24BE096C0];
  if ((_DWORD)result == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v10 = (int)result;
    v11 = *(_QWORD *)AGGraphGetValue();
    v13 = v10;
    v14 = v10;
    v15 = a1;
    v16 = HIDWORD(a2);
    v17 = a2;
    v18 = HIDWORD(a1);
    v19 = HIDWORD(a3);
    _SafeAreaRegionsIgnoringLayout.placement(of:in:)(&v13, v11, (uint64_t)&v21);
    v13 = v10;
    v14 = a3;
    v15 = v9;
    v12 = *(double *)AGGraphGetValue();
    v20[0] = *(_BYTE *)AGGraphGetValue();
    LayoutProxy.finallyPlaced(at:in:layoutDirection:)(&v21, v20, (uint64_t)a4, v12);
    result = (float64x2_t *)AGGraphGetValue();
    *a4 = vaddq_f64(*result, *a4);
  }
  return result;
}

float64x2_t *UnaryPositionAwareChildGeometry.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  float64x2_t *result;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t Value;
  double v22;
  float64x2_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  float64x2_t *v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  _DWORD v36[3];
  uint64_t v37;

  v28 = a6;
  v13 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (float64x2_t *)AGGraphGetCurrentAttribute();
  v17 = *MEMORY[0x24BE096C0];
  if ((_DWORD)result == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v18 = (int)result;
    v26 = a1;
    v27 = (float64x2_t *)a7;
    v25 = HIDWORD(a4);
    if (v17 == (_DWORD)a4)
      v19 = 0;
    else
      v19 = a4;
    if (v17 == (_DWORD)a4)
      v20 = v17;
    else
      v20 = v19;
    Value = AGGraphGetValue();
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, Value, a5);
    v36[0] = v18;
    v36[1] = v20;
    v36[2] = v17;
    v29 = v18;
    v30 = v18;
    v31 = a2;
    v32 = HIDWORD(a3);
    v33 = a3;
    v34 = HIDWORD(a2);
    v35 = v25;
    (*(void (**)(uint64_t *__return_ptr, _DWORD *, int *, uint64_t))(v28 + 48))(&v37, v36, &v29, a5);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, a5);
    v29 = v18;
    v30 = v20;
    v31 = v17;
    v22 = *(double *)AGGraphGetValue();
    LOBYTE(v36[0]) = *(_BYTE *)AGGraphGetValue();
    v23 = v27;
    LayoutProxy.finallyPlaced(at:in:layoutDirection:)(&v37, (unsigned __int8 *)v36, (uint64_t)v27, v22);
    result = (float64x2_t *)AGGraphGetValue();
    *v23 = vaddq_f64(*result, *v23);
  }
  return result;
}

float64x2_t *protocol witness for Rule.value.getter in conformance UnaryPositionAwareChildGeometry<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return UnaryPositionAwareChildGeometry.value.getter(*(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance UnaryPositionAwareChildGeometry<A>(uint64_t a1)
{
  return specialized UnaryChildGeometry.description.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 19, 0x1000000000000011, (void *)0x80000002352E3CC0);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance UnaryPositionAwareChildGeometry<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnaryPositionAwareChildGeometry<A>, a1);
  return static AsyncAttribute.flags.getter();
}

void specialized UnaryChildGeometry.value.getter(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v2;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int CurrentAttribute;
  int v17;
  unsigned __int8 v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = HIDWORD(a1);
  v4 = *(double *)AGGraphGetValue();
  v5 = *(_QWORD *)AGGraphGetValue();
  v6 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v6 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_6;
  if (one-time initialization token for _lock != -1)
    goto LABEL_9;
  while (_MovableLockIsOwner(static Update._lock))
  {
LABEL_6:
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type IgnoresAutomaticPaddingLayout and conformance IgnoresAutomaticPaddingLayout, (uint64_t)&type metadata for IgnoresAutomaticPaddingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    v8 = MEMORY[0x24BDAC7A8](v7);
    (*(void (**)(uint64_t *__return_ptr, double))(*(_QWORD *)v5 + 80))(&v22, v8);
    swift_release();
    v5 = v22;
    v9 = v23;
    v10 = v24;
    v11 = v25;
    v12 = v26;
    v13 = v27;
    v14 = v28;
    v15 = v29;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v17 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute != *MEMORY[0x24BE096C0])
    {
      v19 = CurrentAttribute;
      v20 = v2;
      v21 = v17;
      v22 = v5;
      v23 = v9;
      v24 = v10;
      v25 = v11;
      v26 = v12;
      v27 = v13;
      v28 = v14;
      v29 = v15;
      v18 = *(_BYTE *)AGGraphGetValue();
      LayoutProxy.finallyPlaced(at:in:layoutDirection:)(&v22, &v18, a2, v4);
      return;
    }
    __break(1u);
LABEL_9:
    swift_once();
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  int v2;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int CurrentAttribute;
  int v17;
  unsigned __int8 v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = HIDWORD(a1);
  v4 = *(double *)AGGraphGetValue();
  v5 = *(_QWORD *)AGGraphGetValue();
  v6 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v6 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_6;
  if (one-time initialization token for _lock != -1)
    goto LABEL_9;
  while (_MovableLockIsOwner(static Update._lock))
  {
LABEL_6:
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryLayoutEngine<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout and conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t)&type metadata for AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    v8 = MEMORY[0x24BDAC7A8](v7);
    (*(void (**)(uint64_t *__return_ptr, double))(*(_QWORD *)v5 + 80))(&v22, v8);
    swift_release();
    v5 = v22;
    v9 = v23;
    v10 = v24;
    v11 = v25;
    v12 = v26;
    v13 = v27;
    v14 = v28;
    v15 = v29;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v17 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute != *MEMORY[0x24BE096C0])
    {
      v19 = CurrentAttribute;
      v20 = v2;
      v21 = v17;
      v22 = v5;
      v23 = v9;
      v24 = v10;
      v25 = v11;
      v26 = v12;
      v27 = v13;
      v28 = v14;
      v29 = v15;
      v18 = *(_BYTE *)AGGraphGetValue();
      LayoutProxy.finallyPlaced(at:in:layoutDirection:)(&v22, &v18, a2, v4);
      return;
    }
    __break(1u);
LABEL_9:
    swift_once();
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  int v2;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int CurrentAttribute;
  int v17;
  unsigned __int8 v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = HIDWORD(a1);
  v4 = *(double *)AGGraphGetValue();
  v5 = *(_QWORD *)AGGraphGetValue();
  v6 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v6 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_6;
  if (one-time initialization token for _lock != -1)
    goto LABEL_9;
  while (_MovableLockIsOwner(static Update._lock))
  {
LABEL_6:
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryLayoutEngine<LayoutPriorityLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LayoutPriorityLayout and conformance LayoutPriorityLayout, (uint64_t)&type metadata for LayoutPriorityLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    v8 = MEMORY[0x24BDAC7A8](v7);
    (*(void (**)(uint64_t *__return_ptr, double))(*(_QWORD *)v5 + 80))(&v22, v8);
    swift_release();
    v5 = v22;
    v9 = v23;
    v10 = v24;
    v11 = v25;
    v12 = v26;
    v13 = v27;
    v14 = v28;
    v15 = v29;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v17 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute != *MEMORY[0x24BE096C0])
    {
      v19 = CurrentAttribute;
      v20 = v2;
      v21 = v17;
      v22 = v5;
      v23 = v9;
      v24 = v10;
      v25 = v11;
      v26 = v12;
      v27 = v13;
      v28 = v14;
      v29 = v15;
      v18 = *(_BYTE *)AGGraphGetValue();
      LayoutProxy.finallyPlaced(at:in:layoutDirection:)(&v22, &v18, a2, v4);
      return;
    }
    __break(1u);
LABEL_9:
    swift_once();
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  int v2;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int CurrentAttribute;
  int v17;
  unsigned __int8 v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = HIDWORD(a1);
  v4 = *(double *)AGGraphGetValue();
  v5 = *(_QWORD *)AGGraphGetValue();
  v6 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v6 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_6;
  if (one-time initialization token for _lock != -1)
    goto LABEL_9;
  while (_MovableLockIsOwner(static Update._lock))
  {
LABEL_6:
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryLayoutEngine<MoveTransition.MoveLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type MoveTransition.MoveLayout and conformance MoveTransition.MoveLayout, (uint64_t)&type metadata for MoveTransition.MoveLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    v8 = MEMORY[0x24BDAC7A8](v7);
    (*(void (**)(uint64_t *__return_ptr, double))(*(_QWORD *)v5 + 80))(&v22, v8);
    swift_release();
    v5 = v22;
    v9 = v23;
    v10 = v24;
    v11 = v25;
    v12 = v26;
    v13 = v27;
    v14 = v28;
    v15 = v29;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v17 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute != *MEMORY[0x24BE096C0])
    {
      v19 = CurrentAttribute;
      v20 = v2;
      v21 = v17;
      v22 = v5;
      v23 = v9;
      v24 = v10;
      v25 = v11;
      v26 = v12;
      v27 = v13;
      v28 = v14;
      v29 = v15;
      v18 = *(_BYTE *)AGGraphGetValue();
      LayoutProxy.finallyPlaced(at:in:layoutDirection:)(&v22, &v18, a2, v4);
      return;
    }
    __break(1u);
LABEL_9:
    swift_once();
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  int v2;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int CurrentAttribute;
  int v17;
  unsigned __int8 v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = HIDWORD(a1);
  v4 = *(double *)AGGraphGetValue();
  v5 = *(_QWORD *)AGGraphGetValue();
  v6 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v6 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_6;
  if (one-time initialization token for _lock != -1)
    goto LABEL_9;
  while (_MovableLockIsOwner(static Update._lock))
  {
LABEL_6:
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryLayoutEngine<SpacingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type SpacingLayout and conformance SpacingLayout, (uint64_t)&type metadata for SpacingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    v8 = MEMORY[0x24BDAC7A8](v7);
    (*(void (**)(uint64_t *__return_ptr, double))(*(_QWORD *)v5 + 80))(&v22, v8);
    swift_release();
    v5 = v22;
    v9 = v23;
    v10 = v24;
    v11 = v25;
    v12 = v26;
    v13 = v27;
    v14 = v28;
    v15 = v29;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v17 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute != *MEMORY[0x24BE096C0])
    {
      v19 = CurrentAttribute;
      v20 = v2;
      v21 = v17;
      v22 = v5;
      v23 = v9;
      v24 = v10;
      v25 = v11;
      v26 = v12;
      v27 = v13;
      v28 = v14;
      v29 = v15;
      v18 = *(_BYTE *)AGGraphGetValue();
      LayoutProxy.finallyPlaced(at:in:layoutDirection:)(&v22, &v18, a2, v4);
      return;
    }
    __break(1u);
LABEL_9:
    swift_once();
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  int v2;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int CurrentAttribute;
  int v17;
  unsigned __int8 v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = HIDWORD(a1);
  v4 = *(double *)AGGraphGetValue();
  v5 = *(_QWORD *)AGGraphGetValue();
  v6 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v6 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_6;
  if (one-time initialization token for _lock != -1)
    goto LABEL_9;
  while (_MovableLockIsOwner(static Update._lock))
  {
LABEL_6:
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryLayoutEngine<_FrameLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FrameLayout and conformance _FrameLayout, (uint64_t)&type metadata for _FrameLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    v8 = MEMORY[0x24BDAC7A8](v7);
    (*(void (**)(uint64_t *__return_ptr, double))(*(_QWORD *)v5 + 80))(&v22, v8);
    swift_release();
    v5 = v22;
    v9 = v23;
    v10 = v24;
    v11 = v25;
    v12 = v26;
    v13 = v27;
    v14 = v28;
    v15 = v29;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v17 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute != *MEMORY[0x24BE096C0])
    {
      v19 = CurrentAttribute;
      v20 = v2;
      v21 = v17;
      v22 = v5;
      v23 = v9;
      v24 = v10;
      v25 = v11;
      v26 = v12;
      v27 = v13;
      v28 = v14;
      v29 = v15;
      v18 = *(_BYTE *)AGGraphGetValue();
      LayoutProxy.finallyPlaced(at:in:layoutDirection:)(&v22, &v18, a2, v4);
      return;
    }
    __break(1u);
LABEL_9:
    swift_once();
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  int v2;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int CurrentAttribute;
  int v17;
  unsigned __int8 v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = HIDWORD(a1);
  v4 = *(double *)AGGraphGetValue();
  v5 = *(_QWORD *)AGGraphGetValue();
  v6 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v6 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_6;
  if (one-time initialization token for _lock != -1)
    goto LABEL_9;
  while (_MovableLockIsOwner(static Update._lock))
  {
LABEL_6:
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryLayoutEngine<_PaddingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _PaddingLayout and conformance _PaddingLayout, (uint64_t)&type metadata for _PaddingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    v8 = MEMORY[0x24BDAC7A8](v7);
    (*(void (**)(uint64_t *__return_ptr, double))(*(_QWORD *)v5 + 80))(&v22, v8);
    swift_release();
    v5 = v22;
    v9 = v23;
    v10 = v24;
    v11 = v25;
    v12 = v26;
    v13 = v27;
    v14 = v28;
    v15 = v29;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v17 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute != *MEMORY[0x24BE096C0])
    {
      v19 = CurrentAttribute;
      v20 = v2;
      v21 = v17;
      v22 = v5;
      v23 = v9;
      v24 = v10;
      v25 = v11;
      v26 = v12;
      v27 = v13;
      v28 = v14;
      v29 = v15;
      v18 = *(_BYTE *)AGGraphGetValue();
      LayoutProxy.finallyPlaced(at:in:layoutDirection:)(&v22, &v18, a2, v4);
      return;
    }
    __break(1u);
LABEL_9:
    swift_once();
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  int v2;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int CurrentAttribute;
  int v17;
  unsigned __int8 v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = HIDWORD(a1);
  v4 = *(double *)AGGraphGetValue();
  v5 = *(_QWORD *)AGGraphGetValue();
  v6 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v6 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_6;
  if (one-time initialization token for _lock != -1)
    goto LABEL_9;
  while (_MovableLockIsOwner(static Update._lock))
  {
LABEL_6:
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryLayoutEngine<_AlignmentLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AlignmentLayout and conformance _AlignmentLayout, (uint64_t)&type metadata for _AlignmentLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    v8 = MEMORY[0x24BDAC7A8](v7);
    (*(void (**)(uint64_t *__return_ptr, double))(*(_QWORD *)v5 + 80))(&v22, v8);
    swift_release();
    v5 = v22;
    v9 = v23;
    v10 = v24;
    v11 = v25;
    v12 = v26;
    v13 = v27;
    v14 = v28;
    v15 = v29;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v17 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute != *MEMORY[0x24BE096C0])
    {
      v19 = CurrentAttribute;
      v20 = v2;
      v21 = v17;
      v22 = v5;
      v23 = v9;
      v24 = v10;
      v25 = v11;
      v26 = v12;
      v27 = v13;
      v28 = v14;
      v29 = v15;
      v18 = *(_BYTE *)AGGraphGetValue();
      LayoutProxy.finallyPlaced(at:in:layoutDirection:)(&v22, &v18, a2, v4);
      return;
    }
    __break(1u);
LABEL_9:
    swift_once();
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  int v2;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int CurrentAttribute;
  int v17;
  unsigned __int8 v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = HIDWORD(a1);
  v4 = *(double *)AGGraphGetValue();
  v5 = *(_QWORD *)AGGraphGetValue();
  v6 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v6 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_6;
  if (one-time initialization token for _lock != -1)
    goto LABEL_9;
  while (_MovableLockIsOwner(static Update._lock))
  {
LABEL_6:
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryLayoutEngine<_FixedSizeLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FixedSizeLayout and conformance _FixedSizeLayout, (uint64_t)&type metadata for _FixedSizeLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    v8 = MEMORY[0x24BDAC7A8](v7);
    (*(void (**)(uint64_t *__return_ptr, double))(*(_QWORD *)v5 + 80))(&v22, v8);
    swift_release();
    v5 = v22;
    v9 = v23;
    v10 = v24;
    v11 = v25;
    v12 = v26;
    v13 = v27;
    v14 = v28;
    v15 = v29;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v17 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute != *MEMORY[0x24BE096C0])
    {
      v19 = CurrentAttribute;
      v20 = v2;
      v21 = v17;
      v22 = v5;
      v23 = v9;
      v24 = v10;
      v25 = v11;
      v26 = v12;
      v27 = v13;
      v28 = v14;
      v29 = v15;
      v18 = *(_BYTE *)AGGraphGetValue();
      LayoutProxy.finallyPlaced(at:in:layoutDirection:)(&v22, &v18, a2, v4);
      return;
    }
    __break(1u);
LABEL_9:
    swift_once();
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  int v2;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int CurrentAttribute;
  int v17;
  unsigned __int8 v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = HIDWORD(a1);
  v4 = *(double *)AGGraphGetValue();
  v5 = *(_QWORD *)AGGraphGetValue();
  v6 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v6 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_6;
  if (one-time initialization token for _lock != -1)
    goto LABEL_9;
  while (_MovableLockIsOwner(static Update._lock))
  {
LABEL_6:
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryLayoutEngine<_FlexFrameLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FlexFrameLayout and conformance _FlexFrameLayout, (uint64_t)&type metadata for _FlexFrameLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    v8 = MEMORY[0x24BDAC7A8](v7);
    (*(void (**)(uint64_t *__return_ptr, double))(*(_QWORD *)v5 + 80))(&v22, v8);
    swift_release();
    v5 = v22;
    v9 = v23;
    v10 = v24;
    v11 = v25;
    v12 = v26;
    v13 = v27;
    v14 = v28;
    v15 = v29;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v17 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute != *MEMORY[0x24BE096C0])
    {
      v19 = CurrentAttribute;
      v20 = v2;
      v21 = v17;
      v22 = v5;
      v23 = v9;
      v24 = v10;
      v25 = v11;
      v26 = v12;
      v27 = v13;
      v28 = v14;
      v29 = v15;
      v18 = *(_BYTE *)AGGraphGetValue();
      LayoutProxy.finallyPlaced(at:in:layoutDirection:)(&v22, &v18, a2, v4);
      return;
    }
    __break(1u);
LABEL_9:
    swift_once();
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  int v2;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int CurrentAttribute;
  int v17;
  unsigned __int8 v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = HIDWORD(a1);
  v4 = *(double *)AGGraphGetValue();
  v5 = *(_QWORD *)AGGraphGetValue();
  v6 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v6 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_6;
  if (one-time initialization token for _lock != -1)
    goto LABEL_9;
  while (_MovableLockIsOwner(static Update._lock))
  {
LABEL_6:
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryLayoutEngine<_AspectRatioLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AspectRatioLayout and conformance _AspectRatioLayout, (uint64_t)&type metadata for _AspectRatioLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    v8 = MEMORY[0x24BDAC7A8](v7);
    (*(void (**)(uint64_t *__return_ptr, double))(*(_QWORD *)v5 + 80))(&v22, v8);
    swift_release();
    v5 = v22;
    v9 = v23;
    v10 = v24;
    v11 = v25;
    v12 = v26;
    v13 = v27;
    v14 = v28;
    v15 = v29;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    v17 = *MEMORY[0x24BE096C0];
    if (CurrentAttribute != *MEMORY[0x24BE096C0])
    {
      v19 = CurrentAttribute;
      v20 = v2;
      v21 = v17;
      v22 = v5;
      v23 = v9;
      v24 = v10;
      v25 = v11;
      v26 = v12;
      v27 = v13;
      v28 = v14;
      v29 = v15;
      v18 = *(_BYTE *)AGGraphGetValue();
      LayoutProxy.finallyPlaced(at:in:layoutDirection:)(&v22, &v18, a2, v4);
      return;
    }
    __break(1u);
LABEL_9:
    swift_once();
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void UnaryChildGeometry.value.getter(unint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  double *Value;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int CurrentAttribute;
  int v27;
  unint64_t v28;
  _QWORD v29[8];
  unsigned __int8 v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  Value = (double *)AGGraphGetValue();
  v9 = *Value;
  v10 = *((_QWORD *)Value + 1);
  v11 = *((_QWORD *)Value + 2);
  v12 = *((_QWORD *)Value + 3);
  v13 = (unint64_t *)AGGraphGetValue();
  v14 = *v13;
  v15 = v13[1];
  swift_retain();
  v31 = v14;
  v32 = v15;
  v17 = type metadata accessor for UnaryLayoutEngine(0, a2, a3, v16);
  v29[2] = a2;
  v29[3] = a3;
  *(double *)&v29[4] = v9;
  v29[5] = v10;
  v29[6] = v11;
  v29[7] = v12;
  LayoutComputer.withMutableEngine<A, B>(type:do:)(v17, (uint64_t)partial apply for closure #1 in UnaryChildGeometry.value.getter, (uint64_t)v29, v17);
  swift_release();
  v18 = v33;
  v19 = v34;
  v20 = v35;
  v21 = v36;
  v22 = v37;
  v23 = v38;
  v24 = v39;
  v25 = v40;
  CurrentAttribute = AGGraphGetCurrentAttribute();
  v27 = *MEMORY[0x24BE096C0];
  if (CurrentAttribute == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v28 = HIDWORD(a1);
    if (v27 == HIDWORD(a1))
      LODWORD(v28) = *MEMORY[0x24BE096C0];
    v31 = __PAIR64__(v28, CurrentAttribute);
    LODWORD(v32) = v27;
    v33 = v18;
    v34 = v19;
    v35 = v20;
    v36 = v21;
    v37 = v22;
    v38 = v23;
    v39 = v24;
    v40 = v25;
    v30 = *(_BYTE *)AGGraphGetValue();
    LayoutProxy.finallyPlaced(at:in:layoutDirection:)(&v33, &v30, a4, v9);
  }
}

uint64_t specialized UnaryLayoutEngine.childPlacement(at:)@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t result;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  __int128 v38;
  double v39;
  char v40;
  double v41;
  char v42;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  char v55;
  char v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  char v83;
  double v84;
  double v85;
  double v86;
  double v87;

  v6 = v5;
  v12 = *(_QWORD *)(v5 + 4);
  v57 = *(_DWORD *)(v5 + 12);
  v13 = v5 + 256;
  v75 = *(_QWORD *)(v5 + 208);
  v76 = *(_QWORD *)(v5 + 200);
  v73 = *(_QWORD *)(v5 + 224);
  v74 = *(_QWORD *)(v5 + 216);
  v71 = *(_QWORD *)(v5 + 240);
  v72 = *(_QWORD *)(v5 + 232);
  v69 = *(_QWORD *)(v5 + 256);
  v70 = *(_QWORD *)(v5 + 248);
  v67 = *(_QWORD *)(v5 + 272);
  v68 = *(_QWORD *)(v5 + 264);
  v65 = *(_QWORD *)(v5 + 288);
  v66 = *(_QWORD *)(v5 + 280);
  v14 = *(_BYTE *)(v5 + 296);
  v15 = *(_QWORD *)(v5 + 304);
  v16 = *(_QWORD *)(v5 + 312);
  v17 = *(_QWORD *)(v5 + 320);
  v18 = *(_QWORD *)(v5 + 328);
  v19 = *(_QWORD *)(v5 + 336);
  v20 = *(_QWORD *)(v5 + 344);
  v21 = *(_QWORD *)(v5 + 352);
  v22 = *(_QWORD *)(v5 + 360);
  v23 = *(_QWORD *)(v5 + 368);
  v24 = *(_QWORD *)(v5 + 376);
  v25 = *(_QWORD *)(v5 + 384);
  v26 = *(_QWORD *)(v5 + 392);
  v27 = *(_BYTE *)(v5 + 400);
  v53 = *(_OWORD *)(v5 + 424);
  v54 = *(_OWORD *)(v5 + 408);
  v51 = *(_OWORD *)(v5 + 456);
  v52 = *(_OWORD *)(v5 + 440);
  v49 = *(_OWORD *)(v5 + 488);
  v50 = *(_OWORD *)(v5 + 472);
  v28 = *(_BYTE *)(v5 + 504);
  v84 = a2;
  v85 = a3;
  v86 = a4;
  v87 = a5;
  v63 = v21;
  v64 = v20;
  v61 = v23;
  v62 = v22;
  v59 = v25;
  v60 = v24;
  v58 = v26;
  if ((v14 & 1) == 0)
  {
    v55 = v27;
    v29 = v14;
    v30 = v19;
    *(_QWORD *)&v77 = v76;
    *((_QWORD *)&v77 + 1) = v75;
    *(_QWORD *)&v78 = v74;
    *((_QWORD *)&v78 + 1) = v73;
    *(_QWORD *)&v79 = v72;
    *((_QWORD *)&v79 + 1) = v71;
    *(_QWORD *)&v80 = v70;
    *((_QWORD *)&v80 + 1) = v69;
    *(_QWORD *)&v81 = v68;
    *((_QWORD *)&v81 + 1) = v67;
    *(_QWORD *)&v82 = v66;
    *((_QWORD *)&v82 + 1) = v65;
    v83 = 0;
    result = specialized static ViewSize.== infix(_:_:)(&v84, (double *)&v77);
    if ((result & 1) != 0)
      goto LABEL_9;
    v19 = v30;
    v14 = v29;
    v27 = v55;
    v21 = v63;
    v20 = v64;
    v23 = v61;
    v22 = v62;
    v25 = v59;
    v24 = v60;
    v26 = v58;
  }
  if ((v27 & 1) == 0)
  {
    v56 = v27;
    v32 = v14;
    *(_QWORD *)&v77 = v15;
    *((_QWORD *)&v77 + 1) = v16;
    *(_QWORD *)&v78 = v17;
    *((_QWORD *)&v78 + 1) = v18;
    *(_QWORD *)&v79 = v19;
    *((_QWORD *)&v79 + 1) = v20;
    *(_QWORD *)&v80 = v21;
    *((_QWORD *)&v80 + 1) = v22;
    *(_QWORD *)&v81 = v23;
    *((_QWORD *)&v81 + 1) = v24;
    *(_QWORD *)&v82 = v25;
    *((_QWORD *)&v82 + 1) = v26;
    v83 = 0;
    v33 = v19;
    result = specialized static ViewSize.== infix(_:_:)(&v84, (double *)&v77);
    if ((result & 1) == 0)
    {
      v19 = v33;
      v14 = v32;
      v27 = v56;
      goto LABEL_7;
    }
LABEL_9:
    v34 = BYTE8(v79);
    v35 = v80;
    v36 = BYTE8(v80);
    v37 = v81;
    v38 = v82;
    *(_QWORD *)a1 = v79;
    *(_BYTE *)(a1 + 8) = v34;
    *(_QWORD *)(a1 + 16) = v35;
    *(_BYTE *)(a1 + 24) = v36;
    *(_OWORD *)(a1 + 32) = v37;
    *(_OWORD *)(a1 + 48) = v38;
    return result;
  }
LABEL_7:
  v48 = v19;
  if ((v28 & 1) == 0)
  {
    v77 = v54;
    v78 = v53;
    v79 = v52;
    v80 = v51;
    v81 = v50;
    v82 = v49;
    v83 = 0;
    result = specialized static ViewSize.== infix(_:_:)(&v84, (double *)&v77);
    if ((result & 1) != 0)
      goto LABEL_9;
  }
  *(_QWORD *)&v77 = v12;
  DWORD2(v77) = v57;
  *(double *)&v78 = a2;
  *((double *)&v78 + 1) = a3;
  *(double *)&v79 = a4;
  *((double *)&v79 + 1) = a5;
  LOBYTE(v80) = 0;
  result = PlacementContext.proposedSize.getter((uint64_t)&v84);
  v39 = v84;
  v40 = LOBYTE(v85);
  *(double *)a1 = v84;
  *(_BYTE *)(a1 + 8) = v40;
  v41 = v86;
  *(double *)(a1 + 16) = v86;
  v42 = LOBYTE(v87);
  *(_BYTE *)(a1 + 24) = LOBYTE(v87);
  __asm { FMOV            V2.2D, #0.5 }
  *(_OWORD *)(a1 + 32) = _Q2;
  *(double *)(a1 + 48) = a2 * 0.5;
  *(double *)(a1 + 56) = a3 * 0.5;
  *(_QWORD *)(v6 + 408) = v15;
  *(_QWORD *)(v6 + 416) = v16;
  *(_QWORD *)(v6 + 424) = v17;
  *(_QWORD *)(v6 + 432) = v18;
  *(_QWORD *)(v6 + 440) = v48;
  *(_QWORD *)(v6 + 448) = v64;
  *(_QWORD *)(v6 + 456) = v63;
  *(_QWORD *)(v6 + 464) = v62;
  *(_QWORD *)(v6 + 472) = v61;
  *(_QWORD *)(v6 + 480) = v60;
  *(_QWORD *)(v6 + 488) = v59;
  *(_QWORD *)(v6 + 496) = v58;
  *(_BYTE *)(v13 + 248) = v27;
  *(_QWORD *)(v6 + 304) = v76;
  *(_QWORD *)(v6 + 312) = v75;
  *(_QWORD *)(v6 + 320) = v74;
  *(_QWORD *)(v6 + 328) = v73;
  *(_QWORD *)(v6 + 336) = v72;
  *(_QWORD *)(v6 + 344) = v71;
  *(_QWORD *)(v6 + 352) = v70;
  *(_QWORD *)(v6 + 360) = v69;
  *(_QWORD *)(v6 + 368) = v68;
  *(_QWORD *)(v6 + 376) = v67;
  *(_QWORD *)(v6 + 384) = v66;
  *(_QWORD *)(v6 + 392) = v65;
  *(_BYTE *)(v13 + 144) = v14;
  *(double *)(v6 + 232) = v39;
  *(_BYTE *)(v6 + 240) = v40;
  *(double *)(v6 + 248) = v41;
  *(_BYTE *)v13 = v42;
  *(double *)(v6 + 200) = a2;
  *(double *)(v6 + 208) = a3;
  *(double *)(v6 + 216) = a4;
  *(double *)(v6 + 224) = a5;
  *(double *)(v6 + 280) = a2 * 0.5;
  *(double *)(v6 + 288) = a3 * 0.5;
  *(_OWORD *)(v13 + 8) = _Q2;
  *(_BYTE *)(v13 + 40) = 0;
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t result;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  __int128 v38;
  double v39;
  char v40;
  double v41;
  char v42;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  char v55;
  char v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  char v83;
  double v84;
  double v85;
  double v86;
  double v87;

  v6 = v5;
  v12 = *(_QWORD *)(v5 + 8);
  v57 = *(_DWORD *)(v5 + 16);
  v13 = v5 + 256;
  v75 = *(_QWORD *)(v5 + 208);
  v76 = *(_QWORD *)(v5 + 200);
  v73 = *(_QWORD *)(v5 + 224);
  v74 = *(_QWORD *)(v5 + 216);
  v71 = *(_QWORD *)(v5 + 240);
  v72 = *(_QWORD *)(v5 + 232);
  v69 = *(_QWORD *)(v5 + 256);
  v70 = *(_QWORD *)(v5 + 248);
  v67 = *(_QWORD *)(v5 + 272);
  v68 = *(_QWORD *)(v5 + 264);
  v65 = *(_QWORD *)(v5 + 288);
  v66 = *(_QWORD *)(v5 + 280);
  v14 = *(_BYTE *)(v5 + 296);
  v15 = *(_QWORD *)(v5 + 304);
  v16 = *(_QWORD *)(v5 + 312);
  v17 = *(_QWORD *)(v5 + 320);
  v18 = *(_QWORD *)(v5 + 328);
  v19 = *(_QWORD *)(v5 + 336);
  v20 = *(_QWORD *)(v5 + 344);
  v21 = *(_QWORD *)(v5 + 352);
  v22 = *(_QWORD *)(v5 + 360);
  v23 = *(_QWORD *)(v5 + 368);
  v24 = *(_QWORD *)(v5 + 376);
  v25 = *(_QWORD *)(v5 + 384);
  v26 = *(_QWORD *)(v5 + 392);
  v27 = *(_BYTE *)(v5 + 400);
  v53 = *(_OWORD *)(v5 + 424);
  v54 = *(_OWORD *)(v5 + 408);
  v51 = *(_OWORD *)(v5 + 456);
  v52 = *(_OWORD *)(v5 + 440);
  v49 = *(_OWORD *)(v5 + 488);
  v50 = *(_OWORD *)(v5 + 472);
  v28 = *(_BYTE *)(v5 + 504);
  v84 = a2;
  v85 = a3;
  v86 = a4;
  v87 = a5;
  v63 = v21;
  v64 = v20;
  v61 = v23;
  v62 = v22;
  v59 = v25;
  v60 = v24;
  v58 = v26;
  if ((v14 & 1) == 0)
  {
    v55 = v27;
    v29 = v14;
    v30 = v19;
    *(_QWORD *)&v77 = v76;
    *((_QWORD *)&v77 + 1) = v75;
    *(_QWORD *)&v78 = v74;
    *((_QWORD *)&v78 + 1) = v73;
    *(_QWORD *)&v79 = v72;
    *((_QWORD *)&v79 + 1) = v71;
    *(_QWORD *)&v80 = v70;
    *((_QWORD *)&v80 + 1) = v69;
    *(_QWORD *)&v81 = v68;
    *((_QWORD *)&v81 + 1) = v67;
    *(_QWORD *)&v82 = v66;
    *((_QWORD *)&v82 + 1) = v65;
    v83 = 0;
    result = specialized static ViewSize.== infix(_:_:)(&v84, (double *)&v77);
    if ((result & 1) != 0)
      goto LABEL_9;
    v19 = v30;
    v14 = v29;
    v27 = v55;
    v21 = v63;
    v20 = v64;
    v23 = v61;
    v22 = v62;
    v25 = v59;
    v24 = v60;
    v26 = v58;
  }
  if ((v27 & 1) == 0)
  {
    v56 = v27;
    v32 = v14;
    *(_QWORD *)&v77 = v15;
    *((_QWORD *)&v77 + 1) = v16;
    *(_QWORD *)&v78 = v17;
    *((_QWORD *)&v78 + 1) = v18;
    *(_QWORD *)&v79 = v19;
    *((_QWORD *)&v79 + 1) = v20;
    *(_QWORD *)&v80 = v21;
    *((_QWORD *)&v80 + 1) = v22;
    *(_QWORD *)&v81 = v23;
    *((_QWORD *)&v81 + 1) = v24;
    *(_QWORD *)&v82 = v25;
    *((_QWORD *)&v82 + 1) = v26;
    v83 = 0;
    v33 = v19;
    result = specialized static ViewSize.== infix(_:_:)(&v84, (double *)&v77);
    if ((result & 1) == 0)
    {
      v19 = v33;
      v14 = v32;
      v27 = v56;
      goto LABEL_7;
    }
LABEL_9:
    v34 = BYTE8(v79);
    v35 = v80;
    v36 = BYTE8(v80);
    v37 = v81;
    v38 = v82;
    *(_QWORD *)a1 = v79;
    *(_BYTE *)(a1 + 8) = v34;
    *(_QWORD *)(a1 + 16) = v35;
    *(_BYTE *)(a1 + 24) = v36;
    *(_OWORD *)(a1 + 32) = v37;
    *(_OWORD *)(a1 + 48) = v38;
    return result;
  }
LABEL_7:
  v48 = v19;
  if ((v28 & 1) == 0)
  {
    v77 = v54;
    v78 = v53;
    v79 = v52;
    v80 = v51;
    v81 = v50;
    v82 = v49;
    v83 = 0;
    result = specialized static ViewSize.== infix(_:_:)(&v84, (double *)&v77);
    if ((result & 1) != 0)
      goto LABEL_9;
  }
  *(_QWORD *)&v77 = v12;
  DWORD2(v77) = v57;
  *(double *)&v78 = a2;
  *((double *)&v78 + 1) = a3;
  *(double *)&v79 = a4;
  *((double *)&v79 + 1) = a5;
  LOBYTE(v80) = 0;
  result = PlacementContext.proposedSize.getter((uint64_t)&v84);
  v39 = v84;
  v40 = LOBYTE(v85);
  *(double *)a1 = v84;
  *(_BYTE *)(a1 + 8) = v40;
  v41 = v86;
  *(double *)(a1 + 16) = v86;
  v42 = LOBYTE(v87);
  *(_BYTE *)(a1 + 24) = LOBYTE(v87);
  __asm { FMOV            V2.2D, #0.5 }
  *(_OWORD *)(a1 + 32) = _Q2;
  *(double *)(a1 + 48) = a2 * 0.5;
  *(double *)(a1 + 56) = a3 * 0.5;
  *(_QWORD *)(v6 + 408) = v15;
  *(_QWORD *)(v6 + 416) = v16;
  *(_QWORD *)(v6 + 424) = v17;
  *(_QWORD *)(v6 + 432) = v18;
  *(_QWORD *)(v6 + 440) = v48;
  *(_QWORD *)(v6 + 448) = v64;
  *(_QWORD *)(v6 + 456) = v63;
  *(_QWORD *)(v6 + 464) = v62;
  *(_QWORD *)(v6 + 472) = v61;
  *(_QWORD *)(v6 + 480) = v60;
  *(_QWORD *)(v6 + 488) = v59;
  *(_QWORD *)(v6 + 496) = v58;
  *(_BYTE *)(v13 + 248) = v27;
  *(_QWORD *)(v6 + 304) = v76;
  *(_QWORD *)(v6 + 312) = v75;
  *(_QWORD *)(v6 + 320) = v74;
  *(_QWORD *)(v6 + 328) = v73;
  *(_QWORD *)(v6 + 336) = v72;
  *(_QWORD *)(v6 + 344) = v71;
  *(_QWORD *)(v6 + 352) = v70;
  *(_QWORD *)(v6 + 360) = v69;
  *(_QWORD *)(v6 + 368) = v68;
  *(_QWORD *)(v6 + 376) = v67;
  *(_QWORD *)(v6 + 384) = v66;
  *(_QWORD *)(v6 + 392) = v65;
  *(_BYTE *)(v13 + 144) = v14;
  *(double *)(v6 + 232) = v39;
  *(_BYTE *)(v6 + 240) = v40;
  *(double *)(v6 + 248) = v41;
  *(_BYTE *)v13 = v42;
  *(double *)(v6 + 200) = a2;
  *(double *)(v6 + 208) = a3;
  *(double *)(v6 + 216) = a4;
  *(double *)(v6 + 224) = a5;
  *(double *)(v6 + 280) = a2 * 0.5;
  *(double *)(v6 + 288) = a3 * 0.5;
  *(_OWORD *)(v13 + 8) = _Q2;
  *(_BYTE *)(v13 + 40) = 0;
  return result;
}

{
  uint64_t v5;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  char v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  __int128 v36;
  double v37;
  char v38;
  double v39;
  char v40;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  char v70;
  double v71;
  double v72;
  double v73;
  double v74;
  _OWORD __dst[32];

  memcpy(__dst, (const void *)v5, 0x1F9uLL);
  v11 = *(_QWORD *)&__dst[13];
  v12 = *(_OWORD *)((char *)&__dst[13] + 8);
  v13 = *(_OWORD *)((char *)&__dst[14] + 8);
  v62 = *(_QWORD *)&__dst[16];
  v63 = *((_QWORD *)&__dst[15] + 1);
  v60 = *(_QWORD *)&__dst[17];
  v61 = *((_QWORD *)&__dst[16] + 1);
  v59 = *((_QWORD *)&__dst[17] + 1);
  v57 = *((_QWORD *)&__dst[12] + 1);
  v58 = *(_QWORD *)&__dst[18];
  v14 = BYTE8(__dst[18]);
  v71 = a2;
  v72 = a3;
  v73 = a4;
  v74 = a5;
  if ((BYTE8(__dst[18]) & 1) == 0)
  {
    v64 = *(_OWORD *)((char *)&__dst[12] + 8);
    v65 = *(_OWORD *)((char *)&__dst[13] + 8);
    v66 = *(_OWORD *)((char *)&__dst[14] + 8);
    v67 = *(_OWORD *)((char *)&__dst[15] + 8);
    v68 = *(_OWORD *)((char *)&__dst[16] + 8);
    v69 = *(_OWORD *)((char *)&__dst[17] + 8);
    v70 = 0;
    result = specialized static ViewSize.== infix(_:_:)(&v71, (double *)&v64);
    if ((result & 1) != 0)
      goto LABEL_8;
  }
  v17 = *((_QWORD *)&__dst[19] + 1);
  v16 = *(_QWORD *)&__dst[19];
  v56 = *((_QWORD *)&__dst[20] + 1);
  v54 = v11;
  v18 = *((_QWORD *)&__dst[21] + 1);
  v55 = *(_QWORD *)&__dst[21];
  v20 = *((_QWORD *)&__dst[22] + 1);
  v19 = *(_QWORD *)&__dst[22];
  v21 = *((_QWORD *)&__dst[23] + 1);
  v22 = *((_QWORD *)&__dst[24] + 1);
  v23 = *(_QWORD *)&__dst[24];
  v53 = __dst[25];
  v51 = *(_QWORD *)&__dst[23];
  v52 = *(_QWORD *)&__dst[20];
  if ((__dst[25] & 1) == 0)
  {
    v47 = v14;
    v64 = __dst[19];
    v65 = __dst[20];
    v66 = __dst[21];
    v67 = __dst[22];
    v68 = __dst[23];
    v69 = __dst[24];
    v70 = 0;
    v46 = *((_QWORD *)&__dst[21] + 1);
    v24 = *((_QWORD *)&__dst[19] + 1);
    v25 = *(_QWORD *)&__dst[19];
    v26 = *((_QWORD *)&__dst[22] + 1);
    v27 = *(_QWORD *)&__dst[22];
    v28 = *((_QWORD *)&__dst[24] + 1);
    v29 = *(_QWORD *)&__dst[24];
    v30 = *((_QWORD *)&__dst[23] + 1);
    result = specialized static ViewSize.== infix(_:_:)(&v71, (double *)&v64);
    if ((result & 1) != 0)
    {
LABEL_8:
      v32 = BYTE8(v66);
      v33 = v67;
      v34 = BYTE8(v67);
      v35 = v68;
      v36 = v69;
      *(_QWORD *)a1 = v66;
      *(_BYTE *)(a1 + 8) = v32;
      *(_QWORD *)(a1 + 16) = v33;
      *(_BYTE *)(a1 + 24) = v34;
      *(_OWORD *)(a1 + 32) = v35;
      *(_OWORD *)(a1 + 48) = v36;
      return result;
    }
    v16 = v25;
    v17 = v24;
    v18 = v46;
    v31 = v28;
    v14 = v47;
    v19 = v27;
    v20 = v26;
    v21 = v30;
    v23 = v29;
    v22 = v31;
  }
  v48 = v21;
  v49 = v19;
  v50 = v16;
  if ((BYTE8(__dst[31]) & 1) == 0)
  {
    v64 = *(_OWORD *)((char *)&__dst[25] + 8);
    v65 = *(_OWORD *)((char *)&__dst[26] + 8);
    v66 = *(_OWORD *)((char *)&__dst[27] + 8);
    v67 = *(_OWORD *)((char *)&__dst[28] + 8);
    v68 = *(_OWORD *)((char *)&__dst[29] + 8);
    v69 = *(_OWORD *)((char *)&__dst[30] + 8);
    v70 = 0;
    result = specialized static ViewSize.== infix(_:_:)(&v71, (double *)&v64);
    if ((result & 1) != 0)
      goto LABEL_8;
  }
  *(_QWORD *)&v64 = *((_QWORD *)&__dst[0] + 1);
  DWORD2(v64) = __dst[1];
  *(double *)&v65 = a2;
  *((double *)&v65 + 1) = a3;
  *(double *)&v66 = a4;
  *((double *)&v66 + 1) = a5;
  LOBYTE(v67) = 0;
  outlined retain of RadialGradient(__dst);
  PlacementContext.proposedSize.getter((uint64_t)&v71);
  v37 = v71;
  v38 = LOBYTE(v72);
  *(double *)a1 = v71;
  *(_BYTE *)(a1 + 8) = v38;
  v39 = v73;
  *(double *)(a1 + 16) = v73;
  v40 = LOBYTE(v74);
  *(_BYTE *)(a1 + 24) = LOBYTE(v74);
  __asm { FMOV            V2.2D, #0.5 }
  *(_OWORD *)(a1 + 32) = _Q2;
  *(double *)(a1 + 48) = a2 * 0.5;
  *(double *)(a1 + 56) = a3 * 0.5;
  *(_QWORD *)(v5 + 408) = v50;
  *(_QWORD *)(v5 + 416) = v17;
  *(_QWORD *)(v5 + 424) = v52;
  *(_QWORD *)(v5 + 432) = v56;
  *(_QWORD *)(v5 + 440) = v55;
  *(_QWORD *)(v5 + 448) = v18;
  *(_QWORD *)(v5 + 456) = v49;
  *(_QWORD *)(v5 + 464) = v20;
  *(_QWORD *)(v5 + 472) = v51;
  *(_QWORD *)(v5 + 480) = v48;
  *(_QWORD *)(v5 + 488) = v23;
  *(_QWORD *)(v5 + 496) = v22;
  *(_BYTE *)(v5 + 504) = v53;
  *(_QWORD *)(v5 + 304) = v57;
  *(_QWORD *)(v5 + 312) = v54;
  *(_OWORD *)(v5 + 320) = v12;
  *(_OWORD *)(v5 + 336) = v13;
  *(_QWORD *)(v5 + 352) = v63;
  *(_QWORD *)(v5 + 360) = v62;
  *(_QWORD *)(v5 + 368) = v61;
  *(_QWORD *)(v5 + 376) = v60;
  *(_QWORD *)(v5 + 384) = v59;
  *(_QWORD *)(v5 + 392) = v58;
  *(_BYTE *)(v5 + 400) = v14;
  *(double *)(v5 + 232) = v37;
  *(_BYTE *)(v5 + 240) = v38;
  *(double *)(v5 + 248) = v39;
  *(_BYTE *)(v5 + 256) = v40;
  *(_QWORD *)(v5 + 264) = 0x3FE0000000000000;
  *(_QWORD *)(v5 + 272) = 0x3FE0000000000000;
  *(double *)(v5 + 200) = a2;
  *(double *)(v5 + 208) = a3;
  *(double *)(v5 + 216) = a4;
  *(double *)(v5 + 224) = a5;
  *(double *)(v5 + 280) = a2 * 0.5;
  *(double *)(v5 + 288) = a3 * 0.5;
  *(_BYTE *)(v5 + 296) = 0;
  return outlined release of RadialGradient(__dst);
}

{
  __int128 *v5;
  __int128 *v6;
  __int128 v12;
  _BYTE *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  __int128 v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  unint64_t v58;
  char v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  char v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  char v88;
  _BYTE v89[8];
  char v90;
  uint64_t v91;
  char v92;
  __int128 v93;
  _OWORD v94[3];

  v6 = v5;
  v12 = v5[1];
  v13 = (char *)v5 + 280;
  v93 = *v5;
  v94[0] = v12;
  v94[1] = v5[2];
  v14 = *((_QWORD *)v5 + 6);
  v56 = *((_DWORD *)v5 + 14);
  v58 = *(_QWORD *)((char *)v5 + 60);
  v57 = *((_DWORD *)v5 + 17);
  v66 = *((_QWORD *)v5 + 31);
  v67 = *((_QWORD *)v5 + 30);
  v76 = *((_QWORD *)v5 + 33);
  v77 = *((_QWORD *)v5 + 32);
  v74 = *((_QWORD *)v5 + 35);
  v75 = *((_QWORD *)v5 + 34);
  v72 = *((_QWORD *)v5 + 37);
  v73 = *((_QWORD *)v5 + 36);
  v70 = *((_QWORD *)v5 + 39);
  v71 = *((_QWORD *)v5 + 38);
  v68 = *((_QWORD *)v5 + 41);
  v69 = *((_QWORD *)v5 + 40);
  v15 = *((_BYTE *)v5 + 336);
  v16 = *((_QWORD *)v5 + 43);
  v65 = *((_QWORD *)v5 + 44);
  v17 = *((_QWORD *)v5 + 45);
  v19 = *((_QWORD *)v6 + 46);
  v18 = *((_QWORD *)v6 + 47);
  v20 = *((_QWORD *)v6 + 48);
  v21 = *((_QWORD *)v6 + 49);
  v22 = *((_QWORD *)v6 + 50);
  v23 = *((_QWORD *)v6 + 51);
  v24 = *((_QWORD *)v6 + 52);
  v25 = *((_QWORD *)v6 + 53);
  v26 = *((_QWORD *)v6 + 54);
  v52 = v6[29];
  v53 = v6[28];
  v50 = v6[31];
  v51 = v6[30];
  v48 = v6[33];
  v49 = v6[32];
  *(double *)&v85 = a2;
  *((double *)&v85 + 1) = a3;
  *(double *)&v86 = a4;
  *((double *)&v86 + 1) = a5;
  v27 = v13[160];
  v28 = *((_BYTE *)v6 + 544);
  v59 = v15;
  v60 = v27;
  v63 = v24;
  v64 = v22;
  v61 = v25;
  v62 = v26;
  if ((v15 & 1) == 0)
  {
    v54 = v23;
    v29 = v16;
    *(_QWORD *)&v78 = v67;
    *((_QWORD *)&v78 + 1) = v66;
    *(_QWORD *)&v79 = v77;
    *((_QWORD *)&v79 + 1) = v76;
    *(_QWORD *)&v80 = v75;
    *((_QWORD *)&v80 + 1) = v74;
    *(_QWORD *)&v81 = v73;
    *((_QWORD *)&v81 + 1) = v72;
    *(_QWORD *)&v82 = v71;
    *((_QWORD *)&v82 + 1) = v70;
    *(_QWORD *)&v83 = v69;
    *((_QWORD *)&v83 + 1) = v68;
    v84 = 0;
    result = specialized static ViewSize.== infix(_:_:)((double *)&v85, (double *)&v78);
    if ((result & 1) != 0)
      goto LABEL_9;
    v16 = v29;
    v23 = v54;
    v24 = v63;
    v22 = v64;
    v25 = v61;
    v26 = v62;
    v27 = v60;
  }
  if ((v27 & 1) == 0)
  {
    *(_QWORD *)&v78 = v16;
    *((_QWORD *)&v78 + 1) = v65;
    *(_QWORD *)&v79 = v17;
    *((_QWORD *)&v79 + 1) = v19;
    *(_QWORD *)&v80 = v18;
    *((_QWORD *)&v80 + 1) = v20;
    *(_QWORD *)&v81 = v21;
    *((_QWORD *)&v81 + 1) = v22;
    *(_QWORD *)&v82 = v23;
    *((_QWORD *)&v82 + 1) = v24;
    *(_QWORD *)&v83 = v25;
    *((_QWORD *)&v83 + 1) = v26;
    v84 = 0;
    v55 = v21;
    v31 = v20;
    v32 = v18;
    v33 = v19;
    v34 = v17;
    v35 = v16;
    result = specialized static ViewSize.== infix(_:_:)((double *)&v85, (double *)&v78);
    if ((result & 1) == 0)
    {
      v16 = v35;
      v17 = v34;
      v19 = v33;
      v18 = v32;
      v20 = v31;
      v21 = v55;
      goto LABEL_7;
    }
LABEL_9:
    v36 = BYTE8(v80);
    v37 = v81;
    v38 = BYTE8(v81);
    v39 = v82;
    v40 = v83;
    *(_QWORD *)a1 = v80;
    *(_BYTE *)(a1 + 8) = v36;
    *(_QWORD *)(a1 + 16) = v37;
    *(_BYTE *)(a1 + 24) = v38;
    *(_OWORD *)(a1 + 32) = v39;
    *(_OWORD *)(a1 + 48) = v40;
    return result;
  }
LABEL_7:
  v47 = v16;
  if ((v28 & 1) == 0)
  {
    v78 = v53;
    v79 = v52;
    v80 = v51;
    v81 = v50;
    v82 = v49;
    v83 = v48;
    v84 = 0;
    result = specialized static ViewSize.== infix(_:_:)((double *)&v85, (double *)&v78);
    if ((result & 1) != 0)
      goto LABEL_9;
  }
  *(_QWORD *)&v78 = v14;
  DWORD2(v78) = v56;
  *(double *)&v79 = a2;
  *((double *)&v79 + 1) = a3;
  *(double *)&v80 = a4;
  *((double *)&v80 + 1) = a5;
  LOBYTE(v81) = 0;
  v85 = v78;
  v86 = v79;
  v87 = v80;
  v88 = 0;
  PlacementContext.proposedSize.getter((uint64_t)v89);
  if (BYTE8(v93))
    v41 = (uint64_t *)v89;
  else
    v41 = (uint64_t *)&v93;
  v42 = *v41;
  v43 = (uint64_t *)v94;
  if (BYTE8(v94[0]))
    v43 = &v91;
  v44 = *v43;
  LOBYTE(v85) = BYTE8(v93) & v90;
  v89[0] = BYTE8(v94[0]) & v92;
  result = specialized FrameLayoutCommon.commonPlacement(of:in:childProposal:)(v58, v57, (uint64_t)&v78, v42, BYTE8(v93) & v90, v44, BYTE8(v94[0]) & v92, a1);
  *((_BYTE *)v6 + 544) = v60;
  *((_QWORD *)v6 + 56) = v47;
  *((_QWORD *)v6 + 57) = v65;
  *((_QWORD *)v6 + 58) = v17;
  *((_QWORD *)v6 + 59) = v19;
  *((_QWORD *)v6 + 60) = v18;
  *((_QWORD *)v6 + 61) = v20;
  *((_QWORD *)v6 + 62) = v21;
  *((_QWORD *)v6 + 63) = v64;
  *((_QWORD *)v6 + 64) = v23;
  *((_QWORD *)v6 + 65) = v63;
  *((_QWORD *)v6 + 66) = v61;
  *((_QWORD *)v6 + 67) = v62;
  *((_QWORD *)v6 + 43) = v67;
  *((_QWORD *)v6 + 44) = v66;
  *((_QWORD *)v6 + 45) = v77;
  *((_QWORD *)v6 + 46) = v76;
  *((_QWORD *)v6 + 47) = v75;
  *((_QWORD *)v6 + 48) = v74;
  *((_QWORD *)v6 + 49) = v73;
  *((_QWORD *)v6 + 50) = v72;
  *((_QWORD *)v6 + 51) = v71;
  *((_QWORD *)v6 + 52) = v70;
  *((_QWORD *)v6 + 53) = v69;
  *((_QWORD *)v6 + 54) = v68;
  v13[160] = v59;
  *((_QWORD *)v6 + 34) = *(_QWORD *)a1;
  *v13 = *(_BYTE *)(a1 + 8);
  *((_QWORD *)v6 + 36) = *(_QWORD *)(a1 + 16);
  v13[16] = *(_BYTE *)(a1 + 24);
  v45 = *(_OWORD *)(a1 + 32);
  v46 = *(_OWORD *)(a1 + 48);
  *((double *)v6 + 30) = a2;
  *((double *)v6 + 31) = a3;
  *((double *)v6 + 32) = a4;
  *((double *)v6 + 33) = a5;
  v6[19] = v45;
  v6[20] = v46;
  v13[56] = 0;
  return result;
}

{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  __int128 v37;
  char v38;
  double v39;
  char v40;
  double v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  uint64_t v49;
  unsigned __int8 v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  int v58;
  int v59;
  int v60;
  unsigned __int8 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  char v86;
  double v87;
  double v88;
  double v89;
  double v90;

  v6 = v5;
  v59 = *v5;
  v60 = v5[1];
  v12 = *(_QWORD *)(v5 + 4);
  v13 = v5 + 256;
  v58 = *((_DWORD *)v5 + 3);
  v78 = *((_QWORD *)v5 + 26);
  v79 = *((_QWORD *)v5 + 25);
  v76 = *((_QWORD *)v5 + 28);
  v77 = *((_QWORD *)v5 + 27);
  v74 = *((_QWORD *)v5 + 30);
  v75 = *((_QWORD *)v5 + 29);
  v72 = *((_QWORD *)v5 + 32);
  v73 = *((_QWORD *)v5 + 31);
  v70 = *((_QWORD *)v5 + 34);
  v71 = *((_QWORD *)v5 + 33);
  v68 = *((_QWORD *)v5 + 36);
  v69 = *((_QWORD *)v5 + 35);
  v14 = v5[296];
  v15 = *((_QWORD *)v5 + 38);
  v16 = *((_QWORD *)v5 + 39);
  v17 = *((_QWORD *)v5 + 40);
  v18 = *((_QWORD *)v5 + 41);
  v19 = *((_QWORD *)v5 + 42);
  v20 = *((_QWORD *)v5 + 43);
  v21 = *((_QWORD *)v5 + 44);
  v22 = *((_QWORD *)v5 + 45);
  v23 = *((_QWORD *)v5 + 46);
  v24 = *((_QWORD *)v5 + 47);
  v25 = *((_QWORD *)v5 + 48);
  v26 = *((_QWORD *)v5 + 49);
  v56 = *(_OWORD *)(v5 + 424);
  v57 = *(_OWORD *)(v5 + 408);
  v54 = *(_OWORD *)(v5 + 456);
  v55 = *(_OWORD *)(v5 + 440);
  v52 = *(_OWORD *)(v5 + 488);
  v53 = *(_OWORD *)(v5 + 472);
  v87 = a2;
  v88 = a3;
  v89 = a4;
  v90 = a5;
  v27 = v5[400];
  v28 = v5[504];
  v66 = v22;
  v67 = v21;
  v64 = v24;
  v65 = v23;
  v62 = v26;
  v63 = v25;
  v61 = v27;
  if ((v14 & 1) == 0)
  {
    v49 = v20;
    v29 = v14;
    v30 = v19;
    *(_QWORD *)&v80 = v79;
    *((_QWORD *)&v80 + 1) = v78;
    *(_QWORD *)&v81 = v77;
    *((_QWORD *)&v81 + 1) = v76;
    *(_QWORD *)&v82 = v75;
    *((_QWORD *)&v82 + 1) = v74;
    *(_QWORD *)&v83 = v73;
    *((_QWORD *)&v83 + 1) = v72;
    *(_QWORD *)&v84 = v71;
    *((_QWORD *)&v84 + 1) = v70;
    *(_QWORD *)&v85 = v69;
    *((_QWORD *)&v85 + 1) = v68;
    v86 = 0;
    result = specialized static ViewSize.== infix(_:_:)(&v87, (double *)&v80);
    if ((result & 1) != 0)
      goto LABEL_9;
    v19 = v30;
    v14 = v29;
    v20 = v49;
    v22 = v66;
    v21 = v67;
    v24 = v64;
    v23 = v65;
    v26 = v62;
    v25 = v63;
    v27 = v61;
  }
  if ((v27 & 1) == 0)
  {
    v50 = v14;
    *(_QWORD *)&v80 = v15;
    *((_QWORD *)&v80 + 1) = v16;
    *(_QWORD *)&v81 = v17;
    *((_QWORD *)&v81 + 1) = v18;
    *(_QWORD *)&v82 = v19;
    *((_QWORD *)&v82 + 1) = v20;
    *(_QWORD *)&v83 = v21;
    *((_QWORD *)&v83 + 1) = v22;
    *(_QWORD *)&v84 = v23;
    *((_QWORD *)&v84 + 1) = v24;
    *(_QWORD *)&v85 = v25;
    *((_QWORD *)&v85 + 1) = v26;
    v86 = 0;
    v32 = v19;
    result = specialized static ViewSize.== infix(_:_:)(&v87, (double *)&v80);
    if ((result & 1) == 0)
    {
      v19 = v32;
      v14 = v50;
      goto LABEL_7;
    }
LABEL_9:
    v33 = BYTE8(v82);
    v34 = v83;
    v35 = BYTE8(v83);
    v36 = v84;
    v37 = v85;
    *(_QWORD *)a1 = v82;
    *(_BYTE *)(a1 + 8) = v33;
    *(_QWORD *)(a1 + 16) = v34;
    *(_BYTE *)(a1 + 24) = v35;
    *(_OWORD *)(a1 + 32) = v36;
    *(_OWORD *)(a1 + 48) = v37;
    return result;
  }
LABEL_7:
  v51 = v19;
  if ((v28 & 1) == 0)
  {
    v80 = v57;
    v81 = v56;
    v82 = v55;
    v83 = v54;
    v84 = v53;
    v85 = v52;
    v86 = 0;
    result = specialized static ViewSize.== infix(_:_:)(&v87, (double *)&v80);
    if ((result & 1) != 0)
      goto LABEL_9;
  }
  *(_QWORD *)&v80 = v12;
  DWORD2(v80) = v58;
  *(double *)&v81 = a2;
  *((double *)&v81 + 1) = a3;
  *(double *)&v82 = a4;
  *((double *)&v82 + 1) = a5;
  LOBYTE(v83) = 0;
  result = PlacementContext.proposedSize.getter((uint64_t)&v87);
  v38 = v59 | LOBYTE(v88);
  v39 = v87;
  if (v59)
    v39 = 0.0;
  v40 = v60 | LOBYTE(v90);
  v41 = v89;
  if (v60)
    v41 = 0.0;
  *(double *)a1 = v39;
  v42 = v38 & 1;
  *(_BYTE *)(a1 + 8) = v42;
  *(double *)(a1 + 16) = v41;
  v43 = v40 & 1;
  *(_BYTE *)(a1 + 24) = v43;
  __asm { FMOV            V2.2D, #0.5 }
  *(_OWORD *)(a1 + 32) = _Q2;
  *(double *)(a1 + 48) = a2 * 0.5;
  *(double *)(a1 + 56) = a3 * 0.5;
  *((_QWORD *)v6 + 51) = v15;
  *((_QWORD *)v6 + 52) = v16;
  *((_QWORD *)v6 + 53) = v17;
  *((_QWORD *)v6 + 54) = v18;
  *((_QWORD *)v6 + 55) = v51;
  *((_QWORD *)v6 + 56) = v20;
  *((_QWORD *)v6 + 57) = v67;
  *((_QWORD *)v6 + 58) = v66;
  *((_QWORD *)v6 + 59) = v65;
  *((_QWORD *)v6 + 60) = v64;
  *((_QWORD *)v6 + 61) = v63;
  *((_QWORD *)v6 + 62) = v62;
  v13[248] = v61;
  *((_QWORD *)v6 + 38) = v79;
  *((_QWORD *)v6 + 39) = v78;
  *((_QWORD *)v6 + 40) = v77;
  *((_QWORD *)v6 + 41) = v76;
  *((_QWORD *)v6 + 42) = v75;
  *((_QWORD *)v6 + 43) = v74;
  *((_QWORD *)v6 + 44) = v73;
  *((_QWORD *)v6 + 45) = v72;
  *((_QWORD *)v6 + 46) = v71;
  *((_QWORD *)v6 + 47) = v70;
  *((_QWORD *)v6 + 48) = v69;
  *((_QWORD *)v6 + 49) = v68;
  v13[144] = v14;
  *((double *)v6 + 29) = v39;
  v6[240] = v42;
  *((double *)v6 + 31) = v41;
  *v13 = v43;
  *((double *)v6 + 25) = a2;
  *((double *)v6 + 26) = a3;
  *((double *)v6 + 27) = a4;
  *((double *)v6 + 28) = a5;
  *((double *)v6 + 35) = a2 * 0.5;
  *((double *)v6 + 36) = a3 * 0.5;
  *(_OWORD *)(v13 + 8) = _Q2;
  v13[40] = 0;
  return result;
}

{
  __int128 *v5;
  __int128 *v6;
  __int128 v12;
  _BYTE *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  uint64_t result;
  char v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  char v33;
  char v34;
  char v35;
  char v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  char v76;
  char v77;
  char v78;
  double v79[4];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;

  v6 = v5;
  v12 = v5[5];
  v13 = (char *)v5 + 344;
  v84 = v5[4];
  v85 = v12;
  v86 = v5[6];
  v14 = v5[1];
  v80 = *v5;
  v81 = v14;
  v15 = v5[3];
  v82 = v5[2];
  v83 = v15;
  v16 = *((_QWORD *)v5 + 14);
  v17 = *((_DWORD *)v5 + 30);
  v48 = *(_QWORD *)((char *)v6 + 124);
  v47 = *((_DWORD *)v6 + 33);
  v18 = *((_QWORD *)v6 + 38);
  v19 = *((_QWORD *)v6 + 39);
  v68 = *((_QWORD *)v6 + 41);
  v69 = *((_QWORD *)v6 + 40);
  v66 = *((_QWORD *)v6 + 43);
  v67 = *((_QWORD *)v6 + 42);
  v64 = *((_QWORD *)v6 + 45);
  v65 = *((_QWORD *)v6 + 44);
  v62 = *((_QWORD *)v6 + 47);
  v63 = *((_QWORD *)v6 + 46);
  v20 = *((_QWORD *)v6 + 49);
  v21 = v13[56];
  v60 = *((_QWORD *)v6 + 51);
  v61 = *((_QWORD *)v6 + 48);
  v58 = *((_QWORD *)v6 + 53);
  v59 = *((_QWORD *)v6 + 52);
  v56 = *((_QWORD *)v6 + 55);
  v57 = *((_QWORD *)v6 + 54);
  v54 = *((_QWORD *)v6 + 57);
  v55 = *((_QWORD *)v6 + 56);
  v52 = *((_QWORD *)v6 + 59);
  v53 = *((_QWORD *)v6 + 58);
  v50 = *((_QWORD *)v6 + 61);
  v51 = *((_QWORD *)v6 + 60);
  v49 = *((_QWORD *)v6 + 62);
  v43 = v6[33];
  v45 = v6[32];
  v41 = v6[35];
  v42 = v6[34];
  v39 = v6[37];
  v40 = v6[36];
  v79[0] = a2;
  v79[1] = a3;
  v79[2] = a4;
  v79[3] = a5;
  v22 = v13[160];
  v23 = *((_BYTE *)v6 + 608);
  if ((v21 & 1) == 0)
  {
    *(_QWORD *)&v70 = v18;
    *((_QWORD *)&v70 + 1) = v19;
    *(_QWORD *)&v71 = v69;
    *((_QWORD *)&v71 + 1) = v68;
    *(_QWORD *)&v72 = v67;
    *((_QWORD *)&v72 + 1) = v66;
    *(_QWORD *)&v73 = v65;
    *((_QWORD *)&v73 + 1) = v64;
    *(_QWORD *)&v74 = v63;
    *((_QWORD *)&v74 + 1) = v62;
    *(_QWORD *)&v75 = v61;
    *((_QWORD *)&v75 + 1) = v20;
    v76 = 0;
    result = specialized static ViewSize.== infix(_:_:)(v79, (double *)&v70);
    if ((result & 1) != 0)
      goto LABEL_7;
  }
  if ((v22 & 1) == 0)
  {
    *(_QWORD *)&v70 = v60;
    *((_QWORD *)&v70 + 1) = v59;
    *(_QWORD *)&v71 = v58;
    *((_QWORD *)&v71 + 1) = v57;
    *(_QWORD *)&v72 = v56;
    *((_QWORD *)&v72 + 1) = v55;
    *(_QWORD *)&v73 = v54;
    *((_QWORD *)&v73 + 1) = v53;
    *(_QWORD *)&v74 = v52;
    *((_QWORD *)&v74 + 1) = v51;
    *(_QWORD *)&v75 = v50;
    *((_QWORD *)&v75 + 1) = v49;
    v76 = 0;
    result = specialized static ViewSize.== infix(_:_:)(v79, (double *)&v70);
    if ((result & 1) != 0)
      goto LABEL_7;
  }
  if ((v23 & 1) == 0)
  {
    v70 = v45;
    v71 = v43;
    v72 = v42;
    v73 = v41;
    v74 = v40;
    v75 = v39;
    v76 = 0;
    result = specialized static ViewSize.== infix(_:_:)(v79, (double *)&v70);
    if ((result & 1) != 0)
    {
LABEL_7:
      v25 = BYTE8(v72);
      v26 = v73;
      v27 = BYTE8(v73);
      v28 = v74;
      v29 = v75;
      *(_QWORD *)a1 = v72;
      *(_BYTE *)(a1 + 8) = v25;
      *(_QWORD *)(a1 + 16) = v26;
      *(_BYTE *)(a1 + 24) = v27;
      *(_OWORD *)(a1 + 32) = v28;
      *(_OWORD *)(a1 + 48) = v29;
      return result;
    }
  }
  v44 = v19;
  v46 = v18;
  *(_QWORD *)&v70 = v16;
  DWORD2(v70) = v17;
  *(double *)&v71 = a2;
  *((double *)&v71 + 1) = a3;
  *(double *)&v72 = a4;
  *((double *)&v72 + 1) = a5;
  LOBYTE(v73) = 0;
  if (one-time initialization token for introduced != -1)
    swift_once();
  v30 = *(_QWORD *)&a2;
  v31 = *(_QWORD *)&a3;
  v32 = static _SemanticFeature_v5.introduced;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FAB4 != 1)
  {
    if (static Semantics.forced < v32)
      goto LABEL_14;
LABEL_16:
    v30 = proposedDimension #1 (_:min:ideal:max:) in _FlexFrameLayout.childPlacementProposal(of:context:)(0, v80, SBYTE8(v80), v81, SBYTE8(v81), v82, SBYTE8(v82), (uint64_t)&v70);
    v33 = v35 & 1;
    v31 = proposedDimension #1 (_:min:ideal:max:) in _FlexFrameLayout.childPlacementProposal(of:context:)(1, v83, SBYTE8(v83), v84, SBYTE8(v84), v85, SBYTE8(v85), (uint64_t)&v70);
    v34 = v36 & 1;
    goto LABEL_17;
  }
  if ((dyld_program_sdk_at_least() & 1) != 0)
    goto LABEL_16;
LABEL_14:
  v33 = 0;
  v34 = 0;
LABEL_17:
  v78 = v33;
  v77 = v34;
  result = specialized FrameLayoutCommon.commonPlacement(of:in:childProposal:)(v48, v47, (uint64_t)&v70, v30, v33, v31, v34, a1);
  *((_BYTE *)v6 + 608) = v22;
  *((_QWORD *)v6 + 64) = v60;
  *((_QWORD *)v6 + 65) = v59;
  *((_QWORD *)v6 + 66) = v58;
  *((_QWORD *)v6 + 67) = v57;
  *((_QWORD *)v6 + 68) = v56;
  *((_QWORD *)v6 + 69) = v55;
  *((_QWORD *)v6 + 70) = v54;
  *((_QWORD *)v6 + 71) = v53;
  *((_QWORD *)v6 + 72) = v52;
  *((_QWORD *)v6 + 73) = v51;
  *((_QWORD *)v6 + 74) = v50;
  *((_QWORD *)v6 + 75) = v49;
  *((_QWORD *)v6 + 51) = v46;
  *((_QWORD *)v6 + 52) = v44;
  *((_QWORD *)v6 + 53) = v69;
  *((_QWORD *)v6 + 54) = v68;
  *((_QWORD *)v6 + 55) = v67;
  *((_QWORD *)v6 + 56) = v66;
  *((_QWORD *)v6 + 57) = v65;
  *((_QWORD *)v6 + 58) = v64;
  *((_QWORD *)v6 + 59) = v63;
  *((_QWORD *)v6 + 60) = v62;
  *((_QWORD *)v6 + 61) = v61;
  *((_QWORD *)v6 + 62) = v20;
  v13[160] = v21;
  *((_QWORD *)v6 + 42) = *(_QWORD *)a1;
  *v13 = *(_BYTE *)(a1 + 8);
  *((_QWORD *)v6 + 44) = *(_QWORD *)(a1 + 16);
  v13[16] = *(_BYTE *)(a1 + 24);
  v37 = *(_OWORD *)(a1 + 32);
  v38 = *(_OWORD *)(a1 + 48);
  *((double *)v6 + 38) = a2;
  *((double *)v6 + 39) = a3;
  *((double *)v6 + 40) = a4;
  *((double *)v6 + 41) = a5;
  v6[23] = v37;
  v6[24] = v38;
  v13[56] = 0;
  return result;
}

void specialized UnaryLayoutEngine.childPlacement(at:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  __int128 *v5;
  __int128 *v6;
  __int128 v12;
  _BYTE *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  char v59;
  char v60;
  int v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  char v86;
  double v87[4];
  __int128 v88;
  _OWORD v89[3];

  v6 = v5;
  v12 = v5[1];
  v13 = (char *)v5 + 280;
  v88 = *v5;
  v89[0] = v12;
  *(_OWORD *)((char *)v89 + 9) = *(__int128 *)((char *)v5 + 25);
  v14 = *(_QWORD *)((char *)v5 + 44);
  v61 = *((_DWORD *)v5 + 13);
  v70 = *((_QWORD *)v5 + 31);
  v71 = *((_QWORD *)v5 + 30);
  v68 = *((_QWORD *)v5 + 33);
  v69 = *((_QWORD *)v5 + 32);
  v78 = *((_QWORD *)v5 + 35);
  v79 = *((_QWORD *)v5 + 34);
  v76 = *((_QWORD *)v5 + 37);
  v77 = *((_QWORD *)v5 + 36);
  v74 = *((_QWORD *)v5 + 39);
  v75 = *((_QWORD *)v5 + 38);
  v72 = *((_QWORD *)v5 + 41);
  v73 = *((_QWORD *)v5 + 40);
  v15 = *((_BYTE *)v5 + 336);
  v16 = *((_QWORD *)v5 + 43);
  v17 = *((_QWORD *)v5 + 44);
  v19 = *((_QWORD *)v5 + 45);
  v18 = *((_QWORD *)v5 + 46);
  v20 = *((_QWORD *)v5 + 47);
  v21 = *((_QWORD *)v5 + 48);
  v23 = *((_QWORD *)v5 + 49);
  v22 = *((_QWORD *)v5 + 50);
  v24 = *((_QWORD *)v5 + 51);
  v25 = *((_QWORD *)v6 + 52);
  v26 = *((_QWORD *)v6 + 53);
  v27 = *((_QWORD *)v6 + 54);
  v28 = v13[160];
  v57 = v6[29];
  v58 = v6[28];
  v55 = v6[31];
  v56 = v6[30];
  v53 = v6[33];
  v54 = v6[32];
  v29 = *((_BYTE *)v6 + 544);
  v87[0] = a2;
  v87[1] = a3;
  v87[2] = a4;
  v87[3] = a5;
  v66 = v22;
  v67 = v23;
  v64 = v26;
  v65 = v25;
  v63 = v27;
  v62 = v28;
  if ((v15 & 1) == 0)
  {
    v59 = v29;
    v49 = v21;
    v30 = v20;
    v31 = v18;
    v32 = v19;
    v33 = v17;
    v34 = v15;
    v35 = v16;
    *(_QWORD *)&v80 = v71;
    *((_QWORD *)&v80 + 1) = v70;
    *(_QWORD *)&v81 = v69;
    *((_QWORD *)&v81 + 1) = v68;
    *(_QWORD *)&v82 = v79;
    *((_QWORD *)&v82 + 1) = v78;
    *(_QWORD *)&v83 = v77;
    *((_QWORD *)&v83 + 1) = v76;
    *(_QWORD *)&v84 = v75;
    *((_QWORD *)&v84 + 1) = v74;
    *(_QWORD *)&v85 = v73;
    *((_QWORD *)&v85 + 1) = v72;
    v86 = 0;
    if (specialized static ViewSize.== infix(_:_:)(v87, (double *)&v80))
      goto LABEL_9;
    v16 = v35;
    v15 = v34;
    v17 = v33;
    v19 = v32;
    v18 = v31;
    v20 = v30;
    v21 = v49;
    v22 = v66;
    v23 = v67;
    v26 = v64;
    v25 = v65;
    v27 = v63;
    v28 = v62;
    v29 = v59;
  }
  if ((v28 & 1) == 0)
  {
    v60 = v29;
    v50 = v15;
    *(_QWORD *)&v80 = v16;
    *((_QWORD *)&v80 + 1) = v17;
    *(_QWORD *)&v81 = v19;
    *((_QWORD *)&v81 + 1) = v18;
    *(_QWORD *)&v82 = v20;
    *((_QWORD *)&v82 + 1) = v21;
    *(_QWORD *)&v83 = v23;
    *((_QWORD *)&v83 + 1) = v22;
    *(_QWORD *)&v84 = v24;
    *((_QWORD *)&v84 + 1) = v25;
    *(_QWORD *)&v85 = v26;
    *((_QWORD *)&v85 + 1) = v27;
    v86 = 0;
    v36 = v16;
    v37 = v21;
    v38 = v20;
    v39 = v18;
    v40 = v19;
    v41 = v17;
    if (!specialized static ViewSize.== infix(_:_:)(v87, (double *)&v80))
    {
      v16 = v36;
      v15 = v50;
      v17 = v41;
      v19 = v40;
      v18 = v39;
      v20 = v38;
      v21 = v37;
      v29 = v60;
      goto LABEL_7;
    }
LABEL_9:
    v42 = BYTE8(v82);
    v43 = v83;
    v44 = BYTE8(v83);
    v45 = v84;
    v46 = v85;
    *(_QWORD *)a1 = v82;
    *(_BYTE *)(a1 + 8) = v42;
    *(_QWORD *)(a1 + 16) = v43;
    *(_BYTE *)(a1 + 24) = v44;
    *(_OWORD *)(a1 + 32) = v45;
    *(_OWORD *)(a1 + 48) = v46;
    return;
  }
LABEL_7:
  v51 = v17;
  v52 = v16;
  if ((v29 & 1) == 0)
  {
    v80 = v58;
    v81 = v57;
    v82 = v56;
    v83 = v55;
    v84 = v54;
    v85 = v53;
    v86 = 0;
    if (specialized static ViewSize.== infix(_:_:)(v87, (double *)&v80))
      goto LABEL_9;
  }
  *(_QWORD *)&v80 = v14;
  DWORD2(v80) = v61;
  *(double *)&v81 = a2;
  *((double *)&v81 + 1) = a3;
  *(double *)&v82 = a4;
  *((double *)&v82 + 1) = a5;
  LOBYTE(v83) = 0;
  _PaddingLayout.placement(of:in:)((int *)&v80, a1);
  *((_BYTE *)v6 + 544) = v62;
  *((_QWORD *)v6 + 56) = v52;
  *((_QWORD *)v6 + 57) = v51;
  *((_QWORD *)v6 + 58) = v19;
  *((_QWORD *)v6 + 59) = v18;
  *((_QWORD *)v6 + 60) = v20;
  *((_QWORD *)v6 + 61) = v21;
  *((_QWORD *)v6 + 62) = v67;
  *((_QWORD *)v6 + 63) = v66;
  *((_QWORD *)v6 + 64) = v24;
  *((_QWORD *)v6 + 65) = v65;
  *((_QWORD *)v6 + 66) = v64;
  *((_QWORD *)v6 + 67) = v63;
  *((_QWORD *)v6 + 43) = v71;
  *((_QWORD *)v6 + 44) = v70;
  *((_QWORD *)v6 + 45) = v69;
  *((_QWORD *)v6 + 46) = v68;
  *((_QWORD *)v6 + 47) = v79;
  *((_QWORD *)v6 + 48) = v78;
  *((_QWORD *)v6 + 49) = v77;
  *((_QWORD *)v6 + 50) = v76;
  *((_QWORD *)v6 + 51) = v75;
  *((_QWORD *)v6 + 52) = v74;
  *((_QWORD *)v6 + 53) = v73;
  *((_QWORD *)v6 + 54) = v72;
  v13[160] = v15;
  *((_QWORD *)v6 + 34) = *(_QWORD *)a1;
  *v13 = *(_BYTE *)(a1 + 8);
  *((_QWORD *)v6 + 36) = *(_QWORD *)(a1 + 16);
  v13[16] = *(_BYTE *)(a1 + 24);
  v47 = *(_OWORD *)(a1 + 32);
  v48 = *(_OWORD *)(a1 + 48);
  *((double *)v6 + 30) = a2;
  *((double *)v6 + 31) = a3;
  *((double *)v6 + 32) = a4;
  *((double *)v6 + 33) = a5;
  v6[19] = v47;
  v6[20] = v48;
  v13[56] = 0;
}

{
  unsigned __int8 *v5;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  char v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  unsigned __int8 v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  char v65;
  double v66[5];

  v39 = *v5;
  v38 = v5[1];
  v57 = *((_QWORD *)v5 + 26);
  v58 = *((_QWORD *)v5 + 25);
  v55 = *((_QWORD *)v5 + 28);
  v56 = *((_QWORD *)v5 + 27);
  v53 = *((_QWORD *)v5 + 30);
  v54 = *((_QWORD *)v5 + 29);
  v51 = *((_QWORD *)v5 + 32);
  v52 = *((_QWORD *)v5 + 31);
  v49 = *((_QWORD *)v5 + 34);
  v50 = *((_QWORD *)v5 + 33);
  v47 = *((_QWORD *)v5 + 36);
  v48 = *((_QWORD *)v5 + 35);
  v11 = v5[296];
  v12 = *((_QWORD *)v5 + 38);
  v13 = *((_QWORD *)v5 + 39);
  v14 = *((_QWORD *)v5 + 40);
  v15 = *((_QWORD *)v5 + 41);
  v17 = *((_QWORD *)v5 + 42);
  v16 = *((_QWORD *)v5 + 43);
  v46 = *((_QWORD *)v5 + 44);
  v18 = *((_QWORD *)v5 + 45);
  v19 = *((_QWORD *)v5 + 46);
  v35 = *(_OWORD *)(v5 + 424);
  v36 = *(_OWORD *)(v5 + 408);
  v33 = *(_OWORD *)(v5 + 456);
  v34 = *(_OWORD *)(v5 + 440);
  v31 = *(_OWORD *)(v5 + 488);
  v32 = *(_OWORD *)(v5 + 472);
  v66[0] = a2;
  v66[1] = a3;
  v66[2] = a4;
  v66[3] = a5;
  v21 = *((_QWORD *)v5 + 47);
  v20 = *((_QWORD *)v5 + 48);
  v22 = *((_QWORD *)v5 + 49);
  v23 = v5[400];
  v24 = v5[504];
  v37 = v11;
  v44 = v18;
  v45 = v16;
  v42 = v20;
  v43 = v22;
  v40 = v19;
  v41 = v21;
  if ((v11 & 1) == 0)
  {
    *(_QWORD *)&v59 = v58;
    *((_QWORD *)&v59 + 1) = v57;
    *(_QWORD *)&v60 = v56;
    *((_QWORD *)&v60 + 1) = v55;
    *(_QWORD *)&v61 = v54;
    *((_QWORD *)&v61 + 1) = v53;
    *(_QWORD *)&v62 = v52;
    *((_QWORD *)&v62 + 1) = v51;
    *(_QWORD *)&v63 = v50;
    *((_QWORD *)&v63 + 1) = v49;
    *(_QWORD *)&v64 = v48;
    *((_QWORD *)&v64 + 1) = v47;
    v65 = 0;
    if (specialized static ViewSize.== infix(_:_:)(v66, (double *)&v59))
    {
LABEL_8:
      v25 = BYTE8(v61);
      v26 = v62;
      v27 = BYTE8(v62);
      v28 = v63;
      v29 = v64;
      *(_QWORD *)a1 = v61;
      *(_BYTE *)(a1 + 8) = v25;
      *(_QWORD *)(a1 + 16) = v26;
      *(_BYTE *)(a1 + 24) = v27;
      *(_OWORD *)(a1 + 32) = v28;
      *(_OWORD *)(a1 + 48) = v29;
      return;
    }
    v18 = v44;
    v16 = v45;
    v20 = v42;
    v22 = v43;
    v19 = v40;
    v21 = v41;
  }
  if ((v23 & 1) == 0)
  {
    *(_QWORD *)&v59 = v12;
    *((_QWORD *)&v59 + 1) = v13;
    *(_QWORD *)&v60 = v14;
    *((_QWORD *)&v60 + 1) = v15;
    *(_QWORD *)&v61 = v17;
    *((_QWORD *)&v61 + 1) = v16;
    *(_QWORD *)&v62 = v46;
    *((_QWORD *)&v62 + 1) = v18;
    *(_QWORD *)&v63 = v19;
    *((_QWORD *)&v63 + 1) = v21;
    *(_QWORD *)&v64 = v20;
    *((_QWORD *)&v64 + 1) = v22;
    v65 = 0;
    if (specialized static ViewSize.== infix(_:_:)(v66, (double *)&v59))
      goto LABEL_8;
  }
  if ((v24 & 1) == 0)
  {
    v59 = v36;
    v60 = v35;
    v61 = v34;
    v62 = v33;
    v63 = v32;
    v64 = v31;
    v65 = 0;
    if (specialized static ViewSize.== infix(_:_:)(v66, (double *)&v59))
      goto LABEL_8;
  }
  specialized closure #1 in UnaryLayoutEngine.childPlacement(at:)(v39 | (v38 << 8), a1, a2, a3);
  *((_QWORD *)v5 + 51) = v12;
  *((_QWORD *)v5 + 52) = v13;
  *((_QWORD *)v5 + 53) = v14;
  *((_QWORD *)v5 + 54) = v15;
  *((_QWORD *)v5 + 55) = v17;
  *((_QWORD *)v5 + 56) = v45;
  *((_QWORD *)v5 + 57) = v46;
  *((_QWORD *)v5 + 58) = v44;
  *((_QWORD *)v5 + 59) = v40;
  *((_QWORD *)v5 + 60) = v41;
  *((_QWORD *)v5 + 61) = v42;
  *((_QWORD *)v5 + 62) = v43;
  v5[504] = v23;
  *((_QWORD *)v5 + 38) = v58;
  *((_QWORD *)v5 + 39) = v57;
  *((_QWORD *)v5 + 40) = v56;
  *((_QWORD *)v5 + 41) = v55;
  *((_QWORD *)v5 + 42) = v54;
  *((_QWORD *)v5 + 43) = v53;
  *((_QWORD *)v5 + 44) = v52;
  *((_QWORD *)v5 + 45) = v51;
  *((_QWORD *)v5 + 46) = v50;
  *((_QWORD *)v5 + 47) = v49;
  *((_QWORD *)v5 + 48) = v48;
  *((_QWORD *)v5 + 49) = v47;
  v5[400] = v37;
  *((_QWORD *)v5 + 29) = *(_QWORD *)a1;
  v5[240] = *(_BYTE *)(a1 + 8);
  *((_QWORD *)v5 + 31) = *(_QWORD *)(a1 + 16);
  *((double *)v5 + 25) = a2;
  *((double *)v5 + 26) = a3;
  *((double *)v5 + 27) = a4;
  *((double *)v5 + 28) = a5;
  v5[256] = *(_BYTE *)(a1 + 24);
  v30 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v5 + 264) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v5 + 280) = v30;
  v5[296] = 0;
}

{
  uint64_t v5;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  __int128 v33;
  __int16 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  int v46;
  __int16 v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  char v78;
  double v79[5];

  v46 = *(unsigned __int8 *)(v5 + 9);
  v47 = *(unsigned __int8 *)(v5 + 8);
  v52 = *(_QWORD *)(v5 + 12);
  v51 = *(_DWORD *)(v5 + 20);
  v49 = *(_QWORD *)(v5 + 24);
  v50 = *(_QWORD *)v5;
  v48 = *(_DWORD *)(v5 + 32);
  v70 = *(_QWORD *)(v5 + 216);
  v71 = *(_QWORD *)(v5 + 208);
  v68 = *(_QWORD *)(v5 + 232);
  v69 = *(_QWORD *)(v5 + 224);
  v66 = *(_QWORD *)(v5 + 248);
  v67 = *(_QWORD *)(v5 + 240);
  v64 = *(_QWORD *)(v5 + 264);
  v65 = *(_QWORD *)(v5 + 256);
  v62 = *(_QWORD *)(v5 + 280);
  v63 = *(_QWORD *)(v5 + 272);
  v60 = *(_QWORD *)(v5 + 296);
  v61 = *(_QWORD *)(v5 + 288);
  v11 = *(_BYTE *)(v5 + 304);
  v12 = *(_QWORD *)(v5 + 312);
  v13 = *(_QWORD *)(v5 + 320);
  v14 = *(_QWORD *)(v5 + 328);
  v15 = *(_QWORD *)(v5 + 336);
  v16 = *(_QWORD *)(v5 + 344);
  v17 = *(_QWORD *)(v5 + 352);
  v18 = *(_QWORD *)(v5 + 360);
  v19 = *(_QWORD *)(v5 + 368);
  v44 = *(_OWORD *)(v5 + 432);
  v45 = *(_OWORD *)(v5 + 416);
  v42 = *(_OWORD *)(v5 + 464);
  v43 = *(_OWORD *)(v5 + 448);
  v40 = *(_OWORD *)(v5 + 496);
  v41 = *(_OWORD *)(v5 + 480);
  v79[0] = a2;
  v79[1] = a3;
  v79[2] = a4;
  v79[3] = a5;
  v21 = *(_QWORD *)(v5 + 376);
  v20 = *(_QWORD *)(v5 + 384);
  v23 = *(_QWORD *)(v5 + 392);
  v22 = *(_QWORD *)(v5 + 400);
  v24 = *(_BYTE *)(v5 + 408);
  v25 = *(_BYTE *)(v5 + 512);
  v58 = v19;
  v59 = v18;
  v57 = v24;
  v55 = v23;
  v56 = v22;
  v53 = v21;
  v54 = v20;
  if ((v11 & 1) == 0)
  {
    v37 = v17;
    v26 = v11;
    v27 = v16;
    *(_QWORD *)&v72 = v71;
    *((_QWORD *)&v72 + 1) = v70;
    *(_QWORD *)&v73 = v69;
    *((_QWORD *)&v73 + 1) = v68;
    *(_QWORD *)&v74 = v67;
    *((_QWORD *)&v74 + 1) = v66;
    *(_QWORD *)&v75 = v65;
    *((_QWORD *)&v75 + 1) = v64;
    *(_QWORD *)&v76 = v63;
    *((_QWORD *)&v76 + 1) = v62;
    *(_QWORD *)&v77 = v61;
    *((_QWORD *)&v77 + 1) = v60;
    v78 = 0;
    if (specialized static ViewSize.== infix(_:_:)(v79, (double *)&v72))
      goto LABEL_9;
    v16 = v27;
    v11 = v26;
    v17 = v37;
    v19 = v58;
    v18 = v59;
    v24 = v57;
    v23 = v55;
    v22 = v56;
    v21 = v53;
    v20 = v54;
  }
  if ((v24 & 1) == 0)
  {
    v38 = v11;
    *(_QWORD *)&v72 = v12;
    *((_QWORD *)&v72 + 1) = v13;
    *(_QWORD *)&v73 = v14;
    *((_QWORD *)&v73 + 1) = v15;
    *(_QWORD *)&v74 = v16;
    *((_QWORD *)&v74 + 1) = v17;
    *(_QWORD *)&v75 = v18;
    *((_QWORD *)&v75 + 1) = v19;
    *(_QWORD *)&v76 = v21;
    *((_QWORD *)&v76 + 1) = v20;
    *(_QWORD *)&v77 = v23;
    *((_QWORD *)&v77 + 1) = v22;
    v78 = 0;
    v28 = v16;
    if (!specialized static ViewSize.== infix(_:_:)(v79, (double *)&v72))
    {
      v16 = v28;
      v11 = v38;
      goto LABEL_7;
    }
LABEL_9:
    v29 = BYTE8(v74);
    v30 = v75;
    v31 = BYTE8(v75);
    v32 = v76;
    v33 = v77;
    *(_QWORD *)a1 = v74;
    *(_BYTE *)(a1 + 8) = v29;
    *(_QWORD *)(a1 + 16) = v30;
    *(_BYTE *)(a1 + 24) = v31;
    *(_OWORD *)(a1 + 32) = v32;
    *(_OWORD *)(a1 + 48) = v33;
    return;
  }
LABEL_7:
  v39 = v16;
  if ((v25 & 1) == 0)
  {
    v72 = v45;
    v73 = v44;
    v74 = v43;
    v75 = v42;
    v76 = v41;
    v77 = v40;
    v78 = 0;
    if (specialized static ViewSize.== infix(_:_:)(v79, (double *)&v72))
      goto LABEL_9;
  }
  if (v46)
    v34 = 256;
  else
    v34 = 0;
  specialized closure #1 in UnaryLayoutEngine.childPlacement(at:)(v50, v34 | v47, v49, v48, v52, v51, a1, a2, a3, a4, a5);
  *(_QWORD *)(v5 + 416) = v12;
  *(_QWORD *)(v5 + 424) = v13;
  *(_QWORD *)(v5 + 432) = v14;
  *(_QWORD *)(v5 + 440) = v15;
  *(_QWORD *)(v5 + 448) = v39;
  *(_QWORD *)(v5 + 456) = v17;
  *(_QWORD *)(v5 + 464) = v59;
  *(_QWORD *)(v5 + 472) = v58;
  *(_QWORD *)(v5 + 480) = v53;
  *(_QWORD *)(v5 + 488) = v54;
  *(_QWORD *)(v5 + 496) = v55;
  *(_QWORD *)(v5 + 504) = v56;
  *(_BYTE *)(v5 + 512) = v57;
  *(_QWORD *)(v5 + 312) = v71;
  *(_QWORD *)(v5 + 320) = v70;
  *(_QWORD *)(v5 + 328) = v69;
  *(_QWORD *)(v5 + 336) = v68;
  *(_QWORD *)(v5 + 344) = v67;
  *(_QWORD *)(v5 + 352) = v66;
  *(_QWORD *)(v5 + 360) = v65;
  *(_QWORD *)(v5 + 368) = v64;
  *(_QWORD *)(v5 + 376) = v63;
  *(_QWORD *)(v5 + 384) = v62;
  *(_QWORD *)(v5 + 392) = v61;
  *(_QWORD *)(v5 + 400) = v60;
  *(_BYTE *)(v5 + 408) = v11;
  *(_QWORD *)(v5 + 240) = *(_QWORD *)a1;
  *(_BYTE *)(v5 + 248) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)(v5 + 256) = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(v5 + 264) = *(_BYTE *)(a1 + 24);
  v35 = *(_OWORD *)(a1 + 32);
  v36 = *(_OWORD *)(a1 + 48);
  *(double *)(v5 + 208) = a2;
  *(double *)(v5 + 216) = a3;
  *(double *)(v5 + 224) = a4;
  *(double *)(v5 + 232) = a5;
  *(_OWORD *)(v5 + 272) = v35;
  *(_OWORD *)(v5 + 288) = v36;
  *(_BYTE *)(v5 + 304) = 0;
}

BOOL specialized UnaryLayoutEngine.childPlacement(at:)@<W0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  _BOOL8 result;
  char v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  char v54;
  double v55[5];

  v6 = v5;
  v8 = *v5;
  v9 = *((_QWORD *)v6 + 25);
  v10 = *((_QWORD *)v6 + 26);
  v46 = *((_QWORD *)v6 + 28);
  v47 = *((_QWORD *)v6 + 27);
  v44 = *((_QWORD *)v6 + 30);
  v45 = *((_QWORD *)v6 + 29);
  v42 = *((_QWORD *)v6 + 32);
  v43 = *((_QWORD *)v6 + 31);
  v40 = *((_QWORD *)v6 + 34);
  v41 = *((_QWORD *)v6 + 33);
  v38 = *((_QWORD *)v6 + 36);
  v39 = *((_QWORD *)v6 + 35);
  v11 = v6[296];
  v36 = *((_QWORD *)v6 + 39);
  v37 = *((_QWORD *)v6 + 38);
  v12 = *((_QWORD *)v6 + 41);
  v34 = *((_QWORD *)v6 + 43);
  v35 = *((_QWORD *)v6 + 42);
  v32 = *((_QWORD *)v6 + 45);
  v33 = *((_QWORD *)v6 + 44);
  v30 = *((_QWORD *)v6 + 47);
  v31 = *((_QWORD *)v6 + 46);
  v29 = *((_QWORD *)v6 + 48);
  v27 = *((_QWORD *)v6 + 40);
  v28 = *((_QWORD *)v6 + 49);
  v13 = v6[400];
  v25 = *(_OWORD *)(v6 + 424);
  v26 = *(_OWORD *)(v6 + 408);
  v23 = *(_OWORD *)(v6 + 456);
  v24 = *(_OWORD *)(v6 + 440);
  v21 = *(_OWORD *)(v6 + 488);
  v22 = *(_OWORD *)(v6 + 472);
  v55[0] = a2;
  v55[1] = a3;
  v55[2] = a4;
  v55[3] = a5;
  v14 = v6[504];
  if ((v11 & 1) != 0)
    goto LABEL_11;
  *(_QWORD *)&v48 = v9;
  *((_QWORD *)&v48 + 1) = v10;
  *(_QWORD *)&v49 = v47;
  *((_QWORD *)&v49 + 1) = v46;
  *(_QWORD *)&v50 = v45;
  *((_QWORD *)&v50 + 1) = v44;
  *(_QWORD *)&v51 = v43;
  *((_QWORD *)&v51 + 1) = v42;
  *(_QWORD *)&v52 = v41;
  *((_QWORD *)&v52 + 1) = v40;
  *(_QWORD *)&v53 = v39;
  *((_QWORD *)&v53 + 1) = v38;
  v54 = 0;
  result = specialized static ViewSize.== infix(_:_:)(v55, (double *)&v48);
  if (!result)
  {
LABEL_11:
    if ((v13 & 1) != 0)
      goto LABEL_12;
    *(_QWORD *)&v48 = v37;
    *((_QWORD *)&v48 + 1) = v36;
    *(_QWORD *)&v49 = v27;
    *((_QWORD *)&v49 + 1) = v12;
    *(_QWORD *)&v50 = v35;
    *((_QWORD *)&v50 + 1) = v34;
    *(_QWORD *)&v51 = v33;
    *((_QWORD *)&v51 + 1) = v32;
    *(_QWORD *)&v52 = v31;
    *((_QWORD *)&v52 + 1) = v30;
    *(_QWORD *)&v53 = v29;
    *((_QWORD *)&v53 + 1) = v28;
    v54 = 0;
    result = specialized static ViewSize.== infix(_:_:)(v55, (double *)&v48);
    if (!result)
    {
LABEL_12:
      if ((v14 & 1) != 0)
        goto LABEL_8;
      v48 = v26;
      v49 = v25;
      v50 = v24;
      v51 = v23;
      v52 = v22;
      v53 = v21;
      v54 = 0;
      result = specialized static ViewSize.== infix(_:_:)(v55, (double *)&v48);
      if (!result)
LABEL_8:
        __asm { BR              X9 }
    }
  }
  v16 = BYTE8(v50);
  v17 = v51;
  v18 = BYTE8(v51);
  v19 = v52;
  v20 = v53;
  *(_QWORD *)a1 = v50;
  *(_BYTE *)(a1 + 8) = v16;
  *(_QWORD *)(a1 + 16) = v17;
  *(_BYTE *)(a1 + 24) = v18;
  *(_OWORD *)(a1 + 32) = v19;
  *(_OWORD *)(a1 + 48) = v20;
  return result;
}

uint64_t UnaryLayoutEngine.childPlacement(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  int v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;

  v4 = v3;
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v9 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *v16;
  v18 = v16[1];
  v19 = v16[2];
  v20 = v16[3];
  (*(void (**)(char *, uint64_t, uint64_t, double))(v21 + 16))(v8, v4, a2, v13);
  v22 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v106 = v15;
  v22(v15, v8, v10);
  v23 = *(int *)(a2 + 40);
  v24 = (uint64_t *)(v4 + *(int *)(a2 + 36));
  v25 = *v24;
  v83 = *((_DWORD *)v24 + 2);
  v26 = *(_QWORD *)(v4 + v23);
  v82 = *(_DWORD *)(v4 + v23 + 8);
  v27 = (uint64_t *)(v4 + *(int *)(a2 + 48));
  v105 = *v27;
  v104 = v27[1];
  v103 = v27[2];
  v102 = v27[3];
  v101 = v27[4];
  v100 = v27[5];
  v99 = v27[6];
  v98 = v27[7];
  v97 = v27[8];
  v96 = v27[9];
  v95 = v27[10];
  v94 = v27[11];
  v28 = *((_BYTE *)v27 + 96);
  v29 = v27[13];
  v30 = v27[14];
  v31 = v27[15];
  v32 = v27[16];
  v33 = v27[17];
  v34 = v27[18];
  v35 = v27[19];
  v36 = v27[20];
  v37 = v27[21];
  v38 = v27[22];
  v39 = v27[23];
  v40 = v27[24];
  v41 = *((unsigned __int8 *)v27 + 200);
  v80 = *((_OWORD *)v27 + 13);
  v79 = *((_OWORD *)v27 + 14);
  v78 = *((_OWORD *)v27 + 15);
  v77 = *((_OWORD *)v27 + 16);
  v76 = *((_OWORD *)v27 + 17);
  v75 = *((_OWORD *)v27 + 18);
  v42 = *((_BYTE *)v27 + 304);
  v114 = v17;
  v115 = v18;
  v116 = v19;
  v117 = v20;
  v93 = v31;
  v92 = v33;
  v91 = v34;
  v90 = v35;
  v89 = v36;
  v88 = v37;
  v87 = v38;
  v86 = v39;
  v85 = v40;
  v84 = v41;
  if ((v28 & 1) == 0)
  {
    v81 = v32;
    v43 = v10;
    v44 = v30;
    v45 = v28;
    v46 = v29;
    *(_QWORD *)&v107 = v105;
    *((_QWORD *)&v107 + 1) = v104;
    *(_QWORD *)&v108 = v103;
    *((_QWORD *)&v108 + 1) = v102;
    *(_QWORD *)&v109 = v101;
    *((_QWORD *)&v109 + 1) = v100;
    *(_QWORD *)&v110 = v99;
    *((_QWORD *)&v110 + 1) = v98;
    *(_QWORD *)&v111 = v97;
    *((_QWORD *)&v111 + 1) = v96;
    *(_QWORD *)&v112 = v95;
    *((_QWORD *)&v112 + 1) = v94;
    v113 = 0;
    if (specialized static ViewSize.== infix(_:_:)((double *)&v114, (double *)&v107))
    {
      v47 = v109;
      v48 = BYTE8(v109);
      v49 = v110;
      v50 = BYTE8(v110);
      v51 = v111;
      v52 = v112;
      v10 = v43;
      goto LABEL_12;
    }
    v29 = v46;
    v28 = v45;
    v30 = v44;
    v10 = v43;
    v31 = v93;
    v32 = v81;
    v33 = v92;
    v34 = v91;
    v35 = v90;
    v36 = v89;
    v37 = v88;
    v38 = v87;
    v39 = v86;
    v40 = v85;
    LOBYTE(v41) = v84;
  }
  if ((v41 & 1) == 0)
  {
    v73 = v10;
    v53 = v30;
    v54 = v28;
    v55 = v11;
    *(_QWORD *)&v107 = v29;
    *((_QWORD *)&v107 + 1) = v53;
    *(_QWORD *)&v108 = v31;
    *((_QWORD *)&v108 + 1) = v32;
    *(_QWORD *)&v109 = v33;
    *((_QWORD *)&v109 + 1) = v34;
    *(_QWORD *)&v110 = v35;
    *((_QWORD *)&v110 + 1) = v36;
    *(_QWORD *)&v111 = v37;
    *((_QWORD *)&v111 + 1) = v38;
    *(_QWORD *)&v112 = v39;
    *((_QWORD *)&v112 + 1) = v40;
    v113 = 0;
    v56 = v29;
    v81 = v32;
    if (specialized static ViewSize.== infix(_:_:)((double *)&v114, (double *)&v107))
    {
      v47 = v109;
      v48 = BYTE8(v109);
      v49 = v110;
      v50 = BYTE8(v110);
      v51 = v111;
      v52 = v112;
      v11 = v55;
      v10 = v73;
      goto LABEL_12;
    }
    v29 = v56;
    v11 = v55;
    v28 = v54;
    v30 = v53;
    v10 = v73;
    v32 = v81;
  }
  v74 = v29;
  if ((v42 & 1) != 0
    || (v107 = v80,
        v108 = v79,
        v109 = v78,
        v110 = v77,
        v111 = v76,
        v112 = v75,
        v113 = 0,
        !specialized static ViewSize.== infix(_:_:)((double *)&v114, (double *)&v107)))
  {
    v58 = *(_QWORD *)(a2 + 24);
    v114 = v26;
    LODWORD(v115) = v82;
    *(_QWORD *)&v107 = v25;
    DWORD2(v107) = v83;
    *(_QWORD *)&v108 = v17;
    *((_QWORD *)&v108 + 1) = v18;
    *(_QWORD *)&v109 = v19;
    *((_QWORD *)&v109 + 1) = v20;
    LOBYTE(v110) = 0;
    v59 = v32;
    v57 = v106;
    (*(void (**)(uint64_t *, __int128 *, uint64_t))(v58 + 48))(&v114, &v107, v10);
    *((_BYTE *)v27 + 304) = v84;
    v27[26] = v74;
    v27[27] = v30;
    v27[28] = v93;
    v27[29] = v59;
    v60 = v91;
    v27[30] = v92;
    v27[31] = v60;
    v61 = v89;
    v27[32] = v90;
    v27[33] = v61;
    v62 = v87;
    v27[34] = v88;
    v27[35] = v62;
    v63 = v85;
    v27[36] = v86;
    v27[37] = v63;
    v64 = v104;
    v27[13] = v105;
    v27[14] = v64;
    v65 = v102;
    v27[15] = v103;
    v27[16] = v65;
    v66 = v100;
    v27[17] = v101;
    v27[18] = v66;
    v67 = v98;
    v27[19] = v99;
    v27[20] = v67;
    v68 = v96;
    v27[21] = v97;
    v27[22] = v68;
    v69 = v94;
    v27[23] = v95;
    v27[24] = v69;
    *((_BYTE *)v27 + 200) = v28;
    v27[4] = *(_QWORD *)a3;
    *((_BYTE *)v27 + 40) = *(_BYTE *)(a3 + 8);
    v27[6] = *(_QWORD *)(a3 + 16);
    *((_BYTE *)v27 + 56) = *(_BYTE *)(a3 + 24);
    v70 = *(_OWORD *)(a3 + 32);
    v71 = *(_OWORD *)(a3 + 48);
    *v27 = v17;
    v27[1] = v18;
    v27[2] = v19;
    v27[3] = v20;
    *((_OWORD *)v27 + 4) = v70;
    *((_OWORD *)v27 + 5) = v71;
    *((_BYTE *)v27 + 96) = 0;
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v57, v10);
  }
  v47 = v109;
  v48 = BYTE8(v109);
  v49 = v110;
  v50 = BYTE8(v110);
  v51 = v111;
  v52 = v112;
LABEL_12:
  *(_QWORD *)a3 = v47;
  *(_BYTE *)(a3 + 8) = v48;
  *(_QWORD *)(a3 + 16) = v49;
  *(_BYTE *)(a3 + 24) = v50;
  *(_OWORD *)(a3 + 32) = v51;
  *(_OWORD *)(a3 + 48) = v52;
  v57 = v106;
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v57, v10);
}

void protocol witness for Rule.value.getter in conformance UnaryChildGeometry<A>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  UnaryChildGeometry.value.getter(*(_QWORD *)(v2 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance UnaryChildGeometry<A>(uint64_t a1)
{
  return specialized UnaryChildGeometry.description.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 20, 0x1000000000000012, (void *)0x80000002352E3CE0);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance UnaryChildGeometry<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnaryChildGeometry<A>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t UnaryPositionAwareLayoutComputer.updateValue()(uint64_t a1, uint64_t a2, void (*a3)(char *, _DWORD *, _DWORD *, uint64_t, uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t (*v14)(_QWORD, uint64_t, double);
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  int v19;
  int v20;
  int v21;
  int v22;
  BOOL v23;
  int v24;
  uint64_t Value;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, _DWORD *, _DWORD *, uint64_t, uint64_t);
  _DWORD v33[3];
  _DWORD v34[4];

  v32 = a3;
  v9 = *(_QWORD *)(a1 + 16);
  v29 = *(_QWORD *)(v9 - 8);
  v10 = MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = *(_QWORD *)(v13 + 24);
  v15 = v14(0, v9, v10);
  v31 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v27 - v16;
  result = AGGraphGetCurrentAttribute();
  v19 = *MEMORY[0x24BE096C0];
  if ((_DWORD)result == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v20 = result;
    v27 = a4;
    v28 = a5;
    v21 = *(_DWORD *)(v5 + 4);
    v22 = *(_DWORD *)(v5 + 8);
    v23 = v19 == v22;
    if (v19 == v22)
      v22 = 0;
    if (v23)
      v24 = v19;
    else
      v24 = v22;
    Value = AGGraphGetValue();
    (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v12, Value, v9);
    v34[0] = v20;
    v34[1] = v20;
    v34[2] = v21;
    v33[0] = v20;
    v33[1] = v24;
    v33[2] = v19;
    v32(v12, v34, v33, v9, v30);
    v26 = MEMORY[0x23B7C9C04](v27, a1);
    StatefulRule<>.update<A>(to:)((uint64_t)v17, a1, v15, v26, v28);
    return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v17, v15);
  }
  return result;
}

double UnaryLayoutEngine.init(layout:layoutContext:child:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int v11;
  int v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double result;

  v11 = *(_DWORD *)(a2 + 8);
  v12 = *(_DWORD *)(a3 + 8);
  v13 = (int *)type metadata accessor for UnaryLayoutEngine(0, a4, a5, a4);
  v14 = a6 + v13[11];
  *(_OWORD *)v14 = 0u;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_BYTE *)(v14 + 48) = 1;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_BYTE *)(v14 + 104) = 1;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 128) = 0u;
  *(_OWORD *)(v14 + 144) = 0u;
  *(_BYTE *)(v14 + 160) = 1;
  v15 = a6 + v13[12];
  *(_OWORD *)v15 = 0u;
  *(_OWORD *)(v15 + 16) = 0u;
  *(_OWORD *)(v15 + 32) = 0u;
  *(_OWORD *)(v15 + 48) = 0u;
  *(_OWORD *)(v15 + 64) = 0u;
  *(_OWORD *)(v15 + 80) = 0u;
  *(_BYTE *)(v15 + 96) = 1;
  *(_OWORD *)(v15 + 184) = 0u;
  *(_OWORD *)(v15 + 168) = 0u;
  *(_OWORD *)(v15 + 152) = 0u;
  *(_OWORD *)(v15 + 136) = 0u;
  *(_OWORD *)(v15 + 120) = 0u;
  *(_OWORD *)(v15 + 104) = 0u;
  *(_BYTE *)(v15 + 200) = 1;
  *(_OWORD *)(v15 + 272) = 0u;
  *(_OWORD *)(v15 + 288) = 0u;
  *(_OWORD *)(v15 + 240) = 0u;
  *(_OWORD *)(v15 + 256) = 0u;
  *(_OWORD *)(v15 + 208) = 0u;
  *(_OWORD *)(v15 + 224) = 0u;
  *(_BYTE *)(v15 + 304) = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a6, a1, a4);
  v16 = a6 + v13[9];
  *(_QWORD *)v16 = *(_QWORD *)a2;
  *(_DWORD *)(v16 + 8) = v11;
  v17 = a6 + v13[10];
  result = *(double *)a3;
  *(_QWORD *)v17 = *(_QWORD *)a3;
  *(_DWORD *)(v17 + 8) = v12;
  return result;
}

uint64_t protocol witness for StatefulRule.updateValue() in conformance UnaryLayoutComputer<A>(uint64_t a1)
{
  return UnaryPositionAwareLayoutComputer.updateValue()(a1, (uint64_t)type metadata accessor for UnaryLayoutEngine, (void (*)(char *, _DWORD *, _DWORD *, uint64_t, uint64_t))UnaryLayoutEngine.init(layout:layoutContext:child:), (uint64_t)&protocol conformance descriptor for UnaryLayoutComputer<A>, (uint64_t)&protocol witness table for UnaryLayoutEngine<A>);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance UnaryLayoutComputer<A>(uint64_t a1)
{
  return specialized UnaryChildGeometry.description.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 21, 0x1000000000000013, (void *)0x80000002352E3CA0);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance UnaryLayoutComputer<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnaryLayoutComputer<A>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t UnaryLayoutEngine.spacing()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;

  v2 = *(int *)(a1 + 40);
  v3 = (uint64_t *)(v1 + *(int *)(a1 + 36));
  v4 = *v3;
  LODWORD(v3) = *((_DWORD *)v3 + 2);
  v9 = v4;
  v10 = (int)v3;
  v5 = (uint64_t *)(v1 + v2);
  LODWORD(v2) = *(_DWORD *)(v1 + v2 + 8);
  v7 = *v5;
  v8 = v2;
  return (*(uint64_t (**)(uint64_t *, uint64_t *, _QWORD))(*(_QWORD *)(a1 + 24) + 40))(&v9, &v7, *(_QWORD *)(a1 + 16));
}

uint64_t UnaryLayoutEngine.ignoresAutomaticPadding()(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  int v3;
  uint64_t v5;
  int v6;

  v2 = (uint64_t *)(v1 + *(int *)(a1 + 40));
  v3 = *((_DWORD *)v2 + 2);
  v5 = *v2;
  v6 = v3;
  return (*(uint64_t (**)(uint64_t *, _QWORD))(*(_QWORD *)(a1 + 24) + 72))(&v5, *(_QWORD *)(a1 + 16)) & 1;
}

uint64_t UnaryLayoutEngine.explicitAlignment(_:at:)(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v6;
  double v7;
  double v8;
  double v9;
  double v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  double v15;
  double v16;
  char v17;
  double v18;
  double v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  double v26;
  double v27;
  double v28;

  v6 = a2[1];
  v21 = *a2;
  v22 = v6;
  UnaryLayoutEngine.childPlacement(at:)((uint64_t)&v21, a3, (uint64_t)&v23);
  v8 = *((double *)&v25 + 1);
  v7 = v26;
  v9 = v27;
  v10 = v28;
  v11 = (unsigned int *)(v3 + *(int *)(a3 + 40));
  v12 = *v11;
  v13 = v11[1];
  v14 = v11[2];
  *(_QWORD *)&v21 = v23;
  BYTE8(v21) = v24;
  *(_QWORD *)&v22 = *((_QWORD *)&v24 + 1);
  BYTE8(v22) = v25;
  LayoutProxy.dimensions(in:)((uint64_t)&v21, (uint64_t)&v23);
  v15 = *((double *)&v24 + 1);
  *(_QWORD *)&v21 = __PAIR64__(v13, v12);
  DWORD2(v21) = v14;
  v23 = *((_QWORD *)&v24 + 1);
  v20 = *(double *)&v25;
  v24 = v25;
  *(double *)&v25 = v26;
  v16 = COERCE_DOUBLE(LayoutProxy.explicitAlignment(_:at:)(a1, (__int128 *)&v23));
  LOBYTE(v12) = v17;
  swift_release();
  if ((v12 & 1) == 0)
  {
    v18 = v9 - v8 * v15;
    if ((a1 & 1) != 0)
      v18 = v10 - v7 * v20;
    v16 = v18 + v16;
  }
  return *(_QWORD *)&v16;
}

double specialized closure #1 in UnaryLayoutEngine.childPlacement(at:)@<D0>(unsigned int a1@<W0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  char v6;
  unsigned int v8;
  char v9;
  uint64_t v10;
  char v11;
  double result;
  double v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;

  v6 = a1;
  v8 = a1 >> 8;
  PlacementContext.proposedSize.getter((uint64_t)&v14);
  v9 = v15;
  v10 = v16;
  v11 = v17;
  result = dbl_2352A6498[v6];
  v13 = dbl_2352A6498[(char)v8];
  *(_QWORD *)a2 = v14;
  *(_BYTE *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = v10;
  *(_BYTE *)(a2 + 24) = v11;
  *(double *)(a2 + 32) = result;
  *(double *)(a2 + 40) = v13;
  *(double *)(a2 + 48) = result * a3;
  *(double *)(a2 + 56) = v13 * a4;
  return result;
}

double specialized closure #1 in UnaryLayoutEngine.childPlacement(at:)@<D0>(uint64_t a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X8>, double a8@<D0>, double a9@<D1>, double a10@<D2>, double a11@<D3>)
{
  char v16;
  double v17;
  char v18;
  double result;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  int v30;
  double v31;
  double v32;
  double v33;
  double v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  int v41;

  v40 = a3;
  v41 = a4;
  v29 = a5;
  v30 = a6;
  v31 = a8;
  v32 = a9;
  v33 = a10;
  v34 = a11;
  v35 = 0;
  PlacementContext.proposedSize.getter((uint64_t)&v36);
  v25 = v36;
  v26 = v37;
  v27 = v38;
  v28 = v39;
  _AspectRatioLayout.spaceOffered(to:in:)(&v40, (uint64_t)&v25, a1, a2 & 0x101, (uint64_t)&v29);
  v16 = v30;
  v17 = v31;
  v18 = LOBYTE(v32);
  result = a9 * 0.5;
  *(_QWORD *)a7 = v29;
  *(_BYTE *)(a7 + 8) = v16;
  *(double *)(a7 + 16) = v17;
  *(_BYTE *)(a7 + 24) = v18;
  __asm { FMOV            V2.2D, #0.5 }
  *(_OWORD *)(a7 + 32) = _Q2;
  *(double *)(a7 + 48) = a8 * 0.5;
  *(double *)(a7 + 56) = a9 * 0.5;
  return result;
}

uint64_t protocol witness for LayoutEngine.layoutPriority() in conformance UnaryLayoutEngine<A>(uint64_t a1)
{
  return UnaryLayoutEngine.layoutPriority()(a1);
}

double protocol witness for LayoutEngine.sizeThatFits(_:) in conformance UnaryLayoutEngine<A>(uint64_t a1, uint64_t a2)
{
  return UnaryLayoutEngine.sizeThatFits(_:)(a1, a2);
}

uint64_t protocol witness for LayoutEngine.explicitAlignment(_:at:) in conformance UnaryLayoutEngine<A>(uint64_t a1, __int128 *a2, uint64_t a3)
{
  return UnaryLayoutEngine.explicitAlignment(_:at:)(a1, a2, a3);
}

uint64_t UnaryLayoutEngine.layoutPriority()(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  int v3;
  uint64_t v5;
  int v6;

  v2 = (uint64_t *)(v1 + *(int *)(a1 + 40));
  v3 = *((_DWORD *)v2 + 2);
  v5 = *v2;
  v6 = v3;
  return (*(uint64_t (**)(uint64_t *, _QWORD))(*(_QWORD *)(a1 + 24) + 64))(&v5, *(_QWORD *)(a1 + 16));
}

double UnaryLayoutEngine.sizeThatFits(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  double v17;
  __int16 v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t *v21;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  double v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  double v41;
  char v42;
  double v43;
  double *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double *v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  double v79;
  char v80;
  double v81;
  char v82;

  v3 = v2;
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v7 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(double *)v14;
  v16 = *(unsigned __int8 *)(v14 + 8);
  v17 = *(double *)(v14 + 16);
  v18 = *(unsigned __int8 *)(v14 + 24);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))(v6, v3, a2, v11);
  v74 = v9;
  v20 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v72 = v13;
  v73 = v8;
  v20(v13, v6, v8);
  v21 = (uint64_t *)(v3 + *(int *)(a2 + 36));
  v22 = *v21;
  v23 = *((_DWORD *)v21 + 2);
  v24 = (uint64_t *)(v3 + *(int *)(a2 + 40));
  v25 = *v24;
  v26 = *((_DWORD *)v24 + 2);
  v27 = v3 + *(int *)(a2 + 44);
  v28 = *(double *)v27;
  v29 = *(_QWORD *)(v27 + 8);
  v31 = *(double *)(v27 + 16);
  v30 = *(_QWORD *)(v27 + 24);
  v33 = *(_QWORD *)(v27 + 32);
  v32 = *(_QWORD *)(v27 + 40);
  v34 = *(unsigned __int8 *)(v27 + 48);
  v35 = *(double *)(v27 + 56);
  v36 = *(_QWORD *)(v27 + 64);
  v37 = *(double *)(v27 + 72);
  v39 = *(_QWORD *)(v27 + 88);
  v38 = *(_QWORD *)(v27 + 96);
  v40 = *(unsigned __int8 *)(v27 + 104);
  v41 = *(double *)(v27 + 144);
  if ((v34 & 1) == 0)
  {
    if ((v16 & 1) != 0)
    {
      if ((v29 & 1) == 0)
      {
        if ((*(_BYTE *)(v27 + 64) & 1) != 0)
          v42 = *(_BYTE *)(v27 + 104);
        else
          v42 = 1;
        if ((v42 & 1) != 0)
          goto LABEL_18;
        goto LABEL_35;
      }
    }
    else if ((v29 & 1) != 0 || v15 != v28)
    {
      goto LABEL_17;
    }
    if ((v18 & 1) != 0)
    {
      if ((v30 & 1) == 0)
        goto LABEL_17;
LABEL_16:
      v41 = *(double *)(v27 + 32);
LABEL_43:
      swift_beginAccess();
      v56 = (double *)static LayoutTrace.recorder;
      if (static LayoutTrace.recorder)
      {
        swift_beginAccess();
        v56[4] = v15;
        *((_QWORD *)v56 + 5) = v16;
        v56[6] = v17;
        *((_WORD *)v56 + 28) = v18 | 0x100;
      }
      v55 = v74;
      v47 = v73;
      v46 = v72;
      goto LABEL_46;
    }
    if ((v30 & 1) == 0 && v17 == v31)
      goto LABEL_16;
  }
LABEL_17:
  if ((v40 & 1) != 0)
    goto LABEL_18;
  if ((v16 & 1) != 0)
  {
    if ((*(_BYTE *)(v27 + 64) & 1) == 0)
      goto LABEL_18;
  }
  else if ((*(_BYTE *)(v27 + 64) & 1) != 0 || v15 != v35)
  {
    goto LABEL_18;
  }
LABEL_35:
  if ((v18 & 1) != 0)
  {
    if ((*(_BYTE *)(v27 + 80) & 1) != 0)
    {
LABEL_40:
      v41 = *(double *)(v27 + 88);
      goto LABEL_43;
    }
  }
  else if ((*(_BYTE *)(v27 + 80) & 1) == 0 && v17 == v37)
  {
    goto LABEL_40;
  }
LABEL_18:
  if ((*(_BYTE *)(v27 + 160) & 1) == 0)
  {
    if ((v16 & 1) != 0)
    {
      if ((*(_BYTE *)(v27 + 120) & 1) == 0)
        goto LABEL_19;
    }
    else if ((*(_BYTE *)(v27 + 120) & 1) != 0 || *(double *)(v27 + 112) != v15)
    {
      goto LABEL_19;
    }
    if ((v18 & 1) != 0)
    {
      if ((*(_BYTE *)(v27 + 136) & 1) != 0)
        goto LABEL_43;
    }
    else if ((*(_BYTE *)(v27 + 136) & 1) == 0 && *(double *)(v27 + 128) == v17)
    {
      goto LABEL_43;
    }
  }
LABEL_19:
  v60 = *(_QWORD *)(v27 + 80);
  v61 = v40;
  v62 = v37;
  v59 = v36;
  v63 = v39;
  v43 = v35;
  v64 = v38;
  v67 = v34;
  v68 = v30;
  v69 = v31;
  v66 = v29;
  v65 = v28;
  v70 = v33;
  v71 = v32;
  swift_beginAccess();
  v44 = (double *)static LayoutTrace.recorder;
  if (static LayoutTrace.recorder)
  {
    swift_beginAccess();
    v44[4] = v15;
    *((_QWORD *)v44 + 5) = v16;
    v44[6] = v17;
    *((_WORD *)v44 + 28) = v18;
  }
  v45 = *(_QWORD *)(a2 + 24);
  v79 = v15;
  v80 = v16;
  v81 = v17;
  v82 = v18;
  v77 = v22;
  v78 = v23;
  v75 = v25;
  v76 = v26;
  v46 = v72;
  v47 = v73;
  v41 = (*(double (**)(double *, uint64_t *, uint64_t *, uint64_t))(v45 + 56))(&v79, &v77, &v75, v73);
  v48 = v59;
  *(double *)(v27 + 112) = v43;
  *(_QWORD *)(v27 + 120) = v48;
  v49 = v60;
  *(double *)(v27 + 128) = v62;
  *(_QWORD *)(v27 + 136) = v49;
  v50 = v64;
  *(_QWORD *)(v27 + 144) = v63;
  *(_QWORD *)(v27 + 152) = v50;
  *(_BYTE *)(v27 + 160) = v61;
  v51 = v66;
  *(double *)(v27 + 56) = v65;
  *(_QWORD *)(v27 + 64) = v51;
  v52 = v68;
  *(double *)(v27 + 72) = v69;
  *(_QWORD *)(v27 + 80) = v52;
  v53 = v71;
  *(_QWORD *)(v27 + 88) = v70;
  *(_QWORD *)(v27 + 96) = v53;
  *(_BYTE *)(v27 + 104) = v67;
  *(double *)v27 = v15;
  *(_BYTE *)(v27 + 8) = v16;
  *(double *)(v27 + 16) = v17;
  *(_BYTE *)(v27 + 24) = v18;
  *(double *)(v27 + 32) = v41;
  *(_QWORD *)(v27 + 40) = v54;
  *(_BYTE *)(v27 + 48) = 0;
  v55 = v74;
LABEL_46:
  (*(void (**)(char *, uint64_t))(v55 + 8))(v46, v47);
  return v41;
}

float64x2_t LayoutPositionQuery.value.getter@<Q0>(float64x2_t *a1@<X8>)
{
  float64x2_t *Value;
  float64x2_t result;

  Value = (float64x2_t *)AGGraphGetValue();
  result = vaddq_f64(*Value, *(float64x2_t *)AGGraphGetValue());
  *a1 = result;
  return result;
}

float64x2_t protocol witness for Rule.value.getter in conformance LayoutPositionQuery@<Q0>(float64x2_t *a1@<X8>)
{
  float64x2_t *Value;
  float64x2_t result;

  Value = (float64x2_t *)AGGraphGetValue();
  result = vaddq_f64(*Value, *(float64x2_t *)AGGraphGetValue());
  *a1 = result;
  return result;
}

uint64_t specialized SecondaryChild.value.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t StatusReg;
  uint64_t v21;
  int v22;
  char *v23;
  void (*v24)(char *, char *, uint64_t);
  char *v25;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  _QWORD *v33;
  __int128 v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v40;
  char *v41;
  void *v42;
  _QWORD *v43;
  __int128 v44;
  _QWORD v45[2];
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v4 = type metadata accessor for ObservationTracking._AccessList();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  *(_QWORD *)&v44 = (char *)&v40 - v9;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v40 - v11;
  type metadata accessor for Date?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v13);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v40 - v18;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v41 = v12;
    v43 = a2;
    if (one-time initialization token for lastestAccessLists == -1)
      goto LABEL_3;
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  v42 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v19, 1, 1, v4);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v21 = *(_QWORD *)(StatusReg + 848);
  *(_QWORD *)(StatusReg + 848) = v19;
  specialized closure #1 in SecondaryChild.value.getter(a1, (uint64_t)v45);
  *(_QWORD *)(StatusReg + 848) = v21;
  _s7SwiftUI34AccessibilityTextAttributeResolver_pSgWOcTm_0((uint64_t)v19, (uint64_t)v16, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (void (*)(uint64_t))MEMORY[0x24BEE5C08]);
  v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v16, 1, v4);
  v23 = v41;
  if (v22 == 1)
  {
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v16, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (void (*)(uint64_t))MEMORY[0x24BEE5C08]);
  }
  else
  {
    v24 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
    v24(v41, v16, v4);
    (*(void (**)(_QWORD, char *, uint64_t))(v5 + 16))(v44, v23, v4);
    swift_beginAccess();
    v25 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v25;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v25 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v25 + 2) + 1, 1, (unint64_t)v25);
      static ObservationRegistrar.lastestAccessLists = v25;
    }
    v28 = *((_QWORD *)v25 + 2);
    v27 = *((_QWORD *)v25 + 3);
    if (v28 >= v27 >> 1)
    {
      v25 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1, (unint64_t)v25);
      static ObservationRegistrar.lastestAccessLists = v25;
    }
    *((_QWORD *)v25 + 2) = v28 + 1;
    v24(&v25[((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v28], (char *)v44, v4);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v23, v4);
  }
  v29 = v45[0];
  v30 = v45[1];
  v44 = v47;
  v31 = v48;
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v19, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (void (*)(uint64_t))MEMORY[0x24BEE5C08]);
  v32 = v46;
  v33 = v43;
  *v43 = v29;
  v33[1] = v30;
  v34 = v44;
  *((_OWORD *)v33 + 1) = v32;
  *((_OWORD *)v33 + 2) = v34;
  v33[6] = v31;
  v35 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v35)
  {
    v36 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v37 = *(_QWORD *)(v5 + 72);
    v38 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v38(v7, v36, v4);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v7);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      v36 += v37;
      --v35;
    }
    while (v35);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v42;
  return swift_bridgeObjectRelease();
}

uint64_t specialized closure #1 in SecondaryChild.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t Value;
  void (*v5)(uint64_t *);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  _QWORD v15[6];
  __int128 v16;
  char v17;
  uint64_t v18;
  _OWORD v19[3];
  uint64_t v20;
  _QWORD v21[4];

  v18 = a1;
  type metadata accessor for _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>();
  Value = AGGraphGetValue();
  v5 = *(void (**)(uint64_t *))Value;
  v7 = *(_QWORD *)(Value + 8);
  v6 = *(_QWORD *)(Value + 16);
  v8 = *(_QWORD *)(Value + 24);
  v21[0] = *(_QWORD *)Value;
  v21[1] = v7;
  v21[2] = v6;
  v21[3] = v8;
  if ((v9 & 2) == 0)
    return specialized closure #1 in closure #1 in SecondaryChild.value.getter(v5, v7, v6, v8, a1);
  v20 = 0;
  memset(v19, 0, sizeof(v19));
  MEMORY[0x24BDAC7A8](v5);
  v15[2] = v19;
  v15[3] = partial apply for specialized closure #1 in closure #1 in SecondaryChild.value.getter;
  v15[4] = &v17;
  v15[5] = v21;
  swift_retain();
  result = specialized static Update.syncMain(_:)((uint64_t (*)(void))partial apply for specialized closure #1 in Attribute.syncMainIfReferences<A>(do:), (uint64_t)v15);
  v11 = *(_QWORD *)&v19[1];
  if (*(_QWORD *)&v19[1])
  {
    v13 = *((_QWORD *)&v19[2] + 1);
    v12 = v20;
    v16 = *(_OWORD *)((char *)&v19[1] + 8);
    v14 = v19[0];
    result = swift_release();
    *(_OWORD *)a2 = v14;
    *(_QWORD *)(a2 + 16) = v11;
    *(_OWORD *)(a2 + 24) = v16;
    *(_QWORD *)(a2 + 40) = v13;
    *(_QWORD *)(a2 + 48) = v12;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized closure #1 in closure #1 in SecondaryChild.value.getter(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *Value;
  uint64_t v8;

  if (*MEMORY[0x24BE096C0] == HIDWORD(a5))
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    Value = &static Text.LayoutKey.defaultValue;
  }
  else
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for [Text.LayoutKey.AnchoredLayout], (uint64_t)&type metadata for Text.LayoutKey.AnchoredLayout, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    Value = (uint64_t *)AGGraphGetValue();
  }
  v8 = *Value;
  swift_bridgeObjectRetain();
  a1(&v8);
  return swift_bridgeObjectRelease();
}

uint64_t specialized ShapeStyle.copyStyle(name:in:foregroundStyle:)(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  __int128 v8;
  _QWORD v10[3];
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  char v19;
  __int16 v20;

  v10[1] = 0;
  v10[2] = 0;
  v10[0] = a1;
  v11 = 3;
  v12 = 0;
  v13 = 5;
  v14 = a2;
  v15 = a3;
  v16 = a4;
  v17 = 0u;
  v18 = 0u;
  v19 = 1;
  v20 = 0;
  swift_retain();
  swift_retain();
  swift_retain();
  specialized Paint._apply(to:)((uint64_t)v10);
  v5 = v12;
  v6 = v13;
  if (v13 == 2)
  {
    swift_retain();
    v7 = v5;
  }
  else
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ShapeStyleBox<AngularGradient>, (uint64_t)&type metadata for AngularGradient, (uint64_t)&protocol witness table for AngularGradient, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ShapeStyleBox);
    v7 = swift_allocObject();
    v8 = *(_OWORD *)(v4 + 16);
    *(_OWORD *)(v7 + 16) = *(_OWORD *)v4;
    *(_OWORD *)(v7 + 32) = v8;
    *(_QWORD *)(v7 + 48) = *(_QWORD *)(v4 + 32);
    swift_bridgeObjectRetain();
  }
  outlined consume of _ShapeStyle_Shape.Result(v5, v6);
  swift_release();
  swift_release();
  swift_release();
  return v7;
}

uint64_t specialized ShapeStyle.copyStyle(name:in:foregroundStyle:)(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  void (*v6)(uint64_t, _QWORD *);
  uint64_t v7;
  char v8;
  _QWORD v10[3];
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  char v19;
  __int16 v20;

  v5 = a5;
  v10[1] = 0;
  v10[2] = 0;
  v10[0] = a1;
  v11 = 3;
  v12 = 0;
  v13 = 5;
  v14 = a2;
  v15 = a3;
  v16 = a4;
  v17 = 0u;
  v18 = 0u;
  v19 = 1;
  v20 = 0;
  v6 = *(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a5 + 112);
  swift_retain();
  swift_retain();
  swift_retain();
  v6(v5, v10);
  v7 = v12;
  v8 = v13;
  if (v13 == 2)
  {
    swift_retain();
    v5 = v7;
  }
  else
  {
    swift_retain();
  }
  outlined consume of _ShapeStyle_Shape.Result(v7, v8);
  swift_release();
  swift_release();
  swift_release();
  return v5;
}

{
  uint64_t v5;
  void (*v6)(_QWORD *);
  uint64_t v7;
  char v8;
  _QWORD v10[3];
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  char v19;
  __int16 v20;

  v5 = a5;
  v10[1] = 0;
  v10[2] = 0;
  v10[0] = a1;
  v11 = 3;
  v12 = 0;
  v13 = 5;
  v14 = a2;
  v15 = a3;
  v16 = a4;
  v17 = 0u;
  v18 = 0u;
  v19 = 1;
  v20 = 0;
  v6 = *(void (**)(_QWORD *))(*(_QWORD *)a5 + 80);
  swift_retain();
  swift_retain();
  swift_retain();
  v6(v10);
  v7 = v12;
  v8 = v13;
  if (v13 == 2)
  {
    swift_retain();
    v5 = v7;
  }
  else
  {
    swift_retain();
  }
  outlined consume of _ShapeStyle_Shape.Result(v7, v8);
  swift_release();
  swift_release();
  swift_release();
  return v5;
}

uint64_t specialized _ForegroundStyleModifier2.ForegroundStyleEnvironment.value.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v14[2];
  uint64_t v15;

  Value = (uint64_t *)AGGraphGetValue();
  v3 = *Value;
  v4 = Value[1];
  *a1 = *Value;
  a1[1] = v4;
  type metadata accessor for _ForegroundStyleModifier2<AngularGradient, Color>();
  v5 = AGGraphGetValue();
  v6 = *(_QWORD *)(v5 + 32);
  v7 = *(_OWORD *)(v5 + 16);
  v14[0] = *(_OWORD *)v5;
  v14[1] = v7;
  v15 = v6;
  swift_retain();
  swift_retain();
  outlined retain of RadialGradient(v14);
  v8 = specialized ShapeStyle.copyStyle(name:in:foregroundStyle:)(0, v3, v4, 0);
  outlined release of RadialGradient(v14);
  v9 = *(_QWORD *)(AGGraphGetValue() + 40);
  swift_retain();
  swift_retain();
  swift_retain();
  v10 = specialized ShapeStyle.copyStyle(name:in:foregroundStyle:)(0, v3, v4, 0, v9);
  swift_release();
  swift_release();
  swift_release();
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyleBox<ShapeStylePair<AnyShapeStyle, AnyShapeStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStylePair<AnyShapeStyle, AnyShapeStyle>, (uint64_t)&protocol witness table for ShapeStylePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyleBox);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v8;
  *(_QWORD *)(v11 + 24) = v10;
  swift_retain_n();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a1, v11);
  swift_release();
  swift_release();
  if (v4)
  {
    v12 = *a1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v12);
    swift_release();
    swift_release();
  }
  swift_release();
  return swift_release();
}

uint64_t specialized PreferenceTransform.value.getter(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t Value;
  uint64_t v6;
  char v7;

  if (*MEMORY[0x24BE096C0] == HIDWORD(a1))
  {
    v2 = 0;
    v3 = 1;
  }
  else
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x24BEE1768], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    Value = AGGraphGetValue();
    v2 = *(_QWORD *)Value;
    v3 = *(_BYTE *)(Value + 8);
  }
  v6 = v2;
  v7 = v3;
  specialized Attribute.syncMainIfReferences<A>(do:)(a1, a1, (uint64_t)&v6);
  return v6;
}

{
  uint64_t *Value;
  uint64_t v4;

  if (*MEMORY[0x24BE096C0] == HIDWORD(a1))
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    Value = &static UpdateScrollStateRequestKey.defaultValue;
  }
  else
  {
    _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for [ScrollStateRequest], (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest, (uint64_t)&protocol descriptor for ScrollStateRequest, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    Value = (uint64_t *)AGGraphGetValue();
  }
  v4 = *Value;
  swift_bridgeObjectRetain();
  specialized Attribute.syncMainIfReferences<A>(do:)(a1, a1, (void (*)(char *, char *, uint64_t))&v4);
  return v4;
}

{
  uint64_t *Value;
  uint64_t v4;

  if (*MEMORY[0x24BE096C0] == HIDWORD(a1))
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    Value = &static ScrollTargetRole.ContentKey.defaultValue;
  }
  else
  {
    type metadata accessor for [ScrollTargetRole.Role : [ScrollableCollection]]();
    Value = (uint64_t *)AGGraphGetValue();
  }
  v4 = *Value;
  swift_bridgeObjectRetain();
  specialized Attribute.syncMainIfReferences<A>(do:)(a1, a1, (void (*)(char *, char *, uint64_t))&v4);
  return v4;
}

unint64_t specialized EventFilterEvents.value.getter(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;

  type metadata accessor for [EventID : EventType]();
  AGGraphGetValue();
  v2 = swift_bridgeObjectRetain();
  v3 = specialized Dictionary.optimisticFilter(_:)(v2, a1);
  swift_bridgeObjectRelease();
  AGGraphGetValue();
  return v3;
}

uint64_t protocol witness for static UnaryLayout.makeViewImpl(modifier:inputs:body:) in conformance _AlignmentLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, __int128 *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t specialized UpdateEnvironment.value.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  Value = (uint64_t *)AGGraphGetValue();
  v4 = *Value;
  v3 = Value[1];
  *a1 = *Value;
  a1[1] = v3;
  v5 = AGGraphGetValue();
  v6 = *(_QWORD *)(v5 + 16);
  v7 = *(_BYTE *)(v5 + 24);
  swift_retain_n();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a1, v6, v7);
  swift_release();
  if (v3)
  {
    v8 = *a1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v8);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    v8 = *a1;
  }
  v9 = AGGraphGetValue();
  v10 = *(_QWORD *)v9;
  v11 = *(_BYTE *)(v9 + 8);
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(a1, v10, v11);
  swift_release();
  if (v3)
  {
    v12 = *a1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v8, v12);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t protocol witness for static UnaryLayout.makeViewImpl(modifier:inputs:body:) in conformance _FrameLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, __int128 *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static UnaryLayout.makeViewImpl(modifier:inputs:body:) in conformance _FlexFrameLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, __int128 *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

char *specialized LayoutGesture.phase(box:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  unint64_t v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  int64_t v31;
  char *result;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  char v36;
  char v37;
  BOOL v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _OWORD v54[2];
  uint64_t v55;

  swift_beginAccess();
  v3 = *(_QWORD *)(a1 + 160);
  v4 = *(_QWORD *)(v3 + 16);
  v5 = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    swift_bridgeObjectRetain();
    v6 = v4 - 1;
    v7 = MEMORY[0x24BEE4AF8];
    for (i = 32; ; i += 208)
    {
      v43 = *(_OWORD *)(v3 + i);
      v9 = *(_OWORD *)(v3 + i + 16);
      v10 = *(_OWORD *)(v3 + i + 32);
      v11 = *(_OWORD *)(v3 + i + 64);
      v46 = *(_OWORD *)(v3 + i + 48);
      v47 = v11;
      v44 = v9;
      v45 = v10;
      v12 = *(_OWORD *)(v3 + i + 80);
      v13 = *(_OWORD *)(v3 + i + 96);
      v14 = *(_OWORD *)(v3 + i + 128);
      v50 = *(_OWORD *)(v3 + i + 112);
      v51 = v14;
      v48 = v12;
      v49 = v13;
      v15 = *(_OWORD *)(v3 + i + 144);
      v16 = *(_OWORD *)(v3 + i + 160);
      v17 = *(_OWORD *)(v3 + i + 176);
      *(_OWORD *)((char *)v54 + 12) = *(_OWORD *)(v3 + i + 188);
      v53 = v16;
      v54[0] = v17;
      v52 = v15;
      if (*(_QWORD *)(*((_QWORD *)&v45 + 1) + 16))
      {
        outlined retain of LayoutGestureBox.Child((uint64_t)&v43);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v55 = v7;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v7 + 16) + 1, 1);
          v7 = v55;
        }
        v20 = *(_QWORD *)(v7 + 16);
        v19 = *(_QWORD *)(v7 + 24);
        if (v20 >= v19 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
          v7 = v55;
        }
        *(_QWORD *)(v7 + 16) = v20 + 1;
        v21 = (_OWORD *)(v7 + 208 * v20);
        v21[2] = v43;
        v22 = v44;
        v23 = v45;
        v24 = v47;
        v21[5] = v46;
        v21[6] = v24;
        v21[3] = v22;
        v21[4] = v23;
        v25 = v48;
        v26 = v49;
        v27 = v51;
        v21[9] = v50;
        v21[10] = v27;
        v21[7] = v25;
        v21[8] = v26;
        v28 = v52;
        v29 = v53;
        v30 = v54[0];
        *(_OWORD *)((char *)v21 + 220) = *(_OWORD *)((char *)v54 + 12);
        v21[12] = v29;
        v21[13] = v30;
        v21[11] = v28;
      }
      if (!v6)
        break;
      --v6;
    }
    swift_bridgeObjectRelease();
    v31 = *(_QWORD *)(v7 + 16);
    if (v31)
    {
LABEL_12:
      *(_QWORD *)&v43 = v5;
      result = (char *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31, 0);
      v33 = v43;
      v34 = (_BYTE *)(v7 + 60);
      v35 = MEMORY[0x24BEE4AE0] + 8;
      while ((*v34 & 1) == 0)
      {
        type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, v35, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
        result = (char *)AGGraphGetValue();
        v36 = *result;
        v37 = result[1];
        if (v37)
          v38 = 0;
        else
          v38 = (*result & 1) == 0;
        if (v38)
        {
          v36 = 0;
          LOBYTE(v55) = 0;
        }
        *(_QWORD *)&v43 = v33;
        v40 = *(_QWORD *)(v33 + 16);
        v39 = *(_QWORD *)(v33 + 24);
        if (v40 >= v39 >> 1)
        {
          result = (char *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1);
          v33 = v43;
        }
        *(_QWORD *)(v33 + 16) = v40 + 1;
        v41 = v33 + 2 * v40;
        *(_BYTE *)(v41 + 32) = v36;
        *(_BYTE *)(v41 + 33) = v37;
        v34 += 208;
        if (!--v31)
        {
          swift_release();
          goto LABEL_26;
        }
      }
      __break(1u);
      return result;
    }
  }
  else
  {
    v7 = MEMORY[0x24BEE4AF8];
    v31 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    if (v31)
      goto LABEL_12;
  }
  swift_release();
  v33 = MEMORY[0x24BEE4AF8];
LABEL_26:
  specialized Collection<>.merged()(v33, a2);
  return (char *)swift_bridgeObjectRelease();
}

uint64_t specialized closure #1 in LayoutGestureBox.willSendEvents<A>(_:gesture:boxValueAttribute:)(uint64_t a1, unsigned int a2, unsigned int a3, unint64_t a4)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(_OWORD *);
  int v28;
  uint64_t v29;
  __int128 v30;
  int v31;
  int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  _OWORD v38[6];
  _OWORD v39[2];
  __int128 v40;
  __int128 v41;
  _BYTE v42[32];
  __int128 v43;
  _BYTE v44[44];
  __int128 v45;
  __int128 v46;
  _BYTE v47[32];
  __int128 v48;
  _BYTE v49[44];
  uint64_t v50;

  v36 = __PAIR64__(a3, a2);
  v50 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)&v44[28] = *(_OWORD *)(a1 + 124);
  v5 = *(_OWORD *)(a1 + 112);
  v6 = *(_OWORD *)(a1 + 32);
  v40 = *(_OWORD *)(a1 + 16);
  v41 = v6;
  v7 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)v42 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v42[16] = v7;
  v8 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)v44 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)&v44[16] = v5;
  v43 = v8;
  v9 = *(_QWORD *)&v44[36];
  v33 = *(_OWORD *)&v44[8];
  v29 = v40;
  v28 = DWORD2(v40);
  v10 = *((_QWORD *)&v41 + 1);
  v11 = *(_QWORD *)v42;
  v30 = *(_OWORD *)&v42[8];
  v12 = *(_QWORD *)&v42[24];
  v13 = v8;
  v31 = *(_DWORD *)v44;
  v32 = DWORD2(v5);
  swift_beginAccess();
  v14 = *(_DWORD *)(v41 + 16);
  v15 = *(_QWORD *)(v41 + 24);
  v34 = *(_OWORD *)(v41 + 48);
  v35 = *(_OWORD *)(v41 + 32);
  v17 = *(_QWORD *)(v41 + 64);
  v16 = *(_QWORD *)(v41 + 72);
  v18 = *(_BYTE *)(v41 + 80);
  v19 = *(_BYTE *)(v41 + 81);
  v20 = *(_QWORD *)(v41 + 88);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
  v21 = swift_allocObject();
  *(_DWORD *)(v21 + 16) = v14;
  *(_QWORD *)(v21 + 24) = v15;
  *(_OWORD *)(v21 + 32) = v35;
  *(_OWORD *)(v21 + 48) = v34;
  *(_QWORD *)(v21 + 64) = v17;
  *(_QWORD *)(v21 + 72) = v16;
  *(_BYTE *)(v21 + 80) = v18;
  *(_BYTE *)(v21 + 81) = v19;
  *(_QWORD *)(v21 + 88) = v20;
  outlined retain of _GestureInputs((uint64_t)&v40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  *(_QWORD *)&v45 = v36;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for [EventID : EventType]();
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for LayoutChildEvents<DefaultLayoutGesture>, (uint64_t)&type metadata for DefaultLayoutGesture, (uint64_t)&protocol witness table for DefaultLayoutGesture, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for LayoutChildEvents);
  lazy protocol witness table accessor for type LayoutChildEvents<DefaultLayoutGesture> and conformance LayoutChildEvents<A>();
  v22 = Attribute.init<A>(body:value:flags:update:)();
  *(_QWORD *)&v45 = v36;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for LayoutChildSeed<DefaultLayoutGesture>, (uint64_t)&type metadata for DefaultLayoutGesture, (uint64_t)&protocol witness table for DefaultLayoutGesture, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for LayoutChildSeed);
  lazy protocol witness table accessor for type LayoutChildSeed<DefaultLayoutGesture> and conformance LayoutChildSeed<A>();
  v23 = Attribute.init<A>(body:value:flags:update:)();
  swift_beginAccess();
  if ((a4 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  v24 = *(_QWORD *)(a1 + 160);
  if (*(_QWORD *)(v24 + 16) <= a4)
    goto LABEL_5;
  v25 = *(_QWORD *)(v24 + 208 * a4 + 32);
  *(_QWORD *)&v45 = v29;
  DWORD2(v45) = v28;
  *(_QWORD *)&v46 = v21;
  *((_QWORD *)&v46 + 1) = v10;
  *(_QWORD *)v47 = v11;
  *(_OWORD *)&v47[8] = v30;
  *(_QWORD *)&v47[24] = v12;
  v48 = v13;
  *(_OWORD *)&v49[8] = v33;
  *(_DWORD *)v49 = v31;
  *(_DWORD *)&v49[24] = v32;
  *(_DWORD *)&v49[28] = v22;
  *(_DWORD *)&v49[32] = v23;
  *(_QWORD *)&v49[36] = v9;
  v38[4] = v13;
  v38[5] = *(_OWORD *)v49;
  v39[0] = *(_OWORD *)&v49[16];
  *(_OWORD *)((char *)v39 + 12) = *(_OWORD *)&v49[28];
  v38[0] = v45;
  v38[1] = v46;
  v38[2] = *(_OWORD *)v47;
  v38[3] = *(_OWORD *)&v47[16];
  v26 = *(void (**)(_OWORD *))(*(_QWORD *)v25 + 112);
  swift_retain();
  outlined retain of _GestureInputs((uint64_t)&v45);
  v26(v38);
  swift_release();
  outlined release of _GestureInputs((uint64_t)&v45);
  return outlined release of _GestureInputs((uint64_t)&v45);
}

uint64_t specialized UpdateLayoutGestureBox.value.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *Value;
  uint64_t *v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t result;
  unsigned int v10;
  uint64_t v11;

  Value = (unsigned int *)AGGraphGetValue();
  LayoutGestureBox.updateResetSeed(_:)(*Value);
  v5 = (uint64_t *)AGGraphGetValue();
  v7 = v6;
  v8 = *v5;
  swift_retain();
  if ((v7 & 1) != 0)
    LayoutGestureBox.updateResponder(_:)(v8);
  type metadata accessor for [EventID : EventType]();
  result = AGGraphGetCurrentAttribute();
  if ((_DWORD)result == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v10 = result;
    AGGraphGetValue();
    v11 = swift_bridgeObjectRetain();
    specialized LayoutGestureBox.willSendEvents<A>(_:gesture:boxValueAttribute:)(v11, v10);
    swift_bridgeObjectRelease();
    swift_retain();
    swift_release();
    return a3;
  }
  return result;
}

uint64_t specialized LayoutChildEvents.value.getter(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;

  v1 = HIDWORD(a1);
  v2 = *(_QWORD *)AGGraphGetValue();
  swift_beginAccess();
  v3 = *(_QWORD *)(v2 + 160);
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
    return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  for (i = v3 + 64; *(_DWORD *)(i - 24) != v1; i += 208)
  {
    if (!--v4)
      return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  }
  return swift_bridgeObjectRetain();
}

uint64_t specialized LayoutChildSeed.value.getter(uint64_t a1)
{
  int v1;
  uint64_t Value;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;

  v1 = HIDWORD(a1);
  Value = AGGraphGetValue();
  v3 = *(_QWORD *)Value;
  v4 = *(_DWORD *)(*(_QWORD *)Value + 176);
  swift_beginAccess();
  v5 = *(_QWORD *)(v3 + 160);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (int *)(v5 + 44);
    while (*(v7 - 1) != v1)
    {
      v7 += 52;
      if (!--v6)
        goto LABEL_5;
    }
    v8 = *v7;
  }
  else
  {
LABEL_5:
    v8 = 0x10000;
  }
  return (v8 + v4);
}

__n128 specialized LayoutDebug.value.getter@<Q0>(unint64_t a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v10)(void);
  uint64_t i;
  __int128 *Value;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  int v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  __n128 result;
  int v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __n128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _OWORD v71[3];
  uint64_t v72;
  uint64_t v73;
  char v74;
  _BYTE __src[289];
  _BYTE v76[7];
  _OWORD v77[2];
  uint64_t v78;
  char v79;
  char v80;

  v3 = HIDWORD(a1);
  v4 = *(_QWORD *)AGGraphGetValue();
  swift_beginAccess();
  v5 = *(_QWORD *)(v4 + 160);
  v6 = *(_QWORD *)(v5 + 16);
  v7 = MEMORY[0x24BEE4AF8];
  if (v6)
  {
    v50 = v3;
    v51 = a2;
    v8 = v5 + 80;
    swift_bridgeObjectRetain_n();
    v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v10 = MEMORY[0x24BEE1C68];
    for (i = v6 - 1; ; --i)
    {
      outlined init with take of Image.ResizingInfo?(v8, (uint64_t)v77, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, (uint64_t (*)(_QWORD, uint64_t))v10);
      outlined init with take of Image.ResizingInfo?((uint64_t)v77, (uint64_t)__src, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, (uint64_t (*)(_QWORD, uint64_t))v10);
      if (_s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOSgWOg((uint64_t)__src) != 1)
      {
        outlined init with take of LayoutGestureBox.Child.DebugData((uint64_t)__src, (uint64_t)v71);
        if (_s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOg((uint64_t)v71) == 1)
        {
          _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOj0_((uint64_t)v71);
          Value = (__int128 *)AGGraphGetValue();
          v62 = *Value;
          v13 = Value[4];
          v15 = Value[1];
          v14 = Value[2];
          v65 = Value[3];
          v66 = v13;
          v63 = v15;
          v64 = v14;
          v16 = Value[8];
          v18 = Value[5];
          v17 = Value[6];
          v69 = Value[7];
          v70 = v16;
          v67 = v18;
          v68 = v17;
          outlined retain of GestureDebug.Data((uint64_t)&v62);
          outlined release of LayoutGestureBox.Child.DebugData?((unint64_t *)v77);
          v60 = *((_QWORD *)&v70 + 1);
          v56 = v67;
          v58 = v66;
          v54 = v69;
          v55 = v68;
          v19 = v70;
          v52 = v65;
          v53 = v64;
          v20 = *(_QWORD *)((char *)&v63 + 4);
          v21 = v63;
          v22 = BYTE1(v63);
          v23 = *((_QWORD *)&v62 + 1);
          v24 = v62;
        }
        else
        {
          v25 = _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOj0_((uint64_t)v71);
          v60 = *(_QWORD *)(v25 + 136);
          v56 = *(_OWORD *)(v25 + 80);
          v58 = *(_OWORD *)(v25 + 64);
          v54 = *(_OWORD *)(v25 + 112);
          v55 = *(_OWORD *)(v25 + 96);
          v19 = *(_BYTE *)(v25 + 128);
          v52 = *(_OWORD *)(v25 + 48);
          v53 = *(_OWORD *)(v25 + 32);
          v20 = *(_QWORD *)(v25 + 20);
          v21 = *(_BYTE *)(v25 + 16);
          v22 = *(_BYTE *)(v25 + 17);
          v23 = *(_QWORD *)(v25 + 8);
          v24 = *(_BYTE *)v25;
          outlined init with take of Image.ResizingInfo?((uint64_t)v77, (uint64_t)&v62, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, (uint64_t (*)(_QWORD, uint64_t))v10);
          outlined retain of LayoutGestureBox.Child.DebugData((uint64_t *)&v62);
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
        v27 = v9[2];
        v26 = v9[3];
        if (v27 >= v26 >> 1)
          v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v26 > 1), v27 + 1, 1, v9);
        v9[2] = v27 + 1;
        v28 = &v9[18 * v27];
        *((_BYTE *)v28 + 32) = v24;
        v29 = *(_DWORD *)((char *)&v62 + 3);
        *(_DWORD *)((char *)v28 + 33) = v62;
        *((_DWORD *)v28 + 9) = v29;
        v28[5] = v23;
        *((_BYTE *)v28 + 48) = v21;
        *((_BYTE *)v28 + 49) = v22;
        *(_QWORD *)((char *)v28 + 52) = v20;
        *((_OWORD *)v28 + 4) = v53;
        *((_OWORD *)v28 + 5) = v52;
        *((_OWORD *)v28 + 6) = v58;
        *((_OWORD *)v28 + 7) = v56;
        *((_OWORD *)v28 + 8) = v55;
        *((_OWORD *)v28 + 9) = v54;
        *((_BYTE *)v28 + 160) = v19;
        v30 = *(_DWORD *)v76;
        *((_DWORD *)v28 + 41) = *(_DWORD *)&v76[3];
        *(_DWORD *)((char *)v28 + 161) = v30;
        v28[21] = v60;
        v10 = MEMORY[0x24BEE1C68];
      }
      if (!i)
        break;
      v8 += 208;
    }
    swift_bridgeObjectRelease_n();
    LODWORD(v3) = v50;
    a2 = v51;
    v7 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v31 = AGGraphGetValue();
  v32 = *(_QWORD *)v31;
  v33 = *(_QWORD *)(v31 + 8);
  v34 = *(_QWORD *)(v31 + 16);
  v35 = *(double *)(v31 + 24);
  v36 = *(double *)(v31 + 32);
  v78 = 0;
  memset(v77, 0, sizeof(v77));
  v79 = 2;
  v80 = 2;
  v37 = (uint64_t *)AGGraphGetValue();
  v38 = *v37;
  v39 = v37[1];
  if (v32 || v35 != 0.0 || v36 != 0.0)
  {
    *(_QWORD *)&v71[0] = *v37;
    *((_QWORD *)&v71[0] + 1) = v39;
    *(_QWORD *)__src = v32;
    *(_QWORD *)&__src[8] = v33;
    *(_QWORD *)&__src[16] = v34;
    *(double *)&__src[24] = v35;
    *(double *)&__src[32] = v36;
    swift_retain();
    specialized ViewTransform.convert(_:_:)((uint64_t)v77, (uint64_t)__src);
    v39 = *((_QWORD *)&v71[0] + 1);
    v38 = *(_QWORD *)&v71[0];
  }
  outlined destroy of ViewTransform.Conversion((uint64_t)v77);
  swift_release();
  specialized ArrayWith2Inline.init<A>(_:)((uint64_t)v9, __src);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
  v40 = *(_WORD *)AGGraphGetValue();
  v41 = *(_DWORD *)AGGraphGetValue();
  v42 = (uint64_t *)AGGraphGetValue();
  v43 = *v42;
  v44 = v42[1];
  specialized ArrayWith2Inline.init<A>(_:)((uint64_t *)(v7 + 32), 0, (uint64_t)v71);
  v59 = v71[1];
  v61 = v71[0];
  v57 = (__n128)v71[2];
  v45 = v72;
  v46 = v73;
  v47 = v74;
  v48 = swift_allocObject();
  memcpy((void *)(v48 + 16), __src, 0x121uLL);
  *(_BYTE *)a2 = 4;
  *(_DWORD *)(a2 + 1) = v62;
  *(_DWORD *)(a2 + 4) = *(_DWORD *)((char *)&v62 + 3);
  *(_QWORD *)(a2 + 8) = &type metadata for DefaultLayoutGesture;
  *(_WORD *)(a2 + 16) = v40;
  *(_DWORD *)(a2 + 20) = v3;
  *(_DWORD *)(a2 + 24) = v41;
  *(_QWORD *)(a2 + 32) = v38;
  *(_QWORD *)(a2 + 40) = v39;
  *(_QWORD *)(a2 + 48) = v43;
  *(_QWORD *)(a2 + 56) = v44;
  *(_OWORD *)(a2 + 64) = v61;
  *(_OWORD *)(a2 + 80) = v59;
  result = v57;
  *(__n128 *)(a2 + 96) = v57;
  *(_QWORD *)(a2 + 112) = v45;
  *(_QWORD *)(a2 + 120) = v46;
  *(_BYTE *)(a2 + 128) = v47;
  *(_DWORD *)(a2 + 129) = *(_DWORD *)v76;
  *(_DWORD *)(a2 + 132) = *(_DWORD *)&v76[3];
  *(_QWORD *)(a2 + 136) = v48;
  return result;
}

uint64_t protocol witness for static UnaryLayout.makeViewImpl(modifier:inputs:body:) in conformance LayoutPriorityLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, __int128 *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t specialized GesturePhase.applyingDependency(_:inheritedPhase:)(unsigned __int8 a1)
{
  return ((uint64_t (*)(void))((char *)sub_234E3727C + 4 * byte_2352A5DE5[a1]))();
}

uint64_t sub_234E3727C@<X0>(char a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, char a5@<W5>, uint64_t a6@<X8>)
{
  uint64_t v6;
  char v7;

  if ((a1 & 2) != 0)
  {
    if (((a5 - 1) & 0xFE) != 0)
      v6 = a2;
    else
      v6 = a2;
    if (((a5 - 1) & 0xFE) != 0)
      v7 = a5;
    else
      v7 = 0;
    *(_QWORD *)a6 = v6;
    *(_QWORD *)(a6 + 8) = a3;
    *(_QWORD *)(a6 + 16) = a4;
    *(_BYTE *)(a6 + 24) = v7;
  }
  else
  {
    *(_QWORD *)a6 = a2;
    *(_QWORD *)(a6 + 8) = a3;
    *(_QWORD *)(a6 + 16) = a4;
    *(_BYTE *)(a6 + 24) = a5;
  }
  return outlined copy of GesturePhase<TappableEvent>(a2, a3, a4, a5);
}

uint64_t protocol witness for static UnaryLayout.makeViewImpl(modifier:inputs:body:) in conformance _SafeAreaIgnoringLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, __int128 *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static UnaryLayout.makeViewImpl(modifier:inputs:body:) in conformance _SafeAreaRegionsIgnoringLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, __int128 *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

void specialized ForEachState.update(view:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t Counter;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  id v25;
  __int128 *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  Swift::Int v36;
  Swift::Int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t *v42;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v44;
  char v45;
  unint64_t v46;
  uint64_t v47;
  _BOOL8 v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  char v52;
  _QWORD *v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  char v64;
  unint64_t v65;
  int v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t *v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  Swift::String v102;
  Swift::String v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  Swift::String v113;
  Swift::String v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  Swift::String v125;
  Swift::String v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  int64_t v132;
  int64_t v133;
  unint64_t v134;
  unint64_t v135;
  int64_t v136;
  unint64_t v137;
  int64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  int v144;
  _QWORD *v145;
  uint64_t Strong;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  char v150;
  unint64_t v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t IsValid;
  uint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  __int128 *v160;
  __int128 v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  _QWORD *v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  char v179;
  unint64_t v180;
  uint64_t v181[12];
  uint64_t v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;

  v163 = *(_QWORD *)(v1 + 104);
  if (!AGSubgraphIsValid())
    return;
  *(_QWORD *)(v1 + 288) = AGMakeUniqueID();
  LODWORD(v170) = *(_DWORD *)(v1 + 296);
  *(_DWORD *)(v1 + 296) = v170 + 1;
  v171 = v1;
  specialized ForEachState.invalidateViewCounts()();
  v4 = v1 + 128;
  swift_beginAccess();
  _s7SwiftUI34AccessibilityTextAttributeResolver_pSgWOcTm_0(v1 + 128, (uint64_t)&v183, &lazy cache variable for type metadata for ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>?, (void (*)(uint64_t))type metadata accessor for ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>);
  v5 = *((_QWORD *)&v184 + 1);
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)&v183, &lazy cache variable for type metadata for ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>?, (void (*)(uint64_t))type metadata accessor for ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>);
  v166 = (_QWORD *)a1;
  if (!v5)
    goto LABEL_5;
  if (!*(_QWORD *)(v1 + 152))
  {
LABEL_187:
    __break(1u);
LABEL_188:
    __break(1u);
    goto LABEL_189;
  }
  if (*(_QWORD *)(v1 + 200))
  {
LABEL_5:
    outlined init with copy of TypesettingLanguage(a1, (uint64_t)&v183, (uint64_t (*)(_QWORD))type metadata accessor for ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>);
    swift_beginAccess();
    outlined assign with take of ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>?((uint64_t)&v183, v4);
    swift_endAccess();
    v167 = (uint64_t *)(v1 + 264);
    swift_beginAccess();
    *(_QWORD *)(v1 + 264) = MEMORY[0x24BEE4B00];
    swift_bridgeObjectRelease();
    if ((*(_BYTE *)(v1 + 124) & 1) == 0)
    {
      v6 = (id)AGGraphGetAttributeGraph();
      Counter = AGGraphGetCounter();

      v8 = v171;
      *(_QWORD *)(v171 + 272) = Counter;
      if ((*(_QWORD *)(v8 + 280) & 0x8000000000000000) != 0)
      {
        *(_QWORD *)(v8 + 280) = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_177;
      }
      if (one-time initialization token for _lock != -1)
        goto LABEL_167;
      goto LABEL_8;
    }
    goto LABEL_186;
  }
  outlined init with copy of _VariadicView_Children(v4, (uint64_t)&v183);
  if (one-time initialization token for _lock != -1)
    swift_once();
  v82 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  v83 = *((_QWORD *)&v184 + 1);
  v84 = v185;
  __swift_project_boxed_opaque_existential_1(&v183, *((uint64_t *)&v184 + 1));
  v85 = ViewList.count.getter(v83, v84);
  static Update.end()();
  _MovableLockUnlock(v82);
  _MovableLockLock(v82);
  specialized static Update.begin()();
  v86 = *((_QWORD *)&v184 + 1);
  v87 = v185;
  __swift_project_boxed_opaque_existential_1(&v183, *((uint64_t *)&v184 + 1));
  v88 = ViewList.count.getter(v86, v87);
  static Update.end()();
  _MovableLockUnlock(v82);
  if (v88 < 0)
  {
    __break(1u);
LABEL_169:
    __break(1u);
    goto LABEL_170;
  }
  _MovableLockLock(v82);
  specialized static Update.begin()();
  v89 = *((_QWORD *)&v184 + 1);
  v90 = v185;
  __swift_project_boxed_opaque_existential_1(&v183, *((uint64_t *)&v184 + 1));
  v91 = ViewList.count.getter(v89, v90);
  static Update.end()();
  _MovableLockUnlock(v82);
  if (v85 < 0 || v91 < v85)
    goto LABEL_169;
  outlined destroy of _VariadicView_Children((uint64_t)&v183);
  v92 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  v93 = *(_QWORD *)(a1 + 24);
  v94 = *(_QWORD *)(a1 + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)a1, v93);
  v2 = a1;
  v95 = ViewList.count.getter(v93, v94);
  static Update.end()();
  _MovableLockUnlock(v92);
  _MovableLockLock(v92);
  specialized static Update.begin()();
  v96 = *(_QWORD *)(v2 + 24);
  v97 = *(_QWORD *)(v2 + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)v2, v96);
  v98 = ViewList.count.getter(v96, v97);
  static Update.end()();
  _MovableLockUnlock(v92);
  if (v98 < 0)
  {
LABEL_170:
    __break(1u);
LABEL_171:
    __break(1u);
LABEL_172:
    swift_bridgeObjectRetain();
    v140 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v140)
      goto LABEL_173;
LABEL_138:
    if (v140 >= 1)
    {
      v141 = 0;
      v142 = v2 & 0xC000000000000001;
      v169 = (uint64_t *)(v2 & 0xC000000000000001);
      v170 = 0;
      v167 = (uint64_t *)v140;
      while (1)
      {
        if (v142)
        {
          v143 = MEMORY[0x23B7C6D9C](v141, v2);
        }
        else
        {
          v143 = *(_QWORD *)(v2 + 8 * v141 + 32);
          swift_retain();
        }
        AGSubgraphApply();
        AGSubgraphRemoveChild();
        *(_WORD *)(v143 + 165) = 256;
        swift_beginAccess();
        v144 = *(_DWORD *)(v143 + 24) - 1;
        *(_DWORD *)(v143 + 24) = v144;
        if (!v144)
          break;
LABEL_141:
        ++v141;
        swift_release();
        if (v140 == v141)
          goto LABEL_173;
      }
      v145 = (_QWORD *)v2;
      Strong = swift_weakLoadStrong();
      if (!Strong)
      {
LABEL_153:
        IsValid = AGSubgraphIsValid();
        if ((IsValid & 1) != 0)
        {
          MEMORY[0x24BDAC7A8](IsValid);
          LOBYTE(v158) = 1;
          AGSubgraphApply();
          AGSubgraphInvalidate();
        }
        v2 = (uint64_t)v145;
        goto LABEL_141;
      }
      v147 = Strong;
      swift_beginAccess();
      v148 = *(_QWORD *)(v147 + 256);
      if (*(_QWORD *)(v148 + 16))
      {
        swift_bridgeObjectRetain();
        v149 = specialized __RawDictionaryStorage.find<A>(_:)(v143 + 32);
        if ((v150 & 1) != 0)
        {
          v151 = v149;
          v152 = *(_DWORD *)(v148 + 36);
          swift_bridgeObjectRelease();
          swift_beginAccess();
          specialized Dictionary._Variant.remove(at:)((uint64_t)&v183, v151, v152, 0);
          swift_endAccess();
          swift_release();
          swift_release();
          outlined destroy of AnyHashable((uint64_t)&v183);
          v140 = (uint64_t)v167;
LABEL_152:
          v142 = (unint64_t)v169;
          goto LABEL_153;
        }
        swift_bridgeObjectRelease();
        v140 = (uint64_t)v167;
      }
      swift_retain();
      v153 = swift_bridgeObjectRetain();
      v154 = v170;
      v155 = specialized _NativeDictionary.filter(_:)(v153, v143);
      v170 = v154;
      swift_bridgeObjectRelease();
      swift_release();
      *(_QWORD *)(v147 + 256) = v155;
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_152;
    }
    __break(1u);
    goto LABEL_180;
  }
  _MovableLockLock(v92);
  specialized static Update.begin()();
  v99 = *(_QWORD *)(v2 + 24);
  v100 = *(_QWORD *)(v2 + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)v2, v99);
  v101 = ViewList.count.getter(v99, v100);
  static Update.end()();
  _MovableLockUnlock(v92);
  if (v95 < 0 || v101 < v95)
    goto LABEL_171;
  if (v85 != v95)
  {
    *(_QWORD *)&v183 = 0;
    *((_QWORD *)&v183 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(204);
    *(_OWORD *)v181 = v183;
    v102._countAndFlagsBits = 0xD000000000000035;
    v102._object = (void *)0x80000002352E3F00;
    String.append(_:)(v102);
    v103._countAndFlagsBits = 0x2820746E756F6320;
    v103._object = (void *)0xE800000000000000;
    String.append(_:)(v103);
    _MovableLockLock(v92);
    specialized static Update.begin()();
    v104 = v166[3];
    v105 = v166[4];
    __swift_project_boxed_opaque_existential_1(v166, v104);
    v106 = ViewList.count.getter(v104, v105);
    static Update.end()();
    _MovableLockUnlock(v92);
    _MovableLockLock(v92);
    specialized static Update.begin()();
    v107 = v166[3];
    v108 = v166[4];
    __swift_project_boxed_opaque_existential_1(v166, v107);
    v109 = ViewList.count.getter(v107, v108);
    static Update.end()();
    _MovableLockUnlock(v92);
    if (v109 < 0)
    {
LABEL_180:
      __break(1u);
LABEL_181:
      __break(1u);
LABEL_182:
      __break(1u);
      goto LABEL_183;
    }
    _MovableLockLock(v92);
    specialized static Update.begin()();
    v110 = v166[3];
    v111 = v166[4];
    __swift_project_boxed_opaque_existential_1(v166, v110);
    v112 = ViewList.count.getter(v110, v111);
    static Update.end()();
    _MovableLockUnlock(v92);
    if (v106 < 0 || v112 < v106)
      goto LABEL_181;
    *(_QWORD *)&v183 = v106;
    v113._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v113);
    swift_bridgeObjectRelease();
    v114._object = (void *)0x80000002352E3DB0;
    v114._countAndFlagsBits = 0xD000000000000018;
    String.append(_:)(v114);
    if (!*(_QWORD *)(v171 + 152))
    {
LABEL_191:
      __break(1u);
LABEL_192:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return;
    }
    outlined init with copy of _VariadicView_Children(v4, (uint64_t)&v183);
    v115 = static Update._lock;
    _MovableLockLock(static Update._lock);
    specialized static Update.begin()();
    v116 = *((_QWORD *)&v184 + 1);
    v117 = v185;
    __swift_project_boxed_opaque_existential_1(&v183, *((uint64_t *)&v184 + 1));
    v118 = ViewList.count.getter(v116, v117);
    static Update.end()();
    _MovableLockUnlock(v115);
    _MovableLockLock(v115);
    specialized static Update.begin()();
    v119 = *((_QWORD *)&v184 + 1);
    v120 = v185;
    __swift_project_boxed_opaque_existential_1(&v183, *((uint64_t *)&v184 + 1));
    v121 = ViewList.count.getter(v119, v120);
    static Update.end()();
    _MovableLockUnlock(v115);
    if (v121 < 0)
      goto LABEL_182;
    _MovableLockLock(v115);
    specialized static Update.begin()();
    v122 = *((_QWORD *)&v184 + 1);
    v123 = v185;
    __swift_project_boxed_opaque_existential_1(&v183, *((uint64_t *)&v184 + 1));
    v124 = ViewList.count.getter(v122, v123);
    static Update.end()();
    _MovableLockUnlock(v115);
    if (v118 < 0 || v124 < v118)
    {
LABEL_183:
      __break(1u);
LABEL_184:
      __break(1u);
LABEL_185:
      __break(1u);
LABEL_186:
      __break(1u);
      goto LABEL_187;
    }
    outlined destroy of _VariadicView_Children((uint64_t)&v183);
    *(_QWORD *)&v173 = v118;
    v125._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v125);
    swift_bridgeObjectRelease();
    v126._countAndFlagsBits = 0xD0000000000000A6;
    v126._object = (void *)0x80000002352E3DD0;
    String.append(_:)(v126);
    specialized static Log.externalWarning(_:)(v181[0], v181[1]);
    swift_bridgeObjectRelease();
  }
  if (!*(_QWORD *)(v171 + 152))
  {
LABEL_189:
    __break(1u);
    goto LABEL_190;
  }
  outlined init with copy of _VariadicView_Children(v4, (uint64_t)v181);
  outlined init with copy of TypesettingLanguage((uint64_t)v166, (uint64_t)&v183, (uint64_t (*)(_QWORD))type metadata accessor for ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>);
  swift_beginAccess();
  outlined assign with take of ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>?((uint64_t)&v183, v4);
  outlined init with copy of _VariadicView_Children((uint64_t)v181, (uint64_t)&v183);
  if (!*(_QWORD *)(v171 + 152))
  {
LABEL_190:
    __break(1u);
    goto LABEL_191;
  }
  outlined assign with take of _VariadicView_Children((uint64_t)&v183, v4);
  swift_endAccess();
  swift_beginAccess();
  v127 = *(_QWORD *)(v171 + 256);
  v128 = v127 + 64;
  v129 = 1 << *(_BYTE *)(v127 + 32);
  v130 = -1;
  if (v129 < 64)
    v130 = ~(-1 << v129);
  v131 = v130 & *(_QWORD *)(v127 + 64);
  v132 = (unint64_t)(v129 + 63) >> 6;
  v169 = (uint64_t *)(v132 - 1);
  swift_bridgeObjectRetain();
  v133 = 0;
  a1 = 40;
  while (1)
  {
    if (v131)
    {
      v134 = __clz(__rbit64(v131));
      v131 &= v131 - 1;
      v135 = v134 | (v133 << 6);
      goto LABEL_112;
    }
    v136 = v133 + 1;
    if (__OFADD__(v133, 1))
      break;
    if (v136 < v132)
    {
      v137 = *(_QWORD *)(v128 + 8 * v136);
      if (v137)
        goto LABEL_116;
      v138 = v133 + 2;
      ++v133;
      if (v136 + 1 < v132)
      {
        v137 = *(_QWORD *)(v128 + 8 * v138);
        if (v137)
          goto LABEL_119;
        v133 = v136 + 1;
        if (v136 + 2 < v132)
        {
          v137 = *(_QWORD *)(v128 + 8 * (v136 + 2));
          if (v137)
          {
            v136 += 2;
LABEL_116:
            v131 = (v137 - 1) & v137;
            v135 = __clz(__rbit64(v137)) + (v136 << 6);
            v133 = v136;
LABEL_112:
            outlined init with copy of AnyHashable(*(_QWORD *)(v127 + 48) + 40 * v135, (uint64_t)&v173);
            *((_QWORD *)&v175 + 1) = *(_QWORD *)(*(_QWORD *)(v127 + 56) + 8 * v135);
            swift_retain();
            goto LABEL_131;
          }
          v138 = v136 + 3;
          v133 = v136 + 2;
          if (v136 + 3 < v132)
          {
            v137 = *(_QWORD *)(v128 + 8 * v138);
            if (v137)
            {
LABEL_119:
              v136 = v138;
              goto LABEL_116;
            }
            while (1)
            {
              v136 = v138 + 1;
              if (__OFADD__(v138, 1))
                goto LABEL_184;
              if (v136 >= v132)
                break;
              v137 = *(_QWORD *)(v128 + 8 * v136);
              ++v138;
              if (v137)
                goto LABEL_116;
            }
            v133 = (int64_t)v169;
          }
        }
      }
    }
    v131 = 0;
    v174 = 0u;
    v175 = 0u;
    v173 = 0u;
LABEL_131:
    outlined init with take of (key: AnyHashable, value: ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item)?((uint64_t)&v173, (uint64_t)&v183, &lazy cache variable for type metadata for (key: AnyHashable, value: ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item)?, (void (*)(uint64_t))type metadata accessor for (key: AnyHashable, value: ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item));
    if (!*((_QWORD *)&v184 + 1))
    {
      swift_release();
      outlined destroy of _VariadicView_Children((uint64_t)v181);
      return;
    }
    v139 = *((_QWORD *)&v185 + 1);
    *(_QWORD *)(*((_QWORD *)&v185 + 1) + 152) = *(_QWORD *)(v171 + 288);
    if (*(_DWORD *)(v139 + 160) == (_DWORD)v170)
      *(_DWORD *)(v139 + 160) = *(_DWORD *)(v171 + 296);
    swift_release();
    outlined destroy of AnyHashable((uint64_t)&v183);
  }
LABEL_164:
  __break(1u);
LABEL_165:
  __break(1u);
LABEL_166:
  __break(1u);
LABEL_167:
  swift_once();
LABEL_8:
  v9 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)a1, v10);
  v12 = ViewList.count.getter(v10, v11);
  static Update.end()();
  _MovableLockUnlock(v9);
  v13 = (_QWORD *)v171;
  v169 = (uint64_t *)(v171 + 256);
  swift_beginAccess();
  v14 = *(_QWORD *)(v13[32] + 16);
  v165 = v13 + 39;
  swift_beginAccess();
  v15 = *(_QWORD *)(v13[39] + 16);
  v182 = MEMORY[0x24BEE4B08];
  v13[35] = 0;
  v168 = v15;
  v16 = v14 | v15;
  v170 = v14;
  v17 = v14 == 0;
  v162 = swift_bridgeObjectRetain();
  if (v16 && v12)
  {
    v18 = 0;
    v160 = &v187;
    v161 = xmmword_23527E860;
    v164 = v12;
    while (1)
    {
      if (!*(_QWORD *)(a1 + 72))
        goto LABEL_185;
      memset(v181, 0, sizeof(v181));
      v19 = static Update._lock;
      swift_retain();
      _MovableLockLock(v19);
      specialized static Update.begin()();
      v172 = (_QWORD *)v18;
      v180 = *(_QWORD *)(a1 + 48);
      outlined init with copy of AnyTrackedValue(a1, (uint64_t)&v173);
      v20 = *((_QWORD *)&v174 + 1);
      v21 = v175;
      v22 = __swift_project_boxed_opaque_existential_1(&v173, *((uint64_t *)&v174 + 1));
      MEMORY[0x24BDAC7A8](v22);
      v158 = a1;
      v159 = v181;
      swift_bridgeObjectRetain();
      v179 = 1;
      ViewList.applySublists(from:list:transform:to:)((uint64_t)&v172, 0x100000000, (uint64_t)&v180, (uint64_t)partial apply for closure #1 in closure #1 in _VariadicView_Children.subscript.getter, (uint64_t)&v157, v20, v21);
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v173);
      static Update.end()();
      _MovableLockUnlock(v19);
      a1 = (uint64_t)&type metadata for _VariadicView_Children.Element;
      outlined init with copy of _VariadicView_Children.Element?((uint64_t)v181, (uint64_t)&v173, &lazy cache variable for type metadata for _VariadicView_Children.Element?, (uint64_t)&type metadata for _VariadicView_Children.Element, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
      if (*((_QWORD *)&v174 + 1))
      {
        v185 = v175;
        v186 = v176;
        v187 = v177;
        v188 = v178;
        v183 = v173;
        v184 = v174;
      }
      else
      {
        outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)&v173, &lazy cache variable for type metadata for _VariadicView_Children.Element?, (uint64_t)&type metadata for _VariadicView_Children.Element);
        static os_log_type_t.fault.getter();
        if (one-time initialization token for internalErrorsLog != -1)
          swift_once();
        swift_beginAccess();
        v23 = (void *)static Log.internalErrorsLog;
        _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
        v24 = swift_allocObject();
        *(_OWORD *)(v24 + 16) = v161;
        *(_QWORD *)(v24 + 56) = MEMORY[0x24BEE1768];
        *(_QWORD *)(v24 + 64) = MEMORY[0x24BEE17F0];
        *(_QWORD *)(v24 + 32) = v18;
        v25 = v23;
        os_log(_:dso:log:_:_:)();

        swift_bridgeObjectRelease();
        *((_QWORD *)&v184 + 1) = &type metadata for EmptyViewListElements;
        *(_QWORD *)&v185 = &protocol witness table for EmptyViewListElements;
        *((_QWORD *)&v185 + 1) = 0;
        if ((unint64_t)v18 >> 31)
          goto LABEL_165;
        LODWORD(v186) = 0;
        DWORD1(v186) = ~(_DWORD)v18;
        v26 = v160;
        *((_QWORD *)v160 + 1) = 0;
        *((_QWORD *)v26 + 2) = 0;
        *(_QWORD *)v26 = 0;
        *((_QWORD *)&v186 + 1) = MEMORY[0x24BEE4AF8];
        *((_QWORD *)&v188 + 1) = MEMORY[0x24BEE4AF8];
      }
      outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)v181, &lazy cache variable for type metadata for _VariadicView_Children.Element?, (uint64_t)&type metadata for _VariadicView_Children.Element);
      swift_getAtKeyPath();
      outlined destroy of _VariadicView_Children.Element((uint64_t)&v183);
      swift_release();
      v27 = v169;
      swift_beginAccess();
      v28 = *v27;
      if (*(_QWORD *)(v28 + 16)
        && (v29 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v181), (v30 & 1) != 0))
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v28 + 56) + 8 * v29);
        swift_endAccess();
        v32 = v171;
        *(_QWORD *)(v171 + 280) = v18;
        swift_beginAccess();
        *(_QWORD *)(v31 + 136) = v18;
        v33 = *(_QWORD *)(v32 + 288);
        *(_QWORD *)(v31 + 144) = v18;
        *(_QWORD *)(v31 + 152) = v33;
        *(_DWORD *)(v31 + 160) = *(_DWORD *)(v32 + 296);
        --v170;
        if ((*(_BYTE *)(v31 + 166) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          v162 = *v167;
          swift_bridgeObjectRetain();
          v34 = 1;
          goto LABEL_24;
        }
      }
      else
      {
        swift_endAccess();
      }
      v34 = 0;
LABEL_24:
      v35 = *v165;
      if (*(_QWORD *)(*v165 + 16))
      {
        v36 = *(_QWORD *)(v35 + 40);
        swift_bridgeObjectRetain();
        v37 = AnyHashable._rawHashValue(seed:)(v36);
        v38 = -1 << *(_BYTE *)(v35 + 32);
        v39 = v37 & ~v38;
        if (((*(_QWORD *)(v35 + 56 + ((v39 >> 3) & 0xFFFFFFFFFFFFF8)) >> v39) & 1) != 0)
        {
          v40 = ~v38;
          while (1)
          {
            outlined init with copy of AnyHashable(*(_QWORD *)(v35 + 48) + 40 * v39, (uint64_t)&v183);
            v41 = MEMORY[0x23B7C6C4C](&v183, v181);
            outlined destroy of AnyHashable((uint64_t)&v183);
            if ((v41 & 1) != 0)
              break;
            v39 = (v39 + 1) & v40;
            if (((*(_QWORD *)(v35 + 56 + ((v39 >> 3) & 0xFFFFFFFFFFFFF8)) >> v39) & 1) == 0)
              goto LABEL_29;
          }
          swift_bridgeObjectRelease();
          outlined init with copy of AnyHashable((uint64_t)v181, (uint64_t)&v173);
          specialized Set._Variant.insert(_:)((uint64_t)&v183, (uint64_t)&v173);
          outlined destroy of AnyHashable((uint64_t)&v183);
          --v168;
          goto LABEL_42;
        }
LABEL_29:
        swift_bridgeObjectRelease();
      }
      if (!v34)
      {
        outlined init with copy of AnyHashable((uint64_t)v181, (uint64_t)&v183);
        v42 = v167;
        swift_beginAccess();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v172 = (_QWORD *)*v42;
        v44 = v172;
        *v42 = 0x8000000000000000;
        v46 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v183);
        v47 = v44[2];
        v48 = (v45 & 1) == 0;
        v49 = v47 + v48;
        a1 = (uint64_t)v166;
        if (__OFADD__(v47, v48))
          goto LABEL_163;
        v50 = v45;
        if (v44[3] >= v49)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            v53 = v172;
            if ((v45 & 1) == 0)
              goto LABEL_35;
          }
          else
          {
            specialized _NativeDictionary.copy()();
            v53 = v172;
            if ((v50 & 1) == 0)
              goto LABEL_35;
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v49, isUniquelyReferenced_nonNull_native);
          v51 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v183);
          if ((v50 & 1) != (v52 & 1))
            goto LABEL_192;
          v46 = v51;
          v53 = v172;
          if ((v50 & 1) == 0)
          {
LABEL_35:
            v53[(v46 >> 6) + 8] |= 1 << v46;
            outlined init with copy of AnyHashable((uint64_t)&v183, v53[6] + 40 * v46);
            *(_BYTE *)(v53[7] + v46) = 0;
            v54 = v53[2];
            v55 = __OFADD__(v54, 1);
            v56 = v54 + 1;
            if (v55)
              goto LABEL_166;
            v53[2] = v56;
            goto LABEL_40;
          }
        }
        *(_BYTE *)(v53[7] + v46) = 0;
LABEL_40:
        *v167 = (uint64_t)v53;
        swift_bridgeObjectRelease();
        outlined destroy of AnyHashable((uint64_t)&v183);
        swift_endAccess();
        goto LABEL_43;
      }
LABEL_42:
      a1 = (uint64_t)v166;
LABEL_43:
      v57 = static Update._lock;
      _MovableLockLock(static Update._lock);
      specialized static Update.begin()();
      v58 = *(_QWORD *)(a1 + 24);
      v59 = *(_QWORD *)(a1 + 32);
      __swift_project_boxed_opaque_existential_1((_QWORD *)a1, v58);
      v60 = ViewList.count.getter(v58, v59);
      static Update.end()();
      _MovableLockUnlock(v57);
      if (v18 >= v60)
      {
        __break(1u);
LABEL_156:
        __break(1u);
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        __break(1u);
LABEL_160:
        __break(1u);
LABEL_161:
        __break(1u);
LABEL_162:
        __break(1u);
LABEL_163:
        __break(1u);
        goto LABEL_164;
      }
      outlined destroy of AnyHashable((uint64_t)v181);
      v17 = v170 == 0;
      if (v170 | v168)
      {
        if (++v18 != v164)
          continue;
      }
      break;
    }
  }
  if ((*(_BYTE *)(v171 + 300) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    if (v17)
      goto LABEL_174;
  }
  else
  {
    *v167 = v162;
    swift_bridgeObjectRelease();
    if (v17)
      goto LABEL_174;
  }
  v180 = MEMORY[0x24BEE4AF8];
  v61 = *v169;
  v62 = specialized Dictionary.startIndex.getter(*v169);
  if ((v64 & 1) != 0)
    goto LABEL_188;
  v65 = v62;
  v66 = (int)v63;
  v168 = 1 << *(_BYTE *)(v61 + 32);
  LODWORD(v164) = *(_DWORD *)(v61 + 36);
  v162 = v63;
  v67 = v63;
  do
  {
    if (v66 != (_DWORD)v164)
      goto LABEL_156;
    if (v65 == v168)
      goto LABEL_136;
    if ((v65 & 0x8000000000000000) != 0)
      goto LABEL_157;
    v68 = *v169;
    v69 = 1 << *(_BYTE *)(*v169 + 32);
    if ((uint64_t)v65 >= v69)
      goto LABEL_157;
    v70 = v65 >> 6;
    a1 = 1 << v65;
    if ((*(_QWORD *)(v68 + 8 * (v65 >> 6) + 64) & (1 << v65)) == 0)
      goto LABEL_158;
    if (*(_DWORD *)(v68 + 36) != (_DWORD)v67)
      goto LABEL_159;
    v66 = (int)v67;
    v166 = v67;
    v71 = *(_QWORD *)(*(_QWORD *)(v68 + 56) + 8 * v65);
    if ((*(_BYTE *)(v71 + 166) & 1) != 0)
    {
      swift_retain();
    }
    else
    {
      v72 = *(_DWORD *)(v71 + 160);
      v73 = *(_DWORD *)(v171 + 296);
      swift_retain();
      if (v72 != v73)
      {
        v74 = swift_retain();
        MEMORY[0x23B7C61A8](v74);
        if (*(_QWORD *)((v180 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v180 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        --v170;
        outlined init with copy of AnyHashable(v71 + 32, (uint64_t)&v183);
        v75 = v167;
        swift_beginAccess();
        v76 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)&v173 = *v75;
        *v75 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(1, (uint64_t)&v183, v76);
        *v75 = v173;
        swift_bridgeObjectRelease();
        outlined destroy of AnyHashable((uint64_t)&v183);
        swift_endAccess();
        v68 = *v169;
        v69 = 1 << *(_BYTE *)(*v169 + 32);
      }
    }
    if ((uint64_t)v65 >= v69)
      goto LABEL_160;
    v77 = v68 + 64;
    v78 = *(_QWORD *)(v68 + 64 + 8 * v70);
    if ((v78 & a1) == 0)
      goto LABEL_161;
    if (*(_DWORD *)(v68 + 36) != v66)
      goto LABEL_162;
    v79 = v78 & (-2 << (v65 & 0x3F));
    if (v79)
    {
      swift_release();
      v65 = __clz(__rbit64(v79)) | v65 & 0xFFFFFFFFFFFFFFC0;
      goto LABEL_57;
    }
    a1 = v70 + 1;
    v80 = (unint64_t)(v69 + 63) >> 6;
    if (v70 + 1 >= v80)
      goto LABEL_86;
    v81 = *(_QWORD *)(v77 + 8 * a1);
    if (!v81)
    {
      a1 = v70 + 2;
      if (v70 + 2 >= v80)
        goto LABEL_86;
      v81 = *(_QWORD *)(v77 + 8 * a1);
      if (!v81)
      {
        a1 = v70 + 3;
        if (v70 + 3 >= v80)
          goto LABEL_86;
        v81 = *(_QWORD *)(v77 + 8 * a1);
        if (!v81)
        {
          while (v80 - 4 != v70)
          {
            v81 = *(_QWORD *)(v68 + 96 + 8 * v70++);
            if (v81)
            {
              outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v65, (uint64_t)v166, 0);
              swift_release();
              a1 = v70 + 3;
              goto LABEL_77;
            }
          }
          outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v65, (uint64_t)v166, 0);
LABEL_86:
          swift_release();
          v65 = v69;
          goto LABEL_57;
        }
      }
    }
    swift_release();
LABEL_77:
    v65 = __clz(__rbit64(v81)) | (a1 << 6);
LABEL_57:
    v67 = (_QWORD *)v162;
  }
  while (v170);
  v168 = v65;
  v67 = (_QWORD *)v162;
LABEL_136:
  v166 = v67;
  v2 = v180;
  if (v180 >> 62)
    goto LABEL_172;
  v140 = *(_QWORD *)((v180 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v140)
    goto LABEL_138;
LABEL_173:
  swift_bridgeObjectRelease();
  outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v168, (uint64_t)v166, 0);
LABEL_174:
  v8 = v171;
  if ((*(_BYTE *)(v171 + 300) & 1) == 0)
    *(_QWORD *)(v171 + 280) = 0x7FFFFFFFFFFFFFFFLL;
  *v165 = v182;
  swift_bridgeObjectRelease();
LABEL_177:
  *(_BYTE *)(v8 + 300) = 0;
}

void specialized ForEachState.update(view:)(int64_t *a1)
{
  uint64_t v1;
  int64_t *v2;
  int64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t isUniquelyReferenced_nonNull_native;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int64_t v38;
  unint64_t v39;
  unint64_t v40;
  int64_t v41;
  unint64_t v42;
  int64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  id v48;
  uint64_t Counter;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  int64_t v70;
  uint64_t v71;
  _QWORD *v72;
  char v73;
  unint64_t v74;
  uint64_t v75;
  _BOOL8 v76;
  uint64_t v77;
  char v78;
  unint64_t v79;
  char v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  int64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  int v112;
  uint64_t Strong;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char v117;
  unint64_t v118;
  int v119;
  uint64_t v120;
  unint64_t *v121;
  uint64_t IsValid;
  uint64_t v123;
  int64_t v124;
  int64_t *v125;
  _QWORD *v126;
  int v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  int64_t v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  unint64_t v140;
  uint64_t v141[3];
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;

  v2 = (int64_t *)v1;
  v3 = a1;
  v4 = *a1;
  v5 = a1[1];
  v7 = a1[2];
  v6 = a1[3];
  v9 = a1[4];
  v8 = a1[5];
  isUniquelyReferenced_nonNull_native = a1[6];
  if (!AGSubgraphIsValid())
    return;
  v133 = v7;
  v135 = v6;
  *(_QWORD *)(v1 + 248) = AGMakeUniqueID();
  v11 = *(_DWORD *)(v1 + 256);
  *(_DWORD *)(v1 + 256) = v11 + 1;
  specialized ForEachState.invalidateViewCounts()();
  swift_beginAccess();
  v12 = *(_QWORD *)(v1 + 144);
  if (v12 && !v2[20])
  {
    v13 = v2[16];
    v14 = v2[17];
    v15 = __OFSUB__(v14, v13);
    v16 = v14 - v13;
    if (v15)
      goto LABEL_148;
    v17 = v3[1];
    v18 = v17 - *v3;
    if (__OFSUB__(v17, *v3))
      goto LABEL_149;
    v130 = v9;
    v131 = v8;
    v132 = isUniquelyReferenced_nonNull_native;
    if (v16 == v18)
      goto LABEL_10;
    isUniquelyReferenced_nonNull_native = 0xD000000000000018;
    v144 = 0;
    v145 = 0xE000000000000000;
    _StringGuts.grow(_:)(204);
    v19._countAndFlagsBits = 0xD0000000000000A2;
    v19._object = (void *)0x80000002352E3D00;
    String.append(_:)(v19);
    v20._countAndFlagsBits = 0x2820746E756F6320;
    v20._object = (void *)0xE800000000000000;
    String.append(_:)(v20);
    v143 = v18;
    v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._object = (void *)0x80000002352E3DB0;
    v22._countAndFlagsBits = 0xD000000000000018;
    String.append(_:)(v22);
    if (v2[18])
    {
      v23 = v2[16];
      v24 = v2[17];
      v15 = __OFSUB__(v24, v23);
      v25 = v24 - v23;
      if (v15)
        goto LABEL_150;
      v143 = v25;
      v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      v27._countAndFlagsBits = 0xD0000000000000A6;
      v27._object = (void *)0x80000002352E3DD0;
      String.append(_:)(v27);
      specialized static Log.externalWarning(_:)(v144, v145);
      swift_bridgeObjectRelease();
      v12 = v2[18];
      if (v12)
      {
LABEL_10:
        v28 = v2[16];
        v29 = v2[17];
        v9 = v2[20];
        outlined retain of ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>((uint64_t)v3);
        v2[18] = v133;
        v2[19] = v135;
        v2[20] = v130;
        v2[21] = v8;
        v2[22] = v132;
        v2[16] = v28;
        v2[17] = v29;
        outlined consume of ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>?(v28, v29, v12);
        swift_beginAccess();
        v30 = v2[27];
        v33 = *(_QWORD *)(v30 + 64);
        v32 = v30 + 64;
        v31 = v33;
        v34 = -1;
        v35 = -1 << *(_BYTE *)(v2[27] + 32);
        if (-v35 < 64)
          v34 = ~(-1 << -(char)v35);
        v36 = v34 & v31;
        isUniquelyReferenced_nonNull_native = (unint64_t)(63 - v35) >> 6;
        v37 = swift_bridgeObjectRetain();
        v38 = 0;
        while (1)
        {
          if (v36)
          {
            v39 = __clz(__rbit64(v36));
            v36 &= v36 - 1;
            v40 = v39 | (v38 << 6);
          }
          else
          {
            v41 = v38 + 1;
            if (__OFADD__(v38, 1))
            {
              __break(1u);
              goto LABEL_134;
            }
            if (v41 >= isUniquelyReferenced_nonNull_native)
              goto LABEL_67;
            v42 = *(_QWORD *)(v32 + 8 * v41);
            v43 = v38 + 1;
            if (!v42)
            {
              v43 = v38 + 2;
              if (v38 + 2 >= isUniquelyReferenced_nonNull_native)
                goto LABEL_67;
              v42 = *(_QWORD *)(v32 + 8 * v43);
              if (!v42)
              {
                v44 = v38 + 3;
                if (v38 + 3 >= isUniquelyReferenced_nonNull_native)
                {
LABEL_67:
                  outlined consume of Set<EventID>.Iterator._Variant();
                  return;
                }
                v42 = *(_QWORD *)(v32 + 8 * v44);
                v43 = v38 + 3;
                if (!v42)
                {
                  while (1)
                  {
                    v43 = v44 + 1;
                    if (__OFADD__(v44, 1))
                      break;
                    if (v43 >= isUniquelyReferenced_nonNull_native)
                      goto LABEL_67;
                    v42 = *(_QWORD *)(v32 + 8 * v43);
                    ++v44;
                    if (v42)
                      goto LABEL_25;
                  }
LABEL_134:
                  __break(1u);
LABEL_135:
                  __break(1u);
                  goto LABEL_136;
                }
              }
            }
LABEL_25:
            v36 = (v42 - 1) & v42;
            v40 = __clz(__rbit64(v42)) + (v43 << 6);
            v38 = v43;
          }
          v45 = *(_QWORD *)(*(_QWORD *)(v37 + 56) + 8 * v40);
          *(_QWORD *)(v45 + 120) = v2[31];
          if (*(_DWORD *)(v45 + 128) == v11)
            *(_DWORD *)(v45 + 128) = *((_DWORD *)v2 + 64);
        }
      }
      goto LABEL_161;
    }
LABEL_160:
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    __break(1u);
LABEL_163:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  v46 = v2[16];
  v128 = v2[17];
  v130 = v2[19];
  v131 = v2[22];
  outlined retain of ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>((uint64_t)v3);
  v2[16] = v4;
  v2[17] = v5;
  v2[18] = v133;
  v2[19] = v6;
  v2[20] = v9;
  v2[21] = v8;
  v2[22] = isUniquelyReferenced_nonNull_native;
  outlined consume of ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>?(v46, v128, v12);
  v47 = v2 + 28;
  swift_beginAccess();
  v2[28] = MEMORY[0x24BEE4B00];
  swift_bridgeObjectRelease();
  if ((*((_BYTE *)v2 + 124) & 1) != 0)
  {
    __break(1u);
    goto LABEL_160;
  }
  v48 = (id)AGGraphGetAttributeGraph();
  Counter = AGGraphGetCounter();

  v2[29] = Counter;
  if (v2[30] < 0)
  {
    v2[30] = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_157;
  }
  v50 = *v3;
  isUniquelyReferenced_nonNull_native = v3[1];
  v134 = v2 + 27;
  swift_beginAccess();
  v51 = *(_QWORD *)(v2[27] + 16);
  v132 = (int64_t)(v2 + 34);
  swift_beginAccess();
  v52 = *(_QWORD *)(v2[34] + 16);
  v53 = (_QWORD *)v2[28];
  v142 = MEMORY[0x24BEE4B08];
  v2[30] = 0;
  v136 = v52;
  v54 = v51 | v52;
  v55 = v51 == 0;
  v126 = v53;
  swift_bridgeObjectRetain();
  v129 = v2 + 28;
  if (v54 && v50 != isUniquelyReferenced_nonNull_native)
  {
    v56 = 0;
    if (isUniquelyReferenced_nonNull_native <= v50)
      v57 = v50;
    else
      v57 = isUniquelyReferenced_nonNull_native;
    v130 = v57 - v50;
    v9 = v50;
    v125 = v2;
    v131 = isUniquelyReferenced_nonNull_native;
    while (1)
    {
      v58 = v56;
      if (v3[4])
      {
        v139 = (_QWORD *)v9;
        swift_retain();
        swift_getAtKeyPath();
        swift_release();
        v58 = v141[0];
      }
      swift_beginAccess();
      v59 = *v134;
      if (!*(_QWORD *)(*v134 + 16))
        break;
      v60 = specialized __RawDictionaryStorage.find<A>(_:)(v58);
      if ((v61 & 1) == 0)
        break;
      v62 = *(_QWORD *)(*(_QWORD *)(v59 + 56) + 8 * v60);
      swift_endAccess();
      v2[30] = v56;
      swift_beginAccess();
      *(_QWORD *)(v62 + 104) = v9;
      v63 = v2[31];
      *(_QWORD *)(v62 + 112) = v56;
      *(_QWORD *)(v62 + 120) = v63;
      *(_DWORD *)(v62 + 128) = *((_DWORD *)v2 + 64);
      --v51;
      if ((*(_BYTE *)(v62 + 134) & 1) != 0)
        goto LABEL_43;
      swift_bridgeObjectRelease();
      v126 = (_QWORD *)*v47;
      swift_bridgeObjectRetain();
      v64 = 1;
LABEL_44:
      v65 = *(_QWORD *)v132;
      if (*(_QWORD *)(*(_QWORD *)v132 + 16)
        && (v66 = static Hasher._hash(seed:_:)(),
            v67 = -1 << *(_BYTE *)(v65 + 32),
            v68 = v66 & ~v67,
            ((*(_QWORD *)(v65 + 56 + ((v68 >> 3) & 0xFFFFFFFFFFFFF8)) >> v68) & 1) != 0))
      {
        v69 = ~v67;
        while (*(_QWORD *)(*(_QWORD *)(v65 + 48) + 8 * v68) != v58)
        {
          v68 = (v68 + 1) & v69;
          if (((*(_QWORD *)(v65 + 56 + ((v68 >> 3) & 0xFFFFFFFFFFFFF8)) >> v68) & 1) == 0)
            goto LABEL_49;
        }
        specialized Set._Variant.insert(_:)(v141, v58);
        --v136;
      }
      else
      {
LABEL_49:
        if (!v64)
        {
          v2 = v3;
          v70 = v50;
          v71 = v51;
          swift_beginAccess();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v139 = (_QWORD *)*v47;
          v72 = v139;
          *v47 = 0x8000000000000000;
          v74 = specialized __RawDictionaryStorage.find<A>(_:)(v58);
          v75 = v72[2];
          v76 = (v73 & 1) == 0;
          v77 = v75 + v76;
          if (__OFADD__(v75, v76))
            goto LABEL_138;
          v78 = v73;
          if (v72[3] >= v77)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              specialized _NativeDictionary.copy()();
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v77, isUniquelyReferenced_nonNull_native);
            v79 = specialized __RawDictionaryStorage.find<A>(_:)(v58);
            if ((v78 & 1) != (v80 & 1))
              goto LABEL_163;
            v74 = v79;
          }
          v81 = v139;
          if ((v78 & 1) != 0)
          {
            *(_BYTE *)(v139[7] + v74) = 0;
          }
          else
          {
            v139[(v74 >> 6) + 8] |= 1 << v74;
            *(_QWORD *)(v81[6] + 8 * v74) = v58;
            *(_BYTE *)(v81[7] + v74) = 0;
            v82 = v81[2];
            v15 = __OFADD__(v82, 1);
            v83 = v82 + 1;
            if (v15)
              goto LABEL_147;
            v81[2] = v83;
          }
          v47 = v129;
          *v129 = v81;
          swift_bridgeObjectRelease();
          swift_endAccess();
          v51 = v71;
          v50 = v70;
          v3 = v2;
          v2 = v125;
        }
      }
      isUniquelyReferenced_nonNull_native = v131;
      if (v131 < v50)
        goto LABEL_135;
      if (v56 == v130)
      {
LABEL_136:
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
LABEL_146:
        __break(1u);
LABEL_147:
        __break(1u);
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        swift_bridgeObjectRetain();
        v123 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v123)
          goto LABEL_113;
        goto LABEL_153;
      }
      v55 = v51 == 0;
      if (v51 | v136)
      {
        ++v9;
        ++v56;
        if (v9 != v131)
          continue;
      }
      goto LABEL_68;
    }
    swift_endAccess();
LABEL_43:
    v64 = 0;
    goto LABEL_44;
  }
LABEL_68:
  if ((*((_BYTE *)v2 + 260) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    if (v55)
      goto LABEL_154;
  }
  else
  {
    *v47 = v126;
    swift_bridgeObjectRelease();
    if (v55)
      goto LABEL_154;
  }
  v140 = MEMORY[0x24BEE4AF8];
  v84 = *v134;
  v85 = specialized Dictionary.startIndex.getter(*v134);
  if ((v87 & 1) != 0)
    goto LABEL_162;
  v88 = v86;
  v127 = *(_DWORD *)(v84 + 36);
  if (v127 != (_DWORD)v86)
    goto LABEL_151;
  v9 = v85;
  v137 = 1 << *(_BYTE *)(v84 + 32);
  if (v85 == v137)
  {
    v131 = v85;
    v9 = MEMORY[0x24BEE4AF8];
    v130 = v86;
    goto LABEL_111;
  }
  v130 = v86;
  while (1)
  {
    if ((v9 & 0x8000000000000000) != 0)
      goto LABEL_139;
    isUniquelyReferenced_nonNull_native = *v134;
    v89 = 1 << *(_BYTE *)(*v134 + 32);
    if ((uint64_t)v9 >= v89)
      goto LABEL_139;
    v90 = v51;
    v91 = v9 >> 6;
    v92 = 1 << v9;
    if ((*(_QWORD *)(isUniquelyReferenced_nonNull_native + 8 * (v9 >> 6) + 64) & (1 << v9)) == 0)
      goto LABEL_140;
    if (*(_DWORD *)(isUniquelyReferenced_nonNull_native + 36) != (_DWORD)v88)
      goto LABEL_141;
    v93 = *(_QWORD *)(*(_QWORD *)(isUniquelyReferenced_nonNull_native + 56) + 8 * v9);
    if (*(_BYTE *)(v93 + 134) == 1)
    {
      swift_retain();
    }
    else
    {
      v131 = v9;
      v94 = *(_DWORD *)(v93 + 128);
      v95 = *((_DWORD *)v2 + 64);
      swift_retain();
      if (v94 != v95)
      {
        v96 = swift_retain();
        MEMORY[0x23B7C61A8](v96);
        if (*(_QWORD *)((v140 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v140 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        --v90;
        v97 = *(_QWORD *)(v93 + 32);
        swift_beginAccess();
        v98 = swift_isUniquelyReferenced_nonNull_native();
        v139 = (_QWORD *)*v129;
        *v129 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(1, v97, v98);
        *v129 = v139;
        swift_bridgeObjectRelease();
        swift_endAccess();
        isUniquelyReferenced_nonNull_native = *v134;
        v89 = 1 << *(_BYTE *)(*v134 + 32);
      }
      v9 = v131;
    }
    if ((uint64_t)v9 >= v89)
      goto LABEL_142;
    v99 = isUniquelyReferenced_nonNull_native + 64;
    v100 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 64 + 8 * v91);
    if ((v100 & v92) == 0)
      goto LABEL_143;
    if (*(_DWORD *)(isUniquelyReferenced_nonNull_native + 36) != (_DWORD)v88)
      goto LABEL_144;
    v101 = v9;
    v102 = v100 & (-2 << (v9 & 0x3F));
    if (v102)
    {
      swift_release();
      v9 = __clz(__rbit64(v102)) | v101 & 0xFFFFFFFFFFFFFFC0;
      goto LABEL_105;
    }
    v103 = v91 + 1;
    v104 = (unint64_t)(v89 + 63) >> 6;
    if (v91 + 1 >= v104)
      goto LABEL_104;
    v105 = v101;
    v106 = *(_QWORD *)(v99 + 8 * v103);
    if (!v106)
    {
      v103 = v91 + 2;
      if (v91 + 2 >= v104)
        goto LABEL_104;
      v106 = *(_QWORD *)(v99 + 8 * v103);
      if (!v106)
      {
        while (v104 - 3 != v91)
        {
          v106 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 88 + 8 * v91++);
          if (v106)
          {
            outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v105, v88, 0);
            swift_release();
            v103 = v91 + 2;
            goto LABEL_97;
          }
        }
        outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v105, v88, 0);
LABEL_104:
        swift_release();
        v9 = v89;
        goto LABEL_105;
      }
    }
    swift_release();
LABEL_97:
    v9 = __clz(__rbit64(v106)) | (v103 << 6);
LABEL_105:
    v51 = v90;
    if (!v90)
      break;
    if (v127 != (_DWORD)v88)
      goto LABEL_145;
    v88 = v130;
    if (v9 == v137)
    {
      v131 = v137;
      goto LABEL_110;
    }
  }
  v131 = v9;
LABEL_110:
  v9 = v140;
LABEL_111:
  isUniquelyReferenced_nonNull_native = v9 >> 62;
  if (v9 >> 62)
    goto LABEL_152;
  if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_113:
    v107 = 0;
    v108 = v9 & 0xC000000000000001;
    v124 = isUniquelyReferenced_nonNull_native;
    do
    {
      if (v108)
      {
        v110 = MEMORY[0x23B7C6D9C](v107, v9);
        v111 = v107 + 1;
        if (__OFADD__(v107, 1))
          goto LABEL_137;
      }
      else
      {
        if (v107 >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_146;
        v110 = *(_QWORD *)(v9 + 8 * v107 + 32);
        swift_retain();
        v111 = v107 + 1;
        if (__OFADD__(v107, 1))
          goto LABEL_137;
      }
      AGSubgraphApply();
      AGSubgraphRemoveChild();
      *(_WORD *)(v110 + 133) = 256;
      swift_beginAccess();
      v112 = *(_DWORD *)(v110 + 24) - 1;
      *(_DWORD *)(v110 + 24) = v112;
      if (!v112)
      {
        Strong = swift_weakLoadStrong();
        if (Strong)
        {
          v114 = Strong;
          swift_beginAccess();
          v115 = *(_QWORD *)(v114 + 216);
          if (*(_QWORD *)(v115 + 16)
            && (v116 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(v110 + 32)), (v117 & 1) != 0))
          {
            v118 = v116;
            v119 = *(_DWORD *)(v115 + 36);
            swift_beginAccess();
            specialized Dictionary._Variant.remove(at:)(&v138, v118, v119);
            swift_endAccess();
            swift_release();
            swift_release();
          }
          else
          {
            swift_retain();
            v120 = swift_bridgeObjectRetain();
            v121 = specialized _NativeDictionary.filter(_:)(v120, v110);
            swift_bridgeObjectRelease();
            *(_QWORD *)(v114 + 216) = v121;
            swift_release();
            swift_bridgeObjectRelease();
          }
          isUniquelyReferenced_nonNull_native = v124;
        }
        IsValid = AGSubgraphIsValid();
        v108 = v9 & 0xC000000000000001;
        if ((IsValid & 1) != 0)
        {
          MEMORY[0x24BDAC7A8](IsValid);
          AGSubgraphApply();
          AGSubgraphInvalidate();
        }
      }
      swift_release();
      if (isUniquelyReferenced_nonNull_native)
      {
        swift_bridgeObjectRetain();
        v109 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v109 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      ++v107;
    }
    while (v111 != v109);
  }
LABEL_153:
  swift_bridgeObjectRelease();
  outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v131, v130, 0);
LABEL_154:
  if ((*((_BYTE *)v2 + 260) & 1) == 0)
    v2[30] = 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)v132 = v142;
  swift_bridgeObjectRelease();
LABEL_157:
  *((_BYTE *)v2 + 260) = 0;
}

uint64_t specialized ForEachState.evictItems(seed:)(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t Strong;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t IsValid;
  BOOL *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[40];
  _BYTE v44[40];
  _BYTE v45[40];
  unint64_t v46;

  if (*(_DWORD *)(v1 + 304) == (_DWORD)result || *(_BYTE *)(v1 + 308) != 1)
    return result;
  *(_DWORD *)(v1 + 304) = result;
  v46 = MEMORY[0x24BEE4AF8];
  v2 = v1 + 256;
  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 256);
  result = specialized Dictionary.startIndex.getter(v3);
  if ((v5 & 1) != 0)
    goto LABEL_69;
  v6 = result;
  v7 = v4;
  v38 = (BOOL *)(v1 + 308);
  v41 = 1 << *(_BYTE *)(v3 + 32);
  v40 = *(_DWORD *)(v3 + 36);
  v39 = v4;
  v42 = 64;
  v8 = v4;
  do
  {
    if (v7 != v40)
    {
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
      goto LABEL_65;
    }
    if (v6 == v41)
      goto LABEL_40;
    if ((v6 & 0x8000000000000000) != 0)
      goto LABEL_59;
    v9 = *(_QWORD *)v2;
    if ((uint64_t)v6 >= 1 << *(_BYTE *)(*(_QWORD *)v2 + 32))
      goto LABEL_59;
    v10 = v6 >> 6;
    if ((*(_QWORD *)(v9 + 8 * (v6 >> 6) + 64) & (1 << v6)) == 0)
      goto LABEL_60;
    if (*(_DWORD *)(v9 + 36) != (_DWORD)v8)
      goto LABEL_61;
    v7 = v8;
    outlined init with copy of AnyHashable(*(_QWORD *)(v9 + 48) + 40 * v6, (uint64_t)v45);
    v11 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v6);
    if ((*(_BYTE *)(v11 + 166) & 1) != 0)
      goto LABEL_20;
    if (*(_BYTE *)(v11 + 165) != 1)
    {
      --*(_BYTE *)(v11 + 165);
LABEL_20:
      swift_retain();
      goto LABEL_21;
    }
    swift_beginAccess();
    v12 = *(_DWORD *)(v11 + 24);
    swift_retain();
    if (v12 == 1)
    {
      v13 = swift_retain();
      MEMORY[0x23B7C61A8](v13);
      if (*(_QWORD *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      outlined init with copy of AnyHashable((uint64_t)v45, (uint64_t)v43);
      swift_beginAccess();
      specialized Set._Variant.insert(_:)((uint64_t)v44, (uint64_t)v43);
      swift_endAccess();
      outlined destroy of AnyHashable((uint64_t)v44);
      --v42;
    }
LABEL_21:
    v14 = *(_QWORD *)v2;
    v15 = 1 << *(_BYTE *)(*(_QWORD *)v2 + 32);
    if ((uint64_t)v6 >= v15)
      goto LABEL_62;
    v16 = v14 + 64;
    v17 = *(_QWORD *)(v14 + 64 + 8 * v10);
    if ((v17 & (1 << v6)) == 0)
      goto LABEL_63;
    if (*(_DWORD *)(v14 + 36) != (_DWORD)v8)
      goto LABEL_64;
    v18 = v17 & (-2 << (v6 & 0x3F));
    if (v18)
    {
      swift_release();
      v6 = __clz(__rbit64(v18)) | v6 & 0xFFFFFFFFFFFFFFC0;
      goto LABEL_6;
    }
    v19 = v10 + 1;
    v20 = (unint64_t)(v15 + 63) >> 6;
    if (v10 + 1 >= v20)
      goto LABEL_38;
    v21 = *(_QWORD *)(v16 + 8 * v19);
    if (!v21)
    {
      v19 = v10 + 2;
      if (v10 + 2 >= v20)
        goto LABEL_38;
      v21 = *(_QWORD *)(v16 + 8 * v19);
      if (!v21)
      {
        v19 = v10 + 3;
        if (v10 + 3 >= v20)
          goto LABEL_38;
        v21 = *(_QWORD *)(v16 + 8 * v19);
        if (!v21)
        {
          v22 = v14 + 96;
          while (v20 - 4 != v10)
          {
            v21 = *(_QWORD *)(v22 + 8 * v10++);
            if (v21)
            {
              outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v6, v8, 0);
              swift_release();
              v19 = v10 + 3;
              goto LABEL_28;
            }
          }
          outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v6, v8, 0);
LABEL_38:
          swift_release();
          v6 = v15;
          goto LABEL_6;
        }
      }
    }
    swift_release();
LABEL_28:
    v6 = __clz(__rbit64(v21)) | (v19 << 6);
LABEL_6:
    result = outlined destroy of AnyHashable((uint64_t)v45);
    v8 = v39;
  }
  while (v42 > 0);
  v41 = v6;
  v8 = v39;
LABEL_40:
  v2 = v46;
  if (v46 >> 62)
  {
LABEL_65:
    swift_bridgeObjectRetain();
    v23 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v23)
      goto LABEL_66;
LABEL_42:
    if (v23 >= 1)
    {
      v24 = 0;
      v25 = v2 & 0xC000000000000001;
      while (1)
      {
        if (v25)
        {
          v26 = MEMORY[0x23B7C6D9C](v24, v2);
        }
        else
        {
          v26 = *(_QWORD *)(v2 + 8 * v24 + 32);
          swift_retain();
        }
        AGSubgraphApply();
        AGSubgraphRemoveChild();
        *(_WORD *)(v26 + 165) = 256;
        swift_beginAccess();
        v27 = *(_DWORD *)(v26 + 24) - 1;
        *(_DWORD *)(v26 + 24) = v27;
        if (v27)
          goto LABEL_44;
        Strong = swift_weakLoadStrong();
        if (Strong)
          break;
LABEL_56:
        IsValid = AGSubgraphIsValid();
        if ((IsValid & 1) != 0)
        {
          MEMORY[0x24BDAC7A8](IsValid);
          AGSubgraphApply();
          AGSubgraphInvalidate();
        }
LABEL_44:
        ++v24;
        swift_release();
        if (v23 == v24)
          goto LABEL_66;
      }
      v29 = Strong;
      swift_beginAccess();
      v30 = *(_QWORD *)(v29 + 256);
      if (*(_QWORD *)(v30 + 16))
      {
        swift_bridgeObjectRetain();
        v31 = specialized __RawDictionaryStorage.find<A>(_:)(v26 + 32);
        if ((v32 & 1) != 0)
        {
          v33 = v31;
          v34 = *(_DWORD *)(v30 + 36);
          swift_bridgeObjectRelease();
          swift_beginAccess();
          specialized Dictionary._Variant.remove(at:)((uint64_t)v45, v33, v34, 0);
          swift_endAccess();
          swift_release();
          swift_release();
          outlined destroy of AnyHashable((uint64_t)v45);
LABEL_55:
          v25 = v2 & 0xC000000000000001;
          goto LABEL_56;
        }
        swift_bridgeObjectRelease();
      }
      swift_retain();
      v35 = swift_bridgeObjectRetain();
      v36 = specialized _NativeDictionary.filter(_:)(v35, v26);
      swift_bridgeObjectRelease();
      swift_release();
      *(_QWORD *)(v29 + 256) = v36;
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_55;
    }
    __break(1u);
LABEL_69:
    __break(1u);
    return result;
  }
  v23 = *(_QWORD *)((v46 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v23)
    goto LABEL_42;
LABEL_66:
  swift_bridgeObjectRelease();
  result = outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v41, v8, 0);
  *v38 = v42 == 0;
  return result;
}

{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t Strong;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t *v43;
  uint64_t IsValid;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53[3];
  unint64_t v54;

  if (*(_DWORD *)(v1 + 264) == (_DWORD)result || (*(_BYTE *)(v1 + 268) & 1) == 0)
    return result;
  *(_DWORD *)(v1 + 264) = result;
  v54 = MEMORY[0x24BEE4AF8];
  v4 = v1 + 216;
  swift_beginAccess();
  v5 = *(_QWORD *)(v1 + 216);
  result = specialized Dictionary.startIndex.getter(v5);
  if ((v7 & 1) != 0)
  {
    __break(1u);
    return result;
  }
  v8 = v6;
  v9 = *(unsigned int *)(v5 + 36);
  if ((_DWORD)v9 != (_DWORD)v6)
  {
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  v51 = 1 << *(_BYTE *)(v5 + 32);
  v46 = v1;
  if (result == v51)
  {
    v2 = MEMORY[0x24BEE4AF8];
    v50 = 64;
    v49 = v6;
    v1 = result;
    goto LABEL_43;
  }
  v49 = v6;
  v2 = 1;
  v50 = 64;
  v1 = result;
  do
  {
    if ((v1 & 0x8000000000000000) != 0
      || (v10 = *(_QWORD *)v4, (uint64_t)v1 >= 1 << *(_BYTE *)(*(_QWORD *)v4 + 32)))
    {
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
      goto LABEL_74;
    }
    v11 = v1 >> 6;
    v12 = 1 << v1;
    if ((*(_QWORD *)(v10 + 8 * (v1 >> 6) + 64) & (1 << v1)) == 0)
      goto LABEL_67;
    if (*(_DWORD *)(v10 + 36) != (_DWORD)v8)
      goto LABEL_68;
    v3 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v1);
    if (*(_BYTE *)(v3 + 134) == 1)
      goto LABEL_20;
    if (*(_BYTE *)(v3 + 133) != 1)
    {
      --*(_BYTE *)(v3 + 133);
LABEL_20:
      swift_retain();
      goto LABEL_21;
    }
    v13 = v9;
    v14 = v1;
    v15 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v1);
    swift_beginAccess();
    v16 = *(_DWORD *)(v3 + 24);
    swift_retain();
    if (v16 == 1)
    {
      v17 = swift_retain();
      MEMORY[0x23B7C61A8](v17);
      if (*(_QWORD *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_beginAccess();
      specialized Set._Variant.insert(_:)(v53, v15);
      swift_endAccess();
      --v50;
    }
    v1 = v14;
    v9 = v13;
LABEL_21:
    v18 = *(_QWORD *)v4;
    v19 = 1 << *(_BYTE *)(*(_QWORD *)v4 + 32);
    if ((uint64_t)v1 >= v19)
      goto LABEL_69;
    v20 = v18 + 64;
    v21 = *(_QWORD *)(v18 + 64 + 8 * v11);
    if ((v21 & v12) == 0)
      goto LABEL_70;
    if (*(_DWORD *)(v18 + 36) != (_DWORD)v8)
      goto LABEL_71;
    v22 = v1;
    v23 = v21 & (-2 << (v1 & 0x3F));
    if (v23)
    {
      swift_release();
      v1 = __clz(__rbit64(v23)) | v22 & 0xFFFFFFFFFFFFFFC0;
      goto LABEL_38;
    }
    v24 = v22;
    v25 = v11 + 1;
    v26 = (unint64_t)(v19 + 63) >> 6;
    if (v11 + 1 >= v26)
      goto LABEL_37;
    v27 = *(_QWORD *)(v20 + 8 * v25);
    if (!v27)
    {
      v25 = v11 + 2;
      if (v11 + 2 >= v26)
        goto LABEL_37;
      v27 = *(_QWORD *)(v20 + 8 * v25);
      if (!v27)
      {
        v28 = v18 + 88;
        while (v26 - 3 != v11)
        {
          v27 = *(_QWORD *)(v28 + 8 * v11++);
          if (v27)
          {
            outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v24, v8, 0);
            swift_release();
            v25 = v11 + 2;
            goto LABEL_29;
          }
        }
        outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v24, v8, 0);
LABEL_37:
        swift_release();
        v1 = v19;
        goto LABEL_38;
      }
    }
    swift_release();
LABEL_29:
    v1 = __clz(__rbit64(v27)) | (v25 << 6);
LABEL_38:
    if (v50 < 1)
      goto LABEL_42;
    if ((_DWORD)v9 != (_DWORD)v8)
      goto LABEL_72;
    v8 = v49;
  }
  while (v1 != v51);
  v50 = 64;
  v1 = v51;
LABEL_42:
  v2 = v54;
LABEL_43:
  v3 = v2 >> 62;
  if (v2 >> 62)
  {
LABEL_75:
    swift_bridgeObjectRetain();
    v45 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v45)
      goto LABEL_45;
    goto LABEL_76;
  }
  if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_45:
    v29 = 0;
    v30 = v2 & 0xC000000000000001;
    v48 = v1;
    v47 = v3;
    do
    {
      if (v30)
      {
        v32 = MEMORY[0x23B7C6D9C](v29, v2);
        v33 = v29 + 1;
        if (__OFADD__(v29, 1))
          goto LABEL_65;
      }
      else
      {
        if (v29 >= *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_73;
        v32 = *(_QWORD *)(v2 + 8 * v29 + 32);
        swift_retain();
        v33 = v29 + 1;
        if (__OFADD__(v29, 1))
        {
LABEL_65:
          __break(1u);
          goto LABEL_66;
        }
      }
      AGSubgraphApply();
      AGSubgraphRemoveChild();
      *(_WORD *)(v32 + 133) = 256;
      swift_beginAccess();
      v34 = *(_DWORD *)(v32 + 24) - 1;
      *(_DWORD *)(v32 + 24) = v34;
      if (!v34)
      {
        Strong = swift_weakLoadStrong();
        if (Strong)
        {
          v36 = Strong;
          swift_beginAccess();
          v37 = *(_QWORD *)(v36 + 216);
          if (*(_QWORD *)(v37 + 16)
            && (v38 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(v32 + 32)), (v39 & 1) != 0))
          {
            v40 = v38;
            v41 = *(_DWORD *)(v37 + 36);
            swift_beginAccess();
            specialized Dictionary._Variant.remove(at:)(&v52, v40, v41);
            swift_endAccess();
            swift_release();
            swift_release();
          }
          else
          {
            swift_retain();
            v42 = swift_bridgeObjectRetain();
            v43 = specialized _NativeDictionary.filter(_:)(v42, v32);
            swift_bridgeObjectRelease();
            *(_QWORD *)(v36 + 216) = v43;
            swift_release();
            swift_bridgeObjectRelease();
          }
          v1 = v48;
          v3 = v47;
          v30 = v2 & 0xC000000000000001;
        }
        IsValid = AGSubgraphIsValid();
        if ((IsValid & 1) != 0)
        {
          MEMORY[0x24BDAC7A8](IsValid);
          AGSubgraphApply();
          v1 = v48;
          AGSubgraphInvalidate();
        }
      }
      swift_release();
      if (v3)
      {
        swift_bridgeObjectRetain();
        v31 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v31 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      ++v29;
    }
    while (v33 != v31);
  }
LABEL_76:
  swift_bridgeObjectRelease();
  result = outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v1, v49, 0);
  *(_BYTE *)(v46 + 268) = v50 == 0;
  return result;
}

char *specialized ForEachState.Evictor.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  char *result;
  unsigned int *Value;

  result = (char *)AGGraphGetWeakValue();
  if (!result)
  {
    if (one-time initialization token for evictByDefault != -1)
      swift_once();
    result = &static ForEachEvictionInput.evictByDefault;
  }
  if (*result == 1)
  {
    Value = (unsigned int *)AGGraphGetValue();
    return (char *)a4(*Value);
  }
  return result;
}

uint64_t protocol witness for static UnaryLayout.makeViewImpl(modifier:inputs:body:) in conformance SpacingLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, __int128 *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t closure #1 in Attribute.init<A>(_:)@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  uint64_t result;

  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  return result;
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(unsigned int *a1)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(uint64_t *a1)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(unsigned int *a1, uint64_t a2)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(_QWORD *a1, uint64_t a2)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(__int128 *a1, uint64_t a2)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(_QWORD *a1)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

void *(*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())()
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(unsigned int *a1)
{
  uint64_t v1;
  _QWORD v3[2];

  v3[1] = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v3[0] = *(_QWORD *)AGGraphGetValue();
  swift_retain();
  specialized Attribute.syncMainIfReferences<A>(do:)(v1, (uint64_t)v3);
  AGGraphSetOutputValue();
  return swift_release();
}

{
  _QWORD v2[5];

  v2[4] = *MEMORY[0x24BDAC8D0];
  ViewListArchivedAnimation.value.getter(*a1, (uint64_t)v2);
  AGGraphSetOutputValue();
  return swift_release();
}

{
  uint64_t v1;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6[3];

  v6[2] = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  Value = (uint64_t *)AGGraphGetValue();
  v4 = *Value;
  v3 = Value[1];
  v6[0] = v4;
  v6[1] = v3;
  swift_retain();
  swift_retain();
  specialized static SystemColorSchemeModifier.makeEnvironment(modifier:environment:)(v1, v6);
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t *a1)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  int *v4;
  int v5;
  uint64_t Value;
  unint64_t v7;
  unint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  uint64_t v13;
  __int128 v14;
  _BYTE v15[28];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v2 = *(_QWORD *)(*a1 + 16);
  if (v2)
  {
    v13 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
    v3 = v13;
    v4 = (int *)(v1 + 32);
    do
    {
      v5 = *v4++;
      Value = AGGraphGetValue();
      outlined init with copy of AnyTrackedValue(Value, (uint64_t)&v14);
      *(_DWORD *)&v15[24] = v5;
      v8 = *(_QWORD *)(v13 + 16);
      v7 = *(_QWORD *)(v13 + 24);
      if (v8 >= v7 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
      *(_QWORD *)(v13 + 16) = v8 + 1;
      v9 = (_OWORD *)(v13 + 48 * v8);
      v10 = v14;
      v11 = *(_OWORD *)v15;
      *(_OWORD *)((char *)v9 + 60) = *(_OWORD *)&v15[12];
      v9[2] = v10;
      v9[3] = v11;
      --v2;
    }
    while (v2);
  }
  else
  {
    swift_bridgeObjectRetain();
    v3 = MEMORY[0x24BEE4AF8];
  }
  *(_QWORD *)&v15[8] = &type metadata for _ViewList_Group;
  *(_QWORD *)&v15[16] = &protocol witness table for _ViewList_Group;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v14 = v3;
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  AGGraphSetOutputValue();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
}

{
  _QWORD v2[2];

  v2[1] = *MEMORY[0x24BDAC8D0];
  _PreferenceWritingModifier<>.ColorSchemeTrait.value.getter(*a1, v2);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  specialized PreferenceTransform.value.getter(*a1);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x24BEE1768], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  return AGGraphSetOutputValue();
}

{
  specialized EventFilterEvents.value.getter(*a1);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  specialized LayoutChildSeed.value.getter(*a1);
  return AGGraphSetOutputValue();
}

{
  specialized PreferenceTransform.value.getter(*a1);
  _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for [ScrollStateRequest], (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest, (uint64_t)&protocol descriptor for ScrollStateRequest, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  double v2[5];

  v2[4] = *(double *)MEMORY[0x24BDAC8D0];
  CanvasSymbols.SymbolSize.value.getter(*a1, v2);
  return AGGraphSetOutputValue();
}

{
  _QWORD v2[8];

  v2[7] = *MEMORY[0x24BDAC8D0];
  specialized SecondaryChild.value.getter(*a1, v2);
  type metadata accessor for ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>();
  AGGraphSetOutputValue();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(unsigned int *a1, uint64_t a2)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD))EmptyViewTrait.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD))SectionFooterTrait.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD))SectionedTrait.value.getter);
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(_QWORD *a1, uint64_t a2)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD))specialized UpdateEnvironment.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD))specialized _ForegroundStyleModifier2.ForegroundStyleEnvironment.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD))StyledTextContentView.ArchivedTransitionEnvironment.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD, _QWORD))ChildTransaction.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD))specialized UnaryChildGeometry.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD))specialized UnaryChildGeometry.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD))_ContentTransitionModifier.ChildEnvironment.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD))specialized UnaryChildGeometry.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD, _QWORD))ChildValueTransaction.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD))specialized UnaryChildGeometry.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD))specialized UnaryChildGeometry.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD))specialized LayoutChildEvents.value.getter, (void (*)(_QWORD))type metadata accessor for [EventID : EventType]);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD))specialized PreferenceTransform.value.getter, (void (*)(_QWORD))type metadata accessor for [ScrollTargetRole.Role : [ScrollableCollection]]);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD))specialized UnaryChildGeometry.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD))specialized UnaryChildGeometry.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD))specialized UnaryChildGeometry.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD))specialized UnaryChildGeometry.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD))specialized UnaryChildGeometry.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD))specialized UnaryChildGeometry.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD))specialized UnaryPositionAwareChildGeometry.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD))specialized UnaryPositionAwareChildGeometry.value.getter);
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  AGGraphGetValue();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  swift_release();
  type metadata accessor for MutableBox<CachedEnvironment>(0, a3, a4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  AGGraphSetOutputValue();
  return swift_release();
}

{
  _OWORD v5[9];
  _OWORD v6[9];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  specialized GestureDebug.Value.value.getter(a3, a4, (uint64_t)v5);
  AGGraphSetOutputValue();
  v6[6] = v5[6];
  v6[7] = v5[7];
  v6[8] = v5[8];
  v6[2] = v5[2];
  v6[3] = v5[3];
  v6[4] = v5[4];
  v6[5] = v5[5];
  v6[0] = v5[0];
  v6[1] = v5[1];
  return outlined release of GestureDebug.Data((uint64_t)v6);
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(__int128 *a1, uint64_t a2)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized RendererEffectDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized RendererEffectDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized RendererEffectDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t)&type metadata for OpacityRendererEffect, (void (*)(uint64_t *__return_ptr, uint64_t))specialized RendererEffectDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized RendererEffectDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t)&type metadata for _OpacityEffect, (void (*)(uint64_t *__return_ptr, uint64_t))specialized RendererEffectDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized RendererEffectDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized RendererEffectDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t)&type metadata for _PremultipliedColorMatrixEffect, 1);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized RendererEffectDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized RendererEffectDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, 1, (void (*)(uint64_t *__return_ptr, uint64_t))specialized RendererEffectDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized RendererEffectDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized RendererEffectDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized RendererEffectDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized RendererEffectDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t)&type metadata for _HueRotationEffect, 6);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t)&type metadata for _ColorMatrixEffect, 0);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, 2, (void (*)(uint64_t *__return_ptr, uint64_t))specialized RendererEffectDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t)&type metadata for _SaturationEffect, 7);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t)&type metadata for _BrightnessEffect, 8);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized RendererEffectDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized RendererEffectDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t)&type metadata for _GrayscaleEffect, 10);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized RendererEffectDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t)&type metadata for _ContrastEffect, 9);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized RendererEffectDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized RendererEffectDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized RendererEffectDisplayList.value.getter);
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(__int128 *a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  __int128 v3;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = a1[1];
  v6 = *a1;
  v7 = v3;
  v8 = a1[2];
  a3(&v5);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(_QWORD *a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, _QWORD))
{
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  a3(v4, *a1);
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(_QWORD *a1)
{
  _BYTE v2[48];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  MatchedFrame.value.getter(*a1, a1[2], (uint64_t)v2);
  return AGGraphSetOutputValue();
}

{
  uint64_t v2;
  uint64_t v3;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = *a1;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = partial apply for closure #1 in ScrollTargetRole.SetLayout.value.getter;
  *(_QWORD *)(v3 + 24) = v2;
  type metadata accessor for (_:)();
  AGGraphSetOutputValue();
  return swift_release();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(__int128 *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t))
{
  __int128 v4;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = a1[1];
  v7 = *a1;
  v8 = v4;
  v9 = a1[2];
  a4(&v6, a3);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(_QWORD *a1, uint64_t a2, void (*a3)(_QWORD, _QWORD))
{
  a3(*a1, a1[1]);
  AGGraphSetOutputValue();
  return swift_release();
}

void *specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)()
{
  void *v1[2];
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  TextSuffixModifier.ResolvedTextSuffixFilter.value.getter((uint64_t)v1);
  AGGraphSetOutputValue();
  return outlined consume of ResolvedTextSuffix(v1[0], (uint64_t)v1[1], v2, v3, v4, v5);
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, unint64_t))
{
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  a3(v4, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(unsigned int *)(a1 + 24) | ((unint64_t)*(unsigned __int8 *)(a1 + 28) << 32));
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD))
{
  _QWORD v4[6];

  v4[5] = *MEMORY[0x24BDAC8D0];
  a3(v4, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned int *)(a1 + 16));
  AGGraphSetOutputValue();
  return swift_release();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr))
{
  _QWORD v4[2];

  v4[1] = *MEMORY[0x24BDAC8D0];
  a3(v4);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(unsigned int *a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, _QWORD))
{
  _QWORD v4[2];

  v4[1] = *MEMORY[0x24BDAC8D0];
  a3(v4, *a1);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(_QWORD *a1, uint64_t a2, void (*a3)(_QWORD), void (*a4)(_QWORD))
{
  a3(*a1);
  a4(0);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(_QWORD *a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, _QWORD, _QWORD))
{
  _QWORD v4[9];

  v4[8] = *MEMORY[0x24BDAC8D0];
  a3(v4, *a1, a1[1]);
  AGGraphSetOutputValue();
  return swift_release();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(_QWORD *a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD v4[9];

  v4[8] = *MEMORY[0x24BDAC8D0];
  a3(v4, *a1, a1[1], a1[2], a1[3]);
  AGGraphSetOutputValue();
  return swift_release();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v4;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = a1[1];
  v7 = *a1;
  v8 = v4;
  v9 = a1[2];
  specialized RendererEffectDisplayList.value.getter(a4, (uint64_t)&v6);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(__int128 *a1, uint64_t a2, uint64_t a3, char a4)
{
  __int128 v4;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = a1[1];
  v7 = *a1;
  v8 = v4;
  v9 = a1[2];
  specialized RendererEffectDisplayList.value.getter(a4, (uint64_t)&v6);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(void))
{
  AGGraphGetValue();
  AGGraphGetValue();
  type metadata accessor for FontBox<Font.SystemProvider>(0, a4, a5, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  return AGGraphSetOutputValue();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(unsigned int *)(a1 + 16);
  v6 = swift_retain();
  specialized ForEachState.Evictor.value.getter(v6, v4, v5, a3);
  swift_release();
  return AGGraphSetOutputValue();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2, void (*a3)(_OWORD *__return_ptr))
{
  _OWORD v4[9];
  _OWORD v5[9];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  a3(v4);
  AGGraphSetOutputValue();
  v5[6] = v4[6];
  v5[7] = v4[7];
  v5[8] = v4[8];
  v5[2] = v4[2];
  v5[3] = v4[3];
  v5[4] = v4[4];
  v5[5] = v4[5];
  v5[0] = v4[0];
  v5[1] = v4[1];
  return outlined release of GestureDebug.Data((uint64_t)v5);
}

uint64_t implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE v20[16];
  _BYTE v21[16];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = &v20[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = *(_QWORD *)(v12 - 8);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = &v20[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, double))(v9 + 16))(v11, v15);
  dispatch thunk of Rule.value.getter();
  (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, a5);
  v22 = a5;
  v23 = a6;
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v17, (uint64_t)partial apply for closure #1 in static Rule._updateDefault(_:), (uint64_t)v21, a4, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v18);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v13 + 8))(v17, a4);
}

uint64_t type metadata accessor for UnaryLayoutComputer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UnaryLayoutComputer);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_4@<X0>(_DWORD *a1@<X8>)
{
  return partial apply for closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t partial apply for closure #1 in static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t result;
  int v11;
  int v12;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(_DWORD *)(v4 + 44);
  v9 = *MEMORY[0x24BE096C0];
  result = type metadata accessor for UnaryLayoutComputer(0, v6, v7, a4);
  if (v9 == v8)
    v11 = 0;
  else
    v11 = v8;
  if (v9 == v8)
    v12 = v9;
  else
    v12 = v11;
  *(_DWORD *)(a1 + 8) = v12;
  return result;
}

{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t result;
  int v11;
  int v12;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(_DWORD *)(v4 + 44);
  v9 = *MEMORY[0x24BE096C0];
  result = type metadata accessor for UnaryPositionAwareChildGeometry(0, v6, v7, a4);
  if (v9 == v8)
    v11 = 0;
  else
    v11 = v8;
  if (v9 == v8)
    v12 = v9;
  else
    v12 = v11;
  *(_DWORD *)(a1 + 24) = v12;
  return result;
}

uint64_t _sSo11AGAttributea14AttributeGraphE10mutateBody2as12invalidating_yxm_SbyxzXEtlFySvXEfU_TA_0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t partial apply for closure #2 in static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t result;
  int v11;
  int v12;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(_DWORD *)(v4 + 44);
  v9 = *MEMORY[0x24BE096C0];
  result = type metadata accessor for UnaryChildGeometry(0, v6, v7, a4);
  if (v9 == v8)
    v11 = 0;
  else
    v11 = v8;
  if (v9 == v8)
    v12 = v9;
  else
    v12 = v11;
  *(_DWORD *)(a1 + 12) = v12;
  return result;
}

uint64_t type metadata accessor for UnaryChildGeometry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UnaryChildGeometry);
}

uint64_t sub_234E42A1C(char *a1)
{
  char v2;

  v2 = *a1;
  return EnvironmentValues.layoutDirection.setter(&v2);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_9@<X0>(_DWORD *a1@<X8>)
{
  return partial apply for closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t type metadata accessor for UnaryPositionAwareChildGeometry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UnaryPositionAwareChildGeometry);
}

uint64_t type metadata accessor for UnaryPositionAwareLayoutComputer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UnaryPositionAwareLayoutComputer);
}

unint64_t instantiation function for generic protocol witness table for LayoutPositionQuery(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type LayoutPositionQuery and conformance LayoutPositionQuery();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for LayoutPositionQuery()
{
  return &type metadata for LayoutPositionQuery;
}

__n128 __swift_memcpy32_4(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t instantiation function for generic protocol witness table for UnaryLayoutComputer<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnaryLayoutComputer<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for UnaryChildGeometry<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnaryChildGeometry<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for UnaryPositionAwareChildGeometry<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnaryPositionAwareChildGeometry<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for UnaryPositionAwareLayoutComputer<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UnaryPositionAwareLayoutComputer<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in UnaryPositionAwareChildGeometry<A>()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for _AttributeBody in UnaryPositionAwareLayoutComputer<A>()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for _AttributeBody in UnaryChildGeometry<A>()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for _AttributeBody in UnaryLayoutComputer<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t type metadata accessor for UnaryLayoutEngine(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UnaryLayoutEngine);
}

uint64_t partial apply for closure #1 in UnaryChildGeometry.value.getter@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  _OWORD v9[2];

  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  v6 = *(_OWORD *)(v2 + 48);
  v9[0] = *(_OWORD *)(v2 + 32);
  v9[1] = v6;
  v7 = type metadata accessor for UnaryLayoutEngine(0, v4, v5, a1);
  return UnaryLayoutEngine.childPlacement(at:)((uint64_t)v9, v7, a2);
}

unint64_t *specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  char v5;
  unint64_t v6;
  size_t v7;
  unint64_t *v8;
  void *v9;
  _QWORD v11[2];

  v4 = (unint64_t *)isStackAllocationSafe;
  v11[1] = *MEMORY[0x24BDAC8D0];
  v5 = *(_BYTE *)(isStackAllocationSafe + 32);
  v6 = (unint64_t)((1 << v5) + 63) >> 6;
  v7 = 8 * v6;
  if ((v5 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    bzero((char *)v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    v8 = specialized closure #1 in _NativeDictionary.filter(_:)((_QWORD *)((char *)v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, (uint64_t)v4, a2);
    if (v2)
      swift_willThrow();
    else
      v4 = v8;
    swift_release();
  }
  else
  {
    v9 = (void *)swift_slowAlloc();
    bzero(v9, v7);
    v4 = specialized closure #1 in _NativeDictionary.filter(_:)((unint64_t *)v9, v6, (uint64_t)v4, a2);
    MEMORY[0x23B7C9D54](v9, -1, -1);
    swift_release();
  }
  return v4;
}

uint64_t specialized Dictionary._Variant.remove(at:)(uint64_t a1, unint64_t a2, int a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v5 = v4;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    v16 = *v4;
    *v4 = 0x8000000000000000;
    specialized _NativeDictionary.copy()();
    *v4 = v16;
    result = swift_bridgeObjectRelease();
  }
  if ((a4 & 1) != 0)
    goto LABEL_12;
  if ((a2 & 0x8000000000000000) != 0 || (v11 = *v4, 1 << *(_BYTE *)(*v5 + 32) <= (uint64_t)a2))
  {
    __break(1u);
  }
  else if (((*(_QWORD *)(v11 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) != 0)
  {
    if (*(_DWORD *)(v11 + 36) == a3)
    {
      *v5 = 0x8000000000000000;
      v12 = *(_QWORD *)(v11 + 56);
      v13 = *(_QWORD *)(v11 + 48) + 40 * a2;
      v14 = *(_OWORD *)(v13 + 16);
      *(_OWORD *)a1 = *(_OWORD *)v13;
      *(_OWORD *)(a1 + 16) = v14;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(v13 + 32);
      v15 = *(_QWORD *)(v12 + 8 * a2);
      specialized _NativeDictionary._delete(at:)(a2, v11);
      *v5 = v11;
      swift_bridgeObjectRelease();
      return v15;
    }
    goto LABEL_11;
  }
  __break(1u);
LABEL_11:
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t specialized Dictionary._Variant.remove(at:)(_QWORD *a1, unint64_t a2, int a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = v3;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    v11 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeDictionary.copy()();
    *v3 = v11;
    result = swift_bridgeObjectRelease();
  }
  if ((a2 & 0x8000000000000000) != 0 || (v9 = *v3, 1 << *(_BYTE *)(*v4 + 32) <= (uint64_t)a2))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (((*(_QWORD *)(v9 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) == 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (*(_DWORD *)(v9 + 36) == a3)
  {
    *v4 = 0x8000000000000000;
    v10 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * a2);
    *a1 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * a2);
    specialized _NativeDictionary._delete(at:)(a2, v9);
    *v4 = v9;
    swift_bridgeObjectRelease();
    return v10;
  }
LABEL_10:
  __break(1u);
  return result;
}

__n128 specialized closure #1 in Attribute.syncMainIfReferences<A>(do:)(__n128 *a1, void (*a2)(_OWORD *__return_ptr, _OWORD *), uint64_t a3, _OWORD *a4)
{
  __int128 v5;
  unint64_t v6;
  __n128 result;
  __n128 v8;
  __n128 v9;
  __n128 v10;
  _OWORD v11[3];
  unint64_t v12;
  _OWORD v13[2];

  v5 = a4[1];
  v13[0] = *a4;
  v13[1] = v5;
  a2(v11, v13);
  v9 = (__n128)v11[1];
  v10 = (__n128)v11[0];
  v8 = (__n128)v11[2];
  v6 = v12;
  outlined consume of ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>?(a1->n128_u64[0], a1->n128_i64[1], a1[1].n128_i64[0]);
  *a1 = v10;
  a1[1] = v9;
  result = v8;
  a1[2] = v8;
  a1[3].n128_u64[0] = v6;
  return result;
}

uint64_t type metadata accessor for UnaryPositionAwareLayoutEngine(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UnaryPositionAwareLayoutEngine);
}

uint64_t partial apply for specialized closure #1 in UnaryChildGeometry.value.getter(uint64_t a1)
{
  return partial apply for specialized closure #1 in UnaryChildGeometry.value.getter(a1, (uint64_t (*)(double, double, double, double))specialized UnaryLayoutEngine.childPlacement(at:));
}

{
  return partial apply for specialized closure #1 in UnaryChildGeometry.value.getter(a1, (uint64_t (*)(double, double, double, double))specialized UnaryLayoutEngine.childPlacement(at:));
}

{
  return partial apply for specialized closure #1 in UnaryChildGeometry.value.getter(a1, (uint64_t (*)(double, double, double, double))specialized UnaryLayoutEngine.childPlacement(at:));
}

{
  return partial apply for specialized closure #1 in UnaryChildGeometry.value.getter(a1, (uint64_t (*)(double, double, double, double))specialized UnaryLayoutEngine.childPlacement(at:));
}

{
  return partial apply for specialized closure #1 in UnaryChildGeometry.value.getter(a1, (uint64_t (*)(double, double, double, double))specialized UnaryLayoutEngine.childPlacement(at:));
}

{
  return partial apply for specialized closure #1 in UnaryChildGeometry.value.getter(a1, (uint64_t (*)(double, double, double, double))specialized UnaryLayoutEngine.childPlacement(at:));
}

{
  return partial apply for specialized closure #1 in UnaryChildGeometry.value.getter(a1, (uint64_t (*)(double, double, double, double))specialized UnaryLayoutEngine.childPlacement(at:));
}

{
  return partial apply for specialized closure #1 in UnaryChildGeometry.value.getter(a1, (uint64_t (*)(double, double, double, double))specialized UnaryLayoutEngine.childPlacement(at:));
}

uint64_t partial apply for specialized closure #1 in static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t v1;

  return specialized closure #1 in static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for specialized closure #2 in static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t v1;

  return specialized closure #2 in static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t type metadata accessor for ShapeStylePair<AnyShapeStyle, AnyShapeStyle>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for ShapeStylePair<AnyShapeStyle, AnyShapeStyle>;
  if (!lazy cache variable for type metadata for ShapeStylePair<AnyShapeStyle, AnyShapeStyle>)
    type metadata accessor for ShapeStylePair();
  return result;
}

_QWORD *outlined retain of ResolvedTextSuffix(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6]);
  return a1;
}

uint64_t outlined copy of Text.Suffix.Storage(uint64_t result, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x8000000000000000) == 0)
  {
    outlined copy of Text.Storage(result, a2, a3 & 1);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t specialized UnaryChildGeometry.description.getter(int a1, int a2, Swift::Int a3, uint64_t a4, void *a5)
{
  uint64_t v7;
  Swift::String v8;

  _StringGuts.grow(_:)(a3);
  v7 = _typeName(_:qualified:)();
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = a4;
  v8._object = a5;
  String.append(_:)(v8);
  return v7;
}

uint64_t sub_234E43330()
{
  uint64_t v0;
  __int128 v2;
  __int128 v3;
  __int128 v4;

  v3 = *(_OWORD *)(v0 + 256);
  v4 = *(_OWORD *)(v0 + 272);
  v2 = *(_OWORD *)(v0 + 224);
  outlined consume of ArrayWith2Inline<GestureDebug.Data>.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), *(_OWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160),
    *(_QWORD *)(v0 + 168),
    *(_QWORD *)(v0 + 176),
    *(_QWORD *)(v0 + 184),
    *(_QWORD *)(v0 + 192),
    *(_QWORD *)(v0 + 200),
    *(_QWORD *)(v0 + 208),
    *(_QWORD *)(v0 + 216),
    v2,
    *((uint64_t *)&v2 + 1),
    *(_QWORD *)(v0 + 240),
    *(_QWORD *)(v0 + 248),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    *(_QWORD *)(v0 + 288),
    *(_QWORD *)(v0 + 296),
    *(_BYTE *)(v0 + 304));
  return swift_deallocObject();
}

uint64_t sub_234E433B8()
{
  uint64_t v0;

  outlined consume of GraphicsFilter(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(id *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_DWORD *)(v0 + 128), BYTE2(*(_DWORD *)(v0 + 128)));
  return swift_deallocObject();
}

uint64_t _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOSgWOg(uint64_t a1)
{
  unsigned int v1;

  v1 = *(_DWORD *)(a1 + 4);
  if (v1 > 0x80000000)
    return -v1;
  else
    return 0;
}

uint64_t outlined init with take of LayoutGestureBox.Child.DebugData(uint64_t a1, uint64_t a2)
{
  __swift_memcpy144_8(a2, a1);
  return a2;
}

uint64_t _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOg(uint64_t a1)
{
  return *(_QWORD *)(a1 + 136) >> 63;
}

uint64_t *outlined retain of LayoutGestureBox.Child.DebugData(uint64_t *a1)
{
  outlined copy of LayoutGestureBox.Child.DebugData(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17]);
  return a1;
}

uint64_t _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOj0_(uint64_t result)
{
  *(_QWORD *)(result + 136) &= ~0x8000000000000000;
  return result;
}

unint64_t *outlined release of LayoutGestureBox.Child.DebugData?(unint64_t *a1)
{
  outlined copy of LayoutGestureBox.Child.DebugData?(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], (uint64_t (*)(void))outlined consume of LayoutGestureBox.Child.DebugData);
  return a1;
}

uint64_t specialized LayoutGesture.childEvents(events:index:box:)(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  Swift::UInt v33;
  uint64_t v34;
  Swift::UInt v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t);
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  char v47;
  unint64_t v48;
  uint64_t v49;
  _BOOL8 v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  char v54;
  Swift::Int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v61;
  Swift::UInt *v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(__int128 *, uint64_t, uint64_t);
  uint64_t v69;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v71;
  uint64_t result;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80[2];
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  _QWORD v85[3];
  uint64_t v86;
  uint64_t v87;
  _QWORD v88[2];
  __int128 v89;
  _OWORD v90[2];
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  _OWORD v100[2];
  _QWORD v101[2];

  swift_beginAccess();
  if ((a2 & 0x8000000000000000) != 0)
  {
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v6 = *(_QWORD *)(a3 + 160);
  if (*(_QWORD *)(v6 + 16) <= a2)
    goto LABEL_67;
  v7 = (_OWORD *)(v6 + 208 * a2);
  v90[0] = v7[2];
  v8 = v7[3];
  v9 = v7[4];
  v10 = v7[6];
  v92 = v7[5];
  v93 = v10;
  v90[1] = v8;
  v91 = v9;
  v11 = v7[7];
  v12 = v7[8];
  v13 = v7[10];
  v96 = v7[9];
  v97 = v13;
  v94 = v11;
  v95 = v12;
  v14 = v7[11];
  v15 = v7[12];
  v16 = v7[13];
  *(_OWORD *)((char *)v100 + 12) = *(_OWORD *)((char *)v7 + 220);
  v99 = v15;
  v100[0] = v16;
  v98 = v14;
  v101[0] = *((_QWORD *)&v91 + 1);
  if (*(_QWORD *)(*((_QWORD *)&v91 + 1) + 16))
  {
    v74 = a1 + 64;
    v76 = *((_QWORD *)&v91 + 1);
    v17 = 1 << *(_BYTE *)(a1 + 32);
    if (v17 < 64)
      v18 = ~(-1 << v17);
    else
      v18 = -1;
    v19 = v18 & *(_QWORD *)(a1 + 64);
    v20 = *(_QWORD *)&v90[0];
    outlined retain of LayoutGestureBox.Child((uint64_t)v90);
    outlined retain of RadialGradient(v101);
    v21 = v17 + 63;
    v22 = v76;
    v75 = v76 + 56;
    v77 = v21 >> 6;
    v73 = (v21 >> 6) - 1;
    swift_bridgeObjectRetain();
    v79 = 0;
    v78 = MEMORY[0x24BEE4B00];
    while (!v19)
    {
      v30 = v79 + 1;
      if (__OFADD__(v79, 1))
        goto LABEL_64;
      if (v30 < v77)
      {
        v31 = *(_QWORD *)(v74 + 8 * v30);
        if (v31)
          goto LABEL_17;
        v32 = v79 + 2;
        ++v79;
        if (v30 + 1 < v77)
        {
          v31 = *(_QWORD *)(v74 + 8 * v32);
          if (v31)
            goto LABEL_20;
          v79 = v30 + 1;
          if (v30 + 2 < v77)
          {
            v31 = *(_QWORD *)(v74 + 8 * (v30 + 2));
            if (v31)
            {
              v30 += 2;
              goto LABEL_17;
            }
            v32 = v30 + 3;
            v79 = v30 + 2;
            if (v30 + 3 < v77)
            {
              v31 = *(_QWORD *)(v74 + 8 * v32);
              if (!v31)
              {
                while (1)
                {
                  v30 = v32 + 1;
                  if (__OFADD__(v32, 1))
                    goto LABEL_68;
                  if (v30 >= v77)
                  {
                    v79 = v73;
                    goto LABEL_31;
                  }
                  v31 = *(_QWORD *)(v74 + 8 * v30);
                  ++v32;
                  if (v31)
                    goto LABEL_17;
                }
              }
LABEL_20:
              v30 = v32;
LABEL_17:
              v19 = (v31 - 1) & v31;
              v25 = __clz(__rbit64(v31)) + (v30 << 6);
              v79 = v30;
LABEL_13:
              v26 = *(_QWORD *)(a1 + 56);
              v27 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v25);
              v29 = *v27;
              v28 = v27[1];
              *(_QWORD *)&v81 = v29;
              *((_QWORD *)&v81 + 1) = v28;
              outlined init with copy of AnyTrackedValue(v26 + 40 * v25, (uint64_t)&v82);
              goto LABEL_32;
            }
          }
        }
      }
LABEL_31:
      v19 = 0;
      v84 = 0;
      v82 = 0u;
      v83 = 0u;
      v81 = 0u;
LABEL_32:
      outlined init with take of (key: AnyHashable, value: ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item)?((uint64_t)&v81, (uint64_t)v88, (unint64_t *)&lazy cache variable for type metadata for (key: EventID, value: EventType)?, (void (*)(uint64_t))type metadata accessor for (key: EventID, value: EventType));
      v33 = v88[0];
      if (!v88[0])
      {
        swift_release();
        outlined release of RadialGradient(v101);
        outlined release of LayoutGestureBox.Child((uint64_t)v90);
        return v78;
      }
      v34 = v20;
      v35 = v88[1];
      outlined init with take of ScrollStateRequest(&v89, (uint64_t)v85);
      v36 = v86;
      v37 = v87;
      __swift_project_boxed_opaque_existential_1(v85, v86);
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v37 + 24))(&v81, v36, v37);
      v38 = v81;
      if (!(_QWORD)v81)
      {
        v20 = v34;
        if (!*(_QWORD *)(v22 + 16))
          goto LABEL_10;
        goto LABEL_46;
      }
      swift_retain_n();
      v20 = v34;
      if (v34 != v38)
      {
        v39 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 88);
        v40 = swift_retain();
        v41 = v39(v40);
        swift_retain();
        swift_release_n();
        if (!v41)
          goto LABEL_45;
        swift_release();
        if (v34 != v41)
        {
          while (1)
          {
            v42 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 88);
            v43 = swift_retain();
            v44 = v42(v43);
            swift_retain();
            swift_release_n();
            if (!v44)
              break;
            swift_release();
            v41 = v44;
            if (v34 == v44)
              goto LABEL_39;
          }
LABEL_45:
          swift_release_n();
          if (!*(_QWORD *)(v22 + 16))
            goto LABEL_10;
LABEL_46:
          Hasher.init(_seed:)();
          Hasher._combine(_:)(v33);
          Hasher._combine(_:)(v35);
          v55 = Hasher._finalize()();
          v56 = -1 << *(_BYTE *)(v22 + 32);
          v57 = v55 & ~v56;
          if (((*(_QWORD *)(v75 + ((v57 >> 3) & 0xFFFFFFFFFFFFF8)) >> v57) & 1) != 0)
          {
            v58 = ~v56;
            while (1)
            {
              v59 = (_QWORD *)(*(_QWORD *)(v22 + 48) + 16 * v57);
              if (v59[1] == v35 && *v59 == v33)
                break;
              v57 = (v57 + 1) & v58;
              if (((*(_QWORD *)(v75 + ((v57 >> 3) & 0xFFFFFFFFFFFFF8)) >> v57) & 1) == 0)
                goto LABEL_10;
            }
            outlined init with copy of AnyTrackedValue((uint64_t)v85, (uint64_t)&v81);
            v66 = *((_QWORD *)&v82 + 1);
            v67 = v83;
            __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v81, *((uint64_t *)&v82 + 1));
            *(_QWORD *)&v80[0] = 0;
            v68 = *(void (**)(__int128 *, uint64_t, uint64_t))(v67 + 32);
            v69 = v67;
            v20 = v34;
            v68(v80, v66, v69);
            outlined init with copy of AnyTrackedValue((uint64_t)&v81, (uint64_t)v80);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v80, v33, v35, isUniquelyReferenced_nonNull_native);
            swift_bridgeObjectRelease();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v81);
          }
          goto LABEL_10;
        }
      }
LABEL_39:
      v45 = a1;
      swift_release();
      swift_release();
      outlined init with copy of AnyTrackedValue((uint64_t)v85, (uint64_t)&v81);
      v46 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v80[0] = v78;
      v48 = specialized __RawDictionaryStorage.find<A>(_:)(v33, v35);
      v49 = *(_QWORD *)(v78 + 16);
      v50 = (v47 & 1) == 0;
      v51 = v49 + v50;
      if (__OFADD__(v49, v50))
      {
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
        goto LABEL_66;
      }
      v52 = v47;
      if (*(_QWORD *)(v78 + 24) >= v51)
      {
        if ((v46 & 1) == 0)
          specialized _NativeDictionary.copy()();
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v51, v46);
        v53 = specialized __RawDictionaryStorage.find<A>(_:)(v33, v35);
        if ((v52 & 1) != (v54 & 1))
          goto LABEL_69;
        v48 = v53;
      }
      v20 = v34;
      v61 = *(_QWORD **)&v80[0];
      v78 = *(_QWORD *)&v80[0];
      if ((v52 & 1) != 0)
      {
        v23 = *(_QWORD *)(*(_QWORD *)&v80[0] + 56) + 40 * v48;
        __swift_destroy_boxed_opaque_existential_1(v23);
        outlined init with take of ScrollStateRequest(&v81, v23);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)&v80[0] + 8 * (v48 >> 6) + 64) |= 1 << v48;
        v62 = (Swift::UInt *)(v61[6] + 16 * v48);
        *v62 = v33;
        v62[1] = v35;
        outlined init with take of ScrollStateRequest(&v81, v61[7] + 40 * v48);
        v63 = v61[2];
        v64 = __OFADD__(v63, 1);
        v65 = v63 + 1;
        if (v64)
          goto LABEL_65;
        v61[2] = v65;
      }
      swift_release();
      swift_bridgeObjectRelease();
      a1 = v45;
      v22 = v76;
LABEL_10:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v85);
    }
    v24 = __clz(__rbit64(v19));
    v19 &= v19 - 1;
    v25 = v24 | (v79 << 6);
    goto LABEL_13;
  }
  outlined retain of LayoutGestureBox.Child((uint64_t)v90);
  v71 = specialized Dictionary.optimisticFilter(_:)(a1, (uint64_t *)v90);
  outlined release of LayoutGestureBox.Child((uint64_t)v90);
  return v71;
}

{
  uint64_t result;
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  Swift::UInt v34;
  Swift::UInt v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t);
  uint64_t v43;
  uint64_t v44;
  Swift::Int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v51;
  uint64_t v52;
  char v53;
  unint64_t v54;
  int64_t v55;
  int64_t v57;
  __int128 v58[2];
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  _QWORD v63[3];
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[2];
  __int128 v67;
  _OWORD v68[2];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  _OWORD v78[2];
  _QWORD v79[2];

  result = swift_beginAccess();
  if ((a2 & 0x8000000000000000) != 0)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  v6 = *(_QWORD *)(a3 + 160);
  if (*(_QWORD *)(v6 + 16) <= a2)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  v7 = (_OWORD *)(v6 + 208 * a2);
  v68[0] = v7[2];
  v8 = v7[3];
  v9 = v7[4];
  v10 = v7[6];
  v70 = v7[5];
  v71 = v10;
  v68[1] = v8;
  v69 = v9;
  v11 = v7[7];
  v12 = v7[8];
  v13 = v7[10];
  v74 = v7[9];
  v75 = v13;
  v72 = v11;
  v73 = v12;
  v14 = v7[11];
  v15 = v7[12];
  v16 = v7[13];
  *(_OWORD *)((char *)v78 + 12) = *(_OWORD *)((char *)v7 + 220);
  v77 = v15;
  v78[0] = v16;
  v76 = v14;
  v17 = *((_QWORD *)&v69 + 1);
  v79[0] = *((_QWORD *)&v69 + 1);
  if (!*(_QWORD *)(*((_QWORD *)&v69 + 1) + 16))
  {
    outlined retain of LayoutGestureBox.Child((uint64_t)v68);
    v23 = specialized Dictionary.optimisticFilter(_:)(a1, (uint64_t *)v68);
LABEL_52:
    outlined release of LayoutGestureBox.Child((uint64_t)v68);
    return v23;
  }
  v54 = a1 + 64;
  v18 = 1 << *(_BYTE *)(a1 + 32);
  if (v18 < 64)
    v19 = ~(-1 << v18);
  else
    v19 = -1;
  v20 = v19 & *(_QWORD *)(a1 + 64);
  v21 = *(_QWORD *)&v68[0];
  outlined retain of LayoutGestureBox.Child((uint64_t)v68);
  outlined retain of LinearGradient((uint64_t)v79);
  v55 = (unint64_t)(v18 + 63) >> 6;
  v22 = v17 + 56;
  result = swift_bridgeObjectRetain();
  v57 = 0;
  v23 = MEMORY[0x24BEE4B00];
  while (1)
  {
    if (v20)
    {
      v25 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v26 = v25 | (v57 << 6);
LABEL_12:
      v27 = *(_QWORD *)(a1 + 56);
      v28 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v26);
      v30 = *v28;
      v29 = v28[1];
      *(_QWORD *)&v59 = v30;
      *((_QWORD *)&v59 + 1) = v29;
      outlined init with copy of AnyTrackedValue(v27 + 40 * v26, (uint64_t)&v60);
      goto LABEL_31;
    }
    v31 = v57 + 1;
    if (__OFADD__(v57, 1))
    {
      __break(1u);
      goto LABEL_54;
    }
    if (v31 < v55)
    {
      v32 = *(_QWORD *)(v54 + 8 * v31);
      if (v32)
        goto LABEL_16;
      v33 = v57 + 2;
      ++v57;
      if (v31 + 1 < v55)
      {
        v32 = *(_QWORD *)(v54 + 8 * v33);
        if (v32)
          goto LABEL_19;
        v57 = v31 + 1;
        if (v31 + 2 < v55)
        {
          v32 = *(_QWORD *)(v54 + 8 * (v31 + 2));
          if (v32)
          {
            v31 += 2;
            goto LABEL_16;
          }
          v33 = v31 + 3;
          v57 = v31 + 2;
          if (v31 + 3 < v55)
            break;
        }
      }
    }
LABEL_30:
    v20 = 0;
    v62 = 0;
    v60 = 0u;
    v61 = 0u;
    v59 = 0u;
LABEL_31:
    outlined init with take of (key: EventID, value: EventType)?((uint64_t)&v59, (uint64_t)v66);
    v34 = v66[0];
    if (!v66[0])
    {
      swift_release();
      outlined release of LinearGradient((uint64_t)v79);
      goto LABEL_52;
    }
    v35 = v66[1];
    outlined init with take of ScrollStateRequest(&v67, (uint64_t)v63);
    v36 = v64;
    v37 = v65;
    __swift_project_boxed_opaque_existential_1(v63, v64);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v37 + 24))(&v59, v36, v37);
    v38 = v59;
    if ((_QWORD)v59)
    {
      swift_retain_n();
      if (v21 == v38)
        goto LABEL_8;
      v39 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 88);
      v40 = swift_retain();
      v41 = v39(v40);
      swift_retain();
      swift_release_n();
      if (v41)
      {
        swift_release();
        if (v21 == v41)
        {
LABEL_8:
          swift_release();
          swift_release();
          outlined init with copy of AnyTrackedValue((uint64_t)v63, (uint64_t)&v59);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)&v58[0] = v23;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v59, v34, v35, isUniquelyReferenced_nonNull_native);
          v23 = *(_QWORD *)&v58[0];
          swift_release();
          swift_bridgeObjectRelease();
          goto LABEL_9;
        }
        while (1)
        {
          v42 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 88);
          v43 = swift_retain();
          v44 = v42(v43);
          swift_retain();
          swift_release_n();
          if (!v44)
            break;
          swift_release();
          v41 = v44;
          if (v21 == v44)
            goto LABEL_8;
        }
      }
      swift_release_n();
    }
    if (*(_QWORD *)(v17 + 16))
    {
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v34);
      Hasher._combine(_:)(v35);
      v45 = Hasher._finalize()();
      v46 = -1 << *(_BYTE *)(v17 + 32);
      v47 = v45 & ~v46;
      if (((*(_QWORD *)(v22 + ((v47 >> 3) & 0xFFFFFFFFFFFFF8)) >> v47) & 1) != 0)
      {
        v48 = ~v46;
        while (1)
        {
          v49 = (_QWORD *)(*(_QWORD *)(v17 + 48) + 16 * v47);
          if (v49[1] == v35 && *v49 == v34)
            break;
          v47 = (v47 + 1) & v48;
          if (((*(_QWORD *)(v22 + ((v47 >> 3) & 0xFFFFFFFFFFFFF8)) >> v47) & 1) == 0)
            goto LABEL_9;
        }
        outlined init with copy of AnyTrackedValue((uint64_t)v63, (uint64_t)&v59);
        v51 = *((_QWORD *)&v60 + 1);
        v52 = v61;
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v59, *((uint64_t *)&v60 + 1));
        *(_QWORD *)&v58[0] = 0;
        (*(void (**)(__int128 *, uint64_t, uint64_t))(v52 + 32))(v58, v51, v52);
        outlined init with copy of AnyTrackedValue((uint64_t)&v59, (uint64_t)v58);
        v53 = swift_isUniquelyReferenced_nonNull_native();
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v58, v34, v35, v53);
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v59);
      }
    }
LABEL_9:
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
  }
  v32 = *(_QWORD *)(v54 + 8 * v33);
  if (v32)
  {
LABEL_19:
    v31 = v33;
LABEL_16:
    v20 = (v32 - 1) & v32;
    v26 = __clz(__rbit64(v32)) + (v31 << 6);
    v57 = v31;
    goto LABEL_12;
  }
  while (1)
  {
    v31 = v33 + 1;
    if (__OFADD__(v33, 1))
      break;
    if (v31 >= v55)
    {
      v57 = v55 - 1;
      goto LABEL_30;
    }
    v32 = *(_QWORD *)(v54 + 8 * v31);
    ++v33;
    if (v32)
      goto LABEL_16;
  }
LABEL_56:
  __break(1u);
  return result;
}

uint64_t specialized LayoutGestureBox.willSendEvents<A>(_:gesture:boxValueAttribute:)(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  id v23;
  void *v24;
  id v25;
  int v26;
  __int32 v27;
  _QWORD *v28;
  id v29;
  _QWORD *v30;
  void *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t (*v36)(void);
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  __int32 v41;
  uint64_t v42;
  int v43;
  int8x16_t v44[9];
  unint64_t v45[18];
  _DWORD v46[2];
  uint64_t v47;
  int v48;

  v3 = v2;
  v5 = v2 + 160;
  result = swift_beginAccess();
  v7 = *(_QWORD *)(v2 + 160);
  v8 = *(_QWORD *)(v7 + 16);
  if (!v8)
  {
LABEL_10:
    if (!*(_QWORD *)(a1 + 16))
      return result;
    v13 = *(_QWORD *)(v7 + 16);
    if (!v13)
      return result;
    v41 = *MEMORY[0x24BE096C0];
    swift_bridgeObjectRetain();
    v14 = 0;
    v15 = 29;
    v39 = v13;
    while (1)
    {
      v16 = swift_bridgeObjectRetain();
      v17 = specialized LayoutGesture.childEvents(events:index:box:)(v16, v14, v3);
      result = swift_bridgeObjectRelease();
      if (*(_QWORD *)(v17 + 16))
      {
        if (v14 >= *(_QWORD *)(*(_QWORD *)v5 + 16))
          goto LABEL_44;
        swift_beginAccess();
        v18 = *(_QWORD **)v5;
        swift_bridgeObjectRetain();
        result = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)v5 = v18;
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v18);
          v18 = (_QWORD *)result;
          *(_QWORD *)v5 = result;
        }
        if (v14 >= v18[2])
          goto LABEL_45;
        specialized Set.formUnion<A>(_:)(v17);
        v19 = *(_QWORD *)v5;
        v20 = *(_QWORD *)(*(_QWORD *)v5 + 16);
        result = swift_bridgeObjectRetain();
        if (v14 >= v20)
          goto LABEL_46;
        *(_QWORD *)(v19 + v15 * 8 - 168) = v17;
        swift_endAccess();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        ++*(_DWORD *)(v3 + 172);
        v21 = *(_QWORD *)(v3 + 160);
        if (v14 >= *(_QWORD *)(v21 + 16))
          goto LABEL_47;
        if ((*(_BYTE *)(v21 + v15 * 8 - 172) & 1) == 0)
          goto LABEL_14;
        if (AGSubgraphIsValid())
        {
          v22 = *(_DWORD *)(v21 + v15 * 8 - 192);
          v23 = (id)AGSubgraphGetGraph();
          v24 = (void *)AGSubgraphCreate();

          AGSubgraphAddChild();
          AGGraphClearUpdate();
          v25 = (id)AGSubgraphGetCurrent();
          AGSubgraphSetCurrent();
          specialized closure #1 in LayoutGestureBox.willSendEvents<A>(_:gesture:boxValueAttribute:)(v3, a2, v22, v14);
          AGSubgraphSetCurrent();

          AGGraphSetUpdate();
          v26 = v46[0];
          v27 = v46[1];
          v42 = v47;
          v43 = v48;
          swift_beginAccess();
          v28 = *(_QWORD **)(v3 + 160);
          v29 = v24;
          result = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(v3 + 160) = v28;
          if ((result & 1) == 0)
          {
            result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v28);
            v28 = (_QWORD *)result;
            *(_QWORD *)v5 = result;
          }
          if (v14 >= v28[2])
            goto LABEL_51;
          v30 = &v28[v15];
          v31 = (void *)v28[v15 - 23];
          *(v30 - 23) = v24;
          swift_endAccess();

          v13 = v39;
        }
        else
        {
          v26 = specialized _GestureInputs.intern<A>(_:id:)(768, 4);
          v43 = 0;
          v27 = v41;
          v42 = MEMORY[0x24BEE4AF8];
        }
        swift_beginAccess();
        v32 = *(_QWORD **)v5;
        result = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)v5 = v32;
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v32);
          v32 = (_QWORD *)result;
          *(_QWORD *)v5 = result;
        }
        if (v14 >= v32[2])
          goto LABEL_48;
        v33 = &v32[v15];
        *((_DWORD *)v33 - 44) = v26;
        *((_BYTE *)v33 - 172) = 0;
        v34 = *(_QWORD **)v5;
        if (v27 == v41)
        {
          _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOSgWOi0_((uint64_t)v45);
        }
        else
        {
          v44[0].i32[0] = v27;
          _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOi0_(v44);
          outlined init with take of LayoutGestureBox.Child.DebugData((uint64_t)v44, (uint64_t)v45);
          _ViewInputs.base.modify(v45, v35);
        }
        v36 = MEMORY[0x24BEE1C68];
        outlined init with take of Image.ResizingInfo?((uint64_t)v45, (uint64_t)v46, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
        result = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)v5 = v34;
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v34);
          v34 = (_QWORD *)result;
          *(_QWORD *)v5 = result;
        }
        if (v14 >= v34[2])
          goto LABEL_49;
        v37 = (uint64_t)&v34[v15 - 19];
        outlined init with take of Image.ResizingInfo?(v37, (uint64_t)v45, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, (uint64_t (*)(_QWORD, uint64_t))v36);
        outlined init with take of Image.ResizingInfo?((uint64_t)v46, v37, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, (uint64_t (*)(_QWORD, uint64_t))v36);
        result = (uint64_t)outlined release of LayoutGestureBox.Child.DebugData?(v45);
        if (v14 >= *(_QWORD *)(*(_QWORD *)v5 + 16))
          goto LABEL_50;
        v38 = (_DWORD *)(*(_QWORD *)v5 + v15 * 8);
        *((_QWORD *)v38 - 1) = v42;
        *v38 = v43;
        swift_endAccess();
      }
      swift_bridgeObjectRelease();
LABEL_14:
      ++v14;
      v15 += 26;
      if (v13 == v14)
        return swift_bridgeObjectRelease();
    }
  }
  v9 = 0;
  v10 = 8;
  v11 = MEMORY[0x24BEE4B00];
  while (v9 < *(_QWORD *)(v7 + 16))
  {
    if (*(_QWORD *)(*(_QWORD *)(v7 + v10 * 8) + 16))
    {
      swift_beginAccess();
      v12 = *(_QWORD **)v5;
      result = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)v5 = v12;
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v12);
        v12 = (_QWORD *)result;
        *(_QWORD *)v5 = result;
      }
      if (v9 >= v12[2])
        goto LABEL_43;
      v12[v10] = v11;
      v7 = *(_QWORD *)(v3 + 160);
      swift_endAccess();
      result = swift_bridgeObjectRelease();
      ++*(_DWORD *)(v3 + 172);
    }
    ++v9;
    v10 += 26;
    if (v8 == v9)
      goto LABEL_10;
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

uint64_t specialized LayoutGestureBox.resetTerminalChildren<A>(gesture:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t (*v22)(void);
  unint64_t *v23;
  __int128 *Value;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  __int8 v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  void *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int8x16_t v53;
  char v54;
  char v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  char v63;
  uint64_t v64;
  _BYTE v65[144];
  _BYTE v66[144];
  _BYTE v67[144];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  unint64_t v77[18];
  _BYTE v78[168];
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  _OWORD v90[2];

  v1 = v0 + 160;
  result = swift_beginAccess();
  v52 = v0;
  v3 = *(_QWORD *)(*(_QWORD *)(v0 + 160) + 16);
  if (v3)
  {
    v4 = *(_QWORD **)(v0 + 160);
    if (v4[2])
    {
      v5 = 0;
      v6 = v3 - 1;
      v7 = 10;
      v8 = MEMORY[0x24BEE4AE0] + 8;
      v50 = v3 - 1;
      v51 = MEMORY[0x24BEE4AE0] + 8;
      do
      {
        v9 = (__int128 *)&v4[v7];
        v79 = *(v9 - 3);
        v10 = *(v9 - 2);
        v11 = *(v9 - 1);
        v12 = *v9;
        v83 = v9[1];
        v82 = v12;
        v81 = v11;
        v80 = v10;
        v13 = v9[2];
        v14 = v9[3];
        v15 = v9[4];
        v87 = v9[5];
        v86 = v15;
        v85 = v14;
        v84 = v13;
        v16 = v9[6];
        v17 = v9[7];
        v18 = v9[8];
        *(_OWORD *)((char *)v90 + 12) = *(__int128 *)((char *)v9 + 140);
        v90[0] = v18;
        v89 = v17;
        v88 = v16;
        if (*(_QWORD *)(*((_QWORD *)&v81 + 1) + 16))
        {
          if ((BYTE12(v80) & 1) != 0)
            goto LABEL_32;
          type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, v8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
          result = AGGraphGetValue();
          v19 = *(unsigned __int8 *)(result + 1);
          if (v19 == 2 || v19 == 3 && !*(_BYTE *)result)
          {
            swift_beginAccess();
            v20 = *(_QWORD **)v1;
            outlined retain of LayoutGestureBox.Child((uint64_t)&v79);
            result = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)v1 = v20;
            if ((result & 1) == 0)
            {
              result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v20);
              v20 = (_QWORD *)result;
              *(_QWORD *)v1 = result;
            }
            if (v5 >= v20[2])
              goto LABEL_31;
            v21 = &v20[v7];
            if (*(_QWORD *)(v20[v7 - 1] + 16))
            {
              if ((*((_BYTE *)v21 - 20) & 1) == 0)
              {
                v22 = MEMORY[0x24BEE1C68];
                outlined init with take of Image.ResizingInfo?((uint64_t)&v20[v7], (uint64_t)v77, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
                outlined init with take of Image.ResizingInfo?((uint64_t)v77, (uint64_t)v78, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, (uint64_t (*)(_QWORD, uint64_t))v22);
                if (_s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOSgWOg((uint64_t)v78) == 1)
                {
                  v23 = v77;
                }
                else
                {
                  outlined init with take of Image.ResizingInfo?((uint64_t)v77, (uint64_t)v66, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, (uint64_t (*)(_QWORD, uint64_t))v22);
                  outlined init with take of LayoutGestureBox.Child.DebugData((uint64_t)v66, (uint64_t)v67);
                  if (_s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOg((uint64_t)v67) == 1)
                  {
                    _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOj0_((uint64_t)v67);
                    Value = (__int128 *)AGGraphGetValue();
                    v68 = *Value;
                    v25 = Value[4];
                    v27 = Value[1];
                    v26 = Value[2];
                    v71 = Value[3];
                    v72 = v25;
                    v69 = v27;
                    v70 = v26;
                    v28 = Value[8];
                    v30 = Value[5];
                    v29 = Value[6];
                    v75 = Value[7];
                    v76 = v28;
                    v73 = v30;
                    v74 = v29;
                    outlined retain of GestureDebug.Data((uint64_t)&v68);
                    outlined release of LayoutGestureBox.Child.DebugData?(v77);
                    v31 = *((_QWORD *)&v76 + 1);
                    v32 = v72;
                    v33 = v73;
                    v34 = v74;
                    v35 = v75;
                    v36 = v76;
                    v37 = v70;
                    v38 = v71;
                    v39 = *(_QWORD *)((char *)&v69 + 4);
                    v40 = v69;
                    v41 = BYTE1(v69);
                    v42 = *((_QWORD *)&v68 + 1);
                    v43 = v68;
                  }
                  else
                  {
                    v44 = _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOj0_((uint64_t)v67);
                    v31 = *(_QWORD *)(v44 + 136);
                    v32 = *(_OWORD *)(v44 + 64);
                    v33 = *(_OWORD *)(v44 + 80);
                    v34 = *(_OWORD *)(v44 + 96);
                    v35 = *(_OWORD *)(v44 + 112);
                    v36 = *(_BYTE *)(v44 + 128);
                    v37 = *(_OWORD *)(v44 + 32);
                    v38 = *(_OWORD *)(v44 + 48);
                    v39 = *(_QWORD *)(v44 + 20);
                    v40 = *(_BYTE *)(v44 + 16);
                    v41 = *(_BYTE *)(v44 + 17);
                    v42 = *(_QWORD *)(v44 + 8);
                    v43 = *(_BYTE *)v44;
                  }
                  v53.i8[0] = v43;
                  v53.i64[1] = v42;
                  v54 = v40;
                  v55 = v41;
                  v56 = v39;
                  v57 = v37;
                  v58 = v38;
                  v59 = v32;
                  v60 = v33;
                  v61 = v34;
                  v62 = v35;
                  v63 = v36;
                  v64 = v31;
                  _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOi_(&v53);
                  outlined init with take of LayoutGestureBox.Child.DebugData((uint64_t)&v53, (uint64_t)v65);
                  _ViewInputs.base.modify(v65, v45);
                  v23 = (unint64_t *)v65;
                }
                outlined init with take of Image.ResizingInfo?((uint64_t)v23, (uint64_t)&v68, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, (uint64_t (*)(_QWORD, uint64_t))v22);
                outlined init with take of Image.ResizingInfo?((uint64_t)&v68, (uint64_t)&v20[v7], &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, (uint64_t (*)(_QWORD, uint64_t))v22);
                *((_DWORD *)v21 - 6) = 0;
                *((_BYTE *)v21 - 20) = 1;
                v46 = &v20[v7];
                v47 = v20[v7 - 4];
                if (v47)
                {
                  MEMORY[0x24BDAC7A8](v47);
                  AGSubgraphApply();
                  v48 = (void *)*(v46 - 4);
                  if (v48)
                  {
                    AGSubgraphInvalidate();

                  }
                }
                *(v46 - 4) = 0;
                (*(void (**)(void))(*(_QWORD *)*(v21 - 6) + 120))();
              }
              v49 = &v20[v7];
              swift_bridgeObjectRelease();
              *(v49 - 2) = MEMORY[0x24BEE4B00];
              swift_bridgeObjectRelease();
              *(v21 - 1) = MEMORY[0x24BEE4B08];
              ++*((_DWORD *)v49 - 9);
            }
            swift_endAccess();
            ++*(_DWORD *)(v52 + 172);
            result = outlined release of LayoutGestureBox.Child((uint64_t)&v79);
            v6 = v50;
            v8 = v51;
          }
        }
        if (v6 == v5)
          return result;
        v4 = *(_QWORD **)v1;
        v7 += 26;
        ++v5;
      }
      while (v5 < *(_QWORD *)(*(_QWORD *)v1 + 16));
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t (*v22)(void);
  unint64_t *v23;
  __int128 *Value;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  __int8 v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  void *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int8x16_t v53;
  char v54;
  char v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  char v63;
  uint64_t v64;
  _BYTE v65[144];
  _BYTE v66[144];
  _BYTE v67[144];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  unint64_t v77[18];
  _BYTE v78[168];
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  _OWORD v90[2];

  v1 = v0 + 160;
  result = swift_beginAccess();
  v52 = v0;
  v3 = *(_QWORD *)(*(_QWORD *)(v0 + 160) + 16);
  if (v3)
  {
    v4 = *(_QWORD **)(v0 + 160);
    if (v4[2])
    {
      v5 = 0;
      v6 = v3 - 1;
      v7 = 10;
      v8 = MEMORY[0x24BEE4AE0] + 8;
      v50 = v3 - 1;
      v51 = MEMORY[0x24BEE4AE0] + 8;
      do
      {
        v9 = (__int128 *)&v4[v7];
        v79 = *(v9 - 3);
        v10 = *(v9 - 2);
        v11 = *(v9 - 1);
        v12 = *v9;
        v83 = v9[1];
        v82 = v12;
        v81 = v11;
        v80 = v10;
        v13 = v9[2];
        v14 = v9[3];
        v15 = v9[4];
        v87 = v9[5];
        v86 = v15;
        v85 = v14;
        v84 = v13;
        v16 = v9[6];
        v17 = v9[7];
        v18 = v9[8];
        *(_OWORD *)((char *)v90 + 12) = *(__int128 *)((char *)v9 + 140);
        v90[0] = v18;
        v89 = v17;
        v88 = v16;
        if (*(_QWORD *)(*((_QWORD *)&v81 + 1) + 16))
        {
          if ((BYTE12(v80) & 1) != 0)
            goto LABEL_32;
          type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, v8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
          result = AGGraphGetValue();
          v19 = *(unsigned __int8 *)(result + 1);
          if (v19 == 2 || v19 == 3 && !*(_BYTE *)result)
          {
            swift_beginAccess();
            v20 = *(_QWORD **)v1;
            outlined retain of LayoutGestureBox.Child((uint64_t)&v79);
            result = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)v1 = v20;
            if ((result & 1) == 0)
            {
              result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v20);
              v20 = (_QWORD *)result;
              *(_QWORD *)v1 = result;
            }
            if (v5 >= v20[2])
              goto LABEL_31;
            v21 = &v20[v7];
            if (*(_QWORD *)(v20[v7 - 1] + 16))
            {
              if ((*((_BYTE *)v21 - 20) & 1) == 0)
              {
                v22 = MEMORY[0x24BEE1C68];
                outlined init with take of Image.ResizingInfo?((uint64_t)&v20[v7], (uint64_t)v77, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
                outlined init with take of Image.ResizingInfo?((uint64_t)v77, (uint64_t)v78, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, (uint64_t (*)(_QWORD, uint64_t))v22);
                if (_s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOSgWOg((uint64_t)v78) == 1)
                {
                  v23 = v77;
                }
                else
                {
                  outlined init with take of Image.ResizingInfo?((uint64_t)v77, (uint64_t)v66, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, (uint64_t (*)(_QWORD, uint64_t))v22);
                  outlined init with take of LayoutGestureBox.Child.DebugData((uint64_t)v66, (uint64_t)v67);
                  if (_s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOg((uint64_t)v67) == 1)
                  {
                    _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOj0_((uint64_t)v67);
                    Value = (__int128 *)AGGraphGetValue();
                    v68 = *Value;
                    v25 = Value[4];
                    v27 = Value[1];
                    v26 = Value[2];
                    v71 = Value[3];
                    v72 = v25;
                    v69 = v27;
                    v70 = v26;
                    v28 = Value[8];
                    v30 = Value[5];
                    v29 = Value[6];
                    v75 = Value[7];
                    v76 = v28;
                    v73 = v30;
                    v74 = v29;
                    outlined retain of GestureDebug.Data((uint64_t)&v68);
                    outlined release of LayoutGestureBox.Child.DebugData?(v77);
                    v31 = *((_QWORD *)&v76 + 1);
                    v32 = v72;
                    v33 = v73;
                    v34 = v74;
                    v35 = v75;
                    v36 = v76;
                    v37 = v70;
                    v38 = v71;
                    v39 = *(_QWORD *)((char *)&v69 + 4);
                    v40 = v69;
                    v41 = BYTE1(v69);
                    v42 = *((_QWORD *)&v68 + 1);
                    v43 = v68;
                  }
                  else
                  {
                    v44 = _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOj0_((uint64_t)v67);
                    v31 = *(_QWORD *)(v44 + 136);
                    v32 = *(_OWORD *)(v44 + 64);
                    v33 = *(_OWORD *)(v44 + 80);
                    v34 = *(_OWORD *)(v44 + 96);
                    v35 = *(_OWORD *)(v44 + 112);
                    v36 = *(_BYTE *)(v44 + 128);
                    v37 = *(_OWORD *)(v44 + 32);
                    v38 = *(_OWORD *)(v44 + 48);
                    v39 = *(_QWORD *)(v44 + 20);
                    v40 = *(_BYTE *)(v44 + 16);
                    v41 = *(_BYTE *)(v44 + 17);
                    v42 = *(_QWORD *)(v44 + 8);
                    v43 = *(_BYTE *)v44;
                  }
                  v53.i8[0] = v43;
                  v53.i64[1] = v42;
                  v54 = v40;
                  v55 = v41;
                  v56 = v39;
                  v57 = v37;
                  v58 = v38;
                  v59 = v32;
                  v60 = v33;
                  v61 = v34;
                  v62 = v35;
                  v63 = v36;
                  v64 = v31;
                  _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOi_(&v53);
                  outlined init with take of LayoutGestureBox.Child.DebugData((uint64_t)&v53, (uint64_t)v65);
                  _ViewInputs.base.modify(v65, v45);
                  v23 = (unint64_t *)v65;
                }
                outlined init with take of Image.ResizingInfo?((uint64_t)v23, (uint64_t)&v68, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, (uint64_t (*)(_QWORD, uint64_t))v22);
                outlined init with take of Image.ResizingInfo?((uint64_t)&v68, (uint64_t)&v20[v7], &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, (uint64_t (*)(_QWORD, uint64_t))v22);
                *((_DWORD *)v21 - 6) = 0;
                *((_BYTE *)v21 - 20) = 1;
                v46 = &v20[v7];
                v47 = v20[v7 - 4];
                if (v47)
                {
                  MEMORY[0x24BDAC7A8](v47);
                  AGSubgraphApply();
                  v48 = (void *)*(v46 - 4);
                  if (v48)
                  {
                    AGSubgraphInvalidate();

                  }
                }
                *(v46 - 4) = 0;
                (*(void (**)(void))(*(_QWORD *)*(v21 - 6) + 120))();
              }
              v49 = &v20[v7];
              swift_bridgeObjectRelease();
              *(v49 - 2) = MEMORY[0x24BEE4B00];
              swift_bridgeObjectRelease();
              *(v21 - 1) = MEMORY[0x24BEE4B08];
              ++*((_DWORD *)v49 - 9);
            }
            swift_endAccess();
            ++*(_DWORD *)(v52 + 172);
            result = outlined release of LayoutGestureBox.Child((uint64_t)&v79);
            v6 = v50;
            v8 = v51;
          }
        }
        if (v6 == v5)
          return result;
        v4 = *(_QWORD **)v1;
        v7 += 26;
        ++v5;
      }
      while (v5 < *(_QWORD *)(*(_QWORD *)v1 + 16));
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  return result;
}

int8x16_t _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOi_(int8x16_t *a1)
{
  int8x16_t v1;
  int8x16_t result;

  v1 = vandq_s8(a1[1], (int8x16_t)xmmword_2352A5DC0);
  *a1 = vandq_s8(*a1, (int8x16_t)xmmword_2352A5DB0);
  a1[1] = v1;
  result = vandq_s8(a1[8], (int8x16_t)xmmword_2352A5DD0);
  a1[8] = result;
  return result;
}

int8x16_t _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOi0_(int8x16_t *a1)
{
  int8x16_t result;
  int8x16_t v2;
  uint64_t v3;
  unint64_t v4;

  result = vandq_s8(*a1, (int8x16_t)xmmword_2352A5DB0);
  v2 = vandq_s8(a1[1], (int8x16_t)xmmword_2352A5DC0);
  v3 = a1[8].i64[0] & 3;
  v4 = a1[8].i64[1] & 0xFFFFFFFFFFFFFF8 | 0x8000000000000000;
  *a1 = result;
  a1[1] = v2;
  a1[8].i64[0] = v3;
  a1[8].i64[1] = v4;
  return result;
}

double _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOSgWOi0_(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0xFFFFFFFF00000000;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  return result;
}

unint64_t lazy protocol witness table accessor for type LayoutChildEvents<DefaultLayoutGesture> and conformance LayoutChildEvents<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type LayoutChildEvents<DefaultLayoutGesture> and conformance LayoutChildEvents<A>;
  if (!lazy protocol witness table cache variable for type LayoutChildEvents<DefaultLayoutGesture> and conformance LayoutChildEvents<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for LayoutChildEvents<DefaultLayoutGesture>, (uint64_t)&type metadata for DefaultLayoutGesture, (uint64_t)&protocol witness table for DefaultLayoutGesture, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for LayoutChildEvents);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LayoutChildEvents<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutChildEvents<DefaultLayoutGesture> and conformance LayoutChildEvents<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LayoutChildSeed<DefaultLayoutGesture> and conformance LayoutChildSeed<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type LayoutChildSeed<DefaultLayoutGesture> and conformance LayoutChildSeed<A>;
  if (!lazy protocol witness table cache variable for type LayoutChildSeed<DefaultLayoutGesture> and conformance LayoutChildSeed<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for LayoutChildSeed<DefaultLayoutGesture>, (uint64_t)&type metadata for DefaultLayoutGesture, (uint64_t)&protocol witness table for DefaultLayoutGesture, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for LayoutChildSeed);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LayoutChildSeed<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutChildSeed<DefaultLayoutGesture> and conformance LayoutChildSeed<A>);
  }
  return result;
}

uint64_t outlined init with take of (key: AnyHashable, value: ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item)?(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v6;

  type metadata accessor for Date?(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t partial apply for specialized closure #1 in UnaryChildGeometry.value.getter@<X0>(uint64_t a1@<X8>)
{
  double *v1;

  return specialized UnaryLayoutEngine.childPlacement(at:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

unint64_t *specialized closure #1 in _NativeDictionary.filter(_:)(unint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;

  v5 = 0;
  v6 = 0;
  v7 = a3 + 64;
  v8 = 1 << *(_BYTE *)(a3 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a3 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v6 << 6);
      goto LABEL_5;
    }
    v14 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_24;
    }
    if (v14 >= v11)
      return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v5, a3);
    v15 = *(_QWORD *)(v7 + 8 * v14);
    ++v6;
    if (!v15)
    {
      v6 = v14 + 1;
      if (v14 + 1 >= v11)
        return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v5, a3);
      v15 = *(_QWORD *)(v7 + 8 * v6);
      if (!v15)
        break;
    }
LABEL_18:
    v17 = __clz(__rbit64(v15));
    v10 = (v15 - 1) & v15;
    v13 = v17 + (v6 << 6);
LABEL_5:
    if (*(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v13) != a4)
    {
      *(unint64_t *)((char *)result + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      if (__OFADD__(v5++, 1))
      {
        __break(1u);
        return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v5, a3);
      }
    }
  }
  v16 = v14 + 2;
  if (v16 >= v11)
    return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v5, a3);
  v15 = *(_QWORD *)(v7 + 8 * v16);
  if (v15)
  {
    v6 = v16;
    goto LABEL_18;
  }
  while (1)
  {
    v6 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v6 >= v11)
      return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v5, a3);
    v15 = *(_QWORD *)(v7 + 8 * v6);
    ++v16;
    if (v15)
      goto LABEL_18;
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t outlined retain of ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t outlined release of ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

uint64_t type metadata accessor for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Info()
{
  uint64_t result;

  result = lazy cache variable for type metadata for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Info;
  if (!lazy cache variable for type metadata for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Info)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x24BEE1768], MEMORY[0x24BEE1780], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, (uint64_t)&type metadata for _OffsetEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedContent);
    lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect> and conformance <> ModifiedContent<A, B>();
    type metadata accessor for ForEachState.Info();
  }
  return result;
}

uint64_t outlined consume of ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in closure #1 in SecondaryChild.value.getter(uint64_t a1)
{
  uint64_t v1;

  return specialized closure #1 in closure #1 in SecondaryChild.value.getter(*(void (**)(uint64_t *))a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(v1 + 16));
}

double partial apply for specialized closure #1 in Attribute.syncMainIfReferences<A>(do:)()
{
  _QWORD *v0;
  double result;

  *(_QWORD *)&result = specialized closure #1 in Attribute.syncMainIfReferences<A>(do:)((__n128 *)v0[2], (void (*)(_OWORD *__return_ptr, _OWORD *))v0[3], v0[4], (_OWORD *)v0[5]).n128_u64[0];
  return result;
}

void partial apply for specialized closure #1 in UnaryChildGeometry.value.getter(uint64_t a1@<X8>)
{
  double *v1;

  specialized UnaryLayoutEngine.childPlacement(at:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t partial apply for specialized closure #1 in UnaryChildGeometry.value.getter(uint64_t a1, uint64_t (*a2)(double, double, double, double))
{
  double *v2;

  return a2(v2[2], v2[3], v2[4], v2[5]);
}

uint64_t outlined release of (ViewGeometry, ViewGeometry)(uint64_t a1)
{
  swift_release();
  swift_release();
  return a1;
}

uint64_t sub_234E44F0C()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type ProjectionTransformElement and conformance ProjectionTransformElement()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ProjectionTransformElement and conformance ProjectionTransformElement;
  if (!lazy protocol witness table cache variable for type ProjectionTransformElement and conformance ProjectionTransformElement)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ProjectionTransformElement, &type metadata for ProjectionTransformElement);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProjectionTransformElement and conformance ProjectionTransformElement);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ProjectionTransformElement and conformance ProjectionTransformElement;
  if (!lazy protocol witness table cache variable for type ProjectionTransformElement and conformance ProjectionTransformElement)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ProjectionTransformElement, &type metadata for ProjectionTransformElement);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProjectionTransformElement and conformance ProjectionTransformElement);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AffineTransformElement and conformance AffineTransformElement()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AffineTransformElement and conformance AffineTransformElement;
  if (!lazy protocol witness table cache variable for type AffineTransformElement and conformance AffineTransformElement)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AffineTransformElement, &type metadata for AffineTransformElement);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AffineTransformElement and conformance AffineTransformElement);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AffineTransformElement and conformance AffineTransformElement;
  if (!lazy protocol witness table cache variable for type AffineTransformElement and conformance AffineTransformElement)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AffineTransformElement, &type metadata for AffineTransformElement);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AffineTransformElement and conformance AffineTransformElement);
  }
  return result;
}

uint64_t sub_234E44FA4()
{
  return swift_deallocObject();
}

uint64_t *_s7SwiftUI22RequiredTapCountWriter33_7C0ADFDC1D38FCDDCFDE5CE8530A0B2ELLV5ChildV5valueyySiSgzcvgyAHzcfU_TA_0(uint64_t *a1)
{
  uint64_t v1;

  return closure #1 in RequiredTapCountWriter.Child.value.getter(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24));
}

uint64_t sub_234E44FC0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t lazy protocol witness table accessor for type ModifierGesture<CategoryGesture<TappableEvent>, ModifierGesture<RepeatGesture<TappableEvent>, SingleTapGesture<TappableEvent>>> and conformance ModifierGesture<A, B>(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = a2(255);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ModifierGesture<A, B>, v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of _VariadicView_Children.Element?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t))
{
  uint64_t v7;

  type metadata accessor for MutableBox<CachedEnvironment>(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t _s7SwiftUI11Map2GestureVyAA13TappableEventVAA08ModifierD0VyAA015CoordinateSpaceD0Vy12CoreGraphics7CGFloatVGAA08DistanceD0VGAEGMaTm_0(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    a3(255);
    lazy protocol witness table accessor for type ModifierGesture<CategoryGesture<TappableEvent>, ModifierGesture<RepeatGesture<TappableEvent>, SingleTapGesture<TappableEvent>>> and conformance ModifierGesture<A, B>(a4, a3);
    type metadata accessor for Map2Gesture();
  }
  return result;
}

uint64_t type metadata accessor for ModifierGesture<RequiredTapCountWriter<TappableEvent>, ModifierGesture<CategoryGesture<TappableEvent>, ModifierGesture<RepeatGesture<TappableEvent>, SingleTapGesture<TappableEvent>>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for ModifierGesture<RequiredTapCountWriter<TappableEvent>, ModifierGesture<CategoryGesture<TappableEvent>, ModifierGesture<RepeatGesture<TappableEvent>, SingleTapGesture<TappableEvent>>>>;
  if (!lazy cache variable for type metadata for ModifierGesture<RequiredTapCountWriter<TappableEvent>, ModifierGesture<CategoryGesture<TappableEvent>, ModifierGesture<RepeatGesture<TappableEvent>, SingleTapGesture<TappableEvent>>>>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for RequiredTapCountWriter<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for RequiredTapCountWriter);
    type metadata accessor for ModifierGesture<CategoryGesture<TappableEvent>, ModifierGesture<RepeatGesture<TappableEvent>, SingleTapGesture<TappableEvent>>>();
    lazy protocol witness table accessor for type EventFilter<TappableEvent> and conformance EventFilter<A>(&lazy protocol witness table cache variable for type RequiredTapCountWriter<TappableEvent> and conformance RequiredTapCountWriter<A>, &lazy cache variable for type metadata for RequiredTapCountWriter<TappableEvent>, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for RequiredTapCountWriter, (uint64_t)&protocol conformance descriptor for RequiredTapCountWriter<A>);
    lazy protocol witness table accessor for type ModifierGesture<CategoryGesture<TappableEvent>, ModifierGesture<RepeatGesture<TappableEvent>, SingleTapGesture<TappableEvent>>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<CategoryGesture<TappableEvent>, ModifierGesture<RepeatGesture<TappableEvent>, SingleTapGesture<TappableEvent>>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CategoryGesture<TappableEvent>, ModifierGesture<RepeatGesture<TappableEvent>, SingleTapGesture<TappableEvent>>>);
    type metadata accessor for ModifierGesture();
  }
  return result;
}

uint64_t type metadata accessor for ModifierGesture<CategoryGesture<TappableEvent>, ModifierGesture<RepeatGesture<TappableEvent>, SingleTapGesture<TappableEvent>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for ModifierGesture<CategoryGesture<TappableEvent>, ModifierGesture<RepeatGesture<TappableEvent>, SingleTapGesture<TappableEvent>>>;
  if (!lazy cache variable for type metadata for ModifierGesture<CategoryGesture<TappableEvent>, ModifierGesture<RepeatGesture<TappableEvent>, SingleTapGesture<TappableEvent>>>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for CategoryGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for CategoryGesture);
    type metadata accessor for ModifierGesture<RepeatGesture<TappableEvent>, SingleTapGesture<TappableEvent>>();
    lazy protocol witness table accessor for type EventFilter<TappableEvent> and conformance EventFilter<A>(&lazy protocol witness table cache variable for type CategoryGesture<TappableEvent> and conformance CategoryGesture<A>, &lazy cache variable for type metadata for CategoryGesture<TappableEvent>, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for CategoryGesture, (uint64_t)&protocol conformance descriptor for CategoryGesture<A>);
    lazy protocol witness table accessor for type ModifierGesture<CategoryGesture<TappableEvent>, ModifierGesture<RepeatGesture<TappableEvent>, SingleTapGesture<TappableEvent>>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<RepeatGesture<TappableEvent>, SingleTapGesture<TappableEvent>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<RepeatGesture<TappableEvent>, SingleTapGesture<TappableEvent>>);
    type metadata accessor for ModifierGesture();
  }
  return result;
}

uint64_t type metadata accessor for ModifierGesture<RepeatGesture<TappableEvent>, SingleTapGesture<TappableEvent>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for ModifierGesture<RepeatGesture<TappableEvent>, SingleTapGesture<TappableEvent>>;
  if (!lazy cache variable for type metadata for ModifierGesture<RepeatGesture<TappableEvent>, SingleTapGesture<TappableEvent>>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for RepeatGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for RepeatGesture);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for SingleTapGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SingleTapGesture);
    lazy protocol witness table accessor for type EventFilter<TappableEvent> and conformance EventFilter<A>(&lazy protocol witness table cache variable for type RepeatGesture<TappableEvent> and conformance RepeatGesture<A>, &lazy cache variable for type metadata for RepeatGesture<TappableEvent>, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for RepeatGesture, (uint64_t)&protocol conformance descriptor for RepeatGesture<A>);
    lazy protocol witness table accessor for type SingleTapGesture<TappableEvent> and conformance SingleTapGesture<A>();
    type metadata accessor for ModifierGesture();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UniqueID and conformance UniqueID()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UniqueID and conformance UniqueID;
  if (!lazy protocol witness table cache variable for type UniqueID and conformance UniqueID)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UniqueID, &type metadata for UniqueID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UniqueID and conformance UniqueID);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UniqueID and conformance UniqueID;
  if (!lazy protocol witness table cache variable for type UniqueID and conformance UniqueID)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UniqueID, &type metadata for UniqueID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UniqueID and conformance UniqueID);
  }
  return result;
}

uint64_t outlined init with copy of CoordinateSpaceElement(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for TimeDataFormattingContainer(a2, a1);
  return a2;
}

unint64_t lazy protocol witness table accessor for type CoordinateSpaceElement and conformance CoordinateSpaceElement()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CoordinateSpaceElement and conformance CoordinateSpaceElement;
  if (!lazy protocol witness table cache variable for type CoordinateSpaceElement and conformance CoordinateSpaceElement)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CoordinateSpaceElement, &type metadata for CoordinateSpaceElement);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CoordinateSpaceElement and conformance CoordinateSpaceElement);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CoordinateSpaceElement and conformance CoordinateSpaceElement;
  if (!lazy protocol witness table cache variable for type CoordinateSpaceElement and conformance CoordinateSpaceElement)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CoordinateSpaceElement, &type metadata for CoordinateSpaceElement);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CoordinateSpaceElement and conformance CoordinateSpaceElement);
  }
  return result;
}

uint64_t outlined destroy of CoordinateSpaceElement(uint64_t a1)
{
  destroy for ScrollPosition.ViewID();
  return a1;
}

void type metadata accessor for (key: AnyHashable, value: ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (key: AnyHashable, value: ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item))
  {
    type metadata accessor for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Info(255, (unint64_t *)&lazy cache variable for type metadata for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for ForEachState.Item);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: AnyHashable, value: ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item));
  }
}

uint64_t type metadata accessor for ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>;
  if (!lazy cache variable for type metadata for ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>)
  {
    lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children();
    type metadata accessor for ForEach();
  }
  return result;
}

uint64_t outlined assign with take of ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Date?(0, &lazy cache variable for type metadata for ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>?, (void (*)(uint64_t))type metadata accessor for ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

BOOL partial apply for closure #1 in closure #1 in _VariadicView_Children.subscript.getter(uint64_t *a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in _VariadicView_Children.subscript.getter(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t outlined destroy of _VariadicView_Children.Element(uint64_t a1)
{
  destroy for _VariadicView_Children.Element(a1);
  return a1;
}

uint64_t outlined assign with take of _VariadicView_Children(uint64_t a1, uint64_t a2)
{
  assignWithTake for _VariadicView_Children(a2, a1);
  return a2;
}

uint64_t sub_234E456E8()
{
  return swift_deallocObject();
}

uint64_t sub_234E4575C()
{
  uint64_t v0;

  outlined consume of ContentTransition.Storage(*(_QWORD *)(v0 + 16), *(unsigned int *)(v0 + 24) | ((unint64_t)*(unsigned __int8 *)(v0 + 28) << 32), *(_BYTE *)(v0 + 29));
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined destroy of TimelineSchedule?(uint64_t a1)
{
  uint64_t v2;

  _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, &lazy cache variable for type metadata for TimelineSchedule?, (unint64_t *)&lazy cache variable for type metadata for TimelineSchedule, (uint64_t)&protocol descriptor for TimelineSchedule, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of BaseViewList.Init(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for BaseViewList.Init(a2, a1);
  return a2;
}

uint64_t outlined destroy of BaseViewList.Init(uint64_t a1)
{
  destroy for BaseViewList.Init(a1);
  return a1;
}

uint64_t outlined release of PlatformImageRepresentableContext(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 104);
  v3 = *(_QWORD *)(a1 + 112);
  v4 = *(_QWORD *)(a1 + 120);
  v5 = *(void **)(a1 + 168);
  outlined consume of GraphicsImage.Contents?(*(void **)a1, *(_BYTE *)(a1 + 8));
  outlined consume of AccessibilityImageLabel?(v2, v3, v4);
  swift_unknownObjectRelease();
  swift_release();

  swift_release();
  swift_release();
  return a1;
}

uint64_t (*partial apply for closure #1 in closure #1 in Attribute.init<A>(_:)())(uint64_t a1, uint64_t a2)
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v1;
  v3 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v2 + 24) = v3;
  *(_QWORD *)(v2 + 40) = v3;
  return partial apply for implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t sub_234E45948()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, v2[5], v2[2], v2[3], v2[4]);
}

uint64_t (*partial apply for closure #1 in closure #1 in Attribute.init<A>(_:)())()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v1;
  v3 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v2 + 24) = v3;
  *(_QWORD *)(v2 + 40) = v3;
  return partial apply for implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t sub_234E459B0()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)()
{
  return dispatch thunk of StatefulRule.updateValue()();
}

uint64_t type metadata completion function for UnaryPositionAwareLayoutEngine()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for UnaryPositionAwareLayoutEngine(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((v6 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 15) & 0xFFFFFFFFFFFFFFFCLL) + 19) & 0xFFFFFFFFFFFFFFF8) + 161 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = ((unint64_t)v4 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v11 = ((unint64_t)a2 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v12 = *(_QWORD *)v11;
    *(_DWORD *)(v10 + 8) = *(_DWORD *)(v11 + 8);
    *(_QWORD *)v10 = v12;
    v13 = (v10 + 15) & 0xFFFFFFFFFFFFFFFCLL;
    v14 = (v11 + 15) & 0xFFFFFFFFFFFFFFFCLL;
    LODWORD(v12) = *(_DWORD *)(v14 + 8);
    *(_QWORD *)v13 = *(_QWORD *)v14;
    *(_DWORD *)(v13 + 8) = v12;
    v15 = (v13 + 19) & 0xFFFFFFFFFFFFFFF8;
    v16 = (v14 + 19) & 0xFFFFFFFFFFFFFFF8;
    v18 = *(_OWORD *)(v16 + 16);
    v17 = *(_OWORD *)(v16 + 32);
    *(_OWORD *)v15 = *(_OWORD *)v16;
    *(_OWORD *)(v15 + 16) = v18;
    *(_OWORD *)(v15 + 32) = v17;
    v19 = *(_OWORD *)(v16 + 96);
    v21 = *(_OWORD *)(v16 + 48);
    v20 = *(_OWORD *)(v16 + 64);
    *(_OWORD *)(v15 + 80) = *(_OWORD *)(v16 + 80);
    *(_OWORD *)(v15 + 96) = v19;
    *(_OWORD *)(v15 + 48) = v21;
    *(_OWORD *)(v15 + 64) = v20;
    v23 = *(_OWORD *)(v16 + 128);
    v22 = *(_OWORD *)(v16 + 144);
    v24 = *(_OWORD *)(v16 + 112);
    *(_BYTE *)(v15 + 160) = *(_BYTE *)(v16 + 160);
    *(_OWORD *)(v15 + 128) = v23;
    *(_OWORD *)(v15 + 144) = v22;
    *(_OWORD *)(v15 + 112) = v24;
  }
  return v4;
}

uint64_t initializeWithCopy for UnaryPositionAwareLayoutEngine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 3;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFFCLL;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFFCLL;
  v9 = *(_QWORD *)v8;
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
  *(_QWORD *)v7 = v9;
  v10 = (v7 + 15) & 0xFFFFFFFFFFFFFFFCLL;
  v11 = (v8 + 15) & 0xFFFFFFFFFFFFFFFCLL;
  v12 = *(_QWORD *)v11;
  *(_DWORD *)(v10 + 8) = *(_DWORD *)(v11 + 8);
  *(_QWORD *)v10 = v12;
  v13 = (v10 + 19) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v11 + 19) & 0xFFFFFFFFFFFFFFF8;
  v15 = *(_OWORD *)(v14 + 32);
  v16 = *(_OWORD *)v14;
  *(_OWORD *)(v13 + 16) = *(_OWORD *)(v14 + 16);
  *(_OWORD *)(v13 + 32) = v15;
  *(_OWORD *)v13 = v16;
  v17 = *(_OWORD *)(v14 + 96);
  v19 = *(_OWORD *)(v14 + 48);
  v18 = *(_OWORD *)(v14 + 64);
  *(_OWORD *)(v13 + 80) = *(_OWORD *)(v14 + 80);
  *(_OWORD *)(v13 + 96) = v17;
  *(_OWORD *)(v13 + 48) = v19;
  *(_OWORD *)(v13 + 64) = v18;
  v21 = *(_OWORD *)(v14 + 128);
  v20 = *(_OWORD *)(v14 + 144);
  v22 = *(_OWORD *)(v14 + 112);
  *(_BYTE *)(v13 + 160) = *(_BYTE *)(v14 + 160);
  *(_OWORD *)(v13 + 128) = v21;
  *(_OWORD *)(v13 + 144) = v20;
  *(_OWORD *)(v13 + 112) = v22;
  return a1;
}

uint64_t assignWithCopy for UnaryPositionAwareLayoutEngine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 3;
  v7 = (_DWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *v7 = *v8;
  v7[1] = v8[1];
  v7[2] = v8[2];
  v9 = (_DWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFFCLL);
  v10 = (_DWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFFCLL);
  *v9 = *v10;
  v9[1] = v10[1];
  v9[2] = v10[2];
  v11 = ((unint64_t)v9 + 19) & 0xFFFFFFFFFFFFFFF8;
  v12 = ((unint64_t)v10 + 19) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_BYTE *)(v12 + 48);
  v15 = *(_OWORD *)(v12 + 16);
  v14 = *(_OWORD *)(v12 + 32);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *(_OWORD *)(v11 + 16) = v15;
  *(_OWORD *)(v11 + 32) = v14;
  *(_BYTE *)(v11 + 48) = v13;
  v16 = *(_OWORD *)(v12 + 56);
  v17 = *(_OWORD *)(v12 + 72);
  v18 = *(_OWORD *)(v12 + 88);
  *(_BYTE *)(v11 + 104) = *(_BYTE *)(v12 + 104);
  *(_OWORD *)(v11 + 88) = v18;
  *(_OWORD *)(v11 + 72) = v17;
  *(_OWORD *)(v11 + 56) = v16;
  v19 = *(_OWORD *)(v12 + 112);
  v20 = *(_OWORD *)(v12 + 128);
  v21 = *(_OWORD *)(v12 + 144);
  *(_BYTE *)(v11 + 160) = *(_BYTE *)(v12 + 160);
  *(_OWORD *)(v11 + 128) = v20;
  *(_OWORD *)(v11 + 144) = v21;
  *(_OWORD *)(v11 + 112) = v19;
  return a1;
}

uint64_t initializeWithTake for UnaryPositionAwareLayoutEngine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 3;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFFCLL;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFFCLL;
  v9 = *(_QWORD *)v8;
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
  *(_QWORD *)v7 = v9;
  v10 = (v7 + 15) & 0xFFFFFFFFFFFFFFFCLL;
  v11 = (v8 + 15) & 0xFFFFFFFFFFFFFFFCLL;
  v12 = *(_QWORD *)v11;
  *(_DWORD *)(v10 + 8) = *(_DWORD *)(v11 + 8);
  *(_QWORD *)v10 = v12;
  v13 = (v10 + 19) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v11 + 19) & 0xFFFFFFFFFFFFFFF8;
  v15 = *(_OWORD *)(v14 + 32);
  v16 = *(_OWORD *)v14;
  *(_OWORD *)(v13 + 16) = *(_OWORD *)(v14 + 16);
  *(_OWORD *)(v13 + 32) = v15;
  *(_OWORD *)v13 = v16;
  v17 = *(_OWORD *)(v14 + 96);
  v19 = *(_OWORD *)(v14 + 48);
  v18 = *(_OWORD *)(v14 + 64);
  *(_OWORD *)(v13 + 80) = *(_OWORD *)(v14 + 80);
  *(_OWORD *)(v13 + 96) = v17;
  *(_OWORD *)(v13 + 48) = v19;
  *(_OWORD *)(v13 + 64) = v18;
  v21 = *(_OWORD *)(v14 + 128);
  v20 = *(_OWORD *)(v14 + 144);
  v22 = *(_OWORD *)(v14 + 112);
  *(_BYTE *)(v13 + 160) = *(_BYTE *)(v14 + 160);
  *(_OWORD *)(v13 + 128) = v21;
  *(_OWORD *)(v13 + 144) = v20;
  *(_OWORD *)(v13 + 112) = v22;
  return a1;
}

uint64_t assignWithTake for UnaryPositionAwareLayoutEngine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 3;
  v7 = (_DWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *v7 = *v8;
  v7[1] = v8[1];
  v7[2] = v8[2];
  v9 = (_DWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFFCLL);
  v10 = (_DWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFFCLL);
  *v9 = *v10;
  v9[1] = v10[1];
  v9[2] = v10[2];
  v11 = ((unint64_t)v9 + 19) & 0xFFFFFFFFFFFFFFF8;
  v12 = ((unint64_t)v10 + 19) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_BYTE *)(v12 + 48);
  v15 = *(_OWORD *)(v12 + 16);
  v14 = *(_OWORD *)(v12 + 32);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *(_OWORD *)(v11 + 16) = v15;
  *(_OWORD *)(v11 + 32) = v14;
  *(_BYTE *)(v11 + 48) = v13;
  v16 = *(_OWORD *)(v12 + 56);
  v17 = *(_OWORD *)(v12 + 72);
  v18 = *(_OWORD *)(v12 + 88);
  *(_BYTE *)(v11 + 104) = *(_BYTE *)(v12 + 104);
  *(_OWORD *)(v11 + 88) = v18;
  *(_OWORD *)(v11 + 72) = v17;
  *(_OWORD *)(v11 + 56) = v16;
  v19 = *(_OWORD *)(v12 + 112);
  v20 = *(_OWORD *)(v12 + 128);
  v21 = *(_OWORD *)(v12 + 144);
  *(_BYTE *)(v11 + 160) = *(_BYTE *)(v12 + 160);
  *(_OWORD *)(v11 + 128) = v20;
  *(_OWORD *)(v11 + 144) = v21;
  *(_OWORD *)(v11 + 112) = v19;
  return a1;
}

uint64_t getEnumTagSinglePayload for UnaryPositionAwareLayoutEngine(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(void))(v4 + 48))();
    return 0;
  }
  v6 = (a2 - v5 + 255) >> (8 * (((((((*(_BYTE *)(v4 + 64) + 3) & 0xFC) + 15) & 0xFC) + 19) & 0xF8) - 95));
  if (((((((*(_DWORD *)(v4 + 64) + 3) & 0xFFFFFFFC) + 15) & 0xFFFFFFFC) + 19) & 0xFFFFFFF8) + 161 < 4)
    v7 = v6 + 1;
  else
    v7 = 2;
  if (v7 >= 0x10000)
    v8 = 4;
  else
    v8 = 2;
  if (v7 < 0x100)
    v8 = 1;
  if (v7 >= 2)
    v9 = v8;
  else
    v9 = 0;
  return ((uint64_t (*)(void))((char *)&loc_234E45F8C + 4 * byte_2352A5DF5[v9]))();
}

void storeEnumTagSinglePayload for UnaryPositionAwareLayoutEngine(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = ((((((*(_QWORD *)(v6 + 64) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 15) & 0xFFFFFFFFFFFFFFFCLL) + 19) & 0xFFFFFFFFFFFFFFF8)
     + 161;
  if (v7 >= a3)
  {
    v12 = 0;
    if (v7 >= a2)
      goto LABEL_14;
  }
  else
  {
    v9 = (a3 - v7 + 255) >> (8 * (((((((*(_BYTE *)(v6 + 64) + 3) & 0xFC) + 15) & 0xFC) + 19) & 0xF8) - 95));
    if (v8 <= 3)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    if (v7 >= a2)
LABEL_14:
      __asm { BR              X11 }
  }
  if (v8 >= 4)
    v13 = ~v7 + a2;
  else
    v13 = (~(_BYTE)v7 + a2);
  bzero(a1, v8);
  if ((_DWORD)v8 == 1)
    *a1 = v13;
  else
    *(_DWORD *)a1 = v13;
  __asm { BR              X10 }
}

void sub_234E46114()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_234E4611C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x234E46124);
}

void sub_234E46140()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_234E46148()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_234E46150(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v4 + v5) = 0;
  if (!a2)
    JUMPOUT(0x234E46158);
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

uint64_t type metadata completion function for UnaryLayoutEngine()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for UnaryLayoutEngine(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((v6 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 15) & 0xFFFFFFFFFFFFFFFCLL) + 187) & 0xFFFFFFFFFFFFFFF8) + 305 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = ((unint64_t)v4 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v11 = ((unint64_t)a2 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v12 = *(_QWORD *)v11;
    *(_DWORD *)(v10 + 8) = *(_DWORD *)(v11 + 8);
    *(_QWORD *)v10 = v12;
    v13 = (v10 + 15) & 0xFFFFFFFFFFFFFFFCLL;
    v14 = (v11 + 15) & 0xFFFFFFFFFFFFFFFCLL;
    LODWORD(v12) = *(_DWORD *)(v14 + 8);
    *(_QWORD *)v13 = *(_QWORD *)v14;
    *(_DWORD *)(v13 + 8) = v12;
    v15 = (v13 + 19) & 0xFFFFFFFFFFFFFFF8;
    v16 = (v14 + 19) & 0xFFFFFFFFFFFFFFF8;
    v18 = *(_OWORD *)(v16 + 16);
    v17 = *(_OWORD *)(v16 + 32);
    *(_OWORD *)v15 = *(_OWORD *)v16;
    *(_OWORD *)(v15 + 16) = v18;
    *(_OWORD *)(v15 + 32) = v17;
    v19 = *(_OWORD *)(v16 + 96);
    v21 = *(_OWORD *)(v16 + 48);
    v20 = *(_OWORD *)(v16 + 64);
    *(_OWORD *)(v15 + 80) = *(_OWORD *)(v16 + 80);
    *(_OWORD *)(v15 + 96) = v19;
    *(_OWORD *)(v15 + 48) = v21;
    *(_OWORD *)(v15 + 64) = v20;
    v23 = *(_OWORD *)(v16 + 128);
    v22 = *(_OWORD *)(v16 + 144);
    v24 = *(_OWORD *)(v16 + 112);
    *(_BYTE *)(v15 + 160) = *(_BYTE *)(v16 + 160);
    *(_OWORD *)(v15 + 128) = v23;
    *(_OWORD *)(v15 + 144) = v22;
    *(_OWORD *)(v15 + 112) = v24;
    memcpy((void *)((v13 + 187) & 0xFFFFFFFFFFFFFFF8), (const void *)((v14 + 187) & 0xFFFFFFFFFFFFFFF8), 0x131uLL);
  }
  return v4;
}

uint64_t initializeWithCopy for UnaryLayoutEngine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 3;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFFCLL;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFFCLL;
  v9 = *(_QWORD *)v8;
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
  *(_QWORD *)v7 = v9;
  v10 = (v7 + 15) & 0xFFFFFFFFFFFFFFFCLL;
  v11 = (v8 + 15) & 0xFFFFFFFFFFFFFFFCLL;
  v12 = *(_QWORD *)v11;
  *(_DWORD *)(v10 + 8) = *(_DWORD *)(v11 + 8);
  *(_QWORD *)v10 = v12;
  v13 = (v10 + 19) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v11 + 19) & 0xFFFFFFFFFFFFFFF8;
  v15 = *(_OWORD *)(v14 + 32);
  v16 = *(_OWORD *)v14;
  *(_OWORD *)(v13 + 16) = *(_OWORD *)(v14 + 16);
  *(_OWORD *)(v13 + 32) = v15;
  *(_OWORD *)v13 = v16;
  v17 = *(_OWORD *)(v14 + 96);
  v19 = *(_OWORD *)(v14 + 48);
  v18 = *(_OWORD *)(v14 + 64);
  *(_OWORD *)(v13 + 80) = *(_OWORD *)(v14 + 80);
  *(_OWORD *)(v13 + 96) = v17;
  *(_OWORD *)(v13 + 48) = v19;
  *(_OWORD *)(v13 + 64) = v18;
  v21 = *(_OWORD *)(v14 + 128);
  v20 = *(_OWORD *)(v14 + 144);
  v22 = *(_OWORD *)(v14 + 112);
  *(_BYTE *)(v13 + 160) = *(_BYTE *)(v14 + 160);
  *(_OWORD *)(v13 + 128) = v21;
  *(_OWORD *)(v13 + 144) = v20;
  *(_OWORD *)(v13 + 112) = v22;
  memcpy((void *)((v10 + 187) & 0xFFFFFFFFFFFFFFF8), (const void *)((v11 + 187) & 0xFFFFFFFFFFFFFFF8), 0x131uLL);
  return a1;
}

uint64_t assignWithCopy for UnaryLayoutEngine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 3;
  v7 = (_DWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *v7 = *v8;
  v7[1] = v8[1];
  v7[2] = v8[2];
  v9 = (_DWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFFCLL);
  v10 = (_DWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFFCLL);
  *v9 = *v10;
  v9[1] = v10[1];
  v9[2] = v10[2];
  v11 = ((unint64_t)v9 + 19) & 0xFFFFFFFFFFFFFFF8;
  v12 = ((unint64_t)v10 + 19) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_BYTE *)(v12 + 48);
  v15 = *(_OWORD *)(v12 + 16);
  v14 = *(_OWORD *)(v12 + 32);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *(_OWORD *)(v11 + 16) = v15;
  *(_OWORD *)(v11 + 32) = v14;
  *(_BYTE *)(v11 + 48) = v13;
  v16 = *(_OWORD *)(v12 + 56);
  v17 = *(_OWORD *)(v12 + 72);
  v18 = *(_OWORD *)(v12 + 88);
  *(_BYTE *)(v11 + 104) = *(_BYTE *)(v12 + 104);
  *(_OWORD *)(v11 + 88) = v18;
  *(_OWORD *)(v11 + 72) = v17;
  *(_OWORD *)(v11 + 56) = v16;
  v19 = *(_OWORD *)(v12 + 112);
  v20 = *(_OWORD *)(v12 + 128);
  v21 = *(_OWORD *)(v12 + 144);
  *(_BYTE *)(v11 + 160) = *(_BYTE *)(v12 + 160);
  *(_OWORD *)(v11 + 128) = v20;
  *(_OWORD *)(v11 + 144) = v21;
  *(_OWORD *)(v11 + 112) = v19;
  v22 = ((unint64_t)v9 + 187) & 0xFFFFFFFFFFFFFFF8;
  v23 = ((unint64_t)v10 + 187) & 0xFFFFFFFFFFFFFFF8;
  v25 = *(_OWORD *)(v23 + 64);
  v24 = *(_OWORD *)(v23 + 80);
  v26 = *(_OWORD *)(v23 + 48);
  *(_BYTE *)(v22 + 96) = *(_BYTE *)(v23 + 96);
  *(_OWORD *)(v22 + 64) = v25;
  *(_OWORD *)(v22 + 80) = v24;
  *(_OWORD *)(v22 + 48) = v26;
  v27 = *(_OWORD *)v23;
  v28 = *(_OWORD *)(v23 + 32);
  *(_OWORD *)(v22 + 16) = *(_OWORD *)(v23 + 16);
  *(_OWORD *)(v22 + 32) = v28;
  *(_OWORD *)v22 = v27;
  v29 = *(_OWORD *)(v23 + 136);
  v30 = *(_OWORD *)(v23 + 120);
  *(_OWORD *)(v22 + 104) = *(_OWORD *)(v23 + 104);
  *(_OWORD *)(v22 + 120) = v30;
  *(_OWORD *)(v22 + 136) = v29;
  LOBYTE(v11) = *(_BYTE *)(v23 + 200);
  v31 = *(_OWORD *)(v23 + 184);
  v32 = *(_OWORD *)(v23 + 168);
  *(_OWORD *)(v22 + 152) = *(_OWORD *)(v23 + 152);
  *(_OWORD *)(v22 + 168) = v32;
  *(_OWORD *)(v22 + 184) = v31;
  *(_BYTE *)(v22 + 200) = v11;
  v34 = *(_OWORD *)(v23 + 272);
  v33 = *(_OWORD *)(v23 + 288);
  v35 = *(_OWORD *)(v23 + 256);
  *(_BYTE *)(v22 + 304) = *(_BYTE *)(v23 + 304);
  *(_OWORD *)(v22 + 256) = v35;
  *(_OWORD *)(v22 + 272) = v34;
  *(_OWORD *)(v22 + 288) = v33;
  v36 = *(_OWORD *)(v23 + 208);
  v37 = *(_OWORD *)(v23 + 240);
  *(_OWORD *)(v22 + 224) = *(_OWORD *)(v23 + 224);
  *(_OWORD *)(v22 + 240) = v37;
  *(_OWORD *)(v22 + 208) = v36;
  return a1;
}

uint64_t initializeWithTake for UnaryLayoutEngine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 3;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFFCLL;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFFCLL;
  v9 = *(_QWORD *)v8;
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
  *(_QWORD *)v7 = v9;
  v10 = (v7 + 15) & 0xFFFFFFFFFFFFFFFCLL;
  v11 = (v8 + 15) & 0xFFFFFFFFFFFFFFFCLL;
  v12 = *(_QWORD *)v11;
  *(_DWORD *)(v10 + 8) = *(_DWORD *)(v11 + 8);
  *(_QWORD *)v10 = v12;
  v13 = (v10 + 19) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v11 + 19) & 0xFFFFFFFFFFFFFFF8;
  v15 = *(_OWORD *)(v14 + 32);
  v16 = *(_OWORD *)v14;
  *(_OWORD *)(v13 + 16) = *(_OWORD *)(v14 + 16);
  *(_OWORD *)(v13 + 32) = v15;
  *(_OWORD *)v13 = v16;
  v17 = *(_OWORD *)(v14 + 96);
  v19 = *(_OWORD *)(v14 + 48);
  v18 = *(_OWORD *)(v14 + 64);
  *(_OWORD *)(v13 + 80) = *(_OWORD *)(v14 + 80);
  *(_OWORD *)(v13 + 96) = v17;
  *(_OWORD *)(v13 + 48) = v19;
  *(_OWORD *)(v13 + 64) = v18;
  v21 = *(_OWORD *)(v14 + 128);
  v20 = *(_OWORD *)(v14 + 144);
  v22 = *(_OWORD *)(v14 + 112);
  *(_BYTE *)(v13 + 160) = *(_BYTE *)(v14 + 160);
  *(_OWORD *)(v13 + 128) = v21;
  *(_OWORD *)(v13 + 144) = v20;
  *(_OWORD *)(v13 + 112) = v22;
  memcpy((void *)((v10 + 187) & 0xFFFFFFFFFFFFFFF8), (const void *)((v11 + 187) & 0xFFFFFFFFFFFFFFF8), 0x131uLL);
  return a1;
}

uint64_t assignWithTake for UnaryLayoutEngine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 3;
  v7 = (_DWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *v7 = *v8;
  v7[1] = v8[1];
  v7[2] = v8[2];
  v9 = (_DWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFFCLL);
  v10 = (_DWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFFCLL);
  *v9 = *v10;
  v9[1] = v10[1];
  v9[2] = v10[2];
  v11 = ((unint64_t)v9 + 19) & 0xFFFFFFFFFFFFFFF8;
  v12 = ((unint64_t)v10 + 19) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_BYTE *)(v12 + 48);
  v15 = *(_OWORD *)(v12 + 16);
  v14 = *(_OWORD *)(v12 + 32);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *(_OWORD *)(v11 + 16) = v15;
  *(_OWORD *)(v11 + 32) = v14;
  *(_BYTE *)(v11 + 48) = v13;
  v16 = *(_OWORD *)(v12 + 56);
  v17 = *(_OWORD *)(v12 + 72);
  v18 = *(_OWORD *)(v12 + 88);
  *(_BYTE *)(v11 + 104) = *(_BYTE *)(v12 + 104);
  *(_OWORD *)(v11 + 88) = v18;
  *(_OWORD *)(v11 + 72) = v17;
  *(_OWORD *)(v11 + 56) = v16;
  v19 = *(_OWORD *)(v12 + 112);
  v20 = *(_OWORD *)(v12 + 128);
  v21 = *(_OWORD *)(v12 + 144);
  *(_BYTE *)(v11 + 160) = *(_BYTE *)(v12 + 160);
  *(_OWORD *)(v11 + 128) = v20;
  *(_OWORD *)(v11 + 144) = v21;
  *(_OWORD *)(v11 + 112) = v19;
  v22 = ((unint64_t)v9 + 187) & 0xFFFFFFFFFFFFFFF8;
  v23 = ((unint64_t)v10 + 187) & 0xFFFFFFFFFFFFFFF8;
  v25 = *(_OWORD *)(v23 + 64);
  v24 = *(_OWORD *)(v23 + 80);
  v26 = *(_OWORD *)(v23 + 48);
  *(_BYTE *)(v22 + 96) = *(_BYTE *)(v23 + 96);
  *(_OWORD *)(v22 + 64) = v25;
  *(_OWORD *)(v22 + 80) = v24;
  *(_OWORD *)(v22 + 48) = v26;
  v27 = *(_OWORD *)v23;
  v28 = *(_OWORD *)(v23 + 32);
  *(_OWORD *)(v22 + 16) = *(_OWORD *)(v23 + 16);
  *(_OWORD *)(v22 + 32) = v28;
  *(_OWORD *)v22 = v27;
  v29 = *(_OWORD *)(v23 + 136);
  v30 = *(_OWORD *)(v23 + 120);
  *(_OWORD *)(v22 + 104) = *(_OWORD *)(v23 + 104);
  *(_OWORD *)(v22 + 120) = v30;
  *(_OWORD *)(v22 + 136) = v29;
  LOBYTE(v11) = *(_BYTE *)(v23 + 200);
  v31 = *(_OWORD *)(v23 + 184);
  v32 = *(_OWORD *)(v23 + 168);
  *(_OWORD *)(v22 + 152) = *(_OWORD *)(v23 + 152);
  *(_OWORD *)(v22 + 168) = v32;
  *(_OWORD *)(v22 + 184) = v31;
  *(_BYTE *)(v22 + 200) = v11;
  v34 = *(_OWORD *)(v23 + 272);
  v33 = *(_OWORD *)(v23 + 288);
  v35 = *(_OWORD *)(v23 + 256);
  *(_BYTE *)(v22 + 304) = *(_BYTE *)(v23 + 304);
  *(_OWORD *)(v22 + 256) = v35;
  *(_OWORD *)(v22 + 272) = v34;
  *(_OWORD *)(v22 + 288) = v33;
  v36 = *(_OWORD *)(v23 + 208);
  v37 = *(_OWORD *)(v23 + 240);
  *(_OWORD *)(v22 + 224) = *(_OWORD *)(v23 + 224);
  *(_OWORD *)(v22 + 240) = v37;
  *(_OWORD *)(v22 + 208) = v36;
  return a1;
}

uint64_t getEnumTagSinglePayload for UnaryLayoutEngine(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(void))(v4 + 48))();
    return 0;
  }
  v6 = (a2 - v5 + 255) >> (8 * (((((((*(_BYTE *)(v4 + 64) + 3) & 0xFC) + 15) & 0xFC) - 69) & 0xF8) + 49));
  if (((((((*(_DWORD *)(v4 + 64) + 3) & 0xFFFFFFFC) + 15) & 0xFFFFFFFC) + 187) & 0xFFFFFFF8) + 305 < 4)
    v7 = v6 + 1;
  else
    v7 = 2;
  if (v7 >= 0x10000)
    v8 = 4;
  else
    v8 = 2;
  if (v7 < 0x100)
    v8 = 1;
  if (v7 >= 2)
    v9 = v8;
  else
    v9 = 0;
  return ((uint64_t (*)(void))((char *)&loc_234E468A4 + 4 * byte_2352A5E04[v9]))();
}

void storeEnumTagSinglePayload for UnaryLayoutEngine(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = ((((((*(_QWORD *)(v6 + 64) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 15) & 0xFFFFFFFFFFFFFFFCLL) + 187) & 0xFFFFFFFFFFFFFFF8)
     + 305;
  if (v7 >= a3)
  {
    v12 = 0;
    if (v7 >= a2)
      goto LABEL_14;
  }
  else
  {
    v9 = (a3 - v7 + 255) >> (8 * (((((((*(_BYTE *)(v6 + 64) + 3) & 0xFC) + 15) & 0xFC) - 69) & 0xF8) + 49));
    if (v8 <= 3)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    if (v7 >= a2)
LABEL_14:
      __asm { BR              X11 }
  }
  if (v8 >= 4)
    v13 = ~v7 + a2;
  else
    v13 = (~(_BYTE)v7 + a2);
  bzero(a1, v8);
  if ((_DWORD)v8 == 1)
    *a1 = v13;
  else
    *(_DWORD *)a1 = v13;
  __asm { BR              X10 }
}

void sub_234E46A2C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_234E46A34(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x234E46A3CLL);
}

void sub_234E46A58()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_234E46A60()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_234E46A68(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v4 + v5) = 0;
  if (!a2)
    JUMPOUT(0x234E46A70);
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

uint64_t sub_234E46A88()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF10Foundation4DateV_s5NeverOSbTg5(void (*a1)(uint64_t *__return_ptr, char *))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  void (*v13)(uint64_t *__return_ptr, char *);
  uint64_t v14;

  v13 = a1;
  v3 = type metadata accessor for Date();
  v4 = (void (*)(uint64_t))MEMORY[0x24BDCE900];
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for Date?, v4);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v12 - v9;
  _s7SwiftUI34AccessibilityTextAttributeResolver_pSgWOcTm_0(v1, (uint64_t)&v12 - v9, &lazy cache variable for type metadata for Date?, v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v3) == 1)
    return 2;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v3);
  v13(&v14, v7);
  if (v2)
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v3);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v3);
  return v14;
}

_QWORD *_sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFSd_s5NeverO7SwiftUI14AnimatablePairVyAHy12CoreGraphics7CGFloatVAKGALGTg5@<X0>(_QWORD *result@<X0>, uint64_t a2@<X2>, char a3@<W3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  __int128 v7;
  __int128 v8;
  _OWORD v9[3];
  uint64_t v10;

  v7 = 0uLL;
  if ((a3 & 1) != 0)
  {
    v8 = 0uLL;
  }
  else
  {
    v10 = a2;
    result = ((_QWORD *(*)(_OWORD *__return_ptr, uint64_t *, __n128))result)(v9, &v10, (__n128)0);
    if (v4)
      return result;
    v7 = v9[0];
    v8 = v9[1];
  }
  *(_OWORD *)a4 = v7;
  *(_OWORD *)(a4 + 16) = v8;
  *(_BYTE *)(a4 + 32) = a3 & 1;
  return result;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF10Foundation4DateV_s5NeverOSdTg5(void (*a1)(_QWORD *__return_ptr, char *))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD v12[2];
  void (*v13)(_QWORD *__return_ptr, char *);

  v13 = a1;
  v3 = type metadata accessor for Date();
  v4 = (void (*)(uint64_t))MEMORY[0x24BDCE900];
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for Date?, v4);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v12 - v9;
  _s7SwiftUI34AccessibilityTextAttributeResolver_pSgWOcTm_0(v1, (uint64_t)v12 - v9, &lazy cache variable for type metadata for Date?, v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v3) == 1)
    return 0;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v3);
  v13(v12, v7);
  if (v2)
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v3);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v3);
  return v12[0];
}

_QWORD *_sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI30_PositionAwarePlacementContextV_s5NeverOytTB5(_QWORD *(*a1)(uint64_t *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *result;
  _QWORD v9[3];
  int v10;
  uint64_t v11;

  if ((a6 & 0x100000000) != 0)
    return (_QWORD *)((a6 & 0x100000000uLL) >> 32);
  v9[0] = a3;
  v9[1] = a4;
  v9[2] = a5;
  v10 = a6;
  result = a1(&v11, v9);
  if (!v6)
    return (_QWORD *)((a6 & 0x100000000uLL) >> 32);
  return result;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI30_EnvironmentKeyWritingModifierVyAD4FontVSgG_s5NeverOSbTg5(void (*a1)(uint64_t *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;

  if (!a3)
    return 2;
  v7[0] = a3;
  v7[1] = a4;
  swift_retain();
  swift_retain();
  a1(&v8, v7);
  swift_release();
  result = swift_release();
  if (!v4)
    return v8;
  return result;
}

uint64_t GeometryProxy.init(owner:size:environment:transform:position:safeAreaInsets:seed:)@<X0>(int a1@<W6>, uint64_t a2@<X8>)
{
  unint64_t v3;
  int v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t result;
  unint64_t v17;
  unint64_t v18;

  v3 = AGCreateWeakAttribute();
  v4 = v3;
  v18 = HIDWORD(v3);
  v5 = AGCreateWeakAttribute();
  v6 = v5;
  v17 = HIDWORD(v5);
  v7 = AGCreateWeakAttribute();
  v8 = v7;
  v9 = HIDWORD(v7);
  v10 = AGCreateWeakAttribute();
  v11 = v10;
  v12 = HIDWORD(v10);
  v13 = AGCreateWeakAttribute();
  v14 = v13;
  v15 = HIDWORD(v13);
  result = AGCreateWeakAttribute();
  *(_DWORD *)a2 = v4;
  *(_DWORD *)(a2 + 4) = v18;
  *(_DWORD *)(a2 + 8) = v6;
  *(_DWORD *)(a2 + 12) = v17;
  *(_DWORD *)(a2 + 16) = v8;
  *(_DWORD *)(a2 + 20) = v9;
  *(_DWORD *)(a2 + 24) = v11;
  *(_DWORD *)(a2 + 28) = v12;
  *(_DWORD *)(a2 + 32) = v14;
  *(_DWORD *)(a2 + 36) = v15;
  *(_QWORD *)(a2 + 40) = result;
  *(_DWORD *)(a2 + 48) = a1;
  return result;
}

_QWORD *GeometryProxy.asCurrent<A>(do:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v7;
  __int128 v8;
  unint64_t v9;
  uint64_t v11;
  _OWORD v12[3];
  int v13;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v7 = *(_DWORD *)(v3 + 48);
  _threadGeometryProxyData();
  v8 = *(_OWORD *)(v3 + 16);
  v12[0] = *(_OWORD *)v3;
  v12[1] = v8;
  v12[2] = *(_OWORD *)(v3 + 32);
  v13 = v7;
  v15 = a3;
  v16 = a1;
  v17 = a2;
  v9 = type metadata accessor for Error();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v12, (uint64_t)partial apply for closure #1 in GeometryProxy.asCurrent<A>(do:), (uint64_t)v14, (uint64_t)&type metadata for GeometryProxy, v9, a3, MEMORY[0x24BEE3F20], (uint64_t)&v11);
  return _setThreadGeometryProxyData();
}

uint64_t GeometryReader.content.getter(uint64_t a1)
{
  swift_retain();
  return a1;
}

uint64_t GeometryReader.content.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_release();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*GeometryReader.content.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t static GeometryReader._makeView(view:inputs:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t KeyPath;
  unsigned int v27;
  unsigned int v28;
  unsigned int OffsetAttribute2;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t result;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  int v48;
  char v49[16];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unsigned int v54;
  unsigned int v55;
  __int128 v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v7 = *a1;
  v8 = *(_QWORD *)a2;
  v42 = *(_DWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_DWORD *)(a2 + 36);
  v38 = *(_DWORD *)(a2 + 32);
  v37 = *(_QWORD *)(a2 + 40);
  v36 = *(_QWORD *)(a2 + 48);
  v12 = *(_DWORD *)(a2 + 60);
  v40 = *(_DWORD *)(a2 + 56);
  v13 = *(_DWORD *)(a2 + 64);
  v39 = *(_DWORD *)(a2 + 68);
  v14 = *(_DWORD *)(a2 + 72);
  v46 = *(_QWORD *)(a2 + 76);
  swift_beginAccess();
  v15 = *(_DWORD *)(v9 + 16);
  v53 = __PAIR64__(v14, v7);
  v54 = v13;
  v55 = v12;
  v41 = v12;
  LODWORD(v56) = v15;
  *(_QWORD *)((char *)&v56 + 4) = v46;
  type metadata accessor for _LayoutRoot<GeometryReaderLayout>(255);
  v50 = type metadata accessor for _VariadicView.Tree(0, v16, a3, (uint64_t)&protocol witness table for _LayoutRoot<A>);
  v43 = a3;
  v44 = a4;
  v51 = type metadata accessor for GeometryReader.Child(0, a3, a4, v17);
  v52 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GeometryReader<A>.Child, v51);
  v18 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v53, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v49, v51, MEMORY[0x24BEE4078], v18, MEMORY[0x24BEE40A8], v19);
  v20 = (int *)MEMORY[0x24BE096C0];
  v21 = v11;
  if ((v11 & 0x20) != 0)
  {
    v35 = v11 | 2;
    KeyPath = swift_getKeyPath();
    swift_beginAccess();
    swift_retain_n();
    swift_retain_n();
    v22 = v37;
    swift_bridgeObjectRetain_n();
    v23 = v36;
    swift_bridgeObjectRetain();
    v27 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
    swift_endAccess();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v28 = *v20;
    v53 = __PAIR64__(v14, v27);
    v54 = v28;
    v55 = v28;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    lazy protocol witness table accessor for type RootGeometry and conformance RootGeometry();
    Attribute.init<A>(body:value:flags:update:)();
    v53 = __PAIR64__(AGGraphCreateOffsetAttribute2(), v13);
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    lazy protocol witness table accessor for type LayoutPositionQuery and conformance LayoutPositionQuery();
    v13 = Attribute.init<A>(body:value:flags:update:)();
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    v24 = v35;
    v14 = OffsetAttribute2;
    v25 = v38 | 0x18;
  }
  else
  {
    swift_retain();
    swift_retain();
    v22 = v37;
    swift_bridgeObjectRetain();
    v23 = v36;
    swift_bridgeObjectRetain();
    v24 = v21;
    v25 = v38;
  }
  v53 = v8;
  v54 = v42;
  *(_QWORD *)&v56 = v9;
  *((_QWORD *)&v56 + 1) = v10;
  v57 = v25;
  v58 = v24;
  v59 = v22;
  v60 = v23;
  v61 = v40;
  v62 = v41;
  v63 = v13;
  v64 = v39;
  v65 = v14;
  v66 = v46;
  v30 = closure #1 in static GeometryReader._makeView(view:inputs:)((uint64_t *)&v53, v47, v43, v44, (uint64_t)&v47);
  if ((v21 & 0x20) != 0)
  {
    MEMORY[0x24BDAC7A8](v30);
    MEMORY[0x24BDAC7A8](v31);
    AGGraphMutateAttribute();
  }
  v32 = *MEMORY[0x24BE096C0];
  v33 = v48;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  *(_QWORD *)a5 = v47;
  *(_DWORD *)(a5 + 8) = v33 | 0x80;
  *(_DWORD *)(a5 + 12) = v32;
  return result;
}

uint64_t closure #1 in static GeometryReader._makeView(view:inputs:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int ShouldRecordTree;
  char v17;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v7 = *((_DWORD *)a1 + 2);
  v29 = a1[2];
  v30 = *a1;
  v8 = *((_DWORD *)a1 + 6);
  v9 = *((_DWORD *)a1 + 7);
  v10 = *((_DWORD *)a1 + 9);
  v26 = *((_DWORD *)a1 + 8);
  v11 = a1[5];
  v12 = a1[6];
  v13 = *((_DWORD *)a1 + 14);
  v23 = *((_DWORD *)a1 + 16);
  v24 = *((_DWORD *)a1 + 15);
  v21 = *((_DWORD *)a1 + 18);
  v22 = *((_DWORD *)a1 + 17);
  v19 = *((_DWORD *)a1 + 20);
  v20 = *((_DWORD *)a1 + 19);
  type metadata accessor for _LayoutRoot<GeometryReaderLayout>(255);
  v25 = v14;
  type metadata accessor for _VariadicView.Tree(0, v14, a3, (uint64_t)&protocol witness table for _LayoutRoot<A>);
  _GraphValue.init(_:)(a2, &v32);
  v15 = v32;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  v17 = ShouldRecordTree;
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v49 = v30;
  v50 = v7;
  v51 = v29;
  v52 = v8;
  v53 = v9;
  v56 = v11;
  v57 = v12;
  v58 = v13;
  v59 = v24;
  v60 = v23;
  v61 = v22;
  v62 = v21;
  v63 = v20;
  v64 = v19;
  v54 = 0;
  v55 = v10;
  v31 = v15;
  v33 = v30;
  v34 = v7;
  v35 = v29;
  v36 = v8;
  v37 = v9;
  v38 = 0;
  v39 = v10;
  v40 = v11;
  v41 = v12;
  v42 = v13;
  v43 = v24;
  v44 = v23;
  v45 = v22;
  v46 = v21;
  v47 = v20;
  v48 = v19;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static _VariadicView.Tree<>._makeView(view:inputs:)(&v31, (uint64_t)&v33, v25, a3, (uint64_t)&protocol witness table for _LayoutRoot<A>, a4, a5);
  v54 = v26;
  if ((v17 & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a5, (uint64_t)&v49);
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t GeometryReader.Child.updateValue()(unint64_t a1)
{
  unint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  int CurrentAttribute;
  int v32;
  int v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  void (*v52)(char *, uint64_t, uint64_t);
  uint64_t v53;
  char *v54;
  char *v55;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  void (*v60)(char *, char *, char *);
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  int v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  void *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  _DWORD v103[10];
  uint64_t v104;
  int v105;
  char v106[8];
  uint64_t v107;

  v107 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for _LayoutRoot<GeometryReaderLayout>(255);
  v102 = a1;
  v3 = *(_QWORD *)(a1 + 16);
  v93 = v4;
  v5 = type metadata accessor for _VariadicView.Tree(0, v4, v3, (uint64_t)&protocol witness table for _LayoutRoot<A>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v78 - v7;
  v9 = type metadata accessor for ObservationTracking._AccessList();
  v96 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v91 = (char *)&v78 - v13;
  MEMORY[0x24BDAC7A8](v14);
  v92 = (char *)&v78 - v15;
  type metadata accessor for Date?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v16);
  v88 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v89 = (uint64_t)&v78 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v95 = (char *)&v78 - v20;
  v101 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (unint64_t)&v78 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v99 = (char *)&v78 - v25;
  MEMORY[0x24BDAC7A8](v26);
  v90 = (char *)&v78 - v27;
  MEMORY[0x24BDAC7A8](v28);
  v100 = (char *)&v78 - v29;
  v30 = v1;
  LODWORD(v94) = *((_DWORD *)v1 + 6) + 1;
  *((_DWORD *)v1 + 6) = (_DWORD)v94;
  CurrentAttribute = AGGraphGetCurrentAttribute();
  v32 = *MEMORY[0x24BE096C0];
  if (CurrentAttribute == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v78 = v23;
    v79 = v8;
    v80 = v6;
    v97 = v5;
    v98 = (char *)v3;
    v33 = *((_DWORD *)v1 + 5);
    v87 = *(_QWORD *)(v102 + 24);
    LODWORD(v84) = v32 == v33;
    if (v32 == v33)
      v33 = 0;
    v83 = v33;
    v34 = AGCreateWeakAttribute();
    v35 = v34;
    v86 = HIDWORD(v34);
    v23 = AGCreateWeakAttribute();
    v85 = HIDWORD(v23);
    v36 = AGCreateWeakAttribute();
    v37 = v36;
    v82 = HIDWORD(v36);
    v38 = AGCreateWeakAttribute();
    v39 = v38;
    v81 = HIDWORD(v38);
    v40 = AGCreateWeakAttribute();
    v41 = v40;
    v42 = HIDWORD(v40);
    v43 = AGCreateWeakAttribute();
    v84 = &v78;
    v103[0] = v35;
    v103[1] = v86;
    v103[2] = v23;
    v103[3] = v85;
    v103[4] = v37;
    v8 = v98;
    v103[5] = v82;
    v103[6] = v39;
    v103[7] = v81;
    v103[8] = v41;
    v103[9] = v42;
    v104 = v43;
    v105 = (int)v94;
    MEMORY[0x24BDAC7A8](v43);
    v1 = &v78 - 6;
    v44 = v87;
    *(&v78 - 4) = (unint64_t)v8;
    *(&v78 - 3) = v44;
    *(&v78 - 2) = (unint64_t)v30;
    *(&v78 - 1) = (unint64_t)v103;
    v45 = AGGraphGetCurrentAttribute();
    if ((_DWORD)v45 != v32)
    {
      v23 = v45;
      if (one-time initialization token for lastestAccessLists == -1)
        goto LABEL_6;
      goto LABEL_20;
    }
  }
  __break(1u);
LABEL_20:
  swift_once();
LABEL_6:
  swift_beginAccess();
  v94 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  v46 = v96;
  v47 = (uint64_t)v95;
  v48 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v96 + 56))(v95, 1, 1, v9);
  MEMORY[0x24BDAC7A8](v48);
  *(&v78 - 4) = (unint64_t)v8;
  *(&v78 - 3) = (unint64_t)partial apply for closure #1 in GeometryReader.Child.updateValue();
  *(&v78 - 2) = (unint64_t)v1;
  v49 = type metadata accessor for Error();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v47, (uint64_t)partial apply for closure #1 in _withObservation<A>(do:), (uint64_t)(&v78 - 6), v88, v49, (uint64_t)v8, MEMORY[0x24BEE3F20], (uint64_t)v106);
  v50 = v89;
  _s7SwiftUI34AccessibilityTextAttributeResolver_pSgWOcTm_0(v47, v89, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (void (*)(uint64_t))MEMORY[0x24BEE5C08]);
  v51 = (_QWORD *)&type metadata instantiation cache for InterfaceIdiomBox;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v50, 1, v9) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v50);
  }
  else
  {
    v52 = *(void (**)(char *, uint64_t, uint64_t))(v46 + 32);
    v53 = v50;
    v54 = v92;
    v52(v92, v53, v9);
    (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v91, v54, v9);
    swift_beginAccess();
    v55 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v55;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v55 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v55 + 2) + 1, 1, (unint64_t)v55);
      static ObservationRegistrar.lastestAccessLists = v55;
    }
    v58 = *((_QWORD *)v55 + 2);
    v57 = *((_QWORD *)v55 + 3);
    if (v58 >= v57 >> 1)
    {
      v55 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v57 > 1, v58 + 1, 1, (unint64_t)v55);
      static ObservationRegistrar.lastestAccessLists = v55;
    }
    *((_QWORD *)v55 + 2) = v58 + 1;
    v59 = &v55[(*(unsigned __int8 *)(v96 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v96 + 80)];
    v46 = v96;
    v52(&v59[*(_QWORD *)(v96 + 72) * v58], (uint64_t)v91, v9);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v92, v9);
    v47 = (uint64_t)v95;
    v51 = &type metadata instantiation cache for InterfaceIdiomBox;
  }
  v60 = *(void (**)(char *, char *, char *))(v101 + 32);
  v61 = v90;
  v60(v90, v99, v8);
  outlined destroy of ObservationTracking._AccessList?(v47);
  v60(v100, v61, v8);
  v62 = v51[463];
  v63 = *(_QWORD *)(v62 + 16);
  if (v63)
  {
    v99 = 0;
    v64 = v62 + ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80));
    v65 = *(_QWORD *)(v46 + 72);
    v66 = *(void (**)(char *, uint64_t, uint64_t))(v46 + 16);
    swift_bridgeObjectRetain();
    v67 = v97;
    do
    {
      v66(v11, v64, v9);
      installObservationSlow<A>(accessList:attribute:)((uint64_t)v11, v23, v67);
      (*(void (**)(char *, uint64_t))(v46 + 8))(v11, v9);
      v64 += v65;
      --v63;
    }
    while (v63);
    swift_bridgeObjectRelease();
    v8 = v98;
  }
  static ObservationRegistrar.lastestAccessLists = v94;
  swift_bridgeObjectRelease();
  v69 = v100;
  v68 = v101;
  v70 = v78;
  v71 = (*(uint64_t (**)(unint64_t, char *, char *))(v101 + 16))(v78, v100, v8);
  v72 = (uint64_t)v79;
  v73 = _VariadicView.Tree.init(root:content:)(v71, v70, v93, (uint64_t)v8, (uint64_t)&protocol witness table for _LayoutRoot<A>, (uint64_t)v79);
  v74 = MEMORY[0x24BDAC7A8](v73);
  *(&v78 - 2) = v102;
  *(&v78 - 1) = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GeometryReader<A>.Child, v74);
  v75 = v97;
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v72, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)(&v78 - 4), v97, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v76);
  (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v72, v75);
  return (*(uint64_t (**)(char *, char *))(v68 + 8))(v69, v8);
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance GeometryReader<A>.Child@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for _LayoutRoot<GeometryReaderLayout>(255);
  v5 = type metadata accessor for _VariadicView.Tree(0, v4, *(_QWORD *)(a1 + 16), (uint64_t)&protocol witness table for _LayoutRoot<A>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a2, 1, 1, v5);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance GeometryReader<A>.Child(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for GeometryReader<A>.Child, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance GeometryReader<A>@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static GeometryReader._makeView(view:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

uint64_t GeometryProxy.context.getter()
{
  return AGWeakAttributeGetAttribute();
}

double GeometryProxy.size.getter()
{
  int Attribute;
  double result;

  Attribute = AGWeakAttributeGetAttribute();
  result = 0.0;
  if (Attribute != *MEMORY[0x24BE096C0])
  {
    AGWeakAttributeGetAttribute();
    return *(double *)AGGraphGetInputValue();
  }
  return result;
}

uint64_t GeometryProxy.placementContext.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  result = AGWeakAttributeGetAttribute();
  v3 = *MEMORY[0x24BE096C0];
  if ((_DWORD)result == *MEMORY[0x24BE096C0])
    goto LABEL_6;
  v4 = result;
  result = AGWeakAttributeGetAttribute();
  if ((_DWORD)result == v3
    || (v5 = result, result = AGWeakAttributeGetAttribute(), (_DWORD)result == v3)
    || (v6 = result, result = AGWeakAttributeGetAttribute(), (_DWORD)result == v3)
    || (v7 = result, result = AGWeakAttributeGetAttribute(), (_DWORD)result == v3))
  {
LABEL_6:
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 28) = 1;
  }
  else
  {
    v8 = result;
    result = AGWeakAttributeGetAttribute();
    *(_QWORD *)a1 = v4 | ((unint64_t)v4 << 32);
    *(_QWORD *)(a1 + 8) = v5 | (unint64_t)(v6 << 32);
    *(_QWORD *)(a1 + 16) = v7 | (unint64_t)(v8 << 32);
    *(_DWORD *)(a1 + 24) = result;
    *(_BYTE *)(a1 + 28) = 0;
  }
  return result;
}

uint64_t GeometryProxy.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[16];
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  char v25;

  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = &v15[-v9];
  LODWORD(v9) = *((_DWORD *)v3 + 12);
  v11 = v3[1];
  v18 = *v3;
  v19 = v11;
  v20 = v3[2];
  v21 = v9;
  GeometryProxy.placementContext.getter((uint64_t)&v22);
  v18 = v22;
  *(_QWORD *)&v19 = v23;
  DWORD2(v19) = v24;
  BYTE12(v19) = v25;
  v16 = a2;
  v17 = a1;
  type metadata accessor for _PositionAwarePlacementContext?();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in GeometryProxy.subscript.getter, (uint64_t)v15, MEMORY[0x24BEE4078], a2, v12, (uint64_t)v10);
  v13 = *(_QWORD *)(a2 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v13 + 48))(v10, 1, a2) != 1)
    return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v13 + 32))(a3, v10, a2);
  Anchor.defaultValue.getter(a1);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
}

double GeometryProxy.safeAreaInsets.getter()
{
  __int128 *v0;
  int v1;
  __int128 v2;
  double result;
  int v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  char v19;

  v1 = *((_DWORD *)v0 + 12);
  v2 = v0[1];
  v11 = *v0;
  v12 = v2;
  v13 = v0[2];
  v14 = v1;
  GeometryProxy.placementContext.getter((uint64_t)&v15);
  if ((v19 & 1) != 0)
    return 0.0;
  v4 = v18;
  result = 0.0;
  if (v18 != *MEMORY[0x24BE096C0])
  {
    v6 = v16;
    v5 = v17;
    v7 = HIDWORD(v17);
    v8 = v15;
    v9 = HIDWORD(v16);
    v10 = HIDWORD(v15);
    AGGraphGetInputValue();
    *(_QWORD *)&v11 = __PAIR64__(v10, v8);
    *((_QWORD *)&v11 + 1) = __PAIR64__(v9, v6);
    *(_QWORD *)&v12 = __PAIR64__(v7, v5);
    DWORD2(v12) = v4;
    return SafeAreaInsets.resolve(regions:in:)(-1, (int *)&v11);
  }
  return result;
}

uint64_t GeometryProxy.frame(in:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *InputValue;
  uint64_t result;
  uint64_t v6[3];
  unsigned int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = 0;
  v3 = 0;
  if (AGWeakAttributeGetAttribute() != *MEMORY[0x24BE096C0])
  {
    AGWeakAttributeGetAttribute();
    InputValue = (uint64_t *)AGGraphGetInputValue();
    v3 = *InputValue;
    v2 = InputValue[1];
  }
  v9 = 0;
  v10 = 0;
  v11 = v3;
  v12 = v2;
  result = GeometryProxy.placementContext.getter((uint64_t)v6);
  if ((v8 & 1) == 0)
    return specialized ViewTransformable.convert(from:to:)(v6[0], v6[1], v6[2], v7, a1);
  return result;
}

double GeometryProxy.rect(_:in:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  double v6;
  uint64_t v8[3];
  unsigned int v9;
  char v10;
  double v11;
  double v12;
  double v13;
  double v14;

  v6 = a2;
  v11 = a2;
  v12 = a3;
  v13 = a4;
  v14 = a5;
  GeometryProxy.placementContext.getter((uint64_t)v8);
  if ((v10 & 1) == 0)
  {
    specialized ViewTransformable.convert(from:to:)(v8[0], v8[1], v8[2], v9, a1);
    return v11;
  }
  return v6;
}

uint64_t GeometryProxy.frameClippedToScrollViews(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v2;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  CGFloat v9;
  CGFloat v10;
  uint64_t InputValue;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double *v19;
  double v20;
  double v21;
  __int128 v22;
  char v23;
  __int128 v24;
  __int128 v25;
  _DWORD v26[2];
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  char v31;
  _QWORD v32[3];
  double v33;
  double v34;
  char v35;
  __int128 v36;
  double v37;
  double v38;
  CGRect v39;
  CGRect v40;

  v5 = *v2;
  v6 = v2[1];
  v24 = *(_OWORD *)(v2 + 6);
  v25 = *(_OWORD *)(v2 + 2);
  v7 = *((_QWORD *)v2 + 5);
  v8 = v2[12];
  v9 = 0.0;
  v10 = 0.0;
  if (AGWeakAttributeGetAttribute() != *MEMORY[0x24BE096C0])
  {
    AGWeakAttributeGetAttribute();
    InputValue = AGGraphGetInputValue();
    v10 = *(double *)InputValue;
    v9 = *(double *)(InputValue + 8);
  }
  v36 = 0uLL;
  v37 = v10;
  v38 = v9;
  v26[0] = v5;
  v26[1] = v6;
  v27 = v25;
  v28 = v24;
  v29 = v7;
  v30 = v8;
  result = GeometryProxy.placementContext.getter((uint64_t)v32);
  if ((BYTE4(v33) & 1) == 0)
  {
    v13 = AGGraphGetInputValue();
    v14 = *(_QWORD *)v13;
    v15 = *(double *)(v13 + 8);
    v16 = *(double *)(v13 + 16);
    v18 = *(double *)(v13 + 24);
    v17 = *(double *)(v13 + 32);
    v19 = (double *)AGGraphGetInputValue();
    v20 = *v19;
    v21 = v19[1];
    swift_retain();
    v39.origin.x = 0.0;
    v39.origin.y = 0.0;
    v39.size.width = v10;
    v39.size.height = v9;
    if (!CGRectIsNull(v39))
    {
      v40.origin.x = 0.0;
      v40.origin.y = 0.0;
      v40.size.width = v10;
      v40.size.height = v9;
      if (!CGRectIsInfinite(v40))
      {
        v35 = 0;
        v32[0] = v14;
        *(double *)&v32[1] = v20;
        *(double *)&v32[2] = v21;
        v33 = v18 - (v20 - v15);
        v34 = v17 - (v21 - v16);
        outlined init with copy of CoordinateSpace(a1, (uint64_t)v26);
        v31 = 2;
        specialized ViewTransform.convert(_:_:)((uint64_t)v26, (uint64_t)v32);
        outlined destroy of ViewTransform.Conversion((uint64_t)v26);
        result = swift_release();
        v23 = v35 ^ 1;
        v22 = v36;
        v10 = v37;
        v9 = v38;
        goto LABEL_8;
      }
    }
    result = swift_release();
  }
  v22 = 0uLL;
  v23 = 1;
LABEL_8:
  *(_OWORD *)a2 = v22;
  *(CGFloat *)(a2 + 16) = v10;
  *(CGFloat *)(a2 + 24) = v9;
  *(_BYTE *)(a2 + 32) = v23 & 1;
  return result;
}

uint64_t closure #1 in GeometryProxy.rect(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized ViewTransformable.convert(from:to:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(unsigned int *)(a1 + 24), a3);
}

uint64_t specialized ViewTransformable.convert(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t InputValue;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  uint64_t v17[5];

  InputValue = AGGraphGetInputValue();
  v7 = *(_QWORD *)InputValue;
  v8 = *(double *)(InputValue + 8);
  v9 = *(double *)(InputValue + 16);
  v10 = *(double *)(InputValue + 24);
  v11 = *(double *)(InputValue + 32);
  v12 = AGGraphGetInputValue();
  v13 = *(double *)v12;
  v14 = *(double *)(v12 + 8);
  v15 = v10 - (*(double *)v12 - v8);
  v17[0] = v7;
  *(double *)&v17[1] = v13;
  *(double *)&v17[2] = v14;
  *(double *)&v17[3] = v15;
  *(double *)&v17[4] = v11 - (v14 - v9);
  return CGRect.convert(to:transform:)(a5, v17);
}

uint64_t GeometryProxy.transform.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  int v3;
  uint64_t InputValue;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  double v10;
  double v11;

  result = AGWeakAttributeGetAttribute();
  v3 = *MEMORY[0x24BE096C0];
  if ((_DWORD)result == *MEMORY[0x24BE096C0] || (result = AGWeakAttributeGetAttribute(), (_DWORD)result == v3))
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  else
  {
    AGWeakAttributeGetAttribute();
    InputValue = AGGraphGetInputValue();
    v5 = *(double *)(InputValue + 8);
    v6 = *(double *)(InputValue + 16);
    v7 = *(double *)(InputValue + 24);
    v8 = *(double *)(InputValue + 32);
    *(_QWORD *)a1 = *(_QWORD *)InputValue;
    v9 = AGGraphGetInputValue();
    v10 = *(double *)v9;
    v11 = *(double *)(v9 + 8);
    *(double *)(a1 + 24) = v7 - (*(double *)v9 - v5);
    *(double *)(a1 + 32) = v8 - (v11 - v6);
    *(double *)(a1 + 8) = v10;
    *(double *)(a1 + 16) = v11;
    return swift_retain();
  }
  return result;
}

void GeometryProxy.environment.getter(_QWORD *a1@<X8>)
{
  void (*v2)(_QWORD *);
  void *v3;
  uint64_t *InputValue;
  uint64_t v5;
  uint64_t v6;

  if (AGWeakAttributeGetAttribute() == *MEMORY[0x24BE096C0])
  {
    *a1 = 0;
    a1[1] = 0;
    if (one-time initialization token for shared != -1)
      swift_once();
    swift_beginAccess();
    v2 = *(void (**)(_QWORD *))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue2.shared) + 0x68);
    v3 = static CoreGlue2.shared;
    v2(a1);

  }
  else
  {
    AGWeakAttributeGetAttribute();
    InputValue = (uint64_t *)AGGraphGetInputValue();
    v6 = *InputValue;
    v5 = InputValue[1];
    *a1 = v6;
    a1[1] = v5;
    swift_retain();
    swift_retain();
  }
}

uint64_t static GeometryProxy.current.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  int v6;

  result = _threadGeometryProxyData();
  if (result)
  {
    v3 = *(_OWORD *)result;
    v4 = *(_OWORD *)(result + 16);
    v5 = *(_OWORD *)(result + 32);
    v6 = *(_DWORD *)(result + 48);
  }
  else
  {
    v6 = 0;
    v3 = 0uLL;
    v4 = 0uLL;
    v5 = 0uLL;
  }
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 48) = v6;
  *(_BYTE *)(a1 + 52) = result == 0;
  return result;
}

uint64_t partial apply for closure #1 in GeometryProxy.asCurrent<A>(do:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v5)(_QWORD *);
  _QWORD *v6;
  uint64_t result;

  v5 = *(uint64_t (**)(_QWORD *))(v2 + 24);
  v6 = _setThreadGeometryProxyData();
  result = v5(v6);
  if (v3)
    *a2 = v3;
  return result;
}

double GeometryProxy.bounds(of:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v5;
  __int128 v6;
  char v7;
  double result;
  __int128 v9;
  _QWORD v10[4];
  __int128 v11;
  __int128 v12;
  char v13;
  _BYTE v14[48];
  int v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;

  v5 = *(_DWORD *)(v2 + 48);
  v6 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)v14 = *(_OWORD *)v2;
  *(_OWORD *)&v14[16] = v6;
  *(_OWORD *)&v14[32] = *(_OWORD *)(v2 + 32);
  v15 = v5;
  GeometryProxy.transform.getter((uint64_t)&v16);
  v11 = 0u;
  v12 = 0u;
  v13 = 1;
  *(_QWORD *)v14 = v16;
  *(_OWORD *)&v14[8] = v17;
  *(_OWORD *)&v14[24] = v18;
  v10[2] = &v11;
  v10[3] = a1;
  ViewTransform.forEach(inverted:_:)(0, (void (*)(double *, char *))partial apply for closure #1 in ViewTransform.containingSizedCoordinateSpace(name:), (uint64_t)v10);
  swift_release();
  v7 = v13;
  result = *(double *)&v11;
  v9 = v12;
  *(_OWORD *)a2 = v11;
  *(_OWORD *)(a2 + 16) = v9;
  *(_BYTE *)(a2 + 32) = v7;
  return result;
}

double GeometryProxy.frame<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *InputValue;
  double v8;
  uint64_t v10[3];
  unsigned int v11;
  char v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[6];

  v5 = 0;
  v6 = 0;
  if (AGWeakAttributeGetAttribute() != *MEMORY[0x24BE096C0])
  {
    AGWeakAttributeGetAttribute();
    InputValue = (uint64_t *)AGGraphGetInputValue();
    v6 = *InputValue;
    v5 = InputValue[1];
  }
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a3 + 8))(v17, a2, a3);
  v13 = 0.0;
  v14 = 0;
  v15 = v6;
  v16 = v5;
  GeometryProxy.placementContext.getter((uint64_t)v10);
  v8 = 0.0;
  if ((v12 & 1) == 0)
  {
    specialized ViewTransformable.convert(from:to:)(v10[0], v10[1], v10[2], v11, (uint64_t)v17);
    v8 = v13;
  }
  outlined destroy of CoordinateSpace((uint64_t)v17);
  return v8;
}

double GeometryProxy.convert<A>(globalPoint:to:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 *v4;
  int v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  _QWORD v16[6];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _DWORD v20[10];
  char v21;
  _QWORD v22[5];

  v8 = *((_DWORD *)v4 + 12);
  v9 = v4[1];
  v17 = *v4;
  v18 = v9;
  v19 = v4[2];
  v20[0] = v8;
  GeometryProxy.transform.getter((uint64_t)v22);
  v10 = v22[0];
  v11 = v22[1];
  v12 = v22[2];
  v13 = *(double *)&v22[3];
  v14 = *(double *)&v22[4];
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a4 + 8))(v16, a3, a4);
  *(_QWORD *)&v19 = 0;
  v17 = 0u;
  v18 = 0u;
  BYTE8(v19) = 2;
  outlined init with copy of CoordinateSpace((uint64_t)v16, (uint64_t)v20);
  v21 = 4;
  outlined destroy of CoordinateSpace((uint64_t)v16);
  if (v10 || v13 != 0.0 || v14 != 0.0)
  {
    v16[0] = v10;
    v16[1] = v11;
    v16[2] = v12;
    *(double *)&v16[3] = v13;
    *(double *)&v16[4] = v14;
    specialized ViewTransform.convert(_:_:)((uint64_t)&v17, (uint64_t)v16);
  }
  outlined destroy of ViewTransform.Conversion((uint64_t)&v17);
  swift_release();
  return a1;
}

uint64_t protocol witness for static Layout.layoutProperties.getter in conformance GeometryReaderLayout@<X0>(_BYTE *a1@<X8>)
{
  unsigned int v2;
  uint64_t result;

  if (one-time initialization token for v2 != -1)
    swift_once();
  v2 = static Semantics.v2;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FAB4 & 1) != 0)
    result = dyld_program_sdk_at_least();
  else
    result = static Semantics.forced >= v2;
  *a1 = 2;
  a1[1] = result ^ 1;
  a1[2] = result ^ 1;
  return result;
}

double protocol witness for Layout.sizeThatFits(proposal:subviews:cache:) in conformance GeometryReaderLayout(uint64_t a1, char a2)
{
  double result;

  result = *(double *)&a1;
  if ((a2 & 1) != 0)
    return 0.0;
  return result;
}

uint64_t protocol witness for Layout.placeSubviews(in:proposal:subviews:cache:) in conformance GeometryReaderLayout(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return specialized GeometryReaderLayout.placeSubviews(in:proposal:subviews:cache:)(a9, a1, a2, a3, a4);
}

void type metadata accessor for _LayoutRoot<GeometryReaderLayout>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for _LayoutRoot<GeometryReaderLayout>)
  {
    v2 = lazy protocol witness table accessor for type GeometryReaderLayout and conformance GeometryReaderLayout();
    v4 = type metadata accessor for _LayoutRoot(a1, (uint64_t)&unk_25062F910, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for _LayoutRoot<GeometryReaderLayout>);
  }
}

unint64_t lazy protocol witness table accessor for type GeometryReaderLayout and conformance GeometryReaderLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GeometryReaderLayout and conformance GeometryReaderLayout;
  if (!lazy protocol witness table cache variable for type GeometryReaderLayout and conformance GeometryReaderLayout)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GeometryReaderLayout, &unk_25062F910);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeometryReaderLayout and conformance GeometryReaderLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GeometryReaderLayout and conformance GeometryReaderLayout;
  if (!lazy protocol witness table cache variable for type GeometryReaderLayout and conformance GeometryReaderLayout)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GeometryReaderLayout, &unk_25062F910);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeometryReaderLayout and conformance GeometryReaderLayout);
  }
  return result;
}

uint64_t type metadata accessor for GeometryReader.Child(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GeometryReader.Child);
}

uint64_t partial apply for closure #2 in static GeometryReader._makeView(view:inputs:)(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(result + 12) = *(_DWORD *)(*(_QWORD *)(v1 + 16) + 12);
  return result;
}

unint64_t lazy protocol witness table accessor for type RootGeometry and conformance RootGeometry()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RootGeometry and conformance RootGeometry;
  if (!lazy protocol witness table cache variable for type RootGeometry and conformance RootGeometry)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for RootGeometry, &type metadata for RootGeometry);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RootGeometry and conformance RootGeometry);
  }
  return result;
}

uint64_t partial apply for closure #1 in GeometryProxy.subscript.getter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  __int128 v5;
  uint64_t v6;
  int v7;

  v2 = *(_QWORD *)(v1 + 24);
  v3 = *((_DWORD *)a1 + 6);
  v5 = *a1;
  v6 = *((_QWORD *)a1 + 2);
  v7 = v3;
  return Anchor.in(_:)((uint64_t)&v5, v2);
}

void type metadata accessor for _PositionAwarePlacementContext?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _PositionAwarePlacementContext?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _PositionAwarePlacementContext?);
  }
}

void partial apply for closure #1 in ViewTransform.containingSizedCoordinateSpace(name:)()
{
  closure #1 in ViewTransform.containingSizedCoordinateSpace(name:)();
}

uint64_t sub_234E492D4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = a1[1];
  *a2 = v2;
  a2[1] = v3;
  return swift_retain();
}

uint64_t sub_234E492E0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  swift_retain();
  result = swift_release();
  *a2 = v4;
  a2[1] = v3;
  return result;
}

uint64_t sub_234E49320()
{
  return 16;
}

__n128 sub_234E4932C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata accessor for GeometryReader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GeometryReader);
}

__n128 __swift_memcpy52_4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for GeometryProxy()
{
  return &type metadata for GeometryProxy;
}

void *type metadata accessor for GeometryReaderLayout()
{
  return &unk_25062F910;
}

uint64_t instantiation function for generic protocol witness table for GeometryReader<A>.Child(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GeometryReader<A>.Child);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in GeometryReader<A>.Child()
{
  JUMPOUT(0x23B7C9C04);
}

unint64_t instantiation function for generic protocol witness table for GeometryReaderLayout(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type GeometryReaderLayout and conformance GeometryReaderLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t specialized GeometryReaderLayout.placeSubviews(in:proposal:subviews:cache:)(uint64_t result, double a2, double a3, double a4, double a5)
{
  int v9;
  unint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  int *i;
  double v15;
  uint64_t v16;
  unint64_t v17;
  int *v18;
  int v19;
  int *v20;
  int v21;
  int v22;
  __int128 v23;
  uint64_t *InputValue;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  double v36;
  double v37;
  int v38;
  int v39;
  int v40;
  int v41;
  char v42;

  v31 = *(_QWORD *)(result + 8);
  v30 = *(_QWORD *)(v31 + 16);
  if (v30)
  {
    v9 = *(_DWORD *)result;
    v28 = *(_BYTE *)(result + 17);
    v29 = *(_BYTE *)(result + 16);
    if (one-time initialization token for topLeading != -1)
LABEL_23:
      swift_once();
    v10 = 0;
    v11 = v31 + 32;
    v12 = (int *)(v31 + 36);
    v13 = *MEMORY[0x24BE096C0];
    for (i = (int *)(v31 + 32); ; i += 3)
    {
      v17 = *(_QWORD *)(v31 + 16);
      if ((v29 & 1) != 0)
      {
        if (v10 >= v17)
          goto LABEL_22;
        v18 = (int *)(v11 + 12 * v10 + 4);
        v19 = i[2];
        v20 = i;
      }
      else
      {
        if (v10 >= v17)
        {
          __break(1u);
LABEL_22:
          __break(1u);
          goto LABEL_23;
        }
        v20 = (int *)(v11 + 8 * v10);
        v19 = v10;
        v18 = v12;
      }
      v21 = *v18;
      v22 = *v20;
      v23 = static UnitPoint.topLeading;
      v38 = v9;
      v39 = v22;
      v40 = v21;
      v41 = v19;
      v42 = v28;
      if (v22 == v13)
      {
        InputValue = (uint64_t *)&static LayoutComputer.defaultValue;
        if (one-time initialization token for defaultValue != -1)
        {
          swift_once();
          InputValue = (uint64_t *)&static LayoutComputer.defaultValue;
        }
      }
      else
      {
        InputValue = (uint64_t *)AGGraphGetInputValue();
      }
      v26 = *InputValue;
      v25 = InputValue[1];
      v27 = one-time initialization token for lockAssertionsAreEnabled;
      swift_retain();
      if (v27 != -1)
        swift_once();
      if (lockAssertionsAreEnabled)
      {
        if (one-time initialization token for _lock != -1)
          swift_once();
        if (!_MovableLockIsOwner(static Update._lock))
          break;
      }
      ++v10;
      v32 = a4;
      LOBYTE(v33) = 0;
      v34 = a5;
      LOBYTE(v35) = 0;
      v15 = (*(double (**)(double *))(*(_QWORD *)v26 + 120))(&v32);
      v32 = *(double *)&v26;
      v33 = v25;
      v34 = v15;
      v35 = v16;
      v36 = a4;
      v37 = a5;
      LayoutSubview.place(at:anchor:dimensions:)((uint64_t *)&v32, a2, a3, *(double *)&v23, *((double *)&v23 + 1));
      result = swift_release();
      v12 += 2;
      if (v30 == v10)
        return result;
    }
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t partial apply for closure #1 in GeometryReader.Child.updateValue()@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = v2[3];
  v5 = v2[5];
  v9 = v2[2];
  v10 = v4;
  v11 = v5;
  v6 = type metadata accessor for GeometryReader(0, v9, v4, a1);
  return Attribute.syncMainIfReferences<A>(do:)((void (*)(_QWORD))partial apply for closure #1 in closure #1 in GeometryReader.Child.updateValue(), (uint64_t)&v8, v6, v9, a2);
}

uint64_t partial apply for closure #1 in closure #1 in GeometryReader.Child.updateValue()(uint64_t (**a1)(_OWORD *))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_OWORD *);
  __int128 v4;
  _OWORD v6[3];
  int v7;

  v2 = *(_QWORD *)(v1 + 32);
  v3 = *a1;
  v4 = *(_OWORD *)(v2 + 16);
  v6[0] = *(_OWORD *)v2;
  v6[1] = v4;
  v6[2] = *(_OWORD *)(v2 + 32);
  v7 = *(_DWORD *)(v2 + 48);
  return v3(v6);
}

uint64_t Transaction.fromScrollView.setter(uint64_t a1)
{
  return Transaction.fromScrollView.setter(a1, (void (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t Transaction.isContinuous.getter(uint64_t a1)
{
  return Transaction.isContinuous.getter(a1, (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t Transaction.isContinuous.setter(uint64_t a1)
{
  return Transaction.fromScrollView.setter(a1, (void (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t Transaction.fromScrollView.setter(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t *))
{
  uint64_t v2;
  uint64_t v6;

  swift_retain();
  a2(v2, a1, &v6);
  return swift_release();
}

void (*Transaction.isContinuous.modify(_QWORD *a1))(char **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  char v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = swift_retain();
  v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
  v3[4] = 0;
  swift_release();
  *((_BYTE *)v3 + 40) = v5 & 1;
  return Transaction.isContinuous.modify;
}

void Transaction.isContinuous.modify(char **a1, char a2)
{
  _GraphInputs.scrollTargetRemovePreference.modify(a1, a2, (void (*)(uint64_t, uint64_t, char *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t Transaction.fromScrollView.getter(uint64_t a1)
{
  return Transaction.isContinuous.getter(a1, (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t Transaction.isContinuous.getter(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t *))
{
  uint64_t v3;
  uint64_t v5;

  v3 = swift_retain();
  LOBYTE(a2) = a2(v3, &v5);
  swift_release();
  return a2 & 1;
}

uint64_t key path getter for Transaction.isContinuous : Transaction@<X0>(uint64_t (*a1)(uint64_t, uint64_t *)@<X3>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = swift_retain();
  LOBYTE(a1) = a1(v4, &v6);
  result = swift_release();
  *a2 = a1 & 1;
  return result;
}

uint64_t key path setter for Transaction.isContinuous : Transaction(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t *))
{
  uint64_t v7;
  uint64_t v9;

  v7 = *a1;
  swift_retain();
  a5(a2, v7, &v9);
  return swift_release();
}

void (*Transaction.fromScrollView.modify(_QWORD *a1))(char **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  char v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = swift_retain();
  v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
  v3[4] = 0;
  swift_release();
  *((_BYTE *)v3 + 40) = v5 & 1;
  return Transaction.fromScrollView.modify;
}

void Transaction.fromScrollView.modify(char **a1, char a2)
{
  _GraphInputs.scrollTargetRemovePreference.modify(a1, a2, (void (*)(uint64_t, uint64_t, char *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t sub_234E49A50@<X0>(_BYTE *a1@<X8>)
{
  return key path getter for Transaction.isContinuous : Transaction((uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a1);
}

uint64_t sub_234E49A6C(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Transaction.isContinuous : Transaction(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t sub_234E49A88@<X0>(_BYTE *a1@<X8>)
{
  return key path getter for Transaction.isContinuous : Transaction((uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a1);
}

uint64_t sub_234E49AA4(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Transaction.isContinuous : Transaction(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

ValueMetadata *type metadata accessor for ContinuousKey()
{
  return &type metadata for ContinuousKey;
}

ValueMetadata *type metadata accessor for FromScrollViewKey()
{
  return &type metadata for FromScrollViewKey;
}

uint64_t static DynamicContainerAdaptor.maxUnusedItems.getter()
{
  return 0;
}

uint64_t DynamicContainerAdaptor<>.foreachItem(items:_:)(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t static DynamicContainerAdaptor<>.containsItem(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;

  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 32);
  v5 = swift_checkMetadataState();
  return v4(a2, v5, AssociatedConformanceWitness) & 1;
}

uint64_t DynamicContainerAdaptor<>.foreachItem(items:_:)(uint64_t a1, void (*a2)(char *), uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  void (*v19)(char *, char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *);
  uint64_t v24;

  v23 = a2;
  v24 = a3;
  v21 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v6 = (char *)&v21 - v5;
  v7 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v21 - v8;
  v10 = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v21 - v12;
  v14 = swift_getAssociatedTypeWitness();
  v22 = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v21 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))(v13, v21, v10, v15);
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
  if (v18(v9, 1, AssociatedTypeWitness) != 1)
  {
    v19 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    do
    {
      v19(v6, v9, AssociatedTypeWitness);
      v23(v6);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, AssociatedTypeWitness);
      dispatch thunk of IteratorProtocol.next()();
    }
    while (v18(v9, 1, AssociatedTypeWitness) != 1);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v17, v14);
}

uint64_t static DynamicContainerAdaptor<>.containsItem(_:_:)()
{
  swift_getAssociatedTypeWitness();
  return Sequence.contains(where:)() & 1;
}

uint64_t closure #1 in static DynamicContainerAdaptor<>.containsItem(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;

  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 32);
  v5 = swift_checkMetadataState();
  return v4(a2, v5, AssociatedConformanceWitness) & 1;
}

uint64_t partial apply for closure #1 in static DynamicContainerAdaptor<>.containsItem(_:_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in static DynamicContainerAdaptor<>.containsItem(_:_:)(a1, *(_QWORD *)(v1 + 40)) & 1;
}

uint64_t dispatch thunk of static DynamicContainerAdaptor.maxUnusedItems.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of DynamicContainerAdaptor.updatedItems()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of DynamicContainerAdaptor.foreachItem(items:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 56))();
}

uint64_t dispatch thunk of static DynamicContainerAdaptor.containsItem(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 64))();
}

uint64_t dispatch thunk of DynamicContainerAdaptor.makeItemLayout(item:uniqueId:inputs:containerInfo:containerInputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return (*(uint64_t (**)(void))(a10 + 72))();
}

uint64_t dispatch thunk of DynamicContainerAdaptor.removeItemLayout(uniqueId:itemLayout:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 80))();
}

uint64_t DynamicViewListItem.needsTransitions.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain_n();
  v2 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(0, v1);
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    v3 = one-time initialization token for opacity;
    swift_bridgeObjectRetain();
    if (v3 != -1)
      swift_once();
    v4 = swift_retain();
    v5 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(v4, v1);
    swift_bridgeObjectRelease();
    v6 = swift_release();
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 96))(v6);
    swift_bridgeObjectRelease();
    if ((v7 & 1) == 0)
    {
      v8 = 1;
      goto LABEL_9;
    }
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v8 = 0;
LABEL_9:
  swift_release();
  return v8;
}

uint64_t DynamicViewListItem.matchesIdentity(of:)(uint64_t a1)
{
  uint64_t v1;
  int v3;
  int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD v9[2];
  uint64_t v10;
  _DWORD v11[2];
  uint64_t v12;

  if ((*(_BYTE *)(v1 + 68) & 1) == 0)
  {
    if ((*(_BYTE *)(a1 + 68) & 1) == 0)
    {
      v3 = *(_DWORD *)(v1 + 64);
      v4 = *(_DWORD *)(a1 + 64);
      outlined init with copy of DynamicViewListItem(v1, (uint64_t)v11);
      outlined init with copy of DynamicViewListItem(a1, (uint64_t)v9);
      if (v3 == v4)
        goto LABEL_7;
LABEL_10:
      v5 = 0;
      goto LABEL_11;
    }
LABEL_5:
    outlined init with copy of DynamicViewListItem(v1, (uint64_t)v11);
    outlined init with copy of DynamicViewListItem(a1, (uint64_t)v9);
    goto LABEL_10;
  }
  if ((*(_BYTE *)(a1 + 68) & 1) == 0)
    goto LABEL_5;
  outlined init with copy of DynamicViewListItem(v1, (uint64_t)v11);
  outlined init with copy of DynamicViewListItem(a1, (uint64_t)v9);
LABEL_7:
  v5 = 0;
  if (v11[0] == v9[0] && v11[1] == v9[1])
  {
    v6 = v10;
    v7 = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v5 = specialized static Array<A>.== infix(_:_:)(v7, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
LABEL_11:
  outlined destroy of DynamicViewListItem((uint64_t)v9);
  outlined destroy of DynamicViewListItem((uint64_t)v11);
  return v5 & 1;
}

uint64_t protocol witness for DynamicContainerItem.count.getter in conformance DynamicViewListItem()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[5];
  v2 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

double protocol witness for DynamicContainerItem.zIndex.getter in conformance DynamicViewListItem()
{
  uint64_t v0;
  double v1;

  v0 = swift_bridgeObjectRetain();
  v1 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(v0, 0.0);
  swift_bridgeObjectRelease();
  return v1;
}

unint64_t protocol witness for DynamicContainerItem.list.getter in conformance DynamicViewListItem()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 64) | ((unint64_t)*(unsigned __int8 *)(v0 + 68) << 32);
}

uint64_t protocol witness for DynamicContainerItem.viewID.getter in conformance DynamicViewListItem@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t specialized closure #1 in static DynamicContainerAdaptor<>.containsItem(_:_:)(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  if (*(_DWORD *)(a1 + 16) == *(_DWORD *)a2 && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 4))
  {
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_QWORD *)(a1 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v6 = specialized static Array<A>.== infix(_:_:)(v5, v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v3 = v6 ^ 1;
  }
  else
  {
    v3 = 1;
  }
  return v3 & 1;
}

BOOL protocol witness for static DynamicContainerAdaptor.containsItem(_:_:) in conformance DynamicLayoutViewAdaptor(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[4];
  char v7;
  uint64_t v8;

  v8 = 0;
  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  v6[2] = a2;
  v7 = 1;
  return (ViewList.applySublists(from:list:to:)((uint64_t)&v8, 0x100000000uLL, (uint64_t)partial apply for specialized closure #1 in static DynamicContainerAdaptor<>.containsItem(_:_:), (uint64_t)v6, v3, v4) & 1) == 0;
}

uint64_t destroy for DynamicViewListItem(uint64_t a1)
{
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DynamicViewListItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = a2 + 16;
  v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v5;
  v6 = v5;
  v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_bridgeObjectRetain();
  v7(a1 + 16, v4, v6);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DynamicViewListItem(uint64_t a1, uint64_t a2)
{
  int v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16));
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = v4;
  return a1;
}

__n128 __swift_memcpy69_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 61) = *(_QWORD *)(a2 + 61);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for DynamicViewListItem(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
  return a1;
}

uint64_t getEnumTagSinglePayload for DynamicViewListItem(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 69))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DynamicViewListItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 68) = 0;
    *(_DWORD *)(result + 64) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 69) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 69) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DynamicViewListItem()
{
  return &type metadata for DynamicViewListItem;
}

uint64_t partial apply for specialized closure #1 in static DynamicContainerAdaptor<>.containsItem(_:_:)(uint64_t a1)
{
  uint64_t v1;

  return specialized closure #1 in static DynamicContainerAdaptor<>.containsItem(_:_:)(a1, *(_QWORD *)(v1 + 16));
}

BOOL static ObservableObject.hasDefaultPublisher.getter()
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return AssociatedTypeWitness == type metadata accessor for ObservableObjectPublisher();
}

uint64_t ObservedObject.Wrapper.subscript.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;

  type metadata accessor for MainActor();
  swift_unknownObjectRetain();
  swift_retain();
  v6 = static MainActor.shared.getter();
  return Binding.init<A>(_:keyPath:isolation:)(a2, a1, v6, MEMORY[0x24BEE6930], a3);
}

uint64_t ObservedObject._seed.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*ObservedObject._seed.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ObservedObject.init(wrappedValue:)()
{
  return 0;
}

uint64_t ObservedObject.wrappedValue.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ObservedObject.wrappedValue.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_unknownObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*ObservedObject.wrappedValue.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ObservedObject.projectedValue.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t protocol witness for static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:) in conformance ObservedObject<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return specialized static ObservedObject._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a3, a4, *(_QWORD *)(a6 + 16), a5, *(_QWORD *)(a6 + 24));
}

uint64_t static ObservedObject._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return specialized static ObservedObject._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a3, a4, a5, a6, a7);
}

uint64_t static ObservedObject._propertyBehaviors.getter()
{
  return 2;
}

uint64_t ObservedObjectPropertyBox.update(property:phase:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  unsigned int v16;
  uint64_t result;
  uint64_t v18;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v4 = a1[1];
  if (one-time initialization token for v6 != -1)
    swift_once();
  v5 = static Semantics.v6;
  if (one-time initialization token for forced != -1)
    swift_once();
  v6 = swift_beginAccess();
  if (byte_25426FAB4 == 1)
  {
    v6 = dyld_program_sdk_at_least();
    if ((v6 & 1) == 0)
      goto LABEL_7;
LABEL_10:
    v10 = 0;
    v11 = v1[3];
    if (!v11)
      goto LABEL_13;
    goto LABEL_11;
  }
  if (static Semantics.forced >= v5)
    goto LABEL_10;
LABEL_7:
  v6 = type metadata accessor for ObservableObjectPublisher();
  v10 = AssociatedTypeWitness != v6;
  v11 = v1[3];
  if (!v11)
    goto LABEL_13;
LABEL_11:
  if (v4 != v11 || SubscriptionLifetime.isUninitialized.getter(v6, v7, v8, v9) || v10)
  {
LABEL_13:
    v18 = *v1;
    swift_retain();
    dispatch thunk of ObservableObject.objectWillChange.getter();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v14 = type metadata accessor for AttributeInvalidatingSubscriber(0, AssociatedTypeWitness, AssociatedConformanceWitness, v13);
    MEMORY[0x23B7C9C04](&protocol conformance descriptor for AttributeInvalidatingSubscriber<A>, v14);
    MEMORY[0x23B7C9C04](&protocol conformance descriptor for AttributeInvalidatingSubscriber<A>, v14);
    SubscriptionLifetime.subscribe<A>(subscriber:to:)((uint64_t)&v18);
  }
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v1[3] = v4;
  v15 = AGGraphGetWeakValue() != 0;
  result = v15 & v16;
  if ((_DWORD)result == 1)
    ++v1[2];
  *a1 = v1[2];
  return result;
}

uint64_t specialized ObservedObjectPropertyBox.init(host:invalidation:)(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  uint64_t v7;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for SubscriptionLifetime(0, AssociatedTypeWitness, AssociatedConformanceWitness, v6);
  SubscriptionLifetime.__allocating_init()();
  type metadata accessor for AttributeInvalidatingSubscriber(0, AssociatedTypeWitness, AssociatedConformanceWitness, v7);
  return specialized AttributeInvalidatingSubscriber.__allocating_init(host:attribute:)(a1, a2);
}

uint64_t specialized static ObservedObject._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t Context;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  _QWORD v33[5];

  v33[4] = *MEMORY[0x24BDAC8D0];
  type metadata accessor for External<()>();
  lazy protocol witness table accessor for type External<()> and conformance External<A>();
  v10 = Attribute.init<A>(body:value:flags:update:)();
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    v11 = v10;
    v12 = (id)AGSubgraphGetCurrent();
    if (!v12)
    {
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    v13 = v12;
    v14 = a2;
    v15 = (id)AGSubgraphGetGraph();

    v10 = v11;
  }
  else
  {
    v14 = a2;
    v15 = (id)AGGraphGetAttributeGraph();
  }
  v32 = a5;
  Context = AGGraphGetContext();
  if (!Context)
    __break(1u);
  v17 = Context;
  swift_retain();

  v18 = AGCreateWeakAttribute();
  v19 = v10;
  v20 = specialized ObservedObjectPropertyBox.init(host:invalidation:)(v17, v18);
  v22 = v21;
  v24 = v23;
  v26 = v25;
  swift_release();
  v33[0] = v20;
  v33[1] = v22;
  v33[2] = v24;
  v33[3] = v26;
  v28 = type metadata accessor for ObservedObjectPropertyBox(0, a4, a6, v27);
  v29 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ObservedObjectPropertyBox<A>, v28);
  _DynamicPropertyBuffer.append<A>(_:fieldOffset:)((uint64_t)v33, v14, v28, v29);
  if (AGSubgraphShouldRecordTree())
  {
    type metadata accessor for ObservedObject(0, a4, a6, v30);
    LODWORD(v33[0]) = 3;
    static DynamicProperty.addTreeValueSlow<A>(_:as:in:fieldOffset:flags:)(v19, a4, v32, v14);
  }
  swift_release();
  swift_release();
  return swift_unknownObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for ObservedObject(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_unknownObjectRetain();
  return a1;
}

uint64_t destroy for ObservedObject()
{
  return swift_unknownObjectRelease();
}

_QWORD *assignWithCopy for ObservedObject(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

_QWORD *assignWithTake for ObservedObject(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_unknownObjectRelease();
  return a1;
}

uint64_t type metadata accessor for ObservedObject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ObservedObject);
}

uint64_t type metadata accessor for ObservedObject.Wrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ObservedObject.Wrapper);
}

uint64_t type metadata accessor for ObservedObjectPropertyBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ObservedObjectPropertyBox);
}

uint64_t destroy for ObservedObjectPropertyBox()
{
  swift_release();
  swift_release();
  return swift_unknownObjectRelease();
}

_QWORD *initializeWithCopy for ObservedObjectPropertyBox(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ObservedObjectPropertyBox(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

uint64_t assignWithTake for ObservedObjectPropertyBox(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_unknownObjectRelease();
  return a1;
}

_UNKNOWN **associated type witness table accessor for DynamicPropertyBox.Property : DynamicProperty in ObservedObjectPropertyBox<A>()
{
  return &protocol witness table for ObservedObject<A>;
}

uint64_t specialized UnaryLayout.spacing(in:child:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 *InputValue;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (*MEMORY[0x24BE096C0] == HIDWORD(a3))
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    InputValue = &static LayoutComputer.defaultValue;
  }
  else
  {
    InputValue = (__int128 *)AGGraphGetInputValue();
  }
  v4 = *(_QWORD *)InputValue;
  v5 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v5 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_12;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (!_MovableLockIsOwner(static Update._lock))
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_12:
    (*(void (**)(void))(*(_QWORD *)v4 + 112))();
    return swift_release();
  }
  return result;
}

SwiftUI::Spacing UnaryLayout.spacing(in:child:)()
{
  return LayoutProxy.spacing()();
}

{
  return UnaryLayout.spacing(in:child:)();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance IgnoresAutomaticPaddingLayout(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _RotationEffect(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:));
}

uint64_t static UnaryLayout._makeView(modifier:inputs:body:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  int v20;

  v6 = *a2;
  v7 = *((_DWORD *)a2 + 2);
  v8 = a2[2];
  v9 = *((_DWORD *)a2 + 20);
  v20 = *a1;
  v12 = v6;
  v13 = v7;
  v14 = v8;
  v10 = *(_OWORD *)(a2 + 5);
  v15 = *(_OWORD *)(a2 + 3);
  v16 = v10;
  v17 = *(_OWORD *)(a2 + 7);
  v18 = a2[9];
  v19 = v9;
  return (*(uint64_t (**)(int *, uint64_t *))(a6 + 80))(&v20, &v12);
}

uint64_t protocol witness for UnaryLayout.spacing(in:child:) in conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout(uint64_t a1, uint64_t *a2)
{
  return specialized UnaryLayout.spacing(in:child:)(*(_QWORD *)a1, *(unsigned int *)(a1 + 8), *a2);
}

double UnaryLayout.layoutPriority(child:)()
{
  return 0.0;
}

uint64_t UnaryLayout.ignoresAutomaticPadding(child:)()
{
  return 0;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _RotationEffect(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:));
}

SwiftUI::Spacing protocol witness for UnaryLayout.spacing(in:child:) in conformance _FixedSizeLayout()
{
  return LayoutProxy.spacing()();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _FixedSizeLayout(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _RotationEffect(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:));
}

uint64_t dispatch thunk of UnaryLayout.spacing(in:child:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _PaddingLayout(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _RotationEffect(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:));
}

uint64_t protocol witness for UnaryLayout.spacing(in:child:) in conformance MoveTransition.MoveLayout(uint64_t a1, uint64_t *a2)
{
  return specialized UnaryLayout.spacing(in:child:)(*(_QWORD *)a1, *(unsigned int *)(a1 + 8), *a2);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance MoveTransition.MoveLayout(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _RotationEffect(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _AspectRatioLayout(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _RotationEffect(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:));
}

uint64_t specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, __int128 *)@<X2>, uint64_t a4@<X8>)
{
  void (*v4)(unint64_t *__return_ptr, uint64_t, __int128 *);
  __int128 v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int OffsetAttribute2;
  uint64_t v16;
  int v17;
  int v18;
  __int128 v19;
  __int128 v20;
  uint64_t result;
  uint64_t KeyPath;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  int v41;
  unsigned int v42;
  uint64_t v44;
  unint64_t v45;
  int v46;
  int v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[20];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v4 = a3;
  v56 = *MEMORY[0x24BDAC8D0];
  v6 = *(_OWORD *)(a2 + 32);
  v54 = *(_OWORD *)(a2 + 16);
  v55 = v6;
  v53 = *(_OWORD *)a2;
  v7 = DWORD1(v6);
  if ((BYTE4(v6) & 0x22) != 0)
  {
    v42 = a1;
    v8 = *(_QWORD *)a2;
    v9 = *(_DWORD *)(a2 + 8);
    v44 = *(_QWORD *)(a2 + 16);
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 40);
    v12 = *(_QWORD *)(a2 + 48);
    v13 = *(_QWORD *)(a2 + 56);
    v14 = *(_DWORD *)(a2 + 64);
    OffsetAttribute2 = *(_DWORD *)(a2 + 72);
    v41 = *(_DWORD *)(a2 + 68);
    v16 = *(_QWORD *)(a2 + 76);
    if ((BYTE4(v6) & 0x20) != 0)
    {
      v38 = *(_DWORD *)(a2 + 36);
      v37 = *(_DWORD *)(a2 + 32);
      v39 = *(_QWORD *)a2;
      KeyPath = swift_getKeyPath();
      v23 = v9;
      v24 = v54;
      swift_beginAccess();
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v53);
      v25 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
      swift_endAccess();
      outlined release of _GraphInputs((uint64_t)&v53);
      swift_release();
      v26 = *(_DWORD *)(a2 + 60);
      v27 = *(_DWORD *)(v24 + 16);
      v9 = v23;
      v28 = *(_DWORD *)(a2 + 76);
      v29 = *MEMORY[0x24BE096C0];
      *(_QWORD *)&v48 = __PAIR64__(v25, v42);
      *((_QWORD *)&v48 + 1) = __PAIR64__(v14, OffsetAttribute2);
      *(_QWORD *)&v49 = __PAIR64__(v27, v26);
      *((_QWORD *)&v49 + 1) = __PAIR64__(v28, v29);
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryPositionAwareChildGeometry<_SafeAreaIgnoringLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _SafeAreaIgnoringLayout and conformance _SafeAreaIgnoringLayout, (uint64_t)&type metadata for _SafeAreaIgnoringLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryPositionAwareChildGeometry);
      lazy protocol witness table accessor for type UnaryPositionAwareLayoutComputer<_SafeAreaIgnoringLayout> and conformance UnaryPositionAwareLayoutComputer<A>(&lazy protocol witness table cache variable for type UnaryPositionAwareChildGeometry<_SafeAreaIgnoringLayout> and conformance UnaryPositionAwareChildGeometry<A>, &lazy cache variable for type metadata for UnaryPositionAwareChildGeometry<_SafeAreaIgnoringLayout>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryPositionAwareChildGeometry, (uint64_t)&protocol conformance descriptor for UnaryPositionAwareChildGeometry<A>);
      v8 = v39;
      v4 = a3;
      Attribute.init<A>(body:value:flags:update:)();
      OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      v14 = AGGraphCreateOffsetAttribute2();
      v17 = v37 | 0x18;
      v18 = v38 | 2;
    }
    else
    {
      v17 = v55;
      outlined retain of _ViewInputs(a2);
      v18 = v7;
    }
    *(_QWORD *)&v48 = v8;
    DWORD2(v48) = v9;
    *(_QWORD *)&v49 = v44;
    *((_QWORD *)&v49 + 1) = v10;
    *(_QWORD *)&v50 = __PAIR64__(v18, v17);
    *((_QWORD *)&v50 + 1) = v11;
    *(_QWORD *)&v51 = v12;
    *((_QWORD *)&v51 + 1) = v13;
    *(_DWORD *)v52 = v14;
    *(_DWORD *)&v52[4] = v41;
    *(_DWORD *)&v52[8] = OffsetAttribute2;
    *(_QWORD *)&v52[12] = v16;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v30 = swift_bridgeObjectRetain();
    v4(&v45, v30, &v48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v31 = swift_release();
    v32 = v45;
    v33 = v46;
    v34 = v47;
    if ((v7 & 0x20) != 0)
    {
      MEMORY[0x24BDAC7A8](v31);
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryPositionAwareChildGeometry<_SafeAreaIgnoringLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _SafeAreaIgnoringLayout and conformance _SafeAreaIgnoringLayout, (uint64_t)&type metadata for _SafeAreaIgnoringLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryPositionAwareChildGeometry);
      MEMORY[0x24BDAC7A8](v35);
      AGGraphMutateAttribute();
    }
    if ((v7 & 2) != 0)
    {
      v36 = v54;
      swift_beginAccess();
      v45 = __PAIR64__(*(_DWORD *)(v36 + 16), v42);
      v46 = v34;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryPositionAwareLayoutComputer<_SafeAreaIgnoringLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _SafeAreaIgnoringLayout and conformance _SafeAreaIgnoringLayout, (uint64_t)&type metadata for _SafeAreaIgnoringLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryPositionAwareLayoutComputer);
      lazy protocol witness table accessor for type UnaryPositionAwareLayoutComputer<_SafeAreaIgnoringLayout> and conformance UnaryPositionAwareLayoutComputer<A>(&lazy protocol witness table cache variable for type UnaryPositionAwareLayoutComputer<_SafeAreaIgnoringLayout> and conformance UnaryPositionAwareLayoutComputer<A>, &lazy cache variable for type metadata for UnaryPositionAwareLayoutComputer<_SafeAreaIgnoringLayout>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryPositionAwareLayoutComputer, (uint64_t)&protocol conformance descriptor for UnaryPositionAwareLayoutComputer<A>);
      v34 = Attribute.init<A>(body:value:flags:update:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      result = swift_release();
      v33 |= 0x80u;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      result = swift_release();
    }
    *(_QWORD *)a4 = v32;
    *(_DWORD *)(a4 + 8) = v33;
    *(_DWORD *)(a4 + 12) = v34;
  }
  else
  {
    v19 = *(_OWORD *)(a2 + 48);
    v50 = *(_OWORD *)(a2 + 32);
    v51 = v19;
    *(_OWORD *)v52 = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v52[16] = *(_DWORD *)(a2 + 80);
    v20 = *(_OWORD *)(a2 + 16);
    v48 = *(_OWORD *)a2;
    v49 = v20;
    return ((uint64_t (*)(uint64_t, __int128 *))a3)(a1, &v48);
  }
  return result;
}

{
  void (*v4)(unint64_t *__return_ptr, uint64_t, __int128 *);
  __int128 v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int OffsetAttribute2;
  uint64_t v16;
  int v17;
  int v18;
  __int128 v19;
  __int128 v20;
  uint64_t result;
  uint64_t KeyPath;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  int v41;
  unsigned int v42;
  uint64_t v44;
  unint64_t v45;
  int v46;
  int v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[20];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v4 = a3;
  v56 = *MEMORY[0x24BDAC8D0];
  v6 = *(_OWORD *)(a2 + 32);
  v54 = *(_OWORD *)(a2 + 16);
  v55 = v6;
  v53 = *(_OWORD *)a2;
  v7 = DWORD1(v6);
  if ((BYTE4(v6) & 0x22) != 0)
  {
    v42 = a1;
    v8 = *(_QWORD *)a2;
    v9 = *(_DWORD *)(a2 + 8);
    v44 = *(_QWORD *)(a2 + 16);
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 40);
    v12 = *(_QWORD *)(a2 + 48);
    v13 = *(_QWORD *)(a2 + 56);
    v14 = *(_DWORD *)(a2 + 64);
    OffsetAttribute2 = *(_DWORD *)(a2 + 72);
    v41 = *(_DWORD *)(a2 + 68);
    v16 = *(_QWORD *)(a2 + 76);
    if ((BYTE4(v6) & 0x20) != 0)
    {
      v38 = *(_DWORD *)(a2 + 36);
      v37 = *(_DWORD *)(a2 + 32);
      v39 = *(_QWORD *)a2;
      KeyPath = swift_getKeyPath();
      v23 = v9;
      v24 = v54;
      swift_beginAccess();
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v53);
      v25 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
      swift_endAccess();
      outlined release of _GraphInputs((uint64_t)&v53);
      swift_release();
      v26 = *(_DWORD *)(a2 + 60);
      v27 = *(_DWORD *)(v24 + 16);
      v9 = v23;
      v28 = *(_DWORD *)(a2 + 76);
      v29 = *MEMORY[0x24BE096C0];
      *(_QWORD *)&v48 = __PAIR64__(v25, v42);
      *((_QWORD *)&v48 + 1) = __PAIR64__(v14, OffsetAttribute2);
      *(_QWORD *)&v49 = __PAIR64__(v27, v26);
      *((_QWORD *)&v49 + 1) = __PAIR64__(v28, v29);
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryPositionAwareChildGeometry<_SafeAreaRegionsIgnoringLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _SafeAreaRegionsIgnoringLayout and conformance _SafeAreaRegionsIgnoringLayout, (uint64_t)&type metadata for _SafeAreaRegionsIgnoringLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryPositionAwareChildGeometry);
      lazy protocol witness table accessor for type UnaryPositionAwareLayoutComputer<_SafeAreaRegionsIgnoringLayout> and conformance UnaryPositionAwareLayoutComputer<A>(&lazy protocol witness table cache variable for type UnaryPositionAwareChildGeometry<_SafeAreaRegionsIgnoringLayout> and conformance UnaryPositionAwareChildGeometry<A>, &lazy cache variable for type metadata for UnaryPositionAwareChildGeometry<_SafeAreaRegionsIgnoringLayout>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryPositionAwareChildGeometry, (uint64_t)&protocol conformance descriptor for UnaryPositionAwareChildGeometry<A>);
      v8 = v39;
      v4 = a3;
      Attribute.init<A>(body:value:flags:update:)();
      OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      v14 = AGGraphCreateOffsetAttribute2();
      v17 = v37 | 0x18;
      v18 = v38 | 2;
    }
    else
    {
      v17 = v55;
      outlined retain of _ViewInputs(a2);
      v18 = v7;
    }
    *(_QWORD *)&v48 = v8;
    DWORD2(v48) = v9;
    *(_QWORD *)&v49 = v44;
    *((_QWORD *)&v49 + 1) = v10;
    *(_QWORD *)&v50 = __PAIR64__(v18, v17);
    *((_QWORD *)&v50 + 1) = v11;
    *(_QWORD *)&v51 = v12;
    *((_QWORD *)&v51 + 1) = v13;
    *(_DWORD *)v52 = v14;
    *(_DWORD *)&v52[4] = v41;
    *(_DWORD *)&v52[8] = OffsetAttribute2;
    *(_QWORD *)&v52[12] = v16;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v30 = swift_bridgeObjectRetain();
    v4(&v45, v30, &v48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v31 = swift_release();
    v32 = v45;
    v33 = v46;
    v34 = v47;
    if ((v7 & 0x20) != 0)
    {
      MEMORY[0x24BDAC7A8](v31);
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryPositionAwareChildGeometry<_SafeAreaRegionsIgnoringLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _SafeAreaRegionsIgnoringLayout and conformance _SafeAreaRegionsIgnoringLayout, (uint64_t)&type metadata for _SafeAreaRegionsIgnoringLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryPositionAwareChildGeometry);
      MEMORY[0x24BDAC7A8](v35);
      AGGraphMutateAttribute();
    }
    if ((v7 & 2) != 0)
    {
      v36 = v54;
      swift_beginAccess();
      v45 = __PAIR64__(*(_DWORD *)(v36 + 16), v42);
      v46 = v34;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for UnaryPositionAwareLayoutComputer<_SafeAreaRegionsIgnoringLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _SafeAreaRegionsIgnoringLayout and conformance _SafeAreaRegionsIgnoringLayout, (uint64_t)&type metadata for _SafeAreaRegionsIgnoringLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryPositionAwareLayoutComputer);
      lazy protocol witness table accessor for type UnaryPositionAwareLayoutComputer<_SafeAreaRegionsIgnoringLayout> and conformance UnaryPositionAwareLayoutComputer<A>(&lazy protocol witness table cache variable for type UnaryPositionAwareLayoutComputer<_SafeAreaRegionsIgnoringLayout> and conformance UnaryPositionAwareLayoutComputer<A>, &lazy cache variable for type metadata for UnaryPositionAwareLayoutComputer<_SafeAreaRegionsIgnoringLayout>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryPositionAwareLayoutComputer, (uint64_t)&protocol conformance descriptor for UnaryPositionAwareLayoutComputer<A>);
      v34 = Attribute.init<A>(body:value:flags:update:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      result = swift_release();
      v33 |= 0x80u;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      result = swift_release();
    }
    *(_QWORD *)a4 = v32;
    *(_DWORD *)(a4 + 8) = v33;
    *(_DWORD *)(a4 + 12) = v34;
  }
  else
  {
    v19 = *(_OWORD *)(a2 + 48);
    v50 = *(_OWORD *)(a2 + 32);
    v51 = v19;
    *(_OWORD *)v52 = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v52[16] = *(_DWORD *)(a2 + 80);
    v20 = *(_OWORD *)(a2 + 16);
    v48 = *(_OWORD *)a2;
    v49 = v20;
    return ((uint64_t (*)(uint64_t, __int128 *))a3)(a1, &v48);
  }
  return result;
}

uint64_t dispatch thunk of UnaryLayout.placement(of:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t dispatch thunk of UnaryLayout.sizeThatFits(in:context:child:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 56))();
}

uint64_t dispatch thunk of UnaryLayout.layoutPriority(child:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of UnaryLayout.ignoresAutomaticPadding(child:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of static UnaryLayout.makeViewImpl(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 80))();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _AlignmentLayout(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _RotationEffect(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _FrameLayout(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _RotationEffect(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _FlexFrameLayout(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _RotationEffect(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance LayoutPriorityLayout(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _RotationEffect(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _SafeAreaIgnoringLayout(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _RotationEffect(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _SafeAreaRegionsIgnoringLayout(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _RotationEffect(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance SpacingLayout(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _RotationEffect(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:));
}

uint64_t lazy protocol witness table accessor for type UnaryPositionAwareLayoutComputer<_SafeAreaRegionsIgnoringLayout> and conformance UnaryPositionAwareLayoutComputer<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type _SafeAreaRegionsIgnoringLayout and conformance _SafeAreaRegionsIgnoringLayout, (uint64_t)&type metadata for _SafeAreaRegionsIgnoringLayout, a3);
    result = MEMORY[0x23B7C9C04](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(result + 24) = *(_DWORD *)(v1 + 28);
  return result;
}

uint64_t lazy protocol witness table accessor for type UnaryPositionAwareLayoutComputer<_SafeAreaIgnoringLayout> and conformance UnaryPositionAwareLayoutComputer<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type _SafeAreaIgnoringLayout and conformance _SafeAreaIgnoringLayout, (uint64_t)&type metadata for _SafeAreaIgnoringLayout, a3);
    result = MEMORY[0x23B7C9C04](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t static DerivedLayout.layoutProperties.getter()
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t DerivedLayout.makeCache(subviews:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  int v12;
  uint64_t v13;
  char v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t v17;
  int v18;
  uint64_t v19;
  char v20;
  char v21;

  v17 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11 = (char *)&v17 - v10;
  v12 = *a1;
  v13 = *((_QWORD *)a1 + 1);
  v14 = *((_BYTE *)a1 + 16);
  LOBYTE(a1) = *((_BYTE *)a1 + 17);
  (*(void (**)(uint64_t, uint64_t, double))(a3 + 32))(a2, a3, v9);
  v18 = v12;
  v19 = v13;
  v20 = v14;
  v21 = (char)a1;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(int *, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(&v18, AssociatedTypeWitness, AssociatedConformanceWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, AssociatedTypeWitness);
}

uint64_t DerivedLayout.updateCache(_:subviews:)(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  int v12;
  uint64_t v13;
  char v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t v17;
  int v18;
  uint64_t v19;
  char v20;
  char v21;

  v17 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11 = (char *)&v17 - v10;
  v12 = *a2;
  v13 = *((_QWORD *)a2 + 1);
  v14 = *((_BYTE *)a2 + 16);
  LOBYTE(a2) = *((_BYTE *)a2 + 17);
  (*(void (**)(uint64_t, uint64_t, double))(a4 + 32))(a3, a4, v9);
  v18 = v12;
  v19 = v13;
  v20 = v14;
  v21 = (char)a2;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, int *, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(v17, &v18, AssociatedTypeWitness, AssociatedConformanceWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, AssociatedTypeWitness);
}

uint64_t protocol witness for Layout.spacing(subviews:cache:) in conformance ZStackLayout@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;
  char v4;
  int v6;
  uint64_t v7;
  char v8;
  char v9;

  v2 = *((_QWORD *)a1 + 1);
  v3 = *((_BYTE *)a1 + 16);
  v4 = *((_BYTE *)a1 + 17);
  v6 = *a1;
  v7 = v2;
  v8 = v3;
  v9 = v4;
  return _ZStackLayout.spacing(subviews:cache:)((uint64_t)&v6, a2);
}

uint64_t DerivedLayout.spacing(subviews:cache:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  int v13;
  uint64_t v14;
  char v15;
  uint64_t AssociatedConformanceWitness;
  _QWORD v18[2];
  uint64_t v19;
  int v20;
  uint64_t v21;
  char v22;
  char v23;

  v18[1] = a5;
  v19 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v12 = (char *)v18 - v11;
  v13 = *a1;
  v14 = *((_QWORD *)a1 + 1);
  v15 = *((_BYTE *)a1 + 16);
  LOBYTE(a1) = *((_BYTE *)a1 + 17);
  (*(void (**)(uint64_t, uint64_t, double))(a4 + 32))(a3, a4, v10);
  v20 = v13;
  v21 = v14;
  v22 = v15;
  v23 = (char)a1;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(int *, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(&v20, v19, AssociatedTypeWitness, AssociatedConformanceWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, AssociatedTypeWitness);
}

uint64_t protocol witness for Layout.sizeThatFits(proposal:subviews:cache:) in conformance ZStackLayout(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  unint64_t *v6;
  uint64_t v7;
  char v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  int v13;
  uint64_t v14;
  char v15;
  char v16;

  v7 = *(_QWORD *)(a5 + 8);
  v8 = *(_BYTE *)(a5 + 16);
  v9 = *(_BYTE *)(a5 + 17);
  v10 = *v6;
  v11 = v6[1];
  v13 = *(_DWORD *)a5;
  v14 = v7;
  v15 = v8;
  v16 = v9;
  return _ZStackLayout.sizeThatFits(proposal:subviews:cache:)(a1, a2 & 1, a3, a4 & 1, &v13, a6, v10, v11);
}

double DerivedLayout.sizeThatFits(proposal:subviews:cache:)(uint64_t a1, int a2, uint64_t a3, int a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t AssociatedTypeWitness;
  double v12;
  uint64_t v13;
  char *v14;
  int v15;
  uint64_t v16;
  char v17;
  double (*v18)(uint64_t);
  double v19;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  int v29;
  uint64_t v30;
  char v31;
  char v32;

  v25 = a3;
  v26 = a6;
  v21 = a2;
  v22 = a4;
  v24 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v23 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v14 = (char *)&v21 - v13;
  v15 = *a5;
  v16 = *((_QWORD *)a5 + 1);
  v17 = *((_BYTE *)a5 + 16);
  LOBYTE(a5) = *((_BYTE *)a5 + 17);
  (*(void (**)(uint64_t, uint64_t, double))(a8 + 32))(a7, a8, v12);
  v29 = v15;
  v30 = v16;
  v31 = v17;
  v32 = (char)a5;
  v18 = *(double (**)(uint64_t))(swift_getAssociatedConformanceWitness() + 56);
  v28 = v21 & 1;
  v27 = v22 & 1;
  v19 = v18(v24);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v14, AssociatedTypeWitness);
  return v19;
}

uint64_t protocol witness for Layout.placeSubviews(in:proposal:subviews:cache:) in conformance ZStackLayout(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t *v10;
  uint64_t v11;
  char v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  int v17;
  uint64_t v18;
  char v19;
  char v20;

  v11 = *(_QWORD *)(a9 + 8);
  v12 = *(_BYTE *)(a9 + 16);
  v13 = *(_BYTE *)(a9 + 17);
  v14 = *v10;
  v15 = v10[1];
  v17 = *(_DWORD *)a9;
  v18 = v11;
  v19 = v12;
  v20 = v13;
  return specialized _ZStackLayout.placeSubviews(in:proposal:subviews:cache:)(&v17, a1, a2, a3, a4, a10, v14, v15);
}

uint64_t DerivedLayout.placeSubviews(in:proposal:subviews:cache:)(uint64_t a1, int a2, uint64_t a3, int a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12)
{
  uint64_t AssociatedTypeWitness;
  double v20;
  uint64_t v21;
  char *v22;
  int v23;
  uint64_t v24;
  char v25;
  void (*v26)(uint64_t, double, double, double, double);
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  int v37;
  uint64_t v38;
  char v39;
  char v40;

  v33 = a3;
  v34 = a6;
  v31 = a4;
  v29 = a2;
  v32 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v30 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v20 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v22 = (char *)&v28 - v21;
  v23 = *a5;
  v24 = *((_QWORD *)a5 + 1);
  v25 = *((_BYTE *)a5 + 16);
  LOBYTE(a5) = *((_BYTE *)a5 + 17);
  (*(void (**)(uint64_t, uint64_t, double))(a8 + 32))(a7, a8, v20);
  v37 = v23;
  v38 = v24;
  v39 = v25;
  v40 = (char)a5;
  v26 = *(void (**)(uint64_t, double, double, double, double))(swift_getAssociatedConformanceWitness() + 64);
  v36 = v29 & 1;
  v35 = v31 & 1;
  v26(v32, a9, a10, a11, a12);
  return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v22, AssociatedTypeWitness);
}

uint64_t protocol witness for Layout.explicitAlignment(of:in:proposal:subviews:cache:) in conformance ZStackLayout(uint64_t a1)
{
  return protocol witness for Layout.explicitAlignment(of:in:proposal:subviews:cache:) in conformance ZStackLayout(a1);
}

{
  uint64_t result;
  uint64_t v3;
  __int128 v4;
  _OWORD v5[2];

  result = _threadLayoutData();
  if (result)
  {
    if (*(_BYTE *)result == 1)
    {
      v3 = *(_QWORD *)(result + 16);
      v4 = *(_OWORD *)(result + 48);
      v5[0] = *(_OWORD *)(result + 32);
      v5[1] = v4;
      return (*(uint64_t (**)(uint64_t, _OWORD *, _QWORD))(v3 + 8))(a1, v5, *(_QWORD *)(result + 24));
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t DerivedLayout.explicitAlignment(of:in:proposal:subviews:cache:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, int *a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, uint64_t a13)
{
  uint64_t AssociatedTypeWitness;
  double v20;
  uint64_t v21;
  char *v22;
  int v23;
  uint64_t v24;
  char v25;
  uint64_t (*v26)(uint64_t, uint64_t, double, double, double, double);
  uint64_t v27;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  int v39;
  uint64_t v40;
  char v41;
  char v42;

  v35 = a4;
  v36 = a7;
  v30 = a3;
  v31 = a5;
  v33 = a1;
  v34 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v32 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v20 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v22 = (char *)&v29 - v21;
  v23 = *a6;
  v24 = *((_QWORD *)a6 + 1);
  v25 = *((_BYTE *)a6 + 16);
  LOBYTE(a6) = *((_BYTE *)a6 + 17);
  (*(void (**)(uint64_t, uint64_t, double))(a13 + 32))(a8, a13, v20);
  v39 = v23;
  v40 = v24;
  v41 = v25;
  v42 = (char)a6;
  v26 = *(uint64_t (**)(uint64_t, uint64_t, double, double, double, double))(swift_getAssociatedConformanceWitness()
                                                                                   + 72);
  v38 = v30 & 1;
  v37 = v31 & 1;
  v27 = v26(v33, v34, a9, a10, a11, a12);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v22, AssociatedTypeWitness);
  return v27;
}

{
  uint64_t AssociatedTypeWitness;
  double v20;
  uint64_t v21;
  char *v22;
  int v23;
  uint64_t v24;
  char v25;
  uint64_t (*v26)(uint64_t, uint64_t, double, double, double, double);
  uint64_t v27;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  int v39;
  uint64_t v40;
  char v41;
  char v42;

  v35 = a4;
  v36 = a7;
  v30 = a3;
  v31 = a5;
  v33 = a1;
  v34 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v32 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v20 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v22 = (char *)&v29 - v21;
  v23 = *a6;
  v24 = *((_QWORD *)a6 + 1);
  v25 = *((_BYTE *)a6 + 16);
  LOBYTE(a6) = *((_BYTE *)a6 + 17);
  (*(void (**)(uint64_t, uint64_t, double))(a13 + 32))(a8, a13, v20);
  v39 = v23;
  v40 = v24;
  v41 = v25;
  v42 = (char)a6;
  v26 = *(uint64_t (**)(uint64_t, uint64_t, double, double, double, double))(swift_getAssociatedConformanceWitness()
                                                                                   + 80);
  v38 = v30 & 1;
  v37 = v31 & 1;
  v27 = v26(v33, v34, a9, a10, a11, a12);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v22, AssociatedTypeWitness);
  return v27;
}

uint64_t dispatch thunk of DerivedLayout.base.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

unint64_t specialized HVStack.spacing(subviews:cache:)@<X0>(double a1@<X3>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  unint64_t result;
  char v6;
  uint64_t v7;

  v4 = *(_QWORD **)(*(_QWORD *)&a1 + 104);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew()(v4);
  result = StackLayout.UnmanagedImplementation.spacing()(a1, &v7);
  v6 = *(_BYTE *)(*(_QWORD *)&a1 + 97);
  *(_QWORD *)a2 = v7;
  *(_BYTE *)(a2 + 8) = v6;
  *(_QWORD *)(*(_QWORD *)&a1 + 104) = v4;
  return result;
}

double specialized HVStack.sizeThatFits(proposal:subviews:cache:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, __n128 *a8)
{
  return specialized HVStack.sizeThatFits(proposal:subviews:cache:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

{
  return specialized HVStack.sizeThatFits(proposal:subviews:cache:)(a1, a2 & 1, a3, a4 & 1, a8);
}

unint64_t protocol witness for Layout.spacing(subviews:cache:) in conformance <> VStack<A>@<X0>(double a1@<X1>, uint64_t a2@<X8>)
{
  return specialized HVStack.spacing(subviews:cache:)(a1, a2);
}

double protocol witness for Layout.sizeThatFits(proposal:subviews:cache:) in conformance <> VStack<A>(uint64_t a1, char a2, uint64_t a3, char a4, unsigned int *a5, __n128 *a6)
{
  char v6;
  char v7;
  int v8;

  v6 = a2 & 1;
  v7 = a4 & 1;
  if (*((_BYTE *)a5 + 17))
    v8 = 256;
  else
    v8 = 0;
  return specialized HVStack.sizeThatFits(proposal:subviews:cache:)(a1, v6, a3, v7, *a5, *((_QWORD *)a5 + 1), v8 | *((unsigned __int8 *)a5 + 16), a6);
}

double protocol witness for Layout.sizeThatFits(proposal:subviews:cache:) in conformance VStackLayout(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, __n128 *a6)
{
  return specialized HVStack.sizeThatFits(proposal:subviews:cache:)(a1, a2 & 1, a3, a4 & 1, a6);
}

double specialized HVStack.sizeThatFits(proposal:subviews:cache:)(uint64_t a1, char a2, uint64_t a3, char a4, __n128 *a5)
{
  _QWORD *v10;
  uint64_t v11;
  double result;
  __n128 v13;

  v10 = (_QWORD *)a5[6].n128_u64[1];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
  v11 = v10[2];
  v13.n128_u8[0] = a2 & 1;
  closure #1 in StackLayout.sizeThatFits(_:)(a5, (uint64_t)(v10 + 4), v11, *(double *)&a1, a2 & 1, *(double *)&a3, a4 & 1, &v13);
  result = v13.n128_f64[0];
  a5[6].n128_u64[1] = (unint64_t)v10;
  return result;
}

uint64_t static Layout.makeStaticView(root:inputs:properties:list:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  char isEscapingClosureAtFileLocation;
  uint64_t v35;
  int v36;
  int v37;
  BOOL v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  _QWORD *v44;
  int v45;
  uint64_t v46;
  int *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  int v51;
  int v52;
  _QWORD *v53;
  int *v54;
  uint64_t *v55;
  unsigned int v56;
  unint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  char v74;
  _QWORD v75[3];
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  unsigned int v87;
  int v88;
  unsigned int v89;
  int v90;
  int v91;
  _QWORD v92[3];

  v55 = (uint64_t *)a6;
  v54 = (int *)a5;
  v92[2] = *MEMORY[0x24BDAC8D0];
  v9 = *a1;
  v57 = *(_QWORD *)a2;
  v58 = *(_DWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  v59 = *(_DWORD *)(a2 + 24);
  v60 = *(_DWORD *)(a2 + 28);
  v61 = *(_DWORD *)(a2 + 32);
  v69 = *(_DWORD *)(a2 + 36);
  v62 = *(_QWORD *)(a2 + 40);
  v63 = *(_QWORD *)(a2 + 48);
  v64 = *(_DWORD *)(a2 + 56);
  v65 = *(_DWORD *)(a2 + 60);
  v56 = *(_DWORD *)(a2 + 64);
  v11 = *(_DWORD *)(a2 + 72);
  v66 = *(_DWORD *)(a2 + 68);
  v67 = *(_DWORD *)(a2 + 76);
  v68 = *(_DWORD *)(a2 + 80);
  v12 = *(unsigned __int8 *)(a3 + 1);
  v13 = *(unsigned __int8 *)(a3 + 2);
  v14 = a4[3];
  v15 = a4[4];
  __swift_project_boxed_opaque_existential_1(a4, v14);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v14, v15);
  if (result == 1)
  {
    if (v13)
    {
      v17 = a4[3];
      v18 = a4[4];
      __swift_project_boxed_opaque_existential_1(a4, v17);
      v92[0] = 0;
      v76 = v57;
      LODWORD(v77) = v58;
      v78 = v10;
      v79 = v59;
      v80 = v60;
      v81 = v61;
      v82 = v69;
      v83 = v62;
      v84 = v63;
      v85 = v64;
      v86 = v65;
      v87 = v56;
      v88 = v66;
      v89 = v11;
      v90 = v67;
      v91 = v68;
      (*(void (**)(_QWORD *, _QWORD *, unint64_t *, _QWORD, uint64_t (*)(_QWORD *, uint64_t *, void (*)(_QWORD *__return_ptr, uint64_t *)), _QWORD, uint64_t, uint64_t))(v18 + 16))(v75, v92, &v76, 0, specialized closure #1 in closure #1 in _ViewList_Elements.makeAllElements(inputs:indirectMap:body:), 0, v17, v18);
      v20 = v75[0];
      v19 = v75[1];
      result = swift_isEscapingClosureAtFileLocation();
      if ((result & 1) == 0)
      {
        if (v20)
        {
          *(_QWORD *)a7 = v20;
          *(_QWORD *)(a7 + 8) = v19;
          return result;
        }
        goto LABEL_25;
      }
LABEL_28:
      __break(1u);
    }
  }
  else if (!result && v12)
  {
LABEL_25:
    *(_QWORD *)a7 = MEMORY[0x24BEE4AF8];
    v45 = *MEMORY[0x24BE096C0];
    *(_DWORD *)(a7 + 8) = 0;
    *(_DWORD *)(a7 + 12) = v45;
    return result;
  }
  v73 = 0;
  v74 = 1;
  v53 = (_QWORD *)a7;
  v52 = v69 & 0x22;
  if ((v69 & 0x22) != 0)
  {
    v21 = swift_beginAccess();
    v76 = __PAIR64__(*(_DWORD *)(v10 + 16), v9);
    v77 = MEMORY[0x24BEE4AF8];
    MEMORY[0x24BDAC7A8](v21);
    v49 = (uint64_t *)type metadata accessor for StaticLayoutComputer(0, (uint64_t)v54, (uint64_t)v55, v22);
    v50 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for StaticLayoutComputer<A>, v49);
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Attribute<LayoutComputer>, (uint64_t)&type metadata for LayoutComputer, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE095F0]);
    _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v76, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_0, (uint64_t)&v47, (uint64_t)v49, MEMORY[0x24BEE4078], v23, MEMORY[0x24BEE40A8], v24);
    v25 = v10;
    swift_bridgeObjectRelease();
    v26 = v56;
    v76 = __PAIR64__(v56, v11);
    v51 = v92[0];
    LODWORD(v77) = v92[0];
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewGeometry], (uint64_t)&type metadata for ViewGeometry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    lazy protocol witness table accessor for type LayoutChildGeometries and conformance LayoutChildGeometries();
    v73 = Attribute.init<A>(body:value:flags:update:)();
    v74 = 0;
  }
  else
  {
    v51 = 0;
    v26 = v56;
    v25 = v10;
  }
  v71 = 0;
  v72 = MEMORY[0x24BEE4AF8];
  v27 = a4[4];
  v28 = __swift_project_boxed_opaque_existential_1(a4, a4[3]);
  MEMORY[0x24BDAC7A8](v28);
  v47 = &v73;
  v48 = &v71;
  v49 = &v72;
  v29 = swift_allocObject();
  *(_QWORD *)(v29 + 16) = partial apply for closure #2 in static Layout.makeStaticView(root:inputs:properties:list:);
  *(_QWORD *)(v29 + 24) = &v46;
  v70 = 0;
  v76 = v57;
  LODWORD(v77) = v58;
  v78 = v25;
  v79 = v59;
  v80 = v60;
  v30 = v69;
  v81 = v61;
  v82 = v69;
  v83 = v62;
  v84 = v63;
  v85 = v64;
  v86 = v65;
  v87 = v26;
  v88 = v66;
  v89 = v11;
  v90 = v67;
  v91 = v68;
  v31 = MEMORY[0x24BDAC7A8](v29);
  (*(void (**)(_QWORD *, uint64_t *, unint64_t *, _QWORD, uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t), double))(v27 + 16))(v92, &v70, &v76, 0, partial apply for closure #1 in closure #1 in _ViewList_Elements.makeAllElements(inputs:indirectMap:body:), v31);
  v32 = v92[0];
  v33 = v92[1];
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  v35 = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_28;
  }
  v36 = v30 & 2;
  v37 = *MEMORY[0x24BE096C0];
  v38 = v32 == 0;
  if (v32)
  {
    v39 = v33;
  }
  else
  {
    v32 = MEMORY[0x24BEE4AF8];
    v39 = 0;
  }
  if (v38)
    v40 = *MEMORY[0x24BE096C0];
  else
    v40 = HIDWORD(v33);
  if (v52)
  {
    MEMORY[0x24BDAC7A8](v35);
    v47 = v54;
    v48 = v55;
    v49 = &v72;
    v42 = type metadata accessor for StaticLayoutComputer(0, (uint64_t)v54, (uint64_t)v55, v41);
    MEMORY[0x24BDAC7A8](v42);
    v37 = v51;
    AGGraphMutateAttribute();
  }
  if (v36)
    v43 = v37;
  else
    v43 = v40;
  v44 = v53;
  *v53 = v32;
  *((_DWORD *)v44 + 2) = v39 | (v36 << 6);
  *((_DWORD *)v44 + 3) = v43;
  return swift_bridgeObjectRelease();
}

uint64_t LayoutChildGeometries.init(parentSize:parentPosition:layoutComputer:)@<X0>(uint64_t result@<X0>, int a2@<W1>, int a3@<W2>, _DWORD *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t closure #2 in static Layout.makeStaticView(root:inputs:properties:list:)@<X0>(uint64_t result@<X0>, void (*a2)(uint64_t *__return_ptr, uint64_t *)@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X4>, _QWORD **a5@<X5>, _QWORD *a6@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int OffsetAttribute2;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  _QWORD *v24;
  char isUniquelyReferenced_nonNull_native;
  int v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v31;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)result;
  v7 = *(_DWORD *)(result + 8);
  v8 = *(_QWORD *)(result + 16);
  v9 = *(_QWORD *)(result + 24);
  v10 = *(_DWORD *)(result + 32);
  v11 = *(_DWORD *)(result + 36);
  v12 = *(_QWORD *)(result + 40);
  v13 = *(_QWORD *)(result + 48);
  v14 = *(_QWORD *)(result + 56);
  v15 = *(_DWORD *)(result + 68);
  v16 = *(_QWORD *)(result + 76);
  if ((v11 & 0x20) != 0)
  {
    if ((*(_BYTE *)(a3 + 4) & 1) != 0)
    {
      __break(1u);
      return result;
    }
    v19 = *a4;
    LODWORD(v38) = *(_DWORD *)a3;
    v39 = v19;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    lazy protocol witness table accessor for type LayoutChildGeometry and conformance LayoutChildGeometry();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    Attribute.init<A>(body:value:flags:update:)();
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    v17 = AGGraphCreateOffsetAttribute2();
    v10 |= 0x18u;
  }
  else
  {
    v17 = *(_DWORD *)(result + 72);
    OffsetAttribute2 = *(_DWORD *)(result + 64);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v38 = v6;
  LODWORD(v39) = v7;
  v40 = v8;
  v41 = v9;
  v42 = v10;
  v43 = v11;
  v44 = v12;
  v45 = v13;
  v46 = v14;
  v47 = OffsetAttribute2;
  v48 = v15;
  v49 = v17;
  v50 = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  a2(&v35, &v38);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v20 = v35;
  v21 = v36;
  v22 = v37;
  if ((v11 & 0x20) != 0)
  {
    v31 = v35;
    v23 = (int *)MEMORY[0x24BE096C0];
    v24 = *a5;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a5 = v24;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
      *a5 = v24;
    }
    v26 = *v23;
    v28 = v24[2];
    v27 = v24[3];
    if (v28 >= v27 >> 1)
      v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v27 > 1), v28 + 1, 1, v24);
    v24[2] = v28 + 1;
    v29 = &v24[v28];
    *((_DWORD *)v29 + 8) = v22;
    *((_DWORD *)v29 + 9) = v26;
    *a5 = v24;
    v20 = v31;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  ++*a4;
  *a6 = v20;
  a6[1] = v21 | (v22 << 32);
  return result;
}

uint64_t LayoutChildGeometries.value.getter()
{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double *v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _QWORD v12[4];

  v0 = *(_QWORD *)AGGraphGetValue();
  Value = (uint64_t *)AGGraphGetValue();
  v2 = *Value;
  v3 = Value[1];
  v4 = Value[2];
  v5 = Value[3];
  v6 = (double *)AGGraphGetValue();
  v7 = *v6;
  v8 = v6[1];
  v9 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v9 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_7;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (!_MovableLockIsOwner(static Update._lock))
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_7:
    v12[0] = v2;
    v12[1] = v3;
    v12[2] = v4;
    v12[3] = v5;
    v10 = (*(uint64_t (**)(_QWORD *, double, double))(*(_QWORD *)v0 + 136))(v12, v7, v8);
    swift_release();
    return v10;
  }
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance LayoutChildGeometries@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = LayoutChildGeometries.value.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance LayoutChildGeometry@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v3 = *(_QWORD *)(v1 + 8);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewGeometry], (uint64_t)&type metadata for ViewGeometry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  result = AGGraphGetValue();
  if ((v3 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v3 < *(_QWORD *)(*(_QWORD *)result + 16))
  {
    v5 = *(_QWORD *)result + (v3 << 6);
    v6 = *(_QWORD *)(v5 + 48);
    v7 = *(_QWORD *)(v5 + 56);
    *(_OWORD *)a1 = *(_OWORD *)(v5 + 32);
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = v7;
    v8 = *(_OWORD *)(v5 + 80);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(v5 + 64);
    *(_OWORD *)(a1 + 48) = v8;
    return swift_retain();
  }
  __break(1u);
  return result;
}

uint64_t StaticLayoutComputer.updateValue()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Value;
  uint64_t v11;
  uint64_t v13;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_DWORD *)(v1 + 4);
  v8 = *(_QWORD *)(v1 + 8);
  v9 = *(_QWORD *)(a1 + 24);
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, Value, v3);
  swift_bridgeObjectRetain();
  v11 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for StaticLayoutComputer<A>, a1);
  StatefulRule<>.updateLayoutComputer<A>(layout:environment:attributes:)((uint64_t)v6, v7, v8, a1, v3, v11, v9);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t StatefulRule<>.updateLayoutComputer<A>(layout:environment:attributes:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  int v15;
  uint64_t v16;
  int v17[3];

  result = AGGraphGetCurrentAttribute();
  if ((_DWORD)result == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v17[0] = result;
    v17[1] = result;
    v17[2] = a2;
    v15 = result;
    v16 = a3;
    return Layout.updateLayoutComputer<A>(rule:layoutContext:children:)(v7, v17, &v15, a5, a4, a7, a6);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StaticLayoutComputer<A>()
{
  return specialized StaticLayoutComputer.description.getter();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance StaticLayoutComputer<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for StaticLayoutComputer<A>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t thunk for @callee_guaranteed (@in_guaranteed _ViewInputs, @guaranteed @escaping @callee_guaranteed (@in_guaranteed _ViewInputs) -> (@out _ViewOutputs)) -> (@out _ViewOutputs?)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t partial apply for closure #2 in static Layout.makeStaticView(root:inputs:properties:list:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t *__return_ptr, uint64_t *)@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  return closure #2 in static Layout.makeStaticView(root:inputs:properties:list:)(a1, a2, *(_QWORD *)(v3 + 16), *(uint64_t **)(v3 + 24), *(_QWORD ***)(v3 + 32), a3);
}

uint64_t sub_234E4D964()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in _ViewList_Elements.makeAllElements(inputs:indirectMap:body:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in closure #1 in _ViewList_Elements.makeAllElements(inputs:indirectMap:body:)(a1, a2, a3, a4, *(void (**)(uint64_t *, uint64_t, uint64_t))(v4 + 16));
}

uint64_t partial apply for closure #3 in static Layout.makeStaticView(root:inputs:properties:list:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = **(_QWORD **)(v1 + 32);
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = v3;
  return result;
}

uint64_t type metadata accessor for StaticLayoutComputer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StaticLayoutComputer);
}

unint64_t lazy protocol witness table accessor for type LayoutChildGeometries and conformance LayoutChildGeometries()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LayoutChildGeometries and conformance LayoutChildGeometries;
  if (!lazy protocol witness table cache variable for type LayoutChildGeometries and conformance LayoutChildGeometries)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LayoutChildGeometries, &type metadata for LayoutChildGeometries);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutChildGeometries and conformance LayoutChildGeometries);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for LayoutChildGeometries(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type LayoutChildGeometries and conformance LayoutChildGeometries();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for LayoutChildGeometries()
{
  return &type metadata for LayoutChildGeometries;
}

uint64_t instantiation function for generic protocol witness table for StaticLayoutComputer<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for StaticLayoutComputer<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in StaticLayoutComputer<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t specialized StaticLayoutComputer.description.getter()
{
  Swift::String v0;
  Swift::String v1;
  uint64_t v3;

  v3 = _typeName(_:qualified:)();
  v0._countAndFlagsBits = 0x209286E220;
  v0._object = (void *)0xA500000000000000;
  String.append(_:)(v0);
  v1._countAndFlagsBits = 0x6F4374756F79614CLL;
  v1._object = (void *)0xEE0072657475706DLL;
  String.append(_:)(v1);
  return v3;
}

unint64_t lazy protocol witness table accessor for type LayoutChildGeometry and conformance LayoutChildGeometry()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LayoutChildGeometry and conformance LayoutChildGeometry;
  if (!lazy protocol witness table cache variable for type LayoutChildGeometry and conformance LayoutChildGeometry)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LayoutChildGeometry, &unk_25062CDC0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutChildGeometry and conformance LayoutChildGeometry);
  }
  return result;
}

void *type metadata accessor for LayoutChildGeometry()
{
  return &unk_25062CDC0;
}

unint64_t instantiation function for generic protocol witness table for LayoutChildGeometry(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type LayoutChildGeometry and conformance LayoutChildGeometry();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t specialized _ViewOutputs.subscript.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned __int8 v5;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<Text.LayoutKey>, (uint64_t)&type metadata for Text.LayoutKey, (uint64_t)&protocol witness table for Text.LayoutKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = (unsigned int *)(a1 + 48);
    while (*((_QWORD *)v4 - 2) != v2)
    {
      v4 += 6;
      if (!--v3)
        goto LABEL_5;
    }
    v5 = 0;
    v3 = *v4;
  }
  else
  {
LABEL_5:
    v5 = 1;
  }
  return v3 | ((unint64_t)v5 << 32);
}

uint64_t View.overlayPreferenceValue<A, B>(_:alignment:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return View.overlayPreferenceValue<A, B>(_:alignment:_:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for _OverlayPreferenceModifier);
}

void type metadata accessor for _OverlayPreferenceModifier()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t View.backgroundPreferenceValue<A, B>(_:alignment:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return View.overlayPreferenceValue<A, B>(_:alignment:_:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for _BackgroundPreferenceModifier);
}

uint64_t View.overlayPreferenceValue<A, B>(_:alignment:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t (*a12)(_QWORD, _QWORD *))
{
  uint64_t v13;
  _QWORD v15[4];
  _QWORD v16[4];

  v16[0] = a4;
  v16[1] = a5;
  v16[2] = a2;
  v16[3] = a3;
  v15[0] = a7;
  v15[1] = a8;
  v15[2] = a10;
  v15[3] = a11;
  v13 = a12(0, v15);
  return View.modifier<A>(_:)(v16, a6, v13, a9);
}

uint64_t _OverlayPreferenceModifier.init(alignment:transform:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

void type metadata accessor for _BackgroundPreferenceModifier()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void View.overlayPreferenceValue<A, B>(_:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  View.overlayPreferenceValue<A, B>(_:_:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&unk_250665DB8, (uint64_t)type metadata accessor for _OverlayModifier, (uint64_t)&protocol witness table for _OverlayModifier<A>, (uint64_t)partial apply for closure #1 in View.overlayPreferenceValue<A, B>(_:_:));
}

void partial apply for closure #1 in View.overlayPreferenceValue<A, B>(_:_:)(uint64_t a1)
{
  partial apply for closure #1 in View.overlayPreferenceValue<A, B>(_:_:)(a1);
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = v1[2];
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  closure #1 in View.overlayPreferenceValue<A, B>(_:_:)(a1, (uint64_t)v1 + v4, *(_QWORD *)((char *)v1 + v5), *(_QWORD *)((char *)v1 + v5 + 8), v2, v1[3], v1[4], v1[5], v1[6]);
}

void View.backgroundPreferenceValue<A, B>(_:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  View.overlayPreferenceValue<A, B>(_:_:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&unk_250665DE0, (uint64_t)type metadata accessor for _BackgroundModifier, (uint64_t)&protocol witness table for _BackgroundModifier<A>, (uint64_t)partial apply for closure #1 in View.backgroundPreferenceValue<A, B>(_:_:));
}

void View.overlayPreferenceValue<A, B>(_:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v29[1] = a7;
  v30 = a8;
  v31 = a2;
  v32 = a3;
  v36 = a9;
  v34 = a13;
  v35 = a14;
  v33 = a12;
  v29[0] = a10;
  v18 = *(_QWORD *)(a4 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  v20 = MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))((char *)v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), v22, v21, v20);
  v23 = (*(unsigned __int8 *)(v18 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v24 = (char *)swift_allocObject();
  *((_QWORD *)v24 + 2) = a4;
  *((_QWORD *)v24 + 3) = a5;
  *((_QWORD *)v24 + 4) = a6;
  *((_QWORD *)v24 + 5) = a7;
  v25 = v30;
  v26 = v29[0];
  *((_QWORD *)v24 + 6) = v30;
  *((_QWORD *)v24 + 7) = v26;
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(&v24[v23], (char *)v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), a4);
  v27 = &v24[(v19 + v23 + 7) & 0xFFFFFFFFFFFFFFF8];
  v28 = v32;
  *(_QWORD *)v27 = v31;
  *((_QWORD *)v27 + 1) = v28;
  v37 = a5;
  v38 = a6;
  v39 = v25;
  v40 = v26;
  type metadata accessor for _PreferenceReadingView();
}

uint64_t sub_234E4DEC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (*(uint64_t (**)(uint64_t, uint64_t, _UNKNOWN **))(v3 - 168))(255, a1, &protocol witness table for _PreferenceReadingView<A, B>);
  v6 = type metadata accessor for ModifiedContent(0, v1, v4, v5);
  v7 = *(_QWORD *)(v3 - 160);
  *(_QWORD *)(v3 - 136) = *(_QWORD *)(v3 - 200);
  *(_QWORD *)(v3 - 128) = v7;
  MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v6, v3 - 136);
  static PreferenceKey._delay<A>(_:)(*(_QWORD *)(v3 - 152), v2, *(_QWORD **)(v3 - 144));
  swift_retain();
  return swift_release();
}

void closure #1 in View.overlayPreferenceValue<A, B>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;

  type metadata accessor for _PreferenceValue(0, a6, a9, a4);
  _PreferenceValue._force<A>(_:)(a3, a4, &v11);
  if (one-time initialization token for center != -1)
    swift_once();
  type metadata accessor for _PreferenceReadingView();
}

uint64_t objectdestroyTm_8()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in View.backgroundPreferenceValue<A, B>(_:_:)(uint64_t a1)
{
  partial apply for closure #1 in View.overlayPreferenceValue<A, B>(_:_:)(a1);
}

uint64_t _OverlayPreferenceModifier.transform.getter(uint64_t a1)
{
  swift_retain();
  return a1;
}

uint64_t _OverlayPreferenceModifier.transform.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_release();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*_OverlayPreferenceModifier.transform.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _OverlayPreferenceModifier.alignment.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t _OverlayPreferenceModifier.alignment.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = result;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*_OverlayPreferenceModifier.alignment.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void static _OverlayPreferenceModifier._makeView(modifier:inputs:body:)(unsigned int *a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  int v19;

  v7 = *a1;
  v8 = *(_QWORD *)a2;
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_DWORD *)(a2 + 80);
  v13 = *(_DWORD *)(a2 + 8);
  v14 = v9;
  v11 = *(_OWORD *)(a2 + 40);
  v15 = *(_OWORD *)(a2 + 24);
  v16 = v11;
  v17 = *(_OWORD *)(a2 + 56);
  v18 = *(_QWORD *)(a2 + 72);
  v19 = v10;
  v12 = v8;
  makeSecondaryPreferenceView<A, B>(modifier:inputs:body:flipOrder:)(v7, &v12, a3, a4, 0, a5, a6, a7);
}

uint64_t specialized makeSecondaryPreferenceView<A, B>(modifier:inputs:body:flipOrder:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t KeyPath;
  unsigned int v17;
  unsigned int v18;
  int v19;
  __int128 v20;
  __int128 v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t result;
  unsigned int v37;
  int ShouldRecordTree;
  unsigned int v39;
  int v40;
  int v41;
  __int16 v42;
  uint64_t v45;
  int OffsetAttribute2;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  int v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  int v69;
  _OWORD v70[2];
  __int128 v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  int v78;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  v7 = *(_OWORD *)(a2 + 16);
  v70[0] = *(_OWORD *)a2;
  v70[1] = v7;
  v71 = v5;
  v8 = WORD2(v5);
  v66 = v5;
  v67 = v6;
  v68 = *(_OWORD *)(a2 + 64);
  v69 = *(_DWORD *)(a2 + 80);
  v64 = v70[0];
  v65 = v7;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<Text.LayoutKey>, (uint64_t)&type metadata for Text.LayoutKey, (uint64_t)&protocol witness table for Text.LayoutKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v10 = v9;
  outlined retain of _ViewInputs(a2);
  PreferenceKeys.add(_:)(v10, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>);
  v42 = v8;
  if ((v8 & 0x100) != 0)
    specialized _GraphInputs.pushScope<A>(id:)(0);
  v39 = *(_DWORD *)(a2 + 76);
  v40 = *(_DWORD *)(a2 + 80);
  v37 = *(_DWORD *)(a2 + 68);
  v11 = *(_DWORD *)(a2 + 60);
  LODWORD(v45) = *(_DWORD *)(a2 + 64);
  HIDWORD(v45) = *(_DWORD *)(a2 + 72);
  v41 = v66;
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  *(_QWORD *)&v73 = v64;
  DWORD2(v73) = DWORD2(v64);
  v74 = v65;
  DWORD1(v75) = DWORD1(v66);
  *((_QWORD *)&v75 + 1) = *((_QWORD *)&v66 + 1);
  *(_QWORD *)&v76 = v67;
  *((_QWORD *)&v76 + 1) = __PAIR64__(v11, DWORD2(v67));
  *(_QWORD *)&v77 = __PAIR64__(v37, v45);
  *((_QWORD *)&v77 + 1) = __PAIR64__(v39, HIDWORD(v45));
  v78 = v40;
  LODWORD(v49) = OffsetAttribute2;
  *(_QWORD *)&v58 = v64;
  DWORD2(v58) = DWORD2(v64);
  v59 = v65;
  LODWORD(v60) = 0;
  DWORD1(v60) = DWORD1(v66);
  *((_QWORD *)&v60 + 1) = *((_QWORD *)&v66 + 1);
  *(_QWORD *)&v61 = v67;
  *((_QWORD *)&v61 + 1) = __PAIR64__(v11, DWORD2(v67));
  *(_QWORD *)&v62 = __PAIR64__(v37, v45);
  *((_QWORD *)&v62 + 1) = __PAIR64__(v39, HIDWORD(v45));
  v63 = v40;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static Text._makeView(view:inputs:)(&v49, (uint64_t)&v58, &v51);
  LODWORD(v75) = v41;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v51, &v73);
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v12 = v51;
  v13 = v52;
  v14 = v53;
  v15 = AGGraphCreateOffsetAttribute2();
  KeyPath = swift_getKeyPath();
  swift_beginAccess();
  outlined retain of _GraphInputs((uint64_t)v70);
  v17 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_endAccess();
  outlined release of _GraphInputs((uint64_t)v70);
  swift_release();
  v18 = *MEMORY[0x24BE096C0];
  *(_QWORD *)&v73 = __PAIR64__(v17, v15);
  *((_QWORD *)&v73 + 1) = v45;
  *(_QWORD *)&v74 = __PAIR64__(v18, v14);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type SecondaryLayerGeometryQuery and conformance SecondaryLayerGeometryQuery();
  Attribute.init<A>(body:value:flags:update:)();
  v19 = v71;
  v20 = *(_OWORD *)(a2 + 48);
  v60 = *(_OWORD *)(a2 + 32);
  v61 = v20;
  v62 = *(_OWORD *)(a2 + 64);
  v63 = *(_DWORD *)(a2 + 80);
  v21 = *(_OWORD *)(a2 + 16);
  v58 = *(_OWORD *)a2;
  v59 = v21;
  outlined retain of _ViewInputs(a2);
  LODWORD(v62) = AGGraphCreateOffsetAttribute2();
  v22 = AGGraphCreateOffsetAttribute2();
  v72 = *(_QWORD *)&v70[0];
  DWORD2(v62) = v22;
  LODWORD(v60) = v19 | 0x18;
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v58, (uint64_t)&type metadata for _ZStackLayout, (uint64_t)&protocol witness table for _ZStackLayout);
  outlined release of ViewTransform((uint64_t)&v72);
  if ((v42 & 0x100) != 0)
    specialized _GraphInputs.pushScope<A>(id:)((_QWORD *)1);
  v23 = specialized _ViewOutputs.subscript.getter(v12);
  if ((v23 & 0x100000000) != 0)
    v24 = v18;
  else
    v24 = v23;
  v75 = v60;
  v76 = v61;
  v77 = v62;
  v78 = v63;
  v73 = v58;
  v74 = v59;
  v25 = specialized closure #2 in makeSecondaryPreferenceView<A, B>(modifier:inputs:body:flipOrder:)((uint64_t)&v73, a1 | (unint64_t)(v24 << 32), &v51);
  v26 = v51;
  v48 = v52;
  MEMORY[0x24BDAC7A8](v25);
  MEMORY[0x24BDAC7A8](v27);
  AGGraphMutateAttribute();
  v28 = v48;
  if ((a3 & 1) != 0)
  {
    v29 = v26;
    v30 = v48;
    v26 = v12;
    v28 = v13;
  }
  else
  {
    v29 = v12;
    v30 = v13;
  }
  v56 = MEMORY[0x24BEE4AF8];
  v57 = 0;
  v51 = v29;
  v52 = v30;
  v54 = v26;
  v55 = v28;
  v31 = *(_QWORD *)(a2 + 48);
  v49 = v31;
  v50 = *(_DWORD *)(a2 + 56);
  v32 = *(_QWORD *)(v31 + 16);
  if (v32)
  {
    swift_bridgeObjectRetain();
    outlined retain of LinearGradient((uint64_t)&v49);
    v33 = v31 + 40;
    do
    {
      (*(void (**)(uint64_t *, ValueMetadata *, _UNKNOWN **))(*(_QWORD *)v33 + 16))(&v51, &type metadata for PairwisePreferenceCombinerVisitor, &protocol witness table for PairwisePreferenceCombinerVisitor);
      v33 += 16;
      --v32;
    }
    while (v32);
    outlined release of LinearGradient((uint64_t)&v49);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v34 = v56;
  v35 = v57;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a4 = v34;
  *(_DWORD *)(a4 + 8) = v35;
  *(_DWORD *)(a4 + 12) = v14;
  return result;
}

void makeSecondaryPreferenceView<A, B>(modifier:inputs:body:flipOrder:)(uint64_t a1, uint64_t *a2, void (*a3)(_QWORD *__return_ptr, uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  _QWORD v34[11];
  uint64_t v35;
  int v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v10 = *((_DWORD *)a2 + 2);
  v11 = a2[2];
  v12 = *((_DWORD *)a2 + 6);
  v13 = *((_DWORD *)a2 + 7);
  v14 = *((_DWORD *)a2 + 8);
  v15 = *((_DWORD *)a2 + 9);
  v17 = a2[5];
  v16 = a2[6];
  v18 = *((_DWORD *)a2 + 14);
  v19 = *((_DWORD *)a2 + 15);
  v21 = *((_DWORD *)a2 + 16);
  v20 = *((_DWORD *)a2 + 17);
  v22 = *((_DWORD *)a2 + 18);
  v23 = *((_DWORD *)a2 + 19);
  v24 = *((_DWORD *)a2 + 20);
  v48 = *a2;
  v49 = v10;
  v50 = v11;
  *(_QWORD *)&v51 = __PAIR64__(v13, v12);
  *((_QWORD *)&v51 + 1) = __PAIR64__(v15, v14);
  v52 = v17;
  v53 = v16;
  v54 = v18;
  v55 = v19;
  v25 = v19;
  v29 = v22;
  v30 = v21;
  v56 = v21;
  v57 = v20;
  v33 = v20;
  v58 = v22;
  v59 = v23;
  v32 = v23;
  v31 = v24;
  v60 = v24;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferencesInputs.add<A>(_:)(a6, a6, a8, v26);
  if ((v15 & 0x100) != 0)
    specialized _GraphInputs.pushScope<A>(id:)(0);
  v35 = v48;
  v36 = v49;
  v38 = v51;
  v37 = v50;
  v39 = v52;
  v40 = v53;
  v41 = v54;
  v42 = v25;
  v43 = v30;
  v44 = v33;
  v45 = v29;
  v46 = v32;
  v47 = v31;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v27 = swift_bridgeObjectRetain();
  a3(v34, v27, &v35);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  closure #1 in makeSecondaryPreferenceView<A, B>(modifier:inputs:body:flipOrder:)();
}

void protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _OverlayPreferenceModifier<A, B>(unsigned int *a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, uint64_t, uint64_t *), uint64_t a4, uint64_t *a5)
{
  static _OverlayPreferenceModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5[2], a5[3], a5[4]);
}

uint64_t (*_BackgroundPreferenceModifier.transform.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_BackgroundPreferenceModifier.alignment.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void static _BackgroundPreferenceModifier._makeView(modifier:inputs:body:)()
{
  type metadata accessor for _OverlayPreferenceModifier();
}

void sub_234E4EFCC()
{
  type metadata accessor for _BackgroundPreferenceModifier();
}

void sub_234E4EFE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  int v13;
  void (*v14)(_QWORD *__return_ptr, uint64_t, uint64_t *);
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  int v24;

  v7 = *(_QWORD *)(v5 + 24);
  v8 = *(_QWORD *)(v5 + 32);
  v11 = *(_OWORD *)(v5 + 56);
  v12 = *(_OWORD *)(v5 + 40);
  v9 = *(_QWORD *)(v5 + 72);
  v10 = Attribute.unsafeBitCast<A>(to:)();
  v16 = v3;
  v17 = v4;
  v18 = v6;
  v19 = v7;
  v20 = v8;
  v21 = v12;
  v22 = v11;
  v23 = v9;
  v24 = v13;
  makeSecondaryPreferenceView<A, B>(modifier:inputs:body:flipOrder:)(v10, &v16, v14, v15, 1, v2, v1, v0);
}

void protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _BackgroundPreferenceModifier<A, B>()
{
  static _BackgroundPreferenceModifier._makeView(modifier:inputs:body:)();
}

_OWORD *assignWithTake for _OverlayPreferenceModifier(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  return a1;
}

uint64_t initializeWithCopy for _OverlayPreferenceModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for _OverlayPreferenceModifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

void sub_234E4F168(uint64_t a1)
{
  get_witness_table_7SwiftUI4ViewRzAA13PreferenceKeyRd__AaBRd_0_r_0_lAA15ModifiedContentVyxAA08_OverlayD8ModifierVyqd__qd_0_GGAaBHPxAaBHD1__AhA0cI0HPyHCHCTm(a1, (void (*)(uint64_t, _OWORD *))type metadata accessor for _OverlayPreferenceModifier);
}

void sub_234E4F17C(uint64_t a1)
{
  get_witness_table_7SwiftUI4ViewRzAA13PreferenceKeyRd__AaBRd_0_r_0_lAA15ModifiedContentVyxAA08_OverlayD8ModifierVyqd__qd_0_GGAaBHPxAaBHD1__AhA0cI0HPyHCHCTm(a1, (void (*)(uint64_t, _OWORD *))type metadata accessor for _BackgroundPreferenceModifier);
}

void get_witness_table_7SwiftUI4ViewRzAA13PreferenceKeyRd__AaBRd_0_r_0_lAA15ModifiedContentVyxAA08_OverlayD8ModifierVyqd__qd_0_GGAaBHPxAaBHD1__AhA0cI0HPyHCHCTm(uint64_t a1, void (*a2)(uint64_t, _OWORD *))
{
  __int128 v2;
  _OWORD v3[2];

  v2 = *(_OWORD *)(a1 + 32);
  v3[0] = *(_OWORD *)(a1 + 8);
  v3[1] = v2;
  a2(255, v3);
  JUMPOUT(0x234E4F1CCLL);
}

_UNKNOWN **sub_234E4F208()
{
  return &protocol witness table for _DelayedPreferenceView<A, B>;
}

_UNKNOWN **sub_234E4F214()
{
  return &protocol witness table for _DelayedPreferenceView<A, B>;
}

void closure #1 in makeSecondaryPreferenceView<A, B>(modifier:inputs:body:flipOrder:)()
{
  type metadata accessor for _OverlayPreferenceModifier();
}

uint64_t sub_234E4F24C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[14];

  v5[2] = a1;
  v2 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_1, (uint64_t)v5, (uint64_t)&type metadata for Alignment, MEMORY[0x24BEE4078], v2, MEMORY[0x24BEE40A8], v3);
  return v5[4];
}

uint64_t specialized closure #2 in makeSecondaryPreferenceView<A, B>(modifier:inputs:body:flipOrder:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  void *v14;
  void (*v15)(_QWORD *__return_ptr, int *, uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, _QWORD, uint64_t);
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int ShouldRecordTree;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  _QWORD v63[2];
  _OWORD v64[2];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  int v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>();
  *(_QWORD *)&v64[0] = a2;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for SecondaryChild<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>();
  lazy protocol witness table accessor for type SecondaryChild<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>> and conformance SecondaryChild<A, B>();
  v5 = Attribute.init<A>(body:value:flags:update:)();
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v6 = *(_DWORD *)(a1 + 76);
  v7 = *(_DWORD *)(a1 + 80);
  v9 = *(_DWORD *)(a1 + 68);
  v8 = *(_DWORD *)(a1 + 72);
  v10 = *(_DWORD *)(a1 + 64);
  v44 = *(_DWORD *)(a1 + 56);
  v45 = *(_DWORD *)(a1 + 60);
  v39 = *(_DWORD *)(a1 + 8);
  v38 = *(_QWORD *)(a1 + 16);
  v36 = *(_DWORD *)(a1 + 28);
  v37 = *(_DWORD *)(a1 + 24);
  v33 = *(_DWORD *)(a1 + 32);
  v42 = *(_DWORD *)(a1 + 36);
  v43 = *(_QWORD *)(a1 + 48);
  v40 = *(_QWORD *)a1;
  v41 = *(_QWORD *)(a1 + 40);
  v11 = *(_OWORD *)(a1 + 16);
  v64[0] = *(_OWORD *)a1;
  v64[1] = v11;
  v12 = *(_OWORD *)(a1 + 32);
  v13 = *(_OWORD *)(a1 + 64);
  v66 = *(_OWORD *)(a1 + 48);
  v67 = v13;
  v65 = v12;
  v68 = v7;
  LODWORD(v65) = 0;
  outlined retain of _ViewInputs(a1);
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v14 = static CoreGlue.shared;
  v46 = v5;
  v47 = v40;
  v48 = v39;
  v49 = v38;
  v50 = v37;
  v51 = v36;
  v52 = 0;
  v53 = v42;
  v54 = v41;
  v55 = v43;
  v56 = v44;
  v57 = v45;
  v58 = v10;
  v59 = v9;
  v60 = v8;
  v61 = v6;
  v62 = v7;
  v15 = *(void (**)(_QWORD *__return_ptr, int *, uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, _QWORD, uint64_t))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared) + 0xC8);
  v16 = MEMORY[0x24BEE1768];
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x24BEE1768], MEMORY[0x24BEE1780], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
  v32 = v6;
  v17 = v5;
  v19 = v18;
  type metadata accessor for ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>(0);
  v30 = v9;
  v31 = v8;
  v21 = v20;
  v29 = v10;
  v22 = lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  v23 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>, lazy protocol witness table accessor for type ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for _OffsetEffect);
  v24 = v14;
  v15(v63, &v46, &v47, v19, v16, v21, v22, MEMORY[0x24BEE1778], v23);

  if (v63[0])
  {
    v25 = v63[1];
    v26 = a3;
    *a3 = v63[0];
    a3[1] = v25;
  }
  else
  {
    v47 = v40;
    v48 = v39;
    v49 = v38;
    v50 = v37;
    v51 = v36;
    v52 = 0;
    v53 = v42;
    v54 = v41;
    v55 = v43;
    v56 = v44;
    v57 = v45;
    v58 = v29;
    v59 = v30;
    v60 = v31;
    v61 = v32;
    v62 = v7;
    v27 = swift_allocObject();
    *(_DWORD *)(v27 + 16) = v17;
    v26 = a3;
    static _ViewOutputs.multiView(inputs:body:)((uint64_t)&v47, (uint64_t)partial apply for specialized closure #1 in static View.makeImplicitRoot(view:inputs:), v27, (uint64_t)a3);
    swift_release();
  }
  LODWORD(v65) = v33;
  if (!ShouldRecordTree)
    return outlined release of _ViewInputs(a1);
  specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(v26, v64);
  AGSubgraphEndTreeElement();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

void closure #2 in makeSecondaryPreferenceView<A, B>(modifier:inputs:body:flipOrder:)()
{
  type metadata accessor for SecondaryChild();
}

uint64_t sub_234E4F750(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t v10;
  int v11;
  int ShouldRecordTree;
  void (*v13)(int *, uint64_t *, uint64_t);
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;

  v10 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SecondaryChild<A, B>, a1);
  _GraphValue.init<A>(_:)((uint64_t)&v28, v2, a1, v10, &v27);
  v11 = v27;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v44 = v1;
  v45 = v6;
  v46 = v3;
  v47 = v7;
  v48 = v8;
  v50 = v22;
  v51 = v4;
  v52 = v5;
  v53 = v21;
  v54 = v20;
  v55 = v19;
  v56 = v18;
  v57 = v17;
  v58 = v16;
  v59 = v15;
  v26 = v11;
  v28 = v1;
  v29 = v6;
  v30 = v3;
  v31 = v7;
  v32 = v8;
  v33 = 0;
  v34 = v22;
  v35 = v4;
  v36 = v5;
  v37 = v21;
  v38 = v20;
  v39 = v19;
  v40 = v18;
  v41 = v17;
  v42 = v16;
  v43 = v15;
  v13 = *(void (**)(int *, uint64_t *, uint64_t))(v24 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13(&v26, &v28, v2);
  v49 = v23;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(v25, (uint64_t)&v44);
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t SecondaryChild.preferenceValue.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  int v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t Value;

  v3 = HIDWORD(a1);
  v4 = *MEMORY[0x24BE096C0];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = AssociatedTypeWitness;
  if (v4 == (_DWORD)v3)
  {
    v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v8 = 1;
  }
  else
  {
    Value = AGGraphGetValue();
    v7 = *(_QWORD *)(v6 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a2, Value, v6);
    v8 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v8, 1, v6);
}

uint64_t SecondaryChild.value.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, char *a6@<X8>)
{
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t CurrentAttribute;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  unint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  void *v52;
  char *v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  int v59;
  int v60;
  char v61[24];
  uint64_t v62;

  v51 = a6;
  v52 = a5;
  v9 = a1;
  v62 = *MEMORY[0x24BDAC8D0];
  v10 = HIDWORD(a1);
  v11 = type metadata accessor for ObservationTracking._AccessList();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v49 = (char *)&v45 - v16;
  MEMORY[0x24BDAC7A8](v17);
  v50 = (char *)&v45 - v18;
  type metadata accessor for ObservationTracking._AccessList?();
  v46 = v19;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v45 - v23;
  v48 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v53 = (char *)&v45 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v27);
  v47 = (char *)&v45 - v28;
  v55 = a2;
  v56 = a3;
  v57 = a4;
  v58 = v52;
  v59 = v9;
  v60 = v10;
  CurrentAttribute = AGGraphGetCurrentAttribute();
  if ((_DWORD)CurrentAttribute == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    a4 = CurrentAttribute;
    if (one-time initialization token for lastestAccessLists == -1)
      goto LABEL_3;
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  v52 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v24, 1, 1, v11);
  MEMORY[0x24BDAC7A8](v30);
  *(&v45 - 4) = a3;
  *(&v45 - 3) = (uint64_t)partial apply for closure #1 in SecondaryChild.value.getter;
  *(&v45 - 2) = (uint64_t)&v54;
  v31 = type metadata accessor for Error();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v24, (uint64_t)partial apply for closure #1 in _withObservation<A>(do:), (uint64_t)(&v45 - 6), (uint64_t)v46, v31, a3, MEMORY[0x24BEE3F20], (uint64_t)v61);
  outlined init with copy of ObservationTracking._AccessList?((uint64_t)v24, (uint64_t)v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v21, 1, v11) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v21);
    v32 = v51;
  }
  else
  {
    v33 = v50;
    v46 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v46(v50, v21, v11);
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v49, v33, v11);
    swift_beginAccess();
    v34 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v34;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v34 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v34 + 2) + 1, 1, (unint64_t)v34);
      static ObservationRegistrar.lastestAccessLists = v34;
    }
    v32 = v51;
    v37 = *((_QWORD *)v34 + 2);
    v36 = *((_QWORD *)v34 + 3);
    if (v37 >= v36 >> 1)
    {
      v34 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1, (unint64_t)v34);
      static ObservationRegistrar.lastestAccessLists = v34;
    }
    *((_QWORD *)v34 + 2) = v37 + 1;
    v46(&v34[((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(_QWORD *)(v12 + 72) * v37], v49, v11);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v50, v11);
  }
  v38 = *(void (**)(char *, char *, uint64_t))(v48 + 32);
  v39 = v47;
  v38(v47, v53, a3);
  outlined destroy of ObservationTracking._AccessList?((uint64_t)v24);
  v38(v32, v39, a3);
  v40 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v40)
  {
    v41 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    v42 = *(_QWORD *)(v12 + 72);
    v43 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v43(v14, v41, v11);
      installObservationSlow<A>(accessList:attribute:)((uint64_t)v14, a4, a3);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
      v41 += v42;
      --v40;
    }
    while (v40);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v52;
  return swift_bridgeObjectRelease();
}

void closure #1 in SecondaryChild.value.getter()
{
  type metadata accessor for _OverlayPreferenceModifier();
}

uint64_t sub_234E4FEB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  return Attribute.syncMainIfReferences<A>(do:)((void (*)(_QWORD))partial apply for closure #1 in closure #1 in SecondaryChild.value.getter, (uint64_t)&v4, a1, v1, v2);
}

uint64_t closure #1 in closure #1 in SecondaryChild.value.getter@<X0>(_QWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD v21[4];

  v21[1] = a4;
  v21[2] = a6;
  v21[3] = a7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v21 - v14;
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)v21 - v18;
  v21[0] = *a1;
  SecondaryChild.preferenceValue.getter(a2, (uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(a5 + 16))(a3, a5);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v15, AssociatedTypeWitness);
  }
  ((void (*)(char *))v21[0])(v19);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, AssociatedTypeWitness);
}

uint64_t protocol witness for Rule.value.getter in conformance SecondaryChild<A, B>@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  unint64_t *v2;

  return SecondaryChild.value.getter(*v2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(void **)(a1 + 40), a2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance SecondaryChild<A, B>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for SecondaryChild<A, B>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t type metadata accessor for SecondaryChild<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for SecondaryChild<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>;
  if (!lazy cache variable for type metadata for SecondaryChild<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>)
  {
    type metadata accessor for ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>();
    lazy protocol witness table accessor for type ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>> and conformance <> ForEach<A, B, C>();
    type metadata accessor for SecondaryChild();
  }
  return result;
}

void type metadata accessor for SecondaryChild()
{
  JUMPOUT(0x23B7C9B5CLL);
}

unint64_t lazy protocol witness table accessor for type SecondaryChild<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>> and conformance SecondaryChild<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type SecondaryChild<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>> and conformance SecondaryChild<A, B>;
  if (!lazy protocol witness table cache variable for type SecondaryChild<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>> and conformance SecondaryChild<A, B>)
  {
    v1 = type metadata accessor for SecondaryChild<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>();
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SecondaryChild<A, B>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SecondaryChild<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>> and conformance SecondaryChild<A, B>);
  }
  return result;
}

uint64_t sub_234E5017C()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in static View.makeImplicitRoot(view:inputs:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return specialized closure #1 in static View.makeImplicitRoot(view:inputs:)(*(_DWORD *)(v1 + 16), a1);
}

void partial apply for closure #1 in SecondaryChild.value.getter()
{
  closure #1 in SecondaryChild.value.getter();
}

uint64_t partial apply for closure #1 in closure #1 in SecondaryChild.value.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in closure #1 in SecondaryChild.value.getter(a1, *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), a2);
}

uint64_t instantiation function for generic protocol witness table for SecondaryChild<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SecondaryChild<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in SecondaryChild<A, B>()
{
  JUMPOUT(0x23B7C9C04);
}

ValueMetadata *type metadata accessor for SomersaultTextEffect()
{
  return &type metadata for SomersaultTextEffect;
}

uint64_t closure #1 in SomersaultTextEffect.configuration(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t (*v19)(void);
  uint64_t v20;
  unint64_t v21;
  uint64_t inited;
  int64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t result;
  _OWORD v32[5];
  uint64_t v33;
  _OWORD v34[3];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_OWORD *)(a2 + 16);
  v34[0] = *(_OWORD *)a2;
  v34[1] = v10;
  v34[2] = *(_OWORD *)(a2 + 32);
  v35 = *(_QWORD *)(a2 + 48);
  v11 = specialized static Text.Effect.ClusterTransformMap.byWords(fragment:)((uint64_t)v34);
  v13 = v12;
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>(a2);
  specialized Text.Effect.PathInterpolator.init<A>(_:quantization:options:)(v32, a2, a3, 1);
  v36 = v6;
  v37 = v7;
  v38 = v8;
  v39 = v9;
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = *(_OWORD *)a1;
  *(_QWORD *)(v14 + 32) = v6;
  *(_QWORD *)(v14 + 40) = v7;
  *(_QWORD *)(v14 + 48) = v8;
  *(_QWORD *)(v14 + 56) = v9;
  *(_QWORD *)(v14 + 64) = v11;
  *(_QWORD *)(v14 + 72) = v13;
  v15 = swift_allocObject();
  v16 = v32[3];
  *(_OWORD *)(v15 + 48) = v32[2];
  *(_OWORD *)(v15 + 64) = v16;
  *(_OWORD *)(v15 + 80) = v32[4];
  v17 = v33;
  v18 = v32[1];
  *(_OWORD *)(v15 + 16) = v32[0];
  *(_OWORD *)(v15 + 32) = v18;
  *(_QWORD *)(v15 + 96) = v17;
  *(_QWORD *)(v15 + 104) = partial apply for closure #1 in closure #1 in SomersaultTextEffect.configuration(_:);
  *(_QWORD *)(v15 + 112) = v14;
  v19 = MEMORY[0x24BEE3598];
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>, (uint64_t)&type metadata for Text.Effect.Drawable.Fragment, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_23527E860;
  *(_QWORD *)(v20 + 32) = partial apply for closure #1 in Text.Effect.DrawableFragment.transform(with:transform:);
  v21 = v20 + 32;
  *(_QWORD *)(v20 + 40) = v15;
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Drawable>, (uint64_t)&type metadata for Text.Effect.Drawable, (uint64_t (*)(_QWORD, uint64_t))v19);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23527E860;
  *(_QWORD *)(inited + 32) = v20;
  v23 = *(_QWORD *)(v20 + 16);
  outlined retain of LinearGradient((uint64_t)&v36);
  outlined retain of LinearGradient((uint64_t)&v37);
  outlined retain of LinearGradient((uint64_t)&v38);
  outlined retain of LinearGradient((uint64_t)&v39);
  outlined retain of Text.Effect.PathInterpolator((uint64_t)v32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23, 1, MEMORY[0x24BEE4AF8]);
  v25 = v24;
  if (!*(_QWORD *)(v20 + 16))
  {
    if (!v23)
      goto LABEL_9;
    __break(1u);
    goto LABEL_11;
  }
  v26 = v24[2];
  if ((v24[3] >> 1) - v26 < v23)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v27 = (unint64_t)&v24[2 * v26 + 4];
  if (v21 < v27 + 16 * v23 && v27 < v21 + 16 * v23)
    goto LABEL_13;
  swift_arrayInitWithCopy();
  if (!v23)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    swift_arrayDestroy();
    outlined release of Text.Effect.PathInterpolator((uint64_t)v32);
    return (uint64_t)v25;
  }
  v28 = v25[2];
  v29 = __OFADD__(v28, v23);
  v30 = v28 + v23;
  if (!v29)
  {
    v25[2] = v30;
    goto LABEL_9;
  }
LABEL_12:
  __break(1u);
LABEL_13:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t closure #1 in closure #1 in SomersaultTextEffect.configuration(_:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, __n128 a7, __n128 a8)
{
  double v8;
  uint64_t v9;
  __n128 *v11;
  double v12;
  double v13;
  double v14;
  unint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  CGFloat MidX;
  __n128 v30;
  __n128 v31;
  unint64_t v32;
  _BYTE v33[72];
  _BYTE v34[80];
  char v35[16];
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  char v41;
  _QWORD v42[6];
  __int128 v43;
  uint64_t v44;
  char v45;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  v8 = *(double *)&result;
  if (*(_QWORD *)(*(_QWORD *)(a3 + 16) + 16) <= result)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)(a3 + 32);
  if (*(_QWORD *)(v9 + 16) <= result)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v11 = (__n128 *)(v9 + 40 * result);
  v12 = v11[2].n128_f64[0];
  a7.n128_u64[0] = v11[2].n128_u64[1];
  a8.n128_f64[0] = *(double *)(a2 + 40) - *(double *)(a2 + 32);
  v13 = 0.0;
  if (a8.n128_f64[0] >= 0.0)
  {
    if (a8.n128_f64[0] <= v12)
      goto LABEL_11;
    if (v12 + a7.n128_f64[0] <= a8.n128_f64[0])
      goto LABEL_7;
    goto LABEL_10;
  }
  if (v12 < 0.0)
  {
    a8.n128_u64[0] = 0;
    if (v12 + a7.n128_f64[0] <= 0.0)
    {
LABEL_7:
      v13 = 6.28318531;
      goto LABEL_11;
    }
LABEL_10:
    v14 = (a8.n128_f64[0] - v12) / a7.n128_f64[0] * 360.0;
    a7.n128_u64[0] = 0x3F91DF46A2529D39;
    v13 = v14 * 0.0174532925;
  }
LABEL_11:
  v30 = v11[3];
  v15 = v11[4].n128_u64[0];
  Text.Effect.ClusterTransformMap.subscript.getter(a4, a5, (uint64_t)v33, v30, a7, a8);
  result = outlined init with take of Text.Effect.ClusterTransformMap.Element?((uint64_t)v33, (uint64_t)v35);
  if ((v41 & 1) == 0)
  {
    v20 = v36;
    v18 = v37;
    v19 = v38;
    v16 = v39;
    v17 = v40;
LABEL_17:
    v21 = v18 - v16;
    v22 = v16 + v17;
    v23 = v21;
    MidX = CGRectGetMidX(*(CGRect *)&v20);
    memset(v42, 0, 24);
    *(double *)&v42[3] = v13;
    *(CGFloat *)&v42[4] = MidX;
    *(double *)&v42[5] = v21;
    __asm { FMOV            V0.2D, #1.0 }
    v43 = _Q0;
    v44 = 0x3FF0000000000000;
    v45 = 0;
    v31 = v30;
    v32 = v15;
    Text.Effect.TransformContext.record(target:for:spring:)((uint64_t)v42, v8, v31.n128_f64, (uint64_t)v34);
    return Text.Effect.TransformContext.draw(state:keyPath:)((uint64_t)v34, 0, 0, 0, 1);
  }
  if (!__OFSUB__(*(_QWORD *)a2, *(_QWORD *)&v8))
  {
    v16 = *(double *)(a2 + 232);
    v17 = *(double *)(a2 + 240);
    v18 = *(double *)(a2 + 216);
    v19 = *(double *)(a2 + 224);
    v20 = *(double *)(a2 + 208);
    if (*(_QWORD *)a2 != *(_QWORD *)&v8)
    {
      v20 = 0.0;
      v18 = 0.0;
      v19 = 0.0;
      v16 = 0.0;
      v17 = 0.0;
    }
    goto LABEL_17;
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t protocol witness for static TextEffect.name.getter in conformance SomersaultTextEffect()
{
  return 0x75617372656D6F73;
}

double protocol witness for Text.Effect.Base.timing(for:from:to:duration:) in conformance SomersaultTextEffect@<D0>(uint64_t a1@<X0>, double a2@<X5>, char a3@<W6>, _OWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 v11;
  double v12;
  __int128 v13;
  double result;
  _OWORD v15[2];
  __int128 v16;
  __int128 v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  char v31;
  char v32;
  char v33;
  char v34;

  type metadata accessor for Text.Effect.DrawableContent<SomersaultTextEffect>(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = 1;
  v33 = 0;
  v32 = 0;
  v17 = xmmword_235285B50;
  v18 = 1;
  v19 = 0;
  v20 = 0;
  v21 = 2;
  v23 = 0;
  v24 = 0;
  v22 = 0x3F947AE147AE147BLL;
  v25 = 0;
  v26 = xmmword_2352A6D80;
  v27 = 0;
  v28 = MEMORY[0x24BEE4AF8];
  v29 = 0;
  v30 = xmmword_235281F60;
  v31 = 0;
  if (one-time initialization token for spring != -1)
    swift_once();
  v11 = static SomersaultTextEffect.spring;
  v12 = *(double *)&qword_25622D1E0;
  outlined init with copy of Text.Effect.DrawableContent<SomersaultTextEffect>(a1, (uint64_t)v10);
  specialized Text.Effect.Timing.init<A>(configuration:duration:spring:content:)((uint64_t)&v17, a2, a3 & 1, (uint64_t)v10, v15, *(double *)&v11, *((double *)&v11 + 1), v12);
  v13 = v15[1];
  *a4 = v15[0];
  a4[1] = v13;
  result = *(double *)&v16;
  a4[2] = v16;
  return result;
}

unint64_t instantiation function for generic protocol witness table for SomersaultTextEffect(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type SomersaultTextEffect and conformance SomersaultTextEffect();
  result = lazy protocol witness table accessor for type SomersaultTextEffect and conformance SomersaultTextEffect();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t specialized SomersaultTextEffect.configuration(_:)()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  _QWORD *v3;

  v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v2 = v0[2];
  v1 = v0[3];
  if (v2 >= v1 >> 1)
    v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v1 > 1), v2 + 1, 1, v0);
  v0[2] = v2 + 1;
  v3 = &v0[2 * v2];
  v3[4] = specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.Text.Effect.Base.Timing, @guaranteed Text.Effect.DrawableFragment<A>, @unowned Text.Effect.QuantizationContext) -> (@owned Text.Effect.Drawable);
  v3[5] = 0;
  return MEMORY[0x24BEE4AF8];
}

uint64_t sub_234E50A60()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t partial apply for closure #1 in closure #1 in SomersaultTextEffect.configuration(_:)(unint64_t a1, uint64_t a2, double a3, __n128 a4, __n128 a5)
{
  uint64_t v5;

  return closure #1 in closure #1 in SomersaultTextEffect.configuration(_:)(a1, a2, v5 + 16, *(_QWORD *)(v5 + 64), *(_QWORD *)(v5 + 72), a3, a4, a5);
}

uint64_t sub_234E50AB8()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 96) >= 3uLL)
    swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined init with take of Text.Effect.ClusterTransformMap.Element?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Text.Effect.ClusterTransformMap.Element?, (uint64_t)&type metadata for Text.Effect.ClusterTransformMap.Element, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for Text.Effect.DrawableContent<SomersaultTextEffect>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for Text.Effect.DrawableContent<SomersaultTextEffect>)
  {
    v2 = lazy protocol witness table accessor for type SomersaultTextEffect and conformance SomersaultTextEffect();
    v4 = type metadata accessor for Text.Effect.DrawableContent(a1, (uint64_t)&type metadata for SomersaultTextEffect, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for Text.Effect.DrawableContent<SomersaultTextEffect>);
  }
}

uint64_t outlined init with copy of Text.Effect.DrawableContent<SomersaultTextEffect>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Text.Effect.DrawableContent<SomersaultTextEffect>(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t AnyLayout.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  type metadata accessor for _AnyLayoutBox(0, a2, a3, a4);
  v5 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 184) - 8) + 32))(v5 + *(_QWORD *)(*(_QWORD *)v5 + 200), a1);
  return v5;
}

uint64_t type metadata accessor for _AnyLayoutBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _AnyLayoutBox);
}

uint64_t _AnyLayoutBox.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 184) - 8) + 32))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 200), a1);
  return v2;
}

uint64_t AnyLayout.makeCache(subviews:)(int *a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  char v4;
  int v6;
  uint64_t v7;
  char v8;
  char v9;

  v2 = *((_QWORD *)a1 + 1);
  v3 = *((_BYTE *)a1 + 16);
  v4 = *((_BYTE *)a1 + 17);
  v6 = *a1;
  v7 = v2;
  v8 = v3;
  v9 = v4;
  return (*(uint64_t (**)(int *))(*(_QWORD *)a2 + 88))(&v6);
}

uint64_t AnyLayout.updateCache(_:subviews:)(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v3;
  char v4;
  char v5;
  int v7;
  uint64_t v8;
  char v9;
  char v10;

  v3 = *((_QWORD *)a2 + 1);
  v4 = *((_BYTE *)a2 + 16);
  v5 = *((_BYTE *)a2 + 17);
  v7 = *a2;
  v8 = v3;
  v9 = v4;
  v10 = v5;
  return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)a3 + 96))(a1, &v7);
}

uint64_t AnyLayout.spacing(subviews:cache:)(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;
  char v5;
  int v7;
  uint64_t v8;
  char v9;
  char v10;

  v3 = *((_QWORD *)a1 + 1);
  v4 = *((_BYTE *)a1 + 16);
  v5 = *((_BYTE *)a1 + 17);
  v7 = *a1;
  v8 = v3;
  v9 = v4;
  v10 = v5;
  return (*(uint64_t (**)(int *))(*(_QWORD *)a3 + 104))(&v7);
}

uint64_t AnyLayout.sizeThatFits(proposal:subviews:cache:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a7 + 112))();
}

uint64_t AnyLayout.placeSubviews(in:proposal:subviews:cache:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a7 + 120))();
}

uint64_t AnyLayout.explicitAlignment(of:in:proposal:subviews:cache:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a8 + 128))();
}

{
  return (*(uint64_t (**)(void))(*(_QWORD *)a8 + 136))();
}

uint64_t AnyLayout.animatableData.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a1 + 144))();
}

uint64_t key path setter for AnyLayout.animatableData : AnyLayout(_QWORD *a1, uint64_t *a2)
{
  int isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[5];
  _QWORD v8[5];

  outlined init with copy of _AnyAnimatableData(a1, v8);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4 = *a2;
  if (isUniquelyReferenced_nonNull_native)
  {
    outlined init with copy of _AnyAnimatableData(v8, v7);
    (*(void (**)(_QWORD *))(*(_QWORD *)v4 + 152))(v7);
    return outlined destroy of _AnyAnimatableData((uint64_t)v8);
  }
  else
  {
    v6 = (*(uint64_t (**)(_QWORD *))(*(_QWORD *)v4 + 168))(v8);
    outlined destroy of _AnyAnimatableData((uint64_t)v8);
    *a2 = v6;
    return swift_release();
  }
}

uint64_t AnyLayout.animatableData.setter(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[5];

  v2 = v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v5 = *v1;
  if (isUniquelyReferenced_nonNull_native)
  {
    outlined init with copy of _AnyAnimatableData(a1, v8);
    (*(void (**)(_QWORD *))(*(_QWORD *)v5 + 152))(v8);
    return outlined destroy of _AnyAnimatableData((uint64_t)a1);
  }
  else
  {
    v7 = (*(uint64_t (**)(_QWORD *))(*(_QWORD *)v5 + 168))(a1);
    outlined destroy of _AnyAnimatableData((uint64_t)a1);
    *v2 = v7;
    return swift_release();
  }
}

void (*AnyLayout.animatableData.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x80uLL);
  *a1 = v3;
  v3[15] = v1;
  (*(void (**)(void))(**(_QWORD **)v1 + 144))();
  return AnyLayout.animatableData.modify;
}

void AnyLayout.animatableData.modify(_QWORD **a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t *v4;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v2 = *a1;
  v3 = *a1 + 5;
  v4 = (uint64_t *)(*a1)[15];
  if ((a2 & 1) != 0)
  {
    outlined init with copy of _AnyAnimatableData(*a1, v3);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v6 = *v4;
    if (isUniquelyReferenced_nonNull_native)
    {
      outlined init with copy of _AnyAnimatableData(v3, v2 + 10);
      (*(void (**)(_QWORD *))(*(_QWORD *)v6 + 152))(v2 + 10);
      outlined destroy of _AnyAnimatableData((uint64_t)v3);
    }
    else
    {
      v9 = (uint64_t *)v2[15];
      v10 = (*(uint64_t (**)(_QWORD *))(*(_QWORD *)v6 + 168))(v3);
      outlined destroy of _AnyAnimatableData((uint64_t)v3);
      *v9 = v10;
      swift_release();
    }
  }
  else
  {
    v7 = swift_isUniquelyReferenced_nonNull_native();
    v8 = *v4;
    if (!v7)
    {
      v11 = (uint64_t *)v2[15];
      v12 = (*(uint64_t (**)(_QWORD *))(*(_QWORD *)v8 + 168))(v2);
      outlined destroy of _AnyAnimatableData((uint64_t)v2);
      *v11 = v12;
      swift_release();
      goto LABEL_9;
    }
    outlined init with copy of _AnyAnimatableData(v2, v3);
    (*(void (**)(_QWORD *))(*(_QWORD *)v8 + 152))(v3);
  }
  outlined destroy of _AnyAnimatableData((uint64_t)v2);
LABEL_9:
  free(v2);
}

uint64_t protocol witness for Layout.makeCache(subviews:) in conformance AnyLayout(int *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  int v7;
  uint64_t v8;
  char v9;
  char v10;

  v2 = *v1;
  v3 = *((_QWORD *)a1 + 1);
  v4 = *((_BYTE *)a1 + 16);
  v5 = *((_BYTE *)a1 + 17);
  v7 = *a1;
  v8 = v3;
  v9 = v4;
  v10 = v5;
  return (*(uint64_t (**)(int *))(*(_QWORD *)v2 + 88))(&v7);
}

uint64_t protocol witness for Layout.updateCache(_:subviews:) in conformance AnyLayout(uint64_t a1, int *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  int v8;
  uint64_t v9;
  char v10;
  char v11;

  v3 = *v2;
  v4 = *((_QWORD *)a2 + 1);
  v5 = *((_BYTE *)a2 + 16);
  v6 = *((_BYTE *)a2 + 17);
  v8 = *a2;
  v9 = v4;
  v10 = v5;
  v11 = v6;
  return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v3 + 96))(a1, &v8);
}

uint64_t protocol witness for Layout.spacing(subviews:cache:) in conformance AnyLayout(int *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  int v7;
  uint64_t v8;
  char v9;
  char v10;

  v2 = *v1;
  v3 = *((_QWORD *)a1 + 1);
  v4 = *((_BYTE *)a1 + 16);
  v5 = *((_BYTE *)a1 + 17);
  v7 = *a1;
  v8 = v3;
  v9 = v4;
  v10 = v5;
  return (*(uint64_t (**)(int *))(*(_QWORD *)v2 + 104))(&v7);
}

uint64_t protocol witness for Layout.sizeThatFits(proposal:subviews:cache:) in conformance AnyLayout()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 112))();
}

uint64_t protocol witness for Layout.placeSubviews(in:proposal:subviews:cache:) in conformance AnyLayout()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 120))();
}

uint64_t protocol witness for Layout.explicitAlignment(of:in:proposal:subviews:cache:) in conformance AnyLayout()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 128))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 136))();
}

uint64_t protocol witness for Animatable.animatableData.getter in conformance AnyLayout()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 144))();
}

uint64_t protocol witness for Animatable.animatableData.setter in conformance AnyLayout(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[5];

  v2 = v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v5 = *v1;
  if (isUniquelyReferenced_nonNull_native)
  {
    outlined init with copy of _AnyAnimatableData(a1, v8);
    (*(void (**)(_QWORD *))(*(_QWORD *)v5 + 152))(v8);
    return outlined destroy of _AnyAnimatableData((uint64_t)a1);
  }
  else
  {
    v7 = (*(uint64_t (**)(_QWORD *))(*(_QWORD *)v5 + 168))(a1);
    outlined destroy of _AnyAnimatableData((uint64_t)a1);
    *v2 = v7;
    return swift_release();
  }
}

void (*protocol witness for Animatable.animatableData.modify in conformance AnyLayout(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x80uLL);
  *a1 = v3;
  v3[15] = v1;
  (*(void (**)(void))(**(_QWORD **)v1 + 144))();
  return AnyLayout.animatableData.modify;
}

void AnyLayoutBox.layoutProperties.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyLayoutBox.makeCache(subviews:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyLayoutBox.updateCache(_:subviews:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyLayoutBox.spacing(subviews:cache:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyLayoutBox.sizeThatFits(proposal:subviews:cache:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyLayoutBox.placeSubviews(in:proposal:subviews:cache:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyLayoutBox.explicitAlignment(of:in:proposal:subviews:cache:)()
{
  AnyLayoutBox.explicitAlignment(of:in:proposal:subviews:cache:)();
}

{
  AnyLayoutBox.explicitAlignment(of:in:proposal:subviews:cache:)();
}

{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyLayoutBox.animatableData.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyLayoutBox.animatableData.setter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyLayoutBox.withAnimatableData(_:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t AnyLayoutBox.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t AnyLayoutBox.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

unint64_t instantiation function for generic protocol witness table for AnyLayout(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AnyLayout and conformance AnyLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_234E5195C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 144))();
}

ValueMetadata *type metadata accessor for AnyLayout()
{
  return &type metadata for AnyLayout;
}

ValueMetadata *type metadata accessor for AnyLayout.Cache()
{
  return &type metadata for AnyLayout.Cache;
}

uint64_t type metadata accessor for AnyLayoutBox()
{
  return objc_opt_self();
}

uint64_t method lookup function for AnyLayoutBox()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata completion function for _AnyLayoutBox()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t _AnyLayoutBox.layoutProperties.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)v0 + 192) + 24))();
}

_OWORD *_AnyLayoutBox.makeCache(subviews:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  int v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(int *, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22[3];
  uint64_t AssociatedTypeWitness;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 184);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v9;
  v11 = *((_QWORD *)v9 + 1);
  v12 = *((_BYTE *)v9 + 16);
  v13 = *((_BYTE *)v9 + 17);
  v14 = (uint64_t)v2 + *(_QWORD *)(v4 + 200);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v14, v5);
  v18 = v10;
  v19 = v11;
  v20 = v12;
  v21 = v13;
  v15 = *(_QWORD *)(v4 + 192);
  v16 = *(void (**)(int *, uint64_t, uint64_t))(v15 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  __swift_allocate_boxed_opaque_existential_1(v22);
  v16(&v18, v5, v15);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *(_QWORD *)a2 = v5;
  return outlined init with take of Any(v22, (_OWORD *)(a2 + 8));
}

_OWORD *_AnyLayoutBox.updateCache(_:subviews:)(_QWORD *a1, int *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  int v15;
  uint64_t v16;
  char v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[12];
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  char v29;
  char v30;
  int v31;
  uint64_t v32;
  char v33;
  char v34;

  v5 = *(_QWORD *)(*(_QWORD *)v2 + 184);
  v26 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = &v22[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = *(_QWORD *)(v8 + 192);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v14 = &v22[-v13];
  v15 = *a2;
  v16 = *((_QWORD *)a2 + 1);
  v17 = *((_BYTE *)a2 + 16);
  v18 = *((unsigned __int8 *)a2 + 17);
  if (*a1 == v5)
  {
    v23 = v18;
    v24 = v11;
    v25 = v12;
    outlined init with copy of Any((uint64_t)(a1 + 1), (uint64_t)&v31);
    swift_dynamicCast();
    v20 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 200);
    swift_beginAccess();
    v21 = v26;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v26 + 16))(v7, v20, v5);
    v27 = v15;
    v28 = v16;
    v29 = v17;
    v30 = v23;
    (*(void (**)(_BYTE *, int *, uint64_t, uint64_t))(v9 + 40))(v14, &v27, v5, v9);
    (*(void (**)(_BYTE *, uint64_t))(v21 + 8))(v7, v5);
    $defer #1 <A>() in _AnyLayoutBox.updateCache(_:subviews:)((uint64_t)a1, (uint64_t)v14);
    return (_OWORD *)(*(uint64_t (**)(_BYTE *, uint64_t))(v25 + 8))(v14, v24);
  }
  else
  {
    outlined destroy of _AnyAnimatableData((uint64_t)a1);
    v31 = v15;
    v32 = v16;
    v33 = v17;
    v34 = v18;
    return _AnyLayoutBox.makeCache(subviews:)((uint64_t)&v31, (uint64_t)a1);
  }
}

uint64_t _AnyLayoutBox.spacing(subviews:cache:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char v25;
  char v26;
  _BYTE v27[32];

  v5 = a1;
  v22 = a3;
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 184);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v10 + 192);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v21 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v14 = (char *)&v19 - v13;
  v15 = *v5;
  v16 = *((_QWORD *)v5 + 1);
  v19 = *((unsigned __int8 *)v5 + 16);
  v20 = v15;
  LOBYTE(v5) = *((_BYTE *)v5 + 17);
  outlined init with copy of Any(a2 + 8, (uint64_t)v27);
  swift_dynamicCast();
  v17 = v3 + *(_QWORD *)(*(_QWORD *)v3 + 200);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v17, v6);
  v23 = v20;
  v24 = v16;
  v25 = v19;
  v26 = (char)v5;
  (*(void (**)(int *, char *, uint64_t, uint64_t))(v11 + 48))(&v23, v14, v6, v11);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  $defer #1 <A>() in _AnyLayoutBox.updateCache(_:subviews:)(a2, (uint64_t)v14);
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v14, AssociatedTypeWitness);
}

double _AnyLayoutBox.sizeThatFits(proposal:subviews:cache:)(uint64_t a1, int a2, uint64_t a3, int a4, int *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  _BYTE *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  double (*v21)(uint64_t);
  double v22;
  _BYTE v24[12];
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  int v34;
  uint64_t v35;
  char v36;
  char v37;
  _BYTE v38[32];

  v29 = a4;
  v30 = a1;
  v31 = a3;
  v27 = a2;
  v9 = *(_QWORD *)(*(_QWORD *)v6 + 184);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v12 = &v24[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = *(_QWORD *)(v13 + 192);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v28 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v17 = &v24[-v16];
  v18 = *a5;
  v19 = *((_QWORD *)a5 + 1);
  v25 = *((unsigned __int8 *)a5 + 16);
  v26 = v18;
  LOBYTE(a5) = *((_BYTE *)a5 + 17);
  outlined init with copy of Any(a6 + 8, (uint64_t)v38);
  swift_dynamicCast();
  v20 = v6 + *(_QWORD *)(*(_QWORD *)v6 + 200);
  swift_beginAccess();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16))(v12, v20, v9);
  v34 = v26;
  v35 = v19;
  v36 = v25;
  v37 = (char)a5;
  v21 = *(double (**)(uint64_t))(v14 + 56);
  v33 = v27 & 1;
  v32 = v29 & 1;
  v22 = v21(v30);
  (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
  $defer #1 <A>() in _AnyLayoutBox.updateCache(_:subviews:)(a6, (uint64_t)v17);
  (*(void (**)(_BYTE *, uint64_t))(v28 + 8))(v17, AssociatedTypeWitness);
  return v22;
}

uint64_t _AnyLayoutBox.placeSubviews(in:proposal:subviews:cache:)(uint64_t a1, int a2, uint64_t a3, int a4, int *a5, uint64_t a6, double a7, double a8, double a9, double a10)
{
  uint64_t v10;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t AssociatedTypeWitness;
  uint64_t v24;
  _BYTE *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, double, double, double, double);
  _BYTE v31[4];
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  int v41;
  uint64_t v42;
  char v43;
  char v44;
  _BYTE v45[40];

  v36 = a4;
  v37 = a1;
  v38 = a3;
  v34 = a2;
  v17 = *(_QWORD *)(*(_QWORD *)v10 + 184);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v20 = &v31[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22 = *(_QWORD *)(v21 + 192);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v35 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v25 = &v31[-v24];
  v26 = *a5;
  v27 = *((_QWORD *)a5 + 1);
  v32 = *((unsigned __int8 *)a5 + 16);
  v33 = v26;
  LOBYTE(a5) = *((_BYTE *)a5 + 17);
  outlined init with copy of Any(a6 + 8, (uint64_t)v45);
  swift_dynamicCast();
  v28 = v10 + *(_QWORD *)(*(_QWORD *)v10 + 200);
  swift_beginAccess();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v18 + 16))(v20, v28, v17);
  v41 = v33;
  v42 = v27;
  v43 = v32;
  v44 = (char)a5;
  v29 = *(void (**)(uint64_t, double, double, double, double))(v22 + 64);
  v40 = v34 & 1;
  v39 = v36 & 1;
  v29(v37, a7, a8, a9, a10);
  (*(void (**)(_BYTE *, uint64_t))(v18 + 8))(v20, v17);
  $defer #1 <A>() in _AnyLayoutBox.updateCache(_:subviews:)(a6, (uint64_t)v25);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v35 + 8))(v25, AssociatedTypeWitness);
}

uint64_t _AnyLayoutBox.explicitAlignment(of:in:proposal:subviews:cache:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, int *a6, uint64_t a7, double a8, double a9, double a10, double a11)
{
  uint64_t v11;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t AssociatedTypeWitness;
  uint64_t v24;
  char *v25;
  int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, double, double, double, double);
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  int v44;
  uint64_t v45;
  char v46;
  char v47;
  _BYTE v48[40];

  v36 = a3;
  v37 = a5;
  v40 = a2;
  v41 = a4;
  v39 = a1;
  v18 = *(_QWORD *)(*(_QWORD *)v11 + 184);
  v34 = *(_QWORD *)(v18 - 8);
  v35 = a7;
  MEMORY[0x24BDAC7A8](a1);
  v20 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(_QWORD *)(v21 + 192);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v38 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v25 = (char *)&v33 - v24;
  v26 = *a6;
  v33 = *((_QWORD *)a6 + 1);
  v27 = *((_BYTE *)a6 + 16);
  LOBYTE(a6) = *((_BYTE *)a6 + 17);
  outlined init with copy of Any(a7 + 8, (uint64_t)v48);
  swift_dynamicCast();
  v28 = v11 + *(_QWORD *)(*(_QWORD *)v11 + 200);
  swift_beginAccess();
  v29 = v34;
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v20, v28, v18);
  v44 = v26;
  v45 = v33;
  v46 = v27;
  v47 = (char)a6;
  v30 = *(uint64_t (**)(uint64_t, uint64_t, double, double, double, double))(v22 + 72);
  v43 = v36 & 1;
  v42 = v37 & 1;
  v31 = v30(v39, v40, a8, a9, a10, a11);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v20, v18);
  $defer #1 <A>() in _AnyLayoutBox.updateCache(_:subviews:)(v35, (uint64_t)v25);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v25, AssociatedTypeWitness);
  return v31;
}

{
  uint64_t v11;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t AssociatedTypeWitness;
  uint64_t v24;
  char *v25;
  int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, double, double, double, double);
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  int v44;
  uint64_t v45;
  char v46;
  char v47;
  _BYTE v48[40];

  v36 = a3;
  v37 = a5;
  v40 = a2;
  v41 = a4;
  v39 = a1;
  v18 = *(_QWORD *)(*(_QWORD *)v11 + 184);
  v34 = *(_QWORD *)(v18 - 8);
  v35 = a7;
  MEMORY[0x24BDAC7A8](a1);
  v20 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(_QWORD *)(v21 + 192);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v38 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v25 = (char *)&v33 - v24;
  v26 = *a6;
  v33 = *((_QWORD *)a6 + 1);
  v27 = *((_BYTE *)a6 + 16);
  LOBYTE(a6) = *((_BYTE *)a6 + 17);
  outlined init with copy of Any(a7 + 8, (uint64_t)v48);
  swift_dynamicCast();
  v28 = v11 + *(_QWORD *)(*(_QWORD *)v11 + 200);
  swift_beginAccess();
  v29 = v34;
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v20, v28, v18);
  v44 = v26;
  v45 = v33;
  v46 = v27;
  v47 = (char)a6;
  v30 = *(uint64_t (**)(uint64_t, uint64_t, double, double, double, double))(v22 + 80);
  v43 = v36 & 1;
  v42 = v37 & 1;
  v31 = v30(v39, v40, a8, a9, a10, a11);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v20, v18);
  $defer #1 <A>() in _AnyLayoutBox.updateCache(_:subviews:)(v35, (uint64_t)v25);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v25, AssociatedTypeWitness);
  return v31;
}

_OWORD *$defer #1 <A>() in _AnyLayoutBox.updateCache(_:subviews:)(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t *boxed_opaque_existential_1;
  __int128 v7;
  uint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = AssociatedTypeWitness;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v7);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(boxed_opaque_existential_1, a2, AssociatedTypeWitness);
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  return outlined init with take of Any(&v7, (_OWORD *)(a1 + 8));
}

_OWORD *_AnyLayoutBox.animatableData.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 184);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (uint64_t)v2 + *(_QWORD *)(v4 + 200);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  return _AnyAnimatableData.init<A>(_:)((uint64_t)v8, v5, *(_QWORD *)(*(_QWORD *)(v4 + 192) + 8), v10, a2);
}

uint64_t _AnyLayoutBox.animatableData.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 200);
  swift_beginAccess();
  _AnyAnimatableData.update<A>(_:)(v4, *(_QWORD *)(v3 + 184), *(_QWORD *)(*(_QWORD *)(v3 + 192) + 8));
  swift_endAccess();
  return outlined destroy of _AnyAnimatableData(a1);
}

uint64_t _AnyLayoutBox.withAnimatableData(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 184);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (uint64_t)v1 + *(_QWORD *)(v2 + 200);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, v3);
  _AnyAnimatableData.update<A>(_:)((uint64_t)v6, v3, *(_QWORD *)(*(_QWORD *)(v2 + 192) + 8));
  v8 = swift_allocObject();
  (*(void (**)(uint64_t, char *))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v8 + 184) - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)v8 + 200), v6);
  return v8;
}

uint64_t _AnyLayoutBox.__ivar_destroyer()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 184) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 200));
}

uint64_t _AnyLayoutBox.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 184) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 200));
  return swift_deallocClassInstance();
}

void one-time initialization function for effectWidth()
{
  static GlimmerTextEffect.effectWidth = 0x4049000000000000;
}

void one-time initialization function for gradientWidth()
{
  static GlimmerTextEffect.gradientWidth = 0x4034000000000000;
}

float static Shader.glimmer(point:opacity:shine:bulge:)@<S0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>)
{
  uint64_t ObjCClassFromMetadata;
  id v13;
  id v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  float result;

  type metadata accessor for TextEffectClass();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v13 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v14 = objc_msgSend((id)objc_opt_self(), sel_defaultLibraryWithBundle_, v13);

  type metadata accessor for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Shader.Argument>);
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_23528B7A0;
  *(float *)&v16 = a2;
  *(float *)&v17 = a3;
  *(_QWORD *)(v15 + 32) = v16 | ((unint64_t)v17 << 32);
  *(_QWORD *)(v15 + 40) = 0;
  *(_BYTE *)(v15 + 48) = 1;
  *(float *)&v18 = a4;
  *(_QWORD *)(v15 + 56) = v18;
  *(_QWORD *)(v15 + 64) = 0;
  *(_BYTE *)(v15 + 72) = 0;
  *(float *)&v19 = a5;
  *(_QWORD *)(v15 + 80) = v19;
  *(_QWORD *)(v15 + 88) = 0;
  *(_BYTE *)(v15 + 96) = 0;
  result = a6;
  *(_QWORD *)(v15 + 104) = LODWORD(result);
  *(_QWORD *)(v15 + 112) = 0;
  *(_BYTE *)(v15 + 120) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)a1 = v14;
  *(_QWORD *)(a1 + 8) = 0xD000000000000011;
  *(_QWORD *)(a1 + 16) = 0x80000002352E3FD0;
  *(_QWORD *)(a1 + 24) = v15;
  return result;
}

uint64_t protocol witness for Text.Effect.Filter.apply(to:fragment:timing:state:context:in:) in conformance GlimmerTextEffect(__int128 *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  return specialized GlimmerTextEffect.apply(to:fragment:timing:state:context:in:)(a1, a2, a4, a6, *(double *)(a3 + 8), *(double *)(a3 + 16));
}

double protocol witness for Text.Effect.Filter.drawingOutsets.getter in conformance GlimmerTextEffect()
{
  double v0;

  if (Edge.Set.contains(_:)(SwiftUI_Edge_top))
    v0 = 8.0;
  else
    v0 = 0.0;
  Edge.Set.contains(_:)(SwiftUI_Edge_leading);
  Edge.Set.contains(_:)(SwiftUI_Edge_bottom);
  Edge.Set.contains(_:)(SwiftUI_Edge_trailing);
  return v0;
}

_QWORD *protocol witness for static Text.Effect.Base.animatorConfiguration(from:) in conformance GlimmerTextEffect@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;

  result = specialized static GlimmerTextEffect.animatorConfiguration(from:)(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t protocol witness for Text.Effect.Base.timing(for:from:to:duration:) in conformance GlimmerTextEffect@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, char a5@<W6>, _QWORD *a6@<X8>)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = specialized GlimmerTextEffect.timing(for:from:to:duration:)(a1, a2, a3, a4, a5 & 1);
  *a6 = v8;
  a6[1] = v9;
  a6[2] = v10;
  return result;
}

uint64_t type metadata accessor for TextEffectClass()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for GlimmerTextEffect()
{
  return &type metadata for GlimmerTextEffect;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.OnOffAnimatorPhase and conformance Text.Effect.OnOffAnimatorPhase()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.OnOffAnimatorPhase and conformance Text.Effect.OnOffAnimatorPhase;
  if (!lazy protocol witness table cache variable for type Text.Effect.OnOffAnimatorPhase and conformance Text.Effect.OnOffAnimatorPhase)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.OnOffAnimatorPhase, &type metadata for Text.Effect.OnOffAnimatorPhase);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.OnOffAnimatorPhase and conformance Text.Effect.OnOffAnimatorPhase);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.OnOffAnimatorPhase and conformance Text.Effect.OnOffAnimatorPhase;
  if (!lazy protocol witness table cache variable for type Text.Effect.OnOffAnimatorPhase and conformance Text.Effect.OnOffAnimatorPhase)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.OnOffAnimatorPhase, &type metadata for Text.Effect.OnOffAnimatorPhase);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.OnOffAnimatorPhase and conformance Text.Effect.OnOffAnimatorPhase);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.OnOffAnimatorPhase and conformance Text.Effect.OnOffAnimatorPhase;
  if (!lazy protocol witness table cache variable for type Text.Effect.OnOffAnimatorPhase and conformance Text.Effect.OnOffAnimatorPhase)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.OnOffAnimatorPhase, &type metadata for Text.Effect.OnOffAnimatorPhase);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.OnOffAnimatorPhase and conformance Text.Effect.OnOffAnimatorPhase);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for Text.Effect.Base.Timing : Text.Effect.DurationProvider in GlimmerTextEffect()
{
  return &protocol witness table for GlimmerTextEffect.Timing;
}

unint64_t instantiation function for generic protocol witness table for GlimmerTextEffect(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type GlimmerTextEffect and conformance GlimmerTextEffect();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_QWORD *specialized static GlimmerTextEffect.animatorConfiguration(from:)(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  id v6;
  unint64_t v7;
  char v8;
  void *v10;
  _BYTE v11[32];

  if (one-time initialization token for blue != -1)
    swift_once();
  v2 = static Color.blue;
  v3 = *(_QWORD *)(a1 + 16);
  swift_retain();
  if (v3)
  {
    v4 = specialized __RawDictionaryStorage.find<A>(_:)(0x756F726765726F66, 0xEF726F6C6F43646ELL);
    if ((v5 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)v11);
      type metadata accessor for NSObject();
      if ((swift_dynamicCast() & 1) != 0)
      {
        v6 = (id)CGColorForCoreColor(0, v10);

        if (v6)
        {
          swift_release();
          type metadata accessor for ColorBox<CGColorRef>(0);
          v2 = (_QWORD *)swift_allocObject();
          v2[2] = v6;
        }
      }
    }
  }
  if (*(_QWORD *)(a1 + 16))
  {
    v7 = specialized __RawDictionaryStorage.find<A>(_:)(0x65676C7562, 0xE500000000000000);
    if ((v8 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v7, (uint64_t)v11);
      swift_dynamicCast();
    }
  }
  return v2;
}

uint64_t specialized closure #3 in GlimmerTextEffect.apply(to:fragment:timing:state:context:in:)(uint64_t a1, _OWORD *a2, _OWORD *a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, double a8, double a9, double a10, float a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned int a17, unsigned int a18, unsigned int a19)
{
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL IsNull;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  __int128 v39;
  __int128 v40;
  int v41;
  id v42;
  id v43;
  __int128 v49;
  __int128 v50;
  _BYTE v54[40];
  char v55;
  _BYTE v56[32];
  __int128 v57;
  _OWORD v58[2];
  _QWORD v59[4];
  unsigned __int8 v60;
  CGRect v61;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v28 = RBDrawingStateInit();
    type metadata accessor for GraphicsContext.Storage();
    swift_allocObject();
    v29 = swift_retain();
    *(_QWORD *)a1 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v29, v28, 1, 0);
    swift_release();
  }
  v30 = RBDrawingStateBeginLayer();
  type metadata accessor for GraphicsContext.Storage();
  swift_allocObject();
  v31 = swift_retain();
  v32 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v31, v30, 0, 1);
  swift_retain();
  v61.origin.x = a4;
  v61.origin.y = a5;
  v61.size.width = a6;
  v61.size.height = a7;
  IsNull = CGRectIsNull(v61);
  if (IsNull)
    v34 = 0;
  else
    v34 = *(_QWORD *)&a4;
  if (IsNull)
    v35 = 0;
  else
    v35 = *(_QWORD *)&a5;
  v59[0] = v34;
  v59[1] = v35;
  if (IsNull)
    v36 = 0;
  else
    v36 = *(_QWORD *)&a6;
  if (IsNull)
    v37 = 0;
  else
    v37 = *(_QWORD *)&a7;
  v59[2] = v36;
  v59[3] = v37;
  if (IsNull)
    v38 = 6;
  else
    v38 = 0;
  v60 = v38;
  v39 = a2[3];
  v57 = a2[2];
  v58[0] = v39;
  *(_OWORD *)((char *)v58 + 9) = *(_OWORD *)((char *)a2 + 57);
  v40 = a2[1];
  *(_OWORD *)v56 = *a2;
  *(_OWORD *)&v56[16] = v40;
  *(_QWORD *)v54 = 256;
  memset(&v54[8], 0, 32);
  v55 = 0;
  GraphicsContext.draw(_:with:style:)((uint64_t)v59, (unint64_t *)v56, (uint64_t *)v54, v32);
  outlined consume of Path.Storage(v34, v35, v36, v37, v38);
  swift_release();
  RBDrawingStateClipLayer();
  swift_release();
  static Shader.glimmer(point:opacity:shine:bulge:)((uint64_t)v56, a8, a9, 1.0, 1.0, a10);
  v41 = v57;
  *(_OWORD *)v54 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 48);
  v42 = *(id *)v56;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v43 = Shader.makeRBShader(in:)((uint64_t *)v54);
  *(_QWORD *)v56 = v43;
  __asm { FMOV            V0.2D, #8.0 }
  *(_OWORD *)&v56[8] = _Q0;
  *(_DWORD *)&v56[24] = v41;
  GraphicsContext.addShaderFilter(_:size:)((id *)v56);

  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();

  v49 = a3[1];
  *(_OWORD *)v56 = *a3;
  *(_OWORD *)&v56[16] = v49;
  v50 = a3[3];
  v57 = a3[2];
  v58[0] = v50;
  return Text.Effect.DrawingContent.draw(options:in:)(LODWORD(a11) | ((unint64_t)a17 << 32), a18 | ((unint64_t)a19 << 32), 0, a1);
}

uint64_t specialized GlimmerTextEffect.apply(to:fragment:timing:state:context:in:)(__int128 *a1, uint64_t *a2, uint64_t a3, unint64_t a4, double a5, double a6)
{
  __int128 v9;
  __int128 v10;
  double v11;
  double v12;
  double v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float (*v26)(_BYTE *);
  float v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  CGFloat x;
  CGFloat y;
  double width;
  CGFloat height;
  uint64_t v35;
  int v36;
  char v37;
  unint64_t v38;
  _OWORD *v39;
  uint64_t i;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  CGFloat v51;
  CGFloat v52;
  CGFloat v53;
  CGFloat v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  CGFloat v69;
  double v70;
  double MaxX;
  double MidY;
  uint64_t v73;
  uint64_t v74;
  int v75;
  id v76;
  id v77;
  double v83;
  double v84;
  uint64_t v85;
  Swift::UInt64 v86;
  uint64_t v87;
  double v88;
  double v89;
  double v90;
  double v91;
  CGFloat v92;
  double v93;
  double v94;
  uint64_t v95;
  double v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  id v102;
  id v103;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  double v112;
  double v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  float v117;
  float v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  CGFloat v123;
  CGFloat v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  unsigned int v132;
  unsigned int v133;
  float v134;
  unsigned int v135;
  double v136;
  CGFloat v137;
  uint64_t v138;
  uint64_t v139[3];
  uint64_t v140;
  _BYTE v141[32];
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  _BYTE v149[32];
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  _QWORD v157[7];
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  _QWORD v165[3];
  CGRect v166;
  CGRect v167;
  CGRect v168;
  CGRect v169;
  CGRect v170;
  CGRect v171;
  CGRect v172;

  v9 = a1[1];
  v158 = *a1;
  v159 = v9;
  v10 = a1[3];
  v160 = a1[2];
  v161 = v10;
  v11 = *(double *)(a3 + 16);
  v12 = *(double *)(a3 + 24);
  v13 = *(double *)(a3 + 48);
  v14 = *(_BYTE *)(a3 + 56);
  v16 = *(_QWORD *)(a3 + 80);
  v15 = *(_QWORD *)(a3 + 88);
  if (*(_QWORD *)(a3 + 64)
    && (type metadata accessor for Text.Effect.ConcreteConfiguration<GlimmerTextEffect>(0, &lazy cache variable for type metadata for Text.Effect.ConcretePhase<GlimmerTextEffect>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for Text.Effect.ConcretePhase), (v17 = swift_dynamicCastClass()) != 0))
  {
    LODWORD(v18) = *(unsigned __int8 *)(v17 + 16);
    if (!v16)
      goto LABEL_8;
  }
  else
  {
    LODWORD(v18) = 0;
    if (!v16)
    {
LABEL_8:
      v20 = 0;
      goto LABEL_9;
    }
  }
  type metadata accessor for Text.Effect.ConcreteConfiguration<GlimmerTextEffect>(0, &lazy cache variable for type metadata for Text.Effect.ConcretePhase<GlimmerTextEffect>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for Text.Effect.ConcretePhase);
  v19 = swift_dynamicCastClass();
  if (!v19)
    goto LABEL_8;
  v20 = *(unsigned __int8 *)(v19 + 16);
LABEL_9:
  v125 = a6;
  v126 = a5;
  v128 = v13;
  v129 = v12;
  v130 = v11;
  if (v15
    && (type metadata accessor for Text.Effect.ConcreteConfiguration<GlimmerTextEffect>(0, &lazy cache variable for type metadata for Text.Effect.ConcreteConfiguration<GlimmerTextEffect>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for Text.Effect.ConcreteConfiguration), (v21 = swift_dynamicCastClass()) != 0))
  {
    v22 = (uint64_t *)(v21 + 16);
    v127 = *(double *)(v21 + 24);
  }
  else
  {
    v127 = 0.1;
    if (one-time initialization token for blue != -1)
      swift_once();
    v22 = (uint64_t *)&static Color.blue;
  }
  v23 = *v22;
  swift_retain();
  v24 = *(_QWORD *)(*(_QWORD *)a4 + 16);
  v25 = *(_QWORD *)(v24 + 56);
  *(_QWORD *)v149 = *(_QWORD *)(v24 + 48);
  *(_QWORD *)&v149[8] = v25;
  v26 = *(float (**)(_BYTE *))(*(_QWORD *)v23 + 104);
  swift_retain();
  swift_retain();
  swift_retain();
  v27 = v26(v149);
  v133 = v28;
  v134 = v27;
  v135 = v29;
  v132 = v30;
  swift_release();
  swift_release();
  swift_release();
  v165[0] = *((_QWORD *)&v158 + 1);
  v162 = v159;
  v163 = v160;
  v164 = v161;
  x = *MEMORY[0x24BDBF070];
  y = *(double *)(MEMORY[0x24BDBF070] + 8);
  width = *(double *)(MEMORY[0x24BDBF070] + 16);
  height = *(double *)(MEMORY[0x24BDBF070] + 24);
  v35 = *(_QWORD *)(*((_QWORD *)&v158 + 1) + 16);
  if (v35)
  {
    v36 = v18;
    v37 = v14;
    v38 = a4;
    v39 = (_OWORD *)(*((_QWORD *)&v158 + 1) + 32);
    outlined retain of Text.Effect.DrawingContent((uint64_t)&v158);
    outlined retain of LinearGradient((uint64_t)v165);
    for (i = v35 - 1; ; --i)
    {
      *(_OWORD *)v149 = *v39;
      v41 = v39[1];
      v42 = v39[2];
      v43 = v39[4];
      v151 = v39[3];
      v152 = v43;
      *(_OWORD *)&v149[16] = v41;
      v150 = v42;
      v44 = v39[5];
      v45 = v39[6];
      v46 = v39[8];
      v155 = v39[7];
      v156 = v46;
      v153 = v44;
      v154 = v45;
      v47 = v39[7];
      v146 = v39[6];
      v147 = v47;
      v148 = v39[8];
      v48 = v39[3];
      v142 = v39[2];
      v143 = v48;
      v49 = v39[5];
      v144 = v39[4];
      v145 = v49;
      v50 = v39[1];
      *(_OWORD *)v141 = *v39;
      *(_OWORD *)&v141[16] = v50;
      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)v149, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
      Text.Effect.ResolvedDrawing.Operation.drawingBounds(context:)();
      v172.origin.x = v51;
      v172.origin.y = v52;
      v172.size.width = v53;
      v172.size.height = v54;
      v166.origin.x = x;
      v166.origin.y = y;
      v166.size.width = width;
      v166.size.height = height;
      v167 = CGRectUnion(v166, v172);
      x = v167.origin.x;
      y = v167.origin.y;
      width = v167.size.width;
      height = v167.size.height;
      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)v149, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
      if (!i)
        break;
      v39 += 9;
    }
    outlined release of LinearGradient((uint64_t)v165);
    outlined release of Text.Effect.DrawingContent((uint64_t)&v158);
    a4 = v38;
    v14 = v37;
    LODWORD(v18) = v36;
  }
  if (Edge.Set.contains(_:)(SwiftUI_Edge_top))
    v55 = 8.0;
  else
    v55 = 0.0;
  v136 = v55;
  if (Edge.Set.contains(_:)(SwiftUI_Edge_leading))
    v56 = 8.0;
  else
    v56 = 0.0;
  if (Edge.Set.contains(_:)(SwiftUI_Edge_bottom))
    v57 = 8.0;
  else
    v57 = 0.0;
  if (Edge.Set.contains(_:)(SwiftUI_Edge_trailing))
    v58 = 8.0;
  else
    v58 = 0.0;
  v59 = CGRect.outset(by:)(v136, v56, v57, v58, x, y, width, height);
  v61 = v60;
  v137 = v62;
  v124 = v63;
  if (one-time initialization token for effectWidth != -1)
    goto LABEL_77;
  while (1)
  {
    v64 = *(double *)&static GlimmerTextEffect.effectWidth;
    v65 = CGRect.outset(by:)(0.0, *(double *)&static GlimmerTextEffect.effectWidth, 0.0, v64 + v64, x, y, width, height);
    v69 = v65;
    height = v66;
    y = v67;
    x = v68;
    if ((_DWORD)v18 == v20 || (v14 & 0xFE) != 2)
    {
      if (!v20)
      {
        *(_OWORD *)v149 = v158;
        *(_OWORD *)&v149[16] = v159;
        v150 = v160;
        v151 = v161;
        Text.Effect.DrawingContent.draw(options:in:)(0, 0, 1, a4);
        return swift_release();
      }
      MaxX = CGRectGetMaxX(*(CGRect *)&v65);
      v168.origin.x = v69;
      v168.origin.y = height;
      v168.size.width = y;
      v168.size.height = x;
      MidY = CGRectGetMidY(v168);
      *(_OWORD *)v149 = v158;
      *(_OWORD *)&v149[16] = v159;
      v150 = v160;
      v151 = v161;
      Text.Effect.DrawingContent.draw(options:in:)(0, 0, 1, a4);
      v138 = RBDrawingStateBeginLayer();
      type metadata accessor for GraphicsContext.Storage();
      swift_allocObject();
      v73 = swift_retain();
      v74 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v73, v138, 0, 1);
      v157[0] = v74;
      swift_retain();
      static Shader.glimmer(point:opacity:shine:bulge:)((uint64_t)v149, MaxX, MidY, 1.0, 1.0, v127);
      v75 = v150;
      *(_OWORD *)v141 = *(_OWORD *)(*(_QWORD *)(v74 + 16) + 48);
      v76 = *(id *)v149;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v77 = Shader.makeRBShader(in:)((uint64_t *)v141);
      *(_QWORD *)v149 = v77;
      __asm { FMOV            V0.2D, #8.0 }
      *(_OWORD *)&v149[8] = _Q0;
      *(_DWORD *)&v149[24] = v75;
      GraphicsContext.addShaderFilter(_:size:)((id *)v149);

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();

      *(_OWORD *)v149 = v158;
      *(_OWORD *)&v149[16] = v159;
      v150 = v160;
      v151 = v161;
      Text.Effect.DrawingContent.draw(options:in:)(LODWORD(v134) | ((unint64_t)v133 << 32), v135 | ((unint64_t)v132 << 32), 0, (uint64_t)v157);
      swift_release();
      RBDrawingStateDrawLayer();
      goto LABEL_74;
    }
    if (!v20)
    {
      *(_OWORD *)v149 = v158;
      *(_OWORD *)&v149[16] = v159;
      v150 = v160;
      v151 = v161;
      Text.Effect.DrawingContent.draw(options:in:)(0, 0, 1, a4);
      if (v129 - v130 >= 0.0)
      {
        v84 = (v129 - v130) / v128;
        v83 = 0.0;
      }
      else
      {
        v83 = 0.0;
        v84 = 0.0 / v128;
      }
      if (v84 >= 0.0)
      {
        v83 = 1.0;
        if (v84 <= 1.0)
          v83 = v84;
      }
      v112 = v83 * 0.5 + 0.5 + v83 * 0.5 + 0.5 + -1.0;
      v113 = 1.0 - v112 * v112;
      v114 = RBDrawingStateBeginLayer();
      type metadata accessor for GraphicsContext.Storage();
      swift_allocObject();
      v115 = swift_retain();
      v116 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v115, v114, 0, 1);
      *(_QWORD *)v141 = v116;
      v117 = v113;
      v118 = *(float *)(v116 + 32);
      swift_retain();
      if (v118 != v117)
      {
        v119 = v116;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          v120 = RBDrawingStateInit();
          swift_allocObject();
          v121 = swift_retain();
          v119 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v121, v120, 1, 0);
          *(_QWORD *)v141 = v119;
          swift_release();
        }
        *(float *)(v119 + 32) = v117;
      }
      *(_OWORD *)v149 = v158;
      *(_OWORD *)&v149[16] = v159;
      v150 = v160;
      v151 = v161;
      Text.Effect.DrawingContent.draw(options:in:)(LODWORD(v134) | ((unint64_t)v133 << 32), v135 | ((unint64_t)v132 << 32), 0, (uint64_t)v141);
      swift_release();
      RBDrawingStateDrawLayer();
LABEL_74:
      swift_release();
      return swift_release();
    }
    v123 = v61;
    if (v129 - v130 >= 0.0)
    {
      v70 = (v129 - v130) / v128;
      v61 = 0.0;
      if (v70 < 0.0)
        goto LABEL_48;
    }
    else
    {
      v61 = 0.0;
      v70 = 0.0 / v128;
      if (0.0 / v128 < 0.0)
        goto LABEL_48;
    }
    v61 = v70 <= 1.0 ? v70 : 1.0;
LABEL_48:
    v85 = *a2;
    v86 = a2[1];
    v87 = a2[2];
    v18 = a2[4];
    v88 = CGRectGetWidth(*(CGRect *)(a2[3] + 120));
    if (v18 < 0)
      break;
    v89 = v88;
    v130 = v59;
    width = 0.0;
    if (!v18)
    {
LABEL_54:
      v90 = (v61 * v125 * v126 - (v64 + width)) / (v64 * 3.0 + v89);
      if (v90 < 0.0)
        v90 = 0.0;
      if (v90 <= 1.0)
        v91 = v90;
      else
        v91 = 1.0;
      v169.origin.x = v69;
      v169.origin.y = height;
      v169.size.width = y;
      v169.size.height = x;
      v92 = CGRectGetWidth(v169) * v91;
      v170.origin.x = v69;
      v170.origin.y = height;
      v170.size.width = y;
      v170.size.height = x;
      width = CGRectGetMinX(v170) + v92;
      v171.origin.x = v69;
      v171.origin.y = height;
      v171.size.width = y;
      v171.size.height = x;
      height = CGRectGetMidY(v171);
      if (one-time initialization token for gradientWidth == -1)
        goto LABEL_60;
      goto LABEL_79;
    }
    v129 = v88;
    v14 = a4;
    outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>((uint64_t)a2);
    a4 = 0;
    while (v18 != a4)
    {
      swift_retain();
      swift_retain();
      specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v85, v86, v87, a4, v157);
      v59 = CGRectGetWidth(*(CGRect *)(v157[3] + 120));
      outlined release of Text.Effect.BaseFragment((uint64_t)v157);
      width = width + v59;
      v20 = ++a4;
      if (v18 == a4)
      {
        outlined release of Text.Effect.BaseFragment((uint64_t)a2);
        v89 = v129;
        goto LABEL_54;
      }
    }
    __break(1u);
LABEL_77:
    swift_once();
  }
  __break(1u);
LABEL_79:
  swift_once();
LABEL_60:
  v93 = *(double *)&static GlimmerTextEffect.gradientWidth;
  v94 = width
      + (*(double *)&static GlimmerTextEffect.gradientWidth - *(double *)&static GlimmerTextEffect.effectWidth) * 0.0
      + *(double *)&static GlimmerTextEffect.gradientWidth * -0.5;
  type metadata accessor for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Color>);
  v95 = swift_allocObject();
  *(_OWORD *)(v95 + 16) = xmmword_2352828C0;
  if (one-time initialization token for white != -1)
    swift_once();
  v96 = v93 + v94;
  *(_QWORD *)(v95 + 32) = static Color.white;
  v97 = one-time initialization token for clear;
  swift_retain();
  if (v97 != -1)
    swift_once();
  *(_QWORD *)(v95 + 40) = static Color.clear;
  *(_QWORD *)v149 = v95;
  specialized Array._endMutation()();
  v98 = *(_QWORD *)v149;
  swift_retain();
  *(_QWORD *)v149 = specialized Gradient.init(colors:)(v98);
  *(_QWORD *)&v149[8] = 0;
  *(double *)&v149[16] = v94;
  *(CGFloat *)&v149[24] = height;
  *(double *)&v150 = v96;
  *((CGFloat *)&v150 + 1) = height;
  *(_QWORD *)&v152 = 0;
  v151 = 0uLL;
  BYTE8(v152) = 5;
  v99 = RBDrawingStateBeginLayer();
  type metadata accessor for GraphicsContext.Storage();
  swift_allocObject();
  v100 = swift_retain();
  v140 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v100, v99, 0, 1);
  swift_retain();
  static Shader.glimmer(point:opacity:shine:bulge:)((uint64_t)v141, width, height, 1.0, 0.0, v127);
  v101 = v142;
  *(_OWORD *)v139 = *(_OWORD *)(*(_QWORD *)(v140 + 16) + 48);
  v102 = *(id *)v141;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v103 = Shader.makeRBShader(in:)(v139);
  *(_QWORD *)v141 = v103;
  __asm { FMOV            V0.2D, #8.0 }
  *(_OWORD *)&v141[8] = _Q0;
  *(_DWORD *)&v141[24] = v101;
  GraphicsContext.addShaderFilter(_:size:)((id *)v141);

  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();

  *(_OWORD *)v141 = v158;
  *(_OWORD *)&v141[16] = v159;
  v142 = v160;
  v143 = v161;
  Text.Effect.DrawingContent.draw(options:in:)(0, 0, 1, (uint64_t)&v140);
  swift_release();
  RBDrawingStateDrawLayer();
  swift_release();
  v105 = RBDrawingStateBeginLayer();
  swift_allocObject();
  v106 = swift_retain();
  *(_QWORD *)v141 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v106, v105, 0, 1);
  swift_retain();
  specialized closure #3 in GlimmerTextEffect.apply(to:fragment:timing:state:context:in:)((uint64_t)v141, v149, &v158, v130, v123, v137, v124, width, height, v127, v134, v107, v108, v109, v110, v111, v133, v135, v132);
  swift_release();
  RBDrawingStateDrawLayer();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t outlined retain of Text.Effect.DrawingContent(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of Text.Effect.DrawingContent(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for Text.Effect.ConcreteConfiguration<GlimmerTextEffect>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = lazy protocol witness table accessor for type GlimmerTextEffect and conformance GlimmerTextEffect();
    v7 = a3(a1, &type metadata for GlimmerTextEffect, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t specialized GlimmerTextEffect.Timing.init(content:duration:from:to:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  Swift::UInt64 v11;
  Swift::UInt64 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  double v18;
  uint64_t v19;
  Swift::UInt64 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  double Width;
  uint64_t result;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  _QWORD v46[3];
  uint64_t v47;

  v45 = a2;
  v8 = type metadata accessor for Text.Effect.BaseContent(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (uint64_t *)((char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for IndexingIterator<Text.Effect.BaseContent>();
  v12 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (uint64_t *)((char *)&v41 - v16);
  if (__OFSUB__(specialized Sequence.reduce<A>(_:_:)(0, a1), 1))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v43 = a3;
  v44 = a5;
  if (one-time initialization token for effectWidth != -1)
LABEL_23:
    swift_once();
  v18 = *(double *)&static GlimmerTextEffect.effectWidth;
  v42 = a1;
  outlined init with copy of Text.Effect.BaseContent(a1, (uint64_t)v10);
  outlined init with copy of Text.Effect.BaseContent((uint64_t)v10, (uint64_t)v14);
  v19 = *v10;
  v20 = v10[1];
  v21 = v10[2];
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v19 + 48) + 16)
    && (specialized __RawDictionaryStorage.find<A>(_:)(v20, v21), (v22 & 1) != 0))
  {
    swift_endAccess();
    outlined destroy of TypesettingConfiguration((uint64_t)v10, type metadata accessor for Text.Effect.BaseContent);
    *(_QWORD *)&v14[*(int *)(v12 + 36)] = 0;
    outlined init with take of IndexingIterator<Text.Effect.BaseContent>((uint64_t)v14, (uint64_t)v17);
    a1 = *(int *)(v12 + 36);
    v23 = *v17;
    v12 = v17[1];
    v10 = (uint64_t *)v17[2];
    v14 = (char *)(*v17 + 48);
    v24 = *(uint64_t *)((char *)v17 + a1);
    swift_beginAccess();
    v25 = *(_QWORD *)(v23 + 48);
    if (*(_QWORD *)(v25 + 16))
    {
      v26 = v18 * 3.0;
      v27 = v18 + v18;
      do
      {
        v28 = specialized __RawDictionaryStorage.find<A>(_:)(v12, (uint64_t)v10);
        if ((v29 & 1) == 0)
          break;
        v30 = *(_QWORD *)(*(_QWORD *)(v25 + 56) + 16 * v28);
        swift_endAccess();
        v31 = *(_QWORD *)(v30 + 16);
        if (__OFSUB__(v31, v24))
        {
          __break(1u);
LABEL_21:
          __break(1u);
          goto LABEL_22;
        }
        if (v31 == v24)
          goto LABEL_19;
        swift_retain();
        swift_retain();
        specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v23, v12, (uint64_t)v10, v24, v46);
        swift_beginAccess();
        if (!*(_QWORD *)(*(_QWORD *)(v23 + 48) + 16)
          || (specialized __RawDictionaryStorage.find<A>(_:)(v12, (uint64_t)v10), (v32 & 1) == 0))
        {
          swift_endAccess();
          __break(1u);
LABEL_25:
          swift_endAccess();
          __break(1u);
          goto LABEL_26;
        }
        swift_endAccess();
        swift_beginAccess();
        v33 = *(_QWORD *)v14;
        if (!*(_QWORD *)(*(_QWORD *)v14 + 16))
          goto LABEL_25;
        v34 = specialized __RawDictionaryStorage.find<A>(_:)(v12, (uint64_t)v10);
        if ((v35 & 1) == 0)
          goto LABEL_25;
        v36 = *(_QWORD *)(*(_QWORD *)(v33 + 56) + 16 * v34);
        swift_endAccess();
        if (v24 >= *(_QWORD *)(v36 + 16))
          goto LABEL_21;
        *(uint64_t *)((char *)v17 + a1) = v24 + 1;
        v37 = v47;
        v38 = v27 + v18 + CGRectGetWidth(*(CGRect *)(v47 + 120));
        if (v26 <= v38)
          v26 = v38;
        Width = CGRectGetWidth(*(CGRect *)(v37 + 120));
        outlined release of Text.Effect.BaseFragment((uint64_t)v46);
        v18 = v18 + Width;
        v24 = *(uint64_t *)((char *)v17 + a1);
        swift_beginAccess();
        v25 = *(_QWORD *)v14;
      }
      while (*(_QWORD *)(*(_QWORD *)v14 + 16));
    }
    swift_endAccess();
    __break(1u);
LABEL_19:
    outlined destroy of TypesettingConfiguration(v42, type metadata accessor for Text.Effect.BaseContent);
    return outlined destroy of TypesettingConfiguration((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for IndexingIterator<Text.Effect.BaseContent>);
  }
  else
  {
LABEL_26:
    result = swift_endAccess();
    __break(1u);
  }
  return result;
}

uint64_t specialized GlimmerTextEffect.timing(for:from:to:duration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v17;

  v10 = type metadata accessor for Text.Effect.BaseContent(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Text.Effect.BaseContent(a1, (uint64_t)v12);
  if (a2)
  {
    type metadata accessor for Text.Effect.ConcreteConfiguration<GlimmerTextEffect>(0, &lazy cache variable for type metadata for Text.Effect.ConcretePhase<GlimmerTextEffect>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for Text.Effect.ConcretePhase);
    v13 = swift_dynamicCastClass();
    if (!v13)
    {
      a2 = 0;
      if (!a3)
        goto LABEL_8;
      goto LABEL_5;
    }
    a2 = *(unsigned __int8 *)(v13 + 16);
  }
  if (!a3)
  {
LABEL_8:
    v15 = 0;
    return specialized GlimmerTextEffect.Timing.init(content:duration:from:to:)((uint64_t)v12, a4, a5 & 1, a2, v15);
  }
LABEL_5:
  type metadata accessor for Text.Effect.ConcreteConfiguration<GlimmerTextEffect>(0, &lazy cache variable for type metadata for Text.Effect.ConcretePhase<GlimmerTextEffect>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for Text.Effect.ConcretePhase);
  v14 = swift_dynamicCastClass();
  if (!v14)
    goto LABEL_8;
  v15 = *(unsigned __int8 *)(v14 + 16);
  return specialized GlimmerTextEffect.Timing.init(content:duration:from:to:)((uint64_t)v12, a4, a5 & 1, a2, v15);
}

uint64_t outlined init with copy of Text.Effect.BaseContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Text.Effect.BaseContent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for GlimmerTextEffect.Timing()
{
  return &type metadata for GlimmerTextEffect.Timing;
}

ValueMetadata *type metadata accessor for GlimmerTextEffect.AnimatorConfiguration()
{
  return &type metadata for GlimmerTextEffect.AnimatorConfiguration;
}

uint64_t LogicalCompletionModifier.animate<A, B>(base:value:time:context:)(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v12;
  uint64_t result;

  v12 = *(_BYTE *)(a5 + 17);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a9 + 16))(a4, a5, a6, a8, a7, a9);
  if ((v12 & 1) == 0)
    *(_BYTE *)(a5 + 17) = a2 <= a1;
  return result;
}

uint64_t protocol witness for CustomAnimationModifier.animate<A, B>(base:value:time:context:) in conformance LogicalCompletionModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8)
{
  double *v8;

  return LogicalCompletionModifier.animate<A, B>(base:value:time:context:)(a8, *v8, a1, a2, a3, a4, a5, a6, a7);
}

uint64_t protocol witness for CustomAnimationModifier.function(base:) in conformance LogicalCompletionModifier@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v5;
  *(_QWORD *)(a2 + 32) = v6;
  v7 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a2 + 40) = v7;
  return outlined copy of Animation.Function(v3, v2, v4, v5, v6, v7);
}

uint64_t Animation.logicallyComplete(after:)(uint64_t a1, double a2)
{
  uint64_t (*v2)(double *, void *, unint64_t);
  unint64_t v3;
  double v5;

  v5 = a2;
  v2 = *(uint64_t (**)(double *, void *, unint64_t))(*(_QWORD *)a1 + 144);
  v3 = lazy protocol witness table accessor for type LogicalCompletionModifier and conformance LogicalCompletionModifier();
  return v2(&v5, &unk_25063B480, v3);
}

unint64_t lazy protocol witness table accessor for type LogicalCompletionModifier and conformance LogicalCompletionModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LogicalCompletionModifier and conformance LogicalCompletionModifier;
  if (!lazy protocol witness table cache variable for type LogicalCompletionModifier and conformance LogicalCompletionModifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LogicalCompletionModifier, &unk_25063B480);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LogicalCompletionModifier and conformance LogicalCompletionModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LogicalCompletionModifier and conformance LogicalCompletionModifier;
  if (!lazy protocol witness table cache variable for type LogicalCompletionModifier and conformance LogicalCompletionModifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LogicalCompletionModifier, &unk_25063B480);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LogicalCompletionModifier and conformance LogicalCompletionModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LogicalCompletionModifier and conformance LogicalCompletionModifier;
  if (!lazy protocol witness table cache variable for type LogicalCompletionModifier and conformance LogicalCompletionModifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LogicalCompletionModifier, &unk_25063B480);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LogicalCompletionModifier and conformance LogicalCompletionModifier);
  }
  return result;
}

void *type metadata accessor for LogicalCompletionModifier()
{
  return &unk_25063B480;
}

unint64_t instantiation function for generic protocol witness table for LogicalCompletionModifier(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type LogicalCompletionModifier and conformance LogicalCompletionModifier();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t specialized ScrollableContainer.setParentTarget(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t WeakValue;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for Scrollable);
  WeakValue = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of AnyTrackedValue(WeakValue, (uint64_t)v9);
    v5 = v10;
    v6 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, a2, v5, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
  else
  {
    v7 = 0;
  }
  return v7 & 1;
}

void specialized PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *i;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<UpdateScrollStateRequestKey>, (uint64_t)&type metadata for UpdateScrollStateRequestKey, (uint64_t)&protocol witness table for UpdateScrollStateRequestKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    v8 = v6;
    for (i = (_QWORD *)(a1 + 32); *i != v6; i += 2)
    {
      if (!--v7)
        return;
    }
    a3();
    v10 = *(_QWORD *)(*(_QWORD *)v3 + 16);
    if (v10)
    {
      v11 = *(_QWORD *)v3 + 48;
      do
      {
        if (*(_QWORD *)(v11 - 16) == v8)
          break;
        v11 += 24;
        --v10;
      }
      while (v10);
    }
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for [ScrollStateRequest], (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest, (uint64_t)&protocol descriptor for ScrollStateRequest, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for PreferenceTransform<UpdateScrollStateRequestKey>, (uint64_t)&type metadata for UpdateScrollStateRequestKey, (uint64_t)&protocol witness table for UpdateScrollStateRequestKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PreferenceTransform);
    lazy protocol witness table accessor for type PreferenceTransform<ScrollTargetRole.ContentKey> and conformance PreferenceTransform<A>(&lazy protocol witness table cache variable for type PreferenceTransform<UpdateScrollStateRequestKey> and conformance PreferenceTransform<A>, &lazy cache variable for type metadata for PreferenceTransform<UpdateScrollStateRequestKey>, (uint64_t)&type metadata for UpdateScrollStateRequestKey, (uint64_t)&protocol witness table for UpdateScrollStateRequestKey);
    v12 = Attribute.init<A>(body:value:flags:update:)();
    PreferencesOutputs.subscript.setter(v12, v8, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v13);
  }
}

uint64_t specialized static DynamicContainer.makeContainer<A>(adaptor:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v28;
  int v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  _OWORD v40[11];
  _OWORD v41[2];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[64];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE v51[29];
  uint64_t v52;

  v7 = a3;
  v52 = *MEMORY[0x24BDAC8D0];
  v30 = *(_QWORD *)a5;
  v29 = *(_DWORD *)(a5 + 8);
  v28 = *(_QWORD *)(a5 + 16);
  v32 = *(_OWORD *)(a5 + 40);
  v33 = *(_OWORD *)(a5 + 24);
  v31 = *(_OWORD *)(a5 + 56);
  v9 = *(_QWORD *)(a5 + 72);
  v10 = *(_DWORD *)(a5 + 80);
  v11 = *MEMORY[0x24BE096C0];
  v12 = MEMORY[0x24BEE4AF8];
  v35 = MEMORY[0x24BEE4AF8];
  v36 = 0;
  v37 = v11;
  v13 = *(_QWORD *)(a5 + 48);
  v38 = v13;
  v39 = *(_DWORD *)(a5 + 56);
  v14 = *(_QWORD *)(v13 + 16);
  if (v14)
  {
    outlined retain of LinearGradient((uint64_t)&v38);
    v16 = v13 + 40;
    do
    {
      (*(void (**)(uint64_t *, ValueMetadata *, _UNKNOWN **))(*(_QWORD *)v16 + 16))(&v35, &type metadata for DynamicContainer.AddCombinerVisitor, &protocol witness table for DynamicContainer.AddCombinerVisitor);
      v16 += 16;
      --v14;
    }
    while (v14);
    outlined release of LinearGradient((uint64_t)&v38);
    v7 = a3;
    v12 = MEMORY[0x24BEE4AF8];
  }
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for External<()>, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE09670]);
  lazy protocol witness table accessor for type External<()> and conformance External<A>();
  v17 = Attribute.init<A>(body:value:flags:update:)();
  v18 = v35;
  v19 = v36;
  v20 = v37;
  v21 = (id)AGSubgraphGetCurrent();
  if (!v21)
    __break(1u);
  LODWORD(v42) = v17;
  *((_QWORD *)&v42 + 1) = a2;
  *(_QWORD *)&v43 = v7;
  *((_QWORD *)&v43 + 1) = a4;
  *(_QWORD *)&v44 = v30;
  DWORD2(v44) = v29;
  *(_QWORD *)v45 = v28;
  *(_OWORD *)&v45[8] = v33;
  *(_OWORD *)&v45[24] = v32;
  *(_OWORD *)&v45[40] = v31;
  *(_QWORD *)&v45[56] = v9;
  LODWORD(v46) = v10;
  *((_QWORD *)&v46 + 1) = v18;
  *(_QWORD *)&v47 = __PAIR64__(v20, v19);
  *((_QWORD *)&v47 + 1) = v21;
  *(_QWORD *)&v48 = v12;
  *((_QWORD *)&v48 + 1) = MEMORY[0x24BEE4B00];
  v49 = 0;
  v50 = 0;
  *(_QWORD *)v51 = 0;
  v51[8] = 1;
  *(_OWORD *)&v51[12] = xmmword_2352A7020;
  v51[28] = 0;
  v40[10] = 0u;
  v41[0] = *(_OWORD *)v51;
  *(_OWORD *)((char *)v41 + 13) = *(_OWORD *)&v51[13];
  v40[6] = *(_OWORD *)&v45[48];
  v40[7] = v46;
  v40[8] = v47;
  v40[9] = v48;
  v40[2] = v44;
  v40[3] = *(_OWORD *)v45;
  v40[4] = *(_OWORD *)&v45[16];
  v40[5] = *(_OWORD *)&v45[32];
  v40[0] = v42;
  v40[1] = v43;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  swift_retain();
  outlined retain of _ViewInputs(a5);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for DynamicContainerInfo<DynamicLayoutViewAdaptor>, (uint64_t)&type metadata for DynamicLayoutViewAdaptor, (uint64_t)&protocol witness table for DynamicLayoutViewAdaptor, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for DynamicContainerInfo);
  lazy protocol witness table accessor for type DynamicContainerInfo<DynamicLayoutViewAdaptor> and conformance DynamicContainerInfo<A>();
  swift_bridgeObjectRetain();
  v22 = Attribute.init<A>(body:value:flags:update:)();
  outlined release of DynamicContainerInfo<DynamicLayoutViewAdaptor>((uint64_t)&v42);
  AGGraphAddInput();
  AGGraphSetFlags();
  v23 = *(_QWORD *)(v18 + 16);
  if (v23)
  {
    swift_bridgeObjectRetain();
    v24 = (_DWORD *)(v18 + 48);
    do
    {
      v25 = *((_QWORD *)v24 - 1);
      v26 = *v24;
      v24 += 6;
      *(_QWORD *)&v40[0] = __PAIR64__(v22, v26);
      (*(void (**)(_OWORD *, ValueMetadata *, _UNKNOWN **))(v25 + 16))(v40, &type metadata for DynamicContainer.AttachCombinerVisitor, &protocol witness table for DynamicContainer.AttachCombinerVisitor);
      --v23;
    }
    while (v23);
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)a1 = v18;
  *(_DWORD *)(a1 + 8) = v19;
  *(_DWORD *)(a1 + 12) = v20;
  return v22;
}

double ViewTraitCollection.zIndex.getter()
{
  uint64_t v0;
  double v1;

  v0 = swift_bridgeObjectRetain();
  v1 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(v0, 0.0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t static Layout.makeDynamicView(root:inputs:properties:list:)@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, int a3@<W3>, unint64_t a4@<X4>, unint64_t a5@<X5>, _QWORD *a6@<X8>)
{
  uint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  _BOOL4 v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL4 v27;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  _QWORD *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  _QWORD *v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  int v70;
  _QWORD *v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  unint64_t v76;
  int v77;
  unint64_t v78;
  uint64_t v79;
  _DWORD *v80;
  int v81;
  int v82;
  unsigned int v83;
  uint64_t v84;
  _DWORD *v85;
  int v86;
  int v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int v96;
  _DWORD *v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t KeyPath;
  uint64_t v101;
  unint64_t v102;
  int v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  int v114;
  uint64_t result;
  _QWORD *v116;
  _BYTE v117[16];
  uint64_t v118;
  uint64_t v119;
  _QWORD v120[2];
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unsigned int v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  int v132;
  unsigned int v133;
  unsigned int v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  unint64_t v143;
  int *v144;
  unsigned int v145;
  _QWORD *v146;
  unsigned int v147;
  unsigned int v148;
  unint64_t v149;
  unsigned int v150;
  unsigned int v151;
  unint64_t v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  int v161;
  int v162;
  unint64_t v163;
  unsigned int v164;
  unsigned int v165;
  _QWORD *v166;
  ValueMetadata *v167;
  _UNKNOWN **v168;
  unint64_t v169;
  unint64_t v170;
  unsigned int v171;
  unsigned int v172;
  unint64_t v173;
  __int128 v174;
  _BYTE v175[28];
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  int v181;
  _OWORD v182[5];
  int v183;
  uint64_t v184;

  LODWORD(v143) = a3;
  v131 = a6;
  v184 = *MEMORY[0x24BDAC8D0];
  LODWORD(v146) = *a1;
  v8 = *(_QWORD *)a2;
  v9 = *(_DWORD *)(a2 + 8);
  v10 = *(_QWORD **)(a2 + 16);
  v141 = *(_DWORD *)(a2 + 24);
  v142 = v9;
  v11 = *(_DWORD *)(a2 + 28);
  v12 = *(_DWORD *)(a2 + 36);
  v139 = *(_DWORD *)(a2 + 32);
  v140 = v11;
  v13 = *(_QWORD *)(a2 + 48);
  v152 = *(_QWORD *)(a2 + 40);
  v138 = *(_DWORD *)(a2 + 56);
  v147 = *(_DWORD *)(a2 + 60);
  v151 = *(_DWORD *)(a2 + 64);
  v14 = *(_DWORD *)(a2 + 68);
  v145 = *(_DWORD *)(a2 + 72);
  v133 = *(_DWORD *)(a2 + 76);
  v134 = v14;
  v132 = *(_DWORD *)(a2 + 80);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<ScrollablePreferenceKey>, (uint64_t)&type metadata for ScrollablePreferenceKey, (uint64_t)&protocol witness table for ScrollablePreferenceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v16 = *(_QWORD *)(v13 + 16);
  v156 = v13;
  v157 = v12;
  v130 = v15;
  v136 = a4;
  v137 = a5;
  if (v16)
  {
    v17 = (uint64_t *)(v13 + 32);
    v18 = 1;
    v19 = v17;
    do
    {
      v20 = *v19;
      v19 += 2;
      v21 = v20 == v15;
    }
    while (v20 != v15 && v16 != v18++);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<ScrollTargetRole.ContentKey>, (uint64_t)&type metadata for ScrollTargetRole.ContentKey, (uint64_t)&protocol witness table for ScrollTargetRole.ContentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
    v24 = 0;
    do
    {
      v25 = v24 + 1;
      if (__OFADD__(v24, 1))
        __break(1u);
      v26 = *v17;
      v17 += 2;
      v27 = v26 == v23;
      ++v24;
    }
    while (v26 != v23 && v25 != v16);
    v129 = v23;
  }
  else
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<ScrollTargetRole.ContentKey>, (uint64_t)&type metadata for ScrollTargetRole.ContentKey, (uint64_t)&protocol witness table for ScrollTargetRole.ContentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
    v129 = v29;
    v27 = 0;
    v21 = 0;
  }
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v30 = v10;
  v31 = v8;
  v32 = specialized closure #1 in PropertyList.subscript.getter(v8);
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  v148 = *MEMORY[0x24BE096C0];
  v150 = v32;
  if (v32 == v148)
    v33 = 0;
  else
    v33 = v32;
  v34 = v30;
  v127 = v33;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  LODWORD(v128) = specialized closure #1 in PropertyList.subscript.getter(v31);
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  v153 = 0;
  v155 = v31;
  v35 = v157;
  if ((v157 & 0x1000) != 0)
  {
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v153 = specialized closure #1 in PropertyList.subscript.getter(v155);
    v34 = v30;
    v31 = v155;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  v149 = 0;
  v36 = swift_allocObject();
  *(_DWORD *)(v36 + 16) = 0;
  v144 = (int *)(v36 + 16);
  *(_BYTE *)(v36 + 20) = 1;
  v154 = v36;
  if (((v21 | ((v35 & 0x20) >> 5)) & 1) != 0 || (v35 & 2) != 0 || (v153 & 1) != 0)
  {
    v40 = swift_beginAccess();
    v135 = (unint64_t)v120;
    v163 = __PAIR64__(*((_DWORD *)v34 + 4), v146);
    v164 = v148;
    v166 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v167 = (ValueMetadata *)MEMORY[0x24BEE4AF8];
    LODWORD(v168) = 0;
    MEMORY[0x24BDAC7A8](v40);
    v146 = v34;
    v41 = v136;
    v39 = v137;
    v118 = type metadata accessor for DynamicLayoutComputer(0, v136, v137, v42);
    v119 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DynamicLayoutComputer<A>, v118);
    v37 = v154;
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Attribute<LayoutComputer>, (uint64_t)&type metadata for LayoutComputer, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE095F0]);
    v43 = v149;
    _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v163, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_0, (uint64_t)v117, v118, MEMORY[0x24BEE4078], v44, MEMORY[0x24BEE40A8], v45);
    v149 = v43;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v46 = v182[0];
    *(_DWORD *)(v37 + 16) = v182[0];
    *(_BYTE *)(v37 + 20) = 0;
    v163 = __PAIR64__(v151, v145);
    v164 = v46;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewGeometry], (uint64_t)&type metadata for ViewGeometry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    lazy protocol witness table accessor for type LayoutChildGeometries and conformance LayoutChildGeometries();
    v38 = v41;
    v34 = v146;
    v31 = v155;
    v135 = Attribute.init<A>(body:value:flags:update:)();
  }
  else
  {
    v37 = v36;
    v135 = v148;
    v38 = v136;
    v39 = v137;
  }
  v47 = (_QWORD *)swift_allocObject();
  v47[2] = v38;
  v47[3] = v39;
  v47[4] = v37;
  *(_QWORD *)&v176 = v31;
  DWORD2(v176) = v142;
  *(_QWORD *)&v177 = v34;
  *((_QWORD *)&v177 + 1) = __PAIR64__(v140, v141);
  *((_QWORD *)&v178 + 1) = v152;
  *(_QWORD *)&v179 = v156;
  *((_QWORD *)&v179 + 1) = __PAIR64__(v147, v138);
  *(_QWORD *)&v180 = __PAIR64__(v134, v151);
  *((_QWORD *)&v180 + 1) = __PAIR64__(v133, v145);
  v181 = v132;
  LODWORD(v178) = v139;
  DWORD1(v178) = v157 & 0xFFFFFFFD;
  v146 = v47;
  if (!v27)
  {
    v54 = (uint64_t)v47;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    v48 = v148;
LABEL_36:
    LOBYTE(v55) = v157;
    goto LABEL_37;
  }
  v48 = v148;
  if ((v128 & 1) == 0)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v37 = v154;
    swift_retain();
    v54 = (uint64_t)v146;
    swift_retain();
    goto LABEL_36;
  }
  v49 = v156;
  v50 = *(_QWORD *)(v156 + 16);
  if (v50)
  {
    v51 = 0;
    v52 = 32;
    while (*(_QWORD *)(v156 + v52) != v129)
    {
      ++v51;
      v52 += 16;
      if (v50 == v51)
        goto LABEL_33;
    }
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v37 = v154;
    swift_retain();
    swift_retain();
    specialized Array.remove(at:)(v51);
    v53 = v179;
  }
  else
  {
LABEL_33:
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v37 = v154;
    swift_retain();
    swift_retain();
    v53 = v49;
  }
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<UpdateScrollStateRequestKey>, (uint64_t)&type metadata for UpdateScrollStateRequestKey, (uint64_t)&protocol witness table for UpdateScrollStateRequestKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v91 = *(_QWORD *)(v53 + 16);
  LOBYTE(v55) = v157;
  if (v91)
  {
    v92 = 0;
    v93 = (_QWORD *)(v53 + 32);
    v54 = (uint64_t)v146;
    while (*v93 != v90)
    {
      ++v92;
      v93 += 2;
      if (v91 == v92)
        goto LABEL_37;
    }
    specialized Array.remove(at:)(v92);
  }
  else
  {
    v54 = (uint64_t)v146;
  }
LABEL_37:
  if (v150 != v48)
  {
    swift_retain();
    v56 = v149;
    specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v176, v48);
    swift_release();
    swift_retain();
    specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v176, 1);
    swift_release();
    swift_retain();
    specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v176, 0xFF00000000uLL, (uint64_t)&v158);
    v149 = v56;
    swift_release();
    v57 = v176;
    v58 = swift_retain();
    v59 = specialized find<A>(_:key:)(v58);
    if (!v59 || v48 != *(_DWORD *)(v59 + 72))
    {
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TypedElement<_GraphInputs.ContentScrollPositionAnchorKey>, (uint64_t)&type metadata for _GraphInputs.ContentScrollPositionAnchorKey, (uint64_t)&protocol witness table for _GraphInputs.ContentScrollPositionAnchorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
      *(_DWORD *)(swift_allocObject() + 72) = v48;
      *(SwiftUI::BloomFilter *)&v176 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for _GraphInputs.ContentScrollPositionAnchorKey, 0, v57);
    }
    swift_release();
    LOBYTE(v55) = v157;
    v54 = (uint64_t)v146;
  }
  v182[2] = v178;
  v182[3] = v179;
  v182[4] = v180;
  v183 = v181;
  v182[0] = v176;
  v182[1] = v177;
  outlined retain of _ViewInputs((uint64_t)v182);
  v60 = specialized static DynamicContainer.makeContainer<A>(adaptor:inputs:)((uint64_t)&v159, v143 | (v135 << 32), (uint64_t)partial apply for mapMutator #1 <A>(thunk:) in static Layout.makeDynamicView(root:inputs:properties:list:), v54, (uint64_t)v182);
  outlined release of _ViewInputs((uint64_t)v182);
  swift_release();
  v162 = v60;
  v61 = swift_beginAccess();
  if ((*(_BYTE *)(v37 + 20) & 1) == 0)
  {
    MEMORY[0x24BDAC7A8](v61);
    v62 = v136;
    v63 = v137;
    *(_QWORD *)&v117[-32] = v136;
    *(_QWORD *)&v117[-24] = v63;
    *(_QWORD *)&v117[-16] = &v162;
    v65 = type metadata accessor for DynamicLayoutComputer(0, v62, v63, v64);
    MEMORY[0x24BDAC7A8](v65);
    *(_QWORD *)&v117[-32] = v66;
    *(_QWORD *)&v117[-24] = partial apply for closure #1 in static Layout.makeDynamicView(root:inputs:properties:list:);
    *(_QWORD *)&v117[-16] = &v117[-48];
    v37 = v154;
    AGGraphMutateAttribute();
  }
  v67 = v150 != v48 || v21;
  if (((v67 | v153) & 1) != 0)
  {
    v143 = AGCreateWeakAttribute();
    v137 = AGCreateWeakAttribute();
    v136 = AGCreateWeakAttribute();
    v135 = AGCreateWeakAttribute();
    v128 = AGCreateWeakAttribute();
    v68 = v155;
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v69 = v149;
    v70 = specialized closure #1 in PropertyList.subscript.getter(v68);
    v120[1] = v69;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    if (v70 == v48)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v71 = v34;
      swift_release();
      swift_release();
      v149 = 0;
      v126 = 0;
    }
    else
    {
      v72 = AGCreateWeakAttribute();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v71 = v34;
      swift_release();
      swift_release();
      v149 = v72;
      v126 = HIDWORD(v72);
    }
    v121 = HIDWORD(v143);
    v122 = HIDWORD(v137);
    v123 = HIDWORD(v136);
    v124 = HIDWORD(v135);
    v125 = HIDWORD(v128);
    v73 = *(_QWORD *)(v159 + 16);
    v37 = v154;
    v74 = v71;
    v55 = v157;
    if (v73)
    {
      v75 = v159 + 48;
      do
      {
        if (*(_QWORD *)(v75 - 16) == v130)
          break;
        v75 += 24;
        --v73;
      }
      while (v73);
    }
    v76 = AGCreateWeakAttribute();
    v77 = v76;
    v78 = HIDWORD(v76);
    if (((v21 | v153) & 1) != 0)
    {
      _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Scrollable>, &lazy cache variable for type metadata for Scrollable, (uint64_t)&protocol descriptor for Scrollable, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v79 = swift_allocObject();
      *(_OWORD *)(v79 + 16) = xmmword_23527E860;
      *(_QWORD *)(v79 + 56) = &type metadata for DynamicLayoutScrollable;
      *(_QWORD *)(v79 + 64) = &protocol witness table for DynamicLayoutScrollable;
      v80 = (_DWORD *)swift_allocObject();
      *(_QWORD *)(v79 + 32) = v80;
      v81 = v121;
      v80[4] = v143;
      v80[5] = v81;
      v82 = v122;
      v80[6] = v137;
      v80[7] = v82;
      v80[8] = v136;
      v80[9] = v123;
      v80[10] = v135;
      v80[11] = v124;
      v80[12] = v128;
      v80[13] = v125;
      v80[14] = v149;
      v80[15] = v126;
      v80[16] = v77;
      v80[17] = v78;
      v163 = v79;
      _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, &lazy cache variable for type metadata for [Scrollable], &lazy cache variable for type metadata for Scrollable, (uint64_t)&protocol descriptor for Scrollable, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
      type metadata accessor for External<[Scrollable]>();
      lazy protocol witness table accessor for type External<[Scrollable]> and conformance External<A>();
      v55 = v157;
      v83 = Attribute.init<A>(body:value:flags:update:)();
      swift_bridgeObjectRelease();
      LOBYTE(v163) = 0;
      PreferencesOutputs.subscript.setter(v83, v130, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v84);
    }
    if (v150 != v48)
    {
      v167 = &type metadata for DynamicLayoutScrollable;
      v168 = &protocol witness table for DynamicLayoutScrollable;
      v85 = (_DWORD *)swift_allocObject();
      v163 = (unint64_t)v85;
      v86 = v121;
      v85[4] = v143;
      v85[5] = v86;
      v87 = v122;
      v85[6] = v137;
      v85[7] = v87;
      v85[8] = v136;
      v85[9] = v123;
      v85[10] = v135;
      v85[11] = v124;
      v85[12] = v128;
      v85[13] = v125;
      v85[14] = v149;
      v85[15] = v126;
      v85[16] = v77;
      v85[17] = v78;
      type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);
      _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, &lazy cache variable for type metadata for External<ScrollableCollection>, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection, (uint64_t)&protocol descriptor for ScrollableCollection, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BE09670]);
      lazy protocol witness table accessor for type External<ScrollableCollection> and conformance External<A>();
      v88 = Attribute.init<A>(body:value:flags:update:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v163);
      if (v16)
      {
        v89 = 32;
        while (*(_QWORD *)(v156 + v89) != v129)
        {
          v89 += 16;
          if (!--v16)
            goto LABEL_78;
        }
        v163 = __PAIR64__(v88, v127);
        protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
        type metadata accessor for (_:)();
        lazy protocol witness table accessor for type ScrollTargetRole.SetLayout and conformance ScrollTargetRole.SetLayout();
        swift_bridgeObjectRetain();
        v94 = Attribute.init<A>(body:value:flags:update:)();
        v95 = *(_QWORD *)(v159 + 16);
        v96 = v148;
        if (v95)
        {
          v97 = (_DWORD *)(v159 + 48);
          while (*((_QWORD *)v97 - 2) != v129)
          {
            v97 += 6;
            if (!--v95)
            {
              v96 = v148;
              goto LABEL_77;
            }
          }
          v96 = *v97;
        }
LABEL_77:
        v163 = __PAIR64__(v96, v94);
        protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
        type metadata accessor for [ScrollTargetRole.Role : [ScrollableCollection]]();
        type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for PreferenceTransform<ScrollTargetRole.ContentKey>, (uint64_t)&type metadata for ScrollTargetRole.ContentKey, (uint64_t)&protocol witness table for ScrollTargetRole.ContentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PreferenceTransform);
        lazy protocol witness table accessor for type PreferenceTransform<ScrollTargetRole.ContentKey> and conformance PreferenceTransform<A>(&lazy protocol witness table cache variable for type PreferenceTransform<ScrollTargetRole.ContentKey> and conformance PreferenceTransform<A>, &lazy cache variable for type metadata for PreferenceTransform<ScrollTargetRole.ContentKey>, (uint64_t)&type metadata for ScrollTargetRole.ContentKey, (uint64_t)&protocol witness table for ScrollTargetRole.ContentKey);
        v98 = Attribute.init<A>(body:value:flags:update:)();
        LOBYTE(v163) = 0;
        PreferencesOutputs.subscript.setter(v98, v129, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v99);
        swift_bridgeObjectRelease();
      }
LABEL_78:
      KeyPath = swift_getKeyPath();
      swift_beginAccess();
      v101 = v155;
      swift_retain_n();
      swift_retain_n();
      v102 = v152;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      v103 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
      swift_endAccess();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      v104 = swift_release();
      v164 = v141;
      v165 = v88;
      v163 = __PAIR64__(v147, v151);
      LODWORD(v166) = v103;
      v167 = (ValueMetadata *)v101;
      LODWORD(v168) = v142;
      v169 = (unint64_t)v74;
      v170 = __PAIR64__(v140, v141);
      v171 = v139;
      v172 = v157;
      v173 = v102;
      v174 = 0u;
      memset(v175, 0, sizeof(v175));
      MEMORY[0x24BDAC7A8](v104);
      *(_QWORD *)&v117[-16] = &v163;
      v55 = v105;
      v106 = swift_bridgeObjectRetain();
      specialized PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)(v106, v138, (void (*)(void))partial apply for implicit closure #9 in static Layout.makeDynamicView(root:inputs:properties:list:));
      swift_bridgeObjectRelease();
      outlined destroy of ScrollStateRequestTransform((uint64_t)&v163);
      v48 = v148;
      v37 = v154;
    }
    v107 = v156;
    if ((v153 & 1) != 0)
    {
      v108 = v155;
      swift_retain_n();
      swift_retain_n();
      v109 = v152;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      v110 = specialized closure #1 in PropertyList.subscript.getter(v108);
      v112 = v111;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_release_n();
      swift_release_n();
      v163 = v108;
      v164 = v142;
      v166 = v74;
      v167 = (ValueMetadata *)__PAIR64__(v140, v141);
      v168 = (_UNKNOWN **)__PAIR64__(v55, v139);
      v169 = v109;
      v170 = v107;
      v171 = v138;
      v172 = v147;
      v173 = __PAIR64__(v134, v151);
      *(_QWORD *)&v174 = __PAIR64__(v133, v145);
      DWORD2(v174) = v132;
      (*(void (**)(unint64_t *, uint64_t *, uint64_t, uint64_t))(v112 + 8))(&v163, &v159, v110, v112);
    }
  }
  if ((v55 & 2) != 0)
  {
    if ((*(_BYTE *)(v37 + 20) & 1) == 0)
      v48 = *v144;
    swift_release();
    v113 = v160 | 0x80;
    v114 = v48;
  }
  else
  {
    swift_release();
    v113 = v160;
    v114 = v161;
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  v116 = v131;
  *v131 = v159;
  *((_DWORD *)v116 + 2) = v113;
  *((_DWORD *)v116 + 3) = v114;
  return result;
}

uint64_t mapMutator #1 <A>(thunk:) in static Layout.makeDynamicView(root:inputs:properties:list:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = swift_beginAccess();
  if ((*(_BYTE *)(a3 + 20) & 1) == 0)
  {
    MEMORY[0x24BDAC7A8](result);
    v10 = type metadata accessor for DynamicLayoutComputer(0, a4, a5, v9);
    MEMORY[0x24BDAC7A8](v10);
    return AGGraphMutateAttribute();
  }
  return result;
}

uint64_t implicit closure #9 in static Layout.makeDynamicView(root:inputs:properties:list:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[16];

  v3[15] = *MEMORY[0x24BDAC8D0];
  outlined init with copy of ScrollStateRequestTransform(a1, (uint64_t)v3);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for (_:)();
  lazy protocol witness table accessor for type ScrollStateRequestTransform and conformance ScrollStateRequestTransform();
  v1 = Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of ScrollStateRequestTransform((uint64_t)v3);
  return v1;
}

uint64_t DynamicLayoutViewAdaptor.updatedItems()@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value;
  char v3;
  char v4;
  uint64_t result;
  __int128 v6[2];

  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  Value = AGGraphGetValue();
  v4 = v3;
  outlined init with copy of AnyTrackedValue(Value, (uint64_t)v6);
  if ((v4 & 1) != 0)
    return outlined init with take of ScrollStateRequest(v6, a1);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t closure #1 in DynamicLayoutViewAdaptor.foreachItem(items:_:)(uint64_t a1, void (*a2)(_QWORD *))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  _QWORD v10[2];
  _QWORD v11[6];
  int v12;
  char v13;

  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 16);
  outlined init with copy of AnyTrackedValue(a1 + 32, (uint64_t)v11);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_DWORD *)(a1 + 80);
  v8 = *(_BYTE *)(a1 + 84);
  v10[0] = v5;
  v10[1] = v4;
  v11[5] = v6;
  v12 = v7;
  v13 = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  a2(v10);
  outlined destroy of DynamicViewListItem((uint64_t)v10);
  return 1;
}

uint64_t DynamicLayoutViewAdaptor.makeItemLayout(item:uniqueId:inputs:containerInfo:containerInputs:)(uint64_t *a1, _QWORD *a2, int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t *Value;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  double v40;
  uint64_t v41;
  char isEscapingClosureAtFileLocation;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v51[4];
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  char v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  _QWORD v85[2];
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _DWORD v90[2];

  v67 = a6;
  v68 = a5;
  v62 = a1;
  v13 = *(_QWORD *)a4;
  v73 = *(_DWORD *)(a4 + 8);
  v14 = *(_QWORD *)(a4 + 16);
  v65 = a8;
  v66 = HIDWORD(a8);
  v15 = *(_QWORD *)(a4 + 24);
  v16 = *(_QWORD *)(a4 + 32);
  v17 = *(_QWORD *)(a4 + 40);
  v18 = *(_QWORD *)(a4 + 48);
  v19 = *(_QWORD *)(a4 + 56);
  v20 = *(_QWORD *)(a4 + 64);
  v21 = *(_QWORD *)(a4 + 72);
  v69 = *(_DWORD *)(a4 + 80);
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v22 = specialized find<A>(_:key:)(v13);
  if (v22)
    LOBYTE(v23) = *(_BYTE *)(v22 + 72) & 1;
  else
    LOBYTE(v23) = 0;
  v64 = a10;
  v63 = a9;
  v70 = v18;
  swift_bridgeObjectRelease();
  v71 = v17;
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  v24 = a2[7];
  swift_bridgeObjectRetain_n();
  v25 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(0, v24);
  swift_bridgeObjectRelease();
  v72 = v14;
  if ((v25 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    v24 = 0;
    goto LABEL_18;
  }
  v26 = one-time initialization token for opacity;
  swift_bridgeObjectRetain();
  if (v26 != -1)
    goto LABEL_30;
  while (1)
  {
    v27 = swift_retain();
    v28 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(v27, v24);
    swift_bridgeObjectRelease();
    v29 = swift_release();
    if ((v23 & 1) != 0)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 96))(v29);
      swift_bridgeObjectRelease();
      if ((v30 & 1) != 0)
      {
        swift_release();
        v24 = 0;
        goto LABEL_18;
      }
    }
    v31 = a7;
    swift_retain();
    AGGraphClearUpdate();
    swift_beginAccess();
    Value = (uint64_t *)AGGraphGetValue();
    v33 = *Value;
    if (Value[1])
    {
      swift_retain_n();
      swift_retain_n();
      v34 = specialized PropertyList.Tracker.value<A>(_:for:)(v33);
      swift_release_n();
    }
    else
    {
      v35 = swift_retain_n();
      v34 = specialized closure #1 in PropertyList.subscript.getter(v35);
      swift_release();
    }
    swift_release_n();
    v36 = AGGraphSetUpdate();
    v24 = v28;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 104))(v36) & 1) != 0)
    {
      v24 = v28;
      if ((v34 & 1) != 0)
      {
        v24 = static AnyTransition.opacity;
        swift_retain();
        swift_release();
      }
    }
    swift_release();
    a7 = v31;
LABEL_18:
    v90[0] = a3;
    v90[1] = 0;
    v37 = a2 + 2;
    outlined init with copy of AnyTrackedValue((uint64_t)(a2 + 2), (uint64_t)&v87);
    a3 = v88;
    v38 = v89;
    v39 = __swift_project_boxed_opaque_existential_1(&v87, v88);
    v61 = (uint64_t)&v61;
    MEMORY[0x24BDAC7A8](v39);
    v51[2] = v67;
    v51[3] = a7;
    v52 = v68;
    v53 = v65;
    v54 = v66;
    v55 = v63;
    v56 = v64;
    v57 = v90;
    v58 = v24;
    v59 = a2;
    v60 = (char)v23;
    a7 = swift_allocObject();
    v23 = a2;
    a2 = v51;
    *(_QWORD *)(a7 + 16) = partial apply for closure #2 in DynamicLayoutViewAdaptor.makeItemLayout(item:uniqueId:inputs:containerInfo:containerInputs:);
    *(_QWORD *)(a7 + 24) = v51;
    v86 = 0;
    v74 = v13;
    v75 = v73;
    v76 = v72;
    v77 = v15;
    v78 = v16;
    v79 = v71;
    v80 = v70;
    v81 = v19;
    v82 = v20;
    v83 = v21;
    v84 = v69;
    v40 = MEMORY[0x24BDAC7A8](a7);
    (*(void (**)(_QWORD *, uint64_t *, uint64_t *, _QWORD, uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t), double))(v38 + 16))(v85, &v86, &v74, 0, partial apply for closure #1 in closure #1 in _ViewList_Elements.makeAllElements(inputs:indirectMap:body:), v40);
    v13 = v85[0];
    v41 = v85[1];
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0)
      break;
    __break(1u);
LABEL_30:
    swift_once();
  }
  if (v13)
    v43 = v13;
  else
    v43 = MEMORY[0x24BEE4AF8];
  if (v13)
    v44 = v41;
  else
    v44 = 0;
  if (v13)
    v45 = HIDWORD(v41);
  else
    v45 = *MEMORY[0x24BE096C0];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v87);
  v46 = v62;
  *v62 = v43;
  *((_DWORD *)v46 + 2) = v44;
  *((_DWORD *)v46 + 3) = v45;
  v48 = v23[5];
  v47 = v23[6];
  __swift_project_boxed_opaque_existential_1(v37, v48);
  v49 = (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 32))(v48, v47);
  swift_release();
  return v49;
}

uint64_t closure #2 in DynamicLayoutViewAdaptor.makeItemLayout(item:uniqueId:inputs:containerInfo:containerInputs:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t *__return_ptr, unint64_t *)@<X1>, uint64_t a3@<X2>, void (*a4)(unint64_t *)@<X3>, unsigned int a5@<W5>, uint64_t a6@<X6>, void (*a7)(uint64_t (*)(), double)@<X7>, _QWORD *a8@<X8>, uint64_t a9, unsigned int *a10, uint64_t a11, uint64_t a12, char a13)
{
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t (*v25)(unint64_t *, void *, _UNKNOWN **);
  uint64_t result;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  unsigned int v32;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unint64_t v47;
  _QWORD v48[2];
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  int v62;
  void (*v63)(uint64_t *__return_ptr, unint64_t *);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  unint64_t v68;
  int v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  int v76;
  uint64_t v77;

  v32 = HIDWORD(a6);
  v77 = *MEMORY[0x24BDAC8D0];
  v13 = *(_DWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v39 = *(_QWORD *)(a1 + 40);
  v40 = *(_QWORD *)(a1 + 48);
  v15 = *(_DWORD *)(a1 + 80);
  v68 = *(_QWORD *)a1;
  v69 = v13;
  v71 = *(_OWORD *)(a1 + 24);
  v41 = BYTE12(v71);
  v72 = v39;
  v73 = v40;
  v74 = *(_OWORD *)(a1 + 56);
  v75 = *(_QWORD *)(a1 + 72);
  v76 = v15;
  swift_beginAccess();
  v16 = *(_DWORD *)(v14 + 16);
  v17 = *(_QWORD *)(v14 + 24);
  v37 = *(_OWORD *)(v14 + 48);
  v38 = *(_OWORD *)(v14 + 32);
  v19 = *(_QWORD *)(v14 + 64);
  v18 = *(_QWORD *)(v14 + 72);
  v20 = *(_BYTE *)(v14 + 80);
  v21 = *(_BYTE *)(v14 + 81);
  v22 = *(_QWORD *)(v14 + 88);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
  v23 = swift_allocObject();
  *(_DWORD *)(v23 + 16) = v16;
  *(_QWORD *)(v23 + 24) = v17;
  *(_OWORD *)(v23 + 32) = v38;
  *(_OWORD *)(v23 + 48) = v37;
  *(_QWORD *)(v23 + 64) = v19;
  *(_QWORD *)(v23 + 72) = v18;
  *(_BYTE *)(v23 + 80) = v20;
  *(_BYTE *)(v23 + 81) = v21;
  *(_QWORD *)(v23 + 88) = v22;
  swift_retain();
  v70 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  a4(&v68);
  if ((v41 & 0x20) != 0)
  {
    if (*MEMORY[0x24BE096C0] == v32)
      __break(1u);
    v47 = __PAIR64__(v32, a5);
    v48[0] = *(_QWORD *)a10;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    lazy protocol witness table accessor for type DynamicLayoutViewChildGeometry and conformance DynamicLayoutViewChildGeometry();
    Attribute.init<A>(body:value:flags:update:)();
    LODWORD(v75) = AGGraphCreateOffsetAttribute2();
    DWORD2(v74) = AGGraphCreateOffsetAttribute2();
    *((int8x8_t *)&v71 + 1) = vorr_s8(*(int8x8_t *)((char *)&v71 + 8), (int8x8_t)0x200000018);
  }
  if (!a11)
  {
    v47 = v68;
    LODWORD(v48[0]) = v69;
    v48[1] = v70;
    v49 = v71;
    v50 = v72;
    v51 = v73;
    v52 = v74;
    v53 = v75;
    LODWORD(v54) = v76;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a2(&v44, &v47);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v30 = swift_release();
    v27 = v44;
    v28 = v45;
    v29 = v46;
    goto LABEL_8;
  }
  v24 = *a10;
  outlined init with copy of DynamicViewListItem(a12, (uint64_t)v48);
  v47 = __PAIR64__(v24, a5);
  v54 = v68;
  v55 = v69;
  v56 = v70;
  v57 = v71;
  v58 = v72;
  v59 = v73;
  v60 = v74;
  v61 = v75;
  v62 = v76;
  v63 = a2;
  v64 = a3;
  v65 = 0;
  v66 = 0;
  v67 = a13 & 1;
  v25 = *(uint64_t (**)(unint64_t *, void *, _UNKNOWN **))(*(_QWORD *)a11 + 80);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  result = v25(&v47, &unk_2506393F8, &protocol witness table for DynamicLayoutViewAdaptor.MakeTransition);
  v27 = v65;
  if (v65)
  {
    v28 = v66;
    v29 = HIDWORD(v66);
    swift_bridgeObjectRetain();
    outlined destroy of DynamicLayoutViewAdaptor.MakeTransition((uint64_t)&v47);
    v30 = swift_release();
LABEL_8:
    v31 = MEMORY[0x24BDAC7A8](v30);
    a7(partial apply for closure #1 in closure #2 in DynamicLayoutViewAdaptor.makeItemLayout(item:uniqueId:inputs:containerInfo:containerInputs:), v31);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    ++a10[1];
    *a8 = v27;
    a8[1] = v28 | (unint64_t)(v29 << 32);
    return result;
  }
  __break(1u);
  return result;
}

void closure #1 in DynamicLayoutViewAdaptor.removeItemLayout(uniqueId:itemLayout:)(int a1, Swift::UInt32 uniqueId)
{
  DynamicLayoutMap.remove(uniqueId:)(uniqueId);
}

uint64_t DynamicLayoutViewAdaptor.MakeTransition.visit<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  double v51[3];
  uint64_t v52;
  int v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  int v60;
  uint64_t v61;

  v5 = v4;
  v61 = *MEMORY[0x24BDAC8D0];
  v9 = type metadata accessor for ViewListTransition(0, a2, a3, a4);
  v48 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v47 = (char *)&v45 - v10;
  v11 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = a3;
  v16 = type metadata accessor for TransitionHelper(0, a2, a3, v15);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22.n128_f64[0] = MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v45 - v23;
  if (*((_BYTE *)v5 + 76))
    v25 = *MEMORY[0x24BE096C0];
  else
    v25 = *((_DWORD *)v5 + 18);
  v26 = *v5;
  v27 = a1;
  v28 = v21;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16))(v14, v27, a2, v22);
  *(_DWORD *)v24 = v25;
  *(_QWORD *)(v24 + 4) = v26;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v24[*(int *)(v28 + 44)], v14, a2);
  v24[*(int *)(v28 + 48)] = 1;
  if ((v5[25] & 1) != 0)
  {
    DynamicLayoutViewAdaptor.MakeTransition.makeArchivedTransition<A>(helper:)((uint64_t)v24, a2, v49, v29);
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v24, v28);
  }
  else
  {
    v46 = v17;
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v19, v24, v28);
    v31 = (uint64_t)v47;
    v32 = (*(uint64_t (**)(char *, char *, uint64_t))(v17 + 32))(v47, v19, v28);
    MEMORY[0x24BDAC7A8](v32);
    v45 = v28;
    *(&v45 - 4) = swift_getAssociatedTypeWitness();
    *(&v45 - 3) = v9;
    *(&v45 - 2) = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewListTransition<A>, v9);
    v33 = type metadata accessor for Attribute();
    _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v31, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)(&v45 - 6), v9, MEMORY[0x24BEE4078], v33, MEMORY[0x24BEE40A8], v34);
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v31, v9);
    _GraphValue.init(_:)(v52, &v50);
    v35 = *((_DWORD *)v5 + 22);
    v36 = v5[12];
    v37 = v5[15];
    v38 = v5[16];
    v39 = *((_DWORD *)v5 + 40);
    v52 = v5[10];
    v53 = v35;
    v54 = v36;
    v55 = *(_OWORD *)(v5 + 13);
    v56 = v37;
    v57 = v38;
    v58 = *(_OWORD *)(v5 + 17);
    v59 = v5[19];
    v60 = v39;
    v40 = v5[21];
    v41 = v5[22];
    v42 = swift_allocObject();
    *(_QWORD *)(v42 + 16) = v40;
    *(_QWORD *)(v42 + 24) = v41;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    static Transition.makeView(view:inputs:body:)(&v50, &v52, (uint64_t)partial apply for closure #1 in DynamicLayoutViewAdaptor.MakeTransition.visit<A>(_:), v42, a2, v51);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v24, v45);
    v43 = v51[0];
    v44 = v51[1];
    result = swift_bridgeObjectRelease();
    *((double *)v5 + 23) = v43;
    *((double *)v5 + 24) = v44;
  }
  return result;
}

uint64_t DynamicLayoutViewAdaptor.MakeTransition.makeArchivedTransition<A>(helper:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  __int16 v19;
  _DWORD *v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(__int128 *__return_ptr, __int128 *);
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t result;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  _QWORD v43[2];
  _OWORD v44[3];
  _BYTE v45[21];
  _BYTE v46[72];
  __int128 v47;
  _OWORD v48[2];
  _OWORD v49[2];
  int v50;
  __int128 v51;
  _BYTE v52[32];
  _BYTE v53[32];
  int v54;
  uint64_t v55;

  v5 = v4;
  v55 = *MEMORY[0x24BDAC8D0];
  v9 = type metadata accessor for TransitionHelper(0, a2, a3, a4);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v38 - v12;
  if (Transition.hasContentTransition.getter(a2, a3))
  {
    v40 = a1;
    v41 = v13;
    v42 = a3;
    v14 = *(_DWORD *)(v4 + 88);
    v15 = *(_QWORD *)(v4 + 96);
    v17 = *(_QWORD *)(v5 + 120);
    v16 = *(_QWORD *)(v5 + 128);
    v18 = *(_DWORD *)(v5 + 160);
    *(_QWORD *)&v47 = *(_QWORD *)(v5 + 80);
    DWORD2(v47) = v14;
    *(_OWORD *)((char *)v48 + 8) = *(_OWORD *)(v5 + 104);
    *(_QWORD *)&v48[0] = v15;
    *((_QWORD *)&v48[1] + 1) = v17;
    *(_QWORD *)&v49[0] = v16;
    *(_OWORD *)((char *)v49 + 8) = *(_OWORD *)(v5 + 136);
    *((_QWORD *)&v49[1] + 1) = *(_QWORD *)(v5 + 152);
    v50 = v18;
    v19 = WORD2(v48[1]);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((v19 & 0x100) != 0)
    {
      AGTypeGetSignature();
      specialized _GraphInputs.pushScope<A>(id:)(v51, *((uint64_t *)&v51 + 1), (_QWORD *)*(unsigned int *)v52);
    }
    v20 = (_DWORD *)(v5 + 72);
    if (*(_BYTE *)(v5 + 76))
      v20 = (_DWORD *)MEMORY[0x24BE096C0];
    LODWORD(v51) = *v20;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    lazy protocol witness table accessor for type ViewListArchivedAnimation and conformance ViewListArchivedAnimation();
    v39 = Attribute.init<A>(body:value:flags:update:)();
    *(_OWORD *)&v52[16] = v48[1];
    *(_OWORD *)v53 = v49[0];
    *(_OWORD *)&v53[16] = v49[1];
    v54 = v50;
    v51 = v47;
    *(_OWORD *)v52 = v48[0];
    outlined init with copy of DynamicViewListItem(v5 + 8, (uint64_t)v46);
    v21 = *(_QWORD *)(v5 + 176);
    v38 = *(_QWORD *)(v5 + 168);
    outlined init with copy of DynamicViewListItem((uint64_t)v46, (uint64_t)v44);
    v22 = v41;
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v41, v40, v9);
    v23 = (*(unsigned __int8 *)(v10 + 80) + 101) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v24 = swift_allocObject();
    v25 = v42;
    *(_QWORD *)(v24 + 16) = a2;
    *(_QWORD *)(v24 + 24) = v25;
    v26 = *(_OWORD *)v45;
    *(_OWORD *)(v24 + 64) = v44[2];
    *(_OWORD *)(v24 + 80) = v26;
    *(_QWORD *)(v24 + 93) = *(_QWORD *)&v45[13];
    v27 = v44[1];
    *(_OWORD *)(v24 + 32) = v44[0];
    *(_OWORD *)(v24 + 48) = v27;
    (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v24 + v23, v22, v9);
    v28 = (_QWORD *)(v24 + ((v11 + v23 + 7) & 0xFFFFFFFFFFFFFFF8));
    *v28 = v38;
    v28[1] = v21;
    outlined retain of _ViewInputs((uint64_t)&v51);
    swift_retain();
    specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(v39, (uint64_t)&v51, (void (*)(_QWORD *__return_ptr, uint64_t, __int128 *))partial apply for closure #1 in DynamicLayoutViewAdaptor.MakeTransition.makeArchivedTransition<A>(helper:), v43);
    swift_release();
    outlined destroy of DynamicViewListItem((uint64_t)v46);
    outlined release of _ViewInputs((uint64_t)&v51);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v29 = v43[0];
    v30 = v43[1];
  }
  else
  {
    v31 = *(void (**)(__int128 *__return_ptr, __int128 *))(v4 + 168);
    v32 = *(_DWORD *)(v4 + 88);
    v33 = *(_QWORD *)(v4 + 96);
    v34 = *(_QWORD *)(v4 + 120);
    v35 = *(_QWORD *)(v4 + 128);
    v36 = *(_DWORD *)(v4 + 160);
    *(_QWORD *)&v51 = *(_QWORD *)(v4 + 80);
    DWORD2(v51) = v32;
    *(_OWORD *)&v52[8] = *(_OWORD *)(v4 + 104);
    *(_QWORD *)v52 = v33;
    *(_QWORD *)&v52[24] = v34;
    *(_QWORD *)v53 = v35;
    *(_OWORD *)&v53[8] = *(_OWORD *)(v4 + 136);
    *(_QWORD *)&v53[24] = *(_QWORD *)(v4 + 152);
    v54 = v36;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v31(&v47, &v51);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v30 = *((_QWORD *)&v47 + 1);
    v29 = v47;
  }
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v5 + 184) = v29;
  *(_QWORD *)(v5 + 192) = v30;
  return result;
}

uint64_t closure #1 in DynamicLayoutViewAdaptor.MakeTransition.visit<A>(_:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t *))
{
  int v3;
  uint64_t v4;
  int v5;
  __int128 v6;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  int v15;

  v3 = *((_DWORD *)a2 + 2);
  v4 = a2[2];
  v5 = *((_DWORD *)a2 + 20);
  v8 = *a2;
  v9 = v3;
  v10 = v4;
  v6 = *(_OWORD *)(a2 + 5);
  v11 = *(_OWORD *)(a2 + 3);
  v12 = v6;
  v13 = *(_OWORD *)(a2 + 7);
  v14 = a2[9];
  v15 = v5;
  return a3(&v8);
}

uint64_t closure #1 in DynamicLayoutViewAdaptor.MakeTransition.makeArchivedTransition<A>(helper:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, void (*a4)(uint64_t *__return_ptr, __int128 *)@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _QWORD *a8@<X8>)
{
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::UInt value;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  void (*v48)(uint64_t *__return_ptr, __int128 *);
  uint64_t v49;
  __int128 v50;
  unsigned int v51;
  Swift::UInt v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;

  v49 = a5;
  v48 = a4;
  v41 = a3;
  v47 = a8;
  v40 = type metadata accessor for TransitionHelper(0, a6, a7, a3);
  v39 = *(_QWORD *)(v40 - 8);
  MEMORY[0x24BDAC7A8](v40);
  v13 = (char *)&v39 - v12;
  v44 = a6;
  v45 = a7;
  v15 = type metadata accessor for ViewListContentTransition(0, a6, a7, v14);
  v46 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v39 - v19;
  v21 = *(_QWORD *)a1;
  v43 = *(_DWORD *)(a1 + 8);
  v22 = *(_QWORD *)(a1 + 16);
  v23 = *(_QWORD *)(a1 + 24);
  v24 = *(_QWORD *)(a1 + 32);
  v25 = *(_QWORD *)(a1 + 40);
  v26 = *(_QWORD *)(a1 + 48);
  v27 = *(_QWORD *)(a1 + 56);
  v28 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)&v29 = *(_QWORD *)(a1 + 72);
  v50 = v29;
  v42 = *(_DWORD *)(a1 + 80);
  v30 = *(_QWORD *)(a2 + 56);
  v31 = one-time initialization token for defaultValue;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v31 != -1)
    swift_once();
  v32 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(static _DisplayList_StableIdentityScope.defaultValue, v30);
  swift_bridgeObjectRelease();
  if (AGWeakAttributeGetAttribute() == *MEMORY[0x24BE096C0])
  {
    value = v21;
  }
  else
  {
    v34 = swift_retain();
    if (!specialized find<A>(_:key:)(v34) || (value = v21, (static WeakAttribute.== infix(_:_:)() & 1) == 0))
    {
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TypedElement<_DisplayList_StableIdentityScope>, (uint64_t)&type metadata for _DisplayList_StableIdentityScope, (uint64_t)&protocol witness table for _DisplayList_StableIdentityScope, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
      *(_QWORD *)(swift_allocObject() + 72) = v32;
      value = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for _DisplayList_StableIdentityScope, 0, v21).value;
    }
    swift_release();
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v13, v41, v40);
  swift_beginAccess();
  ViewListContentTransition.init(helper:size:environment:)((uint64_t)v13, v50, *(_DWORD *)(v22 + 16), v44, v45, (uint64_t)v20);
  v35 = v46;
  (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v17, v20, v15);
  v36 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewListContentTransition<A>, v15);
  _GraphValue.init<A>(_:)((uint64_t)v17, (uint64_t)&type metadata for ContentTransitionEffect, v15, v36, &v51);
  v37 = v51;
  v52 = value;
  v53 = v43;
  v54 = v22;
  v55 = v23;
  v56 = v24;
  v57 = v25;
  v58 = v26;
  v59 = v27;
  v60 = v28;
  v61 = v50;
  v62 = v42;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(v37, (uint64_t)&v52, v48, v47);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v20, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t ViewListContentTransition.init(helper:size:environment:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v12 = type metadata accessor for TransitionHelper(0, a4, a5, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a6, a1, v12);
  result = type metadata accessor for ViewListContentTransition(0, a4, a5, v13);
  *(_DWORD *)(a6 + *(int *)(result + 36)) = a2;
  *(_DWORD *)(a6 + *(int *)(result + 40)) = a3;
  return result;
}

void TransitionHelper.list.getter(uint64_t a1@<X8>)
{
  _DWORD *v1;
  uint64_t Value;

  if (*v1 == *MEMORY[0x24BE096C0])
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  else
  {
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
    Value = AGGraphGetValue();
    outlined init with copy of AnyTrackedValue(Value, a1);
  }
}

uint64_t TransitionHelper.info.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value;
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;

  Value = AGGraphGetValue();
  v3 = *(_QWORD *)(Value + 8);
  v4 = *(_QWORD *)(Value + 32);
  v5 = *(_BYTE *)(Value + 40);
  v6 = *(_DWORD *)(Value + 44);
  *(_QWORD *)a1 = *(_QWORD *)Value;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(Value + 16);
  *(_QWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 40) = v5;
  *(_DWORD *)(a1 + 44) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for DynamicContainerAdaptor.foreachItem(items:_:) in conformance DynamicLayoutViewAdaptor(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v3;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  char v11;
  uint64_t v12;

  v6 = *v3;
  v12 = 0;
  v7 = a1[3];
  v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  v10[2] = a2;
  v10[3] = a3;
  v11 = 0;
  return ViewList.applySublists(from:list:to:)((uint64_t)&v12, v6, (uint64_t)partial apply for closure #1 in DynamicLayoutViewAdaptor.foreachItem(items:_:), (uint64_t)v10, v7, v8);
}

uint64_t protocol witness for DynamicContainerAdaptor.makeItemLayout(item:uniqueId:inputs:containerInfo:containerInputs:) in conformance DynamicLayoutViewAdaptor(uint64_t *a1, uint64_t *a2, _QWORD *a3, int a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t result;

  result = DynamicLayoutViewAdaptor.makeItemLayout(item:uniqueId:inputs:containerInfo:containerInputs:)(a1, a3, a4, a5, a6, a7, a8, *(_QWORD *)v8, *(_QWORD *)(v8 + 8), *(_QWORD *)(v8 + 16));
  *a2 = result;
  return result;
}

uint64_t protocol witness for DynamicContainerAdaptor.removeItemLayout(uniqueId:itemLayout:) in conformance DynamicLayoutViewAdaptor(int a1)
{
  uint64_t v1;
  uint64_t (*v2)(void (*)(), _DWORD *);
  _DWORD v4[8];

  v2 = *(uint64_t (**)(void (*)(), _DWORD *))(v1 + 8);
  v4[4] = a1;
  return v2(_s7SwiftUI24DynamicLayoutViewAdaptorV010removeItemD08uniqueId04itemD0ys6UInt32V_AC0hD0VtFyAA0cD3MapVzXEfU_TA_0, v4);
}

uint64_t TransitionHelper.update()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];
  uint64_t v27;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  BOOL v31;

  v2 = v1;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v26 - v7;
  v31 = 0;
  TransitionHelper.info.getter((uint64_t)v28);
  v9 = v28[1];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v9 + 16))
  {
    v10 = specialized __RawDictionaryStorage.find<A>(_:)(*(_DWORD *)(v2 + 8));
    if ((v11 & 1) != 0)
    {
      v12 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v10);
      swift_bridgeObjectRelease();
      TransitionHelper.info.getter((uint64_t)v28);
      v13 = v28[0];
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if ((v13 & 0xC000000000000001) == 0)
      {
        if ((v12 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (v12 < *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          v15 = *(_QWORD *)(v13 + 8 * v12 + 32);
          swift_retain();
          goto LABEL_7;
        }
        __break(1u);
        return result;
      }
      v15 = MEMORY[0x23B7C6D9C](v12, v13);
LABEL_7:
      swift_bridgeObjectRelease();
      swift_beginAccess();
      v16 = *(unsigned __int8 *)(v15 + 84);
      swift_release();
      if (v16 != 3)
      {
        v17 = *(int *)(a1 + 48);
        v31 = *(unsigned __int8 *)(v2 + v17) != v16;
        *(_BYTE *)(v2 + v17) = v16;
      }
      goto LABEL_10;
    }
  }
  swift_bridgeObjectRelease();
LABEL_10:
  if (*(_BYTE *)(v2 + *(int *)(a1 + 48)) != 2)
  {
    TransitionHelper.list.getter((uint64_t)v28);
    v18 = v29;
    if (v29)
    {
      v19 = v30;
      __swift_project_boxed_opaque_existential_1(v28, v29);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v19 + 40))(&v27, v18, v19);
      v20 = v27;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
    }
    else
    {
      outlined destroy of ViewList?((uint64_t)v28);
      v20 = MEMORY[0x24BEE4AF8];
    }
    v21 = one-time initialization token for opacity;
    swift_bridgeObjectRetain();
    if (v21 != -1)
      swift_once();
    v22 = swift_retain();
    specialized ViewTraitCollection.value<A>(for:defaultValue:)(v22, v20);
    swift_bridgeObjectRelease_n();
    swift_release();
    v23 = *(_QWORD *)(a1 + 24);
    v24 = AnyTransition.base<A>(as:)(v4, v23, (uint64_t)v8);
    MEMORY[0x24BDAC7A8](v24);
    v26[-4] = v4;
    v26[-3] = v23;
    v26[-2] = v2;
    v26[-1] = &v31;
    _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in TransitionHelper.update(), (uint64_t)&v26[-6], MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, v25, (uint64_t)v28);
    swift_release();
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
  }
  return v31;
}

uint64_t ViewListTransition.updateValue()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v8 = (char *)v16 - v7;
  v10 = type metadata accessor for TransitionHelper(0, v4, v3, v9);
  if ((TransitionHelper.update()(v10) & 1) != 0 || (result = AGGraphGetOutputValue()) == 0)
  {
    v12 = PlaceholderContentView.init()(v4);
    v13 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 24))(v12, *(unsigned __int8 *)(v1 + *(int *)(v10 + 48)), v4, v3);
    v14 = MEMORY[0x24BDAC7A8](v13);
    v16[-2] = a1;
    v16[-1] = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewListTransition<A>, a1, v14);
    _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v8, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)&v16[-4], AssociatedTypeWitness, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v15);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
  }
  return result;
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance ViewListTransition<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a1, 1, 1, AssociatedTypeWitness);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ViewListTransition<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewListTransition<A>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t ViewListArchivedAnimation.value.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  __int128 v5;
  char v6;
  uint64_t Value;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;

  if (*MEMORY[0x24BE096C0] == (_DWORD)result)
  {
    v3 = 0;
    v4 = 0;
    v5 = 0uLL;
    v6 = 1;
  }
  else
  {
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
    Value = AGGraphGetValue();
    outlined init with copy of AnyTrackedValue(Value, (uint64_t)v15);
    v8 = v16;
    v9 = v17;
    __swift_project_boxed_opaque_existential_1(v15, v16);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v9 + 40))(&v14, v8, v9);
    v6 = 1;
    specialized ViewTraitCollection.value<A>(for:defaultValue:)(1, 0, 0, 0, v14, (uint64_t)&v11);
    swift_bridgeObjectRelease();
    v10 = v11;
    v3 = v12;
    v4 = v13;
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    v5 = v10;
    if ((_QWORD)v10 == 1)
    {
      v3 = 0;
      v4 = 0;
      v5 = 0uLL;
    }
    else
    {
      v6 = 0;
    }
  }
  *(_OWORD *)a2 = v5;
  *(_QWORD *)(a2 + 16) = v3;
  *(_DWORD *)(a2 + 24) = v4;
  *(_BYTE *)(a2 + 28) = v6;
  return result;
}

uint64_t ViewListContentTransition.environment.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;

  Value = (uint64_t *)AGGraphGetValue();
  v4 = *Value;
  v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();
  return swift_retain();
}

void protocol witness for _RendererEffect.effectValue(size:) in conformance ViewListArchivedAnimation.Effect(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  char v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((*((_BYTE *)v1 + 28) & 1) != 0)
  {
    v3 = 0;
    v4 = 19;
  }
  else
  {
    v5 = *((_DWORD *)v1 + 6);
    v7 = v1[1];
    v6 = v1[2];
    v8 = *v1;
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v7;
    *(_QWORD *)(v3 + 24) = v6;
    *(_DWORD *)(v3 + 32) = v5;
    *(_BYTE *)(v3 + 36) = 0;
    *(_QWORD *)(v3 + 40) = v8;
    swift_retain();
    v4 = 18;
  }
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = v4;
}

void protocol witness for static Rule.initialValue.getter in conformance ViewListArchivedAnimation(_QWORD *a1@<X8>)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 1;
  *(_QWORD *)((char *)a1 + 21) = 0;
}

uint64_t protocol witness for Rule.value.getter in conformance ViewListArchivedAnimation@<X0>(uint64_t a1@<X8>)
{
  unsigned int *v1;

  return ViewListArchivedAnimation.value.getter(*v1, a1);
}

uint64_t ViewListContentTransition.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  double *Value;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned __int8 v28;
  char v29;
  char v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = type metadata accessor for TransitionHelper(0, v4, v5, a4);
  if ((TransitionHelper.update()(v6) & 1) != 0 || (result = AGGraphGetOutputValue()) == 0)
  {
    ViewListContentTransition.environment.getter(&v22);
    v8 = v22;
    v21 = v5;
    if (v23)
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v8, (uint64_t)&v26);
      swift_release_n();
      swift_release_n();
      v9 = v30;
      v10 = v26;
      v11 = v27 | ((unint64_t)v28 << 32);
      v12 = v29;
      LOBYTE(v13) = v31;
    }
    else
    {
      v14 = swift_retain_n();
      v15 = specialized find<A>(_:key:)(v14);
      if (v15)
      {
        v20 = *(_BYTE *)(v15 + 87);
        v13 = *(_DWORD *)(v15 + 96);
        v16 = *(_QWORD *)(v15 + 72);
        v11 = *(unsigned int *)(v15 + 80) | ((unint64_t)*(unsigned __int8 *)(v15 + 84) << 32);
        v12 = *(_BYTE *)(v15 + 85);
        outlined copy of ContentTransition.Storage(v16, v11, v12);
        swift_retain();
      }
      else
      {
        v12 = 0;
        v20 = 0;
        LOBYTE(v13) = 0;
        v11 = 0x302000000;
        v16 = 0x8000000000;
      }
      swift_release_n();
      v10 = v16;
      v9 = v20;
    }
    LOBYTE(v22) = v9;
    v17 = v9;
    Value = (double *)AGGraphGetValue();
    v19 = Transition.contentTransitionEffects(style:size:)((unsigned __int8 *)&v22, *Value, Value[1], v4, v21);
    outlined consume of ContentTransition.Storage(v10, v11, v12);
    swift_release();
    v22 = v19;
    BYTE4(v23) = 2;
    LODWORD(v23) = 6;
    *(_WORD *)((char *)&v23 + 5) = 1;
    HIBYTE(v23) = v17;
    v24 = 0;
    v25 = v13 & 1 | 4;
    AGGraphSetOutputValue();
    return outlined consume of ContentTransition.Storage(v19, 0x200000006, 1);
  }
  return result;
}

void protocol witness for static StatefulRule.initialValue.getter in conformance ViewListContentTransition<A>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 1;
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ViewListContentTransition<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewListContentTransition<A>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t DynamicLayoutViewChildGeometry.updateValue()()
{
  uint64_t v0;
  uint64_t Value;
  uint64_t v2;
  char v3;
  int v4;
  __int128 v5;
  unint64_t v6;
  char v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t result;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  Value = AGGraphGetValue();
  v2 = *(_QWORD *)(Value + 32);
  v3 = *(_BYTE *)(Value + 40);
  v4 = *(_DWORD *)(Value + 44);
  v5 = *(_OWORD *)(Value + 16);
  v17 = *(_OWORD *)Value;
  v18 = v5;
  *(_QWORD *)&v19 = v2;
  BYTE8(v19) = v3;
  HIDWORD(v19) = v4;
  v16 = *(_QWORD *)(v0 + 8);
  v6 = DynamicContainer.Info.viewIndex(id:)((unsigned int *)&v16);
  if ((v7 & 1) != 0
    || (v8 = v6,
        type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewGeometry], (uint64_t)&type metadata for ViewGeometry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]), v9 = AGGraphGetValue(), v8 >= *(_QWORD *)(*(_QWORD *)v9 + 16)))
  {
    result = AGGraphGetOutputValue();
    if (result)
      return result;
    if (one-time initialization token for zero != -1)
      swift_once();
    v17 = static ViewGeometry.zero;
    v18 = xmmword_256192EB0;
    v19 = xmmword_256192EC0;
    v20 = unk_256192ED0;
  }
  else
  {
    if (v8 < 0)
      __break(1u);
    v10 = *(_QWORD *)v9 + (v8 << 6);
    v11 = *(_QWORD *)(v10 + 48);
    v12 = *(_QWORD *)(v10 + 56);
    v13 = *(_OWORD *)(v10 + 64);
    v14 = *(_OWORD *)(v10 + 80);
    v17 = *(_OWORD *)(v10 + 32);
    *(_QWORD *)&v18 = v11;
    *((_QWORD *)&v18 + 1) = v12;
    v19 = v13;
    v20 = v14;
  }
  return AGGraphSetOutputValue();
}

uint64_t View.zIndex(_:)(uint64_t a1, uint64_t a2, double a3)
{
  double v4;

  v4 = a3;
  return View._trait<A>(_:_:)((uint64_t)&type metadata for ZIndexTraitKey, (uint64_t)&v4, a1, (uint64_t)&type metadata for ZIndexTraitKey, a2, (uint64_t)&protocol witness table for ZIndexTraitKey);
}

uint64_t DynamicLayoutComputer.containerInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t Value;
  uint64_t v5;
  uint64_t v6;
  char v7;
  int v8;

  result = *(unsigned int *)(v1 + 8);
  if ((_DWORD)result == *MEMORY[0x24BE096C0])
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  else
  {
    Value = AGGraphGetValue();
    v5 = *(_QWORD *)(Value + 8);
    v6 = *(_QWORD *)(Value + 32);
    v7 = *(_BYTE *)(Value + 40);
    v8 = *(_DWORD *)(Value + 44);
    *(_QWORD *)a1 = *(_QWORD *)Value;
    *(_QWORD *)(a1 + 8) = v5;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(Value + 16);
    *(_QWORD *)(a1 + 32) = v6;
    *(_BYTE *)(a1 + 40) = v7;
    *(_DWORD *)(a1 + 44) = v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t DynamicLayoutComputer.updateValue()(uint64_t a1)
{
  _DWORD *v1;
  _DWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  int v9;
  uint64_t Value;
  void (*v11)(char *, uint64_t, uint64_t);
  __int128 v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _DWORD *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  int v28;
  _OWORD v29[2];
  uint64_t v30;
  char v31;
  int v32;

  v2 = v1;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = v2[8];
  Value = AGGraphGetValue();
  v20 = v2;
  v21 = v5;
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  *(_QWORD *)&v12 = *(_QWORD *)(v2 + 1);
  v22 = *((_OWORD *)v2 + 1);
  v23 = v12;
  v19 = v7;
  v11(v7, Value, v4);
  LODWORD(v24) = v8;
  *(_QWORD *)((char *)&v24 + 4) = v23;
  v25 = v22;
  LODWORD(v26) = v9;
  result = DynamicLayoutComputer.containerInfo.getter((uint64_t)v29);
  v14 = *(_QWORD *)&v29[0];
  if (*(_QWORD *)&v29[0])
  {
    v24 = v29[0];
    v25 = v29[1];
    v26 = v30;
    v27 = v31 & 1;
    v28 = v32;
    v15 = specialized DynamicLayoutMap.attributes(info:)((uint64_t *)&v24);
    swift_bridgeObjectRetain();
    outlined consume of DynamicContainer.Info?(v14);
    v16 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DynamicLayoutComputer<A>, a1);
    v17 = (uint64_t)v19;
    StatefulRule<>.updateLayoutComputer<A>(layout:environment:attributes:)((uint64_t)v19, v23, v15, a1, v4, v16, *(_QWORD *)(a1 + 24));
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(v17, v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance DynamicLayoutComputer<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for DynamicLayoutComputer<A>, a1);
  return static AsyncAttribute.flags.getter();
}

double static ZIndexTraitKey.defaultValue.getter()
{
  return 0.0;
}

uint64_t (*ViewTraitCollection.zIndex.modify(double *a1))(double *a1)
{
  uint64_t v1;
  uint64_t v3;
  double v4;

  *((_QWORD *)a1 + 1) = v1;
  v3 = swift_bridgeObjectRetain();
  v4 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(v3, 0.0);
  swift_bridgeObjectRelease();
  *a1 = v4;
  return ViewTraitCollection.zIndex.modify;
}

uint64_t ViewTraitCollection.zIndex.modify(double *a1)
{
  return specialized ViewTraitCollection.subscript.setter(*a1);
}

uint64_t sub_234E58E90@<X0>(double *a1@<X8>)
{
  uint64_t v2;
  double v3;
  uint64_t result;

  v2 = swift_bridgeObjectRetain();
  v3 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(v2, 0.0);
  result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t sub_234E58ED8(double *a1)
{
  return specialized ViewTraitCollection.subscript.setter(*a1);
}

ValueMetadata *type metadata accessor for ZIndexTraitKey()
{
  return &type metadata for ZIndexTraitKey;
}

uint64_t sub_234E58F0C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v1 = *a1;
  v2 = a1[1];
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for _TraitWritingModifier<ZIndexTraitKey>, (uint64_t)&type metadata for ZIndexTraitKey, (uint64_t)&protocol witness table for ZIndexTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _TraitWritingModifier);
  v5 = type metadata accessor for ModifiedContent(255, v1, v3, v4);
  v7[0] = v2;
  v7[1] = &protocol witness table for _TraitWritingModifier<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v7);
}

uint64_t (*DynamicLayoutScrollable.makeTarget<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*result)();
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;

  v4 = v3;
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  result = (uint64_t (*)())AGGraphGetWeakValue();
  if (result)
  {
    outlined init with copy of AnyTrackedValue((uint64_t)result, (uint64_t)v23);
    v9 = v24;
    v10 = v25;
    __swift_project_boxed_opaque_existential_1(v23, v24);
    v22 = 2;
    v11 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 64))(a1, &v22, a2, a3, v9, v10);
    v13 = v12;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    if ((v13 & 1) != 0)
    {
      return 0;
    }
    else
    {
      if (_threadTransactionData())
      {
        type metadata accessor for PropertyList.Element();
        swift_unknownObjectRetain();
        swift_dynamicCastClassUnconditional();
      }
      v14 = swift_retain();
      v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
      v17 = v16;
      v19 = v18;
      swift_release_n();
      v20 = swift_allocObject();
      v21 = *(_OWORD *)(v4 + 16);
      *(_OWORD *)(v20 + 16) = *(_OWORD *)v4;
      *(_OWORD *)(v20 + 32) = v21;
      *(_OWORD *)(v20 + 48) = *(_OWORD *)(v4 + 32);
      *(_QWORD *)(v20 + 64) = *(_QWORD *)(v4 + 48);
      *(_QWORD *)(v20 + 72) = v11;
      *(_QWORD *)(v20 + 80) = v15;
      *(_QWORD *)(v20 + 88) = v17;
      result = partial apply for closure #1 in DynamicLayoutScrollable.makeTarget(at:);
      *(_BYTE *)(v20 + 96) = v19 & 1;
    }
  }
  return result;
}

float64_t closure #1 in DynamicLayoutScrollable.makeTarget(at:)@<D0>(uint64_t a1@<X3>, uint64_t a2@<X4>, uint64_t a3@<X5>, char a4@<W6>, uint64_t a5@<X8>)
{
  uint64_t WeakValue;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  float64x2_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  float64_t result;
  __int128 v20;
  float64x2_t v21;
  float64x2_t v22;
  uint64_t v23;
  float64x2_t v24;
  float64x2_t v25;
  _QWORD v26[5];
  char v27;
  float64x2_t v28;
  __int128 v29;

  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewGeometry], (uint64_t)&type metadata for ViewGeometry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  WeakValue = AGGraphGetWeakValue();
  if (WeakValue)
  {
    v11 = *(_QWORD *)WeakValue;
    if (*(_QWORD *)(*(_QWORD *)WeakValue + 16) > a1)
    {
      v12 = (uint64_t *)AGGraphGetWeakValue();
      if (v12)
      {
        v13 = v12;
        v14 = *v12;
        v15 = (float64x2_t *)AGGraphGetWeakValue();
        if (v15)
        {
          if (a1 < 0)
          {
            __break(1u);
          }
          else
          {
            a4 &= 1u;
            v21 = vsubq_f64(*(float64x2_t *)(v13 + 3), vsubq_f64(*v15, *(float64x2_t *)(v13 + 1)));
            v22 = *v15;
            v16 = v11 + (a1 << 6);
            v17 = *(_OWORD *)(v16 + 64);
            v28 = vsubq_f64(*(float64x2_t *)(v16 + 32), *v15);
            v29 = v17;
            v18 = one-time initialization token for content;
            swift_retain();
            if (v18 == -1)
            {
LABEL_7:
              v26[0] = static ScrollCoordinateSpace.content;
              v27 = 1;
              v23 = v14;
              v24 = v22;
              v25 = v21;
              CGRect.convert(to:transform:)((uint64_t)v26, &v23);
              outlined destroy of CoordinateSpace((uint64_t)v26);
              swift_release();
              result = v28.f64[0];
              v20 = v29;
              *(float64x2_t *)a5 = v28;
              *(_OWORD *)(a5 + 16) = v20;
              *(_QWORD *)(a5 + 32) = a2;
              *(_QWORD *)(a5 + 40) = a3;
              *(_BYTE *)(a5 + 48) = a4;
              *(_BYTE *)(a5 + 49) = 0;
              return result;
            }
          }
          swift_once();
          goto LABEL_7;
        }
      }
    }
  }
  result = 0.0;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_WORD *)(a5 + 48) = 256;
  return result;
}

uint64_t protocol witness for ScrollableContainer.children.getter in conformance DynamicLayoutScrollable()
{
  uint64_t result;

  _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, &lazy cache variable for type metadata for [Scrollable], &lazy cache variable for type metadata for Scrollable, (uint64_t)&protocol descriptor for Scrollable, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  result = AGGraphGetWeakValue();
  if (result)
    return swift_bridgeObjectRetain();
  return result;
}

double protocol witness for ScrollableContainer.parent.getter in conformance DynamicLayoutScrollable@<D0>(uint64_t a1@<X8>)
{
  uint64_t WeakValue;
  double result;

  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for Scrollable);
  WeakValue = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of AnyTrackedValue(WeakValue, a1);
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t DynamicLayoutScrollable.visibleCollectionViewIDs.getter()
{
  uint64_t WeakValue;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  int64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  void (*v18)(uint64_t *__return_ptr, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;

  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  WeakValue = AGGraphGetWeakValue();
  if (!WeakValue)
    return MEMORY[0x24BEE4AF8];
  outlined init with copy of AnyTrackedValue(WeakValue, (uint64_t)v22);
  v1 = v23;
  v2 = v24;
  __swift_project_boxed_opaque_existential_1(v22, v23);
  v3 = ViewList.allViewIDs.getter(v1, v2);
  v4 = *(uint64_t (**)(void))(*(_QWORD *)v3 + 88);
  v5 = v4();
  result = v4();
  if ((result & 0x8000000000000000) == 0)
  {
    result = v4();
    if (v5 < 0 || result < v5)
      goto LABEL_22;
    if (v5)
    {
      v21 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
      v7 = 0;
      v8 = v21;
      v17 = v5;
      v18 = *(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v3 + 96);
      while (1)
      {
        v9 = v3;
        v18(&v19, v7);
        v11 = v19;
        v10 = HIDWORD(v19);
        if (*(_QWORD *)(v20 + 16))
        {
          v12 = *(_QWORD *)(v20 + 32);
          v13 = *(unsigned __int8 *)(v20 + 52);
          swift_retain();
          swift_bridgeObjectRelease();
          if (v13)
            v10 = -1;
        }
        else
        {
          swift_bridgeObjectRelease();
          v12 = 0;
        }
        v21 = v8;
        v15 = *(_QWORD *)(v8 + 16);
        v14 = *(_QWORD *)(v8 + 24);
        if (v15 >= v14 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
          v8 = v21;
        }
        *(_QWORD *)(v8 + 16) = v15 + 1;
        v16 = v8 + 16 * v15;
        *(_DWORD *)(v16 + 32) = v11;
        *(_DWORD *)(v16 + 36) = v10;
        *(_QWORD *)(v16 + 40) = v12;
        v3 = v9;
        result = v4();
        if (v7 >= result)
          break;
        if (v17 == ++v7)
        {
          swift_release();
          goto LABEL_18;
        }
      }
      __break(1u);
      goto LABEL_21;
    }
    swift_release();
    v8 = MEMORY[0x24BEE4AF8];
LABEL_18:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    return v8;
  }
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

uint64_t DynamicLayoutScrollable.forEachVisibleSubview(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t WeakValue;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t Attribute;
  BOOL v14;
  uint64_t v15;
  _QWORD v16[9];
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;
  _OWORD v24[2];
  uint64_t v25;

  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  result = AGGraphGetWeakValue();
  if (result)
  {
    outlined init with copy of AnyTrackedValue(result, (uint64_t)v21);
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewGeometry], (uint64_t)&type metadata for ViewGeometry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    WeakValue = AGGraphGetWeakValue();
    if (WeakValue)
    {
      v6 = (uint64_t *)WeakValue;
      v7 = AGGraphGetWeakValue();
      if (v7)
      {
        v8 = *v6;
        v9 = *(_OWORD *)v7;
        v10 = *(_OWORD *)(v7 + 16);
        v25 = *(_QWORD *)(v7 + 32);
        v24[0] = v9;
        v24[1] = v10;
        v20 = 0;
        v18 = 0;
        v19 = 0;
        v11 = v22;
        v12 = v23;
        __swift_project_boxed_opaque_existential_1(v21, v22);
        Attribute = AGWeakAttributeGetAttribute();
        v14 = (_DWORD)Attribute == *MEMORY[0x24BE096C0];
        if ((_DWORD)Attribute == *MEMORY[0x24BE096C0])
          v15 = 0;
        else
          v15 = Attribute;
        MEMORY[0x24BDAC7A8](Attribute);
        v16[2] = v8;
        v16[3] = &v18;
        v16[4] = v24;
        v16[5] = a1;
        v16[6] = a2;
        v16[7] = &v20;
        swift_bridgeObjectRetain();
        outlined retain of ViewTransform((uint64_t)v24);
        v17 = v14;
        ViewList.applyIDs(from:listAttribute:to:)((uint64_t)&v19, v15 | ((unint64_t)v14 << 32), (uint64_t (*)(unint64_t *))partial apply for closure #1 in DynamicLayoutScrollable.forEachVisibleSubview(_:), (uint64_t)v16, v11, v12);
        swift_bridgeObjectRelease();
        outlined release of ViewTransform((uint64_t)v24);
      }
    }
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  }
  return result;
}

BOOL closure #1 in DynamicLayoutScrollable.forEachVisibleSubview(_:)(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *, _BYTE *), uint64_t a6, _BYTE *a7)
{
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  _QWORD v18[2];
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;

  v9 = *a3;
  if ((*a3 & 0x8000000000000000) == 0 && v9 < *(_QWORD *)(a2 + 16))
  {
    v12 = a1[1];
    v13 = *(_QWORD *)a4;
    v14 = a2 + (v9 << 6);
    v18[0] = *a1;
    v18[1] = v12;
    v15 = *(_OWORD *)(v14 + 64);
    v19 = *(_OWORD *)(v14 + 32);
    v20 = v15;
    v21 = v13;
    v16 = *(_OWORD *)(a4 + 24);
    v22 = *(_OWORD *)(a4 + 8);
    v23 = v16;
    swift_bridgeObjectRetain();
    outlined retain of ViewTransform(a4);
    a5(v18, a7);
    swift_bridgeObjectRelease();
    swift_release();
    v9 = *a3;
  }
  *a3 = v9 + 1;
  return (*a7 & 1) == 0;
}

uint64_t DynamicLayoutScrollable.firstCollectionViewIndex(of:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t WeakValue;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v1 = *a1;
  v2 = a1[1];
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  WeakValue = AGGraphGetWeakValue();
  if (!WeakValue)
    return 0;
  outlined init with copy of AnyTrackedValue(WeakValue, (uint64_t)v9);
  v4 = v10;
  v5 = v11;
  __swift_project_boxed_opaque_existential_1(v9, v10);
  v8[0] = v1;
  v8[1] = v2;
  v6 = ViewList.firstOffset(of:)(v8, v4, v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  return v6;
}

uint64_t DynamicLayoutScrollable.applyCollectionViewIDs(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WeakValue;
  uint64_t v7;
  uint64_t v8;
  uint64_t Attribute;
  unsigned __int8 v10;
  uint64_t v11;
  char v12;
  _QWORD v14[4];
  unsigned __int8 v15;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;

  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  WeakValue = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of AnyTrackedValue(WeakValue, (uint64_t)v16);
    v7 = v17;
    v8 = v18;
    __swift_project_boxed_opaque_existential_1(v16, v17);
    Attribute = AGWeakAttributeGetAttribute();
    MEMORY[0x24BDAC7A8](Attribute);
    v14[2] = a2;
    v14[3] = a3;
    v15 = v10;
    v12 = ViewList.applyIDs(from:listAttribute:to:)(a1, v11 | ((unint64_t)v10 << 32), (uint64_t (*)(unint64_t *))partial apply for closure #1 in DynamicLayoutScrollable.applyCollectionViewIDs(from:to:), (uint64_t)v14, v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  }
  else
  {
    v12 = 1;
  }
  return v12 & 1;
}

BOOL closure #1 in DynamicLayoutScrollable.applyCollectionViewIDs(from:to:)(int *a1, void (*a2)(_DWORD *, char *))
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _DWORD v9[2];
  uint64_t v10;
  char v11;

  v3 = *a1;
  v4 = a1[1];
  v5 = *((_QWORD *)a1 + 1);
  v11 = 0;
  if (*(_QWORD *)(v5 + 16))
  {
    v6 = *(_QWORD *)(v5 + 32);
    v7 = *(unsigned __int8 *)(v5 + 52);
    swift_retain();
    if (v7)
      v4 = -1;
  }
  else
  {
    v6 = 0;
  }
  v9[0] = v3;
  v9[1] = v4;
  v10 = v6;
  a2(v9, &v11);
  swift_release();
  return (v11 & 1) == 0;
}

void DynamicLayoutScrollable.collectionViewID(for:)(void *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t *WeakValue;
  unint64_t v5;
  id v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;

  WeakValue = (unint64_t *)AGGraphGetWeakValue();
  if (!WeakValue)
    goto LABEL_8;
  v5 = *WeakValue;
  swift_bridgeObjectRetain();
  v6 = a1;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v7 = specialized Sequence.first(where:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();

  if (!v7)
    goto LABEL_8;
  (*(void (**)(unint64_t *__return_ptr))(*(_QWORD *)v7 + 184))(&v12);
  swift_release();
  if (v13)
  {
    v8 = v12;
    v9 = HIDWORD(v12);
    if (*(_QWORD *)(v13 + 16))
    {
      v10 = *(_QWORD *)(v13 + 32);
      v11 = *(unsigned __int8 *)(v13 + 52);
      swift_retain();
      swift_bridgeObjectRelease();
      if (v11)
        LODWORD(v9) = -1;
    }
    else
    {
      swift_bridgeObjectRelease();
      v10 = 0;
    }
    *a2 = v8 | ((unint64_t)v9 << 32);
    a2[1] = v10;
  }
  else
  {
LABEL_8:
    *(_OWORD *)a2 = xmmword_235260F20;
  }
}

uint64_t protocol witness for ScrollableCollection.firstCollectionViewIndex(of:) in conformance DynamicLayoutScrollable(uint64_t *a1)
{
  return DynamicLayoutScrollable.firstCollectionViewIndex(of:)(a1);
}

uint64_t protocol witness for ScrollableCollection.scroll(toCollectionViewID:anchor:) in conformance DynamicLayoutScrollable(uint64_t *a1)
{
  return specialized DynamicLayoutScrollable.scroll(toCollectionViewID:anchor:)(a1) & 1;
}

uint64_t specialized Sequence.first(where:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  if (a1 >> 62)
  {
LABEL_15:
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    if (v2)
      goto LABEL_3;
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
    {
LABEL_3:
      v3 = 4;
      do
      {
        v4 = v3 - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          v5 = MEMORY[0x23B7C6D9C](v3 - 4, a1);
          v6 = __OFADD__(v4, 1);
          v7 = v3 - 3;
          if (v6)
            goto LABEL_14;
        }
        else
        {
          v5 = *(_QWORD *)(a1 + 8 * v3);
          swift_retain();
          v6 = __OFADD__(v4, 1);
          v7 = v3 - 3;
          if (v6)
          {
LABEL_14:
            __break(1u);
            goto LABEL_15;
          }
        }
        if (AGSubgraphIsAncestor())
        {
          swift_bridgeObjectRelease();
          return v5;
        }
        swift_release();
        ++v3;
      }
      while (v7 != v2);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized DynamicLayoutScrollable.scroll(toCollectionViewID:anchor:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t WeakValue;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  __int128 v18;
  _QWORD v20[2];
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;

  v2 = v1;
  v3 = *a1;
  v4 = a1[1];
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  WeakValue = AGGraphGetWeakValue();
  if (!WeakValue)
    goto LABEL_5;
  outlined init with copy of AnyTrackedValue(WeakValue, (uint64_t)v21);
  v6 = v22;
  v7 = v23;
  __swift_project_boxed_opaque_existential_1(v21, v22);
  v20[0] = v3;
  v20[1] = v4;
  v8 = ViewList.firstOffset(of:)(v20, v6, v7);
  LOBYTE(v7) = v9;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  if ((v7 & 1) != 0)
  {
LABEL_5:
    v10 = 0;
  }
  else
  {
    if (_threadTransactionData())
    {
      type metadata accessor for PropertyList.Element();
      swift_unknownObjectRetain();
      swift_dynamicCastClassUnconditional();
    }
    v11 = swift_retain();
    v12 = specialized closure #1 in PropertyList.subscript.getter(v11);
    v14 = v13;
    v16 = v15;
    swift_release_n();
    v17 = swift_allocObject();
    v18 = *(_OWORD *)(v2 + 16);
    *(_OWORD *)(v17 + 16) = *(_OWORD *)v2;
    *(_OWORD *)(v17 + 32) = v18;
    *(_OWORD *)(v17 + 48) = *(_OWORD *)(v2 + 32);
    *(_QWORD *)(v17 + 64) = *(_QWORD *)(v2 + 48);
    *(_QWORD *)(v17 + 72) = v8;
    *(_QWORD *)(v17 + 80) = v12;
    *(_QWORD *)(v17 + 88) = v14;
    *(_BYTE *)(v17 + 96) = v16 & 1;
    v10 = specialized ScrollableContainer.setParentTarget(_:)((uint64_t)partial apply for closure #1 in DynamicLayoutScrollable.makeTarget(at:), v17);
    swift_release();
  }
  return v10 & 1;
}

uint64_t sub_234E59ED8()
{
  return swift_deallocObject();
}

BOOL partial apply for closure #1 in DynamicLayoutScrollable.applyCollectionViewIDs(from:to:)(int *a1)
{
  uint64_t v1;

  return closure #1 in DynamicLayoutScrollable.applyCollectionViewIDs(from:to:)(a1, *(void (**)(_DWORD *, char *))(v1 + 16));
}

BOOL partial apply for closure #1 in DynamicLayoutScrollable.forEachVisibleSubview(_:)(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in DynamicLayoutScrollable.forEachVisibleSubview(_:)(a1, *(_QWORD *)(v1 + 16), *(uint64_t **)(v1 + 24), *(_QWORD *)(v1 + 32), *(void (**)(_QWORD *, _BYTE *))(v1 + 40), *(_QWORD *)(v1 + 48), *(_BYTE **)(v1 + 56));
}

uint64_t sub_234E59F04()
{
  return swift_deallocObject();
}

uint64_t sub_234E59F14()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for mapMutator #1 <A>(thunk:) in static Layout.makeDynamicView(root:inputs:properties:list:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return mapMutator #1 <A>(thunk:) in static Layout.makeDynamicView(root:inputs:properties:list:)(a1, a2, v2[4], v2[2], v2[3]);
}

uint64_t partial apply for closure #1 in static Layout.makeDynamicView(root:inputs:properties:list:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t result;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = **(_DWORD **)(v4 + 32);
  result = type metadata accessor for DynamicLayoutComputer(0, v6, v7, a4);
  *(_DWORD *)(a1 + 8) = v8;
  return result;
}

uint64_t type metadata accessor for DynamicLayoutComputer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DynamicLayoutComputer);
}

uint64_t sub_234E59FA0()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type External<ScrollableCollection> and conformance External<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type External<ScrollableCollection> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<ScrollableCollection> and conformance External<A>)
  {
    _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(255, &lazy cache variable for type metadata for External<ScrollableCollection>, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection, (uint64_t)&protocol descriptor for ScrollableCollection, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BE09670]);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BE09678], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<ScrollableCollection> and conformance External<A>);
  }
  return result;
}

uint64_t partial apply for implicit closure #9 in static Layout.makeDynamicView(root:inputs:properties:list:)()
{
  uint64_t v0;

  return implicit closure #9 in static Layout.makeDynamicView(root:inputs:properties:list:)(*(_QWORD *)(v0 + 16));
}

uint64_t outlined destroy of ScrollStateRequestTransform(uint64_t a1)
{
  destroy for ScrollStateRequestTransform(a1);
  return a1;
}

void type metadata accessor for External<[Scrollable]>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for External<[Scrollable]>)
  {
    _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(255, &lazy cache variable for type metadata for [Scrollable], &lazy cache variable for type metadata for Scrollable, (uint64_t)&protocol descriptor for Scrollable, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v0 = type metadata accessor for External();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for External<[Scrollable]>);
  }
}

unint64_t lazy protocol witness table accessor for type External<[Scrollable]> and conformance External<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type External<[Scrollable]> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<[Scrollable]> and conformance External<A>)
  {
    type metadata accessor for External<[Scrollable]>();
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BE09678], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<[Scrollable]> and conformance External<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type PreferenceTransform<ScrollTargetRole.ContentKey> and conformance PreferenceTransform<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PreferenceTransform);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for PreferenceTransform<A>, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of ScrollStateRequestTransform(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ScrollStateRequestTransform(a2, a1);
  return a2;
}

unint64_t lazy protocol witness table accessor for type DynamicContainerInfo<DynamicLayoutViewAdaptor> and conformance DynamicContainerInfo<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DynamicContainerInfo<DynamicLayoutViewAdaptor> and conformance DynamicContainerInfo<A>;
  if (!lazy protocol witness table cache variable for type DynamicContainerInfo<DynamicLayoutViewAdaptor> and conformance DynamicContainerInfo<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for DynamicContainerInfo<DynamicLayoutViewAdaptor>, (uint64_t)&type metadata for DynamicLayoutViewAdaptor, (uint64_t)&protocol witness table for DynamicLayoutViewAdaptor, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for DynamicContainerInfo);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DynamicContainerInfo<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DynamicContainerInfo<DynamicLayoutViewAdaptor> and conformance DynamicContainerInfo<A>);
  }
  return result;
}

uint64_t outlined release of DynamicContainerInfo<DynamicLayoutViewAdaptor>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 136);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

void _s7SwiftUI24DynamicLayoutViewAdaptorV010removeItemD08uniqueId04itemD0ys6UInt32V_AC0hD0VtFyAA0cD3MapVzXEfU_TA_0()
{
  uint64_t v0;

  DynamicLayoutMap.remove(uniqueId:)(*(_DWORD *)(v0 + 16));
}

uint64_t partial apply for closure #2 in DynamicLayoutViewAdaptor.makeItemLayout(item:uniqueId:inputs:containerInfo:containerInputs:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t *__return_ptr, unint64_t *)@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;

  return closure #2 in DynamicLayoutViewAdaptor.makeItemLayout(item:uniqueId:inputs:containerInfo:containerInputs:)(a1, a2, a3, *(void (**)(unint64_t *))(v4 + 16), *(_DWORD *)(v4 + 32), *(_QWORD *)(v4 + 40), *(void (**)(uint64_t (*)(), double))(v4 + 48), a4, *(_QWORD *)(v4 + 56), *(unsigned int **)(v4 + 64), *(_QWORD *)(v4 + 72), *(_QWORD *)(v4 + 80), *(_BYTE *)(v4 + 88));
}

uint64_t sub_234E5A310()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewInputs, @guaranteed @escaping @callee_guaranteed (@in_guaranteed _ViewInputs) -> (@out _ViewOutputs)) -> (@out _ViewOutputs?)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return thunk for @callee_guaranteed (@in_guaranteed _ViewInputs, @guaranteed @escaping @callee_guaranteed (@in_guaranteed _ViewInputs) -> (@out _ViewOutputs)) -> (@out _ViewOutputs?)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t partial apply for closure #1 in closure #2 in DynamicLayoutViewAdaptor.makeItemLayout(item:uniqueId:inputs:containerInfo:containerInputs:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  int *v3;
  int v4;
  uint64_t v6;
  _DWORD v7[2];

  v1 = *(uint64_t **)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 40);
  if (*(_BYTE *)(v2 + 68))
    v3 = (int *)MEMORY[0x24BE096C0];
  else
    v3 = (int *)(v2 + 64);
  v4 = *v3;
  v7[0] = *(_DWORD *)(v0 + 36);
  v7[1] = v4;
  v6 = *v1;
  return DynamicLayoutMap.subscript.setter((uint64_t)v7, (unsigned int *)&v6);
}

uint64_t outlined destroy of DynamicLayoutViewAdaptor.MakeTransition(uint64_t a1)
{
  destroy for DynamicLayoutViewAdaptor.MakeTransition(a1);
  return a1;
}

unint64_t lazy protocol witness table accessor for type DynamicLayoutViewChildGeometry and conformance DynamicLayoutViewChildGeometry()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DynamicLayoutViewChildGeometry and conformance DynamicLayoutViewChildGeometry;
  if (!lazy protocol witness table cache variable for type DynamicLayoutViewChildGeometry and conformance DynamicLayoutViewChildGeometry)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DynamicLayoutViewChildGeometry, &unk_250640868);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DynamicLayoutViewChildGeometry and conformance DynamicLayoutViewChildGeometry);
  }
  return result;
}

uint64_t partial apply for closure #1 in mapMutator #1 <A>(thunk:) in static Layout.makeDynamicView(root:inputs:properties:list:)(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(v1 + 32))(a1 + 16);
}

void *type metadata accessor for DynamicLayoutViewChildGeometry()
{
  return &unk_250640868;
}

uint64_t destroy for DynamicLayoutViewAdaptor.MakeTransition(uint64_t a1)
{
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DynamicLayoutViewAdaptor.MakeTransition(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = a2 + 24;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 48) = v5;
  v6 = v5;
  v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_bridgeObjectRetain();
  v7(a1 + 24, v4, v6);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  v8 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  v9 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v9;
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DynamicLayoutViewAdaptor.MakeTransition(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = v4;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  v5 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v5;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  return a1;
}

uint64_t assignWithTake for DynamicLayoutViewAdaptor.MakeTransition(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_release();
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_release();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  swift_release();
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  return a1;
}

uint64_t getEnumTagSinglePayload for DynamicLayoutViewAdaptor.MakeTransition(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 201))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DynamicLayoutViewAdaptor.MakeTransition(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 200) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 201) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 201) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for DynamicLayoutViewAdaptor.MakeTransition()
{
  return &unk_2506393F8;
}

_QWORD *initializeBufferWithCopyOfBuffer for DynamicLayoutViewAdaptor(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  *a1 = *a2;
  v3 = a2[2];
  a1[1] = a2[1];
  a1[2] = v3;
  swift_retain();
  return a1;
}

ValueMetadata *type metadata accessor for DynamicLayoutViewAdaptor()
{
  return &type metadata for DynamicLayoutViewAdaptor;
}

uint64_t destroy for DynamicLayoutComputer()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DynamicLayoutComputer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DynamicLayoutComputer(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for DynamicLayoutComputer(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for DynamicLayoutComputer(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 36))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DynamicLayoutComputer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 36) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 36) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

__n128 __swift_memcpy56_4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for DynamicLayoutScrollable(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DynamicLayoutScrollable(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 56) = v3;
  return result;
}

ValueMetadata *type metadata accessor for DynamicLayoutScrollable()
{
  return &type metadata for DynamicLayoutScrollable;
}

uint64_t instantiation function for generic protocol witness table for DynamicLayoutComputer<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DynamicLayoutComputer<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for DynamicLayoutViewChildGeometry(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type DynamicLayoutViewChildGeometry and conformance DynamicLayoutViewChildGeometry();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **associated type witness table accessor for DynamicContainerAdaptor.Item : DynamicContainerItem in DynamicLayoutViewAdaptor()
{
  return &protocol witness table for DynamicViewListItem;
}

void base witness table accessor for _AttributeBody in DynamicLayoutComputer<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t sub_234E5AC40()
{
  return swift_deallocObject();
}

float64_t partial apply for closure #1 in DynamicLayoutScrollable.makeTarget(at:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in DynamicLayoutScrollable.makeTarget(at:)(*(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), *(_BYTE *)(v1 + 96), a1);
}

uint64_t type metadata accessor for ViewListTransition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ViewListTransition);
}

uint64_t type metadata accessor for TransitionHelper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TransitionHelper);
}

uint64_t sub_234E5AC7C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DynamicLayoutViewAdaptor.MakeTransition.visit<A>(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return closure #1 in DynamicLayoutViewAdaptor.MakeTransition.visit<A>(_:)(a1, a2, *(uint64_t (**)(uint64_t *))(v2 + 16));
}

unint64_t lazy protocol witness table accessor for type ViewListArchivedAnimation and conformance ViewListArchivedAnimation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ViewListArchivedAnimation and conformance ViewListArchivedAnimation;
  if (!lazy protocol witness table cache variable for type ViewListArchivedAnimation and conformance ViewListArchivedAnimation)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewListArchivedAnimation, &unk_25063BDB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewListArchivedAnimation and conformance ViewListArchivedAnimation);
  }
  return result;
}

uint64_t sub_234E5ACEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for TransitionHelper(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
  v8 = (v7 + 101) & ~v7;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v4 + 48);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4 + *(int *)(v6 + 44) + v8, v5);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DynamicLayoutViewAdaptor.MakeTransition.makeArchivedTransition<A>(helper:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(_QWORD *)(type metadata accessor for TransitionHelper(0, v6, v7, a2) - 8);
  v9 = (*(unsigned __int8 *)(v8 + 80) + 101) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = v3 + ((*(_QWORD *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  return closure #1 in DynamicLayoutViewAdaptor.MakeTransition.makeArchivedTransition<A>(helper:)(a1, v3 + 32, v3 + v9, *(void (**)(uint64_t *__return_ptr, __int128 *))v10, *(_QWORD *)(v10 + 8), v6, v7, a3);
}

uint64_t sub_234E5AE30()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t type metadata accessor for ViewListContentTransition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ViewListContentTransition);
}

uint64_t type metadata completion function for ViewListContentTransition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for TransitionHelper(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ViewListContentTransition(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = ((v6 + 12) & ~v6) + v7;
  if ((v6 | 3uLL) > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || (((v8 & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFFCLL) + 4 > 0x18)
  {
    v11 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v11 + ((v6 + 16) & ~(v6 | 3)));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v12 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
    v13 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v12 = *v13;
    v14 = (_DWORD *)(((unint64_t)v12 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    v15 = (_DWORD *)(((unint64_t)v13 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v14 = *v15;
    v16 = ((unint64_t)v14 + v6 + 4) & ~v6;
    v17 = ((unint64_t)v15 + v6 + 4) & ~v6;
    (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v16, v17);
    *(_BYTE *)(v16 + v7) = *(_BYTE *)(v17 + v7);
    v18 = (_DWORD *)(((unint64_t)v4 + v8 + 4) & 0xFFFFFFFFFFFFFCLL);
    v19 = (_DWORD *)(((unint64_t)a2 + v8 + 4) & 0xFFFFFFFFFFFFFCLL);
    *v18 = *v19;
    *(_DWORD *)(((unint64_t)v18 + 7) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v19 + 7) & 0xFFFFFFFFFFFFFCLL);
  }
  return v4;
}

_DWORD *initializeWithCopy for ViewListContentTransition(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;

  *a1 = *a2;
  v5 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  v6 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v5 = *v6;
  v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v7 = *v8;
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = ((unint64_t)v7 + v10 + 4) & ~v10;
  v12 = ((unint64_t)v8 + v10 + 4) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v9 + 16))(v11, v12);
  v13 = *(_QWORD *)(v9 + 64);
  *(_BYTE *)(v11 + v13) = *(_BYTE *)(v12 + v13);
  v14 = v13 + ((v10 + 12) & ~v10) + 4;
  v15 = (_DWORD *)(((unint64_t)a1 + v14) & 0xFFFFFFFFFFFFFCLL);
  v16 = (_DWORD *)(((unint64_t)a2 + v14) & 0xFFFFFFFFFFFFFFFCLL);
  *v15 = *v16;
  *(_DWORD *)(((unint64_t)v15 + 7) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFCLL);
  return a1;
}

_DWORD *assignWithCopy for ViewListContentTransition(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;

  *a1 = *a2;
  v5 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  v6 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v5 = *v6;
  v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v7 = *v8;
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = ((unint64_t)v7 + v10 + 4) & ~v10;
  v12 = ((unint64_t)v8 + v10 + 4) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v9 + 24))(v11, v12);
  v13 = *(_QWORD *)(v9 + 64);
  *(_BYTE *)(v11 + v13) = *(_BYTE *)(v12 + v13);
  v14 = v13 + ((v10 + 12) & ~v10) + 4;
  v15 = (_DWORD *)(((unint64_t)a1 + v14) & 0xFFFFFFFFFFFFFCLL);
  v16 = (_DWORD *)(((unint64_t)a2 + v14) & 0xFFFFFFFFFFFFFFFCLL);
  *v15 = *v16;
  *(_DWORD *)(((unint64_t)v15 + 7) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFCLL);
  return a1;
}

_DWORD *initializeWithTake for ViewListContentTransition(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;

  *a1 = *a2;
  v5 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  v6 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v5 = *v6;
  v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v7 = *v8;
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = ((unint64_t)v7 + v10 + 4) & ~v10;
  v12 = ((unint64_t)v8 + v10 + 4) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v9 + 32))(v11, v12);
  v13 = *(_QWORD *)(v9 + 64);
  *(_BYTE *)(v11 + v13) = *(_BYTE *)(v12 + v13);
  v14 = v13 + ((v10 + 12) & ~v10) + 4;
  v15 = (_DWORD *)(((unint64_t)a1 + v14) & 0xFFFFFFFFFFFFFCLL);
  v16 = (_DWORD *)(((unint64_t)a2 + v14) & 0xFFFFFFFFFFFFFFFCLL);
  *v15 = *v16;
  *(_DWORD *)(((unint64_t)v15 + 7) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFCLL);
  return a1;
}

_DWORD *assignWithTake for ViewListContentTransition(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;

  *a1 = *a2;
  v5 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  v6 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v5 = *v6;
  v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v7 = *v8;
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = ((unint64_t)v7 + v10 + 4) & ~v10;
  v12 = ((unint64_t)v8 + v10 + 4) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v9 + 40))(v11, v12);
  v13 = *(_QWORD *)(v9 + 64);
  *(_BYTE *)(v11 + v13) = *(_BYTE *)(v12 + v13);
  v14 = v13 + ((v10 + 12) & ~v10) + 4;
  v15 = (_DWORD *)(((unint64_t)a1 + v14) & 0xFFFFFFFFFFFFFCLL);
  v16 = (_DWORD *)(((unint64_t)a2 + v14) & 0xFFFFFFFFFFFFFFFCLL);
  *v15 = *v16;
  *(_DWORD *)(((unint64_t)v15 + 7) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFCLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for ViewListContentTransition(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v13;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFD)
    v6 = 253;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    v13 = (((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + v7 + 4) & ~v7;
    if (v5 < 0xFD)
    {
      v14 = *(unsigned __int8 *)(v13 + v8);
      if (v14 >= 3)
        return v14 - 2;
      else
        return 0;
    }
    else
    {
      return (*(uint64_t (**)(unint64_t))(v4 + 48))(v13);
    }
  }
  else
  {
    if (((((((((v7 + 12) & ~v7) + v8) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFFCLL) + 4) & 0xFFFFFFFC) != 0)
      v9 = 2;
    else
      v9 = a2 - v6 + 1;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    return ((uint64_t (*)(void))((char *)&loc_234E5B3F8 + 4 * byte_2352A7040[v11]))();
  }
}

void storeEnumTagSinglePayload for ViewListContentTransition(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFDu)
    v6 = 253;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if ((((((((_DWORD)v7 + 12) & ~(_DWORD)v7) + *(_DWORD *)(v5 + 64)) & 0xFFFFFFFC) + 11) & 0xFFFFFFFC) == 0xFFFFFFFC)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X14 }
  }
  if ((((((((_DWORD)v7 + 12) & ~(_DWORD)v7) + *(_DWORD *)(v5 + 64)) & 0xFFFFFFFC) + 11) & 0xFFFFFFFC) != 0xFFFFFFFC)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((((((v7 + 12) & ~v7) + *(_QWORD *)(v5 + 64)) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFFCLL) + 4);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_234E5B594()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_234E5B59C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x234E5B5A4);
}

void sub_234E5B5EC()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_234E5B5F4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_234E5B5FC@<X0>(int a1@<W1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_WORD *)(v8 + v9) = 0;
  if (!a1)
LABEL_2:
    JUMPOUT(0x234E5B604);
  v3 = (((((v8 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + v7 + 4) & a3;
  if (a2 < 0xFD)
  {
    *(_BYTE *)(v3 + v6) = a1 + 2;
    goto LABEL_2;
  }
  return (*(uint64_t (**)(unint64_t))(v5 + 56))(v3);
}

void *type metadata accessor for ViewListArchivedAnimation()
{
  return &unk_25063BDB8;
}

uint64_t initializeWithCopy for ViewListArchivedAnimation.Effect(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 21) = *(_QWORD *)(a2 + 21);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ViewListArchivedAnimation.Effect(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  v4 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 21) = *(_QWORD *)(a2 + 21);
  *(_OWORD *)(a1 + 8) = v4;
  return a1;
}

__n128 __swift_memcpy29_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 13) = *(_OWORD *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ViewListArchivedAnimation.Effect(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 21) = *(_QWORD *)(a2 + 21);
  return a1;
}

uint64_t getEnumTagSinglePayload for ViewListArchivedAnimation.Effect(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 29))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ViewListArchivedAnimation.Effect(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 28) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 29) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 29) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ViewListArchivedAnimation.Effect()
{
  return &type metadata for ViewListArchivedAnimation.Effect;
}

uint64_t type metadata completion function for TransitionHelper()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TransitionHelper(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char v11;
  int v12;
  unsigned int v14;
  int v15;
  unint64_t v16;
  unsigned int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFD)
    v6 = 253;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = *(_QWORD *)(v4 + 64);
  v9 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v10 = v8 + ((v7 + 12) & ~v7) + 1;
  v11 = 8 * v10;
  if (v10 <= 3)
  {
    v14 = ((v9 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v14))
    {
      v12 = *(_DWORD *)(a1 + v10);
      if (!v12)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v14 > 0xFF)
    {
      v12 = *(unsigned __int16 *)(a1 + v10);
      if (!*(_WORD *)(a1 + v10))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v14 < 2)
    {
LABEL_22:
      v16 = (((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + v7 + 4) & ~v7;
      if (v5 >= 0xFD)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(v16);
      v17 = *(unsigned __int8 *)(v16 + v8);
      if (v17 >= 3)
        return v17 - 2;
      else
        return 0;
    }
  }
  v12 = *(unsigned __int8 *)(a1 + v10);
  if (!*(_BYTE *)(a1 + v10))
    goto LABEL_22;
LABEL_15:
  v15 = (v12 - 1) << v11;
  if (v10 > 3)
    v15 = 0;
  if ((_DWORD)v8 + (((_DWORD)v7 + 12) & ~(_DWORD)v7) == -1)
    return v6 + v15 + 1;
  if (v10 > 3)
    LODWORD(v10) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234E5B950 + 4 * byte_2352A704F[(v10 - 1)]))();
}

void storeEnumTagSinglePayload for TransitionHelper(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFDu)
    v6 = 253;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64)
     + ((*(unsigned __int8 *)(v5 + 80) + 12) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + 1;
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if (*(_DWORD *)(v5 + 64) + ((*(unsigned __int8 *)(v5 + 80) + 12) & ~*(unsigned __int8 *)(v5 + 80)) != -1)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X14 }
}

uint64_t type metadata completion function for ViewListTransition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for TransitionHelper(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TransitionHelper(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  if ((v5 | 3uLL) > 7 || (*(_DWORD *)(v4 + 80) & 0x100000) != 0 || v6 + ((v5 + 12) & (unint64_t)~v5) + 1 > 0x18)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v5 + 16) & ~(v5 | 3)));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v10 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
    v11 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v10 = *v11;
    v12 = (_DWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    v13 = (_DWORD *)(((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v12 = *v13;
    v14 = ((unint64_t)v12 + v5 + 4) & ~v5;
    v15 = ((unint64_t)v13 + v5 + 4) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v14, v15);
    *(_BYTE *)(v14 + v6) = *(_BYTE *)(v15 + v6);
  }
  return v3;
}

_DWORD *initializeWithCopy for TransitionHelper(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v6 = *v7;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)v6 + v9 + 4) & ~v9;
  v11 = ((unint64_t)v7 + v9 + 4) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v10, v11);
  *(_BYTE *)(v10 + *(_QWORD *)(v8 + 64)) = *(_BYTE *)(v11 + *(_QWORD *)(v8 + 64));
  return a1;
}

_DWORD *assignWithCopy for TransitionHelper(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v6 = *v7;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)v6 + v9 + 4) & ~v9;
  v11 = ((unint64_t)v7 + v9 + 4) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v10, v11);
  *(_BYTE *)(v10 + *(_QWORD *)(v8 + 64)) = *(_BYTE *)(v11 + *(_QWORD *)(v8 + 64));
  return a1;
}

_DWORD *initializeWithTake for TransitionHelper(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v6 = *v7;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)v6 + v9 + 4) & ~v9;
  v11 = ((unint64_t)v7 + v9 + 4) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v10, v11);
  *(_BYTE *)(v10 + *(_QWORD *)(v8 + 64)) = *(_BYTE *)(v11 + *(_QWORD *)(v8 + 64));
  return a1;
}

_DWORD *assignWithTake for TransitionHelper(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v6 = *v7;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)v6 + v9 + 4) & ~v9;
  v11 = ((unint64_t)v7 + v9 + 4) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v10, v11);
  *(_BYTE *)(v10 + *(_QWORD *)(v8 + 64)) = *(_BYTE *)(v11 + *(_QWORD *)(v8 + 64));
  return a1;
}

uint64_t getEnumTagSinglePayload for ViewListTransition(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char v11;
  int v12;
  unsigned int v14;
  int v15;
  unint64_t v16;
  unsigned int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFD)
    v6 = 253;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = *(_QWORD *)(v4 + 64);
  v9 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v10 = v8 + ((v7 + 12) & ~v7) + 1;
  v11 = 8 * v10;
  if (v10 <= 3)
  {
    v14 = ((v9 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v14))
    {
      v12 = *(_DWORD *)(a1 + v10);
      if (!v12)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v14 > 0xFF)
    {
      v12 = *(unsigned __int16 *)(a1 + v10);
      if (!*(_WORD *)(a1 + v10))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v14 < 2)
    {
LABEL_22:
      v16 = (((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + v7 + 4) & ~v7;
      if (v5 >= 0xFD)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(v16);
      v17 = *(unsigned __int8 *)(v16 + v8);
      if (v17 >= 3)
        return v17 - 2;
      else
        return 0;
    }
  }
  v12 = *(unsigned __int8 *)(a1 + v10);
  if (!*(_BYTE *)(a1 + v10))
    goto LABEL_22;
LABEL_15:
  v15 = (v12 - 1) << v11;
  if (v10 > 3)
    v15 = 0;
  if ((_DWORD)v8 + (((_DWORD)v7 + 12) & ~(_DWORD)v7) == -1)
    return v6 + v15 + 1;
  if (v10 > 3)
    LODWORD(v10) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234E5C034 + 4 * byte_2352A705D[(v10 - 1)]))();
}

void storeEnumTagSinglePayload for ViewListTransition(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFDu)
    v6 = 253;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64)
     + ((*(unsigned __int8 *)(v5 + 80) + 12) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + 1;
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if (*(_DWORD *)(v5 + 64) + ((*(unsigned __int8 *)(v5 + 80) + 12) & ~*(unsigned __int8 *)(v5 + 80)) != -1)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X14 }
}

ValueMetadata *type metadata accessor for DynamicLayoutViewAdaptor.ItemLayout()
{
  return &type metadata for DynamicLayoutViewAdaptor.ItemLayout;
}

uint64_t instantiation function for generic protocol witness table for ViewListTransition<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewListTransition<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for ViewListArchivedAnimation(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ViewListArchivedAnimation and conformance ViewListArchivedAnimation();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for ViewListContentTransition<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewListContentTransition<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in ViewListContentTransition<A>()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for _AttributeBody in ViewListTransition<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t outlined destroy of ViewList?(uint64_t a1)
{
  uint64_t v2;

  _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, &lazy cache variable for type metadata for ViewList?, (unint64_t *)&lazy cache variable for type metadata for ViewList, (uint64_t)&protocol descriptor for ViewList, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in TransitionHelper.update()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v7 = v4[2];
  v6 = v4[3];
  v9 = v4[4];
  v8 = (_BYTE *)v4[5];
  v10 = type metadata accessor for TransitionHelper(0, v7, v6, a4);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v9 + *(int *)(v10 + 44), a1, v7);
  *v8 = 1;
  return result;
}

void static Layout._makeLayoutView(root:inputs:body:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void (*v15)(int *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  int v29;

  v9 = *a1;
  v10 = *a2;
  v11 = *((_DWORD *)a2 + 2);
  v12 = a2[2];
  v18 = *(_OWORD *)(a2 + 5);
  v19 = *(_OWORD *)(a2 + 3);
  v17 = *(_OWORD *)(a2 + 7);
  v13 = a2[9];
  v14 = *((_DWORD *)a2 + 20);
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v29 = v9;
  v21 = v10;
  v22 = v11;
  v23 = v12;
  v24 = v19;
  v25 = v18;
  v26 = v17;
  v27 = v13;
  v28 = v14;
  v15 = *(void (**)(int *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                                    + 0xB0);
  v16 = static CoreGlue.shared;
  v15(&v29, &v21, a3, a4, a5, a6);

}

{
  static Layout._makeLayoutView(root:inputs:body:)(a1, a2, a3, a4, a5, a6);
}

SwiftUI::LayoutProperties __swiftcall LayoutProperties.init()()
{
  uint64_t v0;
  SwiftUI::LayoutProperties result;

  *(_WORD *)v0 = 2;
  *(_BYTE *)(v0 + 2) = 0;
  return result;
}

uint64_t LayoutSubview.priority.getter()
{
  return LayoutProxy.layoutPriority.getter();
}

uint64_t LayoutSubview.dimensions(in:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t *v5;
  int v6;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  int v13;

  v6 = *((_DWORD *)v5 + 2);
  v12 = *v5;
  v13 = v6;
  v8 = a1;
  v9 = a2 & 1;
  v10 = a3;
  v11 = a4 & 1;
  return LayoutProxy.dimensions(in:)((uint64_t)&v8, a5);
}

void LayoutSubview.place(in:layoutDirection:)(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  unint64_t v12;
  _BYTE *v13;
  unsigned __int8 v14;
  _QWORD v15[8];

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  v7 = a1[4];
  v8 = a1[5];
  v9 = a1[6];
  v10 = a1[7];
  v11 = *a2;
  v12 = *(int *)(v2 + 12);
  v13 = (_BYTE *)_threadLayoutData();
  if (v13)
  {
    if ((*v13 & 1) == 0)
    {
      v15[0] = v3;
      v15[1] = v4;
      v15[2] = v5;
      v15[3] = v6;
      v15[4] = v7;
      v15[5] = v8;
      v15[6] = v9;
      v15[7] = v10;
      v14 = v11;
      PlacementData.setGeometry(_:at:layoutDirection:)((uint64_t)v15, v12, &v14);
      return;
    }
    __break(1u);
  }
  __break(1u);
}

uint64_t LayoutSubview.spacing.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v3;
  __int128 *InputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v3 = *(_BYTE *)(v1 + 16);
  if (*(_DWORD *)(v1 + 4) == *MEMORY[0x24BE096C0])
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    InputValue = &static LayoutComputer.defaultValue;
  }
  else
  {
    InputValue = (__int128 *)AGGraphGetInputValue();
  }
  v5 = *(_QWORD *)InputValue;
  v6 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v6 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_12;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (!_MovableLockIsOwner(static Update._lock))
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_12:
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v5 + 112))(&v8);
    result = swift_release();
    *(_QWORD *)a1 = v8;
    *(_BYTE *)(a1 + 8) = v3;
  }
  return result;
}

SwiftUI::ViewSpacing __swiftcall ViewSpacing.init(_:layoutDirection:)(SwiftUI::Spacing _, SwiftUI::LayoutDirection layoutDirection)
{
  uint64_t v2;
  char v3;
  SwiftUI::ViewSpacing result;

  v3 = *(_BYTE *)layoutDirection;
  *(_QWORD *)v2 = *(_QWORD *)_.minima._rawValue;
  *(_BYTE *)(v2 + 8) = v3;
  result.spacing = _;
  result.layoutDirection.value = layoutDirection;
  return result;
}

uint64_t Layout.updateCache(_:subviews:)(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  char v10;
  char v11;
  int v13;
  uint64_t v14;
  char v15;
  char v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
  v9 = *((_QWORD *)a2 + 1);
  v10 = *((_BYTE *)a2 + 16);
  v11 = *((_BYTE *)a2 + 17);
  v13 = *a2;
  v14 = v9;
  v15 = v10;
  v16 = v11;
  return (*(uint64_t (**)(int *, uint64_t, uint64_t))(a4 + 32))(&v13, a3, a4);
}

uint64_t Layout.explicitAlignment(of:in:proposal:subviews:cache:)(uint64_t a1)
{
  return protocol witness for Layout.explicitAlignment(of:in:proposal:subviews:cache:) in conformance ZStackLayout(a1);
}

{
  return protocol witness for Layout.explicitAlignment(of:in:proposal:subviews:cache:) in conformance ZStackLayout(a1);
}

{
  return Layout.explicitAlignment(of:in:proposal:subviews:cache:)(a1);
}

{
  return Layout.explicitAlignment(of:in:proposal:subviews:cache:)(a1);
}

uint64_t _ProposedSize.init(_:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  *(_QWORD *)a5 = result;
  *(_BYTE *)(a5 + 8) = a2 & 1;
  *(_QWORD *)(a5 + 16) = a3;
  *(_BYTE *)(a5 + 24) = a4 & 1;
  return result;
}

__n128 ViewSizeCache.init(cache:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  v2 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a2 + 144) = v2;
  *(_BYTE *)(a2 + 160) = *(_BYTE *)(a1 + 160);
  v3 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v3;
  v4 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 112) = v4;
  v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v5;
  result = *(__n128 *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

double ViewSizeCache.get(_:makeValue:)(uint64_t a1, double (*a2)(uint64_t))
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  double v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  char v11;
  uint64_t v12;
  uint64_t v14;
  double *v15;
  uint64_t v16;
  double *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v3 = *(double *)a1;
  v4 = *(unsigned __int8 *)(a1 + 8);
  v5 = *(double *)(a1 + 16);
  v6 = *(unsigned __int8 *)(a1 + 24);
  v7 = *(_QWORD *)(v2 + 8);
  v8 = *(_QWORD *)(v2 + 24);
  v9 = *(_QWORD *)(v2 + 64);
  v10 = *(double *)(v2 + 144);
  if ((*(_BYTE *)(v2 + 48) & 1) == 0)
  {
    if ((v4 & 1) != 0)
    {
      if ((v7 & 1) == 0)
      {
        if ((*(_BYTE *)(v2 + 64) & 1) != 0)
          v11 = *(_BYTE *)(v2 + 104);
        else
          v11 = 1;
        if ((v11 & 1) != 0)
          goto LABEL_18;
        goto LABEL_36;
      }
    }
    else if ((v7 & 1) != 0 || v3 != *(double *)v2)
    {
      goto LABEL_17;
    }
    if ((v6 & 1) != 0)
    {
      if ((v8 & 1) == 0)
        goto LABEL_17;
LABEL_16:
      v10 = *(double *)(v2 + 32);
      goto LABEL_44;
    }
    if ((v8 & 1) == 0 && v5 == *(double *)(v2 + 16))
      goto LABEL_16;
  }
LABEL_17:
  if ((*(_BYTE *)(v2 + 104) & 1) != 0)
    goto LABEL_18;
  if ((v4 & 1) != 0)
  {
    if ((*(_BYTE *)(v2 + 64) & 1) == 0)
      goto LABEL_18;
  }
  else if ((*(_BYTE *)(v2 + 64) & 1) != 0 || v3 != *(double *)(v2 + 56))
  {
    goto LABEL_18;
  }
LABEL_36:
  if ((v6 & 1) != 0)
  {
    if ((*(_BYTE *)(v2 + 80) & 1) != 0)
    {
LABEL_41:
      v10 = *(double *)(v2 + 88);
      goto LABEL_44;
    }
  }
  else if ((*(_BYTE *)(v2 + 80) & 1) == 0 && v5 == *(double *)(v2 + 72))
  {
    goto LABEL_41;
  }
LABEL_18:
  if ((*(_BYTE *)(v2 + 160) & 1) == 0)
  {
    if ((v4 & 1) != 0)
    {
      if ((*(_BYTE *)(v2 + 120) & 1) == 0)
        goto LABEL_19;
    }
    else if ((*(_BYTE *)(v2 + 120) & 1) != 0 || *(double *)(v2 + 112) != v3)
    {
      goto LABEL_19;
    }
    if ((v6 & 1) != 0)
    {
      if ((*(_BYTE *)(v2 + 136) & 1) == 0)
        goto LABEL_19;
    }
    else if ((*(_BYTE *)(v2 + 136) & 1) != 0 || *(double *)(v2 + 128) != v5)
    {
      goto LABEL_19;
    }
LABEL_44:
    swift_beginAccess();
    v18 = (double *)static LayoutTrace.recorder;
    if (static LayoutTrace.recorder)
    {
      swift_beginAccess();
      v18[4] = v3;
      *((_QWORD *)v18 + 5) = v4;
      v18[6] = v5;
      *((_WORD *)v18 + 28) = v6 | 0x100;
    }
    return v10;
  }
LABEL_19:
  v19 = *(_QWORD *)(v2 + 80);
  v20 = *(_BYTE *)(v2 + 104);
  v21 = *(_QWORD *)(v2 + 72);
  v22 = *(_QWORD *)(v2 + 88);
  v12 = *(_QWORD *)(v2 + 56);
  v23 = *(_QWORD *)(v2 + 96);
  v24 = *(double *)v2;
  v27 = *(_BYTE *)(v2 + 48);
  v28 = *(_QWORD *)(v2 + 24);
  v29 = *(_QWORD *)(v2 + 32);
  v25 = *(_QWORD *)(v2 + 8);
  v26 = *(_QWORD *)(v2 + 16);
  v30 = *(_QWORD *)(v2 + 40);
  v14 = swift_beginAccess();
  v15 = (double *)static LayoutTrace.recorder;
  if (static LayoutTrace.recorder)
  {
    v14 = swift_beginAccess();
    v15[4] = v3;
    *((_QWORD *)v15 + 5) = v4;
    v15[6] = v5;
    *((_WORD *)v15 + 28) = v6;
  }
  v10 = a2(v14);
  *(_QWORD *)(v2 + 112) = v12;
  *(_QWORD *)(v2 + 120) = v9;
  *(_QWORD *)(v2 + 128) = v21;
  *(_QWORD *)(v2 + 136) = v19;
  *(_QWORD *)(v2 + 144) = v22;
  *(_QWORD *)(v2 + 152) = v23;
  *(_BYTE *)(v2 + 160) = v20;
  *(double *)(v2 + 56) = v24;
  *(_QWORD *)(v2 + 64) = v25;
  *(_QWORD *)(v2 + 72) = v26;
  *(_QWORD *)(v2 + 80) = v28;
  *(_QWORD *)(v2 + 88) = v29;
  *(_QWORD *)(v2 + 96) = v30;
  *(_BYTE *)(v2 + 104) = v27;
  *(double *)v2 = v3;
  *(_BYTE *)(v2 + 8) = v4;
  *(double *)(v2 + 16) = v5;
  *(_BYTE *)(v2 + 24) = v6;
  *(double *)(v2 + 32) = v10;
  *(_QWORD *)(v2 + 40) = v16;
  *(_BYTE *)(v2 + 48) = 0;
  return v10;
}

uint64_t ProposedViewSize.init(_:)(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t _LayoutRoot.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

unint64_t LayoutSubviews.subscript.getter@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  _DWORD *v5;
  int *v6;
  int *v7;
  uint64_t v8;
  int v9;
  int v10;

  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(_BYTE *)(v2 + 17);
  if ((*(_BYTE *)(v2 + 16) & 1) != 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)(v3 + 16) > result)
    {
      v5 = (_DWORD *)(v3 + 12 * result);
      v6 = v5 + 8;
      v7 = v5 + 9;
      result = v5[10];
LABEL_8:
      v9 = *v7;
      v10 = *v6;
      *(_DWORD *)a2 = *(_DWORD *)v2;
      *(_DWORD *)(a2 + 4) = v10;
      *(_DWORD *)(a2 + 8) = v9;
      *(_DWORD *)(a2 + 12) = result;
      *(_BYTE *)(a2 + 16) = v4;
      return result;
    }
    __break(1u);
    goto LABEL_11;
  }
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (*(_QWORD *)(v3 + 16) > result)
  {
    v8 = v3 + 8 * result;
    v6 = (int *)(v8 + 32);
    v7 = (int *)(v8 + 36);
    goto LABEL_8;
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t LayoutSubview.place(at:anchor:proposal:)(uint64_t a1, char a2, uint64_t a3, char a4, double a5, double a6, double a7, double a8)
{
  int *v8;
  int v13;
  char v14;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  int v20;
  int v21;
  int v22;
  _QWORD v23[2];
  __int128 v24;
  __int128 v25;
  int v26;
  int v27;
  uint64_t v28;
  char v29;

  v13 = v8[1];
  v14 = *((_BYTE *)v8 + 16);
  v26 = *v8;
  v27 = v13;
  v28 = *((_QWORD *)v8 + 1);
  v29 = v14;
  v20 = v26;
  v21 = v13;
  v22 = v28;
  v16 = a1;
  LOBYTE(v17) = a2 & 1;
  *(_QWORD *)&v18 = a3;
  BYTE8(v18) = a4 & 1;
  LayoutProxy.dimensions(in:)((uint64_t)&v16, (uint64_t)v23);
  v16 = v23[0];
  v17 = v23[1];
  v18 = v24;
  v19 = v25;
  LayoutSubview.place(at:anchor:dimensions:)(&v16, a5, a6, a7, a8);
  return swift_release();
}

CGSize __swiftcall ProposedViewSize.replacingUnspecifiedDimensions(by:)(CGSize by)
{
  double v1;
  char v2;
  double v3;
  char v4;

  if ((v2 & 1) == 0)
    by.width = v1;
  if ((v4 & 1) == 0)
    by.height = v3;
  return by;
}

uint64_t protocol witness for Layout.spacing(subviews:cache:) in conformance GeometryReaderLayout@<X0>(uint64_t a1@<X0>, unint64_t a2@<X8>)
{
  int v2;

  if (*(_BYTE *)(a1 + 17))
    v2 = 256;
  else
    v2 = 0;
  return specialized Layout.spacing(subviews:cache:)(*(_QWORD *)(a1 + 8), v2 | *(unsigned __int8 *)(a1 + 16), a2);
}

uint64_t specialized Layout.spacing(subviews:cache:)@<X0>(uint64_t a1@<X1>, unsigned int a2@<W2>, unint64_t a3@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  int v7;
  _DWORD *v8;
  __int128 *InputValue;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  unint64_t v41;
  double v42;
  double v43;
  double v44;
  _BOOL4 v45;
  double v46;
  unint64_t v47;
  Swift::UInt v48;
  unint64_t v49;
  Swift::UInt8 v50;
  int v51;
  char v52;
  unint64_t v53;
  uint64_t v54;
  _BOOL8 v55;
  uint64_t v56;
  char v57;
  unint64_t v58;
  char v59;
  uint64_t v60;
  double v61;
  double v62;
  double v63;
  double v64;
  unint64_t v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  char v83;
  uint64_t result;
  uint64_t v86;
  int v87;
  uint64_t v88;
  unint64_t v90;
  int v91;
  _QWORD *v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  double v99;
  uint64_t v100;
  double v101;
  double v102;
  unsigned __int8 v103;
  unsigned __int8 v104[16];

  v3 = a3;
  if (!*(_QWORD *)(a1 + 16))
  {
    if (one-time initialization token for zero != -1)
      goto LABEL_130;
    goto LABEL_119;
  }
  v4 = a1;
  v5 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v3 = *(_QWORD *)(v4 + 16);
  swift_bridgeObjectRetain();
  if (!v3)
  {
    LOBYTE(v7) = 2;
LABEL_121:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a3 = v5;
    *(_BYTE *)(a3 + 8) = v7;
    return result;
  }
  v6 = 0;
  v88 = v4 + 32;
  v87 = *MEMORY[0x24BE096C0];
  v7 = 2;
  v86 = v4;
  while (1)
  {
    if ((a2 & 1) != 0)
    {
      if (v6 >= v3)
        goto LABEL_128;
      v8 = (_DWORD *)(v88 + 12 * v6);
    }
    else
    {
      if (v6 >= v3)
        goto LABEL_127;
      v8 = (_DWORD *)(v88 + 8 * v6);
    }
    if (v6 >= v3)
      goto LABEL_126;
    v92 = v5;
    if (*v8 == v87)
    {
      InputValue = &static LayoutComputer.defaultValue;
      if (one-time initialization token for defaultValue != -1)
      {
        swift_once();
        InputValue = &static LayoutComputer.defaultValue;
      }
    }
    else
    {
      InputValue = (__int128 *)AGGraphGetInputValue();
    }
    v10 = *(_QWORD *)InputValue;
    v11 = one-time initialization token for lockAssertionsAreEnabled;
    swift_retain();
    if (v11 != -1)
      swift_once();
    v3 = 1;
    if (lockAssertionsAreEnabled)
    {
      if (one-time initialization token for _lock != -1)
        swift_once();
      if (!_MovableLockIsOwner(static Update._lock))
      {
LABEL_132:
        result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
    }
    (*(void (**)(unsigned __int8 *__return_ptr))(*(_QWORD *)v10 + 112))(v104);
    swift_release();
    v12 = *(_QWORD *)v104;
    if (v7 == 2)
      v7 = (a2 >> 8) & 1;
    v104[0] = v7 & 1;
    AbsoluteEdge.Set.init(_:layoutDirection:)(v104, &v103);
    v13 = v103;
    if (!v103)
    {
      swift_bridgeObjectRelease();
      v5 = v92;
      goto LABEL_5;
    }
    v90 = v6;
    v91 = v7;
    v14 = v12 + 64;
    v15 = 1 << *(_BYTE *)(v12 + 32);
    v16 = v15 < 64 ? ~(-1 << v15) : -1;
    v17 = v16 & *(_QWORD *)(v12 + 64);
    v18 = (unint64_t)(v15 + 63) >> 6;
    swift_bridgeObjectRetain_n();
    v19 = 0;
    v20 = MEMORY[0x24BEE4AF8];
    v97 = v12;
    while (1)
    {
      if (v17)
      {
        v21 = __clz(__rbit64(v17));
        v17 &= v17 - 1;
        v22 = v21 | (v19 << 6);
        goto LABEL_51;
      }
      v23 = v19 + 1;
      if (__OFADD__(v19, 1))
      {
        __break(1u);
LABEL_123:
        __break(1u);
LABEL_124:
        __break(1u);
LABEL_125:
        __break(1u);
LABEL_126:
        __break(1u);
LABEL_127:
        __break(1u);
LABEL_128:
        __break(1u);
        goto LABEL_129;
      }
      if (v23 >= v18)
        goto LABEL_63;
      v24 = *(_QWORD *)(v14 + 8 * v23);
      ++v19;
      if (!v24)
      {
        v19 = v23 + 1;
        if (v23 + 1 >= v18)
          goto LABEL_63;
        v24 = *(_QWORD *)(v14 + 8 * v19);
        if (!v24)
        {
          v19 = v23 + 2;
          if (v23 + 2 >= v18)
            goto LABEL_63;
          v24 = *(_QWORD *)(v14 + 8 * v19);
          if (!v24)
          {
            v19 = v23 + 3;
            if (v23 + 3 >= v18)
              goto LABEL_63;
            v24 = *(_QWORD *)(v14 + 8 * v19);
            if (!v24)
            {
              v19 = v23 + 4;
              if (v23 + 4 >= v18)
                goto LABEL_63;
              v24 = *(_QWORD *)(v14 + 8 * v19);
              if (!v24)
              {
                v19 = v23 + 5;
                if (v23 + 5 >= v18)
                  goto LABEL_63;
                v24 = *(_QWORD *)(v14 + 8 * v19);
                if (!v24)
                  break;
              }
            }
          }
        }
      }
LABEL_50:
      v17 = (v24 - 1) & v24;
      v22 = __clz(__rbit64(v24)) + (v19 << 6);
LABEL_51:
      v26 = *(_QWORD *)(v12 + 48) + 16 * v22;
      v27 = *(unsigned __int8 *)(v26 + 8);
      if (v27 - 9 <= 0xEE)
        goto LABEL_56;
      if ((v27 & 0x80) == 0)
      {
        if (v27 >= 8)
          goto LABEL_56;
        v28 = 1 << v27;
        goto LABEL_55;
      }
      if (v27 <= 0xF8)
      {
LABEL_56:
        v29 = *(_QWORD *)v26;
        v30 = *(_QWORD *)(v12 + 56) + 40 * v22;
        v31 = *(_QWORD *)v30;
        v32 = *(_QWORD *)(v30 + 8);
        v98 = *(_QWORD *)(v30 + 16);
        v95 = *(_QWORD *)(v30 + 24);
        v93 = *(_BYTE *)(v30 + 32);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)v104 = v20;
        v100 = v32;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v20 + 16) + 1, 1);
          v20 = *(_QWORD *)v104;
        }
        v35 = *(_QWORD *)(v20 + 16);
        v34 = *(_QWORD *)(v20 + 24);
        if (v35 >= v34 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1);
          v20 = *(_QWORD *)v104;
        }
        *(_QWORD *)(v20 + 16) = v35 + 1;
        v36 = v20 + 56 * v35;
        *(_QWORD *)(v36 + 32) = v29;
        *(_BYTE *)(v36 + 40) = v27;
        *(_QWORD *)(v36 + 48) = v31;
        *(_QWORD *)(v36 + 56) = v100;
        v12 = v97;
        *(_QWORD *)(v36 + 64) = v98;
        *(_QWORD *)(v36 + 72) = v95;
        *(_BYTE *)(v36 + 80) = v93;
        v3 = 1;
      }
      else
      {
        v28 = 0;
LABEL_55:
        if ((v28 & ~v13) == 0)
          goto LABEL_56;
      }
    }
    v25 = v23 + 6;
    if (v25 < v18)
      break;
LABEL_63:
    swift_release();
    v37 = specialized _arrayForceCast<A, B>(_:)(v20);
    swift_release();
    v5 = v92;
    v3 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v104 = v92;
    v38 = *(_QWORD *)(v37 + 16);
    swift_bridgeObjectRetain();
    v96 = v38;
    if (v38)
    {
      v39 = 0;
      v40 = (unsigned __int8 *)(v37 + 80);
      v94 = v37;
      while (1)
      {
        if (v39 >= *(_QWORD *)(v37 + 16))
          goto LABEL_123;
        v48 = *((_QWORD *)v40 - 6);
        if (v48 == 1)
          goto LABEL_4;
        v49 = v39;
        v50 = *(v40 - 40);
        v46 = *((double *)v40 - 4);
        v99 = *((double *)v40 - 3);
        v101 = *((double *)v40 - 2);
        v102 = *((double *)v40 - 1);
        v51 = *v40;
        v53 = specialized __RawDictionaryStorage.find<A>(_:)(v48, v50);
        v54 = v5[2];
        v55 = (v52 & 1) == 0;
        v56 = v54 + v55;
        if (__OFADD__(v54, v55))
          goto LABEL_124;
        v57 = v52;
        if (v5[3] >= v56)
        {
          if ((v3 & 1) == 0)
            specialized _NativeDictionary.copy()();
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v56, v3 & 1);
          v58 = specialized __RawDictionaryStorage.find<A>(_:)(v48, v50);
          if ((v57 & 1) != (v59 & 1))
          {
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            goto LABEL_132;
          }
          v53 = v58;
        }
        v5 = *(_QWORD **)v104;
        if ((v57 & 1) != 0)
          break;
        *(_QWORD *)(*(_QWORD *)v104 + 8 * (v53 >> 6) + 64) |= 1 << v53;
        v75 = v5[6] + 16 * v53;
        *(_QWORD *)v75 = v48;
        *(_BYTE *)(v75 + 8) = v50;
        v76 = v5[7] + 40 * v53;
        *(double *)v76 = v46;
        *(double *)(v76 + 8) = v99;
        *(double *)(v76 + 16) = v101;
        *(double *)(v76 + 24) = v102;
        *(_BYTE *)(v76 + 32) = v51;
        v77 = v5[2];
        v78 = __OFADD__(v77, 1);
        v79 = v77 + 1;
        if (v78)
          goto LABEL_125;
        v5[2] = v79;
        v37 = v94;
        v65 = v49;
LABEL_71:
        v39 = v65 + 1;
        v40 += 56;
        v3 = 1;
        if (v96 == v39)
          goto LABEL_4;
      }
      v60 = *(_QWORD *)(*(_QWORD *)v104 + 56) + 40 * v53;
      v61 = *(double *)v60;
      v62 = *(double *)(v60 + 8);
      v64 = *(double *)(v60 + 16);
      v63 = *(double *)(v60 + 24);
      v47 = *(unsigned __int8 *)(v60 + 32);
      if (v51)
      {
        v65 = v49;
        if (v51 == 1)
        {
          v37 = v94;
          if ((_DWORD)v47 == 1)
          {
            v66 = v46;
            v43 = v99;
            v44 = v101;
            v67 = v99;
            v68 = v101;
            v42 = v102;
            v69 = *(double *)v60;
            v70 = *(double *)(v60 + 8);
            v71 = *(double *)(v60 + 16);
            if (v46 != v61 || v99 != v62 || v101 != v64 || v102 != v63)
            {
LABEL_111:
              v45 = v66 + v67 + v68 < v69 + v70 + v71;
              goto LABEL_67;
            }
            LOBYTE(v47) = 1;
LABEL_70:
            *(double *)v60 = v46;
            *(double *)(v60 + 8) = v43;
            *(double *)(v60 + 16) = v44;
            *(double *)(v60 + 24) = v42;
            *(_BYTE *)(v60 + 32) = v47;
            goto LABEL_71;
          }
          v41 = 1;
        }
        else
        {
          v37 = v94;
          if ((_DWORD)v47 == 2)
          {
            v66 = v46;
            v43 = v99;
            v44 = v101;
            v67 = v99;
            v68 = v101;
            v42 = v102;
            v69 = *(double *)v60;
            v70 = *(double *)(v60 + 8);
            v71 = *(double *)(v60 + 16);
            if (v46 != v61 || v99 != v62 || v101 != v64 || v102 != v63)
              goto LABEL_111;
            LOBYTE(v47) = 2;
            goto LABEL_70;
          }
          v41 = 2;
        }
      }
      else
      {
        v65 = v49;
        if (!*(_BYTE *)(v60 + 32))
        {
          v37 = v94;
          if (v46 != v61)
          {
            v45 = v46 < v61;
            v42 = v102;
            v43 = v99;
            v44 = v101;
LABEL_67:
            if (v45)
            {
              v46 = *(double *)v60;
              v43 = *(double *)(v60 + 8);
              v44 = *(double *)(v60 + 16);
              v42 = *(double *)(v60 + 24);
            }
            else
            {
              LOBYTE(v47) = v51;
            }
            goto LABEL_70;
          }
          LOBYTE(v47) = 0;
          v42 = v102;
          v43 = v99;
          v44 = v101;
          goto LABEL_70;
        }
        v41 = 0;
        v37 = v94;
      }
      v42 = v102;
      v43 = v99;
      v44 = v101;
      v45 = v41 < v47;
      goto LABEL_67;
    }
LABEL_4:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v4 = v86;
    v6 = v90;
    v7 = v91;
LABEL_5:
    ++v6;
    v3 = *(_QWORD *)(v4 + 16);
    if (v6 == v3)
      goto LABEL_121;
  }
  v24 = *(_QWORD *)(v14 + 8 * v25);
  if (v24)
  {
    v19 = v25;
    goto LABEL_50;
  }
  while (1)
  {
    v19 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v19 >= v18)
      goto LABEL_63;
    v24 = *(_QWORD *)(v14 + 8 * v19);
    ++v25;
    if (v24)
      goto LABEL_50;
  }
LABEL_129:
  __break(1u);
LABEL_130:
  swift_once();
LABEL_119:
  v83 = byte_2561B61A8;
  *(_QWORD *)v3 = static ViewSpacing.zero;
  *(_BYTE *)(v3 + 8) = v83;
  return swift_bridgeObjectRetain();
}

uint64_t Layout.spacing(subviews:cache:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;
  unsigned __int8 v4;
  char v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  _DWORD *v11;
  __int128 *InputValue;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  char v39;
  uint64_t v40;
  unint64_t v41;
  unsigned __int8 *v42;
  unint64_t v43;
  double v44;
  double v45;
  unint64_t v46;
  double v47;
  _BOOL4 v48;
  double v49;
  unint64_t v50;
  Swift::UInt v51;
  uint64_t v52;
  Swift::UInt8 v53;
  int v54;
  char v55;
  unint64_t v56;
  uint64_t v57;
  _BOOL8 v58;
  uint64_t v59;
  char v60;
  unint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  BOOL v81;
  BOOL v84;
  uint64_t v86;
  int v87;
  uint64_t v88;
  unint64_t v89;
  int v90;
  unint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  double v98;
  uint64_t v99;
  double v100;
  uint64_t v101;
  double v102;
  unsigned __int8 v103;
  unsigned __int8 v104;
  char v105;
  _QWORD v106[2];
  char v107;
  unsigned __int8 v108;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_BYTE *)(a1 + 16);
  v4 = *(_BYTE *)(a1 + 17);
  LODWORD(v106[0]) = *(_DWORD *)a1;
  v106[1] = v2;
  v107 = v3;
  v108 = v4;
  lazy protocol witness table accessor for type LayoutSubviews and conformance LayoutSubviews();
  if ((Collection.isEmpty.getter() & 1) != 0)
  {
    if (one-time initialization token for zero != -1)
      goto LABEL_127;
    goto LABEL_3;
  }
  v91 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v105 = v3;
  v104 = v4;
  v7 = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRetain();
  if (!v7)
  {
    LOBYTE(v9) = 2;
LABEL_118:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a2 = v91;
    *(_BYTE *)(a2 + 8) = v9;
    return result;
  }
  v8 = 0;
  v88 = v2 + 32;
  v9 = 2;
  v87 = *MEMORY[0x24BE096C0];
  v86 = v2;
  while (1)
  {
    v10 = v104;
    if ((v3 & 1) != 0)
    {
      if (v8 >= v7)
        goto LABEL_124;
      v11 = (_DWORD *)(v88 + 12 * v8);
    }
    else
    {
      if (v8 >= v7)
        goto LABEL_125;
      v11 = (_DWORD *)(v88 + 8 * v8);
    }
    if (v8 >= v7)
      goto LABEL_123;
    if (*v11 == v87)
    {
      InputValue = &static LayoutComputer.defaultValue;
      if (one-time initialization token for defaultValue != -1)
      {
        swift_once();
        InputValue = &static LayoutComputer.defaultValue;
      }
    }
    else
    {
      InputValue = (__int128 *)AGGraphGetInputValue();
    }
    v13 = *(_QWORD *)InputValue;
    v14 = one-time initialization token for lockAssertionsAreEnabled;
    swift_retain();
    if (v14 != -1)
      swift_once();
    if (lockAssertionsAreEnabled)
    {
      if (one-time initialization token for _lock != -1)
        swift_once();
      if (!_MovableLockIsOwner(static Update._lock))
      {
LABEL_129:
        result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
    }
    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v13 + 112))(v106);
    swift_release();
    v15 = v106[0];
    if (v9 == 2)
      v9 = v10;
    LOBYTE(v106[0]) = v9 & 1;
    AbsoluteEdge.Set.init(_:layoutDirection:)((unsigned __int8 *)v106, &v103);
    v16 = v103;
    if (!v103)
    {
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    v89 = v8;
    v90 = v9;
    v17 = v15 + 64;
    v18 = 1 << *(_BYTE *)(v15 + 32);
    v19 = v18 < 64 ? ~(-1 << v18) : -1;
    v20 = v19 & *(_QWORD *)(v15 + 64);
    v21 = (unint64_t)(v18 + 63) >> 6;
    swift_bridgeObjectRetain_n();
    v22 = 0;
    v23 = MEMORY[0x24BEE4AF8];
    v94 = v15;
    while (1)
    {
      if (v20)
      {
        v24 = __clz(__rbit64(v20));
        v20 &= v20 - 1;
        v25 = v24 | (v22 << 6);
        goto LABEL_51;
      }
      v26 = v22 + 1;
      if (__OFADD__(v22, 1))
      {
        __break(1u);
LABEL_120:
        __break(1u);
LABEL_121:
        __break(1u);
LABEL_122:
        __break(1u);
LABEL_123:
        __break(1u);
LABEL_124:
        __break(1u);
LABEL_125:
        __break(1u);
        goto LABEL_126;
      }
      if (v26 >= v21)
        goto LABEL_61;
      v27 = *(_QWORD *)(v17 + 8 * v26);
      ++v22;
      if (!v27)
      {
        v22 = v26 + 1;
        if (v26 + 1 >= v21)
          goto LABEL_61;
        v27 = *(_QWORD *)(v17 + 8 * v22);
        if (!v27)
        {
          v22 = v26 + 2;
          if (v26 + 2 >= v21)
            goto LABEL_61;
          v27 = *(_QWORD *)(v17 + 8 * v22);
          if (!v27)
          {
            v22 = v26 + 3;
            if (v26 + 3 >= v21)
              goto LABEL_61;
            v27 = *(_QWORD *)(v17 + 8 * v22);
            if (!v27)
            {
              v22 = v26 + 4;
              if (v26 + 4 >= v21)
                goto LABEL_61;
              v27 = *(_QWORD *)(v17 + 8 * v22);
              if (!v27)
                break;
            }
          }
        }
      }
LABEL_50:
      v20 = (v27 - 1) & v27;
      v25 = __clz(__rbit64(v27)) + (v22 << 6);
LABEL_51:
      v29 = *(_QWORD *)(v15 + 48) + 16 * v25;
      v30 = *(unsigned __int8 *)(v29 + 8);
      if (v30 - 9 < 0xEF || (v30 & 0x80) != 0 || v30 > 7 || ((1 << v30) & ~v16) == 0)
      {
        v31 = *(_QWORD *)(v15 + 56) + 40 * v25;
        v32 = *(_QWORD *)v31;
        v99 = *(_QWORD *)(v31 + 8);
        v101 = *(_QWORD *)v29;
        v95 = *(_QWORD *)(v31 + 24);
        v97 = *(_QWORD *)(v31 + 16);
        v92 = *(_BYTE *)(v31 + 32);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v106[0] = v23;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v23 + 16) + 1, 1);
          v23 = v106[0];
        }
        v35 = *(_QWORD *)(v23 + 16);
        v34 = *(_QWORD *)(v23 + 24);
        if (v35 >= v34 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1);
          v23 = v106[0];
        }
        *(_QWORD *)(v23 + 16) = v35 + 1;
        v36 = v23 + 56 * v35;
        *(_QWORD *)(v36 + 32) = v101;
        *(_BYTE *)(v36 + 40) = v30;
        *(_QWORD *)(v36 + 48) = v32;
        *(_QWORD *)(v36 + 56) = v99;
        v15 = v94;
        *(_QWORD *)(v36 + 64) = v97;
        *(_QWORD *)(v36 + 72) = v95;
        *(_BYTE *)(v36 + 80) = v92;
      }
    }
    v28 = v26 + 5;
    if (v28 < v21)
      break;
LABEL_61:
    swift_release();
    v37 = specialized _arrayForceCast<A, B>(_:)(v23);
    swift_release();
    v38 = (_QWORD *)v91;
    v39 = swift_isUniquelyReferenced_nonNull_native();
    v106[0] = v91;
    v40 = *(_QWORD *)(v37 + 16);
    swift_bridgeObjectRetain();
    v93 = v40;
    if (v40)
    {
      v41 = 0;
      v42 = (unsigned __int8 *)(v37 + 80);
      while (1)
      {
        if (v41 >= *(_QWORD *)(v37 + 16))
          goto LABEL_120;
        v51 = *((_QWORD *)v42 - 6);
        if (v51 == 1)
          goto LABEL_6;
        v52 = v37;
        v53 = *(v42 - 40);
        v49 = *((double *)v42 - 4);
        v96 = v41;
        v98 = *((double *)v42 - 3);
        v100 = *((double *)v42 - 2);
        v102 = *((double *)v42 - 1);
        v54 = *v42;
        v56 = specialized __RawDictionaryStorage.find<A>(_:)(v51, v53);
        v57 = v38[2];
        v58 = (v55 & 1) == 0;
        v59 = v57 + v58;
        if (__OFADD__(v57, v58))
          goto LABEL_121;
        v60 = v55;
        if (v38[3] < v59)
          break;
        if ((v39 & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          goto LABEL_76;
        }
        v38 = (_QWORD *)v106[0];
        if ((v55 & 1) != 0)
        {
LABEL_81:
          v68 = v38[7] + 40 * v56;
          v69 = *(double *)v68;
          v70 = *(double *)(v68 + 8);
          v72 = *(double *)(v68 + 16);
          v71 = *(double *)(v68 + 24);
          v50 = *(unsigned __int8 *)(v68 + 32);
          if (v54)
          {
            if (v54 == 1)
            {
              v37 = v52;
              if ((_DWORD)v50 == 1)
              {
                v73 = v49;
                v47 = v98;
                v45 = v100;
                v74 = v98;
                v75 = v100;
                v44 = v102;
                v76 = *(double *)v68;
                v77 = *(double *)(v68 + 8);
                v78 = *(double *)(v68 + 16);
                v81 = v49 == v69 && v98 == v70 && v100 == v72 && v102 == v71;
                v46 = v96;
                if (!v81)
                  goto LABEL_109;
                LOBYTE(v50) = 1;
LABEL_68:
                *(double *)v68 = v49;
                *(double *)(v68 + 8) = v47;
                *(double *)(v68 + 16) = v45;
                *(double *)(v68 + 24) = v44;
                *(_BYTE *)(v68 + 32) = v50;
                goto LABEL_69;
              }
              v43 = 1;
LABEL_64:
              v45 = v100;
              v44 = v102;
              v46 = v96;
              v47 = v98;
              v48 = v43 < v50;
            }
            else
            {
              v37 = v52;
              if ((_DWORD)v50 != 2)
              {
                v43 = 2;
                goto LABEL_64;
              }
              v73 = v49;
              v47 = v98;
              v45 = v100;
              v74 = v98;
              v75 = v100;
              v44 = v102;
              v76 = *(double *)v68;
              v77 = *(double *)(v68 + 8);
              v78 = *(double *)(v68 + 16);
              v84 = v49 == v69 && v98 == v70 && v100 == v72 && v102 == v71;
              v46 = v96;
              if (v84)
              {
                LOBYTE(v50) = 2;
                goto LABEL_68;
              }
LABEL_109:
              v48 = v73 + v74 + v75 < v76 + v77 + v78;
            }
          }
          else
          {
            if (*(_BYTE *)(v68 + 32))
            {
              v43 = 0;
              v37 = v52;
              goto LABEL_64;
            }
            v37 = v52;
            if (v49 == v69)
            {
              LOBYTE(v50) = 0;
              v45 = v100;
              v44 = v102;
              v46 = v96;
              v47 = v98;
              goto LABEL_68;
            }
            v48 = v49 < v69;
            v45 = v100;
            v44 = v102;
            v46 = v96;
            v47 = v98;
          }
          if (v48)
          {
            v49 = *(double *)v68;
            v47 = *(double *)(v68 + 8);
            v45 = *(double *)(v68 + 16);
            v44 = *(double *)(v68 + 24);
          }
          else
          {
            LOBYTE(v50) = v54;
          }
          goto LABEL_68;
        }
LABEL_77:
        v38[(v56 >> 6) + 8] |= 1 << v56;
        v63 = v38[6] + 16 * v56;
        *(_QWORD *)v63 = v51;
        *(_BYTE *)(v63 + 8) = v53;
        v64 = v38[7] + 40 * v56;
        *(double *)v64 = v49;
        *(double *)(v64 + 8) = v98;
        *(double *)(v64 + 16) = v100;
        *(double *)(v64 + 24) = v102;
        *(_BYTE *)(v64 + 32) = v54;
        v65 = v38[2];
        v66 = __OFADD__(v65, 1);
        v67 = v65 + 1;
        if (v66)
          goto LABEL_122;
        v38[2] = v67;
        v46 = v96;
        v37 = v52;
LABEL_69:
        v41 = v46 + 1;
        v42 += 56;
        v39 = 1;
        if (v93 == v41)
          goto LABEL_6;
      }
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v59, v39 & 1);
      v61 = specialized __RawDictionaryStorage.find<A>(_:)(v51, v53);
      if ((v60 & 1) != (v62 & 1))
      {
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        goto LABEL_129;
      }
      v56 = v61;
LABEL_76:
      v38 = (_QWORD *)v106[0];
      if ((v60 & 1) != 0)
        goto LABEL_81;
      goto LABEL_77;
    }
LABEL_6:
    v91 = (unint64_t)v38;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v3 = v105;
    v2 = v86;
    v8 = v89;
    v9 = v90;
LABEL_7:
    ++v8;
    v7 = *(_QWORD *)(v2 + 16);
    if (v8 == v7)
      goto LABEL_118;
  }
  v27 = *(_QWORD *)(v17 + 8 * v28);
  if (v27)
  {
    v22 = v28;
    goto LABEL_50;
  }
  while (1)
  {
    v22 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v22 >= v21)
      goto LABEL_61;
    v27 = *(_QWORD *)(v17 + 8 * v22);
    ++v28;
    if (v27)
      goto LABEL_50;
  }
LABEL_126:
  __break(1u);
LABEL_127:
  swift_once();
LABEL_3:
  v5 = byte_2561B61A8;
  *(_QWORD *)a2 = static ViewSpacing.zero;
  *(_BYTE *)(a2 + 8) = v5;
  return swift_bridgeObjectRetain();
}

{
  return Layout.spacing(subviews:cache:)(a1, a2);
}

uint64_t Layout.updateLayoutComputer<A>(rule:layoutContext:children:)(uint64_t a1, int *a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[6];
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  _BYTE v22[16];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[2];
  v12 = *a3;
  v13 = *((_QWORD *)a3 + 1);
  v23 = a4;
  v24 = a5;
  v25 = a6;
  v26 = a7;
  v27 = v9;
  v28 = v10;
  v29 = v11;
  v30 = v12;
  v31 = v13;
  v16[2] = a4;
  v16[3] = a5;
  v16[4] = a6;
  v16[5] = a7;
  v17 = v9;
  v18 = v10;
  v19 = v11;
  v20 = v12;
  v21 = v13;
  v14 = type metadata accessor for ViewLayoutEngine(0, a4, a6, a4);
  return StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for closure #1 in Layout.updateLayoutComputer<A>(rule:layoutContext:children:), (uint64_t)v22, (void (*)(void))partial apply for closure #2 in Layout.updateLayoutComputer<A>(rule:layoutContext:children:), (uint64_t)v16, a5, v14, a7, (uint64_t)&protocol witness table for ViewLayoutEngine<A>);
}

void protocol witness for static Layout.layoutProperties.getter in conformance AnyLayout(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 2;
  *(_BYTE *)(a1 + 2) = 0;
}

void static Layout.layoutProperties.getter(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 2;
  *(_BYTE *)(a1 + 2) = 0;
}

{
  static Layout.layoutProperties.getter(a1);
}

void protocol witness for static Layout._makeLayoutView(root:inputs:body:) in conformance _ZStackLayout(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void (*v15)(int *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  int v29;

  v9 = *a1;
  v10 = *a2;
  v11 = *((_DWORD *)a2 + 2);
  v12 = a2[2];
  v18 = *(_OWORD *)(a2 + 5);
  v19 = *(_OWORD *)(a2 + 3);
  v17 = *(_OWORD *)(a2 + 7);
  v13 = a2[9];
  v14 = *((_DWORD *)a2 + 20);
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v29 = v9;
  v21 = v10;
  v22 = v11;
  v23 = v12;
  v24 = v19;
  v25 = v18;
  v26 = v17;
  v27 = v13;
  v28 = v14;
  v15 = *(void (**)(int *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                                    + 0xB0);
  v16 = static CoreGlue.shared;
  v15(&v29, &v21, a3, a4, a5, a6);

}

uint64_t static Layout.makeLayoutView(root:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr, uint64_t, Swift::UInt *)@<X2>, ValueMetadata *a4@<X4>, unint64_t a5@<X5>, _QWORD *a6@<X8>)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(Swift::UInt *__return_ptr, ValueMetadata *, unint64_t);
  int v18;
  uint64_t v19;
  uint64_t v20;
  Swift::UInt value;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  Swift::UInt v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  char v37;
  uint64_t v38;
  unint64_t v41;
  unint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  char v52;
  char v53;
  char v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[5];
  __int128 v70[2];
  char v71;
  Swift::UInt v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD v85[11];

  v85[9] = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)a2;
  v9 = *(_DWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  v12 = *(_DWORD *)(a2 + 24);
  v11 = *(_DWORD *)(a2 + 28);
  v13 = *(_DWORD *)(a2 + 32);
  v14 = *(_DWORD *)(a2 + 36);
  v15 = *(_QWORD *)(a2 + 40);
  v16 = *(_QWORD *)(a2 + 48);
  v47 = *(_DWORD *)(a2 + 56);
  v48 = *(_QWORD *)(a2 + 60);
  v49 = *(_QWORD *)(a2 + 68);
  v50 = *(_QWORD *)(a2 + 76);
  v51 = *a1;
  v72 = v8;
  v74 = v10;
  v43 = v12;
  v44 = v9;
  LODWORD(v73) = v9;
  v75 = v12;
  v76 = v11;
  v45 = v11;
  v46 = v13;
  v77 = v13;
  v78 = v14;
  v79 = v15;
  (*(void (**)(int *, Swift::UInt *, ValueMetadata *))(*(_QWORD *)(a5 + 8) + 48))(&v51, &v72, a4);
  v41 = (unint64_t)a4;
  v42 = a5;
  if (a4 == &type metadata for AnyLayout)
  {
    v22 = (v14 & 0xFFFFFFFB ^ 8) & v14;
    LODWORD(v72) = v51;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for Axis?, (uint64_t)&type metadata for Axis, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    lazy protocol witness table accessor for type AnyLayoutProperties and conformance AnyLayoutProperties();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v23 = Attribute.init<A>(body:value:flags:update:)();
    v24 = swift_retain();
    v25 = specialized find<A>(_:key:)(v24);
    if (!v25 || (value = v8, v23 != *(_DWORD *)(v25 + 72)))
    {
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TypedElement<DynamicStackOrientation>, (uint64_t)&type metadata for DynamicStackOrientation, (uint64_t)&protocol witness table for DynamicStackOrientation, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
      *(_DWORD *)(swift_allocObject() + 72) = v23;
      value = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for DynamicStackOrientation, 0, v8).value;
    }
    swift_release();
    v38 = 0;
    v37 = 2;
  }
  else
  {
    v17 = *(void (**)(Swift::UInt *__return_ptr, ValueMetadata *, unint64_t))(a5 + 24);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17(&v72, a4, a5);
    LOBYTE(v38) = BYTE1(v72);
    BYTE4(v38) = BYTE2(v72);
    if (v72 == 2)
    {
      v18 = *MEMORY[0x24BE096C0];
      v19 = swift_retain();
      v20 = specialized find<A>(_:key:)(v19);
      if (!v20 || (value = v8, v18 != *(_DWORD *)(v20 + 72)))
      {
        type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TypedElement<DynamicStackOrientation>, (uint64_t)&type metadata for DynamicStackOrientation, (uint64_t)&protocol witness table for DynamicStackOrientation, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
        *(_DWORD *)(swift_allocObject() + 72) = v18;
        value = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for DynamicStackOrientation, 0, v8).value;
      }
      swift_release();
      v37 = 2;
      v22 = v14 & 0xFFFFFFF3;
    }
    else
    {
      v37 = v72;
      if ((v72 & 1) != 0)
        v22 = v14 & 0xFFFFFFF3 | 4;
      else
        v22 = v14 | 0xC;
      value = v8;
    }
  }
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v26 = specialized find<A>(_:key:)(value);
  if (v26)
  {
    v27 = *(_BYTE *)(v26 + 72);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release_n();
    if ((v27 & 1) == 0)
    {
      v28 = value;
      goto LABEL_26;
    }
    swift_retain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    v29 = specialized find<A>(_:key:)(value);
    if (v29)
      v30 = *(_QWORD *)(v29 + 72) | 0x4000;
    else
      v30 = 0x4000;
    swift_bridgeObjectRelease();
    swift_release();
    swift_release_n();
    v31 = swift_retain();
    v32 = specialized find<A>(_:key:)(v31);
    if (!v32 || (v28 = value, v30 != *(_QWORD *)(v32 + 72)))
    {
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<ViewListOptionsInput>, (uint64_t)&type metadata for ViewListOptionsInput, (uint64_t)&protocol witness table for ViewListOptionsInput, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
      *(_QWORD *)(swift_allocObject() + 72) = v30;
      v28 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for ViewListOptionsInput, 0, value).value;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v28 = value;
  }
  swift_release();
LABEL_26:
  v72 = v28;
  v74 = v10;
  LODWORD(v73) = v44;
  v75 = v43;
  v76 = v45;
  v77 = v46;
  v78 = v22;
  v79 = v15;
  v80 = v16;
  v81 = v47;
  v82 = v48;
  v83 = v49;
  v84 = v50;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v33 = swift_bridgeObjectRetain();
  a3(v85, v33, &v72);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined init with copy of _ViewListOutputs.Views((uint64_t)v85, (uint64_t)v70);
  if ((v71 & 1) != 0)
  {
    v34 = v70[0];
    if (*((_QWORD *)&v70[0] + 1))
    {
      LODWORD(v72) = v70[0];
      v73 = *((_QWORD *)&v70[0] + 1);
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for ViewList();
      lazy protocol witness table accessor for type _ViewListOutputs.ApplyModifiers and conformance _ViewListOutputs.ApplyModifiers();
      swift_retain();
      v34 = Attribute.init<A>(body:value:flags:update:)();
      swift_release();
    }
    LODWORD(v56) = v51;
    v72 = v28;
    v74 = v10;
    LODWORD(v73) = v44;
    v75 = v43;
    v76 = v45;
    v77 = v46;
    v78 = v22;
    v79 = v15;
    v80 = v16;
    v81 = v47;
    v82 = v48;
    v83 = v49;
    v84 = v50;
    LOBYTE(v69[0]) = v37;
    BYTE1(v69[0]) = v38;
    BYTE2(v69[0]) = BYTE4(v38);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    static Layout.makeDynamicView(root:inputs:properties:list:)(&v56, (uint64_t)&v72, v34, v41, v42, a6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    outlined init with take of ScrollStateRequest(v70, (uint64_t)v69);
    if ((v22 & 0x800) != 0)
    {
      v55 = v51;
      v72 = v28;
      v74 = v10;
      LODWORD(v73) = v44;
      v75 = v43;
      v76 = v45;
      v77 = v46;
      v78 = v22;
      v79 = v15;
      v80 = v16;
      v81 = v47;
      v82 = v48;
      v83 = v49;
      v84 = v50;
      v52 = v37;
      v53 = v38;
      v54 = BYTE4(v38);
      v56 = v8;
      v57 = v44;
      v58 = v10;
      v59 = v43;
      v60 = v45;
      v61 = v46;
      v62 = v14;
      v63 = v15;
      v64 = v16;
      v65 = v47;
      v66 = v48;
      v67 = v49;
      v68 = v50;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v35 = _ViewListOutputs.makeAttribute(viewInputs:)(&v56);
      static Layout.makeDynamicView(root:inputs:properties:list:)(&v55, (uint64_t)&v72, v35, v41, v42, a6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      LODWORD(v56) = v51;
      v72 = v28;
      v74 = v10;
      LODWORD(v73) = v44;
      v75 = v43;
      v76 = v45;
      v77 = v46;
      v78 = v22;
      v79 = v15;
      v80 = v16;
      v81 = v47;
      v82 = v48;
      v83 = v49;
      v84 = v50;
      LOBYTE(v55) = v37;
      BYTE1(v55) = v38;
      BYTE2(v55) = BYTE4(v38);
      static Layout.makeStaticView(root:inputs:properties:list:)((unsigned int *)&v56, (uint64_t)&v72, (uint64_t)&v55, v69, v41, v42, (uint64_t)a6);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v69);
  }
  outlined destroy of _ViewListOutputs((uint64_t)v85);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t AnyLayoutProperties.init(layout:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t _ViewInputs.needsDynamicLayout.getter()
{
  uint64_t v0;

  return (*(unsigned __int8 *)(v0 + 37) >> 3) & 1;
}

uint64_t _ViewInputs.needsDynamicLayout.setter(uint64_t result)
{
  uint64_t v1;
  int v2;

  if ((result & 1) != 0)
    v2 = 2048;
  else
    v2 = 0;
  *(_DWORD *)(v1 + 36) = *(_DWORD *)(v1 + 36) & 0xFFFFF7FF | v2;
  return result;
}

uint64_t ViewLayoutEngine.update(layout:context:children:)(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::UInt32 v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v20;
  unint64_t KeyPath;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;

  v5 = v4;
  v26 = *MEMORY[0x24BDAC8D0];
  v8 = *(_DWORD *)(a2 + 8);
  v9 = *a3;
  v10 = *((_QWORD *)a3 + 1);
  v11 = v5 + *(int *)(a4 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)v11 = v9;
  *(_QWORD *)(v11 + 8) = v10;
  LOBYTE(v20) = HIBYTE(v8);
  KeyPath = swift_getKeyPath();
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentFetch<LayoutDirection>, (uint64_t)&type metadata for LayoutDirection, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EnvironmentFetch);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v8);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for KeyPath<EnvironmentValues, LayoutDirection>, (uint64_t)&type metadata for EnvironmentValues, (uint64_t)&type metadata for LayoutDirection, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE4698]);
  swift_retain();
  dispatch thunk of Hashable.hash(into:)();
  Hasher._finalize()();
  lazy protocol witness table accessor for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>(&lazy protocol witness table cache variable for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>, (uint64_t)&protocol conformance descriptor for EnvironmentFetch<A>);
  LOBYTE(v22) = 0;
  lazy protocol witness table accessor for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>(&lazy protocol witness table cache variable for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>, (uint64_t)&protocol conformance descriptor for EnvironmentFetch<A>);
  LOBYTE(v10) = *(_BYTE *)static Rule<>._cachedValue(options:owner:hashValue:bodyPtr:update:)();
  swift_release_n();
  *(_BYTE *)(v5 + *(int *)(a4 + 44)) = v10;
  v12 = *(_QWORD *)(a4 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v5, a1, v12);
  v13 = v5 + *(int *)(a4 + 48);
  *(_OWORD *)(v13 + 16) = 0u;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)v13 = 0u;
  *(_BYTE *)(v13 + 48) = 1;
  *(_DWORD *)(v13 + 52) = v20;
  *(_DWORD *)(v13 + 49) = v8;
  *(_OWORD *)(v13 + 88) = 0u;
  *(_OWORD *)(v13 + 72) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_BYTE *)(v13 + 104) = 1;
  *(_DWORD *)(v13 + 108) = KeyPath >> 24;
  *(_DWORD *)(v13 + 105) = KeyPath;
  *(_OWORD *)(v13 + 128) = 0u;
  *(_OWORD *)(v13 + 144) = 0u;
  *(_OWORD *)(v13 + 112) = 0u;
  *(_BYTE *)(v13 + 160) = 1;
  v14 = *(int *)(a4 + 56);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v5 + v14) = MEMORY[0x24BEE4AF8];
  v15 = v5 + *(int *)(a4 + 60);
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_BYTE *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = 0;
  *(_QWORD *)(v15 + 32) = 0;
  *(_BYTE *)(v15 + 40) = 0;
  *(_QWORD *)(v15 + 48) = 0;
  *(_QWORD *)(v15 + 56) = 0;
  *(_BYTE *)(v15 + 64) = 0;
  v16 = *(int *)(a4 + 64);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v5 + v16) = 0;
  v17 = v5 + *(int *)(a4 + 40);
  LODWORD(v16) = *(_DWORD *)v17;
  v18 = *(_QWORD *)(v17 + 8);
  LOBYTE(v8) = *(_BYTE *)(v5 + *(int *)(a4 + 44));
  swift_bridgeObjectRetain();
  v22 = v16;
  v23 = v18;
  v24 = 0;
  v25 = v8;
  (*(void (**)(uint64_t, int *, uint64_t))(*(_QWORD *)(a4 + 24) + 40))(v5 + *(int *)(a4 + 36), &v22, v12);
  return swift_bridgeObjectRelease();
}

uint64_t closure #2 in Layout.updateLayoutComputer<A>(rule:layoutContext:children:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  int v13;
  unint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int v21;
  uint64_t v22;
  _DWORD v23[3];

  v13 = a2;
  v15 = HIDWORD(a2);
  v16 = MEMORY[0x24BDAC7A8](a1);
  v18 = (char *)&v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v19 + 16))(v18, v16);
  v23[0] = v13;
  v23[1] = v15;
  v23[2] = a3;
  v21 = a4;
  v22 = a5;
  swift_bridgeObjectRetain();
  return ViewLayoutEngine.init(layout:context:children:)((uint64_t)v18, (uint64_t)v23, &v21, a6, a7, a8);
}

uint64_t ViewLayoutEngine.init(layout:context:children:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  Swift::UInt32 v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t KeyPath;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v26;
  int v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  char v35;
  uint64_t v36;
  Swift::UInt32 v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;

  v30 = a1;
  v43 = *MEMORY[0x24BDAC8D0];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v31 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v32 = AssociatedTypeWitness;
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v29 = (char *)&v26 - v12;
  v13 = *(_DWORD *)(a2 + 8);
  v28 = *(unsigned int *)(a2 + 4);
  v27 = *a3;
  LODWORD(a2) = v27;
  v14 = *((_QWORD *)a3 + 1);
  v16 = (int *)type metadata accessor for ViewLayoutEngine(0, a4, a5, v15);
  v17 = a6 + v16[12];
  v35 = 1;
  v34 = 1;
  v33 = 1;
  *(_OWORD *)v17 = 0u;
  *(_OWORD *)(v17 + 16) = 0u;
  *(_OWORD *)(v17 + 32) = 0u;
  *(_BYTE *)(v17 + 48) = 1;
  *(_OWORD *)(v17 + 56) = 0u;
  *(_OWORD *)(v17 + 72) = 0u;
  *(_OWORD *)(v17 + 88) = 0u;
  *(_BYTE *)(v17 + 104) = 1;
  *(_OWORD *)(v17 + 112) = 0u;
  *(_OWORD *)(v17 + 128) = 0u;
  *(_OWORD *)(v17 + 144) = 0u;
  *(_BYTE *)(v17 + 160) = 1;
  v18 = (_OWORD *)(a6 + v16[13]);
  *v18 = 0u;
  v18[1] = 0u;
  *(_QWORD *)(a6 + v16[14]) = MEMORY[0x24BEE4AF8];
  v19 = a6 + v16[15];
  *(_BYTE *)(v19 + 16) = 0;
  *(_QWORD *)v19 = 0;
  *(_QWORD *)(v19 + 8) = 0;
  *(_BYTE *)(v19 + 40) = 0;
  *(_QWORD *)(v19 + 24) = 0;
  *(_QWORD *)(v19 + 32) = 0;
  *(_BYTE *)(v19 + 64) = 0;
  *(_QWORD *)(v19 + 48) = 0;
  *(_QWORD *)(v19 + 56) = 0;
  *(_QWORD *)(a6 + v16[16]) = 0;
  v20 = a6 + v16[10];
  *(_DWORD *)v20 = a2;
  *(_QWORD *)(v20 + 8) = v14;
  KeyPath = swift_getKeyPath();
  v37 = v13;
  v38 = KeyPath;
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentFetch<LayoutDirection>, (uint64_t)&type metadata for LayoutDirection, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EnvironmentFetch);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v13);
  v36 = KeyPath;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for KeyPath<EnvironmentValues, LayoutDirection>, (uint64_t)&type metadata for EnvironmentValues, (uint64_t)&type metadata for LayoutDirection, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE4698]);
  swift_bridgeObjectRetain();
  swift_retain();
  dispatch thunk of Hashable.hash(into:)();
  Hasher._finalize()();
  lazy protocol witness table accessor for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>(&lazy protocol witness table cache variable for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>, (uint64_t)&protocol conformance descriptor for EnvironmentFetch<A>);
  lazy protocol witness table accessor for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>(&lazy protocol witness table cache variable for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>, (uint64_t)&protocol conformance descriptor for EnvironmentFetch<A>);
  LOBYTE(v39) = 0;
  LOBYTE(a3) = *(_BYTE *)static Rule<>._cachedValue(options:owner:hashValue:bodyPtr:update:)();
  swift_release_n();
  *(_BYTE *)(a6 + v16[11]) = (_BYTE)a3;
  v22 = *(_QWORD *)(a4 - 8);
  v23 = v30;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(a6, v30, a4);
  v39 = v27;
  v40 = v14;
  v41 = 0;
  v42 = (char)a3;
  v24 = v29;
  (*(void (**)(int *, uint64_t, uint64_t))(a5 + 32))(&v39, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v23, a4);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v31 + 32))(a6 + v16[9], v24, v32);
}

SwiftUI::ViewSpacing __swiftcall ViewSpacing.init()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  SwiftUI::LayoutDirection v3;
  SwiftUI::ViewSpacing result;

  v1 = v0;
  v2 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)v1 = v2;
  *(_BYTE *)(v1 + 8) = 2;
  result.spacing.minima._rawValue = v2;
  result.layoutDirection.value = v3;
  return result;
}

unsigned __int8 *ViewSpacing.formUnion(_:edges:)(uint64_t a1)
{
  uint64_t v1;
  char v2;
  unsigned __int8 v4;
  unsigned __int8 v5;

  v2 = *(_BYTE *)(a1 + 8);
  if (*(_BYTE *)(v1 + 8) != 2)
    v2 = *(_BYTE *)(v1 + 8);
  *(_BYTE *)(v1 + 8) = v2;
  v5 = v2 & 1;
  AbsoluteEdge.Set.init(_:layoutDirection:)(&v5, &v4);
  return Spacing.incorporate(_:of:)(&v4);
}

uint64_t LayoutProperties.stackOrientation.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t LayoutProperties.stackOrientation.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*LayoutProperties.stackOrientation.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t LayoutProperties.isDefaultEmptyLayout.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t LayoutProperties.isDefaultEmptyLayout.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result;
  return result;
}

uint64_t (*LayoutProperties.isDefaultEmptyLayout.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t LayoutProperties.isIdentityUnaryLayout.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 2);
}

uint64_t LayoutProperties.isIdentityUnaryLayout.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 2) = result;
  return result;
}

uint64_t (*LayoutProperties.isIdentityUnaryLayout.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ProposedViewSize.width.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)v2 = result;
  *(_BYTE *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*ProposedViewSize.width.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ProposedViewSize.height.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t ProposedViewSize.height.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = result;
  *(_BYTE *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*ProposedViewSize.height.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t static ProposedViewSize.zero.getter()
{
  if (one-time initialization token for zero != -1)
    swift_once();
  return static ProposedViewSize.zero;
}

uint64_t static ProposedViewSize.unspecified.getter()
{
  return 0;
}

uint64_t static ProposedViewSize.infinity.getter()
{
  if (one-time initialization token for infinity != -1)
    swift_once();
  return static ProposedViewSize.infinity;
}

uint64_t ProposedViewSize.init(_:in:by:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0)
    return a4;
  return a1;
}

uint64_t ProposedViewSize.subscript.getter(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((a1 & 1) != 0)
    return a4;
  else
    return a2;
}

uint64_t ProposedViewSize.subscript.setter(uint64_t result, char a2, char a3)
{
  _QWORD *v3;
  _BYTE *v4;

  if ((a3 & 1) != 0)
  {
    v3[2] = result;
    v4 = v3 + 3;
  }
  else
  {
    *v3 = result;
    v4 = v3 + 1;
  }
  *v4 = a2 & 1;
  return result;
}

uint64_t (*ProposedViewSize.subscript.modify(uint64_t a1, char a2))(uint64_t result)
{
  uint64_t v2;
  char *v3;
  uint64_t *v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 + 16) = v2;
  *(_BYTE *)(a1 + 9) = a2;
  v3 = (char *)(v2 + 8);
  v4 = (uint64_t *)(v2 + 16);
  if ((a2 & 1) == 0)
    v4 = (uint64_t *)v2;
  v5 = *v4;
  if ((a2 & 1) != 0)
    v3 = (char *)(v2 + 24);
  v6 = *v3;
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v6;
  return _ProposedSize.subscript.modify;
}

uint64_t static ProposedViewSize.== infix(_:_:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, char a8)
{
  if ((a2 & 1) != 0)
  {
    if ((a6 & 1) == 0)
      return 0;
  }
  else if ((a6 & 1) != 0 || *(double *)&a1 != *(double *)&a5)
  {
    return 0;
  }
  if ((a4 & 1) != 0)
  {
    if ((a8 & 1) != 0)
      return 1;
  }
  else if ((a8 & 1) == 0 && *(double *)&a3 == *(double *)&a7)
  {
    return 1;
  }
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ProposedViewSize(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  v2 = *(_BYTE *)(a2 + 8);
  v3 = *(_BYTE *)(a2 + 24);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 8))
      return 0;
  }
  else
  {
    if (*(double *)a1 != *(double *)a2)
      v2 = 1;
    if ((v2 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if (*(_BYTE *)(a2 + 24))
      return 1;
  }
  else
  {
    if (*(double *)(a1 + 16) != *(double *)(a2 + 16))
      v3 = 1;
    if ((v3 & 1) == 0)
      return 1;
  }
  return 0;
}

uint64_t ViewSpacing.spacing.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

uint64_t ViewSpacing.spacing.setter(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_bridgeObjectRelease();
  *v1 = v2;
  return result;
}

uint64_t (*ViewSpacing.spacing.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

SwiftUI::ViewSpacing __swiftcall ViewSpacing.init(_:)(SwiftUI::Spacing a1)
{
  uint64_t v1;
  SwiftUI::ViewSpacing result;

  *(_QWORD *)v1 = *(_QWORD *)a1.minima._rawValue;
  *(_BYTE *)(v1 + 8) = 2;
  result.spacing = a1;
  return result;
}

uint64_t static ViewSpacing.zero.getter@<X0>(uint64_t a1@<X8>)
{
  char v2;

  if (one-time initialization token for zero != -1)
    swift_once();
  v2 = byte_2561B61A8;
  *(_QWORD *)a1 = static ViewSpacing.zero;
  *(_BYTE *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

unsigned __int8 *ViewSpacing.union(_:edges:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v4;
  int v5;
  unsigned __int8 v7;
  unsigned __int8 v8;

  v4 = *(_BYTE *)(a1 + 8);
  v5 = *(unsigned __int8 *)(v2 + 8);
  *(_QWORD *)a2 = *(_QWORD *)v2;
  if (v5 != 2)
    v4 = v5;
  *(_BYTE *)(a2 + 8) = v4;
  v8 = v4 & 1;
  AbsoluteEdge.Set.init(_:layoutDirection:)(&v8, &v7);
  swift_bridgeObjectRetain();
  return Spacing.incorporate(_:of:)(&v7);
}

double ViewSpacing.distance(to:along:)(uint64_t *a1, char a2)
{
  uint64_t *v2;
  int v3;
  uint64_t v4;
  char v5;
  double v6;
  char v7;
  CGSize *p_height;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v3 = a2 & 1;
  v4 = *a1;
  v5 = *((_BYTE *)v2 + 8);
  v12 = *v2;
  v11 = v5 & 1;
  v10 = v4;
  v6 = COERCE_DOUBLE(Spacing.distanceToSuccessorView(along:layoutDirection:preferring:)(a2 & 1, &v11, &v10));
  if ((v7 & 1) == 0)
    return v6;
  if (one-time initialization token for defaultSpacingValue != -1)
    swift_once();
  p_height = &defaultSpacingValue;
  if (v3)
    p_height = (CGSize *)&defaultSpacingValue.height;
  return p_height->width;
}

uint64_t ViewSpacing.description.getter()
{
  return Spacing.description.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ViewSpacing()
{
  return Spacing.description.getter();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LayoutSubviews.Storage(uint64_t a1, uint64_t a2)
{
  int32x2_t *v4;
  int32x2_t *v5;
  char v6;

  v4 = *(int32x2_t **)a1;
  v5 = *(int32x2_t **)a2;
  v6 = *(_BYTE *)(a2 + 8);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if ((v6 & 1) != 0)
      return specialized static Array<A>.== infix(_:_:)((uint64_t)v4, (uint64_t)v5);
    return 0;
  }
  if ((v6 & 1) != 0)
    return 0;
  return specialized static Array<A>.== infix(_:_:)(v4, v5);
}

void LayoutSubviews.layoutDirection.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 17);
}

_BYTE *LayoutSubviews.layoutDirection.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 17) = *result;
  return result;
}

uint64_t (*LayoutSubviews.layoutDirection.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t LayoutSubviews.startIndex.getter()
{
  return 0;
}

uint64_t LayoutSubviews.endIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(v0 + 8) + 16);
}

uint64_t LayoutSubviews.subscript.getter@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int *v3;
  int v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v7 = *v3;
  v8 = *((_QWORD *)v3 + 1);
  v9 = *((_BYTE *)v3 + 16);
  v10 = *((unsigned __int8 *)v3 + 17);
  swift_bridgeObjectRetain();
  if (v10)
    v11 = 256;
  else
    v11 = 0;
  v12 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_7SwiftUI14LayoutSubviewsV7Storage33_57DDCF0A00C1B77B475771403C904EF9LLO17IndexedAttributesVs5NeverOTg503_s7d4UI14fg31V9selecting7indicesACx_tSTRzSi7b20RtzlFAC7Storage33_57ijklmno5LLO17pQ8VSiXEfU_AITf1cn_nTf4ng_n(a1, a2, v8, v11 | v9, v11);
  result = swift_bridgeObjectRelease();
  *(_DWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v12;
  *(_BYTE *)(a3 + 16) = 1;
  *(_BYTE *)(a3 + 17) = v10;
  return result;
}

uint64_t LayoutSubviews.selecting<A>(indices:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X7>, uint64_t a4@<X8>)
{
  int *v4;
  int v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t result;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  char v15;

  v7 = *((_QWORD *)v4 + 1);
  v8 = *((_BYTE *)v4 + 16);
  v9 = *((_BYTE *)v4 + 17);
  v12 = *v4;
  v6 = v12;
  v13 = v7;
  v14 = v8;
  v15 = v9;
  result = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in LayoutSubviews.selecting<A>(indices:), (uint64_t)&v11, a1, (uint64_t)&type metadata for LayoutSubviews.Storage.IndexedAttributes, MEMORY[0x24BEE4078], a2, MEMORY[0x24BEE40A8], a3);
  *(_DWORD *)a4 = v6;
  *(_QWORD *)(a4 + 8) = result;
  *(_BYTE *)(a4 + 16) = 1;
  *(_BYTE *)(a4 + 17) = v9;
  return result;
}

uint64_t LayoutSubviews.subscript.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X7>, uint64_t a4@<X8>)
{
  return LayoutSubviews.selecting<A>(indices:)(a1, a2, a3, a4);
}

unint64_t *closure #1 in LayoutSubviews.selecting<A>(indices:)@<X0>(unint64_t *result@<X0>, uint64_t a2@<X2>, char a3@<W3>, _DWORD *a4@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  int *v7;
  int v8;

  v4 = *result;
  if ((a3 & 1) == 0)
  {
    if ((v4 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v4 < *(_QWORD *)(a2 + 16))
    {
      v5 = a2 + 8 * v4;
      v6 = (_DWORD *)(v5 + 32);
      v7 = (int *)(v5 + 36);
LABEL_8:
      v8 = *v7;
      *a4 = *v6;
      a4[1] = v8;
      a4[2] = v4;
      return result;
    }
    __break(1u);
    goto LABEL_11;
  }
  if ((v4 & 0x8000000000000000) != 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v4 < *(_QWORD *)(a2 + 16))
  {
    v4 = a2 + 12 * v4;
    v6 = (_DWORD *)(v4 + 32);
    v7 = (int *)(v4 + 36);
    LODWORD(v4) = *(_DWORD *)(v4 + 40);
    goto LABEL_8;
  }
LABEL_12:
  __break(1u);
  return result;
}

unint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance LayoutSubviews(unint64_t *a1, unint64_t *a2)
{
  return specialized RandomAccessCollection<>.distance(from:to:)(*a1, *a2);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance LayoutSubviews(uint64_t a1, unint64_t *a2))(_QWORD, _QWORD)
{
  LayoutSubviews.subscript.getter(*a2, a1);
  return _ViewInputs.base.modify;
}

uint64_t protocol witness for Collection.subscript.getter in conformance LayoutSubviews@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int *v2;
  uint64_t v4;
  _DWORD *v5;
  int v6;
  uint64_t v7;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v4 = *a1;
  v5 = (_DWORD *)a1[1];
  v6 = *v2;
  v7 = *((_QWORD *)v2 + 1);
  v8 = *((_BYTE *)v2 + 16);
  v9 = *((unsigned __int8 *)v2 + 17);
  swift_bridgeObjectRetain();
  if (v9)
    v10 = 256;
  else
    v10 = 0;
  v11 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_7SwiftUI14LayoutSubviewsV7Storage33_57DDCF0A00C1B77B475771403C904EF9LLO17IndexedAttributesVs5NeverOTg503_s7d4UI14fg31V9selecting7indicesACx_tSTRzSi7b20RtzlFAC7Storage33_57ijklmno5LLO17pQ8VSiXEfU_AITf1cn_nTf4ng_n(v4, v5, v7, v10 | v8, v10);
  result = swift_bridgeObjectRelease();
  *(_DWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = v11;
  *(_BYTE *)(a2 + 16) = 1;
  *(_BYTE *)(a2 + 17) = v9;
  return result;
}

unint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance LayoutSubviews@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result;
  char v6;

  result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance LayoutSubviews(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_BYTE *)(v1 + 16);
  v4 = *(_BYTE *)(v1 + 17);
  *(_DWORD *)a1 = *(_DWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 17) = v4;
  *(_QWORD *)(a1 + 24) = 0;
}

_QWORD *protocol witness for Sequence._copyToContiguousArray() in conformance LayoutSubviews()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  swift_bridgeObjectRelease();
  return v1;
}

double LayoutSubview.proxy.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  double result;

  v2 = *(_DWORD *)(v1 + 8);
  result = *(double *)v1;
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_DWORD *)(a1 + 8) = v2;
  return result;
}

uint64_t LayoutSubview._trait<A>(key:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return LayoutProxy.subscript.getter(a1, a1, a2, a3);
}

uint64_t LayoutSubview.subscript.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  v5 = type metadata accessor for _LayoutTrait(0, a1, a2, a3);
  v6 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _LayoutTrait<A>, v5);
  return LayoutProxy.subscript.getter(v5, v5, v6, a4);
}

uint64_t LayoutSubview.sizeThatFits(_:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  int v12;

  v5 = *((_DWORD *)v4 + 2);
  v11 = *v4;
  v12 = v5;
  v7 = a1;
  v8 = a2 & 1;
  v9 = a3;
  v10 = a4 & 1;
  return LayoutProxy.size(in:)(&v7);
}

uint64_t LayoutSubview.lengthThatFits(_:in:)(uint64_t a1, char a2, uint64_t a3, char a4, char a5)
{
  uint64_t *v5;
  int v6;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  int v13;

  v6 = *((_DWORD *)v5 + 2);
  v12 = *v5;
  v13 = v6;
  v8 = a1;
  v9 = a2 & 1;
  v10 = a3;
  v11 = a4 & 1;
  return LayoutProxy.lengthThatFits(_:in:)(&v8, a5 & 1);
}

uint64_t LayoutSubview.place(at:anchor:dimensions:)(uint64_t *a1, double a2, double a3, double a4, double a5)
{
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v11;
  double v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  uint64_t result;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  __int128 v22;
  _QWORD v23[5];
  __int128 v24;
  uint64_t v25;
  uint64_t v26;

  v6 = *((double *)a1 + 2);
  v7 = v6 * a4;
  if (a4 == 0.0)
    v7 = 0.0;
  v8 = a2 - v7;
  v22 = *(_OWORD *)(a1 + 3);
  v9 = a5 * *((double *)a1 + 3);
  if (a5 == 0.0)
    v9 = 0.0;
  if ((~*(_QWORD *)&v8 & 0x7FF0000000000000) != 0 || (*(_QWORD *)&v8 & 0xFFFFFFFFFFFFFLL) == 0)
  {
    v11 = a3 - v9;
    if ((~COERCE__INT64(a3 - v9) & 0x7FF0000000000000) != 0
      || (COERCE_UNSIGNED_INT64(a3 - v9) & 0xFFFFFFFFFFFFFLL) == 0)
    {
      v13 = *(double *)a1;
      v14 = a1[1];
      v15 = a1[5];
      v16 = *(int *)(v5 + 12);
      swift_retain();
      v17 = (_BYTE *)_threadLayoutData();
      if (v17)
      {
        if ((*v17 & 1) == 0)
        {
          *(double *)v23 = v8;
          *(double *)&v23[1] = v11;
          *(double *)&v23[2] = v13;
          v23[3] = v14;
          *(double *)&v23[4] = v6;
          v24 = v22;
          v25 = v15;
          LOBYTE(v26) = 0;
          PlacementData.setGeometry(_:at:layoutDirection:)((uint64_t)v23, v16, (unsigned __int8 *)&v26);
          return swift_release();
        }
        __break(1u);
      }
      __break(1u);
    }
  }
  _StringGuts.grow(_:)(34);
  v19._object = (void *)0x80000002352E4010;
  v19._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v19);
  type metadata accessor for CGPoint(0);
  _print_unlocked<A, B>(_:_:)();
  v20._countAndFlagsBits = 8236;
  v20._object = (void *)0xE200000000000000;
  String.append(_:)(v20);
  _print_unlocked<A, B>(_:_:)();
  v21._countAndFlagsBits = 8236;
  v21._object = (void *)0xE200000000000000;
  String.append(_:)(v21);
  type metadata accessor for CGSize(0);
  _print_unlocked<A, B>(_:_:)();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void PlacementData.setGeometry(_:at:layoutDirection:)(uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  uint64_t v3;
  CGFloat v5;
  CGFloat v6;
  uint64_t v7;
  uint64_t v8;
  CGFloat v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  double v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  double MaxX;
  __int128 rect;
  CGRect v25;
  CGRect v26;

  v5 = *(double *)a1;
  v6 = *(double *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(double *)(a1 + 32);
  rect = *(_OWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *a3;
  v12 = *(_QWORD **)(v3 + 8);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v3 + 8) = v12;
  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    if ((a2 & 0x8000000000000000) == 0)
      goto LABEL_3;
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v12 = specialized _ArrayBuffer._consumeAndCreateNew()(v12);
  *(_QWORD *)(v3 + 8) = v12;
  if ((a2 & 0x8000000000000000) != 0)
    goto LABEL_14;
LABEL_3:
  if (v12[2] <= a2)
  {
LABEL_15:
    __break(1u);
    return;
  }
  v14 = &v12[8 * a2];
  v16 = v14[4];
  v15 = v14 + 4;
  swift_release();
  v17 = v16 & 0xFFFFFFFFFFFFFLL;
  if ((~v16 & 0x7FF0000000000000) == 0 && v17 != 0)
    ++*(_QWORD *)(v3 + 16);
  *(CGFloat *)v15 = v5;
  *((CGFloat *)v15 + 1) = v6;
  v15[2] = v7;
  v15[3] = v8;
  *((CGFloat *)v15 + 4) = v9;
  *(_OWORD *)(v15 + 5) = rect;
  v15[7] = v10;
  if (v11 == *(unsigned __int8 *)(v3 + 56))
  {
    swift_retain();
  }
  else
  {
    v19 = *(double *)(v3 + 24);
    v20 = *(double *)(v3 + 32);
    v21 = *(double *)(v3 + 40);
    v22 = *(double *)(v3 + 48);
    swift_retain();
    v25.origin.x = v19;
    v25.origin.y = v20;
    v25.size.width = v21;
    v25.size.height = v22;
    MaxX = CGRectGetMaxX(v25);
    v26.origin.x = v5;
    v26.origin.y = v6;
    v26.size.width = v9;
    *(_QWORD *)&v26.size.height = rect;
    *(double *)v15 = MaxX - (CGRectGetMaxX(v26) - v19);
  }
  *(_QWORD *)(v3 + 8) = v12;
}

uint64_t View.layoutValue<A>(key:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;

  v9 = type metadata accessor for _LayoutTrait(0, a4, a6, a4);
  v10 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _LayoutTrait<A>, v9);
  return View._trait<A>(_:_:)(v9, a2, a3, v9, a5, v10);
}

uint64_t static _LayoutTrait.defaultValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t protocol witness for static _ViewTraitKey.defaultValue.getter in conformance _LayoutTrait<A>(uint64_t a1)
{
  return static _LayoutTrait.defaultValue.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t _LayoutRoot.layout.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _LayoutRoot.layout.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_LayoutRoot.layout.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t static _LayoutRoot._makeView(root:inputs:body:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  _DWORD v33[3];

  v11 = *a2;
  v12 = *((_DWORD *)a2 + 2);
  v13 = a2[2];
  v14 = *((_DWORD *)a2 + 20);
  LODWORD(v24) = *a1;
  v15 = type metadata accessor for _LayoutRoot(255, a5, a6, a4);
  type metadata accessor for _GraphValue(0, v15, v16, v17);
  v18 = a2[3];
  v19 = a2[4];
  v22 = *(_OWORD *)(a2 + 7);
  v23 = *(_OWORD *)(a2 + 5);
  v20 = a2[9];
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static _LayoutRoot._makeView(root:inputs:body:), a5, v33);
  v24 = v11;
  v25 = v12;
  v26 = v13;
  v27 = v18;
  v28 = v19;
  v29 = v23;
  v30 = v22;
  v31 = v20;
  v32 = v14;
  return (*(uint64_t (**)(_DWORD *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 88))(v33, &v24, a3, a4, a5, a6);
}

uint64_t closure #1 in static _LayoutRoot._makeView(root:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = type metadata accessor for _LayoutRoot(0, a2, a3, a4);
  v9[3] = a2;
  v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v9, a2, MEMORY[0x24BEE4078], v6, MEMORY[0x24BEE40A8], v7);
  return v9[5];
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance _LayoutRoot<A>(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static _LayoutRoot._makeView(root:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24));
}

uint64_t AnyLayoutProperties.value.getter()
{
  void (*v0)(uint64_t *__return_ptr, uint64_t);
  uint64_t v1;
  uint64_t v3;

  v0 = *(void (**)(uint64_t *__return_ptr, uint64_t))(**(_QWORD **)AGGraphGetValue() + 80);
  v1 = swift_retain();
  v0(&v3, v1);
  swift_release();
  return v3;
}

uint64_t protocol witness for Rule.value.getter in conformance AnyLayoutProperties@<X0>(_BYTE *a1@<X8>)
{
  void (*v2)(uint64_t *__return_ptr, uint64_t);
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = *(void (**)(uint64_t *__return_ptr, uint64_t))(**(_QWORD **)AGGraphGetValue() + 80);
  v3 = swift_retain();
  v2(&v5, v3);
  result = swift_release();
  *a1 = v5;
  return result;
}

SwiftUI::Spacing __swiftcall ViewLayoutEngine.spacing()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t v9;
  char v10;
  int v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;

  v3 = v0;
  v4 = v1;
  v5 = *(int *)(v0 + 64);
  v6 = *(_QWORD *)(v2 + v5);
  if (!v6)
  {
    v7 = (int *)(v2 + *(int *)(v3 + 40));
    v8 = *v7;
    v9 = *((_QWORD *)v7 + 1);
    v10 = *(_BYTE *)(v2 + *(int *)(v3 + 44));
    swift_bridgeObjectRetain();
    v12 = v8;
    v13 = v9;
    v14 = 0;
    v15 = v10;
    (*(void (**)(uint64_t *__return_ptr, int *, uint64_t, _QWORD))(*(_QWORD *)(v3 + 24) + 48))(&v16, &v12, v2 + *(int *)(v3 + 36), *(_QWORD *)(v3 + 16));
    swift_bridgeObjectRelease();
    v6 = v16;
    *(_QWORD *)(v2 + v5) = v16;
  }
  *v4 = v6;
  return (SwiftUI::Spacing)swift_bridgeObjectRetain();
}

Swift::Double __swiftcall ViewLayoutEngine.layoutPriority()()
{
  uint64_t v0;
  uint64_t v1;
  Swift::Double result;

  result = -INFINITY;
  if (*(_QWORD *)(*(_QWORD *)(v1 + *(int *)(v0 + 40) + 8) + 16))
    return 0.0;
  return result;
}

double ViewLayoutEngine.sizeThatFits(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  double v11;
  double v12;
  double v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  double v19;
  double *v20;
  __int16 v21;
  uint64_t v22;
  double *v24;
  char v25;
  char v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  double v39;
  double v40;
  uint64_t v41;
  double v42;
  double v43;
  uint64_t v44;

  v4 = *(unsigned __int8 *)(a1 + 8);
  v42 = *(double *)(a1 + 16);
  v43 = *(double *)a1;
  v5 = *(unsigned __int8 *)(a1 + 24);
  v6 = v2 + *(int *)(a2 + 40);
  v31 = *(_DWORD *)v6;
  v28 = *(unsigned __int8 *)(v2 + *(int *)(a2 + 44));
  v7 = v2 + *(int *)(a2 + 48);
  v44 = *(_QWORD *)(v7 + 8);
  v40 = *(double *)v7;
  v41 = *(_QWORD *)(v7 + 24);
  v34 = *(double *)(v7 + 16);
  v35 = *(double *)(v7 + 32);
  v8 = *(_BYTE *)(v7 + 48);
  v9 = *(_BYTE *)(v7 + 64);
  v33 = *(double *)(v7 + 72);
  v26 = *(_BYTE *)(v7 + 80);
  v29 = *(_QWORD *)(v7 + 80);
  v30 = *(_QWORD *)(v7 + 64);
  v36 = *(_QWORD *)(v7 + 40);
  v37 = *(double *)(v7 + 88);
  v38 = *(_QWORD *)(v7 + 96);
  v39 = *(double *)(v7 + 56);
  v10 = *(_BYTE *)(v7 + 104);
  v11 = *(double *)(v7 + 112);
  v27 = *(_BYTE *)(v7 + 120);
  v12 = *(double *)(v7 + 128);
  v25 = *(_BYTE *)(v7 + 136);
  v13 = *(double *)(v7 + 144);
  v14 = *(_BYTE *)(v7 + 160);
  v15 = *(_QWORD *)(v6 + 8);
  swift_bridgeObjectRetain();
  v32 = v8;
  if ((v8 & 1) == 0)
  {
    if ((v4 & 1) != 0)
    {
      if ((v44 & 1) == 0)
      {
        if ((v9 & 1) != 0)
          v16 = v10;
        else
          v16 = 1;
        v17 = v15;
        v18 = v10;
        if ((v16 & 1) != 0)
          goto LABEL_18;
        goto LABEL_39;
      }
    }
    else if ((v44 & 1) != 0 || v43 != v40)
    {
      goto LABEL_17;
    }
    if ((v5 & 1) != 0)
    {
      if ((v41 & 1) == 0)
        goto LABEL_17;
LABEL_16:
      v13 = v35;
      v19 = v43;
      goto LABEL_47;
    }
    if ((v41 & 1) == 0 && v42 == v34)
      goto LABEL_16;
  }
LABEL_17:
  v17 = v15;
  v18 = v10;
  if ((v10 & 1) != 0)
    goto LABEL_18;
  if ((v4 & 1) != 0)
  {
    if ((v9 & 1) == 0)
      goto LABEL_18;
  }
  else if ((v9 & 1) != 0 || v43 != v39)
  {
    goto LABEL_18;
  }
LABEL_39:
  if ((v5 & 1) != 0)
  {
    if ((v26 & 1) != 0)
    {
LABEL_44:
      v13 = v37;
      v19 = v43;
      goto LABEL_47;
    }
  }
  else if ((v26 & 1) == 0 && v42 == v33)
  {
    goto LABEL_44;
  }
LABEL_18:
  v19 = v43;
  if ((v14 & 1) == 0)
  {
    if ((v4 & 1) != 0)
    {
      if ((v27 & 1) == 0)
        goto LABEL_19;
    }
    else if ((v27 & 1) != 0 || v11 != v43)
    {
      goto LABEL_19;
    }
    if ((v5 & 1) != 0)
    {
      if ((v25 & 1) == 0)
        goto LABEL_19;
    }
    else if ((v25 & 1) != 0 || v12 != v42)
    {
      goto LABEL_19;
    }
LABEL_47:
    swift_beginAccess();
    v24 = (double *)static LayoutTrace.recorder;
    if (static LayoutTrace.recorder)
    {
      swift_beginAccess();
      v24[4] = v19;
      *((_QWORD *)v24 + 5) = v4;
      v24[6] = v42;
      *((_WORD *)v24 + 28) = v5 | 0x100;
    }
    goto LABEL_25;
  }
LABEL_19:
  swift_beginAccess();
  v20 = (double *)static LayoutTrace.recorder;
  if (static LayoutTrace.recorder)
  {
    swift_beginAccess();
    v20[4] = v43;
    *((_QWORD *)v20 + 5) = v4;
    v20[6] = v42;
    *((_WORD *)v20 + 28) = v5;
  }
  if (v28)
    v21 = 256;
  else
    v21 = 0;
  v13 = closure #1 in ViewLayoutEngine.sizeThatFits(_:)(v2, *(uint64_t *)&v43, v4, *(uint64_t *)&v42, v5, v31, v17, v21, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  *(double *)(v7 + 112) = v39;
  *(_QWORD *)(v7 + 120) = v30;
  *(double *)(v7 + 128) = v33;
  *(_QWORD *)(v7 + 136) = v29;
  *(double *)(v7 + 144) = v37;
  *(_QWORD *)(v7 + 152) = v38;
  *(_BYTE *)(v7 + 160) = v18;
  *(double *)(v7 + 56) = v40;
  *(_QWORD *)(v7 + 64) = v44;
  *(double *)(v7 + 72) = v34;
  *(_QWORD *)(v7 + 80) = v41;
  *(double *)(v7 + 88) = v35;
  *(_QWORD *)(v7 + 96) = v36;
  *(_BYTE *)(v7 + 104) = v32;
  *(double *)v7 = v43;
  *(_BYTE *)(v7 + 8) = v4;
  *(double *)(v7 + 16) = v42;
  *(_BYTE *)(v7 + 24) = v5;
  *(double *)(v7 + 32) = v13;
  *(_QWORD *)(v7 + 40) = v22;
  *(_BYTE *)(v7 + 48) = 0;
LABEL_25:
  swift_bridgeObjectRelease();
  return v13;
}

double closure #1 in ViewLayoutEngine.sizeThatFits(_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, int a6, uint64_t a7, __int16 a8, uint64_t a9, uint64_t a10)
{
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  double (*v21)(uint64_t);
  double v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  int v29;
  uint64_t v30;
  __int16 v31;

  v25 = a2;
  v26 = a4;
  v16 = *(_QWORD *)(a9 - 8);
  v17 = MEMORY[0x24BDAC7A8](a1);
  v19 = (char *)&v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v19, a1, a9, v17);
  v29 = a6;
  v30 = a7;
  v31 = a8 & 0x101;
  type metadata accessor for ViewLayoutEngine(0, a9, a10, v20);
  v21 = *(double (**)(uint64_t))(a10 + 56);
  v28 = a3 & 1;
  v27 = a5 & 1;
  v22 = v21(v25);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, a9);
  return v22;
}

uint64_t ViewLayoutEngine.childGeometries(at:origin:)(double *a1, uint64_t a2, double a3, double a4)
{
  uint64_t v4;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  __int128 *v13;
  __int128 v14;
  _BOOL4 v16;
  _BOOL4 v17;
  BOOL v18;
  uint64_t v19;
  _BOOL4 v20;
  _BOOL4 v21;
  BOOL v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v8 = *a1;
  v9 = a1[1];
  v10 = a1[2];
  v11 = a1[3];
  v12 = *(_QWORD *)(*(_QWORD *)(v4 + *(int *)(a2 + 40) + 8) + 16);
  v13 = (__int128 *)(v4 + *(int *)(a2 + 52));
  v14 = v13[1];
  v26 = *v13;
  v27 = v14;
  v30 = v8;
  v31 = v9;
  v32 = v10;
  v33 = v11;
  if (specialized static ViewSize.== infix(_:_:)((double *)&v26, &v30)
    && a3 == 0.0
    && a4 == 0.0
    && *(_QWORD *)(*(_QWORD *)(v4 + *(int *)(a2 + 56)) + 16) == v12)
  {
    return swift_bridgeObjectRetain();
  }
  v16 = (~*(_QWORD *)&v10 & 0x7FF0000000000000) == 0;
  v17 = (*(_QWORD *)&v10 & 0xFFFFFFFFFFFFFLL) != 0;
  v18 = v16 && v17;
  if (v16 && v17)
    v19 = 0;
  else
    v19 = *(_QWORD *)&v10;
  v20 = (~*(_QWORD *)&v11 & 0x7FF0000000000000) == 0;
  v21 = (*(_QWORD *)&v11 & 0xFFFFFFFFFFFFFLL) != 0;
  v22 = v20 && v21;
  if (v20 && v21)
    v23 = 0;
  else
    v23 = *(_QWORD *)&v11;
  v24 = *(_BYTE *)(v4 + *(int *)(a2 + 44));
  if (one-time initialization token for invalidValue != -1)
    swift_once();
  v26 = static ViewGeometry.invalidValue;
  v27 = *(_OWORD *)&qword_25426DBB8;
  v28 = xmmword_25426DBC8;
  v29 = unk_25426DBD8;
  outlined retain of ViewGeometry((uint64_t)&v26);
  v25 = specialized Array.init(repeating:count:)(&v26, v12);
  LOBYTE(v30) = 0;
  v31 = *(double *)&v25;
  v32 = 0.0;
  v33 = a3;
  v34 = a4;
  v35 = v8;
  v36 = v9;
  v37 = v24;
  closure #1 in ViewLayoutEngine.childGeometries(at:origin:)((uint64_t)&v30, v4, v19, v18, v23, v22, v12, *(_QWORD *)(a2 + 16), a3, a4, v8, v9, v8, v9, v10, v11, *(_QWORD *)(a2 + 24));
  return *(_QWORD *)&v31;
}

uint64_t closure #1 in ViewLayoutEngine.childGeometries(at:origin:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, uint64_t a17)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  int v35;
  uint64_t v36;
  void (*v37)(_BYTE *, uint64_t);
  uint64_t v38;
  void (*v39)(_QWORD, double, double, double, double);
  uint64_t result;
  unint64_t v41;
  double v42;
  double v43;
  _BOOL4 v44;
  _BOOL4 v45;
  double v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  CGFloat v51;
  CGFloat v52;
  CGFloat v53;
  double MaxX;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  __int128 *InputValue;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  CGFloat v70;
  CGFloat v71;
  double Width;
  double Height;
  _QWORD *v74;
  char isUniquelyReferenced_nonNull_native;
  double *v76;
  uint64_t v77;
  double v78;
  double v79;
  double v80;
  _BYTE v81[16];
  double v82;
  double v83;
  uint64_t v84;
  _BOOL4 v85;
  int v86;
  double v87;
  double v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  double v92;
  uint64_t v93;
  double v94;
  char v95;
  char v96;
  BOOL v97;
  char v98;
  char v99;
  CGRect v100;
  CGRect v101;
  CGRect v102;
  CGRect v103;

  v91 = a7;
  v85 = a4;
  v86 = a6;
  v87 = *(double *)&a3;
  v88 = *(double *)&a5;
  v83 = *(double *)&a17;
  v26 = type metadata accessor for ViewLayoutEngine(0, a8, a17, a4);
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v29 = &v81[-v28];
  v82 = *(double *)(a8 - 8);
  v30 = v82;
  MEMORY[0x24BDAC7A8](v31);
  v33 = &v81[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v84 = _threadLayoutData();
  _setThreadLayoutData();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)&v30 + 16))(v33, a2, a8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v27 + 16))(v29, a2, v26);
  v34 = &v29[*(int *)(v26 + 40)];
  v35 = *(_DWORD *)v34;
  v36 = *((_QWORD *)v34 + 1);
  LOBYTE(v34) = v29[*(int *)(v26 + 44)];
  v98 = 0;
  v99 = (char)v34;
  v37 = *(void (**)(_BYTE *, uint64_t))(v27 + 8);
  v38 = v91;
  swift_bridgeObjectRetain();
  v37(v29, v26);
  LODWORD(v92) = v35;
  v93 = v36;
  LOBYTE(v94) = v98;
  BYTE1(v94) = v99;
  v89 = v26;
  v90 = a2;
  v39 = *(void (**)(_QWORD, double, double, double, double))(*(_QWORD *)&v83 + 64);
  v97 = v85;
  v96 = v86 & 1;
  v39(*(_QWORD *)&v87, a9, a10, a11, a12);
  swift_bridgeObjectRelease();
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)&v82 + 8))(v33, a8);
  result = (uint64_t)_setThreadLayoutData();
  if (*(_QWORD *)(a1 + 16) != v38)
  {
    if ((v38 & 0x8000000000000000) == 0)
    {
      if (!v38)
        return result;
      v41 = 0;
      v42 = a15;
      v43 = a16;
      v44 = (~*(_QWORD *)&a16 & 0x7FF0000000000000) == 0;
      v45 = (*(_QWORD *)&a16 & 0xFFFFFFFFFFFFFLL) != 0;
      if ((~*(_QWORD *)&a15 & 0x7FF0000000000000) == 0 && (*(_QWORD *)&a15 & 0xFFFFFFFFFFFFFLL) != 0)
        v42 = 0.0;
      v88 = v42;
      v46 = v42;
      if ((~*(_QWORD *)&a15 & 0x7FF0000000000000) == 0 && (*(_QWORD *)&a15 & 0xFFFFFFFFFFFFFLL) != 0)
        v46 = NAN;
      v83 = v46;
      if (v44 && v45)
        v43 = 0.0;
      v86 = *MEMORY[0x24BE096C0];
      v87 = v43;
      v47 = v43;
      if (v44 && v45)
        v47 = NAN;
      v82 = v47;
      v48 = 11;
      v49 = 32;
      v85 = (~*(_QWORD *)&a15 & 0x7FF0000000000000) == 0 && (*(_QWORD *)&a15 & 0xFFFFFFFFFFFFFLL) != 0;
      LODWORD(v84) = (~*(_QWORD *)&a16 & 0x7FF0000000000000) == 0 && v45;
      while (1)
      {
        v55 = *(_QWORD *)(a1 + 8);
        if (v41 >= *(_QWORD *)(v55 + 16))
          break;
        v56 = *(_QWORD *)(v55 + v48 * 8 - 56);
        v57 = ~v56 & 0x7FF0000000000000;
        v58 = v56 & 0xFFFFFFFFFFFFFLL;
        if (v57)
          v59 = 1;
        else
          v59 = v58 == 0;
        if (!v59)
        {
          v60 = *(_QWORD *)(v90 + *(int *)(v89 + 40) + 8);
          if (v41 >= *(_QWORD *)(v60 + 16))
            goto LABEL_42;
          if (*(_DWORD *)(v60 + v49) == v86)
          {
            InputValue = &static LayoutComputer.defaultValue;
            if (one-time initialization token for defaultValue != -1)
            {
              swift_once();
              InputValue = &static LayoutComputer.defaultValue;
            }
          }
          else
          {
            InputValue = (__int128 *)AGGraphGetInputValue();
          }
          v62 = *(_QWORD *)InputValue;
          v63 = *((_QWORD *)InputValue + 1);
          v64 = one-time initialization token for lockAssertionsAreEnabled;
          swift_retain();
          if (v64 != -1)
            swift_once();
          if (lockAssertionsAreEnabled)
          {
            if (one-time initialization token for _lock != -1)
              swift_once();
            if (!_MovableLockIsOwner(static Update._lock))
              goto LABEL_45;
          }
          v92 = v88;
          LOBYTE(v93) = v85;
          v94 = v87;
          v95 = v84;
          v65 = (*(double (**)(double *))(*(_QWORD *)v62 + 120))(&v92);
          v67 = v66;
          v69 = *(double *)(a1 + 24);
          v68 = *(double *)(a1 + 32);
          v70 = *(double *)(a1 + 40);
          v71 = *(double *)(a1 + 48);
          v102.origin.x = v69;
          v102.origin.y = v68;
          v102.size.width = v70;
          v102.size.height = v71;
          Width = CGRectGetWidth(v102);
          v103.origin.x = v69;
          v103.origin.y = v68;
          v103.size.width = v70;
          v103.size.height = v71;
          Height = CGRectGetHeight(v103);
          v74 = *(_QWORD **)(a1 + 8);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(a1 + 8) = v74;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v74 = specialized _ArrayBuffer._consumeAndCreateNew()(v74);
            *(_QWORD *)(a1 + 8) = v74;
          }
          if (v41 >= v74[2])
            goto LABEL_43;
          v76 = (double *)&v74[v48];
          v77 = v74[v48 - 7];
          swift_release();
          if ((~v77 & 0x7FF0000000000000) == 0 && (v77 & 0xFFFFFFFFFFFFFLL) != 0)
            ++*(_QWORD *)(a1 + 16);
          v78 = v68 + Height * 0.5;
          v79 = v69 + Width * 0.5 - v65 * 0.5;
          v80 = v78 - v67 * 0.5;
          *(v76 - 7) = v79;
          *(v76 - 6) = v80;
          *((_QWORD *)v76 - 5) = v62;
          *((_QWORD *)v76 - 4) = v63;
          *(v76 - 3) = v65;
          *(v76 - 2) = v67;
          *(v76 - 1) = v83;
          *(double *)&v74[v48] = v82;
          if ((*(_BYTE *)(a1 + 56) & 1) != 0)
          {
            v50 = *(double *)(a1 + 24);
            v51 = *(double *)(a1 + 32);
            v52 = *(double *)(a1 + 40);
            v53 = *(double *)(a1 + 48);
            swift_retain();
            v100.origin.x = v50;
            v100.origin.y = v51;
            v100.size.width = v52;
            v100.size.height = v53;
            MaxX = CGRectGetMaxX(v100);
            v101.origin.x = v79;
            v101.origin.y = v80;
            v101.size.width = v65;
            v101.size.height = v67;
            *(v76 - 7) = MaxX - (CGRectGetMaxX(v101) - v50);
          }
          else
          {
            swift_retain();
          }
          v38 = v91;
          result = swift_release();
        }
        ++v41;
        v48 += 8;
        v49 += 8;
        if (v38 == v41)
          return result;
      }
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
    }
    __break(1u);
LABEL_45:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t ViewLayoutEngine.explicitAlignment(_:at:)(unint64_t a1, double *a2, uint64_t a3)
{
  uint64_t v3;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  _OWORD v28[2];
  double v29;
  double v30;
  double v31;
  double v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  double v36[4];
  _OWORD v37[2];

  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = a2[3];
  v10 = v3 + *(int *)(a3 + 52);
  v11 = *(_OWORD *)(v10 + 16);
  v37[0] = *(_OWORD *)v10;
  v37[1] = v11;
  v36[0] = v6;
  v36[1] = v7;
  v36[2] = v8;
  v36[3] = v9;
  if (!specialized static ViewSize.== infix(_:_:)((double *)v37, v36))
  {
    *(double *)v10 = v6;
    *(double *)(v10 + 8) = v7;
    *(double *)(v10 + 16) = v8;
    *(double *)(v10 + 24) = v9;
    v12 = *(int *)(a3 + 56);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + v12) = MEMORY[0x24BEE4AF8];
    v13 = v3 + *(int *)(a3 + 60);
    *(_QWORD *)v13 = 0;
    *(_QWORD *)(v13 + 8) = 0;
    *(_BYTE *)(v13 + 16) = 0;
    *(_QWORD *)(v13 + 24) = 0;
    *(_QWORD *)(v13 + 32) = 0;
    *(_BYTE *)(v13 + 40) = 0;
    *(_QWORD *)(v13 + 48) = 0;
    *(_QWORD *)(v13 + 56) = 0;
    *(_BYTE *)(v13 + 64) = 0;
  }
  if (one-time initialization token for _typeCache != -1)
    swift_once();
  v14 = static AlignmentKey._typeCache;
  v15 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
  swift_retain();
  os_unfair_lock_lock(v15);
  v16 = v14[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v15);
  result = swift_release();
  if (a1 < 2)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (a1 >> 1 > *(_QWORD *)(v16 + 16))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  v35 = *(_OWORD *)(v16 + 16 * ((a1 >> 1) - 1) + 32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v18 = v3 + *(int *)(a3 + 60);
  result = *(_QWORD *)(v18 + 32);
  v19 = *(_QWORD *)(v18 + 48);
  v20 = v35;
  if (*(_QWORD *)v18 && (_QWORD)v35 == *(_QWORD *)v18)
    return *(_QWORD *)(v18 + 8);
  v21 = *(_QWORD *)(v18 + 24);
  if (!v21 || (_QWORD)v35 != v21)
  {
    if (v19 && (_QWORD)v35 == v19)
    {
      return *(_QWORD *)(v18 + 56);
    }
    else
    {
      MEMORY[0x24BDAC7A8](result);
      v28[1] = *(_OWORD *)(a3 + 16);
      v29 = v6;
      v30 = v7;
      v31 = v8;
      v32 = v9;
      v33 = a1;
      v34 = v22;
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for CGFloat?, MEMORY[0x24BEE50B0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
      _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)partial apply for closure #1 in ViewLayoutEngine.explicitAlignment(_:at:), (uint64_t)v28, a3, MEMORY[0x24BEE4078], v23, MEMORY[0x24BEE40A8], v24);
      result = *(_QWORD *)&v37[0];
      v25 = BYTE8(v37[0]);
      v26 = *(_BYTE *)(v18 + 40);
      *(_OWORD *)(v18 + 48) = *(_OWORD *)(v18 + 24);
      *(_BYTE *)(v18 + 64) = v26;
      v27 = *(_BYTE *)(v18 + 16);
      *(_OWORD *)(v18 + 24) = *(_OWORD *)v18;
      *(_BYTE *)(v18 + 40) = v27;
      *(_QWORD *)v18 = v20;
      *(_QWORD *)(v18 + 8) = result;
      *(_BYTE *)(v18 + 16) = v25;
    }
  }
  return result;
}

uint64_t closure #1 in ViewLayoutEngine.explicitAlignment(_:at:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, double a8@<D0>, double a9@<D1>, uint64_t a10@<D2>, double a11@<D3>)
{
  uint64_t result;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for ViewLayoutEngine(0, a5, a6, a4);
  result = closure #1 in closure #1 in ViewLayoutEngine.explicitAlignment(_:at:)(a2, a1, a3, a4, a5, a6, &v24, a8, a9, a10, a11);
  v23 = v25;
  *(_QWORD *)a7 = v24;
  *(_BYTE *)(a7 + 8) = v23;
  return result;
}

uint64_t closure #1 in closure #1 in ViewLayoutEngine.explicitAlignment(_:at:)@<X0>(char a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t *a7@<X8>, double a8@<D0>, double a9@<D1>, uint64_t a10@<D2>, double a11@<D3>)
{
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  void (*v28)(_BYTE *, uint64_t, uint64_t);
  os_unfair_lock_s *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  _BOOL4 v34;
  _BOOL4 v35;
  BOOL v36;
  uint64_t v37;
  _BYTE *v38;
  int v39;
  uint64_t v40;
  void (*v41)(_BYTE *, uint64_t);
  uint64_t (*v42)(uint64_t, uint64_t, double, double, double, double);
  uint64_t v43;
  char v44;
  char v45;
  os_unfair_lock_s *v46;
  _QWORD *v47;
  uint64_t v48;
  os_unfair_lock_s *v49;
  uint64_t v50;
  double v51;
  _BOOL4 v52;
  _BOOL4 v53;
  BOOL v54;
  uint64_t v55;
  _BYTE *v56;
  int v57;
  uint64_t v58;
  void (*v59)(_BYTE *, uint64_t);
  uint64_t (*v60)(uint64_t, uint64_t, double, double, double, double);
  char v61;
  uint64_t result;
  uint64_t *v63;
  _BYTE v64[12];
  _BOOL4 v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  BOOL v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  char v80;
  char v81;
  char v82;

  v68 = a4;
  v67 = a3;
  v74 = a7;
  v71 = a6;
  v18 = type metadata accessor for ViewLayoutEngine(0, a5, a6, a3);
  v70 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v20 = &v64[-v19];
  v21 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v24 = &v64[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v25);
  v27 = &v64[-v26];
  v73 = _threadLayoutData();
  _setThreadLayoutData();
  v72 = v21;
  v28 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v21 + 16);
  if ((a1 & 1) != 0)
  {
    v28(v24, a2, a5);
    if (one-time initialization token for _typeCache != -1)
      swift_once();
    v46 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
    v47 = (_QWORD *)((char *)static AlignmentKey._typeCache + 24);
    swift_retain_n();
    os_unfair_lock_lock(v46);
    v48 = v69;
    closure #1 in AlignmentKey.init(id:axis:)(v47, v67, v68, &v77);
    v69 = v48;
    v49 = v46;
    if (!v48)
    {
      os_unfair_lock_unlock(v46);
      swift_release_n();
      v68 = 2 * v77 + 3;
      v65 = (~a10 & 0x7FF0000000000000) == 0 && (a10 & 0xFFFFFFFFFFFFFLL) != 0;
      if ((~a10 & 0x7FF0000000000000) == 0 && (a10 & 0xFFFFFFFFFFFFFLL) != 0)
        v50 = 0;
      else
        v50 = a10;
      v51 = a11;
      v52 = (~*(_QWORD *)&a11 & 0x7FF0000000000000) == 0;
      v53 = (*(_QWORD *)&a11 & 0xFFFFFFFFFFFFFLL) != 0;
      v54 = v52 && v53;
      if (v52 && v53)
        v51 = 0.0;
      v66 = v51;
      v67 = v50;
      v55 = v70;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v70 + 16))(v20, a2, v18);
      v56 = &v20[*(int *)(v18 + 40)];
      v57 = *(_DWORD *)v56;
      v58 = *((_QWORD *)v56 + 1);
      LOBYTE(v56) = v20[*(int *)(v18 + 44)];
      v81 = 0;
      v82 = (char)v56;
      v59 = *(void (**)(_BYTE *, uint64_t))(v55 + 8);
      swift_bridgeObjectRetain();
      v59(v20, v18);
      LODWORD(v77) = v57;
      v78 = v58;
      v79 = v81;
      v80 = v82;
      v60 = *(uint64_t (**)(uint64_t, uint64_t, double, double, double, double))(v71 + 80);
      v76 = v65;
      v75 = v54;
      v43 = v60(v68, v67, 0.0, 0.0, a8, a9);
      v45 = v61;
      swift_bridgeObjectRelease();
      (*(void (**)(_BYTE *, uint64_t))(v72 + 8))(v24, a5);
      goto LABEL_20;
    }
  }
  else
  {
    v28(v27, a2, a5);
    if (one-time initialization token for _typeCache != -1)
      swift_once();
    v29 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
    v30 = (_QWORD *)((char *)static AlignmentKey._typeCache + 24);
    swift_retain_n();
    os_unfair_lock_lock(v29);
    v31 = v69;
    closure #1 in AlignmentKey.init(id:axis:)(v30, v67, v68, &v77);
    v69 = v31;
    if (!v31)
    {
      os_unfair_lock_unlock(v29);
      swift_release_n();
      v68 = 2 * v77 + 2;
      v65 = (~a10 & 0x7FF0000000000000) == 0 && (a10 & 0xFFFFFFFFFFFFFLL) != 0;
      if ((~a10 & 0x7FF0000000000000) == 0 && (a10 & 0xFFFFFFFFFFFFFLL) != 0)
        v32 = 0;
      else
        v32 = a10;
      v33 = a11;
      v34 = (~*(_QWORD *)&a11 & 0x7FF0000000000000) == 0;
      v35 = (*(_QWORD *)&a11 & 0xFFFFFFFFFFFFFLL) != 0;
      v36 = v34 && v35;
      if (v34 && v35)
        v33 = 0.0;
      v66 = v33;
      v67 = v32;
      v37 = v70;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v70 + 16))(v20, a2, v18);
      v38 = &v20[*(int *)(v18 + 40)];
      v39 = *(_DWORD *)v38;
      v40 = *((_QWORD *)v38 + 1);
      LOBYTE(v38) = v20[*(int *)(v18 + 44)];
      v81 = 0;
      v82 = (char)v38;
      v41 = *(void (**)(_BYTE *, uint64_t))(v37 + 8);
      swift_bridgeObjectRetain();
      v41(v20, v18);
      LODWORD(v77) = v39;
      v78 = v40;
      v79 = v81;
      v80 = v82;
      v42 = *(uint64_t (**)(uint64_t, uint64_t, double, double, double, double))(v71 + 72);
      v76 = v65;
      v75 = v36;
      v43 = v42(v68, v67, 0.0, 0.0, a8, a9);
      v45 = v44;
      swift_bridgeObjectRelease();
      (*(void (**)(_BYTE *, uint64_t))(v72 + 8))(v27, a5);
LABEL_20:
      result = (uint64_t)_setThreadLayoutData();
      v63 = v74;
      *v74 = v43;
      *((_BYTE *)v63 + 8) = v45 & 1;
      return result;
    }
    os_unfair_lock_unlock(v29);
    v49 = (os_unfair_lock_s *)swift_release();
    __break(1u);
  }
  os_unfair_lock_unlock(v49);
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t static ViewLayoutEngine.defaultAlignment(_:size:data:)(unint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *InputValue;
  uint64_t v21;
  uint64_t v22;
  double v23;
  char v24;
  char v25;
  double *v26;
  double v27;
  unint64_t v28;
  _QWORD *v29;
  os_unfair_lock_s *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  _BYTE v47[32];

  v5 = *a2;
  if ((~*a2 & 0x7FF0000000000000) == 0 || (a2[1] & 0x7FF0000000000000) == 0x7FF0000000000000)
    return 0;
  v43 = *(_OWORD *)(a2 + 1);
  v9 = a2[3];
  v10 = type metadata accessor for ViewLayoutEngine(0, a4, a5, a4);
  v11 = *(_QWORD *)(a3 + *(int *)(v10 + 40) + 8);
  v12 = *(int *)(v10 + 56);
  v13 = *(_QWORD *)(a3 + v12);
  v14 = *(_QWORD *)(v13 + 16);
  if (v14 == *(_QWORD *)(v11 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v15 = v10;
    *(_QWORD *)v47 = v5;
    *(_OWORD *)&v47[8] = v43;
    *(_QWORD *)&v47[24] = v9;
    swift_bridgeObjectRetain();
    v13 = ViewLayoutEngine.childGeometries(at:origin:)((double *)v47, v15, 0.0, 0.0);
    *(_QWORD *)(a3 + v12) = v13;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v14 = *(_QWORD *)(v13 + 16);
  }
  v45 = 0;
  v46 = 1;
  if (!v14)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  v16 = 0;
  v17 = 0;
  v41 = *MEMORY[0x24BE096C0];
  v38 = (a1 >> 1) - 1;
  v39 = a1 >> 1;
  v37 = v11;
  v18 = v13 + 40;
  v19 = 32;
  v40 = v14;
  while (v17 < *(_QWORD *)(v11 + 16))
  {
    v42 = *(_OWORD *)(v18 + 40);
    v44 = *(_OWORD *)(v18 + 24);
    if (*(_DWORD *)(v11 + v19) == v41)
    {
      InputValue = &static LayoutComputer.defaultValue;
      if (one-time initialization token for defaultValue != -1)
      {
        swift_once();
        InputValue = &static LayoutComputer.defaultValue;
      }
    }
    else
    {
      InputValue = (__int128 *)AGGraphGetInputValue();
    }
    v21 = *(_QWORD *)InputValue;
    v22 = one-time initialization token for lockAssertionsAreEnabled;
    swift_retain();
    if (v22 != -1)
      swift_once();
    if (lockAssertionsAreEnabled)
    {
      if (one-time initialization token for _lock != -1)
        swift_once();
      if (!_MovableLockIsOwner(static Update._lock))
        goto LABEL_39;
    }
    *(_OWORD *)v47 = v44;
    *(_OWORD *)&v47[16] = v42;
    v23 = COERCE_DOUBLE((*(uint64_t (**)(unint64_t, _BYTE *))(*(_QWORD *)v21 + 144))(a1, v47));
    v25 = v24;
    swift_release();
    if ((v25 & 1) == 0)
    {
      v26 = (double *)(v18 - 8);
      if ((a1 & 1) != 0)
        v26 = (double *)v18;
      v27 = *v26;
      v28 = a1;
      if (one-time initialization token for _typeCache != -1)
        swift_once();
      v29 = static AlignmentKey._typeCache;
      v30 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
      swift_retain();
      os_unfair_lock_lock(v30);
      v31 = v29[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      os_unfair_lock_unlock(v30);
      swift_release();
      if (v28 < 2)
        goto LABEL_36;
      if (v39 > *(_QWORD *)(v31 + 16))
        goto LABEL_37;
      v32 = v31 + 16 * v38;
      v33 = *(_QWORD *)(v32 + 32);
      v34 = *(_QWORD *)(v32 + 40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, double))(v34 + 16))(v16, &v45, v33, v34, v27 + v23);
      if (__OFADD__(v16++, 1))
        goto LABEL_38;
      a1 = v28;
      v11 = v37;
    }
    ++v17;
    v18 += 64;
    v19 += 8;
    if (v40 == v17)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v45;
    }
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for LayoutEngine.explicitAlignment(_:at:) in conformance ViewLayoutEngine<A>(unint64_t a1, double *a2, uint64_t a3)
{
  return ViewLayoutEngine.explicitAlignment(_:at:)(a1, a2, a3);
}

uint64_t protocol witness for static DefaultAlignmentFunction.defaultAlignment(_:size:data:) in conformance ViewLayoutEngine<A>(unint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return static ViewLayoutEngine.defaultAlignment(_:size:data:)(a1, a2, a3, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24));
}

uint64_t _GraphInputs.needsDynamicLayout.getter()
{
  uint64_t v0;

  return (*(unsigned __int8 *)(v0 + 37) >> 3) & 1;
}

uint64_t _GraphInputs.needsDynamicLayout.setter(uint64_t result)
{
  uint64_t v1;
  int v2;

  if ((result & 1) != 0)
    v2 = 2048;
  else
    v2 = 0;
  *(_DWORD *)(v1 + 36) = *(_DWORD *)(v1 + 36) & 0xFFFFF7FF | v2;
  return result;
}

_BYTE *(*_GraphInputs.needsDynamicLayout.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = (*(_DWORD *)(v1 + 36) & 0x800) != 0;
  return _GraphInputs.needsDynamicLayout.modify;
}

_BYTE *_GraphInputs.needsDynamicLayout.modify(_BYTE *result)
{
  int v1;

  if (result[8])
    v1 = 2048;
  else
    v1 = 0;
  *(_DWORD *)(*(_QWORD *)result + 36) = *(_DWORD *)(*(_QWORD *)result + 36) & 0xFFFFF7FF | v1;
  return result;
}

_BYTE *(*_ViewInputs.needsDynamicLayout.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = (*(_DWORD *)(v1 + 36) & 0x800) != 0;
  return _GraphInputs.needsDynamicLayout.modify;
}

uint64_t specialized static LayoutSubview.== infix(_:_:)(int32x4_t *a1, int32x4_t *a2)
{
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(*a1, *a2)), 0xFuLL))) & 1) != 0)
    return (a2[1].u8[0] ^ a1[1].u8[0] ^ 1) & 1;
  else
    return 0;
}

uint64_t specialized static LayoutSubviews.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int32x2_t *v4;
  int v5;
  int32x2_t *v6;
  int v7;

  if (*(_DWORD *)a1 != *(_DWORD *)a2)
    return 0;
  v4 = *(int32x2_t **)(a1 + 8);
  v5 = *(unsigned __int8 *)(a1 + 17);
  v6 = *(int32x2_t **)(a2 + 8);
  v7 = *(unsigned __int8 *)(a2 + 17);
  if ((*(_BYTE *)(a1 + 16) & 1) == 0)
  {
    if ((*(_BYTE *)(a2 + 16) & 1) != 0 || (specialized static Array<A>.== infix(_:_:)(v4, v6) & 1) == 0)
      return 0;
    return v5 ^ v7 ^ 1u;
  }
  if ((*(_BYTE *)(a2 + 16) & 1) != 0 && (specialized static Array<A>.== infix(_:_:)((uint64_t)v4, (uint64_t)v6) & 1) != 0)
    return v5 ^ v7 ^ 1u;
  return 0;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_7SwiftUI14LayoutSubviewsV7Storage33_57DDCF0A00C1B77B475771403C904EF9LLO17IndexedAttributesVs5NeverOTg503_s7d4UI14fg31V9selecting7indicesACx_tSTRzSi7b20RtzlFAC7Storage33_57ijklmno5LLO17pQ8VSiXEfU_AITf1cn_nTf4ng_n@<X0>(uint64_t result@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X3>, char a4@<W4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  int *v18;
  int v19;
  int v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v29;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v5 = (uint64_t)a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v29 = result;
  v32 = MEMORY[0x24BEE4AF8];
  v31 = (unint64_t)a2 - result;
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
  v6 = v31;
  if ((v31 & 0x8000000000000000) != 0)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  result = v32;
  if (!v31)
  {
    v5 = v29;
    a5 = (uint64_t)a2;
    if ((_DWORD *)v29 == a2)
      return result;
    goto LABEL_33;
  }
  v8 = v29;
  v7 = a2;
  if ((uint64_t)a2 >= v29)
  {
    v9 = 0;
    v10 = a3;
    v11 = a3 + 32;
    v12 = a3 + 32 + 12 * v29;
    a5 = a3 + 8 * v29;
    v13 = (_DWORD *)(a5 + 36);
    v14 = v29 - (_QWORD)a2;
    v15 = v29;
    v16 = a4;
    while (1)
    {
      v17 = v9 + 1;
      if (__OFADD__(v9, 1))
        break;
      a5 = v14 + v9;
      if (!(v14 + v9))
        goto LABEL_24;
      a5 = v8 + v9;
      if (v8 + v9 >= (uint64_t)v7 || v9 >= v6)
        goto LABEL_25;
      if ((v16 & 1) != 0)
      {
        if (a5 < 0)
          goto LABEL_26;
        v5 = *(_QWORD *)(v10 + 16);
        if (a5 >= (unint64_t)v5)
          goto LABEL_29;
        v5 = v11 + 12 * v15 + 4;
        v19 = *(_DWORD *)(v12 + 8);
        v18 = (int *)v12;
      }
      else
      {
        if (a5 < 0)
          goto LABEL_27;
        v5 = *(_QWORD *)(v10 + 16);
        if (a5 >= (unint64_t)v5)
          goto LABEL_28;
        v18 = (int *)(v11 + 8 * v15);
        v19 = v8 + v9;
        v5 = (uint64_t)v13;
      }
      v20 = *(_DWORD *)v5;
      v21 = *v18;
      v33 = result;
      v23 = *(_QWORD *)(result + 16);
      v22 = *(_QWORD *)(result + 24);
      if (v23 >= v22 >> 1)
      {
        v24 = v19;
        v25 = v14;
        v26 = v11;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
        v19 = v24;
        v17 = v9 + 1;
        v14 = v25;
        v11 = v26;
        v10 = a3;
        v7 = a2;
        v6 = v31;
        v16 = a4;
        v8 = v29;
        result = v33;
      }
      *(_QWORD *)(result + 16) = v23 + 1;
      a5 = result + 12 * v23;
      ++v9;
      *(_DWORD *)(a5 + 32) = v21;
      *(_DWORD *)(a5 + 36) = v20;
      *(_DWORD *)(a5 + 40) = v19;
      v12 += 12;
      v13 += 2;
      ++v15;
      if (v17 == v6)
        return result;
    }
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
LABEL_32:
  __break(1u);
LABEL_33:
  if (a5 >= v5)
    __break(1u);
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type LayoutSubviews and conformance LayoutSubviews()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LayoutSubviews and conformance LayoutSubviews;
  if (!lazy protocol witness table cache variable for type LayoutSubviews and conformance LayoutSubviews)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LayoutSubviews, &type metadata for LayoutSubviews);
    atomic_store(result, &lazy protocol witness table cache variable for type LayoutSubviews and conformance LayoutSubviews);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LayoutSubviews and conformance LayoutSubviews;
  if (!lazy protocol witness table cache variable for type LayoutSubviews and conformance LayoutSubviews)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LayoutSubviews, &type metadata for LayoutSubviews);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutSubviews and conformance LayoutSubviews);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LayoutSubviews and conformance LayoutSubviews;
  if (!lazy protocol witness table cache variable for type LayoutSubviews and conformance LayoutSubviews)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LayoutSubviews, &type metadata for LayoutSubviews);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutSubviews and conformance LayoutSubviews);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LayoutSubviews and conformance LayoutSubviews;
  if (!lazy protocol witness table cache variable for type LayoutSubviews and conformance LayoutSubviews)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LayoutSubviews, &type metadata for LayoutSubviews);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutSubviews and conformance LayoutSubviews);
  }
  return result;
}

uint64_t partial apply for closure #1 in Layout.updateLayoutComputer<A>(rule:layoutContext:children:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 32);
  v7 = *(_QWORD *)(v4 + 48);
  v8 = *(_DWORD *)(v4 + 64);
  v9 = *(_DWORD *)(v4 + 72);
  v10 = *(_QWORD *)(v4 + 80);
  v15 = *(_QWORD *)(v4 + 56);
  v16 = v8;
  v13 = v9;
  v14 = v10;
  v11 = type metadata accessor for ViewLayoutEngine(0, v5, v6, a4);
  return ViewLayoutEngine.update(layout:context:children:)(v7, (uint64_t)&v15, &v13, v11);
}

uint64_t partial apply for closure #2 in Layout.updateLayoutComputer<A>(rule:layoutContext:children:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #2 in Layout.updateLayoutComputer<A>(rule:layoutContext:children:)(*(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_DWORD *)(v1 + 64), *(_DWORD *)(v1 + 72), *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 32), a1);
}

uint64_t type metadata accessor for ViewLayoutEngine(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ViewLayoutEngine);
}

unint64_t lazy protocol witness table accessor for type AnyLayoutProperties and conformance AnyLayoutProperties()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyLayoutProperties and conformance AnyLayoutProperties;
  if (!lazy protocol witness table cache variable for type AnyLayoutProperties and conformance AnyLayoutProperties)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyLayoutProperties, &type metadata for AnyLayoutProperties);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyLayoutProperties and conformance AnyLayoutProperties);
  }
  return result;
}

uint64_t type metadata accessor for _LayoutTrait(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _LayoutTrait);
}

uint64_t partial apply for closure #1 in static _LayoutRoot._makeView(root:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in static _LayoutRoot._makeView(root:inputs:body:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t type metadata accessor for _LayoutRoot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _LayoutRoot);
}

unint64_t lazy protocol witness table accessor for type IndexingIterator<LayoutSubviews> and conformance IndexingIterator<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type IndexingIterator<LayoutSubviews> and conformance IndexingIterator<A>;
  if (!lazy protocol witness table cache variable for type IndexingIterator<LayoutSubviews> and conformance IndexingIterator<A>)
  {
    type metadata accessor for IndexingIterator<LayoutSubviews>();
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE2C18], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexingIterator<LayoutSubviews> and conformance IndexingIterator<A>);
  }
  return result;
}

void type metadata accessor for IndexingIterator<LayoutSubviews>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for IndexingIterator<LayoutSubviews>)
  {
    lazy protocol witness table accessor for type LayoutSubviews and conformance LayoutSubviews();
    v0 = type metadata accessor for IndexingIterator();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IndexingIterator<LayoutSubviews>);
  }
}

unint64_t instantiation function for generic protocol witness table for AnyLayoutProperties(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AnyLayoutProperties and conformance AnyLayoutProperties();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_234E62528@<X0>(uint64_t result@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  char *v3;
  uint64_t *v4;
  uint64_t v5;
  char v6;

  v3 = (char *)(result + 8);
  v4 = (uint64_t *)(result + 16);
  if (!*a2)
    v4 = (uint64_t *)result;
  v5 = *v4;
  if (*a2)
    v3 = (char *)(result + 24);
  v6 = *v3;
  *(_QWORD *)a3 = v5;
  *(_BYTE *)(a3 + 8) = v6;
  return result;
}

uint64_t *sub_234E62558(uint64_t *result, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;
  char v4;

  v3 = *result;
  v4 = *((_BYTE *)result + 8);
  if ((*a3 & 1) != 0)
  {
    *(_QWORD *)(a2 + 16) = v3;
    *(_BYTE *)(a2 + 24) = v4;
  }
  else
  {
    *(_QWORD *)a2 = v3;
    *(_BYTE *)(a2 + 8) = v4;
  }
  return result;
}

uint64_t sub_234E62580()
{
  return 0;
}

uint64_t sub_234E62590@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (*(_DWORD *)(result + 36) & 0x800) != 0;
  return result;
}

_BYTE *sub_234E625A0(_BYTE *result, uint64_t a2)
{
  int v2;

  if (*result)
    v2 = 2048;
  else
    v2 = 0;
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a2 + 36) & 0xFFFFF7FF | v2;
  return result;
}

uint64_t sub_234E625C4@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (*(_DWORD *)(result + 36) & 0x800) != 0;
  return result;
}

_BYTE *sub_234E625D4(_BYTE *result, uint64_t a2)
{
  int v2;

  if (*result)
    v2 = 2048;
  else
    v2 = 0;
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a2 + 36) & 0xFFFFF7FF | v2;
  return result;
}

uint64_t dispatch thunk of static Layout.layoutProperties.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of Layout.makeCache(subviews:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of Layout.updateCache(_:subviews:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of Layout.spacing(subviews:cache:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t dispatch thunk of Layout.sizeThatFits(proposal:subviews:cache:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 56))();
}

uint64_t dispatch thunk of Layout.placeSubviews(in:proposal:subviews:cache:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 64))();
}

uint64_t dispatch thunk of Layout.explicitAlignment(of:in:proposal:subviews:cache:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(uint64_t))(a9 + 72))(a1);
}

{
  return (*(uint64_t (**)(uint64_t))(a9 + 80))(a1);
}

uint64_t dispatch thunk of static Layout._makeLayoutView(root:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 88))();
}

uint64_t getEnumTagSinglePayload for LayoutProperties(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  unsigned int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 >= 0xFF)
  {
    if ((a2 + 33554177) >> 24)
    {
      v2 = a1[3];
      if (a1[3])
        return (*(unsigned __int16 *)a1 | (a1[2] << 16) | (v2 << 24)) - 16776961;
    }
    else
    {
      v2 = *(unsigned __int16 *)(a1 + 3);
      if (*(_WORD *)(a1 + 3))
        return (*(unsigned __int16 *)a1 | (a1[2] << 16) | (v2 << 24)) - 16776961;
    }
  }
  v4 = a1[1];
  v5 = v4 >= 2;
  v6 = (v4 + 2147483646) & 0x7FFFFFFF;
  if (!v5)
    v6 = -1;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for LayoutProperties(uint64_t result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;

  if ((a3 + 33554177) >> 24)
    v3 = 1;
  else
    v3 = 2;
  if (a3 <= 0xFE)
    v3 = 0;
  if (a2 > 0xFE)
  {
    *(_WORD *)result = a2 - 255;
    *(_BYTE *)(result + 2) = (a2 - 255) >> 16;
    if (v3)
    {
      v4 = ((a2 - 255) >> 24) + 1;
      if (v3 == 2)
        *(_WORD *)(result + 3) = v4;
      else
        *(_BYTE *)(result + 3) = v4;
    }
  }
  else
  {
    if (!v3)
      goto LABEL_10;
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2)
        return result;
LABEL_16:
      *(_BYTE *)(result + 1) = a2 + 1;
      return result;
    }
    *(_BYTE *)(result + 3) = 0;
    if (a2)
      goto LABEL_16;
  }
  return result;
}

ValueMetadata *type metadata accessor for LayoutProperties()
{
  return &type metadata for LayoutProperties;
}

ValueMetadata *type metadata accessor for ProposedViewSize()
{
  return &type metadata for ProposedViewSize;
}

ValueMetadata *type metadata accessor for ViewSpacing()
{
  return &type metadata for ViewSpacing;
}

uint64_t initializeBufferWithCopyOfBuffer for LayoutSubviews(uint64_t a1, uint64_t a2)
{
  char v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for LayoutSubviews(uint64_t a1, uint64_t a2)
{
  char v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  return a1;
}

uint64_t assignWithTake for LayoutSubviews(uint64_t a1, uint64_t a2)
{
  char v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  return a1;
}

uint64_t getEnumTagSinglePayload for LayoutSubviews(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 18))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LayoutSubviews(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 18) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 18) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for LayoutSubviews()
{
  return &type metadata for LayoutSubviews;
}

uint64_t getEnumTagSinglePayload for LayoutSubview(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for LayoutSubview(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for LayoutSubview()
{
  return &type metadata for LayoutSubview;
}

uint64_t dispatch thunk of static LayoutValueKey.defaultValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t getEnumTagSinglePayload for _LayoutRoot(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234E62AE8 + 4 * byte_2352A7630[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for _LayoutRoot(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

ValueMetadata *type metadata accessor for AnyLayoutProperties()
{
  return &type metadata for AnyLayoutProperties;
}

__n128 __swift_memcpy161_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[9];
  *(_BYTE *)(a1 + 160) = *((_BYTE *)a2 + 160);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ViewSizeCache(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 161))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ViewSizeCache(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 160) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 161) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ViewSizeCache()
{
  return &type metadata for ViewSizeCache;
}

uint64_t sub_234E62DBC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];

  v4 = *a1;
  v5 = a1[2];
  v6 = type metadata accessor for _LayoutTrait(255, a1[1], a1[3], a4);
  v7 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _LayoutTrait<A>, v6);
  v9 = type metadata accessor for _TraitWritingModifier(255, v6, v7, v8);
  v11 = type metadata accessor for ModifiedContent(255, v4, v9, v10);
  v13[0] = v5;
  v13[1] = &protocol witness table for _TraitWritingModifier<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v11, v13);
}

uint64_t initializeBufferWithCopyOfBuffer for LayoutSubviews.Storage(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for LayoutSubviews.Storage(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for LayoutSubviews.Storage(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

void *type metadata accessor for LayoutSubviews.Storage()
{
  return &unk_25061AC70;
}

uint64_t type metadata completion function for ViewLayoutEngine()
{
  uint64_t AssociatedTypeWitness;
  unint64_t v1;
  unint64_t v2;

  AssociatedTypeWitness = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return AssociatedTypeWitness;
}

uint64_t *initializeBufferWithCopyOfBuffer for ViewLayoutEngine(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD *v35;
  _OWORD *v36;
  __int128 v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v7 + v10;
  v12 = (v7 + v10) & ~v10;
  v13 = *(_QWORD *)(v9 + 64);
  v14 = ((((((v13 + v12 + 199) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFFFF8) + 8;
  v15 = v10 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (v15 > 7 || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0 || v14 > 0x18)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + (((v15 | 7) + 16) & ~(unint64_t)(v15 | 7)));
    swift_retain();
  }
  else
  {
    v19 = AssociatedTypeWitness;
    v20 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    v21 = ((unint64_t)a1 + v11) & v20;
    v22 = ((unint64_t)a2 + v11) & v20;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(v21, v22, v19);
    v23 = (v21 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
    v24 = (v22 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_DWORD *)v23 = *(_DWORD *)v24;
    *(_QWORD *)(v23 + 8) = *(_QWORD *)(v24 + 8);
    *(_BYTE *)(v23 + 16) = *(_BYTE *)(v24 + 16);
    v25 = (v21 + v13 + 31) & 0xFFFFFFFFFFFFFFF8;
    v26 = (v22 + v13 + 31) & 0xFFFFFFFFFFFFFFF8;
    v27 = *(_OWORD *)(v26 + 112);
    v28 = *(_OWORD *)(v26 + 128);
    v29 = *(_OWORD *)(v26 + 144);
    *(_BYTE *)(v25 + 160) = *(_BYTE *)(v26 + 160);
    *(_OWORD *)(v25 + 128) = v28;
    *(_OWORD *)(v25 + 144) = v29;
    *(_OWORD *)(v25 + 112) = v27;
    v30 = *(_OWORD *)(v26 + 48);
    v31 = *(_OWORD *)(v26 + 64);
    v32 = *(_OWORD *)(v26 + 96);
    *(_OWORD *)(v25 + 80) = *(_OWORD *)(v26 + 80);
    *(_OWORD *)(v25 + 96) = v32;
    *(_OWORD *)(v25 + 48) = v30;
    *(_OWORD *)(v25 + 64) = v31;
    v33 = *(_OWORD *)v26;
    v34 = *(_OWORD *)(v26 + 32);
    *(_OWORD *)(v25 + 16) = *(_OWORD *)(v26 + 16);
    *(_OWORD *)(v25 + 32) = v34;
    *(_OWORD *)v25 = v33;
    v35 = (_OWORD *)((v21 + v13 + 199) & 0xFFFFFFFFFFFFFFF8);
    v36 = (_OWORD *)((v22 + v13 + 199) & 0xFFFFFFFFFFFFFFF8);
    v37 = v36[1];
    *v35 = *v36;
    v35[1] = v37;
    v38 = (_QWORD *)(((unint64_t)v35 + 39) & 0xFFFFFFFFFFFFFFF8);
    v39 = (_QWORD *)(((unint64_t)v36 + 39) & 0xFFFFFFFFFFFFFFF8);
    *v38 = *v39;
    v40 = ((unint64_t)v38 + 15) & 0xFFFFFFFFFFFFFFF8;
    v41 = ((unint64_t)v39 + 15) & 0xFFFFFFFFFFFFFFF8;
    v42 = *(_OWORD *)(v41 + 16);
    v43 = *(_OWORD *)(v41 + 32);
    v44 = *(_OWORD *)(v41 + 48);
    *(_BYTE *)(v40 + 64) = *(_BYTE *)(v41 + 64);
    *(_OWORD *)(v40 + 32) = v43;
    *(_OWORD *)(v40 + 48) = v44;
    *(_OWORD *)(v40 + 16) = v42;
    *(_OWORD *)v40 = *(_OWORD *)v41;
    *(_QWORD *)(((unint64_t)v38 + 87) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v39 + 87) & 0xFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for ViewLayoutEngine(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(uint64_t, _QWORD))(v3 + 8))(a1, *(_QWORD *)(a2 + 16));
  v4 = *(_QWORD *)(v3 + 64) + a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))((v4 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80), AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ViewLayoutEngine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char v24;
  __int128 v25;
  __int128 v26;
  _OWORD *v27;
  _OWORD *v28;
  __int128 v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  __int128 v35;
  __int128 v36;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 16))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v6 + v9 + a1) & ~v9;
  v11 = (v6 + v9 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v10, v11, AssociatedTypeWitness);
  v12 = *(_QWORD *)(v8 + 64);
  v13 = v10 + v12;
  v14 = v11 + v12;
  v15 = (v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)v15 = *(_DWORD *)v16;
  *(_QWORD *)(v15 + 8) = *(_QWORD *)(v16 + 8);
  *(_BYTE *)(v15 + 16) = *(_BYTE *)(v16 + 16);
  v17 = (v13 + 31) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v14 + 31) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(_OWORD *)(v18 + 16);
  v19 = *(_OWORD *)(v18 + 32);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *(_OWORD *)(v17 + 16) = v20;
  *(_OWORD *)(v17 + 32) = v19;
  v21 = *(_OWORD *)(v18 + 96);
  v23 = *(_OWORD *)(v18 + 48);
  v22 = *(_OWORD *)(v18 + 64);
  *(_OWORD *)(v17 + 80) = *(_OWORD *)(v18 + 80);
  *(_OWORD *)(v17 + 96) = v21;
  *(_OWORD *)(v17 + 48) = v23;
  *(_OWORD *)(v17 + 64) = v22;
  v24 = *(_BYTE *)(v18 + 160);
  v26 = *(_OWORD *)(v18 + 128);
  v25 = *(_OWORD *)(v18 + 144);
  *(_OWORD *)(v17 + 112) = *(_OWORD *)(v18 + 112);
  *(_OWORD *)(v17 + 128) = v26;
  *(_OWORD *)(v17 + 144) = v25;
  *(_BYTE *)(v17 + 160) = v24;
  v27 = (_OWORD *)((v13 + 199) & 0xFFFFFFFFFFFFFFF8);
  v28 = (_OWORD *)((v14 + 199) & 0xFFFFFFFFFFFFFFF8);
  v29 = v28[1];
  *v27 = *v28;
  v27[1] = v29;
  v30 = (_QWORD *)(((unint64_t)v27 + 39) & 0xFFFFFFFFFFFFFFF8);
  v31 = (_QWORD *)(((unint64_t)v28 + 39) & 0xFFFFFFFFFFFFFFF8);
  *v30 = *v31;
  v32 = ((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8;
  v33 = ((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v32 = *(_OWORD *)v33;
  v34 = *(_BYTE *)(v33 + 64);
  v36 = *(_OWORD *)(v33 + 32);
  v35 = *(_OWORD *)(v33 + 48);
  *(_OWORD *)(v32 + 16) = *(_OWORD *)(v33 + 16);
  *(_OWORD *)(v32 + 32) = v36;
  *(_OWORD *)(v32 + 48) = v35;
  *(_BYTE *)(v32 + 64) = v34;
  *(_QWORD *)(((unint64_t)v30 + 87) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v31 + 87) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ViewLayoutEngine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 24))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v6 + v9 + a1) & ~v9;
  v11 = (v6 + v9 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(v10, v11, AssociatedTypeWitness);
  v12 = *(_QWORD *)(v8 + 64);
  v13 = v10 + v12;
  v14 = v11 + v12;
  v15 = (v10 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)v15 = *(_DWORD *)v16;
  *(_QWORD *)(v15 + 8) = *(_QWORD *)(v16 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v15 + 16) = *(_BYTE *)(v16 + 16);
  v17 = (v13 + 31) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v14 + 31) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(_OWORD *)v18;
  v20 = *(_OWORD *)(v18 + 16);
  v21 = *(_OWORD *)(v18 + 32);
  *(_BYTE *)(v17 + 48) = *(_BYTE *)(v18 + 48);
  *(_OWORD *)(v17 + 16) = v20;
  *(_OWORD *)(v17 + 32) = v21;
  *(_OWORD *)v17 = v19;
  v22 = *(_OWORD *)(v18 + 56);
  v23 = *(_OWORD *)(v18 + 72);
  v24 = *(_OWORD *)(v18 + 88);
  *(_BYTE *)(v17 + 104) = *(_BYTE *)(v18 + 104);
  *(_OWORD *)(v17 + 88) = v24;
  *(_OWORD *)(v17 + 72) = v23;
  *(_OWORD *)(v17 + 56) = v22;
  v25 = *(_OWORD *)(v18 + 112);
  v26 = *(_OWORD *)(v18 + 128);
  v27 = *(_OWORD *)(v18 + 144);
  *(_BYTE *)(v17 + 160) = *(_BYTE *)(v18 + 160);
  *(_OWORD *)(v17 + 128) = v26;
  *(_OWORD *)(v17 + 144) = v27;
  *(_OWORD *)(v17 + 112) = v25;
  v28 = (v13 + 199) & 0xFFFFFFFFFFFFFFF8;
  v29 = (_QWORD *)((v14 + 199) & 0xFFFFFFFFFFFFFFF8);
  *(_QWORD *)v28 = *v29;
  *(_QWORD *)(v28 + 8) = v29[1];
  *(_QWORD *)(v28 + 16) = v29[2];
  *(_QWORD *)(v28 + 24) = v29[3];
  v28 += 39;
  v30 = (_QWORD *)(((unint64_t)v29 + 39) & 0xFFFFFFFFFFFFFFF8);
  v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 15;
  *(_QWORD *)(v28 & 0xFFFFFFFFFFFFFFF8) = *v30;
  v32 = (v28 & 0xFFFFFFFFFFFFFFF8) + 87;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v33 = v31 & 0xFFFFFFFFFFFFFFF8;
  v34 = ((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8;
  v35 = *(_OWORD *)v34;
  *(_BYTE *)(v33 + 16) = *(_BYTE *)(v34 + 16);
  *(_OWORD *)v33 = v35;
  v36 = *(_OWORD *)(v34 + 24);
  *(_BYTE *)(v33 + 40) = *(_BYTE *)(v34 + 40);
  *(_OWORD *)(v33 + 24) = v36;
  v37 = *(_OWORD *)(v34 + 48);
  *(_BYTE *)(v33 + 64) = *(_BYTE *)(v34 + 64);
  *(_OWORD *)(v33 + 48) = v37;
  *(_QWORD *)(v32 & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v30 + 87) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for ViewLayoutEngine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _OWORD *v27;
  _OWORD *v28;
  __int128 v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 32))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v6 + v9 + a1) & ~v9;
  v11 = (v6 + v9 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v10, v11, AssociatedTypeWitness);
  v12 = *(_QWORD *)(v8 + 64);
  v13 = v10 + v12;
  v14 = v11 + v12;
  v15 = (v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *(_BYTE *)(v15 + 16) = *(_BYTE *)(v16 + 16);
  v17 = (v13 + 31) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v14 + 31) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(_OWORD *)(v18 + 112);
  v20 = *(_OWORD *)(v18 + 128);
  v21 = *(_OWORD *)(v18 + 144);
  *(_BYTE *)(v17 + 160) = *(_BYTE *)(v18 + 160);
  *(_OWORD *)(v17 + 128) = v20;
  *(_OWORD *)(v17 + 144) = v21;
  *(_OWORD *)(v17 + 112) = v19;
  v22 = *(_OWORD *)(v18 + 48);
  v23 = *(_OWORD *)(v18 + 64);
  v24 = *(_OWORD *)(v18 + 96);
  *(_OWORD *)(v17 + 80) = *(_OWORD *)(v18 + 80);
  *(_OWORD *)(v17 + 96) = v24;
  *(_OWORD *)(v17 + 48) = v22;
  *(_OWORD *)(v17 + 64) = v23;
  v25 = *(_OWORD *)v18;
  v26 = *(_OWORD *)(v18 + 32);
  *(_OWORD *)(v17 + 16) = *(_OWORD *)(v18 + 16);
  *(_OWORD *)(v17 + 32) = v26;
  *(_OWORD *)v17 = v25;
  v27 = (_OWORD *)((v13 + 199) & 0xFFFFFFFFFFFFFFF8);
  v28 = (_OWORD *)((v14 + 199) & 0xFFFFFFFFFFFFFFF8);
  v29 = v28[1];
  *v27 = *v28;
  v27[1] = v29;
  v30 = (_QWORD *)(((unint64_t)v27 + 39) & 0xFFFFFFFFFFFFFFF8);
  v31 = (_QWORD *)(((unint64_t)v28 + 39) & 0xFFFFFFFFFFFFFFF8);
  *v30 = *v31;
  v32 = ((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8;
  v33 = ((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8;
  v34 = *(_OWORD *)(v33 + 16);
  v35 = *(_OWORD *)(v33 + 32);
  v36 = *(_OWORD *)(v33 + 48);
  *(_BYTE *)(v32 + 64) = *(_BYTE *)(v33 + 64);
  *(_OWORD *)(v32 + 32) = v35;
  *(_OWORD *)(v32 + 48) = v36;
  *(_OWORD *)(v32 + 16) = v34;
  *(_OWORD *)v32 = *(_OWORD *)v33;
  *(_QWORD *)(((unint64_t)v30 + 87) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v31 + 87) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for ViewLayoutEngine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 40))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v6 + v9 + a1) & ~v9;
  v11 = (v6 + v9 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40))(v10, v11, AssociatedTypeWitness);
  v12 = *(_QWORD *)(v8 + 64);
  v13 = v10 + v12;
  v14 = v11 + v12;
  v15 = (v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)v15 = *(_DWORD *)v16;
  *(_QWORD *)(v15 + 8) = *(_QWORD *)(v16 + 8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(v15 + 16) = *(_BYTE *)(v16 + 16);
  v17 = (v13 + 31) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v14 + 31) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(_OWORD *)v18;
  v20 = *(_OWORD *)(v18 + 16);
  v21 = *(_OWORD *)(v18 + 32);
  *(_BYTE *)(v17 + 48) = *(_BYTE *)(v18 + 48);
  *(_OWORD *)(v17 + 16) = v20;
  *(_OWORD *)(v17 + 32) = v21;
  *(_OWORD *)v17 = v19;
  v22 = *(_OWORD *)(v18 + 56);
  v23 = *(_OWORD *)(v18 + 72);
  v24 = *(_OWORD *)(v18 + 88);
  *(_BYTE *)(v17 + 104) = *(_BYTE *)(v18 + 104);
  *(_OWORD *)(v17 + 88) = v24;
  *(_OWORD *)(v17 + 72) = v23;
  *(_OWORD *)(v17 + 56) = v22;
  v25 = *(_OWORD *)(v18 + 112);
  v26 = *(_OWORD *)(v18 + 128);
  v27 = *(_OWORD *)(v18 + 144);
  *(_BYTE *)(v17 + 160) = *(_BYTE *)(v18 + 160);
  *(_OWORD *)(v17 + 128) = v26;
  *(_OWORD *)(v17 + 144) = v27;
  *(_OWORD *)(v17 + 112) = v25;
  v28 = (v13 + 199) & 0xFFFFFFFFFFFFFFF8;
  v29 = (_QWORD *)((v14 + 199) & 0xFFFFFFFFFFFFFFF8);
  *(_QWORD *)v28 = *v29;
  *(_QWORD *)(v28 + 8) = v29[1];
  *(_QWORD *)(v28 + 16) = v29[2];
  *(_QWORD *)(v28 + 24) = v29[3];
  v28 += 39;
  v30 = (_QWORD *)(((unint64_t)v29 + 39) & 0xFFFFFFFFFFFFFFF8);
  v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 15;
  *(_QWORD *)(v28 & 0xFFFFFFFFFFFFFFF8) = *v30;
  v32 = (v28 & 0xFFFFFFFFFFFFFFF8) + 87;
  swift_bridgeObjectRelease();
  v33 = v31 & 0xFFFFFFFFFFFFFFF8;
  v34 = ((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8;
  v35 = *(_OWORD *)v34;
  *(_BYTE *)(v33 + 16) = *(_BYTE *)(v34 + 16);
  *(_OWORD *)v33 = v35;
  v36 = *(_OWORD *)(v34 + 24);
  *(_BYTE *)(v33 + 40) = *(_BYTE *)(v34 + 40);
  *(_OWORD *)(v33 + 24) = v36;
  v37 = *(_OWORD *)(v34 + 48);
  *(_BYTE *)(v33 + 64) = *(_BYTE *)(v34 + 64);
  *(_OWORD *)(v33 + 48) = v37;
  *(_QWORD *)(v32 & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v30 + 87) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ViewLayoutEngine(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  unint64_t v22;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if (v10 <= v7)
    v11 = v7;
  else
    v11 = *(_DWORD *)(v9 + 84);
  if (v11 <= 0x7FFFFFFF)
    v11 = 0x7FFFFFFF;
  if (!a2)
    return 0;
  v12 = AssociatedTypeWitness;
  v13 = *(unsigned __int8 *)(v9 + 80);
  v14 = *(_QWORD *)(v6 + 64) + v13;
  v15 = *(_QWORD *)(v9 + 64);
  if (v11 < a2)
  {
    if (((((((((v15 + (v14 & ~v13) + 199) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFFFF8)
         + 8) & 0xFFFFFFF8) != 0)
      v16 = 2;
    else
      v16 = a2 - v11 + 1;
    if (v16 >= 0x10000)
      v17 = 4;
    else
      v17 = 2;
    if (v16 < 0x100)
      v17 = 1;
    if (v16 >= 2)
      v18 = v17;
    else
      v18 = 0;
    __asm { BR              X17 }
  }
  if ((_DWORD)v7 == v11)
  {
    v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
    v21 = a1;
    v10 = v7;
    v12 = v5;
    return v20(v21, v10, v12);
  }
  v21 = (v14 + a1) & ~v13;
  if ((_DWORD)v10 == v11)
  {
    v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    return v20(v21, v10, v12);
  }
  v22 = *(_QWORD *)(((v15 + v21 + 7) & 0xFFFFFFFFFFFFF8) + 8);
  if (v22 >= 0xFFFFFFFF)
    LODWORD(v22) = -1;
  return (v22 + 1);
}

void storeEnumTagSinglePayload for ViewLayoutEngine(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v9 + 84) <= v8)
    v10 = v8;
  else
    v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  if (v10 >= a3)
  {
    v13 = 0;
    if (a2 <= v10)
      goto LABEL_19;
  }
  else
  {
    if (((((((*(_DWORD *)(v9 + 64)
             + ((*(_DWORD *)(v7 + 64) + *(unsigned __int8 *)(v9 + 80)) & ~*(unsigned __int8 *)(v9 + 80))
             + 199) & 0xFFFFFFF8)
           + 39) & 0xFFFFFFF8)
         + 87) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v11 = a3 - v10 + 1;
    else
      v11 = 2;
    if (v11 >= 0x10000)
      v12 = 4;
    else
      v12 = 2;
    if (v11 < 0x100)
      v12 = 1;
    if (v11 >= 2)
      v13 = v12;
    else
      v13 = 0;
    if (a2 <= v10)
LABEL_19:
      __asm { BR              X15 }
  }
  if (((((((*(_DWORD *)(v9 + 64)
           + ((*(_DWORD *)(v7 + 64) + *(unsigned __int8 *)(v9 + 80)) & ~*(unsigned __int8 *)(v9 + 80))
           + 199) & 0xFFFFFFF8)
         + 39) & 0xFFFFFFF8)
       + 87) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v14 = ~v10 + a2;
    bzero(a1, ((((((*(_QWORD *)(v9 + 64)+ ((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ 199) & 0xFFFFFFFFFFFFFFF8)+ 39) & 0xFFFFFFFFFFFFFFF8)+ 87) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *a1 = v14;
  }
  __asm { BR              X10 }
}

void sub_234E63CEC()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
  JUMPOUT(0x234E63D8CLL);
}

void sub_234E63CF4()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = 0;
  if (v0)
    JUMPOUT(0x234E63CFCLL);
  JUMPOUT(0x234E63D8CLL);
}

void sub_234E63D4C()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
  JUMPOUT(0x234E63D8CLL);
}

void sub_234E63D54()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = v1;
  JUMPOUT(0x234E63D8CLL);
}

uint64_t sub_234E63D5C@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_WORD *)(v11 + v14) = 0;
  if (!(_DWORD)v10)
    JUMPOUT(0x234E63D8CLL);
  if ((_DWORD)v13 == v7)
  {
    v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
    v4 = v11;
    v5 = v10;
    a1 = v13;
    a2 = v12;
  }
  else
  {
    v4 = (v8 + v11) & v9;
    if ((_DWORD)a1 != v7)
      JUMPOUT(0x234E63D68);
    v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 56);
    v5 = v10;
  }
  return v3(v4, v5, a1, a2);
}

uint64_t partial apply for closure #1 in ViewLayoutEngine.explicitAlignment(_:at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in ViewLayoutEngine.explicitAlignment(_:at:)(a1, *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2, *(double *)(v2 + 32), *(double *)(v2 + 40), *(_QWORD *)(v2 + 48), *(double *)(v2 + 56));
}

unint64_t *partial apply for closure #1 in LayoutSubviews.selecting<A>(indices:)@<X0>(unint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in LayoutSubviews.selecting<A>(indices:)(a1, *(_QWORD *)(v2 + 24), *(_BYTE *)(v2 + 32), a2);
}

uint64_t lazy protocol witness table accessor for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentFetch<LayoutDirection>, (uint64_t)&type metadata for LayoutDirection, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EnvironmentFetch);
    result = MEMORY[0x23B7C9C04](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for LayoutSubviews.Storage.IndexedAttributes()
{
  return &type metadata for LayoutSubviews.Storage.IndexedAttributes;
}

uint64_t _IdentifiedViewProxy.identifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of AnyHashable(v1, a1);
}

uint64_t _IdentifiedViewProxy.identifier.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of AnyHashable(a1, v1);
}

uint64_t (*_IdentifiedViewProxy.identifier.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double _IdentifiedViewProxy.size.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 40);
}

void _IdentifiedViewProxy.size.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 40) = a1;
  *(double *)(v2 + 48) = a2;
}

uint64_t (*_IdentifiedViewProxy.size.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double _IdentifiedViewProxy.position.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 56);
}

void _IdentifiedViewProxy.position.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 56) = a1;
  *(double *)(v2 + 64) = a2;
}

uint64_t (*_IdentifiedViewProxy.position.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _IdentifiedViewProxy.transform.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;

  *(_QWORD *)a1 = *(_QWORD *)(v1 + 72);
  v2 = *(_OWORD *)(v1 + 96);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(a1 + 24) = v2;
  return swift_retain();
}

__n128 _IdentifiedViewProxy.transform.setter(uint64_t a1)
{
  __n128 *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  __n128 result;
  __n128 v6;

  v2 = *(_QWORD *)a1;
  v6 = *(__n128 *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  swift_release();
  v1[4].n128_u64[1] = v2;
  result = v6;
  v1[5] = v6;
  v1[6].n128_u64[0] = v3;
  v1[6].n128_u64[1] = v4;
  return result;
}

uint64_t (*_IdentifiedViewProxy.transform.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t key path getter for _IdentifiedViewProxy.adjustment : _IdentifiedViewProxy@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD *)(a1 + 112);
  v4 = *(_QWORD *)(a1 + 120);
  if (v3)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @callee_guaranteed (@guaranteed RBDisplayList) -> ();
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)())v5;
  return outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v3);
}

uint64_t key path setter for _IdentifiedViewProxy.adjustment : _IdentifiedViewProxy(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @callee_guaranteed (@guaranteed RBDisplayList) -> ();
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *(_QWORD *)(a2 + 112);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v3);
  result = outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v7);
  *(_QWORD *)(a2 + 112) = v6;
  *(_QWORD *)(a2 + 120) = v5;
  return result;
}

uint64_t _IdentifiedViewProxy.adjustment.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 112);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v1);
  return v1;
}

uint64_t _IdentifiedViewProxy.adjustment.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*(_QWORD *)(v2 + 112));
  *(_QWORD *)(v2 + 112) = a1;
  *(_QWORD *)(v2 + 120) = a2;
  return result;
}

uint64_t (*_IdentifiedViewProxy.adjustment.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _IdentifiedViewProxy.accessibilityNodeStorage.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Any?(v1 + 128, a1);
}

uint64_t _IdentifiedViewProxy.accessibilityNodeStorage.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of Any?(a1, v1 + 128);
}

uint64_t outlined assign with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Any?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*_IdentifiedViewProxy.accessibilityNodeStorage.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_IdentifiedViewProxy.platform.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _IdentifiedViewProxy.init(identifier:size:position:transform:accessibilityNode:platform:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>)
{
  uint64_t v8;
  __int128 v9;
  __int128 v10;

  v8 = *a2;
  v9 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(_OWORD *)(a4 + 16) = v9;
  *(_OWORD *)(a4 + 144) = 0u;
  *(_QWORD *)(a4 + 32) = *(_QWORD *)(a1 + 32);
  *(double *)(a4 + 40) = a5;
  *(double *)(a4 + 48) = a6;
  *(double *)(a4 + 56) = a7;
  *(double *)(a4 + 64) = a8;
  *(_QWORD *)(a4 + 72) = v8;
  v10 = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(a4 + 80) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a4 + 96) = v10;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 128) = 0u;
  return outlined assign with take of Any?(a3, a4 + 128);
}

double _IdentifiedViewProxy.boundingRect.getter()
{
  uint64_t v0;
  uint64_t v1;
  float64x2_t v2;
  void (*v3)(_QWORD *);
  uint64_t v5;
  __int128 v6;
  float64x2_t v7;
  _OWORD v8[2];
  uint64_t v9;
  char v10;
  _QWORD v11[2];
  __int128 v12;

  v1 = *(_QWORD *)(v0 + 72);
  v11[0] = 0;
  v11[1] = 0;
  v12 = *(_OWORD *)(v0 + 40);
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  v10 = 2;
  v5 = v1;
  v2 = vsubq_f64(*(float64x2_t *)(v0 + 96), vsubq_f64(*(float64x2_t *)(v0 + 56), *(float64x2_t *)(v0 + 80)));
  v6 = *(_OWORD *)(v0 + 56);
  v7 = v2;
  swift_retain();
  CGRect.convert(to:transform:)((uint64_t)v8, &v5);
  outlined destroy of CoordinateSpace((uint64_t)v8);
  v3 = *(void (**)(_QWORD *))(v0 + 112);
  if (v3)
    v3(v11);
  swift_release();
  return *(double *)v11;
}

uint64_t IdentifiedViewPlatformInputs.init(inputs:outputs:)()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t destroy for _IdentifiedViewProxy(uint64_t a1)
{
  uint64_t result;

  __swift_destroy_boxed_opaque_existential_1(a1);
  result = swift_release();
  if (*(_QWORD *)(a1 + 112))
    result = swift_release();
  if (*(_QWORD *)(a1 + 152))
    return __swift_destroy_boxed_opaque_existential_1(a1 + 128);
  return result;
}

uint64_t initializeWithCopy for _IdentifiedViewProxy(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  __int128 v11;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_QWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  swift_retain();
  if (v5)
  {
    v7 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 112) = v5;
    *(_QWORD *)(a1 + 120) = v7;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  }
  v8 = (_OWORD *)(a1 + 128);
  v9 = (_OWORD *)(a2 + 128);
  v10 = *(_QWORD *)(a2 + 152);
  if (v10)
  {
    *(_QWORD *)(a1 + 152) = v10;
    (**(void (***)(_OWORD *, _OWORD *))(v10 - 8))(v8, v9);
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 144);
    *v8 = *v9;
    *(_OWORD *)(a1 + 144) = v11;
  }
  return a1;
}

uint64_t assignWithCopy for _IdentifiedViewProxy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v5 = *(_QWORD *)(a2 + 112);
  if (v4)
  {
    if (v5)
    {
      v6 = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 112) = v5;
      *(_QWORD *)(a1 + 120) = v6;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v5)
  {
    v7 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 112) = v5;
    *(_QWORD *)(a1 + 120) = v7;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
LABEL_8:
  v8 = *(_QWORD *)(a2 + 152);
  if (!*(_QWORD *)(a1 + 152))
  {
    if (v8)
    {
      *(_QWORD *)(a1 + 152) = v8;
      (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 128, a2 + 128);
      return a1;
    }
LABEL_14:
    v9 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v9;
    return a1;
  }
  if (!v8)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 128);
    goto LABEL_14;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 128), (uint64_t *)(a2 + 128));
  return a1;
}

uint64_t assignWithTake for _IdentifiedViewProxy(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_release();
  v5 = *(_QWORD *)(a2 + 112);
  v6 = *(_QWORD *)(a1 + 112);
  v7 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v7;
  if (v6)
  {
    if (v5)
    {
      v8 = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 112) = v5;
      *(_QWORD *)(a1 + 120) = v8;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v5)
  {
    v9 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 112) = v5;
    *(_QWORD *)(a1 + 120) = v9;
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
LABEL_8:
  if (*(_QWORD *)(a1 + 152))
    __swift_destroy_boxed_opaque_existential_1(a1 + 128);
  v10 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v10;
  return a1;
}

uint64_t getEnumTagSinglePayload for _IdentifiedViewProxy(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 160))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _IdentifiedViewProxy(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 160) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 160) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _IdentifiedViewProxy()
{
  return &type metadata for _IdentifiedViewProxy;
}

ValueMetadata *type metadata accessor for IdentifiedViewPlatformInputs()
{
  return &type metadata for IdentifiedViewPlatformInputs;
}

ValueMetadata *type metadata accessor for _IdentifiedViewProxy.Platform()
{
  return &type metadata for _IdentifiedViewProxy.Platform;
}

uint64_t sub_234E646A0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _BenchmarkHost.viewForIdentifier<A, B>(_:_:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;

  v3 = v2;
  swift_getObjectType();
  v6 = swift_conformsToProtocol2();
  if (v6)
    v7 = v6;
  else
    v7 = 0;
  if (v6)
    v8 = v3;
  else
    v8 = 0;
  if (!v8)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 1, 1, a1);
  ObjectType = swift_getObjectType();
  swift_unknownObjectRetain();
  ViewRendererHost.findIdentifier<A, B>(_:root:filter:)(0x100000000, ObjectType, a1, v7, a2);
  return swift_unknownObjectRelease();
}

uint64_t _BenchmarkHost.stateForIdentifier<A, B, C>(_:type:in:)@<X0>(uint64_t a1@<X5>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v14;

  v3 = v2;
  swift_getObjectType();
  v6 = swift_conformsToProtocol2();
  if (v6)
    v9 = v6;
  else
    v9 = 0;
  if (v6)
    v10 = v3;
  else
    v10 = 0;
  if (v10)
  {
    ObjectType = swift_getObjectType();
    swift_unknownObjectRetain();
    ViewRendererHost.stateForIdentifier<A, B, C>(_:type:in:)(v12, ObjectType, a1, v9, a2);
    return swift_unknownObjectRelease();
  }
  else
  {
    v14 = type metadata accessor for Binding(0, a1, v7, v8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a2, 1, 1, v14);
  }
}

uint64_t ViewRendererHost.stateForIdentifier<A, B, C>(_:type:in:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X5>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v8;

  v8 = type metadata accessor for Binding(0, a3, a1, a2);
  return ViewRendererHost.findIdentifier<A, B>(_:root:filter:)(0x100000000, a2, v8, a4, a5);
}

uint64_t dispatch thunk of IdentifierProvider.matchesIdentifier<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t closure #1 in ViewRendererHost.viewForIdentifier<A, B>(_:_:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;

  v23 = a5;
  v24 = a6;
  v25 = a1;
  v26 = a8;
  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v23 - v14;
  v17 = type metadata accessor for ViewValuePredicate(0, a4, a7, v16);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v23 - v20;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)(a4 - 8) + 56))(v15, 1, 1, a4, v19);
  ViewValuePredicate.init(view:)((uint64_t)v15, a4, (uint64_t)v21);
  v27 = a2;
  v28 = a3;
  v29 = a4;
  v30 = v23;
  v31 = v24;
  v32 = a7;
  v33 = v21;
  AGAttribute.breadthFirstSearch(options:_:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 16))(v26, v21, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v21, v17);
}

uint64_t ViewRendererHost.findIdentifier<A, B>(_:root:filter:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X4>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if ((a1 & 0x100000000) != 0)
  {
    (*(void (**)(uint64_t, uint64_t))(a4 + 16))(a2, a4);
    swift_release();
  }
  v6 = type metadata accessor for Optional();
  swift_allocBox();
  v8 = v7;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(v7, 1, 1, a3);
  MEMORY[0x24BDAC7A8](v9);
  AGAttribute.breadthFirstSearch(options:_:)();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a5, v8, v6);
  return swift_release();
}

uint64_t closure #1 in ViewRendererHost.stateForIdentifier<A, B, C>(_:type:in:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;

  v25[1] = a1;
  v26 = a9;
  v16 = type metadata accessor for ViewStatePredicate(0, a5, a4, a8);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)v25 - v18;
  ViewStatePredicate.init()(a4, a8, v20, (uint64_t)v25 - v18);
  v27 = a2;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v31 = a6;
  v32 = a7;
  v33 = a8;
  v34 = v19;
  AGAttribute.breadthFirstSearch(options:_:)();
  type metadata accessor for Binding(255, a4, v21, v22);
  v23 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v26, v19, v23);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
}

uint64_t partial apply for closure #1 in ViewRendererHost.stateForIdentifier<A, B, C>(_:type:in:)@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in ViewRendererHost.stateForIdentifier<A, B, C>(_:type:in:)(a1, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7], v2[8], a2);
}

uint64_t partial apply for closure #1 in ViewRendererHost.findIdentifier<A, B>(_:root:filter:)(unsigned int a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t *AttributeInfo;

  v3 = v1[2];
  v4 = v1[3];
  v5 = v1[4];
  v6 = v1[5];
  v8 = v1[6];
  v7 = v1[7];
  v9 = (void (*)(uint64_t))v1[8];
  v10 = v1[9];
  v11 = v1[10];
  AttributeInfo = (uint64_t *)AGGraphGetAttributeInfo();
  return project #1 <A><A1, B1><A2>(type:) in closure #1 in ViewRendererHost.findIdentifier<A, B>(_:root:filter:)(*AttributeInfo, a1, v7, v9, v10, v11, v3, v4, v5, *AttributeInfo, v6, v8) & 1;
}

uint64_t project #1 <A><A1, B1><A2>(type:) in closure #1 in ViewRendererHost.findIdentifier<A, B>(_:root:filter:)(uint64_t a1, unsigned int a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t);
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51[2];
  uint64_t v52;
  _QWORD v53[3];
  uint64_t v54;
  uint64_t v55;

  v49 = a3;
  v50 = a8;
  v48 = a5;
  v44 = a4;
  v13 = type metadata accessor for Optional();
  v45 = *(_QWORD *)(v13 - 8);
  v46 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v41 - v17;
  v19 = *(_QWORD *)(a9 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v41 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(_QWORD *)(a10 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v41 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = swift_projectBox();
  v47 = a2;
  AGGraphGetAttributeInfo();
  (*(void (**)(char *))(v23 + 16))(v26);
  type metadata accessor for IdentifierProvider();
  if ((swift_dynamicCast() & 1) != 0)
  {
    v41 = v22;
    v42 = v27;
    v43 = a9;
    v28 = v47;
    v30 = v45;
    v29 = v46;
    outlined init with take of ScrollStateRequest(v51, (uint64_t)v53);
    v31 = v54;
    v32 = v55;
    __swift_project_boxed_opaque_existential_1(v53, v54);
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 8))(v49, v50, a12, v31, v32) & 1) != 0)
    {
      v33 = v18;
      v44(v28);
      v34 = v18;
      v35 = v43;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v34, 1, v43) != 1)
      {
        v38 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
        v39 = v41;
        v38(v41, v33, v35);
        v38(v15, v39, v35);
        v36 = 1;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v15, 0, 1, v35);
        v40 = v42;
        swift_beginAccess();
        (*(void (**)(uint64_t, char *, uint64_t))(v30 + 40))(v40, v15, v29);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
        return v36;
      }
      (*(void (**)(char *, uint64_t))(v30 + 8))(v33, v29);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
  }
  else
  {
    v52 = 0;
    memset(v51, 0, sizeof(v51));
    outlined destroy of IdentifierProvider?((uint64_t)v51);
  }
  return 0;
}

unint64_t type metadata accessor for IdentifierProvider()
{
  unint64_t result;

  result = lazy cache variable for type metadata for IdentifierProvider;
  if (!lazy cache variable for type metadata for IdentifierProvider)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for IdentifierProvider);
  }
  return result;
}

uint64_t outlined destroy of IdentifierProvider?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for IdentifierProvider?();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for IdentifierProvider?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for IdentifierProvider?)
  {
    type metadata accessor for IdentifierProvider();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IdentifierProvider?);
  }
}

BOOL partial apply for closure #1 in closure #1 in ViewRendererHost.stateForIdentifier<A, B, C>(_:type:in:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = type metadata accessor for ViewStatePredicate(0, v1[5], v1[4], v1[8]);
  return ViewStatePredicate.apply(to:)(a1, v3, v4, v5);
}

uint64_t partial apply for closure #1 in ViewRendererHost.viewForIdentifier<A, B>(_:_:)@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in ViewRendererHost.viewForIdentifier<A, B>(_:_:)(a1, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7], a2);
}

BOOL partial apply for closure #1 in closure #1 in ViewRendererHost.viewForIdentifier<A, B>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;

  v6 = type metadata accessor for ViewValuePredicate(0, *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 56), a4);
  return ViewValuePredicate.apply(to:)(a1, v6);
}

uint64_t Text.init(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t result;

  type metadata accessor for ConcatenatedTextStorage();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  *(_BYTE *)(result + 32) = a3 & 1;
  *(_QWORD *)(result + 40) = a4;
  *(_QWORD *)(result + 48) = a5;
  *(_QWORD *)(result + 56) = a6;
  *(_BYTE *)(result + 64) = a7 & 1;
  *(_QWORD *)(result + 72) = a8;
  return result;
}

uint64_t type metadata accessor for ConcatenatedTextStorage()
{
  return objc_opt_self();
}

uint64_t static Text.+ infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v16;

  type metadata accessor for ConcatenatedTextStorage();
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a1;
  *(_QWORD *)(v16 + 24) = a2;
  *(_BYTE *)(v16 + 32) = a3 & 1;
  *(_QWORD *)(v16 + 40) = a4;
  *(_QWORD *)(v16 + 48) = a5;
  *(_QWORD *)(v16 + 56) = a6;
  a7 &= 1u;
  *(_BYTE *)(v16 + 64) = a7;
  *(_QWORD *)(v16 + 72) = a8;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(a5, a6, a7);
  swift_bridgeObjectRetain();
  return v16;
}

uint64_t ConcatenatedTextStorage.resolve<A>(into:in:with:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v10 = a2[1];
  v11 = *a3;
  v12 = *(_QWORD *)(v5 + 16);
  v13 = *(_QWORD *)(v5 + 24);
  v14 = *(_BYTE *)(v5 + 32);
  v15 = *(_QWORD *)(v5 + 40);
  v22 = *a2;
  v9 = v22;
  v23 = v10;
  v21 = v11;
  Text.resolve<A>(into:in:with:)(a1, &v22, &v21, v12, v13, v14, v15, a4, a5);
  v16 = *(_QWORD *)(v5 + 48);
  v17 = *(_QWORD *)(v5 + 56);
  v18 = *(_BYTE *)(v5 + 64);
  v19 = *(_QWORD *)(v5 + 72);
  v22 = v9;
  v23 = v10;
  v21 = v11;
  return Text.resolve<A>(into:in:with:)(a1, &v22, &v21, v16, v17, v18, v19, a4, a5);
}

uint64_t ConcatenatedTextStorage.resolvesToEmpty(in:with:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t (*v9)(uint64_t *, uint64_t *);
  uint64_t v10;
  unint64_t v11;
  uint64_t (*v12)(uint64_t *, uint64_t *);
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = v2;
  v4 = *a1;
  v5 = a1[1];
  v6 = *a2;
  v7 = *(_QWORD *)(v2 + 16);
  v8 = *(_QWORD *)(v3 + 24);
  if (*(_BYTE *)(v3 + 32) != 1)
  {
    v14 = HIBYTE(v8) & 0xF;
    if ((v8 & 0x2000000000000000) == 0)
      v14 = v7 & 0xFFFFFFFFFFFFLL;
    if (!v14)
      goto LABEL_3;
LABEL_8:
    v13 = 0;
    return v13 & 1;
  }
  v18 = *a1;
  v19 = v5;
  v17 = v6;
  v9 = *(uint64_t (**)(uint64_t *, uint64_t *))(*(_QWORD *)v7 + 88);
  swift_retain();
  LOBYTE(v9) = v9(&v18, &v17);
  outlined consume of Text.Storage(v7, v8, 1);
  if ((v9 & 1) == 0)
    goto LABEL_8;
LABEL_3:
  v10 = *(_QWORD *)(v3 + 48);
  v11 = *(_QWORD *)(v3 + 56);
  if ((*(_BYTE *)(v3 + 64) & 1) != 0)
  {
    v18 = v4;
    v19 = v5;
    v17 = v6;
    v12 = *(uint64_t (**)(uint64_t *, uint64_t *))(*(_QWORD *)v10 + 88);
    swift_retain();
    v13 = v12(&v18, &v17);
    outlined consume of Text.Storage(v10, v11, 1);
  }
  else
  {
    v15 = HIBYTE(v11) & 0xF;
    if ((v11 & 0x2000000000000000) == 0)
      v15 = v10 & 0xFFFFFFFFFFFFLL;
    v13 = v15 == 0;
  }
  return v13 & 1;
}

uint64_t ConcatenatedTextStorage.isEqual(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  char v24;
  char v25;
  uint64_t v26;

  v1 = v0;
  v2 = swift_dynamicCastClass();
  if (!v2)
    return 0;
  v3 = v2;
  v4 = *(_QWORD *)(v0 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v2 + 16);
  v7 = *(_QWORD *)(v2 + 24);
  v8 = *(_BYTE *)(v2 + 32);
  v9 = *(_QWORD *)(v2 + 40);
  if ((*(_BYTE *)(v1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(v2 + 32) & 1) != 0)
    {
      v26 = *(_QWORD *)(v1 + 40);
      v10 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 96);
      swift_retain();
      outlined copy of Text.Storage(v6, v7, 1);
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(v4, v5, 1);
      LOBYTE(v10) = v10(v6);
      outlined consume of Text.Storage(v4, v5, 1);
      if ((v10 & 1) != 0)
        goto LABEL_14;
      goto LABEL_12;
    }
    return 0;
  }
  if ((*(_BYTE *)(v2 + 32) & 1) != 0)
    return 0;
  v26 = *(_QWORD *)(v1 + 40);
  if (v4 == v6 && v5 == v7)
  {
    swift_retain();
    outlined copy of Text.Storage(v4, v5, 0);
    swift_bridgeObjectRetain();
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_retain();
    outlined copy of Text.Storage(v6, v7, 0);
    swift_bridgeObjectRetain();
    if ((v12 & 1) == 0)
    {
LABEL_12:
      outlined consume of Text.Storage(v6, v7, v8);
      swift_release();
      swift_bridgeObjectRelease();
      return 0;
    }
  }
LABEL_14:
  v13 = specialized static Array<A>.== infix(_:_:)(v26, v9);
  outlined consume of Text.Storage(v6, v7, v8);
  swift_bridgeObjectRelease();
  if ((v13 & 1) == 0)
    goto LABEL_20;
  v14 = *(_QWORD *)(v1 + 48);
  v15 = *(_QWORD *)(v1 + 56);
  v16 = *(_BYTE *)(v1 + 64);
  v17 = *(_QWORD *)(v1 + 72);
  v18 = *(_QWORD *)(v3 + 48);
  v19 = *(_QWORD *)(v3 + 56);
  v20 = *(_BYTE *)(v3 + 64);
  v21 = *(_QWORD *)(v3 + 72);
  if ((v16 & 1) != 0)
  {
    if ((*(_BYTE *)(v3 + 64) & 1) != 0)
    {
      v22 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 96);
      outlined copy of Text.Storage(v18, v19, 1);
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(v14, v15, 1);
      LOBYTE(v22) = v22(v18);
      outlined consume of Text.Storage(v14, v15, 1);
      if ((v22 & 1) == 0)
        goto LABEL_27;
      goto LABEL_26;
    }
    goto LABEL_20;
  }
  if ((*(_BYTE *)(v3 + 64) & 1) != 0)
  {
LABEL_20:
    swift_release();
    return 0;
  }
  if (v14 == v18 && v15 == v19)
  {
    outlined copy of Text.Storage(v14, v15, 0);
    swift_bridgeObjectRetain();
  }
  else
  {
    v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
    outlined copy of Text.Storage(v18, v19, 0);
    swift_bridgeObjectRetain();
    if ((v24 & 1) == 0)
    {
LABEL_27:
      outlined consume of Text.Storage(v18, v19, v20);
      swift_release();
      swift_bridgeObjectRelease();
      return 0;
    }
  }
LABEL_26:
  v25 = specialized static Array<A>.== infix(_:_:)(v17, v21);
  outlined consume of Text.Storage(v18, v19, v20);
  swift_release();
  swift_bridgeObjectRelease();
  return v25 & 1;
}

uint64_t ConcatenatedTextStorage.isStyled(options:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t *);
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t *);
  uint64_t v17;
  _BYTE *i;
  uint64_t v19;
  uint64_t v21;

  v2 = v1;
  v3 = *a1;
  v4 = *(_QWORD *)(v1 + 40);
  if (*(_BYTE *)(v1 + 32) != 1)
    goto LABEL_3;
  v6 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v21 = *a1;
  v7 = *(uint64_t (**)(uint64_t *))(*(_QWORD *)v6 + 104);
  swift_retain();
  LOBYTE(v7) = v7(&v21);
  v8 = 1;
  outlined consume of Text.Storage(v6, v5, 1);
  if ((v7 & 1) == 0)
  {
LABEL_3:
    v9 = *(_QWORD *)(v4 + 16);
    if (v9)
    {
      v10 = (_BYTE *)(v4 + 40);
      while ((*v10 & 0xE0) == 0xC0)
      {
        v11 = *((_QWORD *)v10 - 1);
        v21 = v3;
        if (((*(uint64_t (**)(uint64_t *))(*(_QWORD *)v11 + 80))(&v21) & 1) != 0)
          break;
        v10 += 16;
        if (!--v9)
          goto LABEL_8;
      }
      return 1;
    }
LABEL_8:
    v12 = *(_QWORD *)(v2 + 72);
    if (*(_BYTE *)(v2 + 64) != 1)
      goto LABEL_10;
    v15 = v2 + 48;
    v13 = *(_QWORD *)(v2 + 48);
    v14 = *(_QWORD *)(v15 + 8);
    v21 = v3;
    v16 = *(uint64_t (**)(uint64_t *))(*(_QWORD *)v13 + 104);
    swift_retain();
    LOBYTE(v16) = v16(&v21);
    v8 = 1;
    outlined consume of Text.Storage(v13, v14, 1);
    if ((v16 & 1) == 0)
    {
LABEL_10:
      v17 = *(_QWORD *)(v12 + 16);
      if (v17)
      {
        for (i = (_BYTE *)(v12 + 40); (*i & 0xE0) == 0xC0; i += 16)
        {
          v19 = *((_QWORD *)i - 1);
          v21 = v3;
          if (((*(uint64_t (**)(uint64_t *))(*(_QWORD *)v19 + 80))(&v21) & 1) != 0)
            break;
          if (!--v17)
            return 0;
        }
        return 1;
      }
      return 0;
    }
  }
  return v8;
}

uint64_t ConcatenatedTextStorage.allowsTypesettingLanguage()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;

  v1 = v0;
  if (*(_BYTE *)(v0 + 32) == 1)
  {
    v2 = *(_QWORD *)(v0 + 16);
    v3 = *(_QWORD *)(v1 + 24);
    v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 112);
    v5 = swift_retain();
    LOBYTE(v4) = v4(v5);
    outlined consume of Text.Storage(v2, v3, 1);
    if ((v4 & 1) == 0)
      return 0;
  }
  if (*(_BYTE *)(v1 + 64) != 1)
    return 1;
  v6 = *(_QWORD *)(v1 + 48);
  v7 = *(_QWORD *)(v1 + 56);
  v8 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 112);
  v9 = swift_retain();
  LOBYTE(v8) = v8(v9);
  outlined consume of Text.Storage(v6, v7, 1);
  return v8 & 1;
}

uint64_t ConcatenatedTextStorage.__ivar_destroyer()
{
  uint64_t v0;

  outlined consume of Text.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 64));
  return swift_bridgeObjectRelease();
}

uint64_t ConcatenatedTextStorage.__deallocating_deinit()
{
  uint64_t v0;

  outlined consume of Text.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 64));
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

void *Text.Encapsulation.resolve(in:)(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  double v8;
  char v9;
  uint64_t v10;
  double v11;
  char v12;
  id v13;
  void *v14;
  float (*v16)(_QWORD *);
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  _QWORD v29[2];

  v26 = a1[1];
  v27 = *a1;
  v2 = *v1;
  v3 = *((_BYTE *)v1 + 8);
  v4 = v1[2];
  v5 = *((_BYTE *)v1 + 24);
  v6 = v1[4];
  v7 = *((_BYTE *)v1 + 40);
  v8 = *((double *)v1 + 6);
  v9 = *((_BYTE *)v1 + 56);
  v10 = v1[8];
  v11 = *((double *)v1 + 9);
  v28 = *((_BYTE *)v1 + 80);
  v25 = v1[11];
  v12 = *((_BYTE *)v1 + 96);
  v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDC4C08]), sel_init);
  v14 = v13;
  if ((v3 & 1) != 0)
  {
    if ((v5 & 1) != 0)
      goto LABEL_3;
  }
  else
  {
    objc_msgSend(v13, sel_setScale_, v2);
    if ((v5 & 1) != 0)
    {
LABEL_3:
      if ((v7 & 1) != 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  objc_msgSend(v14, sel_setShape_, v4, v25);
  if ((v7 & 1) != 0)
  {
LABEL_4:
    if ((v12 & 1) != 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  objc_msgSend(v14, sel_setStyle_, v6, v25);
  if ((v12 & 1) != 0)
  {
LABEL_5:
    if ((v9 & 1) != 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  objc_msgSend(v14, sel_setPlatterSize_, v25, v25);
  if ((v9 & 1) != 0)
  {
LABEL_6:
    if (!v10)
      goto LABEL_7;
LABEL_15:
    v29[0] = v27;
    v29[1] = v26;
    v16 = *(float (**)(_QWORD *))(*(_QWORD *)v10 + 104);
    swift_retain();
    v17 = v16(v29);
    v19 = v18;
    v21 = v20;
    v23 = v22;
    if (one-time initialization token for cache != -1)
      swift_once();
    v24 = (void *)specialized ObjectCache.subscript.getter(v17, v19, v21, v23);
    objc_msgSend(v14, sel_setPlatformColor_, v24);
    swift_release();

    if ((v28 & 1) == 0)
      goto LABEL_8;
    return v14;
  }
LABEL_14:
  objc_msgSend(v14, sel_setLineWeight_, v8, v25);
  if (v10)
    goto LABEL_15;
LABEL_7:
  if ((v28 & 1) == 0)
LABEL_8:
    objc_msgSend(v14, sel_setMinimumWidth_, v11, v25);
  return v14;
}

uint64_t Text.Encapsulation.init(scale:shape:style:lineWeight:color:minimumWidth:)@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>)
{
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;

  v9 = *(_BYTE *)(result + 8);
  v10 = *a2;
  v11 = *((_BYTE *)a2 + 8);
  v12 = *a3;
  v13 = *((_BYTE *)a3 + 8);
  *(_QWORD *)a9 = *(_QWORD *)result;
  *(_BYTE *)(a9 + 8) = v9;
  *(_QWORD *)(a9 + 16) = v10;
  *(_BYTE *)(a9 + 24) = v11;
  *(_QWORD *)(a9 + 32) = v12;
  *(_BYTE *)(a9 + 40) = v13;
  *(_QWORD *)(a9 + 48) = a4;
  *(_BYTE *)(a9 + 56) = a5 & 1;
  *(_QWORD *)(a9 + 64) = a6;
  *(_QWORD *)(a9 + 72) = a7;
  *(_BYTE *)(a9 + 80) = a8 & 1;
  *(_QWORD *)(a9 + 88) = 0;
  *(_BYTE *)(a9 + 96) = 1;
  return result;
}

uint64_t Text.Encapsulation.init(scale:shape:style:platterSize:lineWeight:color:minimumWidth:)@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10)
{
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;

  v10 = *(_BYTE *)(result + 8);
  v11 = *a2;
  v12 = *((_BYTE *)a2 + 8);
  v13 = *a3;
  v14 = *((_BYTE *)a3 + 8);
  v15 = *a4;
  v16 = *((_BYTE *)a4 + 8);
  *(_QWORD *)a9 = *(_QWORD *)result;
  *(_BYTE *)(a9 + 8) = v10;
  *(_QWORD *)(a9 + 16) = v11;
  *(_BYTE *)(a9 + 24) = v12;
  *(_QWORD *)(a9 + 32) = v13;
  *(_BYTE *)(a9 + 40) = v14;
  *(_QWORD *)(a9 + 48) = a5;
  *(_BYTE *)(a9 + 56) = a6 & 1;
  *(_QWORD *)(a9 + 64) = a7;
  *(_QWORD *)(a9 + 72) = a8;
  *(_BYTE *)(a9 + 80) = a10 & 1;
  *(_QWORD *)(a9 + 88) = v15;
  *(_BYTE *)(a9 + 96) = v16;
  return result;
}

void static Text.Encapsulation.Scale.large.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static Text.Encapsulation.PlatterSize.regular.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void static Text.Encapsulation.PlatterSize.large.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void Text.Encapsulation.PlatterSize.hash(into:)()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static Text.Encapsulation.PlatterSize.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

void Text.Encapsulation.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  int v3;
  Swift::UInt v4;
  int v5;
  Swift::UInt64 v6;
  int v7;
  uint64_t v8;
  Swift::UInt v9;
  int v10;
  Swift::UInt64 v11;
  void (*v12)(uint64_t);
  Swift::UInt v13;
  int v14;
  Swift::UInt64 v15;
  int v16;
  Swift::UInt v17;
  Swift::UInt v18;
  Swift::UInt v19;
  Swift::UInt64 v20;
  int v21;
  Swift::UInt v22;
  Swift::UInt64 v23;
  int v24;

  v3 = *(unsigned __int8 *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(unsigned __int8 *)(v1 + 40);
  v6 = *(_QWORD *)(v1 + 48);
  v7 = *(unsigned __int8 *)(v1 + 56);
  v8 = *(_QWORD *)(v1 + 64);
  v9 = *(_QWORD *)(v1 + 88);
  v10 = *(unsigned __int8 *)(v1 + 96);
  v22 = *(_QWORD *)(v1 + 16);
  v23 = *(_QWORD *)(v1 + 72);
  v24 = *(unsigned __int8 *)(v1 + 80);
  if (*(_BYTE *)(v1 + 8) == 1)
  {
    Hasher._combine(_:)(0);
    if (!v3)
      goto LABEL_3;
  }
  else
  {
    v21 = *(unsigned __int8 *)(v1 + 40);
    v13 = *(_QWORD *)(v1 + 32);
    v14 = *(unsigned __int8 *)(v1 + 56);
    v15 = *(_QWORD *)(v1 + 48);
    v16 = *(unsigned __int8 *)(v1 + 96);
    v17 = *(_QWORD *)(v1 + 88);
    v18 = *(_QWORD *)v1;
    Hasher._combine(_:)(1u);
    v19 = v18;
    v9 = v17;
    v10 = v16;
    v6 = v15;
    v7 = v14;
    v4 = v13;
    v5 = v21;
    Hasher._combine(_:)(v19);
    if (!v3)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v22);
      if (!v5)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  Hasher._combine(_:)(0);
  if (!v5)
  {
LABEL_4:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4);
    if (!v7)
      goto LABEL_5;
LABEL_15:
    Hasher._combine(_:)(0);
    if (v8)
      goto LABEL_9;
    goto LABEL_16;
  }
LABEL_14:
  Hasher._combine(_:)(0);
  if (v7)
    goto LABEL_15;
LABEL_5:
  Hasher._combine(_:)(1u);
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v11 = v6;
  else
    v11 = 0;
  Hasher._combine(_:)(v11);
  if (v8)
  {
LABEL_9:
    Hasher._combine(_:)(1u);
    v12 = *(void (**)(uint64_t))(*(_QWORD *)v8 + 136);
    swift_retain();
    v12(a1);
    swift_release();
    if (v24)
      goto LABEL_10;
LABEL_17:
    Hasher._combine(_:)(1u);
    if ((v23 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v20 = v23;
    else
      v20 = 0;
    Hasher._combine(_:)(v20);
    if (!v10)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  if (!v24)
    goto LABEL_17;
LABEL_10:
  Hasher._combine(_:)(0);
  if (!v10)
  {
LABEL_11:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v9);
    return;
  }
LABEL_21:
  Hasher._combine(_:)(0);
}

Swift::Int Text.Encapsulation.hashValue.getter()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  _QWORD v12[10];
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  char v21;
  uint64_t v22;
  char v23;

  v1 = *(_BYTE *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_BYTE *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = *(_BYTE *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 48);
  v7 = *(_BYTE *)(v0 + 56);
  v8 = *(_BYTE *)(v0 + 80);
  v9 = *(_QWORD *)(v0 + 88);
  v10 = *(_BYTE *)(v0 + 96);
  v12[9] = *(_QWORD *)v0;
  v13 = v1;
  v14 = v2;
  v15 = v3;
  v16 = v4;
  v17 = v5;
  v18 = v6;
  v19 = v7;
  v20 = *(_OWORD *)(v0 + 64);
  v21 = v8;
  v22 = v9;
  v23 = v10;
  Hasher.init(_seed:)();
  Text.Encapsulation.hash(into:)((uint64_t)v12);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Text.Encapsulation()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  _QWORD v12[10];
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  char v21;
  uint64_t v22;
  char v23;

  v1 = *(_BYTE *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_BYTE *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = *(_BYTE *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 48);
  v7 = *(_BYTE *)(v0 + 56);
  v8 = *(_BYTE *)(v0 + 80);
  v9 = *(_QWORD *)(v0 + 88);
  v10 = *(_BYTE *)(v0 + 96);
  v12[9] = *(_QWORD *)v0;
  v13 = v1;
  v14 = v2;
  v15 = v3;
  v16 = v4;
  v17 = v5;
  v18 = v6;
  v19 = v7;
  v20 = *(_OWORD *)(v0 + 64);
  v21 = v8;
  v22 = v9;
  v23 = v10;
  Hasher.init(_seed:)();
  Text.Encapsulation.hash(into:)((uint64_t)v12);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Text.Encapsulation()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  Text.Encapsulation.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

BOOL specialized static Text.Encapsulation.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  double v6;
  char v7;
  uint64_t v8;
  double v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  double v14;
  int v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  uint64_t (*v22)(uint64_t);
  char v23;
  char v25;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_BYTE *)(a1 + 40);
  v6 = *(double *)(a1 + 48);
  v7 = *(_BYTE *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(double *)(a1 + 72);
  v10 = *(_BYTE *)(a1 + 80);
  v11 = *(_QWORD *)(a1 + 88);
  v12 = *(_BYTE *)(a1 + 96);
  v13 = *(_QWORD *)(a2 + 64);
  v14 = *(double *)(a2 + 72);
  v15 = *(unsigned __int8 *)(a2 + 80);
  v16 = *(_QWORD *)(a2 + 88);
  v17 = *(_BYTE *)(a2 + 96);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 8))
      return 0;
  }
  else
  {
    if (*(_QWORD *)a1 == *(_QWORD *)a2)
      v18 = *(_BYTE *)(a2 + 8);
    else
      v18 = 1;
    if ((v18 & 1) != 0)
      return 0;
  }
  if ((v3 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 24))
      return 0;
  }
  else
  {
    if (v2 == *(_QWORD *)(a2 + 16))
      v19 = *(_BYTE *)(a2 + 24);
    else
      v19 = 1;
    if ((v19 & 1) != 0)
      return 0;
  }
  if ((v5 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 40))
      return 0;
  }
  else
  {
    if (v4 == *(_QWORD *)(a2 + 32))
      v20 = *(_BYTE *)(a2 + 40);
    else
      v20 = 1;
    if ((v20 & 1) != 0)
      return 0;
  }
  if ((v7 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 56))
      return 0;
  }
  else
  {
    if (v6 == *(double *)(a2 + 48))
      v21 = *(_BYTE *)(a2 + 56);
    else
      v21 = 1;
    if ((v21 & 1) != 0)
      return 0;
  }
  if (v8)
  {
    if (!v13)
      return 0;
    if (v8 != v13)
    {
      v22 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 88);
      swift_retain();
      swift_retain();
      LOBYTE(v22) = v22(v13);
      swift_release();
      swift_release();
      if ((v22 & 1) == 0)
        return 0;
    }
  }
  else if (v13)
  {
    return 0;
  }
  if ((v10 & 1) != 0)
  {
    if (!v15)
      return 0;
  }
  else
  {
    if (v9 == v14)
      v23 = v15;
    else
      v23 = 1;
    if ((v23 & 1) != 0)
      return 0;
  }
  if ((v12 & 1) == 0)
  {
    if (v11 == v16)
      v25 = v17;
    else
      v25 = 1;
    return (v25 & 1) == 0;
  }
  return (v17 & 1) != 0;
}

unint64_t lazy protocol witness table accessor for type Text.Encapsulation.Scale and conformance Text.Encapsulation.Scale()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Encapsulation.Scale and conformance Text.Encapsulation.Scale;
  if (!lazy protocol witness table cache variable for type Text.Encapsulation.Scale and conformance Text.Encapsulation.Scale)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Encapsulation.Scale, &type metadata for Text.Encapsulation.Scale);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Encapsulation.Scale and conformance Text.Encapsulation.Scale);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Encapsulation.Shape and conformance Text.Encapsulation.Shape()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Encapsulation.Shape and conformance Text.Encapsulation.Shape;
  if (!lazy protocol witness table cache variable for type Text.Encapsulation.Shape and conformance Text.Encapsulation.Shape)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Encapsulation.Shape, &type metadata for Text.Encapsulation.Shape);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Encapsulation.Shape and conformance Text.Encapsulation.Shape);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Encapsulation.Style and conformance Text.Encapsulation.Style()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Encapsulation.Style and conformance Text.Encapsulation.Style;
  if (!lazy protocol witness table cache variable for type Text.Encapsulation.Style and conformance Text.Encapsulation.Style)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Encapsulation.Style, &type metadata for Text.Encapsulation.Style);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Encapsulation.Style and conformance Text.Encapsulation.Style);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Encapsulation.PlatterSize and conformance Text.Encapsulation.PlatterSize()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Encapsulation.PlatterSize and conformance Text.Encapsulation.PlatterSize;
  if (!lazy protocol witness table cache variable for type Text.Encapsulation.PlatterSize and conformance Text.Encapsulation.PlatterSize)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Encapsulation.PlatterSize, &type metadata for Text.Encapsulation.PlatterSize);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Encapsulation.PlatterSize and conformance Text.Encapsulation.PlatterSize);
  }
  return result;
}

uint64_t initializeWithCopy for Text.Encapsulation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v3 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v3;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Text.Encapsulation(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  v5 = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  v6 = a2[4];
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  v7 = a2[6];
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 64) = a2[8];
  swift_retain();
  swift_release();
  v8 = a2[9];
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  *(_QWORD *)(a1 + 72) = v8;
  v9 = a2[11];
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
  *(_QWORD *)(a1 + 88) = v9;
  return a1;
}

__n128 __swift_memcpy97_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for Text.Encapsulation(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_release();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Encapsulation(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 97))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 64);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Text.Encapsulation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 96) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 97) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 97) = 0;
    if (a2)
      *(_QWORD *)(result + 64) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Encapsulation()
{
  return &type metadata for Text.Encapsulation;
}

ValueMetadata *type metadata accessor for Text.Encapsulation.Scale()
{
  return &type metadata for Text.Encapsulation.Scale;
}

ValueMetadata *type metadata accessor for Text.Encapsulation.Shape()
{
  return &type metadata for Text.Encapsulation.Shape;
}

ValueMetadata *type metadata accessor for Text.Encapsulation.Style()
{
  return &type metadata for Text.Encapsulation.Style;
}

ValueMetadata *type metadata accessor for Text.Encapsulation.PlatterSize()
{
  return &type metadata for Text.Encapsulation.PlatterSize;
}

double specialized Sequence.reduce<A>(into:_:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  int LanguageAwareOutsets;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;

  v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for CTFontRef(0);
    lazy protocol witness table accessor for type AnyTextSizingModifier and conformance AnyTextSizingModifier(&lazy protocol witness table cache variable for type CTFontRef and conformance CTFontRef, 255, (uint64_t (*)(uint64_t))type metadata accessor for CTFontRef, (uint64_t)&protocol conformance descriptor for CTFontRef);
    Set.Iterator.init(_cocoa:)();
    v5 = v28;
    v26 = v29;
    v10 = v30;
    v11 = v31;
    v12 = v32;
  }
  else
  {
    v13 = -1 << *(_BYTE *)(a1 + 32);
    v26 = a1 + 56;
    v10 = ~v13;
    v14 = -v13;
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v12 = v15 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v11 = 0;
  }
  v16 = (unint64_t)(v10 + 64) >> 6;
  while (v5 < 0)
  {
    if (!__CocoaSet.Iterator.next()())
      goto LABEL_42;
    type metadata accessor for CTFontRef(0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v20 = v27;
    swift_unknownObjectRelease();
    v19 = v11;
    v17 = v12;
    if (!v27)
      goto LABEL_42;
LABEL_32:
    v27 = 0;
    LanguageAwareOutsets = CTFontGetLanguageAwareOutsets();

    if (LanguageAwareOutsets)
    {
      if (a3 <= 0.0)
        a3 = 0.0;
      if (a2 <= 0.0)
        a2 = 0.0;
      if (a5 <= 0.0)
        a5 = 0.0;
      if (a4 <= 0.0)
        a4 = 0.0;
    }
    v11 = v19;
    v12 = v17;
  }
  if (v12)
  {
    v17 = (v12 - 1) & v12;
    v18 = __clz(__rbit64(v12)) | (v11 << 6);
    v19 = v11;
    goto LABEL_31;
  }
  v21 = v11 + 1;
  if (__OFADD__(v11, 1))
    __break(1u);
  if (v21 >= v16)
    goto LABEL_42;
  v22 = *(_QWORD *)(v26 + 8 * v21);
  v19 = v11 + 1;
  if (v22)
    goto LABEL_30;
  v19 = v11 + 2;
  if (v11 + 2 >= v16)
    goto LABEL_42;
  v22 = *(_QWORD *)(v26 + 8 * v19);
  if (v22)
    goto LABEL_30;
  v19 = v11 + 3;
  if (v11 + 3 >= v16)
    goto LABEL_42;
  v22 = *(_QWORD *)(v26 + 8 * v19);
  if (v22)
    goto LABEL_30;
  v19 = v11 + 4;
  if (v11 + 4 >= v16)
    goto LABEL_42;
  v22 = *(_QWORD *)(v26 + 8 * v19);
  if (v22)
    goto LABEL_30;
  v19 = v11 + 5;
  if (v11 + 5 >= v16)
    goto LABEL_42;
  v22 = *(_QWORD *)(v26 + 8 * v19);
  if (v22)
  {
LABEL_30:
    v17 = (v22 - 1) & v22;
    v18 = __clz(__rbit64(v22)) + (v19 << 6);
LABEL_31:
    v20 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v18);
    if (!v20)
      goto LABEL_42;
    goto LABEL_32;
  }
  v23 = v11 + 6;
  while (v16 != v23)
  {
    v22 = *(_QWORD *)(v26 + 8 * v23++);
    if (v22)
    {
      v19 = v23 - 1;
      goto LABEL_30;
    }
  }
LABEL_42:
  outlined consume of Set<EventID>.Iterator._Variant();
  return a2;
}

uint64_t EnvironmentValues.textSizing.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.textSizing.setter(uint64_t a1)
{
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *v1;
  v4 = *(_BYTE *)a1;
  swift_retain_n();
  swift_bridgeObjectRetain();
  specialized closure #1 in PropertyList.subscript.setter(v1, v4, v2);
  swift_bridgeObjectRelease();
  swift_release();
  if (v1[1])
  {
    v5 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v5);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return swift_release();
}

unint64_t static Text.Sizing.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2)
    return specialized static Array<A>.== infix(_:_:)(*((_QWORD *)a1 + 1), *((_QWORD *)a2 + 1));
  else
    return 0;
}

uint64_t Text.Sizing.Storage.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t Text.Sizing.Storage.init(rawValue:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  v2 = result;
  if (result >= 3u)
    v2 = 3;
  *a2 = v2;
  return result;
}

_BYTE *Text.Sizing.init(_:)@<X0>(_BYTE *result@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = *result;
  *(_QWORD *)(a2 + 8) = MEMORY[0x24BEE4AF8];
  return result;
}

double Text.Sizing.layoutMargins(for:metrics:layoutProperties:)(uint64_t isEscapingClosureAtFileLocation, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  int v15;
  double v16;
  int v17;
  unint64_t v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  __int128 v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  unint64_t v49;
  void (*v51)(__int128 *);
  _BYTE v53[12];
  int v54;
  id v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  double aBlock;
  uint64_t v60;
  uint64_t (*v61)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  double v65;
  double v66;
  double v67;
  __int128 v68;
  __int128 v69;

  v7 = type metadata accessor for CharacterSet();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = &v53[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for FloatingPointRoundingRule();
  MEMORY[0x24BDAC7A8](v11);
  v14 = &v53[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = *(unsigned __int8 *)(a3 + 80);
  v16 = *(double *)(a3 + 96);
  v17 = *v3;
  v18 = *((_QWORD *)v3 + 1);
  v68 = 0u;
  v69 = 0u;
  v19 = 0.0;
  if (v17)
  {
    v58 = v12;
    if (v17 == 1)
    {
      NSAttributedString.maxFontMetrics.getter((uint64_t)&aBlock);
      v20 = *(double *)&v60;
      v21 = *(double *)&v61;
      v22 = v64;
      *(double *)a2 = aBlock;
      *(double *)(a2 + 8) = v20;
      *(double *)(a2 + 16) = v21;
      v23 = v62;
      *(_OWORD *)(a2 + 24) = v62;
      *(_OWORD *)(a2 + 40) = v63;
      v24 = 0.0;
      *(_QWORD *)(a2 + 56) = v22;
      v25 = 0.0;
      v26 = 0.0;
      *(_BYTE *)(a2 + 64) = 0;
      if (*(double *)&v23 != 0.0)
      {
        v57 = v23;
        v27 = v20 - v21;
        v28 = v58;
        (*(void (**)(_BYTE *, _QWORD, uint64_t))(v58 + 104))(v14, *MEMORY[0x24BEE38E0], v11);
        aBlock = v27;
        specialized FloatingPoint.round(_:toMultipleOf:)(v14, v16);
        v29 = aBlock;
        (*(void (**)(_BYTE *, uint64_t))(v28 + 8))(v14, v11);
        v25 = (v27 - v29 + *(double *)&v57) * 0.5;
        v24 = *((double *)&v68 + 1);
        v19 = *((double *)&v69 + 1);
        v26 = v25;
      }
    }
    else
    {
      *(_QWORD *)&v57 = v11;
      if (one-time initialization token for oversizedScalarsWithoutEmoji != -1)
        swift_once();
      v30 = __swift_project_value_buffer(v7, (uint64_t)static NSAttributedString.oversizedScalarsWithoutEmoji);
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v10, v30, v7);
      v31 = objc_msgSend((id)isEscapingClosureAtFileLocation, sel_string);
      *(double *)&v32 = COERCE_DOUBLE(static String._unconditionallyBridgeFromObjectiveC(_:)());
      v34 = v33;

      aBlock = *(double *)&v32;
      v60 = v34;
      lazy protocol witness table accessor for type String and conformance String();
      StringProtocol.rangeOfCharacter(from:options:range:)();
      LOBYTE(v31) = v35;
      swift_bridgeObjectRelease();
      v36 = 0.0;
      v37 = 0.0;
      v38 = 0.0;
      if ((v31 & 1) == 0)
      {
        v54 = v15;
        v67 = MEMORY[0x24BEE4B08];
        if (one-time initialization token for kitFont != -1)
          goto LABEL_32;
        while (1)
        {
          v56 = static NSAttributedStringKey.kitFont;
          v55 = objc_msgSend((id)isEscapingClosureAtFileLocation, sel_length);
          v39 = swift_allocObject();
          *(_QWORD *)(v39 + 16) = &v67;
          v40 = swift_allocObject();
          *(_QWORD *)(v40 + 16) = partial apply for closure #1 in NSAttributedString.allFonts();
          *(_QWORD *)(v40 + 24) = v39;
          *((_QWORD *)&v62 + 1) = partial apply for thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
          *(_QWORD *)&v63 = v40;
          aBlock = MEMORY[0x24BDAC760];
          v60 = 1107296256;
          *(double *)&v61 = COERCE_DOUBLE(thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ());
          *(_QWORD *)&v62 = &block_descriptor_18;
          v41 = _Block_copy(&aBlock);
          swift_retain();
          swift_release();
          objc_msgSend((id)isEscapingClosureAtFileLocation, sel_enumerateAttribute_inRange_options_usingBlock_, v56, 0, v55, 0, v41);
          _Block_release(v41);
          isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
          swift_release();
          if ((isEscapingClosureAtFileLocation & 1) == 0)
            break;
          __break(1u);
LABEL_32:
          swift_once();
        }
        v42 = *(_QWORD *)&v67;
        swift_release();
        v36 = specialized Sequence.reduce<A>(into:_:)(v42, 0.0, 0.0, 0.0, 0.0);
        v37 = v43;
        v19 = v44;
        v38 = v45;
        swift_bridgeObjectRelease();
        v15 = v54;
      }
      (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
      v46 = v58;
      v47 = v57;
      (*(void (**)(_BYTE *, _QWORD, _QWORD))(v58 + 104))(v14, *MEMORY[0x24BEE38E0], v57);
      aBlock = v36;
      v66 = v19;
      v67 = v37;
      v65 = v38;
      specialized FloatingPoint.round(_:toMultipleOf:)(v14, v16);
      specialized FloatingPoint.round(_:toMultipleOf:)(v14, v16);
      specialized FloatingPoint.round(_:toMultipleOf:)(v14, v16);
      specialized FloatingPoint.round(_:toMultipleOf:)(v14, v16);
      v26 = aBlock;
      v25 = v66;
      v24 = v67;
      v19 = v65;
      (*(void (**)(_BYTE *, uint64_t))(v46 + 8))(v14, v47);
      *(double *)&v68 = v26;
      *((double *)&v68 + 1) = v24;
    }
  }
  else
  {
    v24 = 0.0;
    v25 = 0.0;
    v26 = 0.0;
  }
  if (v15)
    v48 = v24;
  else
    v48 = v26;
  if (v15)
  {
    v24 = v25;
    v25 = v19;
    v19 = v26;
  }
  *(double *)&v68 = v48;
  *((double *)&v68 + 1) = v24;
  *(double *)&v69 = v25;
  *((double *)&v69 + 1) = v19;
  if (v18 >> 62)
    goto LABEL_29;
  v49 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v49)
  {
LABEL_30:
    swift_bridgeObjectRelease();
    return v48;
  }
  do
  {
    while (1)
    {
      if (__OFSUB__(v49--, 1))
      {
        __break(1u);
        goto LABEL_27;
      }
      if ((v49 & 0x8000000000000000) == 0)
        break;
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      swift_bridgeObjectRetain();
      v49 = _CocoaArrayWrapper.endIndex.getter();
      if (!v49)
        goto LABEL_30;
    }
    if (v49 >= *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_28;
    v51 = *(void (**)(__int128 *))(**(_QWORD **)(v18 + 32 + 8 * v49) + 80);
    swift_retain();
    v51(&v68);
    swift_release();
  }
  while (v49);
  swift_bridgeObjectRelease();
  return *(double *)&v68;
}

void AnyTextSizingModifier.updateLayoutMargins(_:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyTextSizingModifier.isEqual(to:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t ConcreteTextSizingModifier.isEqual(to:)()
{
  uint64_t result;
  char v1;

  result = swift_dynamicCastClass();
  if (result)
  {
    swift_retain();
    v1 = dispatch thunk of static Equatable.== infix(_:_:)();
    swift_release();
    return v1 & 1;
  }
  return result;
}

uint64_t ConcreteTextSizingModifier.updateLayoutMargins(_:)(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)v1 + 112) + 16))(a1, *(_QWORD *)(*(_QWORD *)v1 + 104));
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Text.Sizing.Storage@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X8>)
{
  return Text.Sizing.Storage.init(rawValue:)(*a1, a2);
}

void Text.Sizing.storage.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *Text.Sizing.storage.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*Text.Sizing.storage.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void one-time initialization function for standard()
{
  static Text.Sizing.standard = 0;
  qword_25426BAF8 = MEMORY[0x24BEE4AF8];
}

{
  static Image.Headroom.standard = 0x3FF0000000000000;
}

uint64_t static Text.Sizing.standard.getter@<X0>(uint64_t a1@<X8>)
{
  return static Text.Sizing.standard.getter(&one-time initialization token for standard, &static Text.Sizing.standard, &qword_25426BAF8, a1);
}

void one-time initialization function for uniformLineHeight()
{
  static Text.Sizing.uniformLineHeight = 1;
  qword_254266A58 = MEMORY[0x24BEE4AF8];
}

uint64_t static Text.Sizing.uniformLineHeight.getter@<X0>(uint64_t a1@<X8>)
{
  return static Text.Sizing.standard.getter(&one-time initialization token for uniformLineHeight, &static Text.Sizing.uniformLineHeight, &qword_254266A58, a1);
}

void one-time initialization function for adjustsForOversizedCharacters()
{
  static Text.Sizing.adjustsForOversizedCharacters = 2;
  qword_2561A6EE0 = MEMORY[0x24BEE4AF8];
}

uint64_t static Text.Sizing.adjustsForOversizedCharacters.getter@<X0>(uint64_t a1@<X8>)
{
  return static Text.Sizing.standard.getter(&one-time initialization token for adjustsForOversizedCharacters, &static Text.Sizing.adjustsForOversizedCharacters, &qword_2561A6EE0, a1);
}

uint64_t static Text.Sizing.standard.getter@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;

  if (*a1 != -1)
    swift_once();
  v7 = *a3;
  *(_BYTE *)a4 = *a2;
  *(_QWORD *)(a4 + 8) = v7;
  return swift_bridgeObjectRetain();
}

unint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Text.Sizing(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2)
    return specialized static Array<A>.== infix(_:_:)(*((_QWORD *)a1 + 1), *((_QWORD *)a2 + 1));
  else
    return 0;
}

uint64_t one-time initialization function for defaultValue()
{
  if (one-time initialization token for standard != -1)
    swift_once();
  static TextSizingKey.defaultValue = static Text.Sizing.standard;
  qword_25426B978 = qword_25426BAF8;
  return swift_bridgeObjectRetain();
}

{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v0 = type metadata accessor for TypesettingConfiguration();
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v10 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for TypesettingLanguage(0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_allocate_value_buffer(v0, static TypesettingConfigurationKey.defaultValue);
  v6 = __swift_project_value_buffer(v0, (uint64_t)static TypesettingConfigurationKey.defaultValue);
  if (one-time initialization token for automatic != -1)
    swift_once();
  v7 = __swift_project_value_buffer(v3, (uint64_t)static TypesettingLanguage.automatic);
  outlined init with copy of TypesettingLanguage(v7, (uint64_t)v5, type metadata accessor for TypesettingLanguage);
  outlined init with copy of TypesettingLanguage(v7, (uint64_t)v2, type metadata accessor for TypesettingLanguage);
  v8 = &v2[*(int *)(v0 + 20)];
  *(_QWORD *)v8 = 0;
  v8[8] = 1;
  outlined assign with take of TypesettingLanguage((uint64_t)v5, (uint64_t)v2);
  *(_QWORD *)v8 = 0;
  v8[8] = 1;
  return outlined init with take of TypesettingConfiguration((uint64_t)v2, v6);
}

{
  uint64_t v0;
  uint64_t result;
  BOOL v2;
  int v3;

  swift_beginAccess();
  if (static LayoutTrace.recorder)
  {
    type metadata accessor for LayoutEngineBox<LayoutComputer.DefaultEngine>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<LayoutComputer.DefaultEngine>, (uint64_t (*)(_QWORD, ValueMetadata *, _UNKNOWN **))type metadata accessor for TracingLayoutEngineBox);
    v0 = swift_allocObject();
    result = AGGraphGetCurrentAttribute();
    v2 = (_DWORD)result == *MEMORY[0x24BE096C0];
    if ((_DWORD)result == *MEMORY[0x24BE096C0])
      v3 = 0;
    else
      v3 = result;
    *(_DWORD *)(v0 + 16) = v3;
    *(_BYTE *)(v0 + 20) = v2;
  }
  else
  {
    type metadata accessor for LayoutEngineBox<LayoutComputer.DefaultEngine>(0, &lazy cache variable for type metadata for LayoutEngineBox<LayoutComputer.DefaultEngine>, (uint64_t (*)(_QWORD, ValueMetadata *, _UNKNOWN **))type metadata accessor for LayoutEngineBox);
    result = swift_allocObject();
    v0 = result;
  }
  static LayoutComputer.defaultValue = (_UNKNOWN *)v0;
  *(_QWORD *)algn_25426F938 = 0;
  return result;
}

{
  uint64_t v0;

  v0 = type metadata accessor for EnvironmentValues.Key.Value();
  __swift_allocate_value_buffer(v0, static EnvironmentValues.Key.defaultValue);
  __swift_project_value_buffer(v0, (uint64_t)static EnvironmentValues.Key.defaultValue);
  MEMORY[0x23B7C4828]();
  return swift_storeEnumTagMultiPayload();
}

{
  uint64_t v0;

  v0 = type metadata accessor for Locale();
  __swift_allocate_value_buffer(v0, static LocaleKey.defaultValue);
  __swift_project_value_buffer(v0, (uint64_t)static LocaleKey.defaultValue);
  return Locale.init(identifier:)();
}

{
  return swift_weakInit();
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance TextSizingKey@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v2 = qword_25426B978;
  *(_BYTE *)a1 = static TextSizingKey.defaultValue;
  *(_QWORD *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

void (*EnvironmentValues.textSizing.modify(_QWORD *a1))(unsigned __int8 **a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[5] = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v4, (uint64_t)v3);
    swift_release_n();
  }
  else
  {
    v5 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v5, (uint64_t)v3);
  }
  swift_release_n();
  v3[6] = 0;
  return EnvironmentValues.textSizing.modify;
}

void EnvironmentValues.textSizing.modify(unsigned __int8 **a1, char a2)
{
  unsigned __int8 *v3;
  uint64_t *v4;
  unsigned __int8 v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a1;
  v4 = (uint64_t *)*((_QWORD *)*a1 + 5);
  v5 = **a1;
  v6 = *((_QWORD *)*a1 + 1);
  v7 = *v4;
  swift_retain_n();
  swift_bridgeObjectRetain();
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    specialized closure #1 in PropertyList.subscript.setter(v4, v5, v6);
    swift_release();
    swift_bridgeObjectRelease();
    if (v4[1])
    {
      v8 = **((_QWORD **)v3 + 5);
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v7, v8);
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized closure #1 in PropertyList.subscript.setter(v4, v5, v6);
    swift_release();
    swift_bridgeObjectRelease();
    if (v4[1])
    {
      v9 = **((_QWORD **)v3 + 5);
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v7, v9);
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    swift_release();
  }
  free(v3);
}

uint64_t static PreferTextLayoutManagerInput.defaultValue.getter()
{
  return 0;
}

uint64_t protocol witness for static ViewInputsModifier._makeViewInputs(modifier:inputs:) in conformance PreferTextLayoutManagerInputModifier(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;

  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, 1, (uint64_t)&v4);
  return swift_release();
}

uint64_t View.preferTextLayoutManager()(uint64_t a1, uint64_t a2)
{
  return View.modifier<A>(_:)(a1, a1, &type metadata for PreferTextLayoutManagerInputModifier, a2);
}

unint64_t lazy protocol witness table accessor for type Text.Sizing.Storage and conformance Text.Sizing.Storage()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Sizing.Storage and conformance Text.Sizing.Storage;
  if (!lazy protocol witness table cache variable for type Text.Sizing.Storage and conformance Text.Sizing.Storage)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Sizing.Storage, &type metadata for Text.Sizing.Storage);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Sizing.Storage and conformance Text.Sizing.Storage);
  }
  return result;
}

uint64_t type metadata accessor for AnyTextSizingModifier()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for ConcreteTextSizingModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ConcreteTextSizingModifier);
}

uint64_t initializeBufferWithCopyOfBuffer for Text.Sizing(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Text.Sizing(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Text.Sizing(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for Text.Sizing()
{
  return &type metadata for Text.Sizing;
}

uint64_t storeEnumTagSinglePayload for Text.Sizing.Storage(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_234E67A88 + 4 * byte_2352A7F85[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_234E67ABC + 4 * asc_2352A7F80[v4]))();
}

uint64_t sub_234E67ABC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234E67AC4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234E67ACCLL);
  return result;
}

uint64_t sub_234E67AD8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234E67AE0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_234E67AE4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234E67AEC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Text.Sizing.Storage()
{
  return &type metadata for Text.Sizing.Storage;
}

ValueMetadata *type metadata accessor for PreferTextLayoutManagerInput()
{
  return &type metadata for PreferTextLayoutManagerInput;
}

ValueMetadata *type metadata accessor for PreferTextLayoutManagerInputModifier()
{
  return &type metadata for PreferTextLayoutManagerInputModifier;
}

uint64_t instantiation function for generic protocol witness table for AnyTextSizingModifier(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type AnyTextSizingModifier and conformance AnyTextSizingModifier(&lazy protocol witness table cache variable for type AnyTextSizingModifier and conformance AnyTextSizingModifier, a2, (uint64_t (*)(uint64_t))type metadata accessor for AnyTextSizingModifier, (uint64_t)&protocol conformance descriptor for AnyTextSizingModifier);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_234E67B64()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NSAttributedString.allFonts()(uint64_t a1)
{
  return closure #1 in NSAttributedString.allFonts()(a1);
}

uint64_t sub_234E67B7C()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_18()
{
  return swift_release();
}

uint64_t lazy protocol witness table accessor for type AnyTextSizingModifier and conformance AnyTextSizingModifier(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = MEMORY[0x23B7C9C04](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for TextSizingKey()
{
  return &type metadata for TextSizingKey;
}

uint64_t static AnyTransition.slide.getter()
{
  type metadata accessor for TransitionBox<SlideTransition>(0);
  return swift_allocObject();
}

void type metadata accessor for TransitionBox<SlideTransition>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for TransitionBox<SlideTransition>)
  {
    v2 = lazy protocol witness table accessor for type SlideTransition and conformance SlideTransition();
    v4 = type metadata accessor for TransitionBox(a1, (uint64_t)&type metadata for SlideTransition, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for TransitionBox<SlideTransition>);
  }
}

unint64_t lazy protocol witness table accessor for type SlideTransition and conformance SlideTransition()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SlideTransition and conformance SlideTransition;
  if (!lazy protocol witness table cache variable for type SlideTransition and conformance SlideTransition)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SlideTransition, &type metadata for SlideTransition);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SlideTransition and conformance SlideTransition);
  }
  return result;
}

void SlideTransition.body(content:phase:)(char a1@<W1>, _BYTE *a2@<X8>)
{
  *a2 = 0x30401u >> (8 * a1);
}

uint64_t associated type witness table accessor for Transition.Body : View in SlideTransition()
{
  return swift_getOpaqueTypeConformance2();
}

void protocol witness for Transition.body(content:phase:) in conformance SlideTransition(char a1@<W1>, _BYTE *a2@<X8>)
{
  *a2 = 0x30401u >> (8 * a1);
}

ValueMetadata *type metadata accessor for SlideTransition()
{
  return &type metadata for SlideTransition;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<PlaceholderContentView<SlideTransition>, MoveTransition.MoveLayout> and conformance <> ModifiedContent<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v5;
  _QWORD v6[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<SlideTransition>, MoveTransition.MoveLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<SlideTransition>, MoveTransition.MoveLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<PlaceholderContentView<SlideTransition>, MoveTransition.MoveLayout>(255, a2, a3, a4);
    v6[0] = &protocol witness table for PlaceholderContentView<A>;
    v6[1] = &protocol witness table for MoveTransition.MoveLayout;
    result = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v6);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<SlideTransition>, MoveTransition.MoveLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<PlaceholderContentView<SlideTransition>, MoveTransition.MoveLayout>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!lazy cache variable for type metadata for ModifiedContent<PlaceholderContentView<SlideTransition>, MoveTransition.MoveLayout>)
  {
    type metadata accessor for PlaceholderContentView<SlideTransition>(255, a2, a3, a4);
    v7 = type metadata accessor for ModifiedContent(a1, v5, (uint64_t)&type metadata for MoveTransition.MoveLayout, v6);
    if (!v8)
      atomic_store(v7, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<PlaceholderContentView<SlideTransition>, MoveTransition.MoveLayout>);
  }
}

void type metadata accessor for PlaceholderContentView<SlideTransition>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for PlaceholderContentView<SlideTransition>)
  {
    v4 = type metadata accessor for PlaceholderContentView(0, (uint64_t)&type metadata for SlideTransition, a3, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for PlaceholderContentView<SlideTransition>);
  }
}

uint64_t ResolvableAbsoluteDate.init(_:style:in:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v8 = type metadata accessor for TimeZone();
  v39 = *(_QWORD *)(v8 - 8);
  v40 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v37 = (uint64_t)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Locale();
  v33 = *(_QWORD *)(v10 - 8);
  v34 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v32 = (uint64_t)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for Calendar();
  v12 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a2;
  v16 = *((_QWORD *)a2 + 1);
  LOBYTE(a2) = a2[16];
  v18 = *a3;
  v17 = a3[1];
  v19 = type metadata accessor for Date();
  v35 = *(_QWORD *)(v19 - 8);
  v36 = v19;
  v20 = *(void (**)(uint64_t, uint64_t))(v35 + 16);
  v38 = a1;
  v20(a4, a1);
  v21 = (int *)type metadata accessor for ResolvableAbsoluteDate();
  v22 = a4;
  v23 = a4 + v21[5];
  *(_BYTE *)v23 = v15;
  *(_QWORD *)(v23 + 8) = v16;
  *(_BYTE *)(v23 + 16) = (_BYTE)a2;
  if (v17)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v18, (uint64_t)v14);
    swift_release_n();
    swift_release_n();
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(a4 + v21[6], v14, v31);
    swift_retain_n();
    swift_retain_n();
    v24 = v32;
    specialized PropertyList.Tracker.value<A>(_:for:)(v18, v32);
    swift_release_n();
    swift_release_n();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 32))(a4 + v21[7], v24, v34);
    swift_retain_n();
    swift_retain_n();
    v25 = v37;
    specialized PropertyList.Tracker.value<A>(_:for:)(v18, v37);
    swift_release_n();
  }
  else
  {
    v26 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v26, (uint64_t)v14);
    swift_release_n();
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(a4 + v21[6], v14, v31);
    v27 = swift_retain_n();
    v28 = v32;
    specialized closure #1 in PropertyList.subscript.getter(v27, v32);
    swift_release_n();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 32))(a4 + v21[7], v28, v34);
    v29 = swift_retain_n();
    v25 = v37;
    specialized closure #1 in PropertyList.subscript.getter(v29, v37);
    swift_release();
  }
  swift_release_n();
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v38, v36);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 32))(v22 + v21[8], v25, v40);
}

uint64_t specialized static TimeDataFormatting.Configuration.makeConfiguration(from:format:sizeVariant:secondsUpdateFrequencyBudget:)(uint64_t a1, uint64_t a2, double a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  __int128 v24;
  _BYTE v25[25];
  __int128 v26;
  _BYTE v27[25];
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  _BYTE v32[25];

  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage);
  MEMORY[0x24BDAC7A8](v9);
  v11 = &v25[-v10 - 16];
  type metadata accessor for (style: SystemFormatStyle.Timer, exact: Bool)(0, &lazy cache variable for type metadata for (style: SystemFormatStyle.Timer, exact: Bool), (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.Timer);
  MEMORY[0x24BDAC7A8](v12);
  v14 = &v25[-v13 - 16];
  v16 = *(int *)(v15 + 48);
  v25[v16 - 16 - v13] = specialized FormatStyle.exactSizeVariant(_:)((uint64_t)&v25[-v13 - 16], a5) & 1;
  specialized DiscreteFormatStyle.alwaysOnDisplayFormat<A>(source:secondsUpdateFrequencyBudget:sizeVariant:)(a2, a5, (uint64_t)&v31, a3);
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(a2, (uint64_t)v11);
  specialized DiscreteFormatStyle.paused<A>(accordingTo:)(a2, (uint64_t (*)(_QWORD))type metadata accessor for PausedFormatStyle<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer>, lazy protocol witness table accessor for type PausedFormatStyle<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer> and conformance PausedFormatStyle<A, B>, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.Timer, lazy protocol witness table accessor for type SystemFormatStyle.Timer and conformance SystemFormatStyle.Timer, (uint64_t *)&v24);
  if (*(_QWORD *)&v32[8])
  {
    outlined init with copy of AnyTrackedValue((uint64_t)&v31, (uint64_t)&v26);
    v27[24] = v32[24];
    if (*(_QWORD *)&v27[8])
    {
LABEL_3:
      outlined init with take of ScrollStateRequest(&v26, (uint64_t)&v28);
      goto LABEL_6;
    }
  }
  else
  {
    v26 = v31;
    *(_OWORD *)v27 = *(unint64_t *)v32;
    *(_OWORD *)&v27[9] = *(_OWORD *)&v32[9];
    if (*(_QWORD *)&v27[8])
      goto LABEL_3;
  }
  v28 = 0u;
  v29 = 0u;
  v30 = 0;
LABEL_6:
  outlined init with take of Date?((uint64_t)v11, a1, (uint64_t)&lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t)type metadata accessor for TimeDataSource<A>.DateStorage, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TimeDataSource<Date><A>.DateStorage);
  type metadata accessor for TimeDataFormatting.Configuration<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer>(0, &lazy cache variable for type metadata for TimeDataFormatting.Configuration<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer>, (uint64_t (*)(uint64_t))type metadata accessor for SystemFormatStyle.Timer, lazy protocol witness table accessor for type SystemFormatStyle.Timer and conformance SystemFormatStyle.Timer, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for TimeDataFormatting.Configuration);
  v18 = v17;
  outlined init with take of ScrollStateRequest(&v24, a1 + *(int *)(v17 + 52));
  v19 = a1 + *(int *)(v18 + 56);
  if (*((_QWORD *)&v29 + 1))
  {
    outlined init with take of ScrollStateRequest(&v28, v19);
  }
  else
  {
    v20 = (unint64_t)v29;
    *(_OWORD *)v19 = v28;
    *(_OWORD *)(v19 + 16) = v20;
    *(_QWORD *)(v19 + 32) = v30;
  }
  v21 = v14[v16];
  outlined destroy of (style: SystemFormatStyle.Timer, exact: Bool)((uint64_t)v14, &lazy cache variable for type metadata for (style: SystemFormatStyle.Timer, exact: Bool), (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.Timer);
  v26 = v31;
  *(_OWORD *)v27 = *(_OWORD *)v32;
  *(_OWORD *)&v27[9] = *(_OWORD *)&v32[9];
  if (v21 == 1)
  {
    if (*(_QWORD *)&v27[8])
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v26);
    return 1;
  }
  else
  {
    *(_OWORD *)&v25[9] = *(_OWORD *)&v27[9];
    *(_OWORD *)v25 = *(_OWORD *)v27;
    v24 = v26;
    if (*(_QWORD *)&v27[8])
    {
      v22 = v25[24];
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
    }
    else
    {
      return 0;
    }
  }
  return v22;
}

{
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  __int128 v24;
  _BYTE v25[25];
  __int128 v26;
  _BYTE v27[25];
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  _BYTE v32[25];

  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage);
  MEMORY[0x24BDAC7A8](v9);
  v11 = &v25[-v10 - 16];
  type metadata accessor for (style: SystemFormatStyle.Timer, exact: Bool)(0, &lazy cache variable for type metadata for (style: SystemFormatStyle.DateOffset, exact: Bool), (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateOffset);
  MEMORY[0x24BDAC7A8](v12);
  v14 = &v25[-v13 - 16];
  v16 = *(int *)(v15 + 48);
  v25[v16 - 16 - v13] = specialized FormatStyle.exactSizeVariant(_:)((uint64_t)&v25[-v13 - 16], a5) & 1;
  specialized DiscreteFormatStyle.alwaysOnDisplayFormat<A>(source:secondsUpdateFrequencyBudget:sizeVariant:)(a2, a5, (uint64_t *)&v31, a3);
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(a2, (uint64_t)v11);
  specialized DiscreteFormatStyle.paused<A>(accordingTo:)(a2, (uint64_t (*)(_QWORD))type metadata accessor for PausedFormatStyle<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.DateOffset>, lazy protocol witness table accessor for type PausedFormatStyle<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.DateOffset> and conformance PausedFormatStyle<A, B>, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset, lazy protocol witness table accessor for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset, (uint64_t *)&v24);
  if (*(_QWORD *)&v32[8])
  {
    outlined init with copy of AnyTrackedValue((uint64_t)&v31, (uint64_t)&v26);
    v27[24] = v32[24];
    if (*(_QWORD *)&v27[8])
    {
LABEL_3:
      outlined init with take of ScrollStateRequest(&v26, (uint64_t)&v28);
      goto LABEL_6;
    }
  }
  else
  {
    v26 = v31;
    *(_OWORD *)v27 = *(unint64_t *)v32;
    *(_OWORD *)&v27[9] = *(_OWORD *)&v32[9];
    if (*(_QWORD *)&v27[8])
      goto LABEL_3;
  }
  v28 = 0u;
  v29 = 0u;
  v30 = 0;
LABEL_6:
  outlined init with take of Date?((uint64_t)v11, a1, (uint64_t)&lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t)type metadata accessor for TimeDataSource<A>.DateStorage, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TimeDataSource<Date><A>.DateStorage);
  type metadata accessor for TimeDataFormatting.Configuration<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer>(0, &lazy cache variable for type metadata for TimeDataFormatting.Configuration<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.DateOffset>, (uint64_t (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateOffset, lazy protocol witness table accessor for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for TimeDataFormatting.Configuration);
  v18 = v17;
  outlined init with take of ScrollStateRequest(&v24, a1 + *(int *)(v17 + 52));
  v19 = a1 + *(int *)(v18 + 56);
  if (*((_QWORD *)&v29 + 1))
  {
    outlined init with take of ScrollStateRequest(&v28, v19);
  }
  else
  {
    v20 = (unint64_t)v29;
    *(_OWORD *)v19 = v28;
    *(_OWORD *)(v19 + 16) = v20;
    *(_QWORD *)(v19 + 32) = v30;
  }
  v21 = v14[v16];
  outlined destroy of (style: SystemFormatStyle.Timer, exact: Bool)((uint64_t)v14, &lazy cache variable for type metadata for (style: SystemFormatStyle.DateOffset, exact: Bool), (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateOffset);
  v26 = v31;
  *(_OWORD *)v27 = *(_OWORD *)v32;
  *(_OWORD *)&v27[9] = *(_OWORD *)&v32[9];
  if (v21 == 1)
  {
    if (*(_QWORD *)&v27[8])
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v26);
    return 1;
  }
  else
  {
    *(_OWORD *)&v25[9] = *(_OWORD *)&v27[9];
    *(_OWORD *)v25 = *(_OWORD *)v27;
    v24 = v26;
    if (*(_QWORD *)&v27[8])
    {
      v22 = v25[24];
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
    }
    else
    {
      return 0;
    }
  }
  return v22;
}

uint64_t type metadata accessor for ResolvableAbsoluteDate()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ResolvableAbsoluteDate;
  if (!type metadata singleton initialization cache for ResolvableAbsoluteDate)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t specialized FormatStyle.exactSizeVariant(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v24;
  uint64_t v25;
  uint64_t v26[3];
  __int128 v27;
  char v28;
  uint64_t v29[3];
  __int128 v30;

  v3 = v2;
  type metadata accessor for (SystemFormatStyle.Timer, Bool)(0, &lazy cache variable for type metadata for (SystemFormatStyle.Timer, Bool), (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.Timer);
  v7 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v24 - v8;
  type metadata accessor for (style: SystemFormatStyle.Timer, exact: Bool)(0, &lazy cache variable for type metadata for (style: SystemFormatStyle.Timer, exact: Bool), (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.Timer);
  v11 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v24 - v12;
  *(_QWORD *)&v30 = type metadata accessor for SystemFormatStyle.Timer();
  *((_QWORD *)&v30 + 1) = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type SystemFormatStyle.Timer and conformance SystemFormatStyle.Timer, (uint64_t (*)(uint64_t))type metadata accessor for SystemFormatStyle.Timer, (uint64_t)&protocol conformance descriptor for SystemFormatStyle.Timer);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v29);
  outlined init with copy of TypesettingLanguage(v3, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.Timer);
  v24 = v30;
  v15 = v30;
  v16 = __swift_project_boxed_opaque_existential_1(v29, v30);
  v25 = a2;
  v17 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(a2) = SystemFormatStyle.Timer.withSizeVariant(_:)((uint64_t)v19, &v25);
  v27 = v24;
  v20 = __swift_allocate_boxed_opaque_existential_1(v26);
  (*(void (**)(uint64_t *, char *, uint64_t))(v17 + 32))(v20, v19, v15);
  v28 = a2 & 1;
  type metadata accessor for (style: SizeAdaptiveFormatStyle, exact: Bool)(0, (unint64_t *)&lazy cache variable for type metadata for (style: SizeAdaptiveFormatStyle, exact: Bool), (unint64_t *)&lazy cache variable for type metadata for SizeAdaptiveFormatStyle);
  swift_dynamicCast();
  LOBYTE(a2) = v9[*(int *)(v7 + 48)];
  v21 = *(int *)(v11 + 48);
  outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v9, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.Timer);
  v13[v21] = a2;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  v22 = v13[v21];
  outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v13, a1, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.Timer);
  return v22;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v24;
  uint64_t v25;
  uint64_t v26[3];
  __int128 v27;
  char v28;
  uint64_t v29[3];
  __int128 v30;

  v3 = v2;
  type metadata accessor for (SystemFormatStyle.Timer, Bool)(0, &lazy cache variable for type metadata for (SystemFormatStyle.DateOffset, Bool), (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateOffset);
  v7 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v24 - v8;
  type metadata accessor for (style: SystemFormatStyle.Timer, exact: Bool)(0, &lazy cache variable for type metadata for (style: SystemFormatStyle.DateOffset, exact: Bool), (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateOffset);
  v11 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v24 - v12;
  *(_QWORD *)&v30 = type metadata accessor for SystemFormatStyle.DateOffset();
  *((_QWORD *)&v30 + 1) = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset, (uint64_t (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateOffset, (uint64_t)&protocol conformance descriptor for SystemFormatStyle.DateOffset);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v29);
  outlined init with copy of TypesettingLanguage(v3, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
  v24 = v30;
  v15 = v30;
  v16 = __swift_project_boxed_opaque_existential_1(v29, v30);
  v25 = a2;
  v17 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(a2) = SystemFormatStyle.DateOffset.withSizeVariant(_:)((uint64_t)v19, &v25);
  v27 = v24;
  v20 = __swift_allocate_boxed_opaque_existential_1(v26);
  (*(void (**)(uint64_t *, char *, uint64_t))(v17 + 32))(v20, v19, v15);
  v28 = a2 & 1;
  type metadata accessor for (style: SizeAdaptiveFormatStyle, exact: Bool)(0, (unint64_t *)&lazy cache variable for type metadata for (style: SizeAdaptiveFormatStyle, exact: Bool), (unint64_t *)&lazy cache variable for type metadata for SizeAdaptiveFormatStyle);
  swift_dynamicCast();
  LOBYTE(a2) = v9[*(int *)(v7 + 48)];
  v21 = *(int *)(v11 + 48);
  outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v9, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
  v13[v21] = a2;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  v22 = v13[v21];
  outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v13, a1, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
  return v22;
}

uint64_t ResolvableAbsoluteDate.date.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t ResolvableAbsoluteDate.date.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*ResolvableAbsoluteDate.date.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ResolvableAbsoluteDate.style.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  char *v4;
  char v5;
  uint64_t v6;

  result = type metadata accessor for ResolvableAbsoluteDate();
  v4 = (char *)(v1 + *(int *)(result + 20));
  v5 = *v4;
  v6 = *((_QWORD *)v4 + 1);
  LOBYTE(v4) = v4[16];
  *(_BYTE *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = (_BYTE)v4;
  return result;
}

uint64_t ResolvableAbsoluteDate.calendar.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ResolvableAbsoluteDate() + 24);
  v4 = type metadata accessor for Calendar();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ResolvableAbsoluteDate.locale.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ResolvableAbsoluteDate() + 28);
  v4 = type metadata accessor for Locale();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ResolvableAbsoluteDate.timeZone.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ResolvableAbsoluteDate() + 32);
  v4 = type metadata accessor for TimeZone();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ResolvableAbsoluteDate.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_234E68CF0 + 4 * byte_2352A8240[*v0]))(1702125924, 0xE400000000000000);
}

uint64_t sub_234E68CF0()
{
  return 0x656C797473;
}

uint64_t sub_234E68D04()
{
  return 0x7261646E656C6163;
}

uint64_t sub_234E68D1C()
{
  return 0x656C61636F6CLL;
}

uint64_t sub_234E68D30()
{
  return 0x656E6F5A656D6974;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ResolvableAbsoluteDate.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized ResolvableAbsoluteDate.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ResolvableAbsoluteDate.CodingKeys()
{
  lazy protocol witness table accessor for type ResolvableAbsoluteDate.CodingKeys and conformance ResolvableAbsoluteDate.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ResolvableAbsoluteDate.CodingKeys()
{
  lazy protocol witness table accessor for type ResolvableAbsoluteDate.CodingKeys and conformance ResolvableAbsoluteDate.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t static ResolvableAbsoluteDate.decode(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  char *v30;
  uint64_t v31;
  char *v32;
  char v33;
  uint64_t v34;
  int *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  uint64_t *v55;
  uint64_t *boxed_opaque_existential_1;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  _QWORD v68[2];
  char v69;
  uint64_t v70;

  v66 = a2;
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage);
  MEMORY[0x24BDAC7A8](v3);
  v63 = (char *)&v57 - v4;
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for SystemFormatStyle.DateOffset?, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateOffset);
  MEMORY[0x24BDAC7A8](v5);
  v64 = (uint64_t)&v57 - v6;
  v65 = type metadata accessor for SystemFormatStyle.DateOffset();
  v7 = *(_QWORD *)(v65 - 8);
  MEMORY[0x24BDAC7A8](v65);
  v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v57 - v11;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v57 - v14;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v57 - v17;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v57 - v20;
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v57 - v23;
  v67 = type metadata accessor for ResolvableAbsoluteDate();
  MEMORY[0x24BDAC7A8](v67);
  v26 = (char *)&v57 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AnyTrackedValue(a1, (uint64_t)v68);
  v27 = (uint64_t)v26;
  v28 = v70;
  result = ResolvableAbsoluteDate.init(from:)(v68, (uint64_t)v26);
  v70 = v28;
  if (!v28)
  {
    v57 = v15;
    v58 = v9;
    v59 = v12;
    v60 = v18;
    v61 = v21;
    v62 = v24;
    v30 = v63;
    v31 = v64;
    v32 = &v26[*(int *)(v67 + 20)];
    v33 = *v32;
    v34 = *((_QWORD *)v32 + 1);
    LOBYTE(v32) = v32[16];
    LOBYTE(v68[0]) = v33;
    v68[1] = v34;
    v69 = (char)v32;
    Text.DateStyle.format(for:)((uint64_t)v26, v64);
    v35 = (int *)v65;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v31, 1, v65) == 1)
    {
      outlined destroy of TypesettingConfiguration((uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableAbsoluteDate);
      result = outlined destroy of Date?(v31, (uint64_t)&lazy cache variable for type metadata for SystemFormatStyle.DateOffset?, (uint64_t)type metadata accessor for SystemFormatStyle.DateOffset, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
      v36 = v66;
      *(_OWORD *)v66 = 0u;
      *((_OWORD *)v36 + 1) = 0u;
      v36[4] = 0;
    }
    else
    {
      v37 = (uint64_t)v62;
      outlined init with take of LocalizedStringKey.FormatArgument(v31, (uint64_t)v62, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
      type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for (pauseDate: Date), (uint64_t (*)(_QWORD))MEMORY[0x24BDCE900]);
      v39 = (uint64_t)v30;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v30, 1, 1, v38);
      v40 = v67;
      v41 = &v26[*(int *)(v67 + 28)];
      v42 = (uint64_t)v58;
      outlined init with copy of TypesettingLanguage(v37, (uint64_t)v58, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
      v43 = v42 + v35[9];
      v44 = type metadata accessor for Locale();
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 24))(v43, v41, v44);
      v45 = (uint64_t)v59;
      outlined init with take of LocalizedStringKey.FormatArgument(v42, (uint64_t)v59, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
      v46 = v27 + *(int *)(v40 + 24);
      outlined init with copy of TypesettingLanguage(v45, v42, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
      v47 = v42 + v35[10];
      v48 = type metadata accessor for Calendar();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 24))(v47, v46, v48);
      v49 = v42;
      v50 = (uint64_t)v57;
      outlined init with take of LocalizedStringKey.FormatArgument(v49, (uint64_t)v57, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
      outlined destroy of TypesettingConfiguration(v45, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
      v51 = v50;
      v52 = (uint64_t)v60;
      outlined init with take of LocalizedStringKey.FormatArgument(v51, (uint64_t)v60, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
      v53 = (uint64_t)v61;
      outlined init with copy of TypesettingLanguage(v52, (uint64_t)v61, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
      *(_BYTE *)(v53 + v35[12]) = 0;
      outlined destroy of TypesettingConfiguration(v52, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
      v54 = (int *)type metadata accessor for TimeDataFormatting.Resolvable<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.DateOffset>();
      v55 = v66;
      v66[3] = (uint64_t)v54;
      v55[4] = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type TimeDataFormatting.Resolvable<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.DateOffset> and conformance TimeDataFormatting.Resolvable<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for TimeDataFormatting.Resolvable<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.DateOffset>, (uint64_t)&protocol conformance descriptor for TimeDataFormatting.Resolvable<A, B>);
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v55);
      specialized static TimeDataFormatting.Configuration.makeConfiguration(from:format:sizeVariant:secondsUpdateFrequencyBudget:)((uint64_t)boxed_opaque_existential_1 + v54[17], v39, 0.0, v53, 0);
      outlined init with copy of TimeDataSource<Date><A>.DateStorage(v39, (uint64_t)boxed_opaque_existential_1);
      outlined init with copy of TypesettingLanguage(v53, (uint64_t)boxed_opaque_existential_1 + v54[15], (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
      *(uint64_t *)((char *)boxed_opaque_existential_1 + v54[16]) = 0;
      *(uint64_t *)((char *)boxed_opaque_existential_1 + v54[18]) = 0;
      outlined destroy of TypesettingConfiguration(v53, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
      outlined destroy of Date?(v39, (uint64_t)&lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t)type metadata accessor for TimeDataSource<A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<Date><A>.DateStorage);
      outlined destroy of TypesettingConfiguration((uint64_t)v62, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
      return outlined destroy of TypesettingConfiguration(v27, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableAbsoluteDate);
    }
  }
  return result;
}

uint64_t ResolvableAbsoluteDate.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  char v53;

  v36 = a2;
  v38 = type metadata accessor for TimeZone();
  v35 = *(_QWORD *)(v38 - 8);
  MEMORY[0x24BDAC7A8](v38);
  v37 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for Locale();
  v43 = *(_QWORD *)(v41 - 8);
  MEMORY[0x24BDAC7A8](v41);
  v39 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = type metadata accessor for Calendar();
  v42 = *(_QWORD *)(v44 - 8);
  MEMORY[0x24BDAC7A8](v44);
  v40 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for Date();
  v6 = *(_QWORD *)(v45 - 8);
  MEMORY[0x24BDAC7A8](v45);
  v46 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedDecodingContainer<ResolvableAbsoluteDate.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<ResolvableAbsoluteDate.CodingKeys>, (uint64_t (*)(uint64_t, void *, unint64_t))MEMORY[0x24BEE33E0]);
  v48 = v8;
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v33 - v10;
  v12 = type metadata accessor for ResolvableAbsoluteDate();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ResolvableAbsoluteDate.CodingKeys and conformance ResolvableAbsoluteDate.CodingKeys();
  v47 = v11;
  v15 = v49;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v15)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v49 = v9;
  v34 = v6;
  v16 = v14;
  v18 = v43;
  v17 = v44;
  v50 = 0;
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE960]);
  v19 = v45;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v16, v46, v19);
  v53 = 1;
  lazy protocol witness table accessor for type Text.DateStyle and conformance Text.DateStyle();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v20 = v51;
  v21 = v52;
  v22 = v12;
  v23 = &v16[*(int *)(v12 + 20)];
  *v23 = v50;
  *((_QWORD *)v23 + 1) = v20;
  v23[16] = v21;
  v50 = 2;
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Calendar and conformance Calendar, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], MEMORY[0x24BDCF310]);
  v24 = v40;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v42 + 32))(&v16[*(int *)(v22 + 24)], v24, v17);
  v50 = 3;
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Locale and conformance Locale, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], MEMORY[0x24BDCEEE8]);
  v25 = v39;
  v46 = v16;
  v26 = v41;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v27 = v22;
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(&v46[*(int *)(v22 + 28)], v25, v26);
  v50 = 4;
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], MEMORY[0x24BDCF540]);
  v28 = v37;
  v29 = v38;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v49 + 8))(v47, v48);
  v30 = *(int *)(v27 + 32);
  v31 = (uint64_t)v46;
  (*(void (**)(char *, char *, uint64_t))(v35 + 32))(&v46[v30], v28, v29);
  outlined init with copy of TypesettingLanguage(v31, v36, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableAbsoluteDate);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return outlined destroy of TypesettingConfiguration(v31, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableAbsoluteDate);
}

uint64_t one-time initialization function for attribute()
{
  uint64_t result;

  result = MEMORY[0x23B7C5DAC](0xD00000000000001ELL, 0x80000002352E40E0);
  static ResolvableAbsoluteDate.attribute = result;
  return result;
}

{
  uint64_t result;

  result = MEMORY[0x23B7C5DAC](0xD00000000000001FLL, 0x80000002352E6CB0);
  static ResolvableTimer.attribute = result;
  return result;
}

{
  uint64_t result;

  result = MEMORY[0x23B7C5DAC](0xD00000000000001ALL, 0x80000002352E7150);
  static ResolvableProgress.attribute = result;
  return result;
}

{
  uint64_t result;

  result = MEMORY[0x23B7C5DAC](0xD00000000000001ELL, 0x80000002352E7170);
  static ResolvableDateInterval.attribute = result;
  return result;
}

{
  uint64_t result;

  result = MEMORY[0x23B7C5DAC](0xD00000000000001DLL, 0x80000002352E7190);
  static ResolvableCurrentDate.attribute = result;
  return result;
}

id static ResolvableAbsoluteDate.attribute.getter()
{
  if (one-time initialization token for attribute != -1)
    swift_once();
  return (id)static ResolvableAbsoluteDate.attribute;
}

uint64_t ResolvableAbsoluteDate.invalidationConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unsigned __int8 *v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;
  uint64_t v7;

  v3 = (unsigned __int8 *)(v1 + *(int *)(type metadata accessor for ResolvableAbsoluteDate() + 20));
  v4 = *v3;
  v5 = v4 >= 2;
  v6 = v4 - 2;
  if (v5)
  {
    if (v6 >= 2 || v3[16] == 3 || (v3[8] & 0x80) != 0)
    {
      v7 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, v1, v7);
      type metadata accessor for ResolvableAttributeConfiguration(0);
    }
    else
    {
      *(_QWORD *)a1 = 0x404E000000000000;
      *(_BYTE *)(a1 + 8) = 0;
      type metadata accessor for ResolvableAttributeConfiguration(0);
    }
  }
  else
  {
    type metadata accessor for ResolvableAttributeConfiguration(0);
  }
  return swift_storeEnumTagMultiPayload();
}

uint64_t ResolvableAbsoluteDate.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  _BYTE v14[8];
  char v15;
  uint64_t v16;
  char v17;

  v3 = v1;
  type metadata accessor for KeyedDecodingContainer<ResolvableAbsoluteDate.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<ResolvableAbsoluteDate.CodingKeys>, (uint64_t (*)(uint64_t, void *, unint64_t))MEMORY[0x24BEE3520]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = &v14[-v8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ResolvableAbsoluteDate.CodingKeys and conformance ResolvableAbsoluteDate.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v15 = 0;
  type metadata accessor for Date();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE920]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v10 = v3 + *(int *)(type metadata accessor for ResolvableAbsoluteDate() + 20);
    v11 = *(_BYTE *)v10;
    v12 = *(_QWORD *)(v10 + 8);
    LOBYTE(v10) = *(_BYTE *)(v10 + 16);
    v15 = v11;
    v16 = v12;
    v17 = v10;
    v14[7] = 1;
    lazy protocol witness table accessor for type Text.DateStyle and conformance Text.DateStyle();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v15 = 2;
    type metadata accessor for Calendar();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Calendar and conformance Calendar, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], MEMORY[0x24BDCF2F8]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v15 = 3;
    type metadata accessor for Locale();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Locale and conformance Locale, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], MEMORY[0x24BDCEEC8]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v15 = 4;
    type metadata accessor for TimeZone();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], MEMORY[0x24BDCF528]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
}

id protocol witness for static ResolvableStringAttributeFamily.attribute.getter in conformance ResolvableAbsoluteDate()
{
  if (one-time initialization token for attribute != -1)
    swift_once();
  return (id)static ResolvableAbsoluteDate.attribute;
}

uint64_t protocol witness for static ResolvableStringAttributeFamily.decode(from:) in conformance ResolvableAbsoluteDate@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return static ResolvableAbsoluteDate.decode(from:)(a1, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ResolvableAbsoluteDate@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ResolvableAbsoluteDate.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ResolvableAbsoluteDate(_QWORD *a1)
{
  return ResolvableAbsoluteDate.encode(to:)(a1);
}

uint64_t specialized DiscreteFormatStyle.alwaysOnDisplayFormat<A>(source:secondsUpdateFrequencyBudget:sizeVariant:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t result;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52[3];
  __int128 v53;
  uint64_t v54[3];
  uint64_t v55;
  uint64_t v56;
  char v57;
  __int128 v58;
  __int128 v59;

  v5 = v4;
  v50 = a1;
  type metadata accessor for (SystemFormatStyle.Timer, Bool)(0, &lazy cache variable for type metadata for (SystemFormatStyle.Timer, Bool), (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.Timer);
  v10 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v49 - v11;
  v13 = type metadata accessor for SystemFormatStyle.Timer();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _MixedAoDFrequencyFormatInitializer<SystemFormatStyle.Timer>(0, &lazy cache variable for type metadata for _MixedAoDFrequencyFormatInitializer<SystemFormatStyle.Timer>, (uint64_t (*)(uint64_t))type metadata accessor for SystemFormatStyle.Timer, lazy protocol witness table accessor for type SystemFormatStyle.Timer and conformance SystemFormatStyle.Timer);
  MEMORY[0x24BDAC7A8](v16);
  outlined init with copy of TypesettingLanguage(v5, (uint64_t)&v49 - v17, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.Timer);
  type metadata accessor for any MixedAoDFrequencyFormatInitializer<Self.MixedAoDFrequencyFormatInitializer.FormatInput == Date, Self.MixedAoDFrequencyFormatInitializer.FormatOutput == AttributedString>();
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(&v58, (uint64_t)v54);
    v18 = v55;
    v19 = v56;
    __swift_project_boxed_opaque_existential_1(v54, v55);
    v52[0] = a2;
    v20 = (*(uint64_t (**)(__int128 *, uint64_t *, uint64_t, uint64_t, double))(v19 + 24))(&v58, v52, v18, v19, a4);
    v21 = v59;
    __swift_project_boxed_opaque_existential_1(&v58, v59);
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage);
    v23 = v22;
    v24 = lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage();
    DiscreteFormatStyle.paused<A>(accordingTo:)(v50, v21, v23, v24, (uint64_t *)a3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v58);
    v25 = v54;
  }
  else
  {
    *(_QWORD *)&v59 = v13;
    *((_QWORD *)&v59 + 1) = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type SystemFormatStyle.Timer and conformance SystemFormatStyle.Timer, (uint64_t (*)(uint64_t))type metadata accessor for SystemFormatStyle.Timer, (uint64_t)&protocol conformance descriptor for SystemFormatStyle.Timer);
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v58);
    outlined init with copy of TypesettingLanguage(v5, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.Timer);
    v49 = v59;
    v27 = __swift_project_boxed_opaque_existential_1(&v58, v59);
    v53 = v49;
    v28 = __swift_allocate_boxed_opaque_existential_1(v52);
    outlined init with copy of TypesettingLanguage((uint64_t)v27, (uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.Timer);
    v29 = static Duration.seconds(_:)();
    *(_QWORD *)&v49 = a3;
    v31 = v30;
    v32 = (_QWORD *)((char *)v27 + *(int *)(v13 + 36));
    v33 = *v32;
    v34 = v32[1];
    v35 = static Duration.< infix(_:_:)();
    if ((v35 & 1) != 0)
      v36 = v29;
    else
      v36 = v33;
    if ((v35 & 1) != 0)
      v37 = v31;
    else
      v37 = v34;
    v38 = (uint64_t *)((char *)v28 + *(int *)(v13 + 40));
    *v38 = v36;
    v38[1] = v37;
    v40 = *((_QWORD *)&v53 + 1);
    v39 = v53;
    v41 = __swift_project_boxed_opaque_existential_1(v52, v53);
    v51 = a2;
    v42 = *(_QWORD *)(v39 - 8);
    MEMORY[0x24BDAC7A8](v41);
    v44 = (char *)&v49 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
    v45 = FormatStyle.exactSizeVariant(_:)(v44, &v51, v39);
    v55 = v39;
    v56 = v40;
    v46 = __swift_allocate_boxed_opaque_existential_1(v54);
    v47 = v39;
    a3 = v49;
    (*(void (**)(uint64_t *, char *, uint64_t))(v42 + 32))(v46, v44, v47);
    v57 = v45 & 1;
    type metadata accessor for (style: SizeAdaptiveFormatStyle, exact: Bool)(0, (unint64_t *)&lazy cache variable for type metadata for (style: UpdateFrequencyDependentFormatStyle, exact: Bool), (unint64_t *)&lazy cache variable for type metadata for UpdateFrequencyDependentFormatStyle);
    swift_dynamicCast();
    v20 = v12[*(int *)(v10 + 48)];
    outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v12, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.Timer);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
    specialized DiscreteFormatStyle.paused<A>(accordingTo:)(v50, (uint64_t (*)(_QWORD))type metadata accessor for PausedFormatStyle<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer>, lazy protocol witness table accessor for type PausedFormatStyle<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer> and conformance PausedFormatStyle<A, B>, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.Timer, lazy protocol witness table accessor for type SystemFormatStyle.Timer and conformance SystemFormatStyle.Timer, (uint64_t *)a3);
    outlined destroy of TypesettingConfiguration((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.Timer);
    v25 = (uint64_t *)&v58;
  }
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  *(_BYTE *)(a3 + 40) = v20 & 1;
  return result;
}

uint64_t specialized DiscreteFormatStyle.alwaysOnDisplayFormat<A>(source:secondsUpdateFrequencyBudget:sizeVariant:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>, double a4@<D0>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int128 v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v28;
  uint64_t *v29;
  __int128 v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char v36;
  uint64_t *v37;
  void (*v38)(uint64_t *, char *, _QWORD);
  uint64_t result;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43[3];
  __int128 v44;
  uint64_t v45[3];
  __int128 v46;
  char v47;
  __int128 v48;
  __int128 v49;

  v5 = v4;
  v41 = a1;
  type metadata accessor for (SystemFormatStyle.Timer, Bool)(0, &lazy cache variable for type metadata for (SystemFormatStyle.DateOffset, Bool), (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateOffset);
  v10 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v40 - v11;
  v13 = type metadata accessor for SystemFormatStyle.DateOffset();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _MixedAoDFrequencyFormatInitializer<SystemFormatStyle.Timer>(0, &lazy cache variable for type metadata for _MixedAoDFrequencyFormatInitializer<SystemFormatStyle.DateOffset>, (uint64_t (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateOffset, lazy protocol witness table accessor for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset);
  MEMORY[0x24BDAC7A8](v16);
  outlined init with copy of TypesettingLanguage(v5, (uint64_t)&v40 - v17, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
  type metadata accessor for any MixedAoDFrequencyFormatInitializer<Self.MixedAoDFrequencyFormatInitializer.FormatInput == Date, Self.MixedAoDFrequencyFormatInitializer.FormatOutput == AttributedString>();
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(&v48, (uint64_t)v45);
    v20 = v46;
    v19 = v20 >> 64;
    v18 = v20;
    __swift_project_boxed_opaque_existential_1(v45, v46);
    v43[0] = a2;
    v21 = (*(uint64_t (**)(__int128 *, uint64_t *, uint64_t, uint64_t, double))(v19 + 24))(&v48, v43, v18, v19, a4);
    v22 = v49;
    __swift_project_boxed_opaque_existential_1(&v48, v49);
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage);
    v24 = v23;
    v25 = lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage();
    DiscreteFormatStyle.paused<A>(accordingTo:)(v41, v22, v24, v25, a3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v48);
    v26 = v45;
  }
  else
  {
    *(_QWORD *)&v49 = v13;
    *((_QWORD *)&v49 + 1) = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset, (uint64_t (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateOffset, (uint64_t)&protocol conformance descriptor for SystemFormatStyle.DateOffset);
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v48);
    outlined init with copy of TypesettingLanguage(v5, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
    v40 = v49;
    v28 = __swift_project_boxed_opaque_existential_1(&v48, v49);
    v44 = v40;
    v29 = __swift_allocate_boxed_opaque_existential_1(v43);
    outlined init with copy of TypesettingLanguage((uint64_t)v28, (uint64_t)v29, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
    *((_BYTE *)v29 + *(int *)(v13 + 44)) = 2;
    v30 = v44;
    v31 = __swift_project_boxed_opaque_existential_1(v43, v44);
    *(_QWORD *)&v40 = &v40;
    v42 = a2;
    v32 = a3;
    v33 = *(_QWORD *)(v30 - 8);
    MEMORY[0x24BDAC7A8](v31);
    v35 = (char *)&v40 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
    v36 = FormatStyle.exactSizeVariant(_:)(v35, &v42, v30);
    v46 = v30;
    v37 = __swift_allocate_boxed_opaque_existential_1(v45);
    v38 = *(void (**)(uint64_t *, char *, _QWORD))(v33 + 32);
    a3 = v32;
    v38(v37, v35, v30);
    v47 = v36 & 1;
    type metadata accessor for (style: SizeAdaptiveFormatStyle, exact: Bool)(0, (unint64_t *)&lazy cache variable for type metadata for (style: UpdateFrequencyDependentFormatStyle, exact: Bool), (unint64_t *)&lazy cache variable for type metadata for UpdateFrequencyDependentFormatStyle);
    swift_dynamicCast();
    v21 = v12[*(int *)(v10 + 48)];
    outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v12, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
    specialized DiscreteFormatStyle.paused<A>(accordingTo:)(v41, (uint64_t (*)(_QWORD))type metadata accessor for PausedFormatStyle<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.DateOffset>, lazy protocol witness table accessor for type PausedFormatStyle<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.DateOffset> and conformance PausedFormatStyle<A, B>, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset, lazy protocol witness table accessor for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset, v32);
    outlined destroy of TypesettingConfiguration((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
    v26 = (uint64_t *)&v48;
  }
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  *((_BYTE *)a3 + 40) = v21 & 1;
  return result;
}

uint64_t specialized DiscreteFormatStyle.paused<A>(accordingTo:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t (*a4)(_QWORD)@<X3>, uint64_t (*a5)(void)@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t (*v12)(void);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void);
  int v25;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v27;
  uint64_t *v28;
  uint64_t (*v30)(_QWORD);
  uint64_t (*v31)(void);
  uint64_t (*v32)(void);
  uint64_t v33;

  v31 = a3;
  v32 = a5;
  v30 = a2;
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v30 - v10;
  v12 = MEMORY[0x24BDCE900];
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v30 - v17;
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(a1, (uint64_t)v11);
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for (pauseDate: Date), (uint64_t (*)(_QWORD))v12);
  v20 = 1;
  v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48))(v11, 1, v19);
  v22 = type metadata accessor for Date();
  v23 = *(_QWORD *)(v22 - 8);
  if (v21 != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v15, v11, v22);
    v20 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v15, v20, 1, v22);
  v24 = MEMORY[0x24BDCE900];
  outlined init with take of Date?((uint64_t)v15, (uint64_t)v18, (uint64_t)&lazy cache variable for type metadata for Date?, (uint64_t)MEMORY[0x24BDCE900], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Date?);
  v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48))(v18, 1, v22);
  outlined destroy of Date?((uint64_t)v18, (uint64_t)&lazy cache variable for type metadata for Date?, (uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
  if (v25 == 1)
  {
    a6[3] = a4(0);
    a6[4] = v32();
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a6);
  }
  else
  {
    v27 = v30(0);
    a6[3] = v27;
    a6[4] = v31();
    v28 = __swift_allocate_boxed_opaque_existential_1(a6);
    outlined init with copy of TimeDataSource<Date><A>.DateStorage(a1, (uint64_t)v28);
    boxed_opaque_existential_1 = (uint64_t *)((char *)v28 + *(int *)(v27 + 52));
  }
  return outlined init with copy of TypesettingLanguage(v33, (uint64_t)boxed_opaque_existential_1, a4);
}

uint64_t type metadata accessor for TimeDataFormatting.Resolvable<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.DateOffset>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for TimeDataFormatting.Resolvable<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.DateOffset>;
  if (!lazy cache variable for type metadata for TimeDataFormatting.Resolvable<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.DateOffset>)
  {
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(255, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage);
    type metadata accessor for SystemFormatStyle.DateOffset();
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage();
    lazy protocol witness table accessor for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset();
    type metadata accessor for TimeDataFormatting.Resolvable();
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset, (uint64_t (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateOffset, (uint64_t)&protocol conformance descriptor for SystemFormatStyle.DateOffset);
}

uint64_t outlined init with copy of TimeDataSource<Date><A>.DateStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type ResolvableAbsoluteDate.CodingKeys and conformance ResolvableAbsoluteDate.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableAbsoluteDate.CodingKeys and conformance ResolvableAbsoluteDate.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableAbsoluteDate.CodingKeys and conformance ResolvableAbsoluteDate.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableAbsoluteDate.CodingKeys, &unk_250635258);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableAbsoluteDate.CodingKeys and conformance ResolvableAbsoluteDate.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableAbsoluteDate.CodingKeys and conformance ResolvableAbsoluteDate.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableAbsoluteDate.CodingKeys and conformance ResolvableAbsoluteDate.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableAbsoluteDate.CodingKeys, &unk_250635258);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableAbsoluteDate.CodingKeys and conformance ResolvableAbsoluteDate.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableAbsoluteDate.CodingKeys and conformance ResolvableAbsoluteDate.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableAbsoluteDate.CodingKeys and conformance ResolvableAbsoluteDate.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableAbsoluteDate.CodingKeys, &unk_250635258);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableAbsoluteDate.CodingKeys and conformance ResolvableAbsoluteDate.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableAbsoluteDate.CodingKeys and conformance ResolvableAbsoluteDate.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableAbsoluteDate.CodingKeys and conformance ResolvableAbsoluteDate.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableAbsoluteDate.CodingKeys, &unk_250635258);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableAbsoluteDate.CodingKeys and conformance ResolvableAbsoluteDate.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.DateStyle and conformance Text.DateStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.DateStyle and conformance Text.DateStyle;
  if (!lazy protocol witness table cache variable for type Text.DateStyle and conformance Text.DateStyle)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.DateStyle, &type metadata for Text.DateStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.DateStyle and conformance Text.DateStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.DateStyle and conformance Text.DateStyle;
  if (!lazy protocol witness table cache variable for type Text.DateStyle and conformance Text.DateStyle)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.DateStyle, &type metadata for Text.DateStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.DateStyle and conformance Text.DateStyle);
  }
  return result;
}

void type metadata accessor for KeyedDecodingContainer<ResolvableAbsoluteDate.CodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = lazy protocol witness table accessor for type ResolvableAbsoluteDate.CodingKeys and conformance ResolvableAbsoluteDate.CodingKeys();
    v7 = a3(a1, &unk_250635258, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t specialized static ResolvableAbsoluteDate.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  unsigned __int8 v12[8];
  uint64_t v13;
  char v14;
  unsigned __int8 v15[8];
  uint64_t v16;
  char v17;

  if ((static Date.== infix(_:_:)() & 1) != 0)
  {
    v4 = (int *)type metadata accessor for ResolvableAbsoluteDate();
    v5 = v4[5];
    v6 = *(_QWORD *)(a1 + v5 + 8);
    v7 = *(_BYTE *)(a1 + v5 + 16);
    v15[0] = *(_BYTE *)(a1 + v5);
    v16 = v6;
    v17 = v7;
    v8 = a2 + v5;
    v9 = *(_BYTE *)v8;
    v10 = *(_QWORD *)(v8 + 8);
    LOBYTE(v8) = *(_BYTE *)(v8 + 16);
    v12[0] = v9;
    v13 = v10;
    v14 = v8;
    if ((specialized static Text.DateStyle.== infix(_:_:)(v15, v12) & 1) != 0
      && (MEMORY[0x23B7C5374](a1 + v4[6], a2 + v4[6]) & 1) != 0
      && (MEMORY[0x23B7C526C](a1 + v4[7], a2 + v4[7]) & 1) != 0)
    {
      JUMPOUT(0x23B7C5488);
    }
  }
  return 0;
}

uint64_t instantiation function for generic protocol witness table for ResolvableAbsoluteDate(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ResolvableAbsoluteDate and conformance ResolvableAbsoluteDate, (uint64_t (*)(uint64_t))type metadata accessor for ResolvableAbsoluteDate, (uint64_t)&protocol conformance descriptor for ResolvableAbsoluteDate);
  result = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ResolvableAbsoluteDate and conformance ResolvableAbsoluteDate, (uint64_t (*)(uint64_t))type metadata accessor for ResolvableAbsoluteDate, (uint64_t)&protocol conformance descriptor for ResolvableAbsoluteDate);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

_UNKNOWN **associated type witness table accessor for ResolvableStringAttributeRepresentation.Family : ResolvableStringAttributeFamily in ResolvableAbsoluteDate()
{
  return &protocol witness table for ResolvableAbsoluteDate;
}

uint64_t *initializeBufferWithCopyOfBuffer for ResolvableAbsoluteDate(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Date();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_OWORD *)v10 = *(_OWORD *)v11;
    v10[16] = v11[16];
    v12 = (char *)a1 + v9;
    v13 = (char *)a2 + v9;
    v14 = type metadata accessor for Calendar();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
    v15 = a3[7];
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v18 = type metadata accessor for Locale();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
    v19 = a3[8];
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    v22 = type metadata accessor for TimeZone();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  }
  return a1;
}

uint64_t destroy for ResolvableAbsoluteDate(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[6];
  v6 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[7];
  v8 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[8];
  v10 = type metadata accessor for TimeZone();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
}

uint64_t initializeWithCopy for ResolvableAbsoluteDate(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
  v11 = a1 + v8;
  v12 = a2 + v8;
  v13 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  v14 = a3[7];
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
  v18 = a3[8];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
  return a1;
}

uint64_t assignWithCopy for ResolvableAbsoluteDate(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)v8 = *(_BYTE *)v9;
  v10 = *(_QWORD *)(v9 + 8);
  *(_BYTE *)(v8 + 16) = *(_BYTE *)(v9 + 16);
  *(_QWORD *)(v8 + 8) = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  return a1;
}

uint64_t initializeWithTake for ResolvableAbsoluteDate(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
  v11 = a1 + v8;
  v12 = a2 + v8;
  v13 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  v14 = a3[7];
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
  v18 = a3[8];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
  return a1;
}

uint64_t assignWithTake for ResolvableAbsoluteDate(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_BYTE *)v9 = *(_BYTE *)v10;
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
  *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
  v11 = a1 + v8;
  v12 = a2 + v8;
  v13 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  v14 = a3[7];
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(v15, v16, v17);
  v18 = a3[8];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 40))(v19, v20, v21);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvableAbsoluteDate()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_234E6AFD0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 252)
  {
    if (*(unsigned __int8 *)(a1 + a3[5] + 16) <= 3u)
      v9 = 3;
    else
      v9 = *(unsigned __int8 *)(a1 + a3[5] + 16);
    v10 = v9 - 3;
    if (*(unsigned __int8 *)(a1 + a3[5] + 16) >= 3u)
      return v10;
    else
      return 0;
  }
  else
  {
    v11 = type metadata accessor for Calendar();
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v13 = v11;
      v14 = a3[6];
    }
    else
    {
      v15 = type metadata accessor for Locale();
      v12 = *(_QWORD *)(v15 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v13 = v15;
        v14 = a3[7];
      }
      else
      {
        v13 = type metadata accessor for TimeZone();
        v12 = *(_QWORD *)(v13 - 8);
        v14 = a3[8];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(a1 + v14, a2, v13);
  }
}

uint64_t storeEnumTagSinglePayload for ResolvableAbsoluteDate()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_234E6B0D4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = type metadata accessor for Date();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 252)
    {
      *(_BYTE *)(a1 + a4[5] + 16) = a2 + 3;
      return result;
    }
    v13 = type metadata accessor for Calendar();
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[6];
    }
    else
    {
      v16 = type metadata accessor for Locale();
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[7];
      }
      else
      {
        v10 = type metadata accessor for TimeZone();
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[8];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata completion function for ResolvableAbsoluteDate()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for Calendar();
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for Locale();
      if (v3 <= 0x3F)
      {
        result = type metadata accessor for TimeZone();
        if (v4 <= 0x3F)
        {
          swift_initStructMetadata();
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ResolvableAbsoluteDate.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_234E6B2D0 + 4 * byte_2352A824A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_234E6B304 + 4 * byte_2352A8245[v4]))();
}

uint64_t sub_234E6B304(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234E6B30C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234E6B314);
  return result;
}

uint64_t sub_234E6B320(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234E6B328);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_234E6B32C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234E6B334(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ResolvableAbsoluteDate.CodingKeys()
{
  return &unk_250635258;
}

uint64_t specialized ResolvableAbsoluteDate.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1702125924 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C797473 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7261646E656C6163 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x656E6F5A656D6974 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t lazy protocol witness table accessor for type SystemFormatStyle.Timer and conformance SystemFormatStyle.Timer()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type SystemFormatStyle.Timer and conformance SystemFormatStyle.Timer, (uint64_t (*)(uint64_t))type metadata accessor for SystemFormatStyle.Timer, (uint64_t)&protocol conformance descriptor for SystemFormatStyle.Timer);
}

void type metadata accessor for PausedFormatStyle<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer>(uint64_t a1)
{
  type metadata accessor for TimeDataFormatting.Configuration<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer>(a1, &lazy cache variable for type metadata for PausedFormatStyle<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer>, (uint64_t (*)(uint64_t))type metadata accessor for SystemFormatStyle.Timer, lazy protocol witness table accessor for type SystemFormatStyle.Timer and conformance SystemFormatStyle.Timer, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for PausedFormatStyle);
}

void type metadata accessor for TimeDataFormatting.Configuration<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, _QWORD *))
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD v13[4];

  if (!*a2)
  {
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(255, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(_QWORD))type metadata accessor for TimeDataSource<A>.DateStorage);
    v13[0] = v10;
    v13[1] = a3(255);
    v13[2] = lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage();
    v13[3] = a4();
    v11 = a5(a1, v13);
    if (!v12)
      atomic_store(v11, a2);
  }
}

uint64_t lazy protocol witness table accessor for type PausedFormatStyle<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer> and conformance PausedFormatStyle<A, B>()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type PausedFormatStyle<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer> and conformance PausedFormatStyle<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for PausedFormatStyle<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer>, (uint64_t)&protocol conformance descriptor for PausedFormatStyle<A, B>);
}

unint64_t type metadata accessor for any MixedAoDFrequencyFormatInitializer<Self.MixedAoDFrequencyFormatInitializer.FormatInput == Date, Self.MixedAoDFrequencyFormatInitializer.FormatOutput == AttributedString>()
{
  unint64_t result;

  result = lazy cache variable for type metadata for any MixedAoDFrequencyFormatInitializer<Self.MixedAoDFrequencyFormatInitializer.FormatInput == Date, Self.MixedAoDFrequencyFormatInitializer.FormatOutput == AttributedString>;
  if (!lazy cache variable for type metadata for any MixedAoDFrequencyFormatInitializer<Self.MixedAoDFrequencyFormatInitializer.FormatInput == Date, Self.MixedAoDFrequencyFormatInitializer.FormatOutput == AttributedString>)
  {
    type metadata accessor for Date();
    type metadata accessor for AttributedString();
    result = swift_getExtendedExistentialTypeMetadata_unique();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for any MixedAoDFrequencyFormatInitializer<Self.MixedAoDFrequencyFormatInitializer.FormatInput == Date, Self.MixedAoDFrequencyFormatInitializer.FormatOutput == AttributedString>);
  }
  return result;
}

void type metadata accessor for (style: SizeAdaptiveFormatStyle, exact: Bool)(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t TupleTypeMetadata2;
  uint64_t v5;

  if (!*a2)
  {
    type metadata accessor for ScrollStateRequest(255, a3);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

void type metadata accessor for (style: SystemFormatStyle.Timer, exact: Bool)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

uint64_t outlined destroy of (style: SystemFormatStyle.Timer, exact: Bool)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t v4;

  type metadata accessor for (style: SystemFormatStyle.Timer, exact: Bool)(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void type metadata accessor for PausedFormatStyle<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.DateOffset>(uint64_t a1)
{
  type metadata accessor for TimeDataFormatting.Configuration<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer>(a1, &lazy cache variable for type metadata for PausedFormatStyle<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.DateOffset>, (uint64_t (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateOffset, lazy protocol witness table accessor for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for PausedFormatStyle);
}

uint64_t lazy protocol witness table accessor for type PausedFormatStyle<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.DateOffset> and conformance PausedFormatStyle<A, B>()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type PausedFormatStyle<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.DateOffset> and conformance PausedFormatStyle<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for PausedFormatStyle<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.DateOffset>, (uint64_t)&protocol conformance descriptor for PausedFormatStyle<A, B>);
}

void type metadata accessor for (SystemFormatStyle.Timer, Bool)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

void type metadata accessor for _MixedAoDFrequencyFormatInitializer<SystemFormatStyle.Timer>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4();
    v10 = type metadata accessor for _MixedAoDFrequencyFormatInitializer(a1, v7, v8, v9);
    if (!v11)
      atomic_store(v10, a2);
  }
}

NSAttributedString __swiftcall AnyCustomTextAttachment.nsAttributedString(with:)(Swift::OpaquePointer with)
{
  void *v1;
  uint64_t v2;
  id v3;
  CTRunDelegateRef v4;
  CFIndex v5;
  CGFloat (__cdecl *v6)(void *);
  char isUniquelyReferenced_nonNull_native;
  void *v8;
  id v9;
  char v10;
  id v11;
  void *v12;
  Class isa;
  id v14;
  _OWORD v16[2];
  CTRunDelegateCallbacks callbacks;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v2 = one-time initialization token for coreTextRunDelegate;
  swift_bridgeObjectRetain();
  if (v2 != -1)
    swift_once();
  callbacks.version = 1;
  callbacks.dealloc = (CTRunDelegateDeallocateCallback)@objc closure #1 in AnyCustomTextAttachment.runDelegate.getter;
  callbacks.getAscent = (CTRunDelegateGetAscentCallback)@objc closure #2 in AnyCustomTextAttachment.runDelegate.getter;
  callbacks.getDescent = (CTRunDelegateGetDescentCallback)@objc closure #3 in AnyCustomTextAttachment.runDelegate.getter;
  callbacks.getWidth = (CTRunDelegateGetWidthCallback)@objc closure #4 in AnyCustomTextAttachment.runDelegate.getter;
  v3 = (id)static NSAttributedStringKey.coreTextRunDelegate;
  swift_retain();
  v4 = CTRunDelegateCreate(&callbacks, v1);
  if (!v4)
    __break(1u);
  v5 = (CFIndex)v4;
  type metadata accessor for CTRunDelegateRef(0);
  callbacks.getDescent = v6;
  callbacks.version = v5;
  outlined init with take of Any(&callbacks, v16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v16, v3, isUniquelyReferenced_nonNull_native);

  swift_bridgeObjectRelease();
  if (one-time initialization token for customAttachment != -1)
    swift_once();
  v8 = (void *)static NSAttributedStringKey.customAttachment;
  callbacks.getDescent = (CTRunDelegateGetDescentCallback)type metadata accessor for AnyCustomTextAttachment();
  callbacks.version = (CFIndex)v1;
  outlined init with take of Any(&callbacks, v16);
  swift_retain();
  v9 = v8;
  v10 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v16, v9, v10);

  swift_bridgeObjectRelease();
  v11 = objc_allocWithZone(MEMORY[0x24BDD1458]);
  v12 = (void *)MEMORY[0x23B7C5DAC](12369903, 0xA300000000000000);
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v14 = objc_msgSend(v11, sel_initWithString_attributes_, v12, isa);

  return (NSAttributedString)v14;
}

id one-time initialization function for coreTextRunDelegate()
{
  static NSAttributedStringKey.coreTextRunDelegate = *MEMORY[0x24BDC4F28];
  return (id)static NSAttributedStringKey.coreTextRunDelegate;
}

uint64_t one-time initialization function for customAttachment()
{
  uint64_t result;

  result = MEMORY[0x23B7C5DAC](0xD000000000000018, 0x80000002352E4140);
  static NSAttributedStringKey.customAttachment = result;
  return result;
}

uint64_t @objc closure #2 in AnyCustomTextAttachment.runDelegate.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a1 + 80))();
}

uint64_t @objc closure #3 in AnyCustomTextAttachment.runDelegate.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a1 + 88))();
}

uint64_t @objc closure #4 in AnyCustomTextAttachment.runDelegate.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a1 + 96))();
}

uint64_t type metadata accessor for AnyCustomTextAttachment()
{
  return objc_opt_self();
}

uint64_t ConcreteCustomTextAttachment.ascent.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)v0 + 128) + 8))(*(_QWORD *)(*(_QWORD *)v0 + 120));
}

uint64_t ConcreteCustomTextAttachment.descent.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)v0 + 128) + 16))(*(_QWORD *)(*(_QWORD *)v0 + 120));
}

uint64_t ConcreteCustomTextAttachment.length.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)v0 + 128) + 24))(*(_QWORD *)(*(_QWORD *)v0 + 120));
}

uint64_t ConcreteCustomTextAttachment.draw(with:in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)v2 + 128) + 32))(a1, a2, *(_QWORD *)(*(_QWORD *)v2 + 120));
}

uint64_t type metadata accessor for ConcreteCustomTextAttachment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ConcreteCustomTextAttachment);
}

void destroy for LineAttachment(uint64_t a1)
{
  outlined consume of Text.Layout.Line.Line(*(void **)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeWithCopy for LineAttachment(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  char v6;
  __int128 v7;

  v4 = *(void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  outlined copy of Text.Layout.Line.Line(*(void **)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  return a1;
}

uint64_t assignWithCopy for LineAttachment(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  char v6;
  void *v7;
  uint64_t v8;
  char v9;

  v4 = *(void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  outlined copy of Text.Layout.Line.Line(*(void **)a2, v5, v6);
  v7 = *(void **)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  outlined consume of Text.Layout.Line.Line(v7, v8, v9);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  return a1;
}

uint64_t assignWithTake for LineAttachment(uint64_t a1, uint64_t a2)
{
  char v4;
  void *v5;
  uint64_t v6;
  char v7;
  __int128 v8;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(void **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  outlined consume of Text.Layout.Line.Line(v5, v6, v7);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  v8 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for LineAttachment(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 96))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LineAttachment(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 96) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for LineAttachment()
{
  return &type metadata for LineAttachment;
}

double protocol witness for TextAttachment.ascent.getter in conformance LineAttachment()
{
  uint64_t v0;

  return *(double *)(v0 + 72);
}

double protocol witness for TextAttachment.descent.getter in conformance LineAttachment()
{
  uint64_t v0;

  return *(double *)(v0 + 80);
}

double protocol witness for TextAttachment.length.getter in conformance LineAttachment()
{
  uint64_t v0;

  return *(double *)(v0 + 64);
}

void protocol witness for TextAttachment.draw(with:in:) in conformance LineAttachment(__int128 *a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  _QWORD v8[2];
  char v9;
  __int128 v10;
  int v11;

  v3 = *(void **)v2;
  v4 = *(_QWORD *)(v2 + 8);
  v5 = *(_BYTE *)(v2 + 16);
  v6 = *(_DWORD *)(v2 + 40);
  v7 = *a2;
  v8[0] = v3;
  v8[1] = v4;
  v9 = v5;
  v10 = *a1;
  v11 = v6;
  outlined copy of Text.Layout.Line.Line(v3, v4, v5);
  GraphicsContext.draw(_:options:)((uint64_t)v8, 0, v7);
  outlined consume of Text.Layout.Line.Line(v3, v4, v5);
}

uint64_t EnvironmentValues.writingMode.getter@<X0>(char *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.writingMode.setter(char *a1)
{
  uint64_t *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v2);
  swift_release();
  if (v1[1])
  {
    v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

BOOL static Text.WritingMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

BOOL static Text.WritingMode.Storage.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void Text.WritingMode.Storage.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int Text.WritingMode.Storage.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void Text.WritingMode.storage.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *Text.WritingMode.storage.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*Text.WritingMode.storage.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void static Text.WritingMode.horizontalTopToBottom.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static Text.WritingMode.verticalRightToLeft.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void Text.WritingMode.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int Text.WritingMode.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t key path getter for EnvironmentValues.writingMode : EnvironmentValues@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v6;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v6);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, &v6);
  }
  result = swift_release_n();
  *a2 = v6;
  return result;
}

uint64_t key path setter for EnvironmentValues.writingMode : EnvironmentValues(char *a1)
{
  char v2;

  v2 = *a1;
  return EnvironmentValues.writingMode.setter(&v2);
}

uint64_t (*EnvironmentValues.writingMode.modify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1)
{
  uint64_t *v4;
  char *v5;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;

  v5 = (char *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  v6 = *v4;
  if (v4[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v6, v5);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<WritingModeKey>(0, a2, a3, a4);
    BloomFilter.init(hashValue:)(v7);
    v8 = swift_retain_n();
    v9 = specialized find1<A>(_:key:filter:)(v8, v12);
    if (v9)
      v10 = *(_BYTE *)(v9 + 72);
    else
      v10 = 0;
    *v5 = v10;
  }
  swift_release_n();
  return EnvironmentValues.writingMode.modify;
}

uint64_t EnvironmentValues.writingMode.modify(uint64_t a1)
{
  uint64_t *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(uint64_t **)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 24);
  v4 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3);
  swift_release();
  if (v2[1])
  {
    v5 = **(_QWORD **)(a1 + 16);
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.writingMode(_:)(char *a1, uint64_t a2, uint64_t a3)
{
  char v5;
  uint64_t *KeyPath;
  char v8;

  v5 = *a1;
  KeyPath = (uint64_t *)swift_getKeyPath();
  v8 = v5;
  View.environment<A>(_:_:)(KeyPath, (uint64_t)&v8, a2, a3);
  return swift_release();
}

uint64_t Text.WritingMode.protobufValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t Text.WritingMode.init(protobufValue:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  if (result)
  {
    if (result == 1)
      *a2 = 1;
    else
      *a2 = 2;
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

uint64_t protocol witness for ProtobufEnum.init(protobufValue:) in conformance Text.WritingMode@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  if (result == 1)
  {
    *a2 = 1;
  }
  else if (result)
  {
    *a2 = 2;
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<WritingModeKey>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<WritingModeKey>)
  {
    v4 = type metadata accessor for EnvironmentPropertyKey(0, (uint64_t)&type metadata for WritingModeKey, (uint64_t)&protocol witness table for WritingModeKey, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<WritingModeKey>);
  }
}

uint64_t sub_234E6C65C(char *a1)
{
  char v2;

  v2 = *a1;
  return EnvironmentValues.writingMode.setter(&v2);
}

unint64_t lazy protocol witness table accessor for type Text.WritingMode.Storage and conformance Text.WritingMode.Storage()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.WritingMode.Storage and conformance Text.WritingMode.Storage;
  if (!lazy protocol witness table cache variable for type Text.WritingMode.Storage and conformance Text.WritingMode.Storage)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.WritingMode.Storage, &type metadata for Text.WritingMode.Storage);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.WritingMode.Storage and conformance Text.WritingMode.Storage);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.WritingMode and conformance Text.WritingMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.WritingMode and conformance Text.WritingMode;
  if (!lazy protocol witness table cache variable for type Text.WritingMode and conformance Text.WritingMode)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.WritingMode, &type metadata for Text.WritingMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.WritingMode and conformance Text.WritingMode);
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.WritingMode()
{
  return &type metadata for Text.WritingMode;
}

uint64_t storeEnumTagSinglePayload for Text.WritingMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_234E6C780 + 4 * byte_2352A854D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_234E6C7B4 + 4 * byte_2352A8548[v4]))();
}

uint64_t sub_234E6C7B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234E6C7BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234E6C7C4);
  return result;
}

uint64_t sub_234E6C7D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234E6C7D8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_234E6C7DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234E6C7E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Text.WritingMode.Storage()
{
  return &type metadata for Text.WritingMode.Storage;
}

uint64_t sub_234E6C800(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v4 = *a1;
  v5 = a1[1];
  type metadata accessor for _EnvironmentKeyWritingModifier<Text.WritingMode>(255, a2, a3, a4);
  v8 = type metadata accessor for ModifiedContent(255, v4, v6, v7);
  v10[0] = v5;
  v10[1] = &protocol witness table for _EnvironmentKeyWritingModifier<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v8, v10);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Text.WritingMode>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Text.WritingMode>)
  {
    v4 = type metadata accessor for _EnvironmentKeyWritingModifier(0, (uint64_t)&type metadata for Text.WritingMode, a3, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Text.WritingMode>);
  }
}

ValueMetadata *type metadata accessor for WritingModeKey()
{
  return &type metadata for WritingModeKey;
}

uint64_t NSTextHorizontalAlignment.init(_:layoutDirection:writingMode:)(char a1, _BYTE *a2, _BYTE *a3)
{
  if ((*a3 & 1) != 0)
    return qword_2352A8FA8[a1];
  if (a1)
  {
    if (a1 == 1)
      return 4;
    if ((*a2 & 1) != 0)
      return 2;
  }
  else if ((*a2 & 1) == 0)
  {
    return 2;
  }
  return 3;
}

uint64_t EnvironmentValues.avoidsOrphans.getter()
{
  return EnvironmentValues.avoidsOrphans.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

double EnvironmentValues.bodyHeadOutdent.getter()
{
  return EnvironmentValues.bodyHeadOutdent.getter(specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

NSWritingDirection __swiftcall NSWritingDirection.init(_:)(SwiftUI::LayoutDirection a1)
{
  return (unint64_t)*(unsigned __int8 *)a1;
}

uint64_t EnvironmentValues.allowsTightening.getter()
{
  return EnvironmentValues.avoidsOrphans.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.avoidsOrphans.getter(uint64_t (*a1)(uint64_t), uint64_t (*a2)(uint64_t, uint64_t *))
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v3 = *v2;
  if (v2[1])
  {
    swift_retain_n();
    swift_retain_n();
    LOBYTE(a1) = a1(v3);
    swift_release_n();
    swift_release_n();
    return a1 & 1;
  }
  else
  {
    v7 = swift_retain_n();
    v8 = a2(v7, &v9);
    swift_release_n();
    return v8 & 1;
  }
}

uint64_t EnvironmentValues.truncationMode.getter@<X0>(char *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  int v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unsigned __int8 v11;

  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, (char *)&v11);
    swift_release_n();
    result = swift_release_n();
    v5 = v11;
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TruncationModeKey>, (uint64_t)&type metadata for TruncationModeKey, (uint64_t)&protocol witness table for TruncationModeKey);
    BloomFilter.init(hashValue:)(v6);
    v7 = swift_retain_n();
    v8 = specialized find1<A>(_:key:filter:)(v7, v10);
    if (v8)
      v5 = *(unsigned __int8 *)(v8 + 72);
    else
      v5 = 3;
    result = swift_release_n();
  }
  if (v5 == 3)
    v9 = 1;
  else
    v9 = v5;
  *a1 = v9;
  return result;
}

double EnvironmentValues.minimumScaleFactor.getter()
{
  return EnvironmentValues.bodyHeadOutdent.getter(specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

double EnvironmentValues.lineSpacing.getter()
{
  return EnvironmentValues.bodyHeadOutdent.getter(specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

double EnvironmentValues.lineHeightMultiple.getter()
{
  return EnvironmentValues.bodyHeadOutdent.getter(specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

double EnvironmentValues.maximumLineHeight.getter()
{
  return EnvironmentValues.bodyHeadOutdent.getter(specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

double EnvironmentValues.minimumLineHeight.getter()
{
  return EnvironmentValues.bodyHeadOutdent.getter(specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

double EnvironmentValues.hyphenationFactor.getter()
{
  return EnvironmentValues.bodyHeadOutdent.getter(specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.multilineTextAlignment.getter()
{
  uint64_t *v0;
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;

  v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
  }
  else
  {
    v3 = swift_retain_n();
    v2 = specialized closure #1 in PropertyList.subscript.getter(v3);
  }
  swift_release_n();
  if (v2 == 3)
    return 0;
  else
    return v2;
}

uint64_t EnvironmentValues.truncationMode.setter(unsigned __int8 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;

  v2 = *v1;
  v3 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v3);
  swift_release();
  if (v1[1])
  {
    v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v2, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t EnvironmentValues.multilineTextAlignment.setter(unsigned __int8 a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  swift_release();
  if (v1[1])
  {
    v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t EnvironmentValues.minimumScaleFactor.setter(double a1)
{
  uint64_t *v1;
  double v3;
  uint64_t v4;
  uint64_t v5;

  if (a1 <= 1.0 && a1 > 0.0)
    v3 = a1;
  else
    v3 = 1.0;
  v4 = *v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v3);
  swift_release();
  if (v1[1])
  {
    v5 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t EnvironmentValues.lineSpacing.setter(double a1)
{
  return EnvironmentValues.lineSpacing.setter((void (*)(uint64_t *, uint64_t *, double))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:), a1);
}

uint64_t EnvironmentValues.lineHeightMultiple.setter(double a1)
{
  return EnvironmentValues.lineSpacing.setter((void (*)(uint64_t *, uint64_t *, double))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:), a1);
}

uint64_t EnvironmentValues.maximumLineHeight.setter(double a1)
{
  return EnvironmentValues.lineSpacing.setter((void (*)(uint64_t *, uint64_t *, double))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:), a1);
}

uint64_t EnvironmentValues.minimumLineHeight.setter(double a1)
{
  return EnvironmentValues.lineSpacing.setter((void (*)(uint64_t *, uint64_t *, double))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:), a1);
}

uint64_t EnvironmentValues.hyphenationFactor.setter(double a1)
{
  return EnvironmentValues.lineSpacing.setter((void (*)(uint64_t *, uint64_t *, double))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:), a1);
}

BOOL static Text.TruncationMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t String.caseConvertedIfNeeded(_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  type metadata accessor for Locale?(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a1;
  if (!a1[1])
  {
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextCaseKey>, (uint64_t)&type metadata for TextCaseKey, (uint64_t)&protocol witness table for TextCaseKey);
    BloomFilter.init(hashValue:)(v11);
    v12 = v20;
    v10 = 2;
    v13 = swift_retain_n();
    v14 = specialized find1<A>(_:key:filter:)(v13, v12);
    if (v14)
      v10 = *(unsigned __int8 *)(v14 + 72);
    v22 = v10;
    swift_release_n();
    if (v10 != 2)
    {
      v15 = swift_retain_n();
      specialized closure #1 in PropertyList.subscript.getter(v15, (uint64_t)v8);
      goto LABEL_9;
    }
LABEL_7:
    swift_bridgeObjectRetain();
    return a2;
  }
  swift_retain_n();
  swift_retain_n();
  specialized PropertyList.Tracker.value<A>(_:for:)(v9, &v22);
  swift_release_n();
  swift_release_n();
  LOBYTE(v10) = v22;
  if (v22 == 2)
    goto LABEL_7;
  swift_retain_n();
  swift_retain_n();
  specialized PropertyList.Tracker.value<A>(_:for:)(v9, (uint64_t)v8);
LABEL_9:
  swift_release_n();
  swift_release_n();
  v16 = type metadata accessor for Locale();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v8, 0, 1, v16);
  v20 = a2;
  v21 = a3;
  lazy protocol witness table accessor for type String and conformance String();
  if ((v10 & 1) != 0)
    v17 = StringProtocol.lowercased(with:)();
  else
    v17 = StringProtocol.uppercased(with:)();
  a2 = v17;
  outlined destroy of Locale?((uint64_t)v8);
  return a2;
}

uint64_t NSTextHorizontalAlignment.init(in:)(uint64_t *a1)
{
  uint64_t v1;
  unsigned __int8 v2;
  char v3;
  int v4;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  char v16;

  v1 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release();
    swift_release();
    if (v2 == 3)
      v2 = 0;
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v1, &v16);
    swift_release_n();
    swift_release_n();
    v3 = v16;
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v1, &v15);
    swift_release_n();
    swift_release_n();
    if ((v15 & 1) == 0)
    {
LABEL_5:
      v4 = v2;
      if (v2)
        goto LABEL_6;
LABEL_20:
      if ((v3 & 1) == 0)
        return 2;
      return 3;
    }
    return qword_2352A8FA8[(char)v2];
  }
  v6 = swift_retain_n();
  v7 = specialized closure #1 in PropertyList.subscript.getter(v6);
  swift_release_n();
  if (v7 == 3)
    v2 = 0;
  else
    v2 = v7;
  v8 = swift_retain_n();
  v9 = specialized find<A>(_:key:)(v8);
  if (v9)
    v3 = *(_BYTE *)(v9 + 72);
  else
    v3 = 0;
  swift_release_n();
  type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<WritingModeKey>, (uint64_t)&type metadata for WritingModeKey, (uint64_t)&protocol witness table for WritingModeKey);
  BloomFilter.init(hashValue:)(v10);
  v11 = swift_retain_n();
  v12 = specialized find1<A>(_:key:filter:)(v11, v14);
  if (v12)
  {
    v13 = *(_BYTE *)(v12 + 72);
    swift_release_n();
    if ((v13 & 1) == 0)
      goto LABEL_5;
    return qword_2352A8FA8[(char)v2];
  }
  swift_release_n();
  v4 = v2;
  if (!v2)
    goto LABEL_20;
LABEL_6:
  if (v4 == 1)
    return 4;
  if ((v3 & 1) != 0)
    return 2;
  return 3;
}

void Text.TruncationMode.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int Text.TruncationMode.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t Text.TruncationMode.protobufValue.getter()
{
  unsigned __int8 *v0;

  return *v0 + 1;
}

unint64_t Text.TruncationMode.init(protobufValue:)@<X0>(unint64_t result@<X0>, _BYTE *a2@<X8>)
{
  unsigned int v2;

  v2 = 0x2010003u >> (8 * result);
  if (result >= 4)
    LOBYTE(v2) = 3;
  *a2 = v2;
  return result;
}

uint64_t protocol witness for ProtobufEnum.protobufValue.getter in conformance Text.TruncationMode()
{
  unsigned __int8 *v0;

  return *v0 + 1;
}

_BYTE *CodableTextCase.init(_:)@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void CodableTextCase.textCase.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

BOOL static CodableTextCase.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void CodableTextCase.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CodableTextCase.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x7361637265776F6CLL;
  else
    return 0x7361637265707075;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CodableTextCase.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized CodableTextCase.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableTextCase.CodingKeys()
{
  lazy protocol witness table accessor for type CodableTextCase.CodingKeys and conformance CodableTextCase.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableTextCase.CodingKeys()
{
  lazy protocol witness table accessor for type CodableTextCase.CodingKeys and conformance CodableTextCase.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableTextCase.LowercaseCodingKeys()
{
  lazy protocol witness table accessor for type CodableTextCase.LowercaseCodingKeys and conformance CodableTextCase.LowercaseCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableTextCase.LowercaseCodingKeys()
{
  lazy protocol witness table accessor for type CodableTextCase.LowercaseCodingKeys and conformance CodableTextCase.LowercaseCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableTextCase.UppercaseCodingKeys()
{
  lazy protocol witness table accessor for type CodableTextCase.UppercaseCodingKeys and conformance CodableTextCase.UppercaseCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableTextCase.UppercaseCodingKeys()
{
  lazy protocol witness table accessor for type CodableTextCase.UppercaseCodingKeys and conformance CodableTextCase.UppercaseCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t CodableTextCase.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  char *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;

  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520];
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<CodableTextCase.LowercaseCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableTextCase.LowercaseCodingKeys and conformance CodableTextCase.LowercaseCodingKeys, (uint64_t)&unk_25061D2F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v20 = *(_QWORD *)(v4 - 8);
  v21 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v19 = (char *)&v16 - v5;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<CodableTextCase.UppercaseCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableTextCase.UppercaseCodingKeys and conformance CodableTextCase.UppercaseCodingKeys, (uint64_t)&unk_25061D318, v3);
  v17 = *(_QWORD *)(v6 - 8);
  v18 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v16 - v7;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<CodableTextCase.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableTextCase.CodingKeys and conformance CodableTextCase.CodingKeys, (uint64_t)&unk_25061D268, v3);
  v10 = v9;
  v22 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v16 - v11;
  v13 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableTextCase.CodingKeys and conformance CodableTextCase.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((v13 & 1) != 0)
  {
    v24 = 1;
    lazy protocol witness table accessor for type CodableTextCase.LowercaseCodingKeys and conformance CodableTextCase.LowercaseCodingKeys();
    v14 = v19;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v14, v21);
  }
  else
  {
    v23 = 0;
    lazy protocol witness table accessor for type CodableTextCase.UppercaseCodingKeys and conformance CodableTextCase.UppercaseCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v8, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v12, v10);
}

uint64_t CodableTextCase.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  _BYTE *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _BYTE *v34;
  uint64_t v35;
  char v36;
  char v37;

  v34 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0];
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodableTextCase.LowercaseCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableTextCase.LowercaseCodingKeys and conformance CodableTextCase.LowercaseCodingKeys, (uint64_t)&unk_25061D2F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v32 = v4;
  v29 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v33 = (char *)&v28 - v5;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodableTextCase.UppercaseCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableTextCase.UppercaseCodingKeys and conformance CodableTextCase.UppercaseCodingKeys, (uint64_t)&unk_25061D318, v3);
  v30 = *(_QWORD *)(v6 - 8);
  v31 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v28 - v7;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodableTextCase.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableTextCase.CodingKeys and conformance CodableTextCase.CodingKeys, (uint64_t)&unk_25061D268, v3);
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v28 - v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableTextCase.CodingKeys and conformance CodableTextCase.CodingKeys();
  v14 = v35;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14)
    goto LABEL_6;
  v35 = v11;
  v15 = v33;
  v16 = v34;
  v28 = a1;
  v17 = v13;
  v18 = KeyedDecodingContainer.allKeys.getter();
  v19 = v10;
  if (*(_QWORD *)(v18 + 16) != 1)
  {
    v22 = type metadata accessor for DecodingError();
    swift_allocError();
    v24 = v23;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v24 = &type metadata for CodableTextCase;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v24, *MEMORY[0x24BEE26D0], v22);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v13, v10);
    a1 = v28;
LABEL_6:
    v25 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v25);
  }
  v20 = *(_BYTE *)(v18 + 32);
  if ((v20 & 1) != 0)
  {
    v37 = 1;
    lazy protocol witness table accessor for type CodableTextCase.LowercaseCodingKeys and conformance CodableTextCase.LowercaseCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v21 = v35;
    (*(void (**)(char *, uint64_t))(v29 + 8))(v15, v32);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v17, v19);
  }
  else
  {
    v36 = 0;
    lazy protocol witness table accessor for type CodableTextCase.UppercaseCodingKeys and conformance CodableTextCase.UppercaseCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v27 = v35;
    (*(void (**)(char *, uint64_t))(v30 + 8))(v8, v31);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v19);
  }
  *v16 = v20;
  v25 = (uint64_t)v28;
  return __swift_destroy_boxed_opaque_existential_1(v25);
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableTextCase@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return CodableTextCase.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableTextCase(_QWORD *a1)
{
  return CodableTextCase.encode(to:)(a1);
}

_BYTE *static Text.Case.unwrap(codingProxy:)@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void (*EnvironmentValues.multilineTextAlignment.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    v6 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[4] = 0;
  if (v5 == 3)
    v7 = 0;
  else
    v7 = v5;
  *((_BYTE *)v3 + 40) = v7;
  return EnvironmentValues.multilineTextAlignment.modify;
}

void EnvironmentValues.multilineTextAlignment.modify(uint64_t a1)
{
  _QWORD **v1;
  unsigned __int8 v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD ***)a1;
  v2 = *(_BYTE *)(*(_QWORD *)a1 + 40);
  v3 = *(uint64_t **)(*(_QWORD *)a1 + 24);
  v4 = *v3;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v3, v2);
  swift_release();
  if (v3[1])
  {
    v5 = *v1[3];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }
  swift_release();
  free(v1);
}

uint64_t EnvironmentValues.explicitTruncationMode.getter()
{
  return EnvironmentValues.underlineStyle.getter((void (*)(uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.explicitTruncationMode.setter(unsigned __int8 *a1)
{
  return EnvironmentValues.explicitTruncationMode.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t (*EnvironmentValues.truncationMode.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  EnvironmentValues.truncationMode.getter((char *)(a1 + 24));
  return EnvironmentValues.truncationMode.modify;
}

uint64_t EnvironmentValues.truncationMode.modify(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_BYTE *)(a1 + 24);
  v3 = *(uint64_t **)(a1 + 16);
  v4 = *v3;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v3, v2);
  swift_release();
  if (v3[1])
  {
    v5 = **(_QWORD **)(a1 + 16);
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t (*EnvironmentValues.explicitTruncationMode.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  char *v2;
  uint64_t v3;
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v9;

  v2 = (char *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v1;
  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, v2);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TruncationModeKey>, (uint64_t)&type metadata for TruncationModeKey, (uint64_t)&protocol witness table for TruncationModeKey);
    BloomFilter.init(hashValue:)(v4);
    v5 = swift_retain_n();
    v6 = specialized find1<A>(_:key:filter:)(v5, v9);
    if (v6)
      v7 = *(_BYTE *)(v6 + 72);
    else
      v7 = 3;
    *v2 = v7;
  }
  swift_release_n();
  return EnvironmentValues.explicitTruncationMode.modify;
}

uint64_t EnvironmentValues.explicitTruncationMode.modify(uint64_t a1, char a2)
{
  return EnvironmentValues.explicitTruncationMode.modify(a1, a2, (void (*)(_QWORD *, uint64_t, uint64_t))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.defaultTextFieldTruncationMode.getter()
{
  return EnvironmentValues.underlineStyle.getter((void (*)(uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.defaultTextFieldTruncationMode.setter(unsigned __int8 *a1)
{
  return EnvironmentValues.explicitTruncationMode.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t (*EnvironmentValues.defaultTextFieldTruncationMode.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  char *v2;
  uint64_t v3;
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v9;

  v2 = (char *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v1;
  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, v2);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultTextFieldTruncationMode>, (uint64_t)&type metadata for DefaultTextFieldTruncationMode, (uint64_t)&protocol witness table for DefaultTextFieldTruncationMode);
    BloomFilter.init(hashValue:)(v4);
    v5 = swift_retain_n();
    v6 = specialized find1<A>(_:key:filter:)(v5, v9);
    if (v6)
      v7 = *(_BYTE *)(v6 + 72);
    else
      v7 = 3;
    *v2 = v7;
  }
  swift_release_n();
  return EnvironmentValues.defaultTextFieldTruncationMode.modify;
}

uint64_t EnvironmentValues.defaultTextFieldTruncationMode.modify(uint64_t a1, char a2)
{
  return EnvironmentValues.explicitTruncationMode.modify(a1, a2, (void (*)(_QWORD *, uint64_t, uint64_t))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void (*EnvironmentValues.lineSpacing.modify(double **a1))(double **a1, char a2)
{
  uint64_t *v1;
  double *v3;
  uint64_t v4;
  double v5;
  uint64_t v6;

  v3 = (double *)malloc(0x30uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 4) = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    v6 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[5] = 0.0;
  *v3 = v5;
  return EnvironmentValues.lineSpacing.modify;
}

void EnvironmentValues.lineSpacing.modify(double **a1, char a2)
{
  EnvironmentValues.lineSpacing.modify(a1, a2, (void (*)(uint64_t *, _QWORD **, double))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

double EnvironmentValues._lineHeightMultiple.getter()
{
  return EnvironmentValues.bodyHeadOutdent.getter(specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

double EnvironmentValues.bodyHeadOutdent.getter(double (*a1)(uint64_t), double (*a2)(uint64_t, uint64_t *))
{
  uint64_t *v2;
  uint64_t v3;
  double v5;
  uint64_t v7;
  uint64_t v9;

  v3 = *v2;
  if (v2[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = a1(v3);
    swift_release_n();
  }
  else
  {
    v7 = swift_retain_n();
    v5 = a2(v7, &v9);
  }
  swift_release_n();
  return v5;
}

uint64_t key path getter for EnvironmentValues._lineHeightMultiple : EnvironmentValues@<X0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  return key path getter for EnvironmentValues.lineSpacing : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t EnvironmentValues._lineHeightMultiple.setter(double a1)
{
  return EnvironmentValues.lineSpacing.setter((void (*)(uint64_t *, uint64_t *, double))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:), a1);
}

void (*EnvironmentValues._lineHeightMultiple.modify(double **a1))(double **a1, char a2)
{
  uint64_t *v1;
  double *v3;
  uint64_t v4;
  double v5;
  uint64_t v6;

  v3 = (double *)malloc(0x30uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 4) = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    v6 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[5] = 0.0;
  *v3 = v5;
  return EnvironmentValues._lineHeightMultiple.modify;
}

void EnvironmentValues._lineHeightMultiple.modify(double **a1, char a2)
{
  EnvironmentValues.lineSpacing.modify(a1, a2, (void (*)(uint64_t *, _QWORD **, double))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t key path setter for EnvironmentValues.lineHeightMultiple : EnvironmentValues(double *a1)
{
  return EnvironmentValues.lineHeightMultiple.setter(*a1);
}

void (*EnvironmentValues.lineHeightMultiple.modify(double **a1))(double **a1, char a2)
{
  uint64_t *v1;
  double *v3;
  uint64_t v4;
  double v5;
  uint64_t v6;

  v3 = (double *)malloc(0x30uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 4) = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    v6 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[5] = 0.0;
  *v3 = v5;
  return EnvironmentValues._lineHeightMultiple.modify;
}

uint64_t key path getter for EnvironmentValues.maximumLineHeight : EnvironmentValues@<X0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  return key path getter for EnvironmentValues.lineSpacing : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t key path setter for EnvironmentValues.maximumLineHeight : EnvironmentValues(double *a1)
{
  return EnvironmentValues.maximumLineHeight.setter(*a1);
}

void (*EnvironmentValues.maximumLineHeight.modify(double **a1))(double **a1, char a2)
{
  uint64_t *v1;
  double *v3;
  uint64_t v4;
  double v5;
  uint64_t v6;

  v3 = (double *)malloc(0x30uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 4) = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    v6 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[5] = 0.0;
  *v3 = v5;
  return EnvironmentValues.maximumLineHeight.modify;
}

void EnvironmentValues.maximumLineHeight.modify(double **a1, char a2)
{
  EnvironmentValues.lineSpacing.modify(a1, a2, (void (*)(uint64_t *, _QWORD **, double))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t key path getter for EnvironmentValues.minimumLineHeight : EnvironmentValues@<X0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  return key path getter for EnvironmentValues.lineSpacing : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t key path setter for EnvironmentValues.minimumLineHeight : EnvironmentValues(double *a1)
{
  return EnvironmentValues.minimumLineHeight.setter(*a1);
}

void (*EnvironmentValues.minimumLineHeight.modify(double **a1))(double **a1, char a2)
{
  uint64_t *v1;
  double *v3;
  uint64_t v4;
  double v5;
  uint64_t v6;

  v3 = (double *)malloc(0x30uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 4) = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    v6 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[5] = 0.0;
  *v3 = v5;
  return EnvironmentValues.minimumLineHeight.modify;
}

void EnvironmentValues.minimumLineHeight.modify(double **a1, char a2)
{
  EnvironmentValues.lineSpacing.modify(a1, a2, (void (*)(uint64_t *, _QWORD **, double))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t key path getter for EnvironmentValues.hyphenationFactor : EnvironmentValues@<X0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  return key path getter for EnvironmentValues.lineSpacing : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t key path setter for EnvironmentValues.hyphenationFactor : EnvironmentValues(double *a1)
{
  return EnvironmentValues.hyphenationFactor.setter(*a1);
}

void (*EnvironmentValues.hyphenationFactor.modify(double **a1))(double **a1, char a2)
{
  uint64_t *v1;
  double *v3;
  uint64_t v4;
  double v5;
  uint64_t v6;

  v3 = (double *)malloc(0x30uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 4) = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    v6 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[5] = 0.0;
  *v3 = v5;
  return EnvironmentValues.hyphenationFactor.modify;
}

void EnvironmentValues.hyphenationFactor.modify(double **a1, char a2)
{
  EnvironmentValues.lineSpacing.modify(a1, a2, (void (*)(uint64_t *, _QWORD **, double))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void EnvironmentValues.lineSpacing.modify(double **a1, char a2, void (*a3)(uint64_t *, _QWORD **, double), void (*a4)(uint64_t, uint64_t))
{
  double *v7;
  uint64_t *v8;
  double v9;
  uint64_t v10;
  _QWORD **v11;
  uint64_t v12;

  v7 = *a1;
  v8 = (uint64_t *)*((_QWORD *)*a1 + 4);
  v9 = **a1;
  v10 = *v8;
  swift_retain_n();
  if ((a2 & 1) != 0)
    v11 = (_QWORD **)(v7 + 2);
  else
    v11 = (_QWORD **)(v7 + 3);
  a3(v8, v11, v9);
  swift_release();
  if (v8[1])
  {
    v12 = **((_QWORD **)v7 + 4);
    swift_retain();
    swift_retain();
    a4(v10, v12);
    swift_release();
    swift_release();
  }
  swift_release();
  free(v7);
}

uint64_t EnvironmentValues.allowsTightening.setter(uint64_t a1)
{
  return EnvironmentValues.nearestScrollableAxes.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void (*EnvironmentValues.allowsTightening.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    v6 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[4] = 0;
  *((_BYTE *)v3 + 40) = v5 & 1;
  return EnvironmentValues.allowsTightening.modify;
}

void EnvironmentValues.allowsTightening.modify(uint64_t a1, char a2)
{
  EnvironmentValues.allowsTightening.modify(a1, a2, (void (*)(uint64_t *, uint64_t, _QWORD **))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t key path getter for EnvironmentValues.avoidsOrphans : EnvironmentValues@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return key path getter for EnvironmentValues.allowsTightening : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t key path setter for EnvironmentValues.avoidsOrphans : EnvironmentValues(unsigned __int8 *a1)
{
  return EnvironmentValues.avoidsOrphans.setter(*a1);
}

uint64_t EnvironmentValues.avoidsOrphans.setter(uint64_t a1)
{
  return EnvironmentValues.nearestScrollableAxes.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void (*EnvironmentValues.avoidsOrphans.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    v6 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v6, (uint64_t)v3);
  }
  swift_release_n();
  v3[4] = 0;
  *((_BYTE *)v3 + 40) = v5 & 1;
  return EnvironmentValues.avoidsOrphans.modify;
}

void EnvironmentValues.avoidsOrphans.modify(uint64_t a1, char a2)
{
  EnvironmentValues.allowsTightening.modify(a1, a2, (void (*)(uint64_t *, uint64_t, _QWORD **))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void EnvironmentValues.allowsTightening.modify(uint64_t a1, char a2, void (*a3)(uint64_t *, uint64_t, _QWORD **), void (*a4)(uint64_t, uint64_t))
{
  _QWORD **v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD **v11;
  uint64_t v12;

  v7 = *(_QWORD ***)a1;
  v8 = *(uint64_t **)(*(_QWORD *)a1 + 24);
  v9 = *(unsigned __int8 *)(*(_QWORD *)a1 + 40);
  v10 = *v8;
  swift_retain_n();
  if ((a2 & 1) != 0)
    v11 = v7 + 1;
  else
    v11 = v7 + 2;
  a3(v8, v9, v11);
  swift_release();
  if (v8[1])
  {
    v12 = *v7[3];
    swift_retain();
    swift_retain();
    a4(v10, v12);
    swift_release();
    swift_release();
  }
  swift_release();
  free(v7);
}

uint64_t (*EnvironmentValues.minimumScaleFactor.modify(double *a1))(double *a1)
{
  uint64_t *v1;
  uint64_t v3;
  double v4;
  uint64_t v5;

  *((_QWORD *)a1 + 2) = v1;
  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
  }
  else
  {
    v5 = swift_retain_n();
    v4 = specialized closure #1 in PropertyList.subscript.getter(v5);
  }
  swift_release_n();
  *a1 = v4;
  return EnvironmentValues.minimumScaleFactor.modify;
}

uint64_t EnvironmentValues.minimumScaleFactor.modify(double *a1)
{
  return EnvironmentValues.minimumScaleFactor.setter(*a1);
}

uint64_t EnvironmentValues.lineSpacing.setter(void (*a1)(uint64_t *, uint64_t *, double), void (*a2)(uint64_t, uint64_t), double a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v7 = *v3;
  swift_retain_n();
  a1(v3, &v10, a3);
  swift_release();
  if (v3[1])
  {
    v8 = *v3;
    swift_retain();
    swift_retain();
    a2(v7, v8);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t EnvironmentValues.textCase.getter()
{
  return EnvironmentValues.underlineStyle.getter((void (*)(uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t key path getter for EnvironmentValues.explicitTruncationMode : EnvironmentValues@<X0>(uint64_t *a1@<X0>, void (*a2)(uint64_t *__return_ptr, uint64_t)@<X3>, void (*a3)(uint64_t *__return_ptr, uint64_t, _BYTE *)@<X4>, _BYTE *a4@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[23];
  uint64_t v11;

  v5 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    a2(&v11, v5);
    swift_release_n();
  }
  else
  {
    v8 = swift_retain_n();
    a3(&v11, v8, v10);
  }
  result = swift_release_n();
  *a4 = v11;
  return result;
}

uint64_t EnvironmentValues.textCase.setter(unsigned __int8 *a1)
{
  return EnvironmentValues.explicitTruncationMode.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.explicitTruncationMode.setter(unsigned __int8 *a1, void (*a2)(uint64_t *, uint64_t, uint64_t *), void (*a3)(uint64_t, uint64_t))
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v6 = *v3;
  v7 = *a1;
  swift_retain_n();
  a2(v3, v7, &v10);
  swift_release();
  if (v3[1])
  {
    v8 = *v3;
    swift_retain();
    swift_retain();
    a3(v6, v8);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t (*EnvironmentValues.textCase.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  char *v2;
  uint64_t v3;
  Swift::Int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v2 = (char *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v1;
  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, v2);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextCaseKey>, (uint64_t)&type metadata for TextCaseKey, (uint64_t)&protocol witness table for TextCaseKey);
    BloomFilter.init(hashValue:)(v4);
    v5 = 2;
    v6 = swift_retain_n();
    v7 = specialized find1<A>(_:key:filter:)(v6, v9);
    if (v7)
      v5 = *(_BYTE *)(v7 + 72);
    *v2 = v5;
  }
  swift_release_n();
  return EnvironmentValues.textCase.modify;
}

uint64_t EnvironmentValues.textCase.modify(uint64_t a1, char a2)
{
  return EnvironmentValues.explicitTruncationMode.modify(a1, a2, (void (*)(_QWORD *, uint64_t, uint64_t))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.explicitTruncationMode.modify(uint64_t a1, char a2, void (*a3)(_QWORD *, uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t))
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8 = *(unsigned __int8 *)(a1 + 24);
  v9 = *(_QWORD **)(a1 + 16);
  v10 = *v9;
  swift_retain_n();
  if ((a2 & 1) != 0)
  {
    v11 = v9;
    v12 = v8;
    v13 = a1;
  }
  else
  {
    v13 = a1 + 8;
    v11 = v9;
    v12 = v8;
  }
  a3(v11, v12, v13);
  swift_release();
  if (v9[1])
  {
    v14 = **(_QWORD **)(a1 + 16);
    swift_retain();
    swift_retain();
    a4(v10, v14);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.multilineTextAlignment(_:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t *KeyPath;
  char v8;

  KeyPath = (uint64_t *)swift_getKeyPath();
  v8 = a1;
  View.environment<A>(_:_:)(KeyPath, (uint64_t)&v8, a2, a3);
  return swift_release();
}

uint64_t View.truncationMode(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return View.truncationMode(_:)(a1, a2, a3);
}

{
  uint64_t *KeyPath;

  KeyPath = (uint64_t *)swift_getKeyPath();
  View.environment<A>(_:_:)(KeyPath, a1, a2, a3);
  return swift_release();
}

uint64_t View.lineSpacing(_:)(uint64_t a1, uint64_t a2, double a3)
{
  return View.lineSpacing(_:)(a1, a2, a3);
}

{
  uint64_t *KeyPath;
  double v8;

  KeyPath = (uint64_t *)swift_getKeyPath();
  v8 = a3;
  View.environment<A>(_:_:)(KeyPath, (uint64_t)&v8, a1, a2);
  return swift_release();
}

uint64_t View._lineHeightMultiple(_:)(uint64_t a1, uint64_t a2, double a3)
{
  return View.lineSpacing(_:)(a1, a2, a3);
}

uint64_t View.lineHeightMultiple(_:)(uint64_t a1, uint64_t a2, double a3)
{
  return View.lineSpacing(_:)(a1, a2, a3);
}

uint64_t View.maximumLineHeight(_:)(uint64_t a1, uint64_t a2, double a3)
{
  return View.lineSpacing(_:)(a1, a2, a3);
}

uint64_t View.minimumLineHeight(_:)(uint64_t a1, uint64_t a2, double a3)
{
  return View.lineSpacing(_:)(a1, a2, a3);
}

uint64_t View.hyphenationFactor(_:)(uint64_t a1, uint64_t a2, double a3)
{
  return View.lineSpacing(_:)(a1, a2, a3);
}

uint64_t View.allowsTightening(_:)(char a1, uint64_t a2, uint64_t a3)
{
  return View.allowsTightening(_:)(a1, a2, a3);
}

{
  uint64_t *KeyPath;
  char v8;

  KeyPath = (uint64_t *)swift_getKeyPath();
  v8 = a1;
  View.environment<A>(_:_:)(KeyPath, (uint64_t)&v8, a2, a3);
  return swift_release();
}

uint64_t key path getter for EnvironmentValues.allowsTightening : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(uint64_t)@<X3>, uint64_t (*a3)(uint64_t, uint64_t *)@<X5>, _BYTE *a4@<X8>)
{
  uint64_t v5;
  char v7;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v5 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v7 = a2(v5);
    swift_release_n();
  }
  else
  {
    v9 = swift_retain_n();
    v7 = a3(v9, &v11);
  }
  result = swift_release_n();
  *a4 = v7 & 1;
  return result;
}

uint64_t View.avoidsOrphans(_:)(char a1, uint64_t a2, uint64_t a3)
{
  return View.allowsTightening(_:)(a1, a2, a3);
}

uint64_t View.minimumScaleFactor(_:)(uint64_t a1, uint64_t a2, double a3)
{
  return View.lineSpacing(_:)(a1, a2, a3);
}

uint64_t View.bodyHeadOutdent(_:)(uint64_t a1, uint64_t a2, double a3)
{
  return View.lineSpacing(_:)(a1, a2, a3);
}

uint64_t key path getter for EnvironmentValues.lineSpacing : EnvironmentValues@<X0>(uint64_t *a1@<X0>, double (*a2)(uint64_t)@<X3>, double (*a3)(uint64_t, uint64_t *)@<X5>, double *a4@<X8>)
{
  uint64_t v5;
  double v7;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v5 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v7 = a2(v5);
    swift_release_n();
  }
  else
  {
    v9 = swift_retain_n();
    v7 = a3(v9, &v11);
  }
  result = swift_release_n();
  *a4 = v7;
  return result;
}

uint64_t View.textCase(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return View.truncationMode(_:)(a1, a2, a3);
}

uint64_t key path getter for EnvironmentValues.textCase : EnvironmentValues, serialized@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a2);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a2);
  }
  return swift_release_n();
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance LineSpacingKey@<D0>(_QWORD *a1@<X8>)
{
  return protocol witness for static EnvironmentKey.defaultValue.getter in conformance LineSpacingKey(&one-time initialization token for defaultValue, (double *)&static LineSpacingKey.defaultValue, a1);
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance LineHeightMultipleKey@<D0>(_QWORD *a1@<X8>)
{
  return protocol witness for static EnvironmentKey.defaultValue.getter in conformance LineSpacingKey(&one-time initialization token for defaultValue, (double *)&static LineHeightMultipleKey.defaultValue, a1);
}

double static MaximumLineHeightKey.defaultValue.getter()
{
  return static MaximumLineHeightKey.defaultValue.getter(&one-time initialization token for defaultValue, (uint64_t)&static MaximumLineHeightKey.defaultValue);
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance MaximumLineHeightKey@<D0>(_QWORD *a1@<X8>)
{
  return protocol witness for static EnvironmentKey.defaultValue.getter in conformance LineSpacingKey(&one-time initialization token for defaultValue, (double *)&static MaximumLineHeightKey.defaultValue, a1);
}

double static MinimumLineHeightKey.defaultValue.getter()
{
  return static MaximumLineHeightKey.defaultValue.getter(&one-time initialization token for defaultValue, (uint64_t)&static MinimumLineHeightKey.defaultValue);
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance MinimumLineHeightKey@<D0>(_QWORD *a1@<X8>)
{
  return protocol witness for static EnvironmentKey.defaultValue.getter in conformance LineSpacingKey(&one-time initialization token for defaultValue, (double *)&static MinimumLineHeightKey.defaultValue, a1);
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance HyphenationFactorKey@<D0>(_QWORD *a1@<X8>)
{
  return protocol witness for static EnvironmentKey.defaultValue.getter in conformance LineSpacingKey(&one-time initialization token for defaultValue, (double *)&static HyphenationFactorKey.defaultValue, a1);
}

double static MinimumScaleFactorKey.defaultValue.getter()
{
  return static MaximumLineHeightKey.defaultValue.getter(&one-time initialization token for defaultValue, (uint64_t)&static MinimumScaleFactorKey.defaultValue);
}

double static MaximumLineHeightKey.defaultValue.getter(_QWORD *a1, uint64_t a2)
{
  if (*a1 != -1)
    swift_once();
  return *(double *)a2;
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance MinimumScaleFactorKey@<D0>(_QWORD *a1@<X8>)
{
  return protocol witness for static EnvironmentKey.defaultValue.getter in conformance LineSpacingKey(&one-time initialization token for defaultValue, (double *)&static MinimumScaleFactorKey.defaultValue, a1);
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance BodyHeadOutdentKey@<D0>(_QWORD *a1@<X8>)
{
  return protocol witness for static EnvironmentKey.defaultValue.getter in conformance LineSpacingKey(&one-time initialization token for defaultValue, (double *)&static BodyHeadOutdentKey.defaultValue, a1);
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance LineSpacingKey@<D0>(_QWORD *a1@<X2>, double *a2@<X3>, _QWORD *a3@<X8>)
{
  double result;

  if (*a1 != -1)
    swift_once();
  result = *a2;
  *a3 = *(_QWORD *)a2;
  return result;
}

uint64_t outlined destroy of Locale?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for Locale?(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type CodableTextCase.LowercaseCodingKeys and conformance CodableTextCase.LowercaseCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableTextCase.LowercaseCodingKeys and conformance CodableTextCase.LowercaseCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableTextCase.LowercaseCodingKeys and conformance CodableTextCase.LowercaseCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableTextCase.LowercaseCodingKeys, &unk_25061D2F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableTextCase.LowercaseCodingKeys and conformance CodableTextCase.LowercaseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableTextCase.LowercaseCodingKeys and conformance CodableTextCase.LowercaseCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableTextCase.LowercaseCodingKeys and conformance CodableTextCase.LowercaseCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableTextCase.LowercaseCodingKeys, &unk_25061D2F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableTextCase.LowercaseCodingKeys and conformance CodableTextCase.LowercaseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableTextCase.LowercaseCodingKeys and conformance CodableTextCase.LowercaseCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableTextCase.LowercaseCodingKeys and conformance CodableTextCase.LowercaseCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableTextCase.LowercaseCodingKeys, &unk_25061D2F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableTextCase.LowercaseCodingKeys and conformance CodableTextCase.LowercaseCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableTextCase.UppercaseCodingKeys and conformance CodableTextCase.UppercaseCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableTextCase.UppercaseCodingKeys and conformance CodableTextCase.UppercaseCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableTextCase.UppercaseCodingKeys and conformance CodableTextCase.UppercaseCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableTextCase.UppercaseCodingKeys, &unk_25061D318);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableTextCase.UppercaseCodingKeys and conformance CodableTextCase.UppercaseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableTextCase.UppercaseCodingKeys and conformance CodableTextCase.UppercaseCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableTextCase.UppercaseCodingKeys and conformance CodableTextCase.UppercaseCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableTextCase.UppercaseCodingKeys, &unk_25061D318);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableTextCase.UppercaseCodingKeys and conformance CodableTextCase.UppercaseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableTextCase.UppercaseCodingKeys and conformance CodableTextCase.UppercaseCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableTextCase.UppercaseCodingKeys and conformance CodableTextCase.UppercaseCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableTextCase.UppercaseCodingKeys, &unk_25061D318);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableTextCase.UppercaseCodingKeys and conformance CodableTextCase.UppercaseCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableTextCase.CodingKeys and conformance CodableTextCase.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableTextCase.CodingKeys and conformance CodableTextCase.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableTextCase.CodingKeys and conformance CodableTextCase.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableTextCase.CodingKeys, &unk_25061D268);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableTextCase.CodingKeys and conformance CodableTextCase.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableTextCase.CodingKeys and conformance CodableTextCase.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableTextCase.CodingKeys and conformance CodableTextCase.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableTextCase.CodingKeys, &unk_25061D268);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableTextCase.CodingKeys and conformance CodableTextCase.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableTextCase.CodingKeys and conformance CodableTextCase.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableTextCase.CodingKeys and conformance CodableTextCase.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableTextCase.CodingKeys, &unk_25061D268);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableTextCase.CodingKeys and conformance CodableTextCase.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableTextCase.CodingKeys and conformance CodableTextCase.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableTextCase.CodingKeys and conformance CodableTextCase.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableTextCase.CodingKeys, &unk_25061D268);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableTextCase.CodingKeys and conformance CodableTextCase.CodingKeys);
  }
  return result;
}

uint64_t sub_234E6F628@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_234E6F650(unsigned __int8 *a1)
{
  return EnvironmentValues.multilineTextAlignment.setter(*a1);
}

uint64_t sub_234E6F674@<X0>(char *a1@<X8>)
{
  return EnvironmentValues.truncationMode.getter(a1);
}

uint64_t sub_234E6F694(unsigned __int8 *a1)
{
  unsigned __int8 v2;

  v2 = *a1;
  return EnvironmentValues.truncationMode.setter(&v2);
}

uint64_t sub_234E6F6C8@<X0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  return key path getter for EnvironmentValues.lineSpacing : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_234E6F6F4(double *a1)
{
  return EnvironmentValues.lineHeightMultiple.setter(*a1);
}

uint64_t sub_234E6F720(double *a1)
{
  return EnvironmentValues.maximumLineHeight.setter(*a1);
}

uint64_t sub_234E6F748(double *a1)
{
  return EnvironmentValues.minimumLineHeight.setter(*a1);
}

uint64_t sub_234E6F770(double *a1)
{
  return EnvironmentValues.hyphenationFactor.setter(*a1);
}

uint64_t sub_234E6F794@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return key path getter for EnvironmentValues.allowsTightening : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_234E6F7BC(unsigned __int8 *a1)
{
  return EnvironmentValues.allowsTightening.setter(*a1);
}

uint64_t sub_234E6F7E4(unsigned __int8 *a1)
{
  return EnvironmentValues.avoidsOrphans.setter(*a1);
}

uint64_t sub_234E6F808@<X0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  return key path getter for EnvironmentValues.lineSpacing : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_234E6F830(double *a1)
{
  return EnvironmentValues.minimumScaleFactor.setter(*a1);
}

uint64_t sub_234E6F854@<X0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  return key path getter for EnvironmentValues.lineSpacing : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_234E6F87C(double *a1)
{
  return EnvironmentValues.lineSpacing.setter((void (*)(uint64_t *, uint64_t *, double))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:), *a1);
}

uint64_t sub_234E6F8B8(unsigned __int8 *a1)
{
  unsigned __int8 v2;

  v2 = *a1;
  return EnvironmentValues.textCase.setter(&v2);
}

unint64_t lazy protocol witness table accessor for type Text.TruncationMode and conformance Text.TruncationMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.TruncationMode and conformance Text.TruncationMode;
  if (!lazy protocol witness table cache variable for type Text.TruncationMode and conformance Text.TruncationMode)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.TruncationMode, &type metadata for Text.TruncationMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.TruncationMode and conformance Text.TruncationMode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Case and conformance Text.Case()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Case and conformance Text.Case;
  if (!lazy protocol witness table cache variable for type Text.Case and conformance Text.Case)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Case, &type metadata for Text.Case);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Case and conformance Text.Case);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableTextCase and conformance CodableTextCase()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableTextCase and conformance CodableTextCase;
  if (!lazy protocol witness table cache variable for type CodableTextCase and conformance CodableTextCase)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableTextCase, &type metadata for CodableTextCase);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableTextCase and conformance CodableTextCase);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableTextCase and conformance CodableTextCase;
  if (!lazy protocol witness table cache variable for type CodableTextCase and conformance CodableTextCase)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableTextCase, &type metadata for CodableTextCase);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableTextCase and conformance CodableTextCase);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableTextCase and conformance CodableTextCase;
  if (!lazy protocol witness table cache variable for type CodableTextCase and conformance CodableTextCase)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableTextCase, &type metadata for CodableTextCase);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableTextCase and conformance CodableTextCase);
  }
  return result;
}

uint64_t sub_234E6FA54@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_234E6FA8C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.truncationMode.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_234E6FACC(unsigned __int8 *a1)
{
  unsigned __int8 v2;

  v2 = *a1;
  return EnvironmentValues.truncationMode.setter(&v2);
}

uint64_t sub_234E6FB00@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return key path getter for EnvironmentValues.explicitTruncationMode : EnvironmentValues(a1, (void (*)(uint64_t *__return_ptr, uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t *__return_ptr, uint64_t, _BYTE *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_234E6FB24(unsigned __int8 *a1)
{
  unsigned __int8 v2;

  v2 = *a1;
  return EnvironmentValues.explicitTruncationMode.setter(&v2);
}

uint64_t sub_234E6FB58@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return key path getter for EnvironmentValues.explicitTruncationMode : EnvironmentValues(a1, (void (*)(uint64_t *__return_ptr, uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t *__return_ptr, uint64_t, _BYTE *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_234E6FB7C(unsigned __int8 *a1)
{
  unsigned __int8 v2;

  v2 = *a1;
  return EnvironmentValues.defaultTextFieldTruncationMode.setter(&v2);
}

uint64_t sub_234E6FBB0@<X0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  return key path getter for EnvironmentValues.lineSpacing : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_234E6FBD8(double *a1)
{
  return EnvironmentValues.lineSpacing.setter(*a1);
}

uint64_t sub_234E6FBFC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return key path getter for EnvironmentValues.allowsTightening : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_234E6FC24@<X0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  return key path getter for EnvironmentValues.lineSpacing : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_234E6FC4C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return key path getter for EnvironmentValues.explicitTruncationMode : EnvironmentValues(a1, (void (*)(uint64_t *__return_ptr, uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t *__return_ptr, uint64_t, _BYTE *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_234E6FC70(unsigned __int8 *a1)
{
  unsigned __int8 v2;

  v2 = *a1;
  return EnvironmentValues.textCase.setter(&v2);
}

uint64_t storeEnumTagSinglePayload for Text.TruncationMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_234E6FCF0 + 4 * byte_2352A86B5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_234E6FD24 + 4 * byte_2352A86B0[v4]))();
}

uint64_t sub_234E6FD24(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234E6FD2C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234E6FD34);
  return result;
}

uint64_t sub_234E6FD40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234E6FD48);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_234E6FD4C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234E6FD54(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Text.TruncationMode()
{
  return &type metadata for Text.TruncationMode;
}

ValueMetadata *type metadata accessor for Text.Case()
{
  return &type metadata for Text.Case;
}

ValueMetadata *type metadata accessor for CodableTextCase()
{
  return &type metadata for CodableTextCase;
}

ValueMetadata *type metadata accessor for MaximumLineHeightKey()
{
  return &type metadata for MaximumLineHeightKey;
}

ValueMetadata *type metadata accessor for MinimumLineHeightKey()
{
  return &type metadata for MinimumLineHeightKey;
}

ValueMetadata *type metadata accessor for MinimumScaleFactorKey()
{
  return &type metadata for MinimumScaleFactorKey;
}

uint64_t sub_234E6FDC4(uint64_t *a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA13TextAlignmentOGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextAlignment>, (uint64_t)&type metadata for TextAlignment);
}

uint64_t sub_234E6FDD8(uint64_t *a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA13TextAlignmentOGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Text.TruncationMode>, (uint64_t)&type metadata for Text.TruncationMode);
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA13TextAlignmentOGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(uint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v3 = *a1;
  v4 = a1[1];
  type metadata accessor for MutableBox<CachedEnvironment>(255, a2, a3, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier);
  v7 = type metadata accessor for ModifiedContent(255, v3, v5, v6);
  v9[0] = v4;
  v9[1] = &protocol witness table for _EnvironmentKeyWritingModifier<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v7, v9);
}

uint64_t sub_234E6FE50(uint64_t *a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA13TextAlignmentOGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat>, MEMORY[0x24BEE50B0]);
}

uint64_t sub_234E6FE64(uint64_t *a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA13TextAlignmentOGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x24BEE1328]);
}

uint64_t sub_234E6FE78(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v1 = *a1;
  v2 = a1[1];
  type metadata accessor for _EnvironmentKeyWritingModifier<Text.Case?>(255);
  v5 = type metadata accessor for ModifiedContent(255, v1, v3, v4);
  v7[0] = v2;
  v7[1] = &protocol witness table for _EnvironmentKeyWritingModifier<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v7);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Text.Case?>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Text.Case?>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for Text.Case?, (uint64_t)&type metadata for Text.Case, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v5 = type metadata accessor for _EnvironmentKeyWritingModifier(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Text.Case?>);
  }
}

ValueMetadata *type metadata accessor for DefaultTextFieldTruncationMode()
{
  return &type metadata for DefaultTextFieldTruncationMode;
}

uint64_t storeEnumTagSinglePayload for Text.Case(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_234E6FF9C + 4 * byte_2352A86BF[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_234E6FFD0 + 4 * byte_2352A86BA[v4]))();
}

uint64_t sub_234E6FFD0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234E6FFD8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234E6FFE0);
  return result;
}

uint64_t sub_234E6FFEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234E6FFF4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_234E6FFF8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234E70000(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for CodableTextCase.CodingKeys()
{
  return &unk_25061D268;
}

void *type metadata accessor for CodableTextCase.UppercaseCodingKeys()
{
  return &unk_25061D318;
}

void *type metadata accessor for CodableTextCase.LowercaseCodingKeys()
{
  return &unk_25061D2F8;
}

ValueMetadata *type metadata accessor for TextCaseKey()
{
  return &type metadata for TextCaseKey;
}

ValueMetadata *type metadata accessor for TruncationModeKey()
{
  return &type metadata for TruncationModeKey;
}

uint64_t specialized CodableTextCase.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7361637265707075 && a2 == 0xE900000000000065;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7361637265776F6CLL && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

ValueMetadata *type metadata accessor for HyphenationFactorKey()
{
  return &type metadata for HyphenationFactorKey;
}

ValueMetadata *type metadata accessor for LineHeightMultipleKey()
{
  return &type metadata for LineHeightMultipleKey;
}

ValueMetadata *type metadata accessor for LineSpacingKey()
{
  return &type metadata for LineSpacingKey;
}

ValueMetadata *type metadata accessor for TextAlignmentKey()
{
  return &type metadata for TextAlignmentKey;
}

ValueMetadata *type metadata accessor for AllowsTighteningKey()
{
  return &type metadata for AllowsTighteningKey;
}

ValueMetadata *type metadata accessor for AvoidsOrphansKey()
{
  return &type metadata for AvoidsOrphansKey;
}

ValueMetadata *type metadata accessor for BodyHeadOutdentKey()
{
  return &type metadata for BodyHeadOutdentKey;
}

uint64_t Image.init(_:scale:orientation:label:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, double a7)
{
  uint64_t v13;
  uint64_t result;

  v13 = a5 & 1;
  type metadata accessor for ImageProviderBox<Image.CGImageProvider>(0);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(double *)(result + 24) = a7;
  *(_BYTE *)(result + 32) = a2;
  *(_QWORD *)(result + 40) = a3;
  *(_QWORD *)(result + 48) = a4;
  *(_QWORD *)(result + 56) = v13;
  *(_QWORD *)(result + 64) = a6;
  *(_BYTE *)(result + 72) = 0;
  return result;
}

void type metadata accessor for ImageProviderBox<Image.CGImageProvider>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ImageProviderBox<Image.CGImageProvider>)
  {
    v2 = lazy protocol witness table accessor for type Image.CGImageProvider and conformance Image.CGImageProvider();
    v4 = type metadata accessor for ImageProviderBox(a1, (uint64_t)&unk_25064BAB0, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.CGImageProvider>);
  }
}

unint64_t lazy protocol witness table accessor for type Image.CGImageProvider and conformance Image.CGImageProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Image.CGImageProvider and conformance Image.CGImageProvider;
  if (!lazy protocol witness table cache variable for type Image.CGImageProvider and conformance Image.CGImageProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Image.CGImageProvider, &unk_25064BAB0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.CGImageProvider and conformance Image.CGImageProvider);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Image.CGImageProvider and conformance Image.CGImageProvider;
  if (!lazy protocol witness table cache variable for type Image.CGImageProvider and conformance Image.CGImageProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Image.CGImageProvider, &unk_25064BAB0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.CGImageProvider and conformance Image.CGImageProvider);
  }
  return result;
}

double Image.init(decorative:scale:orientation:)(uint64_t a1, char a2, double a3)
{
  uint64_t v6;
  double result;

  type metadata accessor for ImageProviderBox<Image.CGImageProvider>(0);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(double *)(v6 + 24) = a3;
  *(_BYTE *)(v6 + 32) = a2;
  result = 0.0;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_BYTE *)(v6 + 72) = 1;
  return result;
}

void Image.CGImageProvider.resolve(in:)(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  CGImage *v7;
  double Width;
  double Height;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  int v18;
  float v19;
  int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  unsigned __int8 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  double v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  __int128 v49;
  __int128 v50;
  int v51;

  v3 = v2;
  v5 = *(_QWORD *)v2;
  v6 = *(_QWORD *)(v2 + 8);
  v7 = (CGImage *)*(id *)v2;
  Width = (double)(uint64_t)CGImageGetWidth(v7);
  Height = (double)(uint64_t)CGImageGetHeight(v7);
  v10 = *(_BYTE *)(v2 + 16);
  v11 = *a1;
  v12 = a1[1];
  v40 = *a1;
  v41 = v12;
  LOBYTE(v37) = 2;
  v13 = EnvironmentValues.imageIsTemplate(renderingMode:)((unsigned __int8 *)&v37);
  v40 = v5;
  if ((v13 & 1) != 0)
    v14 = 0x3F8000003F800000;
  else
    v14 = 0;
  v15 = v13 ^ 1;
  LOBYTE(v41) = 0;
  v42 = v6;
  v43 = Width;
  v44 = Height;
  v45 = v10;
  v46 = v14;
  v47 = v14;
  v48 = (v13 ^ 1) & 1;
  v49 = 0u;
  v50 = 0u;
  v51 = 50397442;
  ImageResolutionContext.effectiveAllowedDynamicRange(for:)((uint64_t)&v40, (unsigned __int8 *)&v37);
  v34 = v37;
  if (!v12)
  {
    v40 = v11;
    v41 = 0;
    swift_retain();
    v25 = specialized static ShouldRedactContentKey.value(in:)(&v40, v22, v23, v24);
    swift_release();
    if ((v25 & 1) != 0)
      goto LABEL_6;
LABEL_10:
    v21 = 0;
    goto LABEL_11;
  }
  swift_retain_n();
  swift_retain_n();
  v16 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v11);
  swift_release_n();
  swift_release_n();
  if ((v16 & 1) == 0)
    goto LABEL_10;
LABEL_6:
  v5 = swift_allocObject();
  v17 = one-time initialization token for foreground;
  swift_retain();
  swift_retain();
  if (v17 != -1)
    swift_once();
  v40 = v11;
  v41 = v12;
  *(float *)(v5 + 16) = (*(float (**)(uint64_t *))(*(_QWORD *)static Color.foreground + 104))(&v40);
  *(_DWORD *)(v5 + 20) = v18;
  *(_DWORD *)(v5 + 24) = v20;
  *(float *)(v5 + 28) = v19 * 0.16;
  swift_release();
  swift_release();

  v21 = 4;
LABEL_11:
  v40 = v5;
  LOBYTE(v41) = v21;
  v42 = v6;
  v43 = Width;
  v44 = Height;
  v45 = v10;
  v46 = v14;
  v47 = v14;
  v48 = v15 & 1;
  v49 = 0u;
  v50 = 0u;
  LOWORD(v51) = 258;
  BYTE2(v51) = 1;
  HIBYTE(v51) = v34;
  v26 = *(_QWORD *)(v3 + 24);
  v27 = *(_QWORD *)(v3 + 32);
  v28 = *(_QWORD *)(v3 + 40);
  v29 = *(_QWORD *)(v3 + 48);
  v30 = v28 & 1;
  if (v29)
    v31 = *(_QWORD *)(v3 + 24);
  else
    v31 = 0;
  if (v29)
    v32 = *(_QWORD *)(v3 + 32);
  else
    v32 = 0;
  if (!v29)
    v30 = 0x1FFFFFFFELL;
  v33 = *(_BYTE *)(v3 + 56);
  *(_QWORD *)&v37 = v31;
  *((_QWORD *)&v37 + 1) = v32;
  v38 = v30;
  v39 = v29;
  v36 = 3;
  outlined copy of Text?(v26, v27, v28, v29);
  Image.Resolved.init(image:decorative:label:basePlatformItemImage:backgroundShape:backgroundCornerRadius:)(&v40, v33, &v37, 0, &v36, 0.0, 1, a2);
}

double CGImageRef.size.getter()
{
  CGImage *v0;
  double Width;

  Width = (double)(uint64_t)CGImageGetWidth(v0);
  CGImageGetHeight(v0);
  return Width;
}

void destroy for Image.CGImageProvider(uint64_t a1)
{

  if (*(_QWORD *)(a1 + 48))
  {
    outlined consume of Text.Storage(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
    swift_bridgeObjectRelease();
  }
}

uint64_t initializeWithCopy for Image.CGImageProvider(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;

  v4 = *(void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 48);
  v7 = v4;
  if (v6)
  {
    v8 = *(_QWORD *)(a2 + 24);
    v9 = *(_QWORD *)(a2 + 32);
    v10 = *(_BYTE *)(a2 + 40);
    outlined copy of Text.Storage(v8, v9, v10);
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = v9;
    *(_BYTE *)(a1 + 40) = v10;
    *(_QWORD *)(a1 + 48) = v6;
    swift_bridgeObjectRetain();
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v11;
  }
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t assignWithCopy for Image.CGImageProvider(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  __int128 v20;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = (_OWORD *)(a1 + 24);
  v8 = (_OWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a1 + 48))
  {
    if (v9)
    {
      v10 = *(_QWORD *)(a2 + 24);
      v11 = *(_QWORD *)(a2 + 32);
      v12 = *(_BYTE *)(a2 + 40);
      outlined copy of Text.Storage(v10, v11, v12);
      v13 = *(_QWORD *)(a1 + 24);
      v14 = *(_QWORD *)(a1 + 32);
      v15 = *(_BYTE *)(a1 + 40);
      *(_QWORD *)(a1 + 24) = v10;
      *(_QWORD *)(a1 + 32) = v11;
      *(_BYTE *)(a1 + 40) = v12;
      outlined consume of Text.Storage(v13, v14, v15);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 24);
      v19 = *(_OWORD *)(a2 + 40);
      *v7 = *v8;
      *(_OWORD *)(a1 + 40) = v19;
    }
  }
  else if (v9)
  {
    v16 = *(_QWORD *)(a2 + 24);
    v17 = *(_QWORD *)(a2 + 32);
    v18 = *(_BYTE *)(a2 + 40);
    outlined copy of Text.Storage(v16, v17, v18);
    *(_QWORD *)(a1 + 24) = v16;
    *(_QWORD *)(a1 + 32) = v17;
    *(_BYTE *)(a1 + 40) = v18;
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    swift_bridgeObjectRetain();
  }
  else
  {
    v20 = *(_OWORD *)(a2 + 40);
    *v7 = *v8;
    *(_OWORD *)(a1 + 40) = v20;
  }
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for Image.CGImageProvider(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_5;
  v5 = *(_QWORD *)(a2 + 48);
  if (!v5)
  {
    outlined destroy of Text(a1 + 24);
LABEL_5:
    v10 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v10;
    goto LABEL_6;
  }
  v6 = *(_BYTE *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_BYTE *)(a1 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = v6;
  outlined consume of Text.Storage(v7, v8, v9);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
LABEL_6:
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

void *type metadata accessor for Image.CGImageProvider()
{
  return &unk_25064BAB0;
}

void protocol witness for ImageProvider.resolve(in:) in conformance Image.CGImageProvider(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  Image.CGImageProvider.resolve(in:)(a1, a2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Image.CGImageProvider(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  _OWORD v6[2];
  _OWORD v7[2];
  _OWORD v8[2];

  v2 = a1[1];
  v5[0] = *a1;
  v5[1] = v2;
  v6[0] = a1[2];
  *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)((char *)a1 + 41);
  v3 = a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  v8[0] = a2[2];
  *(_OWORD *)((char *)v8 + 9) = *(_OWORD *)((char *)a2 + 41);
  return specialized static Image.CGImageProvider.== infix(_:_:)((uint64_t)v5, (uint64_t)v7) & 1;
}

unint64_t instantiation function for generic protocol witness table for Image.CGImageProvider(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Image.CGImageProvider and conformance Image.CGImageProvider();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

CGColorSpaceRef one-time initialization function for sRGB()
{
  CGColorSpaceRef result;

  result = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x24BDBF318]);
  if (result)
    static CGImageRef.sRGB = (uint64_t)result;
  else
    __break(1u);
  return result;
}

uint64_t specialized static Image.CGImageProvider.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t (*v15)(uint64_t);
  char v16;
  char v17;

  if (*(_QWORD *)a1 != *(_QWORD *)a2
    || *(double *)(a1 + 8) != *(double *)(a2 + 8)
    || ((0x507030104060200uLL >> (8 * *(_BYTE *)(a1 + 16))) & 7) != ((0x507030104060200uLL >> (8 * *(_BYTE *)(a2 + 16))) & 7))
  {
    goto LABEL_2;
  }
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a2 + 48);
  if (!v6)
  {
    if (!v7)
      goto LABEL_21;
    goto LABEL_2;
  }
  if (!v7)
    goto LABEL_2;
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(_QWORD *)(a2 + 32);
  v13 = *(_QWORD *)(a2 + 40);
  if ((v10 & 1) != 0)
  {
    if ((v13 & 1) != 0)
    {
      v15 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 96);
      outlined copy of Text?(v8, v9, v10, v6);
      outlined copy of Text?(v8, v9, v10, v6);
      outlined copy of Text?(v11, v12, v13, v7);
      outlined copy of Text.Storage(v8, v9, 1);
      outlined copy of Text.Storage(v11, v12, 1);
      v16 = v15(v11);
      outlined consume of Text.Storage(v11, v12, 1);
      outlined consume of Text.Storage(v8, v9, 1);
      v14 = 1;
      goto LABEL_19;
    }
LABEL_14:
    outlined copy of Text?(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
    outlined copy of Text?(v8, v9, v10, v6);
    outlined copy of Text?(v11, v12, v13, v7);
    v14 = (v10 & 1) == 0;
LABEL_22:
    outlined consume of Text.Storage(v11, v12, v14);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(v8, v9, v10 & 1);
    swift_bridgeObjectRelease();
    outlined consume of Text?(v8, v9, v10, v6);
    goto LABEL_2;
  }
  if ((v13 & 1) != 0)
    goto LABEL_14;
  if (v8 == v11 && v9 == v12)
  {
    outlined copy of Text?(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
    outlined copy of Text?(v8, v9, v10, v6);
    outlined copy of Text?(v8, v9, v13, v7);
    goto LABEL_20;
  }
  v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
  outlined copy of Text?(v8, v9, v10, v6);
  outlined copy of Text?(v8, v9, v10, v6);
  outlined copy of Text?(v11, v12, v13, v7);
  v14 = 0;
LABEL_19:
  if ((v16 & 1) == 0)
    goto LABEL_22;
LABEL_20:
  v17 = specialized static Array<A>.== infix(_:_:)(v6, v7);
  outlined consume of Text.Storage(v11, v12, v13 & 1);
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(v8, v9, v10 & 1);
  swift_bridgeObjectRelease();
  outlined consume of Text?(v8, v9, v10, v6);
  if ((v17 & 1) != 0)
  {
LABEL_21:
    v2 = ((*(_BYTE *)(a1 + 56) & 1) == 0) ^ *(_BYTE *)(a2 + 56);
    return v2 & 1;
  }
LABEL_2:
  v2 = 0;
  return v2 & 1;
}

uint64_t sub_234E70F7C()
{
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for Text.Effect.Markers()
{
  return &type metadata for Text.Effect.Markers;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in Text.Effect.Markers()
{
  return lazy protocol witness table accessor for type IndexingIterator<Text.Effect.Markers> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type IndexingIterator<Text.Effect.Markers> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<Text.Effect.Markers>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE2C00], MEMORY[0x24BEE2C18]);
}

unint64_t lazy protocol witness table accessor for type Text.Effect.Markers and conformance Text.Effect.Markers()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.Markers and conformance Text.Effect.Markers;
  if (!lazy protocol witness table cache variable for type Text.Effect.Markers and conformance Text.Effect.Markers)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.Markers, &type metadata for Text.Effect.Markers);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.Markers and conformance Text.Effect.Markers);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.Markers and conformance Text.Effect.Markers;
  if (!lazy protocol witness table cache variable for type Text.Effect.Markers and conformance Text.Effect.Markers)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.Markers, &type metadata for Text.Effect.Markers);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.Markers and conformance Text.Effect.Markers);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.Markers and conformance Text.Effect.Markers;
  if (!lazy protocol witness table cache variable for type Text.Effect.Markers and conformance Text.Effect.Markers)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.Markers, &type metadata for Text.Effect.Markers);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.Markers and conformance Text.Effect.Markers);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.Markers and conformance Text.Effect.Markers;
  if (!lazy protocol witness table cache variable for type Text.Effect.Markers and conformance Text.Effect.Markers)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.Markers, &type metadata for Text.Effect.Markers);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.Markers and conformance Text.Effect.Markers);
  }
  return result;
}

uint64_t Text.Effect.Markers.layoutInfo(for:glyphOrigin:metrics:layoutAttributedString:)(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  CFIndex v15;
  CFIndex v16;
  CFIndex v17;
  int64_t v18;
  _BOOL4 v19;
  uint64_t v20;
  _BOOL4 v21;
  double *v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _OWORD *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _QWORD v41[2];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  __int128 v48;
  CFIndex v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BOOL4 v54;
  _BOOL4 v55;
  _OWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  CFIndex v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE v65[32];
  _BYTE v66[32];
  __int128 v67;
  __int128 v68;
  _OWORD v69[2];
  __int128 v70;
  __int128 v71;
  uint64_t v72;

  v51 = a3;
  v60 = a2;
  v72 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for Text.Effect.InteractionMetrics?();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for Text.Effect.InteractionMetrics();
  v58 = *(_QWORD *)(v59 - 8);
  MEMORY[0x24BDAC7A8](v59);
  v57 = (uint64_t)v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = *(_OWORD *)a1;
  v47 = *((unsigned __int8 *)a1 + 16);
  v10 = a1[4];
  v46 = *((_QWORD *)a1 + 3);
  v45 = *((_DWORD *)a1 + 10);
  v42 = MEMORY[0x24BEE4AF8];
  v64 = MEMORY[0x24BEE4AF8];
  v44 = *(_QWORD *)(a4 + 16);
  if (v44)
  {
    v43 = a4 + 32;
    v56 = v69;
    v41[1] = a4;
    swift_bridgeObjectRetain();
    v11 = 0;
    while (1)
    {
      v12 = v43 + 32 * v11;
      v13 = *(_QWORD *)v12;
      v14 = *(unsigned __int8 *)(v12 + 8);
      v15 = *(_QWORD *)(v12 + 16);
      v16 = *(_QWORD *)(v12 + 24);
      v67 = v48;
      LOBYTE(v68) = v47;
      *((_QWORD *)&v68 + 1) = v46;
      *(double *)v69 = v10;
      DWORD2(v69[0]) = v45;
      outlined copy of Text.Effect.Markers.MarkerType(v13, v14);
      v17 = Text.Layout.Line.xranges(range:)(v15, v16);
      v18 = *(_QWORD *)(v17 + 16);
      if (v18)
        break;
      swift_bridgeObjectRelease();
      outlined consume of Text.Effect.Markers.MarkerType(v13, v14);
      v32 = MEMORY[0x24BEE4AF8];
LABEL_3:
      ++v11;
      specialized Array.append<A>(contentsOf:)(v32);
      if (v11 == v44)
      {
        swift_bridgeObjectRelease();
        return v64;
      }
    }
    v50 = v11;
    v63 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18, 0);
    v53 = v16 - v15;
    v19 = __OFSUB__(v16, v15);
    v55 = v19;
    if (v16 == v15)
      v20 = 0;
    else
      v20 = -1;
    v52 = v16 + v20;
    v21 = __OFADD__(v16, v20);
    v54 = v21;
    v49 = v17;
    v22 = (double *)(v17 + 40);
    v61 = v16;
    while (1)
    {
      v23 = *(v22 - 1);
      v24 = *v22;
      outlined init with copy of Text.Effect.InteractionMetrics?(v60, (uint64_t)v8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v8, 1, v59) == 1)
      {
        outlined destroy of TypesettingConfiguration((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for Text.Effect.InteractionMetrics?);
        v25 = v23;
        v26 = v24;
        if ((v14 & 1) != 0)
        {
          v62 = 0.0;
          v26 = v24;
          v25 = v23;
          if (v55)
            goto LABEL_39;
          goto LABEL_23;
        }
      }
      else
      {
        outlined init with take of Text.Effect.InteractionMetrics((uint64_t)v8, v57);
        Text.Effect.InteractionMetrics.displacement(for:end:)(v15);
        if (v55)
        {
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
        }
        if (v54)
          goto LABEL_38;
        v25 = v23 + v27;
        v28 = v57;
        Text.Effect.InteractionMetrics.displacement(for:end:)(v52);
        v30 = v29;
        outlined destroy of TypesettingConfiguration(v28, (uint64_t (*)(_QWORD))type metadata accessor for Text.Effect.InteractionMetrics);
        v26 = v24 + v30;
        if (v14)
        {
          v62 = 0.0;
LABEL_23:
          if ((id)_NSTextCorrectionMarkerRenderingAdjustment(v51, v15, v53, (uint64_t)&v62))
          {
            _bridgeAnyObjectToAny(_:)();
            swift_unknownObjectRelease();
          }
          else
          {
            memset(v65, 0, sizeof(v65));
          }
          outlined init with take of Any?((uint64_t)v65, (uint64_t)v66);
          v31 = v10 + v62;
          goto LABEL_28;
        }
      }
      memset(v66, 0, sizeof(v66));
      v31 = v10;
LABEL_28:
      *(_QWORD *)&v67 = v13;
      BYTE8(v67) = v14;
      *(_QWORD *)&v68 = v15;
      *((_QWORD *)&v68 + 1) = v16;
      outlined init with take of Any?((uint64_t)v66, (uint64_t)v56);
      *(double *)&v70 = v26 - v25;
      *((double *)&v70 + 1) = v24 - v23;
      *(double *)&v71 = v25;
      *((double *)&v71 + 1) = v31;
      v32 = v63;
      outlined copy of Text.Effect.Markers.MarkerType(v13, v14);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v32 + 16) + 1, 1);
        v32 = v63;
      }
      v34 = *(_QWORD *)(v32 + 16);
      v33 = *(_QWORD *)(v32 + 24);
      if (v34 >= v33 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
        v32 = v63;
      }
      *(_QWORD *)(v32 + 16) = v34 + 1;
      v35 = (_OWORD *)(v32 + 96 * v34);
      v36 = v68;
      v35[2] = v67;
      v35[3] = v36;
      v37 = v69[0];
      v38 = v69[1];
      v39 = v71;
      v35[6] = v70;
      v35[7] = v39;
      v35[4] = v37;
      v35[5] = v38;
      v22 += 2;
      --v18;
      v16 = v61;
      if (!v18)
      {
        swift_bridgeObjectRelease();
        outlined consume of Text.Effect.Markers.MarkerType(v13, v14);
        v11 = v50;
        goto LABEL_3;
      }
    }
  }
  return v42;
}

double Text.Effect.MarkerLayoutInfo.rect(for:with:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD v9[3];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v13[6];
  _BYTE v14[80];
  double v15;

  v5 = Text.Effect.MarkerLayoutInfo.filter(by:)(a1, a2, a3);
  v6 = v5;
  v7 = *(_QWORD *)(v5 + 16);
  if (v7)
  {
    outlined init with copy of Text.Effect.MarkerLayoutInfo.Element(v5 + 32, (uint64_t)v14);
    outlined init with copy of Text.Effect.MarkerLayoutInfo.Element(v6 + 32 + 96 * v7 - 96, (uint64_t)v9);
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v10 + 1) == 1)
    {
      outlined destroy of Text.Effect.MarkerLayoutInfo.Element((uint64_t)v14);
      outlined destroy of NamedImage.Cache.WeakCatalog?((uint64_t)v9, &lazy cache variable for type metadata for Text.Effect.MarkerLayoutInfo.Element?);
    }
    else
    {
      v13[4] = v11;
      v13[5] = v12;
      v13[2] = v9[2];
      v13[3] = v10;
      v13[0] = v9[0];
      v13[1] = v9[1];
      a4 = v15;
      outlined destroy of Text.Effect.MarkerLayoutInfo.Element((uint64_t)v13);
      outlined destroy of Text.Effect.MarkerLayoutInfo.Element((uint64_t)v14);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return a4;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Text.Effect.Markers.Marker(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  result = specialized static Text.Effect.Markers.MarkerType.== infix(_:_:)(*(_QWORD *)a1, *(_BYTE *)(a1 + 8), *(_QWORD *)a2, *(_BYTE *)(a2 + 8));
  if ((result & 1) == 0)
    return 0;
  if (__OFSUB__(v5, v3))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 != v3)
    return 0;
  if (!__OFSUB__(v4, v2))
    return v4 == v2;
LABEL_9:
  __break(1u);
  return result;
}

uint64_t Dictionary<>.underlineStyle.getter(uint64_t a1)
{
  id v2;
  uint64_t v3;
  char v4;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = 0u;
    v8 = 0u;
    goto LABEL_10;
  }
  v2 = (id)*MEMORY[0x24BEBB440];
  v3 = specialized __RawDictionaryStorage.find<A>(_:)(v2);
  if ((v4 & 1) == 0)
  {
    v7 = 0u;
    v8 = 0u;

    goto LABEL_10;
  }
  outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v3, (uint64_t)&v7);

  if (!*((_QWORD *)&v8 + 1))
  {
LABEL_10:
    outlined destroy of NamedImage.Cache.WeakCatalog?((uint64_t)&v7, (unint64_t *)&lazy cache variable for type metadata for Any?);
    return 0;
  }
  if (swift_dynamicCast())
    return v6;
  else
    return 0;
}

uint64_t Dictionary<>.foregroundColor.getter(uint64_t a1, id *a2)
{
  id v3;
  uint64_t v4;
  char v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  if (!*(_QWORD *)(a1 + 16))
  {
    v8 = 0u;
    v9 = 0u;
    goto LABEL_9;
  }
  v3 = *a2;
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
  if ((v5 & 1) == 0)
  {
    v8 = 0u;
    v9 = 0u;

    goto LABEL_9;
  }
  outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)&v8);

  if (!*((_QWORD *)&v9 + 1))
  {
LABEL_9:
    outlined destroy of NamedImage.Cache.WeakCatalog?((uint64_t)&v8, (unint64_t *)&lazy cache variable for type metadata for Any?);
    return 0;
  }
  type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  if (swift_dynamicCast())
    return v7;
  else
    return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Text.Effect.Markers.MarkerType(uint64_t a1, uint64_t a2)
{
  return specialized static Text.Effect.Markers.MarkerType.== infix(_:_:)(*(_QWORD *)a1, *(_BYTE *)(a1 + 8), *(_QWORD *)a2, *(_BYTE *)(a2 + 8));
}

void closure #1 in Text.Effect.Markers.init(fragment:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  char *v5;
  uint64_t v6;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;

  if (!a1)
    return;
  v23 = a1;
  v10 = v23;
  v11 = NSTextRange.textRange.getter();
  if ((v13 & 1) != 0 || !a2 || !*(_QWORD *)(a2 + 16))
  {

    return;
  }
  v14 = -a3;
  if (__OFSUB__(0, a3))
  {
    __break(1u);
    goto LABEL_16;
  }
  v5 = &v11[-a3];
  if (__OFADD__(v11, v14))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = v12 - a3;
  if (__OFADD__(v12, v14))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v6 < (uint64_t)v5)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v10 = a5 + 2;
  swift_beginAccess();
  a5 = (_QWORD *)a5[2];
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v10 = a5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_19:
    a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a5[2] + 1, 1, a5);
    *v10 = a5;
  }
  v16 = a5[2];
  v17 = a5[3];
  v18 = v16 + 1;
  if (v16 >= v17 >> 1)
  {
    v20 = a5;
    v21 = a5[2];
    v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v16 + 1, 1, v20);
    v16 = v21;
    a5 = v22;
    *v10 = v22;
  }
  a5[2] = v18;
  v19 = &a5[4 * v16];
  v19[4] = a2;
  *((_BYTE *)v19 + 40) = 0;
  v19[6] = v5;
  v19[7] = v6;
  swift_endAccess();

}

void closure #2 in Text.Effect.Markers.init(fragment:)(int a1, int a2, _QWORD *a3, _BYTE *a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD **a8)
{
  _QWORD *v11;
  id v12;
  Class v13;
  NSDictionary v14;
  id v15;
  char *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;

  v11 = a3;
  v12 = objc_msgSend(objc_msgSend(a3, sel_endLocation), sel_compare_, a5);
  swift_unknownObjectRelease();
  if ((unint64_t)v12 + 1 > 1)
  {
    *a4 = 1;
    return;
  }
  v13 = (Class)objc_opt_self();
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
  v14.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v15 = -[objc_class textCorrectionMarkerTypeWithAttributes:](v13, sel_textCorrectionMarkerTypeWithAttributes_, v14.super.isa);

  if (v15 != (id)-1)
  {
    v16 = NSTextRange.textRange.getter();
    if ((v18 & 1) == 0)
    {
      v19 = -a6;
      if (__OFSUB__(0, a6))
      {
        __break(1u);
      }
      else
      {
        v13 = (Class)&v16[-a6];
        if (!__OFADD__(v16, v19))
        {
          v14.super.isa = (Class)(v17 - a6);
          if (!__OFADD__(v17, v19))
          {
            if ((uint64_t)v14.super.isa >= (uint64_t)v13)
            {
              swift_beginAccess();
              v11 = *a8;
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              *a8 = v11;
              if ((isUniquelyReferenced_nonNull_native & 1) != 0)
              {
LABEL_9:
                v22 = v11[2];
                v21 = v11[3];
                if (v22 >= v21 >> 1)
                {
                  v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v22 + 1, 1, v11);
                  *a8 = v11;
                }
                v11[2] = v22 + 1;
                v23 = &v11[4 * v22];
                v23[4] = v15;
                *((_BYTE *)v23 + 40) = 1;
                v23[6] = v13;
                v23[7] = v14.super.isa;
                swift_endAccess();
                return;
              }
LABEL_18:
              v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
              *a8 = v11;
              goto LABEL_9;
            }
LABEL_17:
            __break(1u);
            goto LABEL_18;
          }
LABEL_16:
          __break(1u);
          goto LABEL_17;
        }
      }
      __break(1u);
      goto LABEL_16;
    }
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Text.Effect.Markers(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

_BYTE *protocol witness for Collection.subscript.read in conformance Text.Effect.Markers(_BYTE *result, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char v5;
  __int128 v6;

  v3 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v3 < *(_QWORD *)(*(_QWORD *)v2 + 16))
  {
    v4 = *(_QWORD *)v2 + 32 * v3;
    v5 = *(_BYTE *)(v4 + 40);
    v6 = *(_OWORD *)(v4 + 48);
    *(_QWORD *)result = *(_QWORD *)(v4 + 32);
    result[8] = v5;
    *((_OWORD *)result + 1) = v6;
    return _ViewInputs.base.modify;
  }
  __break(1u);
  return result;
}

_QWORD *protocol witness for Sequence._copyToContiguousArray() in conformance Text.Effect.Markers()
{
  uint64_t *v0;
  _QWORD *v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance Text.Effect.Markers(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return specialized Sequence._copyContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in Text.Effect.Markers()
{
  return lazy protocol witness table accessor for type IndexingIterator<Text.Effect.Markers> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.Markers> and conformance Slice<A>, (unint64_t *)&lazy cache variable for type metadata for Slice<Text.Effect.Markers>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8], MEMORY[0x24BEE4238]);
}

uint64_t lazy protocol witness table accessor for type IndexingIterator<Text.Effect.Markers> and conformance IndexingIterator<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.Markers and conformance Text.Effect.Markers, (uint64_t)&type metadata for Text.Effect.Markers, a3);
    result = MEMORY[0x23B7C9C04](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in Text.Effect.Markers()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.Markers> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.Markers> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.Markers and conformance Text.Effect.Markers, MEMORY[0x24BEE4218]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in Text.Effect.Markers()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.Markers> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.Markers> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.Markers and conformance Text.Effect.Markers, MEMORY[0x24BEE4230]);
}

uint64_t lazy protocol witness table accessor for type Slice<Text.Effect.Markers> and conformance <> Slice<A>(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, (unint64_t *)&lazy cache variable for type metadata for Slice<Text.Effect.Markers>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.Markers and conformance Text.Effect.Markers, (uint64_t)&type metadata for Text.Effect.Markers, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x23B7C9C04](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t Text.Effect.MarkerLayoutInfo.filter(by:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t result;
  unint64_t v12;
  unint64_t v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v6 = MEMORY[0x24BEE4AF8];
  v27 = MEMORY[0x24BEE4AF8];
  v7 = *(_QWORD *)(a3 + 16);
  swift_bridgeObjectRetain();
  if (!v7)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    return v6;
  }
  v8 = a3 + 32;
  v9 = __OFSUB__(a2, a1);
  while (1)
  {
    result = outlined init with copy of Text.Effect.MarkerLayoutInfo.Element(v8, (uint64_t)&v21);
    if ((uint64_t)v22 >= a2 || *((_QWORD *)&v22 + 1) <= a1)
      goto LABEL_5;
    if (__OFSUB__(*((_QWORD *)&v22 + 1), (_QWORD)v22))
      break;
    if (*((_QWORD *)&v22 + 1) != (_QWORD)v22)
    {
      if (v9)
        goto LABEL_22;
      if (a2 != a1)
      {
        v17 = v23;
        v18 = v24;
        v19 = v25;
        v20 = v26;
        v15 = v21;
        v16 = v22;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16) + 1, 1);
        v6 = v27;
        v13 = *(_QWORD *)(v27 + 16);
        v12 = *(_QWORD *)(v27 + 24);
        if (v13 >= v12 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
          v6 = v27;
        }
        *(_QWORD *)(v6 + 16) = v13 + 1;
        v14 = (_OWORD *)(v6 + 96 * v13);
        v14[4] = v17;
        v14[5] = v18;
        v14[6] = v19;
        v14[7] = v20;
        v14[2] = v15;
        v14[3] = v16;
        goto LABEL_6;
      }
    }
LABEL_5:
    outlined destroy of Text.Effect.MarkerLayoutInfo.Element((uint64_t)&v21);
LABEL_6:
    v8 += 96;
    if (!--v7)
      goto LABEL_20;
  }
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance Text.Effect.MarkerLayoutInfo(uint64_t a1, _QWORD *a2))(_QWORD, _QWORD)
{
  uint64_t v2;
  uint64_t (*result)(_QWORD, _QWORD);

  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*a2 < *(_QWORD *)(*(_QWORD *)v2 + 16))
  {
    return _ViewInputs.base.modify;
  }
  __break(1u);
  return result;
}

_QWORD *protocol witness for Sequence._copyToContiguousArray() in conformance Text.Effect.MarkerLayoutInfo()
{
  uint64_t *v0;
  _QWORD *v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance Text.Effect.MarkerLayoutInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t specialized static Text.Effect.Markers.MarkerType.== infix(_:_:)(uint64_t a1, char a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t result;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  id *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;
  char v20;
  id *v21;
  uint64_t v22;
  id v23;
  char v24;
  id *v25;
  void *v26;
  void *v27;
  id v28;
  char v29;

  if ((a2 & 1) != 0)
    return a4 & (a1 == a3);
  if ((a4 & 1) != 0)
    return 0;
  outlined copy of Text.Effect.Markers.MarkerType(a1, 0);
  outlined copy of Text.Effect.Markers.MarkerType(a3, 0);
  specialized static Dictionary.Keys.== infix(_:_:)(a1, a3);
  v8 = v7;
  outlined consume of Text.Effect.Markers.MarkerType(a3, 0);
  outlined consume of Text.Effect.Markers.MarkerType(a1, 0);
  result = 0;
  if ((v8 & 1) == 0)
    return result;
  v9 = Dictionary<>.underlineStyle.getter(a1);
  v11 = v10;
  v12 = Dictionary<>.underlineStyle.getter(a3);
  if ((v11 & 1) != 0)
  {
    if ((v13 & 1) == 0)
      return 0;
  }
  else
  {
    v14 = v12;
    result = 0;
    if ((v13 & 1) != 0 || v9 != v14)
      return result;
  }
  v15 = (id *)MEMORY[0x24BEBB368];
  v16 = (void *)Dictionary<>.foregroundColor.getter(a1, MEMORY[0x24BEBB368]);
  v17 = Dictionary<>.foregroundColor.getter(a3, v15);
  v18 = (void *)v17;
  if (v16)
  {
    if (!v17)
      goto LABEL_25;
    type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    v19 = v16;
    v20 = static NSObject.== infix(_:_:)();

    if ((v20 & 1) == 0)
      return 0;
  }
  else if (v17)
  {
    goto LABEL_21;
  }
  v21 = (id *)MEMORY[0x24BEBB360];
  v16 = (void *)Dictionary<>.foregroundColor.getter(a1, MEMORY[0x24BEBB360]);
  v22 = Dictionary<>.foregroundColor.getter(a3, v21);
  v18 = (void *)v22;
  if (v16)
  {
    if (!v22)
      goto LABEL_25;
    type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    v23 = v16;
    v24 = static NSObject.== infix(_:_:)();

    if ((v24 & 1) == 0)
      return 0;
    goto LABEL_22;
  }
  if (v22)
  {
LABEL_21:

    return 0;
  }
LABEL_22:
  v25 = (id *)MEMORY[0x24BEBB438];
  v16 = (void *)Dictionary<>.foregroundColor.getter(a1, MEMORY[0x24BEBB438]);
  v26 = (void *)Dictionary<>.foregroundColor.getter(a3, v25);
  v27 = v26;
  if (v16)
  {
    if (v26)
    {
      type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
      v28 = v16;
      v29 = static NSObject.== infix(_:_:)();

      return v29 & 1;
    }
LABEL_25:

    return 0;
  }
  if (v26)
  {

    return 0;
  }
  return 1;
}

void type metadata accessor for Text.Effect.InteractionMetrics?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Text.Effect.InteractionMetrics?)
  {
    type metadata accessor for Text.Effect.InteractionMetrics();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Text.Effect.InteractionMetrics?);
  }
}

uint64_t outlined init with copy of Text.Effect.InteractionMetrics?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Text.Effect.InteractionMetrics?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of Text.Effect.InteractionMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Text.Effect.InteractionMetrics();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void specialized Text.Effect.Markers.init(fragment:)(void *a1)
{
  id v1;
  char **v2;
  id v3;
  char *v4;
  uint64_t v5;
  char v6;
  char v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;
  void *v14;
  id v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  _QWORD *v21;
  void *v22;
  id v23;
  id v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  char *v30;
  uint64_t aBlock;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  _QWORD *v36;

  if (a1)
  {
    v1 = a1;
    v2 = &selRef_bundleURL;
    v3 = objc_msgSend(v1, sel_rangeInElement);
    v4 = NSTextRange.textRange.getter();
    v29 = v5;
    v30 = v4;
    v7 = v6;

    if ((v7 & 1) != 0)
    {

      return;
    }
    v8 = objc_msgSend(v1, sel_rangeInElement);
    v9 = objc_msgSend(v8, sel_endLocation);

    v10 = swift_allocObject();
    *(_QWORD *)(v10 + 16) = MEMORY[0x24BEE4AF8];
    v11 = v10 + 16;
    v12 = objc_msgSend(v1, sel_textLayoutManager);
    v13 = (_QWORD *)&unk_235281000;
    if (!v12)
      goto LABEL_17;
    v14 = v12;
    v15 = objc_msgSend(v1, sel_textLineFragments);
    type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSTextLineFragment);
    v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v16 >> 62)
    {
      swift_bridgeObjectRetain();
      v17 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v17)
        goto LABEL_6;
    }
    else
    {
      v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v17)
      {
LABEL_6:
        v28 = v9;
        if (v17 < 1)
          goto LABEL_23;
        v18 = 0;
        do
        {
          if ((v16 & 0xC000000000000001) != 0)
            v19 = (id)MEMORY[0x23B7C6D9C](v18, v16);
          else
            v19 = *(id *)(v16 + 8 * v18 + 32);
          v20 = v19;
          ++v18;
          v21 = (_QWORD *)swift_allocObject();
          v21[2] = v30;
          v21[3] = v29;
          v21[4] = v10;
          v35 = partial apply for closure #1 in Text.Effect.Markers.init(fragment:);
          v36 = v21;
          aBlock = MEMORY[0x24BDAC760];
          v32 = 1107296256;
          v33 = thunk for @escaping @callee_guaranteed (@guaranteed NSTextRange?, @guaranteed [NSAttributedStringKey : Any]?) -> ();
          v34 = &block_descriptor_12_3;
          v22 = _Block_copy(&aBlock);
          swift_retain();
          swift_release();
          _NSMarkedTextAttributes(v14, v20, v22);
          _Block_release(v22);

        }
        while (v17 != v18);

        swift_bridgeObjectRelease();
        v9 = v28;
        v2 = &selRef_bundleURL;
        goto LABEL_16;
      }
    }

    swift_bridgeObjectRelease();
LABEL_16:
    v13 = &unk_235281000;
LABEL_17:
    v23 = objc_msgSend(v1, v2[137]);
    v24 = objc_msgSend(v23, sel_location);

    v25 = (_QWORD *)swift_allocObject();
    v25[2] = v9;
    v25[3] = v30;
    v25[4] = v29;
    v25[5] = v11;
    v26 = swift_allocObject();
    *(_QWORD *)(v26 + 16) = partial apply for closure #2 in Text.Effect.Markers.init(fragment:);
    *(_QWORD *)(v26 + 24) = v25;
    v35 = partial apply for thunk for @callee_guaranteed (@guaranteed RBDisplayList) -> ();
    v36 = (_QWORD *)v26;
    aBlock = MEMORY[0x24BDAC760];
    v32 = v13[174];
    v33 = thunk for @escaping @callee_guaranteed (@guaranteed NSTextLayoutManager, @guaranteed [NSAttributedStringKey : Any], @guaranteed NSTextRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
    v34 = &block_descriptor_19;
    v27 = _Block_copy(&aBlock);
    swift_unknownObjectRetain();
    swift_retain();
    swift_release();
    objc_msgSend(v1, sel_enumerateRenderingAttributesFromLocation_reverse_usingBlock_, v24, 0, v27);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    _Block_release(v27);
    LOBYTE(v27) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v27 & 1) == 0)
    {
      swift_beginAccess();
      if (*(_QWORD *)(*(_QWORD *)v11 + 16))
      {
        swift_bridgeObjectRetain();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
      }
      return;
    }
    __break(1u);
LABEL_23:
    __break(1u);
  }
}

uint64_t sub_234E72A00()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_234E72A24()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #2 in Text.Effect.Markers.init(fragment:)(int a1, int a2, _QWORD *a3, _BYTE *a4)
{
  uint64_t v4;

  closure #2 in Text.Effect.Markers.init(fragment:)(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), *(_QWORD ***)(v4 + 40));
}

uint64_t sub_234E72A54()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_19(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_19()
{
  return swift_release();
}

uint64_t sub_234E72A7C()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in Text.Effect.Markers.init(fragment:)(void *a1, uint64_t a2)
{
  uint64_t v2;

  closure #1 in Text.Effect.Markers.init(fragment:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD **)(v2 + 32));
}

uint64_t destroy for Text.Effect.MarkerLayoutInfo.Element(uint64_t a1)
{
  uint64_t result;

  result = outlined consume of Text.Effect.Markers.MarkerType(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  if (*(_QWORD *)(a1 + 56))
    return __swift_destroy_boxed_opaque_existential_1(a1 + 32);
  return result;
}

uint64_t initializeWithCopy for Text.Effect.MarkerLayoutInfo.Element(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Text.Effect.Markers.MarkerType(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v6 = (_OWORD *)(a1 + 32);
  v7 = (_OWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 56);
  if (v8)
  {
    *(_QWORD *)(a1 + 56) = v8;
    (**(void (***)(_OWORD *, _OWORD *))(v8 - 8))(v6, v7);
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 48);
    *v6 = *v7;
    *(_OWORD *)(a1 + 48) = v9;
  }
  v10 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v10;
  return a1;
}

uint64_t assignWithCopy for Text.Effect.MarkerLayoutInfo.Element(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  __int128 v9;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Text.Effect.Markers.MarkerType(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of Text.Effect.Markers.MarkerType(v6, v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 56);
  if (!*(_QWORD *)(a1 + 56))
  {
    if (v8)
    {
      *(_QWORD *)(a1 + 56) = v8;
      (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 32, a2 + 32);
      goto LABEL_8;
    }
LABEL_7:
    v9 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v9;
    goto LABEL_8;
  }
  if (!v8)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 32);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 32), (uint64_t *)(a2 + 32));
LABEL_8:
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  return a1;
}

uint64_t assignWithTake for Text.Effect.MarkerLayoutInfo.Element(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  __int128 v9;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of Text.Effect.Markers.MarkerType(v6, v7);
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  if (*(_QWORD *)(a1 + 56))
    __swift_destroy_boxed_opaque_existential_1(a1 + 32);
  v8 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 48) = v8;
  v9 = *((_OWORD *)a2 + 5);
  *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
  *(_OWORD *)(a1 + 80) = v9;
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.MarkerLayoutInfo.Element(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 96))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 56);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Text.Effect.MarkerLayoutInfo.Element(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 96) = 0;
    if (a2)
      *(_QWORD *)(result + 56) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.MarkerLayoutInfo.Element()
{
  return &type metadata for Text.Effect.MarkerLayoutInfo.Element;
}

uint64_t initializeWithCopy for Text.Effect.Markers.Marker(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Text.Effect.Markers.MarkerType(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

uint64_t assignWithCopy for Text.Effect.Markers.Marker(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Text.Effect.Markers.MarkerType(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of Text.Effect.Markers.MarkerType(v6, v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for Text.Effect.Markers.Marker(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of Text.Effect.Markers.MarkerType(v6, v7);
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.Markers.Marker(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Text.Effect.Markers.Marker(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.Markers.Marker()
{
  return &type metadata for Text.Effect.Markers.Marker;
}

uint64_t initializeBufferWithCopyOfBuffer for Text.Effect.Markers.MarkerType(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  outlined copy of Text.Effect.Markers.MarkerType(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for Text.Effect.Markers.MarkerType(uint64_t a1)
{
  return outlined consume of Text.Effect.Markers.MarkerType(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t assignWithCopy for Text.Effect.Markers.MarkerType(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  outlined copy of Text.Effect.Markers.MarkerType(*(_QWORD *)a2, v4);
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  outlined consume of Text.Effect.Markers.MarkerType(v5, v6);
  return a1;
}

uint64_t assignWithTake for Text.Effect.Markers.MarkerType(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  outlined consume of Text.Effect.Markers.MarkerType(v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for Text.Effect.Markers.MarkerType()
{
  return &type metadata for Text.Effect.Markers.MarkerType;
}

ValueMetadata *type metadata accessor for Text.Effect.MarkerLayoutInfo()
{
  return &type metadata for Text.Effect.MarkerLayoutInfo;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in Text.Effect.MarkerLayoutInfo()
{
  return lazy protocol witness table accessor for type IndexingIterator<Text.Effect.MarkerLayoutInfo> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type IndexingIterator<Text.Effect.MarkerLayoutInfo> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<Text.Effect.MarkerLayoutInfo>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE2C00], MEMORY[0x24BEE2C18]);
}

unint64_t lazy protocol witness table accessor for type Text.Effect.MarkerLayoutInfo and conformance Text.Effect.MarkerLayoutInfo()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.MarkerLayoutInfo and conformance Text.Effect.MarkerLayoutInfo;
  if (!lazy protocol witness table cache variable for type Text.Effect.MarkerLayoutInfo and conformance Text.Effect.MarkerLayoutInfo)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.MarkerLayoutInfo, &type metadata for Text.Effect.MarkerLayoutInfo);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.MarkerLayoutInfo and conformance Text.Effect.MarkerLayoutInfo);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.MarkerLayoutInfo and conformance Text.Effect.MarkerLayoutInfo;
  if (!lazy protocol witness table cache variable for type Text.Effect.MarkerLayoutInfo and conformance Text.Effect.MarkerLayoutInfo)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.MarkerLayoutInfo, &type metadata for Text.Effect.MarkerLayoutInfo);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.MarkerLayoutInfo and conformance Text.Effect.MarkerLayoutInfo);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.MarkerLayoutInfo and conformance Text.Effect.MarkerLayoutInfo;
  if (!lazy protocol witness table cache variable for type Text.Effect.MarkerLayoutInfo and conformance Text.Effect.MarkerLayoutInfo)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.MarkerLayoutInfo, &type metadata for Text.Effect.MarkerLayoutInfo);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.MarkerLayoutInfo and conformance Text.Effect.MarkerLayoutInfo);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.MarkerLayoutInfo and conformance Text.Effect.MarkerLayoutInfo;
  if (!lazy protocol witness table cache variable for type Text.Effect.MarkerLayoutInfo and conformance Text.Effect.MarkerLayoutInfo)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.MarkerLayoutInfo, &type metadata for Text.Effect.MarkerLayoutInfo);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.MarkerLayoutInfo and conformance Text.Effect.MarkerLayoutInfo);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in Text.Effect.MarkerLayoutInfo()
{
  return lazy protocol witness table accessor for type IndexingIterator<Text.Effect.MarkerLayoutInfo> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.MarkerLayoutInfo> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<Text.Effect.MarkerLayoutInfo>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8], MEMORY[0x24BEE4238]);
}

uint64_t lazy protocol witness table accessor for type IndexingIterator<Text.Effect.MarkerLayoutInfo> and conformance IndexingIterator<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.MarkerLayoutInfo and conformance Text.Effect.MarkerLayoutInfo, (uint64_t)&type metadata for Text.Effect.MarkerLayoutInfo, a3);
    result = MEMORY[0x23B7C9C04](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in Text.Effect.MarkerLayoutInfo()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.MarkerLayoutInfo> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.MarkerLayoutInfo> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.MarkerLayoutInfo and conformance Text.Effect.MarkerLayoutInfo, MEMORY[0x24BEE4218]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in Text.Effect.MarkerLayoutInfo()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.MarkerLayoutInfo> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.MarkerLayoutInfo> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.MarkerLayoutInfo and conformance Text.Effect.MarkerLayoutInfo, MEMORY[0x24BEE4230]);
}

uint64_t lazy protocol witness table accessor for type Slice<Text.Effect.MarkerLayoutInfo> and conformance <> Slice<A>(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Slice<Text.Effect.MarkerLayoutInfo>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.MarkerLayoutInfo and conformance Text.Effect.MarkerLayoutInfo, (uint64_t)&type metadata for Text.Effect.MarkerLayoutInfo, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x23B7C9C04](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _FillMaskEffect.style.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _FillMaskEffect.style.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_FillMaskEffect.style.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t static _FillMaskEffect._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  __int128 v20;
  __int128 v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  void (*v34)(uint64_t *__return_ptr, uint64_t, __int128 *);
  uint64_t v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t KeyPath;
  int v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  unsigned __int8 v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  int OffsetAttribute2;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  int *v65;
  __int128 v66;
  unsigned int v67;
  int *v68;
  int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  unsigned __int8 v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  int v91;
  unsigned int v92;
  uint64_t v93;
  int v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  __int128 v98;
  int v99;
  unint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  unsigned int v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t result;
  _QWORD *v109;
  void (*v110)(__int128 *, _QWORD);
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  _QWORD *v126;
  int *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  __int128 v132;
  void (*v133)(uint64_t *__return_ptr, uint64_t, __int128 *);
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  __int128 v137;
  char v138;
  uint64_t v139;
  uint64_t v140;
  _DWORD v141[6];
  __int128 v142;
  __int128 v143;
  __int128 v144;
  int v145;
  uint64_t v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  int v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  int v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  uint64_t v162;

  *(_QWORD *)&v123 = a6;
  *(_QWORD *)&v124 = a5;
  *(_QWORD *)&v132 = a4;
  v126 = a7;
  v162 = *MEMORY[0x24BDAC8D0];
  v122 = *a1;
  v9 = *(_OWORD *)(a2 + 48);
  v155 = *(_OWORD *)(a2 + 32);
  v156 = v9;
  v157 = *(_OWORD *)(a2 + 64);
  v158 = *(_DWORD *)(a2 + 80);
  v10 = *(_OWORD *)(a2 + 16);
  v153 = *(_OWORD *)a2;
  v154 = v10;
  v11 = v9;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, a2, a3, a4);
  v13 = v12;
  v14 = *(_QWORD *)(v11 + 16);
  v133 = (void (*)(uint64_t *__return_ptr, uint64_t, __int128 *))a3;
  v134 = v11;
  if (v14)
  {
    v15 = (uint64_t *)(v11 + 32);
    v16 = v14 - 1;
    do
    {
      v17 = *v15;
      v15 += 2;
      v18 = v17 == v12;
    }
    while (v17 != v12 && v16-- != 0);
  }
  else
  {
    v18 = 0;
  }
  v20 = *(_OWORD *)(a2 + 32);
  v21 = *(_OWORD *)a2;
  v160 = *(_OWORD *)(a2 + 16);
  v161 = v20;
  v159 = v21;
  v22 = v20;
  v23 = v160;
  v24 = *((_QWORD *)&v154 + 1);
  LODWORD(v128) = DWORD2(v153);
  LODWORD(v127) = v155;
  v135 = *((_QWORD *)&v155 + 1);
  v136 = v153;
  v25 = *((_QWORD *)&v156 + 1);
  LODWORD(v131) = DWORD1(v155);
  LODWORD(v130) = v157;
  v26 = *((_QWORD *)&v157 + 1);
  *(_QWORD *)&v137 = DWORD1(v157);
  LODWORD(v129) = v158;
  swift_beginAccess();
  LODWORD(v147) = *(_DWORD *)(v160 + 16);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  outlined retain of _ViewInputs((uint64_t)&v153);
  lazy protocol witness table accessor for type MaskDefaultForeground and conformance MaskDefaultForeground();
  v27 = Attribute.init<A>(body:value:flags:update:)();
  v28 = MEMORY[0x24BEE4AF8];
  v29 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
  v30 = swift_allocObject();
  *(_DWORD *)(v30 + 16) = v27;
  *(_QWORD *)(v30 + 24) = v28;
  *(_OWORD *)(v30 + 32) = 0u;
  *(_OWORD *)(v30 + 48) = 0u;
  *(_OWORD *)(v30 + 64) = 0u;
  *(_WORD *)(v30 + 80) = 256;
  *(_QWORD *)(v30 + 88) = v29;
  v31 = v30;
  v125 = v23;
  swift_release();
  if ((v22 & 0x20) != 0)
    v32 = (int)v127;
  else
    v32 = v22 | 0x20;
  v127 = (int *)(v23 + 16);
  if (!v18)
  {
    v34 = v133;
    v35 = v134;
    v36 = v136;
    goto LABEL_31;
  }
  swift_beginAccess();
  if ((BYTE4(v161) & 0x20) != 0)
  {
    v120 = v153;
    v121 = v31;
    v37 = DWORD2(v153);
    v38 = DWORD2(v154);
    v118 = *((_QWORD *)&v155 + 1);
    v39 = v155;
    v119 = v154;
    v40 = *((_QWORD *)&v156 + 1);
    v117 = v156;
    *(_QWORD *)&v33 = v157;
    v137 = v33;
    *(_QWORD *)&v33 = *((_QWORD *)&v157 + 1);
    v116 = v33;
    v150 = v156;
    v151 = v157;
    v115 = v158;
    v152 = v158;
    v147 = v153;
    v148 = v154;
    v149 = v155;
    outlined retain of _ViewInputs((uint64_t)&v153);
    v41 = _ViewInputs.geometryTransaction()();
    KeyPath = swift_getKeyPath();
    v43 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
    swift_release();
    v44 = v125;
    if ((*(_BYTE *)(v125 + 81) & 1) == 0
      && (_DWORD)v137 == *(_DWORD *)(v125 + 32)
      && __PAIR64__(v43, v116) == *(_QWORD *)(v125 + 36)
      && v37 == *(_DWORD *)(v125 + 44)
      && v41 == *(_DWORD *)(v125 + 48)
      && v38 == *(_DWORD *)(v125 + 52))
    {
      if ((*(_BYTE *)(v125 + 64) & 1) == 0)
      {
        v45 = *(unsigned int *)(v125 + 60);
LABEL_28:
        *(_QWORD *)&v137 = v45;
        goto LABEL_29;
      }
    }
    else
    {
      *(_QWORD *)&v147 = v120;
      *(_QWORD *)&v148 = v119;
      DWORD2(v147) = v37;
      *((_QWORD *)&v148 + 1) = __PAIR64__(v41, v38);
      *(_QWORD *)&v149 = v39;
      *((_QWORD *)&v149 + 1) = v118;
      *(_QWORD *)&v150 = v117;
      *((_QWORD *)&v150 + 1) = v40;
      *(_QWORD *)&v151 = v137;
      *((_QWORD *)&v151 + 1) = v116;
      v152 = v115;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v147, v43, (uint64_t)&v142);
      v44 = v125;
      v46 = v143;
      v47 = v144;
      v48 = v145;
      v49 = v144 | ((unint64_t)DWORD1(v144) << 32);
      v50 = BYTE8(v144) | ((unint64_t)HIDWORD(v144) << 32);
      *(_OWORD *)(v125 + 32) = v142;
      *(_OWORD *)(v44 + 48) = v46;
      *(_QWORD *)(v44 + 64) = v49;
      *(_QWORD *)(v44 + 72) = v50;
      *(_WORD *)(v44 + 80) = v48;
      if (v47 != 1)
      {
        v45 = HIDWORD(*((_QWORD *)&v46 + 1));
        goto LABEL_28;
      }
    }
    v51 = v44;
    *(_QWORD *)&v137 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v51 + 60) = v137;
    *(_BYTE *)(v51 + 64) = 0;
LABEL_29:
    v34 = v133;
    v35 = v134;
    v36 = v136;
    v31 = v121;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    goto LABEL_30;
  }
  *(_QWORD *)&v137 = v157;
  v34 = v133;
  v35 = v134;
  v36 = v136;
LABEL_30:
  swift_endAccess();
LABEL_31:
  *(_QWORD *)&v147 = v36;
  *(_QWORD *)&v148 = v31;
  *((_QWORD *)&v148 + 1) = v24;
  DWORD2(v147) = v128;
  *(_QWORD *)&v149 = __PAIR64__(v131, v32);
  *((_QWORD *)&v149 + 1) = v135;
  *(_QWORD *)&v150 = v35;
  *((_QWORD *)&v150 + 1) = v25;
  *(_QWORD *)&v151 = __PAIR64__(v137, v130);
  *((_QWORD *)&v151 + 1) = v26;
  v152 = v129;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v52 = swift_bridgeObjectRetain();
  v34(&v139, v52, &v147);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (!v14)
  {
LABEL_35:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_74:
    swift_release();
    result = swift_release();
    v109 = v126;
    *v126 = v139;
    v109[1] = v140;
    return result;
  }
  v54 = 32;
  while (*(_QWORD *)(v35 + v54) != v13)
  {
    v54 += 16;
    if (!--v14)
      goto LABEL_35;
  }
  v55 = (int *)MEMORY[0x24BE096C0];
  v56 = v124;
  v121 = v31;
  if ((ValueMetadata *)v124 == &type metadata for ForegroundStyle)
  {
    v150 = v156;
    v151 = v157;
    v152 = v158;
    v147 = v153;
    v148 = v154;
    v149 = v155;
    LOBYTE(v141[0]) = 0;
    swift_beginAccess();
    v138 = 1;
    LODWORD(v133) = CachedEnvironment.resolvedShapeStyles(for:role:mode:)((uint64_t)&v147, (unsigned __int8 *)v141, 0x100000000);
    swift_endAccess();
  }
  else
  {
    v57 = v123;
    if (*(_QWORD *)(*(_QWORD *)(v124 - 8) + 64))
      closure #1 in static _FillMaskEffect._makeView(modifier:inputs:body:)(1, v124, v123, v53);
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    v59 = *v127;
    LOBYTE(v141[0]) = 0;
    *(_QWORD *)&v142 = __PAIR64__(DWORD2(v159), DWORD2(v160));
    DWORD2(v142) = HIDWORD(v160);
    v143 = 0uLL;
    LODWORD(v144) = 0;
    ShapeStyleResolver.init(style:mode:environment:role:animationsDisabled:helper:)(OffsetAttribute2, *v55, v59, (char *)v141, BYTE4(v161) & 1, (uint64_t)&v142, (uint64_t)&v147);
    *(_QWORD *)&v137 = &v114;
    DWORD2(v142) = DWORD2(v147);
    *(_QWORD *)&v142 = v147;
    WORD6(v142) = WORD6(v147);
    *(_QWORD *)&v143 = v148;
    DWORD2(v143) = DWORD2(v148);
    v144 = v149;
    v145 = v150;
    v146 = *((_QWORD *)&v150 + 1);
    MEMORY[0x24BDAC7A8](v60);
    v112 = type metadata accessor for ShapeStyleResolver(0, v56, v57, v61);
    v113 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShapeStyleResolver<A>, v112);
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<_ShapeStyle_Pack>, (uint64_t)&type metadata for _ShapeStyle_Pack, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE095F0]);
    _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v142, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_5, (uint64_t)&v111, v112, MEMORY[0x24BEE4078], v62, MEMORY[0x24BEE40A8], v63);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    LODWORD(v133) = v141[0];
    AGGraphSetFlags();
  }
  LODWORD(v137) = ++lastIdentity;
  v64 = BYTE4(v161);
  if ((WORD2(v161) & 0x100) == 0)
  {
LABEL_42:
    v65 = v127;
    swift_beginAccess();
    if ((v64 & 0x20) == 0)
    {
      *(_QWORD *)&v132 = v157;
      v67 = AGGraphCreateOffsetAttribute2();
      v68 = (int *)MEMORY[0x24BE096C0];
LABEL_67:
      swift_endAccess();
      v99 = *v65;
      *(_QWORD *)&v147 = v139;
      DWORD2(v147) = v140;
      v100 = PreferencesOutputs.subscript.getter(v13);
      if ((v100 & 0x100000000) != 0)
        v101 = *v68;
      else
        v101 = v100;
      v102 = v159;
      *(_QWORD *)&v142 = v159;
      outlined retain of _ViewInputs((uint64_t)&v153);
      outlined retain of _GraphInputs((uint64_t)&v159);
      outlined retain of ViewTransform((uint64_t)&v142);
      v103 = specialized find<A>(_:key:)(v102);
      if (v103)
        v104 = *(_BYTE *)(v103 + 72);
      else
        v104 = 0;
      v105 = DWORD1(v157);
      outlined release of ViewTransform((uint64_t)&v142);
      outlined release of _GraphInputs((uint64_t)&v159);
      outlined release of _ViewInputs((uint64_t)&v153);
      *(_QWORD *)&v147 = __PAIR64__(v133, v137);
      *((_QWORD *)&v147 + 1) = __PAIR64__(v67, v132);
      *(_QWORD *)&v148 = __PAIR64__(v99, v105);
      DWORD2(v148) = v101;
      BYTE12(v148) = v104;
      HIWORD(v148) = 0;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      lazy protocol witness table accessor for type FillMaskDisplayList and conformance FillMaskDisplayList();
      v106 = Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v147) = 0;
      PreferencesOutputs.subscript.setter(v106, v13, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v107);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_74;
    }
    v130 = v154;
    v131 = v153;
    v69 = DWORD2(v153);
    v70 = DWORD2(v154);
    v71 = v155;
    v128 = v156;
    v129 = *((_QWORD *)&v155 + 1);
    v72 = *((_QWORD *)&v156 + 1);
    *(_QWORD *)&v66 = v157;
    v132 = v66;
    *(_QWORD *)&v66 = *((_QWORD *)&v157 + 1);
    v124 = v66;
    v73 = v158;
    v150 = v156;
    v151 = v157;
    v152 = v158;
    v147 = v153;
    v148 = v154;
    v149 = v155;
    outlined retain of _ViewInputs((uint64_t)&v153);
    v74 = _ViewInputs.geometryTransaction()();
    v75 = swift_getKeyPath();
    v76 = specialized CachedEnvironment.attribute<A>(keyPath:)(v75);
    swift_release();
    v77 = v125;
    if ((*(_BYTE *)(v125 + 81) & 1) == 0
      && (_DWORD)v132 == *(_DWORD *)(v125 + 32)
      && __PAIR64__(v76, v124) == *(_QWORD *)(v125 + 36)
      && v69 == *(_DWORD *)(v125 + 44)
      && v74 == *(_DWORD *)(v125 + 48)
      && v70 == *(_DWORD *)(v125 + 52))
    {
      if ((*(_BYTE *)(v125 + 64) & 1) != 0)
        goto LABEL_53;
      v83 = *(unsigned int *)(v125 + 60);
    }
    else
    {
      *(_QWORD *)&v147 = v131;
      *(_QWORD *)&v148 = v130;
      DWORD2(v147) = v69;
      *((_QWORD *)&v148 + 1) = __PAIR64__(v74, v70);
      *(_QWORD *)&v149 = v71;
      *((_QWORD *)&v149 + 1) = v129;
      *(_QWORD *)&v150 = v128;
      *((_QWORD *)&v150 + 1) = v72;
      *(_QWORD *)&v151 = v132;
      *((_QWORD *)&v151 + 1) = v124;
      v152 = v73;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v147, v76, (uint64_t)&v142);
      v77 = v125;
      v78 = v143;
      v79 = v144;
      v80 = v145;
      v81 = v144 | ((unint64_t)DWORD1(v144) << 32);
      v82 = BYTE8(v144) | ((unint64_t)HIDWORD(v144) << 32);
      *(_OWORD *)(v125 + 32) = v142;
      *(_OWORD *)(v77 + 48) = v78;
      *(_QWORD *)(v77 + 64) = v81;
      *(_QWORD *)(v77 + 72) = v82;
      *(_WORD *)(v77 + 80) = v80;
      if (v79 == 1)
      {
LABEL_53:
        v84 = v77;
        *(_QWORD *)&v132 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v84 + 60) = v132;
        *(_BYTE *)(v84 + 64) = 0;
LABEL_56:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        v85 = DWORD2(v153);
        v86 = DWORD2(v154);
        v130 = *((_QWORD *)&v155 + 1);
        v87 = v155;
        v131 = v154;
        v128 = v153;
        v88 = *((_QWORD *)&v156 + 1);
        v129 = v156;
        *(_QWORD *)&v89 = *((_QWORD *)&v157 + 1);
        *(_QWORD *)&v90 = v157;
        v123 = v89;
        v124 = v90;
        v91 = v158;
        v150 = v156;
        v151 = v157;
        v152 = v158;
        v147 = v153;
        v148 = v154;
        v149 = v155;
        outlined retain of _ViewInputs((uint64_t)&v153);
        v92 = _ViewInputs.geometryTransaction()();
        v93 = swift_getKeyPath();
        v94 = specialized CachedEnvironment.attribute<A>(keyPath:)(v93);
        swift_release();
        if ((*(_BYTE *)(v84 + 81) & 1) == 0
          && (_DWORD)v124 == *(_DWORD *)(v84 + 32)
          && __PAIR64__(v94, v123) == *(_QWORD *)(v84 + 36)
          && v85 == *(_DWORD *)(v84 + 44)
          && v92 == *(_DWORD *)(v84 + 48)
          && v86 == *(_DWORD *)(v84 + 52))
        {
          v68 = (int *)MEMORY[0x24BE096C0];
          if ((*(_BYTE *)(v84 + 80) & 1) == 0)
          {
            v67 = *(_DWORD *)(v84 + 76);
            goto LABEL_66;
          }
        }
        else
        {
          *(_QWORD *)&v147 = v128;
          *(_QWORD *)&v148 = v131;
          DWORD2(v147) = v85;
          *((_QWORD *)&v148 + 1) = __PAIR64__(v92, v86);
          *(_QWORD *)&v149 = v87;
          *((_QWORD *)&v149 + 1) = v130;
          *(_QWORD *)&v150 = v129;
          *((_QWORD *)&v150 + 1) = v88;
          *(_QWORD *)&v151 = v124;
          *((_QWORD *)&v151 + 1) = v123;
          v152 = v91;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v147, v94, (uint64_t)&v142);
          v84 = v125;
          v67 = HIDWORD(v144);
          v95 = v145;
          v96 = v144 | ((unint64_t)DWORD1(v144) << 32);
          v97 = BYTE8(v144) | ((unint64_t)HIDWORD(v144) << 32);
          v98 = v143;
          *(_OWORD *)(v125 + 32) = v142;
          *(_OWORD *)(v84 + 48) = v98;
          *(_QWORD *)(v84 + 64) = v96;
          *(_QWORD *)(v84 + 72) = v97;
          *(_WORD *)(v84 + 80) = v95;
          v68 = (int *)MEMORY[0x24BE096C0];
          if (v95 != 1)
            goto LABEL_66;
        }
        v67 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v84 + 76) = v67;
        *(_BYTE *)(v84 + 80) = 0;
LABEL_66:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        v65 = v127;
        goto LABEL_67;
      }
      v83 = HIDWORD(*((_QWORD *)&v78 + 1));
    }
    *(_QWORD *)&v132 = v83;
    v84 = v77;
    goto LABEL_56;
  }
  outlined retain of _ViewInputs((uint64_t)&v153);
  specialized _ViewInputs.subscript.getter();
  outlined release of _ViewInputs((uint64_t)&v153);
  result = AGWeakAttributeGetAttribute();
  if ((_DWORD)result != *MEMORY[0x24BE096C0])
  {
    LODWORD(v142) = v137;
    v110 = (void (*)(__int128 *, _QWORD))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v142);
    v110(&v147, 0);
    goto LABEL_42;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in static _FillMaskEffect._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = type metadata accessor for _FillMaskEffect(0, a2, a3, a4);
  v9[3] = a2;
  v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v9, a2, MEMORY[0x24BEE4078], v6, MEMORY[0x24BEE40A8], v7);
  return v9[5];
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _FillMaskEffect<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  return static _FillMaskEffect._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), a6);
}

uint64_t FillMaskDisplayList.updateValue()()
{
  int *v0;
  uint64_t Value;
  char v2;
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  char v7;
  int v8;
  int v9;
  unint64_t v10;
  int v12;
  double *v13;
  double v14;
  double *v15;
  double v16;
  double v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  double v30;
  double v31;
  uint64_t v32;
  int v33;
  __int16 v34;
  char v35;
  int v36;
  uint64_t v37;
  __int128 v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  char v50;
  __int16 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  __int128 v72;
  _BYTE v73[48];
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  _OWORD v84[2];
  uint64_t v85;
  __int16 v86;
  char v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  _BYTE v94[48];
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  _BYTE v100[25];
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;

  v107 = *MEMORY[0x24BDAC8D0];
  if (v0[6] == *MEMORY[0x24BE096C0]
    || (Value = AGGraphGetValue(), v3 = *(_QWORD *)Value, !*(_QWORD *)(*(_QWORD *)Value + 16)))
  {
    *(_QWORD *)&v88 = MEMORY[0x24BEE4AF8];
    WORD4(v88) = 0;
    BYTE10(v88) = 0;
    return AGGraphSetOutputValue();
  }
  v4 = *(unsigned __int16 *)(Value + 8);
  v5 = *(unsigned __int8 *)(Value + 10);
  v6 = v0[1];
  if ((v2 & 1) != 0 || (AGGraphGetValue(), (v7 & 1) != 0) || !*((_WORD *)v0 + 15))
  {
    swift_bridgeObjectRetain();
    v10 = ++static DisplayList.Version.lastValue;
    goto LABEL_10;
  }
  v8 = v0[4];
  LODWORD(v88) = v0[2];
  DWORD1(v88) = v8;
  swift_bridgeObjectRetain();
  v9 = AGGraphAnyInputsChanged();
  v10 = ++static DisplayList.Version.lastValue;
  if (v9)
  {
LABEL_10:
    if (v10)
      v12 = (2 * ((33 * (v10 >> 16)) ^ v10)) | 1;
    else
      LOWORD(v12) = 0;
    *((_WORD *)v0 + 15) = v12;
  }
  v70 = v6;
  v13 = (double *)AGGraphGetValue();
  v14 = *v13;
  v68 = v13[1];
  v15 = (double *)AGGraphGetValue();
  v17 = *v15;
  v16 = v15[1];
  type metadata accessor for CGSize(0);
  v18 = (uint64_t *)AGGraphGetValue();
  v19 = *v18;
  v20 = v18[1];
  if (*(_QWORD *)(v3 + 16) == 1)
  {
    v21 = *(_QWORD *)(v3 + 40);
    v66 = *(_QWORD *)(v3 + 32);
    v22 = *(_QWORD *)(v3 + 48);
    v23 = *(_QWORD *)(v3 + 56);
    v25 = *(_QWORD *)(v3 + 64);
    v24 = *(_QWORD *)(v3 + 72);
    v27 = *(_QWORD *)(v3 + 80);
    v26 = *(_QWORD *)(v3 + 88);
    v28 = *(unsigned __int16 *)(v3 + 96) | (*(unsigned __int8 *)(v3 + 98) << 16);
    v29 = *(unsigned int *)(v3 + 100);
    outlined copy of DisplayList.Item.Value(v24, v27);
    swift_bridgeObjectRelease();
  }
  else
  {
    v24 = 0;
    v29 = 0;
    v27 = 0x4000001300000000;
    v66 = 0;
    v21 = 0;
    v22 = *v18;
    v23 = v18[1];
    v25 = v10;
    v26 = v3;
    v28 = v4 | (v5 << 16);
  }
  v30 = v14 - v17;
  v103 = 0u;
  v104 = 0u;
  v31 = v68 - v16;
  v101 = 0u;
  v102 = 0u;
  v105 = 0;
  v106 = 0x80000000;
  v32 = *(_QWORD *)&v28 & 0xFFFFFFLL | (v29 << 32);
  v33 = *v0;
  v34 = *((_WORD *)v0 + 15);
  v35 = *((_BYTE *)v0 + 28);
  v36 = v0[5];
  outlined copy of DisplayList.Item.Value(v24, v27);
  if (one-time initialization token for normal != -1)
    swift_once();
  *(_QWORD *)&v88 = v66;
  *((_QWORD *)&v88 + 1) = v21;
  *(_QWORD *)&v89 = v22;
  *((_QWORD *)&v89 + 1) = v23;
  *(_QWORD *)&v90 = v25;
  v64 = v24;
  *((_QWORD *)&v90 + 1) = v24;
  *(_QWORD *)&v91 = v27;
  *((_QWORD *)&v91 + 1) = v26;
  v92 = (unint64_t)v32;
  v93 = 0uLL;
  *(_DWORD *)v94 = 6291456;
  *(_WORD *)&v94[4] = v34;
  *(double *)&v94[8] = v30;
  *(double *)&v94[16] = v31;
  *(_QWORD *)&v94[24] = v19;
  *(_QWORD *)&v94[32] = v20;
  *(_QWORD *)&v94[40] = 0;
  LODWORD(v95) = 0;
  *((double *)&v95 + 1) = v30;
  *(double *)&v96 = v31;
  *((_QWORD *)&v96 + 1) = v19;
  *(_QWORD *)&v97 = v20;
  v98 = xmmword_23527E880;
  *((_QWORD *)&v97 + 1) = v10;
  *(_QWORD *)&v99 = 0;
  BYTE10(v99) = 0;
  WORD4(v99) = 0;
  HIDWORD(v99) = v33;
  v100[0] = v35;
  *(_DWORD *)&v100[4] = v36;
  *(_QWORD *)&v100[8] = static GraphicsBlendMode.normal;
  v100[16] = byte_254266040;
  *(_DWORD *)&v100[20] = 1065353216;
  v100[24] = 0;
  LOBYTE(v72) = 0;
  outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_254266040);
  _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)((unsigned __int8 *)&v72, v70, (uint64_t)&v101);
  v37 = *((_QWORD *)&v102 + 1);
  v69 = v102;
  v71 = *((_QWORD *)&v101 + 1);
  v38 = v103;
  v39 = *((_QWORD *)&v104 + 1);
  v67 = v104;
  v40 = v106;
  if (v106 >> 30)
  {
    v63 = *((_QWORD *)&v102 + 1);
    if (v106 >> 30 == 1)
    {
      v61 = *((_QWORD *)&v104 + 1);
      v62 = v105;
      v59 = v106;
      v41 = (_QWORD *)swift_bridgeObjectRetain();
      DisplayList.init(_:)(v41, (uint64_t)&v85);
      v72 = *(_OWORD *)&v94[8];
      *(_OWORD *)v73 = *(_OWORD *)&v94[24];
      *(_QWORD *)&v73[16] = *((_QWORD *)&v97 + 1);
      *(_OWORD *)&v73[24] = xmmword_23527E870;
      *(_QWORD *)&v73[40] = v85;
      BYTE2(v74) = v87;
      LOWORD(v74) = v86;
      DWORD1(v74) = HIDWORD(v99);
      LOBYTE(v85) = v35;
      DisplayList.Item.canonicalize(options:)((char *)&v85);
      v42 = v72;
      v43 = *(_OWORD *)v73;
      v44 = *(_QWORD *)&v73[24];
      v60 = *(_QWORD *)&v73[16];
      v45 = *(_QWORD *)&v73[32];
      v46 = *(_QWORD *)&v73[40];
      v47 = (unsigned __int16)v74 | (BYTE2(v74) << 16);
      v48 = DWORD1(v74);
      v49 = *(_QWORD *)&v73[32] >> 62;
      if (*(_QWORD *)&v73[32] >> 62 != 3
        || (v47 & 0xFFFFFF) != 0
        || *(_QWORD *)&v73[32] != 0xC000000000000000
        || *(_QWORD *)&v73[40] | *(_QWORD *)&v73[24])
      {
        type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
        v52 = swift_allocObject();
        *(_OWORD *)(v52 + 16) = xmmword_23527E860;
        *(_OWORD *)(v52 + 32) = v42;
        *(_OWORD *)(v52 + 48) = v43;
        *(_QWORD *)(v52 + 64) = v60;
        *(_QWORD *)(v52 + 72) = v44;
        *(_QWORD *)(v52 + 80) = v45;
        *(_QWORD *)(v52 + 88) = v46;
        *(_BYTE *)(v52 + 98) = BYTE2(v47);
        *(_WORD *)(v52 + 96) = v47;
        *(_DWORD *)(v52 + 100) = v48;
        __asm { BR              X10 }
      }
      v50 = 0;
      v51 = 0;
      v58 = MEMORY[0x24BEE4AF8];
      outlined consume of DisplayList.Item.Value(*(uint64_t *)&v73[24], *(unint64_t *)&v73[32]);
      outlined consume of _ShapeStyle_RenderedLayers.Layers(v71, v69, v63, v38, *((uint64_t *)&v38 + 1), v67, v61, v62, v59);
      v69 = 0;
      v71 = 0;
      v54 = 0;
      v65 = 0;
      v67 = 0;
      v55 = 0;
      v39 = 0;
      v56 = 0;
      LODWORD(v40) = 0x80000000;
      v57 = v58;
    }
    else
    {
      v65 = v103;
      v51 = 0;
      v50 = 0;
      v57 = MEMORY[0x24BEE4AF8];
      v55 = *((_QWORD *)&v103 + 1);
      v56 = v105;
      v54 = *((_QWORD *)&v102 + 1);
    }
  }
  else
  {
    if (*((_QWORD *)&v104 + 1) >> 62 != 3
      || *((_QWORD *)&v104 + 1) != 0xC000000000000000
      || v105 | (unint64_t)v104
      || (v106 & 0xFFFFFF) != 0)
    {
      v53 = v105;
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v57 = swift_allocObject();
      *(_OWORD *)(v57 + 16) = xmmword_23527E860;
      *(_QWORD *)(v57 + 32) = v71;
      *(_QWORD *)(v57 + 40) = v69;
      *(_QWORD *)(v57 + 48) = v37;
      *(_OWORD *)(v57 + 56) = v38;
      *(_QWORD *)(v57 + 72) = v67;
      *(_QWORD *)(v57 + 80) = v39;
      *(_QWORD *)(v57 + 88) = v53;
      *(_BYTE *)(v57 + 98) = BYTE2(v40);
      *(_WORD *)(v57 + 96) = v40;
      *(_DWORD *)(v57 + 100) = HIDWORD(v40);
      *(_QWORD *)&v72 = v71;
      *((_QWORD *)&v72 + 1) = v69;
      *(_QWORD *)v73 = v37;
      *(_OWORD *)&v73[8] = v38;
      *(_QWORD *)&v73[24] = v67;
      *(_QWORD *)&v73[32] = v39;
      *(_QWORD *)&v73[40] = v53;
      BYTE2(v74) = BYTE2(v40);
      LOWORD(v74) = v40;
      DWORD1(v74) = HIDWORD(v40);
      outlined copy of DisplayList.Item.Value(v67, v39);
      DisplayList.Item.features.getter();
      v51 = v85;
      *(_QWORD *)&v72 = v71;
      *((_QWORD *)&v72 + 1) = v69;
      *(_QWORD *)v73 = v37;
      *(_OWORD *)&v73[8] = v38;
      *(_QWORD *)&v73[24] = v67;
      *(_QWORD *)&v73[32] = v39;
      *(_QWORD *)&v73[40] = v53;
      BYTE2(v74) = BYTE2(v40);
      LOWORD(v74) = v40;
      DWORD1(v74) = HIDWORD(v40);
      DisplayList.Item.properties.getter();
      outlined consume of _ShapeStyle_RenderedLayers.Layers(v71, v69, v37, v38, *((uint64_t *)&v38 + 1), v67, v39, v53, v40);
      v69 = 0;
      v71 = 0;
      v54 = 0;
      v65 = 0;
      v67 = 0;
      v55 = 0;
      v39 = 0;
      v56 = 0;
      v50 = v85;
    }
    else
    {
      outlined consume of _ShapeStyle_RenderedLayers.Layers(*((uint64_t *)&v101 + 1), v102, *((uint64_t *)&v102 + 1), v103, *((uint64_t *)&v103 + 1), 0, 0xC000000000000000, 0, v106);
      v69 = 0;
      v71 = 0;
      v54 = 0;
      v65 = 0;
      v67 = 0;
      v55 = 0;
      v39 = 0;
      v56 = 0;
      v51 = 0;
      v50 = 0;
      v57 = MEMORY[0x24BEE4AF8];
    }
    LODWORD(v40) = 0x80000000;
  }
  *(_QWORD *)&v72 = v57;
  WORD4(v72) = v51;
  BYTE10(v72) = v50;
  AGGraphSetOutputValue();
  outlined consume of DisplayList.Item.Value(v64, v27);
  swift_bridgeObjectRelease();
  v82 = v98;
  v83 = v99;
  v84[0] = *(_OWORD *)v100;
  *(_OWORD *)((char *)v84 + 9) = *(_OWORD *)&v100[9];
  v78 = *(_OWORD *)&v94[32];
  v79 = v95;
  v80 = v96;
  v81 = v97;
  v74 = v92;
  v75 = v93;
  v76 = *(_OWORD *)v94;
  v77 = *(_OWORD *)&v94[16];
  v72 = v88;
  *(_OWORD *)v73 = v89;
  *(_OWORD *)&v73[16] = v90;
  *(_OWORD *)&v73[32] = v91;
  outlined release of _ShapeStyle_RenderedShape((uint64_t)&v72);
  swift_release();
  return outlined consume of _ShapeStyle_RenderedLayers.Layers(v71, v69, v54, v65, v55, v67, v39, v56, v40);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_5@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

unint64_t lazy protocol witness table accessor for type FillMaskDisplayList and conformance FillMaskDisplayList()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FillMaskDisplayList and conformance FillMaskDisplayList;
  if (!lazy protocol witness table cache variable for type FillMaskDisplayList and conformance FillMaskDisplayList)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for FillMaskDisplayList, &unk_25062C808);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FillMaskDisplayList and conformance FillMaskDisplayList);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for _FillMaskEffect(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234E75510 + 4 * byte_2352A94D0[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for _FillMaskEffect(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for _FillMaskEffect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _FillMaskEffect);
}

void *type metadata accessor for FillMaskDisplayList()
{
  return &unk_25062C808;
}

unint64_t instantiation function for generic protocol witness table for FillMaskDisplayList(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type FillMaskDisplayList and conformance FillMaskDisplayList();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

double ResolvedShadowStyle.insets.getter()
{
  uint64_t v0;
  double result;

  result = 0.0;
  if ((*(_BYTE *)(v0 + 44) & 1) == 0)
    return *(double *)(v0 + 32) + *(double *)(v0 + 16) * -2.8;
  return result;
}

char *ResolvedShadowStyle.init(color:radius:offset:midpoint:kind:)@<X0>(char *result@<X0>, uint64_t a2@<X8>, float a3@<S0>, float a4@<S1>, float a5@<S2>, float a6@<S3>, double a7@<D4>, double a8@<D5>, double a9@<D6>, float a10@<S7>)
{
  char v10;

  v10 = *result;
  *(float *)a2 = a3;
  *(float *)(a2 + 4) = a4;
  *(float *)(a2 + 8) = a5;
  *(float *)(a2 + 12) = a6;
  *(double *)(a2 + 16) = a7;
  *(double *)(a2 + 24) = a8;
  *(double *)(a2 + 32) = a9;
  *(float *)(a2 + 40) = a10;
  *(_BYTE *)(a2 + 44) = v10;
  return result;
}

__n128 ResolvedShadowStyle.animatableData.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  int8x16_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  __n128 result;
  int8x16_t v9;
  __n128 v10;
  float32x4_t v11;

  v9 = *(int8x16_t *)v1;
  v10 = *(__n128 *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 32);
  if (one-time initialization token for legacyInterpolation != -1)
    swift_once();
  swift_beginAccess();
  if ((static Color.Resolved.legacyInterpolation & 1) != 0)
  {
    v5 = (float32x4_t)v9;
  }
  else
  {
    ResolvedGradient.ColorSpace.convertIn(_:)(v11.f32, v9, *(float *)&v9.i32[1], v9.u32[2], *(float *)&v9.i32[3], v4);
    v5 = v11;
  }
  v6.i64[0] = 0x4300000043000000;
  v6.i64[1] = 0x4300000043000000;
  v7 = vmulq_f32(v5, v6);
  result = v10;
  *(float32x4_t *)a1 = v7;
  *(__n128 *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 32) = v3;
  return result;
}

double ResolvedShadowStyle.animatableData.setter(uint64_t a1)
{
  uint64_t v1;
  float32x4_t v3;
  float32x4_t v4;
  float v5;
  __int32 v6;
  __int32 v7;
  __int32 v8;
  double result;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  char v13;

  v3 = *(float32x4_t *)a1;
  v4.i64[0] = 0x3C0000003C000000;
  v4.i64[1] = 0x3C0000003C000000;
  if (one-time initialization token for legacyInterpolation != -1)
  {
    v11 = *(float32x4_t *)a1;
    swift_once();
    v4.i64[0] = 0x3C0000003C000000;
    v4.i64[1] = 0x3C0000003C000000;
    v3 = v11;
  }
  v10 = vmulq_f32(v3, v4);
  swift_beginAccess();
  if ((static Color.Resolved.legacyInterpolation & 1) != 0)
  {
    v5 = v10.f32[0];
    v7 = v10.i32[2];
    v6 = v10.i32[1];
    v8 = v10.i32[3];
  }
  else
  {
    v13 = 2;
    v12 = v10;
    v5 = ResolvedGradient.ColorSpace.convertOut(_:)(v12.f32);
  }
  *(float *)v1 = v5;
  *(_DWORD *)(v1 + 4) = v6;
  *(_DWORD *)(v1 + 8) = v7;
  *(_DWORD *)(v1 + 12) = v8;
  result = *(double *)(a1 + 32);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(a1 + 16);
  *(double *)(v1 + 32) = result;
  return result;
}

uint64_t ShadowStyle.Kind.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t ShadowStyle.Kind.init(rawValue:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static ShadowStyle.Kind.drop.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static ShadowStyle.Kind.inner.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static ShadowStyle.Kind.only.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static ShadowStyle.Kind.nonOpaque.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

void static ShadowStyle.Kind.ignoresFill.getter(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

double static ShadowStyle.drop.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 40) = 1056964608;
  return result;
}

double static ShadowStyle.inner.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 1;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1056964608;
  return result;
}

uint64_t static ShadowStyle.drop(color:radius:x:y:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>)
{
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = a1 | 0x8000000000000000;
  *(double *)(a2 + 16) = a3;
  *(double *)(a2 + 24) = a4;
  *(double *)(a2 + 32) = a5;
  *(_DWORD *)(a2 + 40) = 1056964608;
  return swift_retain();
}

uint64_t static ShadowStyle.inner(color:radius:x:y:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>)
{
  *(_QWORD *)a2 = 1;
  *(_QWORD *)(a2 + 8) = a1 | 0x8000000000000000;
  *(double *)(a2 + 16) = a3;
  *(double *)(a2 + 24) = a4;
  *(double *)(a2 + 32) = a5;
  *(_DWORD *)(a2 + 40) = 1056964608;
  return swift_retain();
}

uint64_t static ShadowStyle.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[2];
  uint64_t v10;
  _OWORD v11[2];
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(float *)(a1 + 40);
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(float *)(a2 + 40);
  v6 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v6;
  v12 = v2;
  v7 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v7;
  v10 = v4;
  return specialized static ShadowStyle.Storage.== infix(_:_:)((uint64_t)v11, (uint64_t)v9) & (v3 == v5);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ShadowStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[2];
  uint64_t v10;
  _OWORD v11[2];
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(float *)(a1 + 40);
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(float *)(a2 + 40);
  v6 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v6;
  v12 = v2;
  v7 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v7;
  v10 = v4;
  return static ShadowStyle.Storage.== infix(_:_:)(v11, v9) & (v3 == v5);
}

uint64_t ShadowStyle.ignoresFill(_:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = *(_QWORD *)v2;
  v6 = *(_QWORD *)(v2 + 8);
  v7 = *(_DWORD *)(v2 + 40);
  if (v6 < 0)
  {
    v10 = *(_QWORD *)(v2 + 24);
    v11 = *(_QWORD *)(v2 + 32);
    v9 = *(_QWORD *)(v2 + 16);
    v12 = (a1 & 1) == 0;
    v15 = 8;
    if (v12)
      v15 = 0;
    v14 = *(_QWORD *)v2 & 0xF7 | v15;
    v8 = v6 | 0x8000000000000000;
    result = outlined copy of ShadowStyle.Storage(result, v6);
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = (a1 & 1) == 0;
    v13 = 8;
    if (v12)
      v13 = 0;
    v14 = result & 0xF7 | (unint64_t)v13;
  }
  *(_QWORD *)a2 = v14;
  *(_QWORD *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 16) = v9;
  *(_QWORD *)(a2 + 24) = v10;
  *(_QWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 40) = v7;
  return result;
}

uint64_t ShadowStyle.midpoint(_:)@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;

  v3 = *v2;
  v4 = v2[1];
  v5 = v2[2];
  v6 = v2[3];
  v7 = v2[4];
  v8 = a2;
  *(_QWORD *)a1 = *v2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(float *)(a1 + 40) = v8;
  return outlined copy of ShadowStyle.Storage(v3, v4);
}

uint64_t ShapeStyle.shadow(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v22 = a3;
  v8 = *(_QWORD *)(a2 - 8);
  v9 = MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v11, v4, a2, v9);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_DWORD *)(a1 + 40);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(a4, v11, a2);
  v19 = a4 + *(int *)(type metadata accessor for _ShadowShapeStyle(0, a2, v22, v18) + 36);
  *(_QWORD *)v19 = v12;
  *(_QWORD *)(v19 + 8) = v13;
  *(_QWORD *)(v19 + 16) = v14;
  *(_QWORD *)(v19 + 24) = v15;
  *(_QWORD *)(v19 + 32) = v16;
  *(_DWORD *)(v19 + 40) = v17;
  return outlined copy of ShadowStyle.Storage(v12, v13);
}

float _ShadowShapeStyle.init(style:shadowStyle:)@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float result;
  __int128 v13;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a5, a1);
  v10 = a5 + *(int *)(type metadata accessor for _ShadowShapeStyle(0, a3, a4, v9) + 36);
  v11 = *(_QWORD *)(a2 + 32);
  result = *(float *)(a2 + 40);
  v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v10 = *(_OWORD *)a2;
  *(_OWORD *)(v10 + 16) = v13;
  *(_QWORD *)(v10 + 32) = v11;
  *(float *)(v10 + 40) = result;
  return result;
}

uint64_t _ShadowShapeStyle.style.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _ShadowShapeStyle.style.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_ShadowShapeStyle.style.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ShadowShapeStyle.shadowStyle.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v3 = v2 + *(int *)(a1 + 36);
  v4 = *(_QWORD *)v3;
  v5 = *(_QWORD *)(v3 + 8);
  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(_QWORD *)(v3 + 32);
  v9 = *(_DWORD *)(v3 + 40);
  *(_QWORD *)a2 = *(_QWORD *)v3;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 24) = v7;
  *(_QWORD *)(a2 + 32) = v8;
  *(_DWORD *)(a2 + 40) = v9;
  return outlined copy of ShadowStyle.Storage(v4, v5);
}

__n128 _ShadowShapeStyle.shadowStyle.setter(__n128 *a1, uint64_t a2)
{
  uint64_t v2;
  __n128 *v3;
  unint64_t v4;
  unsigned __int32 v5;
  __n128 result;
  __n128 v7;
  __n128 v8;

  v3 = (__n128 *)(v2 + *(int *)(a2 + 36));
  v7 = a1[1];
  v8 = *a1;
  v4 = a1[2].n128_u64[0];
  v5 = a1[2].n128_u32[2];
  outlined consume of ShadowStyle.Storage(v3->n128_u64[0], v3->n128_i64[1]);
  result = v7;
  *v3 = v8;
  v3[1] = v7;
  v3[2].n128_u64[0] = v4;
  v3[2].n128_u32[2] = v5;
  return result;
}

uint64_t (*_ShadowShapeStyle.shadowStyle.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void _ShadowShapeStyle._apply(to:)(uint64_t a1)
{
  char *v1;

  v1 = (char *)&loc_234E75E90 + *((int *)qword_234E76390 + *(unsigned __int8 *)(MEMORY[0x24BDAC7A8](a1) + 24));
  __asm { BR              X10 }
}

uint64_t sub_234E75EA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 + 24) + 32))(v0, v1);
}

uint64_t sub_234E75ED8()
{
  uint64_t v0;
  uint64_t result;

  result = outlined consume of _ShapeStyle_Shape.Result(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  *(_QWORD *)(v0 + 32) = 0;
  *(_BYTE *)(v0 + 40) = 0;
  return result;
}

uint64_t closure #2 in _ShadowShapeStyle._apply(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  v7 = a2 + *(int *)(type metadata accessor for _ShadowShapeStyle(0, a3, a4, a4) + 36);
  v8 = *(_QWORD *)v7;
  v9 = *(_QWORD *)(v7 + 8);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = *(_QWORD *)(v7 + 24);
  v12 = *(_QWORD *)(v7 + 32);
  v13 = *(_DWORD *)(v7 + 40);
  *(_QWORD *)a5 = a1;
  *(_QWORD *)(a5 + 8) = v8;
  *(_QWORD *)(a5 + 16) = v9;
  *(_QWORD *)(a5 + 24) = v10;
  *(_QWORD *)(a5 + 32) = v11;
  *(_QWORD *)(a5 + 40) = v12;
  *(_DWORD *)(a5 + 48) = v13;
  swift_retain();
  return outlined copy of ShadowStyle.Storage(v8, v9);
}

uint64_t static _ShadowShapeStyle._apply(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t protocol witness for static ShapeStyle._apply(to:) in conformance _ShadowShapeStyle<A>(uint64_t a1, uint64_t a2)
{
  return static _ShadowShapeStyle._apply(to:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

float ResolvedShadowStyle.color.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

void ResolvedShadowStyle.color.setter(float a1, float a2, float a3, float a4)
{
  float *v4;

  *v4 = a1;
  v4[1] = a2;
  v4[2] = a3;
  v4[3] = a4;
}

uint64_t (*ResolvedShadowStyle.color.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double ResolvedShadowStyle.radius.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void ResolvedShadowStyle.radius.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
}

uint64_t (*ResolvedShadowStyle.radius.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double ResolvedShadowStyle.offset.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

void ResolvedShadowStyle.offset.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 24) = a1;
  *(double *)(v2 + 32) = a2;
}

uint64_t (*ResolvedShadowStyle.offset.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

float ResolvedShadowStyle.midpoint.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 40);
}

void ResolvedShadowStyle.midpoint.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 40) = a1;
}

uint64_t (*ResolvedShadowStyle.midpoint.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void ResolvedShadowStyle.kind.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 44);
}

_BYTE *ResolvedShadowStyle.kind.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 44) = *result;
  return result;
}

uint64_t (*ResolvedShadowStyle.kind.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double key path getter for ResolvedShadowStyle.animatableData : ResolvedShadowStyle@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;
  _OWORD v4[2];
  uint64_t v5;

  ResolvedShadowStyle.animatableData.getter((uint64_t)v4);
  result = *(double *)v4;
  v3 = v4[1];
  *(_OWORD *)a1 = v4[0];
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = v5;
  return result;
}

void (*ResolvedShadowStyle.animatableData.modify(_QWORD *a1))(float32x4_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  int8x16_t v5;
  float32x4_t v6;
  float32x4_t v7;
  int8x16_t v9;
  __int128 v10;
  float32x4_t v11;

  v3 = malloc(0x48uLL);
  *a1 = v3;
  v3[8] = v1;
  v9 = *(int8x16_t *)v1;
  v10 = *(_OWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 32);
  if (one-time initialization token for legacyInterpolation != -1)
    swift_once();
  swift_beginAccess();
  if ((static Color.Resolved.legacyInterpolation & 1) != 0)
  {
    v6 = (float32x4_t)v9;
  }
  else
  {
    ResolvedGradient.ColorSpace.convertIn(_:)(v11.f32, v9, *(float *)&v9.i32[1], v9.u32[2], *(float *)&v9.i32[3], v5);
    v6 = v11;
  }
  v7.i64[0] = 0x4300000043000000;
  v7.i64[1] = 0x4300000043000000;
  *(float32x4_t *)v3 = vmulq_f32(v6, v7);
  *((_OWORD *)v3 + 1) = v10;
  v3[4] = v4;
  return _ShadowEffect._Resolved.animatableData.modify;
}

double protocol witness for Animatable.animatableData.getter in conformance ResolvedShadowStyle@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;
  _OWORD v4[2];
  uint64_t v5;

  ResolvedShadowStyle.animatableData.getter((uint64_t)v4);
  result = *(double *)v4;
  v3 = v4[1];
  *(_OWORD *)a1 = v4[0];
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = v5;
  return result;
}

void (*protocol witness for Animatable.animatableData.modify in conformance ResolvedShadowStyle(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ResolvedShadowStyle.animatableData.modify(v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

void ResolvedShadowStyle.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  float v5;
  float v6;
  float v7;
  float v8;
  double v9;
  double v10;
  double v11;
  float v12;
  Swift::UInt v13;
  BOOL v14;
  double v15;
  Swift::UInt v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t isUniquelyReferenced_nonNull_native;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;

  v3 = v1;
  v5 = *(float *)v3;
  v6 = *(float *)(v3 + 4);
  v7 = *(float *)(v3 + 8);
  v8 = *(float *)(v3 + 12);
  v10 = *(double *)(v3 + 16);
  v9 = *(double *)(v3 + 24);
  v11 = *(double *)(v3 + 32);
  v12 = *(float *)(v3 + 40);
  v13 = *(unsigned __int8 *)(v3 + 44);
  if (*(float *)v3 != 0.0 || v6 != 0.0 || (v7 == 0.0 ? (v14 = v8 == 1.0) : (v14 = 0), !v14))
  {
    ProtobufEncoder.encodeVarint(_:)(0xAuLL);
    specialized ProtobufEncoder.encodeMessage<A>(_:)(v5, v6, v7, v8);
    if (v2)
      return;
  }
  if (v10 != 0.0)
  {
    v15 = fabs(v10);
    if (v15 >= 65536.0)
      v16 = 17;
    else
      v16 = 21;
    ProtobufEncoder.encodeVarint(_:)(v16);
    if (v15 >= 65536.0)
    {
      v19 = *(_QWORD *)(a1 + 8);
      v20 = v19 + 8;
      if (__OFADD__(v19, 8))
      {
        __break(1u);
      }
      else if (*(_QWORD *)(a1 + 16) >= v20)
      {
        *(_QWORD *)(a1 + 8) = v20;
        *(double *)(*(_QWORD *)a1 + v19) = v10;
        goto LABEL_19;
      }
      *(double *)ProtobufEncoder.growBufferSlow(to:)(v20) = v10;
    }
    else
    {
      v17 = *(_QWORD *)(a1 + 8);
      v18 = v17 + 4;
      if (__OFADD__(v17, 4))
      {
        __break(1u);
      }
      else
      {
        *(float *)&v15 = v10;
        if (*(_QWORD *)(a1 + 16) >= v18)
        {
          *(_QWORD *)(a1 + 8) = v18;
          *(_DWORD *)(*(_QWORD *)a1 + v17) = LODWORD(v15);
          goto LABEL_19;
        }
      }
      *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v18) = LODWORD(v15);
    }
  }
LABEL_19:
  if (v9 != 0.0 || v11 != 0.0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x1AuLL);
    v21 = *(_QWORD *)(a1 + 8);
    v22 = *(_QWORD **)(a1 + 24);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
      v22 = (_QWORD *)isUniquelyReferenced_nonNull_native;
    }
    v25 = v22[2];
    v24 = v22[3];
    if (v25 >= v24 >> 1)
    {
      isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v24 > 1), v25 + 1, 1, v22);
      v22 = (_QWORD *)isUniquelyReferenced_nonNull_native;
    }
    v22[2] = v25 + 1;
    v22[v25 + 4] = v21;
    *(_QWORD *)(a1 + 24) = v22;
    if (__OFADD__(v21, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    *(_QWORD *)(a1 + 8) = v21 + 1;
    CGSize.encode(to:)((double *)a1, v9, v11);
    ProtobufEncoder.endLengthDelimited()();
  }
  if ((_DWORD)v13)
  {
    ProtobufEncoder.encodeVarint(_:)(0x20uLL);
    ProtobufEncoder.encodeVarint(_:)(v13);
  }
  if (v12 != 0.5)
  {
    ProtobufEncoder.encodeVarint(_:)(0x2DuLL);
    v26 = *(_QWORD *)(a1 + 8);
    isUniquelyReferenced_nonNull_native = v26 + 4;
    if (!__OFADD__(v26, 4))
    {
      if (*(_QWORD *)(a1 + 16) >= isUniquelyReferenced_nonNull_native)
      {
        *(_QWORD *)(a1 + 8) = isUniquelyReferenced_nonNull_native;
        *(float *)(*(_QWORD *)a1 + v26) = v12;
        return;
      }
LABEL_36:
      *(float *)ProtobufEncoder.growBufferSlow(to:)(isUniquelyReferenced_nonNull_native) = v12;
      return;
    }
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
}

unint64_t ResolvedShadowStyle.init(from:)@<X0>(unint64_t result@<X0>, unint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v5;
  unint64_t v6;
  char v7;
  int v8;
  float v9;
  uint64_t v10;
  float v11;
  double v12;
  double v13;
  int v14;
  float v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  float v25;
  int v26;
  int v27;
  float v28;
  unint64_t v29;
  double *v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  double v35;
  uint64_t v36;
  unint64_t v37;
  float *v38;
  double *v39;
  float *v40;
  float v41;
  unint64_t v42;
  uint64_t i;
  uint64_t v44;
  uint64_t v45;

  v3 = (_QWORD *)result;
  v5 = *(_QWORD *)(result + 8);
  v6 = *(_QWORD *)(result + 16);
  if (v5 >= v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = 1.0;
    v10 = 0;
    v11 = 0.5;
    v12 = 0.0;
    v13 = 0.0;
    v14 = 0;
    v15 = 0.0;
LABEL_4:
    v3[3] = 0;
    *(float *)a2 = v15;
    *(_DWORD *)(a2 + 4) = v14;
    *(_DWORD *)(a2 + 8) = v8;
    *(float *)(a2 + 12) = v9;
    *(double *)(a2 + 16) = v13;
    *(double *)(a2 + 24) = v12;
    *(_QWORD *)(a2 + 32) = v10;
    *(float *)(a2 + 40) = v11;
    *(_BYTE *)(a2 + 44) = v7;
    return result;
  }
  v7 = 0;
  v8 = 0;
  v9 = 1.0;
  v10 = 0;
  v11 = 0.5;
  v12 = 0.0;
  v13 = 0.0;
  v14 = 0;
  v15 = 0.0;
  while (2)
  {
    result = v3[3];
    if (result)
    {
      v20 = v3[4];
      if (v5 < v20)
        goto LABEL_14;
      if (v20 < v5)
        goto LABEL_82;
      v3[3] = 0;
    }
    result = ProtobufDecoder.decodeVarint()();
    if (v2)
      return result;
    if (result <= 7)
      goto LABEL_82;
LABEL_14:
    switch(result >> 3)
    {
      case 1uLL:
        if ((result & 7) != 2)
          goto LABEL_82;
        v21 = (_QWORD *)v3[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
        v23 = v21[2];
        v22 = v21[3];
        if (v23 >= v22 >> 1)
          v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v23 + 1, 1, v21);
        v21[2] = v23 + 1;
        v21[v23 + 4] = v6;
        v3[5] = v21;
        result = ProtobufDecoder.decodeVarint()();
        if (!v2)
        {
          if ((result & 0x8000000000000000) != 0)
          {
            __break(1u);
            goto LABEL_89;
          }
          v24 = v3[1] + result;
          if (v6 < v24)
            goto LABEL_82;
          v3[2] = v24;
          v25 = specialized Color.Resolved.init(from:)(v3);
          v16 = (_QWORD *)v3[5];
          if (!v16[2])
            goto LABEL_90;
          v15 = v25;
          v14 = v26;
          v8 = v27;
          v9 = v28;
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v16);
            v16 = (_QWORD *)result;
            v17 = *(_QWORD *)(result + 16);
            if (!v17)
              goto LABEL_91;
            goto LABEL_6;
          }
          v17 = v16[2];
          if (v17)
            goto LABEL_6;
          goto LABEL_91;
        }
        return result;
      case 2uLL:
        v29 = result & 7;
        switch(v29)
        {
          case 5uLL:
            v40 = (float *)v3[1];
            if (v6 < (unint64_t)(v40 + 1))
              goto LABEL_82;
            v41 = *v40;
            v3[1] = v40 + 1;
            v13 = v41;
            goto LABEL_7;
          case 2uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_95;
            v30 = (double *)v3[1];
            if (v6 < (unint64_t)v30 + result)
              goto LABEL_82;
            v3[3] = 17;
            v3[4] = (char *)v30 + result;
            break;
          case 1uLL:
            v30 = (double *)v3[1];
            break;
          default:
            goto LABEL_82;
        }
        v39 = v30 + 1;
        if (v6 < (unint64_t)(v30 + 1))
          goto LABEL_82;
        v13 = *v30;
        goto LABEL_71;
      case 3uLL:
        if ((result & 7) != 2)
          goto LABEL_82;
        v31 = (_QWORD *)v3[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1, v31);
        v33 = v31[2];
        v32 = v31[3];
        if (v33 >= v32 >> 1)
          v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v32 > 1), v33 + 1, 1, v31);
        v31[2] = v33 + 1;
        v31[v33 + 4] = v6;
        v3[5] = v31;
        result = ProtobufDecoder.decodeVarint()();
        if (v2)
          return result;
        if ((result & 0x8000000000000000) == 0)
        {
          v34 = v3[1] + result;
          if (v6 < v34)
            goto LABEL_82;
          v3[2] = v34;
          v35 = specialized CGPoint.init(from:)(v3);
          v16 = (_QWORD *)v3[5];
          if (!v16[2])
            goto LABEL_92;
          v12 = v35;
          v10 = v36;
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) != 0)
          {
            v17 = v16[2];
            if (!v17)
              goto LABEL_81;
          }
          else
          {
            result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v16);
            v16 = (_QWORD *)result;
            v17 = *(_QWORD *)(result + 16);
            if (!v17)
            {
LABEL_81:
              __break(1u);
LABEL_82:
              lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
              swift_allocError();
              return swift_willThrow();
            }
          }
LABEL_6:
          v18 = v17 - 1;
          v19 = v16[v18 + 4];
          v16[2] = v18;
          v3[5] = v16;
          v3[2] = v19;
LABEL_7:
          v5 = v3[1];
          v6 = v3[2];
          if (v5 >= v6)
            goto LABEL_4;
          continue;
        }
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
LABEL_92:
        __break(1u);
LABEL_93:
        __break(1u);
LABEL_94:
        __break(1u);
LABEL_95:
        __break(1u);
LABEL_96:
        __break(1u);
        __break(1u);
LABEL_97:
        __break(1u);
LABEL_98:
        result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)a2);
        a2 = result;
        for (i = *(_QWORD *)(result + 16); !i; i = *(_QWORD *)(a2 + 16))
        {
          __break(1u);
          result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)a2);
          a2 = result;
          i = *(_QWORD *)(result + 16);
          if (i)
            break;
          __break(1u);
          a2 = v3[5];
          if (!*(_QWORD *)(a2 + 16))
            goto LABEL_97;
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
            goto LABEL_98;
        }
        v44 = i - 1;
        v45 = *(_QWORD *)(a2 + 8 * v44 + 32);
        *(_QWORD *)(a2 + 16) = v44;
        v3[5] = a2;
        v3[2] = v45;
        return result;
      case 4uLL:
        if ((result & 7) == 0)
          goto LABEL_52;
        if ((result & 7) != 2)
          goto LABEL_82;
        result = ProtobufDecoder.decodeVarint()();
        if (v2)
          return result;
        if ((result & 0x8000000000000000) != 0)
          goto LABEL_93;
        v37 = v3[1] + result;
        if (v6 < v37)
          goto LABEL_82;
        v3[3] = 32;
        v3[4] = v37;
LABEL_52:
        result = ProtobufDecoder.decodeVarint()();
        if (v2)
          return result;
        v7 = result;
        goto LABEL_7;
      case 5uLL:
        if ((result & 7) == 2)
        {
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return result;
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_94;
          v38 = (float *)v3[1];
          if (v6 < (unint64_t)v38 + result)
            goto LABEL_82;
          v3[3] = 45;
          v3[4] = (char *)v38 + result;
        }
        else
        {
          if ((result & 7) != 5)
            goto LABEL_82;
          v38 = (float *)v3[1];
        }
        v39 = (double *)(v38 + 1);
        if (v6 < (unint64_t)(v38 + 1))
          goto LABEL_82;
        v11 = *v38;
LABEL_71:
        v3[1] = v39;
        goto LABEL_7;
      default:
        switch(result & 7)
        {
          case 0uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (!v2)
              goto LABEL_7;
            return result;
          case 1uLL:
            v42 = v3[1] + 8;
            if (v6 < v42)
              goto LABEL_82;
            goto LABEL_79;
          case 2uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return result;
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_96;
            v42 = v3[1] + result;
            if (v6 < v42)
              goto LABEL_82;
LABEL_79:
            v3[1] = v42;
            break;
          case 5uLL:
            v42 = v3[1] + 4;
            if (v6 < v42)
              goto LABEL_82;
            goto LABEL_79;
          default:
            goto LABEL_82;
        }
        goto LABEL_7;
    }
  }
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance ResolvedShadowStyle(uint64_t a1)
{
  ResolvedShadowStyle.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance ResolvedShadowStyle@<X0>(unint64_t a1@<X0>, unint64_t a2@<X8>)
{
  return ResolvedShadowStyle.init(from:)(a1, a2);
}

BOOL specialized static ResolvedShadowStyle.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_f32(*(float32x4_t *)a1, *(float32x4_t *)a2)), 0xFuLL))) & 1) != 0
    && *(float *)(a1 + 40) == *(float *)(a2 + 40)
    && *(double *)(a1 + 16) == *(double *)(a2 + 16)
    && *(double *)(a1 + 24) == *(double *)(a2 + 24)
    && *(double *)(a1 + 32) == *(double *)(a2 + 32))
  {
    return *(unsigned __int8 *)(a1 + 44) == *(unsigned __int8 *)(a2 + 44);
  }
  return result;
}

BOOL specialized static ShadowStyle.Storage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  int v11;
  _BOOL8 result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  double v17;
  uint64_t (*v18)(uint64_t);
  double v19;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v5 = *(double *)(a1 + 16);
  v4 = *(double *)(a1 + 24);
  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v9 = *(double *)(a2 + 16);
  v8 = *(double *)(a2 + 24);
  v10 = *(double *)(a2 + 32);
  if ((v3 & 0x8000000000000000) == 0)
  {
    if ((v7 & 0x8000000000000000) == 0)
    {
      v11 = *(_QWORD *)a1;
      outlined consume of ShadowStyle.Storage(*(_QWORD *)a1, v3);
      outlined consume of ShadowStyle.Storage(v6, v7);
      return v11 == v6;
    }
    goto LABEL_6;
  }
  v19 = *(double *)(a1 + 32);
  v13 = v3 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v7 & 0x8000000000000000) == 0)
  {
    swift_retain();
LABEL_6:
    v14 = v6;
    v15 = v7;
LABEL_7:
    outlined copy of ShadowStyle.Storage(v14, v15);
    outlined consume of ShadowStyle.Storage(v2, v3);
    outlined consume of ShadowStyle.Storage(v6, v7);
    return 0;
  }
  if (*(_QWORD *)a1 != v6)
  {
    outlined copy of ShadowStyle.Storage(v6, v7);
    v14 = v2;
    v15 = v3;
    goto LABEL_7;
  }
  if (v13 == (v7 & 0x7FFFFFFFFFFFFFFFLL))
  {
    outlined copy of ShadowStyle.Storage(v6, v7);
    v17 = v19;
    outlined copy of ShadowStyle.Storage(v2, v3);
    outlined consume of ShadowStyle.Storage(v2, v3);
    outlined consume of ShadowStyle.Storage(v6, v7);
    if (v5 != v9)
      return 0;
    return v17 == v10 && v4 == v8;
  }
  v18 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 88);
  outlined copy of ShadowStyle.Storage(v6, v7);
  outlined copy of ShadowStyle.Storage(v2, v3);
  v16 = v18(v7 & 0x7FFFFFFFFFFFFFFFLL);
  outlined consume of ShadowStyle.Storage(v2, v3);
  outlined consume of ShadowStyle.Storage(v6, v7);
  result = 0;
  if ((v16 & 1) != 0)
  {
    v17 = v19;
    if (v5 == v9)
      return v17 == v10 && v4 == v8;
  }
  return result;
}

uint64_t outlined copy of ShadowStyle.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 < 0)
    return swift_retain();
  return result;
}

uint64_t type metadata accessor for _ShadowShapeStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ShadowShapeStyle);
}

uint64_t outlined consume of ShadowStyle.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 < 0)
    return swift_release();
  return result;
}

uint64_t partial apply for closure #2 in _ShadowShapeStyle._apply(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return closure #2 in _ShadowShapeStyle._apply(to:)(a1, v2[4], v2[2], v2[3], a2);
}

void type metadata accessor for _ShadowShapeStyle<AnyShapeStyle>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for _ShadowShapeStyle<AnyShapeStyle>)
  {
    v4 = type metadata accessor for _ShadowShapeStyle(0, (uint64_t)&type metadata for AnyShapeStyle, (uint64_t)&protocol witness table for AnyShapeStyle, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for _ShadowShapeStyle<AnyShapeStyle>);
  }
}

unint64_t lazy protocol witness table accessor for type ShadowStyle.Kind and conformance ShadowStyle.Kind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShadowStyle.Kind and conformance ShadowStyle.Kind;
  if (!lazy protocol witness table cache variable for type ShadowStyle.Kind and conformance ShadowStyle.Kind)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShadowStyle.Kind, &type metadata for ShadowStyle.Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShadowStyle.Kind and conformance ShadowStyle.Kind);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShadowStyle.Kind and conformance ShadowStyle.Kind;
  if (!lazy protocol witness table cache variable for type ShadowStyle.Kind and conformance ShadowStyle.Kind)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShadowStyle.Kind, &type metadata for ShadowStyle.Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShadowStyle.Kind and conformance ShadowStyle.Kind);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShadowStyle.Kind and conformance ShadowStyle.Kind;
  if (!lazy protocol witness table cache variable for type ShadowStyle.Kind and conformance ShadowStyle.Kind)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShadowStyle.Kind, &type metadata for ShadowStyle.Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShadowStyle.Kind and conformance ShadowStyle.Kind);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShadowStyle.Kind and conformance ShadowStyle.Kind;
  if (!lazy protocol witness table cache variable for type ShadowStyle.Kind and conformance ShadowStyle.Kind)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShadowStyle.Kind, &type metadata for ShadowStyle.Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShadowStyle.Kind and conformance ShadowStyle.Kind);
  }
  return result;
}

double sub_234E77494(uint64_t a1)
{
  return ResolvedShadowStyle.animatableData.setter(a1);
}

uint64_t initializeWithCopy for ShadowStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  outlined copy of ShadowStyle.Storage(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

uint64_t assignWithCopy for ShadowStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  outlined copy of ShadowStyle.Storage(*(_QWORD *)a2, v5);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  outlined consume of ShadowStyle.Storage(v9, v10);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for ShadowStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 32) = v4;
  outlined consume of ShadowStyle.Storage(v5, v6);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShadowStyle(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 44))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_DWORD *)(a1 + 1);
  if (v2 > 0x80000000)
    v3 = ~v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for ShadowStyle(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_DWORD *)(a1 + 40) = 0;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 44) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)a1 = (unint64_t)-a2 << 8;
      result = 0.0;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      return result;
    }
    *(_BYTE *)(a1 + 44) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ShadowStyle()
{
  return &type metadata for ShadowStyle;
}

ValueMetadata *type metadata accessor for ShadowStyle.Kind()
{
  return &type metadata for ShadowStyle.Kind;
}

uint64_t type metadata completion function for _ShadowShapeStyle()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _ShadowShapeStyle(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 44 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v12 = *(_QWORD *)v11;
    v13 = *(_QWORD *)(v11 + 8);
    v14 = *(_QWORD *)(v11 + 16);
    v15 = *(_QWORD *)(v11 + 24);
    v16 = *(_QWORD *)(v11 + 32);
    outlined copy of ShadowStyle.Storage(*(_QWORD *)v11, v13);
    *(_QWORD *)v10 = v12;
    *(_QWORD *)(v10 + 8) = v13;
    *(_QWORD *)(v10 + 16) = v14;
    *(_QWORD *)(v10 + 24) = v15;
    *(_QWORD *)(v10 + 32) = v16;
    *(_DWORD *)(v10 + 40) = *(_DWORD *)(v11 + 40);
  }
  return v4;
}

uint64_t destroy for _ShadowShapeStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = (uint64_t *)((a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8);
  return outlined consume of ShadowStyle.Storage(*v4, v4[1]);
}

uint64_t initializeWithCopy for _ShadowShapeStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)v8;
  v10 = *(_QWORD *)(v8 + 8);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = *(_QWORD *)(v8 + 24);
  v13 = *(_QWORD *)(v8 + 32);
  outlined copy of ShadowStyle.Storage(*(_QWORD *)v8, v10);
  *(_QWORD *)v7 = v9;
  *(_QWORD *)(v7 + 8) = v10;
  *(_QWORD *)(v7 + 16) = v11;
  *(_QWORD *)(v7 + 24) = v12;
  *(_QWORD *)(v7 + 32) = v13;
  *(_DWORD *)(v7 + 40) = *(_DWORD *)(v8 + 40);
  return a1;
}

uint64_t assignWithCopy for _ShadowShapeStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)v8;
  v10 = *(_QWORD *)(v8 + 8);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = *(_QWORD *)(v8 + 24);
  v13 = *(_QWORD *)(v8 + 32);
  outlined copy of ShadowStyle.Storage(*(_QWORD *)v8, v10);
  v14 = *(_QWORD *)v7;
  v15 = *(_QWORD *)(v7 + 8);
  *(_QWORD *)v7 = v9;
  *(_QWORD *)(v7 + 8) = v10;
  *(_QWORD *)(v7 + 16) = v11;
  *(_QWORD *)(v7 + 24) = v12;
  *(_QWORD *)(v7 + 32) = v13;
  outlined consume of ShadowStyle.Storage(v14, v15);
  *(_DWORD *)(v7 + 40) = *(_DWORD *)(v8 + 40);
  return a1;
}

uint64_t initializeWithTake for _ShadowShapeStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = *(_OWORD *)((char *)v8 + 28);
  v10 = v8[1];
  *v7 = *v8;
  v7[1] = v10;
  *(_OWORD *)((char *)v7 + 28) = v9;
  return a1;
}

uint64_t assignWithTake for _ShadowShapeStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)(v7 + 32);
  v9 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)v9;
  v11 = *(_QWORD *)(v9 + 8);
  v12 = *(_OWORD *)(v7 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v7;
  *(_OWORD *)(v9 + 16) = v12;
  *(_QWORD *)(v9 + 32) = v8;
  outlined consume of ShadowStyle.Storage(v10, v11);
  *(_DWORD *)(v9 + 40) = *(_DWORD *)(v7 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ShadowShapeStyle(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v9;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 < a2 && *((_BYTE *)a1 + ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 44))
    return v6 + *a1 + 1;
  if (v5 >= 0x7FFFFFFF)
    return (*(uint64_t (**)(void))(v4 + 48))();
  v9 = *(_DWORD *)((((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 1);
  if (v9 > 0x80000000)
    return -v9;
  else
    return 0;
}

double storeEnumTagSinglePayload for _ShadowShapeStyle(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  double result;
  unint64_t v13;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF)
    v8 = 0x7FFFFFFF;
  else
    v8 = *(_DWORD *)(v6 + 84);
  v9 = *(_QWORD *)(v6 + 64);
  v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 44;
  if (v8 >= a2)
  {
    if (v8 < a3)
      a1[v10] = 0;
    if (a2)
    {
      if (v7 < 0x7FFFFFFF)
      {
        v13 = (unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8;
        if ((a2 & 0x80000000) != 0)
        {
          result = 0.0;
          *(_OWORD *)(v13 + 24) = 0u;
          *(_OWORD *)(v13 + 8) = 0u;
          *(_DWORD *)(v13 + 40) = 0;
          *(_QWORD *)v13 = a2 ^ 0x80000000;
        }
        else
        {
          *(_QWORD *)v13 = (unint64_t)-a2 << 8;
          result = 0.0;
          *(_OWORD *)(v13 + 8) = 0u;
          *(_OWORD *)(v13 + 24) = 0u;
        }
      }
      else
      {
        (*(void (**)(_BYTE *))(v6 + 56))(a1);
      }
    }
  }
  else
  {
    v11 = ~v8 + a2;
    bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 44);
    *(_DWORD *)a1 = v11;
    if (v8 < a3)
      a1[v10] = 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ResolvedShadowStyle()
{
  return &type metadata for ResolvedShadowStyle;
}

_UNKNOWN **sub_234E77C3C()
{
  return &protocol witness table for _ShadowShapeStyle<A>;
}

uint64_t destroy for ShadowStyle(uint64_t *a1)
{
  return outlined consume of ShadowStyle.Storage(*a1, a1[1]);
}

uint64_t *initializeWithCopy for ShadowStyle.Storage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  outlined copy of ShadowStyle.Storage(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  return a1;
}

uint64_t *assignWithCopy for ShadowStyle.Storage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  outlined copy of ShadowStyle.Storage(*a2, v4);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  outlined consume of ShadowStyle.Storage(v8, v9);
  return a1;
}

uint64_t assignWithTake for ShadowStyle.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = v3;
  outlined consume of ShadowStyle.Storage(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShadowStyle.Storage(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_DWORD *)(a1 + 1);
  if (v2 > 0x80000000)
    v3 = ~v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for ShadowStyle.Storage(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)a1 = (unint64_t)-a2 << 8;
      result = 0.0;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      return result;
    }
    *(_BYTE *)(a1 + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

_QWORD *destructiveInjectEnumTag for ShadowStyle.Storage(_QWORD *result, uint64_t a2)
{
  uint64_t v2;

  v2 = result[1] & 0xFFFFFFFFFFFFFF8 | (a2 << 63);
  *result = *(unsigned __int8 *)result;
  result[1] = v2;
  return result;
}

ValueMetadata *type metadata accessor for ShadowStyle.Storage()
{
  return &type metadata for ShadowStyle.Storage;
}

uint64_t AnchoredResolvedPaint.init(_:bounds:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>)
{
  return AnchoredResolvedPaint.init(_:bounds:)(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AnchoredResolvedPaint, a4, a5, a6, a7, a8);
}

uint64_t type metadata accessor for AnchoredResolvedPaint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnchoredResolvedPaint);
}

uint64_t _AnchoredShapeStyle.style.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _AnchoredShapeStyle.style.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_AnchoredShapeStyle.style.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double _AnchoredShapeStyle.bounds.getter(uint64_t a1)
{
  uint64_t v1;

  return *(double *)(v1 + *(int *)(a1 + 36));
}

uint64_t _AnchoredShapeStyle.bounds.setter(uint64_t result, double a2, double a3, double a4, double a5)
{
  uint64_t v5;
  double *v6;

  v6 = (double *)(v5 + *(int *)(result + 36));
  *v6 = a2;
  v6[1] = a3;
  v6[2] = a4;
  v6[3] = a5;
  return result;
}

uint64_t (*_AnchoredShapeStyle.bounds.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _AnchoredShapeStyle.init(style:bounds:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>)
{
  return AnchoredResolvedPaint.init(_:bounds:)(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnchoredShapeStyle, a4, a5, a6, a7, a8);
}

uint64_t AnchoredResolvedPaint.init(_:bounds:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(_QWORD, uint64_t, uint64_t)@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>, double a8@<D2>, double a9@<D3>)
{
  uint64_t result;
  double *v18;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a5, a1, a2);
  result = a4(0, a2, a3);
  v18 = (double *)(a5 + *(int *)(result + 36));
  *v18 = a6;
  v18[1] = a7;
  v18[2] = a8;
  v18[3] = a9;
  return result;
}

uint64_t type metadata accessor for _AnchoredShapeStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _AnchoredShapeStyle);
}

double static _AnchoredShapeStyle._makeView<A>(view:inputs:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  ValueMetadata *v16;
  __int128 v17;
  double result;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  int v27;

  v11 = *a1;
  v12 = *(_QWORD *)a2;
  v13 = *(_DWORD *)(a2 + 8);
  v14 = *(_QWORD *)(a2 + 16);
  v15 = *(_DWORD *)(a2 + 80);
  v16 = (ValueMetadata *)type metadata accessor for _AnchoredShapeStyle(0, a3, a5, a4);
  v27 = v11;
  v19 = v12;
  v20 = v13;
  v21 = v14;
  v17 = *(_OWORD *)(a2 + 40);
  v22 = *(_OWORD *)(a2 + 24);
  v23 = v17;
  v24 = *(_OWORD *)(a2 + 56);
  v25 = *(_QWORD *)(a2 + 72);
  v26 = v15;
  *(_QWORD *)&result = static ShapeStyle.legacyMakeShapeView<A>(view:inputs:)(&v27, &v19, v16, a4, (uint64_t)&protocol witness table for _AnchoredShapeStyle<A>, a6, a7).n128_u64[0];
  return result;
}

double protocol witness for static ShapeStyle._makeView<A>(view:inputs:) in conformance _AnchoredShapeStyle<A>@<D0>(int *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return static _AnchoredShapeStyle._makeView<A>(view:inputs:)(a1, a2, *(_QWORD *)(a5 + 16), a3, *(_QWORD *)(a5 + 24), a4, a6);
}

uint64_t _AnchoredShapeStyle._apply(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _OWORD *v3;
  __int128 v4;

  v3 = (_OWORD *)(v2 + *(int *)(a2 + 36));
  v4 = v3[1];
  *(_OWORD *)(a1 + 72) = *v3;
  *(_OWORD *)(a1 + 88) = v4;
  *(_BYTE *)(a1 + 104) = 0;
  return (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 24) + 32))();
}

uint64_t protocol witness for static ShapeStyle._apply(to:) in conformance _AnchoredShapeStyle<A>(uint64_t a1, uint64_t a2)
{
  return static _AnchoredShapeStyle._apply(to:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t static _AnchoredShapeStyle._apply(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t AnchoredResolvedPaint.paint.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t AnchoredResolvedPaint.paint.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*AnchoredResolvedPaint.paint.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double AnchoredResolvedPaint.bounds.getter(uint64_t a1)
{
  uint64_t v1;

  return *(double *)(v1 + *(int *)(a1 + 36));
}

uint64_t AnchoredResolvedPaint.bounds.setter(uint64_t result, double a2, double a3, double a4, double a5)
{
  uint64_t v5;
  double *v6;

  v6 = (double *)(v5 + *(int *)(result + 36));
  *v6 = a2;
  v6[1] = a3;
  v6[2] = a4;
  v6[3] = a5;
  return result;
}

uint64_t (*AnchoredResolvedPaint.bounds.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t AnchoredResolvedPaint.draw(path:style:in:bounds:)(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int32x2_t v14;
  int64x2_t v15;
  float64x2_t v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[2];
  uint64_t v21;
  char v22;
  int8x16_t v23[2];
  unsigned __int8 v24;
  float64x2_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v18 = a2[1];
  v19 = *a2;
  v9 = *((_QWORD *)a2 + 4);
  v10 = *((_BYTE *)a2 + 40);
  v11 = v5 + *(int *)(a5 + 36);
  v12 = *(_QWORD *)(v11 + 16);
  v13 = *(_QWORD *)(v11 + 24);
  v17 = *(float64x2_t *)v11;
  outlined init with take of CGRect?(a4, (uint64_t)v23);
  v14 = vdup_n_s32(v24);
  v15.i64[0] = v14.u32[0];
  v15.i64[1] = v14.u32[1];
  v20[0] = v19;
  v20[1] = v18;
  v21 = v9;
  v22 = v10;
  v25 = vaddq_f64(v17, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v15, 0x3FuLL)), (int8x16_t)vdupq_n_s64(0x8000000000000000), v23[0]));
  v26 = v12;
  v27 = v13;
  v28 = 0;
  return (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, float64x2_t *, _QWORD))(*(_QWORD *)(a5 + 24) + 32))(a1, v20, a3, &v25, *(_QWORD *)(a5 + 16));
}

uint64_t AnchoredResolvedPaint.isClear.getter(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 24) + 40))(*(_QWORD *)(a1 + 16));
}

uint64_t AnchoredResolvedPaint.isOpaque.getter(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 24) + 48))(*(_QWORD *)(a1 + 16));
}

uint64_t AnchoredResolvedPaint.isCALayerCompatible.getter(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 24) + 64))(*(_QWORD *)(a1 + 16));
}

void AnchoredResolvedPaint.animatableData.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  double v8;
  uint64_t v9;
  char *v10;
  _OWORD *v11;
  __int128 v12;
  _OWORD v13[2];

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (char *)v13 - v9;
  (*(void (**)(uint64_t, uint64_t, double))(v6 + 24))(v5, v6, v8);
  v11 = (_OWORD *)(v2 + *(int *)(a1 + 36));
  v12 = v11[1];
  v13[0] = *v11;
  v13[1] = v12;
  type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
  swift_getAssociatedConformanceWitness();
  _s7SwiftUI14AnimatablePairVyS2dGACyxq_GAA16VectorArithmeticAAWlTm_0(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>);
  AnimatablePair.init(_:_:)((uint64_t)v10, AssociatedTypeWitness, a2);
}

void AnchoredResolvedPaint.animatableData.setter(uint64_t a1)
{
  specialized AnchoredResolvedPaint.animatableData.setter(a1);
}

void sub_234E78374()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
  swift_getAssociatedConformanceWitness();
  _s7SwiftUI14AnimatablePairVyS2dGACyxq_GAA16VectorArithmeticAAWlTm_0(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>);
  type metadata accessor for AnimatablePair();
}

uint64_t sub_234E783FC(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

void AnchoredResolvedPaint.animatableData.modify(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;

  v5 = malloc(0x50uLL);
  *a1 = v5;
  v5[4] = a2;
  v5[5] = v2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = _s7SwiftUI14AnimatablePairVyS2dGACyxq_GAA16VectorArithmeticAAWlTm_0(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>);
  *v5 = AssociatedTypeWitness;
  v5[1] = v7;
  v5[2] = AssociatedConformanceWitness;
  v5[3] = v9;
  type metadata accessor for AnimatablePair();
}

void sub_234E784EC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  size_t v4;
  void *v5;

  v2[6] = a1;
  v3 = *(_QWORD *)(a1 - 8);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 + 64);
  v2[8] = malloc(v4);
  v5 = malloc(v4);
  v2[9] = v5;
  AnchoredResolvedPaint.animatableData.getter(v1, (uint64_t)v5);
}

void (*sub_234E78524())(uint64_t a1, char a2)
{
  return AnchoredResolvedPaint.animatableData.modify;
}

void AnchoredResolvedPaint.animatableData.modify(uint64_t a1, char a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 56) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 64), *(_QWORD *)(*(_QWORD *)a1 + 72), *(_QWORD *)(*(_QWORD *)a1 + 48));
    specialized AnchoredResolvedPaint.animatableData.setter(v2);
  }
  specialized AnchoredResolvedPaint.animatableData.setter(*(_QWORD *)(*(_QWORD *)a1 + 72));
}

void static AnchoredResolvedPaint.leafProtobufTag.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

BOOL static AnchoredResolvedPaint.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    return 0;
  v9 = *(int *)(type metadata accessor for AnchoredResolvedPaint(0, a3, a4, v8) + 36);
  return CGRectEqualToRect(*(CGRect *)(a1 + v9), *(CGRect *)(a2 + v9));
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AnchoredResolvedPaint<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static AnchoredResolvedPaint.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

void protocol witness for Animatable.animatableData.setter in conformance AnchoredResolvedPaint<A>(uint64_t a1)
{
  specialized AnchoredResolvedPaint.animatableData.setter(a1);
}

void sub_234E786C4()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
  swift_getAssociatedConformanceWitness();
  _s7SwiftUI14AnimatablePairVyS2dGACyxq_GAA16VectorArithmeticAAWlTm_0(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>);
  type metadata accessor for AnimatablePair();
}

uint64_t sub_234E7874C(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

void protocol witness for Animatable.animatableData.modify in conformance AnchoredResolvedPaint<A>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  AnchoredResolvedPaint.animatableData.modify(v4, a2);
}

void (*sub_234E787AC(uint64_t a1))(_QWORD *a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = a1;
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t AnchoredResolvedPaint.encode(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  double *v6;
  double v7;
  double v8;
  double v9;
  double v10;

  result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a2 + 24) + 80))(a1, *(_QWORD *)(a2 + 16));
  if (!v3)
  {
    v6 = (double *)(v2 + *(int *)(a2 + 36));
    v7 = *v6;
    v8 = v6[1];
    v9 = v6[2];
    v10 = v6[3];
    ProtobufEncoder.encodeVarint(_:)(0x3AuLL);
    return specialized ProtobufEncoder.encodeMessage<A>(_:)(v7, v8, v9, v10);
  }
  return result;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance AnchoredResolvedPaint<A>(uint64_t a1, uint64_t a2)
{
  return AnchoredResolvedPaint.encode(to:)(a1, a2);
}

uint64_t ShapeStyle.in(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>)
{
  uint64_t v7;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t result;
  double *v21;
  uint64_t v22;

  v15 = *(_QWORD *)(a1 - 8);
  v16 = MEMORY[0x24BDAC7A8](a1);
  v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v18, v7, a1, v16);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a3, v18, a1);
  result = type metadata accessor for _AnchoredShapeStyle(0, a1, a2, v19);
  v21 = (double *)(a3 + *(int *)(result + 36));
  *v21 = a4;
  v21[1] = a5;
  v21[2] = a6;
  v21[3] = a7;
  return result;
}

void specialized AnchoredResolvedPaint.animatableData.setter(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  _QWORD v9[6];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))((char *)v9 - v5, a1, AssociatedTypeWitness, v3);
  v6 = type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v8 = _s7SwiftUI14AnimatablePairVyS2dGACyxq_GAA16VectorArithmeticAAWlTm_0(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>);
  v9[2] = AssociatedTypeWitness;
  v9[3] = v6;
  v9[4] = AssociatedConformanceWitness;
  v9[5] = v8;
  type metadata accessor for AnimatablePair();
}

__n128 sub_234E78A20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __n128 *v11;
  __n128 result;

  v8 = v5 + *(int *)(a1 + 52);
  *(_OWORD *)(v7 - 144) = *(_OWORD *)v8;
  v9 = *(_QWORD *)(v8 + 16);
  v10 = *(_QWORD *)(v8 + 24);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v6, v4, v3);
  v11 = (__n128 *)(v2 + *(int *)(v1 + 36));
  result = *(__n128 *)(v7 - 144);
  *v11 = result;
  v11[1].n128_u64[0] = v9;
  v11[1].n128_u64[1] = v10;
  return result;
}

uint64_t instantiation function for generic protocol witness table for AnchoredResolvedPaint<A>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnchoredResolvedPaint<A>);
  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnchoredResolvedPaint<A>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

void sub_234E78AC4(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;

  v5 = type metadata accessor for AnchoredResolvedPaint(0, *(_QWORD *)(a2 + a1 - 16), *(_QWORD *)(a2 + a1 - 8), a3);
  AnchoredResolvedPaint.animatableData.getter(v5, a4);
}

void sub_234E78AFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for AnchoredResolvedPaint(0, *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8), a4);
  specialized AnchoredResolvedPaint.animatableData.setter(a1);
}

uint64_t sub_234E78B38()
{
  return 16;
}

__n128 sub_234E78B44(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata completion function for _AnchoredShapeStyle()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _AnchoredShapeStyle(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  _OWORD *v12;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 32 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_OWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = v10[1];
    v12 = (_OWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v12 = *v10;
    v12[1] = v11;
  }
  return v4;
}

uint64_t initializeWithCopy for _AnchoredShapeStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  return a1;
}

uint64_t assignWithCopy for _AnchoredShapeStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  v7[2] = v8[2];
  v7[3] = v8[3];
  return a1;
}

uint64_t initializeWithTake for _AnchoredShapeStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  return a1;
}

uint64_t assignWithTake for _AnchoredShapeStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  v7[2] = v8[2];
  v7[3] = v8[3];
  return a1;
}

uint64_t getEnumTagSinglePayload for _AnchoredShapeStyle(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(void))(v4 + 48))();
    return 0;
  }
  if (((((*(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 32) & 0xFFFFFFF8) != 0)
    v6 = 2;
  else
    v6 = a2 - v5 + 1;
  if (v6 >= 0x10000)
    v7 = 4;
  else
    v7 = 2;
  if (v6 < 0x100)
    v7 = 1;
  if (v6 >= 2)
    v8 = v7;
  else
    v8 = 0;
  return ((uint64_t (*)(void))((char *)&loc_234E78EA4 + 4 * byte_2352A9950[v8]))();
}

void storeEnumTagSinglePayload for _AnchoredShapeStyle(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v11 = 0;
    if (a2 <= v7)
      goto LABEL_14;
  }
  else
  {
    v8 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFE0)
      v9 = v8 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_14:
      __asm { BR              X11 }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFE0)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 32);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_234E78FE4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_234E78FEC(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x234E78FF4);
}

void sub_234E79010()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_234E79018()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_234E79020(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v4 + v5) = 0;
  if (!a2)
    JUMPOUT(0x234E79028);
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

_UNKNOWN **sub_234E79040()
{
  return &protocol witness table for _AnchoredShapeStyle<A>;
}

uint64_t StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>)
{
  *(double *)a4 = a5;
  *(_DWORD *)(a4 + 8) = result;
  *(_DWORD *)(a4 + 12) = a2;
  *(double *)(a4 + 16) = a6;
  *(_QWORD *)(a4 + 24) = a3;
  *(double *)(a4 + 32) = a7;
  return result;
}

double StrokeStyle.lineWidth.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void StrokeStyle.lineWidth.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*StrokeStyle.lineWidth.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t StrokeStyle.lineCap.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 8);
}

uint64_t StrokeStyle.lineCap.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*StrokeStyle.lineCap.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t StrokeStyle.lineJoin.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 12);
}

uint64_t StrokeStyle.lineJoin.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 12) = result;
  return result;
}

uint64_t (*StrokeStyle.lineJoin.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double StrokeStyle.miterLimit.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void StrokeStyle.miterLimit.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
}

uint64_t (*StrokeStyle.miterLimit.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t StrokeStyle.dash.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t StrokeStyle.dash.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t (*StrokeStyle.dash.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double StrokeStyle.dashPhase.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

void StrokeStyle.dashPhase.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 32) = a1;
}

uint64_t (*StrokeStyle.dashPhase.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance StrokeStyle(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v6 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v8 = *(_QWORD *)(a2 + 32);
  return specialized static StrokeStyle.== infix(_:_:)((uint64_t)v5, (uint64_t)v7);
}

double StrokeStyle.animatableData.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void StrokeStyle.animatableData.setter(double a1, double a2, double a3)
{
  double *v3;

  *v3 = a1;
  v3[2] = a2;
  v3[4] = a3;
}

uint64_t (*StrokeStyle.animatableData.modify(_QWORD *a1))()
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  a1[3] = v1;
  v2 = v1[2];
  v3 = v1[4];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v3;
  return StrokeStyle.animatableData.modify;
}

double protocol witness for Animatable.animatableData.getter in conformance StrokeStyle@<D0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  double result;
  uint64_t v3;
  uint64_t v4;

  result = *(double *)v1;
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 32);
  *a1 = *(_QWORD *)v1;
  a1[1] = v3;
  a1[2] = v4;
  return result;
}

double protocol witness for Animatable.animatableData.setter in conformance StrokeStyle(uint64_t a1)
{
  _QWORD *v1;
  double result;
  uint64_t v3;
  uint64_t v4;

  result = *(double *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v1 = *(_QWORD *)a1;
  v1[2] = v3;
  v1[4] = v4;
  return result;
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance StrokeStyle(_QWORD *a1))()
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  a1[3] = v1;
  v2 = v1[2];
  v3 = v1[4];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v3;
  return StrokeStyle.animatableData.modify;
}

double StrokeStyle.animatableData.modify(uint64_t a1)
{
  _QWORD *v1;
  double result;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD **)(a1 + 24);
  result = *(double *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v1 = *(_QWORD *)a1;
  v1[2] = v3;
  v1[4] = v4;
  return result;
}

BOOL specialized static StrokeStyle.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(double *)a1 == *(double *)a2
      && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
      && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
      && *(double *)(a1 + 16) == *(double *)(a2 + 16)
      && specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24))
      && *(double *)(a1 + 32) == *(double *)(a2 + 32);
}

uint64_t associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in StrokeStyle()
{
  return _s7SwiftUI14AnimatablePairVyS2dGACyxq_GAA16VectorArithmeticAAWlTm_0(&lazy protocol witness table cache variable for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>);
}

double sub_234E792FC@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  double result;
  uint64_t v3;
  uint64_t v4;

  result = *(double *)a1;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 32);
  *a2 = *(_QWORD *)a1;
  a2[1] = v3;
  a2[2] = v4;
  return result;
}

double sub_234E79314(uint64_t a1, _QWORD *a2)
{
  double result;
  uint64_t v3;
  uint64_t v4;

  result = *(double *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *a2 = *(_QWORD *)a1;
  a2[2] = v3;
  a2[4] = v4;
  return result;
}

uint64_t destroy for StrokeStyle()
{
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for StrokeStyle(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  *a1 = *a2;
  a1[1] = a2[1];
  v3 = a2[3];
  a1[2] = a2[2];
  a1[3] = v3;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for StrokeStyle(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

_QWORD *assignWithTake for StrokeStyle(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  return a1;
}

ValueMetadata *type metadata accessor for StrokeStyle()
{
  return &type metadata for StrokeStyle;
}

uint64_t Image.renderingMode(_:)(char *a1, uint64_t a2)
{
  char v3;
  uint64_t v4;

  v3 = *a1;
  type metadata accessor for ImageProviderBox<Image.RenderingModeProvider>(0);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a2;
  *(_BYTE *)(v4 + 24) = v3;
  swift_retain();
  return v4;
}

void type metadata accessor for ImageProviderBox<Image.RenderingModeProvider>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ImageProviderBox<Image.RenderingModeProvider>)
  {
    v2 = lazy protocol witness table accessor for type Image.RenderingModeProvider and conformance Image.RenderingModeProvider();
    v4 = type metadata accessor for ImageProviderBox(a1, (uint64_t)&type metadata for Image.RenderingModeProvider, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.RenderingModeProvider>);
  }
}

unint64_t lazy protocol witness table accessor for type Image.RenderingModeProvider and conformance Image.RenderingModeProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Image.RenderingModeProvider and conformance Image.RenderingModeProvider;
  if (!lazy protocol witness table cache variable for type Image.RenderingModeProvider and conformance Image.RenderingModeProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Image.RenderingModeProvider, &type metadata for Image.RenderingModeProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.RenderingModeProvider and conformance Image.RenderingModeProvider);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Image.RenderingModeProvider and conformance Image.RenderingModeProvider;
  if (!lazy protocol witness table cache variable for type Image.RenderingModeProvider and conformance Image.RenderingModeProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Image.RenderingModeProvider, &type metadata for Image.RenderingModeProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.RenderingModeProvider and conformance Image.RenderingModeProvider);
  }
  return result;
}

ValueMetadata *type metadata accessor for Image.RenderingModeProvider()
{
  return &type metadata for Image.RenderingModeProvider;
}

double Image.RenderingModeProvider.resolve(in:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  __int16 v14;
  __int16 v15;
  uint64_t v16;
  char v17;
  __int16 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  double result;
  __int128 v25;
  _BYTE v26[15];
  unsigned __int8 v27;
  __int128 v28;
  _OWORD v29[2];
  _BYTE v30[32];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[19];

  v5 = type metadata accessor for ImageResolutionContext();
  MEMORY[0x24BDAC7A8](v5);
  v7 = &v26[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v8);
  v10 = (__int128 *)&v26[-v9];
  v11 = *v2;
  v12 = *((_BYTE *)v2 + 8);
  outlined init with copy of ImageResolutionContext(a1, (uint64_t)v7);
  v29[0] = *v7;
  LOBYTE(v28) = v12;
  if ((EnvironmentValues.imageIsTemplate(renderingMode:)((unsigned __int8 *)&v28) & 1) == 0)
  {
    v13 = *(int *)(v5 + 32);
    if (*((_BYTE *)v7 + v13) == 8)
      *((_BYTE *)v7 + v13) = 1;
  }
  outlined init with take of ImageResolutionContext((uint64_t)v7, (uint64_t)v10);
  (*(void (**)(_OWORD *__return_ptr, __int128 *))(*(_QWORD *)v11 + 80))(v29, v10);
  if (BYTE8(v29[0]) != 2)
  {
    v14 = BYTE8(v29[0]) != 255;
    v28 = *v10;
    v27 = v12;
    v15 = EnvironmentValues.imageIsTemplate(renderingMode:)(&v27);
    v16 = 0x3F8000003F800000;
    if ((v15 & 1) == 0)
      v16 = 0;
    *(_QWORD *)&v30[12] = v16;
    *(_QWORD *)&v30[20] = v16;
    v30[28] = (v15 & 1) == 0;
    v17 = v37[18] & 2;
    v18 = v14 & v15;

    *(_QWORD *)&v37[8] = 0;
    *(_WORD *)&v37[16] = v18;
    v37[18] = v17;
  }
  outlined destroy of ImageResolutionContext((uint64_t)v10);
  v19 = v36;
  v20 = *(_OWORD *)v37;
  v21 = v34;
  *(_OWORD *)(a2 + 128) = v35;
  *(_OWORD *)(a2 + 144) = v19;
  *(_OWORD *)(a2 + 160) = v20;
  *(_DWORD *)(a2 + 175) = *(_DWORD *)&v37[15];
  v22 = v32;
  *(_OWORD *)(a2 + 64) = v31;
  *(_OWORD *)(a2 + 80) = v22;
  *(_OWORD *)(a2 + 96) = v33;
  *(_OWORD *)(a2 + 112) = v21;
  v23 = v29[1];
  *(_OWORD *)a2 = v29[0];
  *(_OWORD *)(a2 + 16) = v23;
  result = *(double *)v30;
  v25 = *(_OWORD *)&v30[16];
  *(_OWORD *)(a2 + 32) = *(_OWORD *)v30;
  *(_OWORD *)(a2 + 48) = v25;
  return result;
}

double Image.RenderingModeProvider.resolveNamedImage(in:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  double result;
  __int128 v17;
  _BYTE v18[15];
  unsigned __int8 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v5 = type metadata accessor for ImageResolutionContext();
  MEMORY[0x24BDAC7A8](v5);
  v7 = &v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v8);
  v10 = (__int128 *)&v18[-v9];
  v11 = *v2;
  v12 = *((_BYTE *)v2 + 8);
  outlined init with copy of ImageResolutionContext(a1, (uint64_t)v7);
  v21 = *v7;
  LOBYTE(v20) = v12;
  if ((EnvironmentValues.imageIsTemplate(renderingMode:)((unsigned __int8 *)&v20) & 1) == 0)
  {
    v13 = *(int *)(v5 + 32);
    if (*((_BYTE *)v7 + v13) == 8)
      *((_BYTE *)v7 + v13) = 1;
  }
  outlined init with take of ImageResolutionContext((uint64_t)v7, (uint64_t)v10);
  (*(void (**)(__int128 *__return_ptr, __int128 *))(*(_QWORD *)v11 + 88))(&v21, v10);
  v14 = *((_QWORD *)&v21 + 1);
  if (*((_QWORD *)&v21 + 1))
  {
    v20 = *v10;
    v19 = v12;
    v15 = EnvironmentValues.imageIsTemplate(renderingMode:)(&v19);
    outlined destroy of ImageResolutionContext((uint64_t)v10);
    BYTE14(v22) = v15 & 1;
  }
  else
  {
    outlined destroy of ImageResolutionContext((uint64_t)v10);
  }
  *(_QWORD *)a2 = v21;
  *(_QWORD *)(a2 + 8) = v14;
  result = *(double *)&v22;
  v17 = v23;
  *(_OWORD *)(a2 + 16) = v22;
  *(_OWORD *)(a2 + 32) = v17;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Image.RenderingModeProvider(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Image.RenderingModeProvider and conformance Image.RenderingModeProvider();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t specialized static Image.RenderingModeProvider.== infix(_:_:)(unsigned __int8 *a1, uint64_t a2)
{
  int v2;
  int v3;

  v2 = a1[8];
  v3 = *(unsigned __int8 *)(a2 + 8);
  if (*(_QWORD *)a1 != *(_QWORD *)a2 && ((*(uint64_t (**)(void))(**(_QWORD **)a1 + 96))() & 1) == 0)
    return 0;
  if (v2 == 2)
  {
    if (v3 != 2)
      return 0;
  }
  else if (v3 == 2 || ((v3 ^ v2) & 1) != 0)
  {
    return 0;
  }
  return 1;
}

void TypesettingLanguage.resolve(with:locale:)(uint64_t (*a1)(uint64_t, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t (*v22)(_QWORD);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[2];
  uint64_t v43;
  uint64_t v44;

  v5 = v4;
  v42[0] = a2;
  v42[1] = a3;
  v8 = type metadata accessor for Locale.Language();
  v9 = (void (*)(uint64_t))MEMORY[0x24BDCEE28];
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v42 - v14;
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Locale.LanguageCode?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEB60], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)v42 - v17;
  v19 = type metadata accessor for TypesettingLanguage.Storage(0);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TypesettingLanguage(v5, (uint64_t)v21, v22);
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), v9);
  v24 = v23;
  v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 48))(v21, 2, v23);
  if (!(_DWORD)v25)
  {
    v31 = v21[*(int *)(v24 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v21, v8);
    v32 = Locale.Language.maximalIdentifier.getter();
    v34 = v33;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v8);
    *(_QWORD *)a4 = v32;
    *(_QWORD *)(a4 + 8) = v34;
    *(_BYTE *)(a4 + 16) = v31;
    *(_BYTE *)(a4 + 17) = 0;
    return;
  }
  if ((_DWORD)v25 == 1)
    goto LABEL_10;
  if (a1)
  {
    v27 = a1(v25, v26);
    v28 = (void *)MEMORY[0x23B7C5DAC](v27);
    swift_bridgeObjectRelease();
    v29 = (void *)CTFontCopyTallestTextStyleLanguageForString();

    if (v29)
    {
      v43 = 0;
      v44 = 0;
      static String._conditionallyBridgeFromObjectiveC(_:result:)();

      v30 = v44;
      if (v44)
      {
        *(_QWORD *)a4 = v43;
        *(_QWORD *)(a4 + 8) = v30;
        *(_WORD *)(a4 + 16) = 256;
        return;
      }
    }
  }
  Locale.language.getter();
  Locale.Language.languageCode.getter();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v8);
  v35 = type metadata accessor for Locale.LanguageCode();
  v36 = *(_QWORD *)(v35 - 8);
  v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48))(v18, 1, v35);
  if ((_DWORD)v37 == 1)
  {
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)v18, (uint64_t)&lazy cache variable for type metadata for Locale.LanguageCode?, (uint64_t)MEMORY[0x24BDCEB60], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))type metadata accessor for [(_:)]);
LABEL_10:
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_WORD *)(a4 + 16) = 512;
    return;
  }
  v39 = MEMORY[0x23B7C5200](v37, v38);
  v41 = v40;
  (*(void (**)(char *, uint64_t))(v36 + 8))(v18, v35);
  *(_QWORD *)a4 = v39;
  *(_QWORD *)(a4 + 8) = v41;
  *(_WORD *)(a4 + 16) = 1;
}

uint64_t TypesettingLanguage.Flags.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t TypesettingLanguage.Flags.rawValue.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*TypesettingLanguage.Flags.rawValue.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t TypesettingLanguage.Flags.init(rawValue:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static TypesettingLanguage.Flags.modifyFont.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t TypesettingLanguage.storage.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of TypesettingLanguage(v1, a1, type metadata accessor for TypesettingLanguage.Storage);
}

uint64_t TypesettingLanguage.storage.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of TypesettingLanguage.Storage(a1, v1);
}

uint64_t (*TypesettingLanguage.storage.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t one-time initialization function for automatic(uint64_t a1)
{
  return one-time initialization function for automatic(a1, static TypesettingLanguage.automatic, 1);
}

uint64_t static TypesettingLanguage.automatic.getter@<X0>(uint64_t a1@<X8>)
{
  return static TypesettingLanguage.automatic.getter(&one-time initialization token for automatic, (uint64_t)static TypesettingLanguage.automatic, a1);
}

uint64_t static TypesettingLanguage.explicit(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), (void (*)(uint64_t))MEMORY[0x24BDCEE28]);
  v5 = v4;
  v6 = *(int *)(v4 + 48);
  v7 = type metadata accessor for Locale.Language();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, a1, v7);
  *(_BYTE *)(a2 + v6) = 1;
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a2, 0, 2, v5);
}

uint64_t one-time initialization function for contentAware(uint64_t a1)
{
  return one-time initialization function for automatic(a1, static TypesettingLanguage.contentAware, 2);
}

uint64_t one-time initialization function for automatic(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = type metadata accessor for TypesettingLanguage(0);
  __swift_allocate_value_buffer(v5, a2);
  v6 = __swift_project_value_buffer(v5, (uint64_t)a2);
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), (void (*)(uint64_t))MEMORY[0x24BDCEE28]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, a3, 2, v7);
}

uint64_t static TypesettingLanguage.contentAware.getter@<X0>(uint64_t a1@<X8>)
{
  return static TypesettingLanguage.automatic.getter(one-time initialization token for contentAware, (uint64_t)static TypesettingLanguage.contentAware, a1);
}

uint64_t static TypesettingLanguage.automatic.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = type metadata accessor for TypesettingLanguage(0);
  v6 = __swift_project_value_buffer(v5, a2);
  return outlined init with copy of TypesettingLanguage(v6, a3, type metadata accessor for TypesettingLanguage);
}

void one-time initialization function for languageModifiers()
{
  static AnyFontModifier.languageModifiers = (_UNKNOWN *)MEMORY[0x24BEE4B00];
}

void LanguageFontModifier.modify(descriptor:in:)(CTFontDescriptorRef *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const __CTFontDescriptor *v7;
  void *v8;
  CFTypeRef v9;
  uint64_t inited;
  id v11;
  const __CFDictionary *isa;
  CTFontDescriptorRef CopyWithAttributes;

  v7 = *a1;
  v8 = (void *)*MEMORY[0x24BDC4CA8];
  v9 = CTFontDescriptorCopyAttribute(*a1, (CFStringRef)*MEMORY[0x24BDC4CA8]);
  swift_unknownObjectRelease();
  if (!v9)
  {
    type metadata accessor for _ContiguousArrayStorage<(CFStringRef, String)>();
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_23527E860;
    *(_QWORD *)(inited + 32) = v8;
    *(_QWORD *)(inited + 40) = a3;
    *(_QWORD *)(inited + 48) = a4;
    v11 = v8;
    swift_bridgeObjectRetain();
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    type metadata accessor for CFStringRef(0);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    CopyWithAttributes = CTFontDescriptorCreateCopyWithAttributes(v7, isa);

    *a1 = CopyWithAttributes;
  }
}

void protocol witness for FontModifier.modify(descriptor:in:) in conformance LanguageFontModifier(CTFontDescriptorRef *a1, uint64_t a2)
{
  uint64_t *v2;

  LanguageFontModifier.modify(descriptor:in:)(a1, a2, *v2, v2[1]);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LanguageFontModifier()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LanguageFontModifier()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LanguageFontModifier()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LanguageFontModifier(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t View.typesettingLanguage(_:isEnabled:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *KeyPath;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v14 = a4;
  v7 = type metadata accessor for Locale.Language();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x24BDAC7A8](v7);
  KeyPath = (uint64_t *)swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  v11 = (*(unsigned __int8 *)(v8 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v12 = swift_allocObject();
  *(_BYTE *)(v12 + 16) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v12 + v11, (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  View.transformEnvironment<A>(_:transform:)(KeyPath, (uint64_t)partial apply for closure #1 in View.typesettingLanguage(_:isEnabled:), v12, a3, v14);
  swift_release();
  return swift_release();
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *KeyPath;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v8 = type metadata accessor for TypesettingLanguage(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x24BDAC7A8](v8);
  KeyPath = (uint64_t *)swift_getKeyPath();
  outlined init with copy of TypesettingLanguage(a1, (uint64_t)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for TypesettingLanguage);
  v12 = (*(unsigned __int8 *)(v9 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v13 = swift_allocObject();
  *(_BYTE *)(v13 + 16) = a2;
  outlined init with take of TypesettingLanguage((uint64_t)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v13 + v12);
  View.transformEnvironment<A>(_:transform:)(KeyPath, (uint64_t)partial apply for closure #1 in View.typesettingLanguage(_:isEnabled:), v13, a3, a4);
  swift_release();
  return swift_release();
}

uint64_t key path getter for EnvironmentValues.typesettingConfiguration : EnvironmentValues@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  swift_retain();
  v4 = swift_retain();
  specialized EnvironmentValues.subscript.getter(v4, v3, a2);
  swift_release();
  return swift_release();
}

uint64_t key path setter for EnvironmentValues.typesettingConfiguration : EnvironmentValues(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v2 = type metadata accessor for TypesettingConfiguration();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v9 - v6;
  outlined init with copy of TypesettingLanguage(a1, (uint64_t)&v9 - v6, (uint64_t (*)(_QWORD))type metadata accessor for TypesettingConfiguration);
  outlined init with copy of TypesettingLanguage((uint64_t)v7, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for TypesettingConfiguration);
  specialized EnvironmentValues.subscript.setter((uint64_t)v4);
  return outlined destroy of TypesettingConfiguration((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for TypesettingConfiguration);
}

uint64_t closure #1 in View.typesettingLanguage(_:isEnabled:)(uint64_t result, char a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if ((a2 & 1) != 0)
  {
    v4 = result;
    outlined destroy of TypesettingConfiguration(result, type metadata accessor for TypesettingLanguage);
    type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), (void (*)(uint64_t))MEMORY[0x24BDCEE28]);
    v6 = v5;
    v7 = *(int *)(v5 + 48);
    v8 = type metadata accessor for Locale.Language();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v4, a3, v8);
    *(_BYTE *)(v4 + v7) = 1;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v4, 0, 2, v6);
    result = type metadata accessor for TypesettingConfiguration();
    v9 = v4 + *(int *)(result + 20);
    *(_QWORD *)v9 = 0;
    *(_BYTE *)(v9 + 8) = 1;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if ((a2 & 1) != 0)
  {
    v3 = result;
    outlined assign with copy of TypesettingLanguage(a3, result);
    result = type metadata accessor for TypesettingConfiguration();
    v4 = v3 + *(int *)(result + 20);
    *(_QWORD *)v4 = 0;
    *(_BYTE *)(v4 + 8) = 1;
  }
  return result;
}

uint64_t LanguageTextModifier.modify(style:environment:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = v1 + OBJC_IVAR____TtC7SwiftUI20LanguageTextModifier_language;
  v3 = a1 + *(int *)(type metadata accessor for Text.Style(0) + 84);
  outlined assign with copy of TypesettingLanguage(v2, v3);
  result = type metadata accessor for TypesettingConfiguration();
  v5 = v3 + *(int *)(result + 20);
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  return result;
}

uint64_t LanguageTextModifier.isEqual(to:)()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  result = swift_dynamicCastClass();
  if (result)
  {
    v2 = result + OBJC_IVAR____TtC7SwiftUI20LanguageTextModifier_language;
    v3 = v0 + OBJC_IVAR____TtC7SwiftUI20LanguageTextModifier_language;
    swift_retain();
    LOBYTE(v3) = specialized static TypesettingLanguage.Storage.== infix(_:_:)(v2, v3);
    swift_release();
    return v3 & 1;
  }
  return result;
}

uint64_t LanguageTextModifier.__ivar_destroyer()
{
  uint64_t v0;

  return outlined destroy of TypesettingConfiguration(v0 + OBJC_IVAR____TtC7SwiftUI20LanguageTextModifier_language, type metadata accessor for TypesettingLanguage);
}

uint64_t LanguageTextModifier.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of TypesettingConfiguration(v0 + OBJC_IVAR____TtC7SwiftUI20LanguageTextModifier_language, type metadata accessor for TypesettingLanguage);
  return swift_deallocClassInstance();
}

uint64_t Text.typesettingLanguage(_:isEnabled:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5, _QWORD *a6)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v24;

  v12 = type metadata accessor for TypesettingLanguage(0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), (void (*)(uint64_t))MEMORY[0x24BDCEE28]);
    v16 = v15;
    v17 = *(int *)(v15 + 48);
    v18 = type metadata accessor for Locale.Language();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v14, a1, v18);
    v14[v17] = 1;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v14, 0, 2, v16);
    type metadata accessor for LanguageTextModifier(0);
    v19 = swift_allocObject();
    outlined init with take of TypesettingLanguage((uint64_t)v14, v19 + OBJC_IVAR____TtC7SwiftUI20LanguageTextModifier_language);
    outlined copy of Text.Storage(a3, a4, a5 & 1);
    swift_bridgeObjectRetain();
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      a6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a6[2] + 1, 1, a6);
    v21 = a6[2];
    v20 = a6[3];
    if (v21 >= v20 >> 1)
      a6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v21 + 1, 1, a6);
    a6[2] = v21 + 1;
    v22 = &a6[2 * v21];
    v22[4] = v19;
    *((_BYTE *)v22 + 40) = -64;
    swift_release();
  }
  else
  {
    outlined copy of Text.Storage(a3, a4, a5 & 1);
    swift_bridgeObjectRetain();
  }
  return a3;
}

{
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _BYTE v21[16];

  v12 = type metadata accessor for TypesettingLanguage(0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  v15 = &v21[-v14];
  if ((a2 & 1) != 0)
  {
    outlined init with copy of TypesettingLanguage(a1, (uint64_t)&v21[-v14], type metadata accessor for TypesettingLanguage);
    type metadata accessor for LanguageTextModifier(0);
    v16 = swift_allocObject();
    outlined init with take of TypesettingLanguage((uint64_t)v15, v16 + OBJC_IVAR____TtC7SwiftUI20LanguageTextModifier_language);
    outlined copy of Text.Storage(a3, a4, a5 & 1);
    swift_bridgeObjectRetain();
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      a6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a6[2] + 1, 1, a6);
    v18 = a6[2];
    v17 = a6[3];
    if (v18 >= v17 >> 1)
      a6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, a6);
    a6[2] = v18 + 1;
    v19 = &a6[2 * v18];
    v19[4] = v16;
    *((_BYTE *)v19 + 40) = -64;
    swift_release();
  }
  else
  {
    outlined copy of Text.Storage(a3, a4, a5 & 1);
    swift_bridgeObjectRetain();
  }
  return a3;
}

BOOL specialized static TypesettingLanguage.Storage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  uint64_t v21;
  int v22;
  _BOOL8 v23;
  uint64_t (*v24)(_QWORD);
  int v26;
  char v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;

  v4 = type metadata accessor for Locale.Language();
  v5 = (void (*)(uint64_t))MEMORY[0x24BDCEE28];
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TypesettingLanguage.Storage(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (TypesettingLanguage.Storage, TypesettingLanguage.Storage)();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (uint64_t)&v14[*(int *)(v15 + 48)];
  outlined init with copy of TypesettingLanguage(a1, (uint64_t)v14, type metadata accessor for TypesettingLanguage.Storage);
  outlined init with copy of TypesettingLanguage(a2, v16, type metadata accessor for TypesettingLanguage.Storage);
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), v5);
  v18 = v17;
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48);
  v20 = v19(v14, 2, v17);
  if (!v20)
  {
    outlined init with copy of TypesettingLanguage((uint64_t)v14, (uint64_t)v11, type metadata accessor for TypesettingLanguage.Storage);
    v21 = *(int *)(v18 + 48);
    v22 = v11[v21];
    if (!v19((char *)v16, 2, v18))
    {
      v26 = *(unsigned __int8 *)(v16 + v21);
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v8, v16, v4);
      v27 = static Locale.Language.== infix(_:_:)();
      v28 = *(void (**)(char *, uint64_t))(v6 + 8);
      v28(v11, v4);
      if ((v27 & 1) != 0)
      {
        v23 = v22 == v26;
        v28(v8, v4);
      }
      else
      {
        v28(v8, v4);
        v23 = 0;
      }
      goto LABEL_9;
    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v4);
    goto LABEL_10;
  }
  if (v20 == 1)
  {
    if (v19((char *)v16, 2, v18) != 1)
      goto LABEL_10;
    goto LABEL_8;
  }
  if (v19((char *)v16, 2, v18) != 2)
  {
LABEL_10:
    v23 = 0;
    v24 = (uint64_t (*)(_QWORD))type metadata accessor for (TypesettingLanguage.Storage, TypesettingLanguage.Storage);
    goto LABEL_11;
  }
LABEL_8:
  v23 = 1;
LABEL_9:
  v24 = type metadata accessor for TypesettingLanguage.Storage;
LABEL_11:
  outlined destroy of TypesettingConfiguration((uint64_t)v14, v24);
  return v23;
}

uint64_t type metadata accessor for TypesettingLanguage.Storage(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for TypesettingLanguage.Storage);
}

uint64_t outlined assign with take of TypesettingLanguage.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TypesettingLanguage.Storage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for TypesettingLanguage(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for TypesettingLanguage);
}

uint64_t sub_234E7AC04()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for Locale.Language();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.typesettingLanguage(_:isEnabled:)(uint64_t a1)
{
  return partial apply for closure #1 in View.typesettingLanguage(_:isEnabled:)(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BDCEE28], (uint64_t (*)(uint64_t, _QWORD, uint64_t))closure #1 in View.typesettingLanguage(_:isEnabled:));
}

{
  return partial apply for closure #1 in View.typesettingLanguage(_:isEnabled:)(a1, type metadata accessor for TypesettingLanguage, (uint64_t (*)(uint64_t, _QWORD, uint64_t))closure #1 in View.typesettingLanguage(_:isEnabled:));
}

uint64_t sub_234E7AC78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TypesettingLanguage(0) - 8) + 80);
  v2 = (v1 + 17) & ~v1;
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), (void (*)(uint64_t))MEMORY[0x24BDCEE28]);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v0 + v2, 2, v3))
  {
    v4 = type metadata accessor for Locale.Language();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v0 + v2, v4);
  }
  return swift_deallocObject();
}

uint64_t outlined init with take of TypesettingLanguage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TypesettingLanguage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in View.typesettingLanguage(_:isEnabled:)(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(uint64_t, _QWORD, uint64_t))
{
  uint64_t v3;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(a2(0) - 8) + 80);
  return a3(a1, *(unsigned __int8 *)(v3 + 16), v3 + ((v5 + 17) & ~v5));
}

uint64_t type metadata accessor for LanguageTextModifier(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for LanguageTextModifier);
}

unint64_t lazy protocol witness table accessor for type TypesettingLanguage.Flags and conformance TypesettingLanguage.Flags()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TypesettingLanguage.Flags and conformance TypesettingLanguage.Flags;
  if (!lazy protocol witness table cache variable for type TypesettingLanguage.Flags and conformance TypesettingLanguage.Flags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TypesettingLanguage.Flags, &type metadata for TypesettingLanguage.Flags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TypesettingLanguage.Flags and conformance TypesettingLanguage.Flags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TypesettingLanguage.Flags and conformance TypesettingLanguage.Flags;
  if (!lazy protocol witness table cache variable for type TypesettingLanguage.Flags and conformance TypesettingLanguage.Flags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TypesettingLanguage.Flags, &type metadata for TypesettingLanguage.Flags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TypesettingLanguage.Flags and conformance TypesettingLanguage.Flags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TypesettingLanguage.Flags and conformance TypesettingLanguage.Flags;
  if (!lazy protocol witness table cache variable for type TypesettingLanguage.Flags and conformance TypesettingLanguage.Flags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TypesettingLanguage.Flags, &type metadata for TypesettingLanguage.Flags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TypesettingLanguage.Flags and conformance TypesettingLanguage.Flags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TypesettingLanguage.Flags and conformance TypesettingLanguage.Flags;
  if (!lazy protocol witness table cache variable for type TypesettingLanguage.Flags and conformance TypesettingLanguage.Flags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TypesettingLanguage.Flags, &type metadata for TypesettingLanguage.Flags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TypesettingLanguage.Flags and conformance TypesettingLanguage.Flags);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TypesettingLanguage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(type metadata accessor for TypesettingLanguage.Storage(0) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), (void (*)(uint64_t))MEMORY[0x24BDCEE28]);
    v7 = v6;
    v8 = *(_QWORD *)(v6 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v6))
    {
      memcpy(a1, a2, *(_QWORD *)(v4 + 64));
    }
    else
    {
      v10 = type metadata accessor for Locale.Language();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      *((_BYTE *)a1 + *(int *)(v7 + 48)) = *((_BYTE *)a2 + *(int *)(v7 + 48));
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
    }
  }
  return a1;
}

void *initializeWithCopy for TypesettingLanguage(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), (void (*)(uint64_t))MEMORY[0x24BDCEE28]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 2, v4))
  {
    v7 = type metadata accessor for TypesettingLanguage.Storage(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    v8 = type metadata accessor for Locale.Language();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    *((_BYTE *)a1 + *(int *)(v5 + 48)) = *((_BYTE *)a2 + *(int *)(v5 + 48));
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  return a1;
}

_BYTE *assignWithCopy for TypesettingLanguage(_BYTE *a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_BYTE *, uint64_t, uint64_t);
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), (void (*)(uint64_t))MEMORY[0x24BDCEE28]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  v7 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 2, v4);
  v9 = v7(a2, 2, v5);
  if (!v8)
  {
    if (!v9)
    {
      v13 = type metadata accessor for Locale.Language();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(a1, a2, v13);
      a1[*(int *)(v5 + 48)] = a2[*(int *)(v5 + 48)];
      return a1;
    }
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)a1, (uint64_t)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), (uint64_t)MEMORY[0x24BDCEE28], (uint64_t)&type metadata for TypesettingLanguage.Flags, (uint64_t (*)(_QWORD))type metadata accessor for (Locale.Language, TypesettingLanguage.Flags));
    goto LABEL_6;
  }
  if (v9)
  {
LABEL_6:
    v11 = type metadata accessor for TypesettingLanguage.Storage(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    return a1;
  }
  v10 = type metadata accessor for Locale.Language();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
  a1[*(int *)(v5 + 48)] = a2[*(int *)(v5 + 48)];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  return a1;
}

void *initializeWithTake for TypesettingLanguage(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), (void (*)(uint64_t))MEMORY[0x24BDCEE28]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 2, v4))
  {
    v7 = type metadata accessor for TypesettingLanguage.Storage(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    v8 = type metadata accessor for Locale.Language();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    *((_BYTE *)a1 + *(int *)(v5 + 48)) = *((_BYTE *)a2 + *(int *)(v5 + 48));
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  return a1;
}

_BYTE *assignWithTake for TypesettingLanguage(_BYTE *a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_BYTE *, uint64_t, uint64_t);
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), (void (*)(uint64_t))MEMORY[0x24BDCEE28]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  v7 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 2, v4);
  v9 = v7(a2, 2, v5);
  if (!v8)
  {
    if (!v9)
    {
      v13 = type metadata accessor for Locale.Language();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(a1, a2, v13);
      a1[*(int *)(v5 + 48)] = a2[*(int *)(v5 + 48)];
      return a1;
    }
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)a1, (uint64_t)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), (uint64_t)MEMORY[0x24BDCEE28], (uint64_t)&type metadata for TypesettingLanguage.Flags, (uint64_t (*)(_QWORD))type metadata accessor for (Locale.Language, TypesettingLanguage.Flags));
    goto LABEL_6;
  }
  if (v9)
  {
LABEL_6:
    v11 = type metadata accessor for TypesettingLanguage.Storage(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    return a1;
  }
  v10 = type metadata accessor for Locale.Language();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
  a1[*(int *)(v5 + 48)] = a2[*(int *)(v5 + 48)];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for TypesettingLanguage()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_234E7B448(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TypesettingLanguage.Storage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for TypesettingLanguage()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_234E7B490(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TypesettingLanguage.Storage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata completion function for TypesettingLanguage()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for TypesettingLanguage.Storage(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for TypesettingLanguage.Flags()
{
  return &type metadata for TypesettingLanguage.Flags;
}

uint64_t *initializeBufferWithCopyOfBuffer for TypesettingLanguage.Storage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), (void (*)(uint64_t))MEMORY[0x24BDCEE28]);
    v8 = v7;
    v9 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 2, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v11 = type metadata accessor for Locale.Language();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      *((_BYTE *)a1 + *(int *)(v8 + 48)) = *((_BYTE *)a2 + *(int *)(v8 + 48));
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 2, v8);
    }
  }
  return a1;
}

uint64_t destroy for TypesettingLanguage(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), (void (*)(uint64_t))MEMORY[0x24BDCEE28]);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 2, v2);
  if (!(_DWORD)result)
  {
    v4 = type metadata accessor for Locale.Language();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  return result;
}

void *initializeWithCopy for TypesettingLanguage.Storage(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), (void (*)(uint64_t))MEMORY[0x24BDCEE28]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v9 = type metadata accessor for Locale.Language();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
    *((_BYTE *)a1 + *(int *)(v7 + 48)) = *((_BYTE *)a2 + *(int *)(v7 + 48));
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
  }
  return a1;
}

_BYTE *assignWithCopy for TypesettingLanguage.Storage(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_BYTE *, uint64_t, uint64_t);
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v14;

  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), (void (*)(uint64_t))MEMORY[0x24BDCEE28]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  v9 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48);
  v10 = v9(a1, 2, v6);
  v11 = v9(a2, 2, v7);
  if (!v10)
  {
    if (!v11)
    {
      v14 = type metadata accessor for Locale.Language();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(a1, a2, v14);
      a1[*(int *)(v7 + 48)] = a2[*(int *)(v7 + 48)];
      return a1;
    }
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)a1, (uint64_t)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), (uint64_t)MEMORY[0x24BDCEE28], (uint64_t)&type metadata for TypesettingLanguage.Flags, (uint64_t (*)(_QWORD))type metadata accessor for (Locale.Language, TypesettingLanguage.Flags));
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  v12 = type metadata accessor for Locale.Language();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
  a1[*(int *)(v7 + 48)] = a2[*(int *)(v7 + 48)];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
  return a1;
}

void *initializeWithTake for TypesettingLanguage.Storage(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), (void (*)(uint64_t))MEMORY[0x24BDCEE28]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v9 = type metadata accessor for Locale.Language();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    *((_BYTE *)a1 + *(int *)(v7 + 48)) = *((_BYTE *)a2 + *(int *)(v7 + 48));
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
  }
  return a1;
}

_BYTE *assignWithTake for TypesettingLanguage.Storage(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_BYTE *, uint64_t, uint64_t);
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v14;

  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), (void (*)(uint64_t))MEMORY[0x24BDCEE28]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  v9 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48);
  v10 = v9(a1, 2, v6);
  v11 = v9(a2, 2, v7);
  if (!v10)
  {
    if (!v11)
    {
      v14 = type metadata accessor for Locale.Language();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(a1, a2, v14);
      a1[*(int *)(v7 + 48)] = a2[*(int *)(v7 + 48)];
      return a1;
    }
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)a1, (uint64_t)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), (uint64_t)MEMORY[0x24BDCEE28], (uint64_t)&type metadata for TypesettingLanguage.Flags, (uint64_t (*)(_QWORD))type metadata accessor for (Locale.Language, TypesettingLanguage.Flags));
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  v12 = type metadata accessor for Locale.Language();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
  a1[*(int *)(v7 + 48)] = a2[*(int *)(v7 + 48)];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for TypesettingLanguage.Storage()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_234E7BB10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), (void (*)(uint64_t))MEMORY[0x24BDCEE28]);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 3)
    return v5 - 2;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TypesettingLanguage.Storage()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_234E7BB80(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 2);
  else
    v5 = 0;
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), (void (*)(uint64_t))MEMORY[0x24BDCEE28]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t getEnumTag for TypesettingLanguage.Storage(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), (void (*)(uint64_t))MEMORY[0x24BDCEE28]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 2, v2);
}

uint64_t destructiveInjectEnumTag for TypesettingLanguage.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), (void (*)(uint64_t))MEMORY[0x24BDCEE28]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 2, v4);
}

uint64_t type metadata completion function for TypesettingLanguage.Storage()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Locale.Language();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t ObjC metadata update function for LanguageTextModifier()
{
  return type metadata accessor for LanguageTextModifier(0);
}

uint64_t type metadata completion function for LanguageTextModifier()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for TypesettingLanguage.Storage(319);
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_234E7BD7C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v1 = *a1;
  v2 = a1[1];
  type metadata accessor for [(_:)](255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<TypesettingConfiguration>, (uint64_t (*)(uint64_t))type metadata accessor for TypesettingConfiguration, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyTransformModifier);
  v5 = type metadata accessor for ModifiedContent(255, v1, v3, v4);
  v7[0] = v2;
  v7[1] = &protocol witness table for _EnvironmentKeyTransformModifier<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v7);
}

uint64_t outlined assign with copy of TypesettingLanguage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TypesettingLanguage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t specialized static AnyFontModifier.languageModifier(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  void *v10;

  if (one-time initialization token for languageModifiers != -1)
    swift_once();
  swift_beginAccess();
  v4 = static AnyFontModifier.languageModifiers;
  if (!*((_QWORD *)static AnyFontModifier.languageModifiers + 2))
    goto LABEL_7;
  swift_bridgeObjectRetain();
  v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v6 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_7:
    swift_endAccess();
    type metadata accessor for AnyDynamicFontModifier<LanguageFontModifier>(0);
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = a1;
    *(_QWORD *)(v7 + 24) = a2;
    swift_beginAccess();
    swift_bridgeObjectRetain_n();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v10 = static AnyFontModifier.languageModifiers;
    static AnyFontModifier.languageModifiers = (_UNKNOWN *)0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v7, a1, a2, isUniquelyReferenced_nonNull_native);
    static AnyFontModifier.languageModifiers = v10;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    return v7;
  }
  v7 = *(_QWORD *)(v4[7] + 8 * v5);
  swift_endAccess();
  swift_retain();
  swift_bridgeObjectRelease();
  return v7;
}

void type metadata accessor for AnyDynamicFontModifier<LanguageFontModifier>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for AnyDynamicFontModifier<LanguageFontModifier>)
  {
    v2 = lazy protocol witness table accessor for type LanguageFontModifier and conformance LanguageFontModifier();
    v4 = type metadata accessor for AnyDynamicFontModifier(a1, (uint64_t)&type metadata for LanguageFontModifier, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for AnyDynamicFontModifier<LanguageFontModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type LanguageFontModifier and conformance LanguageFontModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LanguageFontModifier and conformance LanguageFontModifier;
  if (!lazy protocol witness table cache variable for type LanguageFontModifier and conformance LanguageFontModifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LanguageFontModifier, &type metadata for LanguageFontModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageFontModifier and conformance LanguageFontModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LanguageFontModifier and conformance LanguageFontModifier;
  if (!lazy protocol witness table cache variable for type LanguageFontModifier and conformance LanguageFontModifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LanguageFontModifier, &type metadata for LanguageFontModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageFontModifier and conformance LanguageFontModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LanguageFontModifier and conformance LanguageFontModifier;
  if (!lazy protocol witness table cache variable for type LanguageFontModifier and conformance LanguageFontModifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LanguageFontModifier, &type metadata for LanguageFontModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageFontModifier and conformance LanguageFontModifier);
  }
  return result;
}

void type metadata accessor for (TypesettingLanguage.Storage, TypesettingLanguage.Storage)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (TypesettingLanguage.Storage, TypesettingLanguage.Storage))
  {
    type metadata accessor for TypesettingLanguage.Storage(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (TypesettingLanguage.Storage, TypesettingLanguage.Storage));
  }
}

ValueMetadata *type metadata accessor for LanguageFontModifier()
{
  return &type metadata for LanguageFontModifier;
}

unint64_t instantiation function for generic protocol witness table for LanguageFontModifier(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type LanguageFontModifier and conformance LanguageFontModifier();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<(CFStringRef, String)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, String)>)
  {
    type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(255, (unint64_t *)&lazy cache variable for type metadata for (CFStringRef, String), type metadata accessor for CFStringRef);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, String)>);
  }
}

void type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

uint64_t Transaction._disablesPageScrollAnimations.getter(uint64_t a1)
{
  return Transaction.isContinuous.getter(a1, (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t Transaction.scrollTargetAnchor.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_retain();
  v1 = specialized closure #1 in PropertyList.subscript.getter(v0);
  swift_release();
  return v1;
}

uint64_t Transaction.scrollTargetAnchor.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  char v6;

  v6 = a3 & 1;
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v3, a1, a2, v6);
  return swift_release();
}

uint64_t Transaction.scrollPositionUpdatePreservesVelocity.getter(uint64_t a1)
{
  return Transaction.isContinuous.getter(a1, (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t key path getter for Transaction.scrollTargetAnchor : Transaction@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t result;

  v2 = swift_retain();
  v3 = specialized closure #1 in PropertyList.subscript.getter(v2);
  v5 = v4;
  v7 = v6;
  result = swift_release();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v7 & 1;
  return result;
}

uint64_t key path setter for Transaction.scrollTargetAnchor : Transaction(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_BYTE *)(a1 + 16);
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3, v4, v5);
  return swift_release();
}

void (*Transaction.scrollTargetAnchor.modify(_QWORD *a1))(uint64_t **a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[6] = v1;
  v4 = swift_retain();
  v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
  v7 = v6;
  v9 = v8;
  v3[7] = 0;
  swift_release();
  *v3 = v5;
  v3[1] = v7;
  *((_BYTE *)v3 + 16) = v9 & 1;
  return Transaction.scrollTargetAnchor.modify;
}

void Transaction.scrollTargetAnchor.modify(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v1 = *a1;
  v2 = (uint64_t *)(*a1)[6];
  v3 = **a1;
  v4 = (*a1)[1];
  v5 = *((_BYTE *)*a1 + 16);
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3, v4, v5);
  swift_release();
  free(v1);
}

uint64_t Transaction._disablesPageScrollAnimations.setter(uint64_t a1)
{
  return Transaction.fromScrollView.setter(a1, (void (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

void (*Transaction._disablesPageScrollAnimations.modify(_QWORD *a1))(char **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  char v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = swift_retain();
  v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
  v3[4] = 0;
  swift_release();
  *((_BYTE *)v3 + 40) = v5 & 1;
  return Transaction._disablesPageScrollAnimations.modify;
}

void Transaction._disablesPageScrollAnimations.modify(char **a1, char a2)
{
  _GraphInputs.scrollTargetRemovePreference.modify(a1, a2, (void (*)(uint64_t, uint64_t, char *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t Transaction.isPageScrollAnimated.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  char v7;

  v0 = swift_retain();
  v1 = specialized find<A>(_:key:)(v0);
  if (!v1)
  {
    swift_release();
LABEL_6:
    v7 = 0;
    return v7 & 1;
  }
  v2 = *(_QWORD *)(v1 + 72);
  swift_release();
  if (!v2)
    goto LABEL_6;
  v3 = swift_retain();
  v4 = specialized closure #1 in PropertyList.subscript.getter(v3);
  swift_release();
  if ((v4 & 1) != 0)
    goto LABEL_6;
  v5 = swift_retain();
  v6 = specialized closure #1 in PropertyList.subscript.getter(v5);
  swift_release();
  v7 = v6 ^ 1;
  return v7 & 1;
}

uint64_t Transaction.scrollPositionUpdatePreservesVelocity.setter(uint64_t a1)
{
  return Transaction.fromScrollView.setter(a1, (void (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

void (*Transaction.scrollPositionUpdatePreservesVelocity.modify(_QWORD *a1))(char **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  char v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = swift_retain();
  v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
  v3[4] = 0;
  swift_release();
  *((_BYTE *)v3 + 40) = v5 & 1;
  return Transaction.scrollPositionUpdatePreservesVelocity.modify;
}

void Transaction.scrollPositionUpdatePreservesVelocity.modify(char **a1, char a2)
{
  _GraphInputs.scrollTargetRemovePreference.modify(a1, a2, (void (*)(uint64_t, uint64_t, char *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t sub_234E7C6D8@<X0>(_BYTE *a1@<X8>)
{
  return key path getter for Transaction.isContinuous : Transaction((uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a1);
}

uint64_t sub_234E7C6F4(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Transaction.isContinuous : Transaction(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t sub_234E7C710@<X0>(_BYTE *a1@<X8>)
{
  return key path getter for Transaction.isContinuous : Transaction((uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a1);
}

uint64_t sub_234E7C72C(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Transaction.isContinuous : Transaction(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

ValueMetadata *type metadata accessor for Transaction.ScrollTargetAnchorKey()
{
  return &type metadata for Transaction.ScrollTargetAnchorKey;
}

ValueMetadata *type metadata accessor for Transaction.DisabledPageScrollAnimationKey()
{
  return &type metadata for Transaction.DisabledPageScrollAnimationKey;
}

ValueMetadata *type metadata accessor for Transaction.ScrollPreservesVelocityKey()
{
  return &type metadata for Transaction.ScrollPreservesVelocityKey;
}

uint64_t NSAttributedString.range.getter()
{
  void *v0;

  objc_msgSend(v0, sel_length);
  return 0;
}

uint64_t NSAttributedString.replacingLineBreakModes(_:)(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  id v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t result;
  uint64_t v10;
  id v11;
  _QWORD aBlock[6];
  uint64_t v13;

  v13 = 0;
  if (one-time initialization token for kitParagraphStyle != -1)
    swift_once();
  v3 = static NSAttributedStringKey.kitParagraphStyle;
  v4 = objc_msgSend(v1, sel_length);
  v5 = (_QWORD *)swift_allocObject();
  v5[2] = a1;
  v5[3] = &v13;
  v5[4] = v1;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = partial apply for closure #1 in NSAttributedString.replacingLineBreakModes(_:);
  *(_QWORD *)(v6 + 24) = v5;
  aBlock[4] = partial apply for thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  aBlock[5] = v6;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  aBlock[3] = &block_descriptor_20;
  v7 = _Block_copy(aBlock);
  v8 = v1;
  swift_retain();
  swift_release();
  objc_msgSend(v8, sel_enumerateAttribute_inRange_options_usingBlock_, v3, 0, v4, 0x100000, v7);
  _Block_release(v7);
  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v3 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v10 = v13;
    if (v13)
    {
      swift_release();
      return v10;
    }
    else
    {
      v11 = v8;
      swift_release();
      return (uint64_t)v11;
    }
  }
  return result;
}

uint64_t NSAttributedString.firstAttribute<A>(_:name:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  void *v3;
  void *v4;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  _QWORD aBlock[6];

  v4 = v3;
  v18 = a3;
  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v17 - v10;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)(a2 - 8) + 56))((char *)&v17 - v10, 1, 1, a2, v9);
  v12 = objc_msgSend(v4, sel_length);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a2;
  *(_QWORD *)(v13 + 24) = v11;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = partial apply for closure #1 in NSAttributedString.firstAttribute<A>(_:name:);
  *(_QWORD *)(v14 + 24) = v13;
  aBlock[4] = thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  aBlock[3] = &block_descriptor_13_1;
  v15 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v4, sel_enumerateAttribute_inRange_options_usingBlock_, a1, 0, v12, 0, v15);
  _Block_release(v15);
  LOBYTE(a1) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((a1 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v18, v11, v7);
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in NSAttributedString.firstAttribute<A>(_:name:)(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  int v17;
  uint64_t v18;
  uint64_t result;
  _BYTE v20[32];

  v10 = type metadata accessor for Optional();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = &v20[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v14);
  v16 = &v20[-v15];
  outlined init with copy of Any?(a1, (uint64_t)v20);
  type metadata accessor for Any?();
  v17 = swift_dynamicCast();
  v18 = *(_QWORD *)(a6 - 8);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v16, v17 ^ 1u, 1, a6);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v11 + 40))(a5, v16, v10);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 16))(v13, a5, v10);
  LODWORD(a6) = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v18 + 48))(v13, 1, a6);
  result = (*(uint64_t (**)(_BYTE *, uint64_t))(v11 + 8))(v13, v10);
  if ((_DWORD)a6 != 1)
    *a4 = 1;
  return result;
}

void closure #1 in NSAttributedString.replacingLineBreakModes(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, id a5, void **a6, void *a7)
{
  void *v12;
  int v13;
  id v14;
  void *v15;
  uint64_t v16;
  id v17;
  id v18;
  _BYTE v19[24];
  uint64_t v20;

  outlined init with copy of Any?(a1, (uint64_t)v19);
  if (v20)
  {
    type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSParagraphStyle);
    if ((swift_dynamicCast() & 1) != 0)
    {
      if (objc_msgSend(v18, sel_lineBreakMode) == a5)
      {
LABEL_11:

        return;
      }
      objc_msgSend(v18, sel_mutableCopy);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSMutableParagraphStyle);
      swift_dynamicCast();
      objc_msgSend(v18, sel_setLineBreakMode_, a5);
      v12 = *a6;
      if (*a6)
        goto LABEL_8;
      objc_msgSend(a7, sel_mutableCopy);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableAttributedString);
      v13 = swift_dynamicCast();
      v14 = v18;
      if (!v13)
        v14 = 0;
      v15 = *a6;
      *a6 = v14;

      v12 = *a6;
      if (*a6)
      {
LABEL_8:
        v16 = one-time initialization token for kitParagraphStyle;
        v17 = v12;
        if (v16 != -1)
          swift_once();
        objc_msgSend(v17, sel_addAttribute_value_range_, static NSAttributedStringKey.kitParagraphStyle, v18, a2, a3);

        goto LABEL_11;
      }

    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v19);
  }
}

uint64_t sub_234E7CE90()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in NSAttributedString.replacingLineBreakModes(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  closure #1 in NSAttributedString.replacingLineBreakModes(_:)(a1, a2, a3, a4, *(id *)(v4 + 16), *(void ***)(v4 + 24), *(void **)(v4 + 32));
}

uint64_t sub_234E7CEC0()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_20()
{
  return swift_release();
}

uint64_t NSMutableAttributedString.addUniformAttribute(_:value:)(uint64_t a1, _QWORD *a2)
{
  void *v2;

  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  objc_msgSend(v2, sel_addAttribute_value_range_, a1, _bridgeAnythingToObjectiveC<A>(_:)(), 0, objc_msgSend(v2, sel_length));
  return swift_unknownObjectRelease();
}

Swift::Void __swiftcall NSMutableAttributedString.addUniformAttributes(_:)(Swift::OpaquePointer a1)
{
  void *v1;
  Class isa;

  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v1, sel_addAttributes_range_, isa, 0, objc_msgSend(v1, sel_length));

}

Swift::Void __swiftcall NSMutableAttributedString.mergeAttributes(_:in:)(Swift::OpaquePointer _, __C::_NSRange_optional in)
{
  void *v2;
  id length;
  Swift::Int location;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  Class isa;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  Class v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  int64_t v25;
  _QWORD aBlock[6];
  uint64_t v27;

  length = (id)in.value.length;
  location = in.value.location;
  if (in.is_nil)
  {
    length = objc_msgSend(v2, sel_length);
    location = 0;
  }
  if (!length)
    return;
  v27 = MEMORY[0x24BEE4B00];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = &v27;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = partial apply for closure #1 in NSMutableAttributedString.mergeAttributes(_:in:);
  *(_QWORD *)(v6 + 24) = v5;
  aBlock[4] = partial apply for thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  aBlock[5] = v6;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  aBlock[3] = &block_descriptor_22_0;
  v7 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v2, sel_enumerateAttributesInRange_options_usingBlock_, location, length, 0, v7);
  _Block_release(v7);
  LOBYTE(v7) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v7 & 1) != 0)
    goto LABEL_29;
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v9 = v2;
  objc_msgSend(v2, sel_setAttributes_range_, isa, location, length);

  v10 = v27;
  v24 = v27 + 64;
  v11 = 1 << *(_BYTE *)(v27 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v27 + 64);
  v25 = (unint64_t)(v11 + 63) >> 6;
  swift_bridgeObjectRetain();
  v14 = 0;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v14 << 6);
      goto LABEL_9;
    }
    v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v25)
      goto LABEL_25;
    v22 = *(_QWORD *)(v24 + 8 * v21);
    ++v14;
    if (!v22)
    {
      v14 = v21 + 1;
      if (v21 + 1 >= v25)
        goto LABEL_25;
      v22 = *(_QWORD *)(v24 + 8 * v14);
      if (!v22)
      {
        v14 = v21 + 2;
        if (v21 + 2 >= v25)
          goto LABEL_25;
        v22 = *(_QWORD *)(v24 + 8 * v14);
        if (!v22)
          break;
      }
    }
LABEL_24:
    v13 = (v22 - 1) & v22;
    v16 = __clz(__rbit64(v22)) + (v14 << 6);
LABEL_9:
    v17 = (uint64_t *)(*(_QWORD *)(v10 + 48) + 16 * v16);
    v18 = *v17;
    v19 = v17[1];
    swift_bridgeObjectRetain();
    v20 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v9, sel_addAttributes_range_, v20, v18, v19);

  }
  v23 = v21 + 3;
  if (v23 >= v25)
  {
LABEL_25:
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    return;
  }
  v22 = *(_QWORD *)(v24 + 8 * v23);
  if (v22)
  {
    v14 = v23;
    goto LABEL_24;
  }
  while (1)
  {
    v14 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v14 >= v25)
      goto LABEL_25;
    v22 = *(_QWORD *)(v24 + 8 * v14);
    ++v23;
    if (v22)
      goto LABEL_24;
  }
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
}

uint64_t closure #1 in NSMutableAttributedString.mergeAttributes(_:in:)(uint64_t a1, Swift::UInt a2, Swift::UInt a3, uint64_t a4, uint64_t *a5)
{
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;

  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *a5;
  *a5 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, isUniquelyReferenced_nonNull_native);
  *a5 = v11;
  return swift_bridgeObjectRelease();
}

uint64_t NSAttributedString.runs(in:)(uint64_t a1, id a2, char a3)
{
  void *v3;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  uint64_t v11;
  _QWORD aBlock[6];
  uint64_t v13;

  v13 = MEMORY[0x24BEE4AF8];
  if ((a3 & 1) != 0)
  {
    a2 = objc_msgSend(v3, sel_length);
    a1 = 0;
  }
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = &v13;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = partial apply for closure #1 in NSAttributedString.runs(in:);
  *(_QWORD *)(v7 + 24) = v6;
  aBlock[4] = thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
  aBlock[5] = v7;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  aBlock[3] = &block_descriptor_32;
  v8 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v3, sel_enumerateAttributesInRange_options_usingBlock_, a1, a2, 0, v8);
  _Block_release(v8);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v11 = v13;
    swift_release();
    return v11;
  }
  return result;
}

uint64_t closure #1 in NSAttributedString.runs(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  _QWORD *v9;
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;

  v9 = (_QWORD *)*a5;
  swift_bridgeObjectRetain();
  result = swift_isUniquelyReferenced_nonNull_native();
  *a5 = (uint64_t)v9;
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
    v9 = (_QWORD *)result;
    *a5 = result;
  }
  v12 = v9[2];
  v11 = v9[3];
  if (v12 >= v11 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v9);
    v9 = (_QWORD *)result;
    *a5 = result;
  }
  v9[2] = v12 + 1;
  v13 = &v9[3 * v12];
  v13[4] = a2;
  v13[5] = a3;
  v13[6] = a1;
  return result;
}

uint64_t sub_234E7D608()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NSAttributedString.firstAttribute<A>(_:name:)(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v4;

  return closure #1 in NSAttributedString.firstAttribute<A>(_:name:)(a1, a2, a3, a4, *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 16));
}

uint64_t sub_234E7D620()
{
  return swift_deallocObject();
}

uint64_t sub_234E7D630()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NSMutableAttributedString.mergeAttributes(_:in:)(uint64_t a1, Swift::UInt a2, Swift::UInt a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in NSMutableAttributedString.mergeAttributes(_:in:)(a1, a2, a3, a4, *(uint64_t **)(v4 + 16));
}

uint64_t sub_234E7D648()
{
  return swift_deallocObject();
}

uint64_t sub_234E7D658()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NSAttributedString.runs(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in NSAttributedString.runs(in:)(a1, a2, a3, a4, *(uint64_t **)(v4 + 16));
}

uint64_t sub_234E7D670()
{
  return swift_deallocObject();
}

uint64_t EnvironmentValues.lineLimit.getter()
{
  return EnvironmentValues.lineLimit.getter(specialized PropertyList.Tracker.value<A>(_:for:), specialized find<A>(_:key:));
}

uint64_t EnvironmentValues.lowerLineLimit.getter()
{
  return EnvironmentValues.lineLimit.getter(specialized PropertyList.Tracker.value<A>(_:for:), specialized find<A>(_:key:));
}

uint64_t EnvironmentValues.lineLimit.getter(uint64_t (*a1)(uint64_t), uint64_t (*a2)(uint64_t))
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v3 = *v2;
  if (v2[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = a1(v3);
    swift_release_n();
    swift_release_n();
  }
  else
  {
    v7 = swift_retain_n();
    v8 = a2(v7);
    if (v8)
      v5 = *(_QWORD *)(v8 + 72);
    else
      v5 = 0;
    swift_release_n();
  }
  return v5;
}

uint64_t EnvironmentValues.lineLimit.setter(uint64_t a1, char a2)
{
  return EnvironmentValues.lineLimit.setter(a1, a2, (void (*)(uint64_t *, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.lowerLineLimit.setter(uint64_t a1, char a2)
{
  return EnvironmentValues.lineLimit.setter(a1, a2, (void (*)(uint64_t *, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.lineLimit.setter(uint64_t a1, char a2, void (*a3)(uint64_t *, uint64_t, uint64_t, uint64_t *), void (*a4)(uint64_t, uint64_t))
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v8 = a2 & 1;
  v9 = *v4;
  swift_retain_n();
  a3(v4, a1, v8, &v12);
  swift_release();
  if (v4[1])
  {
    v10 = *v4;
    swift_retain();
    swift_retain();
    a4(v9, v10);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t protocol witness for static EnvironmentModifier.makeEnvironment(modifier:environment:) in conformance LineLimitModifier()
{
  uint64_t Value;
  uint64_t v1;

  Value = AGGraphGetValue();
  specialized EnvironmentValues.subscript.setter(*(_QWORD *)(Value + 16), *(_BYTE *)(Value + 24));
  v1 = AGGraphGetValue();
  return specialized EnvironmentValues.subscript.setter(*(_QWORD *)v1, *(_BYTE *)(v1 + 8));
}

uint64_t View.lineLimit(_:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t *KeyPath;
  uint64_t v10;
  char v11;

  KeyPath = (uint64_t *)swift_getKeyPath();
  v10 = a1;
  v11 = a2 & 1;
  View.environment<A>(_:_:)(KeyPath, (uint64_t)&v10, a3, a4);
  return swift_release();
}

uint64_t View.lineLimit(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v4 = a1;
  v5 = 0;
  v6 = 0;
  v7 = 1;
  return View.modifier<A>(_:)(&v4, a2, &type metadata for LineLimitModifier, a3);
}

{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v4 = 0;
  v5 = 1;
  v6 = a1;
  v7 = 0;
  return View.modifier<A>(_:)(&v4, a2, &type metadata for LineLimitModifier, a3);
}

uint64_t View.lineLimit(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;

  v5 = a1;
  v6 = 0;
  v7 = a2;
  v8 = 0;
  return View.modifier<A>(_:)(&v5, a3, &type metadata for LineLimitModifier, a4);
}

uint64_t View.lineLimit(_:reservesSpace:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  char v9;

  if ((a2 & 1) != 0)
    v4 = a1;
  else
    v4 = 0;
  v6 = v4;
  v7 = (a2 & 1) == 0;
  v8 = a1;
  v9 = 0;
  return View.modifier<A>(_:)(&v6, a3, &type metadata for LineLimitModifier, a4);
}

void (*EnvironmentValues.lineLimit.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  char v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  *v3 = EnvironmentValues.lineLimit.getter();
  *((_BYTE *)v3 + 8) = v4 & 1;
  return EnvironmentValues.lineLimit.modify;
}

void EnvironmentValues.lineLimit.modify(uint64_t **a1, char a2)
{
  EnvironmentValues.lineLimit.modify(a1, a2, (void (*)(uint64_t *, uint64_t, uint64_t, _QWORD **))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void (*EnvironmentValues.lowerLineLimit.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  char v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  *v3 = EnvironmentValues.lowerLineLimit.getter();
  *((_BYTE *)v3 + 8) = v4 & 1;
  return EnvironmentValues.lowerLineLimit.modify;
}

void EnvironmentValues.lowerLineLimit.modify(uint64_t **a1, char a2)
{
  EnvironmentValues.lineLimit.modify(a1, a2, (void (*)(uint64_t *, uint64_t, uint64_t, _QWORD **))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void EnvironmentValues.lineLimit.modify(uint64_t **a1, char a2, void (*a3)(uint64_t *, uint64_t, uint64_t, _QWORD **), void (*a4)(uint64_t, uint64_t))
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD **v12;
  uint64_t v13;

  v7 = *a1;
  v8 = (uint64_t *)(*a1)[4];
  v9 = **a1;
  v10 = *((unsigned __int8 *)*a1 + 8);
  v11 = *v8;
  swift_retain_n();
  if ((a2 & 1) != 0)
    v12 = (_QWORD **)(v7 + 2);
  else
    v12 = (_QWORD **)(v7 + 3);
  a3(v8, v9, v10, v12);
  swift_release();
  if (v8[1])
  {
    v13 = *(_QWORD *)v7[4];
    swift_retain();
    swift_retain();
    a4(v11, v13);
    swift_release();
    swift_release();
  }
  swift_release();
  free(v7);
}

uint64_t sub_234E7DC28@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_234E7DC58(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t sub_234E7DC84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return keypath_get_1Tm_0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))EnvironmentValues.lineLimit.getter, a3);
}

uint64_t sub_234E7DC90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return keypath_get_1Tm_0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))EnvironmentValues.lowerLineLimit.getter, a3);
}

uint64_t keypath_get_1Tm_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t)@<X3>, uint64_t a4@<X8>)
{
  uint64_t result;
  char v6;

  result = a3(a1, a2);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t sub_234E7DCDC(uint64_t a1)
{
  return EnvironmentValues.lowerLineLimit.setter(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t sub_234E7DD08(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v1 = *a1;
  v2 = a1[1];
  type metadata accessor for _EnvironmentKeyWritingModifier<Int?>(255);
  v5 = type metadata accessor for ModifiedContent(255, v1, v3, v4);
  v7[0] = v2;
  v7[1] = &protocol witness table for _EnvironmentKeyWritingModifier<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v7);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Int?>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Int?>)
  {
    type metadata accessor for Int?();
    v5 = type metadata accessor for _EnvironmentKeyWritingModifier(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Int?>);
  }
}

uint64_t sub_234E7DDB8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[1];
  v5 = type metadata accessor for ModifiedContent(255, *a1, (uint64_t)&type metadata for LineLimitModifier, a4);
  v7[0] = v4;
  v7[1] = &protocol witness table for LineLimitModifier;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v7);
}

ValueMetadata *type metadata accessor for LineLimitModifier()
{
  return &type metadata for LineLimitModifier;
}

ValueMetadata *type metadata accessor for EnvironmentValues.LowerLineLimitKey()
{
  return &type metadata for EnvironmentValues.LowerLineLimitKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.LineLimitKey()
{
  return &type metadata for EnvironmentValues.LineLimitKey;
}

uint64_t ResolvedStyledText.StringDrawing.__allocating_init(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(void *a1, uint64_t a2, uint64_t a3, char *a4, char a5, __int16 *a6, uint64_t *a7, uint64_t *a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, uint64_t a17, uint64_t a18, double a19, char a20)
{
  double v27;
  double v28;
  double v29;
  double v30;

  swift_allocObject();
  return ResolvedStyledText.StringDrawing.init(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, v27, v28, v29, v30, a17, a18, a19,
           a20 & 1);
}

uint64_t NSAttributedString.Metrics.update(layoutMargins:pixelLength:)(double a1, double a2, double a3, double a4, double a5)
{
  double *v5;
  double *v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  double v16;
  double *v17;
  double v18;
  double *v19;
  double v20;
  void (*v21)(char *, _QWORD, uint64_t);
  void (*v22)(char *, uint64_t);
  double v23;
  uint64_t v25;

  v6 = v5;
  v12 = type metadata accessor for FloatingPointRoundingRule();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1 + a3 + v5[1];
  v17 = v5 + 4;
  v18 = v5[4];
  *v5 = a2 + a4 + *v5;
  v5[1] = v16;
  v5[4] = v18 + a1;
  v20 = v5[3];
  v19 = v5 + 3;
  *v19 = v20 + a1;
  v21 = *(void (**)(char *, _QWORD, uint64_t))(v13 + 104);
  v21(v15, *MEMORY[0x24BEE38D0], v12);
  specialized FloatingPoint.round(_:toMultipleOf:)(v15, a5);
  v22 = *(void (**)(char *, uint64_t))(v13 + 8);
  v22(v15, v12);
  v23 = *v19 - (v20 + a1);
  v6[5] = v23;
  *v17 = v23 + *v17;
  v21(v15, *MEMORY[0x24BEE38E0], v12);
  specialized FloatingPoint.round(_:toMultipleOf:)(v15, a5);
  return ((uint64_t (*)(char *, uint64_t))v22)(v15, v12);
}

uint64_t NSAttributedString.measured(requestedSize:lineLimit:lowerLineLimit:minScaleFactor:bodyHeadOutdent:widthIsFlexible:kitCache:isCollapsible:wantsNumberOfLineFragments:context:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, uint64_t *a6@<X5>, char a7@<W6>, char a8@<W7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, double a13@<D3>, uint64_t a14)
{
  void *v14;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t result;
  int v29;
  uint64_t v30;
  void *v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  __int128 v41;
  __int128 v42;
  unsigned __int8 v50;
  __int128 aBlock;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;

  v21 = *a6;
  v50 = 0;
  v22 = one-time initialization token for kitLink;
  swift_unknownObjectRetain();
  if (v22 != -1)
    swift_once();
  v23 = static NSAttributedStringKey.kitLink;
  v24 = objc_msgSend(v14, sel_length);
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = &v50;
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = closure #1 in NSAttributedString.hasLinkAttributes.getterpartial apply;
  *(_QWORD *)(v26 + 24) = v25;
  *(_QWORD *)&v53 = thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
  *((_QWORD *)&v53 + 1) = v26;
  *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v52 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  *((_QWORD *)&v52 + 1) = &block_descriptor_29;
  v27 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v14, sel_enumerateAttribute_inRange_options_usingBlock_, v23, 0, v24, 0, v27);
  _Block_release(v27);
  LOBYTE(v27) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v27 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v29 = v50;
    swift_release();
    v30 = *(_QWORD *)(a14 + 16);
    swift_retain_n();
    os_unfair_lock_lock((os_unfair_lock_t)(v30 + 16));
    v31 = *(void **)(v30 + 24);
    v32 = 0.0;
    if (a12 < 1.0)
      v32 = a12;
    if (a12 <= 0.0)
      v32 = COERCE_DOUBLE(1);
    objc_msgSend(*(id *)(v30 + 24), sel_setMinimumScaleFactor_, v32);
    objc_msgSend(v31, sel_setScaledLineHeight_, 0.0);
    objc_msgSend(v31, sel_setScaledBaselineOffset_, 0.0);
    if (a1 <= 1)
      v33 = 1;
    else
      v33 = a1;
    if ((a2 & 1) != 0)
      v34 = 0;
    else
      v34 = v33;
    objc_msgSend(v31, sel_setMaximumNumberOfLines_, v34);
    objc_msgSend(v31, sel_setCachesLayout_, 1);
    objc_msgSend(v31, sel_setLayout_, v21);
    objc_msgSend(v31, sel_setWantsNumberOfLineFragments_, 0);
    if (v29)
      v35 = 8;
    else
      v35 = 0;
    objc_msgSend(v31, sel_setActiveRenderers_, v35);
    *(_QWORD *)&v53 = closure #2 in closure #1 in TextDrawingContext.withStringDrawingContext<A>(minScaleFactor:lineLimit:kitCache:useNSLayoutManager:do:);
    *((_QWORD *)&v53 + 1) = 0;
    *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v52 = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any]?, @unowned Int) -> (@owned [NSAttributedStringKey : Any]?);
    *((_QWORD *)&v52 + 1) = &block_descriptor_32_0;
    v36 = _Block_copy(&aBlock);
    objc_msgSend(v31, sel_setLinkTextAttributesProvider_, v36);
    _Block_release(v36);
    closure #1 in NSAttributedString.measured(requestedSize:lineLimit:lowerLineLimit:minScaleFactor:bodyHeadOutdent:widthIsFlexible:kitCache:isCollapsible:wantsNumberOfLineFragments:context:)(*(void **)(v30 + 24), a8 & 1, a3, a4 & 1, v14, a6, a1, a2 & 1, (uint64_t)&aBlock, a13, a10, a11, a5 & 1, a7 & 1);
    os_unfair_lock_unlock((os_unfair_lock_t)(v30 + 16));
    swift_unknownObjectRelease();
    result = swift_release_n();
    v37 = v54;
    v38 = v55;
    v39 = v56;
    v40 = v57;
    v41 = v52;
    v42 = v53;
    *(_OWORD *)a9 = aBlock;
    *(_OWORD *)(a9 + 16) = v41;
    *(_OWORD *)(a9 + 32) = v42;
    *(_QWORD *)(a9 + 48) = v37;
    *(_QWORD *)(a9 + 56) = v38;
    *(_BYTE *)(a9 + 64) = v39;
    *(_BYTE *)(a9 + 65) = v40;
  }
  return result;
}

unint64_t closure #1 in NSAttributedString.measured(requestedSize:lineLimit:lowerLineLimit:minScaleFactor:bodyHeadOutdent:widthIsFlexible:kitCache:isCollapsible:wantsNumberOfLineFragments:context:)@<X0>(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, void *a5@<X4>, _QWORD *a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, char a13, unsigned __int8 a14)
{
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  char *v28;
  double v29;
  double v30;
  char v31;
  double v32;
  double v33;
  double v34;
  double v35;
  CGFloat v36;
  double v37;
  CGFloat v38;
  double v39;
  double v40;
  double v41;
  CGFloat v42;
  double v43;
  CGFloat v44;
  double Height;
  double v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  double v60;
  double v61;
  double Width;
  double v63;
  unsigned __int8 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char **v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  unint64_t result;
  double v74;
  double v75;
  uint64_t v76;
  int v77;
  double v78;
  double v79;
  double v80;
  CGFloat v81;
  uint64_t v82;
  uint64_t v83;
  CGRect v84;
  CGRect v85;
  CGRect v86;
  CGRect v87;

  v77 = a8;
  v76 = a7;
  v24 = type metadata accessor for CharacterSet();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = MEMORY[0x24BDAC7A8](v24);
  v28 = (char *)&v76 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0 || a10 > 0.0)
    objc_msgSend(a1, sel_setWantsNumberOfLineFragments_, 1, v26, v76);
  v29 = 0.0;
  if ((a4 & 1) == 0 && a3 >= 1 && (uint64_t)objc_msgSend(a5, sel_length) >= 1)
  {
    v30 = COERCE_DOUBLE(NSAttributedString.limitedFontHeight(by:)(a3));
    if ((v31 & 1) != 0)
      v29 = 0.0;
    else
      v29 = v30;
  }
  if (a11 == INFINITY)
    v32 = 1.79769313e308;
  else
    v32 = a11;
  if (a11 > 0.0)
    v33 = v32;
  else
    v33 = COERCE_DOUBLE(1);
  if (a12 == INFINITY)
    v34 = 1.79769313e308;
  else
    v34 = a12;
  if (a12 <= 0.0)
    v34 = COERCE_DOUBLE(1);
  v79 = v29;
  if (v29 <= v34)
    v29 = v34;
  if (one-time initialization token for swiftUIOptions != -1)
    swift_once();
  objc_msgSend(a5, sel_boundingRectWithSize_options_context_, static NSStringDrawingOptions.swiftUIOptions, a1, v33, v29, v76);
  v36 = v35;
  v38 = v37;
  v40 = v39;
  v42 = v41;
  *a6 = objc_msgSend(a1, sel_layout);
  swift_unknownObjectRelease();
  objc_msgSend(a1, sel_setLayout_, 0);
  objc_msgSend(a1, sel_scaledLineHeight);
  v78 = v43;
  v81 = v36;
  if (v43 == 0.0)
  {
    v84.origin.x = v36;
    v84.origin.y = v38;
    v84.size.width = v40;
    v44 = v42;
    v84.size.height = v42;
    Height = CGRectGetHeight(v84);
  }
  else
  {
    v44 = v42;
    objc_msgSend(a1, sel_scaledLineHeight);
  }
  v46 = Height;
  v80 = a12;
  if (a10 <= 0.0)
    goto LABEL_49;
  if (objc_msgSend(a1, sel_numberOfLineFragments) != (id)1)
  {
    v47 = objc_msgSend(a5, sel_string);
    v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v50 = v49;

    v82 = v48;
    v83 = v50;
    static CharacterSet.newlines.getter();
    lazy protocol witness table accessor for type String and conformance String();
    v51 = StringProtocol.components(separatedBy:)();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v28, v24);
    swift_bridgeObjectRelease();
    v52 = *(_QWORD *)(v51 + 16);
    if (v52)
    {
      v53 = v51 + 16 * (v52 - 1);
      v54 = *(_QWORD *)(v53 + 32);
      v55 = *(_QWORD *)(v53 + 40);
      swift_bridgeObjectRelease();
      v56 = HIBYTE(v55) & 0xF;
      if ((v55 & 0x2000000000000000) == 0)
        v56 = v54 & 0xFFFFFFFFFFFFLL;
      v57 = v56 ? v52 : v52 - 1;
    }
    else
    {
      swift_bridgeObjectRelease();
      v57 = 0;
    }
    v58 = v76;
    if (v57 < v76)
      v58 = v57;
    v59 = (id)((v77 & 1) != 0 ? v57 : v58);
    if (v59 != objc_msgSend(a1, sel_numberOfLineFragments))
    {
LABEL_49:
      v61 = v46;
      Width = a11;
      if ((a13 & 1) != 0)
        goto LABEL_61;
      goto LABEL_59;
    }
  }
  v85.origin.y = v38;
  v85.origin.x = v81;
  v85.size.width = v40;
  v85.size.height = v44;
  v60 = CGRectGetWidth(v85) + a10;
  v61 = v46;
  if (a11 <= 0.0)
  {
    if (v60 <= COERCE_DOUBLE(1))
      v40 = v60;
    else
      v40 = COERCE_DOUBLE(1);
    Width = a11;
    if ((a13 & 1) != 0)
      goto LABEL_61;
    goto LABEL_59;
  }
  v63 = 1.79769313e308;
  if (v60 <= 1.79769313e308)
    v63 = v60;
  if (v60 > a11)
    v60 = a11;
  if (a11 == INFINITY)
    v40 = v63;
  else
    v40 = v60;
  Width = a11;
  if ((a13 & 1) == 0)
  {
LABEL_59:
    v86.origin.x = v81;
    v86.origin.y = v38;
    v86.size.width = v40;
    v86.size.height = v44;
    Width = 0.0;
    if (CGRectGetWidth(v86) != COERCE_DOUBLE(1))
    {
      v87.origin.x = v81;
      v87.origin.y = v38;
      v87.size.width = v40;
      v87.size.height = v44;
      Width = CGRectGetWidth(v87);
    }
  }
LABEL_61:
  v64 = objc_msgSend(a1, sel_hasTruncatedRanges);
  objc_msgSend(a1, sel_actualScaleFactor);
  v66 = v65;
  objc_msgSend(a1, sel_firstBaselineOffset);
  v68 = v67;
  v69 = &selRef_baselineOffset;
  if (v78 != 0.0)
    v69 = &selRef_scaledBaselineOffset;
  objc_msgSend(a1, *v69, v78);
  v71 = v70;
  v72 = objc_msgSend(a1, sel_wantsNumberOfLineFragments);
  if (v72)
  {
    result = (unint64_t)objc_msgSend(a1, sel_numberOfLineFragments);
    if ((result & 0x8000000000000000) == 0)
      goto LABEL_67;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  result = 0;
LABEL_67:
  v74 = 0.0;
  if (v61 == COERCE_DOUBLE(1))
    v75 = 0.0;
  else
    v75 = v61;
  if ((a14 & (v75 > v80)) != 0)
    v75 = 0.0;
  else
    v74 = Width;
  if (v75 <= v79)
    v75 = v79;
  *(double *)a9 = v74;
  *(double *)(a9 + 8) = v75;
  *(_QWORD *)(a9 + 16) = v66;
  *(_QWORD *)(a9 + 24) = v68;
  *(_QWORD *)(a9 + 32) = v71;
  *(_QWORD *)(a9 + 40) = 0;
  *(double *)(a9 + 48) = a11;
  *(_QWORD *)(a9 + 56) = result;
  *(_BYTE *)(a9 + 64) = v72 ^ 1;
  *(_BYTE *)(a9 + 65) = v64;
  return result;
}

uint64_t NSAttributedString.MetricsCache.metrics(requestedSize:layoutMargins:wantsNumberOfLineFragments:context:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>, double a8@<D4>, double a9@<D5>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  BOOL v34;
  BOOL v35;
  char v37;
  double *v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  char v49;
  char v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t, uint64_t);
  uint64_t v55;
  double v56;
  void (*v57)(char *, uint64_t);
  double v58;
  double v59;
  double v60;
  double v61;
  _QWORD *v62;
  unint64_t v63;
  unint64_t v64;
  double *v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  double v69;
  double v70;
  uint64_t v71;
  char v72;
  uint64_t result;
  double *v74;
  uint64_t v75;
  double v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  double v82;
  uint64_t v83;
  double v84;
  double v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  char v90;

  v10 = v9;
  v20 = type metadata accessor for FloatingPointRoundingRule();
  MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v75 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *(_QWORD *)(v10 + 80);
  v26 = *(_QWORD *)(v25 + 16);
  if (v26)
  {
    v27 = v25 + 56;
    while (1)
    {
      v37 = *(_BYTE *)(v27 + 56);
      if ((a1 & 1) == 0 || (*(_BYTE *)(v27 + 56) & 1) == 0)
      {
        v29 = *(double *)(v27 - 8);
        v28 = *(double *)v27;
        v31 = *(double *)(v27 - 24);
        v30 = *(double *)(v27 - 16);
        if (v29 >= v31)
          v32 = *(double *)(v27 - 24);
        else
          v32 = *(double *)(v27 - 8);
        if (v31 <= v29)
          v31 = *(double *)(v27 - 8);
        if (v28 >= v30)
          v33 = *(double *)(v27 - 16);
        else
          v33 = *(double *)v27;
        if (v30 <= v28)
          v30 = *(double *)v27;
        v34 = v32 > a4 || v31 < a4;
        v35 = v34 || v33 > a5;
        if (!v35 && v30 >= a5)
          break;
      }
      v27 += 88;
      if (!--v26)
        goto LABEL_28;
    }
    v67 = *(_QWORD *)(v27 + 8);
    v68 = *(double *)(v27 + 16);
    v70 = *(double *)(v27 + 24);
    v69 = *(double *)(v27 + 32);
    v80 = *(_QWORD *)(v27 + 40);
    v71 = *(_QWORD *)(v27 + 48);
    v72 = *(_BYTE *)(v27 + 57);
    result = swift_beginAccess();
    v74 = (double *)static LayoutTrace.recorder;
    if (static LayoutTrace.recorder)
    {
      result = swift_beginAccess();
      v74[4] = a4;
      v74[5] = 0.0;
      v74[6] = a5;
      *((_WORD *)v74 + 28) = 256;
    }
    v66 = v80;
  }
  else
  {
LABEL_28:
    v77 = a2;
    v78 = v22;
    v80 = v21;
    v79 = a3;
    swift_beginAccess();
    v38 = (double *)static LayoutTrace.recorder;
    if (static LayoutTrace.recorder)
    {
      swift_beginAccess();
      v38[4] = a4;
      v38[5] = 0.0;
      v38[6] = a5;
      *((_WORD *)v38 + 28) = 0;
    }
    v76 = a7 + a9;
    v39 = a4 - (a7 + a9);
    if (v39 < 0.0)
      v39 = 0.0;
    v40 = a6 + a8;
    if (a5 - (a6 + a8) < 0.0)
      v41 = 0.0;
    else
      v41 = a5 - (a6 + a8);
    v43 = *(double *)(v10 + 48);
    v42 = *(double *)(v10 + 56);
    v44 = v39 + v42;
    v45 = *(_QWORD *)(v10 + 16);
    v46 = *(_BYTE *)(v10 + 24);
    v47 = *(_QWORD *)(v10 + 32);
    v48 = *(_BYTE *)(v10 + 40);
    v49 = *(_BYTE *)(v10 + 72);
    v50 = *(_BYTE *)(v10 + 74);
    v51 = *(id *)(v10 + 8);
    NSAttributedString.measured(requestedSize:lineLimit:lowerLineLimit:minScaleFactor:bodyHeadOutdent:widthIsFlexible:kitCache:isCollapsible:wantsNumberOfLineFragments:context:)(v45, v46, v47, v48, v49, (uint64_t *)v10, v50, a1 & 1, (uint64_t)&v81, v44, v41, v43, v42, v77);

    v52 = *MEMORY[0x24BEE38E0];
    v53 = v78;
    v54 = *(void (**)(char *, uint64_t, uint64_t))(v78 + 104);
    v55 = v80;
    v54(v24, v52, v80);
    v56 = *(double *)(v10 + 64);
    specialized FloatingPoint.round(_:toMultipleOf:)(v24, v56);
    specialized FloatingPoint.round(_:toMultipleOf:)(v24, v56);
    v57 = *(void (**)(char *, uint64_t))(v53 + 8);
    v57(v24, v55);
    v58 = *(double *)(v10 + 64);
    v59 = v76 + v81 - *(double *)(v10 + 56);
    v82 = v40 + v82;
    v81 = v59;
    v60 = v85 + a6;
    v61 = v84 + a6;
    v84 = v61;
    v85 = v60;
    v54(v24, *MEMORY[0x24BEE38D0], v55);
    specialized FloatingPoint.round(_:toMultipleOf:)(v24, v58);
    v57(v24, v55);
    v85 = v84 - v61 + v85;
    v86 = v84 - v61;
    v54(v24, v52, v55);
    specialized FloatingPoint.round(_:toMultipleOf:)(v24, v58);
    v57(v24, v55);
    v29 = v81;
    v28 = v82;
    v67 = v83;
    v68 = v84;
    v70 = v85;
    v69 = v86;
    v80 = v87;
    v71 = v88;
    v37 = v89;
    v72 = v90;
    v62 = *(_QWORD **)(v10 + 80);
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v62[2] + 1, 1, v62);
      v62 = (_QWORD *)result;
    }
    v64 = v62[2];
    v63 = v62[3];
    if (v64 >= v63 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v63 > 1), v64 + 1, 1, v62);
      v62 = (_QWORD *)result;
    }
    v62[2] = v64 + 1;
    v65 = (double *)&v62[11 * v64];
    v65[4] = a4;
    v65[5] = a5;
    v65[6] = v29;
    v65[7] = v28;
    *((_QWORD *)v65 + 8) = v67;
    v65[9] = v68;
    v65[10] = v70;
    v65[11] = v69;
    v66 = v80;
    *((_QWORD *)v65 + 12) = v80;
    *((_QWORD *)v65 + 13) = v71;
    *((_BYTE *)v65 + 112) = v37;
    *((_BYTE *)v65 + 113) = v72;
    *(_QWORD *)(v10 + 80) = v62;
    a3 = v79;
  }
  *(double *)a3 = v29;
  *(double *)(a3 + 8) = v28;
  *(_QWORD *)(a3 + 16) = v67;
  *(double *)(a3 + 24) = v68;
  *(double *)(a3 + 32) = v70;
  *(double *)(a3 + 40) = v69;
  *(_QWORD *)(a3 + 48) = v66;
  *(_QWORD *)(a3 + 56) = v71;
  *(_BYTE *)(a3 + 64) = v37;
  *(_BYTE *)(a3 + 65) = v72;
  return result;
}

id one-time initialization function for emptyString()
{
  id result;

  result = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1458]), sel_init);
  static NSAttributedString.emptyString = (uint64_t)result;
  return result;
}

double ResolvedStyledText.StringDrawing.drawingMargins.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  __int128 v5;
  __int128 v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  _OWORD v18[2];
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;

  v1 = type metadata accessor for FloatingPointRoundingRule();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v0 + 320) & 1) != 0)
  {
    if (*(_QWORD *)(v0 + 192))
    {
      NSAttributedString.maxFontMetrics.getter((uint64_t)v18);
      v5 = v18[0];
      v6 = v18[1];
      v8 = v19;
      v7 = v20;
      v9 = v21;
      v10 = v22;
    }
    else
    {
      v5 = 0uLL;
      v8 = 0.0;
      v7 = 0.0;
      v9 = 0.0;
      v10 = 0.0;
      v6 = 0uLL;
    }
    *(_OWORD *)(v0 + 256) = v5;
    *(_OWORD *)(v0 + 272) = v6;
    *(double *)(v0 + 288) = v8;
    *(double *)(v0 + 296) = v7;
    *(double *)(v0 + 304) = v9;
    *(double *)(v0 + 312) = v10;
    *(_BYTE *)(v0 + 320) = 0;
  }
  else
  {
    v9 = *(double *)(v0 + 304);
    v10 = *(double *)(v0 + 312);
    v8 = *(double *)(v0 + 288);
    v7 = *(double *)(v0 + 296);
  }
  swift_beginAccess();
  v11 = v8
      + ResolvedStyledText.lineHeightScalingAdjustment(lineHeightMultiple:maximumLineHeight:minimumLineHeight:)(*(double *)(v0 + 64), *(double *)(v0 + 72), *(double *)(v0 + 80))+ *(double *)(v0 + 200);
  v12 = v7 + *(double *)(v0 + 208);
  v13 = v9 + *(double *)(v0 + 216);
  v14 = v10 + *(double *)(v0 + 224);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE38E0], v1);
  v15 = *(double *)(v0 + 112);
  v25 = v12;
  v26 = v11;
  v23 = v14;
  v24 = v13;
  specialized FloatingPoint.round(_:toMultipleOf:)(v4, v15);
  specialized FloatingPoint.round(_:toMultipleOf:)(v4, v15);
  specialized FloatingPoint.round(_:toMultipleOf:)(v4, v15);
  specialized FloatingPoint.round(_:toMultipleOf:)(v4, v15);
  v16 = v26;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v16;
}

uint64_t ResolvedStyledText.StringDrawing.init(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(void *a1, uint64_t a2, uint64_t a3, char *a4, char a5, __int16 *a6, uint64_t *a7, uint64_t *a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, uint64_t a17, uint64_t a18, double a19, char a20)
{
  uint64_t v16;
  uint64_t v17;
  char v24;
  char v25;
  double v26;
  double v27;
  double v28;
  double v29;
  char v30;
  void *v31;
  char v32;
  id v33;
  __int128 v34;
  __int128 v35;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v49;
  char v50;
  uint64_t v51;
  char v52;
  char v53;
  uint64_t v55;
  _QWORD v56[7];
  __int16 v57;
  __int16 v58;
  __int128 v59;
  uint64_t v60;
  char v61;
  _BYTE v62[7];
  double v63;
  __int128 v64;
  __int128 v65;
  double v66;
  uint64_t v67;
  double v68;
  double v69;
  __int128 v70;
  char v71;
  _OWORD v72[5];
  uint64_t v73;

  v17 = v16;
  v24 = *(_BYTE *)(a2 + 8);
  v25 = *(_BYTE *)(a2 + 24);
  v26 = *(double *)(a2 + 32);
  v27 = *(double *)(a2 + 72);
  v28 = *(double *)(a2 + 88);
  v29 = *(double *)(a2 + 96);
  v30 = *a4;
  v52 = *a4;
  v53 = *(_BYTE *)(a2 + 120);
  v51 = *(_QWORD *)(a2 + 80);
  v49 = *a6;
  v50 = a4[1];
  v47 = a7[1];
  v48 = *a7;
  v45 = a7[3];
  v46 = a7[2];
  v43 = a7[5];
  v44 = a7[4];
  v41 = *a8;
  v42 = a7[6];
  v39 = *(_QWORD *)a2;
  v40 = *(_QWORD *)(a2 + 16);
  if ((v53 & 1) != 0)
  {
    v31 = a1;
    swift_retain();
    v32 = 1;
    goto LABEL_8;
  }
  if (!a1)
  {
    v31 = 0;
    swift_retain();
    goto LABEL_7;
  }
  swift_retain();
  v31 = a1;
  if (!NSAttributedString.isDynamic.getter())
  {
LABEL_7:
    v32 = 0;
    goto LABEL_8;
  }
  v32 = v30 & 1;
LABEL_8:
  v33 = v31;
  v38 = a5 & 1;
  specialized NSAttributedString.MetricsCache.init(_:scaleFactorOverride:lineLimit:lowerLineLimit:minScaleFactor:bodyHeadOutdent:pixelLength:widthIsFlexible:drawWithRequestedWidth:isCollapsible:)(v31, a19, a20 & 1, v39, v24 & 1, v40, v25 & 1, v32, (uint64_t)v72, v26, v28, v29, v27 != 0.0, v38);
  v34 = v72[3];
  *(_OWORD *)(v17 + 360) = v72[2];
  *(_OWORD *)(v17 + 376) = v34;
  *(_OWORD *)(v17 + 392) = v72[4];
  *(_QWORD *)(v17 + 408) = v73;
  v35 = v72[1];
  *(_OWORD *)(v17 + 328) = v72[0];
  *(_OWORD *)(v17 + 344) = v35;
  swift_release();
  *(_QWORD *)&v59 = v39;
  BYTE8(v59) = v24;
  *(_DWORD *)((char *)&v59 + 9) = *(_DWORD *)(a2 + 9);
  HIDWORD(v59) = *(_DWORD *)(a2 + 12);
  v60 = v40;
  v61 = v25;
  *(_DWORD *)v62 = *(_DWORD *)(a2 + 25);
  *(_DWORD *)&v62[3] = *(_DWORD *)(a2 + 28);
  v63 = v26;
  v64 = *(_OWORD *)(a2 + 40);
  v65 = *(_OWORD *)(a2 + 56);
  v66 = v27;
  v67 = v51;
  v68 = v28;
  v69 = v29;
  v70 = *(_OWORD *)(a2 + 104);
  v71 = v53;
  LOBYTE(v58) = v52;
  HIBYTE(v58) = v50;
  v57 = v49;
  v56[0] = v48;
  v56[1] = v47;
  v56[2] = v46;
  v56[3] = v45;
  v56[4] = v44;
  v56[5] = v43;
  v56[6] = v42;
  v55 = v41;
  return specialized ResolvedStyledText.init(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(v31, &v59, a3, &v58, v38, &v57, (uint64_t)v56, a9, a10, a11, a12, (uint64_t)&v55, a17, a18);
}

double ResolvedStyledText.StringDrawing.sizeThatFits(_:)(uint64_t a1)
{
  double *v1;
  double v2;
  int v3;
  double v4;
  int v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  double v12;

  v2 = *(double *)a1;
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = *(double *)(a1 + 16);
  v5 = *(unsigned __int8 *)(a1 + 24);
  swift_beginAccess();
  v6 = v1[18];
  v7 = v1[19];
  v9 = v1[20];
  v8 = v1[21];
  swift_beginAccess();
  if (one-time initialization token for shared != -1)
    swift_once();
  if (v5)
    v4 = INFINITY;
  if (v3)
    v2 = INFINITY;
  v10 = static TextDrawingContext.shared;
  swift_retain();
  NSAttributedString.MetricsCache.metrics(requestedSize:layoutMargins:wantsNumberOfLineFragments:context:)(0, v10, (uint64_t)&v12, v2, v4, v6, v7, v9, v8);
  swift_endAccess();
  swift_release();
  return v12;
}

Swift::Void __swiftcall ResolvedStyledText.StringDrawing.resetCache()()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  double v6;
  double v7;
  double v8;
  char v9;
  char v10;
  char v11;
  id v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  char v16;
  double v17;
  _OWORD v18[5];
  uint64_t v19;

  v1 = *(void **)(v0 + 192);
  swift_beginAccess();
  v17 = *(double *)(v0 + 176);
  v16 = *(_BYTE *)(v0 + 184);
  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_BYTE *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = *(_BYTE *)(v0 + 40);
  v6 = *(double *)(v0 + 48);
  v7 = *(double *)(v0 + 104);
  v8 = *(double *)(v0 + 112);
  swift_beginAccess();
  v9 = *(_BYTE *)(v0 + 400);
  v10 = *(double *)(v0 + 88) != 0.0;
  v11 = *(_BYTE *)(v0 + 402);
  v12 = v1;
  specialized NSAttributedString.MetricsCache.init(_:scaleFactorOverride:lineLimit:lowerLineLimit:minScaleFactor:bodyHeadOutdent:pixelLength:widthIsFlexible:drawWithRequestedWidth:isCollapsible:)(v1, v17, v16, v2, v3, v4, v5, v9, (uint64_t)v18, v6, v7, v8, v10, v11);
  v13 = *(void **)(v0 + 336);
  v14 = v18[3];
  *(_OWORD *)(v0 + 360) = v18[2];
  *(_OWORD *)(v0 + 376) = v14;
  *(_OWORD *)(v0 + 392) = v18[4];
  *(_QWORD *)(v0 + 408) = v19;
  v15 = v18[1];
  *(_OWORD *)(v0 + 328) = v18[0];
  *(_OWORD *)(v0 + 344) = v15;
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
}

uint64_t ResolvedStyledText.StringDrawing.majorAxis.getter()
{
  return 1;
}

uint64_t ResolvedStyledText.StringDrawing.drawingScale(size:)(double a1, double a2)
{
  uint64_t v2;
  uint64_t result;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  _BYTE v11[72];

  result = swift_beginAccess();
  if (*(_BYTE *)(v2 + 184) == 1)
  {
    result = swift_beginAccess();
    if (*(double *)(v2 + 48) != 1.0)
    {
      swift_beginAccess();
      v6 = *(double *)(v2 + 144);
      v7 = *(double *)(v2 + 152);
      v9 = *(double *)(v2 + 160);
      v8 = *(double *)(v2 + 168);
      swift_beginAccess();
      if (one-time initialization token for shared != -1)
        swift_once();
      v10 = static TextDrawingContext.shared;
      swift_retain();
      NSAttributedString.MetricsCache.metrics(requestedSize:layoutMargins:wantsNumberOfLineFragments:context:)(0, v10, (uint64_t)v11, a1, a2, v6, v7, v9, v8);
      swift_endAccess();
      return swift_release();
    }
  }
  return result;
}

SwiftUI::Spacing __swiftcall ResolvedStyledText.StringDrawing.spacing()()
{
  unint64_t *v0;
  uint64_t v1;
  unint64_t *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  double v20;
  double v21;
  double v22;
  double v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD v30[2];
  double v31[8];
  double v32[9];

  v2 = v0;
  if ((*(_BYTE *)(v1 + 320) & 1) != 0)
  {
    if (*(_QWORD *)(v1 + 192))
    {
      NSAttributedString.maxFontMetrics.getter((uint64_t)&v24);
      v3 = *((double *)&v24 + 1);
      v4 = *(double *)&v24;
      v5 = *((double *)&v25 + 1);
      v6 = *(double *)&v25;
      v8 = *((double *)&v26 + 1);
      v7 = *(double *)&v26;
      v10 = *((double *)&v27 + 1);
      v9 = *(double *)&v27;
    }
    else
    {
      v7 = 0.0;
      v8 = 0.0;
      v9 = 0.0;
      v10 = 0.0;
      v5 = 0.0;
      v6 = 0.0;
      v3 = 0.0;
      v4 = 0.0;
    }
    *(double *)(v1 + 256) = v4;
    *(double *)(v1 + 264) = v3;
    *(double *)(v1 + 272) = v6;
    *(double *)(v1 + 280) = v5;
    v20 = v8;
    v21 = v7;
    *(double *)(v1 + 288) = v7;
    *(double *)(v1 + 296) = v8;
    v22 = v10;
    v23 = v9;
    *(double *)(v1 + 304) = v9;
    *(double *)(v1 + 312) = v10;
    *(_BYTE *)(v1 + 320) = 0;
  }
  else
  {
    v22 = *(double *)(v1 + 312);
    v23 = *(double *)(v1 + 304);
    v5 = *(double *)(v1 + 280);
    v20 = *(double *)(v1 + 296);
    v21 = *(double *)(v1 + 288);
    v3 = *(double *)(v1 + 264);
    v6 = *(double *)(v1 + 272);
    v4 = *(double *)(v1 + 256);
  }
  swift_beginAccess();
  v11 = *(double *)(v1 + 144);
  v12 = *(double *)(v1 + 152);
  v14 = *(double *)(v1 + 160);
  v13 = *(double *)(v1 + 168);
  swift_beginAccess();
  if (one-time initialization token for shared != -1)
    swift_once();
  v15 = static TextDrawingContext.shared;
  swift_retain();
  NSAttributedString.MetricsCache.metrics(requestedSize:layoutMargins:wantsNumberOfLineFragments:context:)(0, v15, (uint64_t)v32, INFINITY, INFINITY, v11, v12, v14, v13);
  swift_endAccess();
  swift_release();
  v31[0] = v4;
  v31[1] = v3;
  v31[2] = v6;
  v31[3] = v5;
  v31[4] = v21;
  v31[5] = v20;
  v31[6] = v23;
  v31[7] = v22;
  swift_beginAccess();
  v16 = *(_OWORD *)(v1 + 96);
  v28 = *(_OWORD *)(v1 + 80);
  v29 = v16;
  v30[0] = *(_OWORD *)(v1 + 112);
  *(_OWORD *)((char *)v30 + 9) = *(_OWORD *)(v1 + 121);
  v17 = *(_OWORD *)(v1 + 32);
  v24 = *(_OWORD *)(v1 + 16);
  v25 = v17;
  v18 = *(_OWORD *)(v1 + 64);
  v26 = *(_OWORD *)(v1 + 48);
  v27 = v18;
  return (SwiftUI::Spacing)static Spacing.textSpacing(maxFontMetrics:idealMetrics:layoutProperties:)(v31, v32, &v24, v2);
}

CGSize __swiftcall ResolvedStyledText.StringDrawing.size(in:)(CGSize in)
{
  double *v1;
  double height;
  double width;
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  double v9;
  double v10;
  CGSize result;
  _QWORD v12[9];

  height = in.height;
  width = in.width;
  swift_beginAccess();
  v4 = v1[18];
  v5 = v1[19];
  v7 = v1[20];
  v6 = v1[21];
  swift_beginAccess();
  if (one-time initialization token for shared != -1)
    swift_once();
  v8 = static TextDrawingContext.shared;
  swift_retain();
  NSAttributedString.MetricsCache.metrics(requestedSize:layoutMargins:wantsNumberOfLineFragments:context:)(0, v8, (uint64_t)v12, width, height, v4, v5, v7, v6);
  swift_endAccess();
  swift_release();
  v9 = *(double *)v12;
  v10 = *(double *)&v12[1];
  result.height = v10;
  result.width = v9;
  return result;
}

__n128 ResolvedStyledText.StringDrawing.metrics(in:layoutMargins:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  double *v4;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  __int128 v14;
  __n128 result;
  _OWORD v16[4];
  __int16 v17;
  _QWORD v18[5];
  _BYTE v19[40];

  outlined init with take of EdgeInsets?(a1, (uint64_t)v18);
  v9 = *(double *)v18;
  v10 = *(double *)&v18[1];
  v11 = *(double *)&v18[2];
  v12 = *(double *)&v18[3];
  outlined init with take of EdgeInsets?(a1, (uint64_t)v19);
  if (v19[32] == 1)
  {
    swift_beginAccess();
    v9 = v4[18];
    v10 = v4[19];
    v11 = v4[20];
    v12 = v4[21];
  }
  swift_beginAccess();
  if (one-time initialization token for shared != -1)
    swift_once();
  v13 = static TextDrawingContext.shared;
  swift_retain();
  NSAttributedString.MetricsCache.metrics(requestedSize:layoutMargins:wantsNumberOfLineFragments:context:)(1, v13, (uint64_t)v16, a3, a4, v9, v10, v11, v12);
  swift_endAccess();
  swift_release();
  v14 = v16[3];
  *(_OWORD *)(a2 + 32) = v16[2];
  *(_OWORD *)(a2 + 48) = v14;
  *(_WORD *)(a2 + 64) = v17;
  result = (__n128)v16[1];
  *(_OWORD *)a2 = v16[0];
  *(__n128 *)(a2 + 16) = result;
  return result;
}

double ResolvedStyledText.StringDrawing.size(in:context:)(uint64_t a1, double a2, double a3)
{
  double *v3;
  double v7;
  double v8;
  double v9;
  double v10;
  double v12;

  swift_beginAccess();
  v7 = v3[18];
  v8 = v3[19];
  v9 = v3[20];
  v10 = v3[21];
  swift_beginAccess();
  NSAttributedString.MetricsCache.metrics(requestedSize:layoutMargins:wantsNumberOfLineFragments:context:)(0, a1, (uint64_t)&v12, a2, a3, v7, v8, v9, v10);
  swift_endAccess();
  return v12;
}

uint64_t ResolvedStyledText.StringDrawing.explicitAlignment(_:at:)(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t result;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  double v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  double v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _BYTE v34[24];
  double v35;
  uint64_t v36;

  v4 = v3;
  if (one-time initialization token for lastTextBaseline != -1)
    swift_once();
  if (static VerticalAlignment.lastTextBaseline == a1)
  {
    swift_beginAccess();
    v8 = *(double *)(v4 + 144);
    v9 = *(double *)(v4 + 152);
    v11 = *(double *)(v4 + 160);
    v10 = *(double *)(v4 + 168);
    swift_beginAccess();
    if (one-time initialization token for shared != -1)
      swift_once();
    v12 = static TextDrawingContext.shared;
    swift_retain();
    NSAttributedString.MetricsCache.metrics(requestedSize:layoutMargins:wantsNumberOfLineFragments:context:)(0, v12, (uint64_t)v34, a2, a3, v8, v9, v11, v10);
    swift_endAccess();
    swift_release();
    return v36;
  }
  else
  {
    if (one-time initialization token for firstTextBaseline != -1)
      swift_once();
    if (static VerticalAlignment.firstTextBaseline == a1)
    {
      swift_beginAccess();
      v14 = *(double *)(v4 + 144);
      v15 = *(double *)(v4 + 152);
      v17 = *(double *)(v4 + 160);
      v16 = *(double *)(v4 + 168);
      swift_beginAccess();
      if (one-time initialization token for shared != -1)
        swift_once();
      v18 = static TextDrawingContext.shared;
      swift_retain();
      NSAttributedString.MetricsCache.metrics(requestedSize:layoutMargins:wantsNumberOfLineFragments:context:)(0, v18, (uint64_t)v34, a2, a3, v14, v15, v17, v16);
      swift_endAccess();
      swift_release();
      *(double *)&result = v35;
    }
    else
    {
      if (one-time initialization token for _firstTextLineCenter != -1)
        swift_once();
      if (static VerticalAlignment._firstTextLineCenter == a1)
      {
        swift_beginAccess();
        v19 = *(double *)(v4 + 144);
        v20 = *(double *)(v4 + 152);
        v22 = *(double *)(v4 + 160);
        v21 = *(double *)(v4 + 168);
        swift_beginAccess();
        if (one-time initialization token for shared != -1)
          swift_once();
        v23 = static TextDrawingContext.shared;
        swift_retain();
        NSAttributedString.MetricsCache.metrics(requestedSize:layoutMargins:wantsNumberOfLineFragments:context:)(0, v23, (uint64_t)v34, a2, a3, v19, v20, v22, v21);
        swift_endAccess();
        swift_release();
        if ((*(_BYTE *)(v4 + 320) & 1) != 0)
        {
          if (*(_QWORD *)(v4 + 192))
          {
            NSAttributedString.maxFontMetrics.getter((uint64_t)&v29);
            v24 = v29;
            v25 = v30;
            v26 = v31;
            v27 = v32;
            v28 = v33;
          }
          else
          {
            v28 = 0;
            v25 = 0uLL;
            v24 = 0.0;
            v26 = 0uLL;
            v27 = 0uLL;
          }
          *(double *)(v4 + 256) = v24;
          *(_OWORD *)(v4 + 264) = v25;
          *(_OWORD *)(v4 + 280) = v26;
          *(_OWORD *)(v4 + 296) = v27;
          *(_QWORD *)(v4 + 312) = v28;
          *(_BYTE *)(v4 + 320) = 0;
        }
        else
        {
          v24 = *(double *)(v4 + 256);
        }
        *(double *)&result = v35 + v24 * -0.5;
      }
      else
      {
        if (one-time initialization token for leadingText != -1)
          swift_once();
        if (static HorizontalAlignment.leadingText == a1)
        {
          swift_beginAccess();
          return *(uint64_t *)(v4 + 152);
        }
        else
        {
          *(double *)&result = 0.0;
        }
      }
    }
  }
  return result;
}

void ResolvedStyledText.StringDrawing.draw(in:with:applyingMarginOffsets:containsResolvable:context:renderer:)(char a1, char a2, uint64_t a3, CGFloat a4, double a5, double a6, double a7, double a8, double a9)
{
  _QWORD *v9;
  void *v10;
  double *v11;
  double v18;
  double v19;
  uint64_t *v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  double *v25;
  double v26;
  uint64_t v27;
  CGFloat v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  id v39;
  void *v40;
  void *v41;
  id v42;
  uint64_t v43;
  id v44;
  void *v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  id v52;
  id v53;
  uint64_t v54;
  _QWORD *v55;
  void *v56;
  void *v57;
  char isEscapingClosureAtFileLocation;
  int v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  _QWORD *v66;
  void *v67;
  double v68;
  uint64_t v69;
  void *v70;
  char v71;
  char v72;
  uint64_t v73;
  void *v74;
  id v75;
  id v76;
  uint64_t v77;
  uint64_t (*v78)();
  void *v79;
  uint64_t v80;
  id v82;
  void *aBlock;
  uint64_t v84;
  void *v85;
  void *v86;
  void *v87;
  _QWORD *v88;
  unsigned __int8 v89;
  _QWORD v90[2];
  double v91[4];
  double v92;

  v10 = (void *)v9[24];
  if (!v10)
    return;
  v11 = (double *)v9;
  swift_beginAccess();
  v18 = *((double *)v9 + 18);
  v19 = *((double *)v9 + 19);
  v20 = v9 + 41;
  v22 = v11[20];
  v21 = v11[21];
  swift_beginAccess();
  v23 = one-time initialization token for shared;
  v82 = v10;
  if (v23 != -1)
    swift_once();
  v24 = static TextDrawingContext.shared;
  swift_retain();
  NSAttributedString.MetricsCache.metrics(requestedSize:layoutMargins:wantsNumberOfLineFragments:context:)(0, v24, (uint64_t)v90, a8, a9, v18, v19, v22, v21);
  swift_endAccess();
  swift_release();
  v25 = v11 + 22;
  swift_beginAccess();
  if (*((_BYTE *)v11 + 184) != 1)
    goto LABEL_7;
  swift_beginAccess();
  v26 = 1.0;
  if (v11[6] != 1.0)
  {
    v25 = v91;
LABEL_7:
    v26 = *v25;
  }
  v27 = 0;
  if (v26 == 1.0 && (a2 & 1) == 0)
  {
    v27 = *v20;
    swift_unknownObjectRetain();
  }
  v29 = *(double *)v90;
  v28 = *(double *)&v90[1];
  v30 = v91[3] + a5;
  swift_beginAccess();
  v31 = v29 + v11[13];
  if ((a1 & 1) != 0)
  {
    v32 = CGRect.inset(by:)(v11[18], v11[19], v11[20], v11[21], a4, v30, v31, v28);
    v34 = v33;
    v31 = v35;
    v28 = v36;
    ResolvedStyledText.StringDrawing.drawingMargins.getter();
    a4 = v32 + v37 - v11[19];
    v30 = v34 + ResolvedStyledText.StringDrawing.drawingMargins.getter() - v11[18];
  }
  if (*((_BYTE *)v11 + 401) == 1)
  {
    v38 = v92;
    if (v92 != INFINITY)
    {
      if (*((_BYTE *)v11 + 42))
      {
        if (*((_BYTE *)v11 + 42) == 1)
        {
          v68 = (v31 - v92) * 0.5;
LABEL_53:
          a4 = a4 + v68;
          goto LABEL_16;
        }
        v68 = 0.0;
        if ((*((_BYTE *)v11 + 43) & 1) != 0)
          goto LABEL_53;
      }
      else
      {
        v68 = 0.0;
        if ((*((_BYTE *)v11 + 43) & 1) == 0)
          goto LABEL_53;
      }
      v68 = v31 - v92;
      goto LABEL_53;
    }
  }
  v38 = v31;
LABEL_16:
  v39 = objc_msgSend((id)objc_opt_self(), sel_current);
  v40 = (void *)MEMORY[0x24BDAC760];
  if (v39
    && (v41 = v39, v42 = objc_msgSend(v39, sel_CGContext), v41, v42)
    && (v43 = MEMORY[0x23B7C8EA8](v42, 0, 0), v42, v43)
    && (v44 = (id)RBDrawingStateGetDisplayList()) != 0)
  {
    v45 = v44;
    v46 = objc_msgSend(v44, sel_CGStyleHandler);
    if (v46)
    {
      v47 = v46;
      v48 = swift_allocObject();
      *(_QWORD *)(v48 + 16) = v47;
      v77 = v48;
      v78 = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Int, @unowned UnsafeMutablePointer<CFRange>) -> (@unowned Unmanaged<CFDictionaryRef>?);
    }
    else
    {
      v77 = 0;
      v78 = 0;
    }
    v69 = *((_QWORD *)v11 + 31);
    if (*(_QWORD *)(v69 + 16))
    {
      v70 = v40;
      v71 = *((_BYTE *)v11 + 43);
      v72 = *((_BYTE *)v11 + 44);
      v73 = swift_allocObject();
      *(_QWORD *)(v73 + 16) = v69;
      *(_BYTE *)(v73 + 24) = v72;
      *(_BYTE *)(v73 + 25) = v71;
      v40 = v70;
      v87 = partial apply for closure #1 in ResolvedStyledText.cgStyleHandler.getter;
      v88 = (_QWORD *)v73;
      aBlock = v70;
      v84 = 1107296256;
      v85 = thunk for @escaping @callee_guaranteed (@unowned Bool, @unowned UInt32) -> ();
      v86 = &block_descriptor_15;
      v74 = _Block_copy(&aBlock);
      v75 = v45;
      swift_bridgeObjectRetain();
      swift_release();
    }
    else
    {
      v76 = v45;
      v74 = 0;
    }
    objc_msgSend(v45, sel_setCGStyleHandler_, v74);
    _Block_release(v74);
    v79 = v45;

  }
  else
  {
    v77 = 0;
    v78 = 0;
    v79 = 0;
  }
  v80 = v27;
  v49 = *((_QWORD *)v11 + 2);
  v50 = *((unsigned __int8 *)v11 + 24);
  v89 = 0;
  if (one-time initialization token for kitLink != -1)
    swift_once();
  v51 = static NSAttributedStringKey.kitLink;
  v52 = v82;
  v53 = objc_msgSend(v82, sel_length);
  v54 = swift_allocObject();
  *(_QWORD *)(v54 + 16) = &v89;
  v55 = (_QWORD *)swift_allocObject();
  v55[2] = partial apply for closure #1 in NSAttributedString.hasLinkAttributes.getter;
  v55[3] = v54;
  v87 = partial apply for thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  v88 = v55;
  aBlock = v40;
  v84 = 1107296256;
  v85 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  v86 = &block_descriptor_21;
  v56 = v40;
  v57 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v82, sel_enumerateAttribute_inRange_options_usingBlock_, v51, 0, v53, 0, v57);
  _Block_release(v57);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v59 = v89;
    swift_release();
    v60 = *(_QWORD *)(a3 + 16);
    v54 = v60 + 16;
    swift_retain_n();
    os_unfair_lock_lock((os_unfair_lock_t)(v60 + 16));
    v61 = *(void **)(v60 + 24);
    objc_msgSend(v61, sel_setMinimumScaleFactor_, 0.0);
    objc_msgSend(v61, sel_setScaledLineHeight_, 0.0);
    objc_msgSend(v61, sel_setScaledBaselineOffset_, 0.0);
    if (v49 <= 1)
      v62 = 1;
    else
      v62 = v49;
    if (v50)
      v63 = 0;
    else
      v63 = v62;
    objc_msgSend(v61, sel_setMaximumNumberOfLines_, v63);
    objc_msgSend(v61, sel_setCachesLayout_, 1);
    objc_msgSend(v61, sel_setLayout_, v80);
    objc_msgSend(v61, sel_setWantsNumberOfLineFragments_, 0);
    if (v59)
      v64 = 8;
    else
      v64 = 0;
    objc_msgSend(v61, sel_setActiveRenderers_, v64);
    v87 = closure #2 in closure #1 in TextDrawingContext.withStringDrawingContext<A>(minScaleFactor:lineLimit:kitCache:useNSLayoutManager:do:);
    v88 = 0;
    v52 = v56;
    aBlock = v56;
    v84 = 1107296256;
    v85 = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any]?, @unowned Int) -> (@owned [NSAttributedStringKey : Any]?);
    v86 = &block_descriptor_6;
    v65 = _Block_copy(&aBlock);
    objc_msgSend(v61, sel_setLinkTextAttributesProvider_, v65);
    _Block_release(v65);
    v51 = *(_QWORD *)(v60 + 24);
    if (v26 == 1.0)
      v66 = v82;
    else
      v66 = objc_msgSend(v82, sel__ui_attributedSubstringFromRange_scaledByScaleFactor_, 0, objc_msgSend(v82, sel_length), v26);
    v55 = v66;
    v56 = v79;
    v49 = v77;
    if (one-time initialization token for swiftUIOptions == -1)
      goto LABEL_39;
  }
  swift_once();
LABEL_39:
  objc_msgSend(v55, sel_drawWithRect_options_context_, static NSStringDrawingOptions.swiftUIOptions, v51, a4, v30, v38, v28);

  os_unfair_lock_unlock((os_unfair_lock_t)v54);
  swift_release_n();
  if (v56)
  {
    if (v78)
    {
      v87 = v78;
      v88 = (_QWORD *)v49;
      aBlock = v52;
      v84 = 1107296256;
      v85 = thunk for @escaping @callee_guaranteed (@unowned Bool, @unowned UInt32) -> ();
      v86 = &block_descriptor_9;
      v67 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
    }
    else
    {
      v67 = 0;
    }
    objc_msgSend(v56, sel_setCGStyleHandler_, v67);
    _Block_release(v67);
    swift_unknownObjectRelease();

    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v78);
  }
  else
  {
    swift_unknownObjectRelease();

    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v78);
  }
}

uint64_t thunk for @escaping @callee_unowned @convention(block) (@unowned RBDrawingState, @unowned Int) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, a1, a2);
}

uint64_t ResolvedStyledText.StringDrawing.linkURL(at:in:)(double a1, double a2, double a3, double a4)
{
  uint64_t v4;
  void (*v9)(_QWORD *);
  void *v10;
  _QWORD v12[5];

  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  *(double *)v12 = a1;
  *(double *)&v12[1] = a2;
  *(double *)&v12[2] = a3;
  *(double *)&v12[3] = a4;
  v12[4] = v4;
  v9 = *(void (**)(_QWORD *))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue2.shared) + 0x88);
  v10 = static CoreGlue2.shared;
  swift_retain();
  v9(v12);

  return swift_release();
}

uint64_t ResolvedStyledText.StringDrawing.__ivar_destroyer()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 336);
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t ResolvedStyledText.StringDrawing.deinit()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  void *v4;
  _OWORD v6[6];
  _OWORD v7[2];

  v1 = *(_OWORD *)(v0 + 96);
  v6[4] = *(_OWORD *)(v0 + 80);
  v6[5] = v1;
  v7[0] = *(_OWORD *)(v0 + 112);
  *(_OWORD *)((char *)v7 + 9) = *(_OWORD *)(v0 + 121);
  v2 = *(_OWORD *)(v0 + 32);
  v6[0] = *(_OWORD *)(v0 + 16);
  v6[1] = v2;
  v3 = *(_OWORD *)(v0 + 64);
  v6[2] = *(_OWORD *)(v0 + 48);
  v6[3] = v3;
  outlined release of TextLayoutProperties((uint64_t)v6);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = *(void **)(v0 + 336);
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  return v0;
}

uint64_t ResolvedStyledText.StringDrawing.__deallocating_deinit()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  void *v4;
  _OWORD v6[6];
  _OWORD v7[2];

  v1 = *(_OWORD *)(v0 + 96);
  v6[4] = *(_OWORD *)(v0 + 80);
  v6[5] = v1;
  v7[0] = *(_OWORD *)(v0 + 112);
  *(_OWORD *)((char *)v7 + 9) = *(_OWORD *)(v0 + 121);
  v2 = *(_OWORD *)(v0 + 32);
  v6[0] = *(_OWORD *)(v0 + 16);
  v6[1] = v2;
  v3 = *(_OWORD *)(v0 + 64);
  v6[2] = *(_OWORD *)(v0 + 48);
  v6[3] = v3;
  outlined release of TextLayoutProperties((uint64_t)v6);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = *(void **)(v0 + 336);
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

void specialized NSAttributedString.MetricsCache.init(_:scaleFactorOverride:lineLimit:lowerLineLimit:minScaleFactor:bodyHeadOutdent:pixelLength:widthIsFlexible:drawWithRequestedWidth:isCollapsible:)(id a1@<X0>, double a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, char a7@<W6>, char a8@<W7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, char a13, char a14)
{
  id v24;
  double v26;
  id v27;

  if (a1)
  {
    v24 = a1;
    if ((a3 & 1) != 0)
      a2 = 1.0;
    if (a2 != 1.0)
    {
      v27 = objc_msgSend(a1, sel__ui_attributedSubstringFromRange_scaledByScaleFactor_, 0, objc_msgSend(a1, sel_length), a2);

      v24 = v27;
    }
  }
  else
  {
    if (one-time initialization token for emptyString != -1)
      swift_once();
    v24 = (id)static NSAttributedString.emptyString;
  }
  v26 = 1.0;
  if ((a3 & 1) != 0)
    v26 = a10;
  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = v24;
  *(_QWORD *)(a9 + 16) = a4;
  *(_BYTE *)(a9 + 24) = a5 & 1;
  *(_QWORD *)(a9 + 32) = a6;
  *(_BYTE *)(a9 + 40) = a7 & 1;
  *(double *)(a9 + 48) = v26;
  *(double *)(a9 + 56) = a11;
  *(double *)(a9 + 64) = a12;
  *(_BYTE *)(a9 + 72) = a8 & 1;
  *(_BYTE *)(a9 + 73) = a13 & 1;
  *(_BYTE *)(a9 + 74) = a14 & 1;
  *(_QWORD *)(a9 + 80) = MEMORY[0x24BEE4AF8];
}

uint64_t sub_234E80C64()
{
  return swift_deallocObject();
}

uint64_t sub_234E80C74()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_21(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_21()
{
  return swift_release();
}

uint64_t sub_234E80C9C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_234E80CC0()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t type metadata accessor for ResolvedStyledText.StringDrawing()
{
  return objc_opt_self();
}

uint64_t destroy for NSAttributedString.MetricsCache(uint64_t a1)
{
  swift_unknownObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for NSAttributedString.MetricsCache(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_WORD *)(a1 + 73) = *(_WORD *)(a2 + 73);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_unknownObjectRetain();
  v4 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NSAttributedString.MetricsCache(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v4 = *(void **)(a2 + 8);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v6 = v4;

  v7 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v7;
  v8 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for NSAttributedString.MetricsCache(uint64_t a1, uint64_t a2)
{
  void *v4;

  swift_unknownObjectRelease();
  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for NSAttributedString.MetricsCache()
{
  return &type metadata for NSAttributedString.MetricsCache;
}

uint64_t sub_234E80F20()
{
  return swift_deallocObject();
}

uint64_t sub_234E80F30()
{
  return swift_deallocObject();
}

__n128 __swift_memcpy66_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for NSAttributedString.Metrics(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 66))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 65);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NSAttributedString.Metrics(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 64) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 66) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 66) = 0;
    if (a2)
      *(_BYTE *)(result + 65) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for NSAttributedString.Metrics()
{
  return &type metadata for NSAttributedString.Metrics;
}

uint64_t *NSAttributedStringKey.resolvableTextSegment.unsafeMutableAddressor()
{
  if (one-time initialization token for resolvableTextSegment != -1)
    swift_once();
  return &static NSAttributedStringKey.resolvableTextSegment;
}

Swift::Bool __swiftcall ResolvableTextSegmentAttribute.Value.isAttributeRequiredForResolution(_:includeNonFunctionalAttributes:)(NSAttributedStringKey _, Swift::Bool includeNonFunctionalAttributes)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Bool v24;
  Swift::Bool result;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSString *v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v56;
  _QWORD v57[2];
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;

  v5 = type metadata accessor for ResolvableTextSegmentAttribute.Value(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v57 - v9;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v57 - v12;
  if (one-time initialization token for resolvableTextSegment != -1)
    swift_once();
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v16 = v15;
  if (v14 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v16 == v17)
    goto LABEL_12;
  v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v19 & 1) != 0)
  {
LABEL_13:
    outlined init with copy of TypesettingLanguage(v2, (uint64_t)v13, type metadata accessor for ResolvableTextSegmentAttribute.Value);
LABEL_14:
    outlined destroy of TypesettingConfiguration((uint64_t)v13, type metadata accessor for ResolvableTextSegmentAttribute.Value);
    outlined init with copy of TypesettingLanguage(v2, (uint64_t)v10, type metadata accessor for ResolvableTextSegmentAttribute.Value);
LABEL_15:
    v24 = 1;
LABEL_16:
    outlined destroy of TypesettingConfiguration((uint64_t)v10, type metadata accessor for ResolvableTextSegmentAttribute.Value);
    return v24;
  }
  if (one-time initialization token for updateSchedule != -1)
    swift_once();
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v22 = v21;
  if (v20 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v22 == v23)
  {
LABEL_12:
    swift_bridgeObjectRelease_n();
    goto LABEL_13;
  }
  v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with copy of TypesettingLanguage(v2, (uint64_t)v13, type metadata accessor for ResolvableTextSegmentAttribute.Value);
  if ((v26 & 1) != 0)
    goto LABEL_14;
  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v29 = v28;
  if (v27 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v29 == v30)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_14;
  }
  v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of TypesettingConfiguration((uint64_t)v13, type metadata accessor for ResolvableTextSegmentAttribute.Value);
  outlined init with copy of TypesettingLanguage(v2, (uint64_t)v10, type metadata accessor for ResolvableTextSegmentAttribute.Value);
  if ((v32 & 1) != 0)
    goto LABEL_15;
  outlined init with copy of TypesettingLanguage((uint64_t)v10, (uint64_t)v7, type metadata accessor for ResolvableTextSegmentAttribute.Value);
  if (!includeNonFunctionalAttributes || (v33 = *(_QWORD *)&v7[*(int *)(v5 + 24)], (v34 = *(_QWORD *)(v33 + 16)) == 0))
  {
LABEL_58:
    v24 = 0;
LABEL_61:
    outlined destroy of TypesettingConfiguration((uint64_t)v7, type metadata accessor for ResolvableTextSegmentAttribute.Value);
    goto LABEL_16;
  }
  v59 = v33 + 32;
  v57[1] = v33;
  swift_bridgeObjectRetain();
  v35 = 0;
  v58 = MEMORY[0x24BEE4AD8] + 8;
  v57[0] = v34;
  while (1)
  {
    v36 = v59 + 32 * v35;
    v38 = *(_QWORD *)(v36 + 16);
    v37 = *(_QWORD *)(v36 + 24);
    if (!*(_QWORD *)(v38 + 16))
      break;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v39 = _;
    v40 = specialized __RawDictionaryStorage.find<A>(_:)(v39);
    if ((v41 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v38 + 56) + 32 * v40, (uint64_t)&v62);
    }
    else
    {
      v62 = 0u;
      v63 = 0u;
    }

    swift_bridgeObjectRelease();
    if (!*((_QWORD *)&v63 + 1))
      goto LABEL_35;
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)&v62, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_28:
    if (++v35 == v34)
    {
      swift_bridgeObjectRelease();
      goto LABEL_58;
    }
  }
  v62 = 0u;
  v63 = 0u;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_35:
  outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)&v62, (uint64_t)&lazy cache variable for type metadata for Any?, v58, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
  v42 = *(_QWORD *)(v37 + 16);
  if (!v42)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_60;
  }
  v60 = v38;
  v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v45 = v44;
  if (v43 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v45 == v46)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_43;
  }
  v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v48 & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_43:
    swift_bridgeObjectRelease_n();
    goto LABEL_28;
  }
  if (v42 == 1)
  {
LABEL_53:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
LABEL_60:
    v24 = 1;
    goto LABEL_61;
  }
  v61 = v37;
  v49 = 5;
  while (1)
  {
    v50 = v49 - 3;
    if (__OFADD__(v49 - 4, 1))
      break;
    v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v53 = v52;
    if (v51 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v53 == v54)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
LABEL_56:
      swift_bridgeObjectRelease_n();
      v34 = v57[0];
      goto LABEL_28;
    }
    v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v56 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_56;
    }
    ++v49;
    if (v50 == v42)
      goto LABEL_53;
  }
  __break(1u);
  return result;
}

uint64_t static ResolvableTextSegmentAttribute.toggleAttributes(in:)(id a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t result;
  _QWORD v9[6];

  if (one-time initialization token for resolvableTextSegment != -1)
    swift_once();
  v2 = static NSAttributedStringKey.resolvableTextSegment;
  v3 = objc_msgSend(a1, sel_length);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = partial apply for closure #1 in static ResolvableTextSegmentAttribute.toggleAttributes(in:);
  *(_QWORD *)(v5 + 24) = v4;
  v9[4] = partial apply for thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  v9[5] = v5;
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 1107296256;
  v9[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  v9[3] = &block_descriptor_22;
  v6 = _Block_copy(v9);
  v7 = a1;
  swift_retain();
  swift_release();
  objc_msgSend(v7, sel_enumerateAttribute_inRange_options_usingBlock_, v2, 0, v3, 0, v6);
  _Block_release(v6);
  LOBYTE(v7) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v7 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t static ResolvableTextSegmentAttribute.legacySegment(resolvableAttributeKey:length:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;

  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ResolvableTextSegmentAttribute.Value.Run>, (uint64_t)&type metadata for ResolvableTextSegmentAttribute.Value.Run, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_23527E860;
  v7 = a1;
  v8 = MEMORY[0x24BEE4AF8];
  v9 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v10 = specialized Dictionary.init(dictionaryLiteral:)(v8);
  ResolvableTextSegmentAttribute.Value.Run.init(range:oldAttributes:newAttributes:)(0, a2, v9, v10, (int64_t *)(v6 + 32));
  UUID.init()();
  result = type metadata accessor for ResolvableTextSegmentAttribute.Value(0);
  *(_QWORD *)(a3 + *(int *)(result + 20)) = v7;
  *(_QWORD *)(a3 + *(int *)(result + 24)) = v6;
  return result;
}

uint64_t static ResolvableTextSegmentAttribute.update(_:in:)(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t result;
  _QWORD aBlock[6];

  v4 = type metadata accessor for ResolvableStringResolutionContext();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](v4);
  if (one-time initialization token for resolvableTextSegment != -1)
    swift_once();
  v7 = static NSAttributedStringKey.resolvableTextSegment;
  v8 = objc_msgSend(a1, sel_length);
  outlined init with copy of TypesettingLanguage(a2, (uint64_t)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for ResolvableStringResolutionContext);
  v9 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v10 + v9, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableStringResolutionContext);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = partial apply for closure #1 in static ResolvableTextSegmentAttribute.update(_:in:);
  *(_QWORD *)(v11 + 24) = v10;
  aBlock[4] = thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  aBlock[3] = &block_descriptor_13_2;
  v12 = _Block_copy(aBlock);
  v13 = a1;
  swift_retain();
  swift_release();
  objc_msgSend(v13, sel_enumerateAttribute_inRange_options_usingBlock_, v7, 0, v8, 2, v12);
  _Block_release(v12);
  LOBYTE(v13) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v13 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t one-time initialization function for resolvableTextSegment()
{
  uint64_t result;

  result = MEMORY[0x23B7C5DAC](0xD00000000000001DLL, 0x80000002352E4290);
  static NSAttributedStringKey.resolvableTextSegment = result;
  return result;
}

id static NSAttributedStringKey.resolvableTextSegment.getter()
{
  if (one-time initialization token for resolvableTextSegment != -1)
    swift_once();
  return (id)static NSAttributedStringKey.resolvableTextSegment;
}

int64_t ResolvableTextSegmentAttribute.Value.Run.init(range:oldAttributes:newAttributes:)@<X0>(int64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int64_t *a5@<X8>)
{
  int64_t v5;
  int64_t v6;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  _QWORD v13[5];
  uint64_t v14;

  v5 = result + a2;
  if (__OFADD__(result, a2))
  {
    __break(1u);
    goto LABEL_8;
  }
  v6 = result;
  if (v5 < result)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  if (*(_QWORD *)(a4 + 16))
  {
    v14 = MEMORY[0x24BEE4B08];
    MEMORY[0x24BDAC7A8](result);
    v13[2] = a4;
    v13[3] = &v14;
    v10 = specialized _NativeDictionary.filter(_:)(a3, (uint64_t (*)(id))closure #1 in ResolvableTextSegmentAttribute.Value.Run.init(range:oldAttributes:newAttributes:)partial apply, (uint64_t)v13);
    swift_bridgeObjectRelease();
    swift_retain();
    specialized Sequence.filter(_:)(a4, v10, &v14);
    v12 = v11;
    swift_release();
    result = swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v12 = MEMORY[0x24BEE4AF8];
    result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v10 = result;
  }
  *a5 = v6;
  a5[1] = v5;
  a5[2] = v10;
  a5[3] = v12;
  return result;
}

uint64_t areEqual #1 (_:_:) in ResolvableTextSegmentAttribute.Value.Run.init(range:oldAttributes:newAttributes:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  char v5;
  __int128 v7[2];
  uint64_t v8;
  _BYTE v9[32];
  _QWORD v10[3];
  uint64_t v11;

  outlined init with copy of Any(a1, (uint64_t)v9);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for Equatable);
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(v7, (uint64_t)v10);
    v3 = v11;
    v4 = __swift_project_boxed_opaque_existential_1(v10, v11);
    v5 = areEqual #1 <A>(lhs:rhs:) in static CodableNSAttributes.== infix(_:_:)((uint64_t)v4, a2, v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
  else
  {
    v8 = 0;
    memset(v7, 0, sizeof(v7));
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)v7, (uint64_t)&lazy cache variable for type metadata for Equatable?, (uint64_t)&lazy cache variable for type metadata for Equatable, MEMORY[0x24BEE0988], (uint64_t (*)(_QWORD))type metadata accessor for AnyTrackedValue?);
    v5 = 0;
  }
  return v5 & 1;
}

uint64_t closure #1 in ResolvableTextSegmentAttribute.Value.Run.init(range:oldAttributes:newAttributes:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  char v7;
  __int128 v9;
  __int128 v10;
  _OWORD v11[2];

  if (!*(_QWORD *)(a3 + 16))
  {
    v9 = 0u;
    v10 = 0u;
    goto LABEL_8;
  }
  v5 = a1;
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
  if ((v7 & 1) == 0)
  {
    v9 = 0u;
    v10 = 0u;

    goto LABEL_8;
  }
  outlined init with copy of Any(*(_QWORD *)(a3 + 56) + 32 * v6, (uint64_t)&v9);

  if (!*((_QWORD *)&v10 + 1))
  {
LABEL_8:
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)&v9, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
    return 1;
  }
  outlined init with take of Any(&v9, v11);
  if ((areEqual #1 (_:_:) in ResolvableTextSegmentAttribute.Value.Run.init(range:oldAttributes:newAttributes:)((uint64_t)v11, a2) & 1) != 0)
  {
    specialized Set._Variant.insert(_:)(&v9, v5);

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
    return 0;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  return 1;
}

uint64_t ResolvableTextSegmentAttribute.Value.Run.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<ResolvableTextSegmentAttribute.Value.Run.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvableTextSegmentAttribute.Value.Run.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.Run.CodingKeys, (uint64_t)&unk_250640B98, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v17 - v5;
  v8 = *v1;
  v7 = v1[1];
  v9 = v1[2];
  v18 = v1[3];
  v19 = v9;
  v10 = a1[3];
  v11 = a1;
  v13 = v12;
  __swift_project_boxed_opaque_existential_1(v11, v10);
  lazy protocol witness table accessor for type ResolvableTextSegmentAttribute.Value.Run.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.Run.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v21 = v8;
  v22 = v7;
  v23 = 0;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x24BEE1768], MEMORY[0x24BEE1780], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x24BEE1770], MEMORY[0x24BEE1B98]);
  v14 = v20;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v14)
  {
    v15 = v18;
    v21 = v19;
    v23 = 1;
    lazy protocol witness table accessor for type CodableNSAttributes and conformance CodableNSAttributes();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v21 = v15;
    v23 = 2;
    type metadata accessor for ProxyCodable<[NSAttributedStringKey]>(0);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ProxyCodable<[NSAttributedStringKey]> and conformance ProxyCodable<A>, (uint64_t (*)(uint64_t))type metadata accessor for ProxyCodable<[NSAttributedStringKey]>, (uint64_t)&protocol conformance descriptor for ProxyCodable<A>);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v13);
}

uint64_t ResolvableTextSegmentAttribute.Value.Run.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<ResolvableTextSegmentAttribute.Value.Run.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvableTextSegmentAttribute.Value.Run.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.Run.CodingKeys, (uint64_t)&unk_250640B98, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v17 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v16 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ResolvableTextSegmentAttribute.Value.Run.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.Run.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v9 = v6;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x24BEE1768], MEMORY[0x24BEE1780], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
  v20 = 0;
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x24BEE1798], MEMORY[0x24BEE1BC8]);
  v10 = v17;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v11 = v18;
  v12 = v19;
  v20 = 1;
  lazy protocol witness table accessor for type CodableNSAttributes and conformance CodableNSAttributes();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v16 = v11;
  v13 = v18;
  type metadata accessor for ProxyCodable<[NSAttributedStringKey]>(0);
  v20 = 2;
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ProxyCodable<[NSAttributedStringKey]> and conformance ProxyCodable<A>, (uint64_t (*)(uint64_t))type metadata accessor for ProxyCodable<[NSAttributedStringKey]>, (uint64_t)&protocol conformance descriptor for ProxyCodable<A>);
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v10);
  v14 = v18;
  *a2 = v16;
  a2[1] = v12;
  a2[2] = v13;
  a2[3] = v14;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ResolvableTextSegmentAttribute.Value.Run.CodingKeys()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000011;
  if (*v0 != 1)
    v1 = 0xD000000000000014;
  if (*v0)
    return v1;
  else
    return 0x65676E6172;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ResolvableTextSegmentAttribute.Value.Run.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized ResolvableTextSegmentAttribute.Value.Run.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ResolvableTextSegmentAttribute.Value.Run.CodingKeys()
{
  lazy protocol witness table accessor for type ResolvableTextSegmentAttribute.Value.Run.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.Run.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ResolvableTextSegmentAttribute.Value.Run.CodingKeys()
{
  lazy protocol witness table accessor for type ResolvableTextSegmentAttribute.Value.Run.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.Run.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance ResolvableTextSegmentAttribute.Value.Run@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return ResolvableTextSegmentAttribute.Value.Run.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ResolvableTextSegmentAttribute.Value.Run(_QWORD *a1)
{
  return ResolvableTextSegmentAttribute.Value.Run.encode(to:)(a1);
}

uint64_t property wrapper backing initializer of ResolvableTextSegmentAttribute.Value.resolvableAttributeKey@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

Swift::Void __swiftcall ResolvableTextSegmentAttribute.Value.restoreDefault(in:of:)(__C::_NSRange in, NSMutableAttributedString of)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  Class isa;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  BOOL v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int location;

  location = in.location;
  v4 = *(_QWORD *)(v2 + *(int *)(type metadata accessor for ResolvableTextSegmentAttribute.Value(0) + 24));
  v22 = *(_QWORD *)(v4 + 16);
  if (v22)
  {
    v21 = v4 + 32;
    swift_bridgeObjectRetain();
    v5 = 0;
    v20 = v4;
    while (v5 < *(_QWORD *)(v4 + 16))
    {
      v7 = (uint64_t *)(v21 + 32 * v5);
      v8 = *v7;
      v9 = v7[1];
      v10 = v7[3];
      swift_bridgeObjectRetain();
      v11 = swift_bridgeObjectRetain();
      v12 = MEMORY[0x23B7C9268](v11);
      v13 = location + v8;
      if (__OFADD__(location, v8))
        goto LABEL_14;
      v14 = __OFSUB__(v9, v8);
      v15 = v9 - v8;
      if (v14)
        goto LABEL_15;
      v16 = (void *)v12;
      v17 = *(_QWORD *)(v10 + 16);
      if (v17)
      {
        swift_bridgeObjectRetain();
        for (i = 0; i != v17; ++i)
        {
          v19 = *(_QWORD *)(v10 + 8 * i + 32);
          -[objc_class removeAttribute:range:](of.super.super.isa, sel_removeAttribute_range_, v19, v13, v15);
        }
        swift_bridgeObjectRelease();
      }
      ++v5;
      type metadata accessor for NSAttributedStringKey(0);
      lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
      swift_bridgeObjectRetain();
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      -[objc_class addAttributes:range:](of.super.super.isa, sel_addAttributes_range_, isa, v13, v15);

      objc_autoreleasePoolPop(v16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v4 = v20;
      if (v5 == v22)
      {
        swift_bridgeObjectRelease();
        return;
      }
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
  }
}

Swift::Void __swiftcall ResolvableTextSegmentAttribute.Value.toggleAttributes(in:of:)(__C::_NSRange in, NSMutableAttributedString of)
{
  Swift::Int length;
  Swift::Int location;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  objc_class *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  objc_class *v12;
  objc_class *v13;
  __C::_NSRange v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  objc_class *v18;
  unint64_t v19;
  int64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  Swift::Int v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  objc_class *v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v44;
  uint64_t v45;
  objc_class *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int64_t v55;
  unint64_t v56;
  unint64_t v57;
  int64_t v58;
  unint64_t v59;
  int64_t v60;
  void *v61;
  uint64_t v62;
  char v63;
  id v64;
  uint64_t v65;
  Swift::Int v66;
  Swift::Int v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  Swift::Int v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  Swift::Int v77;
  uint64_t v79;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  id v98;
  Class isa;
  Swift::Int v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  objc_class *v106;
  char *v107;
  unint64_t v108;
  Swift::Int v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  objc_class *v113;
  uint64_t v114;
  unint64_t v115;
  objc_class *v116;
  uint64_t v117;
  unint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int64_t v124;
  unint64_t v125;
  int64_t v126;
  __int128 aBlock;
  __int128 v128;
  uint64_t (*v129)();
  uint64_t v130;
  uint64_t v131;
  objc_class *v132;

  length = in.length;
  location = in.location;
  v102 = type metadata accessor for ResolvableTextSegmentAttribute.Value(0);
  MEMORY[0x24BDAC7A8](v102);
  v101 = (uint64_t)&isa - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v103 = (char *)&isa - v7;
  if (one-time initialization token for resolvableTextSegment != -1)
    goto LABEL_109;
  while (1)
  {
    -[objc_class removeAttribute:range:](of.super.super.isa, sel_removeAttribute_range_, static NSAttributedStringKey.resolvableTextSegment, location, length);
    v8 = (objc_class *)MEMORY[0x24BEE4AF8];
    v132 = (objc_class *)MEMORY[0x24BEE4AF8];
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = &v132;
    v10 = swift_allocObject();
    *(_QWORD *)(v10 + 16) = closure #1 in NSAttributedString.runs(in:)partial apply;
    *(_QWORD *)(v10 + 24) = v9;
    v129 = thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
    v130 = v10;
    *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v128 = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
    *((_QWORD *)&v128 + 1) = &block_descriptor_64;
    v11 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    -[objc_class enumerateAttributesInRange:options:usingBlock:](of.super.super.isa, sel_enumerateAttributesInRange_options_usingBlock_, location, length, 0, v11);
    _Block_release(v11);
    LOBYTE(v11) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v11 & 1) != 0)
      break;
    v12 = v8;
    v13 = v132;
    swift_release();
    v14.location = location;
    ResolvableTextSegmentAttribute.Value.restoreDefault(in:of:)(v14, of);
    v132 = v12;
    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 16) = &v132;
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = closure #1 in NSAttributedString.runs(in:)partial apply;
    *(_QWORD *)(v16 + 24) = v15;
    v129 = thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
    v130 = v16;
    *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v128 = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
    *((_QWORD *)&v128 + 1) = &block_descriptor_75;
    v17 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    isa = of.super.super.isa;
    v109 = location;
    v100 = length;
    -[objc_class enumerateAttributesInRange:options:usingBlock:](of.super.super.isa, sel_enumerateAttributesInRange_options_usingBlock_, location, length, 0, v17);
    _Block_release(v17);
    LOBYTE(v17) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v17 & 1) != 0)
      goto LABEL_111;
    v18 = v132;
    swift_release();
    v19 = *((_QWORD *)v13 + 2);
    v115 = *((_QWORD *)v18 + 2);
    if (v115 <= v19)
      v20 = v19;
    else
      v20 = v115;
    v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20, 0, MEMORY[0x24BEE4AF8]);
    v22 = *((_QWORD *)v13 + 2);
    if (!v22)
    {
LABEL_97:
      v92 = v21;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v93 = (uint64_t)v103;
      UUID.init()();
      v94 = v102;
      v95 = *(int *)(v102 + 20);
      v96 = *(void **)(v104 + v95);
      *(_QWORD *)(v93 + v95) = v96;
      *(_QWORD *)(v93 + *(int *)(v94 + 24)) = v92;
      v97 = static NSAttributedStringKey.resolvableTextSegment;
      outlined init with copy of TypesettingLanguage(v93, v101, type metadata accessor for ResolvableTextSegmentAttribute.Value);
      v98 = v96;
      -[objc_class addAttribute:value:range:](isa, sel_addAttribute_value_range_, v97, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(), v109, v100);
      swift_unknownObjectRelease();
      outlined destroy of TypesettingConfiguration(v93, type metadata accessor for ResolvableTextSegmentAttribute.Value);
      return;
    }
    v23 = 0;
    v24 = 0;
    v120 = 0;
    v107 = (char *)v13 + 32;
    v110 = (char *)v18 + 32;
    v122 = MEMORY[0x24BEE4AD8] + 8;
    v25 = v109;
    v106 = v13;
    v113 = v18;
    v105 = v22;
    while (v24 >= v115)
    {
LABEL_10:
      ++v23;
      if (v24 <= 0)
      {
        if (v23 == v22)
          goto LABEL_97;
        v24 = 0;
      }
      else
      {
        if (v23 == v22)
          goto LABEL_97;
        --v24;
      }
      if (v23 >= *((_QWORD *)v13 + 2))
        goto LABEL_107;
    }
    v26 = &v107[24 * v23];
    v27 = *((_QWORD *)v26 + 1);
    v112 = *(_QWORD *)v26;
    v114 = v112 + v27;
    if (__OFADD__(v112, v27))
      goto LABEL_108;
    v108 = v23;
    v111 = *((_QWORD *)v26 + 2);
    v28 = v21;
    v29 = v24;
    v30 = swift_bridgeObjectRetain();
    v31 = v29;
    v32 = v113;
    v33 = v28;
    v34 = v110;
    v35 = v112;
    while (1)
    {
      if (v31 >= *((_QWORD *)v32 + 2))
        goto LABEL_100;
      v36 = (uint64_t *)&v34[24 * v31];
      v37 = *v36;
      v38 = v36[1];
      v39 = __OFADD__(v37, v38);
      v40 = v37 + v38;
      if (v39)
        break;
      if (v40 >= v114)
        v41 = v114;
      else
        v41 = v40;
      if (v37 >= v35 && v37 < v114)
      {
        v44 = v41 - v37;
        if (__OFSUB__(v41, v37))
          goto LABEL_105;
      }
      else
      {
        if (v35 < v37 || v35 >= v40)
        {
          v90 = v31;
          v91 = v33;
LABEL_9:
          swift_bridgeObjectRelease();
          v13 = v106;
          v21 = v91;
          v22 = v105;
          v23 = v108;
          v24 = v90;
          goto LABEL_10;
        }
        v44 = v41 - v35;
        if (__OFSUB__(v41, v35))
          goto LABEL_106;
        v37 = v35;
      }
      v45 = v37 - v25;
      if (__OFSUB__(v37, v25))
        goto LABEL_102;
      v39 = __OFADD__(v45, v44);
      v46 = (objc_class *)(v45 + v44);
      if (v39)
        goto LABEL_103;
      if ((uint64_t)v46 < v45)
        goto LABEL_104;
      v47 = *(_QWORD *)&v34[24 * v31 + 16];
      if (*(_QWORD *)(v47 + 16))
      {
        v116 = v46;
        v117 = v37 - v25;
        v118 = v31;
        v119 = v33;
        v132 = (objc_class *)MEMORY[0x24BEE4B08];
        MEMORY[0x24BDAC7A8](v30);
        *(&isa - 2) = (Class)v47;
        *(&isa - 1) = (Class)&v132;
        v48 = v111;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v49 = v120;
        v50 = specialized _NativeDictionary.filter(_:)(v48, (uint64_t (*)(id))closure #1 in ResolvableTextSegmentAttribute.Value.Run.init(range:oldAttributes:newAttributes:)partial apply, (uint64_t)(&isa - 4));
        v120 = v49;
        swift_bridgeObjectRelease();
        v51 = *(_QWORD *)(v47 + 64);
        v123 = v47 + 64;
        v52 = 1 << *(_BYTE *)(v47 + 32);
        if (v52 < 64)
          v53 = ~(-1 << v52);
        else
          v53 = -1;
        v54 = v53 & v51;
        v124 = (unint64_t)(v52 + 63) >> 6;
        swift_retain();
        v55 = 0;
        v121 = MEMORY[0x24BEE4AF8];
        while (1)
        {
          if (v54)
          {
            v56 = __clz(__rbit64(v54));
            v54 &= v54 - 1;
            v57 = v56 | (v55 << 6);
          }
          else
          {
            v58 = v55 + 1;
            if (__OFADD__(v55, 1))
            {
              __break(1u);
              goto LABEL_99;
            }
            if (v58 >= v124)
              goto LABEL_89;
            v59 = *(_QWORD *)(v123 + 8 * v58);
            ++v55;
            if (!v59)
            {
              v55 = v58 + 1;
              if (v58 + 1 >= v124)
                goto LABEL_89;
              v59 = *(_QWORD *)(v123 + 8 * v55);
              if (!v59)
              {
                v55 = v58 + 2;
                if (v58 + 2 >= v124)
                  goto LABEL_89;
                v59 = *(_QWORD *)(v123 + 8 * v55);
                if (!v59)
                {
                  v55 = v58 + 3;
                  if (v58 + 3 >= v124)
                    goto LABEL_89;
                  v59 = *(_QWORD *)(v123 + 8 * v55);
                  if (!v59)
                  {
                    v60 = v58 + 4;
                    if (v60 >= v124)
                    {
LABEL_89:
                      swift_release();
                      swift_release();
                      v25 = v109;
                      v30 = swift_bridgeObjectRelease();
                      v33 = v119;
                      v32 = v113;
                      v34 = v110;
                      v31 = v118;
                      v35 = v112;
                      v45 = v117;
                      v46 = v116;
                      goto LABEL_91;
                    }
                    v59 = *(_QWORD *)(v123 + 8 * v60);
                    v55 = v60;
                    if (!v59)
                    {
                      while (1)
                      {
                        v55 = v60 + 1;
                        if (__OFADD__(v60, 1))
                          break;
                        if (v55 >= v124)
                          goto LABEL_89;
                        v59 = *(_QWORD *)(v123 + 8 * v55);
                        ++v60;
                        if (v59)
                          goto LABEL_59;
                      }
LABEL_99:
                      __break(1u);
LABEL_100:
                      __break(1u);
                      goto LABEL_101;
                    }
                  }
                }
              }
            }
LABEL_59:
            v54 = (v59 - 1) & v59;
            v57 = __clz(__rbit64(v59)) + (v55 << 6);
          }
          v61 = *(void **)(*(_QWORD *)(v47 + 48) + 8 * v57);
          if (*(_QWORD *)(v50 + 16))
          {
            of.super.super.isa = (Class)v61;
            v62 = specialized __RawDictionaryStorage.find<A>(_:)(of.super.super.isa);
            if ((v63 & 1) != 0)
            {
              outlined init with copy of Any(*(_QWORD *)(v50 + 56) + 32 * v62, (uint64_t)&aBlock);
            }
            else
            {
              aBlock = 0u;
              v128 = 0u;
            }

            if (*((_QWORD *)&v128 + 1))
            {
              outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)&aBlock, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))type metadata accessor for MutableBox<CachedEnvironment>);

              continue;
            }
          }
          else
          {
            aBlock = 0u;
            v128 = 0u;
            v64 = v61;
          }
          outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)&aBlock, (uint64_t)&lazy cache variable for type metadata for Any?, v122, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
          of.super.super.isa = v132;
          if (*((_QWORD *)v132 + 2))
          {
            v125 = v54;
            v126 = v55;
            v65 = v50;
            location = static String._unconditionallyBridgeFromObjectiveC(_:)();
            length = v66;
            Hasher.init(_seed:)();
            swift_bridgeObjectRetain();
            String.hash(into:)();
            v67 = Hasher._finalize()();
            swift_bridgeObjectRelease();
            v68 = -1 << *((_BYTE *)of.super.super.isa + 32);
            v69 = v67 & ~v68;
            if (((*(_QWORD *)((char *)of.super.super.isa + ((v69 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v69) & 1) != 0)
            {
              length = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v71 = v70;
              if (length == static String._unconditionallyBridgeFromObjectiveC(_:)() && v71 == v72)
              {
LABEL_81:
                swift_bridgeObjectRelease_n();
LABEL_82:

                swift_bridgeObjectRelease();
                v50 = v65;
                v54 = v125;
                v55 = v126;
                continue;
              }
              location = v72;
              length = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((length & 1) != 0)
                goto LABEL_82;
              v74 = ~v68;
              while (1)
              {
                v69 = (v69 + 1) & v74;
                if (((*(_QWORD *)((char *)of.super.super.isa + ((v69 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v69) & 1) == 0)
                  break;
                length = static String._unconditionallyBridgeFromObjectiveC(_:)();
                v76 = v75;
                if (length == static String._unconditionallyBridgeFromObjectiveC(_:)() && v76 == v77)
                  goto LABEL_81;
                location = v77;
                length = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if ((length & 1) != 0)
                  goto LABEL_82;
              }
            }
            swift_bridgeObjectRelease();
            v50 = v65;
            v54 = v125;
            v55 = v126;
          }
          v79 = v121;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v81 = v79;
          v131 = v79;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v79 + 16) + 1, 1);
            v81 = v131;
          }
          v82 = v81;
          v84 = *(_QWORD *)(v81 + 16);
          v83 = *(_QWORD *)(v81 + 24);
          location = v84 + 1;
          if (v84 >= v83 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v83 > 1, v84 + 1, 1);
            v82 = v131;
          }
          *(_QWORD *)(v82 + 16) = location;
          v121 = v82;
          *(_QWORD *)(v82 + 8 * v84 + 32) = v61;
        }
      }
      v50 = MEMORY[0x24BEE4B00];
      v121 = MEMORY[0x24BEE4AF8];
LABEL_91:
      v86 = v33[2];
      v85 = v33[3];
      if (v86 >= v85 >> 1)
      {
        v89 = v31;
        location = v45;
        of.super.super.isa = v46;
        v30 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v85 > 1), v86 + 1, 1, v33);
        v46 = of.super.super.isa;
        v45 = location;
        v31 = v89;
        v34 = v110;
        v33 = (_QWORD *)v30;
        v35 = v112;
        v32 = v113;
      }
      v33[2] = v86 + 1;
      v87 = &v33[4 * v86];
      v87[4] = v45;
      v87[5] = v46;
      v88 = v121;
      v87[6] = v50;
      v87[7] = v88;
      if (++v31 == v115)
      {
        v91 = v33;
        v90 = v115;
        goto LABEL_9;
      }
    }
LABEL_101:
    __break(1u);
LABEL_102:
    __break(1u);
LABEL_103:
    __break(1u);
LABEL_104:
    __break(1u);
LABEL_105:
    __break(1u);
LABEL_106:
    __break(1u);
LABEL_107:
    __break(1u);
LABEL_108:
    __break(1u);
LABEL_109:
    swift_once();
  }
  __break(1u);
LABEL_111:
  __break(1u);
}

uint64_t ResolvableTextSegmentAttribute.Value.update(_:of:in:)(Swift::Int a1, _QWORD *a2, objc_class *a3, objc_class *a4)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  ProtocolDescriptor *v34;
  uint64_t (*v35)(_QWORD);
  unint64_t *v36;
  uint64_t v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  id v41;
  uint64_t v42;
  void *v43;
  void *v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  Swift::String v51;
  __int128 v52;
  uint64_t result;
  objc_class *v54;
  __C::_NSRange v55;
  Class isa;
  __int128 *p_aBlock;
  _QWORD *v58;
  id v59;
  void (*v60)(char *, char *, uint64_t);
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  Class v80;
  _QWORD *v81;
  void *v82;
  id v83;
  _QWORD *v84;
  uint64_t v85;
  void *v86;
  objc_class *v87;
  char *v88;
  void *v89;
  objc_class *v90;
  id v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  objc_class *v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  __int128 **v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  void *v116;
  id v117;
  _QWORD v118[3];
  objc_class *v119;
  id v120;
  uint64_t v121;
  __int128 *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  void (*v127)(char *, uint64_t);
  char *v128;
  uint64_t v129;
  char *v130;
  char *v131;
  objc_class *v132;
  uint64_t v133;
  _QWORD *v134;
  NSMutableAttributedString v135;
  Swift::Int v136;
  __int128 aBlock;
  __int128 v138;
  uint64_t (*v139)();
  uint64_t v140;
  uint64_t v141[4];
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  __int128 v145;

  v5 = v4;
  v132 = a4;
  v134 = a2;
  v8 = type metadata accessor for ResolvableTextSegmentAttribute.Value(0);
  MEMORY[0x24BDAC7A8](v8);
  v125 = (uint64_t)v118 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v130 = (char *)v118 - v11;
  MEMORY[0x24BDAC7A8](v12);
  v124 = (uint64_t)v118 - v13;
  v127 = (void (*)(char *, uint64_t))type metadata accessor for AttributedString.CharacterView();
  MEMORY[0x24BDAC7A8](v127);
  v126 = (char *)v118 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for AttributedString?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)v118 - v16;
  v133 = type metadata accessor for AttributedString();
  v18 = *(_QWORD *)(v133 - 8);
  MEMORY[0x24BDAC7A8](v133);
  v128 = (char *)v118 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v131 = (char *)v118 - v22;
  v135.super.super.isa = a3;
  v136 = a1;
  v23 = -[objc_class attributesAtIndex:effectiveRange:](a3, sel_attributesAtIndex_effectiveRange_, a1, 0, v21);
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
  v24 = MEMORY[0x24BEE4AD8];
  v25 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(_QWORD *)(v25 + 16))
  {
    aBlock = 0u;
    v138 = 0u;
LABEL_9:
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  v26 = *(int *)(v8 + 20);
  v27 = *(id *)((char *)v5 + v26);
  v28 = specialized __RawDictionaryStorage.find<A>(_:)();
  if ((v29 & 1) == 0)
  {
    aBlock = 0u;
    v138 = 0u;

    goto LABEL_9;
  }
  outlined init with copy of Any(*(_QWORD *)(v25 + 56) + 32 * v28, (uint64_t)&aBlock);

  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v138 + 1))
  {
LABEL_10:
    v33 = &lazy cache variable for type metadata for Any?;
    v34 = (ProtocolDescriptor *)MEMORY[0x24BEE1C68];
    v35 = (uint64_t (*)(_QWORD))type metadata accessor for MutableBox<CachedEnvironment>;
    v36 = (unint64_t *)(v24 + 8);
LABEL_11:
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)&aBlock, (uint64_t)v33, (uint64_t)v36, (uint64_t)v34, v35);
    goto LABEL_12;
  }
  outlined init with take of Any(&aBlock, &v145);
  outlined init with copy of Any((uint64_t)&v145, (uint64_t)v141);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for ResolvableStringAttribute);
  if ((swift_dynamicCast() & 1) == 0)
  {
    v139 = 0;
    aBlock = 0u;
    v138 = 0u;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v145);
    v33 = (uint64_t *)&lazy cache variable for type metadata for ResolvableStringAttribute?;
    v36 = &lazy cache variable for type metadata for ResolvableStringAttribute;
    v34 = &protocol descriptor for ResolvableStringAttribute;
    v35 = (uint64_t (*)(_QWORD))type metadata accessor for AnyTrackedValue?;
    goto LABEL_11;
  }
  v121 = v26;
  v129 = v8;
  v122 = v5;
  outlined init with take of ScrollStateRequest(&aBlock, (uint64_t)&v142);
  v31 = v143;
  v30 = v144;
  __swift_project_boxed_opaque_existential_1(&v142, v143);
  (*(void (**)(objc_class *, uint64_t, uint64_t))(v30 + 40))(v132, v31, v30);
  v32 = v133;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, v133) == 1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v145);
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)v17, (uint64_t)&lazy cache variable for type metadata for AttributedString?, (uint64_t)MEMORY[0x24BDCC5A8], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))type metadata accessor for [(_:)]);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v142);
LABEL_12:
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Any>, v24 + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v37 = swift_allocObject();
    *(_OWORD *)(v37 + 16) = xmmword_23527E860;
    *(_QWORD *)&aBlock = 0;
    *((_QWORD *)&aBlock + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(38);
    *(_QWORD *)&aBlock = 0;
    *((_QWORD *)&aBlock + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(54);
    v38._countAndFlagsBits = 0xD00000000000002DLL;
    v38._object = (void *)0x80000002352E42F0;
    String.append(_:)(v38);
    v39._countAndFlagsBits = _NSRange.description.getter();
    String.append(_:)(v39);
    swift_bridgeObjectRelease();
    v40._countAndFlagsBits = 543584032;
    v40._object = (void *)0xE400000000000000;
    String.append(_:)(v40);
    v41 = -[objc_class description](v135.super.super.isa, sel_description);
    v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v44 = v43;

    v45._countAndFlagsBits = v42;
    v45._object = v44;
    String.append(_:)(v45);
    swift_bridgeObjectRelease();
    v46._countAndFlagsBits = 34;
    v46._object = (void *)0xE100000000000000;
    String.append(_:)(v46);
    swift_bridgeObjectRelease();
    v47._countAndFlagsBits = 2108704;
    v47._object = (void *)0xE300000000000000;
    String.append(_:)(v47);
    v48._countAndFlagsBits = StaticString.description.getter();
    String.append(_:)(v48);
    swift_bridgeObjectRelease();
    v49._countAndFlagsBits = 58;
    v49._object = (void *)0xE100000000000000;
    String.append(_:)(v49);
    v142 = 84;
    v50._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v50);
    swift_bridgeObjectRelease();
    v51._object = (void *)0x80000002352E0BF0;
    v51._countAndFlagsBits = 0xD00000000000001CLL;
    String.append(_:)(v51);
    v52 = aBlock;
    *(_QWORD *)(v37 + 56) = MEMORY[0x24BEE0D00];
    *(_OWORD *)(v37 + 32) = v52;
    print(_:separator:terminator:)();
    return swift_bridgeObjectRelease();
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v131, v17, v32);
  v54 = (objc_class *)v136;
  v55.location = v136;
  isa = v135.super.super.isa;
  p_aBlock = v122;
  ResolvableTextSegmentAttribute.Value.restoreDefault(in:of:)(v55, v135);
  if (one-time initialization token for resolvableTextSegment != -1)
    goto LABEL_42;
  while (1)
  {
    v58 = v134;
    -[objc_class removeAttribute:range:](isa, sel_removeAttribute_range_, static NSAttributedStringKey.resolvableTextSegment, v54, v134);
    -[objc_class removeAttribute:range:](isa, sel_removeAttribute_range_, *(_QWORD *)((char *)p_aBlock + v121), v54, v58);
    v59 = -[objc_class attributesAtIndex:effectiveRange:](isa, sel_attributesAtIndex_effectiveRange_, v54, 0);
    v123 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    v60 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
    v61 = v128;
    v62 = v131;
    v60(v128, v131, v32);
    AttributedString.characters.getter();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC290], MEMORY[0x24BDCC2A8]);
    v63 = String.init<A>(_:)();
    v65 = v64;
    v127 = *(void (**)(char *, uint64_t))(v18 + 8);
    v127(v61, v32);
    v66 = (uint64_t *)((char *)v132 + *(int *)(type metadata accessor for ResolvableStringResolutionContext() + 20));
    v68 = *v66;
    v67 = v66[1];
    if (v67)
    {
      swift_retain_n();
      swift_retain_n();
      v69 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v68);
      swift_release();
      swift_release();
      if ((v69 & 1) != 0)
        goto LABEL_17;
    }
    else
    {
      aBlock = (unint64_t)v68;
      swift_retain();
      if ((specialized static ShouldRedactContentKey.value(in:)((uint64_t *)&aBlock, v73, v74, v75) & 1) != 0)
      {
LABEL_17:
        v70 = String.count.getter();
        v63 = MEMORY[0x23B7C5FA4](3081666804, 0xA400000000000000, v70);
        v72 = v71;
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        v65 = v72;
        goto LABEL_20;
      }
    }
    swift_release();
    swift_release();
LABEL_20:
    *(_QWORD *)&aBlock = v68;
    *((_QWORD *)&aBlock + 1) = v67;
    swift_retain();
    swift_retain();
    v76 = String.caseConvertedIfNeeded(_:)((uint64_t *)&aBlock, v63, v65);
    v78 = v77;
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    v79 = (void *)MEMORY[0x23B7C5DAC](v76, v78);
    swift_bridgeObjectRelease();
    v80 = v135.super.super.isa;
    v32 = v136;
    v81 = v134;
    -[objc_class replaceCharactersInRange:withString:](v135.super.super.isa, sel_replaceCharactersInRange_withString_, v136, v134, v79);

    type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
    v60(v61, v62, v133);
    v82 = (void *)NSAttributedString.init(_:)();
    v83 = objc_msgSend(v82, sel_length);
    v84 = (_QWORD *)swift_allocObject();
    v84[2] = v80;
    v84[3] = v32;
    v84[4] = v81;
    v85 = swift_allocObject();
    *(_QWORD *)(v85 + 16) = partial apply for closure #1 in ResolvableTextSegmentAttribute.Value.update(_:of:in:);
    *(_QWORD *)(v85 + 24) = v84;
    v134 = v84;
    v139 = thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
    v140 = v85;
    *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v138 = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
    *((_QWORD *)&v138 + 1) = &block_descriptor_86_0;
    v86 = _Block_copy(&aBlock);
    v87 = v80;
    swift_retain();
    swift_release();
    objc_msgSend(v82, sel_enumerateAttributesInRange_options_usingBlock_, 0, v83, 0, v86);
    _Block_release(v86);
    LOBYTE(v86) = swift_isEscapingClosureAtFileLocation();
    result = swift_release();
    if ((v86 & 1) != 0)
    {
      __break(1u);
LABEL_44:
      __break(1u);
      return result;
    }
    v88 = (char *)objc_msgSend(v82, sel_length);
    v126 = (char *)static NSAttributedStringKey.resolvableTextSegment;
    v89 = *(void **)((char *)v122 + v121);
    v90 = v87;
    v91 = v89;
    v92 = v130;
    UUID.init()();
    *(_QWORD *)&v92[*(int *)(v129 + 20)] = v91;
    v141[0] = MEMORY[0x24BEE4AF8];
    v93 = swift_allocObject();
    *(_QWORD *)(v93 + 16) = v141;
    v94 = swift_allocObject();
    *(_QWORD *)(v94 + 16) = closure #1 in NSAttributedString.runs(in:)partial apply;
    *(_QWORD *)(v94 + 24) = v93;
    v139 = thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
    v140 = v94;
    *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v138 = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
    *((_QWORD *)&v138 + 1) = &block_descriptor_97;
    v95 = v90;
    v96 = _Block_copy(&aBlock);
    v120 = v91;
    swift_retain();
    swift_release();
    v128 = v88;
    -[objc_class enumerateAttributesInRange:options:usingBlock:](v90, sel_enumerateAttributesInRange_options_usingBlock_, v32, v88, 0, v96);
    _Block_release(v96);
    LOBYTE(v96) = swift_isEscapingClosureAtFileLocation();
    result = swift_release();
    if ((v96 & 1) != 0)
      goto LABEL_44;
    isa = (Class)v82;
    v97 = v141[0];
    swift_release();
    v54 = *(objc_class **)(v97 + 16);
    if (!v54)
      break;
    v118[1] = v118;
    v119 = v95;
    *(_QWORD *)&aBlock = MEMORY[0x24BEE4AF8];
    p_aBlock = &aBlock;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)v54, 0);
    v18 = 0;
    v98 = aBlock;
    v118[2] = v97;
    v99 = (__int128 **)(v97 + 48);
    v132 = isa;
    while (1)
    {
      v100 = (uint64_t)*(v99 - 2);
      v101 = v100 - v32;
      if (__OFSUB__(v100, v32))
        break;
      v102 = (uint64_t)*(v99 - 1);
      p_aBlock = *v99;
      v32 = v101 + v102;
      v103 = __OFADD__(v101, v102);
      v104 = swift_bridgeObjectRetain();
      if (v103)
        goto LABEL_40;
      if (v32 < v101)
        goto LABEL_41;
      v135.super.super.isa = v54;
      if (*((_QWORD *)p_aBlock + 2))
      {
        v141[0] = MEMORY[0x24BEE4B08];
        MEMORY[0x24BDAC7A8](v104);
        v118[-2] = p_aBlock;
        v118[-1] = v141;
        v105 = swift_bridgeObjectRetain();
        v106 = specialized _NativeDictionary.filter(_:)(v105, (uint64_t (*)(id))closure #1 in ResolvableTextSegmentAttribute.Value.Run.init(range:oldAttributes:newAttributes:)partial apply, (uint64_t)&v118[-4]);
        swift_bridgeObjectRelease();
        swift_retain();
        specialized Sequence.filter(_:)((uint64_t)p_aBlock, v106, v141);
        v108 = v107;
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        v108 = MEMORY[0x24BEE4AF8];
        v106 = MEMORY[0x24BEE4B00];
      }
      *(_QWORD *)&aBlock = v98;
      v110 = *(_QWORD *)(v98 + 16);
      v109 = *(_QWORD *)(v98 + 24);
      if (v110 >= v109 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v109 > 1, v110 + 1, 1);
        v98 = aBlock;
      }
      *(_QWORD *)(v98 + 16) = v110 + 1;
      v111 = (_QWORD *)(v98 + 32 * v110);
      v111[4] = v101;
      v111[5] = v32;
      v111[6] = v106;
      v111[7] = v108;
      v99 += 3;
      v54 = (Class)((char *)v135.super.super.isa - 1);
      v32 = v136;
      p_aBlock = (__int128 *)v129;
      isa = v132;
      if (v135.super.super.isa == (Class)1)
      {

        v95 = v119;
        goto LABEL_38;
      }
    }
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    swift_once();
  }

  v98 = MEMORY[0x24BEE4AF8];
  p_aBlock = (__int128 *)v129;
LABEL_38:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v112 = (uint64_t)v130;
  *(_QWORD *)&v130[*((int *)p_aBlock + 6)] = v98;
  v113 = v124;
  outlined init with take of LocalizedStringKey.FormatArgument(v112, v124, type metadata accessor for ResolvableTextSegmentAttribute.Value);
  outlined init with copy of TypesettingLanguage(v113, v125, type metadata accessor for ResolvableTextSegmentAttribute.Value);
  v114 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  outlined destroy of TypesettingConfiguration(v113, type metadata accessor for ResolvableTextSegmentAttribute.Value);
  v115 = v128;
  -[objc_class addAttribute:value:range:](v95, sel_addAttribute_value_range_, v126, v114, v32, v128);
  swift_unknownObjectRelease();
  v116 = *(void **)((char *)v122 + v121);
  __swift_project_boxed_opaque_existential_1(&v142, v143);
  v117 = v116;
  -[objc_class addAttribute:value:range:](v95, sel_addAttribute_value_range_, v117, _bridgeAnythingToObjectiveC<A>(_:)(), v32, v115);

  swift_unknownObjectRelease();
  v127(v131, v133);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v145);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v142);
  return swift_release();
}

void closure #1 in ResolvableTextSegmentAttribute.Value.update(_:of:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  NSDictionary v9;
  Class isa;

  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
  v9.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (__OFADD__(a6, a2))
  {
    __break(1u);
  }
  else
  {
    isa = v9.super.isa;
    objc_msgSend(a5, sel_addAttributes_range_);

  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ResolvableTextSegmentAttribute.Value.CodingKeys()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000016;
  if (*v0 != 1)
    v1 = 1936618866;
  if (*v0)
    return v1;
  else
    return 1684632949;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ResolvableTextSegmentAttribute.Value.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized ResolvableTextSegmentAttribute.Value.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ResolvableTextSegmentAttribute.Value.CodingKeys()
{
  lazy protocol witness table accessor for type ResolvableTextSegmentAttribute.Value.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ResolvableTextSegmentAttribute.Value.CodingKeys()
{
  lazy protocol witness table accessor for type ResolvableTextSegmentAttribute.Value.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t ResolvableTextSegmentAttribute.Value.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v3 = v1;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<ResolvableTextSegmentAttribute.Value.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvableTextSegmentAttribute.Value.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.CodingKeys, (uint64_t)&unk_250640B08, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v12 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ResolvableTextSegmentAttribute.Value.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v14) = 0;
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v10 = type metadata accessor for ResolvableTextSegmentAttribute.Value(0);
    v14 = *(_QWORD *)(v3 + *(int *)(v10 + 20));
    v13 = 1;
    type metadata accessor for CodableRawRepresentable<NSAttributedStringKey>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type CodableRawRepresentable<NSAttributedStringKey> and conformance CodableRawRepresentable<A>, (uint64_t (*)(uint64_t))type metadata accessor for CodableRawRepresentable<NSAttributedStringKey>, (uint64_t)")\x1B=\x1Bе\v");
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v14 = *(_QWORD *)(v3 + *(int *)(v10 + 24));
    v13 = 2;
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for [ResolvableTextSegmentAttribute.Value.Run], (uint64_t)&type metadata for ResolvableTextSegmentAttribute.Value.Run, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    lazy protocol witness table accessor for type [ResolvableTextSegmentAttribute.Value.Run] and conformance <A> [A](&lazy protocol witness table cache variable for type [ResolvableTextSegmentAttribute.Value.Run] and conformance <A> [A], (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvableTextSegmentAttribute.Value.Run and conformance ResolvableTextSegmentAttribute.Value.Run, MEMORY[0x24BEE12A0]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

Swift::Int ResolvableTextSegmentAttribute.Value.hashValue.getter()
{
  Hasher.init(_seed:)();
  UUID.hash(into:)();
  return Hasher._finalize()();
}

void ResolvableTextSegmentAttribute.Value.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  v20 = a2;
  v3 = type metadata accessor for UUID();
  v23 = *(_QWORD *)(v3 - 8);
  v24 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v21 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<ResolvableTextSegmentAttribute.Value.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvableTextSegmentAttribute.Value.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.CodingKeys, (uint64_t)&unk_250640B08, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v22 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v20 - v7;
  v9 = type metadata accessor for ResolvableTextSegmentAttribute.Value(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ResolvableTextSegmentAttribute.Value.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.CodingKeys();
  v25 = v8;
  v12 = v26;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    v26 = v9;
    v13 = (uint64_t)v11;
    v14 = (uint64_t)a1;
    v15 = v23;
    LOBYTE(v28) = 0;
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
    v16 = v21;
    v17 = v22;
    v18 = v24;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v13, v16, v18);
    type metadata accessor for CodableRawRepresentable<NSAttributedStringKey>();
    v27 = 1;
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type CodableRawRepresentable<NSAttributedStringKey> and conformance CodableRawRepresentable<A>, (uint64_t (*)(uint64_t))type metadata accessor for CodableRawRepresentable<NSAttributedStringKey>, (uint64_t)&protocol conformance descriptor for CodableRawRepresentable<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v19 = v26;
    *(_QWORD *)(v13 + *(int *)(v26 + 20)) = v28;
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for [ResolvableTextSegmentAttribute.Value.Run], (uint64_t)&type metadata for ResolvableTextSegmentAttribute.Value.Run, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    v27 = 2;
    lazy protocol witness table accessor for type [ResolvableTextSegmentAttribute.Value.Run] and conformance <A> [A](&lazy protocol witness table cache variable for type [ResolvableTextSegmentAttribute.Value.Run] and conformance <A> [A], (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvableTextSegmentAttribute.Value.Run and conformance ResolvableTextSegmentAttribute.Value.Run, MEMORY[0x24BEE12D0]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v25, v17);
    *(_QWORD *)(v13 + *(int *)(v19 + 24)) = v28;
    outlined init with copy of TypesettingLanguage(v13, v20, type metadata accessor for ResolvableTextSegmentAttribute.Value);
    __swift_destroy_boxed_opaque_existential_1(v14);
    outlined destroy of TypesettingConfiguration(v13, type metadata accessor for ResolvableTextSegmentAttribute.Value);
  }
}

void protocol witness for Decodable.init(from:) in conformance ResolvableTextSegmentAttribute.Value(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  ResolvableTextSegmentAttribute.Value.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ResolvableTextSegmentAttribute.Value(_QWORD *a1)
{
  return ResolvableTextSegmentAttribute.Value.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ResolvableTextSegmentAttribute.Value()
{
  Hasher.init(_seed:)();
  UUID.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ResolvableTextSegmentAttribute.Value()
{
  Hasher.init(_seed:)();
  UUID.hash(into:)();
  return Hasher._finalize()();
}

unint64_t static ResolvableTextSegmentAttribute.name.getter()
{
  return 0xD00000000000001DLL;
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance ResolvableTextSegmentAttribute()
{
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value and conformance ResolvableTextSegmentAttribute.Value, type metadata accessor for ResolvableTextSegmentAttribute.Value, (uint64_t)&protocol conformance descriptor for ResolvableTextSegmentAttribute.Value);
  return static DecodableAttributedStringKey<>.decode(from:)();
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance ResolvableTextSegmentAttribute()
{
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value and conformance ResolvableTextSegmentAttribute.Value, type metadata accessor for ResolvableTextSegmentAttribute.Value, (uint64_t)&protocol conformance descriptor for ResolvableTextSegmentAttribute.Value);
  return static EncodableAttributedStringKey<>.encode(_:to:)();
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance ResolvableTextSegmentAttribute()
{
  return 0xD00000000000001DLL;
}

uint64_t closure #1 in static ResolvableTextSegmentAttribute.toggleAttributes(in:)(uint64_t a1, Swift::Int a2, Swift::Int a3, uint64_t a4, NSMutableAttributedString a5)
{
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  int v16;
  uint64_t v17;
  void *v18;
  __C::_NSRange v19;
  _BYTE v21[24];
  uint64_t v22;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for ResolvableTextSegmentAttribute.Value?, type metadata accessor for ResolvableTextSegmentAttribute.Value, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v9);
  v11 = &v21[-v10];
  v12 = type metadata accessor for ResolvableTextSegmentAttribute.Value(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = &v21[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of Any?(a1, (uint64_t)v21);
  if (v22)
  {
    v16 = swift_dynamicCast();
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, v16 ^ 1u, 1, v12);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) != 1)
    {
      v17 = outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v11, (uint64_t)v15, type metadata accessor for ResolvableTextSegmentAttribute.Value);
      v18 = (void *)MEMORY[0x23B7C9268](v17);
      v19.location = a2;
      v19.length = a3;
      ResolvableTextSegmentAttribute.Value.toggleAttributes(in:of:)(v19, a5);
      objc_autoreleasePoolPop(v18);
      return outlined destroy of TypesettingConfiguration((uint64_t)v15, type metadata accessor for ResolvableTextSegmentAttribute.Value);
    }
  }
  else
  {
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)v21, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
  }
  return outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for ResolvableTextSegmentAttribute.Value?, (uint64_t)type metadata accessor for ResolvableTextSegmentAttribute.Value, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))type metadata accessor for [(_:)]);
}

uint64_t closure #1 in static ResolvableTextSegmentAttribute.update(_:in:)(uint64_t a1, Swift::Int a2, _QWORD *a3, uint64_t a4, objc_class *a5, objc_class *a6)
{
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  int v18;
  _BYTE v20[24];
  uint64_t v21;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for ResolvableTextSegmentAttribute.Value?, type metadata accessor for ResolvableTextSegmentAttribute.Value, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v11);
  v13 = &v20[-v12];
  v14 = type metadata accessor for ResolvableTextSegmentAttribute.Value(0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = &v20[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of Any?(a1, (uint64_t)v20);
  if (v21)
  {
    v18 = swift_dynamicCast();
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v13, v18 ^ 1u, 1, v14);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) != 1)
    {
      outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v13, (uint64_t)v17, type metadata accessor for ResolvableTextSegmentAttribute.Value);
      ResolvableTextSegmentAttribute.Value.update(_:of:in:)(a2, a3, a5, a6);
      return outlined destroy of TypesettingConfiguration((uint64_t)v17, type metadata accessor for ResolvableTextSegmentAttribute.Value);
    }
  }
  else
  {
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)v20, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, 1, 1, v14);
  }
  return outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for ResolvableTextSegmentAttribute.Value?, (uint64_t)type metadata accessor for ResolvableTextSegmentAttribute.Value, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))type metadata accessor for [(_:)]);
}

id static ResolvableTextSegmentAttribute.buildDynamicTextSegment<A>(for:style:environment:includeDefaultAttributes:options:properties:)(char *a1, void *a2, uint64_t *a3, char a4, void **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  void *v9;
  id v11;
  uint64_t v12;
  uint64_t v13;

  v8 = a3[1];
  v9 = *a5;
  if ((*a5 & 0x80) != 0)
  {
    v12 = *a3;
    v13 = v8;
    v11 = v9;
    return static ResolvableTextSegmentAttribute.buildResolvableTextSegment<A>(for:style:environment:includeDefaultAttributes:options:properties:)(a1, a2, &v12, a4 & 1, &v11, a6, a7, a8);
  }
  else
  {
    v12 = *a3;
    v13 = v8;
    v11 = v9;
    return static ResolvableTextSegmentAttribute.buildUpdatableTextSegment<A>(for:style:environment:includeDefaultAttributes:options:properties:)((uint64_t)a1, (uint64_t)a2, &v12, a4 & 1, (uint64_t *)&v11, a6, a7, a8);
  }
}

id static ResolvableTextSegmentAttribute.buildResolvableTextSegment<A>(for:style:environment:includeDefaultAttributes:options:properties:)(char *a1, void *a2, uint64_t *a3, int a4, id *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t TupleTypeMetadata2;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Swift::Int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  void (*v48)(char *, uint64_t);
  __int16 v49;
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  char *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  void *v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int *v69;
  uint64_t *v70;
  uint64_t *v71;
  char *v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  void (*v78)(uint64_t *, uint64_t, uint64_t);
  int64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  void *v91;
  id v92;
  id v93;
  char *v94;
  char **p_type;
  _QWORD *v96;
  uint64_t v97;
  int64_t v98;
  uint64_t v99;
  id v100;
  uint64_t v101;
  int64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  BOOL v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  _QWORD *v113;
  id v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  id v123;
  uint64_t v125;
  void (*v126)(uint64_t, int64_t);
  uint64_t v127;
  char *v128;
  int *v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  id v134;
  id v135;
  id v136;
  char *v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t aBlock[5];
  uint64_t v146;
  uint64_t v147;
  _OWORD v148[2];
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  uint64_t v155;

  v144 = a8;
  LODWORD(v134) = a4;
  v136 = a2;
  v131 = a1;
  v12 = type metadata accessor for ResolvableTextSegmentAttribute.Value(0);
  MEMORY[0x24BDAC7A8](v12);
  v127 = (uint64_t)&v125 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v137 = (char *)&v125 - v15;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v125 - v17;
  v19 = type metadata accessor for PlatformAttributeResolver(0);
  MEMORY[0x24BDAC7A8](v19);
  v139 = (uint64_t *)((char *)&v125 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v133 = *(_QWORD *)(a7 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v142 = (char *)&v125 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = a7;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v25 = (char *)&v125 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v28 = (char *)&v125 - v27;
  v29 = *a3;
  v30 = a3[1];
  v135 = *a5;
  v128 = v18;
  v138 = v12;
  v130 = v31;
  v129 = (int *)v19;
  v143 = v30;
  v140 = v29;
  v132 = a6;
  v33 = v32;
  if (v30)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v29, (uint64_t *)v148);
    swift_release_n();
    swift_release_n();
    v34 = *(_QWORD *)&v148[0];
  }
  else
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>, (uint64_t)&type metadata for EnvironmentValues.TextSizeVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSizeVariantKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v35);
    v36 = *(_QWORD *)&v148[0];
    v37 = swift_retain_n();
    v38 = specialized find1<A>(_:key:filter:)(v37, v36);
    if (v38)
      v34 = *(_QWORD *)(v38 + 72);
    else
      v34 = 0;
    swift_release_n();
  }
  v39 = *(int *)(v33 + 48);
  aBlock[0] = v34;
  v40 = v144;
  v41 = v28;
  v42 = v28;
  v43 = v141;
  v44 = (*(uint64_t (**)(char *, uint64_t *, uint64_t, uint64_t))(v144 + 72))(v42, aBlock, v141, v144);
  v41[v39] = v44 & 1;
  v45 = *(int *)(v33 + 48);
  v46 = v133;
  v47 = *(void (**)(char *, char *, uint64_t))(v133 + 16);
  v47(v25, v41, v43);
  v25[v45] = v44 & 1;
  v48 = *(void (**)(char *, uint64_t))(v46 + 8);
  v48(v25, v43);
  if ((v44 & 1) != 0)
    v49 = 256;
  else
    v49 = 0;
  v50 = v132;
  *(_WORD *)(v132 + 32) |= v49;
  v47(v25, v41, v43);
  v51 = *(void (**)(char *, char *, uint64_t))(v46 + 32);
  v52 = v50;
  v53 = v142;
  v51(v142, v25, v43);
  *(_QWORD *)&v148[0] = v140;
  *((_QWORD *)&v148[0] + 1) = v143;
  v54 = (uint64_t)v135;
  aBlock[0] = (uint64_t)v135;
  v55 = v134 & 1;
  v56 = (uint64_t)v53;
  v57 = (uint64_t)v136;
  v58 = (void *)static ResolvableTextSegmentAttribute.buildStaticTextSegment<A>(for:style:environment:includeDefaultAttributes:options:properties:)(v56, (uint64_t)v136, (uint64_t *)v148, v55, aBlock, v52, v43, v40);
  v59 = v58;
  if (v58)
  {
    v126 = (void (*)(uint64_t, int64_t))v48;
    v131 = v41;
    v133 = v33;
    v60 = objc_msgSend(v58, sel_string);
    v61 = v57;
    v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v134 = v59;
    v64 = v63;

    v65 = swift_allocObject();
    *(_QWORD *)(v65 + 16) = v62;
    *(_QWORD *)(v65 + 24) = v64;
    v66 = v140;
    v67 = v143;
    *(_QWORD *)&v148[0] = v140;
    *((_QWORD *)&v148[0] + 1) = v143;
    aBlock[0] = v54;
    swift_bridgeObjectRetain();
    v68 = Text.Style.nsAttributes(content:environment:includeDefaultAttributes:with:properties:)((uint64_t)partial apply for closure #1 in static ResolvableTextSegmentAttribute.buildResolvableTextSegment<A>(for:style:environment:includeDefaultAttributes:options:properties:), v65, (uint64_t *)v148, v55, aBlock, v52);
    swift_release();
    v69 = v129;
    v70 = v139;
    outlined init with copy of TypesettingLanguage(v61, (uint64_t)v139 + v129[5], type metadata accessor for Text.Style);
    *v70 = v62;
    v70[1] = v64;
    v71 = (uint64_t *)((char *)v70 + v69[6]);
    *v71 = v66;
    v71[1] = v67;
    *(uint64_t *)((char *)v70 + v69[7]) = v54;
    *(uint64_t *)((char *)v70 + v69[8]) = v68;
    v72 = (char *)v70 + v69[9];
    v73 = *(_OWORD *)(v52 + 112);
    *((_OWORD *)v72 + 6) = *(_OWORD *)(v52 + 96);
    *((_OWORD *)v72 + 7) = v73;
    *((_QWORD *)v72 + 16) = *(_QWORD *)(v52 + 128);
    v74 = *(_OWORD *)(v52 + 48);
    *((_OWORD *)v72 + 2) = *(_OWORD *)(v52 + 32);
    *((_OWORD *)v72 + 3) = v74;
    v75 = *(_OWORD *)(v52 + 80);
    *((_OWORD *)v72 + 4) = *(_OWORD *)(v52 + 64);
    *((_OWORD *)v72 + 5) = v75;
    v76 = *(_OWORD *)(v52 + 16);
    *(_OWORD *)v72 = *(_OWORD *)v52;
    *((_OWORD *)v72 + 1) = v76;
    v77 = v144;
    v78 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v144 + 64);
    swift_retain();
    v143 = v68;
    swift_bridgeObjectRetain();
    swift_retain();
    v79 = v141;
    v78(v70, v141, v77);
    v80 = *((_OWORD *)v72 + 5);
    v81 = *((_OWORD *)v72 + 7);
    v153 = *((_OWORD *)v72 + 6);
    v154 = v81;
    v82 = *((_OWORD *)v72 + 1);
    v83 = *((_OWORD *)v72 + 3);
    v149 = *((_OWORD *)v72 + 2);
    v84 = v149;
    v150 = v83;
    v85 = *((_OWORD *)v72 + 3);
    v86 = *((_OWORD *)v72 + 5);
    v151 = *((_OWORD *)v72 + 4);
    v87 = v151;
    v152 = v86;
    v88 = *((_OWORD *)v72 + 1);
    v148[0] = *(_OWORD *)v72;
    v89 = v148[0];
    v148[1] = v88;
    v90 = *((_OWORD *)v72 + 7);
    *(_OWORD *)(v52 + 96) = v153;
    *(_OWORD *)(v52 + 112) = v90;
    *(_OWORD *)(v52 + 32) = v84;
    *(_OWORD *)(v52 + 48) = v85;
    *(_OWORD *)(v52 + 64) = v87;
    *(_OWORD *)(v52 + 80) = v80;
    v155 = *((_QWORD *)v72 + 16);
    *(_QWORD *)(v52 + 128) = *((_QWORD *)v72 + 16);
    *(_OWORD *)v52 = v89;
    *(_OWORD *)(v52 + 16) = v82;
    outlined retain of Text.ResolvedProperties(v148);
    v140 = *(_QWORD *)(v77 + 8);
    v91 = (void *)static ResolvableStringAttributeRepresentation.attribute.getter();
    v92 = v134;
    v93 = objc_msgSend(v92, sel_length);
    v94 = v137;
    UUID.init()();
    p_type = (char **)v138;
    *(_QWORD *)&v94[*(int *)(v138 + 20)] = v91;
    v147 = MEMORY[0x24BEE4AF8];
    v96 = (_QWORD *)swift_allocObject();
    v96[2] = &v147;
    v97 = swift_allocObject();
    *(_QWORD *)(v97 + 16) = partial apply for closure #1 in NSAttributedString.runs(in:);
    *(_QWORD *)(v97 + 24) = v96;
    aBlock[4] = (uint64_t)thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
    v146 = v97;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
    aBlock[3] = (uint64_t)&block_descriptor_40;
    v98 = (int64_t)_Block_copy(aBlock);
    v99 = v146;
    v100 = v91;
    swift_retain();
    swift_release();
    v136 = v92;
    objc_msgSend(v92, sel_enumerateAttributesInRange_options_usingBlock_, 0, v93, 0, v98);
    _Block_release((const void *)v98);
    LOBYTE(v93) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v93 & 1) == 0)
    {
      v101 = v147;
      swift_release();
      v102 = *(_QWORD *)(v101 + 16);
      if (!v102)
      {

        v114 = v136;
        v115 = MEMORY[0x24BEE4AF8];
LABEL_28:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v116 = (uint64_t)v137;
        *(_QWORD *)&v137[*(int *)(v138 + 24)] = v115;
        v99 = (uint64_t)v128;
        outlined init with take of LocalizedStringKey.FormatArgument(v116, (uint64_t)v128, type metadata accessor for ResolvableTextSegmentAttribute.Value);
        v117 = (void *)static ResolvableStringAttributeRepresentation.attribute.getter();
        v68 = (uint64_t)v142;
        v118 = _bridgeAnythingToObjectiveC<A>(_:)();
        v96 = v114;
        p_type = &stru_250685FF0.type;
        v119 = objc_msgSend(v96, sel_length);

        objc_msgSend(v96, sel_addAttribute_value_range_, v117, v118, 0, v119);
        swift_unknownObjectRelease();
        v98 = v79;
        if (one-time initialization token for resolvableTextSegment == -1)
          goto LABEL_29;
        goto LABEL_34;
      }
      v129 = (int *)&v125;
      v135 = v100;
      aBlock[0] = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v102, 0);
      v144 = aBlock[0];
      v132 = v101;
      p_type = (char **)(v101 + 48);
      while (1)
      {
        v103 = (uint64_t)*(p_type - 1);
        v96 = *p_type;
        v104 = (uint64_t)*(p_type - 2);
        v105 = v104 + v103;
        v106 = __OFADD__(v104, v103);
        v107 = swift_bridgeObjectRetain();
        if (v106)
          break;
        if (v105 < v104)
          goto LABEL_32;
        if (v96[2])
        {
          v147 = MEMORY[0x24BEE4B08];
          MEMORY[0x24BDAC7A8](v107);
          *(&v125 - 2) = (uint64_t)v96;
          *(&v125 - 1) = (uint64_t)&v147;
          v108 = swift_bridgeObjectRetain();
          v68 = specialized _NativeDictionary.filter(_:)(v108, (uint64_t (*)(id))partial apply for closure #1 in ResolvableTextSegmentAttribute.Value.Run.init(range:oldAttributes:newAttributes:), (uint64_t)(&v125 - 4));
          swift_bridgeObjectRelease();
          swift_retain();
          specialized Sequence.filter(_:)((uint64_t)v96, v68, &v147);
          v110 = v109;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          v110 = MEMORY[0x24BEE4AF8];
          v68 = MEMORY[0x24BEE4B00];
        }
        v111 = v144;
        aBlock[0] = v144;
        v98 = *(_QWORD *)(v144 + 16);
        v112 = *(_QWORD *)(v144 + 24);
        v99 = v98 + 1;
        if (v98 >= v112 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v112 > 1, v98 + 1, 1);
          v111 = aBlock[0];
        }
        *(_QWORD *)(v111 + 16) = v99;
        v144 = v111;
        v113 = (_QWORD *)(v111 + 32 * v98);
        v113[4] = v104;
        v113[5] = v105;
        v113[6] = v68;
        v113[7] = v110;
        p_type += 3;
        if (!--v102)
        {

          v114 = v136;
          v79 = v141;
          v115 = v144;
          goto LABEL_28;
        }
      }
      __break(1u);
LABEL_32:
      __break(1u);
    }
    __break(1u);
LABEL_34:
    swift_once();
LABEL_29:
    v120 = static NSAttributedStringKey.resolvableTextSegment;
    outlined init with copy of TypesettingLanguage(v99, v127, type metadata accessor for ResolvableTextSegmentAttribute.Value);
    v121 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    v122 = v96;
    v123 = objc_msgSend(v122, p_type[301]);

    objc_msgSend(v122, sel_addAttribute_value_range_, v120, v121, 0, v123);
    swift_unknownObjectRelease();
    outlined destroy of TypesettingConfiguration(v99, type metadata accessor for ResolvableTextSegmentAttribute.Value);
    outlined destroy of TypesettingConfiguration((uint64_t)v139, type metadata accessor for PlatformAttributeResolver);
    v126(v68, v98);
    (*(void (**)(char *, uint64_t))(v130 + 8))(v131, v133);
    return v134;
  }
  v48(v142, v141);
  (*(void (**)(char *, uint64_t))(v130 + 8))(v41, v33);
  return v59;
}

void *static ResolvableTextSegmentAttribute.buildUpdatableTextSegment<A>(for:style:environment:includeDefaultAttributes:options:properties:)(uint64_t a1, uint64_t a2, uint64_t *a3, char a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::Int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  void *v34;
  void *v35;
  SEL *v36;
  id v37;
  char *v38;
  uint64_t v39;
  SEL *v40;
  int64_t p_type;
  void *v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  SEL *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  SEL *v65;
  id v66;
  _QWORD v68[3];
  id v69;
  SEL *v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t aBlock;
  uint64_t v82;
  uint64_t (*v83)(uint64_t);
  void *v84;
  uint64_t (*v85)();
  int64_t v86;
  uint64_t v87[2];

  v76 = type metadata accessor for ResolvableTextSegmentAttribute.Value(0);
  MEMORY[0x24BDAC7A8](v76);
  v73 = (uint64_t)v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v77 = (char *)v68 - v17;
  MEMORY[0x24BDAC7A8](v18);
  v74 = (uint64_t)v68 - v19;
  v79 = a7;
  v75 = *(_QWORD *)(a7 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v78 = (char *)v68 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *a3;
  v23 = a3[1];
  v24 = *a5;
  if (v23)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v22, &aBlock);
    swift_release_n();
    swift_release_n();
    v25 = aBlock;
  }
  else
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>, (uint64_t)&type metadata for EnvironmentValues.TextSizeVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSizeVariantKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v26);
    v27 = aBlock;
    v28 = swift_retain_n();
    v29 = specialized find1<A>(_:key:filter:)(v28, v27);
    if (v29)
      v25 = *(_QWORD *)(v29 + 72);
    else
      v25 = 0;
    swift_release_n();
  }
  v87[0] = v25;
  v30 = (uint64_t)v78;
  v31 = v79;
  if (((*(uint64_t (**)(char *, uint64_t *, uint64_t, uint64_t))(a8 + 72))(v78, v87, v79, a8) & 1) != 0)
    v32 = 256;
  else
    v32 = 0;
  *(_WORD *)(a6 + 32) |= v32;
  aBlock = v22;
  v82 = v23;
  v33 = v30;
  v87[0] = v24;
  v34 = (void *)static ResolvableTextSegmentAttribute.buildStaticTextSegment<A>(for:style:environment:includeDefaultAttributes:options:properties:)(v30, a2, &aBlock, a4 & 1, v87, a6, v31, a8);
  if (v34)
  {
    v71 = *(_QWORD *)(a8 + 8);
    v35 = (void *)static ResolvableStringAttributeRepresentation.attribute.getter();
    v72 = v34;
    v36 = v34;
    v37 = -[SEL length](v36, sel_length);
    v38 = v77;
    UUID.init()();
    v39 = v76;
    *(_QWORD *)&v38[*(int *)(v76 + 20)] = v35;
    v87[0] = MEMORY[0x24BEE4AF8];
    v40 = (SEL *)swift_allocObject();
    v40[2] = (SEL)v87;
    p_type = swift_allocObject();
    *(_QWORD *)(p_type + 16) = closure #1 in NSAttributedString.runs(in:)partial apply;
    *(_QWORD *)(p_type + 24) = v40;
    v85 = thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
    v86 = p_type;
    aBlock = MEMORY[0x24BDAC760];
    v82 = 1107296256;
    v83 = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
    v84 = &block_descriptor_51;
    v42 = _Block_copy(&aBlock);
    v43 = v86;
    v44 = v35;
    swift_retain();
    swift_release();
    v70 = v36;
    -[SEL enumerateAttributesInRange:options:usingBlock:](v36, sel_enumerateAttributesInRange_options_usingBlock_, 0, v37, 0, v42);
    _Block_release(v42);
    LOBYTE(v37) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v37 & 1) == 0)
    {
      v45 = v87[0];
      swift_release();
      p_type = *(_QWORD *)(v45 + 16);
      if (!p_type)
      {

        v57 = v70;
        v58 = MEMORY[0x24BEE4AF8];
LABEL_25:
        swift_bridgeObjectRelease();
        v59 = (uint64_t)v77;
        *(_QWORD *)&v77[*(int *)(v39 + 24)] = v58;
        v43 = v74;
        outlined init with take of LocalizedStringKey.FormatArgument(v59, v74, type metadata accessor for ResolvableTextSegmentAttribute.Value);
        v60 = (void *)static ResolvableStringAttributeRepresentation.attribute.getter();
        v61 = _bridgeAnythingToObjectiveC<A>(_:)();
        v40 = v57;
        p_type = (int64_t)&stru_250685FF0.type;
        v62 = -[SEL length](v40, sel_length);

        v36 = (SEL *)&selRef_bundleURL;
        -[SEL addAttribute:value:range:](v40, sel_addAttribute_value_range_, v60, v61, 0, v62);

        swift_unknownObjectRelease();
        if (one-time initialization token for resolvableTextSegment == -1)
          goto LABEL_26;
        goto LABEL_31;
      }
      v68[1] = v68;
      v69 = v44;
      aBlock = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, p_type, 0);
      v80 = aBlock;
      v68[2] = v45;
      v36 = (SEL *)(v45 + 48);
      while (1)
      {
        v46 = (uint64_t)*(v36 - 1);
        v40 = (SEL *)*v36;
        v31 = (uint64_t)*(v36 - 2);
        swift_bridgeObjectRetain();
        v43 = MEMORY[0x24BEE4AF8];
        v47 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        v48 = specialized Dictionary.init(dictionaryLiteral:)(v43);
        v49 = v31 + v46;
        if (__OFADD__(v31, v46))
          break;
        if (v49 < v31)
          goto LABEL_29;
        v50 = v48;
        if (*(_QWORD *)(v48 + 16))
        {
          v87[0] = MEMORY[0x24BEE4B08];
          MEMORY[0x24BDAC7A8](v48);
          v68[-2] = v50;
          v68[-1] = v87;
          v33 = specialized _NativeDictionary.filter(_:)(v47, (uint64_t (*)(id))closure #1 in ResolvableTextSegmentAttribute.Value.Run.init(range:oldAttributes:newAttributes:)partial apply, (uint64_t)&v68[-4]);
          swift_bridgeObjectRelease();
          swift_retain();
          specialized Sequence.filter(_:)(v50, v33, v87);
          v52 = v51;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v52 = MEMORY[0x24BEE4AF8];
          v33 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        }
        swift_bridgeObjectRelease();
        v53 = v80;
        aBlock = v80;
        v55 = *(_QWORD *)(v80 + 16);
        v54 = *(_QWORD *)(v80 + 24);
        if (v55 >= v54 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v54 > 1, v55 + 1, 1);
          v53 = aBlock;
        }
        *(_QWORD *)(v53 + 16) = v55 + 1;
        v80 = v53;
        v56 = (_QWORD *)(v53 + 32 * v55);
        v56[4] = v31;
        v56[5] = v49;
        v56[6] = v33;
        v56[7] = v52;
        v36 += 3;
        if (!--p_type)
        {

          v57 = v70;
          v33 = (uint64_t)v78;
          v31 = v79;
          v39 = v76;
          v58 = v80;
          goto LABEL_25;
        }
      }
      __break(1u);
LABEL_29:
      __break(1u);
    }
    __break(1u);
LABEL_31:
    swift_once();
LABEL_26:
    v63 = static NSAttributedStringKey.resolvableTextSegment;
    outlined init with copy of TypesettingLanguage(v43, v73, type metadata accessor for ResolvableTextSegmentAttribute.Value);
    v64 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    v65 = v40;
    v66 = objc_msgSend(v65, *(SEL *)(p_type + 2408));

    objc_msgSend(v65, v36[226], v63, v64, 0, v66);
    swift_unknownObjectRelease();
    outlined destroy of TypesettingConfiguration(v43, type metadata accessor for ResolvableTextSegmentAttribute.Value);
    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v33, v31);
    return v72;
  }
  (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v33, v31);
  return v34;
}

uint64_t static ResolvableTextSegmentAttribute.buildStaticTextSegment<A>(for:style:environment:includeDefaultAttributes:options:properties:)(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  id v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  __int16 v60;
  uint64_t v61;
  id v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t aBlock;
  uint64_t v76;
  uint64_t (*v77)(uint64_t);
  void *v78;
  uint64_t (*v79)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81[2];

  v68 = a4;
  v65 = a2;
  v71 = a1;
  v13 = type metadata accessor for Text.Style(0);
  v64 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v66 = v14;
  v67 = (uint64_t)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for AttributedString?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v61 - v16;
  v18 = type metadata accessor for AttributedString();
  v73 = *(_QWORD *)(v18 - 8);
  v74 = v18;
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v69 = (char *)&v61 - v22;
  v70 = *(_QWORD *)(a7 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v72 = (char *)&v61 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *a3;
  v26 = a3[1];
  v27 = *a5;
  if (v26)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v25, &aBlock);
    swift_release_n();
    swift_release_n();
    v28 = aBlock;
  }
  else
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>, (uint64_t)&type metadata for EnvironmentValues.TextSizeVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSizeVariantKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v29);
    v30 = aBlock;
    v31 = swift_retain_n();
    v32 = specialized find1<A>(_:key:filter:)(v31, v30);
    if (v32)
      v28 = *(_QWORD *)(v32 + 72);
    else
      v28 = 0;
    swift_release_n();
  }
  v81[0] = v28;
  v33 = v72;
  if (((*(uint64_t (**)(char *, uint64_t *, uint64_t, uint64_t))(a8 + 72))(v72, v81, a7, a8) & 1) != 0)
    v34 = 256;
  else
    v34 = 0;
  *(_WORD *)(a6 + 32) |= v34;
  aBlock = v25;
  v76 = v26;
  v71 = v27;
  v81[0] = v27;
  ResolvableStringAttribute.initialResolution(in:options:properties:)(&aBlock, v81, a6, a7, a8, (uint64_t)v17);
  v36 = v73;
  v35 = v74;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v17, 1, v74) == 1)
  {
    (*(void (**)(char *, uint64_t))(v70 + 8))(v33, a7);
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)v17, (uint64_t)&lazy cache variable for type metadata for AttributedString?, (uint64_t)MEMORY[0x24BDCC5A8], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))type metadata accessor for [(_:)]);
    return 0;
  }
  v61 = a7;
  v38 = v69;
  (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v69, v17, v35);
  type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableAttributedString);
  (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v20, v38, v35);
  v62 = (id)NSAttributedString.init(_:)();
  v63 = objc_msgSend(v62, sel_length);
  v39 = v67;
  outlined init with copy of TypesettingLanguage(v65, v67, type metadata accessor for Text.Style);
  v40 = (*(unsigned __int8 *)(v64 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80);
  v41 = (v66 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
  v42 = a6;
  v43 = (v41 + 39) & 0xFFFFFFFFFFFFFFF8;
  v44 = (v43 + 15) & 0xFFFFFFFFFFFFFFF8;
  v45 = swift_allocObject();
  outlined init with take of LocalizedStringKey.FormatArgument(v39, v45 + v40, type metadata accessor for Text.Style);
  v46 = v62;
  *(_QWORD *)(v45 + v41) = v62;
  v47 = v45 + ((v41 + 15) & 0xFFFFFFFFFFFFFFF8);
  *(_QWORD *)v47 = v25;
  *(_QWORD *)(v47 + 8) = v26;
  *(_BYTE *)(v47 + 16) = v68 & 1;
  *(_QWORD *)(v45 + v43) = v71;
  v48 = v42;
  *(_QWORD *)(v45 + v44) = v42;
  v49 = swift_allocObject();
  *(_QWORD *)(v49 + 16) = partial apply for closure #1 in NSMutableAttributedString.convertToPlatformStyled(style:environment:includeDefaultAttributes:options:properties:);
  *(_QWORD *)(v49 + 24) = v45;
  v79 = partial apply for thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  v80 = v49;
  aBlock = MEMORY[0x24BDAC760];
  v76 = 1107296256;
  v77 = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  v78 = &block_descriptor_27;
  v50 = _Block_copy(&aBlock);
  swift_retain();
  v37 = v46;
  swift_retain();
  swift_retain();
  swift_release();
  objc_msgSend(v37, sel_enumerateAttributesInRange_options_usingBlock_, 0, v63, 0, v50);
  _Block_release(v50);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    swift_retain();
    swift_retain_n();
    if (v26)
    {
      v53 = swift_retain();
      v54 = specialized PropertyList.Tracker.value<A>(_:for:)(v53);
    }
    else
    {
      v55 = swift_retain_n();
      v54 = specialized closure #1 in PropertyList.subscript.getter(v55);
    }
    swift_release_n();
    swift_release_n();
    v56 = v61;
    v58 = v73;
    v57 = v74;
    v59 = v72;
    if ((v54 & 1) != 0)
    {
      v60 = *(_WORD *)(v48 + 32);
      if ((v60 & 4) == 0)
        *(_WORD *)(v48 + 32) = v60 | 4;
    }
    swift_release();
    (*(void (**)(char *, uint64_t))(v58 + 8))(v69, v57);
    (*(void (**)(char *, uint64_t))(v70 + 8))(v59, v56);
    return (uint64_t)v37;
  }
  __break(1u);
  return result;
}

uint64_t ResolvableStringAttribute.initialResolution(in:options:properties:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t *__return_ptr, uint64_t, uint64_t, double);
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v35 = a6;
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v12);
  v32 = (uint64_t)&v31 - v13;
  v14 = type metadata accessor for ResolvableStringResolutionContext();
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for AttributeContainer();
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = *a1;
  v19 = a1[1];
  v21 = *a2;
  v22 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, double))(a5 + 56);
  v33 = a4;
  v34 = v6;
  v22(&v36, a4, a5, v18);
  *(_WORD *)(a3 + 32) |= v36;
  if ((v21 & 4) != 0)
  {
    v36 = 12369903;
    MEMORY[0x23B7C5EC0](&v36, 3);
    AttributeContainer.init()();
    v26 = v35;
    AttributedString.init(_:attributes:)();
    v27 = type metadata accessor for AttributedString();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, 0, 1, v27);
  }
  else
  {
    v23 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v16, 1, 1, v23);
    v24 = &v16[*(int *)(v14 + 24)];
    *(_QWORD *)v24 = 0;
    v24[8] = 1;
    if (v19)
    {
      swift_retain_n();
      swift_retain_n();
      v25 = v32;
      specialized PropertyList.Tracker.value<A>(_:for:)(v20, v32);
      swift_release();
    }
    else
    {
      v29 = swift_retain_n();
      v25 = v32;
      specialized closure #1 in PropertyList.subscript.getter(v29, v32);
      swift_release_n();
    }
    swift_release();
    outlined assign with take of Date?(v25, (uint64_t)v16);
    v30 = (uint64_t *)&v16[*(int *)(v14 + 20)];
    *v30 = v20;
    v30[1] = v19;
    *(_QWORD *)v24 = 0;
    v24[8] = 1;
    (*(void (**)(char *, uint64_t, uint64_t))(a5 + 40))(v16, v33, a5);
    return outlined destroy of TypesettingConfiguration((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableStringResolutionContext);
  }
}

uint64_t PlatformAttributeResolver.platformAttributes(for:includeDefaultValueAttributes:)(uint64_t a1, int a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int64_t v36;
  _QWORD *v37;
  int *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void *v42;
  id v43;
  int64_t v44;
  unint64_t v45;
  int64_t v46;
  void *v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  char v51;
  uint64_t inited;
  id v53;
  uint64_t v54;
  id v55;
  char *v56;
  void (*v57)(char *, uint64_t);
  char *v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  char v63;
  char v64;
  char v65;
  uint64_t result;
  int64_t v67;
  char *v68;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  int *v74;
  int64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  _OWORD v83[2];
  _OWORD v84[2];
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;

  v3 = v2;
  LODWORD(v79) = a2;
  v5 = type metadata accessor for Text.Style(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v67 - v9;
  v11 = type metadata accessor for AttributeContainer();
  MEMORY[0x24BDAC7A8](v11);
  v71 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v67 - v15;
  v72 = v18;
  v73 = v17;
  (*(void (**)(char *, uint64_t, double))(v18 + 16))((char *)&v67 - v15, a1, v14);
  v88 = Dictionary<>.init(_:)();
  v19 = (int *)type metadata accessor for PlatformAttributeResolver(0);
  outlined init with copy of TypesettingLanguage((uint64_t)v3 + v19[5], (uint64_t)v10, type metadata accessor for Text.Style);
  Dictionary<>.transferAttributedStringStyles(to:)((uint64_t)v10);
  v21 = *v3;
  v20 = v3[1];
  outlined init with copy of TypesettingLanguage((uint64_t)v10, (uint64_t)v7, type metadata accessor for Text.Style);
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = v21;
  *(_QWORD *)(v22 + 24) = v20;
  v23 = v19[7];
  v24 = (_QWORD *)((char *)v3 + v19[6]);
  v25 = v24[1];
  v86 = (void *)*v24;
  v87 = v25;
  *(_QWORD *)&v84[0] = *(_QWORD *)((char *)v3 + v23);
  v74 = v19;
  v26 = v19[9];
  v70 = v3;
  v27 = (uint64_t)v3 + v26;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  v28 = Text.Style.nsAttributes(content:environment:includeDefaultAttributes:with:properties:)((uint64_t)partial apply for implicit closure #2 in FormatStyleBox.format(in:idiom:), v22, (uint64_t *)&v86, 1, (uint64_t *)v84, v27);
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of TypesettingConfiguration((uint64_t)v7, type metadata accessor for Text.Style);
  v29 = v88;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v86 = (void *)v29;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v28, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v86);
  v31 = (uint64_t)v86;
  v88 = (uint64_t)v86;
  swift_bridgeObjectRelease();
  if ((v79 & 1) != 0)
  {
    outlined destroy of TypesettingConfiguration((uint64_t)v10, type metadata accessor for Text.Style);
    return v31;
  }
  v32 = *(_QWORD *)(v31 + 64);
  v68 = v10;
  v69 = v31 + 64;
  v33 = 1 << *(_BYTE *)(v31 + 32);
  v34 = -1;
  if (v33 < 64)
    v34 = ~(-1 << v33);
  v35 = v34 & v32;
  v78 = (uint64_t)v84 + 8;
  v79 = &v87;
  v75 = (unint64_t)(v33 + 63) >> 6;
  v67 = v75 - 1;
  swift_bridgeObjectRetain();
  v36 = 0;
  v76 = MEMORY[0x24BEE4AD8] + 8;
  v77 = xmmword_23527E860;
  v37 = v70;
LABEL_7:
  v38 = v74;
  if (v35)
  {
LABEL_8:
    v39 = __clz(__rbit64(v35));
    v35 &= v35 - 1;
    v40 = v39 | (v36 << 6);
LABEL_9:
    v41 = *(_QWORD *)(v31 + 56);
    *(_QWORD *)&v84[0] = *(_QWORD *)(*(_QWORD *)(v31 + 48) + 8 * v40);
    v42 = *(void **)&v84[0];
    outlined init with copy of Any(v41 + 32 * v40, v78);
    v43 = v42;
    goto LABEL_28;
  }
  while (1)
  {
    v44 = v36 + 1;
    if (__OFADD__(v36, 1))
    {
      __break(1u);
      goto LABEL_48;
    }
    if (v44 < v75)
    {
      v45 = *(_QWORD *)(v69 + 8 * v44);
      if (v45)
        goto LABEL_13;
      v46 = v36 + 2;
      ++v36;
      if (v44 + 1 < v75)
      {
        v45 = *(_QWORD *)(v69 + 8 * v46);
        if (v45)
          goto LABEL_16;
        v36 = v44 + 1;
        if (v44 + 2 < v75)
        {
          v45 = *(_QWORD *)(v69 + 8 * (v44 + 2));
          if (v45)
          {
            v44 += 2;
            goto LABEL_13;
          }
          v46 = v44 + 3;
          v36 = v44 + 2;
          if (v44 + 3 < v75)
          {
            v45 = *(_QWORD *)(v69 + 8 * v46);
            if (v45)
            {
LABEL_16:
              v44 = v46;
LABEL_13:
              v35 = (v45 - 1) & v45;
              v40 = __clz(__rbit64(v45)) + (v44 << 6);
              v36 = v44;
              goto LABEL_9;
            }
            while (1)
            {
              v44 = v46 + 1;
              if (__OFADD__(v46, 1))
                break;
              if (v44 >= v75)
              {
                v36 = v67;
                goto LABEL_27;
              }
              v45 = *(_QWORD *)(v69 + 8 * v44);
              ++v46;
              if (v45)
                goto LABEL_13;
            }
LABEL_48:
            __break(1u);
            result = swift_bridgeObjectRelease();
            __break(1u);
            return result;
          }
        }
      }
    }
LABEL_27:
    v35 = 0;
    v85 = 0;
    memset(v84, 0, sizeof(v84));
LABEL_28:
    outlined init with take of (key: NSAttributedStringKey, value: Any)?((uint64_t)v84, (uint64_t)&v86);
    v47 = v86;
    if (!v86)
      break;
    outlined init with take of Any(v79, v84);
    v48 = *(_QWORD *)((char *)v37 + v38[8]);
    if (*(_QWORD *)(v48 + 16))
    {
      v49 = v47;
      v50 = specialized __RawDictionaryStorage.find<A>(_:)(v49);
      if ((v51 & 1) != 0)
      {
        outlined init with copy of Any(*(_QWORD *)(v48 + 56) + 32 * v50, (uint64_t)&v81);
      }
      else
      {
        v81 = 0u;
        v82 = 0u;
      }

      if (!*((_QWORD *)&v82 + 1))
        goto LABEL_40;
      outlined init with take of Any(&v81, v83);
      type metadata accessor for _ContiguousArrayStorage<(NSAttributedStringKey, Any)>();
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v77;
      *(_QWORD *)(inited + 32) = v49;
      outlined init with copy of Any((uint64_t)v84, inited + 40);
      v53 = v49;
      specialized Dictionary.init(dictionaryLiteral:)(inited);
      AttributeContainer.init(_:)();
      v54 = swift_initStackObject();
      *(_OWORD *)(v54 + 16) = v77;
      *(_QWORD *)(v54 + 32) = v53;
      outlined init with copy of Any((uint64_t)v83, v54 + 40);
      v55 = v53;
      specialized Dictionary.init(dictionaryLiteral:)(v54);
      v56 = v71;
      AttributeContainer.init(_:)();
      LOBYTE(v54) = static AttributeContainer.== infix(_:_:)();
      v57 = *(void (**)(char *, uint64_t))(v72 + 8);
      v58 = v56;
      v59 = v73;
      v57(v58, v73);
      v57(v16, v59);
      if ((v54 & 1) == 0)
      {

        __swift_destroy_boxed_opaque_existential_1((uint64_t)v83);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v84);
        goto LABEL_7;
      }
      v60 = v88;
      v61 = v55;
      swift_bridgeObjectRetain();
      v62 = specialized __RawDictionaryStorage.find<A>(_:)(v61);
      v64 = v63;
      swift_bridgeObjectRelease();
      v38 = v74;
      if ((v64 & 1) != 0)
      {
        v65 = swift_isUniquelyReferenced_nonNull_native();
        v80 = v60;
        if ((v65 & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          v60 = v80;
        }

        outlined init with take of Any((_OWORD *)(*(_QWORD *)(v60 + 56) + 32 * v62), &v81);
        specialized _NativeDictionary._delete(at:)(v62, v60);
        v88 = v60;
        swift_bridgeObjectRelease();
      }
      else
      {
        v81 = 0u;
        v82 = 0u;
      }

      outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)&v81, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v83);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v84);
      v37 = v70;
      if (v35)
        goto LABEL_8;
    }
    else
    {
      v81 = 0u;
      v82 = 0u;
LABEL_40:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v84);

      outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)&v81, (uint64_t)&lazy cache variable for type metadata for Any?, v76, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
      if (v35)
        goto LABEL_8;
    }
  }
  swift_release();
  outlined destroy of TypesettingConfiguration((uint64_t)v68, type metadata accessor for Text.Style);
  return v88;
}

uint64_t type metadata accessor for ResolvableTextSegmentAttribute.Value(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for ResolvableTextSegmentAttribute.Value);
}

uint64_t sub_234E87018()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_234E8703C()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_22(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_22()
{
  return swift_release();
}

uint64_t sub_234E87064()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ResolvableStringResolutionContext() - 8) + 80);
  v2 = (v1 + 24) & ~v1;

  v3 = type metadata accessor for Date();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v0 + v2, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v2, v3);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_234E87124()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type ResolvableTextSegmentAttribute.Value.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableTextSegmentAttribute.Value.CodingKeys, &unk_250640B08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableTextSegmentAttribute.Value.CodingKeys, &unk_250640B08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableTextSegmentAttribute.Value.CodingKeys, &unk_250640B08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableTextSegmentAttribute.Value.CodingKeys, &unk_250640B08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.CodingKeys);
  }
  return result;
}

uint64_t type metadata accessor for CodableRawRepresentable<NSAttributedStringKey>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for CodableRawRepresentable<NSAttributedStringKey>;
  if (!lazy cache variable for type metadata for CodableRawRepresentable<NSAttributedStringKey>)
  {
    type metadata accessor for NSAttributedStringKey(255);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
    type metadata accessor for CodableRawRepresentable();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvableTextSegmentAttribute.Value.Run and conformance ResolvableTextSegmentAttribute.Value.Run()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.Run and conformance ResolvableTextSegmentAttribute.Value.Run;
  if (!lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.Run and conformance ResolvableTextSegmentAttribute.Value.Run)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableTextSegmentAttribute.Value.Run, &type metadata for ResolvableTextSegmentAttribute.Value.Run);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.Run and conformance ResolvableTextSegmentAttribute.Value.Run);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.Run and conformance ResolvableTextSegmentAttribute.Value.Run;
  if (!lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.Run and conformance ResolvableTextSegmentAttribute.Value.Run)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableTextSegmentAttribute.Value.Run, &type metadata for ResolvableTextSegmentAttribute.Value.Run);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.Run and conformance ResolvableTextSegmentAttribute.Value.Run);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [ResolvableTextSegmentAttribute.Value.Run] and conformance <A> [A](unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for [ResolvableTextSegmentAttribute.Value.Run], (uint64_t)&type metadata for ResolvableTextSegmentAttribute.Value.Run, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x23B7C9C04](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in ResolvableTextSegmentAttribute.Value()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value and conformance ResolvableTextSegmentAttribute.Value, type metadata accessor for ResolvableTextSegmentAttribute.Value, (uint64_t)&protocol conformance descriptor for ResolvableTextSegmentAttribute.Value);
}

unint64_t lazy protocol witness table accessor for type ResolvableTextSegmentAttribute and conformance ResolvableTextSegmentAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute and conformance ResolvableTextSegmentAttribute;
  if (!lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute and conformance ResolvableTextSegmentAttribute)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableTextSegmentAttribute, &type metadata for ResolvableTextSegmentAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute and conformance ResolvableTextSegmentAttribute);
  }
  return result;
}

uint64_t associated type witness table accessor for AttributedStringKey.Value : Hashable in ResolvableTextSegmentAttribute()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value and conformance ResolvableTextSegmentAttribute.Value, type metadata accessor for ResolvableTextSegmentAttribute.Value, (uint64_t)&protocol conformance descriptor for ResolvableTextSegmentAttribute.Value);
}

ValueMetadata *type metadata accessor for ResolvableTextSegmentAttribute()
{
  return &type metadata for ResolvableTextSegmentAttribute;
}

uint64_t *initializeBufferWithCopyOfBuffer for ResolvableTextSegmentAttribute.Value(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v10;
    *(uint64_t *)((char *)a1 + v9) = *(uint64_t *)((char *)a2 + v9);
    v11 = v10;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for ResolvableTextSegmentAttribute.Value(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ResolvableTextSegmentAttribute.Value(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = *(void **)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  v10 = v9;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ResolvableTextSegmentAttribute.Value(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a2 + v7);
  v9 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  v10 = v8;

  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for ResolvableTextSegmentAttribute.Value(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for ResolvableTextSegmentAttribute.Value(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);

  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvableTextSegmentAttribute.Value()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_234E87688(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for ResolvableTextSegmentAttribute.Value()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_234E87710(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata completion function for ResolvableTextSegmentAttribute.Value()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PlatformAttributeResolver(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(char *, uint64_t, uint64_t);
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int (*v54)(char *, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  _QWORD *v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  id v72;
  uint64_t v74;
  int *v75;
  uint64_t v76;
  void *v78;
  uint64_t v80;
  uint64_t *v81;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    v16 = v15 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a3[5];
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = *(uint64_t *)((char *)a2 + v6);
    swift_bridgeObjectRetain();
    if (v9 >= 2)
      swift_retain();
    v10 = *((_QWORD *)v8 + 1);
    v11 = *((_QWORD *)v8 + 2);
    *(_QWORD *)v7 = v9;
    *((_QWORD *)v7 + 1) = v10;
    swift_bridgeObjectRetain();
    outlined copy of Text.Style.TextStyleColor(v11);
    v12 = *((_QWORD *)v8 + 4);
    *((_QWORD *)v7 + 3) = *((_QWORD *)v8 + 3);
    *((_QWORD *)v7 + 4) = v12;
    v7[40] = v8[40];
    *((_QWORD *)v7 + 6) = *((_QWORD *)v8 + 6);
    v7[56] = v8[56];
    *((_QWORD *)v7 + 8) = *((_QWORD *)v8 + 8);
    v7[72] = v8[72];
    v13 = v8 + 80;
    v14 = *((_QWORD *)v8 + 11);
    *((_QWORD *)v7 + 2) = v11;
    swift_retain();
    if ((unint64_t)(v14 - 1) >= 2)
    {
      *((_QWORD *)v7 + 10) = *v13;
      *((_QWORD *)v7 + 11) = v14;
      swift_retain();
    }
    else
    {
      *((_OWORD *)v7 + 5) = *(_OWORD *)v13;
    }
    v17 = v8 + 96;
    v18 = *((_QWORD *)v8 + 13);
    if ((unint64_t)(v18 - 1) >= 2)
    {
      *((_QWORD *)v7 + 12) = *v17;
      *((_QWORD *)v7 + 13) = v18;
      swift_retain();
    }
    else
    {
      *((_OWORD *)v7 + 6) = *(_OWORD *)v17;
    }
    v19 = v7 + 112;
    v20 = v8 + 112;
    v21 = *((_QWORD *)v8 + 22);
    if (v21 == 1)
    {
      v22 = *((_OWORD *)v8 + 12);
      *((_OWORD *)v7 + 11) = *((_OWORD *)v8 + 11);
      *((_OWORD *)v7 + 12) = v22;
      v7[208] = v8[208];
      v23 = *((_OWORD *)v8 + 8);
      *v19 = *v20;
      *((_OWORD *)v7 + 8) = v23;
      v24 = *((_OWORD *)v8 + 10);
      *((_OWORD *)v7 + 9) = *((_OWORD *)v8 + 9);
      *((_OWORD *)v7 + 10) = v24;
    }
    else
    {
      *(_QWORD *)v19 = *(_QWORD *)v20;
      v7[120] = v8[120];
      *((_QWORD *)v7 + 16) = *((_QWORD *)v8 + 16);
      v7[136] = v8[136];
      *((_QWORD *)v7 + 18) = *((_QWORD *)v8 + 18);
      v7[152] = v8[152];
      v7[168] = v8[168];
      *((_QWORD *)v7 + 20) = *((_QWORD *)v8 + 20);
      v7[192] = v8[192];
      v25 = *((_QWORD *)v8 + 23);
      *((_QWORD *)v7 + 22) = v21;
      *((_QWORD *)v7 + 23) = v25;
      v7[208] = v8[208];
      *((_QWORD *)v7 + 25) = *((_QWORD *)v8 + 25);
      swift_retain();
    }
    v26 = *((_QWORD *)v8 + 31);
    if (v26 == 1)
    {
      v27 = *(_OWORD *)(v8 + 232);
      *(_OWORD *)(v7 + 216) = *(_OWORD *)(v8 + 216);
      *(_OWORD *)(v7 + 232) = v27;
      *((_QWORD *)v7 + 31) = *((_QWORD *)v8 + 31);
    }
    else
    {
      *((_WORD *)v7 + 108) = *((_WORD *)v8 + 108);
      *((_QWORD *)v7 + 28) = *((_QWORD *)v8 + 28);
      *((_WORD *)v7 + 116) = *((_WORD *)v8 + 116);
      *((_QWORD *)v7 + 30) = *((_QWORD *)v8 + 30);
      *((_QWORD *)v7 + 31) = v26;
      swift_bridgeObjectRetain();
    }
    v28 = *((_QWORD *)v8 + 36);
    v81 = a1;
    if (v28 == 1)
    {
      v29 = *((_OWORD *)v8 + 17);
      *((_OWORD *)v7 + 16) = *((_OWORD *)v8 + 16);
      *((_OWORD *)v7 + 17) = v29;
      *((_QWORD *)v7 + 36) = *((_QWORD *)v8 + 36);
    }
    else
    {
      v7[256] = v8[256];
      *(_WORD *)(v7 + 257) = *(_WORD *)(v8 + 257);
      if (v28)
      {
        v30 = *((_QWORD *)v8 + 33);
        v31 = *((_QWORD *)v8 + 34);
        v32 = v8[280];
        outlined copy of Text.Storage(v30, v31, v32);
        *((_QWORD *)v7 + 33) = v30;
        *((_QWORD *)v7 + 34) = v31;
        v7[280] = v32;
        *((_QWORD *)v7 + 36) = *((_QWORD *)v8 + 36);
        swift_bridgeObjectRetain();
      }
      else
      {
        v33 = *(_OWORD *)(v8 + 280);
        *(_OWORD *)(v7 + 264) = *(_OWORD *)(v8 + 264);
        *(_OWORD *)(v7 + 280) = v33;
      }
    }
    v34 = (void *)*((_QWORD *)v8 + 37);
    v35 = *((_QWORD *)v8 + 38);
    *((_QWORD *)v7 + 37) = v34;
    *((_QWORD *)v7 + 38) = v35;
    *((_QWORD *)v7 + 39) = *((_QWORD *)v8 + 39);
    *((_WORD *)v7 + 160) = *((_WORD *)v8 + 160);
    v75 = (int *)type metadata accessor for Text.Style(0);
    v36 = v75[21];
    v37 = &v7[v36];
    v38 = &v8[v36];
    type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), (void (*)(uint64_t))MEMORY[0x24BDCEE28]);
    v40 = v39;
    v41 = *(_QWORD *)(v39 - 8);
    v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48);
    v43 = v34;
    swift_retain();
    swift_retain();
    if (v42(v38, 2, v40))
    {
      v44 = type metadata accessor for TypesettingLanguage.Storage(0);
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    }
    else
    {
      v45 = type metadata accessor for Locale.Language();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v37, v38, v45);
      v37[*(int *)(v40 + 48)] = v38[*(int *)(v40 + 48)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v37, 0, 2, v40);
    }
    v46 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
    v47 = &v37[v46];
    v48 = &v38[v46];
    *(_QWORD *)v47 = *(_QWORD *)v48;
    v47[8] = v48[8];
    *(_QWORD *)&v7[v75[22]] = *(_QWORD *)&v8[v75[22]];
    v49 = v75[23];
    v50 = &v7[v49];
    v51 = &v8[v49];
    v52 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
    v53 = *(_QWORD *)(v52 - 8);
    v54 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48);
    swift_bridgeObjectRetain();
    if (v54(v51, 1, v52))
    {
      type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, (uint64_t (*)(uint64_t))MEMORY[0x24BDC46B0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v50, v51, v52);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
    }
    *(_QWORD *)&v7[v75[24]] = *(_QWORD *)&v8[v75[24]];
    v56 = a3[6];
    v57 = a3[7];
    v58 = (uint64_t *)((char *)v81 + v56);
    v59 = (uint64_t *)((char *)a2 + v56);
    v60 = v59[1];
    *v58 = *v59;
    v58[1] = v60;
    *(uint64_t *)((char *)v81 + v57) = *(uint64_t *)((char *)a2 + v57);
    v61 = a3[9];
    *(uint64_t *)((char *)v81 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    v62 = (char *)v81 + v61;
    v63 = (uint64_t *)((char *)a2 + v61);
    v64 = *(_OWORD *)((char *)a2 + v61 + 16);
    *(_OWORD *)v62 = *(_OWORD *)((char *)a2 + v61);
    *((_OWORD *)v62 + 1) = v64;
    *((_WORD *)v62 + 16) = *(_WORD *)((char *)a2 + v61 + 32);
    v65 = *(uint64_t *)((char *)a2 + v61 + 48);
    *((_QWORD *)v62 + 5) = *(uint64_t *)((char *)a2 + v61 + 40);
    *((_QWORD *)v62 + 6) = v65;
    v66 = *(uint64_t *)((char *)a2 + v61 + 64);
    v67 = *(uint64_t *)((char *)a2 + v61 + 72);
    v68 = *(uint64_t *)((char *)a2 + v61 + 80);
    v76 = *(uint64_t *)((char *)a2 + v61 + 88);
    v78 = *(void **)((char *)a2 + v61 + 56);
    v74 = *(uint64_t *)((char *)a2 + v61 + 96);
    v80 = *(uint64_t *)((char *)a2 + v61 + 104);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of ResolvedTextSuffix(v78, v66, v67, v68, v76, v74);
    *((_QWORD *)v62 + 7) = v78;
    *((_QWORD *)v62 + 8) = v66;
    *((_QWORD *)v62 + 9) = v67;
    *((_QWORD *)v62 + 10) = v68;
    *((_QWORD *)v62 + 11) = v76;
    *((_QWORD *)v62 + 12) = v74;
    v69 = v63[14];
    v70 = v63[15];
    *((_QWORD *)v62 + 13) = v80;
    *((_QWORD *)v62 + 14) = v69;
    v71 = (void *)v63[16];
    *((_QWORD *)v62 + 15) = v70;
    *((_QWORD *)v62 + 16) = v71;
    swift_bridgeObjectRetain();
    v72 = v71;
    return v81;
  }
  return (uint64_t *)v16;
}

unint64_t outlined copy of Text.Style.TextStyleColor(unint64_t result)
{
  if ((result >> 62) <= 1)
    return swift_retain();
  return result;
}

void destroy for PlatformAttributeResolver(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  if (*(_QWORD *)v4 >= 2uLL)
    swift_release();
  swift_bridgeObjectRelease();
  outlined consume of Text.Style.TextStyleColor(*(_QWORD *)(v4 + 16));
  swift_release();
  if ((unint64_t)(*(_QWORD *)(v4 + 88) - 1) >= 2)
    swift_release();
  if ((unint64_t)(*(_QWORD *)(v4 + 104) - 1) >= 2)
    swift_release();
  if (*(_QWORD *)(v4 + 176) != 1)
    swift_release();
  if (*(_QWORD *)(v4 + 248) != 1)
    swift_bridgeObjectRelease();
  if (*(_QWORD *)(v4 + 288) >= 2uLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)(v4 + 264), *(_QWORD *)(v4 + 272), *(_BYTE *)(v4 + 280));
    swift_bridgeObjectRelease();
  }

  swift_release();
  swift_release();
  v5 = type metadata accessor for Text.Style(0);
  v6 = v4 + *(int *)(v5 + 84);
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), (void (*)(uint64_t))MEMORY[0x24BDCEE28]);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 2, v7))
  {
    v8 = type metadata accessor for Locale.Language();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  swift_bridgeObjectRelease();
  v9 = v4 + *(int *)(v5 + 92);
  v10 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  v11 = *(_QWORD *)(v10 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v12 = a1 + *(int *)(a2 + 36);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of ResolvedTextSuffix(*(void **)(v12 + 56), *(_QWORD *)(v12 + 64), *(_QWORD *)(v12 + 72), *(_QWORD *)(v12 + 80), *(_QWORD *)(v12 + 88), *(_QWORD *)(v12 + 96));
  swift_bridgeObjectRelease();

}

_QWORD *initializeWithCopy for PlatformAttributeResolver(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int (*v39)(char *, uint64_t, uint64_t);
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int (*v51)(char *, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  _QWORD *v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  id v68;
  uint64_t v70;
  uint64_t v71;
  int *v72;
  uint64_t v73;
  void *v75;
  uint64_t v77;
  _QWORD *v78;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a3[5];
  v78 = a1;
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = *(_QWORD *)((char *)a2 + v5);
  swift_bridgeObjectRetain();
  if (v8 >= 2)
    swift_retain();
  v9 = *((_QWORD *)v7 + 1);
  v10 = *((_QWORD *)v7 + 2);
  *(_QWORD *)v6 = v8;
  *((_QWORD *)v6 + 1) = v9;
  swift_bridgeObjectRetain();
  outlined copy of Text.Style.TextStyleColor(v10);
  v11 = *((_QWORD *)v7 + 4);
  *((_QWORD *)v6 + 3) = *((_QWORD *)v7 + 3);
  *((_QWORD *)v6 + 4) = v11;
  v6[40] = v7[40];
  *((_QWORD *)v6 + 6) = *((_QWORD *)v7 + 6);
  v6[56] = v7[56];
  *((_QWORD *)v6 + 8) = *((_QWORD *)v7 + 8);
  v6[72] = v7[72];
  v12 = v7 + 80;
  v13 = *((_QWORD *)v7 + 11);
  *((_QWORD *)v6 + 2) = v10;
  swift_retain();
  if ((unint64_t)(v13 - 1) >= 2)
  {
    *((_QWORD *)v6 + 10) = *v12;
    *((_QWORD *)v6 + 11) = v13;
    swift_retain();
  }
  else
  {
    *((_OWORD *)v6 + 5) = *(_OWORD *)v12;
  }
  v14 = v7 + 96;
  v15 = *((_QWORD *)v7 + 13);
  if ((unint64_t)(v15 - 1) >= 2)
  {
    *((_QWORD *)v6 + 12) = *v14;
    *((_QWORD *)v6 + 13) = v15;
    swift_retain();
  }
  else
  {
    *((_OWORD *)v6 + 6) = *(_OWORD *)v14;
  }
  v16 = v6 + 112;
  v17 = v7 + 112;
  v18 = *((_QWORD *)v7 + 22);
  if (v18 == 1)
  {
    v19 = *((_OWORD *)v7 + 12);
    *((_OWORD *)v6 + 11) = *((_OWORD *)v7 + 11);
    *((_OWORD *)v6 + 12) = v19;
    v6[208] = v7[208];
    v20 = *((_OWORD *)v7 + 8);
    *v16 = *v17;
    *((_OWORD *)v6 + 8) = v20;
    v21 = *((_OWORD *)v7 + 10);
    *((_OWORD *)v6 + 9) = *((_OWORD *)v7 + 9);
    *((_OWORD *)v6 + 10) = v21;
  }
  else
  {
    *(_QWORD *)v16 = *(_QWORD *)v17;
    v6[120] = v7[120];
    *((_QWORD *)v6 + 16) = *((_QWORD *)v7 + 16);
    v6[136] = v7[136];
    *((_QWORD *)v6 + 18) = *((_QWORD *)v7 + 18);
    v6[152] = v7[152];
    v6[168] = v7[168];
    *((_QWORD *)v6 + 20) = *((_QWORD *)v7 + 20);
    v6[192] = v7[192];
    v22 = *((_QWORD *)v7 + 23);
    *((_QWORD *)v6 + 22) = v18;
    *((_QWORD *)v6 + 23) = v22;
    v6[208] = v7[208];
    *((_QWORD *)v6 + 25) = *((_QWORD *)v7 + 25);
    swift_retain();
  }
  v23 = *((_QWORD *)v7 + 31);
  if (v23 == 1)
  {
    v24 = *(_OWORD *)(v7 + 232);
    *(_OWORD *)(v6 + 216) = *(_OWORD *)(v7 + 216);
    *(_OWORD *)(v6 + 232) = v24;
    *((_QWORD *)v6 + 31) = *((_QWORD *)v7 + 31);
  }
  else
  {
    *((_WORD *)v6 + 108) = *((_WORD *)v7 + 108);
    *((_QWORD *)v6 + 28) = *((_QWORD *)v7 + 28);
    *((_WORD *)v6 + 116) = *((_WORD *)v7 + 116);
    *((_QWORD *)v6 + 30) = *((_QWORD *)v7 + 30);
    *((_QWORD *)v6 + 31) = v23;
    swift_bridgeObjectRetain();
  }
  v25 = *((_QWORD *)v7 + 36);
  if (v25 == 1)
  {
    v26 = *((_OWORD *)v7 + 17);
    *((_OWORD *)v6 + 16) = *((_OWORD *)v7 + 16);
    *((_OWORD *)v6 + 17) = v26;
    *((_QWORD *)v6 + 36) = *((_QWORD *)v7 + 36);
  }
  else
  {
    v6[256] = v7[256];
    *(_WORD *)(v6 + 257) = *(_WORD *)(v7 + 257);
    if (v25)
    {
      v27 = *((_QWORD *)v7 + 33);
      v28 = *((_QWORD *)v7 + 34);
      v29 = v7[280];
      outlined copy of Text.Storage(v27, v28, v29);
      *((_QWORD *)v6 + 33) = v27;
      *((_QWORD *)v6 + 34) = v28;
      v6[280] = v29;
      *((_QWORD *)v6 + 36) = *((_QWORD *)v7 + 36);
      swift_bridgeObjectRetain();
    }
    else
    {
      v30 = *(_OWORD *)(v7 + 280);
      *(_OWORD *)(v6 + 264) = *(_OWORD *)(v7 + 264);
      *(_OWORD *)(v6 + 280) = v30;
    }
  }
  v31 = (void *)*((_QWORD *)v7 + 37);
  v32 = *((_QWORD *)v7 + 38);
  *((_QWORD *)v6 + 37) = v31;
  *((_QWORD *)v6 + 38) = v32;
  *((_QWORD *)v6 + 39) = *((_QWORD *)v7 + 39);
  *((_WORD *)v6 + 160) = *((_WORD *)v7 + 160);
  v72 = (int *)type metadata accessor for Text.Style(0);
  v33 = v72[21];
  v34 = &v6[v33];
  v35 = &v7[v33];
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), (void (*)(uint64_t))MEMORY[0x24BDCEE28]);
  v37 = v36;
  v38 = *(_QWORD *)(v36 - 8);
  v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48);
  v40 = v31;
  swift_retain();
  swift_retain();
  if (v39(v35, 2, v37))
  {
    v41 = type metadata accessor for TypesettingLanguage.Storage(0);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    v42 = type metadata accessor for Locale.Language();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v34, v35, v42);
    v34[*(int *)(v37 + 48)] = v35[*(int *)(v37 + 48)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v34, 0, 2, v37);
  }
  v43 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
  v44 = &v34[v43];
  v45 = &v35[v43];
  *(_QWORD *)v44 = *(_QWORD *)v45;
  v44[8] = v45[8];
  *(_QWORD *)&v6[v72[22]] = *(_QWORD *)&v7[v72[22]];
  v46 = v72[23];
  v47 = &v6[v46];
  v48 = &v7[v46];
  v49 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  v50 = *(_QWORD *)(v49 - 8);
  v51 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48);
  swift_bridgeObjectRetain();
  if (v51(v48, 1, v49))
  {
    type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, (uint64_t (*)(uint64_t))MEMORY[0x24BDC46B0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v47, v48, v49);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
  }
  *(_QWORD *)&v6[v72[24]] = *(_QWORD *)&v7[v72[24]];
  v53 = a3[6];
  v54 = a3[7];
  v55 = (_QWORD *)((char *)v78 + v53);
  v56 = (_QWORD *)((char *)a2 + v53);
  v57 = v56[1];
  *v55 = *v56;
  v55[1] = v57;
  *(_QWORD *)((char *)v78 + v54) = *(_QWORD *)((char *)a2 + v54);
  v58 = a3[9];
  *(_QWORD *)((char *)v78 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  v59 = (char *)v78 + v58;
  v60 = (_QWORD *)((char *)a2 + v58);
  v61 = *(_OWORD *)((char *)a2 + v58 + 16);
  *(_OWORD *)v59 = *(_OWORD *)((char *)a2 + v58);
  *((_OWORD *)v59 + 1) = v61;
  *((_WORD *)v59 + 16) = *(_WORD *)((char *)a2 + v58 + 32);
  v62 = *(_QWORD *)((char *)a2 + v58 + 48);
  *((_QWORD *)v59 + 5) = *(_QWORD *)((char *)a2 + v58 + 40);
  *((_QWORD *)v59 + 6) = v62;
  v63 = *(_QWORD *)((char *)a2 + v58 + 72);
  v73 = *(_QWORD *)((char *)a2 + v58 + 64);
  v75 = *(void **)((char *)a2 + v58 + 56);
  v64 = *(_QWORD *)((char *)a2 + v58 + 80);
  v70 = *(_QWORD *)((char *)a2 + v58 + 96);
  v71 = *(_QWORD *)((char *)a2 + v58 + 88);
  v77 = *(_QWORD *)((char *)a2 + v58 + 104);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of ResolvedTextSuffix(v75, v73, v63, v64, v71, v70);
  *((_QWORD *)v59 + 7) = v75;
  *((_QWORD *)v59 + 8) = v73;
  *((_QWORD *)v59 + 9) = v63;
  *((_QWORD *)v59 + 10) = v64;
  *((_QWORD *)v59 + 11) = v71;
  *((_QWORD *)v59 + 12) = v70;
  v65 = v60[14];
  v66 = v60[15];
  *((_QWORD *)v59 + 13) = v77;
  *((_QWORD *)v59 + 14) = v65;
  v67 = (void *)v60[16];
  *((_QWORD *)v59 + 15) = v66;
  *((_QWORD *)v59 + 16) = v67;
  swift_bridgeObjectRetain();
  v68 = v67;
  return v78;
}

_QWORD *assignWithCopy for PlatformAttributeResolver(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 *v17;
  __int128 *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 *v42;
  __int128 *v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  __int128 *v51;
  __int128 *v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  __int128 v71;
  void *v72;
  void *v73;
  id v74;
  int *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(char *, uint64_t, uint64_t);
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t (*v96)(char *, uint64_t, uint64_t);
  int v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  _QWORD *v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  void *v120;
  id v121;
  uint64_t v123;
  int *v124;
  _QWORD *v125;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = *(_QWORD *)((char *)a2 + v6);
  v125 = a2;
  if (*(_QWORD *)((char *)a1 + v6) >= 2uLL)
  {
    if (v9 >= 2)
    {
      *(_QWORD *)v7 = v9;
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of Font((uint64_t)a1 + v6);
      *(_QWORD *)v7 = *(_QWORD *)v8;
    }
  }
  else
  {
    *(_QWORD *)v7 = v9;
    if (v9 >= 2)
      swift_retain();
  }
  *((_QWORD *)v7 + 1) = *((_QWORD *)v8 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = *((_QWORD *)v8 + 2);
  outlined copy of Text.Style.TextStyleColor(v10);
  v11 = *((_QWORD *)v7 + 2);
  *((_QWORD *)v7 + 2) = v10;
  outlined consume of Text.Style.TextStyleColor(v11);
  *((_QWORD *)v7 + 3) = *((_QWORD *)v8 + 3);
  swift_retain();
  swift_release();
  v12 = *((_QWORD *)v8 + 4);
  v7[40] = v8[40];
  *((_QWORD *)v7 + 4) = v12;
  v13 = *((_QWORD *)v8 + 6);
  v7[56] = v8[56];
  *((_QWORD *)v7 + 6) = v13;
  v14 = *((_QWORD *)v8 + 8);
  v7[72] = v8[72];
  *((_QWORD *)v7 + 8) = v14;
  v15 = *((_QWORD *)v8 + 11) - 1;
  if ((unint64_t)(*((_QWORD *)v7 + 11) - 1) < 2)
  {
    if (v15 >= 2)
    {
      *((_QWORD *)v7 + 10) = *((_QWORD *)v8 + 10);
      *((_QWORD *)v7 + 11) = *((_QWORD *)v8 + 11);
      swift_retain();
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v15 < 2)
  {
    outlined destroy of Text.LineStyle((uint64_t)(v7 + 80));
LABEL_13:
    *((_OWORD *)v7 + 5) = *((_OWORD *)v8 + 5);
    goto LABEL_15;
  }
  *((_QWORD *)v7 + 10) = *((_QWORD *)v8 + 10);
  *((_QWORD *)v7 + 11) = *((_QWORD *)v8 + 11);
  swift_retain();
  swift_release();
LABEL_15:
  v16 = *((_QWORD *)v8 + 13) - 1;
  v124 = a3;
  if ((unint64_t)(*((_QWORD *)v7 + 13) - 1) < 2)
  {
    if (v16 >= 2)
    {
      *((_QWORD *)v7 + 12) = *((_QWORD *)v8 + 12);
      *((_QWORD *)v7 + 13) = *((_QWORD *)v8 + 13);
      swift_retain();
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  if (v16 < 2)
  {
    outlined destroy of Text.LineStyle((uint64_t)(v7 + 96));
LABEL_20:
    *((_OWORD *)v7 + 6) = *((_OWORD *)v8 + 6);
    goto LABEL_22;
  }
  *((_QWORD *)v7 + 12) = *((_QWORD *)v8 + 12);
  *((_QWORD *)v7 + 13) = *((_QWORD *)v8 + 13);
  swift_retain();
  swift_release();
LABEL_22:
  v17 = (__int128 *)(v7 + 112);
  v18 = (__int128 *)(v8 + 112);
  v19 = *((_QWORD *)v8 + 22);
  if (*((_QWORD *)v7 + 22) == 1)
  {
    if (v19 == 1)
    {
      v20 = *v18;
      v21 = *((_OWORD *)v8 + 9);
      *((_OWORD *)v7 + 8) = *((_OWORD *)v8 + 8);
      *((_OWORD *)v7 + 9) = v21;
      *v17 = v20;
      v22 = *((_OWORD *)v8 + 10);
      v23 = *((_OWORD *)v8 + 11);
      v24 = *((_OWORD *)v8 + 12);
      v7[208] = v8[208];
      *((_OWORD *)v7 + 11) = v23;
      *((_OWORD *)v7 + 12) = v24;
      *((_OWORD *)v7 + 10) = v22;
    }
    else
    {
      v30 = *(_QWORD *)v18;
      v7[120] = v8[120];
      *(_QWORD *)v17 = v30;
      v31 = *((_QWORD *)v8 + 16);
      v7[136] = v8[136];
      *((_QWORD *)v7 + 16) = v31;
      v32 = *((_QWORD *)v8 + 18);
      v7[152] = v8[152];
      *((_QWORD *)v7 + 18) = v32;
      v33 = *((_QWORD *)v8 + 20);
      v7[168] = v8[168];
      *((_QWORD *)v7 + 20) = v33;
      *((_QWORD *)v7 + 22) = *((_QWORD *)v8 + 22);
      v34 = *((_QWORD *)v8 + 23);
      v7[192] = v8[192];
      *((_QWORD *)v7 + 23) = v34;
      v35 = *((_QWORD *)v8 + 25);
      v7[208] = v8[208];
      *((_QWORD *)v7 + 25) = v35;
      swift_retain();
    }
  }
  else if (v19 == 1)
  {
    outlined destroy of Text.Encapsulation((uint64_t)(v7 + 112));
    v26 = *((_OWORD *)v8 + 8);
    v25 = *((_OWORD *)v8 + 9);
    *v17 = *v18;
    *((_OWORD *)v7 + 8) = v26;
    *((_OWORD *)v7 + 9) = v25;
    v28 = *((_OWORD *)v8 + 11);
    v27 = *((_OWORD *)v8 + 12);
    v29 = *((_OWORD *)v8 + 10);
    v7[208] = v8[208];
    *((_OWORD *)v7 + 11) = v28;
    *((_OWORD *)v7 + 12) = v27;
    *((_OWORD *)v7 + 10) = v29;
  }
  else
  {
    v36 = *(_QWORD *)v18;
    v7[120] = v8[120];
    *(_QWORD *)v17 = v36;
    v37 = *((_QWORD *)v8 + 16);
    v7[136] = v8[136];
    *((_QWORD *)v7 + 16) = v37;
    v38 = *((_QWORD *)v8 + 18);
    v7[152] = v8[152];
    *((_QWORD *)v7 + 18) = v38;
    v39 = *((_QWORD *)v8 + 20);
    v7[168] = v8[168];
    *((_QWORD *)v7 + 20) = v39;
    *((_QWORD *)v7 + 22) = *((_QWORD *)v8 + 22);
    swift_retain();
    swift_release();
    v40 = *((_QWORD *)v8 + 23);
    v7[192] = v8[192];
    *((_QWORD *)v7 + 23) = v40;
    v41 = *((_QWORD *)v8 + 25);
    v7[208] = v8[208];
    *((_QWORD *)v7 + 25) = v41;
  }
  v42 = (__int128 *)(v7 + 216);
  v43 = (__int128 *)(v8 + 216);
  v44 = *((_QWORD *)v8 + 31);
  if (*((_QWORD *)v7 + 31) == 1)
  {
    if (v44 == 1)
    {
      v45 = *v43;
      v46 = *(_OWORD *)(v8 + 232);
      *((_QWORD *)v7 + 31) = *((_QWORD *)v8 + 31);
      *v42 = v45;
      *(_OWORD *)(v7 + 232) = v46;
    }
    else
    {
      v7[216] = v8[216];
      v7[217] = v8[217];
      v49 = *((_QWORD *)v8 + 28);
      v7[232] = v8[232];
      *((_QWORD *)v7 + 28) = v49;
      v7[233] = v8[233];
      *((_QWORD *)v7 + 30) = *((_QWORD *)v8 + 30);
      *((_QWORD *)v7 + 31) = *((_QWORD *)v8 + 31);
      swift_bridgeObjectRetain();
    }
  }
  else if (v44 == 1)
  {
    outlined destroy of AccessibilitySpeechAttributes((uint64_t)(v7 + 216));
    v47 = *((_QWORD *)v8 + 31);
    v48 = *(_OWORD *)(v8 + 232);
    *v42 = *v43;
    *(_OWORD *)(v7 + 232) = v48;
    *((_QWORD *)v7 + 31) = v47;
  }
  else
  {
    v7[216] = v8[216];
    v7[217] = v8[217];
    v50 = *((_QWORD *)v8 + 28);
    v7[232] = v8[232];
    *((_QWORD *)v7 + 28) = v50;
    v7[233] = v8[233];
    *((_QWORD *)v7 + 30) = *((_QWORD *)v8 + 30);
    *((_QWORD *)v7 + 31) = *((_QWORD *)v8 + 31);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  v51 = (__int128 *)(v7 + 256);
  v52 = (__int128 *)(v8 + 256);
  v53 = *((_QWORD *)v7 + 36);
  v54 = *((_QWORD *)v8 + 36);
  if (v53 == 1)
  {
    if (v54 == 1)
    {
      v55 = *v52;
      v56 = *((_OWORD *)v8 + 17);
      *((_QWORD *)v7 + 36) = *((_QWORD *)v8 + 36);
LABEL_39:
      *v51 = v55;
      v51[1] = v56;
      goto LABEL_50;
    }
    v7[256] = v8[256];
    v7[257] = v8[257];
    v7[258] = v8[258];
    if (!*((_QWORD *)v8 + 36))
    {
      v59 = *(_OWORD *)(v8 + 280);
      *(_OWORD *)(v7 + 264) = *(_OWORD *)(v8 + 264);
      *(_OWORD *)(v7 + 280) = v59;
      goto LABEL_50;
    }
    goto LABEL_48;
  }
  if (v54 == 1)
  {
    outlined destroy of AccessibilityTextAttributes((uint64_t)(v7 + 256));
    v57 = *((_QWORD *)v8 + 36);
    v58 = *((_OWORD *)v8 + 17);
    *v51 = *v52;
    *((_OWORD *)v7 + 17) = v58;
    *((_QWORD *)v7 + 36) = v57;
    goto LABEL_50;
  }
  v7[256] = v8[256];
  v7[257] = v8[257];
  v7[258] = v8[258];
  v51 = (__int128 *)(v7 + 264);
  v60 = (__int128 *)(v8 + 264);
  v61 = *((_QWORD *)v8 + 36);
  if (!v53)
  {
    if (!v61)
    {
      v55 = *v60;
      v56 = *(_OWORD *)(v8 + 280);
      goto LABEL_39;
    }
LABEL_48:
    v68 = *((_QWORD *)v8 + 33);
    v69 = *((_QWORD *)v8 + 34);
    v70 = v8[280];
    outlined copy of Text.Storage(v68, v69, v70);
    *((_QWORD *)v7 + 33) = v68;
    *((_QWORD *)v7 + 34) = v69;
    v7[280] = v70;
    *((_QWORD *)v7 + 36) = *((_QWORD *)v8 + 36);
    swift_bridgeObjectRetain();
    goto LABEL_50;
  }
  if (v61)
  {
    v62 = *((_QWORD *)v8 + 33);
    v63 = *((_QWORD *)v8 + 34);
    v64 = v8[280];
    outlined copy of Text.Storage(v62, v63, v64);
    v65 = *((_QWORD *)v7 + 33);
    v66 = *((_QWORD *)v7 + 34);
    v67 = v7[280];
    *((_QWORD *)v7 + 33) = v62;
    *((_QWORD *)v7 + 34) = v63;
    v7[280] = v64;
    outlined consume of Text.Storage(v65, v66, v67);
    *((_QWORD *)v7 + 36) = *((_QWORD *)v8 + 36);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of Text((uint64_t)(v7 + 264));
    v71 = *(_OWORD *)(v8 + 280);
    *v51 = *v60;
    *(_OWORD *)(v7 + 280) = v71;
  }
LABEL_50:
  v72 = (void *)*((_QWORD *)v7 + 37);
  v73 = (void *)*((_QWORD *)v8 + 37);
  *((_QWORD *)v7 + 37) = v73;
  v74 = v73;

  *((_QWORD *)v7 + 38) = *((_QWORD *)v8 + 38);
  swift_retain();
  swift_release();
  *((_QWORD *)v7 + 39) = *((_QWORD *)v8 + 39);
  swift_retain();
  swift_release();
  v7[320] = v8[320];
  v7[321] = v8[321];
  v75 = (int *)type metadata accessor for Text.Style(0);
  v76 = v75[21];
  v77 = &v7[v76];
  v78 = &v8[v76];
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), (void (*)(uint64_t))MEMORY[0x24BDCEE28]);
  v80 = v79;
  v81 = *(_QWORD *)(v79 - 8);
  v82 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v81 + 48);
  v83 = v82(v77, 2, v79);
  v84 = v82(v78, 2, v80);
  if (v83)
  {
    if (!v84)
    {
      v85 = type metadata accessor for Locale.Language();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v85 - 8) + 16))(v77, v78, v85);
      v77[*(int *)(v80 + 48)] = v78[*(int *)(v80 + 48)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v81 + 56))(v77, 0, 2, v80);
      goto LABEL_56;
    }
    goto LABEL_55;
  }
  if (v84)
  {
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)v77, (uint64_t)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), (uint64_t)MEMORY[0x24BDCEE28], (uint64_t)&type metadata for TypesettingLanguage.Flags, (uint64_t (*)(_QWORD))type metadata accessor for (Locale.Language, TypesettingLanguage.Flags));
LABEL_55:
    v86 = type metadata accessor for TypesettingLanguage.Storage(0);
    memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
    goto LABEL_56;
  }
  v123 = type metadata accessor for Locale.Language();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v123 - 8) + 24))(v77, v78, v123);
  v77[*(int *)(v80 + 48)] = v78[*(int *)(v80 + 48)];
LABEL_56:
  v87 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
  v88 = &v77[v87];
  v89 = &v78[v87];
  v90 = v89[8];
  *(_QWORD *)v88 = *(_QWORD *)v89;
  v88[8] = v90;
  *(_QWORD *)&v7[v75[22]] = *(_QWORD *)&v8[v75[22]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v91 = v75[23];
  v92 = &v7[v91];
  v93 = &v8[v91];
  v94 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  v95 = *(_QWORD *)(v94 - 8);
  v96 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v95 + 48);
  v97 = v96(v92, 1, v94);
  v98 = v96(v93, 1, v94);
  if (!v97)
  {
    if (!v98)
    {
      (*(void (**)(char *, char *, uint64_t))(v95 + 24))(v92, v93, v94);
      goto LABEL_62;
    }
    (*(void (**)(char *, uint64_t))(v95 + 8))(v92, v94);
    goto LABEL_61;
  }
  if (v98)
  {
LABEL_61:
    type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, (uint64_t (*)(uint64_t))MEMORY[0x24BDC46B0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
    goto LABEL_62;
  }
  (*(void (**)(char *, char *, uint64_t))(v95 + 16))(v92, v93, v94);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v95 + 56))(v92, 0, 1, v94);
LABEL_62:
  *(_QWORD *)&v7[v75[24]] = *(_QWORD *)&v8[v75[24]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v100 = v124[6];
  v101 = (char *)a1 + v100;
  v102 = (char *)v125 + v100;
  *(_QWORD *)((char *)a1 + v100) = *(_QWORD *)((char *)v125 + v100);
  swift_retain();
  swift_release();
  *((_QWORD *)v101 + 1) = *((_QWORD *)v102 + 1);
  swift_retain();
  swift_release();
  *(_QWORD *)((char *)a1 + v124[7]) = *(_QWORD *)((char *)v125 + v124[7]);
  *(_QWORD *)((char *)a1 + v124[8]) = *(_QWORD *)((char *)v125 + v124[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v103 = v124[9];
  v104 = (char *)a1 + v103;
  v105 = (_QWORD *)((char *)v125 + v103);
  *(_QWORD *)v104 = *(_QWORD *)((char *)v125 + v103);
  *((_QWORD *)v104 + 1) = *(_QWORD *)((char *)v125 + v103 + 8);
  *((_QWORD *)v104 + 2) = *(_QWORD *)((char *)v125 + v103 + 16);
  *((_QWORD *)v104 + 3) = *(_QWORD *)((char *)v125 + v103 + 24);
  *((_WORD *)v104 + 16) = *(_WORD *)((char *)v125 + v103 + 32);
  *((_QWORD *)v104 + 5) = *(_QWORD *)((char *)v125 + v103 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v104 + 6) = v105[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v106 = (void *)v105[7];
  v107 = v105[8];
  v108 = v105[9];
  v109 = v105[10];
  v110 = v105[11];
  v111 = v105[12];
  v112 = v105[13];
  outlined copy of ResolvedTextSuffix(v106, v107, v108, v109, v110, v111);
  v113 = (void *)*((_QWORD *)v104 + 7);
  v114 = *((_QWORD *)v104 + 8);
  v115 = *((_QWORD *)v104 + 9);
  v116 = *((_QWORD *)v104 + 10);
  v117 = *((_QWORD *)v104 + 11);
  v118 = *((_QWORD *)v104 + 12);
  *((_QWORD *)v104 + 7) = v106;
  *((_QWORD *)v104 + 8) = v107;
  *((_QWORD *)v104 + 9) = v108;
  *((_QWORD *)v104 + 10) = v109;
  *((_QWORD *)v104 + 11) = v110;
  *((_QWORD *)v104 + 12) = v111;
  *((_QWORD *)v104 + 13) = v112;
  outlined consume of ResolvedTextSuffix(v113, v114, v115, v116, v117, v118);
  *((_QWORD *)v104 + 14) = v105[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v104 + 15) = v105[15];
  v119 = (void *)*((_QWORD *)v104 + 16);
  v120 = (void *)v105[16];
  *((_QWORD *)v104 + 16) = v120;
  v121 = v120;

  return a1;
}

uint64_t outlined destroy of Font(uint64_t a1)
{
  MEMORY[0x1E0EAFA68]();
  return a1;
}

uint64_t outlined destroy of Text.LineStyle(uint64_t a1)
{
  destroy for MouseEvent();
  return a1;
}

uint64_t outlined destroy of Text.Encapsulation(uint64_t a1)
{
  destroy for DisplayList.ScaleAnimation();
  return a1;
}

uint64_t outlined destroy of AccessibilitySpeechAttributes(uint64_t a1)
{
  destroy for AccessibilitySpeechAttributes();
  return a1;
}

uint64_t outlined destroy of AccessibilityTextAttributes(uint64_t a1)
{
  destroy for AccessibilityTextAttributes(a1);
  return a1;
}

_OWORD *initializeWithTake for PlatformAttributeResolver(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = *(_OWORD *)((char *)a2 + v6 + 16);
  *(_OWORD *)v7 = *(_OWORD *)((char *)a2 + v6);
  *((_OWORD *)v7 + 1) = v9;
  v7[40] = *((_BYTE *)a2 + v6 + 40);
  *((_QWORD *)v7 + 4) = *(_QWORD *)((char *)a2 + v6 + 32);
  v7[56] = *((_BYTE *)a2 + v6 + 56);
  *((_QWORD *)v7 + 6) = *(_QWORD *)((char *)a2 + v6 + 48);
  v7[72] = *((_BYTE *)a2 + v6 + 72);
  *((_QWORD *)v7 + 8) = *(_QWORD *)((char *)a2 + v6 + 64);
  v10 = *(_OWORD *)((char *)a2 + v6 + 96);
  *((_OWORD *)v7 + 5) = *(_OWORD *)((char *)a2 + v6 + 80);
  *((_OWORD *)v7 + 6) = v10;
  v11 = *(_OWORD *)((char *)a2 + v6 + 192);
  *((_OWORD *)v7 + 11) = *(_OWORD *)((char *)a2 + v6 + 176);
  *((_OWORD *)v7 + 12) = v11;
  v7[208] = *((_BYTE *)a2 + v6 + 208);
  v12 = *(_OWORD *)((char *)a2 + v6 + 128);
  *((_OWORD *)v7 + 7) = *(_OWORD *)((char *)a2 + v6 + 112);
  *((_OWORD *)v7 + 8) = v12;
  v13 = *(_OWORD *)((char *)a2 + v6 + 160);
  *((_OWORD *)v7 + 9) = *(_OWORD *)((char *)a2 + v6 + 144);
  *((_OWORD *)v7 + 10) = v13;
  v14 = *(_OWORD *)((char *)a2 + v6 + 216);
  v15 = *(_OWORD *)((char *)a2 + v6 + 232);
  *((_QWORD *)v7 + 31) = *(_QWORD *)((char *)a2 + v6 + 248);
  *(_OWORD *)(v7 + 232) = v15;
  *(_OWORD *)(v7 + 216) = v14;
  v16 = *(_OWORD *)((char *)a2 + v6 + 272);
  *((_OWORD *)v7 + 16) = *(_OWORD *)((char *)a2 + v6 + 256);
  *((_OWORD *)v7 + 17) = v16;
  v17 = *(_QWORD *)((char *)a2 + v6 + 296);
  *((_QWORD *)v7 + 36) = *(_QWORD *)((char *)a2 + v6 + 288);
  *((_QWORD *)v7 + 37) = v17;
  *((_OWORD *)v7 + 19) = *(_OWORD *)((char *)a2 + v6 + 304);
  *((_WORD *)v7 + 160) = *(_WORD *)((char *)a2 + v6 + 320);
  v18 = (int *)type metadata accessor for Text.Style(0);
  v19 = v18[21];
  v20 = &v7[v19];
  v21 = &v8[v19];
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), (void (*)(uint64_t))MEMORY[0x24BDCEE28]);
  v23 = v22;
  v24 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v21, 2, v22))
  {
    v25 = type metadata accessor for TypesettingLanguage.Storage(0);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v26 = type metadata accessor for Locale.Language();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v20, v21, v26);
    v20[*(int *)(v23 + 48)] = v21[*(int *)(v23 + 48)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v20, 0, 2, v23);
  }
  v27 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
  v28 = &v20[v27];
  v29 = &v21[v27];
  *(_QWORD *)v28 = *(_QWORD *)v29;
  v28[8] = v29[8];
  *(_QWORD *)&v7[v18[22]] = *(_QWORD *)&v8[v18[22]];
  v30 = v18[23];
  v31 = &v7[v30];
  v32 = &v8[v30];
  v33 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  v34 = *(_QWORD *)(v33 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
  {
    type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, (uint64_t (*)(uint64_t))MEMORY[0x24BDC46B0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v31, v32, v33);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
  }
  *(_QWORD *)&v7[v18[24]] = *(_QWORD *)&v8[v18[24]];
  v36 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v36) = *(_QWORD *)((char *)a2 + v36);
  v37 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  v38 = (char *)a1 + v37;
  v39 = (char *)a2 + v37;
  v40 = *((_OWORD *)v39 + 7);
  *((_OWORD *)v38 + 6) = *((_OWORD *)v39 + 6);
  *((_OWORD *)v38 + 7) = v40;
  *((_QWORD *)v38 + 16) = *((_QWORD *)v39 + 16);
  v41 = *((_OWORD *)v39 + 3);
  *((_OWORD *)v38 + 2) = *((_OWORD *)v39 + 2);
  *((_OWORD *)v38 + 3) = v41;
  v42 = *((_OWORD *)v39 + 5);
  *((_OWORD *)v38 + 4) = *((_OWORD *)v39 + 4);
  *((_OWORD *)v38 + 5) = v42;
  v43 = *((_OWORD *)v39 + 1);
  *(_OWORD *)v38 = *(_OWORD *)v39;
  *((_OWORD *)v38 + 1) = v43;
  return a1;
}

_QWORD *assignWithTake for PlatformAttributeResolver(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  void *v28;
  int *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(char *, uint64_t, uint64_t);
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  void *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(void *, uint64_t, uint64_t);
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  __int128 v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  _OWORD *v71;
  _OWORD *v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  __int128 v78;
  int *v79;
  _QWORD *v80;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (uint64_t)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = *(_QWORD *)((char *)a1 + v7);
  v11 = *(_QWORD *)((char *)a2 + v7);
  if (v10 < 2)
    goto LABEL_4;
  if (v11 < 2)
  {
    outlined destroy of Font(v8);
    v11 = *(_QWORD *)v9;
LABEL_4:
    *(_QWORD *)v8 = v11;
    goto LABEL_6;
  }
  *(_QWORD *)v8 = v11;
  swift_release();
LABEL_6:
  *(_QWORD *)(v8 + 8) = *((_QWORD *)v9 + 1);
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(v8 + 16);
  *(_QWORD *)(v8 + 16) = *((_QWORD *)v9 + 2);
  outlined consume of Text.Style.TextStyleColor(v12);
  *(_QWORD *)(v8 + 24) = *((_QWORD *)v9 + 3);
  swift_release();
  *(_QWORD *)(v8 + 32) = *((_QWORD *)v9 + 4);
  *(_BYTE *)(v8 + 40) = v9[40];
  *(_QWORD *)(v8 + 48) = *((_QWORD *)v9 + 6);
  *(_BYTE *)(v8 + 56) = v9[56];
  *(_QWORD *)(v8 + 64) = *((_QWORD *)v9 + 8);
  *(_BYTE *)(v8 + 72) = v9[72];
  v13 = v9 + 80;
  if ((unint64_t)(*(_QWORD *)(v8 + 88) - 1) < 2)
  {
LABEL_9:
    *(_OWORD *)(v8 + 80) = *v13;
    goto LABEL_11;
  }
  v14 = *((_QWORD *)v9 + 11);
  if ((unint64_t)(v14 - 1) < 2)
  {
    outlined destroy of Text.LineStyle(v8 + 80);
    goto LABEL_9;
  }
  *(_QWORD *)(v8 + 80) = *(_QWORD *)v13;
  *(_QWORD *)(v8 + 88) = v14;
  swift_release();
LABEL_11:
  v15 = v9 + 96;
  if ((unint64_t)(*(_QWORD *)(v8 + 104) - 1) < 2)
  {
LABEL_14:
    *(_OWORD *)(v8 + 96) = *v15;
    goto LABEL_16;
  }
  v16 = *((_QWORD *)v9 + 13);
  if ((unint64_t)(v16 - 1) < 2)
  {
    outlined destroy of Text.LineStyle(v8 + 96);
    goto LABEL_14;
  }
  *(_QWORD *)(v8 + 96) = *(_QWORD *)v15;
  *(_QWORD *)(v8 + 104) = v16;
  swift_release();
LABEL_16:
  v17 = (_OWORD *)(v8 + 112);
  v18 = v9 + 112;
  if (*(_QWORD *)(v8 + 176) == 1)
  {
LABEL_19:
    v20 = *((_OWORD *)v9 + 12);
    *(_OWORD *)(v8 + 176) = *((_OWORD *)v9 + 11);
    *(_OWORD *)(v8 + 192) = v20;
    *(_BYTE *)(v8 + 208) = v9[208];
    v21 = *((_OWORD *)v9 + 8);
    *v17 = *v18;
    *(_OWORD *)(v8 + 128) = v21;
    v22 = *((_OWORD *)v9 + 10);
    *(_OWORD *)(v8 + 144) = *((_OWORD *)v9 + 9);
    *(_OWORD *)(v8 + 160) = v22;
    goto LABEL_21;
  }
  v19 = *((_QWORD *)v9 + 22);
  if (v19 == 1)
  {
    outlined destroy of Text.Encapsulation(v8 + 112);
    goto LABEL_19;
  }
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v8 + 120) = v9[120];
  *(_QWORD *)(v8 + 128) = *((_QWORD *)v9 + 16);
  *(_BYTE *)(v8 + 136) = v9[136];
  *(_QWORD *)(v8 + 144) = *((_QWORD *)v9 + 18);
  *(_BYTE *)(v8 + 152) = v9[152];
  *(_BYTE *)(v8 + 168) = v9[168];
  *(_QWORD *)(v8 + 160) = *((_QWORD *)v9 + 20);
  *(_QWORD *)(v8 + 176) = v19;
  swift_release();
  *(_QWORD *)(v8 + 184) = *((_QWORD *)v9 + 23);
  *(_BYTE *)(v8 + 192) = v9[192];
  *(_QWORD *)(v8 + 200) = *((_QWORD *)v9 + 25);
  *(_BYTE *)(v8 + 208) = v9[208];
LABEL_21:
  if (*(_QWORD *)(v8 + 248) == 1)
  {
LABEL_24:
    v24 = *(_OWORD *)(v9 + 232);
    *(_OWORD *)(v8 + 216) = *(_OWORD *)(v9 + 216);
    *(_OWORD *)(v8 + 232) = v24;
    *(_QWORD *)(v8 + 248) = *((_QWORD *)v9 + 31);
    goto LABEL_26;
  }
  v23 = *((_QWORD *)v9 + 31);
  if (v23 == 1)
  {
    outlined destroy of AccessibilitySpeechAttributes(v8 + 216);
    goto LABEL_24;
  }
  *(_WORD *)(v8 + 216) = *((_WORD *)v9 + 108);
  *(_QWORD *)(v8 + 224) = *((_QWORD *)v9 + 28);
  *(_WORD *)(v8 + 232) = *((_WORD *)v9 + 116);
  *(_QWORD *)(v8 + 240) = *((_QWORD *)v9 + 30);
  *(_QWORD *)(v8 + 248) = v23;
  swift_bridgeObjectRelease();
LABEL_26:
  v25 = *(_QWORD *)(v8 + 288);
  v79 = a3;
  v80 = a2;
  if (v25 == 1)
  {
LABEL_29:
    v27 = *((_OWORD *)v9 + 17);
    *(_OWORD *)(v8 + 256) = *((_OWORD *)v9 + 16);
    *(_OWORD *)(v8 + 272) = v27;
    *(_QWORD *)(v8 + 288) = *((_QWORD *)v9 + 36);
    goto LABEL_30;
  }
  v26 = *((_QWORD *)v9 + 36);
  if (v26 == 1)
  {
    outlined destroy of AccessibilityTextAttributes(v8 + 256);
    goto LABEL_29;
  }
  *(_BYTE *)(v8 + 256) = v9[256];
  *(_WORD *)(v8 + 257) = *(_WORD *)(v9 + 257);
  v71 = (_OWORD *)(v8 + 264);
  v72 = v9 + 264;
  if (v25)
  {
    if (v26)
    {
      v73 = v9[280];
      v74 = *(_QWORD *)(v8 + 264);
      v75 = *(_QWORD *)(v8 + 272);
      v76 = *(_BYTE *)(v8 + 280);
      *v71 = *v72;
      *(_BYTE *)(v8 + 280) = v73;
      outlined consume of Text.Storage(v74, v75, v76);
      *(_QWORD *)(v8 + 288) = *((_QWORD *)v9 + 36);
      swift_bridgeObjectRelease();
      goto LABEL_30;
    }
    outlined destroy of Text(v8 + 264);
  }
  v78 = *(_OWORD *)(v9 + 280);
  *v71 = *v72;
  *(_OWORD *)(v8 + 280) = v78;
LABEL_30:
  v28 = *(void **)(v8 + 296);
  *(_QWORD *)(v8 + 296) = *((_QWORD *)v9 + 37);

  *(_QWORD *)(v8 + 304) = *((_QWORD *)v9 + 38);
  swift_release();
  *(_QWORD *)(v8 + 312) = *((_QWORD *)v9 + 39);
  swift_release();
  *(_WORD *)(v8 + 320) = *((_WORD *)v9 + 160);
  v29 = (int *)type metadata accessor for Text.Style(0);
  v30 = v29[21];
  v31 = (char *)(v8 + v30);
  v32 = &v9[v30];
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), (void (*)(uint64_t))MEMORY[0x24BDCEE28]);
  v34 = v33;
  v35 = *(_QWORD *)(v33 - 8);
  v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
  v37 = v36(v31, 2, v33);
  v38 = v36(v32, 2, v34);
  if (v37)
  {
    if (!v38)
    {
      v39 = type metadata accessor for Locale.Language();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(v31, v32, v39);
      v31[*(int *)(v34 + 48)] = v32[*(int *)(v34 + 48)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v31, 0, 2, v34);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (v38)
  {
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)v31, (uint64_t)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), (uint64_t)MEMORY[0x24BDCEE28], (uint64_t)&type metadata for TypesettingLanguage.Flags, (uint64_t (*)(_QWORD))type metadata accessor for (Locale.Language, TypesettingLanguage.Flags));
LABEL_35:
    v40 = type metadata accessor for TypesettingLanguage.Storage(0);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    goto LABEL_36;
  }
  v77 = type metadata accessor for Locale.Language();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v77 - 8) + 40))(v31, v32, v77);
  v31[*(int *)(v34 + 48)] = v32[*(int *)(v34 + 48)];
LABEL_36:
  v41 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
  v42 = &v31[v41];
  v43 = &v32[v41];
  *(_QWORD *)v42 = *(_QWORD *)v43;
  v42[8] = v43[8];
  *(_QWORD *)(v8 + v29[22]) = *(_QWORD *)&v9[v29[22]];
  swift_bridgeObjectRelease();
  v44 = v29[23];
  v45 = (void *)(v8 + v44);
  v46 = &v9[v44];
  v47 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  v48 = *(_QWORD *)(v47 - 8);
  v49 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v48 + 48);
  v50 = v49(v45, 1, v47);
  v51 = v49(v46, 1, v47);
  if (!v50)
  {
    if (!v51)
    {
      (*(void (**)(void *, char *, uint64_t))(v48 + 40))(v45, v46, v47);
      goto LABEL_42;
    }
    (*(void (**)(void *, uint64_t))(v48 + 8))(v45, v47);
    goto LABEL_41;
  }
  if (v51)
  {
LABEL_41:
    type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, (uint64_t (*)(uint64_t))MEMORY[0x24BDC46B0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(void *, char *, uint64_t))(v48 + 32))(v45, v46, v47);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
LABEL_42:
  *(_QWORD *)(v8 + v29[24]) = *(_QWORD *)&v9[v29[24]];
  swift_bridgeObjectRelease();
  v53 = v79[6];
  v54 = (char *)a1 + v53;
  v55 = (char *)v80 + v53;
  *(_QWORD *)((char *)a1 + v53) = *(_QWORD *)((char *)v80 + v53);
  swift_release();
  *((_QWORD *)v54 + 1) = *((_QWORD *)v55 + 1);
  swift_release();
  v56 = v79[8];
  *(_QWORD *)((char *)a1 + v79[7]) = *(_QWORD *)((char *)v80 + v79[7]);
  *(_QWORD *)((char *)a1 + v56) = *(_QWORD *)((char *)v80 + v56);
  swift_bridgeObjectRelease();
  v57 = v79[9];
  v58 = (char *)a1 + v57;
  v59 = (char *)v80 + v57;
  v60 = *(_OWORD *)((char *)v80 + v57 + 16);
  *(_OWORD *)v58 = *(_OWORD *)((char *)v80 + v57);
  *((_OWORD *)v58 + 1) = v60;
  *((_WORD *)v58 + 16) = *(_WORD *)((char *)v80 + v57 + 32);
  *((_QWORD *)v58 + 5) = *(_QWORD *)((char *)v80 + v57 + 40);
  swift_bridgeObjectRelease();
  *((_QWORD *)v58 + 6) = *((_QWORD *)v59 + 6);
  swift_bridgeObjectRelease();
  v61 = *((_QWORD *)v59 + 13);
  v62 = (void *)*((_QWORD *)v58 + 7);
  v63 = *((_QWORD *)v58 + 8);
  v64 = *((_QWORD *)v58 + 9);
  v65 = *((_QWORD *)v58 + 10);
  v66 = *((_QWORD *)v58 + 11);
  v67 = *((_QWORD *)v58 + 12);
  *(_OWORD *)(v58 + 56) = *(_OWORD *)(v59 + 56);
  *(_OWORD *)(v58 + 72) = *(_OWORD *)(v59 + 72);
  *(_OWORD *)(v58 + 88) = *(_OWORD *)(v59 + 88);
  *((_QWORD *)v58 + 13) = v61;
  outlined consume of ResolvedTextSuffix(v62, v63, v64, v65, v66, v67);
  *((_QWORD *)v58 + 14) = *((_QWORD *)v59 + 14);
  swift_bridgeObjectRelease();
  v68 = (void *)*((_QWORD *)v58 + 16);
  v69 = *((_QWORD *)v59 + 16);
  *((_QWORD *)v58 + 15) = *((_QWORD *)v59 + 15);
  *((_QWORD *)v58 + 16) = v69;

  return a1;
}

uint64_t getEnumTagSinglePayload for PlatformAttributeResolver()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_234E89970(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Text.Style(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PlatformAttributeResolver()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_234E899F8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Text.Style(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for PlatformAttributeResolver(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for PlatformAttributeResolver);
}

uint64_t type metadata completion function for PlatformAttributeResolver()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Text.Style(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *type metadata accessor for ResolvableTextSegmentAttribute.Value.CodingKeys()
{
  return &unk_250640B08;
}

uint64_t initializeWithCopy for ResolvableTextSegmentAttribute.Value.Run(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ResolvableTextSegmentAttribute.Value.Run(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for ResolvableTextSegmentAttribute.Value.Run(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ResolvableTextSegmentAttribute.Value.Run()
{
  return &type metadata for ResolvableTextSegmentAttribute.Value.Run;
}

id specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id v4;

  v4 = *a1;
  outlined init with copy of Any((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  *a2 = v4;
  return v4;
}

void specialized closure #1 in _NativeDictionary.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(id))
{
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  id v14;
  char v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v22;
  _BYTE v23[32];
  uint64_t v24;

  v22 = 0;
  v6 = 0;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v12 = v11 | (v6 << 6);
      goto LABEL_5;
    }
    v16 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v16 >= v10)
      goto LABEL_24;
    v17 = *(_QWORD *)(v24 + 8 * v16);
    ++v6;
    if (!v17)
    {
      v6 = v16 + 1;
      if (v16 + 1 >= v10)
        goto LABEL_24;
      v17 = *(_QWORD *)(v24 + 8 * v6);
      if (!v17)
      {
        v6 = v16 + 2;
        if (v16 + 2 >= v10)
          goto LABEL_24;
        v17 = *(_QWORD *)(v24 + 8 * v6);
        if (!v17)
          break;
      }
    }
LABEL_20:
    v9 = (v17 - 1) & v17;
    v12 = __clz(__rbit64(v17)) + (v6 << 6);
LABEL_5:
    v13 = *(void **)(*(_QWORD *)(a3 + 48) + 8 * v12);
    outlined init with copy of Any(*(_QWORD *)(a3 + 56) + 32 * v12, (uint64_t)v23);
    v14 = v13;
    v15 = a4(v14);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);

    if ((v15 & 1) != 0)
    {
      *(unint64_t *)((char *)a1 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v22++, 1))
      {
        __break(1u);
LABEL_24:
        specialized _NativeDictionary.extractDictionary(using:count:)(a1, a2, v22, a3);
        return;
      }
    }
  }
  v18 = v16 + 3;
  if (v18 >= v10)
    goto LABEL_24;
  v17 = *(_QWORD *)(v24 + 8 * v18);
  if (v17)
  {
    v6 = v18;
    goto LABEL_20;
  }
  while (1)
  {
    v6 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v6 >= v10)
      goto LABEL_24;
    v17 = *(_QWORD *)(v24 + 8 * v6);
    ++v18;
    if (v17)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, uint64_t (*a2)(id), uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  char v7;
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD v14[2];

  v6 = isStackAllocationSafe;
  v14[1] = *MEMORY[0x24BDAC8D0];
  v7 = *(_BYTE *)(isStackAllocationSafe + 32);
  v8 = (unint64_t)((1 << v7) + 63) >> 6;
  v9 = 8 * v8;
  if ((v7 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    bzero((char *)v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    specialized closure #1 in _NativeDictionary.filter(_:)((_QWORD *)((char *)v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0)), v8, v6, a2);
    if (v3)
      swift_willThrow();
    else
      return v10;
  }
  else
  {
    v11 = (void *)swift_slowAlloc();
    bzero(v11, v9);
    specialized closure #1 in _NativeDictionary.filter(_:)((unint64_t *)v11, v8, v6, a2);
    a3 = v12;
    MEMORY[0x23B7C9D54](v11, -1, -1);
  }
  return a3;
}

void specialized Sequence.filter(_:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  char v19;
  id v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v5 = 0;
  v6 = a1 + 64;
  v7 = 1 << *(_BYTE *)(a1 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a1 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v28 = MEMORY[0x24BEE4AF8];
  v29 = MEMORY[0x24BEE4AD8] + 8;
  while (v9)
  {
    v11 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v12 = v11 | (v5 << 6);
LABEL_23:
    v16 = *(void **)(*(_QWORD *)(a1 + 48) + 8 * v12);
    if (*(_QWORD *)(a2 + 16))
    {
      v17 = v16;
      v18 = specialized __RawDictionaryStorage.find<A>(_:)();
      if ((v19 & 1) != 0)
      {
        outlined init with copy of Any(*(_QWORD *)(a2 + 56) + 32 * v18, (uint64_t)&v31);
      }
      else
      {
        v31 = 0u;
        v32 = 0u;
      }

      if (!*((_QWORD *)&v32 + 1))
        goto LABEL_29;
      outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)&v31, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))type metadata accessor for MutableBox<CachedEnvironment>);

    }
    else
    {
      v31 = 0u;
      v32 = 0u;
      v20 = v16;
LABEL_29:
      outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)&v31, (uint64_t)&lazy cache variable for type metadata for Any?, v29, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
      v21 = *a3;
      swift_bridgeObjectRetain();
      v22 = specialized Set.contains(_:)((uint64_t)v16, v21);
      swift_bridgeObjectRelease();
      if ((v22 & 1) != 0)
      {

      }
      else
      {
        v23 = v28;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v33 = v28;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v28 + 16) + 1, 1);
          v23 = v33;
        }
        v26 = *(_QWORD *)(v23 + 16);
        v25 = *(_QWORD *)(v23 + 24);
        v27 = v26 + 1;
        if (v26 >= v25 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
          v27 = v26 + 1;
          v23 = v33;
        }
        *(_QWORD *)(v23 + 16) = v27;
        v28 = v23;
        *(_QWORD *)(v23 + 8 * v26 + 32) = v16;
      }
    }
  }
  v13 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v13 >= v10)
    goto LABEL_36;
  v14 = *(_QWORD *)(v6 + 8 * v13);
  ++v5;
  if (v14)
    goto LABEL_22;
  v5 = v13 + 1;
  if (v13 + 1 >= v10)
    goto LABEL_36;
  v14 = *(_QWORD *)(v6 + 8 * v5);
  if (v14)
    goto LABEL_22;
  v5 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_36;
  v14 = *(_QWORD *)(v6 + 8 * v5);
  if (v14)
    goto LABEL_22;
  v5 = v13 + 3;
  if (v13 + 3 >= v10)
    goto LABEL_36;
  v14 = *(_QWORD *)(v6 + 8 * v5);
  if (v14)
  {
LABEL_22:
    v9 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v5 << 6);
    goto LABEL_23;
  }
  v15 = v13 + 4;
  if (v15 >= v10)
  {
LABEL_36:
    swift_release();
    return;
  }
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
  {
    v5 = v15;
    goto LABEL_22;
  }
  while (1)
  {
    v5 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v5 >= v10)
      goto LABEL_36;
    v14 = *(_QWORD *)(v6 + 8 * v5);
    ++v15;
    if (v14)
      goto LABEL_22;
  }
LABEL_38:
  __break(1u);
}

uint64_t specialized ResolvableTextSegmentAttribute.Value.Run.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x65676E6172 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000002352E4320
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000002352E4340)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t specialized ResolvableTextSegmentAttribute.Value.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1684632949 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000002352E42B0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1936618866 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

unint64_t lazy protocol witness table accessor for type ResolvableTextSegmentAttribute.Value.Run.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.Run.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.Run.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.Run.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.Run.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.Run.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableTextSegmentAttribute.Value.Run.CodingKeys, &unk_250640B98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.Run.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.Run.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.Run.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.Run.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.Run.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.Run.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableTextSegmentAttribute.Value.Run.CodingKeys, &unk_250640B98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.Run.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.Run.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.Run.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.Run.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.Run.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.Run.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableTextSegmentAttribute.Value.Run.CodingKeys, &unk_250640B98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.Run.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.Run.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.Run.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.Run.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.Run.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.Run.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableTextSegmentAttribute.Value.Run.CodingKeys, &unk_250640B98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.Run.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.Run.CodingKeys);
  }
  return result;
}

void type metadata accessor for ProxyCodable<[NSAttributedStringKey]>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ProxyCodable<[NSAttributedStringKey]>)
  {
    type metadata accessor for [(_:)](255, &lazy cache variable for type metadata for [NSAttributedStringKey], (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type [NSAttributedStringKey] and conformance <A> [A]();
    v6 = type metadata accessor for ProxyCodable(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ProxyCodable<[NSAttributedStringKey]>);
  }
}

unint64_t lazy protocol witness table accessor for type [NSAttributedStringKey] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type [NSAttributedStringKey] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [NSAttributedStringKey] and conformance <A> [A])
  {
    type metadata accessor for [(_:)](255, &lazy cache variable for type metadata for [NSAttributedStringKey], (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for <A> [A], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [NSAttributedStringKey] and conformance <A> [A]);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x24BEE1768], MEMORY[0x24BEE1780], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v8 = a2;
    result = MEMORY[0x23B7C9C04](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_234E8AAC4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void type metadata accessor for _ContiguousArrayStorage<(NSAttributedStringKey, Any)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, Any)>)
  {
    type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(255, (unint64_t *)&lazy cache variable for type metadata for (NSAttributedStringKey, Any), type metadata accessor for NSAttributedStringKey);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, Any)>);
  }
}

uint64_t sub_234E8AB58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for Text.Style(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = v0 + v3;
  if (*(_QWORD *)(v0 + v3) >= 2uLL)
    swift_release();
  swift_bridgeObjectRelease();
  outlined consume of Text.Style.TextStyleColor(*(_QWORD *)(v5 + 16));
  swift_release();
  if ((unint64_t)(*(_QWORD *)(v5 + 88) - 1) >= 2)
    swift_release();
  if ((unint64_t)(*(_QWORD *)(v5 + 104) - 1) >= 2)
    swift_release();
  if (*(_QWORD *)(v5 + 176) != 1)
    swift_release();
  if (*(_QWORD *)(v5 + 248) != 1)
    swift_bridgeObjectRelease();
  if (*(_QWORD *)(v5 + 288) >= 2uLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)(v5 + 264), *(_QWORD *)(v5 + 272), *(_BYTE *)(v5 + 280));
    swift_bridgeObjectRelease();
  }

  swift_release();
  swift_release();
  v6 = v5 + *(int *)(v1 + 84);
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), (void (*)(uint64_t))MEMORY[0x24BDCEE28]);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 2, v7))
  {
    v8 = type metadata accessor for Locale.Language();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  swift_bridgeObjectRelease();
  v9 = v5 + *(int *)(v1 + 92);
  v10 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  v11 = *(_QWORD *)(v10 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_234E8AD68()
{
  return swift_deallocObject();
}

uint64_t sub_234E8AD78()
{
  return swift_deallocObject();
}

uint64_t sub_234E8AD88()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ResolvableTextSegmentAttribute.Value.Run.init(range:oldAttributes:newAttributes:)(void *a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in ResolvableTextSegmentAttribute.Value.Run.init(range:oldAttributes:newAttributes:)(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_234E8ADA0()
{
  return swift_deallocObject();
}

uint64_t sub_234E8ADB0()
{
  return swift_deallocObject();
}

uint64_t sub_234E8ADC0()
{
  return swift_deallocObject();
}

uint64_t sub_234E8ADD0()
{
  return swift_deallocObject();
}

uint64_t sub_234E8ADE0()
{
  return swift_deallocObject();
}

uint64_t sub_234E8ADF0()
{
  return swift_deallocObject();
}

uint64_t sub_234E8AE00()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in ResolvableTextSegmentAttribute.Value.update(_:of:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  closure #1 in ResolvableTextSegmentAttribute.Value.update(_:of:in:)(a1, a2, a3, a4, *(void **)(v4 + 16), *(_QWORD *)(v4 + 24));
}

uint64_t sub_234E8AE30()
{
  return swift_deallocObject();
}

uint64_t sub_234E8AE40()
{
  return swift_deallocObject();
}

uint64_t sub_234E8AE50()
{
  return swift_deallocObject();
}

uint64_t storeEnumTagSinglePayload for ResolvableTextSegmentAttribute.Value.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_234E8AEAC + 4 * byte_2352AA035[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_234E8AEE0 + 4 * byte_2352AA030[v4]))();
}

uint64_t sub_234E8AEE0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234E8AEE8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234E8AEF0);
  return result;
}

uint64_t sub_234E8AEFC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234E8AF04);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_234E8AF08(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234E8AF10(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ResolvableTextSegmentAttribute.Value.Run.CodingKeys()
{
  return &unk_250640B98;
}

uint64_t EnvironmentValues.typesettingConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + 8);
  swift_retain();
  v4 = swift_retain();
  specialized EnvironmentValues.subscript.getter(v4, v3, a1);
  swift_release();
  return swift_release();
}

uint64_t EnvironmentValues.typesettingConfiguration.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = type metadata accessor for TypesettingConfiguration();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TypesettingLanguage(a1, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for TypesettingConfiguration);
  specialized EnvironmentValues.subscript.setter((uint64_t)v4);
  return outlined destroy of TypesettingConfiguration(a1, (uint64_t (*)(_QWORD))type metadata accessor for TypesettingConfiguration);
}

uint64_t TypesettingConfiguration.language.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of TypesettingLanguage(v1, a1, type metadata accessor for TypesettingLanguage);
}

uint64_t TypesettingConfiguration.language.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of TypesettingLanguage(a1, v1);
}

uint64_t (*TypesettingConfiguration.language.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t TypesettingConfiguration.languageAwareLineHeightRatio.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;

  result = type metadata accessor for TypesettingConfiguration();
  v4 = (uint64_t *)(v1 + *(int *)(result + 20));
  v5 = *v4;
  LOBYTE(v4) = *((_BYTE *)v4 + 8);
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = (_BYTE)v4;
  return result;
}

uint64_t TypesettingConfiguration.languageAwareLineHeightRatio.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t result;
  uint64_t v5;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  result = type metadata accessor for TypesettingConfiguration();
  v5 = v1 + *(int *)(result + 20);
  *(_QWORD *)v5 = v2;
  *(_BYTE *)(v5 + 8) = v3;
  return result;
}

uint64_t (*TypesettingConfiguration.languageAwareLineHeightRatio.modify())(_QWORD, _QWORD)
{
  type metadata accessor for TypesettingConfiguration();
  return _ViewInputs.base.modify;
}

uint64_t TypesettingConfiguration.init(language:languageAwareLineHeightRatio:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v5 = *a2;
  v6 = *((_BYTE *)a2 + 8);
  if (one-time initialization token for automatic != -1)
    swift_once();
  v7 = type metadata accessor for TypesettingLanguage(0);
  v8 = __swift_project_value_buffer(v7, (uint64_t)static TypesettingLanguage.automatic);
  outlined init with copy of TypesettingLanguage(v8, a3, type metadata accessor for TypesettingLanguage);
  v9 = a3 + *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  result = outlined assign with take of TypesettingLanguage(a1, a3);
  *(_QWORD *)v9 = v5;
  *(_BYTE *)(v9 + 8) = v6;
  return result;
}

BOOL static TypesettingConfiguration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double v5;
  int v6;
  uint64_t v7;
  double v8;
  char v9;

  if (!specialized static TypesettingLanguage.Storage.== infix(_:_:)(a1, a2))
    return 0;
  v4 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
  v5 = *(double *)(a1 + v4);
  v6 = *(unsigned __int8 *)(a1 + v4 + 8);
  v7 = a2 + v4;
  v8 = *(double *)v7;
  v9 = *(_BYTE *)(v7 + 8);
  if (v6 != 1)
  {
    if (v5 != v8)
      v9 = 1;
    return (v9 & 1) == 0;
  }
  if (v5 == 0.0)
  {
    if (v8 != 0.0)
      v9 = 0;
    return (v9 & 1) != 0;
  }
  if (*(_QWORD *)&v5 != 1)
  {
    if (*(_QWORD *)&v8 <= 1uLL)
      v9 = 0;
    return (v9 & 1) != 0;
  }
  if (*(_QWORD *)&v8 != 1)
    v9 = 0;
  return (v9 & 1) != 0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TypesettingConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  double v7;
  int v8;
  uint64_t v9;
  double v10;
  int v11;

  if (!specialized static TypesettingLanguage.Storage.== infix(_:_:)(a1, a2))
    return 0;
  v6 = *(int *)(a3 + 20);
  v7 = *(double *)(a1 + v6);
  v8 = *(unsigned __int8 *)(a1 + v6 + 8);
  v9 = a2 + v6;
  v10 = *(double *)v9;
  v11 = *(unsigned __int8 *)(v9 + 8);
  if (v8 != 1)
  {
    if (v7 != v10)
      LOBYTE(v11) = 1;
    return (v11 & 1) == 0;
  }
  if (v7 == 0.0)
  {
    if (v10 != 0.0)
      LOBYTE(v11) = 0;
    return (v11 & 1) != 0;
  }
  if (*(_QWORD *)&v7 != 1)
  {
    if (*(_QWORD *)&v10 <= 1uLL)
      v11 = 0;
    return v11 == 1;
  }
  if (*(_QWORD *)&v10 != 1)
    LOBYTE(v11) = 0;
  return (v11 & 1) != 0;
}

uint64_t static TypesettingConfigurationKey.defaultValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v2 = type metadata accessor for TypesettingConfiguration();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static TypesettingConfigurationKey.defaultValue);
  return outlined init with copy of TypesettingLanguage(v3, a1, (uint64_t (*)(_QWORD))type metadata accessor for TypesettingConfiguration);
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance TypesettingConfigurationKey@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v2 = type metadata accessor for TypesettingConfiguration();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static TypesettingConfigurationKey.defaultValue);
  return outlined init with copy of TypesettingLanguage(v3, a1, (uint64_t (*)(_QWORD))type metadata accessor for TypesettingConfiguration);
}

uint64_t type metadata accessor for TypesettingConfiguration()
{
  uint64_t result;

  result = type metadata singleton initialization cache for TypesettingConfiguration;
  if (!type metadata singleton initialization cache for TypesettingConfiguration)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t specialized EnvironmentValues.subscript.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v2 = v1;
  v4 = *v1;
  if (!v1[1])
  {
    v8 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v8, (uint64_t)&v11);
    v7 = v9;
    swift_release_n();
    if (v5)
      goto LABEL_3;
LABEL_5:
    specialized EnvironmentValues._set<A>(_:for:)(a1);
    return outlined destroy of TypesettingConfiguration(a1, (uint64_t (*)(_QWORD))type metadata accessor for TypesettingConfiguration);
  }
  swift_retain_n();
  swift_retain_n();
  v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
  v7 = v6;
  swift_release_n();
  swift_release_n();
  if (!v5)
    goto LABEL_5;
LABEL_3:
  (*(void (**)(ValueMetadata *, uint64_t *, uint64_t, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v7 + 16))(&type metadata for TypesettingConfigurationKey, v2, a1, &type metadata for TypesettingConfigurationKey, &protocol witness table for TypesettingConfigurationKey, v5, v7);
  return outlined destroy of TypesettingConfiguration(a1, (uint64_t (*)(_QWORD))type metadata accessor for TypesettingConfiguration);
}

{
  return specialized EnvironmentValues.subscript.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

{
  return specialized EnvironmentValues.subscript.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

{
  return specialized EnvironmentValues.subscript.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

{
  return specialized EnvironmentValues.subscript.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

{
  return specialized EnvironmentValues.subscript.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  swift_retain_n();
  swift_bridgeObjectRetain();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  swift_bridgeObjectRelease();
  swift_release();
  if (v1[1])
  {
    v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  return specialized EnvironmentValues.subscript.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

{
  return specialized EnvironmentValues.subscript.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

{
  return specialized EnvironmentValues.subscript.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

{
  return specialized EnvironmentValues.subscript.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

{
  return specialized EnvironmentValues.subscript.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t specialized EnvironmentValues.subscript.setter(unsigned __int8 a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[23];
  unsigned __int8 v14;

  v2 = v1;
  v14 = a1;
  v4 = *v1;
  v5 = v1[1];
  if (v5)
  {
    swift_retain_n();
    swift_retain_n();
    v6 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    v8 = v7;
    swift_release_n();
    swift_release_n();
    if (v6)
      return (*(uint64_t (**)(ValueMetadata *, uint64_t *, unsigned __int8 *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v8 + 16))(&type metadata for EnvironmentValues.MaxAllowedDynamicRangeKey, v2, &v14, &type metadata for EnvironmentValues.MaxAllowedDynamicRangeKey, &protocol witness table for EnvironmentValues.MaxAllowedDynamicRangeKey, v6, v8);
  }
  else
  {
    v10 = swift_retain_n();
    v6 = specialized closure #1 in PropertyList.subscript.getter(v10, (uint64_t)v13);
    v8 = v11;
    swift_release_n();
    if (v6)
      return (*(uint64_t (**)(ValueMetadata *, uint64_t *, unsigned __int8 *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v8 + 16))(&type metadata for EnvironmentValues.MaxAllowedDynamicRangeKey, v2, &v14, &type metadata for EnvironmentValues.MaxAllowedDynamicRangeKey, &protocol witness table for EnvironmentValues.MaxAllowedDynamicRangeKey, v6, v8);
  }
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1);
  swift_release();
  if (v5)
  {
    v12 = *v2;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v12);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void (*EnvironmentValues.typesettingConfiguration.modify(_QWORD *a1))(_QWORD *a1, char a2)
{
  uint64_t v1;
  size_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = v1;
  v3 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for TypesettingConfiguration() - 8) + 64);
  a1[1] = malloc(v3);
  a1[2] = malloc(v3);
  v4 = malloc(v3);
  a1[3] = v4;
  v5 = *(_QWORD *)(v1 + 8);
  swift_retain();
  v6 = swift_retain();
  specialized EnvironmentValues.subscript.getter(v6, v5, (uint64_t)v4);
  swift_release();
  swift_release();
  return EnvironmentValues.typesettingConfiguration.modify;
}

void EnvironmentValues.typesettingConfiguration.modify(_QWORD *a1, char a2)
{
  void *v4;
  void *v5;
  void *v6;

  v4 = (void *)a1[2];
  v5 = (void *)a1[3];
  outlined init with copy of TypesettingLanguage((uint64_t)v5, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for TypesettingConfiguration);
  v6 = (void *)a1[1];
  if ((a2 & 1) != 0)
  {
    outlined init with copy of TypesettingLanguage((uint64_t)v4, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for TypesettingConfiguration);
    specialized EnvironmentValues.subscript.setter((uint64_t)v6);
    outlined destroy of TypesettingConfiguration((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for TypesettingConfiguration);
  }
  else
  {
    specialized EnvironmentValues.subscript.setter((uint64_t)v4);
  }
  outlined destroy of TypesettingConfiguration((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for TypesettingConfiguration);
  free(v5);
  free(v4);
  free(v6);
}

uint64_t *initializeBufferWithCopyOfBuffer for TypesettingConfiguration(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
    v8 = v7;
    v9 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 2, v7))
    {
      v10 = type metadata accessor for TypesettingLanguage.Storage(0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      v12 = type metadata accessor for Locale.Language();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
      *((_BYTE *)a1 + *(int *)(v8 + 48)) = *((_BYTE *)a2 + *(int *)(v8 + 48));
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 2, v8);
    }
    v13 = *(int *)(a3 + 20);
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    *(_QWORD *)v14 = *(_QWORD *)v15;
    v14[8] = v15[8];
  }
  return a1;
}

uint64_t destroy for TypesettingConfiguration(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 2, v2);
  if (!(_DWORD)result)
  {
    v4 = type metadata accessor for Locale.Language();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  return result;
}

char *initializeWithCopy for TypesettingConfiguration(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;

  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v6))
  {
    v9 = type metadata accessor for TypesettingLanguage.Storage(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    v10 = type metadata accessor for Locale.Language();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
    a1[*(int *)(v7 + 48)] = a2[*(int *)(v7 + 48)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
  }
  v11 = *(int *)(a3 + 20);
  v12 = &a1[v11];
  v13 = &a2[v11];
  *(_QWORD *)v12 = *(_QWORD *)v13;
  v12[8] = v13[8];
  return a1;
}

_BYTE *assignWithCopy for TypesettingConfiguration(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_BYTE *, uint64_t, uint64_t);
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v19;

  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  v9 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48);
  v10 = v9(a1, 2, v6);
  v11 = v9(a2, 2, v7);
  if (!v10)
  {
    if (!v11)
    {
      v19 = type metadata accessor for Locale.Language();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v19 - 8) + 24))(a1, a2, v19);
      a1[*(int *)(v7 + 48)] = a2[*(int *)(v7 + 48)];
      goto LABEL_7;
    }
    outlined destroy of TypesettingConfiguration((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for (Locale.Language, TypesettingLanguage.Flags));
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    v13 = type metadata accessor for TypesettingLanguage.Storage(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  v12 = type metadata accessor for Locale.Language();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
  a1[*(int *)(v7 + 48)] = a2[*(int *)(v7 + 48)];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
LABEL_7:
  v14 = *(int *)(a3 + 20);
  v15 = &a1[v14];
  v16 = &a2[v14];
  v17 = *(_QWORD *)v16;
  v15[8] = v16[8];
  *(_QWORD *)v15 = v17;
  return a1;
}

char *initializeWithTake for TypesettingConfiguration(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;

  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v6))
  {
    v9 = type metadata accessor for TypesettingLanguage.Storage(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    v10 = type metadata accessor for Locale.Language();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
    a1[*(int *)(v7 + 48)] = a2[*(int *)(v7 + 48)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
  }
  v11 = *(int *)(a3 + 20);
  v12 = &a1[v11];
  v13 = &a2[v11];
  *(_QWORD *)v12 = *(_QWORD *)v13;
  v12[8] = v13[8];
  return a1;
}

_BYTE *assignWithTake for TypesettingConfiguration(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_BYTE *, uint64_t, uint64_t);
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v18;

  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  v9 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48);
  v10 = v9(a1, 2, v6);
  v11 = v9(a2, 2, v7);
  if (!v10)
  {
    if (!v11)
    {
      v18 = type metadata accessor for Locale.Language();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(a1, a2, v18);
      a1[*(int *)(v7 + 48)] = a2[*(int *)(v7 + 48)];
      goto LABEL_7;
    }
    outlined destroy of TypesettingConfiguration((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for (Locale.Language, TypesettingLanguage.Flags));
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    v13 = type metadata accessor for TypesettingLanguage.Storage(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  v12 = type metadata accessor for Locale.Language();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
  a1[*(int *)(v7 + 48)] = a2[*(int *)(v7 + 48)];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
LABEL_7:
  v14 = *(int *)(a3 + 20);
  v15 = &a1[v14];
  v16 = &a2[v14];
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v16[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for TypesettingConfiguration()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_234E8BFF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TypesettingLanguage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for TypesettingConfiguration()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_234E8C040(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TypesettingLanguage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata completion function for TypesettingConfiguration()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for TypesettingLanguage.Storage(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for TypesettingConfigurationKey()
{
  return &type metadata for TypesettingConfigurationKey;
}

uint64_t outlined init with take of TypesettingConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TypesettingConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t EnvironmentValues.backgroundProminence.getter@<X0>(char *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

BOOL static BackgroundProminence.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void static BackgroundProminence.standard.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static BackgroundProminence.increased.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void BackgroundProminence.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int BackgroundProminence.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t key path getter for EnvironmentValues.backgroundProminence : EnvironmentValues@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v6;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v6);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, &v6);
  }
  result = swift_release_n();
  *a2 = v6;
  return result;
}

uint64_t EnvironmentValues.backgroundProminence.setter(char *a1)
{
  uint64_t *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v2);
  swift_release();
  if (v1[1])
  {
    v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t (*EnvironmentValues.backgroundProminence.modify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1)
{
  uint64_t *v4;
  char *v5;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;

  v5 = (char *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  v6 = *v4;
  if (v4[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v6, v5);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<BackgroundProminence.Key>(0, a2, a3, a4);
    BloomFilter.init(hashValue:)(v7);
    v8 = swift_retain_n();
    v9 = specialized find1<A>(_:key:filter:)(v8, v12);
    if (v9)
      v10 = *(_BYTE *)(v9 + 72);
    else
      v10 = 0;
    *v5 = v10;
  }
  swift_release_n();
  return EnvironmentValues.backgroundProminence.modify;
}

uint64_t EnvironmentValues.backgroundProminence.modify(uint64_t a1)
{
  uint64_t *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(uint64_t **)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 24);
  v4 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3);
  swift_release();
  if (v2[1])
  {
    v5 = **(_QWORD **)(a1 + 16);
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void type metadata accessor for EnvironmentPropertyKey<BackgroundProminence.Key>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundProminence.Key>)
  {
    v4 = type metadata accessor for EnvironmentPropertyKey(0, (uint64_t)&type metadata for BackgroundProminence.Key, (uint64_t)&protocol witness table for BackgroundProminence.Key, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundProminence.Key>);
  }
}

unint64_t lazy protocol witness table accessor for type BackgroundProminence and conformance BackgroundProminence()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BackgroundProminence and conformance BackgroundProminence;
  if (!lazy protocol witness table cache variable for type BackgroundProminence and conformance BackgroundProminence)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for BackgroundProminence, &type metadata for BackgroundProminence);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BackgroundProminence and conformance BackgroundProminence);
  }
  return result;
}

uint64_t sub_234E8C5DC(char *a1)
{
  char v2;

  v2 = *a1;
  return EnvironmentValues.backgroundProminence.setter(&v2);
}

ValueMetadata *type metadata accessor for BackgroundProminence()
{
  return &type metadata for BackgroundProminence;
}

uint64_t storeEnumTagSinglePayload for BackgroundProminence(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_234E8C670 + 4 * byte_2352AA595[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_234E8C6A4 + 4 * asc_2352AA590[v4]))();
}

uint64_t sub_234E8C6A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234E8C6AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234E8C6B4);
  return result;
}

uint64_t sub_234E8C6C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234E8C6C8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_234E8C6CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234E8C6D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BackgroundProminence.Guts()
{
  return &type metadata for BackgroundProminence.Guts;
}

ValueMetadata *type metadata accessor for BackgroundProminence.Key()
{
  return &type metadata for BackgroundProminence.Key;
}

unint64_t lazy protocol witness table accessor for type BackgroundProminence.Guts and conformance BackgroundProminence.Guts()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BackgroundProminence.Guts and conformance BackgroundProminence.Guts;
  if (!lazy protocol witness table cache variable for type BackgroundProminence.Guts and conformance BackgroundProminence.Guts)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for BackgroundProminence.Guts, &type metadata for BackgroundProminence.Guts);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BackgroundProminence.Guts and conformance BackgroundProminence.Guts);
  }
  return result;
}

uint64_t static TypesettingLanguageAwareLineHeightRatio.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  char v4;

  v2 = *(double *)a1;
  v3 = *(double *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  if (*(_BYTE *)(a1 + 8) == 1)
  {
    if (v2 == 0.0)
    {
      if (v3 != 0.0)
        v4 = 0;
      if ((v4 & 1) != 0)
        return 1;
    }
    else if (*(_QWORD *)&v2 == 1)
    {
      if (*(_QWORD *)&v3 != 1)
        v4 = 0;
      if ((v4 & 1) != 0)
        return 1;
    }
    else
    {
      if (*(_QWORD *)&v3 <= 1uLL)
        v4 = 0;
      if ((v4 & 1) != 0)
        return 1;
    }
  }
  else
  {
    if (v2 != v3)
      v4 = 1;
    if ((v4 & 1) == 0)
      return 1;
  }
  return 0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TypesettingLanguageAwareLineHeightRatio.Storage(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  char v4;
  uint64_t v6;
  char v7;

  v2 = *(double *)a1;
  v3 = *(double *)a2;
  if (*(_BYTE *)(a1 + 8) == 1)
  {
    if (v2 == 0.0)
    {
      if (v3 == 0.0)
        v6 = *(unsigned __int8 *)(a2 + 8);
      else
        LOBYTE(v6) = 0;
      if ((v6 & 1) != 0)
        return 1;
    }
    else if (*(_QWORD *)&v2 == 1)
    {
      if (*(_QWORD *)&v3 == 1)
        v4 = *(_BYTE *)(a2 + 8);
      else
        v4 = 0;
      if ((v4 & 1) != 0)
        return 1;
    }
    else
    {
      if (*(_QWORD *)&v3 > 1uLL)
        v7 = *(_BYTE *)(a2 + 8);
      else
        v7 = 0;
      if ((v7 & 1) != 0)
        return 1;
    }
  }
  else if ((*(_BYTE *)(a2 + 8) & 1) == 0)
  {
    return v2 == *(double *)a2;
  }
  return 0;
}

void static TypesettingLanguageAwareLineHeightRatio.automatic.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

void static TypesettingLanguageAwareLineHeightRatio.disable.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 1;
  *(_BYTE *)(a1 + 8) = 1;
}

void static TypesettingLanguageAwareLineHeightRatio.legacy.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 2;
  *(_BYTE *)(a1 + 8) = 1;
}

void static TypesettingLanguageAwareLineHeightRatio.custom(_:)(uint64_t a1@<X8>, double a2@<D0>)
{
  if (a2 < 0.0)
    a2 = 0.0;
  if (a2 > 1.0)
    a2 = 1.0;
  *(double *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TypesettingLanguageAwareLineHeightRatio(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  int v4;
  BOOL v5;

  v2 = *(double *)a1;
  v3 = *(double *)a2;
  v4 = *(unsigned __int8 *)(a2 + 8);
  if (*(_BYTE *)(a1 + 8) != 1)
  {
    if (v2 != v3)
      LOBYTE(v4) = 1;
    return (v4 & 1) == 0;
  }
  if (v2 != 0.0)
  {
    if (*(_QWORD *)&v2 == 1)
    {
      v5 = *(_QWORD *)&v3 == 1;
      goto LABEL_10;
    }
    if (*(_QWORD *)&v3 <= 1uLL)
      v4 = 0;
    return v4 == 1;
  }
  v5 = *(_QWORD *)&v3 == 0;
LABEL_10:
  if (!v5)
    LOBYTE(v4) = 0;
  return (v4 & 1) != 0;
}

void protocol witness for FontModifier.modify(descriptor:in:) in conformance LanguageAwareLineHeightRatioFontModifier(const __CTFontDescriptor **a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t inited;
  void *v5;
  id v6;
  const __CTFontDescriptor *v7;
  const __CFDictionary *isa;
  CTFontDescriptorRef CopyWithAttributes;

  v3 = *v1;
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Any)>, (uint64_t (*)(uint64_t))type metadata accessor for (CFStringRef, Any), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23527E860;
  v5 = (void *)*MEMORY[0x24BDC4D50];
  *(_QWORD *)(inited + 32) = *MEMORY[0x24BDC4D50];
  *(_QWORD *)(inited + 64) = MEMORY[0x24BEE13C8];
  *(_QWORD *)(inited + 40) = v3;
  v6 = v5;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  v7 = *a1;
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  CopyWithAttributes = CTFontDescriptorCreateCopyWithAttributes(v7, isa);

  *a1 = CopyWithAttributes;
}

uint64_t LanguageAwareLineHeightRatioTextModifier.modify(style:environment:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_BYTE *)(v1 + 24);
  v4 = a1 + *(int *)(type metadata accessor for Text.Style(0) + 84);
  result = type metadata accessor for TypesettingConfiguration();
  v6 = v4 + *(int *)(result + 20);
  *(_QWORD *)v6 = v2;
  *(_BYTE *)(v6 + 8) = v3;
  return result;
}

uint64_t LanguageAwareLineHeightRatioTextModifier.isEqual(to:)()
{
  uint64_t v0;
  uint64_t result;
  double v2;
  double v3;
  char v4;

  result = swift_dynamicCastClass();
  if (result)
  {
    v2 = *(double *)(result + 16);
    v3 = *(double *)(v0 + 16);
    v4 = *(_BYTE *)(v0 + 24);
    if (*(_BYTE *)(result + 24) == 1)
    {
      if (v2 == 0.0)
      {
        if (v3 != 0.0)
          v4 = 0;
        if ((v4 & 1) != 0)
          return 1;
      }
      else if (*(_QWORD *)&v2 == 1)
      {
        if (*(_QWORD *)&v3 != 1)
          v4 = 0;
        if ((v4 & 1) != 0)
          return 1;
      }
      else
      {
        if (*(_QWORD *)&v3 <= 1uLL)
          v4 = 0;
        if ((v4 & 1) != 0)
          return 1;
      }
    }
    else
    {
      if (v2 != v3)
        v4 = 1;
      if ((v4 & 1) == 0)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t LanguageAwareLineHeightRatioTextModifier.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t View.typesettingLanguageAwareLineHeightRatio(_:isEnabled:)(uint64_t *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  char v8;
  uint64_t *KeyPath;
  uint64_t v10;

  v7 = *a1;
  v8 = *((_BYTE *)a1 + 8);
  KeyPath = (uint64_t *)swift_getKeyPath();
  v10 = swift_allocObject();
  *(_BYTE *)(v10 + 16) = a2;
  *(_QWORD *)(v10 + 24) = v7;
  *(_BYTE *)(v10 + 32) = v8;
  View.transformEnvironment<A>(_:transform:)(KeyPath, (uint64_t)partial apply for closure #1 in View.typesettingLanguageAwareLineHeightRatio(_:isEnabled:), v10, a3, a4);
  swift_release();
  return swift_release();
}

uint64_t sub_234E8CBBC()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.typesettingLanguageAwareLineHeightRatio(_:isEnabled:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_BYTE *)(v1 + 16) == 1)
  {
    v2 = result;
    v3 = *(_BYTE *)(v1 + 32);
    v4 = *(_QWORD *)(v1 + 24);
    result = type metadata accessor for TypesettingConfiguration();
    v5 = v2 + *(int *)(result + 20);
    *(_QWORD *)v5 = v4;
    *(_BYTE *)(v5 + 8) = v3;
  }
  return result;
}

uint64_t Text.typesettingLanguageAwareLineHeightRatio(_:isEnabled:)(uint64_t *a1, char a2, uint64_t a3, uint64_t a4, char a5, _QWORD *a6)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;

  if ((a2 & 1) != 0)
  {
    v10 = *((_BYTE *)a1 + 8);
    v11 = *a1;
    type metadata accessor for LanguageAwareLineHeightRatioTextModifier();
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = v11;
    *(_BYTE *)(v12 + 24) = v10;
    outlined copy of Text.Storage(a3, a4, a5 & 1);
    swift_bridgeObjectRetain();
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      a6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a6[2] + 1, 1, a6);
    v14 = a6[2];
    v13 = a6[3];
    if (v14 >= v13 >> 1)
      a6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, a6);
    a6[2] = v14 + 1;
    v15 = &a6[2 * v14];
    v15[4] = v12;
    *((_BYTE *)v15 + 40) = -64;
    swift_release();
  }
  else
  {
    outlined copy of Text.Storage(a3, a4, a5 & 1);
    swift_bridgeObjectRetain();
  }
  return a3;
}

uint64_t type metadata accessor for LanguageAwareLineHeightRatioTextModifier()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for TypesettingLanguageAwareLineHeightRatio()
{
  return &type metadata for TypesettingLanguageAwareLineHeightRatio;
}

uint64_t sub_234E8CD80(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v1 = *a1;
  v2 = a1[1];
  type metadata accessor for [(_:)](255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<TypesettingConfiguration>, (uint64_t (*)(uint64_t))type metadata accessor for TypesettingConfiguration, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyTransformModifier);
  v5 = type metadata accessor for ModifiedContent(255, v1, v3, v4);
  v7[0] = v2;
  v7[1] = &protocol witness table for _EnvironmentKeyTransformModifier<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v7);
}

ValueMetadata *type metadata accessor for TypesettingLanguageAwareLineHeightRatio.Storage()
{
  return &type metadata for TypesettingLanguageAwareLineHeightRatio.Storage;
}

ValueMetadata *type metadata accessor for LanguageAwareLineHeightRatioFontModifier()
{
  return &type metadata for LanguageAwareLineHeightRatioFontModifier;
}

unint64_t instantiation function for generic protocol witness table for LanguageAwareLineHeightRatioFontModifier(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type LanguageAwareLineHeightRatioFontModifier and conformance LanguageAwareLineHeightRatioFontModifier();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void *Image.Location.bundle.getter()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  if ((unint64_t)*v0 < 2)
    return 0;
  v2 = v1;
  return v1;
}

uint64_t NamedImage.Cache.decode(_:)@<X0>(uint64_t a1@<X0>, CGImage **a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  uint64_t (*v20)(_QWORD);
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  os_unfair_lock_s *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  void *v29;
  CGImage *v30;
  char v31;
  char v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t result;
  CGImage **v36;
  void *v37;
  _BYTE *v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  os_unfair_lock_s *v41;
  void (*v42)(void **__return_ptr, char *);
  char *v43;
  uint64_t v44;
  CGImage *v45;
  CGImage *v46;
  char v47;
  CGImage *v48;
  char v49;
  CGImage *v50;
  CGImage **v51;
  _BYTE *v52;
  char *v53;
  uint64_t v54;
  void *v55;
  CGImage *v56;
  char v57;
  uint64_t v58;
  CGImage *v59;
  double Width;
  int64_t Height;
  uint64_t v62;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v64;
  CGImage *v65;
  double v66;
  int64_t v67;
  CGImage **v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  char *v73;
  CGImage **v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  void *v78[3];
  void *v79;
  CGImage *v80;
  CGImage *v81;
  uint64_t v82;
  CGImage *v83;
  CGImage *v84;
  char v85;
  __int128 v86;
  CGImage *v87;
  double v88;
  double v89;
  char v90;

  v77 = a1;
  v74 = a2;
  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v75 = (char *)&v69 - v8;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v69 - v10;
  v12 = type metadata accessor for NamedImage.BitmapKey(0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for NamedImage.Key(0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(void **)v2;
  v18 = *(_QWORD *)(v2 + 8);
  outlined init with copy of TypesettingLanguage(v77, (uint64_t)v17, v20);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(_QWORD *)&v71 = v6;
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v11, v17, v3);
    v72 = v4;
    v21 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    v22 = (uint64_t)v75;
    v73 = v11;
    v77 = v3;
    v21(v75, v11, v3);
    v23 = (os_unfair_lock_s *)(v18 + 16);
    swift_retain();
    swift_retain_n();
    os_unfair_lock_lock((os_unfair_lock_t)(v18 + 16));
    v24 = v18;
    v25 = *(_QWORD *)(v18 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    os_unfair_lock_unlock(v23);
    swift_release();
    v70 = v24;
    swift_release_n();
    if (*(_QWORD *)(v25 + 16))
    {
      v26 = specialized __RawDictionaryStorage.find<A>(_:)(v22);
      if ((v27 & 1) != 0)
      {
        v28 = *(_QWORD *)(v25 + 56) + 48 * v26;
        v29 = *(void **)v28;
        v71 = *(_OWORD *)(v28 + 16);
        v30 = *(CGImage **)(v28 + 32);
        v31 = *(_BYTE *)(v28 + 40);
        v32 = *(_BYTE *)(v28 + 8);
        outlined copy of GraphicsImage.Contents(v29, v32);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v33 = *(void (**)(uint64_t, uint64_t))(v72 + 8);
        v34 = v77;
        v33(v22, v77);
        result = ((uint64_t (*)(char *, uint64_t))v33)(v73, v34);
        v36 = v74;
        *v74 = (CGImage *)v29;
        *((_BYTE *)v36 + 8) = v32;
        *((_OWORD *)v36 + 1) = v71;
        v36[4] = v30;
        *((_BYTE *)v36 + 40) = v31;
        return result;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v39 = *(void (**)(uint64_t, uint64_t))(v72 + 8);
    v40 = v77;
    v39(v22, v77);
    if (v19)
    {
      v41 = v23;
      v42 = *(void (**)(void **__return_ptr, char *))(*(_QWORD *)v19 + 88);
      swift_retain();
      v43 = v73;
      v44 = v76;
      v42(&v79, v73);
      if (v44)
      {
        v39((uint64_t)v43, v40);
        return swift_release();
      }
      v55 = v79;
      v56 = v80;
      v57 = (char)v81;
      LODWORD(v76) = v81;
      v21((char *)v71, v43, v40);
      v58 = v40;
      v59 = v55;
      Width = (double)(uint64_t)CGImageGetWidth(v59);
      Height = CGImageGetHeight(v59);
      *(_QWORD *)&v86 = v59;
      BYTE8(v86) = 0;
      v87 = v56;
      v88 = Width;
      v89 = (double)Height;
      v90 = v57;
      swift_retain();
      v62 = v70;
      swift_retain_n();
      os_unfair_lock_lock(v41);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v79 = *(void **)(v62 + 40);
      *(_QWORD *)(v62 + 40) = 0x8000000000000000;
      v64 = v71;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v86, v71, isUniquelyReferenced_nonNull_native);
      *(_QWORD *)(v62 + 40) = v79;
      swift_bridgeObjectRelease();
      v39(v64, v58);
      os_unfair_lock_unlock(v41);
      swift_release();
      swift_release_n();
      v65 = v59;
      v66 = (double)(uint64_t)CGImageGetWidth(v65);
      v67 = CGImageGetHeight(v65);

      swift_release();
      v68 = v74;
      *v74 = v59;
      *((_BYTE *)v68 + 8) = 0;
      v68[2] = v56;
      *((double *)v68 + 3) = v66;
      *((double *)v68 + 4) = (double)v67;
      *((_BYTE *)v68 + 40) = v76;
      v53 = v73;
      v54 = v58;
    }
    else
    {
      lazy protocol witness table accessor for type NamedImage.Errors and conformance NamedImage.Errors();
      swift_allocError();
      *v52 = 1;
      swift_willThrow();
      v53 = v73;
      v54 = v40;
    }
    return ((uint64_t (*)(char *, uint64_t))v39)(v53, v54);
  }
  else
  {
    outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v17, (uint64_t)v14, type metadata accessor for NamedImage.BitmapKey);
    v37 = (void *)*((_QWORD *)v14 + 4);
    v78[1] = v19;
    v78[2] = (void *)v18;
    v78[0] = v37;
    NamedImage.Cache.subscript.getter((uint64_t)v14, v78, (uint64_t)&v79);
    if (v85 == 3)
    {
      lazy protocol witness table accessor for type NamedImage.Errors and conformance NamedImage.Errors();
      swift_allocError();
      *v38 = 0;
      swift_willThrow();
      return outlined destroy of TypesettingConfiguration((uint64_t)v14, type metadata accessor for NamedImage.BitmapKey);
    }
    else
    {
      v46 = v83;
      v45 = v84;
      v47 = v82;
      v48 = v81;
      v50 = (CGImage *)v79;
      v49 = (char)v80;
      result = outlined destroy of TypesettingConfiguration((uint64_t)v14, type metadata accessor for NamedImage.BitmapKey);
      v51 = v74;
      *v74 = v50;
      *((_BYTE *)v51 + 8) = v49;
      v51[2] = v48;
      v51[3] = v46;
      v51[4] = v45;
      *((_BYTE *)v51 + 40) = v47;
    }
  }
  return result;
}

uint64_t type metadata accessor for NamedImage.BitmapKey(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for NamedImage.BitmapKey);
}

uint64_t type metadata accessor for NamedImage.Key(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for NamedImage.Key);
}

uint64_t (*NamedImage.VectorKey.catalogKey.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*NamedImage.VectorKey.name.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*NamedImage.VectorKey.scale.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void NamedImage.VectorKey.layoutDirection.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 32);
}

_BYTE *NamedImage.VectorKey.layoutDirection.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 32) = *result;
  return result;
}

uint64_t (*NamedImage.VectorKey.layoutDirection.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t NamedImage.VectorKey.locale.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for NamedImage.VectorKey(0) + 32);
  v4 = type metadata accessor for Locale();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t NamedImage.VectorKey.locale.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for NamedImage.VectorKey(0) + 32);
  v4 = type metadata accessor for Locale();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*NamedImage.VectorKey.locale.modify())(_QWORD, _QWORD)
{
  type metadata accessor for NamedImage.VectorKey(0);
  return _ViewInputs.base.modify;
}

double NamedImage.VectorKey.weight.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for NamedImage.VectorKey(0) + 36));
}

uint64_t NamedImage.VectorKey.weight.setter(double a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for NamedImage.VectorKey(0);
  *(double *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*NamedImage.VectorKey.weight.modify())(_QWORD, _QWORD)
{
  type metadata accessor for NamedImage.VectorKey(0);
  return _ViewInputs.base.modify;
}

uint64_t NamedImage.VectorKey.imageScale.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for NamedImage.VectorKey(0);
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 40));
  return result;
}

uint64_t NamedImage.VectorKey.imageScale.setter(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t result;

  v2 = *a1;
  result = type metadata accessor for NamedImage.VectorKey(0);
  *(_BYTE *)(v1 + *(int *)(result + 40)) = v2;
  return result;
}

uint64_t (*NamedImage.VectorKey.imageScale.modify())(_QWORD, _QWORD)
{
  type metadata accessor for NamedImage.VectorKey(0);
  return _ViewInputs.base.modify;
}

double NamedImage.VectorKey.pointSize.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for NamedImage.VectorKey(0) + 44));
}

uint64_t NamedImage.VectorKey.pointSize.setter(double a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for NamedImage.VectorKey(0);
  *(double *)(v1 + *(int *)(result + 44)) = a1;
  return result;
}

uint64_t (*NamedImage.VectorKey.pointSize.modify())(_QWORD, _QWORD)
{
  type metadata accessor for NamedImage.VectorKey(0);
  return _ViewInputs.base.modify;
}

id NamedImage.VectorKey.location.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + *(int *)(type metadata accessor for NamedImage.VectorKey(0) + 48));
  *a1 = v3;
  return outlined copy of Image.Location(v3);
}

void NamedImage.VectorKey.location.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *(int *)(type metadata accessor for NamedImage.VectorKey(0) + 48);
  outlined consume of Image.Location(*(id *)(v1 + v3));
  *(_QWORD *)(v1 + v3) = v2;
}

uint64_t (*NamedImage.VectorKey.location.modify())(_QWORD, _QWORD)
{
  type metadata accessor for NamedImage.VectorKey(0);
  return _ViewInputs.base.modify;
}

uint64_t NamedImage.VectorKey.idiom.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for NamedImage.VectorKey(0) + 52));
}

uint64_t NamedImage.VectorKey.idiom.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for NamedImage.VectorKey(0);
  *(_QWORD *)(v1 + *(int *)(result + 52)) = a1;
  return result;
}

uint64_t (*NamedImage.VectorKey.idiom.modify())(_QWORD, _QWORD)
{
  type metadata accessor for NamedImage.VectorKey(0);
  return _ViewInputs.base.modify;
}

uint64_t NamedImage.VectorKey.init(name:location:in:textStyle:idiom:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  char v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  Swift::Int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  Swift::Int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v49 = a6;
  v52 = a5;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for Text.Style?, type metadata accessor for Text.Style, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v48 - v13;
  v15 = type metadata accessor for Text.Style(0);
  v50 = *(_QWORD *)(v15 - 8);
  v51 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Locale();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = *a3;
  v22 = *a4;
  v23 = a4[1];
  v55 = v22;
  v56 = v23;
  swift_retain();
  swift_retain();
  CatalogKey.init(_:)(&v55, (char *)&v53);
  v24 = BYTE1(v53);
  *(_BYTE *)a7 = v53;
  *(_BYTE *)(a7 + 1) = v24;
  *(_QWORD *)(a7 + 8) = a1;
  *(_QWORD *)(a7 + 16) = a2;
  swift_retain();
  swift_retain_n();
  if (v23)
  {
    v25 = swift_retain();
    v26 = specialized PropertyList.Tracker.value<A>(_:for:)(v25);
    swift_release_n();
    swift_release_n();
    *(double *)(a7 + 24) = v26;
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v22, &v55);
    swift_release_n();
    swift_release_n();
    *(_BYTE *)(a7 + 32) = v55;
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v22, (uint64_t)v21);
  }
  else
  {
    v27 = swift_retain_n();
    v28 = specialized closure #1 in PropertyList.subscript.getter(v27);
    swift_release_n();
    swift_release_n();
    *(double *)(a7 + 24) = v28;
    swift_retain_n();
    swift_retain();
    v29 = specialized find<A>(_:key:)(v22);
    if (v29)
      v30 = *(_BYTE *)(v29 + 72);
    else
      v30 = 0;
    swift_release();
    swift_release_n();
    *(_BYTE *)(a7 + 32) = v30;
    swift_retain_n();
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v22, (uint64_t)v21);
    swift_release_n();
  }
  swift_release_n();
  swift_release_n();
  v31 = (int *)type metadata accessor for NamedImage.VectorKey(0);
  (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(a7 + v31[8], v21, v18);
  v32 = v52;
  outlined init with copy of TimeZone?(v52, (uint64_t)v14, (unint64_t *)&lazy cache variable for type metadata for Text.Style?, type metadata accessor for Text.Style);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v14, 1, v51) != 1)
  {
    outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v14, (uint64_t)v17, type metadata accessor for Text.Style);
    v53 = v22;
    v54 = v23;
    Text.Style.fontTraits(in:)(&v53, (uint64_t)&v55);
    outlined destroy of TypesettingConfiguration((uint64_t)v17, type metadata accessor for Text.Style);
    v35 = v55;
    v34 = v56;
    v37 = v48;
    v36 = v49;
    if (!v23)
      goto LABEL_15;
LABEL_11:
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v22, (char *)&v53);
    swift_release_n();
    swift_release_n();
    LOBYTE(v38) = v53;
    if (v53 == 2)
      goto LABEL_20;
    goto LABEL_18;
  }
  outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v14, (unint64_t *)&lazy cache variable for type metadata for Text.Style?, type metadata accessor for Text.Style);
  if (v23)
  {
    swift_retain_n();
    swift_retain_n();
    v33 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v22);
    swift_release_n();
    swift_release_n();
  }
  else
  {
    v55 = v22;
    v56 = 0;
    swift_retain();
    v33 = specialized static EnvironmentValues.EffectiveSymbolFontKey.value(in:)((unint64_t *)&v55);
    swift_release();
    swift_release();
  }
  v37 = v48;
  v36 = v49;
  v53 = v22;
  v54 = v23;
  Font.resolveTraits(in:)(&v53, v33, (uint64_t)&v55);
  swift_release();
  v35 = v55;
  v34 = v56;
  if (v23)
    goto LABEL_11;
LABEL_15:
  type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LegibilityWeightKey>, (uint64_t)&type metadata for LegibilityWeightKey, (uint64_t)&protocol witness table for LegibilityWeightKey);
  BloomFilter.init(hashValue:)(v39);
  v40 = v55;
  v38 = 2;
  swift_retain_n();
  swift_retain();
  v41 = specialized find1<A>(_:key:filter:)(v22, v40);
  if (v41)
    v38 = *(unsigned __int8 *)(v41 + 72);
  swift_release();
  swift_release_n();
  if (v38 != 2)
  {
LABEL_18:
    if ((v38 & 1) != 0)
    {
      CTFontGetAccessibilityBoldWeightOfWeight();
      v34 = v42;
    }
  }
LABEL_20:
  *(_QWORD *)(a7 + v31[9]) = v34;
  if (v23)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v22, (char *)&v55);
    swift_release_n();
    swift_release_n();
    v43 = v55;
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ImageScaleKey>, (uint64_t)&type metadata for ImageScaleKey, (uint64_t)&protocol witness table for ImageScaleKey);
    BloomFilter.init(hashValue:)(v44);
    v45 = v55;
    swift_retain_n();
    swift_retain();
    v46 = specialized find1<A>(_:key:filter:)(v22, v45);
    if (v46)
      v43 = *(_BYTE *)(v46 + 72);
    else
      v43 = 1;
    swift_release();
    swift_release_n();
  }
  outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?(v32, (unint64_t *)&lazy cache variable for type metadata for Text.Style?, type metadata accessor for Text.Style);
  swift_release();
  result = swift_release();
  *(_BYTE *)(a7 + v31[10]) = v43;
  *(_QWORD *)(a7 + v31[11]) = v35;
  *(_QWORD *)(a7 + v31[12]) = v37;
  *(_QWORD *)(a7 + v31[13]) = v36;
  return result;
}

_BYTE *Image.HashableScale.init(_:)@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void NamedImage.VectorKey.hash(into:)()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  Swift::UInt64 v2;
  int *v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  void *v6;
  Swift::UInt v7;
  id v8;

  v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if ((*((_QWORD *)v0 + 3) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = *((_QWORD *)v0 + 3);
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v0[32]);
  v3 = (int *)type metadata accessor for NamedImage.VectorKey(0);
  type metadata accessor for Locale();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Locale and conformance Locale, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], MEMORY[0x24BDCEED0]);
  dispatch thunk of Hashable.hash(into:)();
  if ((*(_QWORD *)&v0[v3[9]] & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = *(_QWORD *)&v0[v3[9]];
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v0[v3[10]]);
  if ((*(_QWORD *)&v0[v3[11]] & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = *(_QWORD *)&v0[v3[11]];
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
  v6 = *(void **)&v0[v3[12]];
  if (v6)
  {
    if (v6 != (void *)1)
    {
      Hasher._combine(_:)(0);
      v8 = v6;
      NSObject.hash(into:)();
      outlined consume of Image.Location(v6);
      goto LABEL_16;
    }
    v7 = 2;
  }
  else
  {
    v7 = 1;
  }
  Hasher._combine(_:)(v7);
LABEL_16:
  Hasher._combine(_:)(*(_QWORD *)&v0[v3[13]]);
}

BOOL static Image.HashableScale.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int NamedImage.VectorKey.hashValue.getter()
{
  return NamedImage.VectorKey.hashValue.getter((void (*)(_BYTE *))NamedImage.VectorKey.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NamedImage.VectorKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance NamedImage.VectorKey(a1, a2, (void (*)(_BYTE *))NamedImage.VectorKey.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NamedImage.VectorKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance ScrollPositionToValue<A>(a1, a2, a3, (void (*)(_BYTE *))NamedImage.VectorKey.hash(into:));
}

id NamedImage.VectorInfo.glyph.getter()
{
  id *v0;

  return *v0;
}

void NamedImage.VectorInfo.glyph.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

uint64_t (*NamedImage.VectorInfo.glyph.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t NamedImage.VectorInfo.flipsRightToLeft.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t NamedImage.VectorInfo.flipsRightToLeft.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = result;
  return result;
}

uint64_t (*NamedImage.VectorInfo.flipsRightToLeft.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

__n128 NamedImage.VectorInfo.layoutMetrics.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;
  __int128 v4;

  v2 = *(_OWORD *)(v1 + 32);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(v1 + 48);
  v4 = *(_OWORD *)(v1 + 64);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

__n128 NamedImage.VectorInfo.layoutMetrics.setter(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;
  __int128 v4;

  v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 32) = v2;
  result = *(__n128 *)(a1 + 32);
  v4 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(v1 + 48) = result;
  *(_OWORD *)(v1 + 64) = v4;
  return result;
}

uint64_t (*NamedImage.VectorInfo.layoutMetrics.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void NamedImage.BitmapKey.catalogKey.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;
  char v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
}

_BYTE *NamedImage.BitmapKey.catalogKey.setter(_BYTE *result)
{
  _BYTE *v1;
  char v2;

  v2 = result[1];
  *v1 = *result;
  v1[1] = v2;
  return result;
}

uint64_t (*NamedImage.BitmapKey.catalogKey.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t NamedImage.BitmapKey.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NamedImage.BitmapKey.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*NamedImage.BitmapKey.name.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double NamedImage.BitmapKey.scale.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

void NamedImage.BitmapKey.scale.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 24) = a1;
}

uint64_t (*NamedImage.BitmapKey.scale.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

id NamedImage.BitmapKey.location.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 32);
  *a1 = v2;
  return outlined copy of Image.Location(v2);
}

void NamedImage.BitmapKey.location.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *a1;
  outlined consume of Image.Location(*(id *)(v1 + 32));
  *(_QWORD *)(v1 + 32) = v2;
}

uint64_t (*NamedImage.BitmapKey.location.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void NamedImage.BitmapKey.layoutDirection.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 40);
}

_BYTE *NamedImage.BitmapKey.layoutDirection.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 40) = *result;
  return result;
}

uint64_t (*NamedImage.BitmapKey.layoutDirection.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t NamedImage.BitmapKey.locale.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for NamedImage.BitmapKey(0) + 36);
  v4 = type metadata accessor for Locale();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t NamedImage.BitmapKey.locale.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for NamedImage.BitmapKey(0) + 36);
  v4 = type metadata accessor for Locale();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*NamedImage.BitmapKey.locale.modify())(_QWORD, _QWORD)
{
  type metadata accessor for NamedImage.BitmapKey(0);
  return _ViewInputs.base.modify;
}

uint64_t NamedImage.BitmapKey.gamut.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for NamedImage.BitmapKey(0);
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 40));
  return result;
}

uint64_t NamedImage.BitmapKey.gamut.setter(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t result;

  v2 = *a1;
  result = type metadata accessor for NamedImage.BitmapKey(0);
  *(_BYTE *)(v1 + *(int *)(result + 40)) = v2;
  return result;
}

uint64_t (*NamedImage.BitmapKey.gamut.modify())(_QWORD, _QWORD)
{
  type metadata accessor for NamedImage.BitmapKey(0);
  return _ViewInputs.base.modify;
}

uint64_t NamedImage.BitmapKey.idiom.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for NamedImage.BitmapKey(0) + 44));
}

uint64_t NamedImage.BitmapKey.idiom.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for NamedImage.BitmapKey(0);
  *(_QWORD *)(v1 + *(int *)(result + 44)) = a1;
  return result;
}

uint64_t (*NamedImage.BitmapKey.idiom.modify())(_QWORD, _QWORD)
{
  type metadata accessor for NamedImage.BitmapKey(0);
  return _ViewInputs.base.modify;
}

uint64_t NamedImage.BitmapKey.subtype.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for NamedImage.BitmapKey(0) + 48));
}

uint64_t NamedImage.BitmapKey.subtype.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for NamedImage.BitmapKey(0);
  *(_QWORD *)(v1 + *(int *)(result + 48)) = a1;
  return result;
}

uint64_t (*NamedImage.BitmapKey.subtype.modify())(_QWORD, _QWORD)
{
  type metadata accessor for NamedImage.BitmapKey(0);
  return _ViewInputs.base.modify;
}

uint64_t NamedImage.BitmapKey.horizontalSizeClass.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NamedImage.BitmapKey(0) + 52));
}

uint64_t NamedImage.BitmapKey.horizontalSizeClass.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for NamedImage.BitmapKey(0);
  *(_BYTE *)(v1 + *(int *)(result + 52)) = a1;
  return result;
}

uint64_t (*NamedImage.BitmapKey.horizontalSizeClass.modify())(_QWORD, _QWORD)
{
  type metadata accessor for NamedImage.BitmapKey(0);
  return _ViewInputs.base.modify;
}

uint64_t NamedImage.BitmapKey.verticalSizeClass.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NamedImage.BitmapKey(0) + 56));
}

uint64_t NamedImage.BitmapKey.verticalSizeClass.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for NamedImage.BitmapKey(0);
  *(_BYTE *)(v1 + *(int *)(result + 56)) = a1;
  return result;
}

uint64_t (*NamedImage.BitmapKey.verticalSizeClass.modify())(_QWORD, _QWORD)
{
  type metadata accessor for NamedImage.BitmapKey(0);
  return _ViewInputs.base.modify;
}

uint64_t NamedImage.BitmapKey.init(name:location:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t result;
  int v29;
  Swift::Int v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  Swift::Int v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  Swift::Int v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  _BYTE v45[8];
  _BYTE v46[8];
  uint64_t v47[2];
  char v48[2];

  v10 = type metadata accessor for Locale();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = &v45[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = *a3;
  v16 = *a4;
  v15 = a4[1];
  v47[0] = v16;
  v47[1] = v15;
  swift_retain();
  swift_retain();
  CatalogKey.init(_:)(v47, v48);
  v17 = v48[1];
  *(_BYTE *)a5 = v48[0];
  *(_BYTE *)(a5 + 1) = v17;
  *(_QWORD *)(a5 + 8) = a1;
  *(_QWORD *)(a5 + 16) = a2;
  swift_retain();
  swift_retain_n();
  if (v15)
  {
    v18 = swift_retain();
    v19 = specialized PropertyList.Tracker.value<A>(_:for:)(v18);
    swift_release_n();
    swift_release_n();
    *(double *)(a5 + 24) = v19;
    *(_QWORD *)(a5 + 32) = v14;
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v16, v47);
    swift_release_n();
    swift_release_n();
    *(_BYTE *)(a5 + 40) = v47[0];
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v16, (uint64_t)v13);
  }
  else
  {
    v20 = swift_retain_n();
    v21 = specialized closure #1 in PropertyList.subscript.getter(v20);
    swift_release_n();
    swift_release_n();
    *(double *)(a5 + 24) = v21;
    *(_QWORD *)(a5 + 32) = v14;
    swift_retain_n();
    swift_retain();
    v22 = specialized find<A>(_:key:)(v16);
    if (v22)
      v23 = *(_BYTE *)(v22 + 72);
    else
      v23 = 0;
    swift_release();
    swift_release_n();
    *(_BYTE *)(a5 + 40) = v23;
    swift_retain_n();
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v16, (uint64_t)v13);
    swift_release_n();
  }
  swift_release_n();
  swift_release_n();
  v24 = (int *)type metadata accessor for NamedImage.BitmapKey(0);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v11 + 32))(a5 + v24[9], v13, v10);
  if (v15)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v16, v48);
    swift_release_n();
    swift_release_n();
    *(_BYTE *)(a5 + v24[10]) = v48[0];
    swift_retain_n();
    swift_retain_n();
    v25 = specialized PropertyList.Tracker.value<A>(_:for:)(v16);
    swift_release_n();
    swift_release_n();
    *(_QWORD *)(a5 + v24[11]) = v25;
    swift_retain_n();
    swift_retain_n();
    v26 = specialized PropertyList.Tracker.value<A>(_:for:)(v16);
    swift_release_n();
    swift_release_n();
    *(_QWORD *)(a5 + v24[12]) = v26;
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v16, v48);
    swift_release_n();
    swift_release_n();
    if (v48[0] == 2)
      v27 = 0;
    else
      v27 = (v48[0] & 1) + 1;
    *(_BYTE *)(a5 + v24[13]) = v27;
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v16, v48);
    swift_release_n();
    result = swift_release_n();
    v29 = v48[0];
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayGamutKey>, (uint64_t)&type metadata for DisplayGamutKey, (uint64_t)&protocol witness table for DisplayGamutKey);
    BloomFilter.init(hashValue:)(v30);
    v31 = v47[0];
    swift_retain_n();
    swift_retain();
    v32 = specialized find1<A>(_:key:filter:)(v16, v31);
    if (v32)
      v33 = *(_BYTE *)(v32 + 72);
    else
      v33 = 0;
    swift_release();
    v34 = 2;
    swift_release_n();
    *(_BYTE *)(a5 + v24[10]) = v33;
    swift_retain_n();
    swift_retain_n();
    v35 = specialized closure #1 in PropertyList.subscript.getter(v16, (uint64_t)v46);
    swift_release_n();
    swift_release_n();
    *(_QWORD *)(a5 + v24[11]) = v35;
    swift_retain_n();
    swift_retain_n();
    v36 = specialized closure #1 in PropertyList.subscript.getter(v16, (uint64_t)v45);
    swift_release_n();
    swift_release_n();
    *(_QWORD *)(a5 + v24[12]) = v36;
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey>, (uint64_t)&type metadata for HorizontalUserInterfaceSizeClassKey, (uint64_t)&protocol witness table for HorizontalUserInterfaceSizeClassKey);
    BloomFilter.init(hashValue:)(v37);
    v38 = v47[0];
    swift_retain_n();
    swift_retain();
    v39 = specialized find1<A>(_:key:filter:)(v16, v38);
    if (v39)
      v34 = *(_BYTE *)(v39 + 72);
    swift_release();
    v29 = 2;
    swift_release_n();
    if (v34 == 2)
      v40 = 0;
    else
      v40 = (v34 & 1) + 1;
    *(_BYTE *)(a5 + v24[13]) = v40;
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey>, (uint64_t)&type metadata for VerticalUserInterfaceSizeClassKey, (uint64_t)&protocol witness table for VerticalUserInterfaceSizeClassKey);
    BloomFilter.init(hashValue:)(v41);
    v42 = v47[0];
    swift_retain_n();
    swift_retain();
    v43 = specialized find1<A>(_:key:filter:)(v16, v42);
    if (v43)
      v29 = *(unsigned __int8 *)(v43 + 72);
    swift_release_n();
    result = swift_release_n();
  }
  if (v29 == 2)
    v44 = 0;
  else
    v44 = (v29 & 1) + 1;
  *(_BYTE *)(a5 + v24[14]) = v44;
  return result;
}

uint64_t NamedImage.BitmapKey.init(catalogKey:name:scale:location:layoutDirection:locale:gamut:idiom:subtype:horizontalSizeClass:verticalSizeClass:)@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, char *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, uint64_t a11, char a12, char a13)
{
  char v16;
  uint64_t v17;
  char v18;
  char v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;

  v16 = a1[1];
  v17 = *a4;
  v18 = *a5;
  v19 = *a7;
  *(_BYTE *)a9 = *a1;
  *(_BYTE *)(a9 + 1) = v16;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(double *)(a9 + 24) = a10;
  *(_QWORD *)(a9 + 32) = v17;
  *(_BYTE *)(a9 + 40) = v18;
  v20 = (int *)type metadata accessor for NamedImage.BitmapKey(0);
  v21 = a9 + v20[9];
  v22 = type metadata accessor for Locale();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v21, a6, v22);
  *(_BYTE *)(a9 + v20[10]) = v19;
  *(_QWORD *)(a9 + v20[11]) = a8;
  *(_QWORD *)(a9 + v20[12]) = a11;
  *(_BYTE *)(a9 + v20[13]) = a12;
  *(_BYTE *)(a9 + v20[14]) = a13;
  return result;
}

void NamedImage.BitmapKey.hash(into:)()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  Swift::UInt64 v2;
  void *v3;
  Swift::UInt v4;
  id v5;
  int *v6;

  v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if ((*((_QWORD *)v0 + 3) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = *((_QWORD *)v0 + 3);
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  v3 = (void *)*((_QWORD *)v0 + 4);
  if (v3)
  {
    if (v3 != (void *)1)
    {
      Hasher._combine(_:)(0);
      v5 = v3;
      NSObject.hash(into:)();
      outlined consume of Image.Location(v3);
      goto LABEL_10;
    }
    v4 = 2;
  }
  else
  {
    v4 = 1;
  }
  Hasher._combine(_:)(v4);
LABEL_10:
  Hasher._combine(_:)(v0[40]);
  v6 = (int *)type metadata accessor for NamedImage.BitmapKey(0);
  type metadata accessor for Locale();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Locale and conformance Locale, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], MEMORY[0x24BDCEED0]);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(v0[v6[10]]);
  Hasher._combine(_:)(*(_QWORD *)&v0[v6[11]]);
  Hasher._combine(_:)(*(_QWORD *)&v0[v6[12]]);
  Hasher._combine(_:)(v0[v6[13]]);
  Hasher._combine(_:)(v0[v6[14]]);
}

Swift::Int NamedImage.BitmapKey.hashValue.getter()
{
  return NamedImage.VectorKey.hashValue.getter((void (*)(_BYTE *))NamedImage.BitmapKey.hash(into:));
}

Swift::Int NamedImage.VectorKey.hashValue.getter(void (*a1)(_BYTE *))
{
  _BYTE v3[72];

  Hasher.init(_seed:)();
  a1(v3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NamedImage.BitmapKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance NamedImage.VectorKey(a1, a2, (void (*)(_BYTE *))NamedImage.BitmapKey.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NamedImage.VectorKey(uint64_t a1, uint64_t a2, void (*a3)(_BYTE *))
{
  _BYTE v5[72];

  Hasher.init(_seed:)();
  a3(v5);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NamedImage.BitmapKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance ScrollPositionToValue<A>(a1, a2, a3, (void (*)(_BYTE *))NamedImage.BitmapKey.hash(into:));
}

id NamedImage.BitmapInfo.contents.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  char v3;

  v2 = *(void **)v1;
  *(_QWORD *)a1 = *(_QWORD *)v1;
  v3 = *(_BYTE *)(v1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  return outlined copy of GraphicsImage.Contents(v2, v3);
}

void NamedImage.BitmapInfo.contents.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  outlined consume of GraphicsImage.Contents(*(void **)v1, *(_BYTE *)(v1 + 8));
  *(_QWORD *)v1 = v2;
  *(_BYTE *)(v1 + 8) = v3;
}

uint64_t (*NamedImage.BitmapInfo.contents.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double NamedImage.BitmapInfo.scale.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void NamedImage.BitmapInfo.scale.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
}

uint64_t (*NamedImage.BitmapInfo.scale.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t NamedImage.BitmapInfo.orientation.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t NamedImage.BitmapInfo.orientation.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 24) = result;
  return result;
}

uint64_t (*NamedImage.BitmapInfo.orientation.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double NamedImage.BitmapInfo.unrotatedPixelSize.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

void NamedImage.BitmapInfo.unrotatedPixelSize.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 32) = a1;
  *(double *)(v2 + 40) = a2;
}

uint64_t (*NamedImage.BitmapInfo.unrotatedPixelSize.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void NamedImage.BitmapInfo.renderingMode.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 48);
}

_BYTE *NamedImage.BitmapInfo.renderingMode.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 48) = *result;
  return result;
}

uint64_t (*NamedImage.BitmapInfo.renderingMode.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

__n128 NamedImage.BitmapInfo.resizingInfo.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  __n128 result;
  __int128 v4;

  v2 = *(_BYTE *)(v1 + 88);
  result = *(__n128 *)(v1 + 56);
  v4 = *(_OWORD *)(v1 + 72);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v2;
  return result;
}

__n128 NamedImage.BitmapInfo.resizingInfo.setter(uint64_t a1)
{
  uint64_t v1;
  char v2;
  __n128 result;
  __int128 v4;

  v2 = *(_BYTE *)(a1 + 32);
  result = *(__n128 *)a1;
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 56) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 72) = v4;
  *(_BYTE *)(v1 + 88) = v2;
  return result;
}

uint64_t (*NamedImage.BitmapInfo.resizingInfo.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

__n128 NamedImage.BitmapInfo.init(contents:scale:orientation:unrotatedPixelSize:renderingMode:resizingInfo:)@<Q0>(uint64_t a1@<X0>, char a2@<W1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>, double a8@<D2>)
{
  char v8;
  char v9;
  char v10;
  __n128 result;
  __int128 v12;

  v8 = *(_BYTE *)(a1 + 8);
  v9 = *a3;
  v10 = *(_BYTE *)(a4 + 32);
  *(_QWORD *)a5 = *(_QWORD *)a1;
  *(_BYTE *)(a5 + 8) = v8;
  *(double *)(a5 + 16) = a6;
  *(_BYTE *)(a5 + 24) = a2;
  *(double *)(a5 + 32) = a7;
  *(double *)(a5 + 40) = a8;
  *(_BYTE *)(a5 + 48) = v9;
  result = *(__n128 *)a4;
  v12 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a5 + 56) = *(_OWORD *)a4;
  *(_OWORD *)(a5 + 72) = v12;
  *(_BYTE *)(a5 + 88) = v10;
  return result;
}

id NamedImage.DecodedInfo.contents.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  char v3;

  v2 = *(void **)v1;
  *(_QWORD *)a1 = *(_QWORD *)v1;
  v3 = *(_BYTE *)(v1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  return outlined copy of GraphicsImage.Contents(v2, v3);
}

void NamedImage.DecodedInfo.contents.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  outlined consume of GraphicsImage.Contents(*(void **)v1, *(_BYTE *)(v1 + 8));
  *(_QWORD *)v1 = v2;
  *(_BYTE *)(v1 + 8) = v3;
}

uint64_t (*NamedImage.DecodedInfo.contents.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double NamedImage.DecodedInfo.scale.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void NamedImage.DecodedInfo.scale.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
}

uint64_t (*NamedImage.DecodedInfo.scale.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double NamedImage.DecodedInfo.unrotatedPixelSize.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

void NamedImage.DecodedInfo.unrotatedPixelSize.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 24) = a1;
  *(double *)(v2 + 32) = a2;
}

uint64_t (*NamedImage.DecodedInfo.unrotatedPixelSize.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t NamedImage.DecodedInfo.orientation.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t NamedImage.DecodedInfo.orientation.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 40) = result;
  return result;
}

uint64_t (*NamedImage.DecodedInfo.orientation.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

BOOL static NamedImage.Errors.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void NamedImage.Errors.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int NamedImage.Errors.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t NamedImage.Cache.archiveDelegate.getter()
{
  return swift_retain();
}

uint64_t NamedImage.Cache.archiveDelegate.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*NamedImage.Cache.archiveDelegate.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t property wrapper backing initializer of NamedImage.Cache.data@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t result;

  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for AtomicBuffer<NamedImage.Cache.ImageCacheData>, (uint64_t)&unk_25060E078, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AtomicBuffer);
  result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a1;
  *(_QWORD *)(result + 32) = a2;
  *(_QWORD *)(result + 40) = a3;
  *(_QWORD *)(result + 48) = a4;
  *a5 = result;
  return result;
}

uint64_t NamedImage.Cache.init(archiveDelegate:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for AtomicBuffer<NamedImage.Cache.ImageCacheData>, (uint64_t)&unk_25060E078, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AtomicBuffer);
  result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  v5 = MEMORY[0x24BEE4B00];
  *(_QWORD *)(result + 24) = MEMORY[0x24BEE4B00];
  *(_QWORD *)(result + 32) = v5;
  *(_QWORD *)(result + 40) = v5;
  *(_QWORD *)(result + 48) = v5;
  *a2 = a1;
  a2[1] = result;
  return result;
}

void NamedImage.Cache.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_QWORD);
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  id v29;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  *(_QWORD *)&v36 = a2;
  *(_QWORD *)&v35 = type metadata accessor for NamedImage.VectorKey(0);
  MEMORY[0x24BDAC7A8](v35);
  v32 = (uint64_t)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v31 - v8;
  v11 = *v3;
  v10 = v3[1];
  outlined init with copy of TypesettingLanguage(a1, (uint64_t)&v31 - v8, v12);
  swift_retain();
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v10 + 16));
  v13 = *(_QWORD *)(v10 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v10 + 16));
  v31 = v11;
  swift_release();
  swift_release_n();
  if (*(_QWORD *)(v13 + 16))
  {
    v14 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v9);
    if ((v15 & 1) != 0)
    {
      v16 = *(_QWORD *)(v13 + 56) + 80 * v14;
      v17 = *(void **)v16;
      v18 = *(unsigned __int8 *)(v16 + 8);
      v19 = *(_OWORD *)(v16 + 16);
      v35 = *(_OWORD *)(v16 + 32);
      v36 = v19;
      v20 = *(_OWORD *)(v16 + 48);
      v33 = *(_OWORD *)(v16 + 64);
      v34 = v20;
      v21 = v17;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v22 = (uint64_t)v9;
      v23 = v18;
      outlined destroy of TypesettingConfiguration(v22, type metadata accessor for NamedImage.VectorKey);
LABEL_6:
      v27 = v33;
      v26 = v34;
      v25 = v35;
      v24 = v36;
      goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of TypesettingConfiguration((uint64_t)v9, type metadata accessor for NamedImage.VectorKey);
  NamedImage.VectorKey.loadVectorInfo(from:idiom:)(v36, *(_QWORD *)(a1 + *(int *)(v35 + 52)), (uint64_t)&v38);
  v23 = *((_QWORD *)&v38 + 1);
  v17 = (void *)v38;
  v24 = v39;
  v25 = v40;
  v26 = v41;
  v27 = v42;
  if ((_QWORD)v38)
  {
    v28 = v32;
    v35 = v40;
    v36 = v39;
    v33 = v42;
    v34 = v41;
    outlined init with copy of TypesettingLanguage(a1, v32, type metadata accessor for NamedImage.VectorKey);
    v29 = v17;
    swift_retain();
    swift_retain_n();
    os_unfair_lock_lock((os_unfair_lock_t)(v10 + 16));
    *(_QWORD *)&v38 = v29;
    BYTE8(v38) = v23 & 1;
    v39 = v36;
    v40 = v35;
    v41 = v34;
    v42 = v33;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v37 = *(_QWORD *)(v10 + 24);
    *(_QWORD *)(v10 + 24) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v38, v28, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v10 + 24) = v37;
    swift_bridgeObjectRelease();
    outlined destroy of TypesettingConfiguration(v28, type metadata accessor for NamedImage.VectorKey);
    os_unfair_lock_unlock((os_unfair_lock_t)(v10 + 16));
    swift_release();
    swift_release_n();
    goto LABEL_6;
  }
LABEL_7:
  *(_QWORD *)a3 = v17;
  *(_QWORD *)(a3 + 8) = v23;
  *(_OWORD *)(a3 + 16) = v24;
  *(_OWORD *)(a3 + 32) = v25;
  *(_OWORD *)(a3 + 48) = v26;
  *(_OWORD *)(a3 + 64) = v27;
}

__n128 NamedImage.VectorKey.loadVectorInfo(from:idiom:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  void *v14;
  __n128 result;
  void *v16;
  id v17;
  id v18;
  int v19;
  uint64_t v20;
  _BOOL4 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[16];
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  _OWORD v29[4];

  v4 = v3;
  v8 = type metadata accessor for NamedImage.VectorKey(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = &v25[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = *v4;
  v12 = v4[1];
  v26 = a1;
  v27 = v4;
  v28 = a2;
  if (v12)
    v13 = 256;
  else
    v13 = 0;
  v14 = specialized CUICatalog.findAsset<A, B>(key:matchTypes:assetLookup:)(v13 | v11, 0, 1, (uint64_t (*)(unint64_t, unint64_t))partial apply for closure #1 in NamedImage.VectorKey.loadVectorInfo(from:idiom:));
  if (!v14)
  {
    result.n128_u64[0] = 0;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    return result;
  }
  v16 = v14;
  v17 = v14;
  v18 = objc_msgSend(v17, sel_layoutDirection);
  if (objc_msgSend(v17, sel_isFlippable))
  {
    outlined init with copy of TypesettingLanguage((uint64_t)v4, (uint64_t)v10, type metadata accessor for NamedImage.VectorKey);
    if (v18)
    {
      v19 = v10[32];
      outlined destroy of TypesettingConfiguration((uint64_t)v10, type metadata accessor for NamedImage.VectorKey);
      v20 = 4;
      if (!v19)
        v20 = 5;
      v21 = v18 != (id)v20;
      goto LABEL_13;
    }
  }
  else
  {
    outlined init with copy of TypesettingLanguage((uint64_t)v4, (uint64_t)v10, type metadata accessor for NamedImage.VectorKey);
  }
  outlined destroy of TypesettingConfiguration((uint64_t)v10, type metadata accessor for NamedImage.VectorKey);
  v21 = 0;
LABEL_13:
  Image.LayoutMetrics.init(glyph:flipsRightToLeft:)(v17, v21, (uint64_t)v29);
  result = (__n128)v29[0];
  v22 = v29[1];
  v23 = v29[2];
  v24 = v29[3];
  *(_QWORD *)a3 = v16;
  *(_QWORD *)(a3 + 8) = v21;
  *(__n128 *)(a3 + 16) = result;
  *(_OWORD *)(a3 + 32) = v22;
  *(_OWORD *)(a3 + 48) = v23;
  *(_OWORD *)(a3 + 64) = v24;
  return result;
}

void NamedImage.Cache.subscript.getter(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(_QWORD);
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  os_unfair_lock_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v37;
  os_unfair_lock_s *v38;
  id v39;
  os_unfair_lock_t v40;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v42;
  os_unfair_lock_s *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  os_unfair_lock_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  id v55;
  void *v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  os_unfair_lock_s *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 v67;

  v7 = type metadata accessor for NamedImage.BitmapKey(0);
  MEMORY[0x24BDAC7A8](v7);
  v50 = (uint64_t)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v44 - v10;
  v12 = *a2;
  v54 = a1;
  v55 = v12;
  v14 = *v3;
  v13 = v3[1];
  outlined init with copy of TypesettingLanguage(a1, (uint64_t)&v44 - v10, v15);
  swift_retain();
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v13 + 16));
  v16 = *(_QWORD *)(v13 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v48 = (os_unfair_lock_t)(v13 + 16);
  os_unfair_lock_unlock((os_unfair_lock_t)(v13 + 16));
  v49 = v14;
  swift_release();
  swift_release_n();
  if (*(_QWORD *)(v16 + 16))
  {
    v17 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v11);
    if ((v18 & 1) != 0)
    {
      v19 = *(_QWORD *)(v16 + 56) + 96 * v17;
      v20 = *(void **)v19;
      v21 = *(_QWORD *)(v19 + 16);
      v50 = *(unsigned __int8 *)(v19 + 24);
      v23 = *(_QWORD *)(v19 + 32);
      v22 = *(_QWORD *)(v19 + 40);
      v51 = *(unsigned __int8 *)(v19 + 48);
      v24 = *(_QWORD *)(v19 + 56);
      v48 = *(os_unfair_lock_t *)(v19 + 64);
      v49 = v22;
      v25 = *(_QWORD *)(v19 + 72);
      v54 = *(_QWORD *)(v19 + 80);
      v55 = v20;
      v53 = *(unsigned __int8 *)(v19 + 88);
      v26 = *(_BYTE *)(v19 + 8);
      v52 = v26;
      outlined copy of GraphicsImage.Contents(v20, v26);
      v27 = v25;
      swift_bridgeObjectRelease();
      v28 = v24;
      swift_bridgeObjectRelease();
      v29 = v48;
      swift_bridgeObjectRelease();
      v30 = v49;
      swift_bridgeObjectRelease();
      v31 = (uint64_t)v11;
      v32 = v50;
      outlined destroy of TypesettingConfiguration(v31, type metadata accessor for NamedImage.BitmapKey);
LABEL_6:
      v35 = v51;
      v34 = v52;
      v37 = v53;
      v36 = v54;
      goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of TypesettingConfiguration((uint64_t)v11, type metadata accessor for NamedImage.BitmapKey);
  v33 = v54;
  v56 = v55;
  NamedImage.BitmapKey.loadBitmapInfo(location:idiom:subtype:)(&v56, *(_QWORD *)(v54 + *(int *)(v7 + 44)), *(_QWORD *)(v54 + *(int *)(v7 + 48)), (uint64_t)&v57);
  v34 = *((_QWORD *)&v57 + 1);
  v55 = (id)v57;
  v21 = v58;
  v32 = v59;
  v23 = v60;
  v30 = v61;
  v35 = v62;
  v28 = v63;
  v29 = v64;
  v27 = v65;
  v36 = v66;
  v37 = v67;
  if (v62 != 3)
  {
    v51 = v62;
    v52 = *((_QWORD *)&v57 + 1);
    v54 = v66;
    v53 = v67;
    outlined init with copy of TypesettingLanguage(v33, v50, type metadata accessor for NamedImage.BitmapKey);
    swift_retain();
    swift_retain_n();
    v46 = v27;
    v38 = v29;
    v39 = v55;
    outlined copy of NamedImage.BitmapInfo?(v55, v52, v21, v32, v23, v30, v51);
    v47 = v28;
    v45 = v21;
    v40 = v48;
    os_unfair_lock_lock(v48);
    *(_QWORD *)&v57 = v39;
    BYTE8(v57) = v52;
    v58 = v45;
    LOBYTE(v59) = v32;
    v60 = v23;
    v61 = v30;
    LOBYTE(v62) = v51;
    v63 = v47;
    v64 = v38;
    v65 = v46;
    v66 = v54;
    v67 = v53;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v56 = *(void **)(v13 + 32);
    *(_QWORD *)(v13 + 32) = 0x8000000000000000;
    v42 = v50;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v57, v50, isUniquelyReferenced_nonNull_native);
    v29 = v38;
    v27 = v46;
    *(_QWORD *)(v13 + 32) = v56;
    swift_bridgeObjectRelease();
    outlined destroy of TypesettingConfiguration(v42, type metadata accessor for NamedImage.BitmapKey);
    v43 = v40;
    v21 = v45;
    v28 = v47;
    os_unfair_lock_unlock(v43);
    swift_release();
    swift_release_n();
    goto LABEL_6;
  }
LABEL_7:
  *(_QWORD *)a3 = v55;
  *(_QWORD *)(a3 + 8) = v34;
  *(_QWORD *)(a3 + 16) = v21;
  *(_QWORD *)(a3 + 24) = v32;
  *(_QWORD *)(a3 + 32) = v23;
  *(_QWORD *)(a3 + 40) = v30;
  *(_QWORD *)(a3 + 48) = v35;
  *(_QWORD *)(a3 + 56) = v28;
  *(_QWORD *)(a3 + 64) = v29;
  *(_QWORD *)(a3 + 72) = v27;
  *(_QWORD *)(a3 + 80) = v36;
  *(_BYTE *)(a3 + 88) = v37;
}

void NamedImage.BitmapKey.loadBitmapInfo(location:idiom:subtype:)(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void *v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  void *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  void *v20;
  uint64_t v21;
  id v22;
  unsigned int v23;
  void *v24;
  double v25;
  uint64_t v26;
  id v27;
  Class isa;
  id v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  id v41;
  double v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  _QWORD *v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double Width;
  double v56;
  unsigned int v57;
  id v58;
  void *v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t);
  id v62;
  char v63;
  char v64;
  id v65;
  void *v66;
  int64_t Height;
  id v68;
  char v69;
  unint64_t v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  char v83;
  uint64_t v84;
  _QWORD v85[9];
  uint64_t v86;
  void *v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;

  v5 = v4;
  v9 = *a1;
  if (!*a1)
  {
    if (one-time initialization token for systemAssetManager != -1)
      swift_once();
    v10 = (void *)static Image.Location.systemAssetManager;
    goto LABEL_9;
  }
  if (v9 == (void *)1)
  {
    if (one-time initialization token for privateSystemAssetManager != -1)
      swift_once();
    v10 = (void *)static Image.Location.privateSystemAssetManager;
LABEL_9:
    v11 = v10;
    v12 = v11;
    goto LABEL_14;
  }
  v13 = one-time initialization token for sharedCache;
  v14 = v9;
  if (v13 != -1)
    swift_once();
  v88 = static NamedImage.sharedCache;
  v89 = (void *)unk_25426A178;
  swift_retain();
  swift_retain();
  v12 = NamedImage.Cache.subscript.getter(v14);
  swift_release();
  swift_release();
  if (!v12)
  {
    outlined consume of Image.Location(v9);
LABEL_63:
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_QWORD *)(a4 + 48) = 3;
    *(_OWORD *)(a4 + 56) = 0u;
    *(_OWORD *)(a4 + 72) = 0u;
    *(_BYTE *)(a4 + 88) = 0;
    return;
  }
  outlined consume of Image.Location(v9);
LABEL_14:
  if (*(_BYTE *)(v5 + 40))
    v15 = 4;
  else
    v15 = 5;
  if (a2 == 8)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CatalogAssetMatchType>, (uint64_t)&type metadata for CatalogAssetMatchType, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v11 = (id)swift_allocObject();
    v16 = v11;
    *((_OWORD *)v11 + 1) = xmmword_2352828C0;
    *((_QWORD *)v11 + 4) = 8;
    *((_BYTE *)v11 + 40) = 0;
    *((_QWORD *)v11 + 6) = 1;
    *((_BYTE *)v11 + 56) = 1;
  }
  else
  {
    v16 = &outlined read-only object #0 of NamedImage.BitmapKey.loadBitmapInfo(location:idiom:subtype:);
  }
  MEMORY[0x24BDAC7A8](v11);
  v85[2] = v12;
  v85[3] = v5;
  v85[4] = a2;
  v85[5] = a3;
  v85[6] = v15;
  if (v18)
    v19 = 256;
  else
    v19 = 0;
  v20 = specialized CUICatalog.findAsset<A, B>(key:matchTypes:assetLookup:)(v19 | v17, (uint64_t)v16, (uint64_t (*)(unint64_t, unint64_t))partial apply for closure #1 in NamedImage.BitmapKey.loadBitmapInfo(location:idiom:subtype:), (uint64_t)v85);
  swift_bridgeObjectRelease();
  if (!v20)
  {
LABEL_62:

    goto LABEL_63;
  }
  v21 = one-time initialization token for v3;
  v22 = v20;
  if (v21 != -1)
    swift_once();
  v23 = static Semantics.v3;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FAB4 == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0)
      goto LABEL_53;
  }
  else if (static Semantics.forced < v23)
  {
LABEL_53:
    v58 = objc_msgSend(v22, sel_image);
    if (v58)
    {
      v59 = v58;
      if ((unint64_t)v9 >= 2)
      {
        v60 = one-time initialization token for sharedCache;
        v61 = v9;
        if (v60 != -1)
          swift_once();
        v88 = static NamedImage.sharedCache;
        v89 = (void *)unk_25426A178;
        swift_retain();
        swift_retain();
        v62 = NamedImage.Cache.subscript.getter(v61);
        v64 = v63;
        swift_release();
        swift_release();
        if (v62)
        {
          if ((v64 & 1) != 0)
          {
            outlined consume of Image.Location(v9);
            v65 = v59;
            v66 = (void *)MEMORY[0x23B7C5DAC](0xD000000000000020, 0x80000002352E44D0);
            CGImageSetProperty();

            goto LABEL_65;
          }

        }
        outlined consume of Image.Location(v9);
      }
LABEL_65:
      v48 = v59;
      Width = (double)(uint64_t)CGImageGetWidth((CGImageRef)v48);
      Height = CGImageGetHeight((CGImageRef)v48);

      v57 = 0;
      v56 = (double)Height;
      goto LABEL_66;
    }

    goto LABEL_62;
  }
  if (!objc_msgSend(v22, sel_preservedVectorRepresentation))
    goto LABEL_53;
  v24 = (void *)MEMORY[0x23B7C5DAC](*(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16));
  v25 = *(double *)(v5 + 24);
  v26 = *(unsigned __int8 *)(v5 + *(int *)(type metadata accessor for NamedImage.BitmapKey(0) + 40));
  v27 = objc_msgSend(v22, sel_appearance);
  isa = Locale._bridgeToObjectiveC()().super.isa;
  v29 = objc_msgSend(v12, sel_namedVectorImageWithName_scaleFactor_displayGamut_layoutDirection_appearanceName_locale_, v24, v26, v15, v27, isa, v25);

  if (!v29)
    goto LABEL_53;
  v30 = objc_msgSend(v29, sel_appearance);
  if (v30)
  {
    v31 = v30;
    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v34 = v33;

  }
  else
  {
    v32 = 0;
    v34 = 0;
  }
  v35 = objc_msgSend(v22, sel_appearance);
  if (!v35)
  {
    if (!v34)
      goto LABEL_49;
    goto LABEL_47;
  }
  v36 = v35;
  v86 = v32;
  v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v39 = v38;

  if (!v34)
  {
    if (!v39)
      goto LABEL_49;
    goto LABEL_47;
  }
  if (!v39)
  {
LABEL_47:

    swift_bridgeObjectRelease();
    goto LABEL_53;
  }
  if (v86 == v37 && v34 == v39)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v40 & 1) == 0)
    {

      goto LABEL_53;
    }
  }
LABEL_49:
  v87 = v9;
  outlined copy of Image.Location(v9);
  v41 = v29;
  objc_msgSend(v22, sel_size);
  VectorImageLayer.init(image:location:size:)(v41, &v87, (uint64_t)&v88, v42, v43);
  v44 = v88;
  if (!v88)
  {

    goto LABEL_53;
  }
  v46 = v90;
  v45 = v91;
  v47 = v89;
  v48 = (_QWORD *)swift_allocObject();
  v48[2] = v44;
  v48[3] = v47;
  v48[4] = v46;
  v48[5] = v45;
  swift_retain();
  outlined copy of Image.Location?(v47);
  swift_bridgeObjectRetain();
  objc_msgSend(v22, sel_size);
  v50 = v49;
  v52 = v51;
  objc_msgSend(v22, sel_scale);
  v54 = v53;
  outlined consume of VectorImageLayer?(v44, v47);

  Width = v50 * v54;
  v56 = v52 * v54;
  v57 = 3;
LABEL_66:
  v68 = objc_msgSend(v22, sel_templateRenderingMode);
  v69 = specialized Image.Orientation.init(exifValue:)((unint64_t)objc_msgSend(v22, sel_exifOrientation) & 0xF);
  if (v69 == 8)
    LOBYTE(v70) = 0;
  else
    LOBYTE(v70) = v69;
  v71 = objc_msgSend(v22, sel_layoutDirection);
  if (objc_msgSend(v22, sel_isFlippable) && v71 && v71 != (id)v15)
    v70 = 0x607040502030001uLL >> (8 * v70);
  outlined copy of GraphicsImage.Contents(v48, v57);
  objc_msgSend(v22, sel_scale);
  v73 = v72;
  if (objc_msgSend(v22, sel_hasSliceInformation))
  {
    objc_msgSend(v22, sel_edgeInsets);
    v75 = v74;
    v77 = v76;
    v79 = v78;
    v81 = v80;
    v82 = objc_msgSend(v22, sel_resizingMode);

    outlined consume of GraphicsImage.Contents(v48, v57);
    v83 = v82 != 0;
  }
  else
  {

    outlined consume of GraphicsImage.Contents(v48, v57);
    v83 = 2;
    v75 = 0;
    v77 = 0;
    v79 = 0;
    v81 = 0;
  }
  *(_QWORD *)a4 = v48;
  *(_QWORD *)(a4 + 8) = v57;
  *(_QWORD *)(a4 + 16) = v73;
  if (v68)
    v84 = 2 * (v68 != (id)1);
  else
    v84 = 1;
  *(_QWORD *)(a4 + 24) = v70;
  *(double *)(a4 + 32) = Width;
  *(double *)(a4 + 40) = v56;
  *(_QWORD *)(a4 + 48) = v84;
  *(_QWORD *)(a4 + 56) = v75;
  *(_QWORD *)(a4 + 64) = v77;
  *(_QWORD *)(a4 + 72) = v79;
  *(_QWORD *)(a4 + 80) = v81;
  *(_BYTE *)(a4 + 88) = v83;
}

id NamedImage.Cache.subscript.getter(void (*a1)(uint64_t, uint64_t))
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  os_unfair_lock_s *v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  uint64_t v32;
  os_unfair_lock_s *v33;
  os_unfair_lock_s *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  void (*v42)(uint64_t, uint64_t);
  os_unfair_lock_s *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  void (*v48)(uint64_t, char *, uint64_t);
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  os_unfair_lock_s *v54;
  void (*v55)(char *, char *, uint64_t);
  uint64_t v56;
  char *v57;
  char *v58;
  os_unfair_lock_s *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t);
  uint64_t v65;
  char v66;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v52 - v4;
  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v52 - v11;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v52 - v14;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v52 - v17;
  v20 = *v1;
  v19 = (os_unfair_lock_s *)v1[1];
  v21 = (void *)objc_opt_self();
  v64 = a1;
  v22 = objc_msgSend(v21, sel_defaultUICatalogForBundle_, a1);
  if (!v22)
  {
    v62 = v6;
    v63 = v7;
    v57 = v9;
    v58 = v12;
    v59 = v19;
    v60 = v18;
    v61 = v20;
    v24 = (void *)MEMORY[0x23B7C5DAC](0x737465737341, 0xE600000000000000);
    v25 = (void *)MEMORY[0x23B7C5DAC](7496035, 0xE300000000000000);
    v26 = objc_msgSend(v64, sel_URLForResource_withExtension_, v24, v25);

    if (v26)
    {
      v27 = v15;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      v28 = v62;
      v29 = v63;
      v30 = *(void (**)(char *, char *, uint64_t))(v63 + 32);
      v30(v5, v15, v62);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v5, 0, 1, v28);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v5, 1, v28) != 1)
      {
        v31 = v60;
        v30(v60, v5, v28);
        v32 = (uint64_t)v58;
        v55 = *(void (**)(char *, char *, uint64_t))(v29 + 16);
        v55(v58, v31, v28);
        v33 = v59;
        v34 = v59 + 4;
        swift_retain();
        swift_retain_n();
        os_unfair_lock_lock(v33 + 4);
        v35 = *(_QWORD *)&v33[8]._os_unfair_lock_opaque;
        v36 = *(_QWORD *)&v33[12]._os_unfair_lock_opaque;
        v64 = *(void (**)(uint64_t, uint64_t))&v33[6]._os_unfair_lock_opaque;
        swift_bridgeObjectRetain();
        v56 = v35;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        os_unfair_lock_unlock(v33 + 4);
        swift_release();
        swift_release_n();
        v37 = *(_QWORD *)(v36 + 16);
        v53 = (uint64_t)v27;
        if (v37 && (v38 = specialized __RawDictionaryStorage.find<A>(_:)(v32), (v39 & 1) != 0))
        {
          outlined init with copy of NamedImage.Cache.WeakCatalog(*(_QWORD *)(v36 + 56) + 8 * v38, (uint64_t)&v65);
          v40 = 0;
        }
        else
        {
          v65 = 0;
          v40 = 1;
        }
        v66 = v40;
        v42 = *(void (**)(uint64_t, uint64_t))(v63 + 8);
        v42(v32, v28);
        v54 = v33 + 12;
        if ((v66 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)&v65, &lazy cache variable for type metadata for NamedImage.Cache.WeakCatalog?, (uint64_t)&type metadata for NamedImage.Cache.WeakCatalog);
        }
        else
        {
          v23 = MEMORY[0x23B7C9E44](&v65);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)&v65, &lazy cache variable for type metadata for NamedImage.Cache.WeakCatalog?, (uint64_t)&type metadata for NamedImage.Cache.WeakCatalog);
          if (v23)
          {
            v42((uint64_t)v60, v28);
            return (id)v23;
          }
        }
        v64 = v42;
        swift_retain();
        v43 = v59;
        swift_retain_n();
        os_unfair_lock_lock(v34);
        v44 = *(_QWORD *)&v43[12]._os_unfair_lock_opaque;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        os_unfair_lock_unlock(v34);
        swift_release();
        swift_release_n();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v45 = specialized _NativeDictionary.filter(_:)(v44);
        v46 = v60;
        swift_bridgeObjectRelease();
        swift_retain();
        swift_retain_n();
        os_unfair_lock_lock(v34);
        *(_QWORD *)&v43[12]._os_unfair_lock_opaque = v45;
        swift_bridgeObjectRelease();
        os_unfair_lock_unlock(v34);
        swift_release();
        swift_release_n();
        v47 = (uint64_t)v57;
        v48 = (void (*)(uint64_t, char *, uint64_t))v55;
        v55(v57, v46, v28);
        v49 = objc_allocWithZone(MEMORY[0x24BE28C28]);
        v50 = @nonobjc CUICatalog.init(url:)(v47);
        v23 = (uint64_t)v50;
        if (v50)
        {
          v51 = v53;
          v48(v53, v46, v28);
          swift_unknownObjectWeakInit();
          v66 = 0;
          swift_retain();
          swift_retain_n();
          os_unfair_lock_lock(v34);
          specialized Dictionary.subscript.setter((uint64_t)&v65, v51);
          os_unfair_lock_unlock(v34);
          swift_release();
          swift_release_n();
          v64((uint64_t)v46, v28);
          return (id)v23;
        }
        v64((uint64_t)v46, v28);
        return 0;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v63 + 56))(v5, 1, 1, v62);
    }
    outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v5, &lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    return 0;
  }
  return v22;
}

uint64_t one-time initialization function for sharedCache()
{
  uint64_t result;
  uint64_t v1;

  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for AtomicBuffer<NamedImage.Cache.ImageCacheData>, (uint64_t)&unk_25060E078, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AtomicBuffer);
  result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  v1 = MEMORY[0x24BEE4B00];
  *(_QWORD *)(result + 24) = MEMORY[0x24BEE4B00];
  *(_QWORD *)(result + 32) = v1;
  *(_QWORD *)(result + 40) = v1;
  *(_QWORD *)(result + 48) = v1;
  static NamedImage.sharedCache = 0;
  unk_25426A178 = result;
  return result;
}

uint64_t static NamedImage.sharedCache.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  if (one-time initialization token for sharedCache != -1)
    swift_once();
  v2 = unk_25426A178;
  *a1 = static NamedImage.sharedCache;
  a1[1] = v2;
  swift_retain();
  return swift_retain();
}

uint64_t static Image._mainNamedBundle.getter()
{
  return 0;
}

BOOL Image.Location.supportsNonVectorImages.getter()
{
  _QWORD *v0;

  return *v0 > 1uLL;
}

id Image.Location.catalog.getter()
{
  void **v0;
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v1 = *v0;
  if (!*v0)
  {
    if (one-time initialization token for systemAssetManager != -1)
      swift_once();
    v2 = (id)static Image.Location.systemAssetManager;
    goto LABEL_9;
  }
  if (v1 == (void *)1)
  {
    if (one-time initialization token for privateSystemAssetManager != -1)
      swift_once();
    v2 = (id)static Image.Location.privateSystemAssetManager;
LABEL_9:
    v3 = v2;
    return v2;
  }
  v4 = one-time initialization token for sharedCache;
  v5 = v1;
  if (v4 != -1)
    swift_once();
  swift_retain();
  swift_retain();
  v2 = NamedImage.Cache.subscript.getter(v5);
  outlined consume of Image.Location(v1);
  swift_release();
  swift_release();
  return v2;
}

uint64_t Image.Location.fillVariant(_:name:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  int v6;
  int v7;
  uint64_t v8;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v15;

  v6 = *a1;
  v7 = a1[1];
  v8 = *v3;
  if (one-time initialization token for fill != -1)
    swift_once();
  if ((static SymbolVariants.fill & ~v6) != 0)
    return 0;
  if (HIBYTE(static SymbolVariants.fill) != 3 && (v7 == 3 || v7 != HIBYTE(static SymbolVariants.fill)))
    return 0;
  if (v8)
  {
    if (v8 != 1)
    {
      swift_bridgeObjectRetain();
      v15 = String.init<A>(_:)();
      String.append<A>(contentsOf:)();
      return v15;
    }
    if (one-time initialization token for privateSystemAssetManager != -1)
      swift_once();
    v10 = off_254266260;
    if (!*((_QWORD *)off_254266260 + 2))
      return 0;
  }
  else
  {
    if (one-time initialization token for systemAssetManager != -1)
      swift_once();
    v10 = off_254269B40;
    if (!*((_QWORD *)off_254269B40 + 2))
      return 0;
  }
  swift_bridgeObjectRetain();
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v13 = *(_QWORD *)(v10[7] + 16 * v11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t Image.Location.aliasedName(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v5;
  unint64_t v6;
  char v7;

  if (*v2)
  {
    if (*v2 != 1)
      goto LABEL_13;
    if (one-time initialization token for privateSystemAssetManager != -1)
      swift_once();
    v5 = off_254266268;
    if (!*((_QWORD *)off_254266268 + 2))
      goto LABEL_13;
  }
  else
  {
    if (one-time initialization token for systemAssetManager != -1)
      swift_once();
    v5 = off_254269B48;
    if (!*((_QWORD *)off_254269B48 + 2))
      goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v7 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_13:
    swift_bridgeObjectRetain();
    return a1;
  }
  a1 = *(_QWORD *)(v5[7] + 16 * v6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

Swift::Bool __swiftcall Image.Location.mayContainSymbol(_:)(Swift::String a1)
{
  _QWORD *v1;
  void *object;
  uint64_t countAndFlagsBits;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  Swift::Bool result;
  _QWORD *v9;
  uint64_t j;
  uint64_t v11;
  BOOL v12;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  _QWORD *v17;
  uint64_t i;
  uint64_t v19;
  BOOL v20;

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  if (*v1 == 1)
  {
    if (one-time initialization token for privateSystemAssetManager != -1)
      swift_once();
    v13 = off_254266270;
    v14 = *((_QWORD *)off_254266270 + 2);
    if (!v14)
      return 0;
    v15 = *((_QWORD *)off_254266270 + 4) == countAndFlagsBits && *((_QWORD *)off_254266270 + 5) == (_QWORD)object;
    if (!v15 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      if (v14 == 1)
        return 0;
      if (v13[6] != countAndFlagsBits || v13[7] != (_QWORD)object)
      {
        result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if (!result)
        {
          if (v14 != 2)
          {
            v17 = v13 + 9;
            for (i = 2; ; ++i)
            {
              v19 = i + 1;
              if (__OFADD__(i, 1))
                break;
              v20 = *(v17 - 1) == countAndFlagsBits && *v17 == (_QWORD)object;
              if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                return 1;
              result = 0;
              v17 += 2;
              if (v19 == v14)
                return result;
            }
            goto LABEL_54;
          }
          return 0;
        }
      }
    }
    return 1;
  }
  if (*v1)
    return 1;
  if (one-time initialization token for systemAssetManager != -1)
    swift_once();
  v4 = off_254269B50;
  v5 = *((_QWORD *)off_254269B50 + 2);
  if (!v5)
    return 0;
  v6 = *((_QWORD *)off_254269B50 + 4) == countAndFlagsBits && *((_QWORD *)off_254269B50 + 5) == (_QWORD)object;
  if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    return 1;
  if (v5 == 1)
    return 0;
  if (v4[6] == countAndFlagsBits && v4[7] == (_QWORD)object)
    return 1;
  result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result)
    return 1;
  if (v5 == 2)
    return 0;
  v9 = v4 + 9;
  for (j = 2; ; ++j)
  {
    v11 = j + 1;
    if (__OFADD__(j, 1))
      break;
    v12 = *(v9 - 1) == countAndFlagsBits && *v9 == (_QWORD)object;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      return 1;
    result = 0;
    v9 += 2;
    if (v11 == v5)
      return result;
  }
  __break(1u);
LABEL_54:
  __break(1u);
  return result;
}

uint64_t specialized Image.Location.findShapeAndFillVariantName<A>(_:base:body:)@<X0>(Swift::String name@<0:X1, 8:X2>, __int16 a2@<W0>, void (*a3)(_QWORD *__return_ptr, _QWORD, _QWORD)@<X3>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  void *object;
  uint64_t countAndFlagsBits;
  Swift::String_optional v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  void (*v33)(_QWORD *__return_ptr, _QWORD, _QWORD);
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  __int16 v41;

  object = name._object;
  countAndFlagsBits = name._countAndFlagsBits;
  LOWORD(v34) = a2;
  v11 = SymbolVariants.shapeVariantName(name:)(name);
  if (v11.value._object)
  {
    v33 = a3;
    v34 = a4;
    v12 = Image.Location.aliasedName(_:)(v11.value._countAndFlagsBits, (uint64_t)v11.value._object);
    v14 = v13;
    swift_bridgeObjectRelease();
    v40 = a4;
    v41 = a2;
    v15 = Image.Location.fillVariant(_:name:)((unsigned __int8 *)&v41, v12, v14);
    if (v16)
    {
      v17 = v15;
      v18 = v16;
      swift_bridgeObjectRelease();
      v12 = v17;
      v14 = v18;
    }
    v19 = v12;
    a3 = v33;
    v33(&v34, v19, v14);
    result = swift_bridgeObjectRelease();
    v21 = v34;
    if (v34)
      goto LABEL_7;
  }
  v34 = a4;
  v41 = a2;
  v40 = a4;
  v22 = Image.Location.aliasedName(_:)(countAndFlagsBits, (uint64_t)object);
  v24 = Image.Location.fillVariant(_:name:)((unsigned __int8 *)&v41, v22, v23);
  v26 = v25;
  swift_bridgeObjectRelease();
  if (!v26)
    goto LABEL_8;
  a3(&v34, v24, v26);
  result = swift_bridgeObjectRelease();
  v21 = v34;
  if (v34)
  {
LABEL_7:
    v27 = v39;
    v28 = v35;
    v29 = v36;
    v30 = v37;
    v31 = v38;
    *(_QWORD *)a5 = v21;
    *(_OWORD *)(a5 + 8) = v28;
    *(_OWORD *)(a5 + 24) = v29;
    *(_OWORD *)(a5 + 40) = v30;
    *(_OWORD *)(a5 + 56) = v31;
    *(_QWORD *)(a5 + 72) = v27;
  }
  else
  {
LABEL_8:
    v34 = a4;
    v32 = Image.Location.aliasedName(_:)(countAndFlagsBits, (uint64_t)object);
    ((void (*)(uint64_t))a3)(v32);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t Image.Location.findShapeAndFillVariantName<A>(_:base:body:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void (*a4)(uint64_t, uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  uint64_t *v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t v26;
  Swift::String v27;
  Swift::String_optional v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v51)(char *, char *, uint64_t);
  char *v52;
  void (*v53)(char *, char *, uint64_t);
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t);
  uint64_t v66;
  unsigned __int8 v67[2];
  uint64_t v68;

  v64 = a5;
  v65 = a4;
  v13 = type metadata accessor for Optional();
  v58 = *(_QWORD *)(v13 - 8);
  v59 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v57 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v55 - v16;
  v18 = *(_QWORD *)(a6 - 8);
  v62 = a6;
  v63 = v18;
  MEMORY[0x24BDAC7A8](v19);
  v55 = (char *)&v55 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v55 - v22;
  v24 = *a1;
  v25 = a1[1];
  v26 = *v7;
  LOBYTE(v68) = *a1;
  BYTE1(v68) = v25;
  v60 = a2;
  v61 = (uint64_t)a3;
  v27._countAndFlagsBits = a2;
  v27._object = a3;
  v28 = SymbolVariants.shapeVariantName(name:)(v27);
  if (v28.value._object)
  {
    v56 = a7;
    v68 = v26;
    v29 = Image.Location.aliasedName(_:)(v28.value._countAndFlagsBits, (uint64_t)v28.value._object);
    v31 = v30;
    swift_bridgeObjectRelease();
    v68 = v26;
    LOBYTE(v66) = v24;
    BYTE1(v66) = v25;
    v32 = Image.Location.fillVariant(_:name:)((unsigned __int8 *)&v66, v29, v31);
    if (v33)
    {
      v34 = v32;
      v35 = v33;
      swift_bridgeObjectRelease();
      v29 = v34;
      v31 = v35;
    }
    v36 = v62;
    v37 = v63;
    v65(v29, v31);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v17, 1, v36) != 1)
    {
      v51 = *(void (**)(char *, char *, uint64_t))(v37 + 32);
      v51(v23, v17, v36);
      v52 = v56;
      v51(v56, v23, v36);
      return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v52, 0, 1, v36);
    }
    (*(void (**)(char *, uint64_t))(v58 + 8))(v17, v59);
    a7 = v56;
  }
  v68 = v26;
  v67[0] = v24;
  v67[1] = v25;
  v66 = v26;
  v39 = v60;
  v38 = v61;
  v40 = Image.Location.aliasedName(_:)(v60, v61);
  v42 = Image.Location.fillVariant(_:name:)(v67, v40, v41);
  v44 = v43;
  swift_bridgeObjectRelease();
  v45 = (void (*)(uint64_t))v65;
  if (!v44)
  {
LABEL_9:
    v68 = v26;
    v49 = Image.Location.aliasedName(_:)(v39, v38);
    v45(v49);
    return swift_bridgeObjectRelease();
  }
  v46 = v57;
  v65(v42, v44);
  swift_bridgeObjectRelease();
  v48 = v62;
  v47 = v63;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v46, 1, v62) == 1)
  {
    (*(void (**)(char *, uint64_t))(v58 + 8))(v46, v59);
    goto LABEL_9;
  }
  v53 = *(void (**)(char *, char *, uint64_t))(v47 + 32);
  v54 = v55;
  v53(v55, v46, v48);
  v53(a7, v54, v48);
  return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(a7, 0, 1, v48);
}

uint64_t specialized Image.Location.findName<A>(_:base:body:)@<X0>(Swift::String name@<0:X1, 8:X2>, __int16 a2@<W0>, void (*a3)(_QWORD *__return_ptr, _QWORD, _QWORD)@<X3>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  void *object;
  uint64_t countAndFlagsBits;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  void *v13;
  uint64_t result;
  char v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  Swift::String v24;
  Swift::String v25;

  object = name._object;
  countAndFlagsBits = name._countAndFlagsBits;
  if ((a2 & 4) != 0)
    v10 = 3;
  else
    v10 = HIBYTE(a2);
  if ((a2 & 4) != 0)
    v11 = ((a2 & 1) == 0) | a2 & 0xFB;
  else
    v11 = a2;
  if ((v11 & 2) != 0)
  {
    v18 = 0x6873616C732ELL;
    v19 = 0xE600000000000000;
    swift_bridgeObjectRetain();
    v24._countAndFlagsBits = String.init<A>(_:)();
    v24._object = v13;
    String.append<A>(contentsOf:)();
    v12 = v11 | (v10 << 8);
    specialized Image.Location.findShapeAndFillVariantName<A>(_:base:body:)(v24, v12, a3, a4, (uint64_t)&v18);
    result = swift_bridgeObjectRelease();
    if (v18)
    {
      v15 = v19;
      *(_QWORD *)a5 = v18;
      *(_BYTE *)(a5 + 8) = v15 & 1;
      v16 = v21;
      *(_OWORD *)(a5 + 16) = v20;
      *(_OWORD *)(a5 + 32) = v16;
      v17 = v23;
      *(_OWORD *)(a5 + 48) = v22;
      *(_OWORD *)(a5 + 64) = v17;
      return result;
    }
  }
  else
  {
    v12 = v11 | (v10 << 8);
  }
  v25._countAndFlagsBits = countAndFlagsBits;
  v25._object = object;
  return specialized Image.Location.findShapeAndFillVariantName<A>(_:base:body:)(v25, v12, a3, a4, a5);
}

uint64_t Image.Location.findName<A>(_:base:body:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void (*a4)(uint64_t, uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  uint64_t *v7;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  unint64_t v40;

  v15 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v29 - v18;
  v20 = *v7;
  if ((*a1 & 4) != 0)
    v21 = 3;
  else
    v21 = a1[1];
  if ((*a1 & 4) != 0)
    v22 = ((*a1 & 1) == 0) | *a1 & 0xFB;
  else
    v22 = *a1;
  if ((v22 & 2) == 0)
    goto LABEL_10;
  v30 = v17;
  v31 = v16;
  v36 = a7;
  v37 = a2;
  v39 = 0x6873616C732ELL;
  v40 = 0xE600000000000000;
  v32 = a2;
  v33 = a3;
  v38 = a3;
  v23 = v20;
  swift_bridgeObjectRetain();
  v37 = String.init<A>(_:)();
  v38 = v24;
  String.append<A>(contentsOf:)();
  v25 = v37;
  v29 = v23;
  v39 = v23;
  LOBYTE(v37) = v22;
  BYTE1(v37) = v21;
  v34 = a4;
  v35 = a5;
  Image.Location.findShapeAndFillVariantName<A>(_:base:body:)((unsigned __int8 *)&v37, v25, v38, a4, a5, a6, v19);
  swift_bridgeObjectRelease();
  v26 = *(_QWORD *)(a6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v19, 1, a6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v19, v31);
    a5 = v35;
    a7 = v36;
    a3 = v33;
    a4 = v34;
    a2 = v32;
    v20 = v29;
LABEL_10:
    v39 = v20;
    LOBYTE(v37) = v22;
    BYTE1(v37) = v21;
    return Image.Location.findShapeAndFillVariantName<A>(_:base:body:)((unsigned __int8 *)&v37, a2, a3, a4, a5, a6, a7);
  }
  v28 = v36;
  (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v36, v19, a6);
  return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v28, 0, 1, a6);
}

void one-time initialization function for systemAssetManager()
{
  void *v0;
  void *v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;

  v0 = (void *)nofill_to_fill.getter();
  v1 = (void *)name_aliases.getter();
  v2 = (void *)symbol_order.getter();
  v3 = objc_allocWithZone(MEMORY[0x24BDD1488]);
  v4 = (void *)MEMORY[0x23B7C5DAC](0xD00000000000002ELL, 0x80000002352E4460);
  v5 = objc_msgSend(v3, sel_initWithPath_, v4);

  v6 = objc_allocWithZone(MEMORY[0x24BE28C28]);
  v7 = v5;
  v8 = specialized @nonobjc CUICatalog.init(name:from:error:)(0x737465737341, 0xE600000000000000, (uint64_t)v5);

  static Image.Location.systemAssetManager = (uint64_t)v8;
  off_254269B40 = v0;
  off_254269B48 = v1;
  off_254269B50 = v2;
}

uint64_t static Image.Location.systemAssetManager.getter@<X0>(_QWORD *a1@<X8>)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  if (one-time initialization token for systemAssetManager != -1)
    swift_once();
  v2 = (void *)static Image.Location.systemAssetManager;
  v3 = off_254269B40;
  v4 = off_254269B48;
  v5 = off_254269B50;
  *a1 = static Image.Location.systemAssetManager;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  v6 = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void one-time initialization function for privateSystemAssetManager()
{
  void *v0;
  void *v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;

  v0 = (void *)private_nofill_to_fill.getter();
  v1 = (void *)private_name_aliases.getter();
  v2 = (void *)private_symbol_order.getter();
  v3 = objc_allocWithZone(MEMORY[0x24BDD1488]);
  v4 = (void *)MEMORY[0x23B7C5DAC](0xD000000000000035, 0x80000002352E4490);
  v5 = objc_msgSend(v3, sel_initWithPath_, v4);

  v6 = objc_allocWithZone(MEMORY[0x24BE28C28]);
  v7 = v5;
  v8 = specialized @nonobjc CUICatalog.init(name:from:error:)(0x737465737341, 0xE600000000000000, (uint64_t)v5);

  static Image.Location.privateSystemAssetManager = (uint64_t)v8;
  off_254266260 = v0;
  off_254266268 = v1;
  off_254266270 = v2;
}

uint64_t static Image.Location.privateSystemAssetManager.getter@<X0>(_QWORD *a1@<X8>)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  if (one-time initialization token for privateSystemAssetManager != -1)
    swift_once();
  v2 = (void *)static Image.Location.privateSystemAssetManager;
  v3 = off_254266260;
  v4 = off_254266268;
  v5 = off_254266270;
  *a1 = static Image.Location.privateSystemAssetManager;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  v6 = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void Image.Location.hash(into:)()
{
  void **v0;
  void *v1;
  Swift::UInt v2;
  id v3;

  v1 = *v0;
  if (!*v0)
  {
    v2 = 1;
    goto LABEL_5;
  }
  if (v1 == (void *)1)
  {
    v2 = 2;
LABEL_5:
    Hasher._combine(_:)(v2);
    return;
  }
  Hasher._combine(_:)(0);
  v3 = v1;
  NSObject.hash(into:)();
  outlined consume of Image.Location(v1);
}

Swift::Int Image.Location.hashValue.getter()
{
  void **v0;
  void *v1;
  Swift::UInt v2;
  id v3;

  v1 = *v0;
  Hasher.init(_seed:)();
  if (v1)
  {
    if (v1 != (void *)1)
    {
      Hasher._combine(_:)(0);
      v3 = v1;
      NSObject.hash(into:)();
      outlined consume of Image.Location(v1);
      return Hasher._finalize()();
    }
    v2 = 2;
  }
  else
  {
    v2 = 1;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Image.Location()
{
  void **v0;
  void *v1;
  Swift::UInt v2;
  id v3;

  v1 = *v0;
  Hasher.init(_seed:)();
  if (v1)
  {
    if (v1 != (void *)1)
    {
      Hasher._combine(_:)(0);
      v3 = v1;
      NSObject.hash(into:)();
      outlined consume of Image.Location(v1);
      return Hasher._finalize()();
    }
    v2 = 2;
  }
  else
  {
    v2 = 1;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Image.Location()
{
  void **v0;
  void *v1;
  Swift::UInt v2;
  id v3;

  v1 = *v0;
  if (!*v0)
  {
    v2 = 1;
    goto LABEL_5;
  }
  if (v1 == (void *)1)
  {
    v2 = 2;
LABEL_5:
    Hasher._combine(_:)(v2);
    return;
  }
  Hasher._combine(_:)(0);
  v3 = v1;
  NSObject.hash(into:)();
  outlined consume of Image.Location(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Image.Location()
{
  void **v0;
  void *v1;
  Swift::UInt v2;
  id v3;

  Hasher.init(_seed:)();
  v1 = *v0;
  if (*v0)
  {
    if (v1 != (void *)1)
    {
      Hasher._combine(_:)(0);
      v3 = v1;
      NSObject.hash(into:)();
      outlined consume of Image.Location(v1);
      return Hasher._finalize()();
    }
    v2 = 2;
  }
  else
  {
    v2 = 1;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t Image.init(_:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;

  type metadata accessor for LocalizedTextStorage();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  *(_BYTE *)(v6 + 32) = 0;
  v7 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v6 + 40) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 64) = a3;
  if (a3)
  {
    swift_bridgeObjectRetain();
    v8 = a3;
  }
  else
  {
    v9 = (void *)objc_opt_self();
    swift_bridgeObjectRetain();
    v8 = objc_msgSend(v9, sel_mainBundle);
  }
  type metadata accessor for ImageProviderBox<Image.InterpolationProvider>(0, &lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, (uint64_t)&type metadata for Image.NamedImageProvider);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  *(_DWORD *)(v10 + 32) = 0;
  *(_BYTE *)(v10 + 36) = 1;
  *(_QWORD *)(v10 + 40) = v8;
  *(_QWORD *)(v10 + 48) = 2;
  *(_QWORD *)(v10 + 56) = v6;
  *(_OWORD *)(v10 + 64) = xmmword_235260F20;
  *(_QWORD *)(v10 + 80) = v7;
  *(_BYTE *)(v10 + 88) = 0;
  v11 = a3;
  return v10;
}

uint64_t Image.init(_:bundle:label:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  id v11;
  uint64_t result;

  v11 = a3;
  if (!a3)
    v11 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  type metadata accessor for ImageProviderBox<Image.InterpolationProvider>(0, &lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, (uint64_t)&type metadata for Image.NamedImageProvider);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  *(_DWORD *)(result + 32) = 0;
  *(_BYTE *)(result + 36) = 1;
  *(_QWORD *)(result + 40) = v11;
  *(_QWORD *)(result + 48) = 2;
  *(_QWORD *)(result + 56) = a4;
  *(_QWORD *)(result + 64) = a5;
  *(_QWORD *)(result + 72) = a6 & 1;
  *(_QWORD *)(result + 80) = a7;
  *(_BYTE *)(result + 88) = 0;
  return result;
}

__n128 Image.NamedImageProvider.init(name:value:location:label:decorative:backupLocation:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t *a7@<X6>, uint64_t a8@<X8>)
{
  __n128 result;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  result = *(__n128 *)a5;
  v9 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(a8 + 40) = *(_OWORD *)a5;
  v10 = *a4;
  v11 = *a7;
  *(_QWORD *)a8 = a1;
  *(_QWORD *)(a8 + 8) = a2;
  *(_DWORD *)(a8 + 16) = a3;
  *(_BYTE *)(a8 + 20) = BYTE4(a3) & 1;
  *(_QWORD *)(a8 + 24) = v10;
  *(_QWORD *)(a8 + 32) = v11;
  *(_OWORD *)(a8 + 56) = v9;
  *(_BYTE *)(a8 + 72) = a6;
  return result;
}

double Image.init(decorative:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  uint64_t v6;
  double result;

  v3 = a3;
  if (!a3)
    v3 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  type metadata accessor for ImageProviderBox<Image.InterpolationProvider>(0, &lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, (uint64_t)&type metadata for Image.NamedImageProvider);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  *(_DWORD *)(v6 + 32) = 0;
  *(_BYTE *)(v6 + 36) = 1;
  *(_QWORD *)(v6 + 40) = v3;
  *(_QWORD *)(v6 + 48) = 2;
  *(_QWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)&result = 0x1FFFFFFFELL;
  *(_OWORD *)(v6 + 72) = xmmword_235260F10;
  *(_BYTE *)(v6 + 88) = 1;
  return result;
}

uint64_t Image.init(systemName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ImageProviderBox<Image.InterpolationProvider>(0, &lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, (uint64_t)&type metadata for Image.NamedImageProvider);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  *(_DWORD *)(v4 + 32) = 0;
  *(_BYTE *)(v4 + 36) = 1;
  *(_OWORD *)(v4 + 40) = xmmword_2352AA850;
  *(_QWORD *)(v4 + 56) = a1;
  *(_QWORD *)(v4 + 64) = a2;
  *(_OWORD *)(v4 + 72) = xmmword_235260F00;
  *(_BYTE *)(v4 + 88) = 0;
  swift_bridgeObjectRetain();
  return v4;
}

uint64_t Image.init(_internalSystemName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ImageProviderBox<Image.InterpolationProvider>(0, &lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, (uint64_t)&type metadata for Image.NamedImageProvider);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  *(_DWORD *)(v4 + 32) = 0;
  *(_BYTE *)(v4 + 36) = 1;
  *(_OWORD *)(v4 + 40) = xmmword_235260EF0;
  *(_QWORD *)(v4 + 56) = a1;
  *(_QWORD *)(v4 + 64) = a2;
  *(_OWORD *)(v4 + 72) = xmmword_235260F00;
  *(_BYTE *)(v4 + 88) = 0;
  swift_bridgeObjectRetain();
  return v4;
}

uint64_t Image.NamedImageProvider.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Image.NamedImageProvider.name.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*Image.NamedImageProvider.name.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

unint64_t Image.NamedImageProvider.value.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 16) | ((unint64_t)*(unsigned __int8 *)(v0 + 20) << 32);
}

uint64_t Image.NamedImageProvider.value.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 16) = result;
  *(_BYTE *)(v1 + 20) = BYTE4(result) & 1;
  return result;
}

uint64_t (*Image.NamedImageProvider.value.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

id Image.NamedImageProvider.location.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 24);
  *a1 = v2;
  return outlined copy of Image.Location(v2);
}

void Image.NamedImageProvider.location.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *a1;
  outlined consume of Image.Location(*(id *)(v1 + 24));
  *(_QWORD *)(v1 + 24) = v2;
}

uint64_t (*Image.NamedImageProvider.location.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

id Image.NamedImageProvider.backupLocation.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 32);
  *a1 = v2;
  return outlined copy of Image.Location?(v2);
}

void Image.NamedImageProvider.backupLocation.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *a1;
  outlined consume of Image.Location?(*(id *)(v1 + 32));
  *(_QWORD *)(v1 + 32) = v2;
}

uint64_t (*Image.NamedImageProvider.backupLocation.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t Image.NamedImageProvider.label.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v1[5];
  v3 = v1[6];
  v4 = v1[7];
  v5 = v1[8];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of AccessibilityImageLabel?(v2, v3, v4);
}

__n128 Image.NamedImageProvider.label.setter(__n128 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  __n128 v5;

  v5 = *a1;
  v2 = a1[1].n128_i64[0];
  v3 = a1[1].n128_i64[1];
  outlined consume of AccessibilityImageLabel?(v1[5], v1[6], v1[7]);
  result = v5;
  *(__n128 *)(v1 + 5) = v5;
  v1[7] = v2;
  v1[8] = v3;
  return result;
}

uint64_t (*Image.NamedImageProvider.label.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t Image.NamedImageProvider.decorative.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 72);
}

uint64_t Image.NamedImageProvider.decorative.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 72) = result;
  return result;
}

uint64_t (*Image.NamedImageProvider.decorative.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void Image.NamedImageProvider.resolve(in:)(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  id v14;
  int v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  char v30;
  uint64_t *v31;
  void *v32;
  id v33;
  uint64_t v34;
  void *v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t *v51;
  __int128 v52;
  unsigned __int8 v53;
  __int128 v54;
  void *v55;
  void *v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  void *v62;
  __int128 v63;
  int v64;
  unsigned __int8 v65;
  void *v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;

  v51 = a1;
  v50 = a2;
  v3 = type metadata accessor for NamedImage.BitmapKey(0);
  MEMORY[0x24BDAC7A8](v3);
  v46 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = *(_OWORD *)v2;
  v5 = *(unsigned int *)(v2 + 16);
  v6 = *(unsigned __int8 *)(v2 + 20);
  v7 = *(void **)(v2 + 24);
  v8 = *(void **)(v2 + 32);
  v10 = *(_QWORD *)(v2 + 40);
  v9 = *(_QWORD *)(v2 + 48);
  v11 = *(_QWORD *)(v2 + 56);
  v12 = *(_QWORD *)(v2 + 64);
  v13 = *(unsigned __int8 *)(v2 + 72);
  *(_QWORD *)&v54 = v7;
  v14 = Image.Location.catalog.getter();
  if (!v14)
  {
    v54 = v52;
    LODWORD(v55) = v5;
    BYTE4(v55) = v6;
    v56 = v7;
    *(_QWORD *)&v57 = v8;
    *((_QWORD *)&v57 + 1) = v10;
    v58 = v9;
    v59 = v11;
    v60 = v12;
    v61 = v13;
    Image.NamedImageProvider.resolveError(in:)(v50);
    return;
  }
  v63 = v52;
  v64 = v5;
  v65 = v6;
  v66 = v7;
  v67 = v8;
  v47 = v10;
  v68 = v10;
  v69 = v9;
  v48 = v9;
  v70 = v11;
  v71 = v12;
  v72 = v13;
  v62 = v7;
  v15 = v13;
  v49 = v8;
  v16 = v14;
  outlined copy of Image.Location(v7);
  Image.NamedImageProvider.vectorInfo(in:from:at:)(v51, (uint64_t *)&v62, &v54);
  outlined consume of Image.Location(v7);
  v17 = (void *)v54;
  if ((_QWORD)v54)
  {
    v63 = v52;
    v64 = v5;
    v65 = v6;
    v66 = v7;
    v67 = v49;
    v68 = v47;
    v69 = v48;
    v70 = v11;
    v71 = v12;
    v72 = v15;
    BYTE8(v54) &= 1u;
    v62 = v7;
    outlined copy of Image.Location(v7);
    v53 = v6;
    Image.NamedImageProvider.resolveVector(info:value:in:at:)((uint64_t)&v54, v5 | ((unint64_t)v6 << 32), (uint64_t)v51, &v62, v50);

    outlined consume of Image.Location(v7);
    return;
  }
  v41 = v11;
  v42 = v12;
  v43 = v15;
  v44 = v6;
  v45 = v5;
  v40 = v16;
  v18 = v49;
  v19 = v48;
  v20 = (uint64_t)v46;
  v21 = v47;
  v22 = *((_QWORD *)&v52 + 1);
  v23 = v52;
  if (v49 == (id)2)
  {
LABEL_10:
    if ((unint64_t)v7 < 2)
      goto LABEL_17;
    goto LABEL_11;
  }
  *(_QWORD *)&v54 = v49;
  outlined copy of Image.Location(v49);
  v24 = Image.Location.catalog.getter();
  if (!v24)
  {
    outlined consume of Image.Location?(v18);
    goto LABEL_10;
  }
  *(_QWORD *)&v63 = v23;
  *((_QWORD *)&v63 + 1) = v22;
  v25 = v45;
  v64 = v45;
  v26 = v44;
  v65 = v44;
  v66 = v7;
  v67 = v18;
  v68 = v21;
  v69 = v19;
  v27 = v41;
  v28 = v18;
  v29 = v42;
  v70 = v41;
  v71 = v42;
  v30 = v43;
  v72 = v43;
  v62 = v28;
  v31 = v51;
  v39 = v24;
  Image.NamedImageProvider.vectorInfo(in:from:at:)(v51, (uint64_t *)&v62, &v54);
  v32 = (void *)v54;
  if ((_QWORD)v54)
  {
    *(_QWORD *)&v63 = v23;
    *((_QWORD *)&v63 + 1) = *((_QWORD *)&v52 + 1);
    v64 = v25;
    v65 = v26;
    v33 = v49;
    v66 = v7;
    v67 = v49;
    v68 = v47;
    v69 = v48;
    v70 = v27;
    v71 = v29;
    v72 = v30;
    BYTE8(v54) &= 1u;
    v53 = v26;
    v62 = v49;
    Image.NamedImageProvider.resolveVector(info:value:in:at:)((uint64_t)&v54, v25 | ((unint64_t)v26 << 32), (uint64_t)v31, &v62, v50);

    outlined consume of Image.Location?(v33);
    return;
  }

  v18 = v49;
  outlined consume of Image.Location?(v49);
  v19 = v48;
  v20 = (uint64_t)v46;
  v21 = v47;
  v22 = *((_QWORD *)&v52 + 1);
  if ((unint64_t)v7 < 2)
    goto LABEL_17;
LABEL_11:
  *(_QWORD *)&v63 = v7;
  v34 = v51[1];
  *(_QWORD *)&v54 = *v51;
  *((_QWORD *)&v54 + 1) = v34;
  outlined copy of Image.Location(v7);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  NamedImage.BitmapKey.init(name:location:in:)(v23, v22, (uint64_t *)&v63, (uint64_t *)&v54, v20);
  if (one-time initialization token for sharedCache != -1)
    swift_once();
  v35 = *(void **)(v20 + 32);
  v63 = static NamedImage.sharedCache;
  v62 = v35;
  NamedImage.Cache.subscript.getter(v20, &v62, (uint64_t)&v54);
  v36 = v58;
  if (v58 != 3)
  {
    v39 = v56;
    v49 = v55;
    v46 = (char *)*((_QWORD *)&v54 + 1);
    *(_QWORD *)&v52 = v54;
    *(_QWORD *)&v63 = v23;
    *((_QWORD *)&v63 + 1) = v22;
    v64 = v45;
    v65 = v44;
    v66 = v7;
    v67 = v18;
    v68 = v21;
    v69 = v19;
    v70 = v41;
    v71 = v42;
    v72 = v43;
    v37 = v57;
    Image.NamedImageProvider.resolveBitmap(key:info:in:)(v20, (uint64_t)&v54, v51, v50);

    outlined destroy of TypesettingConfiguration(v20, type metadata accessor for NamedImage.BitmapKey);
    outlined consume of NamedImage.BitmapInfo?((void *)v52, (char)v46, (uint64_t)v49, (uint64_t)v39, v37, *((uint64_t *)&v37 + 1), v36);
    return;
  }
  outlined destroy of TypesettingConfiguration(v20, type metadata accessor for NamedImage.BitmapKey);
LABEL_17:
  *(_QWORD *)&v54 = v23;
  *((_QWORD *)&v54 + 1) = v22;
  LODWORD(v55) = v45;
  BYTE4(v55) = v44;
  v56 = v7;
  *(_QWORD *)&v57 = v18;
  *((_QWORD *)&v57 + 1) = v21;
  v58 = v19;
  v59 = v41;
  v60 = v42;
  v61 = v43;
  swift_retain();
  swift_retain();
  Image.NamedImageProvider.resolveError(in:)(v50);
  swift_release();
  swift_release();

}

uint64_t Image.NamedImageProvider.resolveError(in:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  Swift::String v10;
  Swift::String v11;
  id v12;
  void *v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v4 = *(_QWORD *)v1;
  v3 = *(void **)(v1 + 8);
  v5 = *(void **)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 48);
  v21 = *(_QWORD *)(v1 + 40);
  v7 = *(_QWORD *)(v1 + 56);
  v8 = *(_QWORD *)(v1 + 64);
  v9 = *(_BYTE *)(v1 + 72);
  if ((unint64_t)v5 >= 2)
  {
    v12 = objc_msgSend(v5, sel_bundlePath);
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v20 = v9;
    v14 = v13;

    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v15._countAndFlagsBits = v4;
    v15._object = v3;
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._countAndFlagsBits = 0xD00000000000001DLL;
    v16._object = (void *)0x80000002352E4400;
    String.append(_:)(v16);
    v17._countAndFlagsBits = v19;
    v17._object = v14;
    String.append(_:)(v17);
    v9 = v20;
    swift_bridgeObjectRelease();
    specialized static Log.externalWarning(_:)(0xD000000000000010, 0x80000002352E43E0);
    swift_bridgeObjectRelease();
    outlined consume of Image.Location(v5);
  }
  else
  {
    _StringGuts.grow(_:)(47);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v10._countAndFlagsBits = v4;
    v10._object = v3;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._countAndFlagsBits = 0xD00000000000001CLL;
    v11._object = (void *)0x80000002352E43C0;
    String.append(_:)(v11);
    specialized static Log.externalWarning(_:)(0xD000000000000011, 0x80000002352E43A0);
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = -1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 52) = 0;
  *(_QWORD *)(a1 + 44) = 0;
  *(_BYTE *)(a1 + 60) = 1;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 50397442;
  *(_QWORD *)(a1 + 104) = v21;
  *(_QWORD *)(a1 + 112) = v6;
  *(_QWORD *)(a1 + 120) = v7;
  *(_QWORD *)(a1 + 128) = v8;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 152) = v9;
  *(_BYTE *)(a1 + 153) = 3;
  *(_DWORD *)(a1 + 156) = 0;
  *(_BYTE *)(a1 + 160) = 1;
  *(_QWORD *)(a1 + 168) = 0;
  *(_WORD *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 178) = 0;
  return outlined copy of AccessibilityImageLabel?(v21, v6, v7);
}

void Image.NamedImageProvider.vectorInfo(in:from:at:)(uint64_t *a1@<X0>, uint64_t *a2@<X2>, _OWORD *a3@<X8>)
{
  __int128 *v3;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  __int16 v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  void *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  id v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  void *v35;
  uint64_t v36[10];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _OWORD v45[2];
  Swift::String v46;

  v6 = *a2;
  v7 = v3[3];
  v44 = v3[2];
  v45[0] = v7;
  *(_OWORD *)((char *)v45 + 9) = *(__int128 *)((char *)v3 + 57);
  v8 = v3[1];
  v42 = *v3;
  v43 = v8;
  v9 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v9, &v37);
    swift_release_n();
    v10 = swift_release_n();
    v11 = v37;
    v12 = BYTE1(v37);
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolVariantsKey>, (uint64_t)&type metadata for SymbolVariantsKey, (uint64_t)&protocol witness table for SymbolVariantsKey);
    BloomFilter.init(hashValue:)(v13);
    v14 = swift_retain_n();
    v15 = specialized find1<A>(_:key:filter:)(v14, v37);
    if (v15)
    {
      v11 = *(unsigned __int8 *)(v15 + 72);
      v12 = *(unsigned __int8 *)(v15 + 73);
    }
    else
    {
      v11 = 0;
      v12 = 3;
    }
    v10 = swift_release_n();
  }
  MEMORY[0x24BDAC7A8](v10);
  specialized Image.Location.findName<A>(_:base:body:)(v46, v11 | (v12 << 8), (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD))partial apply for closure #1 in Image.NamedImageProvider.vectorInfo(in:from:at:), v6, (uint64_t)&v37);
  v16 = v37;
  v17 = v38;
  v18 = v39;
  v19 = v40;
  v20 = v41;
  v21 = (void *)v37;
  if (!(_QWORD)v37)
    goto LABEL_17;
  v30 = v41;
  v31 = v40;
  v32 = v39;
  v33 = v38;
  v34 = v37;
  v22 = *a1;
  if (!a1[1])
  {
    v36[0] = *a1;
    v36[1] = 0;
    swift_retain_n();
    if ((specialized static ShouldRedactContentKey.value(in:)(v36, v24, v25, v26) & 1) != 0)
    {
      v27 = swift_retain_n();
      v28 = specialized closure #1 in PropertyList.subscript.getter(v27);
      swift_release_n();
      v17 = v33;
      v16 = v34;
      v19 = v31;
      v18 = v32;
      v20 = v30;
      if ((v28 & 1) == 0)
        goto LABEL_13;
    }
    else
    {
      swift_release_n();
      v17 = v33;
      v16 = v34;
      v19 = v31;
      v18 = v32;
      v20 = v30;
    }
LABEL_17:
    *a3 = v16;
    a3[1] = v17;
    a3[2] = v18;
    a3[3] = v19;
    a3[4] = v20;
    return;
  }
  swift_retain_n();
  swift_retain_n();
  v23 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v22);
  swift_release_n();
  swift_release_n();
  v17 = v33;
  v16 = v34;
  v19 = v31;
  v18 = v32;
  v20 = v30;
  if ((v23 & 1) == 0)
    goto LABEL_17;
LABEL_13:
  if (one-time initialization token for systemAssetManager != -1)
    swift_once();
  v35 = 0;
  v29 = (id)static Image.Location.systemAssetManager;
  Image.NamedImageProvider.vectorInfo(name:in:from:at:)(0x662E656C63726963, (void *)0xEB000000006C6C69, a1, (uint64_t)v29, &v35, a3);

}

void Image.NamedImageProvider.resolveVector(info:value:in:at:)(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, void **a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  void *v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t (*v21)(_QWORD);
  id v22;
  id v23;
  char v24;
  int v25;
  double v26;
  double v27;
  void *v28;
  uint64_t v29;
  int v30;
  int v31;
  Swift::Int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  char v37;
  char v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  double v44;
  double v45;
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  id v55;
  char v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  float v67;
  int v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  int v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  int v83;
  int v84;
  __int128 v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  double v91;
  uint64_t v92;
  unsigned __int8 v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  uint64_t v98;
  double v99;
  double v100;
  double v101;
  char v102;
  __int128 v103;
  char v104;
  __int128 v105;
  __int128 v106;
  int v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  double v113;
  double v114;

  v11 = type metadata accessor for ImageResolutionContext();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (uint64_t *)((char *)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = *(void **)a1;
  v15 = *(_BYTE *)(a1 + 8);
  v16 = *(_OWORD *)(a1 + 16);
  v81 = *(_OWORD *)(a1 + 32);
  v82 = v16;
  v80 = *(_OWORD *)(a1 + 48);
  v17 = *(_QWORD *)(a1 + 64);
  v18 = *(_QWORD *)(a1 + 72);
  v19 = *a4;
  *(_QWORD *)&v89 = *(_QWORD *)(v5 + 40);
  *(_QWORD *)&v88 = *(_QWORD *)(v5 + 48);
  v20 = *(_QWORD *)(v5 + 56);
  v86 = *(_QWORD *)(v5 + 64);
  *(_QWORD *)&v87 = v20;
  v79 = *(unsigned __int8 *)(v5 + 72);
  outlined init with copy of TypesettingLanguage(a3, (uint64_t)v13, v21);
  *(_QWORD *)&v108 = v19;
  v22 = v14;
  outlined copy of Image.Location(v19);
  ResolvedVectorGlyph.init(glyph:value:flipsRightToLeft:in:at:)(v22, a2 | ((HIDWORD(a2) & 1) << 32), v15, v13, (uint64_t *)&v108, (uint64_t)&v97);
  v23 = v97;
  v24 = v98;
  v91 = v99;
  v25 = LODWORD(v100);
  LODWORD(v19) = BYTE4(v100);
  v83 = BYTE5(v100);
  objc_msgSend(v97, sel_alignmentRect);
  v113 = v26;
  v114 = v27;
  v108 = v82;
  v109 = v81;
  v110 = v80;
  v111 = v17;
  v112 = v18;
  v28 = *(void **)a3;
  v29 = *(_QWORD *)(a3 + 8);
  v84 = (int)v19;
  LODWORD(v85) = v25;
  if (v29)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)((uint64_t)v28, &v97);
    swift_release_n();
    swift_release_n();
    v30 = v97;
    v31 = BYTE1(v97);
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolVariantsKey>, (uint64_t)&type metadata for SymbolVariantsKey, (uint64_t)&protocol witness table for SymbolVariantsKey);
    BloomFilter.init(hashValue:)(v32);
    v33 = (uint64_t)v97;
    v34 = swift_retain_n();
    v35 = specialized find1<A>(_:key:filter:)(v34, v33);
    if (v35)
    {
      v30 = *(unsigned __int8 *)(v35 + 72);
      v31 = *(unsigned __int8 *)(v35 + 73);
    }
    else
    {
      v30 = 0;
      v31 = 3;
    }
    swift_release_n();
  }
  if (one-time initialization token for background != -1)
    swift_once();
  v90 = a5;
  if ((static SymbolVariants.background & ~v30) != 0)
  {
    *(_QWORD *)&v82 = 0;
    LODWORD(v81) = 3;
    v36 = 1;
LABEL_20:
    LODWORD(v80) = v36;
    goto LABEL_21;
  }
  if (HIBYTE(static SymbolVariants.background) == 3)
  {
    if (v31 == 3)
      v31 = 1;
    goto LABEL_16;
  }
  if (v31 != 3 && v31 == HIBYTE(static SymbolVariants.background))
  {
LABEL_16:
    LODWORD(v81) = v31;
    if (v29)
    {
      swift_retain_n();
      swift_retain_n();
      v37 = specialized PropertyList.Tracker.value<A>(_:for:)((uint64_t)v28);
      swift_release_n();
      swift_release_n();
      LOBYTE(v97) = v31;
      Image.LayoutMetrics.adjustForBackground(glyph:shape:size:growsToFitBackground:)(v22, (unsigned __int8 *)&v97, &v113, v37 & 1);
      swift_retain_n();
      swift_retain_n();
      *(_QWORD *)&v82 = specialized PropertyList.Tracker.value<A>(_:for:)((uint64_t)v28);
      v39 = v38;
      swift_release_n();
    }
    else
    {
      v40 = swift_retain_n();
      v41 = specialized closure #1 in PropertyList.subscript.getter(v40);
      swift_release_n();
      LOBYTE(v97) = v31;
      Image.LayoutMetrics.adjustForBackground(glyph:shape:size:growsToFitBackground:)(v22, (unsigned __int8 *)&v97, &v113, v41 & 1);
      v42 = swift_retain_n();
      *(_QWORD *)&v82 = specialized closure #1 in PropertyList.subscript.getter(v42, (uint64_t)&v92);
      v39 = v43;
    }
    swift_release_n();
    v36 = v39 & 1;
    goto LABEL_20;
  }
  LODWORD(v80) = 1;
  *(_QWORD *)&v82 = 0;
  LODWORD(v81) = 3;
LABEL_21:
  objc_msgSend(v22, sel_scale);
  v45 = v44;
  v46 = swift_allocObject();
  *(_QWORD *)(v46 + 16) = v23;
  *(_BYTE *)(v46 + 24) = v24;
  v47 = v91;
  *(double *)(v46 + 32) = v91;
  *(_DWORD *)(v46 + 40) = v85;
  *(_BYTE *)(v46 + 44) = v84;
  *(_BYTE *)(v46 + 45) = v83;
  v48 = v45 * v113;
  v49 = v45 * v114;
  v97 = (id)v46;
  LOBYTE(v98) = 2;
  v99 = v45;
  v100 = v45 * v113;
  v101 = v45 * v114;
  v102 = 0;
  __asm { FMOV            V0.4S, #1.0 }
  v85 = _Q0;
  v103 = _Q0;
  v104 = 0;
  v105 = 0u;
  v106 = 0u;
  v107 = 50397442;
  v55 = v23;
  outlined copy of Image.Location(*(id *)&v47);
  ImageResolutionContext.effectiveAllowedDynamicRange(for:)((uint64_t)&v97, (unsigned __int8 *)&v94);
  v56 = v94;
  if (!v29)
  {
    v97 = v28;
    v98 = 0;
    swift_retain_n();
    if ((specialized static ShouldRedactContentKey.value(in:)((uint64_t *)&v97, v59, v60, v61) & 1) != 0)
    {
      v62 = swift_retain_n();
      v63 = specialized closure #1 in PropertyList.subscript.getter(v62);
      swift_release_n();
      if ((v63 & 1) == 0)
        goto LABEL_26;
    }
    else
    {
      swift_release_n();
    }
    v57 = 2;
LABEL_31:
    v64 = v46;
    goto LABEL_32;
  }
  v57 = 2;
  swift_retain_n();
  swift_retain_n();
  v58 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)((uint64_t)v28);
  swift_release_n();
  swift_release_n();
  if ((v58 & 1) == 0)
    goto LABEL_31;
LABEL_26:
  v64 = swift_allocObject();
  v65 = one-time initialization token for foreground;
  swift_retain();
  swift_retain();
  if (v65 != -1)
    swift_once();
  v97 = v28;
  v98 = v29;
  *(float *)(v64 + 16) = (*(float (**)(id *))(*(_QWORD *)static Color.foreground + 104))(&v97);
  *(_DWORD *)(v64 + 20) = v66;
  *(_DWORD *)(v64 + 24) = v68;
  *(float *)(v64 + 28) = v67 * 0.16;
  swift_release();
  swift_release();
  swift_release();
  v57 = 4;
LABEL_32:
  v69 = v79;
  v97 = (id)v64;
  LOBYTE(v98) = v57;
  v99 = v45;
  v100 = v48;
  v101 = v49;
  v102 = 0;
  v103 = v85;
  v104 = 0;
  v105 = 0u;
  v106 = 0u;
  LOWORD(v107) = 258;
  BYTE2(v107) = 1;
  HIBYTE(v107) = v56;
  v70 = v89;
  v71 = v88;
  *(_QWORD *)&v94 = v89;
  *((_QWORD *)&v94 + 1) = v88;
  v72 = v87;
  v95 = v87;
  v96 = v86;
  v93 = v81;
  outlined copy of GraphicsImage.Contents?((id)v64, v57);
  outlined copy of AccessibilityImageLabel?(v70, v71, v72);
  v73 = v90;
  Image.Resolved.init(image:decorative:label:basePlatformItemImage:backgroundShape:backgroundCornerRadius:)((uint64_t *)&v97, v69, &v94, 0, &v93, *(double *)&v82, v80, v90);
  v88 = v109;
  v89 = v108;
  v87 = v110;
  v74 = v111;
  v75 = v112;
  swift_release();
  v76 = swift_allocObject();
  v77 = v88;
  *(_OWORD *)(v76 + 16) = v89;
  *(_OWORD *)(v76 + 32) = v77;
  *(_OWORD *)(v76 + 48) = v87;
  *(_QWORD *)(v76 + 64) = v74;
  *(_QWORD *)(v76 + 72) = v75;

  outlined consume of Image.Location(*(id *)&v91);
  outlined consume of GraphicsImage.Contents?((void *)v64, v57);
  *(_QWORD *)(v73 + 144) = v76;
}

void Image.NamedImageProvider.resolveBitmap(key:info:in:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  void *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  float v27;
  int v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  __int16 v60;
  char v61;

  v7 = *(void **)a2;
  v8 = *(_BYTE *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a2 + 40);
  v12 = *(_BYTE *)(a2 + 48);
  v40 = *(_QWORD *)(a2 + 64);
  v41 = *(_QWORD *)(a2 + 56);
  v38 = *(_QWORD *)(a2 + 80);
  v39 = *(_QWORD *)(a2 + 72);
  v36 = *(_BYTE *)(a2 + 24);
  v37 = *(_BYTE *)(a2 + 88);
  v32 = *(_QWORD *)(v4 + 48);
  v33 = *(_QWORD *)(v4 + 40);
  v30 = *(_QWORD *)(v4 + 64);
  v31 = *(_QWORD *)(v4 + 56);
  v34 = *(_BYTE *)(v4 + 72);
  v14 = *a3;
  v13 = a3[1];
  v46 = *a3;
  v47 = v13;
  LOBYTE(v43) = v12;
  v15 = EnvironmentValues.imageIsTemplate(renderingMode:)((unsigned __int8 *)&v43);
  if ((*((_BYTE *)a3 + *(int *)(type metadata accessor for ImageResolutionContext() + 40)) & 4) != 0)
  {
    type metadata accessor for NamedImage.Key(0);
    v7 = (void *)swift_allocBox();
    outlined init with copy of TypesettingLanguage(a1, v16, type metadata accessor for NamedImage.BitmapKey);
    swift_storeEnumTagMultiPayload();
    v8 = 5;
  }
  else
  {
    outlined copy of GraphicsImage.Contents(v7, v8);
  }
  v46 = (uint64_t)v7;
  if ((v15 & 1) != 0)
    v17 = 0x3F8000003F800000;
  else
    v17 = 0;
  LOBYTE(v47) = v8;
  v18 = v15 ^ 1;
  v48 = v9;
  v49 = v10;
  v50 = v11;
  v51 = v36;
  v52 = v17;
  v53 = v17;
  v54 = (v15 ^ 1) & 1;
  v55 = v41;
  v56 = v40;
  v57 = v39;
  v58 = v38;
  v59 = v37;
  v60 = 257;
  v61 = 3;
  outlined copy of GraphicsImage.Contents?(v7, v8);
  ImageResolutionContext.effectiveAllowedDynamicRange(for:)((uint64_t)&v46, (unsigned __int8 *)&v43);
  v29 = v43;
  if (v13)
  {
    swift_retain_n();
    swift_retain_n();
    v19 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v14);
    swift_release_n();
    swift_release_n();
  }
  else
  {
    v46 = v14;
    v47 = 0;
    swift_retain();
    v19 = specialized static ShouldRedactContentKey.value(in:)(&v46, v20, v21, v22);
    swift_release();
  }
  v23 = v8;
  v24 = (uint64_t)v7;
  if ((v19 & 1) != 0)
  {
    v24 = swift_allocObject();
    v25 = one-time initialization token for foreground;
    swift_retain();
    swift_retain();
    if (v25 != -1)
      swift_once();
    v46 = v14;
    v47 = v13;
    *(float *)(v24 + 16) = (*(float (**)(uint64_t *))(*(_QWORD *)static Color.foreground + 104))(&v46);
    *(_DWORD *)(v24 + 20) = v26;
    *(_DWORD *)(v24 + 24) = v28;
    *(float *)(v24 + 28) = v27 * 0.16;
    outlined consume of GraphicsImage.Contents?(v7, v8);
    swift_release();
    swift_release();
    v23 = 4;
  }
  v46 = v24;
  LOBYTE(v47) = v23;
  v48 = v9;
  v49 = v10;
  v50 = v11;
  v51 = v36;
  v52 = v17;
  v53 = v17;
  v54 = v18 & 1;
  v55 = v41;
  v56 = v40;
  v57 = v39;
  v58 = v38;
  v59 = v37;
  v60 = 257;
  v61 = v29;
  *(_QWORD *)&v43 = v33;
  *((_QWORD *)&v43 + 1) = v32;
  v44 = v31;
  v45 = v30;
  v42 = 3;
  outlined copy of GraphicsImage.Contents?((id)v24, v23);
  outlined copy of AccessibilityImageLabel?(v33, v32, v31);
  Image.Resolved.init(image:decorative:label:basePlatformItemImage:backgroundShape:backgroundCornerRadius:)(&v46, v34, &v43, 0, &v42, 0.0, 1, a4);
  outlined consume of GraphicsImage.Contents?(v7, v8);
  outlined consume of GraphicsImage.Contents?((void *)v24, v23);
}

id Image.NamedImageProvider.resolveNamedImage(in:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  int v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  id result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39[2];
  _QWORD v40[2];
  int v41;
  char v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  _BYTE v60[192];

  v5 = *(unsigned int *)(v2 + 16);
  v6 = *(unsigned __int8 *)(v2 + 20);
  v7 = *(void **)(v2 + 24);
  v8 = *(_QWORD *)(v2 + 32);
  v9 = *(_QWORD *)(v2 + 40);
  v10 = *(_QWORD *)(v2 + 48);
  v11 = *(_QWORD *)(v2 + 56);
  v12 = *(_QWORD *)(v2 + 64);
  v13 = *(_BYTE *)(v2 + 72);
  v36 = *(_QWORD *)v2;
  v37 = *(_QWORD *)(v2 + 8);
  v50 = *(void **)v2;
  v51 = v37;
  v35 = v5;
  LODWORD(v52) = v5;
  v34 = v6;
  BYTE4(v52) = v6;
  v53 = (uint64_t)v7;
  v54 = v8;
  v55 = v9;
  v56 = v10;
  v57 = v11;
  v58 = v12;
  v59 = v13;
  Image.NamedImageProvider.resolve(in:)(a1, (uint64_t)v60);
  result = (id)outlined release of Image.Resolved((uint64_t)v60);
  if (v60[8] == 255)
  {
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
  }
  else
  {
    v29 = v13;
    v31 = v12;
    v33 = v11;
    v15 = *a1;
    v16 = a1[1];
    v17 = *((unsigned __int8 *)a1 + *(int *)(type metadata accessor for ImageResolutionContext() + 32));
    if ((_DWORD)v17 == 8)
    {
      if (v16)
      {
        swift_retain_n();
        swift_retain_n();
        specialized PropertyList.Tracker.value<A>(_:for:)(v15, (char *)&v50);
        swift_release_n();
        swift_release_n();
        v17 = v50;
      }
      else
      {
        type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolRenderingModeKey>, (uint64_t)&type metadata for SymbolRenderingModeKey, (uint64_t)&protocol witness table for SymbolRenderingModeKey);
        BloomFilter.init(hashValue:)(v18);
        v19 = swift_retain_n();
        v20 = specialized find1<A>(_:key:filter:)(v19, (uint64_t)v50);
        if (v20)
          v17 = *(unsigned __int8 *)(v20 + 72);
        else
          v17 = 8;
        swift_release_n();
      }
    }
    else
    {
      swift_retain();
      swift_retain();
    }
    v40[0] = v36;
    v40[1] = v37;
    v41 = v35;
    v42 = v34;
    v43 = v7;
    v44 = v8;
    v45 = v9;
    v46 = v10;
    v47 = v33;
    v48 = v31;
    v49 = v29;
    v39[0] = v15;
    v39[1] = v16;
    v38 = v7;
    Image.NamedImageProvider.bitmapInfo(in:from:)(v39, &v38, (uint64_t)&v50);
    v21 = v56;
    if (v56 == 3)
    {
      v22 = 0;
    }
    else
    {
      v32 = v55;
      v30 = v54;
      v23 = v52;
      v28 = v53;
      v24 = v50;
      v25 = v51;
      v50 = (void *)v15;
      v51 = v16;
      LOBYTE(v40[0]) = v56;
      v26 = EnvironmentValues.imageIsTemplate(renderingMode:)((unsigned __int8 *)v40);
      outlined consume of NamedImage.BitmapInfo?(v24, v25, v23, v28, v30, v32, v21);
      v22 = 0x1000000000000;
      if ((v26 & 1) == 0)
        v22 = 0;
    }
    v27 = 0x100000000;
    if (!v34)
      v27 = 0;
    *(_QWORD *)a2 = v36;
    *(_QWORD *)(a2 + 8) = v37;
    *(_QWORD *)(a2 + 16) = v7;
    *(_QWORD *)(a2 + 24) = v22 | v27 | v35 | (v17 << 40);
    *(_QWORD *)(a2 + 32) = v15;
    *(_QWORD *)(a2 + 40) = v16;
    swift_bridgeObjectRetain();
    return outlined copy of Image.Location(v7);
  }
  return result;
}

uint64_t Image.NamedImageProvider.bitmapInfo(in:from:)@<X0>(uint64_t *a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;
  __int128 v17;
  void *v18;

  v7 = type metadata accessor for NamedImage.BitmapKey(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a1;
  v11 = *a2;
  v13 = *v3;
  v12 = v3[1];
  *((_QWORD *)&v17 + 1) = a1[1];
  v18 = v11;
  *(_QWORD *)&v17 = v10;
  swift_bridgeObjectRetain();
  outlined copy of Image.Location(v11);
  swift_retain();
  swift_retain();
  NamedImage.BitmapKey.init(name:location:in:)(v13, v12, (uint64_t *)&v18, (uint64_t *)&v17, (uint64_t)v9);
  if (one-time initialization token for sharedCache != -1)
    swift_once();
  v14 = (void *)*((_QWORD *)v9 + 4);
  v17 = static NamedImage.sharedCache;
  v18 = v14;
  NamedImage.Cache.subscript.getter((uint64_t)v9, &v18, a3);
  return outlined destroy of TypesettingConfiguration((uint64_t)v9, type metadata accessor for NamedImage.BitmapKey);
}

uint64_t Image.init(systemName:variableValue:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  float v6;
  char v7;
  float v8;
  uint64_t v9;

  v7 = a4 & 1;
  if ((a4 & 1) != 0)
  {
    v8 = 0.0;
  }
  else
  {
    v6 = *(double *)&a3;
    v8 = v6;
  }
  type metadata accessor for ImageProviderBox<Image.InterpolationProvider>(0, &lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, (uint64_t)&type metadata for Image.NamedImageProvider);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  *(float *)(v9 + 32) = v8;
  *(_BYTE *)(v9 + 36) = v7;
  *(_OWORD *)(v9 + 40) = xmmword_2352AA850;
  *(_QWORD *)(v9 + 56) = a1;
  *(_QWORD *)(v9 + 64) = a2;
  *(_OWORD *)(v9 + 72) = xmmword_235260F00;
  *(_BYTE *)(v9 + 88) = 0;
  swift_bridgeObjectRetain();
  return v9;
}

uint64_t Image.init(_internalSystemName:variableValue:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  float v6;
  char v7;
  float v8;
  uint64_t v9;

  v7 = a4 & 1;
  if ((a4 & 1) != 0)
  {
    v8 = 0.0;
  }
  else
  {
    v6 = *(double *)&a3;
    v8 = v6;
  }
  type metadata accessor for ImageProviderBox<Image.InterpolationProvider>(0, &lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, (uint64_t)&type metadata for Image.NamedImageProvider);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  *(float *)(v9 + 32) = v8;
  *(_BYTE *)(v9 + 36) = v7;
  *(_OWORD *)(v9 + 40) = xmmword_235260EF0;
  *(_QWORD *)(v9 + 56) = a1;
  *(_QWORD *)(v9 + 64) = a2;
  *(_OWORD *)(v9 + 72) = xmmword_235260F00;
  *(_BYTE *)(v9 + 88) = 0;
  swift_bridgeObjectRetain();
  return v9;
}

uint64_t Image.init(_:variableValue:bundle:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  char v9;
  uint64_t v10;
  uint64_t v11;
  id v12;

  v9 = a4 & 1;
  type metadata accessor for LocalizedTextStorage();
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  *(_BYTE *)(v10 + 32) = 0;
  v11 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v10 + 40) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v10 + 48) = 0;
  *(_QWORD *)(v10 + 56) = 0;
  *(_QWORD *)(v10 + 64) = a5;
  v12 = a5;
  swift_bridgeObjectRetain();
  return specialized Image.init(_:variableValue:bundle:label:)(a1, a2, a3, v9, a5, v10, 0, 1, v11);
}

uint64_t Image.init(_:variableValue:bundle:label:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9)
{
  return specialized Image.init(_:variableValue:bundle:label:)(a1, a2, a3, a4 & 1, a5, a6, a7, a8 & 1, a9);
}

double Image.init(decorative:variableValue:bundle:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  id v5;
  float v10;
  int v11;
  float v12;
  uint64_t v13;
  double result;

  v5 = a5;
  if (!a5)
    v5 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v11 = a4 & 1;
  if (v11)
  {
    v12 = 0.0;
  }
  else
  {
    v10 = *(double *)&a3;
    v12 = v10;
  }
  type metadata accessor for ImageProviderBox<Image.InterpolationProvider>(0, &lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, (uint64_t)&type metadata for Image.NamedImageProvider);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a1;
  *(_QWORD *)(v13 + 24) = a2;
  *(float *)(v13 + 32) = v12;
  *(_BYTE *)(v13 + 36) = v11;
  *(_QWORD *)(v13 + 40) = v5;
  *(_QWORD *)(v13 + 48) = 2;
  *(_QWORD *)(v13 + 56) = 0;
  *(_QWORD *)(v13 + 64) = 0;
  *(_QWORD *)&result = 0x1FFFFFFFELL;
  *(_OWORD *)(v13 + 72) = xmmword_235260F10;
  *(_BYTE *)(v13 + 88) = 1;
  return result;
}

uint64_t Image.Location.encode(to:)(uint64_t a1)
{
  _QWORD **v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD **v4;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  id v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v4 = v1;
  v6 = *v4;
  if (*v4)
  {
    if (v6 != (_QWORD *)1)
    {
      v17 = objc_msgSend(v6, sel_bundlePath);
      v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v15 = v18;

      ProtobufEncoder.encodeVarint(_:)(0xAuLL);
      v3 = *(_QWORD *)(a1 + 8);
      v14 = *(_QWORD *)(a1 + 24);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_17;
      goto LABEL_25;
    }
    ProtobufEncoder.encodeVarint(_:)(0x1AuLL);
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD **)(a1 + 24);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    v10 = v8[2];
    v9 = v8[3];
    if (v10 >= v9 >> 1)
      v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v8);
    v8[2] = v10 + 1;
    v8[v10 + 4] = v7;
    *(_QWORD *)(a1 + 24) = v8;
    v11 = v7 + 1;
    if (!__OFADD__(v7, 1))
      goto LABEL_15;
    __break(1u);
  }
  ProtobufEncoder.encodeVarint(_:)(0x12uLL);
  v12 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD **)(a1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
  v14 = v6[2];
  v13 = v6[3];
  v15 = v14 + 1;
  if (v14 >= v13 >> 1)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v6);
  v6[2] = v15;
  v6[v14 + 4] = v12;
  *(_QWORD *)(a1 + 24) = v6;
  v11 = v12 + 1;
  if (!__OFADD__(v12, 1))
  {
LABEL_15:
    *(_QWORD *)(a1 + 8) = v11;
    return ProtobufEncoder.endLengthDelimited()();
  }
  __break(1u);
  do
  {
    __break(1u);
LABEL_25:
    v14 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v14 + 16) + 1, 1, (_QWORD *)v14);
LABEL_17:
    v20 = *(_QWORD *)(v14 + 16);
    v19 = *(_QWORD *)(v14 + 24);
    if (v20 >= v19 >> 1)
      v14 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v19 > 1), v20 + 1, 1, (_QWORD *)v14);
    *(_QWORD *)(v14 + 16) = v20 + 1;
    *(_QWORD *)(v14 + 8 * v20 + 32) = v3;
    *(_QWORD *)(a1 + 24) = v14;
  }
  while (__OFADD__(v3, 1));
  *(_QWORD *)(a1 + 8) = v3 + 1;
  swift_bridgeObjectRetain();
  specialized ProtobufEncoder.encodeAttachedValue<A>(key:data:)(v12, v15, a1, v12, v15);
  swift_bridgeObjectRelease();
  if (!v2)
    ProtobufEncoder.endLengthDelimited()();
  outlined consume of Image.Location(v6);
  return swift_bridgeObjectRelease();
}

void Image.Location.init(from:)(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  id v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t v34;

  v5 = a1[1];
  v6 = a1[2];
  if (v5 >= v6)
  {
    a1[3] = 0;
    goto LABEL_4;
  }
  v7 = v2;
  v8 = 2;
  while (1)
  {
    v10 = a1[3];
    if (v10)
    {
      v11 = a1[4];
      if (v5 < v11)
        goto LABEL_14;
      if (v11 < v5)
        goto LABEL_55;
      a1[3] = 0;
    }
    v12 = ProtobufDecoder.decodeVarint()();
    if (v7)
      goto LABEL_57;
    v10 = v12;
    if (v12 < 8)
      goto LABEL_55;
LABEL_14:
    v13 = v10 >> 3;
    if (v10 >> 3 == 3)
    {
      outlined consume of Image.Location?((id)v8);
      switch(v10 & 7)
      {
        case 0uLL:
          ProtobufDecoder.decodeVarint()();
          if (v7)
            return;
          v8 = 1;
          goto LABEL_7;
        case 1uLL:
          v25 = a1[1] + 8;
          goto LABEL_38;
        case 2uLL:
          v26 = ProtobufDecoder.decodeVarint()();
          if (v7)
            return;
          if (v26 < 0)
            goto LABEL_64;
          v25 = a1[1] + v26;
LABEL_38:
          if (v6 < v25)
            goto LABEL_4;
          a1[1] = v25;
          v8 = 1;
          break;
        case 5uLL:
          v25 = a1[1] + 4;
          goto LABEL_38;
        default:
          goto LABEL_4;
      }
      goto LABEL_7;
    }
    if (v13 == 2)
    {
      outlined consume of Image.Location?((id)v8);
      switch(v10 & 7)
      {
        case 0uLL:
          ProtobufDecoder.decodeVarint()();
          if (v7)
            return;
          v8 = 0;
          goto LABEL_7;
        case 1uLL:
          v27 = a1[1] + 8;
          goto LABEL_45;
        case 2uLL:
          v28 = ProtobufDecoder.decodeVarint()();
          if (v7)
            return;
          if (v28 < 0)
            goto LABEL_65;
          v27 = a1[1] + v28;
LABEL_45:
          if (v6 < v27)
            goto LABEL_4;
          v8 = 0;
          a1[1] = v27;
          break;
        case 5uLL:
          v27 = a1[1] + 4;
          goto LABEL_45;
        default:
          goto LABEL_4;
      }
      goto LABEL_7;
    }
    if (v13 != 1)
    {
      switch(v10 & 7)
      {
        case 0uLL:
          ProtobufDecoder.decodeVarint()();
          if (v7)
            goto LABEL_57;
          goto LABEL_7;
        case 1uLL:
          v9 = a1[1] + 8;
          if (v6 < v9)
            goto LABEL_55;
          goto LABEL_6;
        case 2uLL:
          v29 = ProtobufDecoder.decodeVarint()();
          if (v7)
            goto LABEL_57;
          if (v29 < 0)
            goto LABEL_66;
          v9 = a1[1] + v29;
          if (v6 < v9)
            goto LABEL_55;
LABEL_6:
          a1[1] = v9;
          break;
        case 5uLL:
          v9 = a1[1] + 4;
          if (v6 < v9)
            goto LABEL_55;
          goto LABEL_6;
        default:
          goto LABEL_55;
      }
      goto LABEL_7;
    }
    if ((v10 & 7) != 2)
      goto LABEL_55;
    ProtobufDecoder.beginMessage()();
    if (v7)
      goto LABEL_57;
    v14 = specialized ProtobufDecoder.decodeAttachedValue<A>(as:generator:)((uint64_t)a1);
    v7 = 0;
    v16 = (_QWORD *)a1[5];
    if (!v16[2])
      break;
    v17 = v14;
    v18 = v15;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v19 = v16[2];
      if (!v19)
        goto LABEL_54;
    }
    else
    {
      v16 = specialized _ArrayBuffer._consumeAndCreateNew()(v16);
      v19 = v16[2];
      if (!v19)
      {
LABEL_54:
        __break(1u);
LABEL_55:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        goto LABEL_56;
      }
    }
    v20 = v19 - 1;
    v21 = v16[v20 + 4];
    v16[2] = v20;
    a1[5] = v16;
    a1[2] = v21;
    v22 = objc_allocWithZone(MEMORY[0x24BDD1488]);
    swift_bridgeObjectRetain();
    v23 = (void *)MEMORY[0x23B7C5DAC](v17, v18);
    swift_bridgeObjectRelease();
    v24 = objc_msgSend(v22, sel_initWithPath_, v23);

    if (!v24)
    {
      lazy protocol witness table accessor for type Image.Location.Error and conformance Image.Location.Error();
      swift_allocError();
      *v32 = v17;
      v32[1] = v18;
LABEL_56:
      swift_willThrow();
LABEL_57:
      outlined consume of Image.Location?((id)v8);
      return;
    }
    outlined consume of Image.Location?((id)v8);
    swift_bridgeObjectRelease();
    v8 = (uint64_t)v24;
LABEL_7:
    v5 = a1[1];
    v6 = a1[2];
    if (v5 >= v6)
    {
      a1[3] = 0;
      if (v8 != 2)
      {
        *a2 = v8;
        return;
      }
LABEL_4:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
      return;
    }
  }
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
  __break(1u);
  v33 = specialized _ArrayBuffer._consumeAndCreateNew()(a2);
  v34 = v33[2];
  if (!v34)
  {
    __break(1u);
    JUMPOUT(0x234E94810);
  }
  v30 = v34 - 1;
  v31 = v33[v30 + 4];
  v33[2] = v30;
  outlined consume of Image.Location?((id)v8);
  a1[5] = v33;
  a1[2] = v31;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance Image.Location.BundlePath(uint64_t a1)
{
  uint64_t *v1;
  unint64_t v3;
  uint64_t v4;

  v4 = *v1;
  v3 = v1[1];
  swift_bridgeObjectRetain();
  specialized ProtobufEncoder.encodeAttachedValue<A>(key:data:)(v4, v3, a1, v4, v3);
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance Image.Location.BundlePath@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = specialized ProtobufDecoder.decodeAttachedValue<A>(as:generator:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance Image.Location(uint64_t a1)
{
  return Image.Location.encode(to:)(a1);
}

void protocol witness for ProtobufDecodableMessage.init(from:) in conformance Image.Location(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  Image.Location.init(from:)(a1, a2);
}

uint64_t Font.Weight.glyphWeight.getter(double a1)
{
  if (vabdd_f64(-0.8, a1) < 0.001)
    return 1;
  if (vabdd_f64(-0.6, a1) < 0.001)
    return 2;
  if (vabdd_f64(-0.4, a1) < 0.001)
    return 3;
  if (vabdd_f64(0.0, a1) < 0.001)
    return 4;
  if (vabdd_f64(0.23, a1) < 0.001)
    return 5;
  if (vabdd_f64(0.3, a1) < 0.001)
    return 6;
  if (vabdd_f64(0.4, a1) < 0.001)
    return 7;
  if (vabdd_f64(0.56, a1) < 0.001)
    return 8;
  if (vabdd_f64(0.62, a1) >= 0.001)
    return 4;
  return 9;
}

double Font.Weight.glyphContinuousWeight.getter(double a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = Font.Weight.glyphWeight.getter(a1);
  if (v1 > 9)
    v2 = MEMORY[0x24BE28CC0];
  else
    v2 = qword_250667A70[v1];
  return *(double *)v2;
}

double Image.HashableScale.circleDotFillSize(pointSize:weight:)(double a1, double a2)
{
  _BYTE *v2;
  int v3;
  double v4;
  double v5;
  double v6;
  double v7;

  v3 = 1 << *v2;
  if ((v3 & 0x52) != 0)
  {
    if (a2 == 0.0)
    {
      v4 = 99.61;
      return v4 * 0.01 * a1;
    }
    v5 = 99.61;
    if (a2 < 0.0)
    {
      v6 = 94.63;
LABEL_15:
      v4 = v6 + (a2 + 0.8) / 0.8 * (v5 - v6);
      return v4 * 0.01 * a1;
    }
    v7 = 106.64;
LABEL_19:
    v4 = v5 + a2 / 0.62 * (v7 - v5);
    return v4 * 0.01 * a1;
  }
  if ((v3 & 9) == 0)
  {
    if (a2 == 0.0)
    {
      v4 = 127.2;
      return v4 * 0.01 * a1;
    }
    v5 = 127.2;
    if (a2 < 0.0)
    {
      v6 = 121.66;
      goto LABEL_15;
    }
    v7 = 135.89;
    goto LABEL_19;
  }
  if (a2 != 0.0)
  {
    v5 = 78.86;
    if (a2 < 0.0)
    {
      v6 = 74.46;
      goto LABEL_15;
    }
    v7 = 83.98;
    goto LABEL_19;
  }
  v4 = 78.86;
  return v4 * 0.01 * a1;
}

double Image.HashableScale.allowedScaleRange.getter()
{
  unsigned __int8 *v0;
  unsigned int v1;
  BOOL v2;
  unsigned int v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  double v14;
  double v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[24];
  uint64_t v20;

  v1 = *v0;
  v2 = v1 >= 3;
  v3 = v1 - 3;
  if (v2)
  {
    if (v3 >= 3)
      return 0.75;
    v4 = (void *)objc_opt_self();
    v5 = objc_msgSend(v4, sel_standardUserDefaults);
    v6 = (void *)MEMORY[0x23B7C5DAC](0xD000000000000019, 0x80000002352E45C0);
    v7 = objc_msgSend(v5, sel_valueForKey_, v6);

    if (v7)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      v17 = 0u;
      v18 = 0u;
    }
    v9 = MEMORY[0x24BEE4AD8];
    v10 = MEMORY[0x24BEE4AD8] + 8;
    _sypSgWObTm_0((uint64_t)&v17, (uint64_t)v19, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
    if (v20)
    {
      if (swift_dynamicCast())
      {
        v8 = v16;
        goto LABEL_12;
      }
    }
    else
    {
      outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)v19, (unint64_t *)&lazy cache variable for type metadata for Any?, v10);
    }
    v8 = 0.0;
LABEL_12:
    v11 = objc_msgSend(v4, sel_standardUserDefaults);
    v12 = (void *)MEMORY[0x23B7C5DAC](0xD000000000000019, 0x80000002352E45E0);
    v13 = objc_msgSend(v11, sel_valueForKey_, v12);

    if (v13)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      v17 = 0u;
      v18 = 0u;
    }
    _sypSgWObTm_0((uint64_t)&v17, (uint64_t)v19, (uint64_t)&lazy cache variable for type metadata for Any?, v9 + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
    if (v20)
    {
      if (swift_dynamicCast())
      {
        v14 = v16;
LABEL_20:
        if (v8 <= v14)
          return v8;
        __break(1u);
        return 0.75;
      }
    }
    else
    {
      outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)v19, (unint64_t *)&lazy cache variable for type metadata for Any?, v9 + 8);
    }
    v14 = 1.79769313e308;
    goto LABEL_20;
  }
  return 1.0;
}

double Image.HashableScale.maxRadius(diameter:)(double a1)
{
  unsigned __int8 *v1;
  unsigned int v2;
  double v3;
  BOOL v4;
  unsigned int v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  double v10;
  double v12;
  _OWORD v13[2];
  _BYTE v14[24];
  uint64_t v15;

  v2 = *v1;
  v3 = a1 * 0.5;
  v4 = v2 >= 3;
  v5 = v2 - 3;
  if (v4)
  {
    if (v5 >= 3)
    {
      v10 = 1.1;
      return v3 * v10;
    }
    v6 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
    v7 = (void *)MEMORY[0x23B7C5DAC](0xD000000000000018, 0x80000002352E45A0);
    v8 = objc_msgSend(v6, sel_valueForKey_, v7);

    if (v8)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v13, 0, sizeof(v13));
    }
    v9 = MEMORY[0x24BEE4AD8] + 8;
    _sypSgWObTm_0((uint64_t)v13, (uint64_t)v14, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for MutableBox<CachedEnvironment>);
    if (v15)
    {
      if (swift_dynamicCast())
      {
        v10 = v12;
        return v3 * v10;
      }
    }
    else
    {
      outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)v14, (unint64_t *)&lazy cache variable for type metadata for Any?, v9);
    }
    v10 = 1.2;
    return v3 * v10;
  }
  return v3;
}

void Image.HashableScale.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int Image.HashableScale.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

id closure #1 in NamedImage.VectorKey.loadVectorInfo(from:idiom:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  void *v10;
  double v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  double v17;
  void *v18;
  Class isa;
  id v20;
  id v21;
  double v22;
  void *v23;
  double v24;
  double v25;
  void *v26;
  Class v27;
  id v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v31 = *(_QWORD *)(a4 + 16);
  v32 = *(_QWORD *)(a4 + 8);
  v10 = (void *)MEMORY[0x23B7C5DAC]();
  v11 = *(double *)(a4 + 24);
  if (*(_BYTE *)(a4 + 32))
    v12 = 4;
  else
    v12 = 5;
  v13 = (int *)type metadata accessor for NamedImage.VectorKey(0);
  v30 = *(char *)(a4 + v13[10]);
  v14 = qword_2352AB0A0[v30];
  v15 = *(double *)(a4 + v13[9]);
  v16 = Font.Weight.glyphWeight.getter(v15);
  v17 = *(double *)(a4 + v13[11]);
  v33 = a1;
  v34 = a2;
  v18 = (void *)MEMORY[0x23B7C5DAC](a1, a2);
  isa = Locale._bridgeToObjectiveC()().super.isa;
  v20 = objc_msgSend(a3, sel_namedVectorGlyphWithName_scaleFactor_deviceIdiom_layoutDirection_glyphSize_glyphWeight_glyphPointSize_appearanceName_locale_, v10, a5, v12, v14, v16, v18, v11, v17, isa);

  if (v20)
  {
    v21 = v20;
    v22 = NamedImage.VectorKey.symbolSizeScale(for:)(v21);

    if (v22 != 1.0)
    {
      v23 = (void *)MEMORY[0x23B7C5DAC](v32, v31);
      v24 = v22 * **((double **)&unk_250667AC0 + v30);
      v25 = Font.Weight.glyphContinuousWeight.getter(v15);
      v26 = (void *)MEMORY[0x23B7C5DAC](v33, v34);
      v27 = Locale._bridgeToObjectiveC()().super.isa;
      v28 = objc_msgSend(a3, sel_namedVectorGlyphWithName_scaleFactor_deviceIdiom_layoutDirection_glyphContinuousSize_glyphContinuousWeight_glyphPointSize_appearanceName_locale_, v23, a5, v12, v26, v27, v11, v24, v25, v17);

      if (v28)
      {

        return v28;
      }
    }
  }
  return v20;
}

double NamedImage.VectorKey.symbolSizeScale(for:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  id v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  id v15;
  void *v16;
  double v18;
  unint64_t v19;
  id v20;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  id v25;
  void *v26;
  _QWORD *v27;
  uint64_t v28;
  BOOL v29;
  id v30;
  id v31;
  id v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  double v41;
  double v42;
  float v43;
  double v44;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v2 = v1;
  v4 = (int *)type metadata accessor for NamedImage.VectorKey(0);
  v5 = v4[10];
  v7 = Image.HashableScale.allowedScaleRange.getter();
  if (v7 < v6)
  {
    v8 = v6;
    v9 = objc_msgSend(a1, sel_monochromeLayers);
    if (!v9)
      return 1.0;
    v10 = v9;
    type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for CUIVectorGlyphLayer);
    v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    objc_msgSend(a1, sel_metricCenter);
    objc_msgSend(a1, sel_scale);
    if (v11 >> 62)
      goto LABEL_66;
    v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (v12)
    {
      v13 = 0;
      v14 = v11 & 0xC000000000000001;
      v49 = v11 + 32;
      v50 = v11 & 0xFFFFFFFFFFFFFF8;
      v51 = v12;
      while (1)
      {
        if (v14)
        {
          v15 = (id)MEMORY[0x23B7C6D9C](v13, v11);
        }
        else
        {
          if (v13 >= *(_QWORD *)(v50 + 16))
            goto LABEL_65;
          v15 = *(id *)(v49 + 8 * v13);
        }
        v16 = v15;
        if (__OFADD__(v13++, 1))
          break;
        objc_msgSend(v15, sel_opacity);
        if (v18 <= 0.0)
        {

          if (v13 == v12)
            goto LABEL_67;
        }
        else
        {
          v19 = v11;
          v20 = objc_msgSend(v16, sel_tags);
          if (v20)
          {
            v21 = v20;
            v22 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

            v23 = v22[2];
            if (v23)
            {
              v24 = v22[4] == 0x6873616C735FLL && v22[5] == 0xE600000000000000;
              if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                goto LABEL_50;
              if (v23 != 1)
              {
                if (v22[6] == 0x6873616C735FLL && v22[7] == 0xE600000000000000
                  || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {
                  goto LABEL_50;
                }
                if (v23 != 2)
                {
                  v46 = v5;
                  v47 = v4;
                  v48 = v2;
                  v33 = v22 + 9;
                  v34 = 2;
                  while (1)
                  {
                    v35 = v34 + 1;
                    if (__OFADD__(v34, 1))
                    {
                      __break(1u);
LABEL_76:
                      __break(1u);
                    }
                    v36 = *(v33 - 1) == 0x6873616C735FLL && *v33 == 0xE600000000000000;
                    if (v36 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                      break;
                    v33 += 2;
                    ++v34;
                    if (v35 == v23)
                    {
                      swift_bridgeObjectRelease();
                      v4 = v47;
                      v2 = v48;
                      v5 = v46;
                      goto LABEL_22;
                    }
                  }
LABEL_63:

                  swift_bridgeObjectRelease();
                  v4 = v47;
                  v2 = v48;
                  v5 = v46;
                  goto LABEL_51;
                }
              }
            }
            swift_bridgeObjectRelease();
          }
LABEL_22:
          v25 = objc_msgSend(v16, sel_tags, v46, v47, v48);
          if (!v25)
            goto LABEL_31;
          v26 = v25;
          v27 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

          v28 = v27[2];
          if (!v28)
            goto LABEL_30;
          v29 = v27[4] == 0x65676461625FLL && v27[5] == 0xE600000000000000;
          if (!v29 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            if (v28 == 1)
              goto LABEL_30;
            if ((v27[6] != 0x65676461625FLL || v27[7] != 0xE600000000000000)
              && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            {
              if (v28 == 2)
              {
LABEL_30:
                swift_bridgeObjectRelease();
              }
              else
              {
                v46 = v5;
                v47 = v4;
                v48 = v2;
                v37 = v27 + 9;
                v38 = 2;
                do
                {
                  v39 = v38 + 1;
                  if (__OFADD__(v38, 1))
                    goto LABEL_76;
                  v40 = *(v37 - 1) == 0x65676461625FLL && *v37 == 0xE600000000000000;
                  if (v40 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    goto LABEL_63;
                  v37 += 2;
                  ++v38;
                }
                while (v39 != v28);
                swift_bridgeObjectRelease();
                v4 = v47;
                v2 = v48;
                v5 = v46;
              }
LABEL_31:
              v30 = objc_retainAutorelease(v16);
              v31 = objc_msgSend(v30, sel_shape);
              if (v31)
              {
                v32 = v31;
                RBPathApplyLines();

              }
              else
              {

              }
              goto LABEL_51;
            }
          }
LABEL_50:

          swift_bridgeObjectRelease();
LABEL_51:
          v11 = v19;
          v12 = v51;
          if (v13 == v51)
            goto LABEL_67;
        }
      }
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      swift_bridgeObjectRetain();
      v12 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
LABEL_67:
    swift_bridgeObjectRelease();
    v41 = Image.HashableScale.circleDotFillSize(pointSize:weight:)(*(double *)(v2 + v4[11]), *(double *)(v2 + v4[9]));
    v42 = Image.HashableScale.maxRadius(diameter:)(v41);
    v43 = sqrtf(0.0);
    if (v43 > 0.0)
    {
      v44 = v42 / v43;
      if (v7 > v44)
        v44 = v7;
      if (v8 >= v44)
        return v44;
      else
        return v8;
    }
    else
    {
      return 1.0;
    }
  }
  return v7;
}

void *specialized CUICatalog.findAsset<A, B>(key:matchTypes:assetLookup:)(__int16 a1, id a2, char a3, uint64_t (*a4)(unint64_t, unint64_t))
{
  char v4;
  BOOL v6;
  char *v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  int v11;
  char *v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v33;
  char *v34;
  char *v36;

  v4 = a1 & 1;
  v6 = (a3 & 1) == 0 && a2 == (id)8;
  if ((a1 & 0x100) != 0)
  {
    if (v6)
    {
      v7 = (char *)&outlined read-only object #0 of specialized CUICatalog.findAsset<A, B>(key:matchTypes:assetLookup:);
      v8 = 2;
      goto LABEL_16;
    }
    type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(ColorScheme?, ColorSchemeContrast)>, (uint64_t (*)(uint64_t))type metadata accessor for (ColorScheme?, ColorSchemeContrast), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v7 = (char *)swift_allocObject();
    *((_OWORD *)v7 + 1) = xmmword_23528B7A0;
    v7[32] = v4;
    v7[33] = 1;
    v7[34] = v4;
    *(_WORD *)(v7 + 35) = 512;
    v7[37] = 1;
    v9 = v7 + 38;
    v10 = v7 + 39;
  }
  else
  {
    if (v6)
    {
      v7 = (char *)&outlined read-only object #1 of specialized CUICatalog.findAsset<A, B>(key:matchTypes:assetLookup:);
      v8 = 1;
      goto LABEL_16;
    }
    type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(ColorScheme?, ColorSchemeContrast)>, (uint64_t (*)(uint64_t))type metadata accessor for (ColorScheme?, ColorSchemeContrast), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v7 = (char *)swift_allocObject();
    *((_OWORD *)v7 + 1) = xmmword_2352828C0;
    v7[32] = v4;
    v7[33] = 0;
    v9 = v7 + 34;
    v10 = v7 + 35;
  }
  *v9 = 2;
  *v10 = 0;
  v8 = *((_QWORD *)v7 + 2);
  if (!v8)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_16:
  v12 = v7 + 32;
  v11 = v7[32];
  v13 = v7[33];
  swift_bridgeObjectRetain();
  v14 = v8 + 1;
  v15 = 1;
LABEL_17:
  v16 = 0xD00000000000001BLL;
  if ((v13 & 1) != 0)
  {
    v17 = 0x80000002352E4500;
  }
  else
  {
    v16 = 0x7261657070414955;
    v17 = 0xEF796E4165636E61;
  }
  v18 = 0xD00000000000001DLL;
  if ((v13 & 1) != 0)
  {
    v19 = 0x80000002352E4560;
  }
  else
  {
    v18 = 0xD000000000000011;
    v19 = 0x80000002352E4580;
  }
  v20 = 0xD00000000000001CLL;
  if ((v13 & 1) != 0)
  {
    v21 = 0x80000002352E4520;
  }
  else
  {
    v20 = 0xD000000000000010;
    v21 = 0x80000002352E4540;
  }
  if ((v11 & 1) != 0)
  {
    v18 = v20;
    v19 = v21;
  }
  if (v11 == 2)
    v22 = v16;
  else
    v22 = v18;
  if (v11 == 2)
    v23 = v17;
  else
    v23 = v19;
  v24 = (void *)a4(v22, v23);
  v25 = v24;
  if (!v24)
  {
LABEL_46:
    swift_bridgeObjectRelease();
    v26 = v15;
    goto LABEL_47;
  }
  if ((a3 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    if (objc_msgSend(v25, sel_idiom) != a2)
    {
LABEL_45:

      v25 = 0;
      v26 = v15;
      goto LABEL_47;
    }
LABEL_37:
    v26 = v15;
    goto LABEL_47;
  }
  if (!a2)
    goto LABEL_46;
  v27 = objc_msgSend(v24, sel_appearance);
  if (!v27)
  {

    swift_bridgeObjectRelease();
    v25 = 0;
    v26 = v15;
    goto LABEL_47;
  }
  v28 = v27;
  v36 = v12;
  v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v31 = v30;

  if (v29 != v22 || v31 != v23)
  {
    v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v12 = v36;
    if ((v33 & 1) == 0)
      goto LABEL_45;
    goto LABEL_37;
  }
  swift_bridgeObjectRelease_n();
  v12 = v36;
  v26 = v15;
LABEL_47:
  while (v14 != ++v26)
  {
    if (!v25)
    {
      v34 = &v12[2 * v15];
      v11 = *v34;
      v13 = v34[1];
      v15 = v26;
      goto LABEL_17;
    }
  }
  swift_bridgeObjectRelease_n();
  if (!v25)
    return 0;
  return v25;
}

void *specialized CUICatalog.findAsset<A, B>(key:matchTypes:assetLookup:)(__int16 a1, uint64_t a2, uint64_t (*a3)(unint64_t, unint64_t), uint64_t a4)
{
  char v6;
  uint64_t v7;
  char v8;
  char *v9;
  _BYTE *v10;
  _BYTE *v11;
  void *v12;
  uint64_t v13;
  int v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  char v32;
  uint64_t v33;
  char *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  id v41;
  int v42;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v6 = a1 & 1;
  v7 = a2 + 32;
  v41 = *(id *)(a2 + 32);
  v42 = *(unsigned __int8 *)(a2 + 40);
  if (v41 == (id)8)
    v8 = *(_BYTE *)(a2 + 40);
  else
    v8 = 1;
  v39 = *(_QWORD *)(a2 + 16);
  if ((a1 & 0x100) != 0)
  {
    if ((v8 & 1) != 0)
    {
      type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(ColorScheme?, ColorSchemeContrast)>, (uint64_t (*)(uint64_t))type metadata accessor for (ColorScheme?, ColorSchemeContrast), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v9 = (char *)swift_allocObject();
      *((_OWORD *)v9 + 1) = xmmword_23528B7A0;
      v9[32] = v6;
      v9[33] = 1;
      v9[34] = v6;
      *(_WORD *)(v9 + 35) = 512;
      v9[37] = 1;
      v10 = v9 + 38;
      v11 = v9 + 39;
      goto LABEL_11;
    }
    v9 = (char *)&outlined read-only object #0 of specialized CUICatalog.findAsset<A, B>(key:matchTypes:assetLookup:);
  }
  else
  {
    if ((v8 & 1) != 0)
    {
      type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(ColorScheme?, ColorSchemeContrast)>, (uint64_t (*)(uint64_t))type metadata accessor for (ColorScheme?, ColorSchemeContrast), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v9 = (char *)swift_allocObject();
      *((_OWORD *)v9 + 1) = xmmword_2352828C0;
      v9[32] = v6;
      v9[33] = 0;
      v10 = v9 + 34;
      v11 = v9 + 35;
LABEL_11:
      *v10 = 2;
      *v11 = 0;
      goto LABEL_14;
    }
    v9 = (char *)&outlined read-only object #1 of specialized CUICatalog.findAsset<A, B>(key:matchTypes:assetLookup:);
  }
LABEL_14:
  v13 = *((_QWORD *)v9 + 2);
  v40 = a1;
  if (v13)
  {
    v38 = v7;
    v14 = v9[32];
    v15 = v9[33];
    swift_bridgeObjectRetain();
    v16 = v13 + 1;
    v17 = 1;
LABEL_16:
    v18 = 0xD00000000000001BLL;
    if ((v15 & 1) != 0)
    {
      v19 = 0x80000002352E4500;
    }
    else
    {
      v18 = 0x7261657070414955;
      v19 = 0xEF796E4165636E61;
    }
    v20 = 0xD00000000000001DLL;
    if ((v15 & 1) != 0)
    {
      v21 = 0x80000002352E4560;
    }
    else
    {
      v20 = 0xD000000000000011;
      v21 = 0x80000002352E4580;
    }
    v22 = 0xD00000000000001CLL;
    if ((v15 & 1) != 0)
    {
      v23 = 0x80000002352E4520;
    }
    else
    {
      v22 = 0xD000000000000010;
      v23 = 0x80000002352E4540;
    }
    if ((v14 & 1) != 0)
    {
      v20 = v22;
      v21 = v23;
    }
    if (v14 == 2)
      v24 = v18;
    else
      v24 = v20;
    if (v14 == 2)
      v25 = v19;
    else
      v25 = v21;
    v26 = (void *)a3(v24, v25);
    v12 = v26;
    if (!v26)
    {
LABEL_43:
      swift_bridgeObjectRelease();
      v33 = v17;
      goto LABEL_48;
    }
    if (!v42)
    {
      swift_bridgeObjectRelease();
      if (objc_msgSend(v12, sel_idiom) != v41)
        goto LABEL_42;
      goto LABEL_45;
    }
    if (!v41)
      goto LABEL_43;
    v27 = objc_msgSend(v26, sel_appearance);
    if (!v27)
    {

      swift_bridgeObjectRelease();
      v12 = 0;
      v33 = v17;
      goto LABEL_48;
    }
    v28 = v27;
    v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v30 = v29;

    if (v37 != v24 || v30 != v25)
    {
      v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v32 & 1) == 0)
      {
LABEL_42:

        v12 = 0;
        v33 = v17;
        goto LABEL_48;
      }
LABEL_45:
      v33 = v17;
      goto LABEL_48;
    }
    swift_bridgeObjectRelease_n();
    v33 = v17;
LABEL_48:
    while (v16 != ++v33)
    {
      if (!v12)
      {
        v34 = &v9[2 * v17 + 32];
        v14 = *v34;
        v15 = v34[1];
        v17 = v33;
        goto LABEL_16;
      }
    }
    swift_bridgeObjectRelease_n();
    v7 = v38;
    if (v12)
      return v12;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  v36 = specialized CUICatalog.findAsset<A, B>(key:matchTypes:assetLookup:)(v40 & 0x101, a2, v7, 1, (2 * v39) | 1, a3, a4);
  swift_bridgeObjectRelease();
  return (void *)v36;
}

uint64_t specialized CUICatalog.findAsset<A, B>(key:matchTypes:assetLookup:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t (*a6)(unint64_t, unint64_t), uint64_t a7)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v12;
  char v15;
  uint64_t v16;
  void *v17;
  int v18;
  char *v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  int v23;
  unsigned __int8 v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  void *v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  char v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  __int16 v54;
  int64_t v56;
  int v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(unint64_t, unint64_t);

  if (a5 >> 1 == a4)
    return 0;
  if ((uint64_t)(a5 >> 1) <= a4)
  {
    __break(1u);
    goto LABEL_63;
  }
  v9 = v7;
  v12 = a5;
  v56 = a5 >> 1;
  v15 = result & 1;
  v16 = a3 + 16 * a4;
  v17 = *(void **)v16;
  v18 = *(unsigned __int8 *)(v16 + 8);
  v58 = v17;
  v57 = v18;
  if (v17 != (void *)8)
    LOBYTE(v18) = 1;
  v54 = result;
  if ((result & 0x100) != 0)
  {
    if ((v18 & 1) == 0)
    {
      v19 = (char *)&outlined read-only object #0 of specialized CUICatalog.findAsset<A, B>(key:matchTypes:assetLookup:);
      goto LABEL_14;
    }
    type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(ColorScheme?, ColorSchemeContrast)>, (uint64_t (*)(uint64_t))type metadata accessor for (ColorScheme?, ColorSchemeContrast), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v19 = (char *)swift_allocObject();
    *((_OWORD *)v19 + 1) = xmmword_23528B7A0;
    v19[32] = v15;
    v19[33] = 1;
    v19[34] = v15;
    *(_WORD *)(v19 + 35) = 512;
    v19[37] = 1;
    v20 = v19 + 38;
    v21 = v19 + 39;
  }
  else
  {
    if ((v18 & 1) == 0)
    {
      v19 = (char *)&outlined read-only object #1 of specialized CUICatalog.findAsset<A, B>(key:matchTypes:assetLookup:);
      goto LABEL_14;
    }
    type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(ColorScheme?, ColorSchemeContrast)>, (uint64_t (*)(uint64_t))type metadata accessor for (ColorScheme?, ColorSchemeContrast), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v19 = (char *)swift_allocObject();
    *((_OWORD *)v19 + 1) = xmmword_2352828C0;
    v19[32] = v15;
    v19[33] = 0;
    v20 = v19 + 34;
    v21 = v19 + 35;
  }
  *v20 = 2;
  *v21 = 0;
LABEL_14:
  v22 = *((_QWORD *)v19 + 2);
  v59 = a7;
  if (!v22)
  {
    result = swift_bridgeObjectRelease();
    goto LABEL_57;
  }
  v52 = v12;
  v61 = a6;
  v53 = a2;
  v23 = v19[32];
  v24 = v19[33];
  swift_bridgeObjectRetain();
  v25 = v22 + 1;
  v60 = 1;
  v26 = 0x80000002352E4540;
  v27 = 0x80000002352E4520;
LABEL_16:
  v28 = 0xD00000000000001BLL;
  if ((v24 & 1) != 0)
  {
    v29 = 0x80000002352E4500;
  }
  else
  {
    v28 = 0x7261657070414955;
    v29 = 0xEF796E4165636E61;
  }
  v30 = 0xD00000000000001DLL;
  if ((v24 & 1) != 0)
  {
    v31 = 0x80000002352E4560;
  }
  else
  {
    v30 = 0xD000000000000011;
    v31 = 0x80000002352E4580;
  }
  v32 = 0xD00000000000001CLL;
  if ((v24 & 1) != 0)
  {
    v33 = v27;
  }
  else
  {
    v32 = 0xD000000000000010;
    v33 = v26;
  }
  if ((v23 & 1) != 0)
  {
    v30 = v32;
    v31 = v33;
  }
  if (v23 == 2)
    v34 = v28;
  else
    v34 = v30;
  if (v23 == 2)
    v35 = v29;
  else
    v35 = v31;
  v36 = v26;
  v37 = v27;
  v38 = (void *)v61(v34, v35);
  v8 = v38;
  if (!v38)
    goto LABEL_43;
  if (!v57)
  {
    swift_bridgeObjectRelease();
    if (objc_msgSend(v8, sel_idiom) != v58)
    {

      v8 = 0;
    }
    v45 = v60;
    goto LABEL_48;
  }
  if (v58)
  {
    v51 = v9;
    v39 = objc_msgSend(v38, sel_appearance);
    if (v39)
    {
      v40 = v39;
      v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v42 = v41;

      if (v50 == v34 && v42 == v35)
      {
        swift_bridgeObjectRelease_n();
        v9 = v51;
      }
      else
      {
        v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v9 = v51;
        if ((v44 & 1) == 0)
        {

          v8 = 0;
        }
      }
    }
    else
    {

      swift_bridgeObjectRelease();
      v8 = 0;
    }
  }
  else
  {
LABEL_43:
    swift_bridgeObjectRelease();
  }
  v45 = v60;
LABEL_48:
  v26 = v36;
  v27 = v37;
  v46 = v45;
  while (v25 != ++v46)
  {
    if (!v8)
    {
      v47 = &v19[2 * v45 + 32];
      v23 = *v47;
      v24 = v47[1];
      v60 = v46;
      goto LABEL_16;
    }
  }
  result = swift_bridgeObjectRelease_n();
  v12 = v52;
  a2 = v53;
  a6 = v61;
  if (v8)
    return (uint64_t)v8;
LABEL_57:
  if (__OFSUB__(v56, a4))
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  v48 = a4 + 1;
  if (__OFADD__(a4, 1))
  {
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  if (v56 < v48)
  {
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  if (v48 >= a4)
  {
    swift_unknownObjectRetain();
    v49 = specialized CUICatalog.findAsset<A, B>(key:matchTypes:assetLookup:)(v54 & 0x101, a2, a3, a4 + 1, v12, a6, v59);
    swift_unknownObjectRelease();
    return v49;
  }
LABEL_66:
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in RadiusAccumulator.addPath(_:)(float32x2_t *a1, unsigned __int8 a2, float64x2_t *a3)
{
  float32x2_t v3;
  float v4;

  if (a2 <= 1u)
  {
    v3 = vsub_f32(vmul_n_f32(vcvt_f32_f64(*a3), a1[1].f32[0]), *a1);
    v4 = vaddv_f32(vmul_f32(v3, v3));
    if (a1[1].f32[1] < v4)
      a1[1].f32[1] = v4;
  }
  return 1;
}

uint64_t @objc closure #1 in closure #1 in RadiusAccumulator.addPath(_:)(float32x2_t *a1, unsigned __int8 a2, float64x2_t *a3)
{
  return closure #1 in closure #1 in RadiusAccumulator.addPath(_:)(a1, a2, a3) & 1;
}

uint64_t Image.NamedImageProvider.vectorInfo(name:in:from:at:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, void **a5@<X4>, _OWORD *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  Swift::String v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v27[16];
  uint64_t v28;
  uint64_t v29;
  void *v30;

  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for Text.Style?, type metadata accessor for Text.Style, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v12);
  v14 = &v27[-v13 - 8];
  v15 = type metadata accessor for NamedImage.VectorKey(0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = &v27[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v18 = *a5;
  v28 = (uint64_t)*a5;
  v19._countAndFlagsBits = a1;
  v19._object = a2;
  result = Image.Location.mayContainSymbol(_:)(v19);
  if ((result & 1) != 0)
  {
    v21 = a3[1];
    v28 = *a3;
    v29 = v21;
    v30 = v18;
    v22 = type metadata accessor for ImageResolutionContext();
    outlined init with copy of TimeZone?((uint64_t)a3 + *(int *)(v22 + 24), (uint64_t)v14, (unint64_t *)&lazy cache variable for type metadata for Text.Style?, type metadata accessor for Text.Style);
    swift_retain_n();
    if (v21)
    {
      swift_retain_n();
      swift_bridgeObjectRetain();
      outlined copy of Image.Location(v18);
      swift_retain();
      v23 = swift_retain();
      v24 = specialized PropertyList.Tracker.value<A>(_:for:)(v23);
    }
    else
    {
      swift_bridgeObjectRetain();
      outlined copy of Image.Location(v18);
      v25 = swift_retain();
      v24 = specialized closure #1 in PropertyList.subscript.getter(v25, (uint64_t)v27);
    }
    swift_release_n();
    swift_release_n();
    NamedImage.VectorKey.init(name:location:in:textStyle:idiom:)(a1, (uint64_t)a2, (uint64_t *)&v30, &v28, (uint64_t)v14, v24, (uint64_t)v17);
    if (one-time initialization token for sharedCache != -1)
      swift_once();
    v28 = static NamedImage.sharedCache;
    v29 = unk_25426A178;
    swift_retain();
    swift_retain();
    NamedImage.Cache.subscript.getter((uint64_t)v17, a4, (uint64_t)a6);
    swift_release();
    swift_release();
    return outlined destroy of TypesettingConfiguration((uint64_t)v17, type metadata accessor for NamedImage.VectorKey);
  }
  else
  {
    a6[3] = 0u;
    a6[4] = 0u;
    a6[1] = 0u;
    a6[2] = 0u;
    *a6 = 0u;
  }
  return result;
}

id closure #1 in NamedImage.BitmapKey.loadBitmapInfo(location:idiom:subtype:)(uint64_t a1, uint64_t a2, void *a3, double *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v12;
  double v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  Class isa;
  id v20;

  v12 = (void *)MEMORY[0x23B7C5DAC](*((_QWORD *)a4 + 1), *((_QWORD *)a4 + 2));
  v13 = a4[3];
  v14 = (int *)type metadata accessor for NamedImage.BitmapKey(0);
  v15 = *((unsigned __int8 *)a4 + v14[10]);
  v16 = *((char *)a4 + v14[13]);
  v17 = *((char *)a4 + v14[14]);
  v18 = (void *)MEMORY[0x23B7C5DAC](a1, a2);
  isa = Locale._bridgeToObjectiveC()().super.isa;
  v20 = objc_msgSend(a3, sel_imageWithName_scaleFactor_deviceIdiom_deviceSubtype_displayGamut_layoutDirection_sizeClassHorizontal_sizeClassVertical_appearanceName_locale_, v12, a5, a6, v15, a7, v16, v13, v17, v18, isa);

  return v20;
}

uint64_t Image.init(uuid:size:label:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  double *v18;
  char *v19;
  uint64_t v20;
  uint64_t v22;

  v14 = type metadata accessor for UUIDImageProvider(0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v16, a1, v17);
  v18 = (double *)&v16[*(int *)(v14 + 20)];
  *v18 = a6;
  v18[1] = a7;
  v19 = &v16[*(int *)(v14 + 24)];
  *(_QWORD *)v19 = a2;
  *((_QWORD *)v19 + 1) = a3;
  *((_QWORD *)v19 + 2) = a4;
  *((_QWORD *)v19 + 3) = a5;
  type metadata accessor for ImageProviderBox<UUIDImageProvider>(0);
  v20 = swift_allocObject();
  outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v16, v20 + *(_QWORD *)(*(_QWORD *)v20 + 128), type metadata accessor for UUIDImageProvider);
  return v20;
}

uint64_t Image.ResolvedUUID.init(cgImage:scale:orientation:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>, double a4@<D0>)
{
  *(_QWORD *)a3 = result;
  *(double *)(a3 + 8) = a4;
  *(_BYTE *)(a3 + 16) = a2;
  return result;
}

void UUIDImageProvider.resolve(in:)(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _OWORD *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  float v26;
  int v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  __int128 v53;
  __int128 v54;
  int v55;

  v3 = v2;
  v5 = *a1;
  v6 = a1[1];
  v44 = (_OWORD *)*a1;
  v45 = v6;
  LOBYTE(v41) = 2;
  v7 = EnvironmentValues.imageIsTemplate(renderingMode:)((unsigned __int8 *)&v41);
  if ((*((_BYTE *)a1 + *(int *)(type metadata accessor for ImageResolutionContext() + 40)) & 2) != 0)
  {
    type metadata accessor for NamedImage.Key(0);
    v8 = (_OWORD *)swift_allocBox();
    v11 = v10;
    v12 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v11, v3, v12);
    swift_storeEnumTagMultiPayload();
    v9 = 5;
  }
  else
  {
    v8 = (_OWORD *)swift_allocObject();
    v8[1] = xmmword_2352AA860;
    v9 = 4;
  }
  v37 = type metadata accessor for UUIDImageProvider(0);
  v38 = v3;
  v13 = (uint64_t *)(v3 + *(int *)(v37 + 20));
  v14 = *v13;
  v15 = v13[1];
  if ((v7 & 1) != 0)
    v16 = 0x3F8000003F800000;
  else
    v16 = 0;
  v17 = v7 ^ 1;
  v44 = v8;
  LOBYTE(v45) = v9;
  v46 = 0x3FF0000000000000;
  v47 = v14;
  v48 = v15;
  v49 = 0;
  v50 = v16;
  v51 = v16;
  v52 = (v7 ^ 1) & 1;
  v53 = 0u;
  v54 = 0u;
  v55 = 50397442;
  outlined copy of GraphicsImage.Contents?(v8, v9);
  ImageResolutionContext.effectiveAllowedDynamicRange(for:)((uint64_t)&v44, (unsigned __int8 *)&v41);
  v36 = v41;
  if (v6)
  {
    swift_retain_n();
    swift_retain_n();
    v18 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v5);
    swift_release_n();
    swift_release_n();
  }
  else
  {
    v44 = (_OWORD *)v5;
    v45 = 0;
    swift_retain();
    v18 = specialized static ShouldRedactContentKey.value(in:)((uint64_t *)&v44, v19, v20, v21);
    swift_release();
  }
  v22 = v9;
  v23 = (uint64_t)v8;
  if ((v18 & 1) != 0)
  {
    v23 = swift_allocObject();
    v24 = one-time initialization token for foreground;
    swift_retain();
    swift_retain();
    if (v24 != -1)
      swift_once();
    v44 = (_OWORD *)v5;
    v45 = v6;
    *(float *)(v23 + 16) = (*(float (**)(_OWORD **))(*(_QWORD *)static Color.foreground + 104))(&v44);
    *(_DWORD *)(v23 + 20) = v25;
    *(_DWORD *)(v23 + 24) = v27;
    *(float *)(v23 + 28) = v26 * 0.16;
    outlined consume of GraphicsImage.Contents?(v8, v9);
    swift_release();
    swift_release();
    v22 = 4;
  }
  v44 = (_OWORD *)v23;
  LOBYTE(v45) = v22;
  v46 = 0x3FF0000000000000;
  v47 = v14;
  v48 = v15;
  v49 = 0;
  v50 = v16;
  v51 = v16;
  v52 = v17 & 1;
  v53 = 0u;
  v54 = 0u;
  LOWORD(v55) = 258;
  BYTE2(v55) = 1;
  HIBYTE(v55) = v36;
  v28 = (uint64_t *)(v38 + *(int *)(v37 + 24));
  v29 = *v28;
  v30 = v28[1];
  v31 = v28[2];
  v32 = v28[3];
  v33 = v31 & 1;
  if (v32)
    v34 = v29;
  else
    v34 = 0;
  if (v32)
    v35 = v30;
  else
    v35 = 0;
  if (!v32)
    v33 = 0x1FFFFFFFELL;
  *(_QWORD *)&v41 = v34;
  *((_QWORD *)&v41 + 1) = v35;
  v42 = v33;
  v43 = v32;
  v40 = 3;
  outlined copy of GraphicsImage.Contents?((id)v23, v22);
  outlined copy of Text?(v29, v30, v31, v32);
  Image.Resolved.init(image:decorative:label:basePlatformItemImage:backgroundShape:backgroundCornerRadius:)((uint64_t *)&v44, v32 == 0, &v41, 0, &v40, 0.0, 1, a2);
  outlined consume of GraphicsImage.Contents?(v8, v9);
  outlined consume of GraphicsImage.Contents?((void *)v23, v22);
}

uint64_t Image.init(_systemName:colorPalette:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  type metadata accessor for ImageProviderBox<Image.InterpolationProvider>(0, &lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, (uint64_t)&type metadata for Image.NamedImageProvider);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  *(_DWORD *)(v4 + 32) = 0;
  *(_BYTE *)(v4 + 36) = 1;
  *(_OWORD *)(v4 + 40) = xmmword_2352AA850;
  *(_QWORD *)(v4 + 56) = a1;
  *(_QWORD *)(v4 + 64) = a2;
  *(_OWORD *)(v4 + 72) = xmmword_235260F00;
  *(_BYTE *)(v4 + 88) = 0;
  type metadata accessor for ImageProviderBox<Image.InterpolationProvider>(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.RenderingModeProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.RenderingModeProvider and conformance Image.RenderingModeProvider, (uint64_t)&type metadata for Image.RenderingModeProvider);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_BYTE *)(v5 + 24) = 1;
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t Image.init(_internalSystemName:colorPalette:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  type metadata accessor for ImageProviderBox<Image.InterpolationProvider>(0, &lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, (uint64_t)&type metadata for Image.NamedImageProvider);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  *(_DWORD *)(v4 + 32) = 0;
  *(_BYTE *)(v4 + 36) = 1;
  *(_OWORD *)(v4 + 40) = xmmword_235260EF0;
  *(_QWORD *)(v4 + 56) = a1;
  *(_QWORD *)(v4 + 64) = a2;
  *(_OWORD *)(v4 + 72) = xmmword_235260F00;
  *(_BYTE *)(v4 + 88) = 0;
  type metadata accessor for ImageProviderBox<Image.InterpolationProvider>(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.RenderingModeProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.RenderingModeProvider and conformance Image.RenderingModeProvider, (uint64_t)&type metadata for Image.RenderingModeProvider);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_BYTE *)(v5 + 24) = 1;
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t NamedImage.Key.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(_QWORD);
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  _QWORD v23[2];

  v3 = v1;
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for NamedImage.BitmapKey(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for NamedImage.Key(0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TypesettingLanguage(v3, (uint64_t)v14, v15);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v14, v5);
    ProtobufEncoder.encodeVarint(_:)(0x12uLL);
    v16 = a1[1];
    v17 = (_QWORD *)a1[3];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
    v19 = v17[2];
    v18 = v17[3];
    v11 = (char *)(v19 + 1);
    if (v19 >= v18 >> 1)
      v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v19 + 1, 1, v17);
    v17[2] = v11;
    v17[v19 + 4] = v16;
    a1[3] = v17;
    if (!__OFADD__(v16, 1))
    {
      a1[1] = v16 + 1;
      UUID.encode(to:)();
      if (!v2)
        ProtobufEncoder.endLengthDelimited()();
      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
    __break(1u);
    goto LABEL_18;
  }
  outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v14, (uint64_t)v11, type metadata accessor for NamedImage.BitmapKey);
  ProtobufEncoder.encodeVarint(_:)(0xAuLL);
  v8 = (char *)a1[1];
  v17 = (_QWORD *)a1[3];
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
LABEL_18:
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
    v17 = (_QWORD *)result;
  }
  v22 = v17[2];
  v21 = v17[3];
  if (v22 >= v21 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v22 + 1, 1, v17);
    v17 = (_QWORD *)result;
  }
  v17[2] = v22 + 1;
  v17[v22 + 4] = v8;
  a1[3] = v17;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
  }
  else
  {
    a1[1] = v8 + 1;
    NamedImage.BitmapKey.encode(to:)(a1);
    if (!v2)
      ProtobufEncoder.endLengthDelimited()();
    return outlined destroy of TypesettingConfiguration((uint64_t)v11, type metadata accessor for NamedImage.BitmapKey);
  }
  return result;
}

uint64_t NamedImage.Key.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;

  v3 = v2;
  v44 = a2;
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for NamedImage.Key?, type metadata accessor for NamedImage.Key, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v44 - v9;
  MEMORY[0x24BDAC7A8](v11);
  v48 = (uint64_t)&v44 - v12;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v44 - v14;
  v16 = type metadata accessor for NamedImage.Key(0);
  v47 = *(_QWORD *)(v16 - 8);
  v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56);
  v17(v15, 1, 1, v16);
  v18 = a1[1];
  v19 = a1[2];
  if (v18 < v19)
  {
    v45 = v17;
    v46 = v15;
    do
    {
      v25 = a1[3];
      if (v25)
      {
        v26 = a1[4];
        if (v18 < v26)
          goto LABEL_13;
        if (v26 < v18)
          goto LABEL_47;
        a1[3] = 0;
      }
      v25 = ProtobufDecoder.decodeVarint()();
      if (v3)
        return outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v15, &lazy cache variable for type metadata for NamedImage.Key?, type metadata accessor for NamedImage.Key);
      if (v25 <= 7)
        goto LABEL_47;
LABEL_13:
      if (v25 >> 3 == 2)
      {
        if ((v25 & 7) != 2)
          goto LABEL_47;
        v27 = (_QWORD *)a1[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27[2] + 1, 1, v27);
        v29 = v27[2];
        v28 = v27[3];
        v17 = (void (*)(char *, uint64_t, uint64_t, uint64_t))(v29 + 1);
        if (v29 >= v28 >> 1)
          v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v28 > 1), v29 + 1, 1, v27);
        v27[2] = v17;
        v27[v29 + 4] = v19;
        a1[5] = v27;
        v30 = ProtobufDecoder.decodeVarint()();
        if (v3)
        {
          v15 = v46;
          return outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v15, &lazy cache variable for type metadata for NamedImage.Key?, type metadata accessor for NamedImage.Key);
        }
        v15 = v46;
        if (v30 < 0)
        {
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
          __break(1u);
          v40 = specialized _ArrayBuffer._consumeAndCreateNew()(v17);
          v41 = v40[2];
          if (!v41)
          {
            __break(1u);
            v40 = (_QWORD *)a1[5];
            if (v40[2])
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
              {
                v41 = v40[2];
                if (v41)
                  goto LABEL_54;
LABEL_64:
                __break(1u);
                JUMPOUT(0x234E976A0);
              }
            }
            else
            {
              __break(1u);
            }
            v40 = specialized _ArrayBuffer._consumeAndCreateNew()(v40);
            v41 = v40[2];
            if (!v41)
              goto LABEL_64;
          }
LABEL_54:
          v42 = v41 - 1;
          v43 = v40[v42 + 4];
          v40[2] = v42;
          a1[5] = v40;
          a1[2] = v43;
          return outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v15, &lazy cache variable for type metadata for NamedImage.Key?, type metadata accessor for NamedImage.Key);
        }
        v31 = a1[1] + v30;
        if (v19 < v31)
          goto LABEL_47;
        a1[2] = v31;
        UUID.init(from:)(a1);
        v32 = (_QWORD *)a1[5];
        if (!v32[2])
          goto LABEL_58;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v32 = specialized _ArrayBuffer._consumeAndCreateNew()(v32);
        v17 = v45;
        v33 = v32[2];
        if (!v33)
          goto LABEL_59;
        v34 = v33 - 1;
        v35 = v32[v34 + 4];
        v32[2] = v34;
        a1[5] = v32;
        a1[2] = v35;
        outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v15, &lazy cache variable for type metadata for NamedImage.Key?, type metadata accessor for NamedImage.Key);
        swift_storeEnumTagMultiPayload();
        v17(v7, 0, 1, v16);
        v24 = (uint64_t)v7;
      }
      else
      {
        if (v25 >> 3 != 1)
        {
          switch(v25 & 7)
          {
            case 0uLL:
              ProtobufDecoder.decodeVarint()();
              if (v3)
                return outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v15, &lazy cache variable for type metadata for NamedImage.Key?, type metadata accessor for NamedImage.Key);
              goto LABEL_6;
            case 1uLL:
              v36 = a1[1] + 8;
              if (v19 < v36)
                goto LABEL_47;
              goto LABEL_44;
            case 2uLL:
              v37 = ProtobufDecoder.decodeVarint()();
              if (v3)
                return outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v15, &lazy cache variable for type metadata for NamedImage.Key?, type metadata accessor for NamedImage.Key);
              if (v37 < 0)
                goto LABEL_60;
              v36 = a1[1] + v37;
              if (v19 < v36)
                goto LABEL_47;
LABEL_44:
              a1[1] = v36;
              break;
            case 5uLL:
              v36 = a1[1] + 4;
              if (v19 >= v36)
                goto LABEL_44;
              goto LABEL_47;
            default:
              goto LABEL_47;
          }
          goto LABEL_6;
        }
        if ((v25 & 7) != 2)
          goto LABEL_47;
        ProtobufDecoder.beginMessage()();
        if (v3)
          return outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v15, &lazy cache variable for type metadata for NamedImage.Key?, type metadata accessor for NamedImage.Key);
        NamedImage.BitmapKey.init(from:)((unint64_t)a1, v10);
        v3 = 0;
        v20 = (_QWORD *)a1[5];
        if (!v20[2])
          goto LABEL_56;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v21 = v20[2];
          if (!v21)
            goto LABEL_57;
        }
        else
        {
          v20 = specialized _ArrayBuffer._consumeAndCreateNew()(v20);
          v21 = v20[2];
          if (!v21)
            goto LABEL_57;
        }
        v22 = v21 - 1;
        v23 = v20[v22 + 4];
        v20[2] = v22;
        a1[5] = v20;
        a1[2] = v23;
        outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v15, &lazy cache variable for type metadata for NamedImage.Key?, type metadata accessor for NamedImage.Key);
        swift_storeEnumTagMultiPayload();
        v17(v10, 0, 1, v16);
        v24 = (uint64_t)v10;
      }
      _sypSgWObTm_0(v24, (uint64_t)v15, (uint64_t)&lazy cache variable for type metadata for NamedImage.Key?, (uint64_t)type metadata accessor for NamedImage.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
LABEL_6:
      v18 = a1[1];
      v19 = a1[2];
    }
    while (v18 < v19);
  }
  a1[3] = 0;
  v38 = v48;
  outlined init with copy of TimeZone?((uint64_t)v15, v48, &lazy cache variable for type metadata for NamedImage.Key?, type metadata accessor for NamedImage.Key);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v38, 1, v16) == 1)
  {
    outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?(v38, &lazy cache variable for type metadata for NamedImage.Key?, type metadata accessor for NamedImage.Key);
LABEL_47:
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    swift_willThrow();
    return outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v15, &lazy cache variable for type metadata for NamedImage.Key?, type metadata accessor for NamedImage.Key);
  }
  outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v15, &lazy cache variable for type metadata for NamedImage.Key?, type metadata accessor for NamedImage.Key);
  return outlined init with take of LocalizedStringKey.FormatArgument(v38, v44, type metadata accessor for NamedImage.Key);
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance NamedImage.Key(_QWORD *a1)
{
  return NamedImage.Key.encode(to:)(a1);
}

uint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance NamedImage.Key@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return NamedImage.Key.init(from:)(a1, a2);
}

void NamedImage.BitmapKey.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  unsigned __int8 *v3;
  __int16 v5;
  int v6;
  __int16 v7;
  BOOL v8;
  double v9;
  double v10;
  Swift::UInt v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  void *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  Swift::UInt v19;
  Swift::UInt v20;

  v3 = v1;
  v5 = *v3;
  v6 = v3[1];
  ProtobufEncoder.encodeVarint(_:)(0xAuLL);
  if (v6)
    v7 = 256;
  else
    v7 = 0;
  specialized ProtobufEncoder.encodeMessage<A>(_:)(v7 | v5);
  if (v2)
    return;
  if (*((_QWORD *)v3 + 1))
    v8 = 0;
  else
    v8 = *((_QWORD *)v3 + 2) == 0xE000000000000000;
  if (!v8 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    ProtobufEncoder.stringFieldAlways(_:_:)(2);
  v9 = *((double *)v3 + 3);
  if (v9 != 1.0)
  {
    v10 = fabs(v9);
    if (v10 >= 65536.0)
      v11 = 25;
    else
      v11 = 29;
    ProtobufEncoder.encodeVarint(_:)(v11);
    if (v10 < 65536.0)
    {
      v12 = a1[1];
      v13 = v12 + 4;
      if (!__OFADD__(v12, 4))
      {
        *(float *)&v9 = v9;
        if (a1[2] >= v13)
        {
          a1[1] = v13;
          *(_DWORD *)(*a1 + v12) = LODWORD(v9);
          goto LABEL_22;
        }
LABEL_43:
        *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v13) = LODWORD(v9);
        goto LABEL_22;
      }
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    v14 = a1[1];
    v13 = v14 + 8;
    if (__OFADD__(v14, 8))
      goto LABEL_42;
    if (a1[2] < v13)
    {
      *(double *)ProtobufEncoder.growBufferSlow(to:)(v13) = v9;
    }
    else
    {
      a1[1] = v13;
      *(double *)(*a1 + v14) = v9;
    }
  }
LABEL_22:
  v15 = (void *)*((_QWORD *)v3 + 4);
  if (v15)
  {
    outlined copy of Image.Location(*((id *)v3 + 4));
    outlined copy of Image.Location(v15);
    outlined consume of Image.Location(v15);
    outlined consume of Image.Location(0);
    specialized ProtobufEncoder.messageField<A>(_:_:)(4, (uint64_t)v15);
  }
  else
  {
    outlined consume of Image.Location(0);
  }
  outlined consume of Image.Location(v15);
  if ((v3[40] & 1) != 0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x28uLL);
    ProtobufEncoder.encodeVarint(_:)(1uLL);
  }
  v16 = (int *)type metadata accessor for NamedImage.BitmapKey(0);
  if ((v3[v16[10]] & 1) != 0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x30uLL);
    ProtobufEncoder.encodeVarint(_:)(1uLL);
  }
  v17 = *(_QWORD *)&v3[v16[11]];
  if (v17)
  {
    ProtobufEncoder.encodeVarint(_:)(0x38uLL);
    ProtobufEncoder.encodeVarint(_:)((2 * v17) ^ (v17 >> 63));
  }
  v18 = *(_QWORD *)&v3[v16[12]];
  if (v18)
  {
    ProtobufEncoder.encodeVarint(_:)(0x40uLL);
    ProtobufEncoder.encodeVarint(_:)((2 * v18) ^ (v18 >> 63));
  }
  if ((char)v3[v16[13]] < 0)
    goto LABEL_45;
  v19 = v3[v16[13]];
  if (v3[v16[13]])
  {
    ProtobufEncoder.encodeVarint(_:)(0x48uLL);
    ProtobufEncoder.encodeVarint(_:)(v19);
  }
  if ((char)v3[v16[14]] < 0)
  {
LABEL_45:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v20 = v3[v16[14]];
    if (v3[v16[14]])
    {
      ProtobufEncoder.encodeVarint(_:)(0x50uLL);
      ProtobufEncoder.encodeVarint(_:)(v20);
    }
    ProtobufEncoder.encodeVarint(_:)(0x5AuLL);
    specialized ProtobufEncoder.encodeMessage<A>(_:)();
  }
}

uint64_t NamedImage.BitmapKey.init(from:)@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  double v22;
  id v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  double *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t (*v75)(void);
  uint64_t v76;
  unint64_t v77;
  float *v78;
  float v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t result;
  __int16 v84;
  uint64_t v85;
  char *v86;
  uint64_t (*v87)(uint64_t);
  _BYTE *v88;
  unint64_t v89;
  int *v90;
  _QWORD *v91;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  _BYTE *v104;
  char *v105;
  char *v106;
  void (*v107)(char *, uint64_t, uint64_t, uint64_t, double);
  char *v108;
  unint64_t v109;
  _QWORD *v110;
  BOOL v111[2];
  _QWORD *v112;

  v3 = v2;
  v104 = a2;
  v5 = type metadata accessor for Locale();
  v6 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8];
  v7 = *(_QWORD **)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v105 = (char *)&v97 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.Encoding();
  MEMORY[0x24BDAC7A8](v9);
  v108 = (char *)&v97 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Locale?, v6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v11);
  v103 = (uint64_t)&v97 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v97 - v14;
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v97 - v18;
  v107 = (void (*)(char *, uint64_t, uint64_t, uint64_t, double))v7[7];
  v107((char *)&v97 - v18, 1, 1, v5, v17);
  v20 = *(_QWORD *)(a1 + 8);
  v21 = *(_QWORD *)(a1 + 16);
  if (v20 >= v21)
  {
    v23 = 0;
    *(_QWORD *)(a1 + 24) = 0;
    goto LABEL_4;
  }
  v98 = 0;
  v99 = 0;
  v100 = 0;
  v101 = 0;
  v97 = 0;
  v102 = 2;
  v109 = 0xE000000000000000;
  v110 = 0;
  v22 = 1.0;
  v106 = v19;
  while (2)
  {
    v24 = *(_QWORD *)(a1 + 24);
    if (v24)
    {
      v28 = *(_QWORD *)(a1 + 32);
      if (v20 < v28)
        goto LABEL_14;
      if (v28 < v20)
        goto LABEL_136;
      *(_QWORD *)(a1 + 24) = 0;
    }
    v29 = ProtobufDecoder.decodeVarint()();
    if (v3)
      goto LABEL_137;
    v24 = v29;
    if (v29 < 8)
      goto LABEL_136;
LABEL_14:
    switch(v24 >> 3)
    {
      case 1uLL:
        if ((v24 & 7) != 2)
          goto LABEL_136;
        v24 = *(_QWORD *)(a1 + 40);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v24 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v24 + 16) + 1, 1, (_QWORD *)v24);
        v31 = *(_QWORD *)(v24 + 16);
        v30 = *(_QWORD *)(v24 + 24);
        if (v31 >= v30 >> 1)
          v24 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v30 > 1), v31 + 1, 1, (_QWORD *)v24);
        *(_QWORD *)(v24 + 16) = v31 + 1;
        *(_QWORD *)(v24 + 8 * v31 + 32) = v21;
        *(_QWORD *)(a1 + 40) = v24;
        v32 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_146;
        v19 = v106;
        if ((v32 & 0x8000000000000000) == 0)
        {
          v33 = *(_QWORD *)(a1 + 8) + v32;
          if (v21 < v33)
            goto LABEL_136;
          *(_QWORD *)(a1 + 16) = v33;
          CatalogKey.init(from:)(a1, v111);
          v24 = *(_QWORD *)(a1 + 40);
          if (!*(_QWORD *)(v24 + 16))
            goto LABEL_163;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
            v34 = *(_QWORD *)(v24 + 16);
            if (!v34)
              goto LABEL_165;
          }
          else
          {
            v24 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v24);
            v34 = *(_QWORD *)(v24 + 16);
            if (!v34)
              goto LABEL_165;
          }
          v35 = v34 - 1;
          v36 = *(_QWORD *)(v24 + 8 * v35 + 32);
          *(_QWORD *)(v24 + 16) = v35;
          *(_QWORD *)(a1 + 40) = v24;
          *(_QWORD *)(a1 + 16) = v36;
          if (v111[1])
            v37 = 256;
          else
            v37 = 0;
          v102 = v37 | v111[0];
          goto LABEL_7;
        }
        __break(1u);
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        __break(1u);
LABEL_160:
        __break(1u);
LABEL_161:
        __break(1u);
LABEL_162:
        __break(1u);
LABEL_163:
        __break(1u);
LABEL_164:
        __break(1u);
LABEL_165:
        __break(1u);
LABEL_166:
        __break(1u);
LABEL_167:
        __break(1u);
LABEL_168:
        __break(1u);
LABEL_169:
        __break(1u);
LABEL_170:
        __break(1u);
LABEL_171:
        __break(1u);
LABEL_172:
        __break(1u);
LABEL_173:
        __break(1u);
LABEL_174:
        __break(1u);
LABEL_175:
        __break(1u);
        __break(1u);
        v91 = specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v24);
        v93 = v91[2];
        if (v93)
          goto LABEL_153;
        __break(1u);
        v91 = *(_QWORD **)(a1 + 40);
        if (v91[2])
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v7 = v110;
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            v93 = v91[2];
            if (v93)
            {
LABEL_153:
              v95 = v93 - 1;
              v96 = v91[v95 + 4];
              v91[2] = v95;
              outlined consume of Image.Location(v7);
              swift_bridgeObjectRelease();
              *(_QWORD *)(a1 + 40) = v91;
              *(_QWORD *)(a1 + 16) = v96;
              return outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v19, &lazy cache variable for type metadata for Locale?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8]);
            }
LABEL_150:
            __break(1u);
            v91 = *(_QWORD **)(a1 + 40);
            if (v91[2])
            {
              v94 = swift_isUniquelyReferenced_nonNull_native();
              v7 = v110;
              if ((v94 & 1) != 0)
              {
                v93 = v91[2];
                if (v93)
                  goto LABEL_153;
LABEL_182:
                __break(1u);
                JUMPOUT(0x234E98734);
              }
            }
            else
            {
              __break(1u);
            }
            v91 = specialized _ArrayBuffer._consumeAndCreateNew()(v91);
            v93 = v91[2];
            if (v93)
              goto LABEL_153;
            goto LABEL_182;
          }
        }
        else
        {
          __break(1u);
        }
        v91 = specialized _ArrayBuffer._consumeAndCreateNew()(v91);
        v93 = v91[2];
        if (v93)
          goto LABEL_153;
        goto LABEL_150;
      case 2uLL:
        swift_bridgeObjectRelease();
        if ((v24 & 7) != 2)
          goto LABEL_145;
        v38 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_155;
        v24 = v38;
        if (v38 < 0)
          goto LABEL_157;
        v39 = *(_QWORD *)(a1 + 8);
        if (v21 < v39 + v38)
        {
LABEL_145:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          goto LABEL_155;
        }
        *(_QWORD *)(a1 + 8) = v39 + v38;
        if (v38)
        {
          v40 = v39 - (_QWORD)objc_msgSend(objc_retainAutorelease(*(id *)a1), sel_bytes);
          v41 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          v43 = v42;
          if (__OFADD__(v40, v24))
            goto LABEL_166;
          if ((uint64_t)(v40 + v24) < v40)
            goto LABEL_167;
          v44 = v41;
          v45 = Data._Representation.subscript.getter();
          v47 = v46;
          outlined consume of Data._Representation(v44, v43);
          v19 = v106;
        }
        else
        {
          v45 = 0;
          v47 = 0xC000000000000000;
        }
        static String.Encoding.utf8.getter();
        v76 = String.init(data:encoding:)();
        if (v77)
        {
          v97 = v76;
          v109 = v77;
          outlined consume of Data._Representation(v45, v47);
LABEL_7:
          v20 = *(_QWORD *)(a1 + 8);
          v21 = *(_QWORD *)(a1 + 16);
          if (v20 >= v21)
          {
            *(_QWORD *)(a1 + 24) = 0;
            v84 = v102;
            if (v102 != 2)
            {
              v85 = v103;
              outlined init with copy of TimeZone?((uint64_t)v19, v103, &lazy cache variable for type metadata for Locale?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8]);
              if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v7[6])(v85, 1, v5) == 1)
              {
                v86 = v105;
                static Locale.current.getter();
                v87 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8];
                outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v19, &lazy cache variable for type metadata for Locale?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8]);
                outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?(v85, &lazy cache variable for type metadata for Locale?, v87);
              }
              else
              {
                outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v19, &lazy cache variable for type metadata for Locale?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8]);
                v86 = v105;
                ((void (*)(char *, uint64_t, uint64_t))v7[4])(v105, v85, v5);
              }
              v88 = v104;
              *v104 = v84 & 1;
              v88[1] = HIBYTE(v84) & 1;
              v89 = v109;
              *((_QWORD *)v88 + 1) = v97;
              *((_QWORD *)v88 + 2) = v89;
              *((double *)v88 + 3) = v22;
              *((_QWORD *)v88 + 4) = v110;
              v88[40] = v99 & 1;
              v90 = (int *)type metadata accessor for NamedImage.BitmapKey(0);
              result = ((uint64_t (*)(_BYTE *, char *, uint64_t))v7[4])(&v88[v90[9]], v86, v5);
              v88[v90[10]] = BYTE4(v99) & 1;
              *(_QWORD *)&v88[v90[11]] = v100;
              *(_QWORD *)&v88[v90[12]] = v101;
              v88[v90[13]] = v98;
              v88[v90[14]] = BYTE4(v98);
              return result;
            }
            swift_bridgeObjectRelease();
            v23 = v110;
LABEL_4:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            swift_willThrow();
            outlined consume of Image.Location(v23);
            return outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v19, &lazy cache variable for type metadata for Locale?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8]);
          }
          continue;
        }
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        outlined consume of Data._Representation(v45, v47);
LABEL_155:
        outlined consume of Image.Location(v110);
        return outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v19, &lazy cache variable for type metadata for Locale?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8]);
      case 3uLL:
        v48 = v24 & 7;
        if (v48 == 5)
        {
          v78 = *(float **)(a1 + 8);
          if (v21 < (unint64_t)(v78 + 1))
            goto LABEL_136;
          v79 = *v78;
          *(_QWORD *)(a1 + 8) = v78 + 1;
          v22 = v79;
        }
        else
        {
          if (v48 == 2)
          {
            v80 = ProtobufDecoder.decodeVarint()();
            if (v3)
              goto LABEL_137;
            if (v80 < 0)
              goto LABEL_174;
            v49 = *(double **)(a1 + 8);
            if (v21 < (unint64_t)v49 + v80)
              goto LABEL_136;
            *(_QWORD *)(a1 + 24) = 25;
            *(_QWORD *)(a1 + 32) = (char *)v49 + v80;
          }
          else
          {
            if (v48 != 1)
              goto LABEL_136;
            v49 = *(double **)(a1 + 8);
          }
          if (v21 < (unint64_t)(v49 + 1))
            goto LABEL_136;
          v22 = *v49;
          *(_QWORD *)(a1 + 8) = v49 + 1;
        }
        goto LABEL_7;
      case 4uLL:
        if ((v24 & 7) != 2)
          goto LABEL_136;
        ProtobufDecoder.beginMessage()();
        if (v3)
          goto LABEL_137;
        Image.Location.init(from:)((_QWORD *)a1, (uint64_t *)&v112);
        v3 = 0;
        v24 = *(_QWORD *)(a1 + 40);
        if (!*(_QWORD *)(v24 + 16))
          goto LABEL_161;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v25 = *(_QWORD *)(v24 + 16);
          if (!v25)
            goto LABEL_162;
        }
        else
        {
          v24 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v24);
          v25 = *(_QWORD *)(v24 + 16);
          if (!v25)
            goto LABEL_162;
        }
        v26 = v25 - 1;
        v27 = *(_QWORD *)(v24 + 8 * v26 + 32);
        *(_QWORD *)(v24 + 16) = v26;
        outlined consume of Image.Location(v110);
        *(_QWORD *)(a1 + 40) = v24;
        *(_QWORD *)(a1 + 16) = v27;
        v110 = v112;
        goto LABEL_7;
      case 5uLL:
        if ((v24 & 7) == 0)
          goto LABEL_57;
        if ((v24 & 7) != 2)
          goto LABEL_136;
        v50 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_137;
        if (v50 < 0)
          goto LABEL_168;
        v51 = *(_QWORD *)(a1 + 8) + v50;
        if (v21 < v51)
          goto LABEL_136;
        *(_QWORD *)(a1 + 24) = 40;
        *(_QWORD *)(a1 + 32) = v51;
LABEL_57:
        v52 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_137;
        LODWORD(v99) = v52 != 0;
        goto LABEL_7;
      case 6uLL:
        if ((v24 & 7) == 0)
          goto LABEL_65;
        if ((v24 & 7) != 2)
          goto LABEL_136;
        v53 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_137;
        if (v53 < 0)
          goto LABEL_169;
        v54 = *(_QWORD *)(a1 + 8) + v53;
        if (v21 < v54)
          goto LABEL_136;
        *(_QWORD *)(a1 + 24) = 48;
        *(_QWORD *)(a1 + 32) = v54;
LABEL_65:
        v55 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_137;
        HIDWORD(v99) = v55 == 1;
        goto LABEL_7;
      case 7uLL:
        if ((v24 & 7) == 0)
          goto LABEL_73;
        if ((v24 & 7) != 2)
          goto LABEL_136;
        v56 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_137;
        if (v56 < 0)
          goto LABEL_170;
        v57 = *(_QWORD *)(a1 + 8) + v56;
        if (v21 < v57)
          goto LABEL_136;
        *(_QWORD *)(a1 + 24) = 56;
        *(_QWORD *)(a1 + 32) = v57;
LABEL_73:
        v58 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_137;
        v100 = -(v58 & 1) ^ (v58 >> 1);
        goto LABEL_7;
      case 8uLL:
        if ((v24 & 7) == 0)
          goto LABEL_81;
        if ((v24 & 7) != 2)
          goto LABEL_136;
        v59 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_137;
        if (v59 < 0)
          goto LABEL_171;
        v60 = *(_QWORD *)(a1 + 8) + v59;
        if (v21 < v60)
          goto LABEL_136;
        *(_QWORD *)(a1 + 24) = 64;
        *(_QWORD *)(a1 + 32) = v60;
LABEL_81:
        v61 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_137;
        v101 = -(v61 & 1) ^ (v61 >> 1);
        goto LABEL_7;
      case 9uLL:
        if ((v24 & 7) == 0)
          goto LABEL_89;
        if ((v24 & 7) != 2)
          goto LABEL_136;
        v62 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_137;
        if (v62 < 0)
          goto LABEL_172;
        v63 = *(_QWORD *)(a1 + 8) + v62;
        if (v21 < v63)
          goto LABEL_136;
        *(_QWORD *)(a1 + 24) = 72;
        *(_QWORD *)(a1 + 32) = v63;
LABEL_89:
        v64 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_137;
        if (v64 < 0)
          goto LABEL_159;
        LODWORD(v98) = v64;
        goto LABEL_7;
      case 0xAuLL:
        if ((v24 & 7) == 0)
          goto LABEL_98;
        if ((v24 & 7) != 2)
          goto LABEL_136;
        v65 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_137;
        if (v65 < 0)
          goto LABEL_173;
        v66 = *(_QWORD *)(a1 + 8) + v65;
        if (v21 < v66)
          goto LABEL_136;
        *(_QWORD *)(a1 + 24) = 80;
        *(_QWORD *)(a1 + 32) = v66;
LABEL_98:
        v67 = ProtobufDecoder.decodeVarint()();
        if (v3)
          goto LABEL_137;
        if (v67 < 0)
          goto LABEL_160;
        HIDWORD(v98) = v67;
        goto LABEL_7;
      case 0xBuLL:
        if ((v24 & 7) != 2)
          goto LABEL_136;
        v24 = *(_QWORD *)(a1 + 40);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v24 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v24 + 16) + 1, 1, (_QWORD *)v24);
        v69 = *(_QWORD *)(v24 + 16);
        v68 = *(_QWORD *)(v24 + 24);
        if (v69 >= v68 >> 1)
          v24 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v68 > 1), v69 + 1, 1, (_QWORD *)v24);
        *(_QWORD *)(v24 + 16) = v69 + 1;
        *(_QWORD *)(v24 + 8 * v69 + 32) = v21;
        *(_QWORD *)(a1 + 40) = v24;
        v70 = ProtobufDecoder.decodeVarint()();
        if (v3)
        {
LABEL_146:
          outlined consume of Image.Location(v110);
          swift_bridgeObjectRelease();
          v19 = v106;
          return outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v19, &lazy cache variable for type metadata for Locale?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8]);
        }
        v19 = v106;
        if (v70 < 0)
          goto LABEL_158;
        v71 = *(_QWORD *)(a1 + 8) + v70;
        if (v21 < v71)
          goto LABEL_136;
        *(_QWORD *)(a1 + 16) = v71;
        Locale.init(from:)(a1);
        v24 = *(_QWORD *)(a1 + 40);
        if (!*(_QWORD *)(v24 + 16))
          goto LABEL_164;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v72 = *(_QWORD *)(v24 + 16);
          if (!v72)
            goto LABEL_135;
        }
        else
        {
          v24 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v24);
          v72 = *(_QWORD *)(v24 + 16);
          if (!v72)
          {
LABEL_135:
            __break(1u);
LABEL_136:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            swift_willThrow();
LABEL_137:
            outlined consume of Image.Location(v110);
            swift_bridgeObjectRelease();
            return outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v19, &lazy cache variable for type metadata for Locale?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8]);
          }
        }
        v73 = v72 - 1;
        v74 = *(_QWORD *)(v24 + 8 * v73 + 32);
        *(_QWORD *)(v24 + 16) = v73;
        *(_QWORD *)(a1 + 40) = v24;
        *(_QWORD *)(a1 + 16) = v74;
        v75 = MEMORY[0x24BDCEEA8];
        outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v19, &lazy cache variable for type metadata for Locale?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8]);
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))v107)(v15, 0, 1, v5);
        _sypSgWObTm_0((uint64_t)v15, (uint64_t)v19, (uint64_t)&lazy cache variable for type metadata for Locale?, (uint64_t)v75, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for [(_:)]);
        goto LABEL_7;
      default:
        switch(v24 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (v3)
              goto LABEL_137;
            goto LABEL_7;
          case 1uLL:
            v81 = *(_QWORD *)(a1 + 8) + 8;
            if (v21 < v81)
              goto LABEL_136;
            goto LABEL_131;
          case 2uLL:
            v82 = ProtobufDecoder.decodeVarint()();
            if (v3)
              goto LABEL_137;
            if (v82 < 0)
              goto LABEL_175;
            v81 = *(_QWORD *)(a1 + 8) + v82;
            if (v21 < v81)
              goto LABEL_136;
LABEL_131:
            *(_QWORD *)(a1 + 8) = v81;
            break;
          case 5uLL:
            v81 = *(_QWORD *)(a1 + 8) + 4;
            if (v21 >= v81)
              goto LABEL_131;
            goto LABEL_136;
          default:
            goto LABEL_136;
        }
        goto LABEL_7;
    }
  }
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance NamedImage.BitmapKey(_QWORD *a1)
{
  NamedImage.BitmapKey.encode(to:)(a1);
}

uint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance NamedImage.BitmapKey@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return NamedImage.BitmapKey.init(from:)(a1, a2);
}

uint64_t Image.init(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  id v20;
  uint64_t result;
  uint64_t v22;

  v2 = type metadata accessor for NamedResource();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ResourceReference();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x23B7C55D8](v8);
  if ((*(unsigned int (**)(char *, uint64_t))(v7 + 88))(v10, v6) == *MEMORY[0x24BDC6E00])
  {
    (*(void (**)(char *, uint64_t))(v7 + 96))(v10, v6);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v10, v2);
    v11 = NamedResource.name.getter();
    v13 = v12;
    v14 = (void *)NamedResource.bundle.getter();
    type metadata accessor for LocalizedTextStorage();
    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 16) = v11;
    *(_QWORD *)(v15 + 24) = v13;
    *(_BYTE *)(v15 + 32) = 0;
    v16 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v15 + 40) = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v15 + 48) = 0;
    *(_QWORD *)(v15 + 56) = 0;
    *(_QWORD *)(v15 + 64) = v14;
    type metadata accessor for ImageProviderBox<Image.InterpolationProvider>(0, &lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, (uint64_t)&type metadata for Image.NamedImageProvider);
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = v11;
    *(_QWORD *)(v17 + 24) = v13;
    *(_DWORD *)(v17 + 32) = 0;
    *(_BYTE *)(v17 + 36) = 1;
    *(_QWORD *)(v17 + 40) = v14;
    *(_QWORD *)(v17 + 48) = 2;
    *(_QWORD *)(v17 + 56) = v15;
    *(_OWORD *)(v17 + 64) = xmmword_235260F20;
    *(_QWORD *)(v17 + 80) = v16;
    *(_BYTE *)(v17 + 88) = 0;
    v18 = type metadata accessor for ImageResource();
    v19 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8);
    swift_bridgeObjectRetain();
    v20 = v14;
    v19(a1, v18);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return v17;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

id @nonobjc CUICatalog.init(url:)(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  id v10;
  id v11;
  uint64_t v12;
  id v14;
  NSURL *v15;

  v2 = v1;
  v15 = (NSURL *)*MEMORY[0x24BDAC8D0];
  URL._bridgeToObjectiveC()(v15);
  v5 = v4;
  v14 = 0;
  v6 = objc_msgSend(v2, sel_initWithURL_error_, v4, &v14);

  v7 = v14;
  if (v6)
  {
    v8 = type metadata accessor for URL();
    v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
    v10 = v7;
    v9(a1, v8);
  }
  else
  {
    v11 = v14;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    v12 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a1, v12);
  }
  return v6;
}

unint64_t lazy protocol witness table accessor for type NamedImage.Errors and conformance NamedImage.Errors()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NamedImage.Errors and conformance NamedImage.Errors;
  if (!lazy protocol witness table cache variable for type NamedImage.Errors and conformance NamedImage.Errors)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for NamedImage.Errors, &type metadata for NamedImage.Errors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NamedImage.Errors and conformance NamedImage.Errors);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NamedImage.Errors and conformance NamedImage.Errors;
  if (!lazy protocol witness table cache variable for type NamedImage.Errors and conformance NamedImage.Errors)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for NamedImage.Errors, &type metadata for NamedImage.Errors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NamedImage.Errors and conformance NamedImage.Errors);
  }
  return result;
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unint64_t v4;
  size_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD v10[2];

  v2 = isStackAllocationSafe;
  v10[1] = *MEMORY[0x24BDAC8D0];
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = (unint64_t)((1 << v3) + 63) >> 6;
  v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    bzero((char *)v10 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    specialized closure #1 in _NativeDictionary.filter(_:)((_QWORD *)((char *)v10 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v2);
    if (v1)
      swift_willThrow();
    else
      return v6;
  }
  else
  {
    v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    specialized closure #1 in _NativeDictionary.filter(_:)((unint64_t *)v7, v4, v2);
    v2 = v8;
    MEMORY[0x23B7C9D54](v7, -1, -1);
  }
  return v2;
}

void specialized closure #1 in _NativeDictionary.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  void (*v21)(char *, unint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void (*v26)(char *, uint64_t);
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  BOOL v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  int64_t v43;
  char v44[8];

  v33 = a2;
  v34 = a1;
  type metadata accessor for (key: URL, value: NamedImage.Cache.WeakCatalog)();
  v40 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v39 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v38 = (char *)&v33 - v7;
  v8 = type metadata accessor for URL();
  v9 = *(_QWORD **)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = 0;
  v41 = (_QWORD *)a3;
  v13 = *(_QWORD *)(a3 + 64);
  v35 = 0;
  v36 = a3 + 64;
  v14 = 1 << *(_BYTE *)(a3 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v37 = (unint64_t)(v14 + 63) >> 6;
  v18 = (uint64_t)v38;
  v17 = v39;
  while (v16)
  {
    v42 = (v16 - 1) & v16;
    v43 = v12;
    v19 = __clz(__rbit64(v16)) | (v12 << 6);
LABEL_5:
    v20 = v41;
    v21 = (void (*)(char *, unint64_t, uint64_t))v9[2];
    v21(v11, v41[6] + v9[9] * v19, v8);
    outlined init with copy of NamedImage.Cache.WeakCatalog(v20[7] + 8 * v19, (uint64_t)v44);
    v22 = v40;
    v23 = v18 + *(int *)(v40 + 48);
    v21((char *)v18, (unint64_t)v11, v8);
    outlined init with copy of NamedImage.Cache.WeakCatalog((uint64_t)v44, v23);
    v24 = (uint64_t)&v17[*(int *)(v22 + 48)];
    v21(v17, v18, v8);
    outlined init with copy of NamedImage.Cache.WeakCatalog(v23, v24);
    v25 = (void *)MEMORY[0x23B7C9E44](v24);
    outlined destroy of TypesettingConfiguration(v18, (uint64_t (*)(_QWORD))type metadata accessor for (key: URL, value: NamedImage.Cache.WeakCatalog));
    outlined destroy of weak GestureGraphDelegate?(v24);
    if (v25)
    {

      v31 = (void (*)(char *, uint64_t))v9[1];
      v31(v17, v8);
      outlined destroy of weak GestureGraphDelegate?((uint64_t)v44);
      v31(v11, v8);
      *(unint64_t *)((char *)v34 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v32 = __OFADD__(v35++, 1);
      v16 = v42;
      v12 = v43;
      if (v32)
      {
        __break(1u);
LABEL_25:
        specialized _NativeDictionary.extractDictionary(using:count:)(v34, v33, v35, v41);
        return;
      }
    }
    else
    {
      v26 = (void (*)(char *, uint64_t))v9[1];
      v26(v17, v8);
      outlined destroy of weak GestureGraphDelegate?((uint64_t)v44);
      v26(v11, v8);
      v16 = v42;
      v12 = v43;
    }
  }
  v27 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
    goto LABEL_27;
  }
  if (v27 >= v37)
    goto LABEL_25;
  v28 = *(_QWORD *)(v36 + 8 * v27);
  v29 = v12 + 1;
  if (v28)
    goto LABEL_21;
  v29 = v12 + 2;
  if (v12 + 2 >= v37)
    goto LABEL_25;
  v28 = *(_QWORD *)(v36 + 8 * v29);
  if (v28)
    goto LABEL_21;
  v29 = v12 + 3;
  if (v12 + 3 >= v37)
    goto LABEL_25;
  v28 = *(_QWORD *)(v36 + 8 * v29);
  if (v28)
  {
LABEL_21:
    v42 = (v28 - 1) & v28;
    v43 = v29;
    v19 = __clz(__rbit64(v28)) + (v29 << 6);
    goto LABEL_5;
  }
  v30 = v12 + 4;
  if (v12 + 4 >= v37)
    goto LABEL_25;
  v28 = *(_QWORD *)(v36 + 8 * v30);
  if (v28)
  {
    v29 = v12 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    v29 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v29 >= v37)
      goto LABEL_25;
    v28 = *(_QWORD *)(v36 + 8 * v29);
    ++v30;
    if (v28)
      goto LABEL_21;
  }
LABEL_27:
  __break(1u);
}

BOOL specialized static NamedImage.BitmapKey.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  _BOOL8 result;
  BOOL v5;
  char v6;
  void *v7;
  void *v8;
  char v9;
  int *v10;

  result = 0;
  if (*a1 == *a2 && ((a1[1] ^ a2[1]) & 1) == 0)
  {
    v5 = *((_QWORD *)a1 + 1) == *((_QWORD *)a2 + 1) && *((_QWORD *)a1 + 2) == *((_QWORD *)a2 + 2);
    if (v5 || (v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v6 & 1) != 0))
    {
      if (*((double *)a1 + 3) != *((double *)a2 + 3))
        return 0;
      v7 = (void *)*((_QWORD *)a1 + 4);
      v8 = (void *)*((_QWORD *)a2 + 4);
      if (v7)
      {
        if (v7 == (void *)1)
        {
          if (v8 != (void *)1)
            goto LABEL_16;
          goto LABEL_14;
        }
        if ((unint64_t)v8 >= 2)
        {
          type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
          outlined copy of Image.Location(v8);
          outlined copy of Image.Location(v7);
          outlined copy of Image.Location(v8);
          outlined copy of Image.Location(v7);
          v9 = static NSObject.== infix(_:_:)();
          outlined consume of Image.Location(v7);
          outlined consume of Image.Location(v8);
          outlined consume of Image.Location(v8);
          outlined consume of Image.Location(v7);
          if ((v9 & 1) == 0)
            return 0;
LABEL_18:
          if (a1[40] == a2[40])
          {
            v10 = (int *)type metadata accessor for NamedImage.BitmapKey(0);
            if ((MEMORY[0x23B7C526C](&a1[v10[9]], &a2[v10[9]]) & 1) != 0
              && a1[v10[10]] == a2[v10[10]]
              && *(_QWORD *)&a1[v10[11]] == *(_QWORD *)&a2[v10[11]]
              && *(_QWORD *)&a1[v10[12]] == *(_QWORD *)&a2[v10[12]]
              && a1[v10[13]] == a2[v10[13]])
            {
              return a1[v10[14]] == a2[v10[14]];
            }
          }
          return 0;
        }
      }
      else if (!v8)
      {
LABEL_14:
        outlined consume of Image.Location(*((id *)a1 + 4));
        outlined consume of Image.Location(v7);
        goto LABEL_18;
      }
LABEL_16:
      outlined copy of Image.Location(*((id *)a2 + 4));
      outlined copy of Image.Location(v7);
      outlined consume of Image.Location(v7);
      outlined consume of Image.Location(v8);
      return 0;
    }
  }
  return result;
}

uint64_t specialized static NamedImage.Key.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t (*v23)(_QWORD);
  uint64_t v25;
  uint64_t v26;

  v26 = a2;
  v3 = type metadata accessor for UUID();
  v25 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for NamedImage.BitmapKey(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (unsigned __int8 *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for NamedImage.Key(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (unsigned __int8 *)&v25 - v13;
  type metadata accessor for (NamedImage.Key, NamedImage.Key)();
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (uint64_t)&v17[*(int *)(v18 + 48)];
  outlined init with copy of TypesettingLanguage(a1, (uint64_t)v17, type metadata accessor for NamedImage.Key);
  outlined init with copy of TypesettingLanguage(v26, v19, type metadata accessor for NamedImage.Key);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with copy of TypesettingLanguage((uint64_t)v17, (uint64_t)v11, type metadata accessor for NamedImage.Key);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v20 = v25;
      (*(void (**)(char *, uint64_t, uint64_t))(v25 + 32))(v5, v19, v3);
      v21 = static UUID.== infix(_:_:)();
      v22 = *(void (**)(char *, uint64_t))(v20 + 8);
      v22(v5, v3);
      v22(v11, v3);
LABEL_9:
      v23 = type metadata accessor for NamedImage.Key;
      goto LABEL_10;
    }
    (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v3);
  }
  else
  {
    outlined init with copy of TypesettingLanguage((uint64_t)v17, (uint64_t)v14, type metadata accessor for NamedImage.Key);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of LocalizedStringKey.FormatArgument(v19, (uint64_t)v8, type metadata accessor for NamedImage.BitmapKey);
      v21 = specialized static NamedImage.BitmapKey.== infix(_:_:)(v14, v8);
      outlined destroy of TypesettingConfiguration((uint64_t)v8, type metadata accessor for NamedImage.BitmapKey);
      outlined destroy of TypesettingConfiguration((uint64_t)v14, type metadata accessor for NamedImage.BitmapKey);
      goto LABEL_9;
    }
    outlined destroy of TypesettingConfiguration((uint64_t)v14, type metadata accessor for NamedImage.BitmapKey);
  }
  v21 = 0;
  v23 = (uint64_t (*)(_QWORD))type metadata accessor for (NamedImage.Key, NamedImage.Key);
LABEL_10:
  outlined destroy of TypesettingConfiguration((uint64_t)v17, v23);
  return v21 & 1;
}

BOOL specialized static NamedImage.VectorKey.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  _BOOL8 result;
  BOOL v5;
  char v6;
  int *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  char v11;

  result = 0;
  if (*a1 == *a2 && ((a1[1] ^ a2[1]) & 1) == 0)
  {
    v5 = *((_QWORD *)a1 + 1) == *((_QWORD *)a2 + 1) && *((_QWORD *)a1 + 2) == *((_QWORD *)a2 + 2);
    if (v5 || (v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v6 & 1) != 0))
    {
      if (*((double *)a1 + 3) == *((double *)a2 + 3) && a1[32] == a2[32])
      {
        v7 = (int *)type metadata accessor for NamedImage.VectorKey(0);
        if ((MEMORY[0x23B7C526C](&a1[v7[8]], &a2[v7[8]]) & 1) != 0
          && *(double *)&a1[v7[9]] == *(double *)&a2[v7[9]]
          && a1[v7[10]] == a2[v7[10]]
          && *(double *)&a1[v7[11]] == *(double *)&a2[v7[11]])
        {
          v8 = v7[12];
          v9 = *(void **)&a1[v8];
          v10 = *(void **)&a2[v8];
          if (!v9)
          {
            if (!v10)
            {
LABEL_19:
              outlined consume of Image.Location(*(id *)&a1[v8]);
              outlined consume of Image.Location(v9);
              return *(_QWORD *)&a1[v7[13]] == *(_QWORD *)&a2[v7[13]];
            }
LABEL_21:
            outlined copy of Image.Location(*(id *)&a2[v8]);
            outlined copy of Image.Location(v9);
            outlined consume of Image.Location(v9);
            outlined consume of Image.Location(v10);
            return 0;
          }
          if (v9 == (void *)1)
          {
            if (v10 != (void *)1)
              goto LABEL_21;
            goto LABEL_19;
          }
          if ((unint64_t)v10 < 2)
            goto LABEL_21;
          type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
          outlined copy of Image.Location(v10);
          outlined copy of Image.Location(v9);
          outlined copy of Image.Location(v10);
          outlined copy of Image.Location(v9);
          v11 = static NSObject.== infix(_:_:)();
          outlined consume of Image.Location(v9);
          outlined consume of Image.Location(v10);
          outlined consume of Image.Location(v10);
          outlined consume of Image.Location(v9);
          if ((v11 & 1) != 0)
            return *(_QWORD *)&a1[v7[13]] == *(_QWORD *)&a2[v7[13]];
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t specialized static Image.Location.== infix(_:_:)(uint64_t *a1, id *a2)
{
  uint64_t v2;
  id v3;
  char v4;

  v2 = *a1;
  v3 = *a2;
  if (!*a1)
  {
    if (!v3)
    {
      v2 = 0;
      v4 = 1;
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  if (v2 != 1)
  {
    if ((unint64_t)v3 >= 2)
    {
      type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
      outlined copy of Image.Location(v3);
      outlined copy of Image.Location((id)v2);
      v4 = static NSObject.== infix(_:_:)();
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  if (v3 != (id)1)
  {
LABEL_8:
    outlined copy of Image.Location(*a2);
    outlined copy of Image.Location((id)v2);
    v4 = 0;
    goto LABEL_10;
  }
  v2 = 1;
  v4 = 1;
LABEL_10:
  outlined consume of Image.Location((id)v2);
  outlined consume of Image.Location(v3);
  return v4 & 1;
}

uint64_t type metadata accessor for NamedImage.VectorKey(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for NamedImage.VectorKey);
}

uint64_t specialized static Image.NamedImageProvider.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  float v2;
  char v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  float v9;
  int v10;
  void *v11;
  void *v12;
  unint64_t v13;
  char v14;
  uint64_t result;
  char v16;
  void *v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[4];
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;

  v2 = *(float *)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 20);
  v4 = *(void **)(a1 + 24);
  v5 = *(void **)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  v9 = *(float *)(a2 + 16);
  v10 = *(unsigned __int8 *)(a2 + 20);
  v12 = *(void **)(a2 + 24);
  v11 = *(void **)(a2 + 32);
  v26 = *(_QWORD *)(a2 + 40);
  v13 = *(_QWORD *)(a2 + 56);
  v27 = *(_QWORD *)(a2 + 48);
  v28 = *(_QWORD *)(a2 + 64);
  v29 = *(_QWORD *)(a1 + 40);
  v24 = *(unsigned __int8 *)(a2 + 72);
  v25 = *(unsigned __int8 *)(a1 + 72);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
    || (v14 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v14 & 1) != 0))
  {
    if ((v3 & 1) != 0)
    {
      if (!v10)
        return 0;
    }
    else
    {
      if (v2 == v9)
        v16 = v10;
      else
        v16 = 1;
      if ((v16 & 1) != 0)
        return 0;
    }
    if (v4)
    {
      if (v4 == (void *)1)
      {
        if (v12 != (void *)1)
          goto LABEL_18;
        goto LABEL_16;
      }
      if ((unint64_t)v12 >= 2)
      {
        type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        outlined copy of Image.Location(v12);
        outlined copy of Image.Location(v4);
        outlined copy of Image.Location(v12);
        outlined copy of Image.Location(v4);
        v18 = static NSObject.== infix(_:_:)();
        outlined consume of Image.Location(v4);
        outlined consume of Image.Location(v12);
        outlined consume of Image.Location(v12);
        outlined consume of Image.Location(v4);
        if ((v18 & 1) == 0)
          return 0;
LABEL_21:
        if (v5 == (void *)2)
        {
          if (v11 == (void *)2)
            goto LABEL_35;
LABEL_25:
          outlined copy of Image.Location?(v5);
          outlined copy of Image.Location?(v11);
          outlined consume of Image.Location?(v5);
          outlined consume of Image.Location?(v11);
          return 0;
        }
        if (v11 == (void *)2)
          goto LABEL_25;
        if (v5)
        {
          if (v5 == (void *)1)
          {
            if (v11 != (void *)1)
              goto LABEL_33;
LABEL_31:
            outlined consume of Image.Location(v5);
            outlined consume of Image.Location(v5);
            goto LABEL_35;
          }
          if ((unint64_t)v11 >= 2)
          {
            type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
            outlined copy of Image.Location?(v5);
            outlined copy of Image.Location?(v5);
            outlined copy of Image.Location?(v11);
            outlined copy of Image.Location?(v5);
            outlined copy of Image.Location?(v11);
            v19 = static NSObject.== infix(_:_:)();
            outlined consume of Image.Location(v5);
            outlined consume of Image.Location(v11);
            outlined consume of Image.Location?(v11);
            outlined consume of Image.Location?(v5);
            outlined consume of Image.Location?(v5);
            if ((v19 & 1) == 0)
              return 0;
LABEL_35:
            v20 = v8;
            if (v8 >> 1 == 0xFFFFFFFF)
            {
              v21 = v13;
              v22 = v29;
              if (v13 >> 1 == 0xFFFFFFFF)
                return v25 ^ v24 ^ 1u;
            }
            else
            {
              v22 = v29;
              v31 = v29;
              v32 = v6;
              v33 = v8;
              v34 = v7;
              v21 = v13;
              if (v13 >> 1 != 0xFFFFFFFF)
              {
                v30[0] = v26;
                v30[1] = v27;
                v30[2] = v13;
                v30[3] = v28;
                outlined copy of AccessibilityImageLabel(v29, v6, v20);
                outlined copy of AccessibilityImageLabel(v29, v6, v20);
                v23 = static AccessibilityImageLabel.== infix(_:_:)(&v31, v30);
                outlined consume of AccessibilityImageLabel(v31, v32, v33);
                outlined consume of AccessibilityImageLabel?(v29, v6, v20);
                if ((v23 & 1) == 0)
                  return 0;
                return v25 ^ v24 ^ 1u;
              }
              outlined copy of AccessibilityImageLabel(v29, v6, v20);
              outlined copy of AccessibilityImageLabel(v29, v6, v20);
              outlined consume of AccessibilityImageLabel(v29, v6, v20);
            }
            outlined copy of AccessibilityImageLabel?(v26, v27, v21);
            outlined consume of AccessibilityImageLabel?(v22, v6, v20);
            outlined consume of AccessibilityImageLabel?(v26, v27, v21);
            return 0;
          }
        }
        else if (!v11)
        {
          goto LABEL_31;
        }
LABEL_33:
        outlined copy of Image.Location?(v5);
        outlined copy of Image.Location?(v11);
        outlined consume of Image.Location(v5);
        v17 = v11;
        goto LABEL_19;
      }
    }
    else if (!v12)
    {
LABEL_16:
      outlined consume of Image.Location(v4);
      outlined consume of Image.Location(v4);
      goto LABEL_21;
    }
LABEL_18:
    outlined copy of Image.Location(v12);
    outlined copy of Image.Location(v4);
    outlined consume of Image.Location(v4);
    v17 = v12;
LABEL_19:
    outlined consume of Image.Location(v17);
    return 0;
  }
  return result;
}

BOOL specialized static UUIDImageProvider.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double *v8;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  char v22;
  char v25;
  char v26;

  if ((static UUID.== infix(_:_:)() & 1) == 0)
    return 0;
  v4 = type metadata accessor for UUIDImageProvider(0);
  v5 = *(int *)(v4 + 20);
  v6 = *(double *)(a1 + v5);
  v7 = *(double *)(a1 + v5 + 8);
  v8 = (double *)(a2 + v5);
  if (v6 != *v8 || v7 != v8[1])
    return 0;
  v10 = *(int *)(v4 + 24);
  v11 = (uint64_t *)(a1 + v10);
  v12 = *(_QWORD *)(a1 + v10 + 24);
  v13 = (uint64_t *)(a2 + v10);
  v14 = v13[3];
  if (!v12)
    return !v14;
  if (!v14)
    return 0;
  v15 = *v11;
  v16 = v11[1];
  v17 = v11[2];
  v18 = *v13;
  v19 = v13[1];
  v20 = v13[2];
  if ((v17 & 1) != 0)
  {
    if ((v20 & 1) != 0)
    {
      v21 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 96);
      outlined copy of Text?(*v11, v11[1], v11[2], v12);
      outlined copy of Text?(v15, v16, v17, v12);
      outlined copy of Text?(v18, v19, v20, v14);
      v22 = 1;
      outlined copy of Text.Storage(v15, v16, 1);
      outlined copy of Text.Storage(v18, v19, 1);
      LOBYTE(v21) = v21(v18);
      outlined consume of Text.Storage(v18, v19, 1);
      outlined consume of Text.Storage(v15, v16, 1);
      if ((v21 & 1) != 0)
        goto LABEL_26;
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((v20 & 1) != 0)
  {
LABEL_16:
    v22 = (v11[2] & 1) == 0;
    outlined copy of Text?(*v11, v11[1], v11[2], v12);
    outlined copy of Text?(v15, v16, v17, v12);
    outlined copy of Text?(v18, v19, v20, v14);
LABEL_17:
    outlined consume of Text.Storage(v18, v19, v22);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(v15, v16, v17 & 1);
    swift_bridgeObjectRelease();
    outlined consume of Text?(v15, v16, v17, v12);
    return 0;
  }
  if (v15 == v18 && v16 == v19)
  {
    outlined copy of Text?(*v11, v11[1], v11[2], v12);
    outlined copy of Text?(v15, v16, v17, v12);
    outlined copy of Text?(v15, v16, v20, v14);
    goto LABEL_26;
  }
  v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
  outlined copy of Text?(v15, v16, v17, v12);
  outlined copy of Text?(v15, v16, v17, v12);
  outlined copy of Text?(v18, v19, v20, v14);
  v22 = 0;
  if ((v25 & 1) == 0)
    goto LABEL_17;
LABEL_26:
  v26 = specialized static Array<A>.== infix(_:_:)(v12, v14);
  outlined consume of Text.Storage(v18, v19, v20 & 1);
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(v15, v16, v17 & 1);
  swift_bridgeObjectRelease();
  outlined consume of Text?(v15, v16, v17, v12);
  return (v26 & 1) != 0;
}

id outlined copy of NamedImage.BitmapInfo?(id result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (a7 != 3)
    return outlined copy of GraphicsImage.Contents(result, a2);
  return result;
}

unint64_t lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Image.NamedImageProvider and conformance Image.NamedImageProvider;
  if (!lazy protocol witness table cache variable for type Image.NamedImageProvider and conformance Image.NamedImageProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Image.NamedImageProvider, &type metadata for Image.NamedImageProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.NamedImageProvider and conformance Image.NamedImageProvider);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Image.NamedImageProvider and conformance Image.NamedImageProvider;
  if (!lazy protocol witness table cache variable for type Image.NamedImageProvider and conformance Image.NamedImageProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Image.NamedImageProvider, &type metadata for Image.NamedImageProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.NamedImageProvider and conformance Image.NamedImageProvider);
  }
  return result;
}

void outlined consume of NamedImage.BitmapInfo?(void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (a7 != 3)
    outlined consume of GraphicsImage.Contents(a1, a2);
}

id specialized @nonobjc CUICatalog.init(name:from:error:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v10[2];

  v10[1] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = (void *)MEMORY[0x23B7C5DAC]();
  swift_bridgeObjectRelease();
  v10[0] = 0;
  v6 = objc_msgSend(v3, sel_initWithName_fromBundle_error_, v5, a3, v10);

  if (v6)
  {
    v7 = v10[0];
  }
  else
  {
    v8 = v10[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v6;
}

uint64_t specialized Image.init(_:variableValue:bundle:label:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9)
{
  id v12;
  float v17;
  int v18;
  float v19;
  uint64_t result;

  v12 = a5;
  if (!a5)
    v12 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v18 = a4 & 1;
  if (v18)
  {
    v19 = 0.0;
  }
  else
  {
    v17 = *(double *)&a3;
    v19 = v17;
  }
  type metadata accessor for ImageProviderBox<Image.InterpolationProvider>(0, &lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, (uint64_t)&type metadata for Image.NamedImageProvider);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  *(float *)(result + 32) = v19;
  *(_BYTE *)(result + 36) = v18;
  *(_QWORD *)(result + 40) = v12;
  *(_QWORD *)(result + 48) = 2;
  *(_QWORD *)(result + 56) = a6;
  *(_QWORD *)(result + 64) = a7;
  *(_QWORD *)(result + 72) = a8 & 1;
  *(_QWORD *)(result + 80) = a9;
  *(_BYTE *)(result + 88) = 0;
  return result;
}

unint64_t lazy protocol witness table accessor for type Image.Location.Error and conformance Image.Location.Error()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Image.Location.Error and conformance Image.Location.Error;
  if (!lazy protocol witness table cache variable for type Image.Location.Error and conformance Image.Location.Error)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Image.Location.Error, &unk_25064C310);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.Location.Error and conformance Image.Location.Error);
  }
  return result;
}

uint64_t type metadata accessor for UUIDImageProvider(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for UUIDImageProvider);
}

void type metadata accessor for ImageProviderBox<UUIDImageProvider>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for ImageProviderBox<UUIDImageProvider>)
  {
    v2 = type metadata accessor for UUIDImageProvider(255);
    v3 = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type UUIDImageProvider and conformance UUIDImageProvider, type metadata accessor for UUIDImageProvider, (uint64_t)&protocol conformance descriptor for UUIDImageProvider);
    v5 = type metadata accessor for ImageProviderBox(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<UUIDImageProvider>);
  }
}

uint64_t _sypSgWObTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t, _QWORD))
{
  uint64_t v7;

  v7 = a5(0, a3, a4, MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

uint64_t base witness table accessor for Equatable in NamedImage.VectorKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NamedImage.VectorKey and conformance NamedImage.VectorKey, type metadata accessor for NamedImage.VectorKey, (uint64_t)&protocol conformance descriptor for NamedImage.VectorKey);
}

uint64_t base witness table accessor for Equatable in NamedImage.BitmapKey()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NamedImage.BitmapKey and conformance NamedImage.BitmapKey, type metadata accessor for NamedImage.BitmapKey, (uint64_t)&protocol conformance descriptor for NamedImage.BitmapKey);
}

unint64_t lazy protocol witness table accessor for type Image.Location and conformance Image.Location()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Image.Location and conformance Image.Location;
  if (!lazy protocol witness table cache variable for type Image.Location and conformance Image.Location)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Image.Location, &type metadata for Image.Location);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.Location and conformance Image.Location);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Image.NamedImageProvider(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Image.HashableScale and conformance Image.HashableScale()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Image.HashableScale and conformance Image.HashableScale;
  if (!lazy protocol witness table cache variable for type Image.HashableScale and conformance Image.HashableScale)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Image.HashableScale, &type metadata for Image.HashableScale);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.HashableScale and conformance Image.HashableScale);
  }
  return result;
}

ValueMetadata *type metadata accessor for NamedImage()
{
  return &type metadata for NamedImage;
}

_QWORD *initializeBufferWithCopyOfBuffer for NamedImage.VectorKey(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    v7 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = a2[3];
    v8 = a3[8];
    v9 = a1 + v8;
    v10 = (uint64_t)a2 + v8;
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    v11 = type metadata accessor for Locale();
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[10];
    *(_QWORD *)((char *)v4 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    *((_BYTE *)v4 + v13) = *((_BYTE *)a2 + v13);
    v14 = a3[12];
    *(_QWORD *)((char *)v4 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
    v15 = *(void **)((char *)a2 + v14);
    if ((unint64_t)v15 >= 2)
      v16 = v15;
    *(_QWORD *)((char *)v4 + v14) = v15;
    *(_QWORD *)((char *)v4 + a3[13]) = *(uint64_t *)((char *)a2 + a3[13]);
  }
  return v4;
}

void destroy for NamedImage.VectorKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = *(void **)(a1 + *(int *)(a2 + 48));
  if ((unint64_t)v6 >= 2)

}

uint64_t initializeWithCopy for NamedImage.VectorKey(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;

  *(_WORD *)a1 = *(_WORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v7 = a3[8];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Locale();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v12) = *(_BYTE *)(a2 + v12);
  v13 = a3[12];
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  v14 = *(void **)(a2 + v13);
  if ((unint64_t)v14 >= 2)
    v15 = v14;
  *(_QWORD *)(a1 + v13) = v14;
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  return a1;
}

uint64_t assignWithCopy for NamedImage.VectorKey(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  id v14;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = a3[8];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  v10 = a3[12];
  v11 = *(void **)(a1 + v10);
  v12 = *(void **)(a2 + v10);
  if ((unint64_t)v11 >= 2)
  {
    if ((unint64_t)v12 >= 2)
    {
      *(_QWORD *)(a1 + v10) = v12;
      v14 = v12;

      goto LABEL_8;
    }

    v12 = *(void **)(a2 + v10);
    goto LABEL_6;
  }
  if ((unint64_t)v12 < 2)
  {
LABEL_6:
    *(_QWORD *)(a1 + v10) = v12;
    goto LABEL_8;
  }
  *(_QWORD *)(a1 + v10) = v12;
  v13 = v12;
LABEL_8:
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  return a1;
}

uint64_t initializeWithTake for NamedImage.VectorKey(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = a3[8];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  v11 = a3[12];
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  return a1;
}

uint64_t assignWithTake for NamedImage.VectorKey(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v7 = a3[8];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  v12 = a3[12];
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  v13 = *(void **)(a1 + v12);
  v14 = *(_QWORD *)(a2 + v12);
  if ((unint64_t)v13 >= 2)
  {
    if (v14 >= 2)
    {
      *(_QWORD *)(a1 + v12) = v14;

    }
    else
    {

      *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
    }
  }
  else
  {
    *(_QWORD *)(a1 + v12) = v14;
  }
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  return a1;
}

uint64_t getEnumTagSinglePayload for NamedImage.VectorKey()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_234E9A850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Locale();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for NamedImage.VectorKey()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_234E9A8D8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Locale();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for NamedImage.VectorKey()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Locale();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeWithCopy for NamedImage.VectorInfo(uint64_t a1, uint64_t a2)
{
  void *v3;
  __int128 v4;
  __int128 v5;
  id v6;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  v6 = v3;
  return a1;
}

uint64_t assignWithCopy for NamedImage.VectorInfo(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  return a1;
}

uint64_t assignWithTake for NamedImage.VectorInfo(uint64_t a1, uint64_t a2)
{
  void *v4;
  __int128 v5;
  __int128 v6;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  return a1;
}

uint64_t getEnumTagSinglePayload for NamedImage.VectorInfo(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NamedImage.VectorInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NamedImage.VectorInfo()
{
  return &type metadata for NamedImage.VectorInfo;
}

_WORD *initializeBufferWithCopyOfBuffer for NamedImage.BitmapKey(_WORD *a1, uint64_t *a2, int *a3)
{
  _WORD *v4;
  int v5;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = (_WORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(_WORD *)a2;
    v7 = a2[2];
    *((_QWORD *)v4 + 1) = a2[1];
    *((_QWORD *)v4 + 2) = v7;
    v8 = (void *)a2[4];
    *((_QWORD *)v4 + 3) = a2[3];
    swift_bridgeObjectRetain();
    if ((unint64_t)v8 >= 2)
      v9 = v8;
    *((_QWORD *)v4 + 4) = v8;
    *((_BYTE *)v4 + 40) = *((_BYTE *)a2 + 40);
    v10 = a3[9];
    v11 = (char *)v4 + v10;
    v12 = (uint64_t)a2 + v10;
    v13 = type metadata accessor for Locale();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
    v14 = a3[11];
    *((_BYTE *)v4 + a3[10]) = *((_BYTE *)a2 + a3[10]);
    *(_QWORD *)((char *)v4 + v14) = *(uint64_t *)((char *)a2 + v14);
    v15 = a3[13];
    *(_QWORD *)((char *)v4 + a3[12]) = *(uint64_t *)((char *)a2 + a3[12]);
    *((_BYTE *)v4 + v15) = *((_BYTE *)a2 + v15);
    *((_BYTE *)v4 + a3[14]) = *((_BYTE *)a2 + a3[14]);
  }
  return v4;
}

uint64_t destroy for NamedImage.BitmapKey(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 32);
  if ((unint64_t)v4 >= 2)

  v5 = a1 + *(int *)(a2 + 36);
  v6 = type metadata accessor for Locale();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t initializeWithCopy for NamedImage.BitmapKey(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_WORD *)a1 = *(_WORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  if ((unint64_t)v7 >= 2)
    v8 = v7;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v9 = a3[9];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  v13 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  v14 = a3[13];
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  *(_BYTE *)(a1 + v14) = *(_BYTE *)(a2 + v14);
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  return a1;
}

uint64_t assignWithCopy for NamedImage.BitmapKey(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(void **)(a1 + 32);
  v7 = *(void **)(a2 + 32);
  if ((unint64_t)v6 >= 2)
  {
    if ((unint64_t)v7 >= 2)
    {
      *(_QWORD *)(a1 + 32) = v7;
      v9 = v7;

      goto LABEL_8;
    }

    v7 = *(void **)(a2 + 32);
    goto LABEL_6;
  }
  if ((unint64_t)v7 < 2)
  {
LABEL_6:
    *(_QWORD *)(a1 + 32) = v7;
    goto LABEL_8;
  }
  *(_QWORD *)(a1 + 32) = v7;
  v8 = v7;
LABEL_8:
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v10 = a3[9];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  return a1;
}

uint64_t initializeWithTake for NamedImage.BitmapKey(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v6 = a3[9];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_QWORD *)(a1 + v10) = *(_QWORD *)(a2 + v10);
  v11 = a3[13];
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  return a1;
}

uint64_t assignWithTake for NamedImage.BitmapKey(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v7 = *(void **)(a1 + 32);
  v8 = *(_QWORD *)(a2 + 32);
  if ((unint64_t)v7 >= 2)
  {
    if (v8 >= 2)
    {
      *(_QWORD *)(a1 + 32) = v8;

      goto LABEL_6;
    }

  }
  *(_QWORD *)(a1 + 32) = v8;
LABEL_6:
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v9 = a3[9];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  v13 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  v14 = a3[13];
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  *(_BYTE *)(a1 + v14) = *(_BYTE *)(a2 + v14);
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  return a1;
}

uint64_t getEnumTagSinglePayload for NamedImage.BitmapKey()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_234E9B0C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Locale();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 36), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for NamedImage.BitmapKey()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_234E9B148(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Locale();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 36), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for NamedImage.BitmapKey()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Locale();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeWithCopy for NamedImage.BitmapInfo(uint64_t a1, uint64_t a2)
{
  id v4;
  char v5;

  v4 = *(id *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of GraphicsImage.Contents(*(id *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  return a1;
}

uint64_t assignWithCopy for NamedImage.BitmapInfo(uint64_t a1, uint64_t a2)
{
  id v4;
  char v5;
  void *v6;
  char v7;
  __int128 v8;
  __int128 v9;

  v4 = *(id *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of GraphicsImage.Contents(*(id *)a2, v5);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  v7 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of GraphicsImage.Contents(v6, v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v8 = *(_OWORD *)(a2 + 56);
  v9 = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v9;
  *(_OWORD *)(a1 + 56) = v8;
  return a1;
}

uint64_t assignWithTake for NamedImage.BitmapInfo(uint64_t a1, uint64_t a2)
{
  char v4;
  void *v5;
  char v6;

  v4 = *(_BYTE *)(a2 + 8);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  outlined consume of GraphicsImage.Contents(v5, v6);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for NamedImage.BitmapInfo(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 89))
    return (*(_DWORD *)a1 + 254);
  if (*(unsigned __int8 *)(a1 + 48) <= 2u)
    v3 = 2;
  else
    v3 = *(unsigned __int8 *)(a1 + 48);
  v4 = v3 - 3;
  if (*(unsigned __int8 *)(a1 + 48) < 2u)
    v5 = -1;
  else
    v5 = v4;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NamedImage.BitmapInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 88) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 89) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 89) = 0;
    if (a2)
      *(_BYTE *)(result + 48) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for NamedImage.BitmapInfo()
{
  return &type metadata for NamedImage.BitmapInfo;
}

uint64_t initializeWithCopy for NamedImage.DecodedInfo(uint64_t a1, uint64_t a2)
{
  id v4;
  char v5;

  v4 = *(id *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of GraphicsImage.Contents(*(id *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t assignWithCopy for NamedImage.DecodedInfo(uint64_t a1, uint64_t a2)
{
  id v4;
  char v5;
  void *v6;
  char v7;

  v4 = *(id *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of GraphicsImage.Contents(*(id *)a2, v5);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  v7 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of GraphicsImage.Contents(v6, v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for NamedImage.DecodedInfo(uint64_t a1, uint64_t a2)
{
  char v4;
  void *v5;
  char v6;

  v4 = *(_BYTE *)(a2 + 8);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  outlined consume of GraphicsImage.Contents(v5, v6);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for NamedImage.DecodedInfo(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFB && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 251);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 5)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NamedImage.DecodedInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 251;
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for NamedImage.DecodedInfo()
{
  return &type metadata for NamedImage.DecodedInfo;
}

uint64_t initializeBufferWithCopyOfBuffer for NamedImage.Key(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v7 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v7 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *(_WORD *)a1 = *(_WORD *)a2;
      v8 = a2[2];
      *(_QWORD *)(a1 + 8) = a2[1];
      *(_QWORD *)(a1 + 16) = v8;
      v9 = (void *)a2[4];
      *(_QWORD *)(a1 + 24) = a2[3];
      swift_bridgeObjectRetain();
      if ((unint64_t)v9 >= 2)
        v10 = v9;
      *(_QWORD *)(a1 + 32) = v9;
      *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
      v11 = (int *)type metadata accessor for NamedImage.BitmapKey(0);
      v12 = v11[9];
      v13 = a1 + v12;
      v14 = (uint64_t)a2 + v12;
      v15 = type metadata accessor for Locale();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
      *(_BYTE *)(a1 + v11[10]) = *((_BYTE *)a2 + v11[10]);
      *(_QWORD *)(a1 + v11[11]) = *(uint64_t *)((char *)a2 + v11[11]);
      *(_QWORD *)(a1 + v11[12]) = *(uint64_t *)((char *)a2 + v11[12]);
      *(_BYTE *)(a1 + v11[13]) = *((_BYTE *)a2 + v11[13]);
      *(_BYTE *)(a1 + v11[14]) = *((_BYTE *)a2 + v11[14]);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for NamedImage.Key(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v2 = type metadata accessor for UUID();
  }
  else
  {
    swift_bridgeObjectRelease();
    v3 = *(void **)(a1 + 32);
    if ((unint64_t)v3 >= 2)

    a1 += *(int *)(type metadata accessor for NamedImage.BitmapKey(0) + 36);
    v2 = type metadata accessor for Locale();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for NamedImage.Key(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = v5;
    v6 = *(void **)(a2 + 32);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    swift_bridgeObjectRetain();
    if ((unint64_t)v6 >= 2)
      v7 = v6;
    *(_QWORD *)(a1 + 32) = v6;
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    v8 = (int *)type metadata accessor for NamedImage.BitmapKey(0);
    v9 = v8[9];
    v10 = a1 + v9;
    v11 = a2 + v9;
    v12 = type metadata accessor for Locale();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    *(_BYTE *)(a1 + v8[10]) = *(_BYTE *)(a2 + v8[10]);
    *(_QWORD *)(a1 + v8[11]) = *(_QWORD *)(a2 + v8[11]);
    *(_QWORD *)(a1 + v8[12]) = *(_QWORD *)(a2 + v8[12]);
    *(_BYTE *)(a1 + v8[13]) = *(_BYTE *)(a2 + v8[13]);
    *(_BYTE *)(a1 + v8[14]) = *(_BYTE *)(a2 + v8[14]);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for NamedImage.Key(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  id v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    outlined destroy of TypesettingConfiguration(a1, type metadata accessor for NamedImage.Key);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v4 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
    }
    else
    {
      *(_WORD *)a1 = *(_WORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      v5 = *(void **)(a2 + 32);
      swift_bridgeObjectRetain();
      if ((unint64_t)v5 >= 2)
        v6 = v5;
      *(_QWORD *)(a1 + 32) = v5;
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
      v7 = (int *)type metadata accessor for NamedImage.BitmapKey(0);
      v8 = v7[9];
      v9 = a1 + v8;
      v10 = a2 + v8;
      v11 = type metadata accessor for Locale();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
      *(_BYTE *)(a1 + v7[10]) = *(_BYTE *)(a2 + v7[10]);
      *(_QWORD *)(a1 + v7[11]) = *(_QWORD *)(a2 + v7[11]);
      *(_QWORD *)(a1 + v7[12]) = *(_QWORD *)(a2 + v7[12]);
      *(_BYTE *)(a1 + v7[13]) = *(_BYTE *)(a2 + v7[13]);
      *(_BYTE *)(a1 + v7[14]) = *(_BYTE *)(a2 + v7[14]);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for NamedImage.Key(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    v5 = (int *)type metadata accessor for NamedImage.BitmapKey(0);
    v6 = v5[9];
    v7 = a1 + v6;
    v8 = a2 + v6;
    v9 = type metadata accessor for Locale();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
    *(_BYTE *)(a1 + v5[10]) = *(_BYTE *)(a2 + v5[10]);
    *(_QWORD *)(a1 + v5[11]) = *(_QWORD *)(a2 + v5[11]);
    *(_QWORD *)(a1 + v5[12]) = *(_QWORD *)(a2 + v5[12]);
    *(_BYTE *)(a1 + v5[13]) = *(_BYTE *)(a2 + v5[13]);
    *(_BYTE *)(a1 + v5[14]) = *(_BYTE *)(a2 + v5[14]);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for NamedImage.Key(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    outlined destroy of TypesettingConfiguration(a1, type metadata accessor for NamedImage.Key);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v4 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
    }
    else
    {
      *(_WORD *)a1 = *(_WORD *)a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
      v5 = (int *)type metadata accessor for NamedImage.BitmapKey(0);
      v6 = v5[9];
      v7 = a1 + v6;
      v8 = a2 + v6;
      v9 = type metadata accessor for Locale();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
      *(_BYTE *)(a1 + v5[10]) = *(_BYTE *)(a2 + v5[10]);
      *(_QWORD *)(a1 + v5[11]) = *(_QWORD *)(a2 + v5[11]);
      *(_QWORD *)(a1 + v5[12]) = *(_QWORD *)(a2 + v5[12]);
      *(_BYTE *)(a1 + v5[13]) = *(_BYTE *)(a2 + v5[13]);
      *(_BYTE *)(a1 + v5[14]) = *(_BYTE *)(a2 + v5[14]);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for NamedImage.Key()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for NamedImage.BitmapKey(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for UUID();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for NamedImage.Errors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_234E9BE1C + 4 * byte_2352AA901[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_234E9BE50 + 4 * byte_2352AA8FC[v4]))();
}

uint64_t sub_234E9BE50(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234E9BE58(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234E9BE60);
  return result;
}

uint64_t sub_234E9BE6C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234E9BE74);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_234E9BE78(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234E9BE80(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NamedImage.Errors()
{
  return &type metadata for NamedImage.Errors;
}

_QWORD *assignWithCopy for NamedImage.Cache(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for NamedImage.Cache()
{
  return &type metadata for NamedImage.Cache;
}

_QWORD *initializeBufferWithCopyOfBuffer for Image.Location(_QWORD *a1, void **a2)
{
  void *v3;
  id v4;

  v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF)
    v4 = v3;
  *a1 = v3;
  return a1;
}

void destroy for Image.Location(void **a1)
{
  void *v1;

  v1 = *a1;
  if ((unint64_t)v1 >= 0xFFFFFFFF)

}

void **assignWithCopy for Image.Location(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = *a1;
  v4 = *a2;
  if ((unint64_t)*a1 < 0xFFFFFFFF)
  {
    if ((unint64_t)v4 >= 0xFFFFFFFF)
    {
      *a1 = v4;
      v6 = v4;
      return a1;
    }
LABEL_7:
    *a1 = v4;
    return a1;
  }
  if ((unint64_t)v4 < 0xFFFFFFFF)
  {

    v4 = *a2;
    goto LABEL_7;
  }
  *a1 = v4;
  v5 = v4;

  return a1;
}

void **assignWithTake for Image.Location(void **a1, unint64_t *a2)
{
  void *v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if ((unint64_t)*a1 < 0xFFFFFFFF)
    goto LABEL_6;
  if (v4 < 0xFFFFFFFF)
  {

LABEL_6:
    *a1 = (void *)v4;
    return a1;
  }
  *a1 = (void *)v4;

  return a1;
}

ValueMetadata *type metadata accessor for Image.Location()
{
  return &type metadata for Image.Location;
}

uint64_t destroy for Image.Location.SystemAssetManager(id *a1)
{

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for Image.Location.SystemAssetManager(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = *(_QWORD *)(a2 + 24);
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v5;
  v6 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Image.Location.SystemAssetManager(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Image.Location.SystemAssetManager(uint64_t a1, _OWORD *a2)
{

  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = a2[1];
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for Image.Location.SystemAssetManager()
{
  return &type metadata for Image.Location.SystemAssetManager;
}

void destroy for Image.NamedImageProvider(_QWORD *a1)
{
  void *v2;
  void *v3;
  unint64_t v4;

  swift_bridgeObjectRelease();
  v2 = (void *)a1[3];
  if ((unint64_t)v2 >= 2)

  v3 = (void *)a1[4];
  if ((unint64_t)v3 >= 3)

  v4 = a1[7];
  if (v4 >> 1 != 0xFFFFFFFF)
    outlined consume of AccessibilityImageLabel(a1[5], a1[6], v4);
}

uint64_t initializeWithCopy for Image.NamedImageProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  id v6;
  unint64_t v7;
  id v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  v5 = *(void **)(a2 + 24);
  swift_bridgeObjectRetain();
  if ((unint64_t)v5 >= 2)
    v6 = v5;
  *(_QWORD *)(a1 + 24) = v5;
  v7 = *(_QWORD *)(a2 + 32);
  if (v7 >= 2)
  {
    if (v7 != 2)
    {
      *(_QWORD *)(a1 + 32) = v7;
      v8 = (id)v7;
      goto LABEL_8;
    }
    v7 = 2;
  }
  *(_QWORD *)(a1 + 32) = v7;
LABEL_8:
  v9 = *(_QWORD *)(a2 + 56);
  if (v9 >> 1 == 0xFFFFFFFF)
  {
    v10 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v10;
  }
  else
  {
    v11 = *(_QWORD *)(a2 + 40);
    v12 = *(_QWORD *)(a2 + 48);
    v13 = *(_QWORD *)(a2 + 64);
    outlined copy of AccessibilityImageLabel(v11, v12, *(_QWORD *)(a2 + 56));
    *(_QWORD *)(a1 + 40) = v11;
    *(_QWORD *)(a1 + 48) = v12;
    *(_QWORD *)(a1 + 56) = v9;
    *(_QWORD *)(a1 + 64) = v13;
  }
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

uint64_t assignWithCopy for Image.NamedImageProvider(uint64_t a1, uint64_t a2)
{
  int v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  unint64_t *v9;
  void *v10;
  unint64_t v11;
  id v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v29;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = v4;
  v5 = *(void **)(a1 + 24);
  v6 = *(void **)(a2 + 24);
  if ((unint64_t)v5 < 2)
  {
    if ((unint64_t)v6 >= 2)
    {
      *(_QWORD *)(a1 + 24) = v6;
      v7 = v6;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if ((unint64_t)v6 < 2)
  {

    v6 = *(void **)(a2 + 24);
LABEL_6:
    *(_QWORD *)(a1 + 24) = v6;
    goto LABEL_8;
  }
  *(_QWORD *)(a1 + 24) = v6;
  v8 = v6;

LABEL_8:
  v9 = (unint64_t *)(a1 + 32);
  v10 = *(void **)(a1 + 32);
  v11 = *(_QWORD *)(a2 + 32);
  if (v10 == (void *)2)
  {
    if (v11 < 2)
    {
LABEL_20:
      *v9 = v11;
      goto LABEL_21;
    }
    if (v11 == 2)
    {
      v11 = 2;
      goto LABEL_20;
    }
LABEL_16:
    *v9 = v11;
    v12 = (id)v11;
    goto LABEL_21;
  }
  if (v11 == 2)
  {
    outlined destroy of Image.Location((id *)(a1 + 32));
LABEL_19:
    v11 = *(_QWORD *)(a2 + 32);
    goto LABEL_20;
  }
  if ((unint64_t)v10 < 2)
  {
    if (v11 < 2)
      goto LABEL_20;
    goto LABEL_16;
  }
  if (v11 < 2)
  {

    goto LABEL_19;
  }
  *v9 = v11;
  v29 = (id)v11;

LABEL_21:
  v13 = (_OWORD *)(a1 + 40);
  v14 = (_OWORD *)(a2 + 40);
  v15 = *(_QWORD *)(a2 + 56);
  v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(a1 + 56) >> 1 == 0xFFFFFFFFLL)
  {
    if (v16 == 0x1FFFFFFFELL)
    {
      v17 = *(_OWORD *)(a2 + 56);
      *v13 = *v14;
      *(_OWORD *)(a1 + 56) = v17;
    }
    else
    {
      v19 = *(_QWORD *)(a2 + 40);
      v20 = *(_QWORD *)(a2 + 48);
      v21 = *(_QWORD *)(a2 + 64);
      outlined copy of AccessibilityImageLabel(v19, v20, *(_QWORD *)(a2 + 56));
      *(_QWORD *)(a1 + 40) = v19;
      *(_QWORD *)(a1 + 48) = v20;
      *(_QWORD *)(a1 + 56) = v15;
      *(_QWORD *)(a1 + 64) = v21;
    }
  }
  else if (v16 == 0x1FFFFFFFELL)
  {
    outlined destroy of AccessibilityImageLabel((uint64_t *)(a1 + 40));
    v18 = *(_OWORD *)(a2 + 56);
    *v13 = *v14;
    *(_OWORD *)(a1 + 56) = v18;
  }
  else
  {
    v22 = *(_QWORD *)(a2 + 40);
    v23 = *(_QWORD *)(a2 + 48);
    v24 = *(_QWORD *)(a2 + 64);
    outlined copy of AccessibilityImageLabel(v22, v23, *(_QWORD *)(a2 + 56));
    v25 = *(_QWORD *)(a1 + 40);
    v26 = *(_QWORD *)(a1 + 48);
    v27 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 40) = v22;
    *(_QWORD *)(a1 + 48) = v23;
    *(_QWORD *)(a1 + 56) = v15;
    *(_QWORD *)(a1 + 64) = v24;
    outlined consume of AccessibilityImageLabel(v25, v26, v27);
  }
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

id *outlined destroy of Image.Location(id *a1)
{
  if ((unint64_t)*a1 >= 0xFFFFFFFF)

  return a1;
}

uint64_t assignWithTake for Image.NamedImageProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  unint64_t v6;
  void *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  v5 = *(void **)(a1 + 24);
  v6 = *(_QWORD *)(a2 + 24);
  if ((unint64_t)v5 < 2)
    goto LABEL_4;
  if (v6 < 2)
  {

LABEL_4:
    *(_QWORD *)(a1 + 24) = v6;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 24) = v6;

LABEL_6:
  v8 = (unint64_t *)(a1 + 32);
  v7 = *(void **)(a1 + 32);
  v9 = *(_QWORD *)(a2 + 32);
  if (v7 == (void *)2)
  {
    if (v9 != 2)
    {
      *v8 = v9;
      goto LABEL_17;
    }
    goto LABEL_11;
  }
  if (v9 == 2)
  {
    outlined destroy of Image.Location((id *)(a1 + 32));
LABEL_11:
    *v8 = 2;
    goto LABEL_17;
  }
  if ((unint64_t)v7 >= 2)
  {
    if (v9 >= 2)
    {
      *v8 = v9;

    }
    else
    {

      *v8 = v9;
    }
  }
  else
  {
    *v8 = v9;
  }
LABEL_17:
  v10 = *(_QWORD *)(a1 + 56);
  if (v10 >> 1 != 0xFFFFFFFF)
  {
    v11 = *(_QWORD *)(a2 + 56);
    if (v11 >> 1 != 0xFFFFFFFF)
    {
      v13 = *(_QWORD *)(a2 + 64);
      v14 = *(_QWORD *)(a1 + 40);
      v15 = *(_QWORD *)(a1 + 48);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 56) = v11;
      *(_QWORD *)(a1 + 64) = v13;
      outlined consume of AccessibilityImageLabel(v14, v15, v10);
      goto LABEL_22;
    }
    outlined destroy of AccessibilityImageLabel((uint64_t *)(a1 + 40));
  }
  v12 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v12;
LABEL_22:
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for Image.NamedImageProvider(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 73))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Image.NamedImageProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 72) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 73) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 73) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Image.NamedImageProvider()
{
  return &type metadata for Image.NamedImageProvider;
}

uint64_t storeEnumTagSinglePayload for Image.HashableScale(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_234E9C760 + 4 * byte_2352AA90B[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_234E9C794 + 4 * byte_2352AA906[v4]))();
}

uint64_t sub_234E9C794(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234E9C79C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234E9C7A4);
  return result;
}

uint64_t sub_234E9C7B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234E9C7B8);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_234E9C7BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234E9C7C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Image.HashableScale()
{
  return &type metadata for Image.HashableScale;
}

uint64_t initializeBufferWithCopyOfBuffer for Image.ResolvedUUID(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = v3;
  return a1;
}

uint64_t assignWithCopy for Image.ResolvedUUID(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for Image.ResolvedUUID(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for Image.ResolvedUUID()
{
  return &type metadata for Image.ResolvedUUID;
}

uint64_t *initializeBufferWithCopyOfBuffer for UUIDImageProvider(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  __int128 v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 24);
    *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    if (*(uint64_t *)((char *)a2 + v8 + 24))
    {
      v11 = *(_QWORD *)v10;
      v12 = *((_QWORD *)v10 + 1);
      v13 = v10[16];
      outlined copy of Text.Storage(*(_QWORD *)v10, v12, v13);
      *(_QWORD *)v9 = v11;
      *((_QWORD *)v9 + 1) = v12;
      v9[16] = v13;
      *((_QWORD *)v9 + 3) = *((_QWORD *)v10 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      v15 = *((_OWORD *)v10 + 1);
      *(_OWORD *)v9 = *(_OWORD *)v10;
      *((_OWORD *)v9 + 1) = v15;
    }
  }
  return a1;
}

uint64_t destroy for UUIDImageProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = type metadata accessor for UUID();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v6 = a1 + *(int *)(a2 + 24);
  if (*(_QWORD *)(v6 + 24))
  {
    outlined consume of Text.Storage(*(_QWORD *)v6, *(_QWORD *)(v6 + 8), *(_BYTE *)(v6 + 16));
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for UUIDImageProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  v8 = a1 + v7;
  v9 = a2 + v7;
  if (*(_QWORD *)(a2 + v7 + 24))
  {
    v10 = *(_QWORD *)v9;
    v11 = *(_QWORD *)(v9 + 8);
    v12 = *(_BYTE *)(v9 + 16);
    outlined copy of Text.Storage(*(_QWORD *)v9, v11, v12);
    *(_QWORD *)v8 = v10;
    *(_QWORD *)(v8 + 8) = v11;
    *(_BYTE *)(v8 + 16) = v12;
    *(_QWORD *)(v8 + 24) = *(_QWORD *)(v9 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    v13 = *(_OWORD *)(v9 + 16);
    *(_OWORD *)v8 = *(_OWORD *)v9;
    *(_OWORD *)(v8 + 16) = v13;
  }
  return a1;
}

uint64_t assignWithCopy for UUIDImageProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  __int128 v25;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  v10 = *(int *)(a3 + 24);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = *(_QWORD *)(a1 + v10 + 24);
  v14 = *(_QWORD *)(a2 + v10 + 24);
  if (v13)
  {
    if (v14)
    {
      v15 = *(_QWORD *)v12;
      v16 = *(_QWORD *)(v12 + 8);
      v17 = *(_BYTE *)(v12 + 16);
      outlined copy of Text.Storage(*(_QWORD *)v12, v16, v17);
      v18 = *(_QWORD *)v11;
      v19 = *(_QWORD *)(v11 + 8);
      v20 = *(_BYTE *)(v11 + 16);
      *(_QWORD *)v11 = v15;
      *(_QWORD *)(v11 + 8) = v16;
      *(_BYTE *)(v11 + 16) = v17;
      outlined consume of Text.Storage(v18, v19, v20);
      *(_QWORD *)(v11 + 24) = *(_QWORD *)(v12 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(v11);
      v24 = *(_OWORD *)(v12 + 16);
      *(_OWORD *)v11 = *(_OWORD *)v12;
      *(_OWORD *)(v11 + 16) = v24;
    }
  }
  else if (v14)
  {
    v21 = *(_QWORD *)v12;
    v22 = *(_QWORD *)(v12 + 8);
    v23 = *(_BYTE *)(v12 + 16);
    outlined copy of Text.Storage(*(_QWORD *)v12, v22, v23);
    *(_QWORD *)v11 = v21;
    *(_QWORD *)(v11 + 8) = v22;
    *(_BYTE *)(v11 + 16) = v23;
    *(_QWORD *)(v11 + 24) = *(_QWORD *)(v12 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    v25 = *(_OWORD *)(v12 + 16);
    *(_OWORD *)v11 = *(_OWORD *)v12;
    *(_OWORD *)(v11 + 16) = v25;
  }
  return a1;
}

uint64_t initializeWithTake for UUIDImageProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  __int128 v10;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  v8 = (_OWORD *)(a1 + v7);
  v9 = (_OWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  return a1;
}

uint64_t assignWithTake for UUIDImageProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  v8 = a1 + v7;
  v9 = a2 + v7;
  if (!*(_QWORD *)(a1 + v7 + 24))
    goto LABEL_5;
  if (!*(_QWORD *)(v9 + 24))
  {
    outlined destroy of Text(a1 + v7);
LABEL_5:
    v14 = *(_OWORD *)(v9 + 16);
    *(_OWORD *)v8 = *(_OWORD *)v9;
    *(_OWORD *)(v8 + 16) = v14;
    return a1;
  }
  v10 = *(_BYTE *)(v9 + 16);
  v11 = *(_QWORD *)v8;
  v12 = *(_QWORD *)(v8 + 8);
  v13 = *(_BYTE *)(v8 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_BYTE *)(v8 + 16) = v10;
  outlined consume of Text.Storage(v11, v12, v13);
  *(_QWORD *)(v8 + 24) = *(_QWORD *)(v9 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UUIDImageProvider()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_234E9CCF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 24);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for UUIDImageProvider()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_234E9CD90(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 24) = a2;
  return result;
}

uint64_t type metadata completion function for UUIDImageProvider()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *type metadata accessor for Image.Location.Error()
{
  return &unk_25064C310;
}

ValueMetadata *type metadata accessor for NamedImage.Cache.WeakCatalog()
{
  return &type metadata for NamedImage.Cache.WeakCatalog;
}

void *type metadata accessor for NamedImage.Cache.ImageCacheData()
{
  return &unk_25060E078;
}

uint64_t instantiation function for generic protocol witness table for UUIDImageProvider(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type UUIDImageProvider and conformance UUIDImageProvider, type metadata accessor for UUIDImageProvider, (uint64_t)&protocol conformance descriptor for UUIDImageProvider);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_234E9CF0C()
{
  return swift_deallocObject();
}

uint64_t sub_234E9CF1C()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 32);
  if ((unint64_t)v1 >= 2)

  return swift_deallocObject();
}

uint64_t sub_234E9CF50()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Image.NamedImageProvider.vectorInfo(in:from:at:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  void *v7;

  v4 = (uint64_t *)v3[3];
  v5 = v3[4];
  v7 = (void *)v3[5];
  return Image.NamedImageProvider.vectorInfo(name:in:from:at:)(a1, a2, v4, v5, &v7, a3);
}

void type metadata accessor for (key: URL, value: NamedImage.Cache.WeakCatalog)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (key: URL, value: NamedImage.Cache.WeakCatalog))
  {
    type metadata accessor for URL();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: URL, value: NamedImage.Cache.WeakCatalog));
  }
}

id partial apply for closure #1 in NamedImage.BitmapKey.loadBitmapInfo(location:idiom:subtype:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in NamedImage.BitmapKey.loadBitmapInfo(location:idiom:subtype:)(a1, a2, *(void **)(v2 + 16), *(double **)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
}

uint64_t sub_234E9D010()
{
  uint64_t v0;
  void *v1;

  swift_release();
  v1 = *(void **)(v0 + 24);
  if ((unint64_t)v1 >= 3)

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t outlined consume of VectorImageLayer?(uint64_t result, void *a2)
{
  if (result)
  {
    swift_release();
    outlined consume of Image.Location?(a2);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void type metadata accessor for (ColorScheme?, ColorSchemeContrast)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ColorScheme?, ColorSchemeContrast))
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for ColorScheme?, (uint64_t)&type metadata for ColorScheme, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ColorScheme?, ColorSchemeContrast));
  }
}

id partial apply for closure #1 in NamedImage.VectorKey.loadVectorInfo(from:idiom:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in NamedImage.VectorKey.loadVectorInfo(from:idiom:)(a1, a2, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

void type metadata accessor for (NamedImage.Key, NamedImage.Key)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (NamedImage.Key, NamedImage.Key))
  {
    type metadata accessor for NamedImage.Key(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (NamedImage.Key, NamedImage.Key));
  }
}

ValueMetadata *type metadata accessor for Image.Location.BundlePath()
{
  return &type metadata for Image.Location.BundlePath;
}

uint64_t storeEnumTagSinglePayload for Image.Location.BundlePath.Error(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_234E9D1BC + 4 * byte_2352AA910[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_234E9D1DC + 4 * byte_2352AA915[v4]))();
}

_BYTE *sub_234E9D1BC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_234E9D1DC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_234E9D1E4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_234E9D1EC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_234E9D1F4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_234E9D1FC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Image.Location.BundlePath.Error()
{
  return &type metadata for Image.Location.BundlePath.Error;
}

unint64_t lazy protocol witness table accessor for type Image.Location.BundlePath.Error and conformance Image.Location.BundlePath.Error()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Image.Location.BundlePath.Error and conformance Image.Location.BundlePath.Error;
  if (!lazy protocol witness table cache variable for type Image.Location.BundlePath.Error and conformance Image.Location.BundlePath.Error)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Image.Location.BundlePath.Error, &type metadata for Image.Location.BundlePath.Error);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.Location.BundlePath.Error and conformance Image.Location.BundlePath.Error);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Image.Location.BundlePath.Error and conformance Image.Location.BundlePath.Error;
  if (!lazy protocol witness table cache variable for type Image.Location.BundlePath.Error and conformance Image.Location.BundlePath.Error)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Image.Location.BundlePath.Error, &type metadata for Image.Location.BundlePath.Error);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.Location.BundlePath.Error and conformance Image.Location.BundlePath.Error);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Image.Location.BundlePath and conformance Image.Location.BundlePath()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Image.Location.BundlePath and conformance Image.Location.BundlePath;
  if (!lazy protocol witness table cache variable for type Image.Location.BundlePath and conformance Image.Location.BundlePath)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Image.Location.BundlePath, &type metadata for Image.Location.BundlePath);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.Location.BundlePath and conformance Image.Location.BundlePath);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Image.Location.BundlePath and conformance Image.Location.BundlePath;
  if (!lazy protocol witness table cache variable for type Image.Location.BundlePath and conformance Image.Location.BundlePath)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Image.Location.BundlePath, &type metadata for Image.Location.BundlePath);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.Location.BundlePath and conformance Image.Location.BundlePath);
  }
  return result;
}

uint64_t VectorArithmetic.scaled(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a3, v4, a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, double))(a2 + 16))(a1, a2, a4);
}

Swift::Void __swiftcall VectorArithmetic.applyUnitScale()()
{
  uint64_t v0;

  (*(void (**)(double))(v0 + 16))(128.0);
}

Swift::Void __swiftcall VectorArithmetic.unapplyUnitScale()()
{
  uint64_t v0;

  (*(void (**)(double))(v0 + 16))(0.0078125);
}

uint64_t mix<A>(_:_:by:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>, double a4@<D0>)
{
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a3);
  dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
  (*(void (**)(uint64_t, uint64_t, double))(a2 + 16))(a1, a2, a4);
  return dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
}

double static VectorArithmetic.unitScale.getter()
{
  return 128.0;
}

double static VectorArithmetic.inverseUnitScale.getter()
{
  return 0.0078125;
}

Swift::Void __swiftcall Float.scale(by:)(Swift::Double by)
{
  float *v1;
  float v2;

  v2 = by;
  *v1 = *v1 * v2;
}

double Float.magnitudeSquared.getter(float a1)
{
  return (float)(a1 * a1);
}

float protocol witness for VectorArithmetic.scale(by:) in conformance Float(double a1)
{
  float *v1;
  float v2;
  float result;

  v2 = a1;
  result = *v1 * v2;
  *v1 = result;
  return result;
}

double protocol witness for VectorArithmetic.magnitudeSquared.getter in conformance Float()
{
  float *v0;

  return (float)(*v0 * *v0);
}

double Double.magnitudeSquared.getter(double a1)
{
  return a1 * a1;
}

Swift::Void __swiftcall CGFloat.scale(by:)(Swift::Double by)
{
  double *v1;

  *v1 = *v1 * by;
}

double CGFloat.magnitudeSquared.getter(double a1)
{
  return a1 * a1;
}

double protocol witness for VectorArithmetic.scale(by:) in conformance CGFloat(double a1)
{
  double *v1;
  double result;

  result = *v1 * a1;
  *v1 = result;
  return result;
}

double protocol witness for VectorArithmetic.magnitudeSquared.getter in conformance CGFloat()
{
  double *v0;

  return *v0 * *v0;
}

uint64_t dispatch thunk of VectorArithmetic.scale(by:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of VectorArithmetic.magnitudeSquared.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t _ViewList_ID.explicitID<A>(for:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v15 - v7;
  v9 = *(_QWORD *)(v2 + 8);
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    swift_bridgeObjectRetain();
    v11 = 32;
    while (1)
    {
      v15[1] = *(_QWORD *)(v9 + v11);
      AnyHashable2.as<A>(type:)();
      v12 = *(_QWORD *)(a1 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v8, 1, a1) != 1)
        break;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      v11 += 24;
      if (!--v10)
      {
        swift_bridgeObjectRelease();
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(a2, v8, a1);
    v13 = 0;
  }
  else
  {
    v12 = *(_QWORD *)(a1 - 8);
LABEL_7:
    v13 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a2, v13, 1, a1);
}

uint64_t specialized Collection.prefix(_:)(uint64_t result, uint64_t a2, uint64_t a3, int64_t a4, unint64_t a5)
{
  int64_t v5;
  uint64_t v6;
  int64_t v7;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  v5 = a5 >> 1;
  v6 = (a5 >> 1) - a4;
  if (__OFSUB__(a5 >> 1, a4))
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (!result || v6 < 0 || (v7 = a5 >> 1, v6 >= result))
  {
    v7 = a4 + result;
    if (__OFADD__(a4, result))
      goto LABEL_18;
  }
  if (v7 < a4)
    goto LABEL_14;
  if (v5 < a4)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v5 >= v7)
  {
    if ((v7 & 0x8000000000000000) == 0)
      return a2;
    goto LABEL_17;
  }
LABEL_16:
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t specialized Collection.prefix(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  v3 = a3 - a2;
  if (__OFSUB__(a3, a2))
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (result && (v3 & 0x8000000000000000) == 0 && v3 < result)
  {
LABEL_10:
    if (a3 >= a2)
      return a2;
    goto LABEL_14;
  }
  v4 = a2 + result;
  if (!__OFADD__(a2, result))
  {
    if (v4 < a2)
      goto LABEL_16;
    v5 = v4 <= a3;
    a3 = a2 + result;
    if (!v5)
      goto LABEL_16;
    goto LABEL_10;
  }
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t specialized Collection.prefix(_:)(uint64_t result, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = *(_QWORD *)(a2 + 16);
    if ((uint64_t)v3 >= result)
      v4 = result;
    else
      v4 = *(_QWORD *)(a2 + 16);
    if (result)
      v5 = v4;
    else
      v5 = 0;
    if (v3 >= v5)
    {
      type metadata accessor for UUID();
      return a2;
    }
  }
  __break(1u);
  return result;
}

int64_t specialized Collection.prefix(_:)(int64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = *(_QWORD *)(a2 + 16);
    if ((uint64_t)v2 >= result)
      v3 = result;
    else
      v3 = *(_QWORD *)(a2 + 16);
    if (!result)
      v3 = 0;
    if (v2 >= v3)
      return a2;
  }
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI12_ViewList_IDV8Explicit33_E479C0E92CDD045BAF2EF653123E2E0BLLVG_AF12AnyHashable2Vs5NeverOTg503_s7d5UI12_fg9_IDV14alli10IDsSayAA12rs6VGvgAfk5G033_jklmnopQ56BLLVcfu_33_9e41cf4a1fd9b43cf13e2534f667327eAjFTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v9 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v9;
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v5 = *v4;
      v7 = *(_QWORD *)(v9 + 16);
      v6 = *(_QWORD *)(v9 + 24);
      swift_retain();
      if (v7 >= v6 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
      *(_QWORD *)(v9 + 16) = v7 + 1;
      *(_QWORD *)(v9 + 8 * v7 + 32) = v5;
      v4 += 3;
      --v1;
    }
    while (v1);
  }
  return v2;
}

__n128 _ViewListInputs.init(_:options:)@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  __n128 result;

  v3 = *(_DWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *a2;
  v7 = *MEMORY[0x24BE096C0];
  *(_QWORD *)a3 = *(_QWORD *)a1;
  *(_DWORD *)(a3 + 8) = v3;
  *(_QWORD *)(a3 + 16) = v4;
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a3 + 24) = result;
  *(_QWORD *)(a3 + 40) = v5;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = v6;
  *(_DWORD *)(a3 + 64) = v7;
  *(_QWORD *)(a3 + 72) = MEMORY[0x24BEE4B08];
  *(_BYTE *)(a3 + 80) = 0;
  return result;
}

uint64_t static _ViewListOutputs.emptyViewList(inputs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char v28;
  _BYTE v29[24];
  ValueMetadata *v30;
  _UNKNOWN **v31;

  v2 = *(_QWORD *)a1;
  v3 = *(_DWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 24);
  v6 = *(_DWORD *)(a1 + 28);
  v8 = *(_DWORD *)(a1 + 32);
  v7 = *(_DWORD *)(a1 + 36);
  v10 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_DWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(_BYTE *)(a1 + 80);
  if ((v11 & 0x10) != 0)
  {
    v16 = *(_QWORD *)a1;
    v17 = v3;
    v18 = v4;
    v19 = v5;
    v20 = v6;
    v21 = v8;
    v22 = v7;
    v23 = v10;
    v24 = v9;
    v25 = v11;
    v26 = v12;
    v27 = v13;
    v28 = v14;
    return static _ViewListOutputs.nonEmptyParentViewList(inputs:)((uint64_t)&v16, a2);
  }
  else
  {
    v30 = &type metadata for EmptyViewListElements;
    v31 = &protocol witness table for EmptyViewListElements;
    v16 = v2;
    v17 = v3;
    v18 = v4;
    v19 = v5;
    v20 = v6;
    v21 = v8;
    v22 = v7;
    v23 = v10;
    v24 = v9;
    v25 = v11;
    v26 = v12;
    v27 = v13;
    v28 = v14;
    static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v29, &v16, 0, a2);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  }
}

uint64_t static _ViewListOutputs.unaryViewList<A>(viewType:inputs:body:)@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v23;
  __int128 v24;
  int v25;
  int v26;
  char v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v33;
  uint64_t v34;
  int v35;
  int v36;
  unint64_t v37;
  __int128 v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  char v42;
  _QWORD v43[6];

  v5 = *a1;
  v6 = *((_DWORD *)a1 + 2);
  v7 = a1[2];
  v9 = *((_DWORD *)a1 + 6);
  v8 = *((_DWORD *)a1 + 7);
  v25 = v9;
  v26 = v6;
  v10 = *((_DWORD *)a1 + 8);
  v11 = *((_DWORD *)a1 + 9);
  v12 = a1[5];
  v30 = a1[7];
  v31 = a1[6];
  v29 = *((_DWORD *)a1 + 16);
  v28 = a1[9];
  v27 = *((_BYTE *)a1 + 80);
  v43[0] = a2;
  v43[1] = a3;
  v13 = type metadata accessor for BodyUnaryViewGenerator(0, a4, a2, a3);
  (*(void (**)(__int128 *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(&v33, v43, v13);
  v15 = type metadata accessor for UnaryElements(0, v13, (uint64_t)&protocol witness table for BodyUnaryViewGenerator<A>, v14);
  v16 = (char *)&v33 + *(int *)(v15 + 36);
  *(_QWORD *)v16 = v5;
  *((_DWORD *)v16 + 2) = v6;
  *((_QWORD *)v16 + 2) = v7;
  *((_DWORD *)v16 + 6) = v9;
  *((_DWORD *)v16 + 7) = v8;
  v17 = v8;
  *((_DWORD *)v16 + 8) = v10;
  *((_DWORD *)v16 + 9) = v11;
  *((_QWORD *)v16 + 5) = v12;
  v18 = v34;
  LODWORD(v13) = v35;
  v19 = v37;
  v20 = v39;
  v23 = v33;
  v24 = v38;
  v43[3] = v15;
  v43[4] = &protocol witness table for UnaryElements<A>;
  v21 = swift_allocObject();
  v43[0] = v21;
  *(_OWORD *)(v21 + 16) = v23;
  *(_QWORD *)(v21 + 32) = v18;
  *(_DWORD *)(v21 + 40) = v13;
  *(_QWORD *)(v21 + 48) = v19;
  *(_OWORD *)(v21 + 56) = v24;
  *(_QWORD *)(v21 + 72) = v20;
  *(_QWORD *)&v33 = v5;
  DWORD2(v33) = v26;
  v34 = v7;
  v35 = v25;
  v36 = v17;
  v37 = __PAIR64__(v11, v10);
  *(_QWORD *)&v38 = v12;
  *((_QWORD *)&v38 + 1) = v31;
  v39 = v30;
  v40 = v29;
  v41 = v28;
  v42 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v43, (uint64_t *)&v33, 1, a5);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
}

uint64_t _ViewListCountInputs.popLast<A, B>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];

  v5 = v4;
  v9 = *(_QWORD *)(a3 + 8);
  PropertyList.subscript.getter(a1, *v5, a1, v9);
  v12 = type metadata accessor for Stack(0, a2, v10, v11);
  Stack.pop()(v12, a4);
  v14[0] = v14[1];
  return PropertyList.subscript.setter((uint64_t)v14, a1, a1, v9);
}

uint64_t _ViewListCountInputs.append<A, B>(_:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  v6 = v5;
  v10 = *(_QWORD *)(a5 + 8);
  PropertyList.subscript.getter(a3, *v6, a3, v10);
  v13 = type metadata accessor for Stack(0, a4, v11, v12);
  Stack.push(_:)(a1, v13);
  v15[0] = v15[1];
  return PropertyList.subscript.setter((uint64_t)v15, a3, a3, v10);
}

uint64_t _ViewListCountInputs.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return PropertyList.subscript.getter(a1, *v3, a2, *(_QWORD *)(a3 + 8));
}

uint64_t _ViewListCountInputs.subscript.setter(uint64_t a1, Swift::Int a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;

  specialized _ViewListCountInputs.subscript.setter(a1, a2, a3, a4);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

uint64_t static _ViewListOutputs.concat(_:inputs:)@<X0>(uint64_t result@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v3;
  __int128 v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  char v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  char v13;
  uint64_t v14;
  int v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unsigned int *v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int Attribute;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  char *v50;
  uint64_t v51;
  char v52;
  _QWORD v53[5];
  _BYTE v54[40];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  char v60;
  __int128 v61[2];
  char v62;
  _BYTE v63[48];
  _BYTE v64[24];
  ValueMetadata *v65;
  _UNKNOWN **v66;
  uint64_t v67;
  char v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  char v74;
  _OWORD v75[2];
  __int128 v76;
  _QWORD v77[3];

  v77[1] = *MEMORY[0x24BDAC8D0];
  v3 = a2[3];
  v71 = a2[2];
  v72 = v3;
  v73 = a2[4];
  v74 = *((_BYTE *)a2 + 80);
  v4 = a2[1];
  v69 = *a2;
  v70 = v4;
  v5 = *(_QWORD *)(result + 16);
  if (!v5)
  {
    *(_QWORD *)(a3 + 24) = &type metadata for EmptyViewListElements;
    *(_QWORD *)(a3 + 32) = &protocol witness table for EmptyViewListElements;
    *(_BYTE *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = v72;
    *(_QWORD *)(a3 + 56) = 0;
    *(_BYTE *)(a3 + 64) = 0;
    return result;
  }
  v6 = result;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v48 = swift_allocObject();
  v46 = v72;
  *(_QWORD *)(v48 + 16) = v72;
  v50 = (char *)MEMORY[0x24BEE4AF8];
  v47 = v6;
  v11 = v6 + 32;
  v45 = *MEMORY[0x24BE096C0];
  v43 = v6 + 32;
  do
  {
    v12 = v10 + 1;
    outlined init with copy of _ViewListOutputs(v11, (uint64_t)v64);
    v13 = v68;
    if (v68)
      v14 = 0;
    else
      v14 = v8;
    if ((v9 & 1) == 0)
      v8 = v14 + v67;
    outlined init with copy of _ViewListOutputs.Views((uint64_t)v64, (uint64_t)v63);
    if ((v63[40] & 1) == 0)
    {
      outlined destroy of _ViewListOutputs((uint64_t)v64);
      outlined destroy of _ViewListOutputs.Views((uint64_t)v63);
      goto LABEL_4;
    }
    swift_release();
    if (v7 < v10)
    {
      mergeStatic #1 (from:to:) in static _ViewListOutputs.concat(_:inputs:)(v7, v10, v47, v48, (uint64_t)&v69, (uint64_t)&v55);
      v15 = _ViewListOutputs.makeAttribute(inputs:)((uint64_t *)&v69);
      swift_beginAccess();
      v16 = v50;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v16 + 2) + 1, 1, v16);
      v18 = *((_QWORD *)v16 + 2);
      v17 = *((_QWORD *)v16 + 3);
      if (v18 >= v17 >> 1)
        v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v17 > 1), v18 + 1, 1, v16);
      *((_QWORD *)v16 + 2) = v18 + 1;
      *(_DWORD *)&v16[4 * v18 + 32] = v15;
      v50 = v16;
      swift_endAccess();
      outlined destroy of _ViewListOutputs((uint64_t)&v55);
    }
    outlined init with copy of _ViewListOutputs.Views((uint64_t)v64, (uint64_t)v61);
    if ((v62 & 1) != 0)
    {
      v19 = v61[0];
      if (*((_QWORD *)&v61[0] + 1))
      {
        LODWORD(v55) = v61[0];
        *((_QWORD *)&v55 + 1) = *((_QWORD *)&v61[0] + 1);
        protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
        type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
        lazy protocol witness table accessor for type _ViewListOutputs.ApplyModifiers and conformance _ViewListOutputs.ApplyModifiers();
        swift_retain();
        v19 = Attribute.init<A>(body:value:flags:update:)();
        swift_release_n();
      }
      goto LABEL_33;
    }
    v75[0] = v69;
    v75[1] = v70;
    v76 = v71;
    v20 = BYTE8(v72);
    outlined init with take of ScrollStateRequest(v61, (uint64_t)v54);
    outlined init with copy of AnyTrackedValue((uint64_t)v54, (uint64_t)v53);
    if ((v20 & 1) != 0)
    {
      v21 = (v20 & 2) == 0;
      if ((BYTE5(v76) & 1) != 0)
      {
LABEL_22:
        v22 = *(_QWORD *)&v75[0];
        v77[0] = *(_QWORD *)&v75[0];
        outlined retain of _GraphInputs((uint64_t)v75);
        outlined retain of ViewTransform((uint64_t)v77);
        v23 = specialized find<A>(_:key:)(v22);
        if (v23)
        {
          v24 = (uint64_t *)(v23 + 72);
          v25 = (unsigned int *)(v23 + 76);
        }
        else
        {
          v25 = (unsigned int *)&static _DisplayList_StableIdentityScope.defaultValue + 1;
          if (one-time initialization token for defaultValue != -1)
            swift_once();
          v24 = &static _DisplayList_StableIdentityScope.defaultValue;
        }
        v28 = *(unsigned int *)v24;
        v29 = *v25;
        outlined release of ViewTransform((uint64_t)v77);
        outlined release of _GraphInputs((uint64_t)v75);
        v30 = v28 | (v29 << 32);
        Attribute = AGWeakAttributeGetAttribute();
        v27 = Attribute == v45;
        if (Attribute == v45)
          v26 = 0;
        else
          v26 = v30;
        goto LABEL_32;
      }
    }
    else
    {
      v21 = 0;
      if ((BYTE5(v76) & 1) != 0)
        goto LABEL_22;
    }
    v26 = 0;
    v27 = 1;
LABEL_32:
    v51 = MEMORY[0x24BEE4B08];
    v52 = 0;
    v49 = (_QWORD *)MEMORY[0x24BEE4AF8];
    BaseViewList.init(elements:implicitID:canTransition:stableIDScope:traitKeys:traits:)((uint64_t)v53, v46, v21, v26, v27, &v51, &v49, (uint64_t)&v55);
    v53[3] = &type metadata for BaseViewList;
    v53[4] = &protocol witness table for BaseViewList;
    v53[0] = swift_allocObject();
    outlined init with copy of BaseViewList((uint64_t)&v55, v53[0] + 16);
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
    type metadata accessor for External<ViewList>(0, (unint64_t *)&lazy cache variable for type metadata for External<ViewList>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BE09670]);
    lazy protocol witness table accessor for type External<ViewList> and conformance External<A>();
    v19 = Attribute.init<A>(body:value:flags:update:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
    outlined destroy of BaseViewList((uint64_t)&v55);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v54);
LABEL_33:
    swift_beginAccess();
    v32 = v50;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v32 + 2) + 1, 1, v32);
    v34 = *((_QWORD *)v32 + 2);
    v33 = *((_QWORD *)v32 + 3);
    if (v34 >= v33 >> 1)
      v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v33 > 1), v34 + 1, 1, v32);
    *((_QWORD *)v32 + 2) = v34 + 1;
    *(_DWORD *)&v32[4 * v34 + 32] = v19;
    v50 = v32;
    swift_endAccess();
    outlined destroy of _ViewListOutputs((uint64_t)v64);
    v7 = v12;
LABEL_4:
    v9 |= v13;
    v11 += 72;
    v10 = v12;
  }
  while (v5 != v12);
  if (v7 >= v5)
    goto LABEL_45;
  if (v7)
  {
    mergeStatic #1 (from:to:) in static _ViewListOutputs.concat(_:inputs:)(v7, v5, v47, v48, (uint64_t)&v69, (uint64_t)&v55);
    v35 = _ViewListOutputs.makeAttribute(inputs:)((uint64_t *)&v69);
    swift_beginAccess();
    v36 = v50;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v36 + 2) + 1, 1, v36);
    v38 = *((_QWORD *)v36 + 2);
    v37 = *((_QWORD *)v36 + 3);
    if (v38 >= v37 >> 1)
      v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v37 > 1), v38 + 1, 1, v36);
    *((_QWORD *)v36 + 2) = v38 + 1;
    *(_DWORD *)&v36[4 * v38 + 32] = v35;
    v50 = v36;
    swift_endAccess();
    outlined destroy of _ViewListOutputs((uint64_t)&v55);
LABEL_45:
    swift_beginAccess();
    v39 = *((_QWORD *)v50 + 2);
    if (v39 == 1)
    {
      v40 = *((_DWORD *)v50 + 8);
    }
    else
    {
      if (!v39)
      {
        if ((BYTE8(v72) & 0x10) != 0)
        {
          v57 = v71;
          v58 = v72;
          v59 = v73;
          v60 = v74;
          v55 = v69;
          v56 = v70;
          static _ViewListOutputs.nonEmptyParentViewList(inputs:)((uint64_t)&v55, a3);
        }
        else
        {
          v65 = &type metadata for EmptyViewListElements;
          v66 = &protocol witness table for EmptyViewListElements;
          v57 = v71;
          v58 = v72;
          v59 = v73;
          v60 = v74;
          v55 = v69;
          v56 = v70;
          static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v64, (uint64_t *)&v55, 0, a3);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v64);
        }
        goto LABEL_57;
      }
      *(_QWORD *)&v55 = v50;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
      lazy protocol witness table accessor for type _ViewList_Group.Init and conformance _ViewList_Group.Init();
      swift_bridgeObjectRetain();
      v40 = Attribute.init<A>(body:value:flags:update:)();
      swift_bridgeObjectRelease();
    }
    *(_DWORD *)a3 = v40;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 40) = 1;
    swift_beginAccess();
    v41 = *(_QWORD *)(v48 + 16);
    swift_release();
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(a3 + 48) = v41;
    *(_QWORD *)(a3 + 56) = v8;
    *(_BYTE *)(a3 + 64) = v9 & 1;
  }
  else
  {
    if (v5 == 1)
    {
      outlined init with copy of _ViewListOutputs(v43, a3);
    }
    else
    {
      *(_QWORD *)(a3 + 24) = &unk_25061B068;
      *(_QWORD *)(a3 + 32) = &protocol witness table for MergedElements;
      v42 = (_QWORD *)swift_allocObject();
      *(_QWORD *)a3 = v42;
      v42[2] = v47;
      v42[3] = v43;
      v42[4] = 0;
      v42[5] = (2 * v5) | 1;
      *(_BYTE *)(a3 + 40) = 0;
      swift_beginAccess();
      *(_QWORD *)(a3 + 48) = *(_QWORD *)(v48 + 16);
      *(_QWORD *)(a3 + 56) = v8;
      *(_BYTE *)(a3 + 64) = v9 & 1;
      swift_bridgeObjectRetain();
    }
LABEL_57:
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t static _ViewListOutputs.unaryViewList<A>(view:inputs:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v24;
  unsigned int v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  char v42;
  _QWORD v43[6];

  v6 = *(_QWORD *)a1;
  v7 = *(_DWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_DWORD *)(a1 + 24);
  v10 = *(_DWORD *)(a1 + 28);
  v11 = *(_DWORD *)(a1 + 32);
  v12 = *(_DWORD *)(a1 + 36);
  v25 = v12;
  v26 = *(_QWORD *)(a1 + 40);
  v30 = *(_QWORD *)(a1 + 56);
  v31 = *(_QWORD *)(a1 + 48);
  v29 = *(_DWORD *)(a1 + 64);
  v28 = *(_QWORD *)(a1 + 72);
  v27 = *(_BYTE *)(a1 + 80);
  v43[0] = AGCreateWeakAttribute();
  v14 = type metadata accessor for TypedUnaryViewGenerator(0, a2, a3, v13);
  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(&v33, v43, v14);
  v16 = type metadata accessor for UnaryElements(0, v14, (uint64_t)&protocol witness table for TypedUnaryViewGenerator<A>, v15);
  v17 = (char *)&v33 + *(int *)(v16 + 36);
  *(_QWORD *)v17 = v6;
  *((_DWORD *)v17 + 2) = v7;
  *((_QWORD *)v17 + 2) = v8;
  *((_DWORD *)v17 + 6) = v9;
  *((_DWORD *)v17 + 7) = v10;
  *((_DWORD *)v17 + 8) = v11;
  *((_DWORD *)v17 + 9) = v12;
  *((_QWORD *)v17 + 5) = v26;
  v18 = v34;
  LODWORD(a2) = v35;
  v19 = v36;
  v20 = v38;
  v21 = v33;
  v24 = v37;
  v43[3] = v16;
  v43[4] = &protocol witness table for UnaryElements<A>;
  v22 = swift_allocObject();
  v43[0] = v22;
  *(_QWORD *)(v22 + 16) = v21;
  *(_QWORD *)(v22 + 24) = v18;
  *(_DWORD *)(v22 + 32) = a2;
  *(_QWORD *)(v22 + 40) = v19;
  *(_OWORD *)(v22 + 48) = v24;
  *(_QWORD *)(v22 + 64) = v20;
  v33 = v6;
  LODWORD(v34) = v7;
  v35 = v8;
  v36 = __PAIR64__(v10, v9);
  *(_QWORD *)&v37 = __PAIR64__(v25, v11);
  *((_QWORD *)&v37 + 1) = v26;
  v38 = v31;
  v39 = v30;
  v40 = v29;
  v41 = v28;
  v42 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v43, &v33, 1, a4);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
}

uint64_t _ViewListOutputs.makeAttribute(inputs:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  _QWORD *v14;
  uint64_t v15;
  char v16;
  _QWORD v17[5];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[40];
  __int128 v25[2];
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v8 = a1[5];
  v7 = a1[6];
  v9 = a1[7];
  outlined init with copy of _ViewListOutputs.Views(v1, (uint64_t)v25);
  if ((v26 & 1) != 0)
  {
    v10 = LODWORD(v25[0]);
    if (*((_QWORD *)&v25[0] + 1))
    {
      LODWORD(v18) = v25[0];
      v19 = *((_QWORD *)&v25[0] + 1);
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
      lazy protocol witness table accessor for type _ViewListOutputs.ApplyModifiers and conformance _ViewListOutputs.ApplyModifiers();
      swift_retain();
      v10 = Attribute.init<A>(body:value:flags:update:)();
      swift_release_n();
    }
  }
  else
  {
    outlined init with take of ScrollStateRequest(v25, (uint64_t)v24);
    outlined init with copy of AnyTrackedValue((uint64_t)v24, (uint64_t)v17);
    v18 = v2;
    LODWORD(v19) = v3;
    v20 = v4;
    v21 = v5;
    v22 = v6;
    v23 = v8;
    v11 = _GraphInputs.stableIDScope.getter();
    v15 = MEMORY[0x24BEE4B08];
    v16 = 0;
    v14 = (_QWORD *)MEMORY[0x24BEE4AF8];
    BaseViewList.init(elements:implicitID:canTransition:stableIDScope:traitKeys:traits:)((uint64_t)v17, v7, (v9 & 3) == 1, v11, v12 & 1, &v15, &v14, (uint64_t)&v18);
    v17[3] = &type metadata for BaseViewList;
    v17[4] = &protocol witness table for BaseViewList;
    v17[0] = swift_allocObject();
    outlined init with copy of BaseViewList((uint64_t)&v18, v17[0] + 16);
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
    type metadata accessor for External<ViewList>(0, (unint64_t *)&lazy cache variable for type metadata for External<ViewList>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BE09670]);
    lazy protocol witness table accessor for type External<ViewList> and conformance External<A>();
    v10 = Attribute.init<A>(body:value:flags:update:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    outlined destroy of BaseViewList((uint64_t)&v18);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  }
  return v10;
}

unint64_t _ViewListInputs.traits.getter()
{
  uint64_t v0;
  uint64_t v1;
  BOOL v2;

  LODWORD(v1) = *(_DWORD *)(v0 + 64);
  v2 = (_DWORD)v1 == *MEMORY[0x24BE096C0];
  if ((_DWORD)v1 == *MEMORY[0x24BE096C0])
    v1 = 0;
  else
    v1 = v1;
  return v1 | ((unint64_t)v2 << 32);
}

_OWORD *_ViewListOutputs.init(_:nextImplicitID:staticCount:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  _OWORD *result;

  result = outlined init with take of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(a1, (_OWORD *)a5);
  *(_QWORD *)(a5 + 48) = a2;
  *(_QWORD *)(a5 + 56) = a3;
  *(_BYTE *)(a5 + 64) = a4 & 1;
  return result;
}

uint64_t _ViewListInputs.traits.setter(uint64_t result)
{
  uint64_t v1;
  int v2;

  v2 = *MEMORY[0x24BE096C0];
  if ((result & 0x100000000) == 0)
    v2 = result;
  *(_DWORD *)(v1 + 64) = v2;
  return result;
}

uint64_t _ViewListInputs.addTraitKey<A>(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if (*(_QWORD *)(v2 + 72))
  {
    v3 = *(_QWORD *)(v2 + 72);
    v4 = *(_BYTE *)(v2 + 80) & 1;
    result = ViewTraitKeys.insert<A>(_:)(result, a2);
    *(_QWORD *)(v2 + 72) = v3;
    *(_BYTE *)(v2 + 80) = v4;
  }
  return result;
}

SwiftUI::_ViewListInputs::Options __swiftcall _ViewListInputs.Options.init(rawValue:)(SwiftUI::_ViewListInputs::Options rawValue)
{
  SwiftUI::_ViewListInputs::Options *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

__n128 _ViewListInputs.init(_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  __n128 result;

  v2 = *(_DWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *MEMORY[0x24BE096C0];
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_DWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = v3;
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = v4;
  *(_DWORD *)(a2 + 64) = v5;
  *(_QWORD *)(a2 + 72) = MEMORY[0x24BEE4B08];
  *(_BYTE *)(a2 + 80) = 0;
  return result;
}

void _ViewList_SublistTransform.init()(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x24BEE4AF8];
}

uint64_t _ViewListInputs.subscript.setter(uint64_t a1, Swift::Int a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;

  specialized _ViewInputs.subscript.setter(a1, a2, a3, a4);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

uint64_t _ViewListInputs.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _GraphInputs.subscript.getter(a1, a2, *(_QWORD *)(a3 + 8));
}

{
  return _GraphInputs.subscript.getter(a1, a2, *(_QWORD *)(a3 + 8));
}

uint64_t static _ViewList_ID.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 == *(_DWORD *)a2 && *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4))
    return specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
  else
    return 0;
}

uint64_t ViewList.applySublists(from:list:to:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;

  v7 = 2;
  return ViewList.applySublists(from:style:list:to:)(a1, &v7, a2 | ((HIDWORD(a2) & 1) << 32), a3, a4, a5, a6) & 1;
}

uint64_t _ViewList_Elements.makeAllElements(inputs:body:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  uint64_t result;
  _BYTE v19[16];
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  __int128 v30;
  uint64_t v31;

  v10 = *a1;
  v11 = *((_DWORD *)a1 + 2);
  v12 = a1[2];
  v13 = *((_DWORD *)a1 + 20);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a2;
  *(_QWORD *)(v14 + 24) = a3;
  v31 = 0;
  v22 = v10;
  v23 = v11;
  v24 = v12;
  v15 = *(_OWORD *)(a1 + 5);
  v25 = *(_OWORD *)(a1 + 3);
  v26 = v15;
  v27 = *(_OWORD *)(a1 + 7);
  v28 = a1[9];
  v29 = v13;
  v20 = partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewInputs, @guaranteed @escaping @callee_guaranteed (@in_guaranteed _ViewInputs) -> (@out _ViewOutputs)) -> (@out _ViewOutputs?);
  v21 = v14;
  (*(void (**)(__int128 *, uint64_t *, uint64_t *, _QWORD, uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t), _BYTE *, uint64_t, uint64_t))(a5 + 16))(&v30, &v31, &v22, 0, partial apply for closure #1 in closure #1 in _ViewList_Elements.makeAllElements(inputs:indirectMap:body:), v19, a4, a5);
  *a6 = v30;
  LOBYTE(a5) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((a5 & 1) != 0)
    __break(1u);
  return result;
}

SwiftUI::_ViewList_IteratorStyle __swiftcall _ViewList_IteratorStyle.init()()
{
  _QWORD *v0;
  SwiftUI::_ViewList_IteratorStyle result;

  *v0 = 2;
  return result;
}

uint64_t ViewList.allViewIDs.getter(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  _QWORD v6[4];
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  result = (*(uint64_t (**)(void))(a2 + 32))();
  if (!result)
  {
    v7 = 0;
    v8 = MEMORY[0x24BEE4AF8];
    MEMORY[0x24BDAC7A8](0);
    v6[2] = &v8;
    v10 = 2;
    v9 = 1;
    ViewList.applySublists(from:style:list:to:)((uint64_t)&v7, &v10, 0x100000000, (uint64_t)partial apply for closure #1 in ViewList.allViewIDs.getter, (uint64_t)v6, a1, a2);
    v5 = v8;
    type metadata accessor for _ViewList_ID._Views<[_ViewList_ID]>(0);
    result = swift_allocObject();
    *(_QWORD *)(result + 24) = v5;
    *(_BYTE *)(result + 16) = 1;
  }
  return result;
}

uint64_t _ViewList_ID.canonicalID.getter@<X0>(uint64_t a1@<X8>)
{
  int *v1;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t result;

  v3 = *v1;
  v4 = v1[1];
  v5 = *((_QWORD *)v1 + 1);
  if (*(_QWORD *)(v5 + 16))
  {
    v6 = *(unsigned __int8 *)(v5 + 52);
    result = swift_retain();
    if (v6)
      v4 = -1;
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)a1 = v3;
  *(_DWORD *)(a1 + 4) = v4;
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t ViewList.applyIDs(from:listAttribute:to:)(uint64_t a1, unint64_t a2, uint64_t (*a3)(unint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;

  v7 = MEMORY[0x24BEE4AF8];
  return ViewList.applyIDs(from:listAttribute:transform:to:)(a1, a2 | ((HIDWORD(a2) & 1) << 32), &v7, a3, a4, a5, a6) & 1;
}

uint64_t ViewList.firstOffset(of:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[2];

  v3 = a1[1];
  v6[0] = *a1;
  v6[1] = v3;
  v5 = 2;
  return ViewList.firstOffset(of:style:)((unsigned int *)v6, &v5, a2, a3);
}

uint64_t _ViewListOutputs.makeAttribute(viewInputs:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  _QWORD *v17;
  uint64_t v18;
  char v19;
  _QWORD v20[5];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;
  __int128 v30[2];
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  outlined init with copy of _ViewListOutputs.Views(v1, (uint64_t)v30);
  if ((v31 & 1) != 0)
  {
    v8 = LODWORD(v30[0]);
    if (*((_QWORD *)&v30[0] + 1))
    {
      LODWORD(v21) = v30[0];
      v22 = *((_QWORD *)&v30[0] + 1);
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
      lazy protocol witness table accessor for type _ViewListOutputs.ApplyModifiers and conformance _ViewListOutputs.ApplyModifiers();
      swift_retain();
      v8 = Attribute.init<A>(body:value:flags:update:)();
      swift_release_n();
    }
  }
  else
  {
    outlined init with take of ScrollStateRequest(v30, (uint64_t)v27);
    outlined init with copy of AnyTrackedValue((uint64_t)v27, (uint64_t)v20);
    v9 = *(_QWORD *)(v1 + 48);
    v10 = v28;
    v11 = v29;
    __swift_project_boxed_opaque_existential_1(v27, v28);
    v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v10, v11);
    v21 = v2;
    v13 = v9 - v12;
    LODWORD(v22) = v3;
    v23 = v4;
    v24 = v5;
    v25 = v6;
    v26 = v7;
    v14 = _GraphInputs.stableIDScope.getter();
    v18 = MEMORY[0x24BEE4B08];
    v19 = 0;
    v17 = (_QWORD *)MEMORY[0x24BEE4AF8];
    BaseViewList.init(elements:implicitID:canTransition:stableIDScope:traitKeys:traits:)((uint64_t)v20, v13, 0, v14, v15 & 1, &v18, &v17, (uint64_t)&v21);
    v20[3] = &type metadata for BaseViewList;
    v20[4] = &protocol witness table for BaseViewList;
    v20[0] = swift_allocObject();
    outlined init with copy of BaseViewList((uint64_t)&v21, v20[0] + 16);
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
    type metadata accessor for External<ViewList>(0, (unint64_t *)&lazy cache variable for type metadata for External<ViewList>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BE09670]);
    lazy protocol witness table accessor for type External<ViewList> and conformance External<A>();
    v8 = Attribute.init<A>(body:value:flags:update:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
    outlined destroy of BaseViewList((uint64_t)&v21);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  }
  return v8;
}

uint64_t static _ViewListOutputs.makeModifiedList(list:modifier:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
    lazy protocol witness table accessor for type _ViewListOutputs.ApplyModifiers and conformance _ViewListOutputs.ApplyModifiers();
    swift_retain();
    a1 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
  }
  return a1;
}

uint64_t _ViewListInputs.base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_DWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_DWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  *(_QWORD *)(a1 + 40) = v4;
  swift_retain();
  swift_retain();
  return swift_bridgeObjectRetain();
}

double _ViewListInputs.base.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  double result;
  uint64_t v8;

  v3 = *a1;
  v4 = *((_DWORD *)a1 + 2);
  v5 = a1[2];
  v6 = a1[5];
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_QWORD *)v1 = v3;
  *(_DWORD *)(v1 + 8) = v4;
  *(_QWORD *)(v1 + 16) = v5;
  result = *((double *)a1 + 3);
  v8 = a1[4];
  *(double *)(v1 + 24) = result;
  *(_QWORD *)(v1 + 32) = v8;
  *(_QWORD *)(v1 + 40) = v6;
  return result;
}

uint64_t (*_ViewListInputs.base.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewListInputs.implicitID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t _ViewListInputs.implicitID.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = result;
  return result;
}

uint64_t (*_ViewListInputs.implicitID.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewListInputs.Options.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

void static _ViewListInputs.Options.canTransition.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static _ViewListInputs.Options.disableTransitions.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static _ViewListInputs.Options.requiresDepthAndSections.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

void static _ViewListInputs.Options.requiresNonEmptyGroupParent.getter(_QWORD *a1@<X8>)
{
  *a1 = 8;
}

void static _ViewListInputs.Options.isNonEmptyParent.getter(_QWORD *a1@<X8>)
{
  *a1 = 16;
}

void static _ViewListInputs.Options.resetHeaderStyleContext.getter(_QWORD *a1@<X8>)
{
  *a1 = 32;
}

void static _ViewListInputs.Options.resetFooterStyleContext.getter(_QWORD *a1@<X8>)
{
  *a1 = 64;
}

void static _ViewListInputs.Options.layoutPriorityIsTrait.getter(_QWORD *a1@<X8>)
{
  *a1 = 128;
}

void static _ViewListInputs.Options.requiresSections.getter(_QWORD *a1@<X8>)
{
  *a1 = 256;
}

void static _ViewListInputs.Options.tupleViewCreatesUnaryElements.getter(_QWORD *a1@<X8>)
{
  *a1 = 512;
}

void static _ViewListInputs.Options.previewContext.getter(_QWORD *a1@<X8>)
{
  *a1 = 1024;
}

void static _ViewListInputs.Options.needsDynamicTraits.getter(_QWORD *a1@<X8>)
{
  *a1 = 2048;
}

void static _ViewListInputs.Options.allowsNestedSections.getter(_QWORD *a1@<X8>)
{
  *a1 = 4096;
}

void static _ViewListInputs.Options.sectionsConcatenateFooter.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x2000;
}

void static _ViewListInputs.Options.needsArchivedAnimationTraits.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x4000;
}

void static _ViewListInputs.Options.sectionsAreHierarchical.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x8000;
}

void _ViewListInputs.options.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 56);
}

_QWORD *_ViewListInputs.options.setter(_QWORD *result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = *result;
  return result;
}

uint64_t (*_ViewListInputs.options.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

_BYTE *(*_ViewListInputs.traits.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;
  int v2;
  int v3;
  BOOL v4;

  *(_QWORD *)a1 = v1;
  v2 = *(_DWORD *)(v1 + 64);
  v3 = *MEMORY[0x24BE096C0];
  *(_DWORD *)(a1 + 16) = *MEMORY[0x24BE096C0];
  v4 = v2 == v3;
  if (v4)
    v2 = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v2;
  return _ViewListInputs.traits.modify;
}

_BYTE *_ViewListInputs.traits.modify(_BYTE *result)
{
  _DWORD *v1;

  v1 = result + 8;
  if (result[12])
    v1 = result + 16;
  *(_DWORD *)(*(_QWORD *)result + 64) = *v1;
  return result;
}

uint64_t _ViewListInputs.traitKeys.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 80);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 72);
  *(_BYTE *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t _ViewListInputs.traitKeys.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t result;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 72) = v2;
  *(_BYTE *)(v1 + 80) = v3;
  return result;
}

uint64_t (*_ViewListInputs.traitKeys.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

__n128 _ViewListInputs.init(_:implicitID:options:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  __n128 result;

  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *a3;
  v8 = *MEMORY[0x24BE096C0];
  *(_QWORD *)a4 = *(_QWORD *)a1;
  *(_DWORD *)(a4 + 8) = v4;
  *(_QWORD *)(a4 + 16) = v5;
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a4 + 24) = result;
  *(_QWORD *)(a4 + 40) = v6;
  *(_QWORD *)(a4 + 48) = a2;
  *(_QWORD *)(a4 + 56) = v7;
  *(_DWORD *)(a4 + 64) = v8;
  *(_QWORD *)(a4 + 72) = MEMORY[0x24BEE4B08];
  *(_BYTE *)(a4 + 80) = 0;
  return result;
}

__n128 _ViewListInputs.init(_:implicitID:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  __n128 result;

  v3 = *(_DWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *MEMORY[0x24BE096C0];
  *(_QWORD *)a3 = *(_QWORD *)a1;
  *(_DWORD *)(a3 + 8) = v3;
  *(_QWORD *)(a3 + 16) = v4;
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a3 + 24) = result;
  *(_QWORD *)(a3 + 40) = v5;
  *(_QWORD *)(a3 + 48) = a2;
  *(_QWORD *)(a3 + 56) = 0;
  *(_DWORD *)(a3 + 64) = v6;
  *(_QWORD *)(a3 + 72) = MEMORY[0x24BEE4B08];
  *(_BYTE *)(a3 + 80) = 0;
  return result;
}

void (*_ViewListInputs.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(Swift::Int **a1, char a2)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  size_t v13;

  v9 = malloc(0x40uLL);
  *a1 = v9;
  *v9 = a2;
  v9[1] = a3;
  v10 = *(_QWORD *)(a4 + 8);
  v9[2] = v4;
  v9[3] = v10;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[4] = AssociatedTypeWitness;
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9[5] = v12;
  v13 = *(_QWORD *)(v12 + 64);
  v9[6] = malloc(v13);
  v9[7] = malloc(v13);
  _GraphInputs.subscript.getter(a2, a3, v10);
  return _ViewInputs.subscript.modify;
}

uint64_t _ViewListInputs.subscript.setter(uint64_t a1, Swift::Int a2, Swift::Int a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;

  specialized _ViewInputs.subscript.setter(a1, a2, a3, a4);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

void (*_ViewListInputs.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(Swift::Int **a1, char a2)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  size_t v15;

  v11 = malloc(0x48uLL);
  *a1 = v11;
  v11[2] = a5;
  v11[3] = v5;
  *v11 = a2;
  v11[1] = a3;
  v12 = *(_QWORD *)(a4 + 8);
  v11[4] = v12;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11[5] = AssociatedTypeWitness;
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11[6] = v14;
  v15 = *(_QWORD *)(v14 + 64);
  v11[7] = malloc(v15);
  v11[8] = malloc(v15);
  _GraphInputs.subscript.getter(a2, a3, v12);
  return _ViewInputs.subscript.modify;
}

BOOL _ViewListInputs.canTransition.getter()
{
  uint64_t v0;

  return (*(_QWORD *)(v0 + 56) & 3) == 1;
}

uint64_t _ViewListCountInputs.customInputs.getter()
{
  return swift_retain();
}

uint64_t _ViewListCountInputs.customInputs.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*_ViewListCountInputs.customInputs.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void _ViewListCountInputs.options.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 8);
}

_QWORD *_ViewListCountInputs.options.setter(_QWORD *result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = *result;
  return result;
}

uint64_t (*_ViewListCountInputs.options.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void _ViewListCountInputs.baseOptions.getter(_DWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_DWORD *)(v1 + 16);
}

_DWORD *_ViewListCountInputs.baseOptions.setter(_DWORD *result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 16) = *result;
  return result;
}

uint64_t (*_ViewListCountInputs.baseOptions.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewListCountInputs.customModifierTypes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t _ViewListCountInputs.customModifierTypes.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t (*_ViewListCountInputs.customModifierTypes.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewListCountInputs.init(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t result;

  v3 = *a1;
  v4 = *((_DWORD *)a1 + 9);
  v5 = a1[7];
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v5;
  *(_DWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = MEMORY[0x24BEE4AF8];
  return result;
}

void (*_ViewListCountInputs.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(Swift::Int **a1, char a2)
{
  uint64_t *v4;
  _QWORD *v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  size_t v13;

  v9 = malloc(0x40uLL);
  *a1 = v9;
  *v9 = a2;
  v9[1] = a3;
  v10 = *(_QWORD *)(a4 + 8);
  v9[2] = v4;
  v9[3] = v10;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[4] = AssociatedTypeWitness;
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9[5] = v12;
  v13 = *(_QWORD *)(v12 + 64);
  v9[6] = malloc(v13);
  v9[7] = malloc(v13);
  PropertyList.subscript.getter(a2, *v4, a3, v10);
  return _ViewListCountInputs.subscript.modify;
}

void _ViewListCountInputs.subscript.modify(Swift::Int **a1, char a2)
{
  Swift::Int *v2;
  void *v3;
  void *v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  void (*v10)(void *, Swift::Int);

  v2 = *a1;
  v3 = (void *)(*a1)[6];
  v4 = (void *)(*a1)[7];
  v5 = (*a1)[4];
  v6 = (*a1)[5];
  v7 = (*a1)[3];
  v9 = **a1;
  v8 = (*a1)[1];
  if ((a2 & 1) != 0)
  {
    (*(void (**)(Swift::Int, void *, Swift::Int))(v6 + 16))((*a1)[6], v4, v5);
    specialized PropertyList.subscript.setter((uint64_t)v3, v9, v8, v7);
    v10 = *(void (**)(void *, Swift::Int))(v6 + 8);
    v10(v3, v5);
  }
  else
  {
    specialized PropertyList.subscript.setter((*a1)[7], v9, v8, v7);
    v10 = *(void (**)(void *, Swift::Int))(v6 + 8);
  }
  v10(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t _ViewListCountInputs.base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v3 = *v1;
  v4 = *((_DWORD *)v1 + 4);
  v5 = *MEMORY[0x24BE096C0];
  *(_DWORD *)(a1 + 32) = -1;
  *(_QWORD *)(a1 + 40) = MEMORY[0x24BEE4B08];
  *(_DWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 24) = v5;
  v6 = MEMORY[0x24BEE4AF8];
  v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
  v8 = swift_allocObject();
  *(_DWORD *)(v8 + 16) = v5;
  *(_QWORD *)(v8 + 24) = v6;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_WORD *)(v8 + 80) = 256;
  *(_QWORD *)(v8 + 88) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  *(_DWORD *)(a1 + 28) = v5;
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 36) = v4;
  return swift_retain();
}

uint64_t _ViewListOutputs.views.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of _ViewListOutputs.Views(v1, a1);
}

uint64_t _ViewListOutputs.views.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of _ViewListOutputs.Views(a1, v1);
}

uint64_t (*_ViewListOutputs.views.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewListOutputs.nextImplicitID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t _ViewListOutputs.nextImplicitID.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = result;
  return result;
}

uint64_t (*_ViewListOutputs.nextImplicitID.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewListOutputs.staticCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

uint64_t _ViewListOutputs.staticCount.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 56) = result;
  *(_BYTE *)(v2 + 64) = a2 & 1;
  return result;
}

uint64_t (*_ViewListOutputs.staticCount.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

_OWORD *_ViewListOutputs.init(_:nextImplicitID:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _OWORD *result;

  result = outlined init with take of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(a1, (_OWORD *)a3);
  *(_QWORD *)(a3 + 48) = a2;
  *(_QWORD *)(a3 + 56) = 0;
  *(_BYTE *)(a3 + 64) = 1;
  return result;
}

uint64_t _ViewListOutputs.ListModifier.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t _ViewListOutputs.ListModifier.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t _ViewList_IteratorStyle.applyGranularity.getter()
{
  _DWORD *v0;

  return *v0 & 1;
}

uint64_t _ViewList_IteratorStyle.applyGranularity.setter(uint64_t result)
{
  unint64_t *v1;

  *v1 = *v1 & 0xFFFFFFFFFFFFFFFELL | result & 1;
  return result;
}

uint64_t (*_ViewList_IteratorStyle.applyGranularity.modify(uint64_t a1))(uint64_t result)
{
  _BYTE *v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *v1 & 1;
  return _ViewList_IteratorStyle.applyGranularity.modify;
}

uint64_t _ViewList_IteratorStyle.applyGranularity.modify(uint64_t result)
{
  **(_QWORD **)result = **(_QWORD **)result & 0xFFFFFFFFFFFFFFFELL | *(unsigned __int8 *)(result + 8);
  return result;
}

uint64_t _ViewList_IteratorStyle.granularity.getter()
{
  _QWORD *v0;

  return *v0 >> 1;
}

uint64_t _ViewList_IteratorStyle.granularity.setter(uint64_t result)
{
  uint64_t *v1;

  *v1 = *v1 & 1 | (2 * result);
  return result;
}

uint64_t (*_ViewList_IteratorStyle.granularity.modify(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1 >> 1;
  a1[1] = v1;
  return _ViewList_IteratorStyle.granularity.modify;
}

uint64_t _ViewList_IteratorStyle.granularity.modify(uint64_t result)
{
  **(_QWORD **)(result + 8) = **(_QWORD **)(result + 8) & 1 | (2 * *(_QWORD *)result);
  return result;
}

SwiftUI::_ViewList_IteratorStyle __swiftcall _ViewList_IteratorStyle.init(granularity:)(SwiftUI::_ViewList_IteratorStyle granularity)
{
  _QWORD *v1;

  *v1 = 2 * granularity.value;
  return granularity;
}

Swift::Int __swiftcall _ViewList_IteratorStyle.applyGranularity(to:)(Swift::Int to)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  if ((*v1 & 1) != 0)
  {
    v2 = *v1 >> 1;
    v3 = (unsigned __int128)(to * (__int128)v2) >> 64;
    to *= v2;
    if (v3 != to >> 63)
      __break(1u);
  }
  return to;
}

Swift::Void __swiftcall _ViewList_IteratorStyle.alignToPreviousGranularityMultiple(_:)(Swift::Int *a1)
{
  _QWORD *v1;
  Swift::Int v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  Swift::Int v6;

  v2 = *a1;
  if (*a1)
  {
    v3 = *v1 >> 1;
    if (v3 != 1)
    {
      if (v3)
      {
        v4 = v2 % v3;
        v5 = __OFSUB__(v2, v4);
        v6 = v2 - v4;
        if (!v5)
        {
          *a1 = v6;
          return;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
    }
  }
}

Swift::Void __swiftcall _ViewList_IteratorStyle.alignToNextGranularityMultiple(_:)(Swift::Int *a1)
{
  _QWORD *v1;
  uint64_t v2;
  Swift::Int v3;
  Swift::Int v4;
  BOOL v5;
  Swift::Int v6;
  Swift::Int v7;

  v2 = *v1 >> 1;
  if (v2 != 1)
  {
    if (*v1 < 2uLL)
    {
      __break(1u);
    }
    else
    {
      v3 = *a1;
      v4 = *a1 % v2;
      if (!v4)
        return;
      v5 = __OFSUB__(v2, v4);
      v6 = v2 - v4;
      if (!v5)
      {
        v5 = __OFADD__(v3, v6);
        v7 = v3 + v6;
        if (!v5)
        {
          *a1 = v7;
          return;
        }
LABEL_10:
        __break(1u);
        return;
      }
    }
    __break(1u);
    goto LABEL_10;
  }
}

BOOL static _ViewList_IteratorStyle.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

BOOL static _ViewList_Edit.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void _ViewList_Edit.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int _ViewList_Edit.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t _ViewList_Sublist.start.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t _ViewList_Sublist.start.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*_ViewList_Sublist.start.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewList_Sublist.count.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t _ViewList_Sublist.count.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*_ViewList_Sublist.count.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewList_Sublist.id.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 24);
  *a1 = *(_QWORD *)(v1 + 16);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

double _ViewList_Sublist.id.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  double result;

  v3 = *(_QWORD *)(a1 + 8);
  swift_bridgeObjectRelease();
  result = *(double *)a1;
  *(_QWORD *)(v1 + 16) = *(_QWORD *)a1;
  *(_QWORD *)(v1 + 24) = v3;
  return result;
}

uint64_t (*_ViewList_Sublist.id.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewList_Sublist.elements.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of AnyTrackedValue(v1 + 32, a1);
}

uint64_t _ViewList_Sublist.elements.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + 32;
  __swift_destroy_boxed_opaque_existential_1(v3);
  return outlined init with take of ScrollStateRequest(a1, v3);
}

uint64_t (*_ViewList_Sublist.elements.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewList_Sublist.traits.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 72);
  return swift_bridgeObjectRetain();
}

uint64_t _ViewList_Sublist.traits.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 72) = v2;
  return result;
}

uint64_t (*_ViewList_Sublist.traits.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

unint64_t _ViewList_Sublist.list.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 80) | ((unint64_t)*(unsigned __int8 *)(v0 + 84) << 32);
}

uint64_t _ViewList_Sublist.list.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 80) = result;
  *(_BYTE *)(v1 + 84) = BYTE4(result) & 1;
  return result;
}

uint64_t (*_ViewList_Sublist.list.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewList_Sublist.init(start:count:id:elements:traits:list:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, __int128 *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v9 = a3[1];
  v10 = *a5;
  *(_QWORD *)a7 = a1;
  *(_QWORD *)(a7 + 8) = a2;
  *(_QWORD *)(a7 + 16) = *a3;
  *(_QWORD *)(a7 + 24) = v9;
  result = outlined init with take of ScrollStateRequest(a4, a7 + 32);
  *(_QWORD *)(a7 + 72) = v10;
  *(_DWORD *)(a7 + 80) = a6;
  *(_BYTE *)(a7 + 84) = BYTE4(a6) & 1;
  return result;
}

uint64_t (*_ViewList_SublistTransform.items.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

BOOL _ViewList_SublistTransform.isEmpty.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16) == 0;
}

uint64_t _ViewList_SublistTransform.push<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, double);
  _QWORD *v15;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;

  v4 = v3;
  v7 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v20 - v12;
  v14 = *(void (**)(char *, double))(v7 + 16);
  v14((char *)&v20 - v12, v11);
  v15 = (_QWORD *)*v4;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v4 = (uint64_t)v15;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
    *v4 = (uint64_t)v15;
  }
  v18 = v15[2];
  v17 = v15[3];
  if (v18 >= v17 >> 1)
    *v4 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, v15);
  ((void (*)(char *, char *, uint64_t))v14)(v9, v13, a2);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, (uint64_t)v9, v4, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v13, a2);
}

Swift::Void __swiftcall _ViewList_SublistTransform.pop()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD **)v0;
  if (!*(_QWORD *)(*(_QWORD *)v0 + 16))
  {
    __break(1u);
LABEL_6:
    v1 = specialized _ArrayBuffer._consumeAndCreateNew()(v1);
    v2 = v1[2];
    if (v2)
      goto LABEL_4;
    goto LABEL_7;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_6;
  v2 = v1[2];
  if (v2)
  {
LABEL_4:
    v3 = v2 - 1;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v1[5 * v2 - 1]);
    v1[2] = v3;
    *(_QWORD *)v0 = v1;
    return;
  }
LABEL_7:
  __break(1u);
}

uint64_t _ViewList_SublistTransform.apply(sublist:)(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 16);
  if (v3)
  {
    v4 = result;
    result = swift_bridgeObjectRetain();
    v5 = v2 + 40 * v3 - 8;
    while (v3 <= *(_QWORD *)(v2 + 16))
    {
      --v3;
      outlined init with copy of AnyTrackedValue(v5, (uint64_t)v8);
      v6 = v9;
      v7 = v10;
      __swift_project_boxed_opaque_existential_1(v8, v9);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 8))(v4, v6, v7);
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
      v5 -= 40;
      if (!v3)
        return swift_bridgeObjectRelease();
    }
    __break(1u);
  }
  return result;
}

uint64_t _ViewList_SublistTransform.bindID(_:)(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 16);
  if (v3)
  {
    v4 = result;
    result = swift_bridgeObjectRetain();
    v5 = v2 + 40 * v3 - 8;
    while (v3 <= *(_QWORD *)(v2 + 16))
    {
      --v3;
      outlined init with copy of AnyTrackedValue(v5, (uint64_t)v8);
      v6 = v9;
      v7 = v10;
      __swift_project_boxed_opaque_existential_1(v8, v9);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v4, v6, v7);
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
      v5 -= 40;
      if (!v3)
        return swift_bridgeObjectRelease();
    }
    __break(1u);
  }
  return result;
}

Swift::Int __swiftcall _ViewList_Node.count(style:)(SwiftUI::_ViewList_IteratorStyle style)
{
  uint64_t v1;
  Swift::Int result;
  _BYTE v3[88];

  outlined init with copy of _ViewList_Node(v1, (uint64_t)v3);
  __asm { BR              X10 }
  return result;
}

uint64_t sub_234EA0478()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[3];
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  outlined init with take of ScrollStateRequest(&v9, (uint64_t)v5);
  v1 = v6;
  v2 = v7;
  __swift_project_boxed_opaque_existential_1(v5, v6);
  v8 = v0;
  v3 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v2 + 8))(&v8, v1, v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  return v3;
}

Swift::Int __swiftcall _ViewList_Group.count(style:)(SwiftUI::_ViewList_IteratorStyle style)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  uint64_t v6;
  uint64_t v7;
  Swift::Int result;
  BOOL v9;
  uint64_t v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)style.value;
    v4 = *(_QWORD *)v1 + 32;
    swift_bridgeObjectRetain();
    v5 = 0;
    while (1)
    {
      outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v4, (uint64_t)v11);
      v6 = v12;
      v7 = v13;
      __swift_project_boxed_opaque_existential_1(v11, v12);
      v10 = v3;
      result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v7 + 8))(&v10, v6, v7);
      v9 = __OFADD__(v5, result);
      v5 += result;
      if (v9)
        break;
      outlined destroy of (list: ViewList, attribute: Attribute<ViewList>)((uint64_t)v11);
      v4 += 48;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        return v5;
      }
    }
    __break(1u);
  }
  else
  {
    return 0;
  }
  return result;
}

Swift::Int __swiftcall _ViewList_Section.count(style:)(Swift::Int style)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  BOOL v12;
  int64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21[3];
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;

  v2 = *(_QWORD *)style;
  v3 = *(_QWORD *)(v1 + 8);
  if (*(_BYTE *)(v1 + 24) == 1)
  {
    if (*(_QWORD *)(v3 + 16))
    {
      outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v3 + 32, (uint64_t)v21);
      outlined init with take of ScrollStateRequest(v21, (uint64_t)v22);
      v4 = v23;
      v5 = v24;
      __swift_project_boxed_opaque_existential_1(v22, v23);
      *(_QWORD *)&v21[0] = v2 & 0xFFFFFFFFFFFFFFFELL | ((v2 & 0xFFFFFFFFFFFFFFFELL) != 2);
      v6 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v5 + 8))(v21, v4, v5);
LABEL_14:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
      return v6;
    }
    __break(1u);
    goto LABEL_16;
  }
  if (*(_QWORD *)(v3 + 16) < 2uLL)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v3 + 80, (uint64_t)v21);
  outlined init with take of ScrollStateRequest(v21, (uint64_t)v22);
  v7 = v23;
  v8 = v24;
  __swift_project_boxed_opaque_existential_1(v22, v23);
  *(_QWORD *)&v21[0] = v2;
  v9 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v8 + 8))(v21, v7, v8);
  style = __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  v10 = v2 >> 1;
  if (v2 >> 1 == 1)
    goto LABEL_26;
  if (v2 < 2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v11 = v9 % v10;
  if (!(v9 % v10))
    goto LABEL_26;
  v12 = __OFSUB__(v10, v11);
  v13 = v10 - v11;
  if (v12)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v12 = __OFADD__(v9, v13);
  v9 += v13;
  if (!v12)
  {
LABEL_26:
    if (*(_QWORD *)(v3 + 16))
    {
      v14 = v10 != 1;
      outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v3 + 32, (uint64_t)v21);
      outlined init with take of ScrollStateRequest(v21, (uint64_t)v22);
      v15 = v23;
      v16 = v24;
      __swift_project_boxed_opaque_existential_1(v22, v23);
      v17 = v2 & 0xFFFFFFFFFFFFFFFELL | v14;
      *(_QWORD *)&v21[0] = v17;
      style = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v16 + 8))(v21, v15, v16);
      v18 = v9 + style;
      if (!__OFADD__(v9, style))
      {
        style = __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
        if (*(_QWORD *)(v3 + 16) >= 3uLL)
        {
          outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v3 + 128, (uint64_t)v21);
          outlined init with take of ScrollStateRequest(v21, (uint64_t)v22);
          v19 = v23;
          v20 = v24;
          __swift_project_boxed_opaque_existential_1(v22, v23);
          *(_QWORD *)&v21[0] = v17;
          style = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v20 + 8))(v21, v19, v20);
          v6 = v18 + style;
          if (!__OFADD__(v18, style))
            goto LABEL_14;
          goto LABEL_20;
        }
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_23:
  __break(1u);
  return style;
}

Swift::Int __swiftcall _ViewList_Node.estimatedCount(style:)(SwiftUI::_ViewList_IteratorStyle style)
{
  uint64_t v1;
  Swift::Int result;
  _BYTE v3[88];

  outlined init with copy of _ViewList_Node(v1, (uint64_t)v3);
  __asm { BR              X10 }
  return result;
}

uint64_t sub_234EA08D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[3];
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  outlined init with take of ScrollStateRequest(&v9, (uint64_t)v5);
  v1 = v6;
  v2 = v7;
  __swift_project_boxed_opaque_existential_1(v5, v6);
  v8 = v0;
  v3 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v2 + 16))(&v8, v1, v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  return v3;
}

Swift::Int __swiftcall _ViewList_Group.estimatedCount(style:)(SwiftUI::_ViewList_IteratorStyle style)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  uint64_t v6;
  uint64_t v7;
  Swift::Int result;
  BOOL v9;
  uint64_t v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)style.value;
    v4 = *(_QWORD *)v1 + 32;
    swift_bridgeObjectRetain();
    v5 = 0;
    while (1)
    {
      outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v4, (uint64_t)v11);
      v6 = v12;
      v7 = v13;
      __swift_project_boxed_opaque_existential_1(v11, v12);
      v10 = v3;
      result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v7 + 16))(&v10, v6, v7);
      v9 = __OFADD__(v5, result);
      v5 += result;
      if (v9)
        break;
      outlined destroy of (list: ViewList, attribute: Attribute<ViewList>)((uint64_t)v11);
      v4 += 48;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        return v5;
      }
    }
    __break(1u);
  }
  else
  {
    return 0;
  }
  return result;
}

Swift::Int __swiftcall _ViewList_Section.estimatedCount(style:)(Swift::Int style)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  BOOL v12;
  int64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21[3];
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;

  v2 = *(_QWORD *)style;
  v3 = *(_QWORD *)(v1 + 8);
  if (*(_BYTE *)(v1 + 24) == 1)
  {
    if (*(_QWORD *)(v3 + 16))
    {
      outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v3 + 32, (uint64_t)v21);
      outlined init with take of ScrollStateRequest(v21, (uint64_t)v22);
      v4 = v23;
      v5 = v24;
      __swift_project_boxed_opaque_existential_1(v22, v23);
      *(_QWORD *)&v21[0] = v2;
      v6 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v5 + 16))(v21, v4, v5);
LABEL_14:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
      return v6;
    }
    __break(1u);
    goto LABEL_16;
  }
  if (*(_QWORD *)(v3 + 16) < 2uLL)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v3 + 80, (uint64_t)v21);
  outlined init with take of ScrollStateRequest(v21, (uint64_t)v22);
  v7 = v23;
  v8 = v24;
  __swift_project_boxed_opaque_existential_1(v22, v23);
  *(_QWORD *)&v21[0] = v2;
  v9 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v8 + 16))(v21, v7, v8);
  style = __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  v10 = v2 >> 1;
  if (v2 >> 1 == 1)
    goto LABEL_26;
  if (v2 < 2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v11 = v9 % v10;
  if (!(v9 % v10))
    goto LABEL_26;
  v12 = __OFSUB__(v10, v11);
  v13 = v10 - v11;
  if (v12)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v12 = __OFADD__(v9, v13);
  v9 += v13;
  if (!v12)
  {
LABEL_26:
    if (*(_QWORD *)(v3 + 16))
    {
      v14 = v10 != 1;
      outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v3 + 32, (uint64_t)v21);
      outlined init with take of ScrollStateRequest(v21, (uint64_t)v22);
      v15 = v23;
      v16 = v24;
      __swift_project_boxed_opaque_existential_1(v22, v23);
      v17 = v2 & 0xFFFFFFFFFFFFFFFELL | v14;
      *(_QWORD *)&v21[0] = v17;
      style = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v16 + 16))(v21, v15, v16);
      v18 = v9 + style;
      if (!__OFADD__(v9, style))
      {
        style = __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
        if (*(_QWORD *)(v3 + 16) >= 3uLL)
        {
          outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v3 + 128, (uint64_t)v21);
          outlined init with take of ScrollStateRequest(v21, (uint64_t)v22);
          v19 = v23;
          v20 = v24;
          __swift_project_boxed_opaque_existential_1(v22, v23);
          *(_QWORD *)&v21[0] = v17;
          style = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v20 + 16))(v21, v19, v20);
          v6 = v18 + style;
          if (!__OFADD__(v18, style))
            goto LABEL_14;
          goto LABEL_20;
        }
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_23:
  __break(1u);
  return style;
}

void _ViewList_Node.applyNodes(from:style:transform:to:)()
{
  uint64_t v0;
  _BYTE v1[104];

  outlined init with copy of _ViewList_Node(v0, (uint64_t)v1);
  __asm { BR              X10 }
}

uint64_t sub_234EA0D30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  char v11;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;

  v6 = *(unsigned int *)(v5 - 144);
  v7 = *(_BYTE *)(v5 - 140);
  outlined init with take of ScrollStateRequest((__int128 *)(v5 - 184), (uint64_t)v13);
  v8 = v14;
  v9 = v15;
  __swift_project_boxed_opaque_existential_1(v13, v14);
  v16 = v4;
  v10 = *(uint64_t (**)(uint64_t, uint64_t *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 48);
  v17 = v7;
  v11 = v10(v0, &v16, v6 | ((unint64_t)v7 << 32), v3, v2, v1, v8, v9);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  return v11 & 1;
}

uint64_t _ViewList_Group.applyNodes(from:style:transform:to:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v20;
  _OWORD v21[3];
  __int128 v22;
  uint64_t v23;
  unsigned int v24;

  v8 = *a2;
  v9 = *(_QWORD *)(*v5 + 16);
  v16 = *v5 + 32;
  v17 = *v5;
  result = swift_bridgeObjectRetain();
  v11 = 0;
  if (v9)
    goto LABEL_3;
LABEL_2:
  v11 = v9;
  memset(v21, 0, 44);
  while (1)
  {
    outlined init with take of (key: AnyHashable, value: ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item)?((uint64_t)v21, (uint64_t)&v22, (unint64_t *)&lazy cache variable for type metadata for (list: ViewList, attribute: Attribute<ViewList>)?, (void (*)(uint64_t))type metadata accessor for (list: ViewList, attribute: Attribute<ViewList>));
    v12 = v23;
    if (!v23)
    {
      swift_bridgeObjectRelease();
      return v12 == 0;
    }
    v13 = v24;
    outlined init with take of ScrollStateRequest(&v22, (uint64_t)v21);
    v14 = *((_QWORD *)&v21[1] + 1);
    v15 = *(_QWORD *)&v21[2];
    __swift_project_boxed_opaque_existential_1(v21, *((uint64_t *)&v21[1] + 1));
    v20 = v8;
    if (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 48))(a1, &v20, v13, a3, a4, a5, v14, v15) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
      return v12 == 0;
    }
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    if (v11 == v9)
      goto LABEL_2;
LABEL_3:
    if (v11 >= *(_QWORD *)(v17 + 16))
      break;
    outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v16 + 48 * v11++, (uint64_t)v21);
  }
  __break(1u);
  return result;
}

