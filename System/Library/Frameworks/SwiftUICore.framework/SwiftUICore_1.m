void (*EnvironmentValues.defaultPadding.modify(double **a1))(double **a1)
{
  uint64_t *v1;
  double *v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = (double *)malloc(0x48uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 7) = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    v7 = v6;
    v9 = v8;
    v11 = v10;
    swift_release_n();
  }
  else
  {
    v12 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v12);
    v7 = v13;
    v9 = v14;
    v11 = v15;
  }
  swift_release_n();
  v3[8] = 0.0;
  *v3 = v5;
  *((_QWORD *)v3 + 1) = v7;
  *((_QWORD *)v3 + 2) = v9;
  *((_QWORD *)v3 + 3) = v11;
  return EnvironmentValues.defaultPadding.modify;
}

void EnvironmentValues.defaultPadding.modify(double **a1)
{
  double *v1;
  uint64_t *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *a1;
  v2 = (uint64_t *)*((_QWORD *)*a1 + 7);
  v4 = **a1;
  v3 = (*a1)[1];
  v6 = (*a1)[2];
  v5 = (*a1)[3];
  v7 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v4, v3, v6, v5);
  swift_release();
  if (v2[1])
  {
    v8 = **((_QWORD **)v1 + 7);
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v7, v8);
    swift_release();
    swift_release();
  }
  swift_release();
  free(v1);
}

__n128 one-time initialization function for defaultValue()
{
  __n128 result;

  __asm { FMOV            V0.2D, #16.0 }
  static DefaultPaddingKey.defaultValue = (__int128)result;
  *(__n128 *)&qword_254264980 = result;
  return result;
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance DefaultPaddingKey@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  result = *(double *)&static DefaultPaddingKey.defaultValue;
  v3 = *(_OWORD *)&qword_254264980;
  *a1 = static DefaultPaddingKey.defaultValue;
  a1[1] = v3;
  return result;
}

uint64_t View._ignoresAutomaticPadding(_:)(char a1, uint64_t a2, uint64_t a3)
{
  char v4;

  v4 = a1;
  return View.modifier<A>(_:)(&v4, a2, &type metadata for IgnoresAutomaticPaddingLayout, a3);
}

uint64_t View._automaticPadding(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD v6[2];
  char v7;
  _OWORD v8[2];
  char v9;

  outlined init with take of EdgeInsets?(a1, (uint64_t)v8);
  v6[0] = v8[0];
  v6[1] = v8[1];
  v7 = v9;
  return View.modifier<A>(_:)(v6, a2, &type metadata for AutomaticPaddingViewModifier, a3);
}

double protocol witness for UnaryLayout.placement(of:in:) in conformance IgnoresAutomaticPaddingLayout@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  double v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  double *InputValue;
  double v10;
  double v11;
  double result;
  double v13;
  __int128 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;

  v3 = *(double *)(a1 + 16);
  v4 = *(_BYTE *)(a1 + 48);
  v19 = *(_OWORD *)(a1 + 24);
  PlacementContext.proposedSize.getter((uint64_t)&v20);
  v5 = v20;
  v6 = v21;
  v7 = v22;
  v8 = v23;
  if ((v4 & 1) != 0)
  {
    InputValue = (double *)AGGraphGetInputValue();
    v10 = *InputValue;
    v11 = InputValue[1];
  }
  else
  {
    v10 = v3;
    v11 = *(double *)&v19;
  }
  result = v10 * 0.5;
  *(_QWORD *)a2 = v5;
  v13 = v11 * 0.5;
  *(_BYTE *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = v7;
  *(_BYTE *)(a2 + 24) = v8;
  __asm { FMOV            V2.2D, #0.5 }
  *(_OWORD *)(a2 + 32) = _Q2;
  *(double *)(a2 + 48) = result;
  *(double *)(a2 + 56) = v13;
  return result;
}

uint64_t protocol witness for UnaryLayout.sizeThatFits(in:context:child:) in conformance IgnoresAutomaticPaddingLayout(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  int v7;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;

  v3 = *(_QWORD *)a1;
  v4 = *(_BYTE *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_BYTE *)(a1 + 24);
  v7 = *((_DWORD *)a3 + 2);
  v13 = *a3;
  v14 = v7;
  v9 = v3;
  v10 = v4;
  v11 = v5;
  v12 = v6;
  return LayoutProxy.size(in:)(&v9);
}

uint64_t protocol witness for UnaryLayout.layoutPriority(child:) in conformance IgnoresAutomaticPaddingLayout()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  LayoutProxy.layoutComputer.getter(&v2);
  v0 = v2;
  if (one-time initialization token for lockAssertionsAreEnabled != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_7;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (!_MovableLockIsOwner(static Update._lock))
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_7:
    (*(void (**)(void))(*(_QWORD *)v0 + 88))();
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for UnaryLayout.ignoresAutomaticPadding(child:) in conformance IgnoresAutomaticPaddingLayout()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t static AutomaticPaddingViewModifier._makeView(modifier:inputs:body:)@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(void)@<X2>, uint64_t a3@<X8>)
{
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD v11[2];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v5 = *(_OWORD *)(a1 + 48);
  v12 = *(_OWORD *)(a1 + 32);
  v13 = v5;
  v14 = *(_OWORD *)(a1 + 64);
  v15 = *(_DWORD *)(a1 + 80);
  v6 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v6;
  if ((BYTE4(v12) & 0x22) == 0)
    return a2();
  swift_beginAccess();
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for ModifiedContent<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, _SafeAreaInsetsModifier>(0, v7, v8, v9);
  lazy protocol witness table accessor for type AutomaticPaddingViewModifier.PaddingLayout and conformance AutomaticPaddingViewModifier.PaddingLayout();
  Attribute.init<A>(body:value:flags:update:)();
  swift_retain();
  return specialized static ModifiedContent<>._makeView(modifier:inputs:body:)((uint64_t)v11, (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t *))a2, a3);
}

uint64_t closure #1 in static AutomaticPaddingViewModifier._makeView(modifier:inputs:body:)@<X0>(uint64_t *a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t result;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;

  v5 = *((_DWORD *)a1 + 2);
  v6 = a1[2];
  v7 = *((_DWORD *)a1 + 8);
  v8 = a1[5];
  v9 = a1[6];
  v10 = *((_DWORD *)a1 + 20);
  v11 = *((_DWORD *)a1 + 9) | 2;
  v17 = *a1;
  v18 = v5;
  v19 = v6;
  v20 = a1[3];
  v21 = v7;
  v22 = v11;
  v23 = v8;
  v24 = v9;
  v25 = *(_OWORD *)(a1 + 7);
  v26 = a1[9];
  v27 = v10;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v12 = swift_bridgeObjectRetain_n();
  a2(&v28, v12, &v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v13 = v28;
  v14 = v29;
  v15 = v30;
  AGGraphMutateAttribute();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  *(_QWORD *)a3 = v13;
  *(_DWORD *)(a3 + 8) = v14;
  *(_DWORD *)(a3 + 12) = v15;
  return result;
}

uint64_t AutomaticPaddingViewModifier.PaddingLayout.value.getter@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Value;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  if (*MEMORY[0x24BE096C0] == a1)
    goto LABEL_9;
  v3 = *(_QWORD *)AGGraphGetValue();
  v4 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v4 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_8;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    v5 = (*(uint64_t (**)(void))(*(_QWORD *)v3 + 96))();
    swift_release();
    v6 = 0.0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((v5 & 1) != 0)
    {
LABEL_15:
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SafeAreaInsets.Element>, (uint64_t)&type metadata for SafeAreaInsets.Element, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      result = swift_allocObject();
      *(_OWORD *)(result + 16) = xmmword_23527E860;
      *(_QWORD *)(result + 32) = 1;
      *(double *)(result + 40) = v6;
      *(_QWORD *)(result + 48) = v7;
      *(_QWORD *)(result + 56) = v8;
      *(_QWORD *)(result + 64) = v9;
      *(_BYTE *)a2 = 15;
      *(double *)(a2 + 8) = v6;
      *(_QWORD *)(a2 + 16) = v7;
      *(_QWORD *)(a2 + 24) = v8;
      *(_QWORD *)(a2 + 32) = v9;
      *(_BYTE *)(a2 + 40) = 0;
      *(_QWORD *)(a2 + 48) = result;
      *(_QWORD *)(a2 + 56) = 1;
      return result;
    }
LABEL_9:
    Value = AGGraphGetValue();
    if ((*(_BYTE *)(Value + 32) & 1) != 0)
    {
      v11 = (uint64_t *)AGGraphGetValue();
      v12 = *v11;
      if (v11[1])
      {
        swift_retain_n();
        swift_retain_n();
        v6 = specialized PropertyList.Tracker.value<A>(_:for:)(v12);
        v7 = v13;
        v8 = v14;
        v9 = v15;
        swift_release_n();
      }
      else
      {
        v16 = swift_retain_n();
        v6 = specialized closure #1 in PropertyList.subscript.getter(v16);
        v7 = v17;
        v8 = v18;
        v9 = v19;
      }
      swift_release_n();
    }
    else
    {
      v8 = *(_QWORD *)(Value + 16);
      v9 = *(_QWORD *)(Value + 24);
      v6 = *(double *)Value;
      v7 = *(_QWORD *)(Value + 8);
    }
    goto LABEL_15;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

double protocol witness for UnaryLayout.placement(of:in:) in conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  __int128 *v2;
  __int128 v3;
  int v4;
  char v5;
  __int128 v6;
  uint64_t v8;
  int v9;
  __int128 v10;
  __int128 v11;
  char v12;
  __int128 v13;
  _OWORD v14[2];

  v3 = v2[1];
  v13 = *v2;
  v14[0] = v3;
  *(_OWORD *)((char *)v14 + 9) = *(__int128 *)((char *)v2 + 25);
  v4 = *((_DWORD *)a1 + 2);
  v5 = *((_BYTE *)a1 + 48);
  v8 = *a1;
  v9 = v4;
  v6 = *((_OWORD *)a1 + 2);
  v10 = *((_OWORD *)a1 + 1);
  v11 = v6;
  v12 = v5;
  return _PaddingLayout.placement(of:in:)((int *)&v8, a2);
}

uint64_t protocol witness for UnaryLayout.sizeThatFits(in:context:child:) in conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  __int128 *v3;
  __int128 v4;
  char v5;
  uint64_t v6;
  char v7;
  int v8;
  int v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  _OWORD v20[2];

  v4 = v3[1];
  v19 = *v3;
  v20[0] = v4;
  *(_OWORD *)((char *)v20 + 9) = *(__int128 *)((char *)v3 + 25);
  v5 = *((_BYTE *)a1 + 8);
  v6 = a1[2];
  v7 = *((_BYTE *)a1 + 24);
  v8 = *((_DWORD *)a2 + 2);
  v9 = *(_DWORD *)(a3 + 8);
  v15 = *a1;
  v16 = v5;
  v17 = v6;
  v18 = v7;
  v13 = *a2;
  v14 = v8;
  v11 = *(_QWORD *)a3;
  v12 = v9;
  return _PaddingLayout.sizeThatFits(in:context:child:)((uint64_t)&v15, (uint64_t)&v13, &v11);
}

double protocol witness for static Rule.initialValue.getter in conformance AutomaticPaddingViewModifier.PaddingLayout@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance AutomaticPaddingViewModifier.PaddingLayout@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return AutomaticPaddingViewModifier.PaddingLayout.value.getter(*(_DWORD *)(v1 + 8), a1);
}

uint64_t outlined init with take of EdgeInsets?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for EdgeInsets?, (uint64_t)&type metadata for EdgeInsets, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_234A43818(double *a1)
{
  return EnvironmentValues.defaultPadding.setter(*a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_234A43840(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA29IgnoresAutomaticPaddingLayout33_47C1BD8C61550BB60F4F3D12F752D53DLLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm(a1, (uint64_t)&type metadata for IgnoresAutomaticPaddingLayout, (uint64_t)&protocol witness table for IgnoresAutomaticPaddingLayout, a4);
}

uint64_t sub_234A43854(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA29IgnoresAutomaticPaddingLayout33_47C1BD8C61550BB60F4F3D12F752D53DLLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm(a1, (uint64_t)&type metadata for AutomaticPaddingViewModifier, (uint64_t)&protocol witness table for AutomaticPaddingViewModifier, a4);
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA29IgnoresAutomaticPaddingLayout33_47C1BD8C61550BB60F4F3D12F752D53DLLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v5 = a1[1];
  v6 = type metadata accessor for ModifiedContent(255, *a1, a2, a4);
  v8[0] = v5;
  v8[1] = a3;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v6, v8);
}

uint64_t getEnumTagSinglePayload for AutomaticPaddingViewModifier(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AutomaticPaddingViewModifier(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 33) = v3;
  return result;
}

ValueMetadata *type metadata accessor for AutomaticPaddingViewModifier()
{
  return &type metadata for AutomaticPaddingViewModifier;
}

uint64_t getEnumTagSinglePayload for IgnoresAutomaticPaddingLayout(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for IgnoresAutomaticPaddingLayout(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_234A43A00 + 4 * byte_23527FF75[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_234A43A34 + 4 * asc_23527FF70[v4]))();
}

uint64_t sub_234A43A34(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234A43A3C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234A43A44);
  return result;
}

uint64_t sub_234A43A50(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234A43A58);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_234A43A5C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234A43A64(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IgnoresAutomaticPaddingLayout()
{
  return &type metadata for IgnoresAutomaticPaddingLayout;
}

unint64_t lazy protocol witness table accessor for type EmptyAnimatableData and conformance EmptyAnimatableData()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EmptyAnimatableData and conformance EmptyAnimatableData;
  if (!lazy protocol witness table cache variable for type EmptyAnimatableData and conformance EmptyAnimatableData)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EmptyAnimatableData, &type metadata for EmptyAnimatableData);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyAnimatableData and conformance EmptyAnimatableData);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EmptyAnimatableData and conformance EmptyAnimatableData;
  if (!lazy protocol witness table cache variable for type EmptyAnimatableData and conformance EmptyAnimatableData)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EmptyAnimatableData, &type metadata for EmptyAnimatableData);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyAnimatableData and conformance EmptyAnimatableData);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EmptyAnimatableData and conformance EmptyAnimatableData;
  if (!lazy protocol witness table cache variable for type EmptyAnimatableData and conformance EmptyAnimatableData)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EmptyAnimatableData, &type metadata for EmptyAnimatableData);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyAnimatableData and conformance EmptyAnimatableData);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for IgnoresAutomaticPaddingLayout(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type IgnoresAutomaticPaddingLayout and conformance IgnoresAutomaticPaddingLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type IgnoresAutomaticPaddingLayout and conformance IgnoresAutomaticPaddingLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IgnoresAutomaticPaddingLayout and conformance IgnoresAutomaticPaddingLayout;
  if (!lazy protocol witness table cache variable for type IgnoresAutomaticPaddingLayout and conformance IgnoresAutomaticPaddingLayout)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for IgnoresAutomaticPaddingLayout, &type metadata for IgnoresAutomaticPaddingLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IgnoresAutomaticPaddingLayout and conformance IgnoresAutomaticPaddingLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IgnoresAutomaticPaddingLayout and conformance IgnoresAutomaticPaddingLayout;
  if (!lazy protocol witness table cache variable for type IgnoresAutomaticPaddingLayout and conformance IgnoresAutomaticPaddingLayout)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for IgnoresAutomaticPaddingLayout, &type metadata for IgnoresAutomaticPaddingLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IgnoresAutomaticPaddingLayout and conformance IgnoresAutomaticPaddingLayout);
  }
  return result;
}

void type metadata accessor for ModifiedContent<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, _SafeAreaInsetsModifier>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ModifiedContent<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, _SafeAreaInsetsModifier>)
  {
    v4 = type metadata accessor for ModifiedContent(0, (uint64_t)&type metadata for AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t)&type metadata for _SafeAreaInsetsModifier, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, _SafeAreaInsetsModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type AutomaticPaddingViewModifier.PaddingLayout and conformance AutomaticPaddingViewModifier.PaddingLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomaticPaddingViewModifier.PaddingLayout and conformance AutomaticPaddingViewModifier.PaddingLayout;
  if (!lazy protocol witness table cache variable for type AutomaticPaddingViewModifier.PaddingLayout and conformance AutomaticPaddingViewModifier.PaddingLayout)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AutomaticPaddingViewModifier.PaddingLayout, &unk_25063EC18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomaticPaddingViewModifier.PaddingLayout and conformance AutomaticPaddingViewModifier.PaddingLayout);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in static AutomaticPaddingViewModifier._makeView(modifier:inputs:body:)(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(result + 8) = *(_DWORD *)(v1 + 28);
  return result;
}

uint64_t partial apply for specialized closure #1 in AGAttribute.mutateBody<A>(as:invalidating:_:)(uint64_t a1)
{
  uint64_t v1;

  return thunk for @callee_guaranteed (@guaranteed RBDisplayList) -> ()(a1, *(uint64_t (**)(void))(v1 + 16));
}

ValueMetadata *type metadata accessor for DefaultPaddingKey()
{
  return &type metadata for DefaultPaddingKey;
}

uint64_t __swift_memcpy12_4(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for AutomaticPaddingViewModifier.PaddingLayout(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 12))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AutomaticPaddingViewModifier.PaddingLayout(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 12) = v3;
  return result;
}

void *type metadata accessor for AutomaticPaddingViewModifier.PaddingLayout()
{
  return &unk_25063EC18;
}

uint64_t getEnumTagSinglePayload for AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 41) = v3;
  return result;
}

ValueMetadata *type metadata accessor for AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout()
{
  return &type metadata for AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout;
}

unint64_t instantiation function for generic protocol witness table for AutomaticPaddingViewModifier.PaddingLayout(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AutomaticPaddingViewModifier.PaddingLayout and conformance AutomaticPaddingViewModifier.PaddingLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout and conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout and conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout and conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout;
  if (!lazy protocol witness table cache variable for type AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout and conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, &type metadata for AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout and conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout and conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout;
  if (!lazy protocol witness table cache variable for type AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout and conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, &type metadata for AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout and conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout);
  }
  return result;
}

uint64_t ZStack._tree.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = type metadata accessor for _VariadicView.Tree(0, (uint64_t)&type metadata for _ZStackLayout, *(_QWORD *)(a1 + 16), (uint64_t)&protocol witness table for _ZStackLayout);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, v2, v4);
}

uint64_t ZStack._tree.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = type metadata accessor for _VariadicView.Tree(0, (uint64_t)&type metadata for _ZStackLayout, *(_QWORD *)(a2 + 16), (uint64_t)&protocol witness table for _ZStackLayout);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v2, a1, v4);
}

uint64_t (*ZStack._tree.modify())()
{
  return _ViewInputs.base.modify;
}

uint64_t ZStack.init(alignment:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  _QWORD v5[2];

  v5[0] = a1;
  v5[1] = a2;
  return _VariadicView.Tree.init(_:content:)((uint64_t)v5, (void (*)(uint64_t))partial apply for closure #1 in ZStack.init(alignment:content:), (uint64_t)&type metadata for _ZStackLayout, a3, (uint64_t)&protocol witness table for _ZStackLayout, a4);
}

uint64_t closure #1 in ZStack.init(alignment:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  void (*v14)(double);
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v7 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v17 - v12;
  v14(v11);
  static ViewBuilder.buildExpression<A>(_:)(v9, a2, a3);
  v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v9, a2);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v13, a2, a4);
  return ((uint64_t (*)(char *, uint64_t))v15)(v13, a2);
}

uint64_t partial apply for closure #1 in ZStack.init(alignment:content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in ZStack.init(alignment:content:)(v1[4], v1[2], v1[3], a1);
}

double static ZStack._makeView(view:inputs:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, double *a5@<X8>)
{
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int ShouldRecordTree;
  double result;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v32;
  uint64_t v33;
  double v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  v7 = *a2;
  v8 = *((_DWORD *)a2 + 2);
  v9 = a2[2];
  v10 = *((_DWORD *)a2 + 6);
  v28 = *((_DWORD *)a2 + 9);
  v29 = *((_DWORD *)a2 + 8);
  v11 = a2[5];
  v12 = a2[6];
  v26 = *((_DWORD *)a2 + 15);
  v27 = *((_DWORD *)a2 + 14);
  v24 = *((_DWORD *)a2 + 17);
  v25 = *((_DWORD *)a2 + 16);
  v22 = *((_DWORD *)a2 + 19);
  v23 = *((_DWORD *)a2 + 18);
  v20 = *((_DWORD *)a2 + 7);
  v21 = *((_DWORD *)a2 + 20);
  v36 = a3;
  v37 = a4;
  LODWORD(v54) = v6;
  v13 = type metadata accessor for ZStack(255, a3, a4, a4);
  type metadata accessor for _GraphValue(0, v13, v14, v15);
  v16 = type metadata accessor for _VariadicView.Tree(0, (uint64_t)&type metadata for _ZStackLayout, a3, (uint64_t)&protocol witness table for _ZStackLayout);
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static ZStack._makeView(view:inputs:), v16, &v35);
  v17 = v35;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v54 = v7;
  v56 = v9;
  v55 = v8;
  v57 = v10;
  v58 = v20;
  v60 = v28;
  v61 = v11;
  v62 = v12;
  v63 = v27;
  v64 = v26;
  v65 = v25;
  v66 = v24;
  v67 = v23;
  v68 = v22;
  v69 = v21;
  v32 = v17;
  v38 = v7;
  v39 = v8;
  v40 = v9;
  v41 = v10;
  v42 = v20;
  v43 = 0;
  v44 = v28;
  v45 = v11;
  v46 = v12;
  v47 = v27;
  v48 = v26;
  v49 = v25;
  v50 = v24;
  v51 = v23;
  v52 = v22;
  v53 = v21;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static _VariadicView.Tree<>._makeView(view:inputs:)(&v32, (uint64_t)&v38, (uint64_t)&type metadata for _ZStackLayout, a3, (uint64_t)&protocol witness table for _ZStackLayout, a4, (uint64_t)&v33);
  v59 = v29;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)&v33, (uint64_t)&v54);
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_QWORD *)a5 = v33;
  result = v34;
  a5[1] = v34;
  return result;
}

uint64_t closure #1 in static ZStack._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v9[2] = type metadata accessor for ZStack(0, a2, a3, a4);
  v10 = type metadata accessor for _VariadicView.Tree(0, (uint64_t)&type metadata for _ZStackLayout, a2, (uint64_t)&protocol witness table for _ZStackLayout);
  v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v9, v10, MEMORY[0x24BEE4078], v6, MEMORY[0x24BEE40A8], v7);
  return v11;
}

uint64_t partial apply for closure #1 in static ZStack._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in static ZStack._makeView(view:inputs:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t type metadata accessor for ZStack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ZStack);
}

double protocol witness for static View._makeView(view:inputs:) in conformance ZStack<A>@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, double *a4@<X8>)
{
  return static ZStack._makeView(view:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

uint64_t (*_ZStackLayout.alignment.modify())()
{
  return _ViewInputs.base.modify;
}

void static _ZStackLayout._makeView(root:inputs:body:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;
  void (*v13)(int *, uint64_t *, uint64_t, uint64_t, ValueMetadata *, unint64_t);
  unint64_t v14;
  id v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  int v27;

  v6 = *a1;
  v7 = *a2;
  v8 = *((_DWORD *)a2 + 2);
  v9 = a2[2];
  v17 = *(_OWORD *)(a2 + 5);
  v18 = *(_OWORD *)(a2 + 3);
  v16 = *(_OWORD *)(a2 + 7);
  v10 = a2[9];
  v11 = *((_DWORD *)a2 + 20);
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v12 = static CoreGlue.shared;
  v27 = v6;
  v19 = v7;
  v20 = v8;
  v21 = v9;
  v22 = v18;
  v23 = v17;
  v24 = v16;
  v25 = v10;
  v26 = v11;
  v13 = *(void (**)(int *, uint64_t *, uint64_t, uint64_t, ValueMetadata *, unint64_t))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared) + 0xB0);
  v14 = lazy protocol witness table accessor for type _ZStackLayout and conformance _ZStackLayout();
  v15 = v12;
  v13(&v27, &v19, a3, a4, &type metadata for _ZStackLayout, v14);

}

void protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance _ZStackLayout(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  void *v13;
  void (*v14)(int *, uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t);
  unint64_t v15;
  id v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  int v29;

  v7 = *a1;
  v8 = *a2;
  v9 = *((_DWORD *)a2 + 2);
  v10 = a2[2];
  v18 = *(_OWORD *)(a2 + 5);
  v19 = *(_OWORD *)(a2 + 3);
  v17 = *(_OWORD *)(a2 + 7);
  v11 = a2[9];
  v12 = *((_DWORD *)a2 + 20);
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v13 = static CoreGlue.shared;
  v29 = v7;
  v21 = v8;
  v22 = v9;
  v23 = v10;
  v24 = v19;
  v25 = v18;
  v26 = v17;
  v27 = v11;
  v28 = v12;
  v14 = *(void (**)(int *, uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared)
                                                                                             + 0xB0);
  v15 = lazy protocol witness table accessor for type _ZStackLayout and conformance _ZStackLayout();
  v16 = v13;
  v14(&v29, &v21, a3, a4, a5, v15);

}

void static _ZStackLayout.layoutProperties.getter(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 2;
  *(_BYTE *)(a1 + 2) = 1;
}

uint64_t _ZStackLayout.placeSubviews(in:proposal:subviews:cache:)(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int *a9, uint64_t a10, unint64_t a11, unint64_t a12)
{
  return specialized _ZStackLayout.placeSubviews(in:proposal:subviews:cache:)(a9, a1, a2, a3, a4, a10, a11, a12);
}

uint64_t _ZStackLayout.spacing(subviews:cache:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;
  unint64_t v4;
  char v5;
  double v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  _DWORD *v12;
  _DWORD *v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  int *v28;
  uint64_t IsOwner;
  uint64_t v30;
  unint64_t v31;
  int *v32;
  int v33;
  __int128 *v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  int v38;
  __int128 *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int64_t v46;
  int64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int64_t v51;
  unint64_t v52;
  int64_t v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v67;
  unint64_t v68;
  unsigned __int8 *v69;
  unint64_t v70;
  _BOOL4 v71;
  double v72;
  double v73;
  double v74;
  double v75;
  unint64_t v76;
  Swift::UInt v77;
  Swift::UInt8 v78;
  int v79;
  char v80;
  unint64_t v81;
  uint64_t v82;
  _BOOL8 v83;
  uint64_t v84;
  char v85;
  unint64_t v86;
  char v87;
  uint64_t v88;
  double v89;
  double v90;
  double v91;
  double v92;
  unint64_t v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  BOOL v100;
  BOOL v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  BOOL v110;
  uint64_t v111;
  uint64_t result;
  uint64_t v113;
  uint64_t v114;
  int v115;
  double v116;
  _DWORD *v117;
  __int128 *InputValue;
  uint64_t v119;
  uint64_t v120;
  char v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  double v130;
  uint64_t v131;
  double v132;
  double v133;
  unint64_t v134;
  double v135;
  int v136;
  uint64_t v137;
  char v138;
  _QWORD v139[2];
  char v140;
  char v141;
  unint64_t v142;
  uint64_t (*v143)();
  uint64_t v144;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_BYTE *)(a1 + 17);
  v138 = *(_BYTE *)(a1 + 16);
  LODWORD(v139[0]) = *(_DWORD *)a1;
  v139[1] = v2;
  v140 = v138;
  v121 = v3;
  v141 = v3;
  v142 = 0;
  v143 = closure #1 in _ZStackLayout.placeSubviews(in:proposal:subviews:cache:);
  v144 = 0;
  swift_bridgeObjectRetain_n();
  *(double *)&v4 = COERCE_DOUBLE(specialized LazyMapSequence.Iterator.next()());
  v137 = v2;
  if ((v5 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v6 = 0.0;
  }
  else
  {
    v6 = *(double *)&v4;
    v7 = v142;
    v8 = *(_QWORD *)(v2 + 16);
    if (v142 != v8)
    {
      v113 = v2 + 32;
      v114 = v2 + 32 + 12 * v142;
      v115 = *MEMORY[0x24BE096C0];
      while (1)
      {
        if ((v138 & 1) != 0)
        {
          if ((v7 & 0x8000000000000000) != 0)
            goto LABEL_189;
          v117 = (_DWORD *)v114;
          if (v7 >= v8)
            goto LABEL_191;
        }
        else
        {
          if ((v7 & 0x8000000000000000) != 0)
            goto LABEL_190;
          if (v7 >= v8)
            goto LABEL_192;
          v117 = (_DWORD *)(v113 + 8 * v7);
        }
        if (v7 >= v8)
          break;
        if (*v117 == v115)
        {
          InputValue = &static LayoutComputer.defaultValue;
          if (one-time initialization token for defaultValue != -1)
          {
            swift_once();
            InputValue = &static LayoutComputer.defaultValue;
          }
        }
        else
        {
          InputValue = (__int128 *)AGGraphGetInputValue();
        }
        v119 = *(_QWORD *)InputValue;
        v120 = one-time initialization token for lockAssertionsAreEnabled;
        swift_retain();
        if (v120 != -1)
          swift_once();
        v2 = v137;
        if (lockAssertionsAreEnabled)
        {
          if (one-time initialization token for _lock != -1)
            swift_once();
          if (!_MovableLockIsOwner(static Update._lock))
            goto LABEL_199;
        }
        ++v7;
        v116 = (*(double (**)(void))(*(_QWORD *)v119 + 88))();
        swift_release();
        if (v6 < v116)
          v6 = v116;
        v8 = *(_QWORD *)(v137 + 16);
        v114 += 12;
        if (v7 == v8)
          goto LABEL_3;
      }
LABEL_184:
      __break(1u);
LABEL_185:
      __break(1u);
LABEL_186:
      __break(1u);
LABEL_187:
      __break(1u);
LABEL_188:
      __break(1u);
LABEL_189:
      __break(1u);
LABEL_190:
      __break(1u);
LABEL_191:
      __break(1u);
LABEL_192:
      __break(1u);
LABEL_193:
      __break(1u);
LABEL_194:
      __break(1u);
LABEL_195:
      __break(1u);
LABEL_196:
      __break(1u);
      goto LABEL_197;
    }
LABEL_3:
    swift_bridgeObjectRelease_n();
  }
  *(double *)(swift_allocObject() + 16) = v6;
  v9 = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRetain_n();
  swift_retain();
  if (v9)
  {
    v10 = 0;
    v11 = *MEMORY[0x24BE096C0];
    v12 = (_DWORD *)(v2 + 32);
    while (1)
    {
      if ((v138 & 1) != 0)
      {
        if (v10 >= v9)
          goto LABEL_186;
        v13 = (_DWORD *)(v2 + 32 + 12 * v10);
      }
      else
      {
        v13 = v12;
        if (v10 >= v9)
          goto LABEL_185;
      }
      if (*v13 == v11)
      {
        v14 = &static LayoutComputer.defaultValue;
        if (one-time initialization token for defaultValue != -1)
        {
          swift_once();
          v14 = &static LayoutComputer.defaultValue;
        }
      }
      else
      {
        v14 = (__int128 *)AGGraphGetInputValue();
      }
      v15 = *(_QWORD *)v14;
      v16 = one-time initialization token for lockAssertionsAreEnabled;
      swift_retain();
      if (v16 != -1)
        swift_once();
      if (lockAssertionsAreEnabled)
      {
        if (one-time initialization token for _lock != -1)
          swift_once();
        if (!_MovableLockIsOwner(static Update._lock))
          goto LABEL_199;
      }
      v17 = (*(double (**)(void))(*(_QWORD *)v15 + 88))();
      swift_release();
      if (v17 == v6)
        break;
      v9 = *(_QWORD *)(v137 + 16);
      if (v10 >= v9)
      {
        __break(1u);
LABEL_183:
        __break(1u);
        goto LABEL_184;
      }
      ++v10;
      v12 += 2;
      if (v10 == v9)
        goto LABEL_26;
    }
    v9 = v10;
  }
LABEL_26:
  v18 = v137;
  v19 = *(_QWORD *)(v137 + 16);
  swift_release();
  swift_bridgeObjectRelease();
  if (v9 == v19)
  {
    if (one-time initialization token for zero == -1)
    {
LABEL_28:
      v20 = static ViewSpacing.zero;
      v21 = byte_2561B61A8;
      swift_bridgeObjectRetain();
      swift_release();
LABEL_159:
      result = swift_bridgeObjectRelease();
      *(_QWORD *)a2 = v20;
      *(_BYTE *)(a2 + 8) = v21;
      return result;
    }
LABEL_197:
    swift_once();
    goto LABEL_28;
  }
  v134 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v22 = *(_QWORD *)(v137 + 16);
  swift_bridgeObjectRetain();
  swift_retain();
  if (!v22)
  {
LABEL_158:
    swift_release_n();
    swift_bridgeObjectRelease();
    v21 = v121;
    v20 = v134;
    goto LABEL_159;
  }
  v23 = 0;
  v24 = v137 + 32;
  v25 = *MEMORY[0x24BE096C0];
  v26 = &lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextScaleKey> and conformance EnvironmentPropertyKey<A>;
LABEL_31:
  v27 = v23;
  v28 = (int *)(v24 + 8 * v23++);
  while (1)
  {
    v31 = v23 - 1;
    if ((v138 & 1) != 0)
    {
      if (v31 >= v22)
        goto LABEL_187;
      v32 = (int *)(v137 + 32 + 12 * v27);
    }
    else
    {
      v32 = v28;
      if (v31 >= v22)
        goto LABEL_188;
    }
    if (v31 >= v22)
      goto LABEL_183;
    v33 = *v32;
    if (*v32 == v25)
    {
      v34 = &static LayoutComputer.defaultValue;
      if (one-time initialization token for defaultValue != -1)
      {
        swift_once();
        v34 = &static LayoutComputer.defaultValue;
      }
    }
    else
    {
      v34 = (__int128 *)AGGraphGetInputValue();
    }
    v35 = *(_QWORD *)v34;
    v36 = one-time initialization token for lockAssertionsAreEnabled;
    swift_retain();
    if (v36 != -1)
      swift_once();
    if (*((_BYTE *)v26 + 1984) == 1)
    {
      if (one-time initialization token for _lock != -1)
        swift_once();
      if (!_MovableLockIsOwner(static Update._lock))
        goto LABEL_199;
    }
    v37 = (*(double (**)(void))(*(_QWORD *)v35 + 88))();
    swift_release();
    if (v37 == v6)
      break;
LABEL_35:
    v22 = *(_QWORD *)(v18 + 16);
    v28 += 2;
    ++v27;
    v100 = v23++ == v22;
    if (v100)
      goto LABEL_158;
  }
  if (one-time initialization token for all != -1)
    swift_once();
  v38 = static AbsoluteEdge.Set.all;
  if (v33 == v25)
  {
    v39 = &static LayoutComputer.defaultValue;
    if (one-time initialization token for defaultValue != -1)
    {
      swift_once();
      v39 = &static LayoutComputer.defaultValue;
    }
  }
  else
  {
    v39 = (__int128 *)AGGraphGetInputValue();
  }
  v40 = *(_QWORD *)v39;
  if (*((_BYTE *)v26 + 1984) == 1)
  {
    v41 = one-time initialization token for _lock;
    swift_retain();
    if (v41 != -1)
      swift_once();
    IsOwner = _MovableLockIsOwner(static Update._lock);
    if ((IsOwner & 1) == 0)
      goto LABEL_199;
  }
  else
  {
    IsOwner = swift_retain();
  }
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v40 + 112))(v139, IsOwner);
  swift_release();
  v30 = v139[0];
  if (!v38)
  {
    swift_bridgeObjectRelease();
    goto LABEL_35;
  }
  v136 = v25;
  v42 = v139[0] + 64;
  v43 = 1 << *(_BYTE *)(v139[0] + 32);
  if (v43 < 64)
    v44 = ~(-1 << v43);
  else
    v44 = -1;
  v45 = v44 & *(_QWORD *)(v139[0] + 64);
  v46 = (unint64_t)(v43 + 63) >> 6;
  swift_bridgeObjectRetain();
  v47 = 0;
  v48 = MEMORY[0x24BEE4AF8];
  while (1)
  {
    if (v45)
    {
      v49 = __clz(__rbit64(v45));
      v45 &= v45 - 1;
      v50 = v49 | (v47 << 6);
      goto LABEL_87;
    }
    v51 = v47 + 1;
    if (__OFADD__(v47, 1))
      goto LABEL_193;
    v25 = v136;
    v26 = &lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextScaleKey> and conformance EnvironmentPropertyKey<A>;
    if (v51 >= v46)
    {
LABEL_99:
      swift_release();
      v64 = specialized _arrayForceCast<A, B>(_:)(v48);
      swift_release();
      v65 = (_QWORD *)v134;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v139[0] = v134;
      v67 = *(_QWORD *)(v64 + 16);
      swift_bridgeObjectRetain();
      v125 = v67;
      if (!v67)
      {
LABEL_157:
        v134 = (unint64_t)v65;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        v18 = v137;
        v22 = *(_QWORD *)(v137 + 16);
        v24 = v137 + 32;
        if (v22 == v23)
          goto LABEL_158;
        goto LABEL_31;
      }
      v68 = 0;
      v69 = (unsigned __int8 *)(v64 + 80);
      v123 = v64;
      while (1)
      {
        if (v68 >= *(_QWORD *)(v64 + 16))
          goto LABEL_194;
        v77 = *((_QWORD *)v69 - 6);
        if (v77 == 1)
        {
          v26 = &lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextScaleKey> and conformance EnvironmentPropertyKey<A>;
          goto LABEL_157;
        }
        v78 = *(v69 - 40);
        v128 = v68;
        v130 = *((double *)v69 - 4);
        v132 = *((double *)v69 - 3);
        v133 = *((double *)v69 - 2);
        v135 = *((double *)v69 - 1);
        v79 = *v69;
        v81 = specialized __RawDictionaryStorage.find<A>(_:)(v77, v78);
        v82 = v65[2];
        v83 = (v80 & 1) == 0;
        v84 = v82 + v83;
        if (__OFADD__(v82, v83))
          goto LABEL_195;
        v85 = v80;
        if (v65[3] >= v84)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            v65 = (_QWORD *)v139[0];
            if ((v80 & 1) != 0)
              goto LABEL_117;
          }
          else
          {
            specialized _NativeDictionary.copy()();
            v65 = (_QWORD *)v139[0];
            if ((v85 & 1) != 0)
              goto LABEL_117;
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v84, isUniquelyReferenced_nonNull_native & 1);
          v86 = specialized __RawDictionaryStorage.find<A>(_:)(v77, v78);
          if ((v85 & 1) != (v87 & 1))
            goto LABEL_200;
          v81 = v86;
          v65 = (_QWORD *)v139[0];
          if ((v85 & 1) != 0)
          {
LABEL_117:
            v88 = v65[7] + 40 * v81;
            v89 = *(double *)v88;
            v90 = *(double *)(v88 + 8);
            v92 = *(double *)(v88 + 16);
            v91 = *(double *)(v88 + 24);
            v76 = *(unsigned __int8 *)(v88 + 32);
            if (v79)
            {
              v26 = &lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextScaleKey> and conformance EnvironmentPropertyKey<A>;
              v64 = v123;
              if (v79 == 1)
              {
                v25 = v136;
                v93 = v128;
                v72 = v130;
                v74 = v133;
                v75 = v135;
                v73 = v132;
                if ((_DWORD)v76 == 1)
                {
                  v94 = v130;
                  v95 = v132;
                  v96 = v133;
                  v97 = *(double *)v88;
                  v98 = *(double *)(v88 + 8);
                  v99 = *(double *)(v88 + 16);
                  v100 = v130 == v89 && v132 == v90;
                  if (!v100 || v133 != v92 || v135 != v91)
                    goto LABEL_145;
                  LOBYTE(v76) = 1;
LABEL_106:
                  *(double *)v88 = v72;
                  *(double *)(v88 + 8) = v73;
                  *(double *)(v88 + 16) = v74;
                  *(double *)(v88 + 24) = v75;
                  *(_BYTE *)(v88 + 32) = v76;
                  goto LABEL_107;
                }
                v70 = 1;
LABEL_102:
                v71 = v70 < v76;
LABEL_103:
                if (v71)
                {
                  v72 = *(double *)v88;
                  v73 = *(double *)(v88 + 8);
                  v74 = *(double *)(v88 + 16);
                  v75 = *(double *)(v88 + 24);
                }
                else
                {
                  LOBYTE(v76) = v79;
                }
                goto LABEL_106;
              }
              v25 = v136;
              v93 = v128;
              v72 = v130;
              v74 = v133;
              v75 = v135;
              v73 = v132;
              if ((_DWORD)v76 != 2)
              {
                v70 = 2;
                goto LABEL_102;
              }
              v94 = v130;
              v95 = v132;
              v96 = v133;
              v97 = *(double *)v88;
              v98 = *(double *)(v88 + 8);
              v99 = *(double *)(v88 + 16);
              if (v130 == v89 && v132 == v90 && v133 == v92 && v135 == v91)
              {
                LOBYTE(v76) = 2;
                goto LABEL_106;
              }
LABEL_145:
              v106 = v94 + v95 + v96 < v97 + v98 + v99;
            }
            else
            {
              v26 = &lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextScaleKey> and conformance EnvironmentPropertyKey<A>;
              v64 = v123;
              if (*(_BYTE *)(v88 + 32))
              {
                v70 = 0;
                v25 = v136;
                v93 = v128;
                v72 = v130;
                v74 = v133;
                v75 = v135;
                v73 = v132;
                goto LABEL_102;
              }
              v93 = v128;
              v72 = v130;
              v106 = v130 < v89;
              v25 = v136;
              v74 = v133;
              v75 = v135;
              v73 = v132;
              if (v130 == v89)
              {
                LOBYTE(v76) = 0;
                goto LABEL_106;
              }
            }
            v71 = v106;
            goto LABEL_103;
          }
        }
        v65[(v81 >> 6) + 8] |= 1 << v81;
        v107 = v65[6] + 16 * v81;
        *(_QWORD *)v107 = v77;
        *(_BYTE *)(v107 + 8) = v78;
        v108 = v65[7] + 40 * v81;
        *(double *)v108 = v130;
        *(double *)(v108 + 8) = v132;
        *(double *)(v108 + 16) = v133;
        *(double *)(v108 + 24) = v135;
        *(_BYTE *)(v108 + 32) = v79;
        v109 = v65[2];
        v110 = __OFADD__(v109, 1);
        v111 = v109 + 1;
        if (v110)
          goto LABEL_196;
        v65[2] = v111;
        v25 = v136;
        v26 = &lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextScaleKey> and conformance EnvironmentPropertyKey<A>;
        v64 = v123;
        v93 = v128;
LABEL_107:
        v68 = v93 + 1;
        v69 += 56;
        isUniquelyReferenced_nonNull_native = 1;
        if (v125 == v68)
          goto LABEL_157;
      }
    }
    v52 = *(_QWORD *)(v42 + 8 * v51);
    ++v47;
    if (v52)
      goto LABEL_86;
    v47 = v51 + 1;
    if (v51 + 1 >= v46)
      goto LABEL_99;
    v52 = *(_QWORD *)(v42 + 8 * v47);
    if (v52)
      goto LABEL_86;
    v47 = v51 + 2;
    if (v51 + 2 >= v46)
      goto LABEL_99;
    v52 = *(_QWORD *)(v42 + 8 * v47);
    if (v52)
      goto LABEL_86;
    v47 = v51 + 3;
    if (v51 + 3 >= v46)
      goto LABEL_99;
    v52 = *(_QWORD *)(v42 + 8 * v47);
    if (v52)
      goto LABEL_86;
    v47 = v51 + 4;
    if (v51 + 4 >= v46)
      goto LABEL_99;
    v52 = *(_QWORD *)(v42 + 8 * v47);
    if (v52)
      goto LABEL_86;
    v53 = v51 + 5;
    if (v53 >= v46)
      goto LABEL_99;
    v52 = *(_QWORD *)(v42 + 8 * v53);
    if (!v52)
      break;
    v47 = v53;
LABEL_86:
    v45 = (v52 - 1) & v52;
    v50 = __clz(__rbit64(v52)) + (v47 << 6);
LABEL_87:
    v54 = *(_QWORD *)(v30 + 48) + 16 * v50;
    v55 = *(unsigned __int8 *)(v54 + 8);
    if (v55 - 9 < 0xEF)
      goto LABEL_92;
    if ((v55 & 0x80) != 0)
    {
      if (v55 <= 0xF8)
        goto LABEL_92;
      v56 = 0;
    }
    else
    {
      if (v55 >= 8)
        goto LABEL_92;
      v56 = 1 << v55;
    }
    if ((v56 & ~v38) != 0)
      continue;
LABEL_92:
    v57 = *(_QWORD *)v54;
    v58 = *(_QWORD *)(v30 + 56) + 40 * v50;
    v59 = *(_QWORD *)v58;
    v127 = *(_QWORD *)(v58 + 16);
    v129 = *(_QWORD *)(v58 + 8);
    v124 = *(_QWORD *)(v58 + 24);
    v122 = *(_BYTE *)(v58 + 32);
    v60 = swift_isUniquelyReferenced_nonNull_native();
    v139[0] = v48;
    v131 = v59;
    if ((v60 & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v48 + 16) + 1, 1);
      v48 = v139[0];
    }
    v62 = *(_QWORD *)(v48 + 16);
    v61 = *(_QWORD *)(v48 + 24);
    if (v62 >= v61 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v61 > 1, v62 + 1, 1);
      v48 = v139[0];
    }
    *(_QWORD *)(v48 + 16) = v62 + 1;
    v63 = v48 + 56 * v62;
    *(_QWORD *)(v63 + 32) = v57;
    *(_BYTE *)(v63 + 40) = v55;
    *(_QWORD *)(v63 + 48) = v131;
    *(_QWORD *)(v63 + 56) = v129;
    *(_QWORD *)(v63 + 64) = v127;
    *(_QWORD *)(v63 + 72) = v124;
    *(_BYTE *)(v63 + 80) = v122;
    v42 = v30 + 64;
  }
  while (1)
  {
    v47 = v53 + 1;
    if (__OFADD__(v53, 1))
      break;
    if (v47 >= v46)
      goto LABEL_99;
    v52 = *(_QWORD *)(v42 + 8 * v47);
    ++v53;
    if (v52)
      goto LABEL_86;
  }
  __break(1u);
LABEL_199:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_200:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _ZStackLayout.sizeThatFits(proposal:subviews:cache:)(uint64_t result, char a2, uint64_t a3, char a4, int *a5, uint64_t a6, unint64_t a7, unint64_t a8)
{
  uint64_t v8;
  char v10;
  char v11;
  unint64_t v12;
  int *v13;
  char v14;
  double v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  int *v24;
  double v25;
  unint64_t v26;
  int *v27;
  int *v28;
  int v29;
  int v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  double v36;
  _DWORD *v37;
  uint64_t *InputValue;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v45;
  int v48;
  int v49;
  char v50;
  int64x2_t v51;
  int64x2_t v52;
  int v53;
  int v54;
  int v55;
  int64x2_t v56;
  int64x2_t v57;
  _QWORD v58[2];
  char v59;
  char v60;
  unint64_t v61;
  uint64_t (*v62)();
  uint64_t v63;

  v45 = result;
  v8 = *((_QWORD *)a5 + 1);
  if (*(_QWORD *)(v8 + 16))
  {
    v10 = *((_BYTE *)a5 + 16);
    v11 = *((_BYTE *)a5 + 17);
    v48 = *a5;
    LODWORD(v58[0]) = *a5;
    v58[1] = v8;
    v50 = v10;
    v59 = v10;
    v60 = v11;
    v61 = 0;
    v62 = closure #1 in _ZStackLayout.placeSubviews(in:proposal:subviews:cache:);
    v63 = 0;
    swift_bridgeObjectRetain_n();
    v12 = specialized LazyMapSequence.Iterator.next()();
    v13 = (int *)MEMORY[0x24BE096C0];
    if ((v14 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      v15 = 0.0;
    }
    else
    {
      v15 = *(double *)&v12;
      v16 = v61;
      v17 = *(_QWORD *)(v8 + 16);
      if (v61 != v17)
      {
        v34 = *MEMORY[0x24BE096C0];
        v35 = v8 + 32 + 12 * v61;
        do
        {
          if ((v50 & 1) != 0)
          {
            if ((v16 & 0x8000000000000000) != 0)
              goto LABEL_55;
            v37 = (_DWORD *)v35;
            if (v16 >= v17)
              goto LABEL_57;
          }
          else
          {
            if ((v16 & 0x8000000000000000) != 0)
              goto LABEL_56;
            if (v16 >= v17)
              goto LABEL_58;
            v37 = (_DWORD *)(v8 + 32 + 8 * v16);
          }
          if (v16 >= v17)
            goto LABEL_54;
          if (*v37 == v34)
          {
            InputValue = (uint64_t *)&static LayoutComputer.defaultValue;
            if (one-time initialization token for defaultValue != -1)
            {
              swift_once();
              InputValue = (uint64_t *)&static LayoutComputer.defaultValue;
            }
          }
          else
          {
            InputValue = (uint64_t *)AGGraphGetInputValue();
          }
          v39 = *InputValue;
          v40 = one-time initialization token for lockAssertionsAreEnabled;
          swift_retain();
          if (v40 != -1)
            swift_once();
          if (lockAssertionsAreEnabled)
          {
            if (one-time initialization token for _lock != -1)
              swift_once();
            if (!_MovableLockIsOwner(static Update._lock))
              goto LABEL_59;
          }
          ++v16;
          v36 = (*(double (**)(void))(*(_QWORD *)v39 + 88))();
          swift_release();
          if (v15 < v36)
            v15 = v36;
          v17 = *(_QWORD *)(v8 + 16);
          v35 += 12;
        }
        while (v16 != v17);
      }
      swift_bridgeObjectRelease_n();
      v13 = (int *)MEMORY[0x24BE096C0];
    }
    *(double *)(swift_allocObject() + 16) = v15;
    v18 = swift_allocObject();
    *(_QWORD *)(v18 + 16) = v45;
    *(_BYTE *)(v18 + 24) = a2 & 1;
    *(_QWORD *)(v18 + 32) = a3;
    v42 = a4;
    *(_BYTE *)(v18 + 40) = a4 & 1;
    v56 = vdupq_n_s64(0xFFF0000000000000);
    v57 = v56;
    v19 = v8 + 32;
    v49 = *v13;
    swift_bridgeObjectRetain_n();
    swift_retain();
    swift_retain();
    v20 = 0;
    v21 = v8 + 36;
    v22 = v8;
    v41 = v8 + 36;
LABEL_8:
    v23 = (int *)(v21 + 8 * v20);
    v24 = (int *)(v19 + 12 * v20);
    while (1)
    {
      v26 = *(_QWORD *)(v8 + 16);
      if (v20 == v26)
      {
        swift_release_n();
        swift_release_n();
        return swift_bridgeObjectRelease_n();
      }
      if ((v50 & 1) != 0)
      {
        if (v20 >= v26)
          goto LABEL_52;
        v27 = (int *)(v19 + 12 * v20 + 4);
        v28 = v24;
      }
      else
      {
        if (v20 >= v26)
          goto LABEL_53;
        v28 = (int *)(v19 + 8 * v20);
        v27 = v23;
      }
      if (v20 >= v26)
        break;
      v29 = *v27;
      v30 = *v28;
      if (*v28 == v49)
      {
        v31 = (uint64_t *)&static LayoutComputer.defaultValue;
        if (one-time initialization token for defaultValue != -1)
        {
          swift_once();
          v31 = (uint64_t *)&static LayoutComputer.defaultValue;
        }
      }
      else
      {
        v31 = (uint64_t *)AGGraphGetInputValue();
      }
      v32 = *v31;
      v33 = one-time initialization token for lockAssertionsAreEnabled;
      swift_retain();
      if (v33 != -1)
        swift_once();
      v8 = v22;
      if (lockAssertionsAreEnabled)
      {
        if (one-time initialization token for _lock != -1)
          swift_once();
        if (!_MovableLockIsOwner(static Update._lock))
          goto LABEL_59;
      }
      v23 += 2;
      v24 += 3;
      ++v20;
      v25 = (*(double (**)(void))(*(_QWORD *)v32 + 88))();
      swift_release();
      if (v25 == v15)
      {
        v53 = v48;
        v54 = v30;
        v55 = v29;
        v51.i64[0] = v45;
        v51.i8[8] = a2 & 1;
        v52.i64[0] = a3;
        v52.i8[8] = v42 & 1;
        LayoutProxy.dimensions(in:)((uint64_t)&v51, (uint64_t)v58);
        closure #4 in _ZStackLayout.sizeThatFits(proposal:subviews:cache:)((double *)v56.i64, (uint64_t)v58, a7, a8, (double *)v51.i64);
        swift_release();
        v56 = v51;
        v57 = v52;
        v21 = v41;
        goto LABEL_8;
      }
    }
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    result = swift_release();
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in _ZStackLayout.placeSubviews(in:proposal:subviews:cache:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = LayoutProxy.layoutPriority.getter();
  *a1 = v3;
  return result;
}

uint64_t closure #4 in _ZStackLayout.sizeThatFits(proposal:subviews:cache:)@<X0>(double *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, double *a5@<X8>)
{
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t result;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;

  v7 = *a1;
  v8 = a1[1];
  v9 = a1[2];
  v22 = a1[3];
  v10 = *(double *)(a2 + 16);
  v11 = *(double *)(a2 + 24);
  ViewDimensions.subscript.getter(a3);
  v13 = v12;
  result = ViewDimensions.subscript.getter(a4);
  if (v10 == INFINITY)
    v16 = 0.0;
  else
    v16 = v13;
  v17 = v10 - v16;
  if (v11 == INFINITY)
    v18 = 0.0;
  else
    v18 = v15;
  v19 = v11 - v18;
  if (v7 > v13)
    v20 = v7;
  else
    v20 = v13;
  if (v8 > v15)
    v15 = v8;
  *a5 = v20;
  a5[1] = v15;
  if (v9 > v17)
    v21 = v9;
  else
    v21 = v17;
  if (v22 > v19)
    v19 = v22;
  a5[2] = v21;
  a5[3] = v19;
  return result;
}

void protocol witness for static Layout.layoutProperties.getter in conformance _ZStackLayout(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 2;
  *(_BYTE *)(a1 + 2) = 1;
}

uint64_t protocol witness for Layout.sizeThatFits(proposal:subviews:cache:) in conformance _ZStackLayout(uint64_t a1, char a2, uint64_t a3, char a4, int *a5, uint64_t a6)
{
  unint64_t *v6;

  return _ZStackLayout.sizeThatFits(proposal:subviews:cache:)(a1, a2 & 1, a3, a4 & 1, a5, a6, *v6, v6[1]);
}

uint64_t protocol witness for Layout.placeSubviews(in:proposal:subviews:cache:) in conformance _ZStackLayout(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int *a9, uint64_t a10)
{
  unint64_t *v10;

  return specialized _ZStackLayout.placeSubviews(in:proposal:subviews:cache:)(a9, a1, a2, a3, a4, a10, *v10, v10[1]);
}

uint64_t static _ZStackLayout.implicitRoot.getter()
{
  if (one-time initialization token for center != -1)
    swift_once();
  return static Alignment.center;
}

double protocol witness for static _VariadicView_ImplicitRoot.implicitRoot.getter in conformance _ZStackLayout@<D0>(_OWORD *a1@<X8>)
{
  double result;

  if (one-time initialization token for center != -1)
    swift_once();
  result = *(double *)&static Alignment.center;
  *a1 = static Alignment.center;
  return result;
}

uint64_t ZStackLayout.alignment.setter(uint64_t result, uint64_t a2)
{
  _QWORD *v2;

  *v2 = result;
  v2[1] = a2;
  return result;
}

uint64_t (*ZStackLayout.alignment.modify())()
{
  return _ViewInputs.base.modify;
}

double Alignment.fraction.getter(unint64_t a1, unint64_t a2)
{
  double v3;
  double v4;

  AlignmentKey.fraction.getter(a1);
  v4 = v3;
  AlignmentKey.fraction.getter(a2);
  return v4;
}

uint64_t specialized _arrayForceCast<A, B>(_:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t i;
  unint64_t v6;
  unint64_t v7;
  id *v8;
  id v9;
  unint64_t v10;
  unint64_t v11;
  _OWORD v12[2];
  uint64_t v13;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = MEMORY[0x24BEE4AF8];
  if (!v2)
    return v3;
  v13 = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v2; ++i)
      {
        MEMORY[0x23B7C6D9C](i, a1);
        type metadata accessor for CGColorRef(0);
        swift_dynamicCast();
        v3 = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v3 + 16) + 1, 1);
          v3 = v13;
        }
        v7 = *(_QWORD *)(v3 + 16);
        v6 = *(_QWORD *)(v3 + 24);
        if (v7 >= v6 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
          v3 = v13;
        }
        *(_QWORD *)(v3 + 16) = v7 + 1;
        outlined init with take of Any(v12, (_OWORD *)(v3 + 32 * v7 + 32));
      }
    }
    else
    {
      v8 = (id *)(a1 + 32);
      type metadata accessor for CGColorRef(0);
      do
      {
        v9 = *v8;
        swift_dynamicCast();
        v3 = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v3 + 16) + 1, 1);
          v3 = v13;
        }
        v11 = *(_QWORD *)(v3 + 16);
        v10 = *(_QWORD *)(v3 + 24);
        if (v11 >= v10 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
          v3 = v13;
        }
        *(_QWORD *)(v3 + 16) = v11 + 1;
        outlined init with take of Any(v12, (_OWORD *)(v3 + 32 * v11 + 32));
        ++v8;
        --v2;
      }
      while (v2);
    }
    return v3;
  }
  __break(1u);
  return result;
}

uint64_t specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v16 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    type metadata accessor for (proposal: _ProposedSize, value: TextSizeVariant)(0, (unint64_t *)&lazy cache variable for type metadata for (key: Spacing.Key, value: Spacing.Value));
    type metadata accessor for (Path, FillStyle)(0, (unint64_t *)&lazy cache variable for type metadata for (Spacing.Key, Spacing.Value));
    v4 = a1 + 40;
    do
    {
      swift_dynamicCast();
      v2 = v16;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v16 + 16) + 1, 1);
        v2 = v16;
      }
      v6 = *(_QWORD *)(v2 + 16);
      v5 = *(_QWORD *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
        v2 = v16;
      }
      *(_QWORD *)(v2 + 16) = v6 + 1;
      v7 = v2 + 56 * v6;
      *(_QWORD *)(v7 + 32) = v9;
      v4 += 56;
      *(_BYTE *)(v7 + 40) = v10;
      *(_QWORD *)(v7 + 48) = v11;
      *(_QWORD *)(v7 + 56) = v12;
      *(_QWORD *)(v7 + 64) = v13;
      *(_QWORD *)(v7 + 72) = v14;
      *(_BYTE *)(v7 + 80) = v15;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  _OWORD v32[2];

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, Any>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v31 = v3;
    v8 = 0;
    v9 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1))
          goto LABEL_41;
        if (v8 >= v13)
        {
LABEL_32:
          if ((a2 & 1) == 0)
          {
            result = swift_release();
            v3 = v31;
            goto LABEL_39;
          }
          v30 = 1 << *(_BYTE *)(v5 + 32);
          if (v30 >= 64)
            bzero((void *)(v5 + 64), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          else
            *v9 = -1 << v30;
          v3 = v31;
          *(_QWORD *)(v5 + 16) = 0;
          break;
        }
        v19 = v9[v8];
        if (!v19)
        {
          v20 = v8 + 1;
          if (v8 + 1 >= v13)
            goto LABEL_32;
          v19 = v9[v20];
          if (!v19)
          {
            while (1)
            {
              v8 = v20 + 1;
              if (__OFADD__(v20, 1))
                break;
              if (v8 >= v13)
                goto LABEL_32;
              v19 = v9[v8];
              ++v20;
              if (v19)
                goto LABEL_19;
            }
LABEL_40:
            __break(1u);
LABEL_41:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_19:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      v21 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v17);
      v22 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
      if ((a2 & 1) != 0)
        outlined init with take of Any(v22, v32);
      else
        outlined init with copy of Any((uint64_t)v22, (uint64_t)v32);
      result = static Hasher._hash(seed:_:)();
      v23 = -1 << *(_BYTE *)(v7 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v15) = v21;
      result = (uint64_t)outlined init with take of Any(v32, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v15));
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_39:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  char v34;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<ObjectIdentifier, TupleTypeDescription<StyleContextDescriptor>>(0, &lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, TupleTypeDescription<ViewDescriptor>>, &lazy cache variable for type metadata for TupleTypeDescription<ViewDescriptor>, (uint64_t)&type metadata for ViewDescriptor, (uint64_t)&protocol witness table for ViewDescriptor);
  v34 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v33 = v3;
    v8 = 0;
    v9 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v20 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v21 = v20 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1))
          goto LABEL_40;
        if (v8 >= v13)
        {
LABEL_31:
          if ((v34 & 1) == 0)
          {
            result = swift_release();
            v3 = v33;
            goto LABEL_38;
          }
          v32 = 1 << *(_BYTE *)(v5 + 32);
          if (v32 >= 64)
            bzero((void *)(v5 + 64), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          else
            *v9 = -1 << v32;
          v3 = v33;
          *(_QWORD *)(v5 + 16) = 0;
          break;
        }
        v23 = v9[v8];
        if (!v23)
        {
          v24 = v8 + 1;
          if (v8 + 1 >= v13)
            goto LABEL_31;
          v23 = v9[v24];
          if (!v23)
          {
            while (1)
            {
              v8 = v24 + 1;
              if (__OFADD__(v24, 1))
                break;
              if (v8 >= v13)
                goto LABEL_31;
              v23 = v9[v8];
              ++v24;
              if (v23)
                goto LABEL_20;
            }
LABEL_39:
            __break(1u);
LABEL_40:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_20:
        v12 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v8 << 6);
      }
      v25 = 8 * v21;
      v26 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v25);
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v25);
      if ((v34 & 1) == 0)
        swift_bridgeObjectRetain();
      result = static Hasher._hash(seed:_:)();
      v15 = -1 << *(_BYTE *)(v7 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v30 = v17 == v29;
          if (v17 == v29)
            v17 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v14 + 8 * v17);
        }
        while (v31 == -1);
        v18 = __clz(__rbit64(~v31)) + (v17 << 6);
      }
      *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = 8 * v18;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v19) = v26;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v19) = v27;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  __int128 *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  char v32;
  __int128 v33[2];

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<ObjectIdentifier, ScrollStateRequest>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, AnyTrackedValue>, (unint64_t *)&lazy cache variable for type metadata for AnyTrackedValue);
  v32 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v31 = v3;
    v8 = 0;
    v9 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1))
          goto LABEL_41;
        if (v8 >= v13)
        {
LABEL_32:
          if ((v32 & 1) == 0)
          {
            result = swift_release();
            v3 = v31;
            goto LABEL_39;
          }
          v30 = 1 << *(_BYTE *)(v5 + 32);
          if (v30 >= 64)
            bzero((void *)(v5 + 64), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          else
            *v9 = -1 << v30;
          v3 = v31;
          *(_QWORD *)(v5 + 16) = 0;
          break;
        }
        v19 = v9[v8];
        if (!v19)
        {
          v20 = v8 + 1;
          if (v8 + 1 >= v13)
            goto LABEL_32;
          v19 = v9[v20];
          if (!v19)
          {
            while (1)
            {
              v8 = v20 + 1;
              if (__OFADD__(v20, 1))
                break;
              if (v8 >= v13)
                goto LABEL_32;
              v19 = v9[v8];
              ++v20;
              if (v19)
                goto LABEL_19;
            }
LABEL_40:
            __break(1u);
LABEL_41:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_19:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      v21 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v17);
      v22 = (__int128 *)(*(_QWORD *)(v5 + 56) + 40 * v17);
      if ((v32 & 1) != 0)
        outlined init with take of ScrollStateRequest(v22, (uint64_t)v33);
      else
        outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v33);
      result = static Hasher._hash(seed:_:)();
      v23 = -1 << *(_BYTE *)(v7 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v15) = v21;
      result = outlined init with take of ScrollStateRequest(v33, *(_QWORD *)(v7 + 56) + 40 * v15);
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_39:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AnyHashable, _ViewList_Edit>);
  v37 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v9 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v8 + 63) >> 6;
    v13 = v6 + 64;
    result = swift_retain();
    v15 = 0;
    while (1)
    {
      if (v11)
      {
        v20 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v21 = v20 | (v15 << 6);
      }
      else
      {
        if (__OFADD__(v15++, 1))
          goto LABEL_39;
        if (v15 >= v12)
        {
LABEL_32:
          swift_release();
          if ((v37 & 1) != 0)
          {
            v36 = 1 << *(_BYTE *)(v5 + 32);
            if (v36 >= 64)
              bzero((void *)(v5 + 64), ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
            else
              *v9 = -1 << v36;
            *(_QWORD *)(v5 + 16) = 0;
          }
          break;
        }
        v23 = v9[v15];
        if (!v23)
        {
          v24 = v15 + 1;
          if (v15 + 1 >= v12)
            goto LABEL_32;
          v23 = v9[v24];
          if (!v23)
          {
            while (1)
            {
              v15 = v24 + 1;
              if (__OFADD__(v24, 1))
                break;
              if (v15 >= v12)
                goto LABEL_32;
              v23 = v9[v15];
              ++v24;
              if (v23)
                goto LABEL_19;
            }
LABEL_38:
            __break(1u);
LABEL_39:
            __break(1u);
            return result;
          }
          ++v15;
        }
LABEL_19:
        v11 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v15 << 6);
      }
      v25 = *(_QWORD *)(v5 + 48) + 40 * v21;
      if ((v37 & 1) != 0)
      {
        v26 = *(_OWORD *)v25;
        v27 = *(_OWORD *)(v25 + 16);
        v40 = *(_QWORD *)(v25 + 32);
        v38 = v26;
        v39 = v27;
      }
      else
      {
        outlined init with copy of AnyHashable(v25, (uint64_t)&v38);
      }
      v28 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v21);
      result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v7 + 40));
      v29 = -1 << *(_BYTE *)(v7 + 32);
      v30 = result & ~v29;
      v31 = v30 >> 6;
      if (((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v32 = 0;
        v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v34 = v31 == v33;
          if (v31 == v33)
            v31 = 0;
          v32 |= v34;
          v35 = *(_QWORD *)(v13 + 8 * v31);
        }
        while (v35 == -1);
        v16 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      v17 = *(_QWORD *)(v7 + 48) + 40 * v16;
      v18 = v38;
      v19 = v39;
      *(_QWORD *)(v17 + 32) = v40;
      *(_OWORD *)v17 = v18;
      *(_OWORD *)(v17 + 16) = v19;
      *(_BYTE *)(*(_QWORD *)(v7 + 56) + v16) = v28;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  Swift::UInt8 v22;
  Swift::UInt v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  _QWORD *v34;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Text.Effect.AttributeTracker.Key, Text.Effect.AttributeTracker.AnyValue>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ConstantKey, AGAttribute>, type metadata accessor for AGAttribute, (void (*)(void))lazy protocol witness table accessor for type ConstantKey and conformance ConstantKey);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v33 = a2;
    v8 = 0;
    v34 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1))
          goto LABEL_38;
        result = v5 + 64;
        if (v8 >= v12)
        {
LABEL_29:
          if ((v33 & 1) == 0)
          {
            result = swift_release();
            v3 = v2;
            goto LABEL_36;
          }
          v32 = 1 << *(_BYTE *)(v5 + 32);
          if (v32 >= 64)
            bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          else
            *v34 = -1 << v32;
          v3 = v2;
          *(_QWORD *)(v5 + 16) = 0;
          break;
        }
        v19 = v34[v8];
        if (!v19)
        {
          v20 = v8 + 1;
          if (v8 + 1 >= v12)
            goto LABEL_29;
          v19 = v34[v20];
          if (!v19)
          {
            while (1)
            {
              v8 = v20 + 1;
              if (__OFADD__(v20, 1))
                break;
              if (v8 >= v12)
                goto LABEL_29;
              v19 = v34[v8];
              ++v20;
              if (v19)
                goto LABEL_19;
            }
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_19:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      v21 = *(_QWORD *)(v5 + 48) + 16 * v17;
      v22 = *(_BYTE *)(v21 + 8);
      v23 = *(_QWORD *)v21;
      v24 = *(_DWORD *)(*(_QWORD *)(v5 + 56) + 4 * v17);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v23);
      Hasher._combine(_:)(v22);
      result = Hasher._finalize()();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v13 + 8 * (v26 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v13 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_37;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v13 + 8 * v27);
        }
        while (v31 == -1);
        v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = *(_QWORD *)(v7 + 48) + 16 * v14;
      *(_QWORD *)v15 = v23;
      *(_BYTE *)(v15 + 8) = v22;
      *(_DWORD *)(*(_QWORD *)(v7 + 56) + 4 * v14) = v24;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_36:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  __int128 v34;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<ObjectIdentifier, ConditionalTypeDescriptor<ViewDescriptor>>();
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v33 = v3;
    v8 = 0;
    v9 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v20 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v21 = v20 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1))
          goto LABEL_40;
        if (v8 >= v13)
        {
LABEL_31:
          if ((a2 & 1) == 0)
          {
            result = swift_release();
            v3 = v33;
            goto LABEL_38;
          }
          v32 = 1 << *(_BYTE *)(v5 + 32);
          if (v32 >= 64)
            bzero((void *)(v5 + 64), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          else
            *v9 = -1 << v32;
          v3 = v33;
          *(_QWORD *)(v5 + 16) = 0;
          break;
        }
        v23 = v9[v8];
        if (!v23)
        {
          v24 = v8 + 1;
          if (v8 + 1 >= v13)
            goto LABEL_31;
          v23 = v9[v24];
          if (!v23)
          {
            while (1)
            {
              v8 = v24 + 1;
              if (__OFADD__(v24, 1))
                break;
              if (v8 >= v13)
                goto LABEL_31;
              v23 = v9[v8];
              ++v24;
              if (v23)
                goto LABEL_20;
            }
LABEL_39:
            __break(1u);
LABEL_40:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_20:
        v12 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v8 << 6);
      }
      v25 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v21);
      v26 = *(_QWORD *)(v5 + 56) + 24 * v21;
      v27 = *(_QWORD *)v26;
      v34 = *(_OWORD *)(v26 + 8);
      if ((a2 & 1) == 0)
        outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(v27);
      result = static Hasher._hash(seed:_:)();
      v15 = -1 << *(_BYTE *)(v7 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v30 = v17 == v29;
          if (v17 == v29)
            v17 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v14 + 8 * v17);
        }
        while (v31 == -1);
        v18 = __clz(__rbit64(~v31)) + (v17 << 6);
      }
      *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v18) = v25;
      v19 = *(_QWORD *)(v7 + 56) + 24 * v18;
      *(_QWORD *)v19 = v27;
      *(_OWORD *)(v19 + 8) = v34;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  char v40;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, AttributeInfoTrace.History>);
  v40 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_38;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v2;
  v39 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_21;
    }
    if (__OFADD__(v14++, 1))
      goto LABEL_40;
    if (v14 >= v11)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v39 + 8 * v14);
    if (!v25)
    {
      v26 = v14 + 1;
      if (v14 + 1 >= v11)
      {
LABEL_31:
        swift_release();
        v3 = v38;
        if ((v40 & 1) == 0)
          goto LABEL_38;
        goto LABEL_34;
      }
      v25 = *(_QWORD *)(v39 + 8 * v26);
      if (!v25)
      {
        while (1)
        {
          v14 = v26 + 1;
          if (__OFADD__(v26, 1))
            break;
          if (v14 >= v11)
            goto LABEL_31;
          v25 = *(_QWORD *)(v39 + 8 * v14);
          ++v26;
          if (v25)
            goto LABEL_20;
        }
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return result;
      }
      ++v14;
    }
LABEL_20:
    v10 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_21:
    v27 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
    v29 = *v27;
    v28 = v27[1];
    v30 = *(_QWORD *)(v5 + 56) + 12 * v22;
    v31 = *(_QWORD *)v30;
    v32 = *(_DWORD *)(v30 + 8);
    if ((v40 & 1) == 0)
      swift_bridgeObjectRetain();
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v35 = v17 == v34;
        if (v17 == v34)
          v17 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v36 == -1);
      v18 = __clz(__rbit64(~v36)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18);
    *v19 = v29;
    v19[1] = v28;
    v20 = *(_QWORD *)(v7 + 56) + 12 * v18;
    *(_QWORD *)v20 = v31;
    *(_DWORD *)(v20 + 8) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v38;
  v24 = (_QWORD *)(v5 + 64);
  if ((v40 & 1) == 0)
    goto LABEL_38;
LABEL_34:
  v37 = 1 << *(_BYTE *)(v5 + 32);
  if (v37 >= 64)
    bzero(v24, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v37;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_38:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<AGSubgraphRef, [(_:)]>(0, &lazy cache variable for type metadata for _DictionaryStorage<AGSubgraphRef, [(_:)]>, type metadata accessor for AGSubgraphRef, type metadata accessor for [(_:)], (void (*)(void))lazy protocol witness table accessor for type AGSubgraphRef and conformance AGSubgraphRef);
  v35 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v9 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v8 + 63) >> 6;
    v13 = v6 + 64;
    result = swift_retain();
    v15 = 0;
    while (1)
    {
      if (v11)
      {
        v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v22 = v21 | (v15 << 6);
      }
      else
      {
        if (__OFADD__(v15++, 1))
          goto LABEL_38;
        if (v15 >= v12)
        {
LABEL_31:
          swift_release();
          v3 = v2;
          if ((v35 & 1) != 0)
          {
            v34 = 1 << *(_BYTE *)(v5 + 32);
            if (v34 >= 64)
              bzero((void *)(v5 + 64), ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
            else
              *v9 = -1 << v34;
            *(_QWORD *)(v5 + 16) = 0;
          }
          break;
        }
        v24 = v9[v15];
        if (!v24)
        {
          v25 = v15 + 1;
          if (v15 + 1 >= v12)
            goto LABEL_31;
          v24 = v9[v25];
          if (!v24)
          {
            while (1)
            {
              v15 = v25 + 1;
              if (__OFADD__(v25, 1))
                break;
              if (v15 >= v12)
                goto LABEL_31;
              v24 = v9[v15];
              ++v25;
              if (v24)
                goto LABEL_20;
            }
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
            return result;
          }
          ++v15;
        }
LABEL_20:
        v11 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v15 << 6);
      }
      v26 = 8 * v22;
      v27 = *(void **)(*(_QWORD *)(v5 + 48) + v26);
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v26);
      if ((v35 & 1) == 0)
      {
        v29 = v27;
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      type metadata accessor for AGSubgraphRef(0);
      lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AGSubgraphRef and conformance AGSubgraphRef, (uint64_t (*)(uint64_t))type metadata accessor for AGSubgraphRef, (uint64_t)&protocol conformance descriptor for AGSubgraphRef);
      _CFObject.hash(into:)();
      result = Hasher._finalize()();
      v16 = -1 << *(_BYTE *)(v7 + 32);
      v17 = result & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v30 = 0;
        v31 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_37;
          }
          v32 = v18 == v31;
          if (v18 == v31)
            v18 = 0;
          v30 |= v32;
          v33 = *(_QWORD *)(v13 + 8 * v18);
        }
        while (v33 == -1);
        v19 = __clz(__rbit64(~v33)) + (v18 << 6);
      }
      *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v20 = 8 * v19;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v20) = v27;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v20) = v28;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<UnsafeRawPointer, String>);
  v35 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = v3;
    v8 = 0;
    v9 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v20 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v21 = v20 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1))
          goto LABEL_40;
        if (v8 >= v13)
        {
LABEL_31:
          if ((v35 & 1) == 0)
          {
            result = swift_release();
            v3 = v34;
            goto LABEL_38;
          }
          v33 = 1 << *(_BYTE *)(v5 + 32);
          if (v33 >= 64)
            bzero((void *)(v5 + 64), ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          else
            *v9 = -1 << v33;
          v3 = v34;
          *(_QWORD *)(v5 + 16) = 0;
          break;
        }
        v23 = v9[v8];
        if (!v23)
        {
          v24 = v8 + 1;
          if (v8 + 1 >= v13)
            goto LABEL_31;
          v23 = v9[v24];
          if (!v23)
          {
            while (1)
            {
              v8 = v24 + 1;
              if (__OFADD__(v24, 1))
                break;
              if (v8 >= v13)
                goto LABEL_31;
              v23 = v9[v8];
              ++v24;
              if (v23)
                goto LABEL_20;
            }
LABEL_39:
            __break(1u);
LABEL_40:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_20:
        v12 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v8 << 6);
      }
      v25 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v21);
      v26 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v21);
      v28 = *v26;
      v27 = v26[1];
      if ((v35 & 1) == 0)
        swift_bridgeObjectRetain();
      result = static Hasher._hash(seed:_:)();
      v15 = -1 << *(_BYTE *)(v7 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v31 = v17 == v30;
          if (v17 == v30)
            v17 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v14 + 8 * v17);
        }
        while (v32 == -1);
        v18 = __clz(__rbit64(~v32)) + (v17 << 6);
      }
      *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v18) = v25;
      v19 = (_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v18);
      *v19 = v28;
      v19[1] = v27;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  int v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, DynamicPropertyCache.Fields>);
  v37 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v36 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v34 = v3;
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1))
          goto LABEL_40;
        result = v5 + 64;
        if (v8 >= v35)
        {
LABEL_31:
          if ((v37 & 1) == 0)
          {
            result = swift_release();
            v3 = v34;
            goto LABEL_38;
          }
          v33 = 1 << *(_BYTE *)(v5 + 32);
          if (v33 >= 64)
            bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          else
            *v36 = -1 << v33;
          v3 = v34;
          *(_QWORD *)(v5 + 16) = 0;
          break;
        }
        v21 = v36[v8];
        if (!v21)
        {
          v22 = v8 + 1;
          if (v8 + 1 >= v35)
            goto LABEL_31;
          v21 = v36[v22];
          if (!v21)
          {
            while (1)
            {
              v8 = v22 + 1;
              if (__OFADD__(v22, 1))
                break;
              if (v8 >= v35)
                goto LABEL_31;
              v21 = v36[v8];
              ++v22;
              if (v21)
                goto LABEL_20;
            }
LABEL_39:
            __break(1u);
LABEL_40:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_20:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v19);
      v24 = *(_QWORD *)(v5 + 56) + 24 * v19;
      v25 = *(_QWORD *)v24;
      v26 = *(_QWORD *)(v24 + 8);
      v27 = *(_BYTE *)(v24 + 16);
      v28 = *(_DWORD *)(v24 + 20);
      if ((v37 & 1) == 0)
        outlined copy of DynamicPropertyCache.Fields.Layout();
      result = static Hasher._hash(seed:_:)();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v31 = v15 == v30;
          if (v15 == v30)
            v15 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v32 == -1);
        v16 = __clz(__rbit64(~v32)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v16) = v23;
      v17 = *(_QWORD *)(v7 + 56) + 24 * v16;
      *(_QWORD *)v17 = v25;
      *(_QWORD *)(v17 + 8) = v26;
      *(_BYTE *)(v17 + 16) = v27;
      *(_DWORD *)(v17 + 20) = v28;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  int64_t v21;
  Swift::UInt32 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  __int128 v34;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<_DisplayList_Identity, _DisplayList_StableIdentity>, (void (*)(void))lazy protocol witness table accessor for type _DisplayList_Identity and conformance _DisplayList_Identity);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v33 = a2;
    v8 = 0;
    v9 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1))
          goto LABEL_38;
        if (v8 >= v13)
        {
LABEL_29:
          if ((v33 & 1) == 0)
          {
            result = swift_release();
            v3 = v2;
            goto LABEL_36;
          }
          v32 = 1 << *(_BYTE *)(v5 + 32);
          if (v32 >= 64)
            bzero((void *)(v5 + 64), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          else
            *v9 = -1 << v32;
          v3 = v2;
          *(_QWORD *)(v5 + 16) = 0;
          break;
        }
        v20 = v9[v8];
        if (!v20)
        {
          v21 = v8 + 1;
          if (v8 + 1 >= v13)
            goto LABEL_29;
          v20 = v9[v21];
          if (!v20)
          {
            while (1)
            {
              v8 = v21 + 1;
              if (__OFADD__(v21, 1))
                break;
              if (v8 >= v13)
                goto LABEL_29;
              v20 = v9[v8];
              ++v21;
              if (v20)
                goto LABEL_19;
            }
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_19:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v22 = *(_DWORD *)(*(_QWORD *)(v5 + 48) + 4 * v18);
      v23 = *(_QWORD *)(v5 + 56) + 24 * v18;
      v34 = *(_OWORD *)(v23 + 8);
      v24 = *(_QWORD *)v23;
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v22);
      result = Hasher._finalize()();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_37;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_DWORD *)(*(_QWORD *)(v7 + 48) + 4 * v15) = v22;
      v16 = *(_QWORD *)(v7 + 56) + 24 * v15;
      *(_QWORD *)v16 = v24;
      *(_OWORD *)(v16 + 8) = v34;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_36:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::UInt8 v22;
  Swift::UInt v23;
  Swift::UInt32 v24;
  Swift::UInt32 v25;
  Swift::UInt32 v26;
  Swift::UInt32 v27;
  Swift::UInt32 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  _QWORD *v38;
  uint64_t v39;
  int64_t v40;
  int v41;
  uint64_t v42;
  int64_t v43;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<ResolvedShapeStyles, Attribute<_ShapeStyle_Pack>>();
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v37 = a2;
    v8 = 0;
    v38 = (_QWORD *)(v5 + 64);
    v39 = v5;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v40 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v42 = (v11 - 1) & v11;
        v43 = v8;
        v15 = __clz(__rbit64(v11)) | (v8 << 6);
      }
      else
      {
        v16 = __OFADD__(v8, 1);
        v17 = v8 + 1;
        if (v16)
          goto LABEL_38;
        result = (uint64_t)v38;
        if (v17 >= v40)
        {
LABEL_29:
          if ((v37 & 1) == 0)
          {
            result = swift_release();
            v3 = v2;
            goto LABEL_36;
          }
          v36 = 1 << *(_BYTE *)(v5 + 32);
          if (v36 >= 64)
            bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          else
            *v38 = -1 << v36;
          v3 = v2;
          *(_QWORD *)(v5 + 16) = 0;
          break;
        }
        v18 = v38[v17];
        if (!v18)
        {
          v19 = v17 + 1;
          if (v17 + 1 >= v40)
            goto LABEL_29;
          v18 = v38[v19];
          if (!v18)
          {
            while (1)
            {
              v17 = v19 + 1;
              if (__OFADD__(v19, 1))
                break;
              if (v17 >= v40)
                goto LABEL_29;
              v18 = v38[v17];
              ++v19;
              if (v18)
                goto LABEL_19;
            }
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
            return result;
          }
          ++v17;
        }
LABEL_19:
        v42 = (v18 - 1) & v18;
        v43 = v17;
        v15 = __clz(__rbit64(v18)) + (v17 << 6);
      }
      v20 = *(_QWORD *)(v5 + 56);
      v21 = *(_QWORD *)(v5 + 48) + 24 * v15;
      v22 = *(_BYTE *)(v21 + 21);
      v23 = *(unsigned __int8 *)(v21 + 20);
      v24 = *(_DWORD *)(v21 + 12);
      v25 = *(_DWORD *)(v21 + 16);
      v27 = *(_DWORD *)(v21 + 4);
      v26 = *(_DWORD *)(v21 + 8);
      v28 = *(_DWORD *)v21;
      v41 = *(_DWORD *)(v20 + 4 * v15);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v28);
      Hasher._combine(_:)(v27);
      Hasher._combine(_:)(v26);
      Hasher._combine(_:)(v24);
      Hasher._combine(_:)(v25);
      Hasher._combine(_:)(v23);
      Hasher._combine(_:)(v22);
      result = Hasher._finalize()();
      v29 = -1 << *(_BYTE *)(v7 + 32);
      v30 = result & ~v29;
      v31 = v30 >> 6;
      if (((-1 << v30) & ~*(_QWORD *)(v12 + 8 * (v30 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v12 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
        v8 = v43;
      }
      else
      {
        v32 = 0;
        v33 = (unint64_t)(63 - v29) >> 6;
        v8 = v43;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_37;
          }
          v34 = v31 == v33;
          if (v31 == v33)
            v31 = 0;
          v32 |= v34;
          v35 = *(_QWORD *)(v12 + 8 * v31);
        }
        while (v35 == -1);
        v13 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = *(_QWORD *)(v7 + 48) + 24 * v13;
      *(_DWORD *)v14 = v28;
      *(_DWORD *)(v14 + 4) = v27;
      *(_DWORD *)(v14 + 8) = v26;
      *(_DWORD *)(v14 + 12) = v24;
      *(_DWORD *)(v14 + 16) = v25;
      *(_BYTE *)(v14 + 20) = v23;
      *(_BYTE *)(v14 + 21) = v22;
      *(_DWORD *)(*(_QWORD *)(v7 + 56) + 4 * v13) = v41;
      ++*(_QWORD *)(v7 + 16);
      v5 = v39;
      v11 = v42;
    }
  }
  result = swift_release();
LABEL_36:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, UInt32>);
  v37 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_38;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v2;
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_21;
    }
    if (__OFADD__(v14++, 1))
      goto LABEL_40;
    if (v14 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v14);
    if (!v24)
    {
      v25 = v14 + 1;
      if (v14 + 1 >= v11)
      {
LABEL_31:
        swift_release();
        v3 = v35;
        if ((v37 & 1) == 0)
          goto LABEL_38;
        goto LABEL_34;
      }
      v24 = *(_QWORD *)(v36 + 8 * v25);
      if (!v24)
      {
        while (1)
        {
          v14 = v25 + 1;
          if (__OFADD__(v25, 1))
            break;
          if (v14 >= v11)
            goto LABEL_31;
          v24 = *(_QWORD *)(v36 + 8 * v14);
          ++v25;
          if (v24)
            goto LABEL_20;
        }
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return result;
      }
      ++v14;
    }
LABEL_20:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_21:
    v26 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v28 = *v26;
    v27 = v26[1];
    v29 = *(_DWORD *)(*(_QWORD *)(v5 + 56) + 4 * v21);
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain();
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v32 = v17 == v31;
        if (v17 == v31)
          v17 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v33 == -1);
      v18 = __clz(__rbit64(~v33)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18);
    *v19 = v28;
    v19[1] = v27;
    *(_DWORD *)(*(_QWORD *)(v7 + 56) + 4 * v18) = v29;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_38;
LABEL_34:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_38:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v22;
  int64_t v23;
  Swift::UInt v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<ScrollTargetRole.Role, [ScrollableCollection]>();
  v31 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v9 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1))
          goto LABEL_40;
        if (v8 >= v13)
        {
LABEL_31:
          if ((v31 & 1) == 0)
          {
            result = swift_release();
            v3 = v2;
            goto LABEL_38;
          }
          v30 = 1 << *(_BYTE *)(v5 + 32);
          if (v30 >= 64)
            bzero((void *)(v5 + 64), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          else
            *v9 = -1 << v30;
          v3 = v2;
          *(_QWORD *)(v5 + 16) = 0;
          break;
        }
        v22 = v9[v8];
        if (!v22)
        {
          v23 = v8 + 1;
          if (v8 + 1 >= v13)
            goto LABEL_31;
          v22 = v9[v23];
          if (!v22)
          {
            while (1)
            {
              v8 = v23 + 1;
              if (__OFADD__(v23, 1))
                break;
              if (v8 >= v13)
                goto LABEL_31;
              v22 = v9[v8];
              ++v23;
              if (v22)
                goto LABEL_20;
            }
LABEL_39:
            __break(1u);
LABEL_40:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_20:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      v24 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v20);
      v25 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
      if ((v31 & 1) == 0)
        swift_bridgeObjectRetain();
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v24);
      result = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(v7 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v28 = v17 == v27;
          if (v17 == v27)
            v17 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v14 + 8 * v17);
        }
        while (v29 == -1);
        v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v18) = v24;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v18) = v25;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  Swift::UInt v22;
  uint64_t v23;
  Swift::UInt v24;
  Swift::UInt v25;
  Swift::UInt v26;
  Swift::UInt v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t v41;
  char v42;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<CUIDesignLibraryCacheKey, CUIDesignLibraryCacheKey.Entry>, (void (*)(void))lazy protocol witness table accessor for type CUIDesignLibraryCacheKey and conformance CUIDesignLibraryCacheKey);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v38 = a2;
    v8 = 0;
    v40 = (_QWORD *)(v5 + 64);
    v41 = v5;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v39 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        result = (uint64_t)v40;
        if (v18 >= v39)
          goto LABEL_31;
        v19 = v40[v18];
        ++v8;
        if (!v19)
        {
          v8 = v18 + 1;
          if (v18 + 1 >= v39)
            goto LABEL_31;
          v19 = v40[v8];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v39)
            {
LABEL_31:
              if ((v38 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_38;
              }
              v37 = 1 << *(_BYTE *)(v5 + 32);
              if (v37 >= 64)
                bzero(v40, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v40 = -1 << v37;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v19 = v40[v20];
            if (!v19)
            {
              while (1)
              {
                v8 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_40;
                if (v8 >= v39)
                  goto LABEL_31;
                v19 = v40[v8];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v8 = v20;
          }
        }
LABEL_21:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      v21 = *(_QWORD *)(v5 + 48) + 24 * v17;
      v22 = *(_QWORD *)(v21 + 16);
      v23 = *(_QWORD *)(v5 + 56) + 20 * v17;
      v24 = *(unsigned __int8 *)(v21 + 10);
      v25 = *(unsigned __int8 *)(v21 + 9);
      v26 = *(unsigned __int8 *)(v21 + 8);
      v27 = *(_QWORD *)v21;
      v42 = *(_BYTE *)(v23 + 16);
      v29 = *(_QWORD *)v23;
      v28 = *(_QWORD *)(v23 + 8);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      Hasher._combine(_:)(v26);
      Hasher._combine(_:)(v25);
      Hasher._combine(_:)(v24);
      Hasher._combine(_:)(v22);
      result = Hasher._finalize()();
      v30 = -1 << *(_BYTE *)(v7 + 32);
      v31 = result & ~v30;
      v32 = v31 >> 6;
      if (((-1 << v31) & ~*(_QWORD *)(v12 + 8 * (v31 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v12 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v33 = 0;
        v34 = (unint64_t)(63 - v30) >> 6;
        do
        {
          if (++v32 == v34 && (v33 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v35 = v32 == v34;
          if (v32 == v34)
            v32 = 0;
          v33 |= v35;
          v36 = *(_QWORD *)(v12 + 8 * v32);
        }
        while (v36 == -1);
        v13 = __clz(__rbit64(~v36)) + (v32 << 6);
      }
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = *(_QWORD *)(v7 + 48) + 24 * v13;
      *(_QWORD *)v14 = v27;
      *(_BYTE *)(v14 + 8) = v26;
      *(_BYTE *)(v14 + 9) = v25;
      *(_BYTE *)(v14 + 10) = v24;
      *(_QWORD *)(v14 + 16) = v22;
      v15 = *(_QWORD *)(v7 + 56) + 20 * v13;
      *(_QWORD *)v15 = v29;
      *(_QWORD *)(v15 + 8) = v28;
      *(_BYTE *)(v15 + 16) = v42;
      ++*(_QWORD *)(v7 + 16);
      v5 = v41;
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  _OWORD *v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD v34[2];

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<CFStringRef, Any>();
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v33 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v14 << 6);
      goto LABEL_22;
    }
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v11)
      break;
    v19 = (_QWORD *)(v5 + 64);
    v20 = *(_QWORD *)(v33 + 8 * v18);
    ++v14;
    if (!v20)
    {
      v14 = v18 + 1;
      if (v18 + 1 >= v11)
        goto LABEL_34;
      v20 = *(_QWORD *)(v33 + 8 * v14);
      if (!v20)
      {
        v21 = v18 + 2;
        if (v21 >= v11)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v20 = *(_QWORD *)(v33 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            v14 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_43;
            if (v14 >= v11)
              goto LABEL_34;
            v20 = *(_QWORD *)(v33 + 8 * v14);
            ++v21;
            if (v20)
              goto LABEL_21;
          }
        }
        v14 = v21;
      }
    }
LABEL_21:
    v10 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_22:
    v22 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v17);
    v23 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
    if ((a2 & 1) != 0)
    {
      outlined init with take of Any(v23, v34);
    }
    else
    {
      outlined init with copy of Any((uint64_t)v23, (uint64_t)v34);
      v24 = v22;
    }
    Hasher.init(_seed:)();
    type metadata accessor for CFStringRef(0);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
    _CFObject.hash(into:)();
    result = Hasher._finalize()();
    v25 = -1 << *(_BYTE *)(v7 + 32);
    v26 = result & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v30 = v27 == v29;
        if (v27 == v29)
          v27 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v12 + 8 * v27);
      }
      while (v31 == -1);
      v15 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v15) = v22;
    result = (uint64_t)outlined init with take of Any(v34, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v15));
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v19 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v32 = 1 << *(_BYTE *)(v5 + 32);
  if (v32 >= 64)
    bzero(v19, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v19 = -1 << v32;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  _QWORD *v35;
  _OWORD v36[2];

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<String, Any>);
  v6 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v35 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v34 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v18 = v17 | (v14 << 6);
      }
      else
      {
        v19 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v19 >= v34)
          goto LABEL_34;
        v20 = v35[v19];
        ++v14;
        if (!v20)
        {
          v14 = v19 + 1;
          if (v19 + 1 >= v34)
            goto LABEL_34;
          v20 = v35[v14];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v34)
            {
LABEL_34:
              swift_release();
              v3 = v2;
              if ((v6 & 1) != 0)
              {
                v33 = 1 << *(_BYTE *)(v5 + 32);
                if (v33 >= 64)
                  bzero(v35, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v35 = -1 << v33;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v20 = v35[v21];
            if (!v20)
            {
              while (1)
              {
                v14 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_41;
                if (v14 >= v34)
                  goto LABEL_34;
                v20 = v35[v14];
                ++v21;
                if (v20)
                  goto LABEL_21;
              }
            }
            v14 = v21;
          }
        }
LABEL_21:
        v11 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }
      v22 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v18);
      v24 = *v22;
      v23 = v22[1];
      v25 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v18);
      if ((v6 & 1) != 0)
      {
        outlined init with take of Any(v25, v36);
      }
      else
      {
        outlined init with copy of Any((uint64_t)v25, (uint64_t)v36);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v12 + 8 * v28);
        }
        while (v32 == -1);
        v15 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v15);
      *v16 = v24;
      v16[1] = v23;
      result = (uint64_t)outlined init with take of Any(v36, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v15));
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
  *v3 = v8;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, type metadata accessor for _DictionaryStorage<RBSymbolAnimationOptionKey, Any>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<ObjectIdentifier, [DisplayList.ViewUpdater.ViewCache.PendingAsyncValue]>();
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v31 = -1 << v10;
    v32 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v8 << 6);
      }
      else
      {
        v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v33)
          goto LABEL_33;
        v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          v8 = v21 + 1;
          if (v21 + 1 >= v33)
            goto LABEL_33;
          v22 = v9[v8];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v33)
            {
LABEL_33:
              if ((a2 & 1) != 0)
              {
                if (v32 >= 64)
                  bzero((void *)(v5 + 64), 8 * v33);
                else
                  *v9 = v31;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                v8 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_41;
                if (v8 >= v33)
                  goto LABEL_33;
                v22 = v9[v8];
                ++v23;
                if (v22)
                  goto LABEL_30;
              }
            }
            v8 = v23;
          }
        }
LABEL_30:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      v28 = 8 * v20;
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v28);
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v28);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain();
      result = static Hasher._hash(seed:_:)();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = 8 * v17;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v18) = v29;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v30;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  Swift::UInt8 v26;
  void *v27;
  id v28;
  uint64_t v29;
  int64_t v30;
  _QWORD *v31;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Text.Effect.AttributeTracker.Key, Text.Effect.AttributeTracker.AnyValue>(0, &lazy cache variable for type metadata for _DictionaryStorage<CachedVectorImageContents.CacheKey, CGImageRef>, type metadata accessor for CGImageRef, (void (*)(void))lazy protocol witness table accessor for type CachedVectorImageContents.CacheKey and conformance CachedVectorImageContents.CacheKey);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v31 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v30 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v19 >= v30)
          goto LABEL_33;
        v20 = v31[v19];
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v30)
            goto LABEL_33;
          v20 = v31[v8];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v30)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v29 = 1 << *(_BYTE *)(v5 + 32);
              if (v29 >= 64)
                bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v31 = -1 << v29;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v31[v21];
            if (!v20)
            {
              while (1)
              {
                v8 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_42;
                if (v8 >= v30)
                  goto LABEL_33;
                v20 = v31[v8];
                ++v21;
                if (v20)
                  goto LABEL_30;
              }
            }
            v8 = v21;
          }
        }
LABEL_30:
        v11 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v26 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v18);
      v27 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v18);
      if ((a2 & 1) == 0)
        v28 = v27;
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v26);
      result = Hasher._finalize()();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v24 = v15 == v23;
          if (v15 == v23)
            v15 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v25 == -1);
        v16 = __clz(__rbit64(~v25)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v16) = v26;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v16) = v27;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Int, LocalizedStringKey.FormatArgument>(0, &lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, AnyFontModifier>, (void (*)(uint64_t))type metadata accessor for AnyFontModifier);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v31 = -1 << v10;
    v32 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v8 << 6);
      }
      else
      {
        v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v33)
          goto LABEL_33;
        v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          v8 = v21 + 1;
          if (v21 + 1 >= v33)
            goto LABEL_33;
          v22 = v9[v8];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v33)
            {
LABEL_33:
              if ((a2 & 1) != 0)
              {
                if (v32 >= 64)
                  bzero((void *)(v5 + 64), 8 * v33);
                else
                  *v9 = v31;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                v8 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_41;
                if (v8 >= v33)
                  goto LABEL_33;
                v22 = v9[v8];
                ++v23;
                if (v22)
                  goto LABEL_30;
              }
            }
            v8 = v23;
          }
        }
LABEL_30:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      v28 = 8 * v20;
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v28);
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v28);
      if ((a2 & 1) == 0)
        swift_retain();
      result = static Hasher._hash(seed:_:)();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = 8 * v17;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v18) = v29;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v30;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Int, LocalizedStringKey.FormatArgument>(0, &lazy cache variable for type metadata for _DictionaryStorage<String, AnyFontModifier>, (void (*)(uint64_t))type metadata accessor for AnyFontModifier);
  v36 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v34)
        goto LABEL_33;
      v23 = *(_QWORD *)(v35 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v34)
              goto LABEL_33;
            v23 = *(_QWORD *)(v35 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, type metadata accessor for _DictionaryStorage<NSAttributedStringKey, Any>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<ObjectIdentifier, TupleTypeDescription<StyleContextDescriptor>>(0, &lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, TupleTypeDescription<StyleContextDescriptor>>, &lazy cache variable for type metadata for TupleTypeDescription<StyleContextDescriptor>, (uint64_t)&type metadata for StyleContextDescriptor, (uint64_t)&protocol witness table for StyleContextDescriptor);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v31 = -1 << v10;
    v32 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v8 << 6);
      }
      else
      {
        v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v33)
          goto LABEL_33;
        v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          v8 = v21 + 1;
          if (v21 + 1 >= v33)
            goto LABEL_33;
          v22 = v9[v8];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v33)
            {
LABEL_33:
              if ((a2 & 1) != 0)
              {
                if (v32 >= 64)
                  bzero((void *)(v5 + 64), 8 * v33);
                else
                  *v9 = v31;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                v8 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_41;
                if (v8 >= v33)
                  goto LABEL_33;
                v22 = v9[v8];
                ++v23;
                if (v22)
                  goto LABEL_30;
              }
            }
            v8 = v23;
          }
        }
LABEL_30:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      v28 = 8 * v20;
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v28);
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v28);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain();
      result = static Hasher._hash(seed:_:)();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = 8 * v17;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v18) = v29;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v30;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<AnyHashable, Int>);
  v38 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v11)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v37 + 8 * v21);
    ++v14;
    if (!v23)
    {
      v14 = v21 + 1;
      if (v21 + 1 >= v11)
        goto LABEL_34;
      v23 = *(_QWORD *)(v37 + 8 * v14);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_34:
          swift_release();
          if ((v38 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v23 = *(_QWORD *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v14 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_43;
            if (v14 >= v11)
              goto LABEL_34;
            v23 = *(_QWORD *)(v37 + 8 * v14);
            ++v24;
            if (v23)
              goto LABEL_21;
          }
        }
        v14 = v24;
      }
    }
LABEL_21:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    v25 = *(_QWORD *)(v5 + 48) + 40 * v20;
    if ((v38 & 1) != 0)
    {
      v26 = *(_OWORD *)v25;
      v27 = *(_OWORD *)(v25 + 16);
      v41 = *(_QWORD *)(v25 + 32);
      v39 = v26;
      v40 = v27;
    }
    else
    {
      outlined init with copy of AnyHashable(v25, (uint64_t)&v39);
    }
    v28 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v7 + 40));
    v29 = -1 << *(_BYTE *)(v7 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v12 + 8 * (v30 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v12 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v12 + 8 * v31);
      }
      while (v35 == -1);
      v15 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = *(_QWORD *)(v7 + 48) + 40 * v15;
    v17 = v39;
    v18 = v40;
    *(_QWORD *)(v16 + 32) = v41;
    *(_OWORD *)v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v15) = v28;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v22, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<String, CGFloat>);
  v37 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v2;
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v11)
        goto LABEL_33;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain();
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  _OWORD v32[2];

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<Int, Any>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v31 = v3;
    v8 = 0;
    v9 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v18 >= v13)
          goto LABEL_34;
        v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          v8 = v18 + 1;
          if (v18 + 1 >= v13)
            goto LABEL_34;
          v19 = v9[v8];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v31;
                goto LABEL_41;
              }
              v30 = 1 << *(_BYTE *)(v5 + 32);
              if (v30 >= 64)
                bzero((void *)(v5 + 64), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v9 = -1 << v30;
              v3 = v31;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                v8 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_43;
                if (v8 >= v13)
                  goto LABEL_34;
                v19 = v9[v8];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v8 = v20;
          }
        }
LABEL_21:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      v21 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v17);
      v22 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
      if ((a2 & 1) != 0)
        outlined init with take of Any(v22, v32);
      else
        outlined init with copy of Any((uint64_t)v22, (uint64_t)v32);
      result = static Hasher._hash(seed:_:)();
      v23 = -1 << *(_BYTE *)(v7 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v15) = v21;
      result = (uint64_t)outlined init with take of Any(v32, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v15));
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_41:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<Int, CGFloat>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v35 = a2;
    v34 = v3;
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v32 = -1 << v10;
    v33 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13)
          goto LABEL_31;
        v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v13)
            goto LABEL_31;
          v20 = v9[v8];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                result = swift_release();
                v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64)
                bzero((void *)(v5 + 64), 8 * v13);
              else
                *v9 = v32;
              v3 = v34;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                v8 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_40;
                if (v8 >= v13)
                  goto LABEL_31;
                v20 = v9[v8];
                ++v21;
                if (v20)
                  goto LABEL_21;
              }
            }
            v8 = v21;
          }
        }
LABEL_21:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v22 = 8 * v18;
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v22);
      v24 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v22);
      result = static Hasher._hash(seed:_:)();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = 8 * v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v16) = v23;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v16) = v24;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::UInt v18;
  char v19;
  __int128 v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  _OWORD v25[2];
  char v26;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Spacing.Key, Spacing.Value>, (void (*)(void))lazy protocol witness table accessor for type Spacing.Key and conformance Spacing.Key);
  v6 = (_QWORD *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(_QWORD *)(v5 + 16))
  {
    v7 = 1 << *(_BYTE *)(v5 + 32);
    v8 = (_QWORD *)(v5 + 64);
    v9 = -1;
    if (v7 < 64)
      v9 = ~(-1 << v7);
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v11 = (unint64_t)(v7 + 63) >> 6;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v14 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v15 = v14 | (v13 << 6);
      }
      else
      {
        v21 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
          __break(1u);
LABEL_27:
          __break(1u);
          return result;
        }
        if (v21 >= v11)
          goto LABEL_20;
        v22 = v8[v21];
        ++v13;
        if (!v22)
        {
          v13 = v21 + 1;
          if (v21 + 1 >= v11)
            goto LABEL_20;
          v22 = v8[v13];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v11)
            {
LABEL_20:
              swift_release();
              if ((a2 & 1) != 0)
              {
                v24 = 1 << *(_BYTE *)(v5 + 32);
                if (v24 > 63)
                  bzero((void *)(v5 + 64), ((unint64_t)(v24 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v24;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v22 = v8[v23];
            if (!v22)
            {
              while (1)
              {
                v13 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_27;
                if (v13 >= v11)
                  goto LABEL_20;
                v22 = v8[v13];
                ++v23;
                if (v22)
                  goto LABEL_19;
              }
            }
            v13 = v23;
          }
        }
LABEL_19:
        v10 = (v22 - 1) & v22;
        v15 = __clz(__rbit64(v22)) + (v13 << 6);
      }
      v16 = *(_QWORD *)(v5 + 48) + 16 * v15;
      v17 = *(_QWORD *)(v5 + 56) + 40 * v15;
      v18 = *(_QWORD *)v16;
      v19 = *(_BYTE *)(v17 + 32);
      v20 = *(_OWORD *)(v17 + 16);
      v25[0] = *(_OWORD *)v17;
      v25[1] = v20;
      v26 = v19;
      result = specialized _NativeDictionary._unsafeInsertNew(key:value:)(v18, *(_BYTE *)(v16 + 8), (uint64_t)v25, v6);
    }
  }
  result = swift_release();
  *v3 = v6;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, ScrollStateRequest>, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest, (uint64_t)&protocol descriptor for ScrollStateRequest, (void (*)(uint64_t, _BYTE *))outlined init with take of ScrollStateRequest);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  _QWORD *v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  Swift::UInt32 v23;
  Swift::UInt8 v24;
  Swift::UInt v25;
  uint64_t v26;
  Swift::UInt v27;
  id v28;
  Swift::Int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t *v39;
  id v40;
  void *v41;
  int64_t v42;
  _QWORD *v43;
  uint64_t v44;
  char v45;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<ContentStyle.MaterialStyle, [DisplayList.Effect]>();
  v45 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_54;
  v39 = v2;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v43 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v42 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  swift_retain();
  v12 = 0;
  v44 = v5;
LABEL_8:
  if (v10)
  {
    v15 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    v16 = v15 | (v12 << 6);
    goto LABEL_22;
  }
  v17 = v12 + 1;
  if (__OFADD__(v12, 1))
    goto LABEL_55;
  if (v17 >= v42)
  {
    swift_release();
    v3 = v39;
    v18 = v43;
    if ((v45 & 1) != 0)
    {
LABEL_50:
      v37 = 1 << *(_BYTE *)(v5 + 32);
      if (v37 >= 64)
        bzero(v18, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      else
        *v18 = -1 << v37;
      *(_QWORD *)(v5 + 16) = 0;
    }
  }
  else
  {
    v18 = v43;
    v19 = v43[v17];
    ++v12;
    if (v19)
      goto LABEL_21;
    v12 = v17 + 1;
    if (v17 + 1 >= v42)
      goto LABEL_47;
    v19 = v43[v12];
    if (v19)
    {
LABEL_21:
      v10 = (v19 - 1) & v19;
      v16 = __clz(__rbit64(v19)) + (v12 << 6);
LABEL_22:
      v21 = *(_QWORD *)(v5 + 48) + 16 * v16;
      v22 = *(_QWORD *)v21;
      v23 = *(_DWORD *)(v21 + 8);
      v24 = *(_BYTE *)(v21 + 12);
      v25 = *(unsigned __int8 *)(v21 + 13);
      v26 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16);
      if ((v45 & 1) == 0)
      {
        outlined copy of Material.ID(*(_QWORD *)v21);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      switch(v22)
      {
        case 0uLL:
          v27 = 0;
          goto LABEL_35;
        case 1uLL:
          v27 = 1;
          goto LABEL_35;
        case 2uLL:
          v27 = 2;
          goto LABEL_35;
        case 3uLL:
          v27 = 3;
          goto LABEL_35;
        case 4uLL:
          v27 = 4;
          goto LABEL_35;
        case 5uLL:
          v27 = 5;
          goto LABEL_35;
        case 6uLL:
          v27 = 6;
          goto LABEL_35;
        case 7uLL:
          v27 = 7;
LABEL_35:
          Hasher._combine(_:)(v27);
          break;
        default:
          v41 = *(void **)(v22 + 48);
          Hasher._combine(_:)(8uLL);
          outlined copy of Material.ID(v22);
          v40 = v41;
          String.hash(into:)();
          String.hash(into:)();
          if (v41)
          {
            Hasher._combine(_:)(1u);
            v28 = v40;
            NSObject.hash(into:)();

          }
          else
          {
            Hasher._combine(_:)(0);
          }
          outlined consume of Material.ID(v22);
          break;
      }
      Hasher._combine(_:)(v23);
      Hasher._combine(_:)(v24);
      Hasher._combine(_:)(v25);
      v29 = Hasher._finalize()();
      v30 = -1 << *(_BYTE *)(v7 + 32);
      v31 = v29 & ~v30;
      v32 = v31 >> 6;
      if (((-1 << v31) & ~*(_QWORD *)(v11 + 8 * (v31 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v11 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_7;
      }
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      while (++v32 != v34 || (v33 & 1) == 0)
      {
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v11 + 8 * v32);
        if (v36 != -1)
        {
          v13 = __clz(__rbit64(~v36)) + (v32 << 6);
LABEL_7:
          *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
          v14 = *(_QWORD *)(v7 + 48) + 16 * v13;
          *(_QWORD *)v14 = v22;
          *(_DWORD *)(v14 + 8) = v23;
          *(_BYTE *)(v14 + 12) = v24;
          *(_BYTE *)(v14 + 13) = v25;
          *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v13) = v26;
          ++*(_QWORD *)(v7 + 16);
          v5 = v44;
          goto LABEL_8;
        }
      }
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
      JUMPOUT(0x234A4CCFCLL);
    }
    v20 = v17 + 2;
    if (v20 < v42)
    {
      v19 = v43[v20];
      if (!v19)
      {
        while (1)
        {
          v12 = v20 + 1;
          if (__OFADD__(v20, 1))
            goto LABEL_56;
          if (v12 >= v42)
            goto LABEL_47;
          v19 = v43[v12];
          ++v20;
          if (v19)
            goto LABEL_21;
        }
      }
      v12 = v20;
      goto LABEL_21;
    }
LABEL_47:
    swift_release();
    v3 = v39;
    if ((v45 & 1) != 0)
      goto LABEL_50;
  }
LABEL_54:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  Swift::UInt32 v24;
  uint64_t v25;
  Swift::UInt v26;
  void *v27;
  id v28;
  id v29;
  Swift::Int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  uint64_t *v40;
  uint64_t v41;
  char v42;
  int64_t v43;
  _QWORD *v44;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Material.ResolvedMaterial, [AnyMaterialLayer]>();
  v42 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_54;
  v40 = v2;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v44 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v43 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  swift_retain();
  v12 = 0;
  v13 = v42;
  v41 = v5;
LABEL_8:
  if (v10)
  {
    v16 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    v17 = v16 | (v12 << 6);
    goto LABEL_22;
  }
  v18 = v12 + 1;
  if (__OFADD__(v12, 1))
    goto LABEL_55;
  if (v18 >= v43)
  {
    swift_release();
    v3 = v40;
    v19 = v44;
    if ((v42 & 1) != 0)
    {
LABEL_50:
      v38 = 1 << *(_BYTE *)(v5 + 32);
      if (v38 >= 64)
        bzero(v19, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      else
        *v19 = -1 << v38;
      *(_QWORD *)(v5 + 16) = 0;
    }
  }
  else
  {
    v19 = v44;
    v20 = v44[v18];
    ++v12;
    if (v20)
      goto LABEL_21;
    v12 = v18 + 1;
    if (v18 + 1 >= v43)
      goto LABEL_47;
    v20 = v44[v12];
    if (v20)
    {
LABEL_21:
      v10 = (v20 - 1) & v20;
      v17 = __clz(__rbit64(v20)) + (v12 << 6);
LABEL_22:
      v22 = *(_QWORD *)(v5 + 48) + 16 * v17;
      v23 = *(_QWORD *)v22;
      v24 = *(_DWORD *)(v22 + 8);
      v25 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v17);
      if ((v13 & 1) == 0)
      {
        outlined copy of Material.ID(*(_QWORD *)v22);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      switch(v23)
      {
        case 0uLL:
          v26 = 0;
          goto LABEL_35;
        case 1uLL:
          v26 = 1;
          goto LABEL_35;
        case 2uLL:
          v26 = 2;
          goto LABEL_35;
        case 3uLL:
          v26 = 3;
          goto LABEL_35;
        case 4uLL:
          v26 = 4;
          goto LABEL_35;
        case 5uLL:
          v26 = 5;
          goto LABEL_35;
        case 6uLL:
          v26 = 6;
          goto LABEL_35;
        case 7uLL:
          v26 = 7;
LABEL_35:
          Hasher._combine(_:)(v26);
          break;
        default:
          v27 = *(void **)(v23 + 48);
          Hasher._combine(_:)(8uLL);
          outlined copy of Material.ID(v23);
          v28 = v27;
          String.hash(into:)();
          String.hash(into:)();
          if (v27)
          {
            Hasher._combine(_:)(1u);
            v29 = v28;
            NSObject.hash(into:)();

          }
          else
          {
            Hasher._combine(_:)(0);
          }
          outlined consume of Material.ID(v23);
          v5 = v41;
          v13 = v42;
          break;
      }
      Hasher._combine(_:)(v24);
      v30 = Hasher._finalize()();
      v31 = -1 << *(_BYTE *)(v7 + 32);
      v32 = v30 & ~v31;
      v33 = v32 >> 6;
      if (((-1 << v32) & ~*(_QWORD *)(v11 + 8 * (v32 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v11 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_7;
      }
      v34 = 0;
      v35 = (unint64_t)(63 - v31) >> 6;
      while (++v33 != v35 || (v34 & 1) == 0)
      {
        v36 = v33 == v35;
        if (v33 == v35)
          v33 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v11 + 8 * v33);
        if (v37 != -1)
        {
          v14 = __clz(__rbit64(~v37)) + (v33 << 6);
LABEL_7:
          *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
          v15 = *(_QWORD *)(v7 + 48) + 16 * v14;
          *(_QWORD *)v15 = v23;
          *(_DWORD *)(v15 + 8) = v24;
          *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v14) = v25;
          ++*(_QWORD *)(v7 + 16);
          goto LABEL_8;
        }
      }
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
      JUMPOUT(0x234A4D150);
    }
    v21 = v18 + 2;
    if (v21 < v43)
    {
      v20 = v44[v21];
      if (!v20)
      {
        while (1)
        {
          v12 = v21 + 1;
          if (__OFADD__(v21, 1))
            goto LABEL_56;
          if (v12 >= v43)
            goto LABEL_47;
          v20 = v44[v12];
          ++v21;
          if (v20)
            goto LABEL_21;
        }
      }
      v12 = v21;
      goto LABEL_21;
    }
LABEL_47:
    swift_release();
    v3 = v40;
    if ((v42 & 1) != 0)
      goto LABEL_50;
  }
LABEL_54:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.GlyphIndex, Int>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.GlyphIndex and conformance Text.Effect.GlyphIndex, (uint64_t)&type metadata for Text.Effect.GlyphIndex, (void (*)(uint64_t))MEMORY[0x24BEE42F8]);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t *v36;
  char v37;
  __int128 v38;
  __int128 v39;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<Double, Text.Effect.BaseFragment>);
  v37 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v36 = (uint64_t *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v32 = -1 << v9;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v33 = 1 << *(_BYTE *)(v5 + 32);
    v34 = v3;
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v35)
          goto LABEL_33;
        v21 = v36[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v35)
            goto LABEL_33;
          v21 = v36[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v35)
            {
LABEL_33:
              if ((v37 & 1) == 0)
              {
                result = swift_release();
                v3 = v34;
                goto LABEL_40;
              }
              if (v33 >= 64)
                bzero(v36, 8 * v35);
              else
                *v36 = v32;
              v3 = v34;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v36[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_42;
                if (v8 >= v35)
                  goto LABEL_33;
                v21 = v36[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v19);
      v28 = *(_QWORD *)(v5 + 56) + 56 * v19;
      v30 = *(_QWORD *)v28;
      v29 = *(_QWORD *)(v28 + 8);
      v38 = *(_OWORD *)(v28 + 32);
      v39 = *(_OWORD *)(v28 + 16);
      v31 = *(_QWORD *)(v28 + 48);
      if ((v37 & 1) == 0)
      {
        swift_retain();
        swift_retain();
        swift_retain();
      }
      result = static Hasher._hash(seed:_:)();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v25 = v15 == v24;
          if (v15 == v24)
            v15 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v16) = v27;
      v17 = *(_QWORD *)(v7 + 56) + 56 * v16;
      *(_QWORD *)v17 = v30;
      *(_QWORD *)(v17 + 8) = v29;
      *(_OWORD *)(v17 + 16) = v39;
      *(_OWORD *)(v17 + 32) = v38;
      *(_QWORD *)(v17 + 48) = v31;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.FragmentIdentifier, Int>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier, (uint64_t)&type metadata for Text.Effect.FragmentIdentifier, (void (*)(uint64_t))MEMORY[0x24BEE42F8]);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  Swift::UInt32 *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt32 *v20;
  Swift::UInt32 v21;
  Swift::UInt32 v22;
  Swift::UInt32 v23;
  Swift::UInt32 v24;
  __int128 *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  _QWORD *v35;
  char v36;
  __int128 v37[2];

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<DisplayList.GraphicsRenderer.Cache.AnimatorKey, _DisplayList_AnyEffectAnimator>();
  v36 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v35 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v34 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v8 << 6);
      }
      else
      {
        v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v17 >= v34)
          goto LABEL_34;
        v18 = v35[v17];
        ++v8;
        if (!v18)
        {
          v8 = v17 + 1;
          if (v17 + 1 >= v34)
            goto LABEL_34;
          v18 = v35[v8];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v34)
            {
LABEL_34:
              if ((v36 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_41;
              }
              v33 = 1 << *(_BYTE *)(v5 + 32);
              if (v33 >= 64)
                bzero(v35, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v35 = -1 << v33;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v18 = v35[v19];
            if (!v18)
            {
              while (1)
              {
                v8 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_43;
                if (v8 >= v34)
                  goto LABEL_34;
                v18 = v35[v8];
                ++v19;
                if (v18)
                  goto LABEL_21;
              }
            }
            v8 = v19;
          }
        }
LABEL_21:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      v20 = (Swift::UInt32 *)(*(_QWORD *)(v5 + 48) + 16 * v16);
      v22 = *v20;
      v21 = v20[1];
      v24 = v20[2];
      v23 = v20[3];
      v25 = (__int128 *)(*(_QWORD *)(v5 + 56) + 40 * v16);
      if ((v36 & 1) != 0)
        outlined init with take of ScrollStateRequest(v25, (uint64_t)v37);
      else
        outlined init with copy of AnyTrackedValue((uint64_t)v25, (uint64_t)v37);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v22);
      Hasher._combine(_:)(v21);
      Hasher._combine(_:)(v24);
      Hasher._combine(_:)(v23);
      result = Hasher._finalize()();
      v26 = -1 << *(_BYTE *)(v7 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v12 + 8 * v28);
        }
        while (v32 == -1);
        v13 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = (Swift::UInt32 *)(*(_QWORD *)(v7 + 48) + 16 * v13);
      *v14 = v22;
      v14[1] = v21;
      v14[2] = v24;
      v14[3] = v23;
      result = outlined init with take of ScrollStateRequest(v37, *(_QWORD *)(v7 + 56) + 40 * v13);
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_41:
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (void (*)(_QWORD))type metadata accessor for _DictionaryStorage<RBDisplayListInterpolatorOptionKey, Any>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  Swift::UInt *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt *v20;
  Swift::UInt v21;
  Swift::UInt v22;
  __int128 *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  _QWORD *v33;
  char v34;
  __int128 v35[2];

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<EventID, EventType>();
  v34 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v33 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v32 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v8 << 6);
      }
      else
      {
        v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v17 >= v32)
          goto LABEL_34;
        v18 = v33[v17];
        ++v8;
        if (!v18)
        {
          v8 = v17 + 1;
          if (v17 + 1 >= v32)
            goto LABEL_34;
          v18 = v33[v8];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v32)
            {
LABEL_34:
              if ((v34 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_41;
              }
              v31 = 1 << *(_BYTE *)(v5 + 32);
              if (v31 >= 64)
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v33 = -1 << v31;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v18 = v33[v19];
            if (!v18)
            {
              while (1)
              {
                v8 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_43;
                if (v8 >= v32)
                  goto LABEL_34;
                v18 = v33[v8];
                ++v19;
                if (v18)
                  goto LABEL_21;
              }
            }
            v8 = v19;
          }
        }
LABEL_21:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      v20 = (Swift::UInt *)(*(_QWORD *)(v5 + 48) + 16 * v16);
      v22 = *v20;
      v21 = v20[1];
      v23 = (__int128 *)(*(_QWORD *)(v5 + 56) + 40 * v16);
      if ((v34 & 1) != 0)
        outlined init with take of ScrollStateRequest(v23, (uint64_t)v35);
      else
        outlined init with copy of AnyTrackedValue((uint64_t)v23, (uint64_t)v35);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v22);
      Hasher._combine(_:)(v21);
      result = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v7 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v12 + 8 * v26);
        }
        while (v30 == -1);
        v13 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = (Swift::UInt *)(*(_QWORD *)(v7 + 48) + 16 * v13);
      *v14 = v22;
      v14[1] = v21;
      result = outlined init with take of ScrollStateRequest(v35, *(_QWORD *)(v7 + 56) + 40 * v13);
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_41:
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, AnyAccessibilityPropertiesEntry>, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry, (uint64_t)&protocol descriptor for AnyAccessibilityPropertiesEntry, (void (*)(uint64_t, _BYTE *))outlined init with take of ScrollStateRequest);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<AGAttribute, AGAttribute>();
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v35 = a2;
    v34 = v3;
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v32 = -1 << v10;
    v33 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13)
          goto LABEL_31;
        v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v13)
            goto LABEL_31;
          v20 = v9[v8];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                result = swift_release();
                v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64)
                bzero((void *)(v5 + 64), 8 * v13);
              else
                *v9 = v32;
              v3 = v34;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                v8 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_40;
                if (v8 >= v13)
                  goto LABEL_31;
                v20 = v9[v8];
                ++v21;
                if (v20)
                  goto LABEL_21;
              }
            }
            v8 = v21;
          }
        }
LABEL_21:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v22 = 4 * v18;
      v23 = *(_DWORD *)(*(_QWORD *)(v5 + 48) + v22);
      v24 = *(_DWORD *)(*(_QWORD *)(v5 + 56) + v22);
      result = MEMORY[0x23B7C7624](*(_QWORD *)(v7 + 40), v23, 4);
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = 4 * v15;
      *(_DWORD *)(*(_QWORD *)(v7 + 48) + v16) = v23;
      *(_DWORD *)(*(_QWORD *)(v7 + 56) + v16) = v24;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::UInt64 v23;
  int v24;
  Swift::UInt64 v25;
  int v26;
  __int128 *v27;
  char v28;
  Swift::UInt64 v29;
  Swift::UInt64 v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Text.Effect.AttributeTracker.Key, Text.Effect.AttributeTracker.AnyValue>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<_ProposedSize, ViewGraphGeometryObservers<SizeThatFitsMeasurer>.Observer>, type metadata accessor for ViewGraphGeometryObservers<SizeThatFitsMeasurer>.Observer, (void (*)(void))lazy protocol witness table accessor for type _ProposedSize and conformance _ProposedSize);
  v42 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v40 = (_QWORD *)(v5 + 64);
    v41 = v5;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v39 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
          return result;
        }
        result = (uint64_t)v40;
        if (v18 >= v39)
          goto LABEL_44;
        v19 = v40[v18];
        ++v8;
        if (!v19)
        {
          v8 = v18 + 1;
          if (v18 + 1 >= v39)
            goto LABEL_44;
          v19 = v40[v8];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v39)
            {
LABEL_44:
              if ((v42 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_51;
              }
              v38 = 1 << *(_BYTE *)(v5 + 32);
              if (v38 >= 64)
                bzero(v40, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v40 = -1 << v38;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v19 = v40[v20];
            if (!v19)
            {
              while (1)
              {
                v8 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_53;
                if (v8 >= v39)
                  goto LABEL_44;
                v19 = v40[v8];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v8 = v20;
          }
        }
LABEL_21:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      v21 = *(_QWORD *)(v5 + 56);
      v22 = *(_QWORD *)(v5 + 48) + 32 * v17;
      v23 = *(_QWORD *)v22;
      v24 = *(unsigned __int8 *)(v22 + 8);
      v25 = *(_QWORD *)(v22 + 16);
      v26 = *(unsigned __int8 *)(v22 + 24);
      v27 = (__int128 *)(v21 + 56 * v17);
      v43 = *v27;
      v44 = v27[1];
      v28 = *((_BYTE *)v27 + 32);
      v45 = *(__int128 *)((char *)v27 + 40);
      if ((v42 & 1) == 0)
        swift_retain();
      Hasher.init(_seed:)();
      if (v24)
      {
        Hasher._combine(_:)(0);
        if (v26)
          goto LABEL_34;
      }
      else
      {
        Hasher._combine(_:)(1u);
        if ((v23 & 0x7FFFFFFFFFFFFFFFLL) != 0)
          v30 = v23;
        else
          v30 = 0;
        Hasher._combine(_:)(v30);
        if (v26)
        {
LABEL_34:
          Hasher._combine(_:)(0);
          goto LABEL_35;
        }
      }
      Hasher._combine(_:)(1u);
      if ((v25 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v29 = v25;
      else
        v29 = 0;
      Hasher._combine(_:)(v29);
LABEL_35:
      result = Hasher._finalize()();
      v31 = -1 << *(_BYTE *)(v7 + 32);
      v32 = result & ~v31;
      v33 = v32 >> 6;
      if (((-1 << v32) & ~*(_QWORD *)(v12 + 8 * (v32 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v12 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v34 = 0;
        v35 = (unint64_t)(63 - v31) >> 6;
        do
        {
          if (++v33 == v35 && (v34 & 1) != 0)
          {
            __break(1u);
            goto LABEL_52;
          }
          v36 = v33 == v35;
          if (v33 == v35)
            v33 = 0;
          v34 |= v36;
          v37 = *(_QWORD *)(v12 + 8 * v33);
        }
        while (v37 == -1);
        v13 = __clz(__rbit64(~v37)) + (v33 << 6);
      }
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = *(_QWORD *)(v7 + 48) + 32 * v13;
      *(_QWORD *)v14 = v23;
      *(_BYTE *)(v14 + 8) = v24;
      *(_QWORD *)(v14 + 16) = v25;
      *(_BYTE *)(v14 + 24) = v26;
      v15 = *(_QWORD *)(v7 + 56) + 56 * v13;
      *(_OWORD *)v15 = v43;
      *(_OWORD *)(v15 + 16) = v44;
      *(_BYTE *)(v15 + 32) = v28;
      *(_OWORD *)(v15 + 40) = v45;
      ++*(_QWORD *)(v7 + 16);
      v5 = v41;
    }
  }
  result = swift_release();
LABEL_51:
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, ForwardedEventDispatcher>, &lazy cache variable for type metadata for ForwardedEventDispatcher, (uint64_t)&protocol descriptor for ForwardedEventDispatcher, (void (*)(uint64_t, _BYTE *))outlined init with take of ScrollStateRequest);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::UInt32 v31;
  Swift::UInt32 v32;
  Swift::UInt32 v33;
  Swift::UInt32 v34;
  Swift::UInt8 v35;
  __int128 *v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  int64_t v41;
  _QWORD *v42;
  uint64_t v43;
  char v44;
  int64_t v45;
  __int128 v46;
  char v47;
  char v48;
  int v49;
  __int16 v50;
  char v51;
  char v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<DisplayList.ViewUpdater.ViewCache.Key, DisplayList.ViewUpdater.ViewInfo>, (void (*)(void))lazy protocol witness table accessor for type DisplayList.ViewUpdater.ViewCache.Key and conformance DisplayList.ViewUpdater.ViewCache.Key);
  v44 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v42 = (_QWORD *)(v5 + 64);
    v43 = v5;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v41 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v19 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v45 = v8;
        v20 = v19 | (v8 << 6);
      }
      else
      {
        v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = (uint64_t)v42;
        if (v21 >= v41)
          goto LABEL_33;
        v22 = v42[v21];
        v23 = v8 + 1;
        if (!v22)
        {
          v23 = v21 + 1;
          if (v21 + 1 >= v41)
            goto LABEL_33;
          v22 = v42[v23];
          if (!v22)
          {
            v24 = v21 + 2;
            if (v24 >= v41)
            {
LABEL_33:
              if ((v44 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v40 = 1 << *(_BYTE *)(v5 + 32);
              if (v40 >= 64)
                bzero(v42, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v42 = -1 << v40;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v22 = v42[v24];
            if (!v22)
            {
              while (1)
              {
                v23 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_42;
                if (v23 >= v41)
                  goto LABEL_33;
                v22 = v42[v23];
                ++v24;
                if (v22)
                  goto LABEL_30;
              }
            }
            v23 = v24;
          }
        }
LABEL_30:
        v11 = (v22 - 1) & v22;
        v45 = v23;
        v20 = __clz(__rbit64(v22)) + (v23 << 6);
      }
      v29 = *(_QWORD *)(v5 + 56);
      v30 = *(_QWORD *)(v5 + 48) + 20 * v20;
      v32 = *(_DWORD *)v30;
      v31 = *(_DWORD *)(v30 + 4);
      v34 = *(_DWORD *)(v30 + 8);
      v33 = *(_DWORD *)(v30 + 12);
      v35 = *(_BYTE *)(v30 + 16);
      v36 = (__int128 *)(v29 + 120 * v20);
      v37 = *((_QWORD *)v36 + 2);
      v46 = *(__int128 *)((char *)v36 + 24);
      v55 = *(__int128 *)((char *)v36 + 40);
      v56 = *v36;
      v51 = *((_BYTE *)v36 + 57);
      v52 = *((_BYTE *)v36 + 56);
      v53 = v36[5];
      v54 = v36[4];
      v49 = *((_DWORD *)v36 + 25);
      v50 = *((_WORD *)v36 + 48);
      v47 = *((_BYTE *)v36 + 105);
      v48 = *((_BYTE *)v36 + 104);
      v38 = *((_QWORD *)v36 + 14);
      if ((v44 & 1) == 0)
      {
        swift_unknownObjectRetain();
        v39 = *((id *)&v56 + 1);
        swift_unknownObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v32);
      Hasher._combine(_:)(v31);
      Hasher._combine(_:)(v34);
      Hasher._combine(_:)(v33);
      Hasher._combine(_:)(v35);
      result = Hasher._finalize()();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v27 = v15 == v26;
          if (v15 == v26)
            v15 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v28 == -1);
        v16 = __clz(__rbit64(~v28)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      v17 = *(_QWORD *)(v7 + 48) + 20 * v16;
      *(_DWORD *)v17 = v32;
      *(_DWORD *)(v17 + 4) = v31;
      *(_DWORD *)(v17 + 8) = v34;
      *(_DWORD *)(v17 + 12) = v33;
      *(_BYTE *)(v17 + 16) = v35;
      v18 = *(_QWORD *)(v7 + 56) + 120 * v16;
      *(_OWORD *)v18 = v56;
      *(_QWORD *)(v18 + 16) = v37;
      *(_OWORD *)(v18 + 24) = v46;
      *(_OWORD *)(v18 + 40) = v55;
      *(_BYTE *)(v18 + 56) = v52;
      *(_BYTE *)(v18 + 57) = v51;
      *(_OWORD *)(v18 + 64) = v54;
      *(_OWORD *)(v18 + 80) = v53;
      *(_WORD *)(v18 + 96) = v50;
      *(_DWORD *)(v18 + 100) = v49;
      *(_BYTE *)(v18 + 104) = v48;
      *(_BYTE *)(v18 + 105) = v47;
      *(_QWORD *)(v18 + 112) = v38;
      ++*(_QWORD *)(v7 + 16);
      v5 = v43;
      v8 = v45;
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  Swift::UInt v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  _QWORD *v34;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<OpaquePointer, DisplayList.ViewUpdater.ViewCache.Key>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v34 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v8 << 6);
      }
      else
      {
        v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v17 >= v33)
          goto LABEL_31;
        v18 = v34[v17];
        ++v8;
        if (!v18)
        {
          v8 = v17 + 1;
          if (v17 + 1 >= v33)
            goto LABEL_31;
          v18 = v34[v8];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v33)
            {
LABEL_31:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_38;
              }
              v32 = 1 << *(_BYTE *)(v5 + 32);
              if (v32 >= 64)
                bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v34 = -1 << v32;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v18 = v34[v19];
            if (!v18)
            {
              while (1)
              {
                v8 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_40;
                if (v8 >= v33)
                  goto LABEL_31;
                v18 = v34[v8];
                ++v19;
                if (v18)
                  goto LABEL_21;
              }
            }
            v8 = v19;
          }
        }
LABEL_21:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      v20 = *(_QWORD *)(v5 + 56) + 20 * v16;
      v21 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v16);
      v22 = *(_BYTE *)(v20 + 16);
      v24 = *(_QWORD *)v20;
      v23 = *(_QWORD *)(v20 + 8);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v21);
      result = Hasher._finalize()();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v12 + 8 * v27);
        }
        while (v31 == -1);
        v13 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v13) = v21;
      v14 = *(_QWORD *)(v7 + 56) + 20 * v13;
      *(_QWORD *)v14 = v24;
      *(_QWORD *)(v14 + 8) = v23;
      *(_BYTE *)(v14 + 16) = v22;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, type metadata accessor for _DictionaryStorage<Text.Effect.Identifier, AnyTextAnimation>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, type metadata accessor for _DictionaryStorage<Text.Effect.Identifier, AnyTextEffect>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, type metadata accessor for _DictionaryStorage<Text.Effect.Identifier, AnyTextFilterEffect>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  Swift::UInt64 *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  Swift::UInt64 *v21;
  Swift::UInt v22;
  Swift::UInt64 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  _QWORD *v34;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.RelativeIdentifierKey, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.RelativeIdentifierKey and conformance Text.Effect.RelativeIdentifierKey);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v33 = a2;
    v8 = 0;
    v34 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v18 >= v12)
          goto LABEL_31;
        v19 = v34[v18];
        ++v8;
        if (!v19)
        {
          v8 = v18 + 1;
          if (v18 + 1 >= v12)
            goto LABEL_31;
          v19 = v34[v8];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v12)
            {
LABEL_31:
              if ((v33 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_38;
              }
              v32 = 1 << *(_BYTE *)(v5 + 32);
              if (v32 >= 64)
                bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v34 = -1 << v32;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                v8 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_40;
                if (v8 >= v12)
                  goto LABEL_31;
                v19 = v34[v8];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v8 = v20;
          }
        }
LABEL_21:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      v21 = (Swift::UInt64 *)(*(_QWORD *)(v5 + 48) + 16 * v17);
      v23 = *v21;
      v22 = v21[1];
      v24 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v17);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v23);
      Hasher._combine(_:)(v22);
      result = Hasher._finalize()();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v13 + 8 * (v26 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v13 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v13 + 8 * v27);
        }
        while (v31 == -1);
        v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (Swift::UInt64 *)(*(_QWORD *)(v7 + 48) + 16 * v14);
      *v15 = v23;
      v15[1] = v22;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v14) = v24;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  int64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  char v52;
  uint64_t v53;
  __int128 v54;
  char v55;
  Swift::UInt64 v56;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Identifier, TextEffectsAnimationController.Timing>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.Identifier and conformance Text.Effect.Identifier);
  v46 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v43 = (_QWORD *)(v5 + 64);
    v44 = v5;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v41 = v2;
    v42 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    v45 = result;
    while (1)
    {
      if (v11)
      {
        v47 = (v11 - 1) & v11;
        v48 = v8;
        v21 = __clz(__rbit64(v11)) | (v8 << 6);
      }
      else
      {
        v22 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = (uint64_t)v43;
        if (v22 >= v42)
          goto LABEL_33;
        v23 = v43[v22];
        v24 = v8 + 1;
        if (!v23)
        {
          v24 = v22 + 1;
          if (v22 + 1 >= v42)
            goto LABEL_33;
          v23 = v43[v24];
          if (!v23)
          {
            v25 = v22 + 2;
            if (v25 >= v42)
            {
LABEL_33:
              if ((v46 & 1) == 0)
              {
                result = swift_release();
                v3 = v41;
                goto LABEL_40;
              }
              v40 = 1 << *(_BYTE *)(v5 + 32);
              if (v40 >= 64)
                bzero(v43, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v43 = -1 << v40;
              v3 = v41;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v23 = v43[v25];
            if (!v23)
            {
              while (1)
              {
                v24 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_42;
                if (v24 >= v42)
                  goto LABEL_33;
                v23 = v43[v24];
                ++v25;
                if (v23)
                  goto LABEL_30;
              }
            }
            v24 = v25;
          }
        }
LABEL_30:
        v47 = (v23 - 1) & v23;
        v48 = v24;
        v21 = __clz(__rbit64(v23)) + (v24 << 6);
      }
      v56 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v21);
      v30 = *(_QWORD *)(v5 + 56) + 120 * v21;
      v54 = *(_OWORD *)v30;
      v53 = *(_QWORD *)(v30 + 16);
      v51 = *(_BYTE *)(v30 + 25);
      v52 = *(_BYTE *)(v30 + 24);
      v50 = *(_QWORD *)(v30 + 32);
      v49 = *(_BYTE *)(v30 + 40);
      v31 = *(_QWORD *)(v30 + 48);
      v32 = *(_QWORD *)(v30 + 56);
      v33 = *(_QWORD *)(v30 + 64);
      v34 = *(_QWORD *)(v30 + 72);
      v35 = *(_BYTE *)(v30 + 80);
      v37 = *(_QWORD *)(v30 + 88);
      v36 = *(_QWORD *)(v30 + 96);
      v38 = *(_QWORD *)(v30 + 104);
      v39 = *(_BYTE *)(v30 + 112);
      if ((v46 & 1) == 0)
      {
        swift_retain();
        outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v32, v33, v34, v35);
        outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v37, v36, v38, v39);
      }
      v55 = v39;
      v7 = v45;
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v56);
      v13 = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v45 + 32);
      v15 = v13 & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v12 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v12 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
        result = v36;
        v18 = v38;
        v19 = v55;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v14) >> 6;
        result = v36;
        v18 = v38;
        v19 = v55;
        do
        {
          if (++v16 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v28 = v16 == v27;
          if (v16 == v27)
            v16 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v12 + 8 * v16);
        }
        while (v29 == -1);
        v17 = __clz(__rbit64(~v29)) + (v16 << 6);
      }
      *(_QWORD *)(v12 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_QWORD *)(*(_QWORD *)(v45 + 48) + 8 * v17) = v56;
      v20 = *(_QWORD *)(v45 + 56) + 120 * v17;
      *(_OWORD *)v20 = v54;
      *(_QWORD *)(v20 + 16) = v53;
      *(_BYTE *)(v20 + 24) = v52;
      *(_BYTE *)(v20 + 25) = v51;
      *(_QWORD *)(v20 + 32) = v50;
      *(_BYTE *)(v20 + 40) = v49;
      *(_QWORD *)(v20 + 48) = v31;
      *(_QWORD *)(v20 + 56) = v32;
      *(_QWORD *)(v20 + 64) = v33;
      *(_QWORD *)(v20 + 72) = v34;
      *(_BYTE *)(v20 + 80) = v35;
      *(_QWORD *)(v20 + 88) = v37;
      *(_QWORD *)(v20 + 96) = result;
      *(_QWORD *)(v20 + 104) = v18;
      *(_BYTE *)(v20 + 112) = v19;
      ++*(_QWORD *)(v45 + 16);
      v5 = v44;
      v11 = v47;
      v8 = v48;
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, type metadata accessor for _DictionaryStorage<Text.Effect.Identifier, Text.Effect.AnyAnimationInfo>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (void (*)(_QWORD))type metadata accessor for _DictionaryStorage<Text.Effect.Identifier, [Text.Effect.KeyframeLayout.Fragment]>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Identifier, Int>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.Identifier and conformance Text.Effect.Identifier, (uint64_t)&type metadata for Text.Effect.Identifier, (void (*)(uint64_t))MEMORY[0x24BEE4318]);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  Swift::UInt64 *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  Swift::UInt64 *v32;
  Swift::UInt64 v33;
  Swift::UInt64 v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;
  char v43[72];

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Key, Text.Effect.KeyframeLayout>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.Key and conformance Text.Effect.Key);
  v42 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v41 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v39 = v2;
  v40 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      v13 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_33;
      v25 = *(_QWORD *)(v41 + 8 * v13);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          v3 = v39;
          if ((v42 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = *(_QWORD *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v13 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v13 >= v40)
              goto LABEL_33;
            v25 = *(_QWORD *)(v41 + 8 * v13);
            ++v26;
            if (v25)
              goto LABEL_30;
          }
        }
        v13 = v26;
      }
    }
LABEL_30:
    v10 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    v31 = 16 * v22;
    v32 = (Swift::UInt64 *)(*(_QWORD *)(v5 + 48) + v31);
    v34 = *v32;
    v33 = v32[1];
    v35 = *(_QWORD *)(v5 + 56) + v31;
    v36 = *(_QWORD *)v35;
    v37 = *(_BYTE *)(v35 + 8);
    if ((v42 & 1) == 0)
    {
      swift_retain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v34);
    (*(void (**)(char *))(*(_QWORD *)v33 + 88))(v43);
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v16 == v28;
        if (v16 == v28)
          v16 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = 16 * v17;
    v19 = (Swift::UInt64 *)(*(_QWORD *)(v7 + 48) + v18);
    *v19 = v34;
    v19[1] = v33;
    v20 = *(_QWORD *)(v7 + 56) + v18;
    *(_QWORD *)v20 = v36;
    *(_BYTE *)(v20 + 8) = v37;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v39;
  v24 = (_QWORD *)(v5 + 64);
  if ((v42 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt64 v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  int64_t v34;
  _QWORD *v35;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Identifier, FragmentIdentifierOffsetMap.Entry>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.Identifier and conformance Text.Effect.Identifier);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v33 = a2;
    v8 = 0;
    v35 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v34 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v8 << 6);
      }
      else
      {
        v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v17 >= v34)
          goto LABEL_31;
        v18 = v35[v17];
        ++v8;
        if (!v18)
        {
          v8 = v17 + 1;
          if (v17 + 1 >= v34)
            goto LABEL_31;
          v18 = v35[v8];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v34)
            {
LABEL_31:
              if ((v33 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_38;
              }
              v32 = 1 << *(_BYTE *)(v5 + 32);
              if (v32 >= 64)
                bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v35 = -1 << v32;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v18 = v35[v19];
            if (!v18)
            {
              while (1)
              {
                v8 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_40;
                if (v8 >= v34)
                  goto LABEL_31;
                v18 = v35[v8];
                ++v19;
                if (v18)
                  goto LABEL_21;
              }
            }
            v8 = v19;
          }
        }
LABEL_21:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v16);
      v21 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 24 * v16);
      v22 = v21[1];
      v23 = v21[2];
      v24 = *v21;
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v20);
      result = Hasher._finalize()();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v12 + 8 * v27);
        }
        while (v31 == -1);
        v13 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v13) = v20;
      v14 = (_QWORD *)(*(_QWORD *)(v7 + 56) + 24 * v13);
      *v14 = v24;
      v14[1] = v22;
      v14[2] = v23;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, type metadata accessor for _DictionaryStorage<Text.Effect.Identifier, Text.Effect.AnyLayoutState>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (void (*)(_QWORD))type metadata accessor for _DictionaryStorage<Text.Effect.Identifier, Set<Int>>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, type metadata accessor for _DictionaryStorage<Text.Effect.Identifier, Text.Effect.AnyStateSnapshot>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, type metadata accessor for _DictionaryStorage<Text.Effect.Identifier, TextAnimator>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  Swift::UInt64 v27;
  uint64_t v28;
  _QWORD *v29;
  __int128 v30;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Identifier, Text.Effect.BasePhaseConfiguration>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.Identifier and conformance Text.Effect.Identifier);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v29 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v12)
          goto LABEL_33;
        v21 = v29[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v12)
            goto LABEL_33;
          v21 = v29[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v12)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v28 = 1 << *(_BYTE *)(v5 + 32);
              if (v28 >= 64)
                bzero(v29, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v29 = -1 << v28;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v29[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_42;
                if (v8 >= v12)
                  goto LABEL_33;
                v21 = v29[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v19);
      v30 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v19);
      if ((a2 & 1) == 0)
      {
        swift_retain();
        swift_retain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v25 = v16 == v24;
          if (v16 == v24)
            v16 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v26 == -1);
        v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v17) = v27;
      *(_OWORD *)(*(_QWORD *)(v7 + 56) + 16 * v17) = v30;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.ClusterIndex, Int>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.ClusterIndex and conformance Text.Effect.ClusterIndex, (uint64_t)&type metadata for Text.Effect.ClusterIndex, (void (*)(uint64_t))MEMORY[0x24BEE42F8]);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _OWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt8 v20;
  __int128 *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  int64_t v31;
  _QWORD *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<_ForegroundLayerLevel, _ColorMatrix>, (void (*)(void))lazy protocol witness table accessor for type _ForegroundLayerLevel and conformance _ForegroundLayerLevel);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v30 = a2;
    v8 = 0;
    v32 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v31 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v8 << 6);
      }
      else
      {
        v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v17 >= v31)
          goto LABEL_31;
        v18 = v32[v17];
        ++v8;
        if (!v18)
        {
          v8 = v17 + 1;
          if (v17 + 1 >= v31)
            goto LABEL_31;
          v18 = v32[v8];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v31)
            {
LABEL_31:
              if ((v30 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_38;
              }
              v29 = 1 << *(_BYTE *)(v5 + 32);
              if (v29 >= 64)
                bzero(v32, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v32 = -1 << v29;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v18 = v32[v19];
            if (!v18)
            {
              while (1)
              {
                v8 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_40;
                if (v8 >= v31)
                  goto LABEL_31;
                v18 = v32[v8];
                ++v19;
                if (v18)
                  goto LABEL_21;
              }
            }
            v8 = v19;
          }
        }
LABEL_21:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      v20 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v16);
      v21 = (__int128 *)(*(_QWORD *)(v5 + 56) + 80 * v16);
      v35 = v21[2];
      v36 = v21[3];
      v37 = v21[4];
      v33 = *v21;
      v34 = v21[1];
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v20);
      result = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v7 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v12 + 8 * v24);
        }
        while (v28 == -1);
        v13 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v13) = v20;
      v14 = (_OWORD *)(*(_QWORD *)(v7 + 56) + 80 * v13);
      v14[2] = v35;
      v14[3] = v36;
      v14[4] = v37;
      *v14 = v33;
      v14[1] = v34;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  Swift::UInt *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  Swift::UInt *v26;
  Swift::UInt v27;
  Swift::UInt v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  _QWORD *v32;
  char v33;

  v4 = *v2;
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<EventID, EventBinding>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
  v33 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v6 = result;
  if (*(_QWORD *)(v4 + 16))
  {
    v7 = 0;
    v32 = (_QWORD *)(v4 + 64);
    v8 = 1 << *(_BYTE *)(v4 + 32);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v4 + 64);
    v31 = (unint64_t)(v8 + 63) >> 6;
    v11 = result + 64;
    while (1)
    {
      if (v10)
      {
        v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v18 = v17 | (v7 << 6);
      }
      else
      {
        v19 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        result = v4 + 64;
        if (v19 >= v31)
          goto LABEL_33;
        v20 = v32[v19];
        ++v7;
        if (!v20)
        {
          v7 = v19 + 1;
          if (v19 + 1 >= v31)
            goto LABEL_33;
          v20 = v32[v7];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v31)
            {
LABEL_33:
              if ((v33 & 1) != 0)
              {
                v30 = 1 << *(_BYTE *)(v4 + 32);
                if (v30 >= 64)
                  bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v32 = -1 << v30;
                *(_QWORD *)(v4 + 16) = 0;
              }
              break;
            }
            v20 = v32[v21];
            if (!v20)
            {
              while (1)
              {
                v7 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_41;
                if (v7 >= v31)
                  goto LABEL_33;
                v20 = v32[v7];
                ++v21;
                if (v20)
                  goto LABEL_30;
              }
            }
            v7 = v21;
          }
        }
LABEL_30:
        v10 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v7 << 6);
      }
      v26 = (Swift::UInt *)(*(_QWORD *)(v4 + 48) + 16 * v18);
      v28 = *v26;
      v27 = v26[1];
      v29 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v18);
      if ((v33 & 1) == 0)
        swift_retain();
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v28);
      Hasher._combine(_:)(v27);
      result = Hasher._finalize()();
      v12 = -1 << *(_BYTE *)(v6 + 32);
      v13 = result & ~v12;
      v14 = v13 >> 6;
      if (((-1 << v13) & ~*(_QWORD *)(v11 + 8 * (v13 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v13) & ~*(_QWORD *)(v11 + 8 * (v13 >> 6)))) | v13 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v12) >> 6;
        do
        {
          if (++v14 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v24 = v14 == v23;
          if (v14 == v23)
            v14 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v11 + 8 * v14);
        }
        while (v25 == -1);
        v15 = __clz(__rbit64(~v25)) + (v14 << 6);
      }
      *(_QWORD *)(v11 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = (Swift::UInt *)(*(_QWORD *)(v6 + 48) + 16 * v15);
      *v16 = v28;
      v16[1] = v27;
      *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15) = v29;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release();
  *v2 = v6;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<AnyHashable, GraphicsContext.ResolvedSymbol>);
  v42 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v41 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v39 = v2;
  v40 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_22;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v40)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v41 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v40)
        goto LABEL_34;
      v23 = *(_QWORD *)(v41 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v40)
        {
LABEL_34:
          swift_release();
          v3 = v39;
          if ((v42 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v23 = *(_QWORD *)(v41 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_43;
            if (v13 >= v40)
              goto LABEL_34;
            v23 = *(_QWORD *)(v41 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_21;
          }
        }
        v13 = v24;
      }
    }
LABEL_21:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_22:
    v25 = *(_QWORD *)(v5 + 48) + 40 * v20;
    if ((v42 & 1) != 0)
    {
      v26 = *(_OWORD *)v25;
      v27 = *(_OWORD *)(v25 + 16);
      v46 = *(_QWORD *)(v25 + 32);
      v44 = v26;
      v45 = v27;
      v28 = *(_QWORD *)(v5 + 56) + 24 * v20;
      v29 = *(_QWORD *)v28;
      v43 = *(_OWORD *)(v28 + 8);
    }
    else
    {
      outlined init with copy of AnyHashable(v25, (uint64_t)&v44);
      v30 = *(_QWORD *)(v5 + 56) + 24 * v20;
      v29 = *(_QWORD *)v30;
      v43 = *(_OWORD *)(v30 + 8);
      swift_unknownObjectRetain();
    }
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v7 + 40));
    v31 = -1 << *(_BYTE *)(v7 + 32);
    v32 = result & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v11 + 8 * (v32 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v11 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v36 = v33 == v35;
        if (v33 == v35)
          v33 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v11 + 8 * v33);
      }
      while (v37 == -1);
      v14 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = *(_QWORD *)(v7 + 48) + 40 * v14;
    v16 = v44;
    v17 = v45;
    *(_QWORD *)(v15 + 32) = v46;
    *(_OWORD *)v15 = v16;
    *(_OWORD *)(v15 + 16) = v17;
    v18 = *(_QWORD *)(v7 + 56) + 24 * v14;
    *(_QWORD *)v18 = v29;
    *(_OWORD *)(v18 + 8) = v43;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v39;
  v22 = (_QWORD *)(v5 + 64);
  if ((v42 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v22, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  char v33;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<UInt32, Int>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v33 = a2;
    v32 = v3;
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v30 = -1 << v10;
    v31 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v18 >= v13)
          goto LABEL_31;
        v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          v8 = v18 + 1;
          if (v18 + 1 >= v13)
            goto LABEL_31;
          v19 = v9[v8];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_31:
              if ((v33 & 1) == 0)
              {
                result = swift_release();
                v3 = v32;
                goto LABEL_38;
              }
              if (v31 >= 64)
                bzero((void *)(v5 + 64), 8 * v13);
              else
                *v9 = v30;
              v3 = v32;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                v8 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_40;
                if (v8 >= v13)
                  goto LABEL_31;
                v19 = v9[v8];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v8 = v20;
          }
        }
LABEL_21:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      v21 = *(_DWORD *)(*(_QWORD *)(v5 + 48) + 4 * v17);
      v22 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v17);
      result = MEMORY[0x23B7C7624](*(_QWORD *)(v7 + 40), v21, 4);
      v23 = -1 << *(_BYTE *)(v7 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_DWORD *)(*(_QWORD *)(v7 + 48) + 4 * v15) = v21;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v15) = v22;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  __int128 v31;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<AGSubgraphRef, [(_:)]>(0, &lazy cache variable for type metadata for _DictionaryStorage<_NSRange, [NSAttributedStringKey : Any]>, type metadata accessor for _NSRange, (void (*)(uint64_t))type metadata accessor for [NSAttributedStringKey : Any], (void (*)(void))lazy protocol witness table accessor for type _NSRange and conformance _NSRange);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v30 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        v19 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v20 = v19 | (v8 << 6);
      }
      else
      {
        v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v21 >= v12)
          goto LABEL_33;
        v22 = v30[v21];
        ++v8;
        if (!v22)
        {
          v8 = v21 + 1;
          if (v21 + 1 >= v12)
            goto LABEL_33;
          v22 = v30[v8];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v12)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v29 = 1 << *(_BYTE *)(v5 + 32);
              if (v29 >= 64)
                bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v30 = -1 << v29;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v22 = v30[v23];
            if (!v22)
            {
              while (1)
              {
                v8 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_42;
                if (v8 >= v12)
                  goto LABEL_33;
                v22 = v30[v8];
                ++v23;
                if (v22)
                  goto LABEL_30;
              }
            }
            v8 = v23;
          }
        }
LABEL_30:
        v11 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      v31 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v20);
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain();
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v31);
      Hasher._combine(_:)(*((Swift::UInt *)&v31 + 1));
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
        v18 = v31;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        v18 = v31;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_OWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17) = v18;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v28;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37[8];
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<AnyHashable, WeakBox<AnyLocationBase>>();
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v11)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v36 + 8 * v21);
    ++v14;
    if (!v23)
    {
      v14 = v21 + 1;
      if (v21 + 1 >= v11)
        goto LABEL_34;
      v23 = *(_QWORD *)(v36 + 8 * v14);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v23 = *(_QWORD *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v14 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_43;
            if (v14 >= v11)
              goto LABEL_34;
            v23 = *(_QWORD *)(v36 + 8 * v14);
            ++v24;
            if (v23)
              goto LABEL_21;
          }
        }
        v14 = v24;
      }
    }
LABEL_21:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    v25 = *(_QWORD *)(v5 + 48) + 40 * v20;
    if ((a2 & 1) != 0)
    {
      v26 = *(_OWORD *)v25;
      v27 = *(_OWORD *)(v25 + 16);
      v40 = *(_QWORD *)(v25 + 32);
      v38 = v26;
      v39 = v27;
      outlined init with take of (key: NSAttributedStringKey, value: Any)?(*(_QWORD *)(v5 + 56) + 8 * v20, (uint64_t)v37, &lazy cache variable for type metadata for WeakBox<AnyLocationBase>, (uint64_t (*)(uint64_t))type metadata accessor for AnyLocationBase, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for WeakBox);
    }
    else
    {
      outlined init with copy of AnyHashable(v25, (uint64_t)&v38);
      outlined init with copy of WeakBox<AnyLocationBase>(*(_QWORD *)(v5 + 56) + 8 * v20, (uint64_t)v37);
    }
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v7 + 40));
    v28 = -1 << *(_BYTE *)(v7 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v12 + 8 * (v29 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v12 + 8 * v30);
      }
      while (v34 == -1);
      v15 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = *(_QWORD *)(v7 + 48) + 40 * v15;
    v17 = v38;
    v18 = v39;
    *(_QWORD *)(v16 + 32) = v40;
    *(_OWORD *)v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    result = outlined init with take of (key: NSAttributedStringKey, value: Any)?((uint64_t)v37, *(_QWORD *)(v7 + 56) + 8 * v15, &lazy cache variable for type metadata for WeakBox<AnyLocationBase>, (uint64_t (*)(uint64_t))type metadata accessor for AnyLocationBase, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for WeakBox);
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  int64_t v32;
  _QWORD *v33;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<AGSubgraphRef.Map.Key, [ScrapeableContent.Node]>();
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v33 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v32 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v32)
          goto LABEL_33;
        v21 = v33[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v32)
            goto LABEL_33;
          v21 = v33[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v32)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v31 = 1 << *(_BYTE *)(v5 + 32);
              if (v31 >= 64)
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v33 = -1 << v31;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v33[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_42;
                if (v8 >= v32)
                  goto LABEL_33;
                v21 = v33[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = 8 * v19;
      v28 = *(void **)(*(_QWORD *)(v5 + 48) + v27);
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v27);
      if ((a2 & 1) == 0)
      {
        v30 = v28;
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)((Swift::UInt)v28);
      result = Hasher._finalize()();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v25 = v15 == v24;
          if (v15 == v24)
            v15 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      v17 = 8 * v16;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v17) = v28;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v17) = v29;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  Swift::UInt v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  char v34;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<ScrollAnchorStorage.Role, UnitPoint>, (void (*)(void))lazy protocol witness table accessor for type ScrollAnchorStorage.Role and conformance ScrollAnchorStorage.Role);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = a2;
    v8 = 0;
    v9 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13)
          goto LABEL_31;
        v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v13)
            goto LABEL_31;
          v20 = v9[v8];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v34 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_38;
              }
              v33 = 1 << *(_BYTE *)(v5 + 32);
              if (v33 >= 64)
                bzero((void *)(v5 + 64), ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v9 = -1 << v33;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                v8 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_40;
                if (v8 >= v13)
                  goto LABEL_31;
                v20 = v9[v8];
                ++v21;
                if (v20)
                  goto LABEL_21;
              }
            }
            v8 = v21;
          }
        }
LABEL_21:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v22 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v18);
      v23 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v18);
      v25 = *v23;
      v24 = v23[1];
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v22);
      result = Hasher._finalize()();
      v26 = -1 << *(_BYTE *)(v7 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v14 + 8 * (v27 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v14 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v14 + 8 * v28);
        }
        while (v32 == -1);
        v15 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v15) = v22;
      v16 = (_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v15);
      *v16 = v25;
      v16[1] = v24;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::UInt32 v26;
  Swift::UInt32 v27;
  Swift::UInt32 v28;
  Swift::UInt32 v29;
  Swift::UInt8 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  _QWORD *v44;
  uint64_t v45;
  char v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<DisplayList.ViewUpdater.ViewCache.Key, DisplayList.ViewUpdater.ViewCache.AnimatorInfo>, (void (*)(void))lazy protocol witness table accessor for type DisplayList.ViewUpdater.ViewCache.Key and conformance DisplayList.ViewUpdater.ViewCache.Key);
  v46 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v44 = (_QWORD *)(v5 + 64);
    v45 = v5;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v43 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v19 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v20 = v19 | (v8 << 6);
      }
      else
      {
        v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        result = (uint64_t)v44;
        if (v21 >= v43)
          goto LABEL_34;
        v22 = v44[v21];
        ++v8;
        if (!v22)
        {
          v8 = v21 + 1;
          if (v21 + 1 >= v43)
            goto LABEL_34;
          v22 = v44[v8];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v43)
            {
LABEL_34:
              if ((v46 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_41;
              }
              v42 = 1 << *(_BYTE *)(v5 + 32);
              if (v42 >= 64)
                bzero(v44, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v44 = -1 << v42;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v22 = v44[v23];
            if (!v22)
            {
              while (1)
              {
                v8 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_43;
                if (v8 >= v43)
                  goto LABEL_34;
                v22 = v44[v8];
                ++v23;
                if (v22)
                  goto LABEL_21;
              }
            }
            v8 = v23;
          }
        }
LABEL_21:
        v11 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      v24 = *(_QWORD *)(v5 + 56);
      v25 = *(_QWORD *)(v5 + 48) + 20 * v20;
      v26 = *(_DWORD *)v25;
      v27 = *(_DWORD *)(v25 + 4);
      v29 = *(_DWORD *)(v25 + 8);
      v28 = *(_DWORD *)(v25 + 12);
      v30 = *(_BYTE *)(v25 + 16);
      v31 = v24 + 56 * v20;
      if ((v46 & 1) != 0)
      {
        v32 = *(_OWORD *)v31;
        v33 = *(_OWORD *)(v31 + 16);
        v34 = *(_OWORD *)(v31 + 32);
        v50 = *(_QWORD *)(v31 + 48);
        v48 = v33;
        v49 = v34;
        v47 = v32;
      }
      else
      {
        outlined init with copy of DisplayList.ViewUpdater.ViewCache.AnimatorInfo(v31, (uint64_t)&v47);
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v26);
      Hasher._combine(_:)(v27);
      Hasher._combine(_:)(v29);
      Hasher._combine(_:)(v28);
      Hasher._combine(_:)(v30);
      result = Hasher._finalize()();
      v35 = -1 << *(_BYTE *)(v7 + 32);
      v36 = result & ~v35;
      v37 = v36 >> 6;
      if (((-1 << v36) & ~*(_QWORD *)(v12 + 8 * (v36 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v36) & ~*(_QWORD *)(v12 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v38 = 0;
        v39 = (unint64_t)(63 - v35) >> 6;
        do
        {
          if (++v37 == v39 && (v38 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v40 = v37 == v39;
          if (v37 == v39)
            v37 = 0;
          v38 |= v40;
          v41 = *(_QWORD *)(v12 + 8 * v37);
        }
        while (v41 == -1);
        v13 = __clz(__rbit64(~v41)) + (v37 << 6);
      }
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = *(_QWORD *)(v7 + 48) + 20 * v13;
      *(_DWORD *)v14 = v26;
      *(_DWORD *)(v14 + 4) = v27;
      *(_DWORD *)(v14 + 8) = v29;
      *(_DWORD *)(v14 + 12) = v28;
      *(_BYTE *)(v14 + 16) = v30;
      v15 = *(_QWORD *)(v7 + 56) + 56 * v13;
      v16 = v47;
      v17 = v48;
      v18 = v49;
      *(_QWORD *)(v15 + 48) = v50;
      *(_OWORD *)(v15 + 16) = v17;
      *(_OWORD *)(v15 + 32) = v18;
      *(_OWORD *)v15 = v16;
      ++*(_QWORD *)(v7 + 16);
      v5 = v45;
    }
  }
  result = swift_release();
LABEL_41:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<String, CAPresentationModifier>();
  v38 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v35 = v2;
  v36 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v36)
        goto LABEL_33;
      v23 = *(_QWORD *)(v37 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v36)
              goto LABEL_33;
            v23 = *(_QWORD *)(v37 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v33 = v32;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v22 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  __int128 v32;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, DisplayList.ViewUpdater.ViewCache.AsyncValues>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v29 = -1 << v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v30 = 1 << *(_BYTE *)(v5 + 32);
    v31 = v3;
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v8 << 6);
      }
      else
      {
        v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v21 >= v13)
          goto LABEL_33;
        v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          v8 = v21 + 1;
          if (v21 + 1 >= v13)
            goto LABEL_33;
          v22 = v9[v8];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v13)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v31;
                goto LABEL_40;
              }
              if (v30 >= 64)
                bzero((void *)(v5 + 64), 8 * v13);
              else
                *v9 = v29;
              v3 = v31;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                v8 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_42;
                if (v8 >= v13)
                  goto LABEL_33;
                v22 = v9[v8];
                ++v23;
                if (v22)
                  goto LABEL_30;
              }
            }
            v8 = v23;
          }
        }
LABEL_30:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v20);
      v32 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v20);
      if ((a2 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      result = static Hasher._hash(seed:_:)();
      v15 = -1 << *(_BYTE *)(v7 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v17 == v25;
          if (v17 == v25)
            v17 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v14 + 8 * v17);
        }
        while (v27 == -1);
        v18 = __clz(__rbit64(~v27)) + (v17 << 6);
      }
      *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v18) = v28;
      *(_OWORD *)(*(_QWORD *)(v7 + 56) + 16 * v18) = v32;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  _QWORD *v36;
  char v37;
  __int128 v38;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Int, LocalizedStringKey.FormatArgument>(0, &lazy cache variable for type metadata for _DictionaryStorage<String, Decodable & AnyViewFactory.Type>, (void (*)(uint64_t))type metadata accessor for Decodable & AnyViewFactory.Type);
  v37 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v21 = v20 | (v13 << 6);
      }
      else
      {
        v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v35)
          goto LABEL_33;
        v23 = v36[v22];
        ++v13;
        if (!v23)
        {
          v13 = v22 + 1;
          if (v22 + 1 >= v35)
            goto LABEL_33;
          v23 = v36[v13];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v35)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v37 & 1) != 0)
              {
                v34 = 1 << *(_BYTE *)(v5 + 32);
                if (v34 >= 64)
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v34;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v36[v24];
            if (!v23)
            {
              while (1)
              {
                v13 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_40;
                if (v13 >= v35)
                  goto LABEL_33;
                v23 = v36[v13];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v13 = v24;
          }
        }
LABEL_30:
        v10 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
      v31 = *v29;
      v30 = v29[1];
      v32 = *(_QWORD *)(v5 + 56) + 24 * v21;
      v38 = *(_OWORD *)v32;
      v33 = *(_QWORD *)(v32 + 16);
      if ((v37 & 1) == 0)
        swift_bridgeObjectRetain();
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v16 == v26;
          if (v16 == v26)
            v16 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
      *v18 = v31;
      v18[1] = v30;
      v19 = *(_QWORD *)(v7 + 56) + 24 * v17;
      *(_OWORD *)v19 = v38;
      *(_QWORD *)(v19 + 16) = v33;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, UInt>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v35 = a2;
    v34 = v3;
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v32 = -1 << v10;
    v33 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13)
          goto LABEL_31;
        v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v13)
            goto LABEL_31;
          v20 = v9[v8];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                result = swift_release();
                v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64)
                bzero((void *)(v5 + 64), 8 * v13);
              else
                *v9 = v32;
              v3 = v34;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                v8 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_40;
                if (v8 >= v13)
                  goto LABEL_31;
                v20 = v9[v8];
                ++v21;
                if (v20)
                  goto LABEL_21;
              }
            }
            v8 = v21;
          }
        }
LABEL_21:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v22 = 8 * v18;
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v22);
      v24 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v22);
      result = static Hasher._hash(seed:_:)();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = 8 * v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v16) = v23;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v16) = v24;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  Swift::UInt v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  _QWORD *v33;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<CAHostingLayerEvent.MouseButton, Int>, (void (*)(void))lazy protocol witness table accessor for type CAHostingLayerEvent.MouseButton and conformance CAHostingLayerEvent.MouseButton);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v32 = a2;
    v8 = 0;
    v33 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v18 >= v12)
          goto LABEL_31;
        v19 = v33[v18];
        ++v8;
        if (!v19)
        {
          v8 = v18 + 1;
          if (v18 + 1 >= v12)
            goto LABEL_31;
          v19 = v33[v8];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v12)
            {
LABEL_31:
              if ((v32 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_38;
              }
              v31 = 1 << *(_BYTE *)(v5 + 32);
              if (v31 >= 64)
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v33 = -1 << v31;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v19 = v33[v20];
            if (!v19)
            {
              while (1)
              {
                v8 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_40;
                if (v8 >= v12)
                  goto LABEL_31;
                v19 = v33[v8];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v8 = v20;
          }
        }
LABEL_21:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      v21 = 8 * v17;
      v22 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v21);
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v21);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v22);
      result = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v7 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v13 + 8 * (v25 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v13 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v13 + 8 * v26);
        }
        while (v30 == -1);
        v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = 8 * v14;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v15) = v22;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v15) = v23;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  Swift::UInt *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::UInt *v24;
  Swift::UInt v25;
  Swift::UInt v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  int64_t v38;
  _QWORD *v39;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<EventID, EventBindingBridge.TrackedEventState>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v37 = a2;
    v8 = 0;
    v39 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v38 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v19 >= v38)
          goto LABEL_31;
        v20 = v39[v19];
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v38)
            goto LABEL_31;
          v20 = v39[v8];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v38)
            {
LABEL_31:
              if ((v37 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_38;
              }
              v36 = 1 << *(_BYTE *)(v5 + 32);
              if (v36 >= 64)
                bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v39 = -1 << v36;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v39[v21];
            if (!v20)
            {
              while (1)
              {
                v8 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_40;
                if (v8 >= v38)
                  goto LABEL_31;
                v20 = v39[v8];
                ++v21;
                if (v20)
                  goto LABEL_21;
              }
            }
            v8 = v21;
          }
        }
LABEL_21:
        v11 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v22 = 16 * v18;
      v23 = *(_QWORD *)(v5 + 56) + v22;
      v24 = (Swift::UInt *)(*(_QWORD *)(v5 + 48) + v22);
      v26 = *v24;
      v25 = v24[1];
      v27 = *(_BYTE *)(v23 + 8);
      v28 = *(_QWORD *)v23;
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v26);
      Hasher._combine(_:)(v25);
      result = Hasher._finalize()();
      v29 = -1 << *(_BYTE *)(v7 + 32);
      v30 = result & ~v29;
      v31 = v30 >> 6;
      if (((-1 << v30) & ~*(_QWORD *)(v12 + 8 * (v30 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v12 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v32 = 0;
        v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v34 = v31 == v33;
          if (v31 == v33)
            v31 = 0;
          v32 |= v34;
          v35 = *(_QWORD *)(v12 + 8 * v31);
        }
        while (v35 == -1);
        v13 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = 16 * v13;
      v15 = (Swift::UInt *)(*(_QWORD *)(v7 + 48) + v14);
      *v15 = v26;
      v15[1] = v25;
      v16 = *(_QWORD *)(v7 + 56) + v14;
      *(_QWORD *)v16 = v28;
      *(_BYTE *)(v16 + 8) = v27;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt32 v20;
  _OWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _OWORD v31[2];

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<_ViewDebug.Property, Any>, (void (*)(void))lazy protocol witness table accessor for type _ViewDebug.Property and conformance _ViewDebug.Property);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v30 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v8 << 6);
      }
      else
      {
        v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v17 >= v12)
          goto LABEL_34;
        v18 = v30[v17];
        ++v8;
        if (!v18)
        {
          v8 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_34;
          v18 = v30[v8];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_41;
              }
              v29 = 1 << *(_BYTE *)(v5 + 32);
              if (v29 >= 64)
                bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v30 = -1 << v29;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v18 = v30[v19];
            if (!v18)
            {
              while (1)
              {
                v8 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_43;
                if (v8 >= v12)
                  goto LABEL_34;
                v18 = v30[v8];
                ++v19;
                if (v18)
                  goto LABEL_21;
              }
            }
            v8 = v19;
          }
        }
LABEL_21:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      v20 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v16);
      v21 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v16);
      if ((a2 & 1) != 0)
        outlined init with take of Any(v21, v31);
      else
        outlined init with copy of Any((uint64_t)v21, (uint64_t)v31);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v20);
      result = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v7 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v14) = v20;
      result = (uint64_t)outlined init with take of Any(v31, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v14));
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_41:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  __int128 v13;
  int64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  _QWORD *v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  void (*v33)(char *);
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  _QWORD *v44;
  char v45;
  int v46;
  void *v47;
  __int128 v48;
  char v49[80];

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<_ViewList_ID.Canonical, CanvasSymbols.Child>, (void (*)(void))lazy protocol witness table accessor for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical);
  v45 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v44 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v42 = v2;
  v43 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v18 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v19 = v18 | (v14 << 6);
      goto LABEL_22;
    }
    v20 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v20 >= v43)
      break;
    v21 = v44;
    v22 = v44[v20];
    ++v14;
    if (!v22)
    {
      v14 = v20 + 1;
      if (v20 + 1 >= v43)
        goto LABEL_36;
      v22 = v44[v14];
      if (!v22)
      {
        v23 = v20 + 2;
        if (v23 >= v43)
        {
LABEL_36:
          swift_release();
          v3 = v42;
          if ((v45 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v22 = v44[v23];
        if (!v22)
        {
          while (1)
          {
            v14 = v23 + 1;
            if (__OFADD__(v23, 1))
              goto LABEL_45;
            if (v14 >= v43)
              goto LABEL_36;
            v22 = v44[v14];
            ++v23;
            if (v22)
              goto LABEL_21;
          }
        }
        v14 = v23;
      }
    }
LABEL_21:
    v10 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v14 << 6);
LABEL_22:
    v24 = (_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v19);
    *(_QWORD *)&v13 = *v24;
    v48 = v13;
    v25 = v24[1];
    v26 = *(_QWORD *)(v5 + 56) + 48 * v19;
    v27 = *(_QWORD *)(v26 + 8);
    v47 = *(void **)v26;
    v46 = *(_DWORD *)(v26 + 16);
    v28 = *(_QWORD *)(v26 + 24);
    v29 = *(_QWORD *)(v26 + 32);
    v30 = *(_QWORD *)(v26 + 40);
    if ((v45 & 1) == 0)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      v31 = v47;
    }
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v48);
    Hasher._combine(_:)(DWORD1(v48));
    if (v25)
    {
      Hasher._combine(_:)(1u);
      v32 = v5;
      v33 = *(void (**)(char *))(*(_QWORD *)v25 + 112);
      swift_retain();
      v33(v49);
      v5 = v32;
      swift_release();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    result = Hasher._finalize()();
    v34 = -1 << *(_BYTE *)(v7 + 32);
    v35 = result & ~v34;
    v36 = v35 >> 6;
    if (((-1 << v35) & ~*(_QWORD *)(v11 + 8 * (v35 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v11 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
      v13 = v48;
    }
    else
    {
      v37 = 0;
      v38 = (unint64_t)(63 - v34) >> 6;
      v13 = v48;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v39 = v36 == v38;
        if (v36 == v38)
          v36 = 0;
        v37 |= v39;
        v40 = *(_QWORD *)(v11 + 8 * v36);
      }
      while (v40 == -1);
      v15 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(_QWORD *)(v11 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v15);
    *v16 = v13;
    v16[1] = v25;
    v17 = *(_QWORD *)(v7 + 56) + 48 * v15;
    *(_QWORD *)v17 = v47;
    *(_QWORD *)(v17 + 8) = v27;
    *(_DWORD *)(v17 + 16) = v46;
    *(_QWORD *)(v17 + 24) = v28;
    *(_QWORD *)(v17 + 32) = v29;
    *(_QWORD *)(v17 + 40) = v30;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v42;
  v21 = v44;
  if ((v45 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v41 = 1 << *(_BYTE *)(v5 + 32);
  if (v41 >= 64)
    bzero(v21, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v21 = -1 << v41;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  Swift::UInt v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  _QWORD *v32;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.FragmentIdentifier, Text.Effect.Drawable>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v32 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v31 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v31)
          goto LABEL_33;
        v21 = v32[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v31)
            goto LABEL_33;
          v21 = v32[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v31)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v30 = 1 << *(_BYTE *)(v5 + 32);
              if (v30 >= 64)
                bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v32 = -1 << v30;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v32[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_42;
                if (v8 >= v31)
                  goto LABEL_33;
                v21 = v32[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = 8 * v19;
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v27);
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v27);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain();
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v28);
      result = Hasher._finalize()();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v25 = v15 == v24;
          if (v15 == v24)
            v15 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      v17 = 8 * v16;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v17) = v28;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v17) = v29;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::UInt64 v22;
  int v23;
  Swift::UInt64 v24;
  int v25;
  uint64_t v26;
  Swift::UInt64 v27;
  Swift::UInt64 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char v40;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<_ProposedSize, Transaction>, (void (*)(void))lazy protocol witness table accessor for type _ProposedSize and conformance _ProposedSize);
  v40 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v38 = (_QWORD *)(v5 + 64);
    v39 = v5;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v8 << 6);
      }
      else
      {
        v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
          return result;
        }
        result = (uint64_t)v38;
        if (v17 >= v37)
          goto LABEL_44;
        v18 = v38[v17];
        ++v8;
        if (!v18)
        {
          v8 = v17 + 1;
          if (v17 + 1 >= v37)
            goto LABEL_44;
          v18 = v38[v8];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v37)
            {
LABEL_44:
              if ((v40 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_51;
              }
              v36 = 1 << *(_BYTE *)(v5 + 32);
              if (v36 >= 64)
                bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v38 = -1 << v36;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v18 = v38[v19];
            if (!v18)
            {
              while (1)
              {
                v8 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_53;
                if (v8 >= v37)
                  goto LABEL_44;
                v18 = v38[v8];
                ++v19;
                if (v18)
                  goto LABEL_21;
              }
            }
            v8 = v19;
          }
        }
LABEL_21:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      v20 = *(_QWORD *)(v5 + 56);
      v21 = *(_QWORD *)(v5 + 48) + 32 * v16;
      v22 = *(_QWORD *)v21;
      v23 = *(unsigned __int8 *)(v21 + 8);
      v24 = *(_QWORD *)(v21 + 16);
      v25 = *(unsigned __int8 *)(v21 + 24);
      v26 = *(_QWORD *)(v20 + 8 * v16);
      if ((v40 & 1) == 0)
        swift_retain();
      Hasher.init(_seed:)();
      if (v23)
      {
        Hasher._combine(_:)(0);
        if (v25)
          goto LABEL_34;
      }
      else
      {
        Hasher._combine(_:)(1u);
        if ((v22 & 0x7FFFFFFFFFFFFFFFLL) != 0)
          v28 = v22;
        else
          v28 = 0;
        Hasher._combine(_:)(v28);
        if (v25)
        {
LABEL_34:
          Hasher._combine(_:)(0);
          goto LABEL_35;
        }
      }
      Hasher._combine(_:)(1u);
      if ((v24 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v27 = v24;
      else
        v27 = 0;
      Hasher._combine(_:)(v27);
LABEL_35:
      result = Hasher._finalize()();
      v29 = -1 << *(_BYTE *)(v7 + 32);
      v30 = result & ~v29;
      v31 = v30 >> 6;
      if (((-1 << v30) & ~*(_QWORD *)(v12 + 8 * (v30 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v12 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v32 = 0;
        v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_52;
          }
          v34 = v31 == v33;
          if (v31 == v33)
            v31 = 0;
          v32 |= v34;
          v35 = *(_QWORD *)(v12 + 8 * v31);
        }
        while (v35 == -1);
        v13 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = *(_QWORD *)(v7 + 48) + 32 * v13;
      *(_QWORD *)v14 = v22;
      *(_BYTE *)(v14 + 8) = v23;
      *(_QWORD *)(v14 + 16) = v24;
      *(_BYTE *)(v14 + 24) = v25;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v13) = v26;
      ++*(_QWORD *)(v7 + 16);
      v5 = v39;
    }
  }
  result = swift_release();
LABEL_51:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  int v21;
  Swift::UInt64 v22;
  int v23;
  Swift::UInt64 v24;
  Swift::UInt64 v25;
  Swift::UInt64 v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  int64_t v36;
  _QWORD *v37;
  __int128 v38;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Text.Effect.AttributeTracker.Key, Text.Effect.AttributeTracker.AnyValue>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<_ProposedSize, CGSize>, type metadata accessor for CGSize, (void (*)(void))lazy protocol witness table accessor for type _ProposedSize and conformance _ProposedSize);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v35 = a2;
    v8 = 0;
    v37 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v36 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v8 << 6);
      }
      else
      {
        v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v17 >= v36)
          goto LABEL_42;
        v18 = v37[v17];
        ++v8;
        if (!v18)
        {
          v8 = v17 + 1;
          if (v17 + 1 >= v36)
            goto LABEL_42;
          v18 = v37[v8];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v36)
            {
LABEL_42:
              if ((v35 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_49;
              }
              v34 = 1 << *(_BYTE *)(v5 + 32);
              if (v34 >= 64)
                bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v37 = -1 << v34;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v18 = v37[v19];
            if (!v18)
            {
              while (1)
              {
                v8 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_51;
                if (v8 >= v36)
                  goto LABEL_42;
                v18 = v37[v8];
                ++v19;
                if (v18)
                  goto LABEL_21;
              }
            }
            v8 = v19;
          }
        }
LABEL_21:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      v20 = *(_QWORD *)(v5 + 48) + 32 * v16;
      v21 = *(unsigned __int8 *)(v20 + 24);
      v22 = *(_QWORD *)(v20 + 16);
      v23 = *(unsigned __int8 *)(v20 + 8);
      v24 = *(_QWORD *)v20;
      v38 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v16);
      Hasher.init(_seed:)();
      if (v23 == 1)
      {
        Hasher._combine(_:)(0);
        if (v21)
          goto LABEL_32;
      }
      else
      {
        Hasher._combine(_:)(1u);
        if ((v24 & 0x7FFFFFFFFFFFFFFFLL) != 0)
          v26 = v24;
        else
          v26 = 0;
        Hasher._combine(_:)(v26);
        if (v21)
        {
LABEL_32:
          Hasher._combine(_:)(0);
          goto LABEL_33;
        }
      }
      Hasher._combine(_:)(1u);
      if ((v22 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v25 = v22;
      else
        v25 = 0;
      Hasher._combine(_:)(v25);
LABEL_33:
      result = Hasher._finalize()();
      v27 = -1 << *(_BYTE *)(v7 + 32);
      v28 = result & ~v27;
      v29 = v28 >> 6;
      if (((-1 << v28) & ~*(_QWORD *)(v12 + 8 * (v28 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v12 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v30 = 0;
        v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_50;
          }
          v32 = v29 == v31;
          if (v29 == v31)
            v29 = 0;
          v30 |= v32;
          v33 = *(_QWORD *)(v12 + 8 * v29);
        }
        while (v33 == -1);
        v13 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = *(_QWORD *)(v7 + 48) + 32 * v13;
      *(_QWORD *)v14 = v24;
      *(_BYTE *)(v14 + 8) = v23;
      *(_QWORD *)(v14 + 16) = v22;
      *(_BYTE *)(v14 + 24) = v21;
      *(_OWORD *)(*(_QWORD *)(v7 + 56) + 16 * v13) = v38;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_49:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<TintPlacement, AnyShapeStyle>, (void (*)(void))lazy protocol witness table accessor for type TintPlacement and conformance TintPlacement);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v29 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v12)
          goto LABEL_33;
        v21 = v29[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v12)
            goto LABEL_33;
          v21 = v29[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v12)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v28 = 1 << *(_BYTE *)(v5 + 32);
              if (v28 >= 64)
                bzero(v29, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v29 = -1 << v28;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v29[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_42;
                if (v8 >= v12)
                  goto LABEL_33;
                v21 = v29[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
      if ((a2 & 1) == 0)
        swift_retain();
      Hasher.init(_seed:)();
      Hasher._combine(_:)(0);
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v25 = v16 == v24;
          if (v16 == v24)
            v16 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v26 == -1);
        v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v27;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  char v33;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Int, _ViewList_Edit>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v33 = a2;
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v30 = -1 << v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v31 = 1 << *(_BYTE *)(v5 + 32);
    v32 = v3;
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1))
          goto LABEL_38;
        if (v8 >= v13)
        {
LABEL_29:
          if ((v33 & 1) == 0)
          {
            result = swift_release();
            v3 = v32;
            goto LABEL_36;
          }
          if (v31 >= 64)
            bzero((void *)(v5 + 64), 8 * v13);
          else
            *v9 = v30;
          v3 = v32;
          *(_QWORD *)(v5 + 16) = 0;
          break;
        }
        v19 = v9[v8];
        if (!v19)
        {
          v20 = v8 + 1;
          if (v8 + 1 >= v13)
            goto LABEL_29;
          v19 = v9[v20];
          if (!v19)
          {
            while (1)
            {
              v8 = v20 + 1;
              if (__OFADD__(v20, 1))
                break;
              if (v8 >= v13)
                goto LABEL_29;
              v19 = v9[v8];
              ++v20;
              if (v19)
                goto LABEL_19;
            }
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_19:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      v21 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v17);
      v22 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v17);
      result = static Hasher._hash(seed:_:)();
      v23 = -1 << *(_BYTE *)(v7 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_37;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v15) = v21;
      *(_BYTE *)(*(_QWORD *)(v7 + 56) + v15) = v22;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_36:
  *v3 = v7;
  return result;
}

unint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t result;
  int64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  uint64_t v31;
  _QWORD *v32;
  int64_t v33;
  _QWORD *v34;
  char v35;
  _QWORD *v36;
  int v37;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<ColorCacheKey, NamedColorInfo>, (void (*)(void))lazy protocol witness table accessor for type ColorCacheKey and conformance ColorCacheKey);
  v35 = a2;
  v36 = (_QWORD *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(_QWORD *)(v5 + 16))
  {
    v6 = 1 << *(_BYTE *)(v5 + 32);
    v34 = (_QWORD *)(v5 + 64);
    v7 = -1;
    if (v6 < 64)
      v7 = ~(-1 << v6);
    v8 = v7 & *(_QWORD *)(v5 + 64);
    v32 = v3;
    v33 = (unint64_t)(v6 + 63) >> 6;
    result = swift_retain();
    v10 = 0;
    while (1)
    {
      v37 = (int)v3;
      if (v8)
      {
        v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v15 = v14 | (v10 << 6);
      }
      else
      {
        v16 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
          __break(1u);
LABEL_35:
          __break(1u);
          return result;
        }
        if (v16 >= v33)
          goto LABEL_28;
        v17 = v34[v16];
        ++v10;
        if (!v17)
        {
          v10 = v16 + 1;
          if (v16 + 1 >= v33)
            goto LABEL_28;
          v17 = v34[v10];
          if (!v17)
          {
            v18 = v16 + 2;
            if (v18 >= v33)
            {
LABEL_28:
              swift_release();
              v3 = v32;
              if ((v35 & 1) != 0)
              {
                v31 = 1 << *(_BYTE *)(v5 + 32);
                if (v31 > 63)
                  bzero(v34, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v34 = -1 << v31;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v17 = v34[v18];
            if (!v17)
            {
              while (1)
              {
                v10 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_35;
                if (v10 >= v33)
                  goto LABEL_28;
                v17 = v34[v10];
                ++v18;
                if (v17)
                  goto LABEL_25;
              }
            }
            v10 = v18;
          }
        }
LABEL_25:
        v8 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v10 << 6);
      }
      v19 = *(_QWORD *)(v5 + 56);
      v20 = v5;
      v21 = (unsigned __int8 *)(*(_QWORD *)(v5 + 48) + 32 * v15);
      v22 = *v21;
      v23 = v21[1];
      v24 = v21[2];
      v26 = *((_QWORD *)v21 + 1);
      v25 = *((_QWORD *)v21 + 2);
      v27 = (void *)*((_QWORD *)v21 + 3);
      v28 = *(void **)(v19 + 8 * v15);
      if ((v35 & 1) == 0)
      {
        v29 = v28;
        swift_bridgeObjectRetain();
        v30 = v27;
      }
      if (v23)
        v11 = 256;
      else
        v11 = 0;
      v12 = v37 & 0xFF000000 | v22 | v11;
      if (v24)
        v13 = 0x10000;
      else
        v13 = 0;
      LODWORD(v3) = v12 | v13;
      result = specialized _NativeDictionary._unsafeInsertNew(key:value:)(v12 | v13, v26, v25, v27, (uint64_t)v28, v36);
      v5 = v20;
    }
  }
  result = swift_release();
  *v3 = v36;
  return result;
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::UInt16 v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  int64_t v27;
  _QWORD *v28;
  _QWORD *v29;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Text.Effect.AttributeTracker.Key, Text.Effect.AttributeTracker.AnyValue>(0, &lazy cache variable for type metadata for _DictionaryStorage<DisplayList.GraphicsRenderer.Cache.CallbackKey, RBDisplayListContents>, (void (*)(uint64_t))type metadata accessor for RBDisplayListContents, (void (*)(void))lazy protocol witness table accessor for type DisplayList.GraphicsRenderer.Cache.CallbackKey and conformance DisplayList.GraphicsRenderer.Cache.CallbackKey);
  v6 = a2;
  v29 = (_QWORD *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(_QWORD *)(v5 + 16))
  {
    v7 = 1 << *(_BYTE *)(v5 + 32);
    v28 = (_QWORD *)(v5 + 64);
    v8 = -1;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    v9 = v8 & *(_QWORD *)(v5 + 64);
    v26 = v2;
    v27 = (unint64_t)(v7 + 63) >> 6;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v9)
      {
        v12 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v13 = v12 | (v11 << 6);
      }
      else
      {
        v14 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return result;
        }
        if (v14 >= v27)
          goto LABEL_22;
        v15 = v28[v14];
        ++v11;
        if (!v15)
        {
          v11 = v14 + 1;
          if (v14 + 1 >= v27)
            goto LABEL_22;
          v15 = v28[v11];
          if (!v15)
          {
            v16 = v14 + 2;
            if (v16 >= v27)
            {
LABEL_22:
              swift_release();
              v3 = v26;
              if ((v6 & 1) != 0)
              {
                v25 = 1 << *(_BYTE *)(v5 + 32);
                if (v25 > 63)
                  bzero(v28, ((unint64_t)(v25 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v28 = -1 << v25;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v15 = v28[v16];
            if (!v15)
            {
              while (1)
              {
                v11 = v16 + 1;
                if (__OFADD__(v16, 1))
                  goto LABEL_29;
                if (v11 >= v27)
                  goto LABEL_22;
                v15 = v28[v11];
                ++v16;
                if (v15)
                  goto LABEL_19;
              }
            }
            v11 = v16;
          }
        }
LABEL_19:
        v9 = (v15 - 1) & v15;
        v13 = __clz(__rbit64(v15)) + (v11 << 6);
      }
      v17 = (unsigned int *)(*(_QWORD *)(v5 + 48) + 32 * v13);
      v18 = *v17;
      v19 = v17[1];
      v21 = v17[2];
      v20 = v17[3];
      v22 = *((_WORD *)v17 + 8);
      v23 = *((double *)v17 + 3);
      v24 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v13);
      if ((v6 & 1) == 0)
        swift_unknownObjectRetain();
      result = specialized _NativeDictionary._unsafeInsertNew(key:value:)(v18 | (v19 << 32), v21 | (v20 << 32), v22, v24, v29, v23);
    }
  }
  result = swift_release();
  *v3 = v29;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  _QWORD *v39;
  int v40;
  char v41[8];

  v3 = v2;
  v5 = type metadata accessor for URL();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  type metadata accessor for _DictionaryStorage<URL, NamedImage.Cache.WeakCatalog>();
  v40 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_41;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v39 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v37 = v2;
  v38 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  while (1)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_22;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v38)
      break;
    v23 = v39;
    v24 = v39[v22];
    ++v18;
    if (!v24)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v38)
        goto LABEL_34;
      v24 = v39[v18];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v38)
        {
LABEL_34:
          swift_release();
          v3 = v37;
          if ((v40 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v39[v25];
        if (!v24)
        {
          while (1)
          {
            v18 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v18 >= v38)
              goto LABEL_34;
            v24 = v39[v18];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v18 = v25;
      }
    }
LABEL_21:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_22:
    v26 = *(_QWORD *)(v6 + 72);
    v27 = *(_QWORD *)(v9 + 48) + v26 * v21;
    if ((v40 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v8, v27, v5);
      outlined init with take of NamedImage.Cache.WeakCatalog(*(_QWORD *)(v9 + 56) + 8 * v21, (uint64_t)v41);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, v27, v5);
      outlined init with copy of NamedImage.Cache.WeakCatalog(*(_QWORD *)(v9 + 56) + 8 * v21, (uint64_t)v41);
    }
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v28 = -1 << *(_BYTE *)(v11 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v16 + 8 * v30);
      }
      while (v34 == -1);
      v19 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v26 * v19, v8, v5);
    result = outlined init with take of NamedImage.Cache.WeakCatalog((uint64_t)v41, *(_QWORD *)(v11 + 56) + 8 * v19);
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v37;
  v23 = v39;
  if ((v40 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v35 = 1 << *(_BYTE *)(v9 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v11;
  return result;
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t result;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  char v20;
  __int128 v21;
  __int128 v22;
  id v23;
  unint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  int64_t v30;
  _QWORD *v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  _QWORD *v41;
  int64_t v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  int64_t v53;

  v3 = v2;
  v5 = type metadata accessor for NamedImage.VectorKey(0);
  v47 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  type metadata accessor for _DictionaryStorage<NamedImage.VectorKey, NamedImage.VectorInfo>();
  v48 = a2;
  v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  v10 = (_QWORD *)v9;
  if (*(_QWORD *)(v8 + 16))
  {
    v44 = v7;
    v41 = v2;
    v11 = 1 << *(_BYTE *)(v8 + 32);
    v12 = *(_QWORD *)(v8 + 64);
    v43 = (_QWORD *)(v8 + 64);
    if (v11 < 64)
      v13 = ~(-1 << v11);
    else
      v13 = -1;
    v14 = v13 & v12;
    v42 = (unint64_t)(v11 + 63) >> 6;
    v45 = v9 + 64;
    result = swift_retain();
    v16 = 0;
    v46 = v8;
    v17 = v45;
    while (1)
    {
      if (v14)
      {
        v28 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        v29 = v28 | (v16 << 6);
      }
      else
      {
        v30 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
          __break(1u);
LABEL_33:
          __break(1u);
          return result;
        }
        v31 = v43;
        if (v30 >= v42)
          goto LABEL_24;
        v32 = v43[v30];
        ++v16;
        if (!v32)
        {
          v16 = v30 + 1;
          if (v30 + 1 >= v42)
            goto LABEL_24;
          v32 = v43[v16];
          if (!v32)
          {
            v33 = v30 + 2;
            if (v33 >= v42)
            {
LABEL_24:
              swift_release();
              if ((v48 & 1) == 0)
              {
                result = swift_release();
                v3 = v41;
                goto LABEL_31;
              }
              v40 = 1 << *(_BYTE *)(v8 + 32);
              if (v40 >= 64)
                bzero(v31, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v31 = -1 << v40;
              v3 = v41;
              *(_QWORD *)(v8 + 16) = 0;
              break;
            }
            v32 = v43[v33];
            if (!v32)
            {
              while (1)
              {
                v16 = v33 + 1;
                if (__OFADD__(v33, 1))
                  goto LABEL_33;
                if (v16 >= v42)
                  goto LABEL_24;
                v32 = v43[v16];
                ++v33;
                if (v32)
                  goto LABEL_21;
              }
            }
            v16 = v33;
          }
        }
LABEL_21:
        v14 = (v32 - 1) & v32;
        v29 = __clz(__rbit64(v32)) + (v16 << 6);
      }
      v34 = *(_QWORD *)(v47 + 72);
      v35 = *(_QWORD *)(v8 + 48) + v34 * v29;
      v53 = v16;
      v36 = (uint64_t)v44;
      if ((v48 & 1) != 0)
      {
        outlined init with take of LocalizedStringKey.FormatArgument(v35, (uint64_t)v44, type metadata accessor for NamedImage.VectorKey);
        v37 = *(_QWORD *)(v8 + 56) + 80 * v29;
        v23 = *(id *)v37;
        v20 = *(_BYTE *)(v37 + 8);
        v38 = *(_OWORD *)(v37 + 64);
        v51 = *(_OWORD *)(v37 + 48);
        v52 = v38;
        v39 = *(_OWORD *)(v37 + 32);
        v49 = *(_OWORD *)(v37 + 16);
        v50 = v39;
      }
      else
      {
        outlined init with copy of TypesettingLanguage(v35, (uint64_t)v44, type metadata accessor for NamedImage.VectorKey);
        v18 = *(_QWORD *)(v8 + 56) + 80 * v29;
        v19 = *(void **)v18;
        v20 = *(_BYTE *)(v18 + 8);
        v21 = *(_OWORD *)(v18 + 64);
        v51 = *(_OWORD *)(v18 + 48);
        v52 = v21;
        v22 = *(_OWORD *)(v18 + 32);
        v49 = *(_OWORD *)(v18 + 16);
        v50 = v22;
        v23 = v19;
      }
      Hasher.init(_seed:)();
      NamedImage.VectorKey.hash(into:)();
      Hasher._finalize()();
      v24 = _HashTable.nextHole(atOrAfter:)();
      *(_QWORD *)(v17 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
      result = outlined init with take of LocalizedStringKey.FormatArgument(v36, v10[6] + v34 * v24, type metadata accessor for NamedImage.VectorKey);
      v25 = v10[7] + 80 * v24;
      *(_QWORD *)v25 = v23;
      *(_BYTE *)(v25 + 8) = v20;
      v26 = v50;
      *(_OWORD *)(v25 + 16) = v49;
      *(_OWORD *)(v25 + 32) = v26;
      v27 = v52;
      *(_OWORD *)(v25 + 48) = v51;
      *(_OWORD *)(v25 + 64) = v27;
      ++v10[2];
      v8 = v46;
      v16 = v53;
    }
  }
  result = swift_release();
LABEL_31:
  *v3 = v10;
  return result;
}

{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  char v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int64_t v34;
  _QWORD *v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  int64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  int64_t v60;

  v4 = type metadata accessor for NamedImage.BitmapKey(0);
  v51 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v53 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = v2;
  v6 = *v2;
  type metadata accessor for _DictionaryStorage<NamedImage.BitmapKey, NamedImage.BitmapInfo>();
  v52 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = (_QWORD *)v7;
  if (*(_QWORD *)(v6 + 16))
  {
    v9 = 1 << *(_BYTE *)(v6 + 32);
    v10 = *(_QWORD *)(v6 + 64);
    v48 = (_QWORD *)(v6 + 64);
    if (v9 < 64)
      v11 = ~(-1 << v9);
    else
      v11 = -1;
    v12 = v11 & v10;
    v47 = (unint64_t)(v9 + 63) >> 6;
    v49 = v7 + 64;
    result = swift_retain();
    v14 = 0;
    v50 = v6;
    v15 = v49;
    while (1)
    {
      if (v12)
      {
        v31 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v32 = v31 | (v14 << 6);
        v33 = (uint64_t)v53;
      }
      else
      {
        v34 = v14 + 1;
        v33 = (uint64_t)v53;
        if (__OFADD__(v14, 1))
        {
          __break(1u);
LABEL_31:
          __break(1u);
          return result;
        }
        v35 = v48;
        if (v34 >= v47)
          goto LABEL_24;
        v36 = v48[v34];
        ++v14;
        if (!v36)
        {
          v14 = v34 + 1;
          if (v34 + 1 >= v47)
            goto LABEL_24;
          v36 = v48[v14];
          if (!v36)
          {
            v37 = v34 + 2;
            if (v37 >= v47)
            {
LABEL_24:
              swift_release();
              if ((v52 & 1) != 0)
              {
                v45 = 1 << *(_BYTE *)(v6 + 32);
                if (v45 >= 64)
                  bzero(v35, ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v35 = -1 << v45;
                *(_QWORD *)(v6 + 16) = 0;
              }
              break;
            }
            v36 = v48[v37];
            if (!v36)
            {
              while (1)
              {
                v14 = v37 + 1;
                if (__OFADD__(v37, 1))
                  goto LABEL_31;
                if (v14 >= v47)
                  goto LABEL_24;
                v36 = v48[v14];
                ++v37;
                if (v36)
                  goto LABEL_21;
              }
            }
            v14 = v37;
          }
        }
LABEL_21:
        v12 = (v36 - 1) & v36;
        v32 = __clz(__rbit64(v36)) + (v14 << 6);
      }
      v38 = *(_QWORD *)(v51 + 72);
      v39 = *(_QWORD *)(v6 + 48) + v38 * v32;
      v40 = 96 * v32;
      v60 = v14;
      if ((v52 & 1) != 0)
      {
        outlined init with take of LocalizedStringKey.FormatArgument(v39, v33, type metadata accessor for NamedImage.BitmapKey);
        v41 = *(_QWORD *)(v6 + 56) + v40;
        v17 = *(void **)v41;
        v18 = *(_BYTE *)(v41 + 8);
        v19 = *(_QWORD *)(v41 + 16);
        v42 = *(unsigned __int8 *)(v41 + 24);
        v21 = *(_QWORD *)(v41 + 32);
        v22 = *(_QWORD *)(v41 + 40);
        v58 = *(unsigned __int8 *)(v41 + 48);
        v59 = v42;
        v43 = *(_QWORD *)(v41 + 56);
        v56 = *(_QWORD *)(v41 + 64);
        v57 = v43;
        v44 = *(_QWORD *)(v41 + 72);
        v54 = *(_QWORD *)(v41 + 80);
        v55 = v44;
        v25 = *(_BYTE *)(v41 + 88);
      }
      else
      {
        outlined init with copy of TypesettingLanguage(v39, v33, type metadata accessor for NamedImage.BitmapKey);
        v16 = *(_QWORD *)(v6 + 56) + v40;
        v17 = *(void **)v16;
        v18 = *(_BYTE *)(v16 + 8);
        v19 = *(_QWORD *)(v16 + 16);
        v20 = *(unsigned __int8 *)(v16 + 24);
        v21 = *(_QWORD *)(v16 + 32);
        v22 = *(_QWORD *)(v16 + 40);
        v58 = *(unsigned __int8 *)(v16 + 48);
        v59 = v20;
        v23 = *(_QWORD *)(v16 + 56);
        v56 = *(_QWORD *)(v16 + 64);
        v57 = v23;
        v24 = *(_QWORD *)(v16 + 72);
        v54 = *(_QWORD *)(v16 + 80);
        v55 = v24;
        v25 = *(_BYTE *)(v16 + 88);
        outlined copy of GraphicsImage.Contents(v17, v18);
      }
      Hasher.init(_seed:)();
      v26 = v33;
      NamedImage.BitmapKey.hash(into:)();
      Hasher._finalize()();
      v27 = _HashTable.nextHole(atOrAfter:)();
      *(_QWORD *)(v15 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
      result = outlined init with take of LocalizedStringKey.FormatArgument(v26, v8[6] + v38 * v27, type metadata accessor for NamedImage.BitmapKey);
      v28 = v8[7] + 96 * v27;
      *(_QWORD *)v28 = v17;
      *(_BYTE *)(v28 + 8) = v18;
      *(_QWORD *)(v28 + 16) = v19;
      *(_BYTE *)(v28 + 24) = v59;
      *(_QWORD *)(v28 + 32) = v21;
      *(_QWORD *)(v28 + 40) = v22;
      *(_BYTE *)(v28 + 48) = v58;
      v29 = v56;
      *(_QWORD *)(v28 + 56) = v57;
      *(_QWORD *)(v28 + 64) = v29;
      v30 = v54;
      *(_QWORD *)(v28 + 72) = v55;
      *(_QWORD *)(v28 + 80) = v30;
      *(_BYTE *)(v28 + 88) = v25;
      ++v8[2];
      v6 = v50;
      v14 = v60;
    }
  }
  result = swift_release();
  *v46 = v8;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t result;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;

  v3 = v2;
  v5 = type metadata accessor for LocalizedStringKey.FormatArgument(0);
  v39 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  type metadata accessor for _DictionaryStorage<Int, LocalizedStringKey.FormatArgument>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Int, LocalizedStringKey.FormatArgument>, v9);
  v40 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v11 = result;
  if (*(_QWORD *)(v8 + 16))
  {
    v36 = v3;
    v12 = 0;
    v13 = *(_QWORD *)(v8 + 64);
    v38 = (_QWORD *)(v8 + 64);
    v14 = 1 << *(_BYTE *)(v8 + 32);
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v16 = v15 & v13;
    v37 = (unint64_t)(v14 + 63) >> 6;
    v17 = result + 64;
    while (1)
    {
      if (v16)
      {
        v19 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        v20 = v19 | (v12 << 6);
      }
      else
      {
        v21 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        result = (uint64_t)v38;
        if (v21 >= v37)
          goto LABEL_34;
        v22 = v38[v21];
        ++v12;
        if (!v22)
        {
          v12 = v21 + 1;
          if (v21 + 1 >= v37)
            goto LABEL_34;
          v22 = v38[v12];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v37)
            {
LABEL_34:
              if ((v40 & 1) == 0)
              {
                result = swift_release();
                v3 = v36;
                goto LABEL_41;
              }
              v34 = 1 << *(_BYTE *)(v8 + 32);
              if (v34 >= 64)
                bzero(v38, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v38 = -1 << v34;
              v3 = v36;
              *(_QWORD *)(v8 + 16) = 0;
              break;
            }
            v22 = v38[v23];
            if (!v22)
            {
              while (1)
              {
                v12 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_43;
                if (v12 >= v37)
                  goto LABEL_34;
                v22 = v38[v12];
                ++v23;
                if (v22)
                  goto LABEL_21;
              }
            }
            v12 = v23;
          }
        }
LABEL_21:
        v16 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v12 << 6);
      }
      v24 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v20);
      v25 = *(_QWORD *)(v39 + 72);
      v26 = *(_QWORD *)(v8 + 56) + v25 * v20;
      if ((v40 & 1) != 0)
        outlined init with take of LocalizedStringKey.FormatArgument(v26, (uint64_t)v7, type metadata accessor for LocalizedStringKey.FormatArgument);
      else
        outlined init with copy of TypesettingLanguage(v26, (uint64_t)v7, type metadata accessor for LocalizedStringKey.FormatArgument);
      result = static Hasher._hash(seed:_:)();
      v27 = -1 << *(_BYTE *)(v11 + 32);
      v28 = result & ~v27;
      v29 = v28 >> 6;
      if (((-1 << v28) & ~*(_QWORD *)(v17 + 8 * (v28 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v17 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v30 = 0;
        v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v32 = v29 == v31;
          if (v29 == v31)
            v29 = 0;
          v30 |= v32;
          v33 = *(_QWORD *)(v17 + 8 * v29);
        }
        while (v33 == -1);
        v18 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(_QWORD *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v18) = v24;
      result = outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v7, *(_QWORD *)(v11 + 56) + v25 * v18, type metadata accessor for LocalizedStringKey.FormatArgument);
      ++*(_QWORD *)(v11 + 16);
    }
  }
  result = swift_release();
LABEL_41:
  *v3 = v11;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  int64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  char *v52;
  uint64_t v53;

  v3 = v2;
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  type metadata accessor for _DictionaryStorage<UUID, NamedImage.DecodedInfo>();
  v50 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_41;
  v52 = v8;
  v53 = v5;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v47 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v45 = v2;
  v46 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  v48 = v9;
  v49 = v6;
  while (1)
  {
    if (v15)
    {
      v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v22 = v21 | (v18 << 6);
      goto LABEL_22;
    }
    v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v46)
      break;
    v24 = v47;
    v25 = v47[v23];
    ++v18;
    if (!v25)
    {
      v18 = v23 + 1;
      if (v23 + 1 >= v46)
        goto LABEL_34;
      v25 = v47[v18];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v46)
        {
LABEL_34:
          swift_release();
          v3 = v45;
          if ((v50 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v25 = v47[v26];
        if (!v25)
        {
          while (1)
          {
            v18 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_43;
            if (v18 >= v46)
              goto LABEL_34;
            v25 = v47[v18];
            ++v26;
            if (v25)
              goto LABEL_21;
          }
        }
        v18 = v26;
      }
    }
LABEL_21:
    v15 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_22:
    v27 = *(_QWORD *)(v6 + 72);
    v28 = *(_QWORD *)(v9 + 48) + v27 * v22;
    v29 = 48 * v22;
    if ((v50 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v52, v28, v53);
      v30 = *(_QWORD *)(v9 + 56) + v29;
      v31 = *(void **)v30;
      v32 = *(_BYTE *)(v30 + 8);
      v33 = *(_QWORD *)(v30 + 16);
      v34 = *(_QWORD *)(v30 + 24);
      v35 = *(_QWORD *)(v30 + 32);
      v51 = *(unsigned __int8 *)(v30 + 40);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v52, v28, v53);
      v36 = *(_QWORD *)(v9 + 56) + v29;
      v31 = *(void **)v36;
      v32 = *(_BYTE *)(v36 + 8);
      v33 = *(_QWORD *)(v36 + 16);
      v34 = *(_QWORD *)(v36 + 24);
      v35 = *(_QWORD *)(v36 + 32);
      v51 = *(unsigned __int8 *)(v36 + 40);
      outlined copy of GraphicsImage.Contents(v31, v32);
    }
    lazy protocol witness table accessor for type UUID and conformance UUID();
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v37 = -1 << *(_BYTE *)(v11 + 32);
    v38 = result & ~v37;
    v39 = v38 >> 6;
    if (((-1 << v38) & ~*(_QWORD *)(v16 + 8 * (v38 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v38) & ~*(_QWORD *)(v16 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0;
      v6 = v49;
    }
    else
    {
      v40 = 0;
      v41 = (unint64_t)(63 - v37) >> 6;
      v6 = v49;
      do
      {
        if (++v39 == v41 && (v40 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v42 = v39 == v41;
        if (v39 == v41)
          v39 = 0;
        v40 |= v42;
        v43 = *(_QWORD *)(v16 + 8 * v39);
      }
      while (v43 == -1);
      v19 = __clz(__rbit64(~v43)) + (v39 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v27 * v19, v52, v53);
    v20 = *(_QWORD *)(v11 + 56) + 48 * v19;
    *(_QWORD *)v20 = v31;
    *(_BYTE *)(v20 + 8) = v32;
    *(_QWORD *)(v20 + 16) = v33;
    *(_QWORD *)(v20 + 24) = v34;
    *(_QWORD *)(v20 + 32) = v35;
    *(_BYTE *)(v20 + 40) = v51;
    ++*(_QWORD *)(v11 + 16);
    v9 = v48;
  }
  swift_release();
  v3 = v45;
  v24 = v47;
  if ((v50 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v44 = 1 << *(_BYTE *)(v9 + 32);
  if (v44 >= 64)
    bzero(v24, ((unint64_t)(v44 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v44;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v11;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  uint64_t v43;
  int v44;

  v3 = v2;
  v5 = type metadata accessor for AccessibilityCustomAttributes.Value();
  v43 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  type metadata accessor for _DictionaryStorage<Int, LocalizedStringKey.FormatArgument>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, AccessibilityCustomAttributes.Value>, v9);
  v44 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  v11 = v10;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_41;
  v12 = 1 << *(_BYTE *)(v8 + 32);
  v13 = *(_QWORD *)(v8 + 64);
  v42 = (_QWORD *)(v8 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v40 = v2;
  v41 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  while (1)
  {
    if (v15)
    {
      v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v22 = v21 | (v18 << 6);
      goto LABEL_22;
    }
    v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v41)
      break;
    v24 = v42;
    v25 = v42[v23];
    ++v18;
    if (!v25)
    {
      v18 = v23 + 1;
      if (v23 + 1 >= v41)
        goto LABEL_34;
      v25 = v42[v18];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v41)
        {
LABEL_34:
          swift_release();
          v3 = v40;
          if ((v44 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v25 = v42[v26];
        if (!v25)
        {
          while (1)
          {
            v18 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_43;
            if (v18 >= v41)
              goto LABEL_34;
            v25 = v42[v18];
            ++v26;
            if (v25)
              goto LABEL_21;
          }
        }
        v18 = v26;
      }
    }
LABEL_21:
    v15 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_22:
    v27 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v22);
    v29 = *v27;
    v28 = v27[1];
    v30 = *(_QWORD *)(v43 + 72);
    v31 = *(_QWORD *)(v8 + 56) + v30 * v22;
    if ((v44 & 1) != 0)
    {
      outlined init with take of LocalizedStringKey.FormatArgument(v31, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityCustomAttributes.Value);
    }
    else
    {
      outlined init with copy of TypesettingLanguage(v31, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityCustomAttributes.Value);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v32 = -1 << *(_BYTE *)(v11 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v16 + 8 * (v33 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v16 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v16 + 8 * v34);
      }
      while (v38 == -1);
      v19 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v11 + 48) + 16 * v19);
    *v20 = v29;
    v20[1] = v28;
    result = outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v7, *(_QWORD *)(v11 + 56) + v30 * v19, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityCustomAttributes.Value);
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v40;
  v24 = v42;
  if ((v44 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v39 = 1 << *(_BYTE *)(v8 + 32);
  if (v39 >= 64)
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v39;
  *(_QWORD *)(v8 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v11;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t i;
  int v42;

  v3 = v2;
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  type metadata accessor for _DictionaryStorage<AGSubgraphRef, [(_:)]>(0, &lazy cache variable for type metadata for _DictionaryStorage<UUID, TextRenderSurface>, v10, (void (*)(uint64_t))type metadata accessor for TextRenderSurface, (void (*)(void))lazy protocol witness table accessor for type UUID and conformance UUID);
  v42 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)();
  v12 = v11;
  if (*(_QWORD *)(v9 + 16))
  {
    v38 = v2;
    v13 = 1 << *(_BYTE *)(v9 + 32);
    v14 = *(_QWORD *)(v9 + 64);
    v40 = (_QWORD *)(v9 + 64);
    if (v13 < 64)
      v15 = ~(-1 << v13);
    else
      v15 = -1;
    v16 = v15 & v14;
    v39 = (unint64_t)(v13 + 63) >> 6;
    v17 = v11 + 64;
    result = swift_retain();
    v19 = 0;
    for (i = v9; ; v9 = i)
    {
      if (v16)
      {
        v21 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        v22 = v21 | (v19 << 6);
      }
      else
      {
        v23 = v19 + 1;
        if (__OFADD__(v19, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v23 >= v39)
          goto LABEL_34;
        v24 = v40[v23];
        ++v19;
        if (!v24)
        {
          v19 = v23 + 1;
          if (v23 + 1 >= v39)
            goto LABEL_34;
          v24 = v40[v19];
          if (!v24)
          {
            v25 = v23 + 2;
            if (v25 >= v39)
            {
LABEL_34:
              swift_release();
              v3 = v38;
              if ((v42 & 1) != 0)
              {
                v36 = 1 << *(_BYTE *)(v9 + 32);
                if (v36 >= 64)
                  bzero(v40, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v40 = -1 << v36;
                *(_QWORD *)(v9 + 16) = 0;
              }
              break;
            }
            v24 = v40[v25];
            if (!v24)
            {
              while (1)
              {
                v19 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_41;
                if (v19 >= v39)
                  goto LABEL_34;
                v24 = v40[v19];
                ++v25;
                if (v24)
                  goto LABEL_21;
              }
            }
            v19 = v25;
          }
        }
LABEL_21:
        v16 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v19 << 6);
      }
      v26 = *(_QWORD *)(v6 + 72);
      v27 = *(_QWORD *)(v9 + 48) + v26 * v22;
      if ((v42 & 1) != 0)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v8, v27, v5);
        v28 = *(id *)(*(_QWORD *)(v9 + 56) + 8 * v22);
      }
      else
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, v27, v5);
        v28 = *(id *)(*(_QWORD *)(v9 + 56) + 8 * v22);
      }
      lazy protocol witness table accessor for type UUID and conformance UUID();
      result = dispatch thunk of Hashable._rawHashValue(seed:)();
      v29 = -1 << *(_BYTE *)(v12 + 32);
      v30 = result & ~v29;
      v31 = v30 >> 6;
      if (((-1 << v30) & ~*(_QWORD *)(v17 + 8 * (v30 >> 6))) != 0)
      {
        v20 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v17 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v32 = 0;
        v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v34 = v31 == v33;
          if (v31 == v33)
            v31 = 0;
          v32 |= v34;
          v35 = *(_QWORD *)(v17 + 8 * v31);
        }
        while (v35 == -1);
        v20 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v12 + 48) + v26 * v20, v8, v5);
      *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v20) = v28;
      ++*(_QWORD *)(v12 + 16);
    }
  }
  result = swift_release();
  *v3 = v12;
  return result;
}

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Font.RatioKey, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type Font.RatioKey and conformance Font.RatioKey);
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(_QWORD *)(v5 + 16))
  {
    v7 = 1 << *(_BYTE *)(v5 + 32);
    v8 = (_QWORD *)(v5 + 64);
    v9 = -1;
    if (v7 < 64)
      v9 = ~(-1 << v7);
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v11 = (unint64_t)(v7 + 63) >> 6;
    swift_retain();
    v12 = 0;
    while (1)
    {
      if (v10)
      {
        v13 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v14 = v13 | (v12 << 6);
      }
      else
      {
        v15 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
          __break(1u);
LABEL_27:
          __break(1u);
          return;
        }
        if (v15 >= v11)
          goto LABEL_20;
        v16 = v8[v15];
        ++v12;
        if (!v16)
        {
          v12 = v15 + 1;
          if (v15 + 1 >= v11)
            goto LABEL_20;
          v16 = v8[v12];
          if (!v16)
          {
            v17 = v15 + 2;
            if (v17 >= v11)
            {
LABEL_20:
              swift_release();
              if ((a2 & 1) != 0)
              {
                v18 = 1 << *(_BYTE *)(v5 + 32);
                if (v18 > 63)
                  bzero((void *)(v5 + 64), ((unint64_t)(v18 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v18;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v16 = v8[v17];
            if (!v16)
            {
              while (1)
              {
                v12 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_27;
                if (v12 >= v11)
                  goto LABEL_20;
                v16 = v8[v12];
                ++v17;
                if (v16)
                  goto LABEL_19;
              }
            }
            v12 = v17;
          }
        }
LABEL_19:
        v10 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v12 << 6);
      }
      specialized _NativeDictionary._unsafeInsertNew(key:value:)(*(_WORD *)(*(_QWORD *)(v5 + 48) + 2 * v14));
    }
  }
  swift_release();
  *v3 = v6;
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  int64_t v26;
  _QWORD *v27;
  __int128 v28;
  _QWORD *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Text.Effect.AttributeTracker.Key, Text.Effect.AttributeTracker.AnyValue>(0, &lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.AttributeTracker.Key, Text.Effect.AttributeTracker.AnyValue>, (void (*)(uint64_t))type metadata accessor for Text.Effect.AttributeTracker.AnyValue, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.AttributeTracker.Key and conformance Text.Effect.AttributeTracker.Key);
  v6 = a2;
  v29 = (_QWORD *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(_QWORD *)(v5 + 16))
  {
    v7 = 1 << *(_BYTE *)(v5 + 32);
    v27 = (_QWORD *)(v5 + 64);
    v8 = -1;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    v9 = v8 & *(_QWORD *)(v5 + 64);
    v25 = v2;
    v26 = (unint64_t)(v7 + 63) >> 6;
    swift_retain();
    v10 = 0;
    while (1)
    {
      if (v9)
      {
        v11 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v12 = v11 | (v10 << 6);
      }
      else
      {
        v13 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return;
        }
        if (v13 >= v26)
          goto LABEL_22;
        v14 = v27[v13];
        ++v10;
        if (!v14)
        {
          v10 = v13 + 1;
          if (v13 + 1 >= v26)
            goto LABEL_22;
          v14 = v27[v10];
          if (!v14)
          {
            v15 = v13 + 2;
            if (v15 >= v26)
            {
LABEL_22:
              swift_release();
              v3 = v25;
              if ((v6 & 1) != 0)
              {
                v24 = 1 << *(_BYTE *)(v5 + 32);
                if (v24 > 63)
                  bzero(v27, ((unint64_t)(v24 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v27 = -1 << v24;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v14 = v27[v15];
            if (!v14)
            {
              while (1)
              {
                v10 = v15 + 1;
                if (__OFADD__(v15, 1))
                  goto LABEL_29;
                if (v10 >= v26)
                  goto LABEL_22;
                v14 = v27[v10];
                ++v15;
                if (v14)
                  goto LABEL_19;
              }
            }
            v10 = v15;
          }
        }
LABEL_19:
        v9 = (v14 - 1) & v14;
        v12 = __clz(__rbit64(v14)) + (v10 << 6);
      }
      v16 = *(_QWORD *)(v5 + 48) + 56 * v12;
      v17 = *(_QWORD *)v16;
      v18 = *(_OWORD *)(v16 + 8);
      v19 = *(_QWORD *)(v16 + 24);
      v20 = *(_BYTE *)(v16 + 32);
      v21 = *(_QWORD *)(v16 + 40);
      v22 = *(_BYTE *)(v16 + 48);
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v12);
      if ((v6 & 1) == 0)
      {
        v28 = *(_OWORD *)(v16 + 8);
        swift_retain();
        v18 = v28;
      }
      v30 = v17;
      v31 = v18;
      v32 = v19;
      v33 = v20;
      v34 = v21;
      v35 = v22;
      specialized _NativeDictionary._unsafeInsertNew(key:value:)((uint64_t)&v30, v23, v29);
    }
  }
  swift_release();
  *v3 = v29;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2, void (*a3)(_QWORD))
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  _OWORD *v23;
  id v24;
  Swift::Int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;
  _OWORD v37[2];

  v4 = v3;
  v6 = *v3;
  a3(0);
  v36 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_41;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v35 = v6 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v34 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v17 = v16 | (v14 << 6);
      goto LABEL_22;
    }
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v34)
      break;
    v19 = (_QWORD *)(v6 + 64);
    v20 = *(_QWORD *)(v35 + 8 * v18);
    ++v14;
    if (!v20)
    {
      v14 = v18 + 1;
      if (v18 + 1 >= v34)
        goto LABEL_34;
      v20 = *(_QWORD *)(v35 + 8 * v14);
      if (!v20)
      {
        v21 = v18 + 2;
        if (v21 >= v34)
        {
LABEL_34:
          swift_release();
          if ((v36 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v20 = *(_QWORD *)(v35 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            v14 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_43;
            if (v14 >= v34)
              goto LABEL_34;
            v20 = *(_QWORD *)(v35 + 8 * v14);
            ++v21;
            if (v20)
              goto LABEL_21;
          }
        }
        v14 = v21;
      }
    }
LABEL_21:
    v11 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_22:
    v22 = *(void **)(*(_QWORD *)(v6 + 48) + 8 * v17);
    v23 = (_OWORD *)(*(_QWORD *)(v6 + 56) + 32 * v17);
    if ((v36 & 1) != 0)
    {
      outlined init with take of Any(v23, v37);
    }
    else
    {
      outlined init with copy of Any((uint64_t)v23, (uint64_t)v37);
      v24 = v22;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    v25 = Hasher._finalize()();
    result = swift_bridgeObjectRelease();
    v26 = -1 << *(_BYTE *)(v8 + 32);
    v27 = v25 & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v31 = v28 == v30;
        if (v28 == v30)
          v28 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v12 + 8 * v28);
      }
      while (v32 == -1);
      v15 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v15) = v22;
    result = (uint64_t)outlined init with take of Any(v37, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v15));
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v19 = (_QWORD *)(v6 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v33 = 1 << *(_BYTE *)(v6 + 32);
  if (v33 >= 64)
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v19 = -1 << v33;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  Swift::UInt64 v29;
  void *v30;
  id v31;
  uint64_t v32;
  int64_t v33;
  _QWORD *v34;

  v4 = v3;
  v6 = *v3;
  a3(0);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = result;
  if (*(_QWORD *)(v6 + 16))
  {
    v9 = 0;
    v34 = (_QWORD *)(v6 + 64);
    v10 = 1 << *(_BYTE *)(v6 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v6 + 64);
    v33 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v9 << 6);
      }
      else
      {
        v21 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v6 + 64;
        if (v21 >= v33)
          goto LABEL_33;
        v22 = v34[v21];
        ++v9;
        if (!v22)
        {
          v9 = v21 + 1;
          if (v21 + 1 >= v33)
            goto LABEL_33;
          v22 = v34[v9];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v33)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v4 = v3;
                goto LABEL_40;
              }
              v32 = 1 << *(_BYTE *)(v6 + 32);
              if (v32 >= 64)
                bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v34 = -1 << v32;
              v4 = v3;
              *(_QWORD *)(v6 + 16) = 0;
              break;
            }
            v22 = v34[v23];
            if (!v22)
            {
              while (1)
              {
                v9 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_42;
                if (v9 >= v33)
                  goto LABEL_33;
                v22 = v34[v9];
                ++v23;
                if (v22)
                  goto LABEL_30;
              }
            }
            v9 = v23;
          }
        }
LABEL_30:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v9 << 6);
      }
      v28 = 8 * v20;
      v29 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + v28);
      v30 = *(void **)(*(_QWORD *)(v6 + 56) + v28);
      if ((a2 & 1) == 0)
        v31 = v30;
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v29);
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v8 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = 8 * v17;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v18) = v29;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v18) = v30;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  Swift::UInt64 v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  _QWORD *v33;

  v4 = v3;
  v6 = *v3;
  a3(0);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = result;
  if (*(_QWORD *)(v6 + 16))
  {
    v9 = 0;
    v33 = (_QWORD *)(v6 + 64);
    v10 = 1 << *(_BYTE *)(v6 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v6 + 64);
    v32 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v9 << 6);
      }
      else
      {
        v21 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v6 + 64;
        if (v21 >= v32)
          goto LABEL_33;
        v22 = v33[v21];
        ++v9;
        if (!v22)
        {
          v9 = v21 + 1;
          if (v21 + 1 >= v32)
            goto LABEL_33;
          v22 = v33[v9];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v32)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v4 = v3;
                goto LABEL_40;
              }
              v31 = 1 << *(_BYTE *)(v6 + 32);
              if (v31 >= 64)
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v33 = -1 << v31;
              v4 = v3;
              *(_QWORD *)(v6 + 16) = 0;
              break;
            }
            v22 = v33[v23];
            if (!v22)
            {
              while (1)
              {
                v9 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_42;
                if (v9 >= v32)
                  goto LABEL_33;
                v22 = v33[v9];
                ++v23;
                if (v22)
                  goto LABEL_30;
              }
            }
            v9 = v23;
          }
        }
LABEL_30:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v9 << 6);
      }
      v28 = 8 * v20;
      v29 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + v28);
      v30 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + v28);
      if ((a2 & 1) == 0)
        swift_retain();
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v29);
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v8 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = 8 * v17;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v18) = v29;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v18) = v30;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  Swift::UInt64 v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  _QWORD *v33;

  v4 = v3;
  v6 = *v3;
  a3(0);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = result;
  if (*(_QWORD *)(v6 + 16))
  {
    v9 = 0;
    v33 = (_QWORD *)(v6 + 64);
    v10 = 1 << *(_BYTE *)(v6 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v6 + 64);
    v32 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v9 << 6);
      }
      else
      {
        v21 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v6 + 64;
        if (v21 >= v32)
          goto LABEL_33;
        v22 = v33[v21];
        ++v9;
        if (!v22)
        {
          v9 = v21 + 1;
          if (v21 + 1 >= v32)
            goto LABEL_33;
          v22 = v33[v9];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v32)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v4 = v3;
                goto LABEL_40;
              }
              v31 = 1 << *(_BYTE *)(v6 + 32);
              if (v31 >= 64)
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v33 = -1 << v31;
              v4 = v3;
              *(_QWORD *)(v6 + 16) = 0;
              break;
            }
            v22 = v33[v23];
            if (!v22)
            {
              while (1)
              {
                v9 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_42;
                if (v9 >= v32)
                  goto LABEL_33;
                v22 = v33[v9];
                ++v23;
                if (v22)
                  goto LABEL_30;
              }
            }
            v9 = v23;
          }
        }
LABEL_30:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v9 << 6);
      }
      v28 = 8 * v20;
      v29 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + v28);
      v30 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + v28);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain();
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v29);
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v8 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = 8 * v17;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v18) = v29;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v18) = v30;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v4 = v8;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2, unint64_t *a3, void (*a4)(void), uint64_t a5, void (*a6)(uint64_t))
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  _QWORD *v37;

  v7 = v6;
  v9 = *v6;
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, a3, a4);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v11 = result;
  if (*(_QWORD *)(v9 + 16))
  {
    v36 = a2;
    v12 = 0;
    v37 = (_QWORD *)(v9 + 64);
    v13 = 1 << *(_BYTE *)(v9 + 32);
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v15 = v14 & *(_QWORD *)(v9 + 64);
    v16 = (unint64_t)(v13 + 63) >> 6;
    v17 = result + 64;
    while (1)
    {
      if (v15)
      {
        v20 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        v21 = v20 | (v12 << 6);
      }
      else
      {
        v22 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        result = v9 + 64;
        if (v22 >= v16)
          goto LABEL_31;
        v23 = v37[v22];
        ++v12;
        if (!v23)
        {
          v12 = v22 + 1;
          if (v22 + 1 >= v16)
            goto LABEL_31;
          v23 = v37[v12];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v16)
            {
LABEL_31:
              if ((v36 & 1) == 0)
              {
                result = swift_release();
                v7 = v6;
                goto LABEL_38;
              }
              v35 = 1 << *(_BYTE *)(v9 + 32);
              if (v35 >= 64)
                bzero(v37, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v37 = -1 << v35;
              v7 = v6;
              *(_QWORD *)(v9 + 16) = 0;
              break;
            }
            v23 = v37[v24];
            if (!v23)
            {
              while (1)
              {
                v12 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_40;
                if (v12 >= v16)
                  goto LABEL_31;
                v23 = v37[v12];
                ++v24;
                if (v23)
                  goto LABEL_21;
              }
            }
            v12 = v24;
          }
        }
LABEL_21:
        v15 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v12 << 6);
      }
      v25 = 8 * v21;
      v26 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + v25);
      v27 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + v25);
      Hasher.init(_seed:)();
      a6(v26);
      result = Hasher._finalize()();
      v28 = -1 << *(_BYTE *)(v11 + 32);
      v29 = result & ~v28;
      v30 = v29 >> 6;
      if (((-1 << v29) & ~*(_QWORD *)(v17 + 8 * (v29 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v17 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v31 = 0;
        v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v33 = v30 == v32;
          if (v30 == v32)
            v30 = 0;
          v31 |= v33;
          v34 = *(_QWORD *)(v17 + 8 * v30);
        }
        while (v34 == -1);
        v18 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(_QWORD *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = 8 * v18;
      *(_QWORD *)(*(_QWORD *)(v11 + 48) + v19) = v26;
      *(_QWORD *)(*(_QWORD *)(v11 + 56) + v19) = v27;
      ++*(_QWORD *)(v11 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v7 = v11;
  return result;
}

unint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t result;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  void *v27;
  id v28;
  uint64_t v29;
  _QWORD *v30;
  int64_t v31;
  _QWORD *v32;
  char v33;
  _QWORD *v34;
  unint64_t v35;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<ContentTransition.NamedKey, RBTransition>();
  v33 = a2;
  v34 = (_QWORD *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(_QWORD *)(v5 + 16))
  {
    v6 = 1 << *(_BYTE *)(v5 + 32);
    v32 = (_QWORD *)(v5 + 64);
    v7 = -1;
    if (v6 < 64)
      v7 = ~(-1 << v6);
    v8 = v7 & *(_QWORD *)(v5 + 64);
    v30 = v2;
    v31 = (unint64_t)(v6 + 63) >> 6;
    result = swift_retain();
    v10 = 0;
    while (1)
    {
      v35 = a2;
      if (v8)
      {
        v13 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v14 = v13 | (v10 << 6);
      }
      else
      {
        v15 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
          __break(1u);
LABEL_31:
          __break(1u);
          return result;
        }
        if (v15 >= v31)
          goto LABEL_24;
        v16 = v32[v15];
        ++v10;
        if (!v16)
        {
          v10 = v15 + 1;
          if (v15 + 1 >= v31)
            goto LABEL_24;
          v16 = v32[v10];
          if (!v16)
          {
            v17 = v15 + 2;
            if (v17 >= v31)
            {
LABEL_24:
              swift_release();
              v3 = v30;
              if ((v33 & 1) != 0)
              {
                v29 = 1 << *(_BYTE *)(v5 + 32);
                if (v29 > 63)
                  bzero(v32, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v32 = -1 << v29;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v16 = v32[v17];
            if (!v16)
            {
              while (1)
              {
                v10 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_31;
                if (v10 >= v31)
                  goto LABEL_24;
                v16 = v32[v10];
                ++v17;
                if (v16)
                  goto LABEL_21;
              }
            }
            v10 = v17;
          }
        }
LABEL_21:
        v8 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v10 << 6);
      }
      v18 = *(_QWORD *)(v5 + 56);
      v19 = v5;
      v20 = *(_QWORD *)(v5 + 48) + 16 * v14;
      v21 = *(_QWORD *)v20;
      v22 = *(unsigned __int8 *)(v20 + 10);
      v23 = *(unsigned __int16 *)(v20 + 8);
      v24 = *(unsigned __int8 *)(v20 + 11);
      v25 = *(unsigned __int8 *)(v20 + 12);
      v26 = *(unsigned __int8 *)(v20 + 13);
      v27 = *(void **)(v18 + 8 * v14);
      if ((v33 & 1) == 0)
        v28 = v27;
      v11 = v35 & 0xFFFF000000000000 | (v23 | (v22 << 16)) & 0xFFFFFF | (v24 << 24) | (v25 << 32);
      v12 = 0x10000000000;
      if (!v26)
        v12 = 0;
      a2 = v11 | v12;
      result = specialized _NativeDictionary._unsafeInsertNew(key:value:)(v21, v11 | v12, (uint64_t)v27, v34);
      v5 = v19;
    }
  }
  result = swift_release();
  *v3 = v34;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2, unint64_t *a3, unint64_t *a4, uint64_t a5, void (*a6)(uint64_t, _BYTE *))
{
  uint64_t *v6;
  uint64_t *v8;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  _BYTE v37[40];

  v8 = v6;
  v10 = *v6;
  type metadata accessor for _DictionaryStorage<ObjectIdentifier, ScrollStateRequest>(0, a3, a4);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v12 = result;
  if (*(_QWORD *)(v10 + 16))
  {
    v13 = 0;
    v36 = (_QWORD *)(v10 + 64);
    v14 = 1 << *(_BYTE *)(v10 + 32);
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v16 = v15 & *(_QWORD *)(v10 + 64);
    v34 = v8;
    v35 = (unint64_t)(v14 + 63) >> 6;
    v17 = result + 64;
    while (1)
    {
      if (v16)
      {
        v19 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        v20 = v19 | (v13 << 6);
      }
      else
      {
        v21 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        result = v10 + 64;
        if (v21 >= v35)
          goto LABEL_34;
        v22 = v36[v21];
        ++v13;
        if (!v22)
        {
          v13 = v21 + 1;
          if (v21 + 1 >= v35)
            goto LABEL_34;
          v22 = v36[v13];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v35)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v8 = v34;
                goto LABEL_41;
              }
              v33 = 1 << *(_BYTE *)(v10 + 32);
              if (v33 >= 64)
                bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v36 = -1 << v33;
              v8 = v34;
              *(_QWORD *)(v10 + 16) = 0;
              break;
            }
            v22 = v36[v23];
            if (!v22)
            {
              while (1)
              {
                v13 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_43;
                if (v13 >= v35)
                  goto LABEL_34;
                v22 = v36[v13];
                ++v23;
                if (v22)
                  goto LABEL_21;
              }
            }
            v13 = v23;
          }
        }
LABEL_21:
        v16 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v13 << 6);
      }
      v24 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v20);
      v25 = *(_QWORD *)(v10 + 56) + 40 * v20;
      if ((a2 & 1) != 0)
        a6(v25, v37);
      else
        outlined init with copy of AnyTrackedValue(v25, (uint64_t)v37);
      result = static Hasher._hash(seed:_:)();
      v26 = -1 << *(_BYTE *)(v12 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v17 + 8 * (v27 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v17 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v17 + 8 * v28);
        }
        while (v32 == -1);
        v18 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * v18) = v24;
      result = ((uint64_t (*)(_BYTE *, unint64_t))a6)(v37, *(_QWORD *)(v12 + 56) + 40 * v18);
      ++*(_QWORD *)(v12 + 16);
    }
  }
  result = swift_release();
LABEL_41:
  *v8 = v12;
  return result;
}

unint64_t specialized _NativeDictionary._unsafeInsertNew(key:value:)(unsigned int a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, _QWORD *a6)
{
  Swift::UInt v12;
  unsigned int v13;
  Swift::UInt v14;
  id v15;
  unint64_t result;
  uint64_t v17;

  v12 = a1 & 1;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v12);
  v13 = (a1 >> 8) & 1;
  Hasher._combine(_:)(v13);
  v14 = HIWORD(a1) & 1;
  Hasher._combine(_:)(v14);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (a4)
  {
    Hasher._combine(_:)(1u);
    v15 = a4;
    NSObject.hash(into:)();

  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._finalize()();
  result = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)((char *)a6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
  v17 = a6[6] + 32 * result;
  *(_BYTE *)v17 = v12;
  *(_BYTE *)(v17 + 1) = v13;
  *(_BYTE *)(v17 + 2) = v14;
  *(_QWORD *)(v17 + 8) = a2;
  *(_QWORD *)(v17 + 16) = a3;
  *(_QWORD *)(v17 + 24) = a4;
  *(_QWORD *)(a6[7] + 8 * result) = a5;
  ++a6[2];
  return result;
}

void specialized _NativeDictionary._unsafeInsertNew(key:value:)(char a1)
{
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

unint64_t sub_234A55B88()
{
  _QWORD *v0;
  __int16 v1;
  uint64_t v2;
  unint64_t result;

  Hasher._combine(_:)(1uLL);
  Hasher._combine(_:)(HIBYTE(v1));
  Hasher._finalize()();
  result = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)((char *)v0 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
  *(_WORD *)(v0[6] + 2 * result) = v1;
  *(_QWORD *)(v0[7] + 8 * result) = v2;
  ++v0[2];
  return result;
}

void sub_234A55C64()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t specialized _NativeDictionary._unsafeInsertNew(key:value:)(Swift::UInt a1, Swift::UInt8 a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t result;

  Hasher.init(_seed:)();
  if (a1)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(a1);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(a2);
  Hasher._finalize()();
  v8 = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)((char *)a4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v8;
  v9 = a4[6] + 16 * v8;
  *(_QWORD *)v9 = a1;
  *(_BYTE *)(v9 + 8) = a2;
  result = outlined init with take of Spacing.Value(a3, a4[7] + 40 * v8);
  ++a4[2];
  return result;
}

__n128 specialized _NativeDictionary._unsafeInsertNew(key:value:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  Swift::UInt v6;
  Swift::UInt v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  __n128 result;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(_QWORD *)a1);
  Hasher._combine(_:)(*(_QWORD *)(a1 + 8));
  Hasher._combine(_:)(*(_QWORD *)(a1 + 16));
  if (*(_BYTE *)(a1 + 32) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 24);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6);
  }
  if (*(_BYTE *)(a1 + 48) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 40);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v7);
  }
  Hasher._finalize()();
  v8 = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)((char *)a3 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v8;
  v9 = a3[6] + 56 * v8;
  v10 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v9 = *(_OWORD *)a1;
  *(_OWORD *)(v9 + 16) = v10;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v9 + 32) = result;
  *(_BYTE *)(v9 + 48) = *(_BYTE *)(a1 + 48);
  *(_QWORD *)(a3[7] + 8 * v8) = a2;
  ++a3[2];
  return result;
}

unint64_t specialized _NativeDictionary._unsafeInsertNew(key:value:)(unint64_t a1, unint64_t a2, Swift::UInt16 a3, uint64_t a4, _QWORD *a5, double a6)
{
  Swift::UInt32 v10;
  Swift::UInt32 v11;
  unint64_t v12;
  unint64_t v13;
  Swift::UInt64 v14;
  unint64_t result;
  uint64_t v16;

  v10 = a2;
  v11 = a1;
  v12 = HIDWORD(a1);
  v13 = HIDWORD(a2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(a3);
  if ((*(_QWORD *)&a6 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v14 = *(_QWORD *)&a6;
  else
    v14 = 0;
  Hasher._combine(_:)(v14);
  Hasher._finalize()();
  result = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)((char *)a5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
  v16 = a5[6] + 32 * result;
  *(_DWORD *)v16 = v11;
  *(_DWORD *)(v16 + 4) = v12;
  *(_DWORD *)(v16 + 8) = v10;
  *(_DWORD *)(v16 + 12) = v13;
  *(_WORD *)(v16 + 16) = a3;
  *(double *)(v16 + 24) = a6;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  ++a5[2];
  return result;
}

unint64_t specialized _NativeDictionary._unsafeInsertNew(key:value:)(unint64_t a1, unint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  unint64_t result;
  uint64_t v10;

  Hasher.init(_seed:)();
  v8 = (a1 >> 38) & 3;
  if ((_DWORD)v8)
  {
    if ((_DWORD)v8 != 1)
      __asm { BR              X10 }
    Hasher._combine(_:)(6uLL);
    ContentTransition.NumericTextConfiguration.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(5uLL);
    Hasher._combine(_:)(a1 & 1);
  }
  if (BYTE3(a2) == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)((a2 >> 24) & 1);
  }
  if (BYTE4(a2) == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(BYTE4(a2));
  }
  Hasher._combine(_:)(BYTE5(a2) & 1);
  Hasher._finalize()();
  result = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)((char *)a4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
  v10 = a4[6] + 16 * result;
  *(_QWORD *)v10 = a1;
  *(_BYTE *)(v10 + 10) = BYTE2(a2);
  *(_WORD *)(v10 + 8) = a2;
  *(_BYTE *)(v10 + 11) = BYTE3(a2);
  *(_BYTE *)(v10 + 12) = BYTE4(a2);
  *(_BYTE *)(v10 + 13) = BYTE5(a2) & 1;
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  ++a4[2];
  return result;
}

void *specialized _NativeDictionary.copy()()
{
  return specialized _NativeDictionary.copy()((unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, Any>);
}

{
  return specialized _NativeDictionary.copy()(&lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, TupleTypeDescription<ViewDescriptor>>, &lazy cache variable for type metadata for TupleTypeDescription<ViewDescriptor>, (uint64_t)&type metadata for ViewDescriptor, (uint64_t)&protocol witness table for ViewDescriptor);
}

{
  return specialized _NativeDictionary.copy()((unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, AnyTrackedValue>, (unint64_t *)&lazy cache variable for type metadata for AnyTrackedValue, (uint64_t)&protocol descriptor for AnyTrackedValue, (uint64_t (*)(_BYTE *, uint64_t))outlined init with take of ScrollStateRequest);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Int, LocalizedStringKey.FormatArgument>(0, &lazy cache variable for type metadata for _DictionaryStorage<AnyHashable, ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item>, (void (*)(uint64_t))type metadata accessor for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    outlined init with copy of AnyHashable(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v23);
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    v17 = *(_QWORD *)(v4 + 48) + 40 * v15;
    v18 = v23[0];
    v19 = v23[1];
    *(_QWORD *)(v17 + 32) = v24;
    *(_OWORD *)v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
    result = (void *)swift_retain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AnyHashable, _ViewList_Edit>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    result = (void *)outlined init with copy of AnyHashable(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v23);
    v16 = *(_BYTE *)(*(_QWORD *)(v2 + 56) + v15);
    v17 = *(_QWORD *)(v4 + 48) + 40 * v15;
    v18 = v24;
    v19 = v23[1];
    *(_OWORD *)v17 = v23[0];
    *(_OWORD *)(v17 + 16) = v19;
    *(_QWORD *)(v17 + 32) = v18;
    *(_BYTE *)(*(_QWORD *)(v4 + 56) + v15) = v16;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Text.Effect.AttributeTracker.Key, Text.Effect.AttributeTracker.AnyValue>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ConstantKey, AGAttribute>, type metadata accessor for AGAttribute, (void (*)(void))lazy protocol witness table accessor for type ConstantKey and conformance ConstantKey);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_23:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v6 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v8 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v9 = 1 << *(_BYTE *)(v2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v2 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v8 << 6);
      goto LABEL_9;
    }
    v21 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v21 >= v12)
      goto LABEL_23;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v8;
    if (!v22)
    {
      v8 = v21 + 1;
      if (v21 + 1 >= v12)
        goto LABEL_23;
      v22 = *(_QWORD *)(v6 + 8 * v8);
      if (!v22)
        break;
    }
LABEL_22:
    v24 = __clz(__rbit64(v22));
    v11 = (v22 - 1) & v22;
    v14 = v24 + (v8 << 6);
LABEL_9:
    v15 = 16 * v14;
    v16 = *(_QWORD *)(v2 + 48) + 16 * v14;
    v17 = *(_QWORD *)v16;
    LOBYTE(v16) = *(_BYTE *)(v16 + 8);
    v18 = 4 * v14;
    v19 = *(_DWORD *)(*(_QWORD *)(v2 + 56) + v18);
    v20 = *(_QWORD *)(v4 + 48) + v15;
    *(_QWORD *)v20 = v17;
    *(_BYTE *)(v20 + 8) = v16;
    *(_DWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
  }
  v23 = v21 + 2;
  if (v23 >= v12)
    goto LABEL_23;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v8 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    v8 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v8 >= v12)
      goto LABEL_23;
    v22 = *(_QWORD *)(v6 + 8 * v8);
    ++v23;
    if (v22)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<ObjectIdentifier, ConditionalTypeDescriptor<ViewDescriptor>>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 24 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(_QWORD *)v19;
    v21 = *(_OWORD *)(v19 + 8);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v22 = *(_QWORD *)(v4 + 56) + v18;
    *(_QWORD *)v22 = v20;
    *(_OWORD *)(v22 + 8) = v21;
    result = (void *)outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(v20);
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, AttributeInfoTrace.History>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      v9 = v26 + 1;
      if (v26 + 1 >= v13)
        goto LABEL_26;
      v27 = *(_QWORD *)(v6 + 8 * v9);
      if (!v27)
        break;
    }
LABEL_25:
    v12 = (v27 - 1) & v27;
    v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 12 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_DWORD *)(v21 + 8);
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v24 = *(_QWORD *)v21;
    *v23 = v19;
    v23[1] = v18;
    v25 = *(_QWORD *)(v4 + 56) + v20;
    *(_QWORD *)v25 = v24;
    *(_DWORD *)(v25 + 8) = v22;
    result = (void *)swift_bridgeObjectRetain();
  }
  v28 = v26 + 2;
  if (v28 >= v13)
    goto LABEL_26;
  v27 = *(_QWORD *)(v6 + 8 * v28);
  if (v27)
  {
    v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v9);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<AGSubgraphRef, [(_:)]>(0, &lazy cache variable for type metadata for _DictionaryStorage<AGSubgraphRef, [(_:)]>, type metadata accessor for AGSubgraphRef, type metadata accessor for [(_:)], (void (*)(void))lazy protocol witness table accessor for type AGSubgraphRef and conformance AGSubgraphRef);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_23:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v6 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v8 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v9 = 1 << *(_BYTE *)(v2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v2 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v8 << 6);
      goto LABEL_9;
    }
    v19 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v12)
      goto LABEL_23;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v8;
    if (!v20)
    {
      v8 = v19 + 1;
      if (v19 + 1 >= v12)
        goto LABEL_23;
      v20 = *(_QWORD *)(v6 + 8 * v8);
      if (!v20)
        break;
    }
LABEL_22:
    v11 = (v20 - 1) & v20;
    v14 = __clz(__rbit64(v20)) + (v8 << 6);
LABEL_9:
    v15 = 8 * v14;
    v16 = *(void **)(*(_QWORD *)(v2 + 48) + v15);
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v15) = v16;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v15) = v17;
    v18 = v16;
    result = (void *)swift_bridgeObjectRetain();
  }
  v21 = v19 + 2;
  if (v21 >= v12)
    goto LABEL_23;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v8 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    v8 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v8 >= v12)
      goto LABEL_23;
    v20 = *(_QWORD *)(v6 + 8 * v8);
    ++v21;
    if (v20)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<UnsafeRawPointer, String>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v18);
    v21 = *v19;
    v20 = v19[1];
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v18);
    *v22 = v21;
    v22[1] = v20;
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, DynamicPropertyCache.Fields>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      v9 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_26;
      v25 = *(_QWORD *)(v6 + 8 * v9);
      if (!v25)
        break;
    }
LABEL_25:
    v12 = (v25 - 1) & v25;
    v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 24 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(_QWORD *)v19;
    v21 = *(_QWORD *)(v19 + 8);
    v22 = *(_BYTE *)(v19 + 16);
    LODWORD(v19) = *(_DWORD *)(v19 + 20);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v23 = *(_QWORD *)(v4 + 56) + v18;
    *(_QWORD *)v23 = v20;
    *(_QWORD *)(v23 + 8) = v21;
    *(_BYTE *)(v23 + 16) = v22;
    *(_DWORD *)(v23 + 20) = v19;
    result = (void *)outlined copy of DynamicPropertyCache.Fields.Layout();
  }
  v26 = v24 + 2;
  if (v26 >= v13)
    goto LABEL_26;
  v25 = *(_QWORD *)(v6 + 8 * v26);
  if (v25)
  {
    v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v9);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<_DisplayList_Identity, _DisplayList_StableIdentity>, (void (*)(void))lazy protocol witness table accessor for type _DisplayList_Identity and conformance _DisplayList_Identity);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v26 = __clz(__rbit64(v24));
    v12 = (v24 - 1) & v24;
    v15 = v26 + (v9 << 6);
LABEL_12:
    v16 = 4 * v15;
    v17 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v15);
    v18 = 24 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(_OWORD *)v19;
    v21 = *(_QWORD *)(v19 + 16);
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v22 = *(_QWORD *)(v4 + 56) + v18;
    *(_OWORD *)v22 = v20;
    *(_QWORD *)(v22 + 16) = v21;
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, UInt32>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 4 * v15;
    LODWORD(v17) = *(_DWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    *(_DWORD *)(*(_QWORD *)(v4 + 56) + v20) = (_DWORD)v17;
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<ScrollTargetRole.Role, [ScrollableCollection]>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
    result = (void *)swift_bridgeObjectRetain();
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  char v27[8];

  v1 = v0;
  v2 = type metadata accessor for URL();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _DictionaryStorage<URL, NamedImage.Cache.WeakCatalog>();
  v6 = *v0;
  v7 = static _DictionaryStorage.copy(original:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v8;
    return result;
  }
  v25 = v1;
  result = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v26 = v6 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v21 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v16)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v21);
    ++v12;
    if (!v22)
    {
      v12 = v21 + 1;
      if (v21 + 1 >= v16)
        goto LABEL_26;
      v22 = *(_QWORD *)(v26 + 8 * v12);
      if (!v22)
        break;
    }
LABEL_25:
    v15 = (v22 - 1) & v22;
    v18 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v3 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v19, v2);
    v20 = 8 * v18;
    outlined init with copy of NamedImage.Cache.WeakCatalog(*(_QWORD *)(v6 + 56) + v20, (uint64_t)v27);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v19, v5, v2);
    result = (void *)outlined init with take of NamedImage.Cache.WeakCatalog((uint64_t)v27, *(_QWORD *)(v8 + 56) + v20);
  }
  v23 = v21 + 2;
  if (v23 >= v16)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v22 = *(_QWORD *)(v26 + 8 * v23);
  if (v22)
  {
    v12 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v12);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Font.RatioKey, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type Font.RatioKey and conformance Font.RatioKey);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v23 = __clz(__rbit64(v21));
    v12 = (v21 - 1) & v21;
    v15 = v23 + (v9 << 6);
LABEL_12:
    v16 = 2 * v15;
    v17 = *(_WORD *)(*(_QWORD *)(v2 + 48) + 2 * v15);
    v18 = 8 * v15;
    v19 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_WORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<String, Any>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    outlined init with copy of Any(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    outlined init with take of Any(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<ObjectIdentifier, [DisplayList.ViewUpdater.ViewCache.PendingAsyncValue]>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    result = (void *)swift_bridgeObjectRetain();
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *result;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  int64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  const void *v40;
  int64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  __int128 v48;

  v1 = type metadata accessor for NamedImage.BitmapKey(0);
  v43 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v42 = (char *)&v38 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _DictionaryStorage<NamedImage.BitmapKey, NamedImage.BitmapInfo>();
  v39 = v0;
  v3 = *v0;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = *(_QWORD *)(v3 + 16);
  v45 = v4;
  if (!v5)
  {
    result = (void *)swift_release();
    v37 = v45;
    v36 = v39;
LABEL_28:
    *v36 = v37;
    return result;
  }
  v6 = v4;
  result = (void *)(v4 + 64);
  v8 = (unint64_t)((1 << *(_BYTE *)(v6 + 32)) + 63) >> 6;
  v40 = (const void *)(v3 + 64);
  if (v6 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
  {
    result = memmove(result, v40, 8 * v8);
    v6 = v45;
  }
  v10 = 0;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v44 = v3;
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v41 = (unint64_t)(v11 + 63) >> 6;
  v14 = (uint64_t)v42;
  while (1)
  {
    if (v13)
    {
      v46 = (v13 - 1) & v13;
      v47 = v10;
      v15 = __clz(__rbit64(v13)) | (v10 << 6);
      v16 = v44;
      goto LABEL_12;
    }
    v32 = v10 + 1;
    v16 = v44;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v32 >= v41)
      goto LABEL_26;
    v33 = *((_QWORD *)v40 + v32);
    v34 = v10 + 1;
    if (!v33)
    {
      v34 = v32 + 1;
      if (v32 + 1 >= v41)
        goto LABEL_26;
      v33 = *((_QWORD *)v40 + v34);
      if (!v33)
        break;
    }
LABEL_25:
    v46 = (v33 - 1) & v33;
    v47 = v34;
    v15 = __clz(__rbit64(v33)) + (v34 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v43 + 72) * v15;
    outlined init with copy of TypesettingLanguage(*(_QWORD *)(v16 + 48) + v17, v14, type metadata accessor for NamedImage.BitmapKey);
    v18 = 96 * v15;
    v19 = *(_QWORD *)(v16 + 56) + 96 * v15;
    v20 = *(void **)v19;
    v21 = *(_QWORD *)(v19 + 16);
    v22 = *(_BYTE *)(v19 + 24);
    v23 = *(_QWORD *)(v19 + 32);
    v24 = *(_QWORD *)(v19 + 40);
    v25 = *(_BYTE *)(v19 + 48);
    v48 = *(_OWORD *)(v19 + 56);
    v26 = *(_QWORD *)(v19 + 72);
    v27 = *(_QWORD *)(v19 + 80);
    v28 = *(_BYTE *)(v19 + 88);
    v29 = v45;
    v30 = *(_QWORD *)(v45 + 48) + v17;
    LOBYTE(v17) = *(_BYTE *)(v19 + 8);
    outlined init with take of LocalizedStringKey.FormatArgument(v14, v30, type metadata accessor for NamedImage.BitmapKey);
    v31 = *(_QWORD *)(v29 + 56) + v18;
    *(_QWORD *)v31 = v20;
    *(_BYTE *)(v31 + 8) = v17;
    *(_QWORD *)(v31 + 16) = v21;
    *(_BYTE *)(v31 + 24) = v22;
    *(_QWORD *)(v31 + 32) = v23;
    *(_QWORD *)(v31 + 40) = v24;
    *(_BYTE *)(v31 + 48) = v25;
    *(_OWORD *)(v31 + 56) = v48;
    *(_QWORD *)(v31 + 72) = v26;
    *(_QWORD *)(v31 + 80) = v27;
    *(_BYTE *)(v31 + 88) = v28;
    result = outlined copy of GraphicsImage.Contents(v20, v17);
    v13 = v46;
    v10 = v47;
  }
  v35 = v32 + 2;
  if (v35 >= v41)
  {
LABEL_26:
    result = (void *)swift_release();
    v36 = v39;
    v37 = v45;
    goto LABEL_28;
  }
  v33 = *((_QWORD *)v40 + v35);
  if (v33)
  {
    v34 = v35;
    goto LABEL_25;
  }
  while (1)
  {
    v34 = v35 + 1;
    if (__OFADD__(v35, 1))
      break;
    if (v34 >= v41)
      goto LABEL_26;
    v33 = *((_QWORD *)v40 + v34);
    ++v35;
    if (v33)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Int, LocalizedStringKey.FormatArgument>(0, &lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, AnyFontModifier>, (void (*)(uint64_t))type metadata accessor for AnyFontModifier);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    result = (void *)swift_retain();
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Int, LocalizedStringKey.FormatArgument>(0, &lazy cache variable for type metadata for _DictionaryStorage<String, AnyFontModifier>, (void (*)(uint64_t))type metadata accessor for AnyFontModifier);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = (void *)swift_retain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;

  v1 = v0;
  v2 = type metadata accessor for LocalizedStringKey.FormatArgument(0);
  v28 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _DictionaryStorage<Int, LocalizedStringKey.FormatArgument>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Int, LocalizedStringKey.FormatArgument>, v5);
  v6 = *v0;
  v7 = static _DictionaryStorage.copy(original:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v8;
    return result;
  }
  v26 = v1;
  result = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v27 = v6 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v22 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v16)
      goto LABEL_26;
    v23 = *(_QWORD *)(v27 + 8 * v22);
    ++v12;
    if (!v23)
    {
      v12 = v22 + 1;
      if (v22 + 1 >= v16)
        goto LABEL_26;
      v23 = *(_QWORD *)(v27 + 8 * v12);
      if (!v23)
        break;
    }
LABEL_25:
    v15 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v12 << 6);
LABEL_12:
    v19 = 8 * v18;
    v20 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v18);
    v21 = *(_QWORD *)(v28 + 72) * v18;
    outlined init with copy of TypesettingLanguage(*(_QWORD *)(v6 + 56) + v21, (uint64_t)v4, type metadata accessor for LocalizedStringKey.FormatArgument);
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v19) = v20;
    result = (void *)outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v4, *(_QWORD *)(v8 + 56) + v21, type metadata accessor for LocalizedStringKey.FormatArgument);
  }
  v24 = v22 + 2;
  if (v24 >= v16)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v26;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v27 + 8 * v24);
  if (v23)
  {
    v12 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v23 = *(_QWORD *)(v27 + 8 * v12);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, TupleTypeDescription<StyleContextDescriptor>>, &lazy cache variable for type metadata for TupleTypeDescription<StyleContextDescriptor>, (uint64_t)&type metadata for StyleContextDescriptor, (uint64_t)&protocol witness table for StyleContextDescriptor);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<AnyHashable, Int>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    result = (void *)outlined init with copy of AnyHashable(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v23);
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    v17 = *(_QWORD *)(v4 + 48) + 40 * v15;
    v18 = v23[0];
    v19 = v23[1];
    *(_QWORD *)(v17 + 32) = v24;
    *(_OWORD *)v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<String, CGFloat>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *result;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;

  v38 = type metadata accessor for UUID();
  v1 = *(_QWORD *)(v38 - 8);
  MEMORY[0x24BDAC7A8](v38);
  v37 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _DictionaryStorage<UUID, NamedImage.DecodedInfo>();
  v34 = v0;
  v3 = *v0;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = *(_QWORD *)(v3 + 16);
  v40 = v4;
  if (!v5)
  {
    result = (void *)swift_release();
    v32 = v40;
    v31 = v34;
LABEL_28:
    *v31 = v32;
    return result;
  }
  v6 = v4;
  result = (void *)(v4 + 64);
  v8 = (unint64_t)((1 << *(_BYTE *)(v6 + 32)) + 63) >> 6;
  if (v6 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
  {
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
    v6 = v40;
  }
  v35 = v3 + 64;
  v10 = 0;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v39 = v3;
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v36 = (unint64_t)(v11 + 63) >> 6;
  v15 = v37;
  v14 = v38;
  v16 = v40;
  while (1)
  {
    if (v13)
    {
      v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v18 = v17 | (v10 << 6);
      v19 = v39;
      goto LABEL_12;
    }
    v28 = v10 + 1;
    v19 = v39;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v28 >= v36)
      goto LABEL_26;
    v29 = *(_QWORD *)(v35 + 8 * v28);
    ++v10;
    if (!v29)
    {
      v10 = v28 + 1;
      if (v28 + 1 >= v36)
        goto LABEL_26;
      v29 = *(_QWORD *)(v35 + 8 * v10);
      if (!v29)
        break;
    }
LABEL_25:
    v13 = (v29 - 1) & v29;
    v18 = __clz(__rbit64(v29)) + (v10 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v1 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v15, *(_QWORD *)(v19 + 48) + v20, v14);
    v21 = 48 * v18;
    v22 = *(_QWORD *)(v19 + 56) + 48 * v18;
    v23 = *(void **)v22;
    v41 = *(_OWORD *)(v22 + 16);
    v24 = *(_QWORD *)(v22 + 32);
    v25 = *(_BYTE *)(v22 + 40);
    v26 = *(_QWORD *)(v16 + 48) + v20;
    LOBYTE(v20) = *(_BYTE *)(v22 + 8);
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(v26, v15, v14);
    v27 = *(_QWORD *)(v16 + 56) + v21;
    *(_QWORD *)v27 = v23;
    *(_BYTE *)(v27 + 8) = v20;
    *(_OWORD *)(v27 + 16) = v41;
    *(_QWORD *)(v27 + 32) = v24;
    *(_BYTE *)(v27 + 40) = v25;
    result = outlined copy of GraphicsImage.Contents(v23, v20);
  }
  v30 = v28 + 2;
  if (v30 >= v36)
  {
LABEL_26:
    result = (void *)swift_release();
    v31 = v34;
    v32 = v40;
    goto LABEL_28;
  }
  v29 = *(_QWORD *)(v35 + 8 * v30);
  if (v29)
  {
    v10 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v10 >= v36)
      goto LABEL_26;
    v29 = *(_QWORD *)(v35 + 8 * v10);
    ++v30;
    if (v29)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&lazy cache variable for type metadata for _DictionaryStorage<Int, Any>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<Int, CGFloat>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v21 = __clz(__rbit64(v19));
    v12 = (v19 - 1) & v19;
    v15 = v21 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Spacing.Key, Spacing.Value>, (void (*)(void))lazy protocol witness table accessor for type Spacing.Key and conformance Spacing.Key);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      v9 = v26 + 1;
      if (v26 + 1 >= v13)
        goto LABEL_26;
      v27 = *(_QWORD *)(v6 + 8 * v9);
      if (!v27)
        break;
    }
LABEL_25:
    v29 = __clz(__rbit64(v27));
    v12 = (v27 - 1) & v27;
    v15 = v29 + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 16 * v15;
    v18 = *(_QWORD *)v17;
    LOBYTE(v17) = *(_BYTE *)(v17 + 8);
    v19 = 40 * v15;
    v20 = *(_QWORD *)(v2 + 56) + v19;
    v21 = *(_BYTE *)(v20 + 32);
    v22 = *(_QWORD *)(v4 + 48) + v16;
    v23 = *(_OWORD *)v20;
    v24 = *(_OWORD *)(v20 + 16);
    *(_QWORD *)v22 = v18;
    *(_BYTE *)(v22 + 8) = v17;
    v25 = *(_QWORD *)(v4 + 56) + v19;
    *(_OWORD *)v25 = v23;
    *(_OWORD *)(v25 + 16) = v24;
    *(_BYTE *)(v25 + 32) = v21;
  }
  v28 = v26 + 2;
  if (v28 >= v13)
    goto LABEL_26;
  v27 = *(_QWORD *)(v6 + 8 * v28);
  if (v27)
  {
    v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v9);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, ScrollStateRequest>, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest, (uint64_t)&protocol descriptor for ScrollStateRequest, (uint64_t (*)(_BYTE *, uint64_t))outlined init with take of ScrollStateRequest);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<ContentStyle.MaterialStyle, [DisplayList.Effect]>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 16 * v15;
    v18 = *(_QWORD *)v17;
    v19 = *(_DWORD *)(v17 + 8);
    LOWORD(v17) = *(_WORD *)(v17 + 12);
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = *(_QWORD *)(v4 + 48) + v16;
    *(_QWORD *)v22 = v18;
    *(_DWORD *)(v22 + 8) = v19;
    *(_WORD *)(v22 + 12) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    outlined copy of Material.ID(v18);
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Material.ResolvedMaterial, [AnyMaterialLayer]>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 16 * v15;
    v18 = *(_QWORD *)v17;
    LODWORD(v17) = *(_DWORD *)(v17 + 8);
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = *(_QWORD *)(v4 + 48) + v16;
    *(_QWORD *)v21 = v18;
    *(_DWORD *)(v21 + 8) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    outlined copy of Material.ID(v18);
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.GlyphIndex, Int>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.GlyphIndex and conformance Text.Effect.GlyphIndex);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<Double, Text.Effect.BaseFragment>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      v9 = v26 + 1;
      if (v26 + 1 >= v13)
        goto LABEL_26;
      v27 = *(_QWORD *)(v6 + 8 * v9);
      if (!v27)
        break;
    }
LABEL_25:
    v12 = (v27 - 1) & v27;
    v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 56 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(_QWORD *)v19;
    v21 = *(_QWORD *)(v19 + 8);
    v22 = *(_QWORD *)(v19 + 48);
    v23 = *(_OWORD *)(v19 + 32);
    v24 = *(_OWORD *)(v19 + 16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v25 = *(_QWORD *)(v4 + 56) + v18;
    *(_QWORD *)v25 = v20;
    *(_QWORD *)(v25 + 8) = v21;
    *(_OWORD *)(v25 + 16) = v24;
    *(_OWORD *)(v25 + 32) = v23;
    *(_QWORD *)(v25 + 48) = v22;
    swift_retain();
    swift_retain();
    result = (void *)swift_retain();
  }
  v28 = v26 + 2;
  if (v28 >= v13)
    goto LABEL_26;
  v27 = *(_QWORD *)(v6 + 8 * v28);
  if (v27)
  {
    v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v9);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.FragmentIdentifier, Int>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  __int128 v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Text.Effect.AttributeTracker.Key, Text.Effect.AttributeTracker.AnyValue>(0, &lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.AttributeTracker.Key, Text.Effect.AttributeTracker.AnyValue>, (void (*)(uint64_t))type metadata accessor for Text.Effect.AttributeTracker.AnyValue, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.AttributeTracker.Key and conformance Text.Effect.AttributeTracker.Key);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      v9 = v27 + 1;
      if (v27 + 1 >= v13)
        goto LABEL_26;
      v28 = *(_QWORD *)(v6 + 8 * v9);
      if (!v28)
        break;
    }
LABEL_25:
    v12 = (v28 - 1) & v28;
    v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    v16 = v15 << 6;
    v17 = 8 * v15;
    v18 = v16 - v17;
    v19 = *(_QWORD *)(v2 + 48) + v18;
    v20 = *(_QWORD *)(v19 + 24);
    v21 = *(_BYTE *)(v19 + 32);
    v22 = *(_QWORD *)(v19 + 40);
    v23 = *(_BYTE *)(v19 + 48);
    v24 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v17);
    v25 = *(_QWORD *)(v4 + 48) + v18;
    v26 = *(_OWORD *)(v19 + 8);
    *(_QWORD *)v25 = *(_QWORD *)v19;
    *(_OWORD *)(v25 + 8) = v26;
    *(_QWORD *)(v25 + 24) = v20;
    *(_BYTE *)(v25 + 32) = v21;
    *(_QWORD *)(v25 + 40) = v22;
    *(_BYTE *)(v25 + 48) = v23;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v17) = v24;
    result = (void *)swift_retain();
  }
  v29 = v27 + 2;
  if (v29 >= v13)
    goto LABEL_26;
  v28 = *(_QWORD *)(v6 + 8 * v29);
  if (v28)
  {
    v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v9);
    ++v29;
    if (v28)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  __int128 v21;
  __int128 v22[2];

  v1 = v0;
  type metadata accessor for _DictionaryStorage<DisplayList.GraphicsRenderer.Cache.AnimatorKey, _DisplayList_AnyEffectAnimator>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v21 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v17 = 40 * v15;
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v2 + 56) + 40 * v15, (uint64_t)v22);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v16) = v21;
    result = (void *)outlined init with take of ScrollStateRequest(v22, *(_QWORD *)(v4 + 56) + v17);
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Text.Effect.AttributeTracker.Key, Text.Effect.AttributeTracker.AnyValue>(0, &lazy cache variable for type metadata for _DictionaryStorage<DisplayList.GraphicsRenderer.Cache.CallbackKey, RBDisplayListContents>, (void (*)(uint64_t))type metadata accessor for RBDisplayListContents, (void (*)(void))lazy protocol witness table accessor for type DisplayList.GraphicsRenderer.Cache.CallbackKey and conformance DisplayList.GraphicsRenderer.Cache.CallbackKey);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_23:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v6 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v8 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v9 = 1 << *(_BYTE *)(v2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v2 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v8 << 6);
      goto LABEL_9;
    }
    v22 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v22 >= v12)
      goto LABEL_23;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v8;
    if (!v23)
    {
      v8 = v22 + 1;
      if (v22 + 1 >= v12)
        goto LABEL_23;
      v23 = *(_QWORD *)(v6 + 8 * v8);
      if (!v23)
        break;
    }
LABEL_22:
    v11 = (v23 - 1) & v23;
    v14 = __clz(__rbit64(v23)) + (v8 << 6);
LABEL_9:
    v15 = 32 * v14;
    v16 = *(_QWORD *)(v2 + 48) + 32 * v14;
    v17 = *(_WORD *)(v16 + 16);
    v18 = *(_QWORD *)(v16 + 24);
    v19 = 8 * v14;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = *(_QWORD *)(v4 + 48) + v15;
    *(_OWORD *)v21 = *(_OWORD *)v16;
    *(_WORD *)(v21 + 16) = v17;
    *(_QWORD *)(v21 + 24) = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    result = (void *)swift_unknownObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v12)
    goto LABEL_23;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v8 = v24;
    goto LABEL_22;
  }
  while (1)
  {
    v8 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v8 >= v12)
      goto LABEL_23;
    v23 = *(_QWORD *)(v6 + 8 * v8);
    ++v24;
    if (v23)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  __int128 v26[2];

  v1 = v0;
  type metadata accessor for _DictionaryStorage<EventID, EventType>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = *v17;
    v19 = v17[1];
    v20 = 40 * v15;
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v2 + 56) + 40 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v18;
    v21[1] = v19;
    result = (void *)outlined init with take of ScrollStateRequest(v26, *(_QWORD *)(v4 + 56) + v20);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, AnyAccessibilityPropertiesEntry>, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry, (uint64_t)&protocol descriptor for AnyAccessibilityPropertiesEntry, (uint64_t (*)(_BYTE *, uint64_t))outlined init with take of ScrollStateRequest);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<AGAttribute, AGAttribute>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v21 = __clz(__rbit64(v19));
    v12 = (v19 - 1) & v19;
    v15 = v21 + (v9 << 6);
LABEL_12:
    v16 = 4 * v15;
    v17 = *(_DWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_DWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_DWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;

  v1 = v0;
  v2 = type metadata accessor for AccessibilityCustomAttributes.Value();
  v30 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _DictionaryStorage<Int, LocalizedStringKey.FormatArgument>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, AccessibilityCustomAttributes.Value>, v5);
  v6 = *v0;
  v7 = static _DictionaryStorage.copy(original:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v8;
    return result;
  }
  v27 = v1;
  result = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v28 = v6 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v29 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v17 = v16 | (v12 << 6);
      goto LABEL_12;
    }
    v24 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v24 >= v29)
      goto LABEL_26;
    v25 = *(_QWORD *)(v28 + 8 * v24);
    ++v12;
    if (!v25)
    {
      v12 = v24 + 1;
      if (v24 + 1 >= v29)
        goto LABEL_26;
      v25 = *(_QWORD *)(v28 + 8 * v12);
      if (!v25)
        break;
    }
LABEL_25:
    v15 = (v25 - 1) & v25;
    v17 = __clz(__rbit64(v25)) + (v12 << 6);
LABEL_12:
    v18 = 16 * v17;
    v19 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v17);
    v20 = *v19;
    v21 = v19[1];
    v22 = *(_QWORD *)(v30 + 72) * v17;
    outlined init with copy of TypesettingLanguage(*(_QWORD *)(v6 + 56) + v22, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityCustomAttributes.Value);
    v23 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v18);
    *v23 = v20;
    v23[1] = v21;
    outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v4, *(_QWORD *)(v8 + 56) + v22, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityCustomAttributes.Value);
    result = (void *)swift_bridgeObjectRetain();
  }
  v26 = v24 + 2;
  if (v26 >= v29)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v27;
    goto LABEL_28;
  }
  v25 = *(_QWORD *)(v28 + 8 * v26);
  if (v25)
  {
    v12 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v12 >= v29)
      goto LABEL_26;
    v25 = *(_QWORD *)(v28 + 8 * v12);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Text.Effect.AttributeTracker.Key, Text.Effect.AttributeTracker.AnyValue>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<_ProposedSize, ViewGraphGeometryObservers<SizeThatFitsMeasurer>.Observer>, type metadata accessor for ViewGraphGeometryObservers<SizeThatFitsMeasurer>.Observer, (void (*)(void))lazy protocol witness table accessor for type _ProposedSize and conformance _ProposedSize);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v29 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v29 >= v13)
      goto LABEL_26;
    v30 = *(_QWORD *)(v6 + 8 * v29);
    ++v9;
    if (!v30)
    {
      v9 = v29 + 1;
      if (v29 + 1 >= v13)
        goto LABEL_26;
      v30 = *(_QWORD *)(v6 + 8 * v9);
      if (!v30)
        break;
    }
LABEL_25:
    v12 = (v30 - 1) & v30;
    v15 = __clz(__rbit64(v30)) + (v9 << 6);
LABEL_12:
    v16 = 32 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 32 * v15;
    v18 = *(_QWORD *)v17;
    v19 = *(_BYTE *)(v17 + 8);
    v20 = *(_QWORD *)(v17 + 16);
    LOBYTE(v17) = *(_BYTE *)(v17 + 24);
    v21 = 56 * v15;
    v22 = *(_QWORD *)(v2 + 56) + v21;
    v23 = *(_BYTE *)(v22 + 32);
    v24 = *(_QWORD *)(v4 + 48) + v16;
    v25 = *(_OWORD *)(v22 + 40);
    v26 = *(_OWORD *)v22;
    v27 = *(_OWORD *)(v22 + 16);
    *(_QWORD *)v24 = v18;
    *(_BYTE *)(v24 + 8) = v19;
    *(_QWORD *)(v24 + 16) = v20;
    *(_BYTE *)(v24 + 24) = v17;
    v28 = *(_QWORD *)(v4 + 56) + v21;
    *(_OWORD *)v28 = v26;
    *(_OWORD *)(v28 + 16) = v27;
    *(_BYTE *)(v28 + 32) = v23;
    *(_OWORD *)(v28 + 40) = v25;
    result = (void *)swift_retain();
  }
  v31 = v29 + 2;
  if (v31 >= v13)
    goto LABEL_26;
  v30 = *(_QWORD *)(v6 + 8 * v31);
  if (v30)
  {
    v9 = v31;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v30 = *(_QWORD *)(v6 + 8 * v9);
    ++v31;
    if (v30)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, ForwardedEventDispatcher>, &lazy cache variable for type metadata for ForwardedEventDispatcher, (uint64_t)&protocol descriptor for ForwardedEventDispatcher, (uint64_t (*)(_BYTE *, uint64_t))outlined init with take of ScrollStateRequest);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  __int16 v23;
  int v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  id v35;
  int64_t v36;
  unint64_t v37;
  int64_t v38;
  void *v39;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<DisplayList.ViewUpdater.ViewCache.Key, DisplayList.ViewUpdater.ViewInfo>, (void (*)(void))lazy protocol witness table accessor for type DisplayList.ViewUpdater.ViewCache.Key and conformance DisplayList.ViewUpdater.ViewCache.Key);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v36 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v36 >= v13)
      goto LABEL_26;
    v37 = *(_QWORD *)(v6 + 8 * v36);
    ++v9;
    if (!v37)
    {
      v9 = v36 + 1;
      if (v36 + 1 >= v13)
        goto LABEL_26;
      v37 = *(_QWORD *)(v6 + 8 * v9);
      if (!v37)
        break;
    }
LABEL_25:
    v12 = (v37 - 1) & v37;
    v15 = __clz(__rbit64(v37)) + (v9 << 6);
LABEL_12:
    v16 = 20 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 20 * v15;
    v18 = *(_BYTE *)(v17 + 16);
    v19 = 120 * v15;
    v20 = *(_QWORD *)(v2 + 56) + v19;
    v21 = *(_QWORD *)(v20 + 16);
    v22 = *(_WORD *)(v20 + 56);
    v23 = *(_WORD *)(v20 + 96);
    v24 = *(_DWORD *)(v20 + 100);
    v25 = *(_BYTE *)(v20 + 104);
    v26 = *(_BYTE *)(v20 + 105);
    v27 = *(_QWORD *)(v20 + 112);
    v28 = *(_QWORD *)(v4 + 48) + v16;
    v30 = *(_OWORD *)(v20 + 64);
    v29 = *(_OWORD *)(v20 + 80);
    v31 = *(_OWORD *)(v20 + 24);
    v32 = *(_OWORD *)(v20 + 40);
    v33 = *(_OWORD *)v20;
    *(_OWORD *)v28 = *(_OWORD *)v17;
    *(_BYTE *)(v28 + 16) = v18;
    v34 = *(_QWORD *)(v4 + 56) + v19;
    *(_OWORD *)v34 = v33;
    v39 = (void *)*((_QWORD *)&v33 + 1);
    *(_QWORD *)(v34 + 16) = v21;
    *(_OWORD *)(v34 + 24) = v31;
    *(_OWORD *)(v34 + 40) = v32;
    *(_WORD *)(v34 + 56) = v22;
    *(_OWORD *)(v34 + 64) = v30;
    *(_OWORD *)(v34 + 80) = v29;
    *(_WORD *)(v34 + 96) = v23;
    *(_DWORD *)(v34 + 100) = v24;
    *(_BYTE *)(v34 + 104) = v25;
    *(_BYTE *)(v34 + 105) = v26;
    *(_QWORD *)(v34 + 112) = v27;
    swift_unknownObjectRetain();
    v35 = v39;
    result = (void *)swift_unknownObjectRetain();
  }
  v38 = v36 + 2;
  if (v38 >= v13)
    goto LABEL_26;
  v37 = *(_QWORD *)(v6 + 8 * v38);
  if (v37)
  {
    v9 = v38;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v38 + 1;
    if (__OFADD__(v38, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v37 = *(_QWORD *)(v6 + 8 * v9);
    ++v38;
    if (v37)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<OpaquePointer, DisplayList.ViewUpdater.ViewCache.Key>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v26 = __clz(__rbit64(v24));
    v12 = (v24 - 1) & v24;
    v15 = v26 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 20 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(_BYTE *)(v19 + 16);
    v21 = *(_OWORD *)v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v22 = *(_QWORD *)(v4 + 56) + v18;
    *(_OWORD *)v22 = v21;
    *(_BYTE *)(v22 + 16) = v20;
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.RelativeIdentifierKey, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.RelativeIdentifierKey and conformance Text.Effect.RelativeIdentifierKey);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v22 = __clz(__rbit64(v20));
    v12 = (v20 - 1) & v20;
    v15 = v22 + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = 8 * v15;
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v17);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v17) = v18;
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *result;
  unint64_t v5;
  BOOL v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Identifier, TextEffectsAnimationController.Timing>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.Identifier and conformance Text.Effect.Identifier);
  v38 = v0;
  v1 = *v0;
  v2 = static _DictionaryStorage.copy(original:)();
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_26:
    v37 = v3;
    result = (void *)swift_release();
    *v38 = v37;
    return result;
  }
  result = (void *)(v2 + 64);
  v5 = (unint64_t)((1 << *(_BYTE *)(v3 + 32)) + 63) >> 6;
  v6 = v3 != v1 || (unint64_t)result >= v1 + 64 + 8 * v5;
  v42 = v3;
  if (v6)
  {
    result = memmove(result, (const void *)(v1 + 64), 8 * v5);
    v3 = v42;
  }
  v40 = v1 + 64;
  v41 = v1;
  v7 = 0;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v1 + 16);
  v8 = 1 << *(_BYTE *)(v1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(v1 + 64);
  v39 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      v11 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v12 = v11 | (v7 << 6);
      v13 = v41;
      v3 = v42;
      goto LABEL_12;
    }
    v34 = v7 + 1;
    v13 = v41;
    v3 = v42;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v34 >= v39)
      goto LABEL_26;
    v35 = *(_QWORD *)(v40 + 8 * v34);
    ++v7;
    if (!v35)
    {
      v7 = v34 + 1;
      if (v34 + 1 >= v39)
        goto LABEL_26;
      v35 = *(_QWORD *)(v40 + 8 * v7);
      if (!v35)
        break;
    }
LABEL_25:
    v10 = (v35 - 1) & v35;
    v12 = __clz(__rbit64(v35)) + (v7 << 6);
LABEL_12:
    v14 = 8 * v12;
    v15 = *(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * v12);
    v16 = 120 * v12;
    v17 = *(_QWORD *)(v13 + 56) + v16;
    v18 = *(_QWORD *)(v17 + 16);
    v19 = *(_BYTE *)(v17 + 24);
    v20 = *(_BYTE *)(v17 + 25);
    v21 = *(_QWORD *)(v17 + 32);
    v22 = *(_BYTE *)(v17 + 40);
    v23 = *(_QWORD *)(v17 + 48);
    v24 = *(_QWORD *)(v17 + 56);
    v25 = *(_QWORD *)(v17 + 64);
    v26 = *(_QWORD *)(v17 + 72);
    v27 = *(_BYTE *)(v17 + 80);
    v28 = *(_QWORD *)(v17 + 88);
    v29 = *(_QWORD *)(v17 + 96);
    v30 = *(_QWORD *)(v17 + 104);
    v31 = *(_BYTE *)(v17 + 112);
    v32 = *(_OWORD *)v17;
    *(_QWORD *)(*(_QWORD *)(v3 + 48) + v14) = v15;
    v33 = *(_QWORD *)(v3 + 56) + v16;
    *(_OWORD *)v33 = v32;
    *(_QWORD *)(v33 + 16) = v18;
    *(_BYTE *)(v33 + 24) = v19;
    *(_BYTE *)(v33 + 25) = v20;
    *(_QWORD *)(v33 + 32) = v21;
    *(_BYTE *)(v33 + 40) = v22;
    *(_QWORD *)(v33 + 48) = v23;
    *(_QWORD *)(v33 + 56) = v24;
    *(_QWORD *)(v33 + 64) = v25;
    *(_QWORD *)(v33 + 72) = v26;
    *(_BYTE *)(v33 + 80) = v27;
    *(_QWORD *)(v33 + 88) = v28;
    *(_QWORD *)(v33 + 96) = v29;
    *(_QWORD *)(v33 + 104) = v30;
    *(_BYTE *)(v33 + 112) = v31;
    swift_retain();
    outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v24, v25, v26, v27);
    result = (void *)outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v28, v29, v30, v31);
  }
  v36 = v34 + 2;
  if (v36 >= v39)
    goto LABEL_26;
  v35 = *(_QWORD *)(v40 + 8 * v36);
  if (v35)
  {
    v7 = v36;
    goto LABEL_25;
  }
  while (1)
  {
    v7 = v36 + 1;
    if (__OFADD__(v36, 1))
      break;
    if (v7 >= v39)
      goto LABEL_26;
    v35 = *(_QWORD *)(v40 + 8 * v7);
    ++v36;
    if (v35)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(type metadata accessor for _DictionaryStorage<Text.Effect.Identifier, Text.Effect.AnyAnimationInfo>);
}

{
  return specialized _NativeDictionary.copy()((void (*)(_QWORD))type metadata accessor for _DictionaryStorage<Text.Effect.Identifier, [Text.Effect.KeyframeLayout.Fragment]>);
}

{
  return specialized _NativeDictionary.copy()(&lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Identifier, Int>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.Identifier and conformance Text.Effect.Identifier);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Key, Text.Effect.KeyframeLayout>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.Key and conformance Text.Effect.Key);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      v9 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_26;
      v25 = *(_QWORD *)(v6 + 8 * v9);
      if (!v25)
        break;
    }
LABEL_25:
    v12 = (v25 - 1) & v25;
    v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = *(_QWORD *)(v2 + 56) + v16;
    v21 = *(_QWORD *)v20;
    LOBYTE(v20) = *(_BYTE *)(v20 + 8);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v19;
    v22[1] = v18;
    v23 = *(_QWORD *)(v4 + 56) + v16;
    *(_QWORD *)v23 = v21;
    *(_BYTE *)(v23 + 8) = v20;
    swift_retain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v26 = v24 + 2;
  if (v26 >= v13)
    goto LABEL_26;
  v25 = *(_QWORD *)(v6 + 8 * v26);
  if (v25)
  {
    v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v9);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Identifier, FragmentIdentifierOffsetMap.Entry>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.Identifier and conformance Text.Effect.Identifier);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v26 = __clz(__rbit64(v24));
    v12 = (v24 - 1) & v24;
    v15 = v26 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 24 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(_QWORD *)(v19 + 16);
    v21 = *(_OWORD *)v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v22 = *(_QWORD *)(v4 + 56) + v18;
    *(_OWORD *)v22 = v21;
    *(_QWORD *)(v22 + 16) = v20;
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(type metadata accessor for _DictionaryStorage<Text.Effect.Identifier, Text.Effect.AnyLayoutState>);
}

{
  return specialized _NativeDictionary.copy()((void (*)(_QWORD))type metadata accessor for _DictionaryStorage<Text.Effect.Identifier, Set<Int>>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Identifier, Text.Effect.BasePhaseConfiguration>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.Identifier and conformance Text.Effect.Identifier);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
    swift_retain();
    result = (void *)swift_retain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.ClusterIndex, Int>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.ClusterIndex and conformance Text.Effect.ClusterIndex);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<_ForegroundLayerLevel, _ColorMatrix>, (void (*)(void))lazy protocol witness table accessor for type _ForegroundLayerLevel and conformance _ForegroundLayerLevel);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v26 = __clz(__rbit64(v24));
    v12 = (v24 - 1) & v24;
    v15 = v26 + (v9 << 6);
LABEL_12:
    v16 = (__int128 *)(*(_QWORD *)(v2 + 56) + 80 * v15);
    v17 = v16[2];
    v18 = v16[3];
    v19 = v16[4];
    v21 = *v16;
    v20 = v16[1];
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    v22 = (_OWORD *)(*(_QWORD *)(v4 + 56) + 80 * v15);
    v22[3] = v18;
    v22[4] = v19;
    v22[1] = v20;
    v22[2] = v17;
    *v22 = v21;
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<EventID, EventBinding>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v19;
    v22[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    result = (void *)swift_retain();
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  _OWORD v26[2];
  uint64_t v27;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<AnyHashable, GraphicsContext.ResolvedSymbol>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    outlined init with copy of AnyHashable(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v26);
    v16 = *(_QWORD *)(v2 + 56) + 24 * v15;
    v17 = *(_QWORD *)v16;
    v18 = *(_QWORD *)(v4 + 48) + 40 * v15;
    v19 = *(_OWORD *)(v16 + 8);
    v20 = v27;
    v21 = v26[1];
    *(_OWORD *)v18 = v26[0];
    *(_OWORD *)(v18 + 16) = v21;
    *(_QWORD *)(v18 + 32) = v20;
    v22 = *(_QWORD *)(v4 + 56) + 24 * v15;
    *(_QWORD *)v22 = v17;
    *(_OWORD *)(v22 + 8) = v19;
    result = (void *)swift_unknownObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<UInt32, Int>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v23 = __clz(__rbit64(v21));
    v12 = (v21 - 1) & v21;
    v15 = v23 + (v9 << 6);
LABEL_12:
    v16 = 4 * v15;
    v17 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v15);
    v18 = 8 * v15;
    v19 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<AGSubgraphRef, [(_:)]>(0, &lazy cache variable for type metadata for _DictionaryStorage<_NSRange, [NSAttributedStringKey : Any]>, type metadata accessor for _NSRange, (void (*)(uint64_t))type metadata accessor for [NSAttributedStringKey : Any], (void (*)(void))lazy protocol witness table accessor for type _NSRange and conformance _NSRange);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_23:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v6 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v8 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v9 = 1 << *(_BYTE *)(v2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v2 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v8 << 6);
      goto LABEL_9;
    }
    v18 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v18 >= v12)
      goto LABEL_23;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v8;
    if (!v19)
    {
      v8 = v18 + 1;
      if (v18 + 1 >= v12)
        goto LABEL_23;
      v19 = *(_QWORD *)(v6 + 8 * v8);
      if (!v19)
        break;
    }
LABEL_22:
    v11 = (v19 - 1) & v19;
    v14 = __clz(__rbit64(v19)) + (v8 << 6);
LABEL_9:
    v15 = 16 * v14;
    v16 = 8 * v14;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v15) = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    result = (void *)swift_bridgeObjectRetain();
  }
  v20 = v18 + 2;
  if (v20 >= v12)
    goto LABEL_23;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v8 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    v8 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v8 >= v12)
      goto LABEL_23;
    v19 = *(_QWORD *)(v6 + 8 * v8);
    ++v20;
    if (v19)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t *v24;
  char v25[8];
  _OWORD v26[2];
  uint64_t v27;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<AnyHashable, WeakBox<AnyLocationBase>>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v24 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    outlined init with copy of AnyHashable(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v26);
    v17 = 8 * v15;
    outlined init with copy of WeakBox<AnyLocationBase>(*(_QWORD *)(v2 + 56) + v17, (uint64_t)v25);
    v18 = *(_QWORD *)(v4 + 48) + v16;
    v19 = v26[0];
    v20 = v26[1];
    *(_QWORD *)(v18 + 32) = v27;
    *(_OWORD *)v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    result = (void *)outlined init with take of (key: NSAttributedStringKey, value: Any)?((uint64_t)v25, *(_QWORD *)(v4 + 56) + v17, &lazy cache variable for type metadata for WeakBox<AnyLocationBase>, (uint64_t (*)(uint64_t))type metadata accessor for AnyLocationBase, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for WeakBox);
  }
  v23 = v21 + 2;
  if (v23 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v24;
    goto LABEL_28;
  }
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<AGSubgraphRef.Map.Key, [ScrapeableContent.Node]>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    v19 = v17;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<ScrollAnchorStorage.Role, UnitPoint>, (void (*)(void))lazy protocol witness table accessor for type ScrollAnchorStorage.Role and conformance ScrollAnchorStorage.Role);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v20 = __clz(__rbit64(v18));
    v12 = (v18 - 1) & v18;
    v15 = v20 + (v9 << 6);
LABEL_12:
    v16 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + 16 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + 16 * v15) = v16;
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  __int128 v28;
  _OWORD v29[3];
  uint64_t v30;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<DisplayList.ViewUpdater.ViewCache.Key, DisplayList.ViewUpdater.ViewCache.AnimatorInfo>, (void (*)(void))lazy protocol witness table accessor for type DisplayList.ViewUpdater.ViewCache.Key and conformance DisplayList.ViewUpdater.ViewCache.Key);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 20 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 20 * v15;
    v18 = *(_BYTE *)(v17 + 16);
    v28 = *(_OWORD *)v17;
    v19 = 56 * v15;
    result = (void *)outlined init with copy of DisplayList.ViewUpdater.ViewCache.AnimatorInfo(*(_QWORD *)(v2 + 56) + 56 * v15, (uint64_t)v29);
    v20 = *(_QWORD *)(v4 + 48) + v16;
    *(_OWORD *)v20 = v28;
    *(_BYTE *)(v20 + 16) = v18;
    v21 = *(_QWORD *)(v4 + 56) + v19;
    v22 = v30;
    v23 = v29[2];
    v24 = v29[1];
    *(_OWORD *)v21 = v29[0];
    *(_OWORD *)(v21 + 16) = v24;
    *(_OWORD *)(v21 + 32) = v23;
    *(_QWORD *)(v21 + 48) = v22;
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, DisplayList.ViewUpdater.ViewCache.AsyncValues>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Int, LocalizedStringKey.FormatArgument>(0, &lazy cache variable for type metadata for _DictionaryStorage<String, Decodable & AnyViewFactory.Type>, (void (*)(uint64_t))type metadata accessor for Decodable & AnyViewFactory.Type);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      v9 = v26 + 1;
      if (v26 + 1 >= v13)
        goto LABEL_26;
      v27 = *(_QWORD *)(v6 + 8 * v9);
      if (!v27)
        break;
    }
LABEL_25:
    v12 = (v27 - 1) & v27;
    v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 24 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_QWORD *)(v21 + 16);
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v24 = *(_OWORD *)v21;
    *v23 = v19;
    v23[1] = v18;
    v25 = *(_QWORD *)(v4 + 56) + v20;
    *(_OWORD *)v25 = v24;
    *(_QWORD *)(v25 + 16) = v22;
    result = (void *)swift_bridgeObjectRetain();
  }
  v28 = v26 + 2;
  if (v28 >= v13)
    goto LABEL_26;
  v27 = *(_QWORD *)(v6 + 8 * v28);
  if (v27)
  {
    v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v9);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, UInt>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v21 = __clz(__rbit64(v19));
    v12 = (v19 - 1) & v19;
    v15 = v21 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<CAHostingLayerEvent.MouseButton, Int>, (void (*)(void))lazy protocol witness table accessor for type CAHostingLayerEvent.MouseButton and conformance CAHostingLayerEvent.MouseButton);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v21 = __clz(__rbit64(v19));
    v12 = (v19 - 1) & v19;
    v15 = v21 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<EventID, EventBindingBridge.TrackedEventState>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      v9 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_26;
      v25 = *(_QWORD *)(v6 + 8 * v9);
      if (!v25)
        break;
    }
LABEL_25:
    v27 = __clz(__rbit64(v25));
    v12 = (v25 - 1) & v25;
    v15 = v27 + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = *(_QWORD *)(v2 + 56) + v16;
    v21 = *(_QWORD *)v20;
    LOBYTE(v20) = *(_BYTE *)(v20 + 8);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v19;
    v22[1] = v18;
    v23 = *(_QWORD *)(v4 + 56) + v16;
    *(_QWORD *)v23 = v21;
    *(_BYTE *)(v23 + 8) = v20;
  }
  v26 = v24 + 2;
  if (v26 >= v13)
    goto LABEL_26;
  v25 = *(_QWORD *)(v6 + 8 * v26);
  if (v25)
  {
    v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v9);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _OWORD v20[2];

  v1 = v0;
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<_ViewDebug.Property, Any>, (void (*)(void))lazy protocol witness table accessor for type _ViewDebug.Property and conformance _ViewDebug.Property);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    outlined init with copy of Any(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v20);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = v16;
    result = outlined init with take of Any(v20, (_OWORD *)(*(_QWORD *)(v4 + 56) + 32 * v15));
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.FragmentIdentifier, Text.Effect.Drawable>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    result = (void *)swift_bridgeObjectRetain();
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<_ProposedSize, Transaction>, (void (*)(void))lazy protocol witness table accessor for type _ProposedSize and conformance _ProposedSize);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      v9 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_26;
      v25 = *(_QWORD *)(v6 + 8 * v9);
      if (!v25)
        break;
    }
LABEL_25:
    v12 = (v25 - 1) & v25;
    v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    v16 = 32 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 32 * v15;
    v18 = *(_QWORD *)v17;
    v19 = *(_BYTE *)(v17 + 8);
    v20 = *(_QWORD *)(v17 + 16);
    LOBYTE(v17) = *(_BYTE *)(v17 + 24);
    v21 = 8 * v15;
    v22 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v21);
    v23 = *(_QWORD *)(v4 + 48) + v16;
    *(_QWORD *)v23 = v18;
    *(_BYTE *)(v23 + 8) = v19;
    *(_QWORD *)(v23 + 16) = v20;
    *(_BYTE *)(v23 + 24) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v21) = v22;
    result = (void *)swift_retain();
  }
  v26 = v24 + 2;
  if (v26 >= v13)
    goto LABEL_26;
  v25 = *(_QWORD *)(v6 + 8 * v26);
  if (v25)
  {
    v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v9);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<TintPlacement, AnyShapeStyle>, (void (*)(void))lazy protocol witness table accessor for type TintPlacement and conformance TintPlacement);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v16 >= v13)
      goto LABEL_26;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_26;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
        break;
    }
LABEL_25:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    result = (void *)swift_retain();
  }
  v18 = v16 + 2;
  if (v18 >= v13)
    goto LABEL_26;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Int, LocalizedStringKey.FormatArgument>(0, &lazy cache variable for type metadata for _DictionaryStorage<Int, ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Item>, (void (*)(uint64_t))type metadata accessor for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Item);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_24:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    if (__OFADD__(v9++, 1))
      goto LABEL_26;
    if (v9 >= v13)
      goto LABEL_24;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    if (!v19)
      break;
LABEL_23:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    result = (void *)swift_retain();
  }
  v20 = v9 + 1;
  if (v9 + 1 >= v13)
    goto LABEL_24;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    ++v9;
    goto LABEL_23;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_24;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_23;
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v18;
  int64_t v19;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Int, _ViewList_Edit>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_24:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    if (__OFADD__(v9++, 1))
      goto LABEL_26;
    if (v9 >= v13)
      goto LABEL_24;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    if (!v18)
      break;
LABEL_23:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = *(_BYTE *)(*(_QWORD *)(v2 + 56) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 56) + v15) = v16;
  }
  v19 = v9 + 1;
  if (v9 + 1 >= v13)
    goto LABEL_24;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    ++v9;
    goto LABEL_23;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_24;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_23;
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

char *specialized _NativeDictionary.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  char v20;
  uint64_t v21;
  int v22;
  char *v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<ResolvedShapeStyles, Attribute<_ShapeStyle_Pack>>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (char *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (char *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = (char *)memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      v9 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_26;
      v25 = *(_QWORD *)(v6 + 8 * v9);
      if (!v25)
        break;
    }
LABEL_25:
    v27 = __clz(__rbit64(v25));
    v12 = (v25 - 1) & v25;
    v15 = v27 + (v9 << 6);
LABEL_12:
    v16 = 24 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 24 * v15;
    v18 = *(_DWORD *)(v17 + 16);
    v19 = *(_BYTE *)(v17 + 20);
    v20 = *(_BYTE *)(v17 + 21);
    v21 = 4 * v15;
    v22 = *(_DWORD *)(*(_QWORD *)(v2 + 56) + v21);
    result = *(char **)(v4 + 48);
    v23 = &result[v16];
    *(_OWORD *)v23 = *(_OWORD *)v17;
    *((_DWORD *)v23 + 4) = v18;
    v23[20] = v19;
    v23[21] = v20;
    *(_DWORD *)(*(_QWORD *)(v4 + 56) + v21) = v22;
  }
  v26 = v24 + 2;
  if (v26 >= v13)
    goto LABEL_26;
  v25 = *(_QWORD *)(v6 + 8 * v26);
  if (v25)
  {
    v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v9);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  __int128 v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Text.Effect.AttributeTracker.Key, Text.Effect.AttributeTracker.AnyValue>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<_ProposedSize, CGSize>, type metadata accessor for CGSize, (void (*)(void))lazy protocol witness table accessor for type _ProposedSize and conformance _ProposedSize);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (char *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (char *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = (char *)memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      v9 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_26;
      v25 = *(_QWORD *)(v6 + 8 * v9);
      if (!v25)
        break;
    }
LABEL_25:
    v27 = __clz(__rbit64(v25));
    v12 = (v25 - 1) & v25;
    v15 = v27 + (v9 << 6);
LABEL_12:
    v16 = 32 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 32 * v15;
    v18 = *(_QWORD *)v17;
    v19 = *(_BYTE *)(v17 + 8);
    v20 = *(_QWORD *)(v17 + 16);
    LOBYTE(v17) = *(_BYTE *)(v17 + 24);
    v21 = 16 * v15;
    result = *(char **)(v4 + 48);
    v22 = &result[v16];
    v23 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v21);
    *(_QWORD *)v22 = v18;
    v22[8] = v19;
    *((_QWORD *)v22 + 2) = v20;
    v22[24] = v17;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v21) = v23;
  }
  v26 = v24 + 2;
  if (v26 >= v13)
    goto LABEL_26;
  v25 = *(_QWORD *)(v6 + 8 * v26);
  if (v25)
  {
    v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v9);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

unint64_t specialized _NativeDictionary.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<CUIDesignLibraryCacheKey, CUIDesignLibraryCacheKey.Entry>, (void (*)(void))lazy protocol witness table accessor for type CUIDesignLibraryCacheKey and conformance CUIDesignLibraryCacheKey);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = swift_release();
    *v1 = v4;
    return result;
  }
  result = v3 + 64;
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || result >= v2 + 64 + 8 * v7)
    result = (unint64_t)memmove((void *)result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v28 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v28);
    ++v9;
    if (!v29)
    {
      v9 = v28 + 1;
      if (v28 + 1 >= v13)
        goto LABEL_26;
      v29 = *(_QWORD *)(v6 + 8 * v9);
      if (!v29)
        break;
    }
LABEL_25:
    v31 = __clz(__rbit64(v29));
    v12 = (v29 - 1) & v29;
    v15 = v31 + (v9 << 6);
LABEL_12:
    v16 = 24 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 24 * v15;
    v18 = *(_QWORD *)v17;
    v19 = *(_BYTE *)(v17 + 8);
    v20 = *(_BYTE *)(v17 + 9);
    result = *(unsigned __int8 *)(v17 + 10);
    v21 = *(_QWORD *)(v17 + 16);
    v22 = 20 * v15;
    v23 = *(_QWORD *)(v2 + 56) + v22;
    v24 = *(_BYTE *)(v23 + 16);
    v25 = *(_QWORD *)(v4 + 48) + v16;
    v26 = *(_OWORD *)v23;
    *(_QWORD *)v25 = v18;
    *(_BYTE *)(v25 + 8) = v19;
    *(_BYTE *)(v25 + 9) = v20;
    *(_BYTE *)(v25 + 10) = result;
    *(_QWORD *)(v25 + 16) = v21;
    v27 = *(_QWORD *)(v4 + 56) + v22;
    *(_OWORD *)v27 = v26;
    *(_BYTE *)(v27 + 16) = v24;
  }
  v30 = v28 + 2;
  if (v30 >= v13)
    goto LABEL_26;
  v29 = *(_QWORD *)(v6 + 8 * v30);
  if (v29)
  {
    v9 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v9);
    ++v30;
    if (v29)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id specialized _NativeDictionary.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  id v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<ColorCacheKey, NamedColorInfo>, (void (*)(void))lazy protocol witness table accessor for type ColorCacheKey and conformance ColorCacheKey);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_23:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v6 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v8 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v9 = 1 << *(_BYTE *)(v2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v2 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v8 << 6);
      goto LABEL_9;
    }
    v26 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v26 >= v12)
      goto LABEL_23;
    v27 = *(_QWORD *)(v6 + 8 * v26);
    ++v8;
    if (!v27)
    {
      v8 = v26 + 1;
      if (v26 + 1 >= v12)
        goto LABEL_23;
      v27 = *(_QWORD *)(v6 + 8 * v8);
      if (!v27)
        break;
    }
LABEL_22:
    v11 = (v27 - 1) & v27;
    v14 = __clz(__rbit64(v27)) + (v8 << 6);
LABEL_9:
    v15 = 32 * v14;
    v16 = *(_QWORD *)(v2 + 48) + 32 * v14;
    v17 = *(_BYTE *)(v16 + 1);
    v18 = *(_BYTE *)(v16 + 2);
    v19 = *(_QWORD *)(v16 + 8);
    v20 = *(_QWORD *)(v16 + 16);
    v21 = 8 * v14;
    v22 = *(void **)(*(_QWORD *)(v2 + 56) + v21);
    v23 = *(void **)(v16 + 24);
    v24 = *(_QWORD *)(v4 + 48) + v15;
    *(_BYTE *)v24 = *(_BYTE *)v16;
    *(_BYTE *)(v24 + 1) = v17;
    *(_BYTE *)(v24 + 2) = v18;
    *(_QWORD *)(v24 + 8) = v19;
    *(_QWORD *)(v24 + 16) = v20;
    *(_QWORD *)(v24 + 24) = v23;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v21) = v22;
    v25 = v22;
    swift_bridgeObjectRetain();
    result = v23;
  }
  v28 = v26 + 2;
  if (v28 >= v12)
    goto LABEL_23;
  v27 = *(_QWORD *)(v6 + 8 * v28);
  if (v27)
  {
    v8 = v28;
    goto LABEL_22;
  }
  while (1)
  {
    v8 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v8 >= v12)
      goto LABEL_23;
    v27 = *(_QWORD *)(v6 + 8 * v8);
    ++v28;
    if (v27)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _OWORD v22[2];

  v1 = v0;
  type metadata accessor for _DictionaryStorage<CFStringRef, Any>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 32 * v15;
    outlined init with copy of Any(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    outlined init with take of Any(v22, (_OWORD *)(*(_QWORD *)(v4 + 56) + v18));
    result = v17;
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  v1 = v0;
  v2 = type metadata accessor for NamedImage.VectorKey(0);
  v34 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _DictionaryStorage<NamedImage.VectorKey, NamedImage.VectorInfo>();
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (id)swift_release();
LABEL_28:
    *v1 = v7;
    return result;
  }
  v31 = v1;
  result = (id)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v32 = v5 + 64;
  v33 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v28 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v28 >= v33)
      goto LABEL_26;
    v29 = *(_QWORD *)(v32 + 8 * v28);
    ++v11;
    if (!v29)
    {
      v11 = v28 + 1;
      if (v28 + 1 >= v33)
        goto LABEL_26;
      v29 = *(_QWORD *)(v32 + 8 * v11);
      if (!v29)
        break;
    }
LABEL_25:
    v14 = (v29 - 1) & v29;
    v16 = __clz(__rbit64(v29)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v34 + 72) * v16;
    outlined init with copy of TypesettingLanguage(*(_QWORD *)(v5 + 48) + v17, (uint64_t)v4, type metadata accessor for NamedImage.VectorKey);
    v18 = 80 * v16;
    v19 = *(_QWORD *)(v5 + 56) + v18;
    v20 = *(void **)v19;
    v21 = *(_BYTE *)(v19 + 8);
    v22 = *(_QWORD *)(v7 + 48) + v17;
    v23 = *(_OWORD *)(v19 + 16);
    v37 = *(_OWORD *)(v19 + 32);
    v38 = v23;
    v24 = *(_OWORD *)(v19 + 48);
    v35 = *(_OWORD *)(v19 + 64);
    v36 = v24;
    outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v4, v22, type metadata accessor for NamedImage.VectorKey);
    v25 = *(_QWORD *)(v7 + 56) + v18;
    *(_QWORD *)v25 = v20;
    *(_BYTE *)(v25 + 8) = v21;
    v26 = v37;
    *(_OWORD *)(v25 + 16) = v38;
    *(_OWORD *)(v25 + 32) = v26;
    v27 = v35;
    *(_OWORD *)(v25 + 48) = v36;
    *(_OWORD *)(v25 + 64) = v27;
    result = v20;
  }
  v30 = v28 + 2;
  if (v30 >= v33)
  {
LABEL_26:
    result = (id)swift_release();
    v1 = v31;
    goto LABEL_28;
  }
  v29 = *(_QWORD *)(v32 + 8 * v30);
  if (v29)
  {
    v11 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v11 >= v33)
      goto LABEL_26;
    v29 = *(_QWORD *)(v32 + 8 * v11);
    ++v30;
    if (v29)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(type metadata accessor for _DictionaryStorage<RBSymbolAnimationOptionKey, Any>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<Text.Effect.AttributeTracker.Key, Text.Effect.AttributeTracker.AnyValue>(0, &lazy cache variable for type metadata for _DictionaryStorage<CachedVectorImageContents.CacheKey, CGImageRef>, type metadata accessor for CGImageRef, (void (*)(void))lazy protocol witness table accessor for type CachedVectorImageContents.CacheKey and conformance CachedVectorImageContents.CacheKey);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = *(void **)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
    result = v16;
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(type metadata accessor for _DictionaryStorage<NSAttributedStringKey, Any>);
}

{
  return specialized _NativeDictionary.copy()((void (*)(_QWORD))type metadata accessor for _DictionaryStorage<RBDisplayListInterpolatorOptionKey, Any>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int16 v20;
  __int16 v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<ContentTransition.NamedKey, RBTransition>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 16 * v15;
    v18 = *(_QWORD *)v17;
    v19 = *(_BYTE *)(v17 + 10);
    v20 = *(_WORD *)(v17 + 8);
    v21 = *(_WORD *)(v17 + 11);
    LOBYTE(v17) = *(_BYTE *)(v17 + 13);
    v22 = 8 * v15;
    v23 = *(void **)(*(_QWORD *)(v2 + 56) + v22);
    v24 = *(_QWORD *)(v4 + 48) + v16;
    *(_QWORD *)v24 = v18;
    *(_WORD *)(v24 + 8) = v20;
    *(_BYTE *)(v24 + 10) = v19;
    *(_WORD *)(v24 + 11) = v21;
    *(_BYTE *)(v24 + 13) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v22) = v23;
    result = v23;
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(type metadata accessor for _DictionaryStorage<Text.Effect.Identifier, AnyTextAnimation>);
}

{
  return specialized _NativeDictionary.copy()(type metadata accessor for _DictionaryStorage<Text.Effect.Identifier, AnyTextEffect>);
}

{
  return specialized _NativeDictionary.copy()(type metadata accessor for _DictionaryStorage<Text.Effect.Identifier, AnyTextFilterEffect>);
}

{
  return specialized _NativeDictionary.copy()(type metadata accessor for _DictionaryStorage<Text.Effect.Identifier, Text.Effect.AnyStateSnapshot>);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int64_t v27;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _DictionaryStorage<AGSubgraphRef, [(_:)]>(0, &lazy cache variable for type metadata for _DictionaryStorage<UUID, TextRenderSurface>, v5, (void (*)(uint64_t))type metadata accessor for TextRenderSurface, (void (*)(void))lazy protocol witness table accessor for type UUID and conformance UUID);
  v25 = v0;
  v6 = *v0;
  v7 = static _DictionaryStorage.copy(original:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v25 = v8;
    return result;
  }
  result = (id)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v26 = v6 + 64;
  v27 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v17 = v16 | (v12 << 6);
      goto LABEL_12;
    }
    v21 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v27)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v21);
    ++v12;
    if (!v22)
    {
      v12 = v21 + 1;
      if (v21 + 1 >= v27)
        goto LABEL_26;
      v22 = *(_QWORD *)(v26 + 8 * v12);
      if (!v22)
        break;
    }
LABEL_25:
    v15 = (v22 - 1) & v22;
    v17 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_12:
    v18 = *(_QWORD *)(v2 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v6 + 48) + v18, v1);
    v19 = 8 * v17;
    v20 = *(void **)(*(_QWORD *)(v6 + 56) + v19);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v8 + 48) + v18, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v19) = v20;
    result = v20;
  }
  v23 = v21 + 2;
  if (v23 >= v27)
    goto LABEL_26;
  v22 = *(_QWORD *)(v26 + 8 * v23);
  if (v22)
  {
    v12 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v12 >= v27)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v12);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(type metadata accessor for _DictionaryStorage<Text.Effect.Identifier, TextAnimator>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  type metadata accessor for _DictionaryStorage<String, CAPresentationModifier>();
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id result;
  uint64_t v5;
  unint64_t v6;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t *v31;

  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<_ViewList_ID.Canonical, CanvasSymbols.Child>, (void (*)(void))lazy protocol witness table accessor for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical);
  v31 = v0;
  v1 = *v0;
  v2 = static _DictionaryStorage.copy(original:)();
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v31 = v3;
    return result;
  }
  result = (id)(v2 + 64);
  v5 = v1 + 64;
  v6 = (unint64_t)((1 << *(_BYTE *)(v3 + 32)) + 63) >> 6;
  if (v3 != v1 || (unint64_t)result >= v1 + 64 + 8 * v6)
    result = memmove(result, (const void *)(v1 + 64), 8 * v6);
  v8 = 0;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v1 + 16);
  v9 = 1 << *(_BYTE *)(v1 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v1 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v8 << 6);
      goto LABEL_12;
    }
    v28 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v12)
      goto LABEL_26;
    v29 = *(_QWORD *)(v5 + 8 * v28);
    ++v8;
    if (!v29)
    {
      v8 = v28 + 1;
      if (v28 + 1 >= v12)
        goto LABEL_26;
      v29 = *(_QWORD *)(v5 + 8 * v8);
      if (!v29)
        break;
    }
LABEL_25:
    v11 = (v29 - 1) & v29;
    v14 = __clz(__rbit64(v29)) + (v8 << 6);
LABEL_12:
    v15 = 16 * v14;
    v16 = (_QWORD *)(*(_QWORD *)(v1 + 48) + 16 * v14);
    v17 = v16[1];
    v18 = 48 * v14;
    v19 = *(_QWORD *)(v1 + 56) + v18;
    v21 = *(void **)v19;
    v20 = *(_QWORD *)(v19 + 8);
    v22 = *(_DWORD *)(v19 + 16);
    v23 = *(_QWORD *)(v19 + 24);
    v24 = *(_QWORD *)(v19 + 40);
    v25 = (_QWORD *)(*(_QWORD *)(v3 + 48) + v15);
    v26 = *(_QWORD *)(v19 + 32);
    *v25 = *v16;
    v25[1] = v17;
    v27 = *(_QWORD *)(v3 + 56) + v18;
    *(_QWORD *)v27 = v21;
    *(_QWORD *)(v27 + 8) = v20;
    *(_DWORD *)(v27 + 16) = v22;
    *(_QWORD *)(v27 + 24) = v23;
    *(_QWORD *)(v27 + 32) = v26;
    *(_QWORD *)(v27 + 40) = v24;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    result = v21;
  }
  v30 = v28 + 2;
  if (v30 >= v12)
    goto LABEL_26;
  v29 = *(_QWORD *)(v5 + 8 * v30);
  if (v29)
  {
    v8 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    v8 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v8 >= v12)
      goto LABEL_26;
    v29 = *(_QWORD *)(v5 + 8 * v8);
    ++v30;
    if (v29)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id specialized _NativeDictionary.copy()(void (*a1)(_QWORD))
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[2];

  v2 = v1;
  a1(0);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v2 = v5;
    return result;
  }
  result = (id)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v20 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v14)
      goto LABEL_26;
    v21 = *(_QWORD *)(v7 + 8 * v20);
    ++v10;
    if (!v21)
    {
      v10 = v20 + 1;
      if (v20 + 1 >= v14)
        goto LABEL_26;
      v21 = *(_QWORD *)(v7 + 8 * v10);
      if (!v21)
        break;
    }
LABEL_25:
    v13 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(void **)(*(_QWORD *)(v3 + 48) + 8 * v16);
    v19 = 32 * v16;
    outlined init with copy of Any(*(_QWORD *)(v3 + 56) + 32 * v16, (uint64_t)v23);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    outlined init with take of Any(v23, (_OWORD *)(*(_QWORD *)(v5 + 56) + v19));
    result = v18;
  }
  v22 = v20 + 2;
  if (v22 >= v14)
    goto LABEL_26;
  v21 = *(_QWORD *)(v7 + 8 * v22);
  if (v21)
  {
    v10 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v21 = *(_QWORD *)(v7 + 8 * v10);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v2 = v1;
  a1(0);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v2 = v5;
    return result;
  }
  result = (id)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v14)
      goto LABEL_26;
    v20 = *(_QWORD *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_26;
      v20 = *(_QWORD *)(v7 + 8 * v10);
      if (!v20)
        break;
    }
LABEL_25:
    v13 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(void **)(*(_QWORD *)(v3 + 56) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = *(_QWORD *)(*(_QWORD *)(v3 + 48) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v17) = v18;
    result = v18;
  }
  v21 = v19 + 2;
  if (v21 >= v14)
    goto LABEL_26;
  v20 = *(_QWORD *)(v7 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v20 = *(_QWORD *)(v7 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v5 = v4;
  type metadata accessor for _DictionaryStorage<ObjectIdentifier, TupleTypeDescription<StyleContextDescriptor>>(0, a1, a2, a3, a4);
  v6 = *v4;
  v7 = static _DictionaryStorage.copy(original:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v5 = v8;
    return result;
  }
  result = (void *)(v7 + 64);
  v10 = v6 + 64;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 64), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 64);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v17)
      goto LABEL_26;
    v23 = *(_QWORD *)(v10 + 8 * v22);
    ++v13;
    if (!v23)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v17)
        goto LABEL_26;
      v23 = *(_QWORD *)(v10 + 8 * v13);
      if (!v23)
        break;
    }
LABEL_25:
    v16 = (v23 - 1) & v23;
    v19 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_12:
    v20 = 8 * v19;
    v21 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + v20);
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v20) = *(_QWORD *)(*(_QWORD *)(v6 + 48) + v20);
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v20) = v21;
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v17)
    goto LABEL_26;
  v23 = *(_QWORD *)(v10 + 8 * v24);
  if (v23)
  {
    v13 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v13 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v13 >= v17)
      goto LABEL_26;
    v23 = *(_QWORD *)(v10 + 8 * v13);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()(unint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[2];

  v2 = v1;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v20 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v14)
      goto LABEL_26;
    v21 = *(_QWORD *)(v7 + 8 * v20);
    ++v10;
    if (!v21)
    {
      v10 = v20 + 1;
      if (v20 + 1 >= v14)
        goto LABEL_26;
      v21 = *(_QWORD *)(v7 + 8 * v10);
      if (!v21)
        break;
    }
LABEL_25:
    v13 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    v19 = 32 * v16;
    outlined init with copy of Any(*(_QWORD *)(v3 + 56) + 32 * v16, (uint64_t)v23);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    result = outlined init with take of Any(v23, (_OWORD *)(*(_QWORD *)(v5 + 56) + v19));
  }
  v22 = v20 + 2;
  if (v22 >= v14)
    goto LABEL_26;
  v21 = *(_QWORD *)(v7 + 8 * v22);
  if (v21)
  {
    v10 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v21 = *(_QWORD *)(v7 + 8 * v10);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()(unint64_t *a1, void (*a2)(void))
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *result;
  uint64_t v8;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;

  v3 = v2;
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, a1, a2);
  v4 = *v2;
  v5 = static _DictionaryStorage.copy(original:)();
  v6 = v5;
  if (!*(_QWORD *)(v4 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v3 = v6;
    return result;
  }
  result = (void *)(v5 + 64);
  v8 = v4 + 64;
  v9 = (unint64_t)((1 << *(_BYTE *)(v6 + 32)) + 63) >> 6;
  if (v6 != v4 || (unint64_t)result >= v4 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v4 + 64), 8 * v9);
  v11 = 0;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v4 + 16);
  v12 = 1 << *(_BYTE *)(v4 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v4 + 64);
  v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v15)
      goto LABEL_26;
    v21 = *(_QWORD *)(v8 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v15)
        goto LABEL_26;
      v21 = *(_QWORD *)(v8 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v23 = __clz(__rbit64(v21));
    v14 = (v21 - 1) & v21;
    v17 = v23 + (v11 << 6);
LABEL_12:
    v18 = 8 * v17;
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + v18);
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + v18) = *(_QWORD *)(*(_QWORD *)(v4 + 48) + v18);
    *(_QWORD *)(*(_QWORD *)(v6 + 56) + v18) = v19;
  }
  v22 = v20 + 2;
  if (v22 >= v15)
    goto LABEL_26;
  v21 = *(_QWORD *)(v8 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v15)
      goto LABEL_26;
    v21 = *(_QWORD *)(v8 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(_BYTE *, uint64_t))
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *result;
  uint64_t v11;
  unint64_t v12;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  _BYTE v28[40];

  v6 = v4;
  type metadata accessor for _DictionaryStorage<ObjectIdentifier, ScrollStateRequest>(0, a1, a2);
  v7 = *v4;
  v8 = static _DictionaryStorage.copy(original:)();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v6 = v9;
    return result;
  }
  v27 = v6;
  result = (void *)(v8 + 64);
  v11 = v7 + 64;
  v12 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v12)
    result = memmove(result, (const void *)(v7 + 64), 8 * v12);
  v14 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
  v15 = 1 << *(_BYTE *)(v7 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v7 + 64);
  v18 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_12;
    }
    v24 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v24 >= v18)
      goto LABEL_26;
    v25 = *(_QWORD *)(v11 + 8 * v24);
    ++v14;
    if (!v25)
    {
      v14 = v24 + 1;
      if (v24 + 1 >= v18)
        goto LABEL_26;
      v25 = *(_QWORD *)(v11 + 8 * v14);
      if (!v25)
        break;
    }
LABEL_25:
    v17 = (v25 - 1) & v25;
    v20 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_12:
    v21 = 8 * v20;
    v22 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v20);
    v23 = 40 * v20;
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v7 + 56) + 40 * v20, (uint64_t)v28);
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + v21) = v22;
    result = (void *)a4(v28, *(_QWORD *)(v9 + 56) + v23);
  }
  v26 = v24 + 2;
  if (v26 >= v18)
  {
LABEL_26:
    result = (void *)swift_release();
    v6 = v27;
    goto LABEL_28;
  }
  v25 = *(_QWORD *)(v11 + 8 * v26);
  if (v25)
  {
    v14 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v14 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v14 >= v18)
      goto LABEL_26;
    v25 = *(_QWORD *)(v11 + 8 * v14);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()(void (*a1)(_QWORD))
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v2 = v1;
  a1(0);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v14)
      goto LABEL_26;
    v20 = *(_QWORD *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_26;
      v20 = *(_QWORD *)(v7 + 8 * v10);
      if (!v20)
        break;
    }
LABEL_25:
    v13 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = *(_QWORD *)(*(_QWORD *)(v3 + 48) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v17) = v18;
    result = (void *)swift_retain();
  }
  v21 = v19 + 2;
  if (v21 >= v14)
    goto LABEL_26;
  v20 = *(_QWORD *)(v7 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v20 = *(_QWORD *)(v7 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v2 = v1;
  a1(0);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v14)
      goto LABEL_26;
    v20 = *(_QWORD *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_26;
      v20 = *(_QWORD *)(v7 + 8 * v10);
      if (!v20)
        break;
    }
LABEL_25:
    v13 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = *(_QWORD *)(*(_QWORD *)(v3 + 48) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v17) = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v21 = v19 + 2;
  if (v21 >= v14)
    goto LABEL_26;
  v20 = *(_QWORD *)(v7 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v20 = *(_QWORD *)(v7 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &lazy cache variable for type metadata for _ContiguousArrayStorage<UInt64>, MEMORY[0x24BEE4568]);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, type metadata accessor for _ContiguousArrayStorage<Date.ComponentsFormatStyle.Field>, (uint64_t (*)(_QWORD))MEMORY[0x24BDCE6C8]);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x24BEE45D0]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, type metadata accessor for _ContiguousArrayStorage<(Int, LocalizedStringKey.FormatArgument)>, (uint64_t (*)(_QWORD))type metadata accessor for (Int, LocalizedStringKey.FormatArgument));
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, type metadata accessor for _ContiguousArrayStorage<LocalizedStringKey.FormatArgument>, type metadata accessor for LocalizedStringKey.FormatArgument);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (void (*)(_QWORD))type metadata accessor for _ContiguousArrayStorage<(Spacing.Key, Spacing.Value)>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (void (*)(_QWORD))type metadata accessor for _ContiguousArrayStorage<(key: Spacing.Key, value: Spacing.Value)>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, (void (*)(_QWORD))type metadata accessor for _ContiguousArrayStorage<[Path]>, &lazy cache variable for type metadata for [Path], (uint64_t)&type metadata for Path);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.PathInterpolator.Glyph>, (uint64_t)&type metadata for Text.Effect.PathInterpolator.Glyph);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, type metadata accessor for _ContiguousArrayStorage<[CGPoint]>, type metadata accessor for [CGPoint]);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, type metadata accessor for _ContiguousArrayStorage<[Path?]>, (void (*)(_QWORD))type metadata accessor for [Path?]);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, (void (*)(_QWORD))type metadata accessor for _ContiguousArrayStorage<[Text.Layout.Cluster]>, &lazy cache variable for type metadata for [Text.Layout.Cluster], (uint64_t)&type metadata for Text.Layout.Cluster);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &lazy cache variable for type metadata for _ContiguousArrayStorage<Int>, MEMORY[0x24BEE1768]);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &lazy cache variable for type metadata for _ContiguousArrayStorage<ScaleRippleTextEffect.Timing.ClusterTiming>, (uint64_t)&type metadata for ScaleRippleTextEffect.Timing.ClusterTiming);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, type metadata accessor for _ContiguousArrayStorage<Text.Effect.SegmentInteraction.Element>, (uint64_t (*)(_QWORD))type metadata accessor for Text.Effect.SegmentInteraction.Element);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, type metadata accessor for _ContiguousArrayStorage<(Text.Effect.RenderSegmentation.Segment, CGPoint)>, (uint64_t (*)(_QWORD))type metadata accessor for (Text.Effect.RenderSegmentation.Segment, CGPoint));
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Timing.UnitGlyphTiming>, (uint64_t)&type metadata for Text.Effect.Timing.UnitGlyphTiming);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CodableAccessibilityCustomContentList.CodableEntry>, (uint64_t)&type metadata for CodableAccessibilityCustomContentList.CodableEntry);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &lazy cache variable for type metadata for _ContiguousArrayStorage<CustomRecursiveStringConvertible>, (unint64_t *)&lazy cache variable for type metadata for CustomRecursiveStringConvertible, (uint64_t)&protocol descriptor for CustomRecursiveStringConvertible);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, type metadata accessor for _ContiguousArrayStorage<[String : [Double]]>, (void (*)(_QWORD))type metadata accessor for [String : [Double]]);
  *v3 = result;
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(arg: UInt64, destructor: (())?)?>, (uint64_t (*)(uint64_t))type metadata accessor for (arg: UInt64, destructor: (())?)?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8)
      memmove(v10 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    type metadata accessor for (arg: UInt64, destructor: (())?)?(0);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>)>, (uint64_t (*)(uint64_t))type metadata accessor for (key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 112);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 112 * v8)
      memmove(v10 + 4, a4 + 4, 112 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 112 * v8 || v12 >= v13 + 112 * v8)
  {
    type metadata accessor for (key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>)();
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;
  _QWORD *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(list: ViewList, attribute: Attribute<ViewList>)>, (uint64_t (*)(uint64_t))type metadata accessor for (list: ViewList, attribute: Attribute<ViewList>), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 4;
  v13 = a4 + 4;
  v14 = 6 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v10 + 4, a4 + 4, v14 * 8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    type metadata accessor for (list: ViewList, attribute: Attribute<ViewList>)();
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, type metadata accessor for _ContiguousArrayStorage<Date.ComponentsFormatStyle.Field>, (uint64_t (*)(_QWORD))MEMORY[0x24BDCE6C8]);
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<NSAttributedStringKey>, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8)
      memmove(v10 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    type metadata accessor for NSAttributedStringKey(0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<(String, String)>();
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 32 * v8)
      memmove(v10 + 4, a4 + 4, 32 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 32 * v8 || v13 >= v14 + 32 * v8)
  {
    type metadata accessor for (Path, FillStyle)(0, (unint64_t *)&lazy cache variable for type metadata for (String, String));
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<(label: String, value: Double)>();
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8)
      memmove(v10 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    type metadata accessor for (proposal: _ProposedSize, value: TextSizeVariant)(0, &lazy cache variable for type metadata for (label: String, value: Double));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<(name: String, value: String)>();
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 32 * v8)
      memmove(v10 + 4, a4 + 4, 32 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 32 * v8 || v13 >= v14 + 32 * v8)
  {
    type metadata accessor for (proposal: _ProposedSize, value: TextSizeVariant)(0, (unint64_t *)&lazy cache variable for type metadata for (name: String, value: String));
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<(String, Double)>();
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8)
      memmove(v10 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    type metadata accessor for (Path, FillStyle)(0, (unint64_t *)&lazy cache variable for type metadata for (String, Double));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 56 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    memcpy(v12, v13, v14);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<(tag: Int, links: _DynamicPropertyBuffer)>();
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8])
      memmove(v12, v13, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    memcpy(v12, v13, 24 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ResolvedGradient.Stop>, (uint64_t)&type metadata for ResolvedGradient.Stop, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 48 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    memcpy(v12, v13, v14);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<LayoutSubviews.Storage.IndexedAttributes>, (uint64_t)&type metadata for LayoutSubviews.Storage.IndexedAttributes, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 12);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[12 * v8])
      memmove(v12, v13, 12 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[12 * v8] || v12 >= &v13[12 * v8])
  {
    memcpy(v12, v13, 12 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Spacing.Key>, (uint64_t)&type metadata for Spacing.Key, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  v15 = 16 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    memcpy(v13, v14, v15);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Float>, MEMORY[0x24BEE14E8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 29;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8])
      memmove(v13, v14, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[4 * v8] || v13 >= &v14[4 * v8])
  {
    memcpy(v13, v14, 4 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Any>, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ResolvableTextSegmentAttribute.Value.Run>, (uint64_t)&type metadata for ResolvableTextSegmentAttribute.Value.Run, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Gradient.Stop>, (uint64_t)&type metadata for Gradient.Stop, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<String>, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Timing.Chunk>, (uint64_t)&type metadata for Text.Effect.Timing.Chunk, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.StopMarkerCollector.Segment.Element>, (uint64_t)&type metadata for Text.Effect.StopMarkerCollector.Segment.Element, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Cluster #1 in static Text.Effect.stopMarkers(_:)>, (uint64_t)&type metadata for Cluster #1 in static Text.Effect.stopMarkers(_:), (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  v15 = 32 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<Range<Int>>();
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Layout.RunSlice>, (uint64_t)&type metadata for Text.Layout.RunSlice, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 + 31;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 6);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[64 * v8])
      memmove(v13, v14, v8 << 6);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[64 * v8] || v13 >= &v14[64 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.StopIndex>, (uint64_t)&type metadata for Text.Effect.StopIndex, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.FlatPath>, (uint64_t)&type metadata for Text.Effect.FlatPath, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8])
      memmove(v12, v13, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.PathInterpolator.PathGlyph>, (uint64_t)&type metadata for Text.Effect.PathInterpolator.PathGlyph, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 + 31;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 6);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[64 * v8])
      memmove(v13, v14, v8 << 6);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[64 * v8] || v13 >= &v14[64 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Path>, (uint64_t)&type metadata for Path, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 40 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CGPoint>, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CGFloat>, MEMORY[0x24BEE50B0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.PathInterpolator.Metrics>, (uint64_t)&type metadata for Text.Effect.PathInterpolator.Metrics, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.BaseFragment>, (uint64_t)&type metadata for Text.Effect.BaseFragment, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[56 * v8])
      memmove(v12, v13, 56 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[56 * v8] || v12 >= &v13[56 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Double>, MEMORY[0x24BEE13C8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<GraphicsContext.ResolvedShading>, (uint64_t)&type metadata for GraphicsContext.ResolvedShading, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 160);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[160 * v8])
      memmove(v12, v13, 160 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[160 * v8] || v12 >= &v13[160 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Layout.Line>, (uint64_t)&type metadata for Text.Layout.Line, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 48 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Edge>, (uint64_t)&type metadata for Edge, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.MarkerLayoutInfo.Element>, (uint64_t)&type metadata for Text.Effect.MarkerLayoutInfo.Element, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 96);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[96 * v8])
      memmove(v12, v13, 96 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[96 * v8] || v12 >= &v13[96 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<Int>, MEMORY[0x24BEE1768]);
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.StopCollector.Segment.Element>, (uint64_t)&type metadata for Text.Effect.StopCollector.Segment.Element, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 96);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[96 * v8])
      memmove(v12, v13, 96 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[96 * v8] || v12 >= &v13[96 * v8])
  {
    memcpy(v12, v13, 96 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CodableAccessibilityDataSeriesConfiguration.ValueDescription>, (uint64_t)&type metadata for CodableAccessibilityDataSeriesConfiguration.ValueDescription, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8])
      memmove(v12, v13, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[40 * v8] || v12 >= &v13[40 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityDataSeriesConfiguration.ValueDescription>, (uint64_t)&type metadata for AccessibilityDataSeriesConfiguration.ValueDescription, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8])
      memmove(v12, v13, 48 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[48 * v8] || v12 >= &v13[48 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, (uint64_t)&type metadata for Text, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CGRect>, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    memcpy(v13, v14, 32 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  int64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<GesturePhase<()>>();
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 31;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = v12 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[2 * v8])
      memmove(v13, v14, 2 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[2 * v8] || v13 >= &v14[2 * v8])
  {
    memcpy(v13, v14, 2 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<LayoutGestureBox.Child>, (uint64_t)&type metadata for LayoutGestureBox.Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 208);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 208 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<PreferencesOutputs>, (uint64_t)&type metadata for PreferencesOutputs, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  v15 = 16 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_ViewList_ID.Canonical>, (uint64_t)&type metadata for _ViewList_ID.Canonical, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnyHashable2>, (uint64_t)&type metadata for AnyHashable2, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ScrapeableContent>, (uint64_t)&type metadata for ScrapeableContent, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CAHostingLayerEvent.Resolved>, (uint64_t)&type metadata for CAHostingLayerEvent.Resolved, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8])
      memmove(v12, v13, 48 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[48 * v8] || v12 >= &v13[48 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4, void (*a5)(_QWORD), uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  a5(0);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_34;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v16 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v16 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v11;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4, void (*a5)(_QWORD))
{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    a5(0);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 56);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  v15 = 56 * v9;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    memcpy(v13, v14, v15);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4, void (*a5)(_QWORD), void (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    a5(0);
    v13 = (_QWORD *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size(v13);
    v15 = v14 - 32;
    if (v14 < 32)
      v15 = v14 - 25;
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 3);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v16 = (unint64_t)(v13 + 4);
  v17 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v13 != a4 || v16 >= v17 + 8 * v11)
      memmove(v13 + 4, a4 + 4, 8 * v11);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v17 >= v16 + 8 * v11 || v16 >= v17 + 8 * v11)
  {
    a6(0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4, void (*a5)(_QWORD), unint64_t *a6, uint64_t a7)
{
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v11 = a4[3];
    v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v12 = a2;
    }
  }
  else
  {
    v12 = a2;
  }
  v13 = a4[2];
  if (v12 <= v13)
    v14 = a4[2];
  else
    v14 = v12;
  if (v14)
  {
    a5(0);
    v15 = (_QWORD *)swift_allocObject();
    v16 = _swift_stdlib_malloc_size(v15);
    v17 = v16 - 32;
    if (v16 < 32)
      v17 = v16 - 25;
    v15[2] = v13;
    v15[3] = 2 * (v17 >> 3);
  }
  else
  {
    v15 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v18 = (unint64_t)(v15 + 4);
  v19 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v15 != a4 || v18 >= v19 + 8 * v13)
      memmove(v15 + 4, a4 + 4, 8 * v13);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v19 >= v18 + 8 * v13 || v18 >= v19 + 8 * v13)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, a6, a7, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v15;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4, unint64_t *a5, uint64_t a6)
{
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v8 = *((_QWORD *)a4 + 3);
    v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) < a2)
    {
      if (v9 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v9 = a2;
    }
  }
  else
  {
    v9 = a2;
  }
  v10 = *((_QWORD *)a4 + 2);
  if (v9 <= v10)
    v11 = *((_QWORD *)a4 + 2);
  else
    v11 = v9;
  if (v11)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, a5, a6, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v12 = (char *)swift_allocObject();
    v13 = _swift_stdlib_malloc_size(v12);
    v14 = v13 - 32;
    if (v13 < 32)
      v14 = v13 - 25;
    *((_QWORD *)v12 + 2) = v10;
    *((_QWORD *)v12 + 3) = 2 * (v14 >> 3);
  }
  else
  {
    v12 = (char *)MEMORY[0x24BEE4AF8];
  }
  v15 = v12 + 32;
  v16 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v12 != a4 || v15 >= &v16[8 * v10])
      memmove(v15, v16, 8 * v10);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v16 >= &v15[8 * v10] || v15 >= &v16[8 * v10])
  {
    memcpy(v15, v16, 8 * v10);
LABEL_30:
    swift_release();
    return (uint64_t)v12;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v8 = *((_QWORD *)a4 + 3);
    v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) < a2)
    {
      if (v9 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v9 = a2;
    }
  }
  else
  {
    v9 = a2;
  }
  v10 = *((_QWORD *)a4 + 2);
  if (v9 <= v10)
    v11 = *((_QWORD *)a4 + 2);
  else
    v11 = v9;
  if (v11)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, a5, a6, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v12 = (char *)swift_allocObject();
    v13 = _swift_stdlib_malloc_size(v12);
    v14 = v13 - 32;
    if (v13 < 32)
      v14 = v13 - 17;
    *((_QWORD *)v12 + 2) = v10;
    *((_QWORD *)v12 + 3) = 2 * (v14 >> 4);
  }
  else
  {
    v12 = (char *)MEMORY[0x24BEE4AF8];
  }
  v15 = v12 + 32;
  v16 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v12 != a4 || v15 >= &v16[16 * v10])
      memmove(v15, v16, 16 * v10);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v16 >= &v15[16 * v10] || v15 >= &v16[16 * v10])
  {
    memcpy(v15, v16, 16 * v10);
LABEL_30:
    swift_release();
    return (uint64_t)v12;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v8 = *((_QWORD *)a4 + 3);
    v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) < a2)
    {
      if (v9 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v9 = a2;
    }
  }
  else
  {
    v9 = a2;
  }
  v10 = *((_QWORD *)a4 + 2);
  if (v9 <= v10)
    v11 = *((_QWORD *)a4 + 2);
  else
    v11 = v9;
  if (v11)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, a5, a6, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v12 = (char *)swift_allocObject();
    v13 = _swift_stdlib_malloc_size(v12);
    *((_QWORD *)v12 + 2) = v10;
    *((_QWORD *)v12 + 3) = 2 * ((uint64_t)(v13 - 32) / 120);
  }
  else
  {
    v12 = (char *)MEMORY[0x24BEE4AF8];
  }
  v14 = v12 + 32;
  v15 = a4 + 32;
  v16 = 120 * v10;
  if ((a1 & 1) != 0)
  {
    if (v12 != a4 || v14 >= &v15[v16])
      memmove(v14, v15, v16);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v15 >= &v14[v16] || v14 >= &v15[v16])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v12;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4, unint64_t *a5, unint64_t *a6, uint64_t a7)
{
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v10 = a4[3];
    v11 = v10 >> 1;
    if ((uint64_t)(v10 >> 1) < a2)
    {
      if (v11 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v11 = a2;
    }
  }
  else
  {
    v11 = a2;
  }
  v12 = a4[2];
  if (v11 <= v12)
    v13 = a4[2];
  else
    v13 = v11;
  if (v13)
  {
    _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v14 = (_QWORD *)swift_allocObject();
    v15 = _swift_stdlib_malloc_size(v14);
    v14[2] = v12;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 40);
  }
  else
  {
    v14 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v16 = (unint64_t)(v14 + 4);
  v17 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v14 != a4 || v16 >= v17 + 40 * v12)
      memmove(v14 + 4, a4 + 4, 40 * v12);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v17 >= v16 + 40 * v12 || v16 >= v17 + 40 * v12)
  {
    type metadata accessor for ScrollStateRequest(0, a6);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v14;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized LazyMapSequence.Iterator.next()()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void (*v11)(uint64_t *__return_ptr, _QWORD *);
  uint64_t result;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  int v21;

  v1 = *v0;
  v3 = v0[3];
  v2 = v0[4];
  v4 = v3;
  if (v2)
  {
    v5 = (v2 - 1) & v2;
    v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    v7 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v6);
    v8 = *v7;
    v9 = v7[1];
    v10 = *(_DWORD *)(*(_QWORD *)(v1 + 56) + 4 * v6);
    v0[3] = v4;
    v0[4] = v5;
    v11 = (void (*)(uint64_t *__return_ptr, _QWORD *))v0[5];
    v20[0] = v8;
    v20[1] = v9;
    v21 = v10;
    swift_bridgeObjectRetain();
    v11(&v19, v20);
    swift_bridgeObjectRelease();
    return v19;
  }
  v13 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v14 = (unint64_t)(v0[2] + 64) >> 6;
    if (v13 < v14)
    {
      v15 = v0[1];
      v16 = *(_QWORD *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_7:
        v5 = (v16 - 1) & v16;
        v6 = __clz(__rbit64(v16)) + (v13 << 6);
        v4 = v13;
        goto LABEL_3;
      }
      v17 = v3 + 2;
      v4 = v3 + 1;
      if (v3 + 2 < v14)
      {
        v16 = *(_QWORD *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_10:
          v13 = v17;
          goto LABEL_7;
        }
        v4 = v3 + 2;
        if (v3 + 3 < v14)
        {
          v16 = *(_QWORD *)(v15 + 8 * (v3 + 3));
          if (v16)
          {
            v13 = v3 + 3;
            goto LABEL_7;
          }
          v17 = v3 + 4;
          v4 = v3 + 3;
          if (v3 + 4 < v14)
          {
            v16 = *(_QWORD *)(v15 + 8 * v17);
            if (v16)
              goto LABEL_10;
            v13 = v3 + 5;
            v4 = v3 + 4;
            if (v3 + 5 < v14)
            {
              v16 = *(_QWORD *)(v15 + 8 * v13);
              if (v16)
                goto LABEL_7;
              v4 = v14 - 1;
              v18 = v3 + 6;
              while (v14 != v18)
              {
                v16 = *(_QWORD *)(v15 + 8 * v18++);
                if (v16)
                {
                  v13 = v18 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *__return_ptr, _QWORD *);
  uint64_t result;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v1 = *v0;
  v3 = v0[3];
  v2 = v0[4];
  v4 = v3;
  if (v2)
  {
    v5 = (v2 - 1) & v2;
    v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    v7 = 8 * v6;
    v8 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v6);
    v9 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + v7);
    v0[3] = v4;
    v0[4] = v5;
    v10 = (void (*)(uint64_t *__return_ptr, _QWORD *))v0[5];
    v19[0] = v8;
    v19[1] = v9;
    v10(&v18, v19);
    return v18;
  }
  v12 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v13 = (unint64_t)(v0[2] + 64) >> 6;
    if (v12 < v13)
    {
      v14 = v0[1];
      v15 = *(_QWORD *)(v14 + 8 * v12);
      if (v15)
      {
LABEL_7:
        v5 = (v15 - 1) & v15;
        v6 = __clz(__rbit64(v15)) + (v12 << 6);
        v4 = v12;
        goto LABEL_3;
      }
      v16 = v3 + 2;
      v4 = v3 + 1;
      if (v3 + 2 < v13)
      {
        v15 = *(_QWORD *)(v14 + 8 * v16);
        if (v15)
        {
LABEL_10:
          v12 = v16;
          goto LABEL_7;
        }
        v4 = v3 + 2;
        if (v3 + 3 < v13)
        {
          v15 = *(_QWORD *)(v14 + 8 * (v3 + 3));
          if (v15)
          {
            v12 = v3 + 3;
            goto LABEL_7;
          }
          v16 = v3 + 4;
          v4 = v3 + 3;
          if (v3 + 4 < v13)
          {
            v15 = *(_QWORD *)(v14 + 8 * v16);
            if (v15)
              goto LABEL_10;
            v12 = v3 + 5;
            v4 = v3 + 4;
            if (v3 + 5 < v13)
            {
              v15 = *(_QWORD *)(v14 + 8 * v12);
              if (v15)
                goto LABEL_7;
              v4 = v13 - 1;
              v17 = v3 + 6;
              while (v13 != v17)
              {
                v15 = *(_QWORD *)(v14 + 8 * v17++);
                if (v15)
                {
                  v12 = v17 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

uint64_t specialized LazyMapSequence.Iterator.next()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  void (*v11)(char *);
  uint64_t result;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  char v19[8];
  uint64_t v20;

  v3 = *v1;
  v5 = v1[3];
  v4 = v1[4];
  v6 = v5;
  if (v4)
  {
    v7 = (v4 - 1) & v4;
    v8 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_3:
    v9 = *(_BYTE *)(*(_QWORD *)(v3 + 48) + v8);
    v10 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v8);
    v1[3] = v6;
    v1[4] = v7;
    v11 = (void (*)(char *))v1[5];
    v19[0] = v9;
    v20 = v10;
    swift_bridgeObjectRetain();
    v11(v19);
    return swift_bridgeObjectRelease();
  }
  v13 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    v14 = (unint64_t)(v1[2] + 64) >> 6;
    if (v13 < v14)
    {
      v15 = v1[1];
      v16 = *(_QWORD *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_7:
        v7 = (v16 - 1) & v16;
        v8 = __clz(__rbit64(v16)) + (v13 << 6);
        v6 = v13;
        goto LABEL_3;
      }
      v17 = v5 + 2;
      v6 = v5 + 1;
      if (v5 + 2 < v14)
      {
        v16 = *(_QWORD *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_10:
          v13 = v17;
          goto LABEL_7;
        }
        v6 = v5 + 2;
        if (v5 + 3 < v14)
        {
          v16 = *(_QWORD *)(v15 + 8 * (v5 + 3));
          if (v16)
          {
            v13 = v5 + 3;
            goto LABEL_7;
          }
          v17 = v5 + 4;
          v6 = v5 + 3;
          if (v5 + 4 < v14)
          {
            v16 = *(_QWORD *)(v15 + 8 * v17);
            if (v16)
              goto LABEL_10;
            v13 = v5 + 5;
            v6 = v5 + 4;
            if (v5 + 5 < v14)
            {
              v16 = *(_QWORD *)(v15 + 8 * v13);
              if (v16)
                goto LABEL_7;
              v6 = v14 - 1;
              v18 = v5 + 6;
              while (v14 != v18)
              {
                v16 = *(_QWORD *)(v15 + 8 * v18++);
                if (v16)
                {
                  v13 = v18 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v1[3] = v6;
    v1[4] = 0;
    *a1 = 0;
    a1[1] = 0;
  }
  return result;
}

uint64_t specialized LazyMapSequence.Iterator.next()@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  id v12;
  int64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  void (*v18)(_OWORD *);
  uint64_t result;
  _OWORD v20[2];
  uint64_t v21;
  _OWORD v22[2];
  uint64_t v23;
  _OWORD v24[2];
  uint64_t v25;

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  v7 = v5;
  v8 = v1[4];
  if (v8)
  {
    v9 = (v8 - 1) & v8;
    v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    v11 = *(void **)(*(_QWORD *)(v3 + 48) + 8 * v10);
    outlined init with copy of Any(*(_QWORD *)(v3 + 56) + 32 * v10, (uint64_t)v24 + 8);
    *(_QWORD *)&v24[0] = v11;
    v12 = v11;
    goto LABEL_23;
  }
  v13 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  v14 = (unint64_t)(v6 + 64) >> 6;
  if (v13 < v14)
  {
    v15 = *(_QWORD *)(v4 + 8 * v13);
    if (v15)
    {
LABEL_7:
      v9 = (v15 - 1) & v15;
      v10 = __clz(__rbit64(v15)) + (v13 << 6);
      v7 = v13;
      goto LABEL_3;
    }
    v16 = v5 + 2;
    v7 = v5 + 1;
    if (v5 + 2 < v14)
    {
      v15 = *(_QWORD *)(v4 + 8 * v16);
      if (v15)
      {
LABEL_10:
        v13 = v16;
        goto LABEL_7;
      }
      v7 = v5 + 2;
      if (v5 + 3 < v14)
      {
        v15 = *(_QWORD *)(v4 + 8 * (v5 + 3));
        if (v15)
        {
          v13 = v5 + 3;
          goto LABEL_7;
        }
        v16 = v5 + 4;
        v7 = v5 + 3;
        if (v5 + 4 < v14)
        {
          v15 = *(_QWORD *)(v4 + 8 * v16);
          if (v15)
            goto LABEL_10;
          v13 = v5 + 5;
          v7 = v5 + 4;
          if (v5 + 5 < v14)
          {
            v15 = *(_QWORD *)(v4 + 8 * v13);
            if (v15)
              goto LABEL_7;
            v7 = v14 - 1;
            v17 = v5 + 6;
            while (v14 != v17)
            {
              v15 = *(_QWORD *)(v4 + 8 * v17++);
              if (v15)
              {
                v13 = v17 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  v9 = 0;
  v25 = 0;
  memset(v24, 0, sizeof(v24));
LABEL_23:
  *v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  v18 = (void (*)(_OWORD *))v1[5];
  result = outlined init with take of (key: NSAttributedStringKey, value: Any)?((uint64_t)v24, (uint64_t)v22, &lazy cache variable for type metadata for (key: NSAttributedStringKey, value: Any)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: NSAttributedStringKey, value: Any), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  if (*(_QWORD *)&v22[0])
  {
    v20[0] = v22[0];
    v20[1] = v22[1];
    v21 = v23;
    v18(v20);
    return outlined destroy of TypesettingConfiguration((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for (key: NSAttributedStringKey, value: Any));
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t (*v11)(int *);
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  int64_t v19;
  int v20;
  __int128 v21;
  uint64_t v22;

  v3 = *v1;
  v5 = v1[3];
  v4 = v1[4];
  v6 = v5;
  if (v4)
  {
    v7 = (v4 - 1) & v4;
    v8 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_3:
    v9 = *(_DWORD *)(*(_QWORD *)(v3 + 48) + 4 * v8);
    v10 = *(_QWORD *)(v3 + 56) + 24 * v8;
    v11 = (uint64_t (*)(int *))v1[5];
    v20 = v9;
    v21 = *(_OWORD *)v10;
    v12 = *(_QWORD *)(v10 + 16);
    v1[3] = v6;
    v1[4] = v7;
    v22 = v12;
    result = v11(&v20);
    *(_BYTE *)(a1 + 28) = 0;
    return result;
  }
  v14 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    v15 = (unint64_t)(v1[2] + 64) >> 6;
    if (v14 < v15)
    {
      v16 = v1[1];
      v17 = *(_QWORD *)(v16 + 8 * v14);
      if (v17)
      {
LABEL_7:
        v7 = (v17 - 1) & v17;
        v8 = __clz(__rbit64(v17)) + (v14 << 6);
        v6 = v14;
        goto LABEL_3;
      }
      v18 = v5 + 2;
      v6 = v5 + 1;
      if (v5 + 2 < v15)
      {
        v17 = *(_QWORD *)(v16 + 8 * v18);
        if (v17)
        {
LABEL_10:
          v14 = v18;
          goto LABEL_7;
        }
        v6 = v5 + 2;
        if (v5 + 3 < v15)
        {
          v17 = *(_QWORD *)(v16 + 8 * (v5 + 3));
          if (v17)
          {
            v14 = v5 + 3;
            goto LABEL_7;
          }
          v18 = v5 + 4;
          v6 = v5 + 3;
          if (v5 + 4 < v15)
          {
            v17 = *(_QWORD *)(v16 + 8 * v18);
            if (v17)
              goto LABEL_10;
            v14 = v5 + 5;
            v6 = v5 + 4;
            if (v5 + 5 < v15)
            {
              v17 = *(_QWORD *)(v16 + 8 * v14);
              if (v17)
                goto LABEL_7;
              v6 = v15 - 1;
              v19 = v5 + 6;
              while (v15 != v19)
              {
                v17 = *(_QWORD *)(v16 + 8 * v19++);
                if (v17)
                {
                  v14 = v19 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v1[3] = v6;
    v1[4] = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 24) = 0;
    *(_BYTE *)(a1 + 28) = 1;
  }
  return result;
}

unint64_t specialized LazyMapSequence.Iterator.next()()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t result;
  __int128 v4;
  char v5;
  void (*v6)(uint64_t *__return_ptr, __int128 *);
  uint64_t v7;
  __int128 v8;
  char v9;

  v1 = v0[3];
  v2 = v0[1];
  if (v1 == *(_QWORD *)(v2 + 16))
    return 0;
  result = LayoutSubviews.subscript.getter(v0[3], (uint64_t)&v8);
  if (v1 >= *(_QWORD *)(v2 + 16))
  {
    __break(1u);
  }
  else
  {
    v4 = v8;
    v5 = v9;
    v0[3] = v1 + 1;
    v6 = (void (*)(uint64_t *__return_ptr, __int128 *))v0[4];
    v8 = v4;
    v9 = v5;
    v6(&v7, &v8);
    return v7;
  }
  return result;
}

void specialized LazyMapSequence.Iterator.next()()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void (*v10)(uint64_t *__return_ptr, _QWORD *);
  id v11;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v1 = *v0;
  v3 = v0[3];
  v2 = v0[4];
  v4 = v3;
  if (v2)
  {
    v5 = (v2 - 1) & v2;
    v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    v7 = 8 * v6;
    v8 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v6);
    v9 = *(void **)(*(_QWORD *)(v1 + 56) + v7);
    v0[3] = v4;
    v0[4] = v5;
    v10 = (void (*)(uint64_t *__return_ptr, _QWORD *))v0[5];
    v19[0] = v8;
    v19[1] = v9;
    v11 = v9;
    v10(&v18, v19);

    return;
  }
  v12 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v13 = (unint64_t)(v0[2] + 64) >> 6;
    if (v12 < v13)
    {
      v14 = v0[1];
      v15 = *(_QWORD *)(v14 + 8 * v12);
      if (v15)
      {
LABEL_7:
        v5 = (v15 - 1) & v15;
        v6 = __clz(__rbit64(v15)) + (v12 << 6);
        v4 = v12;
        goto LABEL_3;
      }
      v16 = v3 + 2;
      v4 = v3 + 1;
      if (v3 + 2 < v13)
      {
        v15 = *(_QWORD *)(v14 + 8 * v16);
        if (v15)
        {
LABEL_10:
          v12 = v16;
          goto LABEL_7;
        }
        v4 = v3 + 2;
        if (v3 + 3 < v13)
        {
          v15 = *(_QWORD *)(v14 + 8 * (v3 + 3));
          if (v15)
          {
            v12 = v3 + 3;
            goto LABEL_7;
          }
          v16 = v3 + 4;
          v4 = v3 + 3;
          if (v3 + 4 < v13)
          {
            v15 = *(_QWORD *)(v14 + 8 * v16);
            if (v15)
              goto LABEL_10;
            v12 = v3 + 5;
            v4 = v3 + 4;
            if (v3 + 5 < v13)
            {
              v15 = *(_QWORD *)(v14 + 8 * v12);
              if (v15)
                goto LABEL_7;
              v4 = v13 - 1;
              v17 = v3 + 6;
              while (v13 != v17)
              {
                v15 = *(_QWORD *)(v14 + 8 * v17++);
                if (v15)
                {
                  v12 = v17 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v0[3] = v4;
    v0[4] = 0;
  }
}

uint64_t specialized LazyMapSequence.Iterator.next()@<X0>(_OWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  void (*v17)(_OWORD *);
  uint64_t result;
  _OWORD v19[3];
  _OWORD v20[2];
  __int128 v21;
  _OWORD v22[3];

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  v7 = v5;
  v8 = v1[4];
  if (v8)
  {
    v9 = (v8 - 1) & v8;
    v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    v11 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v10);
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v3 + 56) + 40 * v10, (uint64_t)v22 + 8);
    *(_QWORD *)&v22[0] = v11;
    goto LABEL_23;
  }
  v12 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  v13 = (unint64_t)(v6 + 64) >> 6;
  if (v12 < v13)
  {
    v14 = *(_QWORD *)(v4 + 8 * v12);
    if (v14)
    {
LABEL_7:
      v9 = (v14 - 1) & v14;
      v10 = __clz(__rbit64(v14)) + (v12 << 6);
      v7 = v12;
      goto LABEL_3;
    }
    v15 = v5 + 2;
    v7 = v5 + 1;
    if (v5 + 2 < v13)
    {
      v14 = *(_QWORD *)(v4 + 8 * v15);
      if (v14)
      {
LABEL_10:
        v12 = v15;
        goto LABEL_7;
      }
      v7 = v5 + 2;
      if (v5 + 3 < v13)
      {
        v14 = *(_QWORD *)(v4 + 8 * (v5 + 3));
        if (v14)
        {
          v12 = v5 + 3;
          goto LABEL_7;
        }
        v15 = v5 + 4;
        v7 = v5 + 3;
        if (v5 + 4 < v13)
        {
          v14 = *(_QWORD *)(v4 + 8 * v15);
          if (v14)
            goto LABEL_10;
          v12 = v5 + 5;
          v7 = v5 + 4;
          if (v5 + 5 < v13)
          {
            v14 = *(_QWORD *)(v4 + 8 * v12);
            if (v14)
              goto LABEL_7;
            v7 = v13 - 1;
            v16 = v5 + 6;
            while (v13 != v16)
            {
              v14 = *(_QWORD *)(v4 + 8 * v16++);
              if (v14)
              {
                v12 = v16 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  v9 = 0;
  memset(v22, 0, sizeof(v22));
LABEL_23:
  *v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  v17 = (void (*)(_OWORD *))v1[5];
  result = outlined init with take of (key: NSAttributedStringKey, value: Any)?((uint64_t)v22, (uint64_t)v20, (unint64_t *)&lazy cache variable for type metadata for (key: ObjectIdentifier, value: AnyTrackedValue)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: ObjectIdentifier, value: AnyTrackedValue), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  if ((_QWORD)v21)
  {
    v19[0] = v20[0];
    v19[1] = v20[1];
    v19[2] = v21;
    v17(v19);
    return outlined destroy of TypesettingConfiguration((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for (key: ObjectIdentifier, value: AnyTrackedValue));
  }
  else
  {
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ZStackLayout and conformance _ZStackLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ZStackLayout and conformance _ZStackLayout;
  if (!lazy protocol witness table cache variable for type _ZStackLayout and conformance _ZStackLayout)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ZStackLayout, &type metadata for _ZStackLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ZStackLayout and conformance _ZStackLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ZStackLayout and conformance _ZStackLayout;
  if (!lazy protocol witness table cache variable for type _ZStackLayout and conformance _ZStackLayout)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ZStackLayout, &type metadata for _ZStackLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ZStackLayout and conformance _ZStackLayout);
  }
  return result;
}

uint64_t specialized _ZStackLayout.placeSubviews(in:proposal:subviews:cache:)(int *a1, double a2, double a3, double a4, double a5, uint64_t a6, unint64_t a7, unint64_t a8)
{
  uint64_t v8;
  char v9;
  unint64_t v10;
  int *v11;
  char v12;
  double v13;
  double v14;
  unint64_t v15;
  double *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  int *v21;
  int *v22;
  double v23;
  unint64_t v24;
  int *v25;
  int *v26;
  int v27;
  int v28;
  uint64_t *InputValue;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  double v35;
  uint64_t (*v36)();
  uint64_t v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  unint64_t v43;
  unint64_t v44;
  int *v45;
  int *v46;
  double v47;
  CGFloat v48;
  CGFloat v49;
  CGFloat v50;
  double MaxX;
  int *v52;
  int v53;
  int *v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  CGFloat v59;
  CGFloat v60;
  uint64_t (*v61)();
  uint64_t v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v72;
  uint64_t v73;
  double *v74;
  uint64_t v75;
  double v76;
  double v77;
  uint64_t result;
  int v79;
  uint64_t v80;
  double v81;
  _DWORD *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v91;
  double v92;
  int v95;
  char v96;
  double v97;
  char v98;
  double v99;
  char v100;
  int v101;
  int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  double v106;
  double v107;
  uint64_t (*v108)();
  uint64_t v109;
  CGRect v110;
  CGRect v111;

  v8 = *((_QWORD *)a1 + 1);
  v9 = *((_BYTE *)a1 + 17);
  v95 = *a1;
  v96 = *((_BYTE *)a1 + 16);
  LODWORD(v104) = *a1;
  v105 = v8;
  LOBYTE(v106) = v96;
  BYTE1(v106) = v9;
  v107 = 0.0;
  v108 = closure #1 in _ZStackLayout.placeSubviews(in:proposal:subviews:cache:);
  v109 = 0;
  swift_bridgeObjectRetain_n();
  *(double *)&v10 = COERCE_DOUBLE(specialized LazyMapSequence.Iterator.next()());
  v11 = (int *)MEMORY[0x24BE096C0];
  if ((v12 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v13 = 0.0;
    goto LABEL_5;
  }
  v13 = *(double *)&v10;
  v14 = v107;
  v15 = *(_QWORD *)(v8 + 16);
  if (*(_QWORD *)&v107 == v15)
  {
LABEL_3:
    swift_bridgeObjectRelease_n();
LABEL_5:
    *(double *)(swift_allocObject() + 16) = v13;
    v16 = (double *)swift_allocObject();
    v16[2] = a2;
    v16[3] = a3;
    v16[4] = a4;
    v16[5] = a5;
    v17 = v8 + 32;
    v18 = *v11;
    swift_bridgeObjectRetain_n();
    swift_retain();
    swift_retain();
    v19 = 0;
    v20 = v8 + 36;
    v91 = -INFINITY;
    v92 = -INFINITY;
LABEL_6:
    v21 = (int *)(v20 + 8 * v19);
    v22 = (int *)(v17 + 12 * v19);
    while (1)
    {
      v24 = *(_QWORD *)(v8 + 16);
      if (v19 == v24)
        break;
      if ((v96 & 1) != 0)
      {
        if (v19 >= v24)
          goto LABEL_85;
        v25 = (int *)(v17 + 12 * v19 + 4);
        v26 = v22;
      }
      else
      {
        if (v19 >= v24)
          goto LABEL_86;
        v26 = (int *)(v17 + 8 * v19);
        v25 = v21;
      }
      if (v19 >= v24)
      {
        __break(1u);
        goto LABEL_82;
      }
      v27 = *v25;
      v28 = *v26;
      if (*v26 == v18)
      {
        InputValue = (uint64_t *)&static LayoutComputer.defaultValue;
        if (one-time initialization token for defaultValue != -1)
        {
          swift_once();
          InputValue = (uint64_t *)&static LayoutComputer.defaultValue;
        }
      }
      else
      {
        InputValue = (uint64_t *)AGGraphGetInputValue();
      }
      v30 = *InputValue;
      v31 = one-time initialization token for lockAssertionsAreEnabled;
      swift_retain();
      if (v31 != -1)
        swift_once();
      if (lockAssertionsAreEnabled)
      {
        if (one-time initialization token for _lock != -1)
          swift_once();
        if (!_MovableLockIsOwner(static Update._lock))
          goto LABEL_95;
      }
      v21 += 2;
      v22 += 3;
      ++v19;
      v23 = (*(double (**)(void))(*(_QWORD *)v30 + 88))();
      swift_release();
      if (v23 == v13)
      {
        v101 = v95;
        v102 = v28;
        v103 = v27;
        v97 = a4;
        v98 = 0;
        v99 = a5;
        v100 = 0;
        LayoutProxy.dimensions(in:)((uint64_t)&v97, (uint64_t)&v104);
        v33 = v104;
        v32 = v105;
        v34 = v106;
        v35 = v107;
        v36 = v108;
        v37 = v109;
        ViewDimensions.subscript.getter(a7);
        v39 = v92;
        if (v92 <= v38)
          v39 = v38;
        v92 = v39;
        v104 = v33;
        v105 = v32;
        v106 = v34;
        v107 = v35;
        v108 = v36;
        v109 = v37;
        ViewDimensions.subscript.getter(a8);
        v41 = v40;
        swift_release();
        v42 = v91;
        if (v91 <= v41)
          v42 = v41;
        v91 = v42;
        v20 = v8 + 36;
        goto LABEL_6;
      }
    }
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease_n();
    v43 = *(_QWORD *)(v8 + 16);
    swift_bridgeObjectRetain();
    if (!v43)
      return swift_bridgeObjectRelease();
    v44 = 0;
    v45 = (int *)(v8 + 36);
    v46 = (int *)(v8 + 32);
    v86 = v8;
    while (1)
    {
      if ((v96 & 1) != 0)
      {
        if (v44 >= v43)
          goto LABEL_87;
        v52 = (int *)(v17 + 12 * v44);
        v53 = v45[1];
        v54 = v45;
      }
      else
      {
        if (v44 >= v43)
          goto LABEL_88;
        v54 = (int *)(v17 + 8 * v44 + 4);
        v53 = v44;
        v52 = v46;
      }
      if (v44 >= v43)
        break;
      v55 = *v52;
      v56 = *v54;
      v101 = v95;
      v102 = v55;
      v103 = v56;
      v97 = a4;
      v98 = 0;
      v99 = a5;
      v100 = 0;
      LayoutProxy.dimensions(in:)((uint64_t)&v97, (uint64_t)&v104);
      v58 = v104;
      v57 = v105;
      v59 = v106;
      v60 = v107;
      v61 = v108;
      v62 = v109;
      ViewDimensions.subscript.getter(a7);
      v64 = v63;
      v104 = v58;
      v105 = v57;
      v106 = v59;
      v107 = v60;
      v108 = v61;
      v109 = v62;
      ViewDimensions.subscript.getter(a8);
      if (v92 == v64)
        v66 = -0.0;
      else
        v66 = v92 - v64;
      if (v91 == v65)
        v67 = -0.0;
      else
        v67 = v91 - v65;
      swift_retain();
      v68 = _threadLayoutData();
      if (!v68)
        goto LABEL_94;
      v69 = v68;
      if ((*(_BYTE *)v68 & 1) != 0)
        goto LABEL_83;
      v70 = *(_QWORD **)(v68 + 8);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v69 + 8) = v70;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if (v53 < 0)
          goto LABEL_57;
      }
      else
      {
        v70 = specialized _ArrayBuffer._consumeAndCreateNew()(v70);
        *(_QWORD *)(v69 + 8) = v70;
        if (v53 < 0)
        {
LABEL_57:
          __break(1u);
          return swift_bridgeObjectRelease();
        }
      }
      if (v70[2] <= v53)
        goto LABEL_84;
      v72 = &v70[8 * (uint64_t)v53];
      v75 = v72[4];
      v74 = (double *)(v72 + 4);
      v73 = v75;
      swift_release();
      if ((~v75 & 0x7FF0000000000000) == 0 && (v73 & 0xFFFFFFFFFFFFFLL) != 0)
        ++*(_QWORD *)(v69 + 16);
      v76 = v66 + a2;
      v77 = v67 + a3;
      *v74 = v66 + a2;
      v74[1] = v67 + a3;
      *((_QWORD *)v74 + 2) = v58;
      *((_QWORD *)v74 + 3) = v57;
      v74[4] = v59;
      v74[5] = v60;
      *((_QWORD *)v74 + 6) = v61;
      *((_QWORD *)v74 + 7) = v62;
      if ((*(_BYTE *)(v69 + 56) & 1) != 0)
      {
        v47 = *(double *)(v69 + 24);
        v48 = *(double *)(v69 + 32);
        v49 = *(double *)(v69 + 40);
        v50 = *(double *)(v69 + 48);
        swift_retain();
        v110.origin.x = v47;
        v110.origin.y = v48;
        v110.size.width = v49;
        v110.size.height = v50;
        MaxX = CGRectGetMaxX(v110);
        v111.origin.x = v76;
        v111.origin.y = v77;
        v111.size.width = v59;
        v111.size.height = v60;
        *v74 = MaxX - (CGRectGetMaxX(v111) - v47);
      }
      else
      {
        swift_retain();
      }
      ++v44;
      swift_release_n();
      v43 = *(_QWORD *)(v86 + 16);
      v46 += 2;
      v45 += 3;
      if (v44 == v43)
        return swift_bridgeObjectRelease();
    }
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
LABEL_94:
    __break(1u);
    goto LABEL_95;
  }
  v79 = *MEMORY[0x24BE096C0];
  v80 = v8 + 32 + 12 * *(_QWORD *)&v107;
  while (1)
  {
    if ((v96 & 1) != 0)
    {
      if ((*(_QWORD *)&v14 & 0x8000000000000000) != 0)
        goto LABEL_90;
      v82 = (_DWORD *)v80;
      if (*(_QWORD *)&v14 >= v15)
        goto LABEL_92;
    }
    else
    {
      if ((*(_QWORD *)&v14 & 0x8000000000000000) != 0)
        goto LABEL_91;
      if (*(_QWORD *)&v14 >= v15)
        goto LABEL_93;
      v82 = (_DWORD *)(v8 + 32 + 8 * *(_QWORD *)&v14);
    }
    if (*(_QWORD *)&v14 >= v15)
      goto LABEL_89;
    if (*v82 == v79)
    {
      v83 = (uint64_t *)&static LayoutComputer.defaultValue;
      if (one-time initialization token for defaultValue != -1)
      {
        swift_once();
        v83 = (uint64_t *)&static LayoutComputer.defaultValue;
      }
    }
    else
    {
      v83 = (uint64_t *)AGGraphGetInputValue();
    }
    v84 = *v83;
    v85 = one-time initialization token for lockAssertionsAreEnabled;
    swift_retain();
    if (v85 != -1)
      swift_once();
    if (lockAssertionsAreEnabled)
    {
      if (one-time initialization token for _lock != -1)
        swift_once();
      if (!_MovableLockIsOwner(static Update._lock))
        break;
    }
    ++*(_QWORD *)&v14;
    v81 = (*(double (**)(void))(*(_QWORD *)v84 + 88))();
    swift_release();
    if (v13 < v81)
      v13 = v81;
    v15 = *(_QWORD *)(v8 + 16);
    v80 += 12;
    if (*(_QWORD *)&v14 == v15)
      goto LABEL_3;
  }
LABEL_95:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_234A66C8C()
{
  return swift_deallocObject();
}

uint64_t sub_234A66C9C()
{
  return swift_deallocObject();
}

uint64_t sub_234A66CAC()
{
  return swift_deallocObject();
}

unint64_t instantiation function for generic protocol witness table for _ZStackLayout(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _ZStackLayout and conformance _ZStackLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for ZStackLayout(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ZStackLayout and conformance ZStackLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type ZStackLayout and conformance ZStackLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ZStackLayout and conformance ZStackLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ZStackLayout and conformance ZStackLayout;
  if (!lazy protocol witness table cache variable for type ZStackLayout and conformance ZStackLayout)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ZStackLayout, &type metadata for ZStackLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ZStackLayout and conformance ZStackLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ZStackLayout and conformance ZStackLayout;
  if (!lazy protocol witness table cache variable for type ZStackLayout and conformance ZStackLayout)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ZStackLayout, &type metadata for ZStackLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ZStackLayout and conformance ZStackLayout);
  }
  return result;
}

uint64_t type metadata instantiation function for ZStack()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for ZStack(uint64_t a1)
{
  uint64_t result;
  unint64_t v2;

  result = type metadata accessor for _VariadicView.Tree(319, (uint64_t)&type metadata for _ZStackLayout, *(_QWORD *)(a1 + 16), (uint64_t)&protocol witness table for _ZStackLayout);
  if (v2 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ZStack(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 16) & (unint64_t)~v5) + *(_QWORD *)(v4 + 64) > 0x18)
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + v5 + 16) & ~v5, ((unint64_t)a2 + v5 + 16) & ~v5);
  }
  return v3;
}

uint64_t destroy for ZStack(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_OWORD *initializeWithCopy for ZStack(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_QWORD *assignWithCopy for ZStack(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_OWORD *initializeWithTake for ZStack(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_OWORD *assignWithTake for ZStack(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for ZStack(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v8 = ((v6 + 16) & ~v6) + *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v6 + 16) & ~v6);
      return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_18;
LABEL_11:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if (!(_DWORD)v8)
    return v5 + v12 + 1;
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234A67144 + 4 * byte_2352801C3[(v8 - 1)]))();
}

void storeEnumTagSinglePayload for ZStack(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((v8 + 16) & ~v8) + *(_QWORD *)(v6 + 64);
  v10 = a3 >= v7;
  v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      v14 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v14))
      {
        v12 = 4u;
      }
      else if (v14 >= 0x100)
      {
        v12 = 2;
      }
      else
      {
        v12 = v14 > 1;
      }
    }
    else
    {
      v12 = 1u;
    }
  }
  else
  {
    v12 = 0;
  }
  if (v7 < a2)
  {
    v13 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v15 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v15;
          *((_BYTE *)a1 + 2) = BYTE2(v15);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v15;
        }
        else
        {
          *(_BYTE *)a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, ((v8 + 16) & ~v8) + *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

ValueMetadata *type metadata accessor for _ZStackLayout()
{
  return &type metadata for _ZStackLayout;
}

ValueMetadata *type metadata accessor for ZStackLayout()
{
  return &type metadata for ZStackLayout;
}

unint64_t lazy protocol witness table accessor for type ColorCacheKey and conformance ColorCacheKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ColorCacheKey and conformance ColorCacheKey;
  if (!lazy protocol witness table cache variable for type ColorCacheKey and conformance ColorCacheKey)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ColorCacheKey, &type metadata for ColorCacheKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColorCacheKey and conformance ColorCacheKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ColorCacheKey and conformance ColorCacheKey;
  if (!lazy protocol witness table cache variable for type ColorCacheKey and conformance ColorCacheKey)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ColorCacheKey, &type metadata for ColorCacheKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColorCacheKey and conformance ColorCacheKey);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<GesturePhase<()>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<GesturePhase<()>>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<GesturePhase<()>>);
  }
}

void type metadata accessor for _ContiguousArrayStorage<(tag: Int, links: _DynamicPropertyBuffer)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(tag: Int, links: _DynamicPropertyBuffer)>)
  {
    type metadata accessor for (proposal: _ProposedSize, value: TextSizeVariant)(255, (unint64_t *)&lazy cache variable for type metadata for (tag: Int, links: _DynamicPropertyBuffer));
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(tag: Int, links: _DynamicPropertyBuffer)>);
  }
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t lazy protocol witness table accessor for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical;
  if (!lazy protocol witness table cache variable for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ViewList_ID.Canonical, &type metadata for _ViewList_ID.Canonical);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical;
  if (!lazy protocol witness table cache variable for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ViewList_ID.Canonical, &type metadata for _ViewList_ID.Canonical);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.AttributeTracker.Key and conformance Text.Effect.AttributeTracker.Key()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.AttributeTracker.Key and conformance Text.Effect.AttributeTracker.Key;
  if (!lazy protocol witness table cache variable for type Text.Effect.AttributeTracker.Key and conformance Text.Effect.AttributeTracker.Key)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.AttributeTracker.Key, &type metadata for Text.Effect.AttributeTracker.Key);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.AttributeTracker.Key and conformance Text.Effect.AttributeTracker.Key);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.AttributeTracker.Key and conformance Text.Effect.AttributeTracker.Key;
  if (!lazy protocol witness table cache variable for type Text.Effect.AttributeTracker.Key and conformance Text.Effect.AttributeTracker.Key)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.AttributeTracker.Key, &type metadata for Text.Effect.AttributeTracker.Key);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.AttributeTracker.Key and conformance Text.Effect.AttributeTracker.Key);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.RelativeIdentifierKey and conformance Text.Effect.RelativeIdentifierKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.RelativeIdentifierKey and conformance Text.Effect.RelativeIdentifierKey;
  if (!lazy protocol witness table cache variable for type Text.Effect.RelativeIdentifierKey and conformance Text.Effect.RelativeIdentifierKey)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.RelativeIdentifierKey, &type metadata for Text.Effect.RelativeIdentifierKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.RelativeIdentifierKey and conformance Text.Effect.RelativeIdentifierKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.RelativeIdentifierKey and conformance Text.Effect.RelativeIdentifierKey;
  if (!lazy protocol witness table cache variable for type Text.Effect.RelativeIdentifierKey and conformance Text.Effect.RelativeIdentifierKey)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.RelativeIdentifierKey, &type metadata for Text.Effect.RelativeIdentifierKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.RelativeIdentifierKey and conformance Text.Effect.RelativeIdentifierKey);
  }
  return result;
}

uint64_t outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0)
  {
    swift_retain();
    return swift_retain();
  }
  else
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
}

void type metadata accessor for _DictionaryStorage<Text.Effect.Identifier, Text.Effect.AnyAnimationInfo>(uint64_t a1)
{
  type metadata accessor for _DictionaryStorage<Text.Effect.AttributeTracker.Key, Text.Effect.AttributeTracker.AnyValue>(a1, &lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Identifier, Text.Effect.AnyAnimationInfo>, (void (*)(uint64_t))type metadata accessor for Text.Effect.AnyAnimationInfo, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.Identifier and conformance Text.Effect.Identifier);
}

unint64_t lazy protocol witness table accessor for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier;
  if (!lazy protocol witness table cache variable for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.FragmentIdentifier, &type metadata for Text.Effect.FragmentIdentifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier;
  if (!lazy protocol witness table cache variable for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.FragmentIdentifier, &type metadata for Text.Effect.FragmentIdentifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier;
  if (!lazy protocol witness table cache variable for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.FragmentIdentifier, &type metadata for Text.Effect.FragmentIdentifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier;
  if (!lazy protocol witness table cache variable for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.FragmentIdentifier, &type metadata for Text.Effect.FragmentIdentifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.ClusterIndex and conformance Text.Effect.ClusterIndex()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.ClusterIndex and conformance Text.Effect.ClusterIndex;
  if (!lazy protocol witness table cache variable for type Text.Effect.ClusterIndex and conformance Text.Effect.ClusterIndex)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.ClusterIndex, &type metadata for Text.Effect.ClusterIndex);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.ClusterIndex and conformance Text.Effect.ClusterIndex);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.ClusterIndex and conformance Text.Effect.ClusterIndex;
  if (!lazy protocol witness table cache variable for type Text.Effect.ClusterIndex and conformance Text.Effect.ClusterIndex)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.ClusterIndex, &type metadata for Text.Effect.ClusterIndex);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.ClusterIndex and conformance Text.Effect.ClusterIndex);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.ClusterIndex and conformance Text.Effect.ClusterIndex;
  if (!lazy protocol witness table cache variable for type Text.Effect.ClusterIndex and conformance Text.Effect.ClusterIndex)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.ClusterIndex, &type metadata for Text.Effect.ClusterIndex);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.ClusterIndex and conformance Text.Effect.ClusterIndex);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.ClusterIndex and conformance Text.Effect.ClusterIndex;
  if (!lazy protocol witness table cache variable for type Text.Effect.ClusterIndex and conformance Text.Effect.ClusterIndex)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.ClusterIndex, &type metadata for Text.Effect.ClusterIndex);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.ClusterIndex and conformance Text.Effect.ClusterIndex);
  }
  return result;
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 16))(a2, a1);
  return a2;
}

void type metadata accessor for _DictionaryStorage<RBDisplayListInterpolatorOptionKey, Any>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<RBDisplayListInterpolatorOptionKey, Any>)
  {
    type metadata accessor for RBDisplayListInterpolatorOptionKey(255);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type RBDisplayListInterpolatorOptionKey and conformance RBDisplayListInterpolatorOptionKey, (uint64_t (*)(uint64_t))type metadata accessor for RBDisplayListInterpolatorOptionKey, (uint64_t)&protocol conformance descriptor for RBDisplayListInterpolatorOptionKey);
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<RBDisplayListInterpolatorOptionKey, Any>);
  }
}

void _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v8 = type metadata accessor for ScrollStateRequest(255, a3);
    v9 = a5(a1, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void type metadata accessor for _ContiguousArrayStorage<(Int, LocalizedStringKey.FormatArgument)>(uint64_t a1)
{
  type metadata accessor for [(_:)](a1, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(Int, LocalizedStringKey.FormatArgument)>, (uint64_t (*)(uint64_t))type metadata accessor for (Int, LocalizedStringKey.FormatArgument), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

void type metadata accessor for (Int, LocalizedStringKey.FormatArgument)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (Int, LocalizedStringKey.FormatArgument))
  {
    type metadata accessor for LocalizedStringKey.FormatArgument(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Int, LocalizedStringKey.FormatArgument));
  }
}

void type metadata accessor for _ContiguousArrayStorage<LocalizedStringKey.FormatArgument>(uint64_t a1)
{
  type metadata accessor for [(_:)](a1, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<LocalizedStringKey.FormatArgument>, type metadata accessor for LocalizedStringKey.FormatArgument, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

void type metadata accessor for _DictionaryStorage<Text.Effect.Identifier, Text.Effect.AnyStateSnapshot>(uint64_t a1)
{
  type metadata accessor for _DictionaryStorage<Text.Effect.AttributeTracker.Key, Text.Effect.AttributeTracker.AnyValue>(a1, &lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Identifier, Text.Effect.AnyStateSnapshot>, (void (*)(uint64_t))type metadata accessor for Text.Effect.AnyStateSnapshot, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.Identifier and conformance Text.Effect.Identifier);
}

void type metadata accessor for _DictionaryStorage<Text.Effect.Identifier, TextAnimator>(uint64_t a1)
{
  type metadata accessor for _DictionaryStorage<Text.Effect.AttributeTracker.Key, Text.Effect.AttributeTracker.AnyValue>(a1, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Identifier, TextAnimator>, (void (*)(uint64_t))type metadata accessor for TextAnimator, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.Identifier and conformance Text.Effect.Identifier);
}

void type metadata accessor for _ContiguousArrayStorage<Text.Effect.SegmentInteraction.Element>(uint64_t a1)
{
  type metadata accessor for [(_:)](a1, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.SegmentInteraction.Element>, (uint64_t (*)(uint64_t))type metadata accessor for Text.Effect.SegmentInteraction.Element, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

void type metadata accessor for _ContiguousArrayStorage<(Text.Effect.RenderSegmentation.Segment, CGPoint)>(uint64_t a1)
{
  type metadata accessor for [(_:)](a1, &lazy cache variable for type metadata for _ContiguousArrayStorage<(Text.Effect.RenderSegmentation.Segment, CGPoint)>, (uint64_t (*)(uint64_t))type metadata accessor for (Text.Effect.RenderSegmentation.Segment, CGPoint), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

void type metadata accessor for (Text.Effect.RenderSegmentation.Segment, CGPoint)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (Text.Effect.RenderSegmentation.Segment, CGPoint))
  {
    type metadata accessor for Text.Effect.RenderSegmentation.Segment(255);
    type metadata accessor for CGPoint(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Text.Effect.RenderSegmentation.Segment, CGPoint));
  }
}

uint64_t lazy protocol witness table accessor for type UUID and conformance UUID()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
}

unint64_t lazy protocol witness table accessor for type Text.Effect.Key and conformance Text.Effect.Key()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.Key and conformance Text.Effect.Key;
  if (!lazy protocol witness table cache variable for type Text.Effect.Key and conformance Text.Effect.Key)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.Key, &type metadata for Text.Effect.Key);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.Key and conformance Text.Effect.Key);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.Key and conformance Text.Effect.Key;
  if (!lazy protocol witness table cache variable for type Text.Effect.Key and conformance Text.Effect.Key)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.Key, &type metadata for Text.Effect.Key);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.Key and conformance Text.Effect.Key);
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<Text.Effect.Identifier, AnyTextFilterEffect>(uint64_t a1)
{
  type metadata accessor for _DictionaryStorage<Text.Effect.AttributeTracker.Key, Text.Effect.AttributeTracker.AnyValue>(a1, &lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Identifier, AnyTextFilterEffect>, (void (*)(uint64_t))type metadata accessor for AnyTextFilterEffect, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.Identifier and conformance Text.Effect.Identifier);
}

void type metadata accessor for _DictionaryStorage<Text.Effect.Identifier, AnyTextEffect>(uint64_t a1)
{
  type metadata accessor for _DictionaryStorage<Text.Effect.AttributeTracker.Key, Text.Effect.AttributeTracker.AnyValue>(a1, &lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Identifier, AnyTextEffect>, (void (*)(uint64_t))type metadata accessor for AnyTextEffect, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.Identifier and conformance Text.Effect.Identifier);
}

void type metadata accessor for _DictionaryStorage<Text.Effect.Identifier, AnyTextAnimation>(uint64_t a1)
{
  type metadata accessor for _DictionaryStorage<Text.Effect.AttributeTracker.Key, Text.Effect.AttributeTracker.AnyValue>(a1, &lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Identifier, AnyTextAnimation>, (void (*)(uint64_t))type metadata accessor for AnyTextAnimation, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.Identifier and conformance Text.Effect.Identifier);
}

void type metadata accessor for _DictionaryStorage<Text.Effect.Identifier, [Text.Effect.KeyframeLayout.Fragment]>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Identifier, [Text.Effect.KeyframeLayout.Fragment]>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for [Text.Effect.KeyframeLayout.Fragment], (uint64_t)&type metadata for Text.Effect.KeyframeLayout.Fragment, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    lazy protocol witness table accessor for type Text.Effect.Identifier and conformance Text.Effect.Identifier();
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Identifier, [Text.Effect.KeyframeLayout.Fragment]>);
  }
}

void type metadata accessor for _DictionaryStorage<Text.Effect.Identifier, Text.Effect.AnyLayoutState>(uint64_t a1)
{
  type metadata accessor for _DictionaryStorage<Text.Effect.AttributeTracker.Key, Text.Effect.AttributeTracker.AnyValue>(a1, &lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Identifier, Text.Effect.AnyLayoutState>, (void (*)(uint64_t))type metadata accessor for Text.Effect.AnyLayoutState, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.Identifier and conformance Text.Effect.Identifier);
}

void type metadata accessor for _DictionaryStorage<Text.Effect.Identifier, Set<Int>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Identifier, Set<Int>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for Set<Int>, MEMORY[0x24BEE1768], MEMORY[0x24BEE1778], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE16D8]);
    lazy protocol witness table accessor for type Text.Effect.Identifier and conformance Text.Effect.Identifier();
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Identifier, Set<Int>>);
  }
}

unint64_t lazy protocol witness table accessor for type DisplayList.ViewUpdater.ViewCache.Key and conformance DisplayList.ViewUpdater.ViewCache.Key()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayList.ViewUpdater.ViewCache.Key and conformance DisplayList.ViewUpdater.ViewCache.Key;
  if (!lazy protocol witness table cache variable for type DisplayList.ViewUpdater.ViewCache.Key and conformance DisplayList.ViewUpdater.ViewCache.Key)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DisplayList.ViewUpdater.ViewCache.Key, &type metadata for DisplayList.ViewUpdater.ViewCache.Key);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.ViewUpdater.ViewCache.Key and conformance DisplayList.ViewUpdater.ViewCache.Key);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayList.ViewUpdater.ViewCache.Key and conformance DisplayList.ViewUpdater.ViewCache.Key;
  if (!lazy protocol witness table cache variable for type DisplayList.ViewUpdater.ViewCache.Key and conformance DisplayList.ViewUpdater.ViewCache.Key)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DisplayList.ViewUpdater.ViewCache.Key, &type metadata for DisplayList.ViewUpdater.ViewCache.Key);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.ViewUpdater.ViewCache.Key and conformance DisplayList.ViewUpdater.ViewCache.Key);
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<String, CAPresentationModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<String, CAPresentationModifier>)
  {
    type metadata accessor for CAPresentationModifier(255, (unint64_t *)&lazy cache variable for type metadata for CAPresentationModifier);
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, CAPresentationModifier>);
  }
}

void type metadata accessor for _DictionaryStorage<ObjectIdentifier, [DisplayList.ViewUpdater.ViewCache.PendingAsyncValue]>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, [DisplayList.ViewUpdater.ViewCache.PendingAsyncValue]>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for [DisplayList.ViewUpdater.ViewCache.PendingAsyncValue], (uint64_t)&type metadata for DisplayList.ViewUpdater.ViewCache.PendingAsyncValue, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, [DisplayList.ViewUpdater.ViewCache.PendingAsyncValue]>);
  }
}

uint64_t outlined init with copy of DisplayList.ViewUpdater.ViewCache.AnimatorInfo(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for DisplayList.ViewUpdater.ViewCache.AnimatorInfo(a2, a1);
  return a2;
}

uint64_t type metadata accessor for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Item()
{
  uint64_t result;

  result = lazy cache variable for type metadata for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Item;
  if (!lazy cache variable for type metadata for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Item)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x24BEE1768], MEMORY[0x24BEE1780], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    type metadata accessor for ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>(255);
    lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>, lazy protocol witness table accessor for type ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for _OffsetEffect);
    type metadata accessor for ForEachState.Item();
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>)
  {
    type metadata accessor for ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>(255);
    v4 = type metadata accessor for ModifiedContent(a1, v2, (uint64_t)&type metadata for _OffsetEffect, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>);
  }
}

void type metadata accessor for ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for _ValueTransactionModifier<Double>, MEMORY[0x24BEE13C8], MEMORY[0x24BEE13F8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _ValueTransactionModifier);
    v4 = type metadata accessor for ModifiedContent(a1, (uint64_t)&type metadata for SummarySymbol, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>);
  }
}

unint64_t lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  result = lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>;
  if (!lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x24BEE1768], MEMORY[0x24BEE1780], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type Int and conformance Int();
    v4[0] = MEMORY[0x24BEE17A8];
    v4[1] = v3;
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE1BD0], v2, v4);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE1790], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE17B0], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE17C8], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, (uint64_t (*)(void))lazy protocol witness table accessor for type SummarySymbol and conformance SummarySymbol, (uint64_t)&protocol witness table for _ValueTransactionModifier<A>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect> and conformance <> ModifiedContent<A, B>(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = a2(255);
    v9[0] = a3();
    v9[1] = a4;
    result = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SummarySymbol and conformance SummarySymbol()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SummarySymbol and conformance SummarySymbol;
  if (!lazy protocol witness table cache variable for type SummarySymbol and conformance SummarySymbol)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SummarySymbol, &type metadata for SummarySymbol);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SummarySymbol and conformance SummarySymbol);
  }
  return result;
}

void type metadata accessor for ViewGraphGeometryObservers<SizeThatFitsMeasurer>.Observer(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ViewGraphGeometryObservers<SizeThatFitsMeasurer>.Observer)
  {
    v2 = lazy protocol witness table accessor for type SizeThatFitsMeasurer and conformance SizeThatFitsMeasurer();
    v4 = type metadata accessor for ViewGraphGeometryObservers.Observer(a1, (uint64_t)&type metadata for SizeThatFitsMeasurer, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ViewGraphGeometryObservers<SizeThatFitsMeasurer>.Observer);
  }
}

void type metadata accessor for (key: NSAttributedStringKey, value: Any)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (key: NSAttributedStringKey, value: Any))
  {
    type metadata accessor for NSAttributedStringKey(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: NSAttributedStringKey, value: Any));
  }
}

void type metadata accessor for _ContiguousArrayStorage<(String, Double)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(String, Double)>)
  {
    type metadata accessor for (Path, FillStyle)(255, (unint64_t *)&lazy cache variable for type metadata for (String, Double));
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(String, Double)>);
  }
}

void type metadata accessor for _DictionaryStorage<CFStringRef, Any>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<CFStringRef, Any>)
  {
    type metadata accessor for CFStringRef(255);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<CFStringRef, Any>);
  }
}

unint64_t lazy protocol witness table accessor for type _ViewDebug.Property and conformance _ViewDebug.Property()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewDebug.Property and conformance _ViewDebug.Property;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Property and conformance _ViewDebug.Property)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ViewDebug.Property, &type metadata for _ViewDebug.Property);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Property and conformance _ViewDebug.Property);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewDebug.Property and conformance _ViewDebug.Property;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Property and conformance _ViewDebug.Property)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ViewDebug.Property, &type metadata for _ViewDebug.Property);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Property and conformance _ViewDebug.Property);
  }
  return result;
}

uint64_t type metadata accessor for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item()
{
  uint64_t result;

  result = lazy cache variable for type metadata for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item;
  if (!lazy cache variable for type metadata for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item)
  {
    lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children();
    type metadata accessor for ForEachState.Item();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _VariadicView_Children and conformance _VariadicView_Children;
  if (!lazy protocol witness table cache variable for type _VariadicView_Children and conformance _VariadicView_Children)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _VariadicView_Children, &type metadata for _VariadicView_Children);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _VariadicView_Children and conformance _VariadicView_Children);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _VariadicView_Children and conformance _VariadicView_Children;
  if (!lazy protocol witness table cache variable for type _VariadicView_Children and conformance _VariadicView_Children)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _VariadicView_Children, &type metadata for _VariadicView_Children);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _VariadicView_Children and conformance _VariadicView_Children);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _VariadicView_Children and conformance _VariadicView_Children;
  if (!lazy protocol witness table cache variable for type _VariadicView_Children and conformance _VariadicView_Children)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _VariadicView_Children, &type metadata for _VariadicView_Children);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _VariadicView_Children and conformance _VariadicView_Children);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _VariadicView_Children and conformance _VariadicView_Children;
  if (!lazy protocol witness table cache variable for type _VariadicView_Children and conformance _VariadicView_Children)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _VariadicView_Children, &type metadata for _VariadicView_Children);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _VariadicView_Children and conformance _VariadicView_Children);
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<ObjectIdentifier, ConditionalTypeDescriptor<ViewDescriptor>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, ConditionalTypeDescriptor<ViewDescriptor>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ConditionalTypeDescriptor<ViewDescriptor>, (uint64_t)&type metadata for ViewDescriptor, (uint64_t)&protocol witness table for ViewDescriptor, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ConditionalTypeDescriptor);
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, ConditionalTypeDescriptor<ViewDescriptor>>);
  }
}

unint64_t outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(unint64_t result)
{
  if ((result >> 62) - 1 <= 1)
    return swift_retain();
  return result;
}

unint64_t lazy protocol witness table accessor for type CUIDesignLibraryCacheKey and conformance CUIDesignLibraryCacheKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CUIDesignLibraryCacheKey and conformance CUIDesignLibraryCacheKey;
  if (!lazy protocol witness table cache variable for type CUIDesignLibraryCacheKey and conformance CUIDesignLibraryCacheKey)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CUIDesignLibraryCacheKey, &type metadata for CUIDesignLibraryCacheKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CUIDesignLibraryCacheKey and conformance CUIDesignLibraryCacheKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CUIDesignLibraryCacheKey and conformance CUIDesignLibraryCacheKey;
  if (!lazy protocol witness table cache variable for type CUIDesignLibraryCacheKey and conformance CUIDesignLibraryCacheKey)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CUIDesignLibraryCacheKey, &type metadata for CUIDesignLibraryCacheKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CUIDesignLibraryCacheKey and conformance CUIDesignLibraryCacheKey);
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<EventID, EventType>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<EventID, EventType>)
  {
    type metadata accessor for ScrollStateRequest(255, (unint64_t *)&lazy cache variable for type metadata for EventType);
    lazy protocol witness table accessor for type EventID and conformance EventID();
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<EventID, EventType>);
  }
}

void type metadata accessor for _DictionaryStorage<ObjectIdentifier, ScrollStateRequest>(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    type metadata accessor for ScrollStateRequest(255, a3);
    v4 = type metadata accessor for _DictionaryStorage();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void type metadata accessor for (key: ObjectIdentifier, value: AnyTrackedValue)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (key: ObjectIdentifier, value: AnyTrackedValue))
  {
    type metadata accessor for ScrollStateRequest(255, (unint64_t *)&lazy cache variable for type metadata for AnyTrackedValue);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: ObjectIdentifier, value: AnyTrackedValue));
  }
}

unint64_t lazy protocol witness table accessor for type CachedVectorImageContents.CacheKey and conformance CachedVectorImageContents.CacheKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CachedVectorImageContents.CacheKey and conformance CachedVectorImageContents.CacheKey;
  if (!lazy protocol witness table cache variable for type CachedVectorImageContents.CacheKey and conformance CachedVectorImageContents.CacheKey)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CachedVectorImageContents.CacheKey, &type metadata for CachedVectorImageContents.CacheKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CachedVectorImageContents.CacheKey and conformance CachedVectorImageContents.CacheKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CachedVectorImageContents.CacheKey and conformance CachedVectorImageContents.CacheKey;
  if (!lazy protocol witness table cache variable for type CachedVectorImageContents.CacheKey and conformance CachedVectorImageContents.CacheKey)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CachedVectorImageContents.CacheKey, &type metadata for CachedVectorImageContents.CacheKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CachedVectorImageContents.CacheKey and conformance CachedVectorImageContents.CacheKey);
  }
  return result;
}

uint64_t outlined init with take of Spacing.Value(uint64_t a1, uint64_t a2)
{
  __swift_memcpy33_8(a2, a1);
  return a2;
}

void type metadata accessor for _ContiguousArrayStorage<(label: String, value: Double)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(label: String, value: Double)>)
  {
    type metadata accessor for (proposal: _ProposedSize, value: TextSizeVariant)(255, &lazy cache variable for type metadata for (label: String, value: Double));
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(label: String, value: Double)>);
  }
}

unint64_t type metadata accessor for Decodable & AnyViewFactory.Type()
{
  unint64_t result;

  result = lazy cache variable for type metadata for Decodable & AnyViewFactory.Type;
  if (!lazy cache variable for type metadata for Decodable & AnyViewFactory.Type)
  {
    type metadata accessor for Decodable & AnyViewFactory();
    result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Decodable & AnyViewFactory.Type);
  }
  return result;
}

unint64_t type metadata accessor for Decodable & AnyViewFactory()
{
  unint64_t result;

  result = lazy cache variable for type metadata for Decodable & AnyViewFactory;
  if (!lazy cache variable for type metadata for Decodable & AnyViewFactory)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Decodable & AnyViewFactory);
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<AGSubgraphRef.Map.Key, [ScrapeableContent.Node]>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<AGSubgraphRef.Map.Key, [ScrapeableContent.Node]>)
  {
    type metadata accessor for [(_:)](255, &lazy cache variable for type metadata for [ScrapeableContent.Node], (uint64_t (*)(uint64_t))type metadata accessor for ScrapeableContent.Node, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    lazy protocol witness table accessor for type AGSubgraphRef.Map.Key and conformance AGSubgraphRef.Map.Key();
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AGSubgraphRef.Map.Key, [ScrapeableContent.Node]>);
  }
}

unint64_t lazy protocol witness table accessor for type AGSubgraphRef.Map.Key and conformance AGSubgraphRef.Map.Key()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AGSubgraphRef.Map.Key and conformance AGSubgraphRef.Map.Key;
  if (!lazy protocol witness table cache variable for type AGSubgraphRef.Map.Key and conformance AGSubgraphRef.Map.Key)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AGSubgraphRef.Map.Key, &type metadata for AGSubgraphRef.Map.Key);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AGSubgraphRef.Map.Key and conformance AGSubgraphRef.Map.Key);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AGSubgraphRef.Map.Key and conformance AGSubgraphRef.Map.Key;
  if (!lazy protocol witness table cache variable for type AGSubgraphRef.Map.Key and conformance AGSubgraphRef.Map.Key)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AGSubgraphRef.Map.Key, &type metadata for AGSubgraphRef.Map.Key);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AGSubgraphRef.Map.Key and conformance AGSubgraphRef.Map.Key);
  }
  return result;
}

uint64_t outlined init with copy of WeakBox<AnyLocationBase>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for WeakBox<AnyLocationBase>, (uint64_t (*)(uint64_t))type metadata accessor for AnyLocationBase, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for WeakBox);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of (key: NSAttributedStringKey, value: Any)?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v7;

  type metadata accessor for [(_:)](0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

void type metadata accessor for _DictionaryStorage<AGAttribute, AGAttribute>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<AGAttribute, AGAttribute>)
  {
    type metadata accessor for AGAttribute(255);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AGAttribute and conformance AGAttribute, (uint64_t (*)(uint64_t))type metadata accessor for AGAttribute, MEMORY[0x24BE096A8]);
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AGAttribute, AGAttribute>);
  }
}

void type metadata accessor for (list: ViewList, attribute: Attribute<ViewList>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (list: ViewList, attribute: Attribute<ViewList>))
  {
    type metadata accessor for ScrollStateRequest(255, (unint64_t *)&lazy cache variable for type metadata for ViewList);
    _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for Attribute<ViewList>, (unint64_t *)&lazy cache variable for type metadata for ViewList, (uint64_t)&protocol descriptor for ViewList, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BE095F0]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (list: ViewList, attribute: Attribute<ViewList>));
  }
}

void type metadata accessor for _DictionaryStorage<URL, NamedImage.Cache.WeakCatalog>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<URL, NamedImage.Cache.WeakCatalog>)
  {
    type metadata accessor for URL();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<URL, NamedImage.Cache.WeakCatalog>);
  }
}

uint64_t outlined init with copy of NamedImage.Cache.WeakCatalog(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for NamedImage.Cache.WeakCatalog(a2, a1);
  return a2;
}

uint64_t outlined init with take of NamedImage.Cache.WeakCatalog(uint64_t a1, uint64_t a2)
{
  initializeWithTake for NamedImage.Cache.WeakCatalog(a2, a1);
  return a2;
}

void type metadata accessor for _DictionaryStorage<NamedImage.BitmapKey, NamedImage.BitmapInfo>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<NamedImage.BitmapKey, NamedImage.BitmapInfo>)
  {
    type metadata accessor for NamedImage.BitmapKey(255);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NamedImage.BitmapKey and conformance NamedImage.BitmapKey, type metadata accessor for NamedImage.BitmapKey, (uint64_t)&protocol conformance descriptor for NamedImage.BitmapKey);
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<NamedImage.BitmapKey, NamedImage.BitmapInfo>);
  }
}

void type metadata accessor for _DictionaryStorage<NamedImage.VectorKey, NamedImage.VectorInfo>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<NamedImage.VectorKey, NamedImage.VectorInfo>)
  {
    type metadata accessor for NamedImage.VectorKey(255);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type NamedImage.VectorKey and conformance NamedImage.VectorKey, type metadata accessor for NamedImage.VectorKey, (uint64_t)&protocol conformance descriptor for NamedImage.VectorKey);
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<NamedImage.VectorKey, NamedImage.VectorInfo>);
  }
}

uint64_t lazy protocol witness table accessor for type _NSRange and conformance _NSRange()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type _NSRange and conformance _NSRange, (uint64_t (*)(uint64_t))type metadata accessor for _NSRange, MEMORY[0x24BDD0288]);
}

void type metadata accessor for _DictionaryStorage<UUID, NamedImage.DecodedInfo>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<UUID, NamedImage.DecodedInfo>)
  {
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type UUID and conformance UUID();
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<UUID, NamedImage.DecodedInfo>);
  }
}

void type metadata accessor for (arg: UInt64, destructor: (())?)?(uint64_t a1)
{
  type metadata accessor for [(_:)](a1, &lazy cache variable for type metadata for (arg: UInt64, destructor: (())?)?, (uint64_t (*)(uint64_t))type metadata accessor for (arg: UInt64, destructor: (())?), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

void type metadata accessor for (arg: UInt64, destructor: (())?)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (arg: UInt64, destructor: (())?))
  {
    type metadata accessor for [(_:)](255, (unint64_t *)&lazy cache variable for type metadata for (())?, (uint64_t (*)(uint64_t))type metadata accessor for (), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (arg: UInt64, destructor: (())?));
  }
}

void type metadata accessor for _DictionaryStorage<ContentStyle.MaterialStyle, [DisplayList.Effect]>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<ContentStyle.MaterialStyle, [DisplayList.Effect]>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for [DisplayList.Effect], (uint64_t)&type metadata for DisplayList.Effect, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    lazy protocol witness table accessor for type ContentStyle.MaterialStyle and conformance ContentStyle.MaterialStyle();
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ContentStyle.MaterialStyle, [DisplayList.Effect]>);
  }
}

unint64_t lazy protocol witness table accessor for type ContentStyle.MaterialStyle and conformance ContentStyle.MaterialStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContentStyle.MaterialStyle and conformance ContentStyle.MaterialStyle;
  if (!lazy protocol witness table cache variable for type ContentStyle.MaterialStyle and conformance ContentStyle.MaterialStyle)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ContentStyle.MaterialStyle, &type metadata for ContentStyle.MaterialStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentStyle.MaterialStyle and conformance ContentStyle.MaterialStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContentStyle.MaterialStyle and conformance ContentStyle.MaterialStyle;
  if (!lazy protocol witness table cache variable for type ContentStyle.MaterialStyle and conformance ContentStyle.MaterialStyle)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ContentStyle.MaterialStyle, &type metadata for ContentStyle.MaterialStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentStyle.MaterialStyle and conformance ContentStyle.MaterialStyle);
  }
  return result;
}

unint64_t outlined consume of Material.ID(unint64_t result)
{
  if (result >= 8)
    return swift_release();
  return result;
}

void type metadata accessor for _DictionaryStorage<Material.ResolvedMaterial, [AnyMaterialLayer]>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<Material.ResolvedMaterial, [AnyMaterialLayer]>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, (unint64_t *)&lazy cache variable for type metadata for [AnyMaterialLayer], (uint64_t)&type metadata for AnyMaterialLayer, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    lazy protocol witness table accessor for type Material.ResolvedMaterial and conformance Material.ResolvedMaterial();
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Material.ResolvedMaterial, [AnyMaterialLayer]>);
  }
}

unint64_t lazy protocol witness table accessor for type Material.ResolvedMaterial and conformance Material.ResolvedMaterial()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Material.ResolvedMaterial and conformance Material.ResolvedMaterial;
  if (!lazy protocol witness table cache variable for type Material.ResolvedMaterial and conformance Material.ResolvedMaterial)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Material.ResolvedMaterial, &type metadata for Material.ResolvedMaterial);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Material.ResolvedMaterial and conformance Material.ResolvedMaterial);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Material.ResolvedMaterial and conformance Material.ResolvedMaterial;
  if (!lazy protocol witness table cache variable for type Material.ResolvedMaterial and conformance Material.ResolvedMaterial)
  {
    result = MEMORY[0x23B7C9C04]("iE<\x1BH\a\v", &type metadata for Material.ResolvedMaterial);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Material.ResolvedMaterial and conformance Material.ResolvedMaterial);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<Date.ComponentsFormatStyle.Field>(uint64_t a1)
{
  type metadata accessor for [(_:)](a1, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Date.ComponentsFormatStyle.Field>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

unint64_t lazy protocol witness table accessor for type _ForegroundLayerLevel and conformance _ForegroundLayerLevel()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ForegroundLayerLevel and conformance _ForegroundLayerLevel;
  if (!lazy protocol witness table cache variable for type _ForegroundLayerLevel and conformance _ForegroundLayerLevel)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ForegroundLayerLevel, &type metadata for _ForegroundLayerLevel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ForegroundLayerLevel and conformance _ForegroundLayerLevel);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ForegroundLayerLevel and conformance _ForegroundLayerLevel;
  if (!lazy protocol witness table cache variable for type _ForegroundLayerLevel and conformance _ForegroundLayerLevel)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ForegroundLayerLevel, &type metadata for _ForegroundLayerLevel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ForegroundLayerLevel and conformance _ForegroundLayerLevel);
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<ObjectIdentifier, TupleTypeDescription<StyleContextDescriptor>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TupleTypeDescription);
    v6 = type metadata accessor for _DictionaryStorage();
    if (!v7)
      atomic_store(v6, a2);
  }
}

void type metadata accessor for _DictionaryStorage<Int, LocalizedStringKey.FormatArgument>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = type metadata accessor for _DictionaryStorage();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t outlined init with take of LocalizedStringKey.FormatArgument(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined copy of DynamicPropertyCache.Fields.Layout()
{
  return swift_bridgeObjectRetain();
}

void type metadata accessor for _DictionaryStorage<ContentTransition.NamedKey, RBTransition>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<ContentTransition.NamedKey, RBTransition>)
  {
    type metadata accessor for CAPresentationModifier(255, (unint64_t *)&lazy cache variable for type metadata for RBTransition);
    lazy protocol witness table accessor for type ContentTransition.NamedKey and conformance ContentTransition.NamedKey();
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ContentTransition.NamedKey, RBTransition>);
  }
}

uint64_t type metadata accessor for CAPresentationModifier(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ContentTransition.NamedKey and conformance ContentTransition.NamedKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContentTransition.NamedKey and conformance ContentTransition.NamedKey;
  if (!lazy protocol witness table cache variable for type ContentTransition.NamedKey and conformance ContentTransition.NamedKey)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ContentTransition.NamedKey, &type metadata for ContentTransition.NamedKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentTransition.NamedKey and conformance ContentTransition.NamedKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContentTransition.NamedKey and conformance ContentTransition.NamedKey;
  if (!lazy protocol witness table cache variable for type ContentTransition.NamedKey and conformance ContentTransition.NamedKey)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ContentTransition.NamedKey, &type metadata for ContentTransition.NamedKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentTransition.NamedKey and conformance ContentTransition.NamedKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DisplayList.GraphicsRenderer.Cache.CallbackKey and conformance DisplayList.GraphicsRenderer.Cache.CallbackKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayList.GraphicsRenderer.Cache.CallbackKey and conformance DisplayList.GraphicsRenderer.Cache.CallbackKey;
  if (!lazy protocol witness table cache variable for type DisplayList.GraphicsRenderer.Cache.CallbackKey and conformance DisplayList.GraphicsRenderer.Cache.CallbackKey)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DisplayList.GraphicsRenderer.Cache.CallbackKey, &type metadata for DisplayList.GraphicsRenderer.Cache.CallbackKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.GraphicsRenderer.Cache.CallbackKey and conformance DisplayList.GraphicsRenderer.Cache.CallbackKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayList.GraphicsRenderer.Cache.CallbackKey and conformance DisplayList.GraphicsRenderer.Cache.CallbackKey;
  if (!lazy protocol witness table cache variable for type DisplayList.GraphicsRenderer.Cache.CallbackKey and conformance DisplayList.GraphicsRenderer.Cache.CallbackKey)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DisplayList.GraphicsRenderer.Cache.CallbackKey, &type metadata for DisplayList.GraphicsRenderer.Cache.CallbackKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.GraphicsRenderer.Cache.CallbackKey and conformance DisplayList.GraphicsRenderer.Cache.CallbackKey);
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<DisplayList.GraphicsRenderer.Cache.AnimatorKey, _DisplayList_AnyEffectAnimator>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<DisplayList.GraphicsRenderer.Cache.AnimatorKey, _DisplayList_AnyEffectAnimator>)
  {
    type metadata accessor for ScrollStateRequest(255, &lazy cache variable for type metadata for _DisplayList_AnyEffectAnimator);
    lazy protocol witness table accessor for type DisplayList.GraphicsRenderer.Cache.AnimatorKey and conformance DisplayList.GraphicsRenderer.Cache.AnimatorKey();
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<DisplayList.GraphicsRenderer.Cache.AnimatorKey, _DisplayList_AnyEffectAnimator>);
  }
}

unint64_t lazy protocol witness table accessor for type DisplayList.GraphicsRenderer.Cache.AnimatorKey and conformance DisplayList.GraphicsRenderer.Cache.AnimatorKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayList.GraphicsRenderer.Cache.AnimatorKey and conformance DisplayList.GraphicsRenderer.Cache.AnimatorKey;
  if (!lazy protocol witness table cache variable for type DisplayList.GraphicsRenderer.Cache.AnimatorKey and conformance DisplayList.GraphicsRenderer.Cache.AnimatorKey)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DisplayList.GraphicsRenderer.Cache.AnimatorKey, &type metadata for DisplayList.GraphicsRenderer.Cache.AnimatorKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.GraphicsRenderer.Cache.AnimatorKey and conformance DisplayList.GraphicsRenderer.Cache.AnimatorKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayList.GraphicsRenderer.Cache.AnimatorKey and conformance DisplayList.GraphicsRenderer.Cache.AnimatorKey;
  if (!lazy protocol witness table cache variable for type DisplayList.GraphicsRenderer.Cache.AnimatorKey and conformance DisplayList.GraphicsRenderer.Cache.AnimatorKey)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DisplayList.GraphicsRenderer.Cache.AnimatorKey, &type metadata for DisplayList.GraphicsRenderer.Cache.AnimatorKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.GraphicsRenderer.Cache.AnimatorKey and conformance DisplayList.GraphicsRenderer.Cache.AnimatorKey);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<(Spacing.Key, Spacing.Value)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(Spacing.Key, Spacing.Value)>)
  {
    type metadata accessor for (Path, FillStyle)(255, (unint64_t *)&lazy cache variable for type metadata for (Spacing.Key, Spacing.Value));
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(Spacing.Key, Spacing.Value)>);
  }
}

void type metadata accessor for _ContiguousArrayStorage<(key: Spacing.Key, value: Spacing.Value)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(key: Spacing.Key, value: Spacing.Value)>)
  {
    type metadata accessor for (proposal: _ProposedSize, value: TextSizeVariant)(255, (unint64_t *)&lazy cache variable for type metadata for (key: Spacing.Key, value: Spacing.Value));
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(key: Spacing.Key, value: Spacing.Value)>);
  }
}

uint64_t sub_234A69320()
{
  return swift_deallocObject();
}

uint64_t sub_234A69330()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static PointerOffset.of(_:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

void type metadata accessor for _DictionaryStorage<Text.Effect.AttributeTracker.Key, Text.Effect.AttributeTracker.AnyValue>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    a3(255);
    a4();
    v6 = type metadata accessor for _DictionaryStorage();
    if (!v7)
      atomic_store(v6, a2);
  }
}

unint64_t lazy protocol witness table accessor for type ConstantKey and conformance ConstantKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConstantKey and conformance ConstantKey;
  if (!lazy protocol witness table cache variable for type ConstantKey and conformance ConstantKey)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ConstantKey, &type metadata for ConstantKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConstantKey and conformance ConstantKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConstantKey and conformance ConstantKey;
  if (!lazy protocol witness table cache variable for type ConstantKey and conformance ConstantKey)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ConstantKey, &type metadata for ConstantKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConstantKey and conformance ConstantKey);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<[Path]>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<[Path]>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for [Path], (uint64_t)&type metadata for Path, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<[Path]>);
  }
}

void type metadata accessor for _ContiguousArrayStorage<[CGPoint]>(uint64_t a1)
{
  type metadata accessor for [(_:)](a1, &lazy cache variable for type metadata for _ContiguousArrayStorage<[CGPoint]>, (uint64_t (*)(uint64_t))type metadata accessor for [CGPoint], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

void type metadata accessor for [CGPoint](uint64_t a1)
{
  type metadata accessor for [(_:)](a1, &lazy cache variable for type metadata for [CGPoint], (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
}

void type metadata accessor for _ContiguousArrayStorage<[Path?]>(uint64_t a1)
{
  type metadata accessor for [(_:)](a1, &lazy cache variable for type metadata for _ContiguousArrayStorage<[Path?]>, (uint64_t (*)(uint64_t))type metadata accessor for [Path?], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

void type metadata accessor for [Path?]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [Path?])
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, (unint64_t *)&lazy cache variable for type metadata for Path?, (uint64_t)&type metadata for Path, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [Path?]);
  }
}

void type metadata accessor for _ContiguousArrayStorage<[Text.Layout.Cluster]>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<[Text.Layout.Cluster]>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for [Text.Layout.Cluster], (uint64_t)&type metadata for Text.Layout.Cluster, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<[Text.Layout.Cluster]>);
  }
}

unint64_t lazy protocol witness table accessor for type Text.Effect.GlyphIndex and conformance Text.Effect.GlyphIndex()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.GlyphIndex and conformance Text.Effect.GlyphIndex;
  if (!lazy protocol witness table cache variable for type Text.Effect.GlyphIndex and conformance Text.Effect.GlyphIndex)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.GlyphIndex, &type metadata for Text.Effect.GlyphIndex);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.GlyphIndex and conformance Text.Effect.GlyphIndex);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.GlyphIndex and conformance Text.Effect.GlyphIndex;
  if (!lazy protocol witness table cache variable for type Text.Effect.GlyphIndex and conformance Text.Effect.GlyphIndex)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.GlyphIndex, &type metadata for Text.Effect.GlyphIndex);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.GlyphIndex and conformance Text.Effect.GlyphIndex);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.GlyphIndex and conformance Text.Effect.GlyphIndex;
  if (!lazy protocol witness table cache variable for type Text.Effect.GlyphIndex and conformance Text.Effect.GlyphIndex)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.GlyphIndex, &type metadata for Text.Effect.GlyphIndex);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.GlyphIndex and conformance Text.Effect.GlyphIndex);
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<UInt32, Int>(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = type metadata accessor for _DictionaryStorage();
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t ScrollStateRequest.updateScrollable(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _ViewInputs.base.modify(a2, a3);
}

{
  return _ViewInputs.base.modify(a2, a3);
}

double ScrollStateRequestKind.UpdateValueConfig.targetDistance.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void ScrollStateRequestKind.UpdateValueConfig.targetDistance.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*ScrollStateRequestKind.UpdateValueConfig.targetDistance.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrollStateRequest.overrides(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  double v11;
  char v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;

  outlined init with copy of ScrollStateRequest?(a1, (uint64_t)&v13);
  if (!v14)
  {
    outlined destroy of ScrollStateRequest?((uint64_t)&v13, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest?, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest, (uint64_t)&protocol descriptor for ScrollStateRequest);
    return 1;
  }
  outlined init with take of ScrollStateRequest(&v13, (uint64_t)v15);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(a3 + 16))(&v13, a2, a3);
  v5 = *(double *)&v13;
  v6 = BYTE8(v13);
  v7 = v16;
  v8 = v17;
  __swift_project_boxed_opaque_existential_1(v15, v16);
  (*(void (**)(double *__return_ptr, uint64_t, uint64_t))(v8 + 16))(&v11, v7, v8);
  if ((v12 & 1) == 0)
  {
    if ((v6 & 1) == 0)
    {
      v9 = v5 < v11;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
      return v9;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    return 1;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  return 0;
}

uint64_t ScrollStateEnqueueRequests.init(phaseState:scrollable:inputs:outputs:)@<X0>(int a1@<W0>, int a2@<W1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  id v12;
  void *v13;
  id v14;
  uint64_t Context;
  uint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _DWORD *v22;
  uint64_t v23;
  int *v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t result;
  int v33;
  uint64_t v34;
  int v35;

  v8 = *a3;
  v9 = a3[3];
  v10 = *a4;
  v11 = *MEMORY[0x24BE096C0];
  if (AGGraphGetCurrentAttribute() == v11)
  {
    v12 = (id)AGSubgraphGetCurrent();
    if (!v12)
      goto LABEL_25;
    v13 = v12;
    v14 = (id)AGSubgraphGetGraph();

  }
  else
  {
    v14 = (id)AGGraphGetAttributeGraph();
  }
  Context = AGGraphGetContext();
  if (Context)
  {
    v16 = Context;
    swift_retain();

    swift_beginAccess();
    v17 = *(_DWORD *)(v16 + 64);
    swift_release();
    v18 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<[ObjectIdentifier : ScrollStateRequest]>, (uint64_t (*)(uint64_t))type metadata accessor for [ObjectIdentifier : ScrollStateRequest], (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for MutableBox);
    v34 = swift_allocObject();
    *(_QWORD *)(v34 + 16) = v18;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<UpdateScrollStateRequestKey>, (uint64_t)&type metadata for UpdateScrollStateRequestKey, (uint64_t)&protocol witness table for UpdateScrollStateRequestKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
    v20 = *(_QWORD *)(v10 + 16);
    v21 = v11;
    if (v20)
    {
      v22 = (_DWORD *)(v10 + 48);
      while (*((_QWORD *)v22 - 2) != v19)
      {
        v22 += 6;
        if (!--v20)
        {
          v21 = v11;
          goto LABEL_12;
        }
      }
      v21 = *v22;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    swift_retain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    v23 = specialized find<A>(_:key:)(v8);
    v35 = v17;
    v33 = v21;
    if (v23)
    {
      v24 = (int *)(v23 + 72);
    }
    else
    {
      if (one-time initialization token for defaultValue != -1)
        swift_once();
      v24 = &static _GraphInputs.ScrollStateRequestKey.defaultValue;
    }
    v25 = a1;
    v26 = a2;
    v27 = *v24;
    swift_bridgeObjectRelease();
    swift_release();
    swift_release_n();
    swift_retain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    v28 = specialized find<A>(_:key:)(v8);
    if (v28)
    {
      v29 = *(unsigned __int8 *)(v28 + 76);
      v30 = *(unsigned int *)(v28 + 72);
      swift_release();
      if (v29 <= 0xFEuLL)
      {
        v31 = v30 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v29 << 32);
        if ((v31 & 0x100000000) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          swift_release_n();
          result = swift_release_n();
          v11 = v31;
LABEL_23:
          *(_DWORD *)a5 = v25;
          *(_DWORD *)(a5 + 4) = v26;
          *(_QWORD *)(a5 + 8) = v9;
          *(_DWORD *)(a5 + 16) = v33;
          *(_DWORD *)(a5 + 20) = v27;
          *(_DWORD *)(a5 + 24) = v11;
          *(_DWORD *)(a5 + 28) = v35;
          *(_QWORD *)(a5 + 32) = 0xFFFFFFFFLL;
          *(_BYTE *)(a5 + 40) = 0;
          *(_QWORD *)(a5 + 44) = 0xFFFFFFFF00000000;
          *(_WORD *)(a5 + 52) = 0;
          *(_QWORD *)(a5 + 56) = v34;
          return result;
        }
      }
    }
    else
    {
      swift_release();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    result = swift_release_n();
    goto LABEL_23;
  }
  __break(1u);
LABEL_25:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _GraphInputs.updateScrollStateRequest.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;

  v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    v3 = (int *)(v2 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    v3 = &static _GraphInputs.ScrollStateRequestKey.defaultValue;
  }
  v4 = *v3;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v4;
}

Swift::Void __swiftcall ScrollStateEnqueueRequests.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t Value;
  char v6;
  char v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  _QWORD *updated;
  char v23;
  _QWORD *v24;
  char v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;
  uint64_t v48;
  __int128 v49;
  _BYTE v50[4];
  int v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[41];
  uint64_t v56;
  char v57;
  char v58;
  uint64_t v59;
  _BYTE v60[40];
  unsigned __int8 v61;
  _QWORD *v62;

  v1 = v0;
  v2 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v2 != *(_DWORD *)(v0 + 44))
  {
    *(_DWORD *)(v0 + 44) = v2;
    *(_QWORD *)(v0 + 32) = 0xFFFFFFFFLL;
    *(_BYTE *)(v0 + 40) = 0;
    v3 = *(_QWORD *)(v0 + 56);
    swift_beginAccess();
    *(_QWORD *)(v3 + 16) = MEMORY[0x24BEE4B00];
    swift_bridgeObjectRelease();
  }
  v62 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (*(_DWORD *)(v1 + 20) == *MEMORY[0x24BE096C0])
  {
    memset(v55, 0, sizeof(v55));
    outlined init with take of ScrollStateRequest?((uint64_t)v55, (uint64_t)v60);
    v51 = 0;
    v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_14;
  }
  _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest?, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest, (uint64_t)&protocol descriptor for ScrollStateRequest, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  Value = AGGraphGetValue();
  v7 = v6;
  outlined init with copy of ScrollStateRequest?(Value, (uint64_t)v60);
  v61 = v7 & 1;
  outlined init with take of ScrollStateRequest?((uint64_t)v60, (uint64_t)v55);
  v8 = v61;
  v55[40] = v61;
  outlined init with take of ScrollStateRequest?((uint64_t)v55, (uint64_t)v60);
  v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (v8 != 1)
    goto LABEL_13;
  outlined init with copy of ScrollStateRequest?((uint64_t)v60, (uint64_t)&v52);
  if (!v53)
  {
    outlined destroy of ScrollStateRequest?((uint64_t)&v52, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest?, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest, (uint64_t)&protocol descriptor for ScrollStateRequest);
LABEL_13:
    v51 = 0;
    goto LABEL_14;
  }
  outlined init with take of ScrollStateRequest(&v52, (uint64_t)v55);
  v9 = *(unsigned int *)(v1 + 4);
  v10 = *(_QWORD *)&v55[24];
  v11 = *(_QWORD *)&v55[32];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v55, *(uint64_t *)&v55[24]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v9, v10, v11);
  outlined init with copy of AnyTrackedValue((uint64_t)v55, (uint64_t)&v52);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v62 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
    v62 = v4;
  }
  v14 = v4[2];
  v13 = v4[3];
  if (v14 >= v13 >> 1)
    v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v4);
  v15 = v53;
  v16 = v54;
  v17 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v52, v53);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = &v50[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, double))(v21 + 16))(v20, v18);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, (uint64_t)v20, (uint64_t *)&v62, v15, v16);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v52);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v55);
  v51 = 1;
  v4 = v62;
LABEL_14:
  updated = ScrollStateEnqueueRequests.adjustedUpdateRequests()();
  v24 = updated;
  v25 = v23;
  if (v4[2])
    goto LABEL_15;
  if ((v23 & 1) == 0)
    goto LABEL_33;
  v29 = updated[2];
  if (v29)
  {
    v30 = (uint64_t)(updated + 4);
    do
    {
      outlined init with copy of AnyTrackedValue(v30, (uint64_t)v55);
      v31 = *(unsigned int *)(v1 + 4);
      v32 = *(_QWORD *)&v55[24];
      v33 = *(_QWORD *)&v55[32];
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v55, *(uint64_t *)&v55[24]);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 32))(v31, v32, v33);
      outlined init with copy of AnyTrackedValue((uint64_t)v55, (uint64_t)&v52);
      v34 = v62;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v34[2] + 1, 1, v34);
        v62 = v34;
      }
      v36 = v34[2];
      v35 = v34[3];
      if (v36 >= v35 >> 1)
        v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v35 > 1), v36 + 1, 1, v34);
      v37 = v53;
      v38 = v54;
      v39 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v52, v53);
      v40 = MEMORY[0x24BDAC7A8](v39);
      v42 = &v50[-((v41 + 15) & 0xFFFFFFFFFFFFFFF0)];
      (*(void (**)(_BYTE *, double))(v43 + 16))(v42, v40);
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v36, (uint64_t)v42, (uint64_t *)&v62, v37, v38);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v52);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v55);
      v30 += 40;
      --v29;
    }
    while (v29);
LABEL_15:
    if ((v25 & 1) != 0)
      goto LABEL_16;
LABEL_33:
    swift_bridgeObjectRelease();
    v27 = v51;
    goto LABEL_38;
  }
LABEL_16:
  if (AGGraphGetOutputValue())
  {
    v26 = v24[2];
    swift_bridgeObjectRelease();
    v27 = v51;
    if (v26)
      v28 = v51;
    else
      v28 = 1;
    if (v26)
      v27 = 1;
    if ((v28 & 1) != 0)
    {
LABEL_38:
      v44 = (uint64_t)v62;
      if (v62[2] && (v27 & 1) != 0)
        goto LABEL_40;
      goto LABEL_41;
    }
LABEL_37:
    v27 = specialized UpdateCycleDetector.dispatch(label:isDebug:)(1, v1 + 28);
    goto LABEL_38;
  }
  swift_bridgeObjectRelease();
  if ((v51 & 1) == 0)
    goto LABEL_37;
  v44 = (uint64_t)v62;
  if (v62[2])
  {
LABEL_40:
    v45 = *(_BYTE *)(v1 + 40);
    v46 = *(_BYTE *)(v1 + 52);
    v47 = *(_BYTE *)(v1 + 53);
    v48 = *(_QWORD *)(v1 + 56);
    v49 = *(_OWORD *)(v1 + 16);
    *(_OWORD *)v55 = *(_OWORD *)v1;
    *(_OWORD *)&v55[16] = v49;
    *(_QWORD *)&v55[32] = *(_QWORD *)(v1 + 32);
    v55[40] = v45;
    v56 = *(_QWORD *)(v1 + 44);
    v57 = v46;
    v58 = v47;
    v59 = v48;
    swift_retain();
    ScrollStateEnqueueRequests.enqueueRequests(_:)(v44);
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of ScrollStateRequest?((uint64_t)v60, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest?, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest, (uint64_t)&protocol descriptor for ScrollStateRequest);
    return;
  }
LABEL_41:
  outlined destroy of ScrollStateRequest?((uint64_t)v60, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest?, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest, (uint64_t)&protocol descriptor for ScrollStateRequest);
  swift_bridgeObjectRelease();
}

_QWORD *ScrollStateEnqueueRequests.adjustedUpdateRequests()()
{
  uint64_t v0;
  int v1;
  int v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t Value;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[64];
  __int128 v13;
  _BYTE v14[96];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[96];

  v1 = *(unsigned __int8 *)AGGraphGetValue();
  v2 = *MEMORY[0x24BE096C0];
  if (*(_DWORD *)(v0 + 16) == *MEMORY[0x24BE096C0])
  {
    v3 = 0;
  }
  else
  {
    _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for [ScrollStateRequest], (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest, (uint64_t)&protocol descriptor for ScrollStateRequest, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    AGGraphGetValue();
    v3 = swift_bridgeObjectRetain();
  }
  if (v3)
    v4 = (_QWORD *)v3;
  else
    v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (!v4[2] && *(_DWORD *)(v0 + 24) != v2)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Binding<ScrollPosition>, (uint64_t)&type metadata for ScrollPosition, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for Binding);
    Value = AGGraphGetValue();
    outlined init with copy of Binding<ScrollPosition>(Value, (uint64_t)v20);
    if (*(unsigned __int8 *)(v0 + 52) == v1)
    {
      outlined destroy of UpdateScrollStateRequest?((uint64_t)v20, &lazy cache variable for type metadata for Binding<ScrollPosition>, (uint64_t)&type metadata for ScrollPosition, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for Binding);
    }
    else
    {
      outlined init with copy of Binding<ScrollPosition>((uint64_t)v20, (uint64_t)&v9);
      outlined init with copy of Binding<ScrollPosition>((uint64_t)&v9, (uint64_t)v14);
      if (one-time initialization token for _lock != -1)
        swift_once();
      if (_MovableLockIsOwner(static Update._lock) && static Update.dispatchDepth < static Update.depth)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 104))(1);
        outlined init with copy of ScrollPosition((uint64_t)&v11, (uint64_t)v12);
      }
      else
      {
        (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v10 + 120))(v12);
      }
      outlined destroy of UpdateScrollStateRequest?((uint64_t)&v9, &lazy cache variable for type metadata for Binding<ScrollPosition>, (uint64_t)&type metadata for ScrollPosition, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for Binding);
      outlined destroy of ScrollPosition.Storage((uint64_t)v12);
      *(_QWORD *)v12 = 1;
      memset(&v12[8], 0, 48);
      *(_WORD *)&v12[56] = 1280;
      v18 = *(_OWORD *)&v12[48];
      v19 = v13;
      v16 = *(_OWORD *)&v12[16];
      v17 = *(_OWORD *)&v12[32];
      v15 = *(_OWORD *)v12;
      outlined init with copy of PositionedByUserScrollStateRequest((uint64_t)v14, (uint64_t)&v9);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
      v7 = v4[2];
      v6 = v4[3];
      if (v7 >= v6 >> 1)
        v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 1, 1, v4);
      *(_QWORD *)&v12[24] = &type metadata for PositionedByUserScrollStateRequest;
      *(_QWORD *)&v12[32] = &protocol witness table for PositionedByUserScrollStateRequest;
      *(_QWORD *)v12 = swift_allocObject();
      outlined init with copy of PositionedByUserScrollStateRequest((uint64_t)&v9, *(_QWORD *)v12 + 16);
      v4[2] = v7 + 1;
      outlined init with take of ScrollStateRequest((__int128 *)v12, (uint64_t)&v4[5 * v7 + 4]);
      outlined destroy of PositionedByUserScrollStateRequest((uint64_t)&v9);
      outlined destroy of PositionedByUserScrollStateRequest((uint64_t)v14);
      outlined destroy of UpdateScrollStateRequest?((uint64_t)v20, &lazy cache variable for type metadata for Binding<ScrollPosition>, (uint64_t)&type metadata for ScrollPosition, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for Binding);
    }
  }
  *(_BYTE *)(v0 + 52) = v1;
  return v4;
}

uint64_t ScrollStateEnqueueRequests.enqueueRequests(_:)(uint64_t a1)
{
  __int128 *v1;
  __int128 v3;
  __int128 v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  _BOOL8 v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  int64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  Swift::Int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  Swift::Int v70;
  Swift::Int v71;
  Swift::Int v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t result;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  int64_t v86;
  unint64_t v87;
  uint64_t v88;
  char v89;
  __int128 v90[2];
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;

  v3 = v1[1];
  v98 = *v1;
  v99 = v3;
  v4 = v1[3];
  v100 = v1[2];
  v101 = v4;
  AGGraphClearUpdate();
  v5 = *(unsigned __int8 *)AGGraphGetValue();
  AGGraphSetUpdate();
  v87 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    v7 = a1 + 32;
    swift_bridgeObjectRetain();
    v8 = MEMORY[0x24BEE4B00];
    v9 = v5 | 4;
    while (1)
    {
      outlined init with copy of AnyTrackedValue(v7, (uint64_t)&v94);
      v11 = v96;
      v12 = v97;
      __swift_project_boxed_opaque_existential_1(&v94, v96);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v12 + 16))(&v88, v11, v12);
      if ((v89 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v13 = v96;
        v14 = v97;
        __swift_project_boxed_opaque_existential_1(&v94, v96);
        v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v13, v14);
        outlined init with copy of AnyTrackedValue((uint64_t)&v94, (uint64_t)&v91);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)&v90[0] = v8;
        v18 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
        v19 = *(_QWORD *)(v8 + 16);
        v20 = (v17 & 1) == 0;
        v21 = v19 + v20;
        if (__OFADD__(v19, v20))
          goto LABEL_73;
        v22 = v17;
        if (*(_QWORD *)(v8 + 24) >= v21)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            specialized _NativeDictionary.copy()();
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, isUniquelyReferenced_nonNull_native);
          v23 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
          if ((v22 & 1) != (v24 & 1))
            goto LABEL_77;
          v18 = v23;
        }
        v87 = *(_QWORD *)&v90[0];
        if ((v22 & 1) == 0)
        {
          *(_QWORD *)(*(_QWORD *)&v90[0] + 8 * (v18 >> 6) + 64) |= 1 << v18;
          *(_QWORD *)(*(_QWORD *)(v87 + 48) + 8 * v18) = v15;
          outlined init with take of ScrollStateRequest(&v91, *(_QWORD *)(v87 + 56) + 40 * v18);
          v43 = *(_QWORD *)(v87 + 16);
          v44 = __OFADD__(v43, 1);
          v45 = v43 + 1;
          if (v44)
            goto LABEL_74;
LABEL_29:
          *(_QWORD *)(v87 + 16) = v45;
          goto LABEL_4;
        }
      }
      else
      {
        if (v9 == 4)
          goto LABEL_5;
        v25 = v96;
        v26 = v97;
        __swift_project_boxed_opaque_existential_1(&v94, v96);
        v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8))(v25, v26);
        if (*(_QWORD *)(v87 + 16))
        {
          v28 = specialized __RawDictionaryStorage.find<A>(_:)(v27);
          if ((v29 & 1) != 0)
          {
            outlined init with copy of AnyTrackedValue(*(_QWORD *)(v87 + 56) + 40 * v28, (uint64_t)v90);
            outlined init with take of ScrollStateRequest(v90, (uint64_t)&v91);
            v30 = v96;
            v31 = v97;
            __swift_project_boxed_opaque_existential_1(&v94, v96);
            outlined init with copy of AnyTrackedValue((uint64_t)&v91, (uint64_t)v90);
            LOBYTE(v30) = ScrollStateRequest.overrides(_:)((uint64_t)v90, v30, v31);
            outlined destroy of ScrollStateRequest?((uint64_t)v90, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest?, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest, (uint64_t)&protocol descriptor for ScrollStateRequest);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v91);
            if ((v30 & 1) == 0)
              goto LABEL_5;
          }
        }
        v32 = v96;
        v33 = v97;
        __swift_project_boxed_opaque_existential_1(&v94, v96);
        v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8))(v32, v33);
        outlined init with copy of AnyTrackedValue((uint64_t)&v94, (uint64_t)&v91);
        v35 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)&v90[0] = v87;
        v18 = specialized __RawDictionaryStorage.find<A>(_:)(v34);
        v37 = *(_QWORD *)(v87 + 16);
        v38 = (v36 & 1) == 0;
        v39 = v37 + v38;
        if (__OFADD__(v37, v38))
          goto LABEL_75;
        v40 = v36;
        if (*(_QWORD *)(v87 + 24) >= v39)
        {
          if ((v35 & 1) == 0)
            specialized _NativeDictionary.copy()();
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v39, v35);
          v41 = specialized __RawDictionaryStorage.find<A>(_:)(v34);
          if ((v40 & 1) != (v42 & 1))
            goto LABEL_77;
          v18 = v41;
        }
        v87 = *(_QWORD *)&v90[0];
        if ((v40 & 1) == 0)
        {
          *(_QWORD *)(*(_QWORD *)&v90[0] + 8 * (v18 >> 6) + 64) |= 1 << v18;
          *(_QWORD *)(*(_QWORD *)(v87 + 48) + 8 * v18) = v34;
          outlined init with take of ScrollStateRequest(&v91, *(_QWORD *)(v87 + 56) + 40 * v18);
          v46 = *(_QWORD *)(v87 + 16);
          v44 = __OFADD__(v46, 1);
          v45 = v46 + 1;
          if (v44)
            goto LABEL_76;
          goto LABEL_29;
        }
      }
      v10 = *(_QWORD *)(v87 + 56) + 40 * v18;
      __swift_destroy_boxed_opaque_existential_1(v10);
      outlined init with take of ScrollStateRequest(&v91, v10);
LABEL_4:
      swift_bridgeObjectRelease();
LABEL_5:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
      v7 += 40;
      if (!--v6)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  v85 = v87 + 64;
  v47 = 1 << *(_BYTE *)(v87 + 32);
  v48 = -1;
  if (v47 < 64)
    v48 = ~(-1 << v47);
  v49 = v48 & *(_QWORD *)(v87 + 64);
  v50 = (unint64_t)(v47 + 63) >> 6;
  v82 = v50 - 1;
  v51 = 0;
  v86 = v50;
  v83 = swift_bridgeObjectRetain() + 104;
  v84 = v50 - 5;
  while (1)
  {
    if (v49)
    {
      v53 = __clz(__rbit64(v49));
      v49 &= v49 - 1;
      v54 = v53 | (v51 << 6);
      goto LABEL_38;
    }
    v56 = v51 + 1;
    if (__OFADD__(v51, 1))
      break;
    if (v56 >= v86)
    {
      v58 = v51;
    }
    else
    {
      v57 = *(_QWORD *)(v85 + 8 * v56);
      if (v57)
        goto LABEL_42;
      v58 = v51 + 1;
      if ((uint64_t)(v51 + 2) < v86)
      {
        v57 = *(_QWORD *)(v85 + 8 * (v51 + 2));
        if (v57)
        {
          v56 = v51 + 2;
          goto LABEL_42;
        }
        v58 = v51 + 2;
        if ((uint64_t)(v51 + 3) < v86)
        {
          v57 = *(_QWORD *)(v85 + 8 * (v51 + 3));
          if (v57)
          {
            v56 = v51 + 3;
LABEL_42:
            v49 = (v57 - 1) & v57;
            v54 = __clz(__rbit64(v57)) + (v56 << 6);
            v51 = v56;
LABEL_38:
            v55 = *(_QWORD *)(v87 + 56);
            *(_QWORD *)&v91 = *(_QWORD *)(*(_QWORD *)(v87 + 48) + 8 * v54);
            outlined init with copy of AnyTrackedValue(v55 + 40 * v54, (uint64_t)&v91 + 8);
            goto LABEL_45;
          }
          v56 = v51 + 4;
          v58 = v51 + 3;
          if ((uint64_t)(v51 + 4) < v86)
          {
            v57 = *(_QWORD *)(v85 + 8 * v56);
            if (v57)
              goto LABEL_42;
            while (v84 != v51)
            {
              v57 = *(_QWORD *)(v83 + 8 * v51++);
              if (v57)
              {
                v56 = v51 + 4;
                goto LABEL_42;
              }
            }
            v58 = v82;
          }
        }
      }
    }
    v49 = 0;
    v92 = 0u;
    v93 = 0u;
    v51 = v58;
    v91 = 0u;
LABEL_45:
    outlined init with take of (key: ObjectIdentifier, value: ScrollStateRequest)?((uint64_t)&v91, (uint64_t)&v94);
    if (!v97)
    {
      swift_release();
      return swift_bridgeObjectRelease();
    }
    v59 = v94;
    outlined init with take of ScrollStateRequest(&v95, (uint64_t)&v91);
    v60 = *((_QWORD *)&v92 + 1);
    v61 = v93;
    __swift_project_boxed_opaque_existential_1(&v91, *((uint64_t *)&v92 + 1));
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v61 + 40))(v60, v61) & 1) != 0)
    {
      v62 = swift_allocObject();
      *(_QWORD *)(v62 + 16) = 0;
      v63 = (uint64_t *)(v62 + 16);
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.DisabledPageScrollAnimationKey>, (uint64_t)&type metadata for Transaction.DisabledPageScrollAnimationKey, (uint64_t)&protocol witness table for Transaction.DisabledPageScrollAnimationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
      BloomFilter.init(hashValue:)(v64);
      v65 = specialized find1<A>(_:key:filter:)(0, *(uint64_t *)&v90[0]);
      if (v65 && *(_BYTE *)(v65 + 72) == 1)
      {
        swift_beginAccess();
        v66 = swift_retain();
        v67 = specialized find<A>(_:key:)(v66);
        if (!v67 || *(_QWORD *)(v67 + 72))
        {
          v68 = *v63;
          type metadata accessor for TypedElement<TransactionPropertyKey<AnimationKey>>(0);
          *(_QWORD *)(swift_allocObject() + 72) = 0;
          type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for TransactionPropertyKey<AnimationKey>, (uint64_t)&type metadata for AnimationKey, (uint64_t)&protocol witness table for AnimationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
          v69 = v51;
          v71 = v70;
          swift_retain();
          v72 = v71;
          v51 = v69;
          *(SwiftUI::BloomFilter *)v63 = PropertyList.Element.init(keyType:before:after:)(v72, 0, v68);
          swift_release();
        }
        swift_endAccess();
        swift_release();
      }
      outlined init with copy of AnyTrackedValue((uint64_t)&v91, (uint64_t)v90);
      swift_beginAccess();
      specialized Dictionary.subscript.setter((uint64_t)v90, v59);
      swift_endAccess();
      v73 = swift_allocObject();
      *(_QWORD *)(v73 + 16) = v62;
      v74 = v99;
      *(_OWORD *)(v73 + 24) = v98;
      *(_OWORD *)(v73 + 40) = v74;
      v75 = v101;
      *(_OWORD *)(v73 + 56) = v100;
      *(_OWORD *)(v73 + 72) = v75;
      *(_QWORD *)(v73 + 88) = v59;
      swift_retain();
      outlined retain of ScrollStateEnqueueRequests((uint64_t)&v98);
      specialized static Update.begin()();
      v76 = swift_allocObject();
      *(_QWORD *)(v76 + 16) = partial apply for closure #2 in ScrollStateEnqueueRequests.enqueueRequests(_:);
      *(_QWORD *)(v76 + 24) = v73;
      v77 = one-time initialization token for actions;
      swift_retain();
      if (v77 != -1)
        swift_once();
      v78 = static Update.actions;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v78 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v78[2] + 1, 1, v78);
      v80 = v78[2];
      v79 = v78[3];
      if (v80 >= v79 >> 1)
        v78 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v79 > 1), v80 + 1, 1, v78);
      v78[2] = v80 + 1;
      v52 = &v78[2 * v80];
      v52[4] = partial apply for thunk for @escaping @callee_guaranteed () -> ();
      v52[5] = v76;
      static Update.actions = v78;
      swift_bridgeObjectRelease();
      static Update.end()();
      swift_release();
      swift_release();
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v91);
  }
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

BOOL ScrollPhaseState.shouldUpdateValue.getter()
{
  _BYTE *v0;

  return (*v0 & 0xFB) != 0;
}

uint64_t closure #2 in ScrollStateEnqueueRequests.enqueueRequests(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  swift_beginAccess();
  outlined retain of ScrollStateEnqueueRequests(a2);
  v5 = swift_retain();
  specialized closure #1 in withTransaction<A>(_:_:)(v5, a2, a3);
  return swift_release();
}

uint64_t closure #1 in closure #2 in ScrollStateEnqueueRequests.enqueueRequests(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v3 = *(_QWORD *)(a1 + 56) + 16;
  swift_beginAccess();
  v4 = *(_QWORD *)v3;
  if (!*(_QWORD *)(*(_QWORD *)v3 + 16) || (v5 = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v6 & 1) == 0))
  {
    v15 = 0;
    v13 = 0u;
    v14 = 0u;
    goto LABEL_6;
  }
  outlined init with copy of AnyTrackedValue(*(_QWORD *)(v4 + 56) + 40 * v5, (uint64_t)&v13);
  if (!*((_QWORD *)&v14 + 1))
  {
LABEL_6:
    outlined destroy of ScrollStateRequest?((uint64_t)&v13, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest?, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest, (uint64_t)&protocol descriptor for ScrollStateRequest);
    swift_endAccess();
    goto LABEL_7;
  }
  outlined init with copy of AnyTrackedValue((uint64_t)&v13, (uint64_t)v10);
  outlined destroy of ScrollStateRequest?((uint64_t)&v13, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest?, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest, (uint64_t)&protocol descriptor for ScrollStateRequest);
  swift_endAccess();
  v7 = v11;
  v8 = v12;
  __swift_project_boxed_opaque_existential_1(v10, v11);
  (*(void (**)(uint64_t, uint64_t))(v8 + 48))(v7, v8);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
LABEL_7:
  v15 = 0;
  v13 = 0u;
  v14 = 0u;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)&v13, a2);
  return swift_endAccess();
}

uint64_t ScrollToScrollStateRequest.binding.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Binding<ScrollPosition>(v1, a1);
}

uint64_t ScrollToScrollStateRequest.binding.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of Binding<ScrollPosition>(a1, v1);
}

uint64_t (*ScrollToScrollStateRequest.binding.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrollToScrollStateRequest.anchor.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 96);
}

uint64_t ScrollToScrollStateRequest.anchor.setter(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 96) = result;
  *(_QWORD *)(v3 + 104) = a2;
  *(_BYTE *)(v3 + 112) = a3 & 1;
  return result;
}

uint64_t (*ScrollToScrollStateRequest.anchor.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrollToScrollStateRequest.id.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 120);
}

uint64_t ScrollToScrollStateRequest.id.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 120) = result;
  return result;
}

uint64_t (*ScrollToScrollStateRequest.id.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrollToScrollStateRequest.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ScrollPosition(v1 + 128, a1);
}

_OWORD *ScrollToScrollStateRequest.value.setter(_OWORD *a1)
{
  uint64_t v1;

  return outlined assign with take of ScrollPosition(a1, (_OWORD *)(v1 + 128));
}

uint64_t (*ScrollToScrollStateRequest.value.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrollToScrollStateRequest.baseTransaction.getter()
{
  return swift_retain();
}

uint64_t ScrollToScrollStateRequest.baseTransaction.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v1 + 208) = a1;
  return result;
}

uint64_t (*ScrollToScrollStateRequest.baseTransaction.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double ScrollToScrollStateRequest.scrollable.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t WeakValue;
  double result;

  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for Scrollable);
  WeakValue = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of AnyTrackedValue(WeakValue, a1);
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

unint64_t ScrollToScrollStateRequest.$scrollable.getter()
{
  unsigned int Attribute;
  uint64_t v1;

  Attribute = AGWeakAttributeGetAttribute();
  if (Attribute == *MEMORY[0x24BE096C0])
    v1 = 0;
  else
    v1 = Attribute;
  return v1 | ((unint64_t)(Attribute == *MEMORY[0x24BE096C0]) << 32);
}

uint64_t ScrollToScrollStateRequest.$scrollable.setter()
{
  uint64_t v0;
  uint64_t result;

  result = AGCreateWeakAttribute();
  *(_QWORD *)(v0 + 216) = result;
  return result;
}

uint64_t (*ScrollToScrollStateRequest.$scrollable.modify(uint64_t a1))(uint64_t *a1)
{
  uint64_t v1;
  int Attribute;
  int v4;
  int v5;
  uint64_t v6;

  *(_QWORD *)a1 = v1;
  Attribute = AGWeakAttributeGetAttribute();
  v4 = *MEMORY[0x24BE096C0];
  if (Attribute == *MEMORY[0x24BE096C0])
    v5 = 0;
  else
    v5 = Attribute;
  *(_DWORD *)(a1 + 8) = v5;
  v6 = a1 + 8;
  *(_DWORD *)(v6 + 8) = v4;
  *(_BYTE *)(v6 + 4) = Attribute == v4;
  return ScrollToScrollStateRequest.$scrollable.modify;
}

uint64_t ScrollToScrollStateRequest.$scrollable.modify(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *a1;
  result = AGCreateWeakAttribute();
  *(_QWORD *)(v1 + 216) = result;
  return result;
}

double ScrollToScrollStateRequest.init(binding:anchor:id:value:baseTransaction:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  double result;

  *(_QWORD *)(a8 + 216) = 0;
  outlined init with copy of Binding<ScrollPosition>(a1, a8);
  *(_QWORD *)(a8 + 96) = a2;
  *(_QWORD *)(a8 + 104) = a3;
  *(_BYTE *)(a8 + 112) = a4 & 1;
  *(_QWORD *)(a8 + 120) = a5;
  outlined init with copy of ScrollPosition(a6, a8 + 128);
  *(_QWORD *)(a8 + 208) = a7;
  outlined destroy of ScrollPosition(a6);
  outlined destroy of UpdateScrollStateRequest?(a1, &lazy cache variable for type metadata for Binding<ScrollPosition>, (uint64_t)&type metadata for ScrollPosition, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for Binding);
  result = 0.0;
  *(_QWORD *)(a8 + 216) = 0;
  return result;
}

void ScrollToScrollStateRequest.kind.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

uint64_t ScrollToScrollStateRequest.transaction.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 208);
  v9 = v1;
  v2 = swift_retain_n();
  specialized closure #1 in PropertyList.subscript.getter(v2);
  v4 = v3;
  swift_release();
  if ((v4 & 1) != 0)
  {
    v5 = *(_QWORD *)(v0 + 96);
    v6 = *(_QWORD *)(v0 + 104);
    v7 = *(_BYTE *)(v0 + 112);
    swift_retain();
    specialized closure #1 in PropertyList.subscript.setter(&v9, v5, v6, v7);
    swift_release();
    return v9;
  }
  return v1;
}

uint64_t ScrollToScrollStateRequest.updateScrollable(_:)()
{
  uint64_t v0;
  uint64_t result;

  result = AGCreateWeakAttribute();
  *(_QWORD *)(v0 + 216) = result;
  return result;
}

uint64_t ScrollToScrollStateRequest.hasUpdate.getter()
{
  return 1;
}

Swift::Bool __swiftcall ScrollToScrollStateRequest.update()()
{
  uint64_t v0;
  uint64_t WeakValue;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v12[10];
  _BYTE v13[40];

  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for Scrollable);
  WeakValue = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of AnyTrackedValue(WeakValue, (uint64_t)v13);
    v2 = *(_QWORD *)(v0 + 208);
    v12[0] = v2;
    v3 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v3);
    v5 = v4;
    v6 = swift_release();
    if ((v5 & 1) != 0)
    {
      v7 = *(_QWORD *)(v0 + 96);
      v8 = *(_QWORD *)(v0 + 104);
      v9 = *(_BYTE *)(v0 + 112);
      swift_retain();
      specialized closure #1 in PropertyList.subscript.setter(v12, v7, v8, v9);
      v6 = swift_release();
      v2 = v12[0];
    }
    MEMORY[0x24BDAC7A8](v6);
    v10 = specialized closure #1 in withTransaction<A>(_:_:)(v2, (void (*)(uint64_t *__return_ptr, _QWORD *))partial apply for closure #1 in ScrollToScrollStateRequest.update());
    swift_release();
    if ((v10 & 1) != 0)
    {
      outlined init with copy of ScrollPosition(v0 + 128, (uint64_t)v12);
      (*(void (**)(uint64_t *, _QWORD))(**(_QWORD **)(v0 + 8) + 128))(v12, *(_QWORD *)v0);
      outlined destroy of ScrollPosition((uint64_t)v12);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
      LOBYTE(WeakValue) = 1;
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
      LOBYTE(WeakValue) = 0;
    }
  }
  return WeakValue;
}

uint64_t protocol witness for ScrollStateRequest.id.getter in conformance ScrollToScrollStateRequest()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 120);
}

void protocol witness for ScrollStateRequest.kind.getter in conformance ScrollToScrollStateRequest(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

uint64_t protocol witness for ScrollStateRequest.transaction.getter in conformance ScrollToScrollStateRequest()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 208);
  v9 = v1;
  v2 = swift_retain_n();
  specialized closure #1 in PropertyList.subscript.getter(v2);
  v4 = v3;
  swift_release();
  if ((v4 & 1) != 0)
  {
    v5 = *(_QWORD *)(v0 + 96);
    v6 = *(_QWORD *)(v0 + 104);
    v7 = *(_BYTE *)(v0 + 112);
    swift_retain();
    specialized closure #1 in PropertyList.subscript.setter(&v9, v5, v6, v7);
    swift_release();
    return v9;
  }
  return v1;
}

uint64_t protocol witness for ScrollStateRequest.updateScrollable(_:) in conformance ScrollToScrollStateRequest()
{
  uint64_t v0;
  uint64_t result;

  result = AGCreateWeakAttribute();
  *(_QWORD *)(v0 + 216) = result;
  return result;
}

double ScrollStateRequestTransform.init(collection:inputs:)@<D0>(int a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  int v10;
  double result;
  uint64_t v12;

  v5 = *a2;
  v6 = *((_DWORD *)a2 + 2);
  v7 = a2[2];
  v8 = a2[5];
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 100) = 0u;
  *(int32x2_t *)a3 = vrev64_s32(*(int32x2_t *)((char *)a2 + 60));
  *(_DWORD *)(a3 + 12) = a1;
  KeyPath = swift_getKeyPath();
  swift_beginAccess();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v10 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_endAccess();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_DWORD *)(a3 + 16) = v10;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a3 + 24) = v5;
  *(_DWORD *)(a3 + 32) = v6;
  *(_QWORD *)(a3 + 40) = v7;
  result = *((double *)a2 + 3);
  v12 = a2[4];
  *(_DWORD *)(a3 + 8) = LODWORD(result);
  *(double *)(a3 + 48) = result;
  *(_QWORD *)(a3 + 56) = v12;
  *(_QWORD *)(a3 + 64) = v8;
  return result;
}

Swift::Void __swiftcall ScrollStateRequestTransform.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  float64x2_t *Value;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, _QWORD);
  float64x2_t v7;
  __int128 v8;
  uint64_t v9;
  int *v10;
  int v11;
  int v12;
  __int128 *v13;
  double v14;
  double v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  _QWORD v25[5];
  uint64_t (*v26)(_QWORD, _QWORD);
  float64x2_t v27;
  float64x2_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  _BYTE v32[48];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(v0 + 112) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    outlined destroy of ScrollStateRequest?(v0 + 72, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest?, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest, (uint64_t)&protocol descriptor for ScrollStateRequest);
    *(_OWORD *)(v0 + 72) = 0u;
    *(_OWORD *)(v0 + 88) = 0u;
    *(_QWORD *)(v0 + 104) = 0;
    *(_DWORD *)(v0 + 112) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  v1 = *(_QWORD *)(v0 + 24);
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v2 = specialized find<A>(_:key:)(v1);
  if (!v2)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release_n();
    goto LABEL_8;
  }
  v3 = *(unsigned __int8 *)(v2 + 76);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  if (v3 > 0xFE)
  {
LABEL_8:
    *(_QWORD *)&v31 = _ViewInputs.base.modify;
    *((_QWORD *)&v31 + 1) = 0;
    type metadata accessor for (_:)();
    AGGraphSetOutputValue();
    return;
  }
  Value = (float64x2_t *)AGGraphGetValue();
  v5 = AGGraphGetValue();
  v6 = *(uint64_t (**)(_QWORD, _QWORD))v5;
  v34 = 0u;
  v35 = 0u;
  v33 = 0u;
  memset(v32, 0, sizeof(v32));
  v31 = 0u;
  v36 = 1;
  v26 = v6;
  v7 = vsubq_f64(*(float64x2_t *)(v5 + 24), vsubq_f64(*Value, *(float64x2_t *)(v5 + 8)));
  v27 = *Value;
  v28 = v7;
  swift_retain();
  specialized ViewTransform.forEach(inverted:_:)(0, (uint64_t)&v26, (uint64_t)&v31);
  if ((v36 & 1) != 0)
    goto LABEL_32;
  v8 = v33;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v9 = specialized find<A>(_:key:)(v1);
  if (v9)
  {
    v10 = (int *)(v9 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    v10 = &static _GraphInputs.ContentScrollPositionAnchorKey.defaultValue;
  }
  v11 = *v10;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  v12 = *MEMORY[0x24BE096C0];
  if (v11 == *MEMORY[0x24BE096C0]
    || (type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for UnitPoint?, (uint64_t)&type metadata for UnitPoint, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]), v13 = (__int128 *)AGGraphGetValue(), (v13[1] & 1) != 0))
  {
    if (one-time initialization token for topLeading != -1)
      swift_once();
    v13 = &static UnitPoint.topLeading;
  }
  v15 = *(double *)v13;
  v14 = *((double *)v13 + 1);
  if (*(_BYTE *)AGGraphGetValue())
    v15 = 1.0 - v15;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v16 = specialized find<A>(_:key:)(v1);
  if (!v16)
  {
    swift_release();
LABEL_31:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    goto LABEL_32;
  }
  v17 = *(unsigned __int8 *)(v16 + 76);
  v18 = *(unsigned int *)(v16 + 72);
  swift_release();
  if (v17 > 0xFEuLL)
    goto LABEL_31;
  v19 = v18 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v17 << 32);
  if ((v19 & 0x100000000) != 0)
    goto LABEL_31;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v12 != (_DWORD)v19)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Binding<ScrollPosition>, (uint64_t)&type metadata for ScrollPosition, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for Binding);
    v20 = AGGraphGetValue();
    outlined init with copy of Binding<ScrollPosition>(v20, (uint64_t)&v31);
    if (one-time initialization token for _lock != -1)
      swift_once();
    if (_MovableLockIsOwner(static Update._lock) && static Update.dispatchDepth < static Update.depth)
    {
      (*(void (**)(uint64_t))(**((_QWORD **)&v31 + 1) + 104))(1);
      outlined init with copy of ScrollPosition((uint64_t)v32, (uint64_t)&v26);
    }
    else
    {
      (*(void (**)(uint64_t (**__return_ptr)(_QWORD, _QWORD)))(**((_QWORD **)&v31 + 1) + 120))(&v26);
    }
    v21 = v29;
    v22 = v30;
    outlined destroy of ScrollPosition((uint64_t)&v26);
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);
    v23 = AGGraphGetValue();
    outlined init with copy of AnyTrackedValue(v23, (uint64_t)v25);
    v24 = ScrollStateRequestTransform.findClosestSubview<A>(idType:position:anchor:collection:containerSize:)(v21, (uint64_t)&v31, v25, v21, v22, v15, v14, *(double *)&v8, *((double *)&v8 + 1));
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    if (!v24)
    {
      v26 = _ViewInputs.base.modify;
      v27.f64[0] = 0.0;
      type metadata accessor for (_:)();
      AGGraphSetOutputValue();
    }
    outlined destroy of UpdateScrollStateRequest?((uint64_t)&v31, &lazy cache variable for type metadata for Binding<ScrollPosition>, (uint64_t)&type metadata for ScrollPosition, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for Binding);
    goto LABEL_33;
  }
LABEL_32:
  v31 = (unint64_t)_ViewInputs.base.modify;
  type metadata accessor for (_:)();
  AGGraphSetOutputValue();
LABEL_33:
  swift_release();
}

BOOL ScrollStateRequestTransform.findClosestSubview<A>(idType:position:anchor:collection:containerSize:)(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, double a6, double a7, double a8, double a9)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  BOOL v29;
  uint64_t v30;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char v35[16];
  uint64_t v36;
  uint64_t v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double *v42;
  char *v43;
  double v44;

  v32 = a2;
  v16 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v33 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Optional();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v32 - v24;
  v44 = INFINITY;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v16 + 56))((char *)&v32 - v24, 1, 1, a4, v23);
  v27 = a3[3];
  v26 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v27);
  v36 = a4;
  v37 = a5;
  v34 = a5;
  v38 = a6;
  v39 = a7;
  v40 = a8;
  v41 = a9;
  v42 = &v44;
  v43 = v25;
  (*(void (**)(uint64_t (*)(double *, uint64_t, __n128, __n128, __n128, __n128), char *, uint64_t, uint64_t))(v26 + 24))(partial apply for closure #1 in ScrollStateRequestTransform.findClosestSubview<A>(idType:position:anchor:collection:containerSize:), v35, v27, v26);
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v21, v25, v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v21, 1, a4) == 1)
  {
    v28 = *(void (**)(char *, uint64_t))(v19 + 8);
    v28(v21, v18);
    v29 = 0;
  }
  else
  {
    v30 = (uint64_t)v33;
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v33, v21, a4);
    v29 = ScrollStateRequestTransform.updateRequest<A>(id:position:targetDistance:)(v30, v32, a4, v34, v44);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v30, a4);
    v28 = *(void (**)(char *, uint64_t))(v19 + 8);
  }
  v28(v25, v18);
  return v29;
}

uint64_t closure #1 in ScrollStateRequestTransform.findClosestSubview<A>(idType:position:anchor:collection:containerSize:)(double *a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5, uint64_t a6, double *a7, char *a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  float64_t v21;
  float64_t v22;
  float64_t v23;
  float64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  void (*v31)(char *, char *, uint64_t);
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  double v35;
  double *v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  double *v41;
  uint64_t v42[5];
  _QWORD v43[5];
  char v44;
  float64x2_t v45;
  float64x2_t v46;

  v41 = a7;
  v39 = a5;
  v38 = a4;
  v37 = a3;
  v40 = a2;
  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v37 - v14;
  v16 = *(_QWORD *)(a9 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *((_QWORD *)a1 + 1);
  v21 = a1[2];
  v22 = a1[3];
  v23 = a1[4];
  v24 = a1[5];
  v25 = *((_QWORD *)a1 + 6);
  v26 = *((_QWORD *)a1 + 7);
  v27 = *((_QWORD *)a1 + 8);
  v28 = *((_QWORD *)a1 + 9);
  v29 = *((_QWORD *)a1 + 10);
  *(double *)v43 = *a1;
  v43[1] = v20;
  _ViewList_ID.explicitID<A>(for:)(a9, (uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, a9) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v31 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  v31(v19, v15, a9);
  v45.f64[0] = v21;
  v45.f64[1] = v22;
  v46.f64[0] = v23;
  v46.f64[1] = v24;
  if (one-time initialization token for all != -1)
    swift_once();
  v43[0] = static ScrollCoordinateSpace.all;
  v44 = 1;
  v42[0] = v25;
  v42[1] = v26;
  v42[2] = v27;
  v42[3] = v28;
  v42[4] = v29;
  CGRect.convert(to:transform:)((uint64_t)v43, v42);
  outlined destroy of CoordinateSpace((uint64_t)v43);
  *(_QWORD *)&v32.f64[0] = v40.n128_u64[0];
  *(_QWORD *)&v32.f64[1] = v37.n128_u64[0];
  *(_QWORD *)&v33.f64[0] = v38.n128_u64[0];
  *(_QWORD *)&v33.f64[1] = v39.n128_u64[0];
  v34 = vsubq_f64(vaddq_f64(v45, vmulq_f64(v46, v32)), vaddq_f64(vmulq_f64(v32, v33), (float64x2_t)0));
  v35 = fabs(sqrt(vaddvq_f64(vmulq_f64(v34, v34))));
  v36 = v41;
  if (v35 >= *v41)
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, a9);
  (*(void (**)(char *, uint64_t))(v13 + 8))(a8, v12);
  v31(a8, v19, a9);
  result = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(a8, 0, 1, a9);
  *v36 = v35;
  return result;
}

BOOL ScrollStateRequestTransform.updateRequest<A>(id:position:targetDistance:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v5;
  BOOL v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _QWORD v32[12];
  _BYTE v33[88];
  double v34;
  _QWORD v35[11];

  v35[10] = *MEMORY[0x24BDAC8D0];
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock) && static Update.dispatchDepth < static Update.depth)
  {
    (*(void (**)(uint64_t))(**(_QWORD **)(a2 + 8) + 104))(1);
    outlined init with copy of ScrollPosition(a2 + 16, (uint64_t)v32);
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(a2 + 8) + 120))(v32);
  }
  v11 = ScrollPosition.matches<A>(id:)();
  outlined destroy of ScrollPosition((uint64_t)v32);
  if (v11)
  {
    if (_MovableLockIsOwner(static Update._lock) && static Update.dispatchDepth < static Update.depth)
    {
      (*(void (**)(uint64_t))(**(_QWORD **)(a2 + 8) + 104))(1);
      outlined init with copy of ScrollPosition(a2 + 16, (uint64_t)v35);
    }
    else
    {
      (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(a2 + 8) + 120))(v35);
    }
    ScrollPosition.scrollTo<A>(id:anchor:)(a1, 0, 0, 1, a3, a4);
    outlined init with copy of Binding<ScrollPosition>(a2, (uint64_t)v32);
    outlined init with copy of ScrollPosition((uint64_t)v35, (uint64_t)v33);
    v33[80] = 1;
    v34 = a5;
    if (ScrollStateRequestTransform.shouldUpdate(to:)((uint64_t)v32))
    {
      outlined init with copy of UpdateScrollStateRequest((uint64_t)v32, (uint64_t)&v20);
      v12 = (_OWORD *)swift_allocObject();
      v13 = v29;
      v12[9] = v28;
      v12[10] = v13;
      v14 = v31;
      v12[11] = v30;
      v12[12] = v14;
      v15 = v25;
      v12[5] = v24;
      v12[6] = v15;
      v16 = v27;
      v12[7] = v26;
      v12[8] = v16;
      v17 = v21;
      v12[1] = v20;
      v12[2] = v17;
      v18 = v23;
      v12[3] = v22;
      v12[4] = v18;
      type metadata accessor for (_:)();
      AGGraphSetOutputValue();
      swift_release();
    }
    *((_QWORD *)&v21 + 1) = &type metadata for UpdateScrollStateRequest;
    *(_QWORD *)&v22 = &protocol witness table for UpdateScrollStateRequest;
    *(_QWORD *)&v20 = swift_allocObject();
    outlined init with copy of UpdateScrollStateRequest((uint64_t)v32, v20 + 16);
    outlined assign with take of ScrollStateRequest?((uint64_t)&v20, v5 + 72);
    outlined destroy of UpdateScrollStateRequest((uint64_t)v32);
    outlined destroy of ScrollPosition((uint64_t)v35);
  }
  return v11;
}

BOOL ScrollStateRequestTransform.shouldUpdate(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t OutputValue;
  _BOOL8 v4;
  char v5;
  BOOL v6;
  int v7;
  int v8;
  double v10[24];
  _BYTE v11[184];
  double v12;
  _BYTE v13[192];
  _BYTE v14[192];
  _BYTE v15[96];
  uint64_t v16[9];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;

  type metadata accessor for (_:)();
  OutputValue = AGGraphGetOutputValue();
  v4 = OutputValue == 0;
  outlined init with copy of ScrollStateRequest?(v1 + 72, (uint64_t)&v29);
  if (*((_QWORD *)&v30 + 1))
  {
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest);
    if ((swift_dynamicCast() & 1) != 0)
    {
      if (*((_QWORD *)&v17 + 1))
      {
        v37 = v25;
        v38 = v26;
        v39 = v27;
        v40 = v28;
        v33 = v21;
        v34 = v22;
        v35 = v23;
        v36 = v24;
        v29 = v17;
        v30 = v18;
        v31 = v19;
        v32 = v20;
        outlined init with copy of UpdateScrollStateRequest((uint64_t)&v29, (uint64_t)&v17);
        outlined init with copy of UpdateScrollStateRequest(a1, (uint64_t)v15);
        if (OutputValue
          && (specialized static ScrollPosition.Storage.== infix(_:_:)((uint64_t)&v23, (uint64_t)v16), (v5 & 1) != 0))
        {
          v6 = project #1 <A, B>(lhs:rhs:) in static ScrollPosition.== infix(_:_:)(v27, v16[8]);
          outlined destroy of UpdateScrollStateRequest((uint64_t)v15);
          outlined destroy of UpdateScrollStateRequest((uint64_t)&v17);
          outlined init with copy of UpdateScrollStateRequest((uint64_t)&v29, (uint64_t)v14);
          outlined init with copy of UpdateScrollStateRequest(a1, (uint64_t)v13);
          if (v6)
          {
            v7 = v14[176];
            outlined destroy of UpdateScrollStateRequest((uint64_t)v14);
            v8 = v13[176];
            outlined destroy of UpdateScrollStateRequest((uint64_t)v13);
            outlined init with copy of UpdateScrollStateRequest((uint64_t)&v29, (uint64_t)v11);
            outlined init with copy of UpdateScrollStateRequest(a1, (uint64_t)v10);
            if (v7 == v8)
            {
              v4 = vabdd_f64(v12, v10[23]) >= 0.1;
LABEL_16:
              outlined destroy of UpdateScrollStateRequest((uint64_t)v10);
              outlined destroy of UpdateScrollStateRequest((uint64_t)v11);
              outlined destroy of UpdateScrollStateRequest((uint64_t)&v29);
              return v4;
            }
LABEL_15:
            v4 = 1;
            goto LABEL_16;
          }
        }
        else
        {
          outlined destroy of UpdateScrollStateRequest((uint64_t)v15);
          outlined destroy of UpdateScrollStateRequest((uint64_t)&v17);
          outlined init with copy of UpdateScrollStateRequest((uint64_t)&v29, (uint64_t)v14);
          outlined init with copy of UpdateScrollStateRequest(a1, (uint64_t)v13);
        }
        outlined destroy of UpdateScrollStateRequest((uint64_t)v13);
        outlined destroy of UpdateScrollStateRequest((uint64_t)v14);
        outlined init with copy of UpdateScrollStateRequest((uint64_t)&v29, (uint64_t)v11);
        outlined init with copy of UpdateScrollStateRequest(a1, (uint64_t)v10);
        goto LABEL_15;
      }
    }
    else
    {
      v28 = 0u;
      v27 = 0u;
      v26 = 0u;
      v25 = 0u;
      v24 = 0u;
      v23 = 0u;
      v22 = 0u;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v17 = 0u;
    }
  }
  else
  {
    outlined destroy of ScrollStateRequest?((uint64_t)&v29, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest?, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest, (uint64_t)&protocol descriptor for ScrollStateRequest);
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
  }
  outlined destroy of UpdateScrollStateRequest?((uint64_t)&v17, &lazy cache variable for type metadata for UpdateScrollStateRequest?, (uint64_t)&type metadata for UpdateScrollStateRequest, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  return v4;
}

uint64_t closure #1 in ScrollStateRequestTransform.updateRequest<A>(id:position:targetDistance:)(_QWORD **a1, uint64_t a2)
{
  _QWORD *v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v5;
  unint64_t v6;
  __int128 v8;
  ValueMetadata *v9;
  _UNKNOWN **v10;
  _BYTE v11[192];

  outlined init with copy of UpdateScrollStateRequest(a2, (uint64_t)v11);
  v3 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
    *a1 = v3;
  }
  v6 = v3[2];
  v5 = v3[3];
  if (v6 >= v5 >> 1)
  {
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v5 > 1), v6 + 1, 1, v3);
    *a1 = v3;
  }
  v9 = &type metadata for UpdateScrollStateRequest;
  v10 = &protocol witness table for UpdateScrollStateRequest;
  *(_QWORD *)&v8 = swift_allocObject();
  outlined init with copy of UpdateScrollStateRequest((uint64_t)v11, v8 + 16);
  v3[2] = v6 + 1;
  outlined init with take of ScrollStateRequest(&v8, (uint64_t)&v3[5 * v6 + 4]);
  return outlined destroy of UpdateScrollStateRequest((uint64_t)v11);
}

void protocol witness for static StatefulRule.initialValue.getter in conformance ScrollStateRequestTransform(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t UpdateScrollStateRequest.binding.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Binding<ScrollPosition>(v1, a1);
}

uint64_t UpdateScrollStateRequest.binding.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of Binding<ScrollPosition>(a1, v1);
}

uint64_t (*UpdateScrollStateRequest.binding.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t UpdateScrollStateRequest.newPosition.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ScrollPosition(v1 + 96, a1);
}

_OWORD *UpdateScrollStateRequest.newPosition.setter(_OWORD *a1)
{
  uint64_t v1;

  return outlined assign with take of ScrollPosition(a1, (_OWORD *)(v1 + 96));
}

uint64_t (*UpdateScrollStateRequest.newPosition.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t UpdateScrollStateRequest.isVisible.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 176);
}

uint64_t UpdateScrollStateRequest.isVisible.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 176) = result;
  return result;
}

uint64_t (*UpdateScrollStateRequest.isVisible.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double UpdateScrollStateRequest.targetDistance.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 184);
}

void UpdateScrollStateRequest.targetDistance.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 184) = a1;
}

uint64_t (*UpdateScrollStateRequest.targetDistance.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t UpdateScrollStateRequest.id.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

void UpdateScrollStateRequest.kind.getter(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)a1 = *(_QWORD *)(v1 + 184);
  *(_BYTE *)(a1 + 8) = 0;
}

uint64_t UpdateScrollStateRequest.hasUpdate.getter()
{
  uint64_t v0;
  char v1;
  _QWORD v3[10];

  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock) && static Update.dispatchDepth < static Update.depth)
  {
    (*(void (**)(uint64_t))(**(_QWORD **)(v0 + 8) + 104))(1);
    outlined init with copy of ScrollPosition(v0 + 16, (uint64_t)v3);
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v0 + 8) + 120))(v3);
  }
  v1 = ScrollPosition.wantsUpdate(toPosition:)(v0 + 96);
  outlined destroy of ScrollPosition((uint64_t)v3);
  return v1 & 1;
}

Swift::Bool __swiftcall UpdateScrollStateRequest.update()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::Int v3;
  SwiftUI::BloomFilter v4;
  uint64_t v5;
  char v6;
  uint64_t v8;

  v8 = 0;
  specialized closure #1 in PropertyList.subscript.setter(&v8, 1);
  v0 = v8;
  v1 = swift_retain();
  v2 = specialized find<A>(_:key:)(v1);
  if (v2 && !*(_QWORD *)(v2 + 72))
  {
    v4.value = v0;
  }
  else
  {
    type metadata accessor for TypedElement<TransactionPropertyKey<AnimationKey>>(0);
    *(_QWORD *)(swift_allocObject() + 72) = 0;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for TransactionPropertyKey<AnimationKey>, (uint64_t)&type metadata for AnimationKey, (uint64_t)&protocol witness table for AnimationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    v4.value = PropertyList.Element.init(keyType:before:after:)(v3, 0, v0).value;
  }
  v5 = swift_release();
  MEMORY[0x24BDAC7A8](v5);
  v6 = specialized closure #1 in withTransaction<A>(_:_:)(v4.value, (void (*)(uint64_t *__return_ptr, _QWORD *))partial apply for closure #1 in UpdateScrollStateRequest.update());
  swift_release();
  return v6 & 1;
}

uint64_t closure #1 in UpdateScrollStateRequest.update()@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  char v4;
  _BYTE v5[80];

  if (*(_BYTE *)(result + 176) == 1)
  {
    v3 = result;
    outlined init with copy of ScrollPosition(result + 96, (uint64_t)v5);
    (*(void (**)(_BYTE *, _QWORD))(**(_QWORD **)(v3 + 8) + 128))(v5, *(_QWORD *)v3);
    result = outlined destroy of ScrollPosition((uint64_t)v5);
    v4 = *(_BYTE *)(v3 + 176);
  }
  else
  {
    v4 = 0;
  }
  *a2 = v4;
  return result;
}

uint64_t protocol witness for ScrollStateRequest.id.getter in conformance UpdateScrollStateRequest()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

void protocol witness for ScrollStateRequest.kind.getter in conformance UpdateScrollStateRequest(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)a1 = *(_QWORD *)(v1 + 184);
  *(_BYTE *)(a1 + 8) = 0;
}

uint64_t protocol witness for ScrollStateRequest.transaction.getter in conformance UpdateScrollStateRequest()
{
  return UpdateScrollStateRequest.transaction.getter();
}

Swift::UInt UpdateScrollStateRequest.transaction.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::UInt value;
  Swift::Int v4;
  uint64_t v6;

  v6 = 0;
  specialized closure #1 in PropertyList.subscript.setter(&v6, 1);
  v0 = v6;
  v1 = swift_retain();
  v2 = specialized find<A>(_:key:)(v1);
  if (!v2 || (value = v0, *(_QWORD *)(v2 + 72)))
  {
    type metadata accessor for TypedElement<TransactionPropertyKey<AnimationKey>>(0);
    *(_QWORD *)(swift_allocObject() + 72) = 0;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for TransactionPropertyKey<AnimationKey>, (uint64_t)&type metadata for AnimationKey, (uint64_t)&protocol witness table for AnimationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    value = PropertyList.Element.init(keyType:before:after:)(v4, 0, v0).value;
  }
  swift_release();
  return value;
}

uint64_t PositionedByUserScrollStateRequest.hasUpdate.getter()
{
  uint64_t v0;
  char v1;
  _QWORD v3[10];

  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock) && static Update.dispatchDepth < static Update.depth)
  {
    (*(void (**)(uint64_t))(**(_QWORD **)(v0 + 8) + 104))(1);
    outlined init with copy of ScrollPosition(v0 + 16, (uint64_t)v3);
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v0 + 8) + 120))(v3);
  }
  v1 = ScrollPosition.wantsUpdate(toPosition:)(v0 + 96);
  outlined destroy of ScrollPosition((uint64_t)v3);
  return v1 & 1;
}

Swift::Bool __swiftcall PositionedByUserScrollStateRequest.update()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::Int v3;
  SwiftUI::BloomFilter v4;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  specialized closure #1 in PropertyList.subscript.setter(&v7, 1);
  v0 = v7;
  v1 = swift_retain();
  v2 = specialized find<A>(_:key:)(v1);
  if (v2 && !*(_QWORD *)(v2 + 72))
  {
    v4.value = v0;
  }
  else
  {
    type metadata accessor for TypedElement<TransactionPropertyKey<AnimationKey>>(0);
    *(_QWORD *)(swift_allocObject() + 72) = 0;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for TransactionPropertyKey<AnimationKey>, (uint64_t)&type metadata for AnimationKey, (uint64_t)&protocol witness table for AnimationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    v4.value = PropertyList.Element.init(keyType:before:after:)(v3, 0, v0).value;
  }
  v5 = swift_release();
  MEMORY[0x24BDAC7A8](v5);
  specialized closure #1 in withTransaction<A>(_:_:)(v4.value, (void (*)(_QWORD *))partial apply for closure #1 in PositionedByUserScrollStateRequest.update());
  swift_release();
  return 1;
}

void protocol witness for ScrollStateRequest.kind.getter in conformance PositionedByUserScrollStateRequest(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

Swift::UInt protocol witness for ScrollStateRequest.transaction.getter in conformance PositionedByUserScrollStateRequest()
{
  return UpdateScrollStateRequest.transaction.getter();
}

uint64_t protocol witness for ScrollStateRequest.update() in conformance PositionedByUserScrollStateRequest()
{
  PositionedByUserScrollStateRequest.update()();
  return 1;
}

uint64_t key path getter for _GraphInputs.updateScrollStateRequest : _GraphInputs@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = _GraphInputs.updateScrollStateRequest.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for _GraphInputs.updateScrollStateRequest : _GraphInputs(int *a1, uint64_t *a2)
{
  int v3;
  uint64_t v5;

  v3 = *a1;
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3, (uint64_t)&v5);
  return swift_release();
}

uint64_t _GraphInputs.updateScrollStateRequest.setter(int a1)
{
  uint64_t *v1;
  uint64_t v4;

  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1, (uint64_t)&v4);
  return swift_release();
}

uint64_t (*_GraphInputs.updateScrollStateRequest.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  int v6;

  v2 = (int *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v1;
  v3 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v4 = specialized find<A>(_:key:)(v3);
  if (v4)
  {
    v5 = (int *)(v4 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    v5 = &static _GraphInputs.ScrollStateRequestKey.defaultValue;
  }
  v6 = *v5;
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *v2 = v6;
  return _GraphInputs.updateScrollStateRequest.modify;
}

uint64_t _GraphInputs.updateScrollStateRequest.modify(uint64_t a1, char a2)
{
  int v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;

  v4 = *(_DWORD *)(a1 + 24);
  v5 = *(uint64_t **)(a1 + 16);
  swift_retain();
  if ((a2 & 1) != 0)
  {
    v6 = v5;
    v7 = v4;
    v8 = a1;
  }
  else
  {
    v8 = a1 + 8;
    v6 = v5;
    v7 = v4;
  }
  specialized closure #1 in PropertyList.subscript.setter(v6, v7, v8);
  return swift_release();
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.ScrollStateRequestKey@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  if (one-time initialization token for defaultValue != -1)
    result = swift_once();
  *a1 = static _GraphInputs.ScrollStateRequestKey.defaultValue;
  return result;
}

__n128 ScrollGeometryState.geometry.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;

  v2 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 48) = v3;
  v4 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  result = *(__n128 *)(v1 + 96);
  *(__n128 *)(a1 + 96) = result;
  return result;
}

__n128 ScrollGeometryState.geometry.setter(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;

  v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v1 = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 16) = v2;
  v3 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v1 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v1 + 48) = v3;
  v4 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v1 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v1 + 80) = v4;
  result = *(__n128 *)(a1 + 96);
  *(__n128 *)(v1 + 96) = result;
  return result;
}

uint64_t (*ScrollGeometryState.geometry.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrollGeometryState.scrollableAxes.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 112);
}

uint64_t ScrollGeometryState.scrollableAxes.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 112) = result;
  return result;
}

uint64_t (*ScrollGeometryState.scrollableAxes.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrollGeometryState.transform.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  result = AGGraphGetWeakValue();
  if (result)
  {
    v6 = *(_OWORD *)result;
    v7 = *(_OWORD *)(result + 16);
    v3 = *(_QWORD *)(result + 32);
    result = swift_retain();
    v4 = v6;
    v5 = v7;
  }
  else
  {
    v3 = 0;
    v4 = xmmword_235260EF0;
    v5 = 0uLL;
  }
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 32) = v3;
  return result;
}

unint64_t ScrollGeometryState.$transform.getter()
{
  unsigned int Attribute;
  uint64_t v1;

  Attribute = AGWeakAttributeGetAttribute();
  if (Attribute == *MEMORY[0x24BE096C0])
    v1 = 0;
  else
    v1 = Attribute;
  return v1 | ((unint64_t)(Attribute == *MEMORY[0x24BE096C0]) << 32);
}

uint64_t ScrollGeometryState.$transform.setter()
{
  uint64_t v0;
  uint64_t result;

  result = AGCreateWeakAttribute();
  *(_QWORD *)(v0 + 116) = result;
  return result;
}

uint64_t (*ScrollGeometryState.$transform.modify(uint64_t a1))(uint64_t *a1)
{
  uint64_t v1;
  int Attribute;
  int v4;
  int v5;
  uint64_t v6;

  *(_QWORD *)a1 = v1;
  Attribute = AGWeakAttributeGetAttribute();
  v4 = *MEMORY[0x24BE096C0];
  if (Attribute == *MEMORY[0x24BE096C0])
    v5 = 0;
  else
    v5 = Attribute;
  *(_DWORD *)(a1 + 8) = v5;
  v6 = a1 + 8;
  *(_DWORD *)(v6 + 8) = v4;
  *(_BYTE *)(v6 + 4) = Attribute == v4;
  return ScrollGeometryState.$transform.modify;
}

uint64_t ScrollGeometryState.$transform.modify(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *a1;
  result = AGCreateWeakAttribute();
  *(_QWORD *)(v1 + 116) = result;
  return result;
}

__n128 ScrollGeometryState.init(geometry:scrollableAxes:transform:)@<Q0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;

  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(_OWORD *)(a4 + 16) = v4;
  v5 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a4 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a4 + 48) = v5;
  v6 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a4 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a4 + 80) = v6;
  result = *(__n128 *)(a1 + 96);
  *(__n128 *)(a4 + 96) = result;
  *(_BYTE *)(a4 + 112) = a2;
  *(_QWORD *)(a4 + 116) = a3;
  return result;
}

double static ScrollGeometryState.zero.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_BYTE *)(a1 + 112) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 116) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  return result;
}

uint64_t static ScrollGeometryPreferenceKey.defaultValue.getter()
{
  return static ScrollGeometryPreferenceKey.defaultValue.getter(&one-time initialization token for defaultValue);
}

uint64_t static ScrollGeometryPreferenceKey.reduce(value:nextValue:)(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  return static ScrollGeometryPreferenceKey.reduce(value:nextValue:)(a1, a2, a3, specialized Array.append<A>(contentsOf:));
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance ScrollGeometryPreferenceKey@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static PreferenceKey.defaultValue.getter in conformance ScrollGeometryPreferenceKey(&one-time initialization token for defaultValue, &static ScrollGeometryPreferenceKey.defaultValue, a1);
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance ScrollGeometryPreferenceKey(uint64_t a1, void (*a2)(uint64_t *__return_ptr), uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance ScrollGeometryPreferenceKey(a1, a2, a3, a4, a5, specialized Array.append<A>(contentsOf:));
}

uint64_t ScrollGeometryTransformProvider.init(position:transform:)@<X0>(uint64_t result@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t ScrollGeometryTransformProvider.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value;
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  double v8;
  double v9;

  Value = AGGraphGetValue();
  v3 = *(double *)(Value + 8);
  v4 = *(double *)(Value + 16);
  v5 = *(double *)(Value + 24);
  v6 = *(double *)(Value + 32);
  *(_QWORD *)a1 = *(_QWORD *)Value;
  v7 = AGGraphGetValue();
  v8 = *(double *)v7;
  v9 = *(double *)(v7 + 8);
  *(double *)(a1 + 24) = v5 - (*(double *)v7 - v3);
  *(double *)(a1 + 32) = v6 - (v9 - v4);
  *(double *)(a1 + 8) = v8;
  *(double *)(a1 + 16) = v9;
  return swift_retain();
}

double protocol witness for static Rule.initialValue.getter in conformance ScrollGeometryTransformProvider@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 1;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

uint64_t ScrollGeometryStateProvider.init(geometry:scrollableAxes:transform:)@<X0>(uint64_t result@<X0>, int a2@<W1>, int a3@<W2>, _DWORD *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t ScrollGeometryStateProvider.value.getter()
{
  uint64_t v0;
  uint64_t Value;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ScrollGeometryState>, (uint64_t)&type metadata for ScrollGeometryState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_23527E860;
  Value = AGGraphGetValue();
  v12 = *(_OWORD *)Value;
  v10 = *(_OWORD *)(Value + 32);
  v11 = *(_OWORD *)(Value + 16);
  v8 = *(_OWORD *)(Value + 64);
  v9 = *(_OWORD *)(Value + 48);
  v7 = *(_OWORD *)(Value + 80);
  v2 = *(_QWORD *)(Value + 96);
  v3 = *(_QWORD *)(Value + 104);
  v4 = *(_BYTE *)AGGraphGetValue();
  v5 = AGCreateWeakAttribute();
  *(_OWORD *)(v0 + 32) = v12;
  *(_OWORD *)(v0 + 48) = v11;
  *(_OWORD *)(v0 + 64) = v10;
  *(_OWORD *)(v0 + 80) = v9;
  *(_OWORD *)(v0 + 96) = v8;
  *(_OWORD *)(v0 + 112) = v7;
  *(_QWORD *)(v0 + 128) = v2;
  *(_QWORD *)(v0 + 136) = v3;
  *(_BYTE *)(v0 + 144) = v4;
  *(_QWORD *)(v0 + 148) = v5;
  return v0;
}

uint64_t protocol witness for Rule.value.getter in conformance ScrollGeometryStateProvider@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = ScrollGeometryStateProvider.value.getter();
  *a1 = result;
  return result;
}

uint64_t static UpdateScrollStateRequestKey.defaultValue.getter()
{
  return static ScrollGeometryPreferenceKey.defaultValue.getter(&one-time initialization token for defaultValue);
}

uint64_t static ScrollGeometryPreferenceKey.defaultValue.getter(_QWORD *a1)
{
  if (*a1 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t static UpdateScrollStateRequestKey.reduce(value:nextValue:)(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  return static ScrollGeometryPreferenceKey.reduce(value:nextValue:)(a1, a2, a3, specialized Array.append<A>(contentsOf:));
}

uint64_t static ScrollGeometryPreferenceKey.reduce(value:nextValue:)(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v5;

  v5 = a2();
  return a4(v5);
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance UpdateScrollStateRequestKey@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static PreferenceKey.defaultValue.getter in conformance ScrollGeometryPreferenceKey(&one-time initialization token for defaultValue, &static UpdateScrollStateRequestKey.defaultValue, a1);
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance ScrollGeometryPreferenceKey@<X0>(_QWORD *a1@<X2>, _QWORD *a2@<X3>, _QWORD *a3@<X8>)
{
  if (*a1 != -1)
    swift_once();
  *a3 = *a2;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance UpdateScrollStateRequestKey(uint64_t a1, void (*a2)(uint64_t *__return_ptr), uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance ScrollGeometryPreferenceKey(a1, a2, a3, a4, a5, specialized Array.append<A>(contentsOf:));
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance ScrollGeometryPreferenceKey(uint64_t a1, void (*a2)(uint64_t *__return_ptr), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t))
{
  uint64_t v8;

  a2(&v8);
  return a6(v8);
}

uint64_t ScrollStateRequestKind.description.getter()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 8))
    return 0x6F546C6C6F726373;
  else
    return 0x6156657461647075;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ScrollStateRequestKind()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 8))
    return 0x6F546C6C6F726373;
  else
    return 0x6156657461647075;
}

uint64_t ScrollToScrollStateRequest.description.getter()
{
  Swift::String v0;
  uint64_t WeakValue;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  _OWORD v6[2];
  uint64_t v7;
  __int128 v8;

  *(_QWORD *)&v6[0] = 0;
  *((_QWORD *)&v6[0] + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  v8 = v6[0];
  v0._countAndFlagsBits = 0xD00000000000001BLL;
  v0._object = (void *)0x80000002352DDBA0;
  String.append(_:)(v0);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for Scrollable);
  WeakValue = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of AnyTrackedValue(WeakValue, (uint64_t)v6);
  }
  else
  {
    v7 = 0;
    memset(v6, 0, sizeof(v6));
  }
  outlined destroy of ScrollStateRequest?((uint64_t)v6, &lazy cache variable for type metadata for Scrollable?, &lazy cache variable for type metadata for Scrollable, (uint64_t)&protocol descriptor for Scrollable);
  v2._object = (void *)0x80000002352DDBC0;
  v2._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v2);
  v3._countAndFlagsBits = 0x615677656E202C29;
  v3._object = (void *)0xED0000282065756CLL;
  String.append(_:)(v3);
  _print_unlocked<A, B>(_:_:)();
  v4._countAndFlagsBits = 15913;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  return v8;
}

uint64_t UpdateScrollStateRequest.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;

  _StringGuts.grow(_:)(67);
  v1._object = (void *)0x80000002352DDBE0;
  v1._countAndFlagsBits = 0xD000000000000020;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._countAndFlagsBits = 0x7369567369202C29;
  v2._object = (void *)0xEE002820656C6269;
  String.append(_:)(v2);
  if (*(_BYTE *)(v0 + 176))
    v3 = 1702195828;
  else
    v3 = 0x65736C6166;
  if (*(_BYTE *)(v0 + 176))
    v4 = 0xE400000000000000;
  else
    v4 = 0xE500000000000000;
  v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x6174736964202C29;
  v6._object = (void *)0xED0000282065636ELL;
  String.append(_:)(v6);
  v7._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 15913;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  return 0;
}

uint64_t one-time initialization function for scrollLog()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Log.scrollLog);
  __swift_project_value_buffer(v0, (uint64_t)static Log.scrollLog);
  return Logger.init(subsystem:category:)();
}

uint64_t static Log.scroll.getter@<X0>(uint64_t a1@<X8>)
{
  void *v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _OWORD v14[2];

  swift_beginAccess();
  if (static ScrollLogging.cachedValue != 2)
  {
    if ((static ScrollLogging.cachedValue & 1) != 0)
      goto LABEL_6;
LABEL_10:
    v13 = type metadata accessor for Logger();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a1, 1, 1, v13);
  }
  v2 = (void *)objc_opt_self();
  v3 = objc_msgSend(v2, sel_standardUserDefaults);
  v4 = (void *)MEMORY[0x23B7C5DAC](0xD00000000000001FLL, 0x80000002352DDC10);
  v5 = objc_msgSend(v3, sel_objectForKey_, v4);

  if (!v5)
  {
    memset(v14, 0, sizeof(v14));
    outlined destroy of UpdateScrollStateRequest?((uint64_t)v14, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    static ScrollLogging.cachedValue = 0;
    goto LABEL_10;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined destroy of UpdateScrollStateRequest?((uint64_t)v14, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  v6 = objc_msgSend(v2, sel_standardUserDefaults);
  v7 = (void *)MEMORY[0x23B7C5DAC](0xD00000000000001FLL, 0x80000002352DDC10);
  v8 = objc_msgSend(v6, sel_BOOLForKey_, v7);

  static ScrollLogging.cachedValue = v8;
  if ((v8 & 1) == 0)
    goto LABEL_10;
LABEL_6:
  if (one-time initialization token for scrollLog != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  v10 = __swift_project_value_buffer(v9, (uint64_t)static Log.scrollLog);
  v11 = *(_QWORD *)(v9 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(a1, v10, v9);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(a1, 0, 1, v9);
}

uint64_t specialized closure #1 in withTransaction<A>(_:_:)(uint64_t a1, void (*a2)(_QWORD *))
{
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;

  _threadTransactionData();
  v4 = one-time initialization token for v5;
  swift_retain();
  if (v4 != -1)
    swift_once();
  v5 = static Semantics.v5;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FABC & 1) != 0)
  {
    if (!dyld_program_minos_at_least())
      goto LABEL_13;
  }
  else if (dword_25426FAB8 < v5)
  {
    goto LABEL_13;
  }
  if (_threadTransactionData())
  {
    swift_unknownObjectRetain();
    swift_release();
    type metadata accessor for PropertyList.Element();
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_release();
  }
  PropertyList.merge(_:)(a1);
LABEL_13:
  v6 = _setThreadTransactionData();
  a2(v6);
  _setThreadTransactionData();
  return swift_release();
}

uint64_t specialized closure #1 in withTransaction<A>(_:_:)(uint64_t a1, void (*a2)(uint64_t *__return_ptr, _QWORD *))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  char v9;
  uint64_t v11;

  v3 = v2;
  _threadTransactionData();
  v6 = one-time initialization token for v5;
  swift_retain();
  if (v6 != -1)
    swift_once();
  v7 = static Semantics.v5;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FABC != 1)
  {
    if (dword_25426FAB8 < v7)
      goto LABEL_13;
LABEL_9:
    if (_threadTransactionData())
    {
      swift_unknownObjectRetain();
      swift_release();
      type metadata accessor for PropertyList.Element();
      swift_dynamicCastClassUnconditional();
    }
    else
    {
      swift_release();
    }
    PropertyList.merge(_:)(a1);
    goto LABEL_13;
  }
  if ((dyld_program_minos_at_least() & 1) != 0)
    goto LABEL_9;
LABEL_13:
  v8 = _setThreadTransactionData();
  a2(&v11, v8);
  _setThreadTransactionData();
  swift_release();
  if (!v3)
    v9 = v11;
  return v9 & 1;
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v13 = a4;
  v14 = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(boxed_opaque_existential_1, a2, a4);
  v10 = *a3;
  *(_QWORD *)(v10 + 16) = a1 + 1;
  return outlined init with take of ScrollStateRequest(&v12, v10 + 40 * a1 + 32);
}

uint64_t specialized static ScrollGeometryState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[7];
  _OWORD v12[7];

  v2 = *(unsigned __int8 *)(a1 + 112);
  v3 = *(unsigned __int8 *)(a2 + 112);
  v4 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v4;
  v5 = *(_OWORD *)(a1 + 48);
  v12[2] = *(_OWORD *)(a1 + 32);
  v12[3] = v5;
  v6 = *(_OWORD *)(a1 + 80);
  v12[4] = *(_OWORD *)(a1 + 64);
  v12[5] = v6;
  v12[6] = *(_OWORD *)(a1 + 96);
  v7 = *(_OWORD *)(a2 + 16);
  v11[0] = *(_OWORD *)a2;
  v11[1] = v7;
  v8 = *(_OWORD *)(a2 + 48);
  v11[2] = *(_OWORD *)(a2 + 32);
  v11[3] = v8;
  v9 = *(_OWORD *)(a2 + 80);
  v11[4] = *(_OWORD *)(a2 + 64);
  v11[5] = v9;
  v11[6] = *(_OWORD *)(a2 + 96);
  if (specialized static ScrollGeometry.== infix(_:_:)((uint64_t)v12, (uint64_t)v11) && v2 == v3)
    return static WeakAttribute.== infix(_:_:)();
  else
    return 0;
}

uint64_t outlined init with copy of ScrollStateRequest?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest?, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest, (uint64_t)&protocol descriptor for ScrollStateRequest, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of ScrollStateRequest?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest?, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest, (uint64_t)&protocol descriptor for ScrollStateRequest, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of Binding<ScrollPosition>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Binding<ScrollPosition>, (uint64_t)&type metadata for ScrollPosition, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for Binding);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of Binding<ScrollPosition>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Binding<ScrollPosition>, (uint64_t)&type metadata for ScrollPosition, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for Binding);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of ScrollPosition(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ScrollPosition(a2, a1);
  return a2;
}

_OWORD *outlined assign with take of ScrollPosition(_OWORD *a1, _OWORD *a2)
{
  assignWithTake for ScrollPosition(a2, a1);
  return a2;
}

uint64_t outlined destroy of ScrollPosition(uint64_t a1)
{
  destroy for ScrollPosition(a1);
  return a1;
}

uint64_t outlined destroy of UpdateScrollStateRequest?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t))
{
  uint64_t v5;

  type metadata accessor for MutableBox<CachedEnvironment>(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

void partial apply for closure #1 in ScrollToScrollStateRequest.update()(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)(v1 + 24);
  __swift_project_boxed_opaque_existential_1(*(_QWORD **)(v1 + 16), *(_QWORD *)(*(_QWORD *)(v1 + 16) + 24));
  Scrollable.scrollToPosition(_:)(v3 + 128);
  *a1 = v4 & 1;
}

uint64_t partial apply for closure #1 in UpdateScrollStateRequest.update()@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in UpdateScrollStateRequest.update()(*(_QWORD *)(v1 + 16), a1);
}

uint64_t outlined destroy of ScrollStateRequest?(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v5;

  _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

unint64_t lazy protocol witness table accessor for type ScrollStateEnqueueRequests and conformance ScrollStateEnqueueRequests()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollStateEnqueueRequests and conformance ScrollStateEnqueueRequests;
  if (!lazy protocol witness table cache variable for type ScrollStateEnqueueRequests and conformance ScrollStateEnqueueRequests)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ScrollStateEnqueueRequests, &type metadata for ScrollStateEnqueueRequests);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollStateEnqueueRequests and conformance ScrollStateEnqueueRequests);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollStateRequestTransform and conformance ScrollStateRequestTransform()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollStateRequestTransform and conformance ScrollStateRequestTransform;
  if (!lazy protocol witness table cache variable for type ScrollStateRequestTransform and conformance ScrollStateRequestTransform)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ScrollStateRequestTransform, &type metadata for ScrollStateRequestTransform);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollStateRequestTransform and conformance ScrollStateRequestTransform);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollGeometryTransformProvider and conformance ScrollGeometryTransformProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollGeometryTransformProvider and conformance ScrollGeometryTransformProvider;
  if (!lazy protocol witness table cache variable for type ScrollGeometryTransformProvider and conformance ScrollGeometryTransformProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ScrollGeometryTransformProvider, &type metadata for ScrollGeometryTransformProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollGeometryTransformProvider and conformance ScrollGeometryTransformProvider);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollGeometryStateProvider and conformance ScrollGeometryStateProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollGeometryStateProvider and conformance ScrollGeometryStateProvider;
  if (!lazy protocol witness table cache variable for type ScrollGeometryStateProvider and conformance ScrollGeometryStateProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ScrollGeometryStateProvider, &type metadata for ScrollGeometryStateProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollGeometryStateProvider and conformance ScrollGeometryStateProvider);
  }
  return result;
}

uint64_t sub_234A6E568@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  BOOL v3;
  int v4;

  result = AGWeakAttributeGetAttribute();
  v3 = (_DWORD)result == *MEMORY[0x24BE096C0];
  if ((_DWORD)result == *MEMORY[0x24BE096C0])
    v4 = 0;
  else
    v4 = result;
  *(_DWORD *)a1 = v4;
  *(_BYTE *)(a1 + 4) = v3;
  return result;
}

uint64_t sub_234A6E5AC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = AGCreateWeakAttribute();
  *(_QWORD *)(a2 + 216) = result;
  return result;
}

uint64_t sub_234A6E5F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  BOOL v3;
  int v4;

  result = AGWeakAttributeGetAttribute();
  v3 = (_DWORD)result == *MEMORY[0x24BE096C0];
  if ((_DWORD)result == *MEMORY[0x24BE096C0])
    v4 = 0;
  else
    v4 = result;
  *(_DWORD *)a1 = v4;
  *(_BYTE *)(a1 + 4) = v3;
  return result;
}

uint64_t sub_234A6E634(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = AGCreateWeakAttribute();
  *(_QWORD *)(a2 + 116) = result;
  return result;
}

uint64_t dispatch thunk of ScrollStateRequest.id.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ScrollStateRequest.kind.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ScrollStateRequest.transaction.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ScrollStateRequest.updateScrollable(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of ScrollStateRequest.hasUpdate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of ScrollStateRequest.update()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ScrollStateRequestKind(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ScrollStateRequestKind(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t getEnumTag for ScrollStateRequestKind(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t destructiveInjectEnumTag for ScrollStateRequestKind(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollStateRequestKind()
{
  return &type metadata for ScrollStateRequestKind;
}

ValueMetadata *type metadata accessor for ScrollStateRequestKind.UpdateValueConfig()
{
  return &type metadata for ScrollStateRequestKind.UpdateValueConfig;
}

uint64_t destroy for ScrollStateEnqueueRequests()
{
  return swift_release();
}

uint64_t initializeWithCopy for ScrollStateEnqueueRequests(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 28) = *(_QWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 33) = *(_QWORD *)(a2 + 33);
  *(_QWORD *)(a1 + 44) = *(_QWORD *)(a2 + 44);
  *(_WORD *)(a1 + 52) = *(_WORD *)(a2 + 52);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ScrollStateEnqueueRequests(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_BYTE *)(a1 + 53) = *(_BYTE *)(a2 + 53);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ScrollStateEnqueueRequests(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 44) = *(_QWORD *)(a2 + 44);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_BYTE *)(a1 + 53) = *(_BYTE *)(a2 + 53);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollStateEnqueueRequests(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollStateEnqueueRequests(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 56) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollStateEnqueueRequests()
{
  return &type metadata for ScrollStateEnqueueRequests;
}

uint64_t destroy for ScrollToScrollStateRequest(uint64_t a1)
{
  swift_release();
  swift_release();
  if (!*(_BYTE *)(a1 + 73))
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 16);
    if (*(_BYTE *)(a1 + 185))
      return swift_release();
LABEL_5:
    __swift_destroy_boxed_opaque_existential_1(a1 + 128);
    return swift_release();
  }
  if (!*(_BYTE *)(a1 + 185))
    goto LABEL_5;
  return swift_release();
}

uint64_t initializeWithCopy for ScrollToScrollStateRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD *v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = (_OWORD *)(a1 + 16);
  v6 = (_OWORD *)(a2 + 16);
  v7 = *(unsigned __int8 *)(a2 + 73);
  swift_retain();
  swift_retain();
  if (v7)
  {
    v8 = v6[1];
    *v5 = *v6;
    *(_OWORD *)(a1 + 32) = v8;
    *(_OWORD *)(a1 + 48) = v6[2];
    *(_OWORD *)(a1 + 58) = *(_OWORD *)((char *)v6 + 42);
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 40) = v9;
    (**(void (***)(uint64_t, _OWORD *))(v9 - 8))(a1 + 16, v6);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_WORD *)(a1 + 72) = *(unsigned __int8 *)(a2 + 72);
  }
  v10 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v10;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  v11 = (_OWORD *)(a1 + 128);
  v12 = (_OWORD *)(a2 + 128);
  if (*(_BYTE *)(a2 + 185))
  {
    v13 = *(_OWORD *)(a2 + 144);
    *v11 = *v12;
    *(_OWORD *)(a1 + 144) = v13;
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 170) = *(_OWORD *)(a2 + 170);
  }
  else
  {
    v14 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 152) = v14;
    (**(void (***)(_OWORD *, _OWORD *))(v14 - 8))(v11, v12);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_WORD *)(a1 + 184) = *(unsigned __int8 *)(a2 + 184);
  }
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  v15 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v15;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ScrollToScrollStateRequest(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  unsigned __int8 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  unsigned __int8 v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    outlined destroy of ScrollPosition.Storage(a1 + 16);
    if (*(_BYTE *)(a2 + 73))
    {
      v4 = *(_OWORD *)(a2 + 16);
      v5 = *(_OWORD *)(a2 + 32);
      v6 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 58) = *(_OWORD *)(a2 + 58);
      *(_OWORD *)(a1 + 32) = v5;
      *(_OWORD *)(a1 + 48) = v6;
      *(_OWORD *)(a1 + 16) = v4;
    }
    else
    {
      v7 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 40) = v7;
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 16, a2 + 16);
      v8 = *(_BYTE *)(a2 + 72);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_WORD *)(a1 + 72) = v8;
    }
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  v9 = *(_OWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = v9;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  if (a1 != a2)
  {
    outlined destroy of ScrollPosition.Storage(a1 + 128);
    if (*(_BYTE *)(a2 + 185))
    {
      v10 = *(_OWORD *)(a2 + 128);
      v11 = *(_OWORD *)(a2 + 144);
      v12 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 170) = *(_OWORD *)(a2 + 170);
      *(_OWORD *)(a1 + 144) = v11;
      *(_OWORD *)(a1 + 160) = v12;
      *(_OWORD *)(a1 + 128) = v10;
    }
    else
    {
      v13 = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 152) = v13;
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 128, a2 + 128);
      v14 = *(_BYTE *)(a2 + 184);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      *(_WORD *)(a1 + 184) = v14;
    }
  }
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  return a1;
}

uint64_t outlined destroy of ScrollPosition.Storage(uint64_t a1)
{
  destroy for ScrollPosition.Storage(a1);
  return a1;
}

__n128 __swift_memcpy224_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  result = *(__n128 *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  v11 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v11;
  *(__n128 *)(a1 + 160) = result;
  *(_OWORD *)(a1 + 176) = v10;
  return result;
}

uint64_t assignWithTake for ScrollToScrollStateRequest(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  if (a1 != a2)
  {
    outlined destroy of ScrollPosition.Storage(a1 + 16);
    v4 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v4;
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 58) = *(_OWORD *)(a2 + 58);
  }
  v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  if (a1 != a2)
  {
    outlined destroy of ScrollPosition.Storage(a1 + 128);
    v6 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v6;
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 170) = *(_OWORD *)(a2 + 170);
  }
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_release();
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollToScrollStateRequest(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 224))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollToScrollStateRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 216) = 0;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 224) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 224) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollToScrollStateRequest()
{
  return &type metadata for ScrollToScrollStateRequest;
}

uint64_t destroy for ScrollStateRequestTransform(uint64_t a1)
{
  uint64_t result;

  swift_release();
  swift_release();
  result = swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 96))
    return __swift_destroy_boxed_opaque_existential_1(a1 + 72);
  return result;
}

uint64_t initializeWithCopy for ScrollStateRequestTransform(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v4 = (_OWORD *)(a1 + 72);
  v5 = a2 + 72;
  v6 = *(_QWORD *)(a2 + 96);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 96) = v6;
    *(_QWORD *)(a1 + 104) = v7;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8))(a1 + 72, v5, v6);
  }
  else
  {
    v8 = *(_OWORD *)(v5 + 16);
    *v4 = *(_OWORD *)v5;
    *(_OWORD *)(a1 + 88) = v8;
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(v5 + 32);
  }
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  return a1;
}

uint64_t assignWithCopy for ScrollStateRequestTransform(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 96);
  if (!*(_QWORD *)(a1 + 96))
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 96) = v4;
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 72, a2 + 72);
      goto LABEL_8;
    }
LABEL_7:
    v5 = *(_OWORD *)(a2 + 72);
    v6 = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 72) = v5;
    *(_OWORD *)(a1 + 88) = v6;
    goto LABEL_8;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 72);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 72), (uint64_t *)(a2 + 72));
LABEL_8:
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

__n128 __swift_memcpy116_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_DWORD *)(a1 + 112) = *((_DWORD *)a2 + 28);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for ScrollStateRequestTransform(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 96))
    __swift_destroy_boxed_opaque_existential_1(a1 + 72);
  v4 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = v4;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollStateRequestTransform(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 116))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollStateRequestTransform(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 112) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 116) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 116) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollStateRequestTransform()
{
  return &type metadata for ScrollStateRequestTransform;
}

uint64_t initializeWithCopy for UpdateScrollStateRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  int v7;
  __int128 v8;
  __int128 v9;
  _OWORD *v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = (_OWORD *)(a1 + 16);
  v6 = (_OWORD *)(a2 + 16);
  v7 = *(unsigned __int8 *)(a2 + 73);
  swift_retain();
  swift_retain();
  if (v7)
  {
    v8 = v6[1];
    *v5 = *v6;
    *(_OWORD *)(a1 + 32) = v8;
    *(_OWORD *)(a1 + 48) = v6[2];
    *(_OWORD *)(a1 + 58) = *(_OWORD *)((char *)v6 + 42);
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 40) = v9;
    (**(void (***)(uint64_t, _OWORD *))(v9 - 8))(a1 + 16, v6);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_WORD *)(a1 + 72) = *(unsigned __int8 *)(a2 + 72);
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  v10 = (_OWORD *)(a1 + 96);
  v11 = (_OWORD *)(a2 + 96);
  if (*(_BYTE *)(a2 + 153))
  {
    v12 = *(_OWORD *)(a2 + 112);
    *v10 = *v11;
    *(_OWORD *)(a1 + 112) = v12;
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 138) = *(_OWORD *)(a2 + 138);
  }
  else
  {
    v13 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 120) = v13;
    (**(void (***)(_OWORD *, _OWORD *))(v13 - 8))(v10, v11);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_WORD *)(a1 + 152) = *(unsigned __int8 *)(a2 + 152);
  }
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  return a1;
}

uint64_t assignWithCopy for UpdateScrollStateRequest(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  unsigned __int8 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  unsigned __int8 v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    outlined destroy of ScrollPosition.Storage(a1 + 16);
    if (*(_BYTE *)(a2 + 73))
    {
      v4 = *(_OWORD *)(a2 + 16);
      v5 = *(_OWORD *)(a2 + 32);
      v6 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 58) = *(_OWORD *)(a2 + 58);
      *(_OWORD *)(a1 + 32) = v5;
      *(_OWORD *)(a1 + 48) = v6;
      *(_OWORD *)(a1 + 16) = v4;
    }
    else
    {
      v7 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 40) = v7;
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 16, a2 + 16);
      v8 = *(_BYTE *)(a2 + 72);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_WORD *)(a1 + 72) = v8;
    }
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    outlined destroy of ScrollPosition.Storage(a1 + 96);
    if (*(_BYTE *)(a2 + 153))
    {
      v9 = *(_OWORD *)(a2 + 96);
      v10 = *(_OWORD *)(a2 + 112);
      v11 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 138) = *(_OWORD *)(a2 + 138);
      *(_OWORD *)(a1 + 112) = v10;
      *(_OWORD *)(a1 + 128) = v11;
      *(_OWORD *)(a1 + 96) = v9;
    }
    else
    {
      v12 = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 120) = v12;
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1 + 96, a2 + 96);
      v13 = *(_BYTE *)(a2 + 152);
      *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
      *(_WORD *)(a1 + 152) = v13;
    }
  }
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  return a1;
}

__n128 __swift_memcpy192_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 128) = result;
  *(_OWORD *)(a1 + 144) = v9;
  return result;
}

uint64_t assignWithTake for UpdateScrollStateRequest(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  if (a1 != a2)
  {
    outlined destroy of ScrollPosition.Storage(a1 + 16);
    v4 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v4;
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 58) = *(_OWORD *)(a2 + 58);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    outlined destroy of ScrollPosition.Storage(a1 + 96);
    v5 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v5;
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 138) = *(_OWORD *)(a2 + 138);
  }
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  return a1;
}

uint64_t getEnumTagSinglePayload for UpdateScrollStateRequest(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 192))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UpdateScrollStateRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 184) = 0;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 192) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 192) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for UpdateScrollStateRequest()
{
  return &type metadata for UpdateScrollStateRequest;
}

__n128 __swift_memcpy124_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_OWORD *)(a1 + 108) = *(__int128 *)((char *)a2 + 108);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ScrollGeometryState(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 124))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ScrollGeometryState(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 120) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 124) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ScrollGeometryState()
{
  return &type metadata for ScrollGeometryState;
}

ValueMetadata *type metadata accessor for ScrollGeometryPreferenceKey()
{
  return &type metadata for ScrollGeometryPreferenceKey;
}

ValueMetadata *type metadata accessor for ScrollGeometryTransformProvider()
{
  return &type metadata for ScrollGeometryTransformProvider;
}

ValueMetadata *type metadata accessor for ScrollGeometryStateProvider()
{
  return &type metadata for ScrollGeometryStateProvider;
}

ValueMetadata *type metadata accessor for UpdateScrollStateRequestKey()
{
  return &type metadata for UpdateScrollStateRequestKey;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t partial apply for closure #1 in ScrollStateRequestTransform.findClosestSubview<A>(idType:position:anchor:collection:containerSize:)(double *a1, uint64_t a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  uint64_t v6;

  a3.n128_u64[0] = *(_QWORD *)(v6 + 32);
  a4.n128_u64[0] = *(_QWORD *)(v6 + 40);
  a5.n128_u64[0] = *(_QWORD *)(v6 + 48);
  a6.n128_u64[0] = *(_QWORD *)(v6 + 56);
  return closure #1 in ScrollStateRequestTransform.findClosestSubview<A>(idType:position:anchor:collection:containerSize:)(a1, a3, a4, a5, a6, a2, *(double **)(v6 + 64), *(char **)(v6 + 72), *(_QWORD *)(v6 + 16));
}

uint64_t sub_234A6F970()
{
  return objectdestroyTm();
}

uint64_t outlined init with copy of UpdateScrollStateRequest(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for UpdateScrollStateRequest(a2, a1);
  return a2;
}

uint64_t outlined assign with take of ScrollStateRequest?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest?, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest, (uint64_t)&protocol descriptor for ScrollStateRequest, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of UpdateScrollStateRequest(uint64_t a1)
{
  destroy for UpdateScrollStateRequest(a1, &type metadata for UpdateScrollStateRequest);
  return a1;
}

uint64_t sub_234A6FA3C()
{
  return objectdestroyTm();
}

uint64_t partial apply for closure #1 in ScrollStateRequestTransform.updateRequest<A>(id:position:targetDistance:)(_QWORD **a1)
{
  uint64_t v1;

  return closure #1 in ScrollStateRequestTransform.updateRequest<A>(id:position:targetDistance:)(a1, v1 + 16);
}

uint64_t outlined destroy of CoordinateSpace(uint64_t a1)
{
  destroy for CoordinateSpace(a1);
  return a1;
}

uint64_t outlined init with take of (key: ObjectIdentifier, value: ScrollStateRequest)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for (key: ObjectIdentifier, value: ScrollStateRequest)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: ObjectIdentifier, value: ScrollStateRequest), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for (key: ObjectIdentifier, value: ScrollStateRequest)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (key: ObjectIdentifier, value: ScrollStateRequest))
  {
    type metadata accessor for ScrollStateRequest(255, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: ObjectIdentifier, value: ScrollStateRequest));
  }
}

uint64_t sub_234A6FB54()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_234A6FB78()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in ScrollStateEnqueueRequests.enqueueRequests(_:)()
{
  uint64_t v0;

  return closure #2 in ScrollStateEnqueueRequests.enqueueRequests(_:)(*(_QWORD *)(v0 + 16), v0 + 24, *(_QWORD *)(v0 + 88));
}

uint64_t outlined retain of ScrollStateEnqueueRequests(uint64_t a1)
{
  swift_retain();
  return a1;
}

uint64_t sub_234A6FBDC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> ()()
{
  uint64_t v0;

  return thunk for @escaping @callee_guaranteed () -> (@out ())(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t outlined init with copy of PositionedByUserScrollStateRequest(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for PositionedByUserScrollStateRequest(a2, a1);
  return a2;
}

uint64_t sub_234A6FC3C()
{
  return objectdestroyTm();
}

uint64_t objectdestroyTm()
{
  uint64_t v0;

  swift_release();
  swift_release();
  if (!*(_BYTE *)(v0 + 89))
  {
    __swift_destroy_boxed_opaque_existential_1(v0 + 32);
    if (*(_BYTE *)(v0 + 169))
      return swift_deallocObject();
LABEL_5:
    __swift_destroy_boxed_opaque_existential_1(v0 + 112);
    return swift_deallocObject();
  }
  if (!*(_BYTE *)(v0 + 169))
    goto LABEL_5;
  return swift_deallocObject();
}

uint64_t outlined destroy of PositionedByUserScrollStateRequest(uint64_t a1)
{
  destroy for UpdateScrollStateRequest(a1, &type metadata for PositionedByUserScrollStateRequest);
  return a1;
}

uint64_t destroy for UpdateScrollStateRequest(uint64_t a1)
{
  uint64_t result;

  swift_release();
  result = swift_release();
  if (*(_BYTE *)(a1 + 73))
  {
    if (*(_BYTE *)(a1 + 153))
      return result;
    return __swift_destroy_boxed_opaque_existential_1(a1 + 96);
  }
  result = __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  if (!*(_BYTE *)(a1 + 153))
    return __swift_destroy_boxed_opaque_existential_1(a1 + 96);
  return result;
}

uint64_t initializeWithCopy for PositionedByUserScrollStateRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  int v7;
  __int128 v8;
  __int128 v9;
  _OWORD *v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = (_OWORD *)(a1 + 16);
  v6 = (_OWORD *)(a2 + 16);
  v7 = *(unsigned __int8 *)(a2 + 73);
  swift_retain();
  swift_retain();
  if (v7)
  {
    v8 = v6[1];
    *v5 = *v6;
    *(_OWORD *)(a1 + 32) = v8;
    *(_OWORD *)(a1 + 48) = v6[2];
    *(_OWORD *)(a1 + 58) = *(_OWORD *)((char *)v6 + 42);
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 40) = v9;
    (**(void (***)(uint64_t, _OWORD *))(v9 - 8))(a1 + 16, v6);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_WORD *)(a1 + 72) = *(unsigned __int8 *)(a2 + 72);
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  v10 = (_OWORD *)(a1 + 96);
  v11 = (_OWORD *)(a2 + 96);
  if (*(_BYTE *)(a2 + 153))
  {
    v12 = *(_OWORD *)(a2 + 112);
    *v10 = *v11;
    *(_OWORD *)(a1 + 112) = v12;
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 138) = *(_OWORD *)(a2 + 138);
  }
  else
  {
    v13 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 120) = v13;
    (**(void (***)(_OWORD *, _OWORD *))(v13 - 8))(v10, v11);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_WORD *)(a1 + 152) = *(unsigned __int8 *)(a2 + 152);
  }
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  return a1;
}

uint64_t assignWithCopy for PositionedByUserScrollStateRequest(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  unsigned __int8 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  unsigned __int8 v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    outlined destroy of ScrollPosition.Storage(a1 + 16);
    if (*(_BYTE *)(a2 + 73))
    {
      v4 = *(_OWORD *)(a2 + 16);
      v5 = *(_OWORD *)(a2 + 32);
      v6 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 58) = *(_OWORD *)(a2 + 58);
      *(_OWORD *)(a1 + 32) = v5;
      *(_OWORD *)(a1 + 48) = v6;
      *(_OWORD *)(a1 + 16) = v4;
    }
    else
    {
      v7 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 40) = v7;
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 16, a2 + 16);
      v8 = *(_BYTE *)(a2 + 72);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_WORD *)(a1 + 72) = v8;
    }
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    outlined destroy of ScrollPosition.Storage(a1 + 96);
    if (*(_BYTE *)(a2 + 153))
    {
      v9 = *(_OWORD *)(a2 + 96);
      v10 = *(_OWORD *)(a2 + 112);
      v11 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 138) = *(_OWORD *)(a2 + 138);
      *(_OWORD *)(a1 + 112) = v10;
      *(_OWORD *)(a1 + 128) = v11;
      *(_OWORD *)(a1 + 96) = v9;
    }
    else
    {
      v12 = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 120) = v12;
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1 + 96, a2 + 96);
      v13 = *(_BYTE *)(a2 + 152);
      *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
      *(_WORD *)(a1 + 152) = v13;
    }
  }
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  return a1;
}

__n128 __swift_memcpy176_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(__n128 *)(a1 + 112) = result;
  *(_OWORD *)(a1 + 128) = v8;
  return result;
}

uint64_t assignWithTake for PositionedByUserScrollStateRequest(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  if (a1 != a2)
  {
    outlined destroy of ScrollPosition.Storage(a1 + 16);
    v4 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v4;
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 58) = *(_OWORD *)(a2 + 58);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    outlined destroy of ScrollPosition.Storage(a1 + 96);
    v5 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v5;
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 138) = *(_OWORD *)(a2 + 138);
  }
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  return a1;
}

uint64_t getEnumTagSinglePayload for PositionedByUserScrollStateRequest(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 176))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PositionedByUserScrollStateRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 176) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 176) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PositionedByUserScrollStateRequest()
{
  return &type metadata for PositionedByUserScrollStateRequest;
}

ValueMetadata *type metadata accessor for _GraphInputs.ScrollStateRequestKey()
{
  return &type metadata for _GraphInputs.ScrollStateRequestKey;
}

uint64_t partial apply for closure #1 in PositionedByUserScrollStateRequest.update()()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[80];

  v1 = *(_QWORD *)(v0 + 16);
  outlined init with copy of ScrollPosition(v1 + 96, (uint64_t)v3);
  (*(void (**)(_BYTE *, _QWORD))(**(_QWORD **)(v1 + 8) + 128))(v3, *(_QWORD *)v1);
  return outlined destroy of ScrollPosition((uint64_t)v3);
}

uint64_t LinearGradient.init(gradient:startPoint:endPoint:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  *(_QWORD *)a2 = result;
  *(double *)(a2 + 8) = a3;
  *(double *)(a2 + 16) = a4;
  *(double *)(a2 + 24) = a5;
  *(double *)(a2 + 32) = a6;
  return result;
}

uint64_t EllipticalGradient.init(colors:center:startRadiusFraction:endRadiusFraction:)@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  return EllipticalGradient.init(colors:center:startRadiusFraction:endRadiusFraction:)((uint64_t (*)(void))specialized Gradient.init(colors:), a1, a2, a3, a4, a5);
}

uint64_t EllipticalGradient.init(stops:center:startRadiusFraction:endRadiusFraction:)@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  return EllipticalGradient.init(colors:center:startRadiusFraction:endRadiusFraction:)((uint64_t (*)(void))specialized Gradient.init(stops:), a1, a2, a3, a4, a5);
}

uint64_t EllipticalGradient.init(colors:center:startRadiusFraction:endRadiusFraction:)@<X0>(uint64_t (*a1)(void)@<X1>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t result;

  result = a1();
  *(_QWORD *)a2 = result;
  *(double *)(a2 + 8) = a3;
  *(double *)(a2 + 16) = a4;
  *(double *)(a2 + 24) = a5;
  *(double *)(a2 + 32) = a6;
  return result;
}

uint64_t RadialGradient.init(gradient:center:startRadius:endRadius:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  *(_QWORD *)a2 = result;
  *(double *)(a2 + 8) = a3;
  *(double *)(a2 + 16) = a4;
  *(double *)(a2 + 24) = a5;
  *(double *)(a2 + 32) = a6;
  return result;
}

double AngularGradient.init(gradient:center:angle:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>)
{
  double result;

  *(_QWORD *)a2 = a1;
  *(double *)(a2 + 8) = a3;
  *(double *)(a2 + 16) = a4;
  result = (a5 * 128.0 + 804.247719) * 0.0078125;
  *(double *)(a2 + 24) = a5;
  *(double *)(a2 + 32) = result;
  return result;
}

uint64_t LinearGradient.gradient.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LinearGradient.gradient.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*LinearGradient.gradient.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double LinearGradient.startPoint.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void LinearGradient.startPoint.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 8) = a1;
  *(double *)(v2 + 16) = a2;
}

uint64_t (*LinearGradient.startPoint.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double LinearGradient.endPoint.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

void LinearGradient.endPoint.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 24) = a1;
  *(double *)(v2 + 32) = a2;
}

uint64_t (*LinearGradient.endPoint.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t LinearGradient._Paint.gradient.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t (*LinearGradient._Paint.gradient.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double LinearGradient._Paint.startPoint.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void LinearGradient._Paint.startPoint.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 16) = a1;
  *(double *)(v2 + 24) = a2;
}

uint64_t (*LinearGradient._Paint.startPoint.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double LinearGradient._Paint.endPoint.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

void LinearGradient._Paint.endPoint.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 32) = a1;
  *(double *)(v2 + 40) = a2;
}

uint64_t (*LinearGradient._Paint.endPoint.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t LinearGradient._Paint.init(gradient:startPoint:endPoint:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  char v6;

  v6 = *(_BYTE *)(result + 8);
  *(_QWORD *)a2 = *(_QWORD *)result;
  *(_BYTE *)(a2 + 8) = v6;
  *(double *)(a2 + 16) = a3;
  *(double *)(a2 + 24) = a4;
  *(double *)(a2 + 32) = a5;
  *(double *)(a2 + 40) = a6;
  return result;
}

void static LinearGradient._Paint.leafProtobufTag.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 2;
  *(_BYTE *)(a1 + 8) = 0;
}

uint64_t LinearGradient._Paint.draw(path:style:in:bounds:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  char v28;
  _QWORD v30[5];
  char v31;
  _BYTE v32[160];
  uint64_t v33;
  char v34;
  double v35;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  int v42;
  _QWORD v43[5];
  _BYTE v44[48];

  outlined init with take of CGRect?(a4, (uint64_t)v43);
  v9 = *(double *)v43;
  v8 = *(double *)&v43[1];
  v10 = *(double *)&v43[2];
  v11 = *(double *)&v43[3];
  v12 = *a2;
  v13 = a2[1];
  v14 = a2[2];
  v15 = a2[3];
  v16 = a2[4];
  v28 = *((_BYTE *)a2 + 40);
  v17 = *v4;
  v18 = *((_BYTE *)v4 + 8);
  v20 = *((double *)v4 + 2);
  v19 = *((double *)v4 + 3);
  v22 = *((double *)v4 + 4);
  v21 = *((double *)v4 + 5);
  outlined init with take of CGRect?(a4, (uint64_t)v44);
  if (v44[32] == 1)
  {
    Path.boundingRect.getter();
    v9 = v23;
    v8 = v24;
    v10 = v25;
    v11 = v26;
  }
  v33 = v17;
  v34 = v18;
  v35 = v9 + v20 * v10;
  v36 = v8 + v19 * v11;
  v37 = v9 + v22 * v10;
  v38 = v8 + v21 * v11;
  v42 = 0;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi4_((uint64_t)&v33);
  outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v33, (uint64_t)v32);
  v30[0] = v12;
  v30[1] = v13;
  v30[2] = v14;
  v30[3] = v15;
  v30[4] = v16;
  v31 = v28;
  swift_bridgeObjectRetain();
  GraphicsContext.draw(_:with:style:)(a1, (uint64_t)v32, (uint64_t)v30, a3);
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for ResolvedPaint.resolvedGradient.getter in conformance LinearGradient._Paint@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t LinearGradient._Paint.resolvedGradient.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

void protocol witness for static ResolvedPaint.leafProtobufTag.getter in conformance LinearGradient._Paint(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 2;
  *(_BYTE *)(a1 + 8) = 0;
}

float64x2_t protocol witness for Animatable.animatableData.getter in conformance LinearGradient._Paint@<Q0>(uint64_t a1@<X8>)
{
  float64x2_t *v1;
  uint64_t v3;
  char v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t result;
  uint64_t v8;
  char v9;

  ResolvedGradient.animatableData.getter((uint64_t)&v8);
  v3 = v8;
  v4 = v9;
  v5 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
  v6 = vmulq_f64(v1[1], v5);
  result = vmulq_f64(v1[2], v5);
  *(float64x2_t *)a1 = v6;
  *(float64x2_t *)(a1 + 16) = result;
  *(_QWORD *)(a1 + 32) = v3;
  *(_BYTE *)(a1 + 40) = v4;
  return result;
}

float64x2_t LinearGradient._Paint.animatableData.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  char v4;
  unsigned int v5;
  char v6;
  uint64_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t result;
  float64x2_t v11;
  float64x2_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  SwiftUI::ResolvedGradient v17;

  v3 = *v1;
  v4 = *((_BYTE *)v1 + 8);
  v11 = *((float64x2_t *)v1 + 2);
  v12 = *((float64x2_t *)v1 + 1);
  if (one-time initialization token for v5 != -1)
    swift_once();
  v5 = static Semantics.v5;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FAB4 != 1)
  {
    if (static Semantics.forced < v5)
      goto LABEL_7;
LABEL_9:
    v13 = v3;
    v14 = v4;
    swift_bridgeObjectRetain();
    v17.stops._rawValue = &v13;
    ResolvedGradientVector.init(_:)(v17);
    v7 = v15;
    v6 = v16;
    goto LABEL_10;
  }
  if ((dyld_program_sdk_at_least() & 1) != 0)
    goto LABEL_9;
LABEL_7:
  v6 = 0;
  v7 = MEMORY[0x24BEE4AF8];
LABEL_10:
  v8 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
  v9 = vmulq_f64(v11, v8);
  result = vmulq_f64(v12, v8);
  *(float64x2_t *)a1 = result;
  *(float64x2_t *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v6;
  return result;
}

uint64_t protocol witness for Animatable.animatableData.setter in conformance LinearGradient._Paint(uint64_t a1)
{
  float64x2_t *v1;
  uint64_t v2;
  char v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  uint64_t v8;
  char v9;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_BYTE *)(a1 + 40);
  v4 = (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL);
  v5 = vmulq_f64(*(float64x2_t *)a1, v4);
  v6 = vmulq_f64(*(float64x2_t *)(a1 + 16), v4);
  v1[1] = v5;
  v1[2] = v6;
  v8 = v2;
  v9 = v3;
  return ResolvedGradient.animatableData.setter(&v8);
}

uint64_t LinearGradient._Paint.animatableData.setter(uint64_t a1)
{
  float64x2_t *v1;
  uint64_t v2;
  char v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  uint64_t v8;
  char v9;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_BYTE *)(a1 + 40);
  v4 = (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL);
  v5 = vmulq_f64(*(float64x2_t *)a1, v4);
  v6 = vmulq_f64(*(float64x2_t *)(a1 + 16), v4);
  v1[1] = v5;
  v1[2] = v6;
  v8 = v2;
  v9 = v3;
  return ResolvedGradient.animatableData.setter(&v8);
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint(float64x2_t ***a1))()
{
  float64x2_t **v2;

  v2 = (float64x2_t **)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (float64x2_t *)LinearGradient._Paint.animatableData.modify(v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

void (*LinearGradient._Paint.animatableData.modify(float64x2_t **a1))(uint64_t *a1, char a2)
{
  uint64_t *v1;
  float64x2_t *v3;
  uint64_t v4;
  char v5;
  unsigned int v6;
  char v7;
  float64_t v8;
  float64x2_t v9;
  float64x2_t v11;
  float64x2_t v12;
  uint64_t v13;
  char v14;
  double v15;
  char v16;
  SwiftUI::ResolvedGradient v17;

  v3 = (float64x2_t *)malloc(0x50uLL);
  *a1 = v3;
  *(_QWORD *)&v3[4].f64[1] = v1;
  v4 = *v1;
  v5 = *((_BYTE *)v1 + 8);
  v11 = *((float64x2_t *)v1 + 2);
  v12 = *((float64x2_t *)v1 + 1);
  if (one-time initialization token for v5 != -1)
    swift_once();
  v6 = static Semantics.v5;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FAB4 != 1)
  {
    if (static Semantics.forced < v6)
      goto LABEL_7;
LABEL_9:
    v13 = v4;
    v14 = v5;
    swift_bridgeObjectRetain();
    v17.stops._rawValue = &v13;
    ResolvedGradientVector.init(_:)(v17);
    v8 = v15;
    v7 = v16;
    goto LABEL_10;
  }
  if ((dyld_program_sdk_at_least() & 1) != 0)
    goto LABEL_9;
LABEL_7:
  v7 = 0;
  v8 = MEMORY[0x24BEE4AF8];
LABEL_10:
  v9 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
  *v3 = vmulq_f64(v12, v9);
  v3[1] = vmulq_f64(v11, v9);
  v3[2].f64[0] = v8;
  LOBYTE(v3[2].f64[1]) = v7;
  return LinearGradient._Paint.animatableData.modify;
}

void LinearGradient._Paint.animatableData.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  float64x2_t *v3;
  uint64_t v4;
  char v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  uint64_t v9;
  char v10;

  v2 = *a1;
  v3 = *(float64x2_t **)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 32);
  v5 = *(_BYTE *)(v2 + 40);
  v6 = (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL);
  v7 = vmulq_f64(*(float64x2_t *)v2, v6);
  v8 = vmulq_f64(*(float64x2_t *)(v2 + 16), v6);
  v3[1] = v7;
  v3[2] = v8;
  v9 = v4;
  v10 = v5;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    ResolvedGradient.animatableData.setter(&v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    ResolvedGradient.animatableData.setter(&v9);
  }
  free((void *)v2);
}

__n128 LinearGradient.resolvePaint(in:)@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __n128 result;
  __int128 v10;

  v4 = *a1;
  v5 = a1[1];
  v6 = *(_QWORD *)v2;
  swift_retain();
  swift_retain();
  outlined retain of LinearGradient(v2);
  v7 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI8GradientV4StopVG_AF08ResolvedF0VAIVs5NeverOTg503_s7d3UI8f16V7resolve2inAA08h31C0VAA17EnvironmentValuesV_tFAG4G10VAcJVXEfU_AF0pQ0VTf1cn_nTf4ng_n(v6, v4, v5);
  swift_release();
  swift_release();
  outlined release of LinearGradient(v2);
  if (one-time initialization token for default != -1)
    swift_once();
  v8 = static ResolvedGradient.ColorSpace.default;
  *(_QWORD *)a2 = v7;
  *(_BYTE *)(a2 + 8) = v8;
  result = *(__n128 *)(v2 + 8);
  v10 = *(_OWORD *)(v2 + 24);
  *(__n128 *)(a2 + 16) = result;
  *(_OWORD *)(a2 + 32) = v10;
  return result;
}

void static LinearGradient._makeView<A>(view:inputs:)(int *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  static _ShapeView._makeView(view:inputs:)(a1, a2, a3, &type metadata for LinearGradient, a4, (uint64_t)&protocol witness table for LinearGradient, a5);
}

uint64_t (*RadialGradient.gradient.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*RadialGradient.center.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double RadialGradient.startRadius.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

void RadialGradient.startRadius.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 24) = a1;
}

uint64_t (*RadialGradient.startRadius.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void RadialGradient.endRadius.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 32) = a1;
}

uint64_t (*RadialGradient.endRadius.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*RadialGradient._Paint.gradient.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*RadialGradient._Paint.center.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double RadialGradient._Paint.startRadius.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

void RadialGradient._Paint.startRadius.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 32) = a1;
}

uint64_t (*RadialGradient._Paint.startRadius.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double RadialGradient._Paint.endRadius.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 40);
}

void RadialGradient._Paint.endRadius.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 40) = a1;
}

uint64_t (*RadialGradient._Paint.endRadius.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void static RadialGradient._Paint.leafProtobufTag.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 3;
  *(_BYTE *)(a1 + 8) = 0;
}

BOOL static RadialGradient._Paint.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static RadialGradient._Paint.== infix(_:_:)(a1, a2);
}

uint64_t RadialGradient._Paint.draw(path:style:in:bounds:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v30[5];
  char v31;
  _BYTE v32[160];
  uint64_t v33;
  char v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  int v42;
  _QWORD v43[5];
  _BYTE v44[48];

  outlined init with take of CGRect?(a4, (uint64_t)v43);
  v9 = *(double *)v43;
  v8 = *(double *)&v43[1];
  v10 = *(double *)&v43[2];
  v11 = *(double *)&v43[3];
  v12 = a2[2];
  v27 = a2[1];
  v28 = *a2;
  v13 = a2[3];
  v14 = a2[4];
  v26 = *((_BYTE *)a2 + 40);
  v15 = *v4;
  v16 = *((_BYTE *)v4 + 8);
  v18 = *((double *)v4 + 2);
  v17 = *((double *)v4 + 3);
  v19 = v4[4];
  v20 = v4[5];
  outlined init with take of CGRect?(a4, (uint64_t)v44);
  if (v44[32] == 1)
  {
    Path.boundingRect.getter();
    v9 = v21;
    v8 = v22;
    v10 = v23;
    v11 = v24;
  }
  v33 = v15;
  v34 = v16;
  v35 = v9 + v18 * v10;
  v36 = v8 + v17 * v11;
  v37 = v19;
  v38 = v20;
  v39 = 0;
  v40 = 0;
  v41 = 1;
  v42 = 0;
  _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi4_((uint64_t)&v33);
  outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v33, (uint64_t)v32);
  v30[0] = v28;
  v30[1] = v27;
  v30[2] = v12;
  v30[3] = v13;
  v30[4] = v14;
  v31 = v26;
  swift_bridgeObjectRetain();
  GraphicsContext.draw(_:with:style:)(a1, (uint64_t)v32, (uint64_t)v30, a3);
  return swift_bridgeObjectRelease();
}

void protocol witness for static ResolvedPaint.leafProtobufTag.getter in conformance RadialGradient._Paint(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 3;
  *(_BYTE *)(a1 + 8) = 0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance RadialGradient._Paint(uint64_t a1, uint64_t a2)
{
  return specialized static RadialGradient._Paint.== infix(_:_:)(a1, a2);
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance RadialGradient._Paint(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = RadialGradient._Paint.animatableData.modify(v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t (*RadialGradient._Paint.animatableData.modify(_QWORD *a1))()
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  char v5;
  unsigned int v6;
  char v7;
  uint64_t v8;
  float64x2_t v10;
  __int128 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  SwiftUI::ResolvedGradient v16;

  v3 = malloc(0x50uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *v1;
  v5 = *((_BYTE *)v1 + 8);
  v10 = *((float64x2_t *)v1 + 1);
  v11 = *((_OWORD *)v1 + 2);
  if (one-time initialization token for v5 != -1)
    swift_once();
  v6 = static Semantics.v5;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FAB4 != 1)
  {
    if (static Semantics.forced < v6)
      goto LABEL_7;
LABEL_9:
    v12 = v4;
    v13 = v5;
    swift_bridgeObjectRetain();
    v16.stops._rawValue = &v12;
    ResolvedGradientVector.init(_:)(v16);
    v8 = v14;
    v7 = v15;
    goto LABEL_10;
  }
  if ((dyld_program_sdk_at_least() & 1) != 0)
    goto LABEL_9;
LABEL_7:
  v7 = 0;
  v8 = MEMORY[0x24BEE4AF8];
LABEL_10:
  *(float64x2_t *)v3 = vmulq_f64(v10, (float64x2_t)vdupq_n_s64(0x4060000000000000uLL));
  v3[2] = v8;
  *((_BYTE *)v3 + 24) = v7;
  *((_OWORD *)v3 + 2) = v11;
  return RadialGradient._Paint.animatableData.modify;
}

double RadialGradient.resolvePaint(in:)@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)&result = RadialGradient.resolvePaint(in:)(a1, (void (*)(uint64_t))outlined retain of RadialGradient, (void (*)(uint64_t))outlined release of RadialGradient, a2).n128_u64[0];
  return result;
}

void static RadialGradient._makeView<A>(view:inputs:)(int *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  static _ShapeView._makeView(view:inputs:)(a1, a2, a3, &type metadata for RadialGradient, a4, (uint64_t)&protocol witness table for RadialGradient, a5);
}

uint64_t (*EllipticalGradient.gradient.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*EllipticalGradient.center.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*EllipticalGradient.startRadiusFraction.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*EllipticalGradient.endRadiusFraction.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*EllipticalGradient._Paint.gradient.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*EllipticalGradient._Paint.center.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*EllipticalGradient._Paint.startRadiusFraction.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*EllipticalGradient._Paint.endRadiusFraction.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void static EllipticalGradient._Paint.leafProtobufTag.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 5;
  *(_BYTE *)(a1 + 8) = 0;
}

BOOL static EllipticalGradient._Paint.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static RadialGradient._Paint.== infix(_:_:)(a1, a2);
}

uint64_t EllipticalGradient._Paint.draw(path:style:in:bounds:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  double v8;
  double v9;
  CGFloat v10;
  CGFloat v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v30[5];
  char v31;
  _BYTE v32[160];
  uint64_t v33;
  char v34;
  CGFloat x;
  double v36;
  CGFloat v37;
  CGFloat v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  int v42;
  _QWORD v43[5];
  _BYTE v44[48];
  CGRect v45;
  CGRect v46;

  outlined init with take of CGRect?(a4, (uint64_t)v43);
  v9 = *(double *)v43;
  v8 = *(double *)&v43[1];
  v10 = *(double *)&v43[2];
  v11 = *(double *)&v43[3];
  v12 = a2[2];
  v27 = a2[1];
  v28 = *a2;
  v13 = a2[3];
  v14 = a2[4];
  v26 = *((_BYTE *)a2 + 40);
  v15 = *v4;
  v16 = *((_BYTE *)v4 + 8);
  v18 = *((double *)v4 + 2);
  v17 = *((double *)v4 + 3);
  v19 = v4[4];
  v20 = v4[5];
  outlined init with take of CGRect?(a4, (uint64_t)v44);
  if (v44[32] == 1)
  {
    Path.boundingRect.getter();
    v9 = v21;
    v8 = v22;
    v10 = v23;
    v11 = v24;
  }
  v45.origin.x = v9;
  v45.origin.y = v8;
  v45.size.width = v10;
  v45.size.height = v11;
  v46.origin.x = v9 + v18 * CGRectGetWidth(v45);
  v46.origin.y = v8;
  v46.size.width = v10;
  v46.size.height = v11;
  v33 = v15;
  v34 = v16;
  x = v46.origin.x;
  v36 = v8 + v17 * CGRectGetHeight(v46);
  v37 = v10;
  v38 = v11;
  v39 = v19;
  v40 = v20;
  v41 = 2;
  v42 = 0;
  _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi4_((uint64_t)&v33);
  outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v33, (uint64_t)v32);
  v30[0] = v28;
  v30[1] = v27;
  v30[2] = v12;
  v30[3] = v13;
  v30[4] = v14;
  v31 = v26;
  swift_bridgeObjectRetain();
  GraphicsContext.draw(_:with:style:)(a1, (uint64_t)v32, (uint64_t)v30, a3);
  return swift_bridgeObjectRelease();
}

void protocol witness for static ResolvedPaint.leafProtobufTag.getter in conformance EllipticalGradient._Paint(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 5;
  *(_BYTE *)(a1 + 8) = 0;
}

__n128 RadialGradient._Paint.animatableData.getter@<Q0>(uint64_t a1@<X8>)
{
  __n128 *v1;
  unint64_t v3;
  char v4;
  unsigned int v5;
  char v6;
  uint64_t v7;
  __n128 result;
  float64x2_t v9;
  __n128 v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  SwiftUI::ResolvedGradient v15;

  v3 = v1->n128_u64[0];
  v4 = v1->n128_i8[8];
  v9 = (float64x2_t)v1[1];
  v10 = v1[2];
  if (one-time initialization token for v5 != -1)
    swift_once();
  v5 = static Semantics.v5;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FAB4 != 1)
  {
    if (static Semantics.forced < v5)
      goto LABEL_7;
LABEL_9:
    v11 = v3;
    v12 = v4;
    swift_bridgeObjectRetain();
    v15.stops._rawValue = &v11;
    ResolvedGradientVector.init(_:)(v15);
    v7 = v13;
    v6 = v14;
    goto LABEL_10;
  }
  if ((dyld_program_sdk_at_least() & 1) != 0)
    goto LABEL_9;
LABEL_7:
  v6 = 0;
  v7 = MEMORY[0x24BEE4AF8];
LABEL_10:
  *(float64x2_t *)a1 = vmulq_f64(v9, (float64x2_t)vdupq_n_s64(0x4060000000000000uLL));
  *(_QWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 24) = v6;
  result = v10;
  *(__n128 *)(a1 + 32) = v10;
  return result;
}

uint64_t protocol witness for Animatable.animatableData.setter in conformance RadialGradient._Paint(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char v8;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  *(float64x2_t *)(v1 + 16) = vmulq_f64(*(float64x2_t *)a1, (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL));
  v7 = v2;
  v8 = v3;
  result = ResolvedGradient.animatableData.setter(&v7);
  *(_QWORD *)(v1 + 32) = v4;
  *(_QWORD *)(v1 + 40) = v5;
  return result;
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance EllipticalGradient._Paint(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = EllipticalGradient._Paint.animatableData.modify(v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t (*EllipticalGradient._Paint.animatableData.modify(_QWORD *a1))()
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  char v5;
  unsigned int v6;
  char v7;
  uint64_t v8;
  float64x2_t v10;
  __int128 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  SwiftUI::ResolvedGradient v16;

  v3 = malloc(0x50uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *v1;
  v5 = *((_BYTE *)v1 + 8);
  v10 = *((float64x2_t *)v1 + 1);
  v11 = *((_OWORD *)v1 + 2);
  if (one-time initialization token for v5 != -1)
    swift_once();
  v6 = static Semantics.v5;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FAB4 != 1)
  {
    if (static Semantics.forced < v6)
      goto LABEL_7;
LABEL_9:
    v12 = v4;
    v13 = v5;
    swift_bridgeObjectRetain();
    v16.stops._rawValue = &v12;
    ResolvedGradientVector.init(_:)(v16);
    v8 = v14;
    v7 = v15;
    goto LABEL_10;
  }
  if ((dyld_program_sdk_at_least() & 1) != 0)
    goto LABEL_9;
LABEL_7:
  v7 = 0;
  v8 = MEMORY[0x24BEE4AF8];
LABEL_10:
  *(float64x2_t *)v3 = vmulq_f64(v10, (float64x2_t)vdupq_n_s64(0x4060000000000000uLL));
  v3[2] = v8;
  *((_BYTE *)v3 + 24) = v7;
  *((_OWORD *)v3 + 2) = v11;
  return RadialGradient._Paint.animatableData.modify;
}

void RadialGradient._Paint.animatableData.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  float64x2_t *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v2 = *a1;
  v3 = *(float64x2_t **)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 16);
  v5 = *(_BYTE *)(v2 + 24);
  v7 = *(_QWORD *)(v2 + 32);
  v6 = *(_QWORD *)(v2 + 40);
  v3[1] = vmulq_f64(*(float64x2_t *)v2, (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL));
  v8 = *(_QWORD *)(v2 + 72);
  v9 = v4;
  v10 = v5;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    ResolvedGradient.animatableData.setter(&v9);
    *(_QWORD *)(v8 + 32) = v7;
    *(_QWORD *)(v8 + 40) = v6;
    swift_bridgeObjectRelease();
  }
  else
  {
    ResolvedGradient.animatableData.setter(&v9);
    *(_QWORD *)(v8 + 32) = v7;
    *(_QWORD *)(v8 + 40) = v6;
  }
  free((void *)v2);
}

double EllipticalGradient.resolvePaint(in:)@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)&result = RadialGradient.resolvePaint(in:)(a1, (void (*)(uint64_t))outlined retain of RadialGradient, (void (*)(uint64_t))outlined release of RadialGradient, a2).n128_u64[0];
  return result;
}

uint64_t (*AngularGradient.gradient.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*AngularGradient.center.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*AngularGradient.startAngle.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*AngularGradient.endAngle.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t LinearGradient._Paint.gradient.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t result;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)v1 = v2;
  *(_BYTE *)(v1 + 8) = v3;
  return result;
}

uint64_t (*AngularGradient._Paint.gradient.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*AngularGradient._Paint.center.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*AngularGradient._Paint.startAngle.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*AngularGradient._Paint.endAngle.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t RadialGradient._Paint.init(gradient:center:startRadius:endRadius:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  char v6;

  v6 = *(_BYTE *)(result + 8);
  *(_QWORD *)a2 = *(_QWORD *)result;
  *(_BYTE *)(a2 + 8) = v6;
  *(double *)(a2 + 16) = a3;
  *(double *)(a2 + 24) = a4;
  *(double *)(a2 + 32) = a5;
  *(double *)(a2 + 40) = a6;
  return result;
}

void static AngularGradient._Paint.leafProtobufTag.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 4;
  *(_BYTE *)(a1 + 8) = 0;
}

BOOL static AngularGradient._Paint.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static RadialGradient._Paint.== infix(_:_:)(a1, a2);
}

uint64_t AngularGradient._Paint.draw(path:style:in:bounds:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v30[5];
  char v31;
  _BYTE v32[160];
  uint64_t v33;
  char v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  int v42;
  _QWORD v43[5];
  _BYTE v44[48];

  outlined init with take of CGRect?(a4, (uint64_t)v43);
  v9 = *(double *)v43;
  v8 = *(double *)&v43[1];
  v10 = *(double *)&v43[2];
  v11 = *(double *)&v43[3];
  v12 = a2[2];
  v27 = a2[1];
  v28 = *a2;
  v13 = a2[3];
  v14 = a2[4];
  v26 = *((_BYTE *)a2 + 40);
  v15 = *v4;
  v16 = *((_BYTE *)v4 + 8);
  v18 = *((double *)v4 + 2);
  v17 = *((double *)v4 + 3);
  v19 = v4[4];
  v20 = v4[5];
  outlined init with take of CGRect?(a4, (uint64_t)v44);
  if (v44[32] == 1)
  {
    Path.boundingRect.getter();
    v9 = v21;
    v8 = v22;
    v10 = v23;
    v11 = v24;
  }
  v33 = v15;
  v34 = v16;
  v35 = v9 + v18 * v10;
  v36 = v8 + v17 * v11;
  v37 = v19;
  v38 = v20;
  v39 = 0;
  v40 = 0;
  v41 = 4;
  v42 = 0;
  _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi4_((uint64_t)&v33);
  outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v33, (uint64_t)v32);
  v30[0] = v28;
  v30[1] = v27;
  v30[2] = v12;
  v30[3] = v13;
  v30[4] = v14;
  v31 = v26;
  swift_bridgeObjectRetain();
  GraphicsContext.draw(_:with:style:)(a1, (uint64_t)v32, (uint64_t)v30, a3);
  return swift_bridgeObjectRelease();
}

BOOL LinearGradient._Paint.isClear.getter()
{
  uint64_t v0;
  uint64_t v1;
  float *v2;
  uint64_t v3;
  _BOOL8 result;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  if (v1)
  {
    v2 = (float *)(*(_QWORD *)v0 + 44);
    v3 = 1;
    LOBYTE(result) = 1;
    do
    {
      if (result)
      {
        result = *v2 == 0.0;
        if (v1 == v3)
          return result;
      }
      else
      {
        result = 0;
        if (v1 == v3)
          return result;
      }
      v2 += 12;
    }
    while (!__OFADD__(v3++, 1));
    __break(1u);
  }
  return 1;
}

BOOL LinearGradient._Paint.isOpaque.getter()
{
  uint64_t v0;
  uint64_t v1;
  float *v2;
  uint64_t v3;
  _BOOL8 result;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  if (v1)
  {
    v2 = (float *)(*(_QWORD *)v0 + 44);
    v3 = 1;
    LOBYTE(result) = 1;
    do
    {
      if (result)
      {
        result = *v2 == 1.0;
        if (v1 == v3)
          return result;
      }
      else
      {
        result = 0;
        if (v1 == v3)
          return result;
      }
      v2 += 12;
    }
    while (!__OFADD__(v3++, 1));
    __break(1u);
  }
  return 0;
}

void protocol witness for static ResolvedPaint.leafProtobufTag.getter in conformance AngularGradient._Paint(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 4;
  *(_BYTE *)(a1 + 8) = 0;
}

float64x2_t AngularGradient._Paint.animatableData.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  char v4;
  unsigned int v5;
  char v6;
  uint64_t v7;
  float64x2_t v8;
  float64x2_t result;
  float64x2_t v10;
  float64x2_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  SwiftUI::ResolvedGradient v16;

  v3 = *v1;
  v4 = *((_BYTE *)v1 + 8);
  v10 = *((float64x2_t *)v1 + 1);
  v11 = *((float64x2_t *)v1 + 2);
  if (one-time initialization token for v5 != -1)
    swift_once();
  v5 = static Semantics.v5;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FAB4 != 1)
  {
    if (static Semantics.forced < v5)
      goto LABEL_7;
LABEL_9:
    v12 = v3;
    v13 = v4;
    swift_bridgeObjectRetain();
    v16.stops._rawValue = &v12;
    ResolvedGradientVector.init(_:)(v16);
    v7 = v14;
    v6 = v15;
    goto LABEL_10;
  }
  if ((dyld_program_sdk_at_least() & 1) != 0)
    goto LABEL_9;
LABEL_7:
  v6 = 0;
  v7 = MEMORY[0x24BEE4AF8];
LABEL_10:
  v8 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
  *(float64x2_t *)a1 = vmulq_f64(v10, v8);
  result = vmulq_f64(v11, v8);
  *(_QWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 24) = v6;
  *(float64x2_t *)(a1 + 32) = result;
  return result;
}

float64x2_t protocol witness for Animatable.animatableData.setter in conformance AngularGradient._Paint(uint64_t a1)
{
  float64x2_t *v1;
  uint64_t v3;
  char v4;
  float64x2_t result;
  float64x2_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_BYTE *)(a1 + 24);
  v6 = (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL);
  v1[1] = vmulq_f64(*(float64x2_t *)a1, v6);
  v7 = v3;
  v8 = v4;
  ResolvedGradient.animatableData.setter(&v7);
  result = vmulq_f64(*(float64x2_t *)(a1 + 32), v6);
  v1[2] = result;
  return result;
}

float64x2_t AngularGradient._Paint.animatableData.setter(uint64_t a1)
{
  float64x2_t *v1;
  uint64_t v3;
  char v4;
  float64x2_t result;
  float64x2_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_BYTE *)(a1 + 24);
  v6 = (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL);
  v1[1] = vmulq_f64(*(float64x2_t *)a1, v6);
  v7 = v3;
  v8 = v4;
  ResolvedGradient.animatableData.setter(&v7);
  result = vmulq_f64(*(float64x2_t *)(a1 + 32), v6);
  v1[2] = result;
  return result;
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance AngularGradient._Paint(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = AngularGradient._Paint.animatableData.modify(v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

void protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

void (*AngularGradient._Paint.animatableData.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  char v5;
  unsigned int v6;
  char v7;
  uint64_t v8;
  float64x2_t v9;
  float64x2_t v11;
  float64x2_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  SwiftUI::ResolvedGradient v17;

  v3 = malloc(0x50uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *v1;
  v5 = *((_BYTE *)v1 + 8);
  v11 = *((float64x2_t *)v1 + 2);
  v12 = *((float64x2_t *)v1 + 1);
  if (one-time initialization token for v5 != -1)
    swift_once();
  v6 = static Semantics.v5;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FAB4 != 1)
  {
    if (static Semantics.forced < v6)
      goto LABEL_7;
LABEL_9:
    v13 = v4;
    v14 = v5;
    swift_bridgeObjectRetain();
    v17.stops._rawValue = &v13;
    ResolvedGradientVector.init(_:)(v17);
    v8 = v15;
    v7 = v16;
    goto LABEL_10;
  }
  if ((dyld_program_sdk_at_least() & 1) != 0)
    goto LABEL_9;
LABEL_7:
  v7 = 0;
  v8 = MEMORY[0x24BEE4AF8];
LABEL_10:
  v9 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
  *(float64x2_t *)v3 = vmulq_f64(v12, v9);
  v3[2] = v8;
  *((_BYTE *)v3 + 24) = v7;
  *((float64x2_t *)v3 + 2) = vmulq_f64(v11, v9);
  return AngularGradient._Paint.animatableData.modify;
}

void AngularGradient._Paint.animatableData.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  float64x2_t *v3;
  uint64_t v4;
  char v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v2 = *a1;
  v3 = *(float64x2_t **)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 16);
  v5 = *(_BYTE *)(v2 + 24);
  v7 = *(double *)(v2 + 32);
  v6 = *(double *)(v2 + 40);
  v3[1] = vmulq_f64(*(float64x2_t *)v2, (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL));
  v8 = *(_QWORD *)(v2 + 72);
  v9 = v4;
  v10 = v5;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    ResolvedGradient.animatableData.setter(&v9);
    *(double *)(v8 + 32) = v7 * 0.0078125;
    *(double *)(v8 + 40) = v6 * 0.0078125;
    swift_bridgeObjectRelease();
  }
  else
  {
    ResolvedGradient.animatableData.setter(&v9);
    *(double *)(v8 + 32) = v7 * 0.0078125;
    *(double *)(v8 + 40) = v6 * 0.0078125;
  }
  free((void *)v2);
}

double AngularGradient.resolvePaint(in:)@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)&result = RadialGradient.resolvePaint(in:)(a1, (void (*)(uint64_t))outlined retain of RadialGradient, (void (*)(uint64_t))outlined release of RadialGradient, a2).n128_u64[0];
  return result;
}

__n128 RadialGradient.resolvePaint(in:)@<Q0>(uint64_t *a1@<X0>, void (*a2)(uint64_t)@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __n128 result;
  __int128 v14;

  v8 = *a1;
  v9 = a1[1];
  v10 = *(_QWORD *)v4;
  swift_retain();
  swift_retain();
  a2(v4);
  v11 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI8GradientV4StopVG_AF08ResolvedF0VAIVs5NeverOTg503_s7d3UI8f16V7resolve2inAA08h31C0VAA17EnvironmentValuesV_tFAG4G10VAcJVXEfU_AF0pQ0VTf1cn_nTf4ng_n(v10, v8, v9);
  swift_release();
  swift_release();
  a3(v4);
  if (one-time initialization token for default != -1)
    swift_once();
  v12 = static ResolvedGradient.ColorSpace.default;
  *(_QWORD *)a4 = v11;
  *(_BYTE *)(a4 + 8) = v12;
  result = *(__n128 *)(v4 + 8);
  v14 = *(_OWORD *)(v4 + 24);
  *(__n128 *)(a4 + 16) = result;
  *(_OWORD *)(a4 + 32) = v14;
  return result;
}

uint64_t LinearGradient.fallbackColor(in:)()
{
  uint64_t v0;

  if (*(_QWORD *)(*(_QWORD *)v0 + 16))
    return swift_retain();
  else
    return 0;
}

void static AngularGradient._makeView<A>(view:inputs:)(int *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  static _ShapeView._makeView(view:inputs:)(a1, a2, a3, &type metadata for AngularGradient, a4, (uint64_t)&protocol witness table for AngularGradient, a5);
}

float64x2_t key path getter for LinearGradient._Paint.animatableData : LinearGradient._Paint@<Q0>(float64x2_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t result;
  uint64_t v9;
  char v10;

  ResolvedGradient.animatableData.getter((uint64_t)&v9);
  v4 = v9;
  v5 = v10;
  v6 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
  v7 = vmulq_f64(a1[1], v6);
  result = vmulq_f64(a1[2], v6);
  *(float64x2_t *)a2 = v7;
  *(float64x2_t *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 32) = v4;
  *(_BYTE *)(a2 + 40) = v5;
  return result;
}

uint64_t key path setter for LinearGradient._Paint.animatableData : LinearGradient._Paint(uint64_t a1, float64x2_t *a2)
{
  uint64_t v2;
  char v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  uint64_t v8;
  char v9;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_BYTE *)(a1 + 40);
  v4 = (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL);
  v5 = vmulq_f64(*(float64x2_t *)a1, v4);
  v6 = vmulq_f64(*(float64x2_t *)(a1 + 16), v4);
  a2[1] = v5;
  a2[2] = v6;
  v8 = v2;
  v9 = v3;
  swift_bridgeObjectRetain();
  return ResolvedGradient.animatableData.setter(&v8);
}

uint64_t LinearGradient._Paint.encode(to:)(uint64_t a1)
{
  double *v1;
  uint64_t v2;
  double *v3;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t result;
  double v10;
  double v11;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v3 = v1;
  v5 = v3[2];
  v6 = v3[3];
  v7 = v3[4];
  v8 = v3[5];
  swift_bridgeObjectRetain();
  specialized ProtobufEncoder.messageField<A>(_:_:)(1);
  result = swift_bridgeObjectRelease();
  if (v2)
    return result;
  if (one-time initialization token for zero != -1)
    result = swift_once();
  v10 = *(double *)&static UnitPoint.zero;
  v11 = unk_2561AAD30;
  if (v5 != *(double *)&static UnitPoint.zero || v6 != unk_2561AAD30)
  {
    ProtobufEncoder.encodeVarint(_:)(0x12uLL);
    v13 = *(_QWORD *)(a1 + 8);
    v14 = *(_QWORD **)(a1 + 24);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
    v15 = v14[2];
    v16 = v14[3];
    v17 = v15 + 1;
    if (v15 >= v16 >> 1)
    {
      v27 = v15 + 1;
      v22 = v14;
      v23 = v14[2];
      v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v15 + 1, 1, v22);
      v15 = v23;
      v17 = v27;
      v14 = v24;
    }
    v14[2] = v17;
    v14[v15 + 4] = v13;
    *(_QWORD *)(a1 + 24) = v14;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
LABEL_25:
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
      v14 = (_QWORD *)result;
      goto LABEL_19;
    }
    *(_QWORD *)(a1 + 8) = v13 + 1;
    UnitPoint.encode(to:)((double *)a1, v5, v6);
    result = ProtobufEncoder.endLengthDelimited()();
  }
  if (v7 == v10 && v8 == v11)
    return result;
  ProtobufEncoder.encodeVarint(_:)(0x1AuLL);
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD **)(a1 + 24);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
    goto LABEL_25;
LABEL_19:
  v19 = v14[2];
  v20 = v14[3];
  v21 = v19 + 1;
  if (v19 >= v20 >> 1)
  {
    v28 = v19 + 1;
    v25 = v14;
    v26 = v14[2];
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v19 + 1, 1, v25);
    v19 = v26;
    v21 = v28;
    v14 = (_QWORD *)result;
  }
  v14[2] = v21;
  v14[v19 + 4] = v13;
  *(_QWORD *)(a1 + 24) = v14;
  if (__OFADD__(v13, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v13 + 1;
    UnitPoint.encode(to:)((double *)a1, v7, v8);
    return ProtobufEncoder.endLengthDelimited()();
  }
  return result;
}

unint64_t LinearGradient._Paint.init(from:)@<X0>(unint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  double v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  double v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;

  v3 = (_QWORD *)result;
  if (one-time initialization token for default != -1)
    result = swift_once();
  v5 = static ResolvedGradient.ColorSpace.default;
  if (one-time initialization token for zero != -1)
    result = swift_once();
  v6 = static UnitPoint.zero;
  v7 = unk_2561AAD30;
  v8 = v3[1];
  v9 = v3[2];
  v10 = MEMORY[0x24BEE4AF8];
  v11 = static UnitPoint.zero;
  v12 = unk_2561AAD30;
  while (1)
  {
    if (v8 >= v9)
      goto LABEL_70;
    result = v3[3];
    if (result)
    {
      v17 = v3[4];
      if (v8 < v17)
        goto LABEL_16;
      if (v17 < v8)
        goto LABEL_71;
      v3[3] = 0;
    }
    result = ProtobufDecoder.decodeVarint()();
    if (v2)
      return swift_bridgeObjectRelease();
    if (result <= 7)
      goto LABEL_71;
LABEL_16:
    v18 = result >> 3;
    if (result >> 3 == 3)
    {
      if ((result & 7) != 2)
        goto LABEL_71;
      v29 = (_QWORD *)v3[5];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1, v29);
      v31 = v29[2];
      v30 = v29[3];
      if (v31 >= v30 >> 1)
        v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v30 > 1), v31 + 1, 1, v29);
      v29[2] = v31 + 1;
      v29[v31 + 4] = v9;
      v3[5] = v29;
      v32 = ProtobufDecoder.decodeVarint()();
      if (v2)
        return swift_bridgeObjectRelease();
      if (v32 < 0)
        goto LABEL_81;
      v33 = v3[1] + v32;
      if (v9 < v33)
        goto LABEL_71;
      v3[2] = v33;
      v34 = specialized UnitPoint.init(from:)(v3);
      v13 = (_QWORD *)v3[5];
      if (!v13[2])
        goto LABEL_84;
      v6 = *(_QWORD *)&v34;
      v12 = v35;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
      {
        v14 = v13[2];
        if (!v14)
          goto LABEL_85;
      }
      else
      {
        result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v13);
        v13 = (_QWORD *)result;
        v14 = *(_QWORD *)(result + 16);
        if (!v14)
          goto LABEL_85;
      }
LABEL_7:
      v15 = v14 - 1;
      v16 = v13[v15 + 4];
      v13[2] = v15;
      v3[5] = v13;
      v3[2] = v16;
      goto LABEL_8;
    }
    if (v18 == 2)
    {
      if ((result & 7) != 2)
        goto LABEL_71;
      v36 = (_QWORD *)v3[5];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36[2] + 1, 1, v36);
      v38 = v36[2];
      v37 = v36[3];
      if (v38 >= v37 >> 1)
        v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v37 > 1), v38 + 1, 1, v36);
      v36[2] = v38 + 1;
      v36[v38 + 4] = v9;
      v3[5] = v36;
      v39 = ProtobufDecoder.decodeVarint()();
      if (v2)
        return swift_bridgeObjectRelease();
      if (v39 < 0)
        goto LABEL_82;
      v40 = v3[1] + v39;
      if (v9 < v40)
      {
LABEL_71:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        return swift_bridgeObjectRelease();
      }
      v3[2] = v40;
      v41 = specialized UnitPoint.init(from:)(v3);
      v13 = (_QWORD *)v3[5];
      if (!v13[2])
        goto LABEL_86;
      v11 = *(_QWORD *)&v41;
      v7 = v42;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
      {
        v14 = v13[2];
        if (!v14)
          goto LABEL_69;
      }
      else
      {
        result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v13);
        v13 = (_QWORD *)result;
        v14 = *(_QWORD *)(result + 16);
        if (!v14)
        {
LABEL_69:
          __break(1u);
LABEL_70:
          v3[3] = 0;
          *a2 = v10;
          *((_BYTE *)a2 + 8) = v5;
          a2[2] = v11;
          a2[3] = v7;
          a2[4] = v6;
          a2[5] = v12;
          return result;
        }
      }
      goto LABEL_7;
    }
    if (v18 != 1)
    {
      switch(result & 7)
      {
        case 0uLL:
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return swift_bridgeObjectRelease();
          goto LABEL_8;
        case 1uLL:
          v43 = v3[1] + 8;
          if (v9 < v43)
            goto LABEL_71;
          goto LABEL_65;
        case 2uLL:
          result = ProtobufDecoder.decodeVarint()();
          if (v2)
            return swift_bridgeObjectRelease();
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_88;
          v43 = v3[1] + result;
          if (v9 < v43)
            goto LABEL_71;
LABEL_65:
          v3[1] = v43;
          break;
        case 5uLL:
          v43 = v3[1] + 4;
          if (v9 < v43)
            goto LABEL_71;
          goto LABEL_65;
        default:
          goto LABEL_71;
      }
      goto LABEL_8;
    }
    if ((result & 7) != 2)
      goto LABEL_71;
    v19 = (_QWORD *)v3[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
    v21 = v19[2];
    v20 = v19[3];
    if (v21 >= v20 >> 1)
      v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v21 + 1, 1, v19);
    v19[2] = v21 + 1;
    v19[v21 + 4] = v9;
    v3[5] = v19;
    v22 = ProtobufDecoder.decodeVarint()();
    if (v2)
      return swift_bridgeObjectRelease();
    if (v22 < 0)
      break;
    v23 = v3[1] + v22;
    if (v9 < v23)
      goto LABEL_71;
    v3[2] = v23;
    ResolvedGradient.init(from:)((unint64_t)v3, (uint64_t)&v47);
    v24 = (_QWORD *)v3[5];
    if (!v24[2])
      goto LABEL_83;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v25 = v24[2];
      if (!v25)
        goto LABEL_87;
    }
    else
    {
      v24 = specialized _ArrayBuffer._consumeAndCreateNew()(v24);
      v25 = v24[2];
      if (!v25)
        goto LABEL_87;
    }
    v26 = v25 - 1;
    v27 = v24[v26 + 4];
    v24[2] = v26;
    v3[5] = v24;
    v3[2] = v27;
    v28 = v47;
    v5 = v48;
    result = swift_bridgeObjectRelease();
    v10 = v28;
LABEL_8:
    v8 = v3[1];
    v9 = v3[2];
  }
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
  __break(1u);
  while (2)
  {
    __break(1u);
LABEL_90:
    a2 = specialized _ArrayBuffer._consumeAndCreateNew()(a2);
    v44 = a2[2];
    if (!v44)
    {
LABEL_75:
      __break(1u);
      a2 = (_QWORD *)v3[5];
      if (a2[2])
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v44 = a2[2];
          if (v44)
            break;
LABEL_94:
          __break(1u);
          a2 = specialized _ArrayBuffer._consumeAndCreateNew()(a2);
          v44 = a2[2];
          if (v44)
            break;
          __break(1u);
          a2 = (_QWORD *)v3[5];
          if (!a2[2])
            continue;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            goto LABEL_90;
          v44 = a2[2];
          if (v44)
            break;
          goto LABEL_75;
        }
      }
      else
      {
        __break(1u);
      }
      a2 = specialized _ArrayBuffer._consumeAndCreateNew()(a2);
      v44 = a2[2];
      if (v44)
        break;
      goto LABEL_94;
    }
    break;
  }
  v45 = v44 - 1;
  v46 = a2[v45 + 4];
  a2[2] = v45;
  v3[5] = a2;
  v3[2] = v46;
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance LinearGradient._Paint(uint64_t a1)
{
  return LinearGradient._Paint.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance LinearGradient._Paint@<X0>(unint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return LinearGradient._Paint.init(from:)(a1, a2);
}

int64_t RadialGradient._Paint.encode(to:)(uint64_t a1)
{
  double *v1;
  uint64_t v2;
  double *v3;
  double v5;
  double v6;
  double v7;
  double v8;
  int64_t result;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  Swift::UInt v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  Swift::UInt v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;

  v3 = v1;
  v5 = v3[2];
  v6 = v3[3];
  v8 = v3[4];
  v7 = v3[5];
  swift_bridgeObjectRetain();
  specialized ProtobufEncoder.messageField<A>(_:_:)(1);
  result = swift_bridgeObjectRelease();
  if (v2)
    return result;
  if (one-time initialization token for zero != -1)
    result = swift_once();
  if (v5 != *(double *)&static UnitPoint.zero || v6 != unk_2561AAD30)
  {
    ProtobufEncoder.encodeVarint(_:)(0x12uLL);
    v11 = *(_QWORD *)(a1 + 8);
    v12 = *(_QWORD **)(a1 + 24);
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
      v12 = (_QWORD *)result;
    }
    v13 = v12[2];
    v14 = v12[3];
    v15 = v13 + 1;
    if (v13 >= v14 >> 1)
    {
      v25 = v13 + 1;
      v23 = v12;
      v24 = v12[2];
      result = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v13 + 1, 1, v23);
      v13 = v24;
      v15 = v25;
      v12 = (_QWORD *)result;
    }
    v12[2] = v15;
    v12[v13 + 4] = v11;
    *(_QWORD *)(a1 + 24) = v12;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_38;
    }
    *(_QWORD *)(a1 + 8) = v11 + 1;
    UnitPoint.encode(to:)((double *)a1, v5, v6);
    result = ProtobufEncoder.endLengthDelimited()();
  }
  if (v8 != 0.0)
  {
    v5 = fabs(v8);
    if (v5 >= 65536.0)
      v16 = 25;
    else
      v16 = 29;
    ProtobufEncoder.encodeVarint(_:)(v16);
    if (v5 >= 65536.0)
    {
      v18 = *(_QWORD *)(a1 + 8);
      result = v18 + 8;
      if (__OFADD__(v18, 8))
      {
        __break(1u);
      }
      else if (*(_QWORD *)(a1 + 16) >= result)
      {
        *(_QWORD *)(a1 + 8) = result;
        *(double *)(*(_QWORD *)a1 + v18) = v8;
        goto LABEL_25;
      }
      result = ProtobufEncoder.growBufferSlow(to:)(result);
      *(double *)result = v8;
      goto LABEL_25;
    }
    v17 = *(_QWORD *)(a1 + 8);
    result = v17 + 4;
    if (!__OFADD__(v17, 4))
    {
      *(float *)&v5 = v8;
      if (*(_QWORD *)(a1 + 16) >= result)
      {
        *(_QWORD *)(a1 + 8) = result;
        *(_DWORD *)(*(_QWORD *)a1 + v17) = LODWORD(v5);
        goto LABEL_25;
      }
LABEL_39:
      result = ProtobufEncoder.growBufferSlow(to:)(result);
      *(_DWORD *)result = LODWORD(v5);
      goto LABEL_25;
    }
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
LABEL_25:
  if (v7 == 0.0)
    return result;
  v19 = fabs(v7);
  if (v19 >= 65536.0)
    v20 = 33;
  else
    v20 = 37;
  ProtobufEncoder.encodeVarint(_:)(v20);
  if (v19 >= 65536.0)
  {
    v22 = *(_QWORD *)(a1 + 8);
    result = v22 + 8;
    if (__OFADD__(v22, 8))
    {
      __break(1u);
    }
    else if (*(_QWORD *)(a1 + 16) >= result)
    {
      *(_QWORD *)(a1 + 8) = result;
      *(double *)(*(_QWORD *)a1 + v22) = v7;
      return result;
    }
    result = ProtobufEncoder.growBufferSlow(to:)(result);
    *(double *)result = v7;
    return result;
  }
  v21 = *(_QWORD *)(a1 + 8);
  result = v21 + 4;
  if (__OFADD__(v21, 4))
  {
    __break(1u);
  }
  else
  {
    *(float *)&v19 = v7;
    if (*(_QWORD *)(a1 + 16) >= result)
    {
      *(_QWORD *)(a1 + 8) = result;
      *(_DWORD *)(*(_QWORD *)a1 + v21) = LODWORD(v19);
      return result;
    }
  }
  result = ProtobufEncoder.growBufferSlow(to:)(result);
  *(_DWORD *)result = LODWORD(v19);
  return result;
}

unint64_t RadialGradient._Paint.init(from:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return RadialGradient._Paint.init(from:)(a1, a2);
}

int64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance RadialGradient._Paint(uint64_t a1)
{
  return RadialGradient._Paint.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance RadialGradient._Paint@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return RadialGradient._Paint.init(from:)(a1, a2);
}

double key path getter for RadialGradient._Paint.animatableData : RadialGradient._Paint@<D0>(void (*a1)(__int128 *__return_ptr)@<X3>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char v4;
  double result;
  __int128 v6;
  uint64_t v7;
  char v8;
  __int128 v9;

  a1(&v6);
  v3 = v7;
  v4 = v8;
  *(_OWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = v3;
  *(_BYTE *)(a2 + 24) = v4;
  result = *(double *)&v9;
  *(_OWORD *)(a2 + 32) = v9;
  return result;
}

uint64_t key path setter for RadialGradient._Paint.animatableData : RadialGradient._Paint(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char v9;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_BYTE *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  *(float64x2_t *)(a2 + 16) = vmulq_f64(*(float64x2_t *)a1, (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL));
  v8 = v3;
  v9 = v4;
  swift_bridgeObjectRetain();
  result = ResolvedGradient.animatableData.setter(&v8);
  *(_QWORD *)(a2 + 32) = v5;
  *(_QWORD *)(a2 + 40) = v6;
  return result;
}

int64_t EllipticalGradient._Paint.encode(to:)(uint64_t a1)
{
  double *v1;
  uint64_t v2;
  double *v3;
  double v5;
  double v6;
  double v7;
  double v8;
  int64_t result;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  Swift::UInt v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  Swift::UInt v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;

  v3 = v1;
  v5 = v3[2];
  v6 = v3[3];
  v8 = v3[4];
  v7 = v3[5];
  swift_bridgeObjectRetain();
  specialized ProtobufEncoder.messageField<A>(_:_:)(1);
  result = swift_bridgeObjectRelease();
  if (v2)
    return result;
  if (v5 != 0.5 || v6 != 0.5)
  {
    ProtobufEncoder.encodeVarint(_:)(0x12uLL);
    v11 = *(_QWORD *)(a1 + 8);
    v12 = *(_QWORD **)(a1 + 24);
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
      v12 = (_QWORD *)result;
    }
    v13 = v12[2];
    v14 = v12[3];
    v15 = v13 + 1;
    if (v13 >= v14 >> 1)
    {
      v25 = v13 + 1;
      v23 = v12;
      v24 = v12[2];
      result = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v13 + 1, 1, v23);
      v13 = v24;
      v15 = v25;
      v12 = (_QWORD *)result;
    }
    v12[2] = v15;
    v12[v13 + 4] = v11;
    *(_QWORD *)(a1 + 24) = v12;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    *(_QWORD *)(a1 + 8) = v11 + 1;
    UnitPoint.encode(to:)((double *)a1, v5, v6);
    result = ProtobufEncoder.endLengthDelimited()();
  }
  if (v8 != 0.0)
  {
    v5 = fabs(v8);
    if (v5 >= 65536.0)
      v16 = 25;
    else
      v16 = 29;
    ProtobufEncoder.encodeVarint(_:)(v16);
    if (v5 >= 65536.0)
    {
      v18 = *(_QWORD *)(a1 + 8);
      result = v18 + 8;
      if (__OFADD__(v18, 8))
      {
        __break(1u);
      }
      else if (*(_QWORD *)(a1 + 16) >= result)
      {
        *(_QWORD *)(a1 + 8) = result;
        *(double *)(*(_QWORD *)a1 + v18) = v8;
        goto LABEL_23;
      }
      result = ProtobufEncoder.growBufferSlow(to:)(result);
      *(double *)result = v8;
      goto LABEL_23;
    }
    v17 = *(_QWORD *)(a1 + 8);
    result = v17 + 4;
    if (!__OFADD__(v17, 4))
    {
      *(float *)&v5 = v8;
      if (*(_QWORD *)(a1 + 16) >= result)
      {
        *(_QWORD *)(a1 + 8) = result;
        *(_DWORD *)(*(_QWORD *)a1 + v17) = LODWORD(v5);
        goto LABEL_23;
      }
LABEL_37:
      result = ProtobufEncoder.growBufferSlow(to:)(result);
      *(_DWORD *)result = LODWORD(v5);
      goto LABEL_23;
    }
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
LABEL_23:
  if (v7 == 0.0)
    return result;
  v19 = fabs(v7);
  if (v19 >= 65536.0)
    v20 = 33;
  else
    v20 = 37;
  ProtobufEncoder.encodeVarint(_:)(v20);
  if (v19 >= 65536.0)
  {
    v22 = *(_QWORD *)(a1 + 8);
    result = v22 + 8;
    if (__OFADD__(v22, 8))
    {
      __break(1u);
    }
    else if (*(_QWORD *)(a1 + 16) >= result)
    {
      *(_QWORD *)(a1 + 8) = result;
      *(double *)(*(_QWORD *)a1 + v22) = v7;
      return result;
    }
    result = ProtobufEncoder.growBufferSlow(to:)(result);
    *(double *)result = v7;
    return result;
  }
  v21 = *(_QWORD *)(a1 + 8);
  result = v21 + 4;
  if (__OFADD__(v21, 4))
  {
    __break(1u);
  }
  else
  {
    *(float *)&v19 = v7;
    if (*(_QWORD *)(a1 + 16) >= result)
    {
      *(_QWORD *)(a1 + 8) = result;
      *(_DWORD *)(*(_QWORD *)a1 + v21) = LODWORD(v19);
      return result;
    }
  }
  result = ProtobufEncoder.growBufferSlow(to:)(result);
  *(_DWORD *)result = LODWORD(v19);
  return result;
}

unint64_t EllipticalGradient._Paint.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  char v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  double v29;
  double v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  double *v36;
  unint64_t v37;
  double *v38;
  float *v39;
  float v40;
  float *v41;
  float v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;

  v3 = (_QWORD *)result;
  if (one-time initialization token for default != -1)
    result = swift_once();
  v5 = static ResolvedGradient.ColorSpace.default;
  v6 = v3[1];
  v7 = v3[2];
  v8 = MEMORY[0x24BEE4AF8];
  v9 = 0.5;
  v10 = 0.0;
  if (v6 >= v7)
  {
LABEL_76:
    v11 = 0.5;
    v12 = 0.0;
LABEL_77:
    v3[3] = 0;
    *(_QWORD *)a2 = v8;
    *(_BYTE *)(a2 + 8) = v5;
    *(double *)(a2 + 16) = v11;
    *(double *)(a2 + 24) = v9;
    *(double *)(a2 + 32) = v10;
    *(double *)(a2 + 40) = v12;
    return result;
  }
  v11 = 0.5;
  v12 = 0.0;
  while (2)
  {
    result = v3[3];
    if (result)
    {
      v13 = v3[4];
      if (v6 < v13)
        goto LABEL_12;
      if (v13 < v6)
        goto LABEL_78;
      v3[3] = 0;
    }
    result = ProtobufDecoder.decodeVarint()();
    if (v2)
      return swift_bridgeObjectRelease();
    if (result <= 7)
    {
LABEL_78:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
      return swift_bridgeObjectRelease();
    }
LABEL_12:
    switch(result >> 3)
    {
      case 1uLL:
        if ((result & 7) != 2)
          goto LABEL_78;
        v14 = (_QWORD *)v3[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
        v16 = v14[2];
        v15 = v14[3];
        if (v16 >= v15 >> 1)
          v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v14);
        v14[2] = v16 + 1;
        v14[v16 + 4] = v7;
        v3[5] = v14;
        v17 = ProtobufDecoder.decodeVarint()();
        if (v2)
          return swift_bridgeObjectRelease();
        if ((v17 & 0x8000000000000000) == 0)
        {
          v18 = v3[1] + v17;
          if (v7 < v18)
            goto LABEL_78;
          v3[2] = v18;
          ResolvedGradient.init(from:)((unint64_t)v3, (uint64_t)&v48);
          v19 = (_QWORD *)v3[5];
          if (!v19[2])
            goto LABEL_86;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
            v20 = v19[2];
            if (!v20)
              goto LABEL_88;
          }
          else
          {
            v19 = specialized _ArrayBuffer._consumeAndCreateNew()(v19);
            v20 = v19[2];
            if (!v20)
              goto LABEL_88;
          }
          v21 = v20 - 1;
          v22 = v19[v21 + 4];
          v19[2] = v21;
          v3[5] = v19;
          v3[2] = v22;
          v23 = v48;
          v5 = v49;
          result = swift_bridgeObjectRelease();
          v8 = v23;
LABEL_5:
          v6 = v3[1];
          v7 = v3[2];
          if (v6 >= v7)
            goto LABEL_77;
          continue;
        }
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
        __break(1u);
        v44 = specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)a2);
        v45 = v44[2];
        if (v45)
          goto LABEL_83;
        __break(1u);
        v44 = (_QWORD *)v3[5];
        if (!v44[2])
        {
          __break(1u);
LABEL_94:
          v44 = specialized _ArrayBuffer._consumeAndCreateNew()(v44);
          v45 = v44[2];
          if (v45)
            goto LABEL_83;
LABEL_95:
          __break(1u);
          JUMPOUT(0x234A733F4);
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          goto LABEL_94;
        v45 = v44[2];
        if (!v45)
          goto LABEL_95;
LABEL_83:
        v46 = v45 - 1;
        v47 = v44[v46 + 4];
        v44[2] = v46;
        v3[5] = v44;
        v3[2] = v47;
        return swift_bridgeObjectRelease();
      case 2uLL:
        if ((result & 7) != 2)
          goto LABEL_78;
        v24 = (_QWORD *)v3[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
        v26 = v24[2];
        v25 = v24[3];
        if (v26 >= v25 >> 1)
          v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v26 + 1, 1, v24);
        v24[2] = v26 + 1;
        v24[v26 + 4] = v7;
        v3[5] = v24;
        v27 = ProtobufDecoder.decodeVarint()();
        if (v2)
          return swift_bridgeObjectRelease();
        if (v27 < 0)
          goto LABEL_85;
        v28 = v3[1] + v27;
        if (v7 < v28)
          goto LABEL_78;
        v3[2] = v28;
        v29 = specialized UnitPoint.init(from:)(v3);
        v31 = (_QWORD *)v3[5];
        if (!v31[2])
          goto LABEL_87;
        v11 = v29;
        v9 = v30;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) != 0)
        {
          v32 = v31[2];
          if (!v32)
            goto LABEL_75;
          goto LABEL_39;
        }
        result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v31);
        v31 = (_QWORD *)result;
        v32 = *(_QWORD *)(result + 16);
        if (v32)
        {
LABEL_39:
          v33 = v32 - 1;
          v34 = v31[v33 + 4];
          v31[2] = v33;
          v3[5] = v31;
          v3[2] = v34;
          goto LABEL_5;
        }
LABEL_75:
        __break(1u);
        goto LABEL_76;
      case 3uLL:
        v35 = result & 7;
        if (v35 == 5)
        {
          v39 = (float *)v3[1];
          if (v7 < (unint64_t)(v39 + 1))
            goto LABEL_78;
          v40 = *v39;
          v3[1] = v39 + 1;
          v10 = v40;
        }
        else
        {
          if (v35 == 2)
          {
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return swift_bridgeObjectRelease();
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_89;
            v36 = (double *)v3[1];
            if (v7 < (unint64_t)v36 + result)
              goto LABEL_78;
            v3[3] = 25;
            v3[4] = (char *)v36 + result;
          }
          else
          {
            if (v35 != 1)
              goto LABEL_78;
            v36 = (double *)v3[1];
          }
          if (v7 < (unint64_t)(v36 + 1))
            goto LABEL_78;
          v10 = *v36;
          v3[1] = v36 + 1;
        }
        goto LABEL_5;
      case 4uLL:
        v37 = result & 7;
        if (v37 == 5)
        {
          v41 = (float *)v3[1];
          if (v7 < (unint64_t)(v41 + 1))
            goto LABEL_78;
          v42 = *v41;
          v3[1] = v41 + 1;
          v12 = v42;
        }
        else
        {
          if (v37 == 2)
          {
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return swift_bridgeObjectRelease();
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_90;
            v38 = (double *)v3[1];
            if (v7 < (unint64_t)v38 + result)
              goto LABEL_78;
            v3[3] = 33;
            v3[4] = (char *)v38 + result;
          }
          else
          {
            if (v37 != 1)
              goto LABEL_78;
            v38 = (double *)v3[1];
          }
          if (v7 < (unint64_t)(v38 + 1))
            goto LABEL_78;
          v12 = *v38;
          v3[1] = v38 + 1;
        }
        goto LABEL_5;
      default:
        switch(result & 7)
        {
          case 0uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return swift_bridgeObjectRelease();
            goto LABEL_5;
          case 1uLL:
            v43 = v3[1] + 8;
            if (v7 < v43)
              goto LABEL_78;
            goto LABEL_71;
          case 2uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return swift_bridgeObjectRelease();
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_91;
            v43 = v3[1] + result;
            if (v7 < v43)
              goto LABEL_78;
LABEL_71:
            v3[1] = v43;
            break;
          case 5uLL:
            v43 = v3[1] + 4;
            if (v7 >= v43)
              goto LABEL_71;
            goto LABEL_78;
          default:
            goto LABEL_78;
        }
        goto LABEL_5;
    }
  }
}

int64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance EllipticalGradient._Paint(uint64_t a1)
{
  return EllipticalGradient._Paint.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance EllipticalGradient._Paint@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return EllipticalGradient._Paint.init(from:)(a1, a2);
}

double key path getter for AngularGradient._Paint.animatableData : AngularGradient._Paint@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  double result;
  __int128 v5;
  uint64_t v6;
  char v7;
  __int128 v8;

  AngularGradient._Paint.animatableData.getter((uint64_t)&v5);
  v2 = v6;
  v3 = v7;
  *(_OWORD *)a1 = v5;
  *(_QWORD *)(a1 + 16) = v2;
  *(_BYTE *)(a1 + 24) = v3;
  result = *(double *)&v8;
  *(_OWORD *)(a1 + 32) = v8;
  return result;
}

double key path setter for AngularGradient._Paint.animatableData : AngularGradient._Paint(uint64_t a1, float64x2_t *a2)
{
  uint64_t v3;
  char v4;
  double v5;
  double v6;
  double result;
  uint64_t v8;
  char v9;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_BYTE *)(a1 + 24);
  v5 = *(double *)(a1 + 32);
  v6 = *(double *)(a1 + 40);
  a2[1] = vmulq_f64(*(float64x2_t *)a1, (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL));
  v8 = v3;
  v9 = v4;
  swift_bridgeObjectRetain();
  ResolvedGradient.animatableData.setter(&v8);
  result = v6 * 0.0078125;
  a2[2].f64[0] = v5 * 0.0078125;
  a2[2].f64[1] = v6 * 0.0078125;
  return result;
}

int64_t AngularGradient._Paint.encode(to:)(uint64_t a1)
{
  double *v1;
  uint64_t v2;
  double *v3;
  double v5;
  double v6;
  double v7;
  double v8;
  int64_t result;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  Swift::UInt v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  Swift::UInt v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;

  v3 = v1;
  v5 = v3[2];
  v6 = v3[3];
  v8 = v3[4];
  v7 = v3[5];
  swift_bridgeObjectRetain();
  specialized ProtobufEncoder.messageField<A>(_:_:)(1);
  result = swift_bridgeObjectRelease();
  if (v2)
    return result;
  if (one-time initialization token for zero != -1)
    result = swift_once();
  if (v5 != *(double *)&static UnitPoint.zero || v6 != unk_2561AAD30)
  {
    ProtobufEncoder.encodeVarint(_:)(0x12uLL);
    v11 = *(_QWORD *)(a1 + 8);
    v12 = *(_QWORD **)(a1 + 24);
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
      v12 = (_QWORD *)result;
    }
    v13 = v12[2];
    v14 = v12[3];
    v15 = v13 + 1;
    if (v13 >= v14 >> 1)
    {
      v25 = v13 + 1;
      v23 = v12;
      v24 = v12[2];
      result = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v13 + 1, 1, v23);
      v13 = v24;
      v15 = v25;
      v12 = (_QWORD *)result;
    }
    v12[2] = v15;
    v12[v13 + 4] = v11;
    *(_QWORD *)(a1 + 24) = v12;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_38;
    }
    *(_QWORD *)(a1 + 8) = v11 + 1;
    UnitPoint.encode(to:)((double *)a1, v5, v6);
    result = ProtobufEncoder.endLengthDelimited()();
  }
  if (v8 != 0.0)
  {
    v5 = fabs(v8);
    if (v5 >= 65536.0)
      v16 = 25;
    else
      v16 = 29;
    ProtobufEncoder.encodeVarint(_:)(v16);
    if (v5 >= 65536.0)
    {
      v18 = *(_QWORD *)(a1 + 8);
      result = v18 + 8;
      if (__OFADD__(v18, 8))
      {
        __break(1u);
      }
      else if (*(_QWORD *)(a1 + 16) >= result)
      {
        *(_QWORD *)(a1 + 8) = result;
        *(double *)(*(_QWORD *)a1 + v18) = v8;
        goto LABEL_25;
      }
      result = ProtobufEncoder.growBufferSlow(to:)(result);
      *(double *)result = v8;
      goto LABEL_25;
    }
    v17 = *(_QWORD *)(a1 + 8);
    result = v17 + 4;
    if (!__OFADD__(v17, 4))
    {
      *(float *)&v5 = v8;
      if (*(_QWORD *)(a1 + 16) >= result)
      {
        *(_QWORD *)(a1 + 8) = result;
        *(_DWORD *)(*(_QWORD *)a1 + v17) = LODWORD(v5);
        goto LABEL_25;
      }
LABEL_39:
      result = ProtobufEncoder.growBufferSlow(to:)(result);
      *(_DWORD *)result = LODWORD(v5);
      goto LABEL_25;
    }
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
LABEL_25:
  if (v7 == 0.0)
    return result;
  v19 = fabs(v7);
  if (v19 >= 65536.0)
    v20 = 33;
  else
    v20 = 37;
  ProtobufEncoder.encodeVarint(_:)(v20);
  if (v19 >= 65536.0)
  {
    v22 = *(_QWORD *)(a1 + 8);
    result = v22 + 8;
    if (__OFADD__(v22, 8))
    {
      __break(1u);
    }
    else if (*(_QWORD *)(a1 + 16) >= result)
    {
      *(_QWORD *)(a1 + 8) = result;
      *(double *)(*(_QWORD *)a1 + v22) = v7;
      return result;
    }
    result = ProtobufEncoder.growBufferSlow(to:)(result);
    *(double *)result = v7;
    return result;
  }
  v21 = *(_QWORD *)(a1 + 8);
  result = v21 + 4;
  if (__OFADD__(v21, 4))
  {
    __break(1u);
  }
  else
  {
    *(float *)&v19 = v7;
    if (*(_QWORD *)(a1 + 16) >= result)
    {
      *(_QWORD *)(a1 + 8) = result;
      *(_DWORD *)(*(_QWORD *)a1 + v21) = LODWORD(v19);
      return result;
    }
  }
  result = ProtobufEncoder.growBufferSlow(to:)(result);
  *(_DWORD *)result = LODWORD(v19);
  return result;
}

unint64_t AngularGradient._Paint.init(from:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return RadialGradient._Paint.init(from:)(a1, a2);
}

unint64_t RadialGradient._Paint.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  double v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  double *v36;
  unint64_t v37;
  double *v38;
  float *v39;
  float v40;
  float *v41;
  float v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;

  v3 = (_QWORD *)result;
  if (one-time initialization token for default != -1)
    result = swift_once();
  v5 = static ResolvedGradient.ColorSpace.default;
  if (one-time initialization token for zero != -1)
    result = swift_once();
  v6 = static UnitPoint.zero;
  v7 = unk_2561AAD30;
  v8 = v3[1];
  v9 = v3[2];
  v10 = MEMORY[0x24BEE4AF8];
  v11 = 0.0;
  v12 = 0.0;
  if (v8 >= v9)
  {
LABEL_78:
    v3[3] = 0;
    *(_QWORD *)a2 = v10;
    *(_BYTE *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
    *(_QWORD *)(a2 + 24) = v7;
    *(double *)(a2 + 32) = v11;
    *(double *)(a2 + 40) = v12;
    return result;
  }
  while (2)
  {
    result = v3[3];
    if (result)
    {
      v13 = v3[4];
      if (v8 < v13)
        goto LABEL_14;
      if (v13 < v8)
        goto LABEL_79;
      v3[3] = 0;
    }
    result = ProtobufDecoder.decodeVarint()();
    if (v2)
      return swift_bridgeObjectRelease();
    if (result <= 7)
    {
LABEL_79:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
      return swift_bridgeObjectRelease();
    }
LABEL_14:
    switch(result >> 3)
    {
      case 1uLL:
        if ((result & 7) != 2)
          goto LABEL_79;
        v14 = (_QWORD *)v3[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
        v16 = v14[2];
        v15 = v14[3];
        if (v16 >= v15 >> 1)
          v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v14);
        v14[2] = v16 + 1;
        v14[v16 + 4] = v9;
        v3[5] = v14;
        v17 = ProtobufDecoder.decodeVarint()();
        if (v2)
          return swift_bridgeObjectRelease();
        if ((v17 & 0x8000000000000000) == 0)
        {
          v18 = v3[1] + v17;
          if (v9 < v18)
            goto LABEL_79;
          v3[2] = v18;
          ResolvedGradient.init(from:)((unint64_t)v3, (uint64_t)&v48);
          v19 = (_QWORD *)v3[5];
          if (!v19[2])
            goto LABEL_87;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
            v20 = v19[2];
            if (!v20)
              goto LABEL_89;
          }
          else
          {
            v19 = specialized _ArrayBuffer._consumeAndCreateNew()(v19);
            v20 = v19[2];
            if (!v20)
              goto LABEL_89;
          }
          v21 = v20 - 1;
          v22 = v19[v21 + 4];
          v19[2] = v21;
          v3[5] = v19;
          v3[2] = v22;
          v23 = v48;
          v5 = v49;
          result = swift_bridgeObjectRelease();
          v10 = v23;
LABEL_7:
          v8 = v3[1];
          v9 = v3[2];
          if (v8 >= v9)
            goto LABEL_78;
          continue;
        }
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
LABEL_92:
        __break(1u);
        __break(1u);
        v44 = specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)a2);
        v45 = v44[2];
        if (v45)
          goto LABEL_84;
        __break(1u);
        v44 = (_QWORD *)v3[5];
        if (!v44[2])
        {
          __break(1u);
LABEL_95:
          v44 = specialized _ArrayBuffer._consumeAndCreateNew()(v44);
          v45 = v44[2];
          if (v45)
            goto LABEL_84;
LABEL_96:
          __break(1u);
          JUMPOUT(0x234A73E1CLL);
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          goto LABEL_95;
        v45 = v44[2];
        if (!v45)
          goto LABEL_96;
LABEL_84:
        v46 = v45 - 1;
        v47 = v44[v46 + 4];
        v44[2] = v46;
        v3[5] = v44;
        v3[2] = v47;
        return swift_bridgeObjectRelease();
      case 2uLL:
        if ((result & 7) != 2)
          goto LABEL_79;
        v24 = (_QWORD *)v3[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
        v26 = v24[2];
        v25 = v24[3];
        if (v26 >= v25 >> 1)
          v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v26 + 1, 1, v24);
        v24[2] = v26 + 1;
        v24[v26 + 4] = v9;
        v3[5] = v24;
        v27 = ProtobufDecoder.decodeVarint()();
        if (v2)
          return swift_bridgeObjectRelease();
        if (v27 < 0)
          goto LABEL_86;
        v28 = v3[1] + v27;
        if (v9 < v28)
          goto LABEL_79;
        v3[2] = v28;
        v29 = specialized UnitPoint.init(from:)(v3);
        v31 = (_QWORD *)v3[5];
        if (!v31[2])
          goto LABEL_88;
        v6 = *(_QWORD *)&v29;
        v7 = v30;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) != 0)
        {
          v32 = v31[2];
          if (!v32)
            goto LABEL_77;
          goto LABEL_41;
        }
        result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v31);
        v31 = (_QWORD *)result;
        v32 = *(_QWORD *)(result + 16);
        if (v32)
        {
LABEL_41:
          v33 = v32 - 1;
          v34 = v31[v33 + 4];
          v31[2] = v33;
          v3[5] = v31;
          v3[2] = v34;
          goto LABEL_7;
        }
LABEL_77:
        __break(1u);
        goto LABEL_78;
      case 3uLL:
        v35 = result & 7;
        if (v35 == 5)
        {
          v39 = (float *)v3[1];
          if (v9 < (unint64_t)(v39 + 1))
            goto LABEL_79;
          v40 = *v39;
          v3[1] = v39 + 1;
          v11 = v40;
        }
        else
        {
          if (v35 == 2)
          {
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return swift_bridgeObjectRelease();
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_90;
            v36 = (double *)v3[1];
            if (v9 < (unint64_t)v36 + result)
              goto LABEL_79;
            v3[3] = 25;
            v3[4] = (char *)v36 + result;
          }
          else
          {
            if (v35 != 1)
              goto LABEL_79;
            v36 = (double *)v3[1];
          }
          if (v9 < (unint64_t)(v36 + 1))
            goto LABEL_79;
          v11 = *v36;
          v3[1] = v36 + 1;
        }
        goto LABEL_7;
      case 4uLL:
        v37 = result & 7;
        if (v37 == 5)
        {
          v41 = (float *)v3[1];
          if (v9 < (unint64_t)(v41 + 1))
            goto LABEL_79;
          v42 = *v41;
          v3[1] = v41 + 1;
          v12 = v42;
        }
        else
        {
          if (v37 == 2)
          {
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return swift_bridgeObjectRelease();
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_91;
            v38 = (double *)v3[1];
            if (v9 < (unint64_t)v38 + result)
              goto LABEL_79;
            v3[3] = 33;
            v3[4] = (char *)v38 + result;
          }
          else
          {
            if (v37 != 1)
              goto LABEL_79;
            v38 = (double *)v3[1];
          }
          if (v9 < (unint64_t)(v38 + 1))
            goto LABEL_79;
          v12 = *v38;
          v3[1] = v38 + 1;
        }
        goto LABEL_7;
      default:
        switch(result & 7)
        {
          case 0uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return swift_bridgeObjectRelease();
            goto LABEL_7;
          case 1uLL:
            v43 = v3[1] + 8;
            if (v9 < v43)
              goto LABEL_79;
            goto LABEL_73;
          case 2uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              return swift_bridgeObjectRelease();
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_92;
            v43 = v3[1] + result;
            if (v9 < v43)
              goto LABEL_79;
LABEL_73:
            v3[1] = v43;
            break;
          case 5uLL:
            v43 = v3[1] + 4;
            if (v9 >= v43)
              goto LABEL_73;
            goto LABEL_79;
          default:
            goto LABEL_79;
        }
        goto LABEL_7;
    }
  }
}

int64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance AngularGradient._Paint(uint64_t a1)
{
  return AngularGradient._Paint.encode(to:)(a1);
}

uint64_t ConicGradient.gradient.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t ConicGradient.gradient.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t result;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)v1 = v2;
  *(_BYTE *)(v1 + 8) = v3;
  return result;
}

uint64_t (*ConicGradient.gradient.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double ConicGradient.center.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void ConicGradient.center.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 16) = a1;
  *(double *)(v2 + 24) = a2;
}

uint64_t (*ConicGradient.center.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double ConicGradient.angle.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

void ConicGradient.angle.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 32) = a1;
}

uint64_t (*ConicGradient.angle.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void __swiftcall ConicGradient.init(gradient:center:angle:)(SwiftUI::ConicGradient *__return_ptr retstr, SwiftUI::ResolvedGradient gradient, CGPoint center, SwiftUI::Angle angle)
{
  SwiftUI::ResolvedGradient::ColorSpace v4;

  v4 = *((_BYTE *)gradient.stops._rawValue + 8);
  retstr->gradient.stops._rawValue = *(void **)gradient.stops._rawValue;
  retstr->gradient.colorSpace = v4;
  retstr->center.x = center.x;
  retstr->center.y = center.y;
  retstr->angle = angle;
}

Swift::Double ConicGradient.init(angular:bounds:)@<D0>(SwiftUI::ResolvedGradient a1@<0:X0, 8:W1.1>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  char v7;
  double v8;
  double v9;
  SwiftUI::Angle v10;
  SwiftUI::Angle v11;
  SwiftUI::ResolvedGradient::ColorSpace colorSpace;
  Swift::Double result;
  CGPoint center;
  uint64_t v15;
  char v16;
  SwiftUI::ConicGradient v17;

  v7 = *((_BYTE *)a1.stops._rawValue + 8);
  v8 = *((double *)a1.stops._rawValue + 2);
  v9 = *((double *)a1.stops._rawValue + 3);
  *(SwiftUI::Angle *)&v10.radians = (SwiftUI::Angle)*((_QWORD *)a1.stops._rawValue + 4);
  *(SwiftUI::Angle *)&v11.radians = (SwiftUI::Angle)*((_QWORD *)a1.stops._rawValue + 5);
  v15 = *(_QWORD *)a1.stops._rawValue;
  v16 = v7;
  a1.stops._rawValue = &v15;
  ConicGradient.init(gradient:center:startAngle:endAngle:)(&v17, a1, (CGPoint)__PAIR128__(v9 * a6 + a4, v8 * a5 + a3), v10, v11);
  colorSpace = v17.gradient.colorSpace;
  result = v17.angle.radians;
  center = v17.center;
  *(_QWORD *)a2 = v17.gradient.stops._rawValue;
  *(_BYTE *)(a2 + 8) = colorSpace;
  *(CGPoint *)(a2 + 16) = center;
  *(Swift::Double *)(a2 + 32) = result;
  return result;
}

void __swiftcall ConicGradient.init(gradient:center:startAngle:endAngle:)(SwiftUI::ConicGradient *__return_ptr retstr, SwiftUI::ResolvedGradient gradient, CGPoint center, SwiftUI::Angle startAngle, SwiftUI::Angle endAngle)
{
  double radians;
  CGFloat y;
  CGFloat x;
  double *v10;
  SwiftUI::ResolvedGradient::ColorSpace v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  double v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  double *v26;
  unint64_t v27;
  double v28;
  double v29;
  uint64_t v30;
  double v31;

  radians = startAngle.radians;
  y = center.y;
  x = center.x;
  v10 = *(double **)gradient.stops._rawValue;
  v11 = *((_BYTE *)gradient.stops._rawValue + 8);
  if (endAngle.radians < startAngle.radians)
  {
    v12 = endAngle.radians;
  }
  else
  {
    startAngle.radians = endAngle.radians;
    v12 = radians;
  }
  v13 = startAngle.radians - v12;
  v14 = 0.0;
  if (startAngle.radians - v12 < 0.0)
  {
LABEL_9:
    v18 = (6.28318531 - v14) * 0.5;
    v15 = v12 - v18;
    v17 = v18 / 6.28318531;
    v16 = (v14 + v18) / 6.28318531;
    if (endAngle.radians < radians)
      goto LABEL_12;
LABEL_10:
    if (fabs(v17) <= 0.000001 && fabs(v16 + -1.0) <= 0.000001)
      goto LABEL_29;
    goto LABEL_12;
  }
  if (v13 <= 6.28318531)
  {
    v14 = startAngle.radians - v12;
    goto LABEL_9;
  }
  v15 = startAngle.radians + -6.28318531;
  v16 = 1.0;
  v17 = v13 / -6.28318531 + 1.0;
  if (endAngle.radians >= radians)
    goto LABEL_10;
LABEL_12:
  v19 = *((_QWORD *)v10 + 2);
  if (v19)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_31;
    while (1)
    {
      v20 = v16 - v17;
      v21 = *((_QWORD *)v10 + 2);
      v22 = v19 - 1;
      if (v21 < v19 - 1)
        v22 = *((_QWORD *)v10 + 2);
      if (v22 >= 2)
      {
        v24 = v22 + 1;
        v25 = v24 & 1;
        if ((v24 & 1) == 0)
          v25 = 2;
        v23 = v24 - v25;
        v26 = v10 + 12;
        v27 = v23;
        do
        {
          v28 = *(v26 - 6);
          v29 = *v26;
          if (endAngle.radians < radians)
          {
            v28 = 1.0 - v28;
            v29 = 1.0 - *v26;
          }
          *(v26 - 6) = v17 + v20 * v28;
          *v26 = v17 + v20 * v29;
          v26 += 12;
          v27 -= 2;
        }
        while (v27);
      }
      else
      {
        v23 = 0;
      }
      v30 = 48 * v23 + 48;
      while (v23 < v21)
      {
        ++v23;
        v31 = *(double *)((char *)v10 + v30);
        if (endAngle.radians < radians)
          v31 = 1.0 - v31;
        *(double *)((char *)v10 + v30) = v17 + v20 * v31;
        v30 += 48;
        if (v19 == v23)
          goto LABEL_29;
      }
      __break(1u);
LABEL_31:
      v10 = (double *)specialized _ArrayBuffer._consumeAndCreateNew()(v10);
    }
  }
LABEL_29:
  retstr->gradient.stops._rawValue = v10;
  retstr->gradient.colorSpace = v11;
  retstr->center.x = x;
  retstr->center.y = y;
  retstr->angle.radians = v15;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI8GradientV4StopVG_AF08ResolvedF0VAIVs5NeverOTg503_s7d3UI8f16V7resolve2inAA08h31C0VAA17EnvironmentValuesV_tFAG4G10VAcJVXEfU_AF0pQ0VTf1cn_n(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI8GradientV4StopVG_AF08ResolvedF0VAIVs5NeverOTg503_s7d3UI8f16V7resolve2inAA08h31C0VAA17EnvironmentValuesV_tFAG4G10VAcJVXEfU_AF0pQ0VTf1cn_nTf4ng_n(a1, a2, a3);
  swift_release();
  swift_release();
  return v3;
}

void specialized ProtobufEncoder.messageField<A>(_:_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;

  v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD **)(v1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  v7 = v5[2];
  v6 = v5[3];
  if (v7 >= v6 >> 1)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 1, 1, v5);
  v5[2] = v7 + 1;
  v5[v7 + 4] = v4;
  *(_QWORD *)(v3 + 24) = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 8) = v4 + 1;
    FixedRoundedRect.encode(to:)(v3);
    if (!v2)
      ProtobufEncoder.endLengthDelimited()();
  }
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;

  v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD **)(v1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  v7 = v5[2];
  v6 = v5[3];
  if (v7 >= v6 >> 1)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 1, 1, v5);
  v5[2] = v7 + 1;
  v5[v7 + 4] = v4;
  *(_QWORD *)(v3 + 24) = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 8) = v4 + 1;
    AccessibilityText.encode(to:)();
    if (!v2)
      ProtobufEncoder.endLengthDelimited()();
  }
}

{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;

  v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  v4 = v1[1];
  v5 = (_QWORD *)v1[3];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  v7 = v5[2];
  v6 = v5[3];
  if (v7 >= v6 >> 1)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 1, 1, v5);
  v5[2] = v7 + 1;
  v5[v7 + 4] = v4;
  v3[3] = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    v3[1] = v4 + 1;
    TextLayoutProperties.encode(to:)(v3);
    if (!v2)
      ProtobufEncoder.endLengthDelimited()();
  }
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;

  v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD **)(v1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  v7 = v5[2];
  v6 = v5[3];
  if (v7 >= v6 >> 1)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 1, 1, v5);
  v5[2] = v7 + 1;
  v5[v7 + 4] = v4;
  *(_QWORD *)(v3 + 24) = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 8) = v4 + 1;
    ResolvedShadowStyle.encode(to:)(v3);
    if (!v2)
      ProtobufEncoder.endLengthDelimited()();
  }
}

{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;

  v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  v4 = v1[1];
  v5 = (_QWORD *)v1[3];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  v7 = v5[2];
  v6 = v5[3];
  if (v7 >= v6 >> 1)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 1, 1, v5);
  v5[2] = v7 + 1;
  v5[v7 + 4] = v4;
  v3[3] = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    v3[1] = v4 + 1;
    MeshGradient._Paint.encode(to:)(v3);
    if (!v2)
      ProtobufEncoder.endLengthDelimited()();
  }
}

{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;

  v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  v4 = v1[1];
  v5 = (_QWORD *)v1[3];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  v7 = v5[2];
  v6 = v5[3];
  if (v7 >= v6 >> 1)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 1, 1, v5);
  v5[2] = v7 + 1;
  v5[v7 + 4] = v4;
  v3[3] = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    v3[1] = v4 + 1;
    ResolvedGradient.encode(to:)(v3);
    if (!v2)
      ProtobufEncoder.endLengthDelimited()();
  }
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;

  v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD **)(v1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  v7 = v5[2];
  v6 = v5[3];
  if (v7 >= v6 >> 1)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 1, 1, v5);
  v5[2] = v7 + 1;
  v5[v7 + 4] = v4;
  *(_QWORD *)(v3 + 24) = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 8) = v4 + 1;
    GraphicsImage.encode(to:)(v3);
    if (!v2)
      ProtobufEncoder.endLengthDelimited()();
  }
}

{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;

  v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  v4 = v1[1];
  v5 = (_QWORD *)v1[3];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  v7 = v5[2];
  v6 = v5[3];
  if (v7 >= v6 >> 1)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 1, 1, v5);
  v5[2] = v7 + 1;
  v5[v7 + 4] = v4;
  v3[3] = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    v3[1] = v4 + 1;
    ContentTransition.CustomTransition.encode(to:)(v3);
    if (!v2)
      ProtobufEncoder.endLengthDelimited()();
  }
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;

  v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD **)(v1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  v7 = v5[2];
  v6 = v5[3];
  if (v7 >= v6 >> 1)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 1, 1, v5);
  v5[2] = v7 + 1;
  v5[v7 + 4] = v4;
  *(_QWORD *)(v3 + 24) = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 8) = v4 + 1;
    ContentTransition.NamedTransition.encode(to:)(v3);
    if (!v2)
      ProtobufEncoder.endLengthDelimited()();
  }
}

{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  v3 = v1[1];
  v4 = (_QWORD *)v1[3];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
  v6 = v4[2];
  v5 = v4[3];
  if (v6 >= v5 >> 1)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v5 > 1), v6 + 1, 1, v4);
  v4[2] = v6 + 1;
  v4[v6 + 4] = v3;
  v2[3] = v4;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v2[1] = v3 + 1;
    ContentTransition.NumericTextConfiguration.encode(to:)(v2);
    if (!v7)
      ProtobufEncoder.endLengthDelimited()();
  }
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;

  v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD **)(v1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  v7 = v5[2];
  v6 = v5[3];
  if (v7 >= v6 >> 1)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 1, 1, v5);
  v5[2] = v7 + 1;
  v5[v7 + 4] = v4;
  *(_QWORD *)(v3 + 24) = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 8) = v4 + 1;
    GraphicsFilter.ShaderFilter.encode(to:)(v3);
    if (!v2)
      ProtobufEncoder.endLengthDelimited()();
  }
}

{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;

  v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  v4 = v1[1];
  v5 = (_QWORD *)v1[3];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  v7 = v5[2];
  v6 = v5[3];
  if (v7 >= v6 >> 1)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 1, 1, v5);
  v5[2] = v7 + 1;
  v5[v7 + 4] = v4;
  v3[3] = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    v3[1] = v4 + 1;
    VariableBlurStyle.encode(to:)(v3);
    if (!v2)
      ProtobufEncoder.endLengthDelimited()();
  }
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;

  v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD **)(v1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  v7 = v5[2];
  v6 = v5[3];
  if (v7 >= v6 >> 1)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 1, 1, v5);
  v5[2] = v7 + 1;
  v5[v7 + 4] = v4;
  *(_QWORD *)(v3 + 24) = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 8) = v4 + 1;
    Shader.ResolvedShader.encode(to:)(v3);
    if (!v2)
      ProtobufEncoder.endLengthDelimited()();
  }
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;

  v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD **)(v1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  v7 = v5[2];
  v6 = v5[3];
  if (v7 >= v6 >> 1)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 1, 1, v5);
  v5[2] = v7 + 1;
  v5[v7 + 4] = v4;
  *(_QWORD *)(v3 + 24) = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 8) = v4 + 1;
    _SymbolEffect.Storage.encode(to:)();
    if (!v2)
      ProtobufEncoder.endLengthDelimited()();
  }
}

{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;

  v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  v4 = v1[1];
  v5 = (_QWORD *)v1[3];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  v7 = v5[2];
  v6 = v5[3];
  if (v7 >= v6 >> 1)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 1, 1, v5);
  v5[2] = v7 + 1;
  v5[v7 + 4] = v4;
  v3[3] = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    v3[1] = v4 + 1;
    _SymbolEffect.WiggleConfiguration.encode(to:)(v3);
    if (!v2)
      ProtobufEncoder.endLengthDelimited()();
  }
}

{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;

  v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  v4 = v1[1];
  v5 = (_QWORD *)v1[3];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  v7 = v5[2];
  v6 = v5[3];
  if (v7 >= v6 >> 1)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 1, 1, v5);
  v5[2] = v7 + 1;
  v5[v7 + 4] = v4;
  v3[3] = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    v3[1] = v4 + 1;
    BackdropEffect.encode(to:)(v3);
    if (!v2)
      ProtobufEncoder.endLengthDelimited()();
  }
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;

  v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD **)(v1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  v7 = v5[2];
  v6 = v5[3];
  if (v7 >= v6 >> 1)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 1, 1, v5);
  v5[2] = v7 + 1;
  v5[v7 + 4] = v4;
  *(_QWORD *)(v3 + 24) = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 8) = v4 + 1;
    ContentTransition.State.encode(to:)(v3);
    if (!v2)
      ProtobufEncoder.endLengthDelimited()();
  }
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;

  v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD **)(v1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  v7 = v5[2];
  v6 = v5[3];
  if (v7 >= v6 >> 1)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 1, 1, v5);
  v5[2] = v7 + 1;
  v5[v7 + 4] = v4;
  *(_QWORD *)(v3 + 24) = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 8) = v4 + 1;
    DisplayList.Effect.encode(to:)();
    if (!v2)
      ProtobufEncoder.endLengthDelimited()();
  }
}

uint64_t specialized ProtobufEncoder.messageField<A>(_:_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;

  v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD **)(v1 + 24);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    v5 = (_QWORD *)result;
  }
  v8 = v5[2];
  v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v7 > 1), v8 + 1, 1, v5);
    v5 = (_QWORD *)result;
  }
  v5[2] = v8 + 1;
  v5[v8 + 4] = v4;
  *(_QWORD *)(v3 + 24) = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 8) = v4 + 1;
    result = AccessibilityActivationPoint.Location.encode(to:)(v3);
    if (!v2)
      return ProtobufEncoder.endLengthDelimited()();
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;

  v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD **)(v1 + 24);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    v5 = (_QWORD *)result;
  }
  v8 = v5[2];
  v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v7 > 1), v8 + 1, 1, v5);
    v5 = (_QWORD *)result;
  }
  v5[2] = v8 + 1;
  v5[v8 + 4] = v4;
  *(_QWORD *)(v3 + 24) = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 8) = v4 + 1;
    result = ContentTransition.Style.encode(to:)(v3);
    if (!v2)
      return ProtobufEncoder.endLengthDelimited()();
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;

  v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  v4 = v1[1];
  v5 = (_QWORD *)v1[3];
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    v5 = (_QWORD *)result;
  }
  v8 = v5[2];
  v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v7 > 1), v8 + 1, 1, v5);
    v5 = (_QWORD *)result;
  }
  v5[2] = v8 + 1;
  v5[v8 + 4] = v4;
  v3[3] = (uint64_t)v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    v3[1] = v4 + 1;
    result = CodableRBDisplayListContents.encode(to:)(v3);
    if (!v2)
      return ProtobufEncoder.endLengthDelimited()();
  }
  return result;
}

{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;

  v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  v4 = v1[1];
  v5 = (_QWORD *)v1[3];
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    v5 = (_QWORD *)result;
  }
  v8 = v5[2];
  v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v7 > 1), v8 + 1, 1, v5);
    v5 = (_QWORD *)result;
  }
  v5[2] = v8 + 1;
  v5[v8 + 4] = v4;
  v3[3] = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    v3[1] = v4 + 1;
    result = GraphicsFilter.ColorCurves.encode(to:)(v3);
    if (!v2)
      return ProtobufEncoder.endLengthDelimited()();
  }
  return result;
}

{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;

  v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  v4 = v1[1];
  v5 = (_QWORD *)v1[3];
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    v5 = (_QWORD *)result;
  }
  v8 = v5[2];
  v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v7 > 1), v8 + 1, 1, v5);
    v5 = (_QWORD *)result;
  }
  v5[2] = v8 + 1;
  v5[v8 + 4] = v4;
  v3[3] = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    v3[1] = v4 + 1;
    result = (uint64_t)GraphicsFilter.LuminanceCurve.encode(to:)(v3);
    if (!v2)
      return ProtobufEncoder.endLengthDelimited()();
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;

  v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD **)(v1 + 24);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    v5 = (_QWORD *)result;
  }
  v8 = v5[2];
  v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v7 > 1), v8 + 1, 1, v5);
    v5 = (_QWORD *)result;
  }
  v5[2] = v8 + 1;
  v5[v8 + 4] = v4;
  *(_QWORD *)(v3 + 24) = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 8) = v4 + 1;
    result = MeshGradient.Locations.encode(to:)(v3);
    if (!v2)
      return ProtobufEncoder.endLengthDelimited()();
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;

  v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD **)(v1 + 24);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    v5 = (_QWORD *)result;
  }
  v8 = v5[2];
  v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v7 > 1), v8 + 1, 1, v5);
    v5 = (_QWORD *)result;
  }
  v5[2] = v8 + 1;
  v5[v8 + 4] = v4;
  *(_QWORD *)(v3 + 24) = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 8) = v4 + 1;
    result = DisplayList.InterpolatorAnimation.encode(to:)(v3);
    if (!v2)
      return ProtobufEncoder.endLengthDelimited()();
  }
  return result;
}

{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;

  v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  v4 = v1[1];
  v5 = (_QWORD *)v1[3];
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    v5 = (_QWORD *)result;
  }
  v8 = v5[2];
  v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v7 > 1), v8 + 1, 1, v5);
    v5 = (_QWORD *)result;
  }
  v5[2] = v8 + 1;
  v5[v8 + 4] = v4;
  v3[3] = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    v3[1] = v4 + 1;
    result = (uint64_t)_Rotation3DEffect.Data.encode(to:)(v3);
    if (!v2)
      return ProtobufEncoder.endLengthDelimited()();
  }
  return result;
}

{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;

  v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  v4 = v1[1];
  v5 = (_QWORD *)v1[3];
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    v5 = (_QWORD *)result;
  }
  v8 = v5[2];
  v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v7 > 1), v8 + 1, 1, v5);
    v5 = (_QWORD *)result;
  }
  v5[2] = v8 + 1;
  v5[v8 + 4] = v4;
  v3[3] = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    v3[1] = v4 + 1;
    result = DisplayList.encode(to:)(v3);
    if (!v2)
      return ProtobufEncoder.endLengthDelimited()();
  }
  return result;
}

void specialized ProtobufEncoder.messageField<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;

  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  v7 = *(_QWORD *)(v3 + 8);
  v8 = *(_QWORD **)(v3 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
  v10 = v8[2];
  v9 = v8[3];
  if (v10 >= v9 >> 1)
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v8);
  v8[2] = v10 + 1;
  v8[v10 + 4] = v7;
  *(_QWORD *)(v3 + 24) = v8;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    return;
  }
  *(_QWORD *)(v3 + 8) = v7 + 1;
  if (BYTE5(a3))
  {
    if (BYTE5(a3) == 1)
    {
      swift_bridgeObjectRetain();
      specialized ProtobufEncoder.messageField<A>(_:_:)(2);
      outlined consume of ContentTransition.Storage(a2, a3, 1);
      if (v4)
        return;
    }
    else
    {
      ProtobufEncoder.encodeVarint(_:)(0x22uLL);
      specialized ProtobufEncoder.encodeMessage<A>(_:)(a2 & 0x1FFFFFFFFLL, *(float *)&a3);
      if (v4)
        return;
    }
  }
  else
  {
    specialized ProtobufEncoder.messageField<A>(_:_:)(1);
    if (v4)
      return;
  }
  if ((a3 & 0x1000000000000) != 0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x18uLL);
    ProtobufEncoder.encodeVarint(_:)(1uLL);
  }
  ProtobufEncoder.endLengthDelimited()();
}

uint64_t specialized ProtobufEncoder.messageField<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized ProtobufEncoder.messageField<A>(_:_:)(a1, a2, CodableAttributedString.encode(to:));
}

{
  return specialized ProtobufEncoder.messageField<A>(_:_:)(a1, a2, (uint64_t (*)(uint64_t))CodablePlatformImage.encode(to:));
}

{
  return specialized ProtobufEncoder.messageField<A>(_:_:)(a1, a2, (uint64_t (*)(uint64_t))_SymbolEffect.Trigger.encode(to:));
}

{
  return specialized ProtobufEncoder.messageField<A>(_:_:)(a1, a2, (uint64_t (*)(uint64_t))DisplayList.Content.Value.encode(to:));
}

{
  return specialized ProtobufEncoder.messageField<A>(_:_:)(a1, a2, Image.Location.encode(to:));
}

uint64_t specialized ProtobufEncoder.messageField<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;

  v6 = v3;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  v7 = *(_QWORD *)(v3 + 8);
  v8 = *(_QWORD **)(v3 + 24);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    v8 = (_QWORD *)result;
  }
  v11 = v8[2];
  v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
    v8 = (_QWORD *)result;
  }
  v8[2] = v11 + 1;
  v8[v11 + 4] = v7;
  *(_QWORD *)(v6 + 24) = v8;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v6 + 8) = v7 + 1;
    result = a3(v6);
    if (!v4)
      return ProtobufEncoder.endLengthDelimited()();
  }
  return result;
}

uint64_t specialized ProtobufEncoder.messageField<A>(_:_:)(uint64_t a1, float *a2)
{
  _QWORD *v2;
  uint64_t v3;
  float v4;
  uint64_t v6;
  _QWORD *v7;
  int64_t isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  unint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  uint64_t result;
  uint64_t v16;
  float *v17;
  float v18;
  uint64_t v19;
  int64_t v20;
  float *v21;

  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  v6 = v2[1];
  v7 = (_QWORD *)v2[3];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
    v7 = (_QWORD *)isUniquelyReferenced_nonNull_native;
  }
  v10 = v7[2];
  v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v7);
    v7 = (_QWORD *)isUniquelyReferenced_nonNull_native;
  }
  v7[2] = v10 + 1;
  v7[v10 + 4] = v6;
  v2[3] = v7;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_20;
  }
  v2[1] = v6 + 1;
  v11 = *a2;
  v12 = a2[1];
  v13 = a2[2];
  v14 = a2[3];
  ProtobufEncoder.encodeVarint(_:)(0xAuLL);
  result = specialized ProtobufEncoder.encodeMessage<A>(_:)(v11, v12, v13, v14);
  if (v3)
    return result;
  v4 = a2[4];
  if (v4 != 1.0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x15uLL);
    v16 = v2[1];
    isUniquelyReferenced_nonNull_native = v16 + 4;
    if (!__OFADD__(v16, 4))
    {
      if (v2[2] >= isUniquelyReferenced_nonNull_native)
      {
        v2[1] = isUniquelyReferenced_nonNull_native;
        v17 = (float *)(*v2 + v16);
LABEL_11:
        *v17 = v4;
        goto LABEL_12;
      }
LABEL_21:
      v17 = (float *)ProtobufEncoder.growBufferSlow(to:)(isUniquelyReferenced_nonNull_native);
      goto LABEL_11;
    }
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_12:
  v18 = a2[5];
  if (v18 != 0.0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x1DuLL);
    v19 = v2[1];
    v20 = v19 + 4;
    if (__OFADD__(v19, 4))
    {
      __break(1u);
    }
    else if (v2[2] >= v20)
    {
      v2[1] = v20;
      v21 = (float *)(*v2 + v19);
LABEL_16:
      *v21 = v18;
      return ProtobufEncoder.endLengthDelimited()();
    }
    v21 = (float *)ProtobufEncoder.growBufferSlow(to:)(v20);
    goto LABEL_16;
  }
  return ProtobufEncoder.endLengthDelimited()();
}

void specialized ProtobufEncoder.messageField<A>(_:_:)(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  _BYTE v10[120];

  v4 = v2;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  outlined init with take of GraphicsFilter(a2, (uint64_t)v10);
  v6 = *(_QWORD *)(v2 + 8);
  v7 = *(_QWORD **)(v2 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
  v9 = v7[2];
  v8 = v7[3];
  if (v9 >= v8 >> 1)
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, v7);
  v7[2] = v9 + 1;
  v7[v9 + 4] = v6;
  *(_QWORD *)(v4 + 24) = v7;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v4 + 8) = v6 + 1;
    GraphicsFilter.encode(to:)();
    if (!v3)
      ProtobufEncoder.endLengthDelimited()();
  }
}

uint64_t specialized ProtobufEncoder.messageField<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;

  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  v7 = *(_QWORD *)(v3 + 8);
  v8 = *(_QWORD **)(v3 + 24);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    v8 = (_QWORD *)result;
  }
  v11 = v8[2];
  v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
    v8 = (_QWORD *)result;
  }
  v8[2] = v11 + 1;
  v8[v11 + 4] = v7;
  *(_QWORD *)(v3 + 24) = v8;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 8) = v7 + 1;
    if ((~a2 & 0xF000000000000006) == 0
      || (outlined copy of _SymbolEffect.Trigger(a2),
          specialized ProtobufEncoder.messageField<A>(_:_:)(1, a2, (uint64_t (*)(uint64_t))_SymbolEffect.Trigger.encode(to:)), result = outlined consume of _SymbolEffect.Trigger?(a2), !v4))
    {
      if ((_DWORD)a3)
      {
        ProtobufEncoder.encodeVarint(_:)(0x10uLL);
        ProtobufEncoder.encodeVarint(_:)(a3);
      }
      if ((a3 & 0x100000000) == 0)
      {
        ProtobufEncoder.encodeVarint(_:)(0x18uLL);
        ProtobufEncoder.encodeVarint(_:)(0);
      }
      return ProtobufEncoder.endLengthDelimited()();
    }
  }
  return result;
}

{
  return specialized ProtobufEncoder.messageField<A>(_:_:)(a1, a2, a3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;

  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  v7 = *(_QWORD *)(v3 + 8);
  v8 = *(_QWORD **)(v3 + 24);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    v8 = (_QWORD *)result;
  }
  v11 = v8[2];
  v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
    v8 = (_QWORD *)result;
  }
  v8[2] = v11 + 1;
  v8[v11 + 4] = v7;
  *(_QWORD *)(v3 + 24) = v8;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 8) = v7 + 1;
    if ((~a2 & 0xF000000000000006) == 0
      || (outlined copy of _SymbolEffect.Trigger(a2),
          specialized ProtobufEncoder.messageField<A>(_:_:)(4, a2, (uint64_t (*)(uint64_t))_SymbolEffect.Trigger.encode(to:)), result = outlined consume of _SymbolEffect.Trigger?(a2), !v4))
    {
      if ((_DWORD)a3)
      {
        ProtobufEncoder.encodeVarint(_:)(0x10uLL);
        ProtobufEncoder.encodeVarint(_:)(a3);
      }
      if ((a3 & 0x100000000) == 0)
      {
        ProtobufEncoder.encodeVarint(_:)(0x18uLL);
        ProtobufEncoder.encodeVarint(_:)(0);
      }
      return ProtobufEncoder.endLengthDelimited()();
    }
  }
  return result;
}

uint64_t specialized ProtobufEncoder.messageField<A>(_:_:)(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;

  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  v7 = *(_QWORD *)(v3 + 8);
  v8 = *(_QWORD **)(v3 + 24);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    v8 = (_QWORD *)result;
  }
  v11 = v8[2];
  v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
    v8 = (_QWORD *)result;
  }
  v8[2] = v11 + 1;
  v8[v11 + 4] = v7;
  *(_QWORD *)(v3 + 24) = v8;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 8) = v7 + 1;
    if ((~a2 & 0xF000000000000006) == 0
      || (outlined copy of _SymbolEffect.Trigger(a2),
          specialized ProtobufEncoder.messageField<A>(_:_:)(3, a2, (uint64_t (*)(uint64_t))_SymbolEffect.Trigger.encode(to:)), result = outlined consume of _SymbolEffect.Trigger?(a2), !v4))
    {
      if (a3)
      {
        ProtobufEncoder.encodeVarint(_:)(0x10uLL);
        ProtobufEncoder.encodeVarint(_:)(a3);
      }
      return ProtobufEncoder.endLengthDelimited()();
    }
  }
  return result;
}

uint64_t specialized ProtobufEncoder.messageField<A>(_:_:)(uint64_t a1, double a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;
  int64_t isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;

  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  v4 = v2[1];
  v5 = (_QWORD *)v2[3];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    v5 = (_QWORD *)isUniquelyReferenced_nonNull_native;
  }
  v8 = v5[2];
  v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v7 > 1), v8 + 1, 1, v5);
    v5 = (_QWORD *)isUniquelyReferenced_nonNull_native;
  }
  v5[2] = v8 + 1;
  v5[v8 + 4] = v4;
  v2[3] = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_13;
  }
  v2[1] = v4 + 1;
  *(float *)&a2 = a2;
  if (*(float *)&a2 != 1.0)
  {
    ProtobufEncoder.encodeVarint(_:)(0xDuLL);
    v9 = v2[1];
    isUniquelyReferenced_nonNull_native = v9 + 4;
    if (!__OFADD__(v9, 4))
    {
      if (v2[2] >= isUniquelyReferenced_nonNull_native)
      {
        v2[1] = isUniquelyReferenced_nonNull_native;
        v10 = (_DWORD *)(*v2 + v9);
LABEL_10:
        *v10 = LODWORD(a2);
        return ProtobufEncoder.endLengthDelimited()();
      }
LABEL_14:
      v10 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(isUniquelyReferenced_nonNull_native);
      goto LABEL_10;
    }
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  return ProtobufEncoder.endLengthDelimited()();
}

BOOL specialized static LinearGradient._Paint.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2;
  double v3;
  double v4;
  double v5;
  double v6;
  int v7;
  double v8;
  double v9;
  double v10;
  double v11;
  char v12;
  _BOOL8 result;

  v2 = *(unsigned __int8 *)(a1 + 8);
  v3 = *(double *)(a1 + 16);
  v4 = *(double *)(a1 + 24);
  v6 = *(double *)(a1 + 32);
  v5 = *(double *)(a1 + 40);
  v7 = *(unsigned __int8 *)(a2 + 8);
  v8 = *(double *)(a2 + 16);
  v9 = *(double *)(a2 + 24);
  v11 = *(double *)(a2 + 32);
  v10 = *(double *)(a2 + 40);
  v12 = specialized static Array<A>.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)a2);
  result = 0;
  if ((v12 & 1) != 0 && v2 == v7 && v3 == v8 && v4 == v9)
    return v5 == v10 && v6 == v11;
  return result;
}

BOOL specialized static RadialGradient._Paint.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2;
  double v3;
  double v4;
  double v5;
  double v6;
  int v7;
  double v8;
  double v9;
  double v10;
  double v11;
  char v12;
  _BOOL8 result;

  v2 = *(unsigned __int8 *)(a1 + 8);
  v3 = *(double *)(a1 + 16);
  v4 = *(double *)(a1 + 24);
  v6 = *(double *)(a1 + 32);
  v5 = *(double *)(a1 + 40);
  v7 = *(unsigned __int8 *)(a2 + 8);
  v8 = *(double *)(a2 + 16);
  v9 = *(double *)(a2 + 24);
  v11 = *(double *)(a2 + 32);
  v10 = *(double *)(a2 + 40);
  v12 = specialized static Array<A>.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)a2);
  result = 0;
  if ((v12 & 1) != 0 && v2 == v7 && v3 == v8 && v4 == v9 && v6 == v11)
    return v5 == v10;
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI8GradientV4StopVG_AF08ResolvedF0VAIVs5NeverOTg503_s7d3UI8f16V7resolve2inAA08h31C0VAA17EnvironmentValuesV_tFAG4G10VAcJVXEfU_AF0pQ0VTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3;
  uint64_t v4;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  float (*v11)(_QWORD *);
  float v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v23[2];
  uint64_t v24;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v24 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    v4 = v24;
    v8 = (uint64_t *)(a1 + 40);
    do
    {
      v9 = *(v8 - 1);
      v10 = *v8;
      v23[0] = a2;
      v23[1] = a3;
      v11 = *(float (**)(_QWORD *))(*(_QWORD *)v9 + 104);
      swift_retain();
      v12 = v11(v23);
      v14 = v13;
      v16 = v15;
      v18 = v17;
      swift_release();
      v24 = v4;
      v20 = *(_QWORD *)(v4 + 16);
      v19 = *(_QWORD *)(v4 + 24);
      if (v20 >= v19 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
        v4 = v24;
      }
      *(_QWORD *)(v4 + 16) = v20 + 1;
      v21 = v4 + 48 * v20;
      *(float *)(v21 + 32) = v12;
      *(_DWORD *)(v21 + 36) = v14;
      *(_DWORD *)(v21 + 40) = v16;
      *(_DWORD *)(v21 + 44) = v18;
      *(_QWORD *)(v21 + 48) = v10;
      *(_QWORD *)(v21 + 56) = 0;
      *(_QWORD *)(v21 + 64) = 0;
      *(_BYTE *)(v21 + 72) = 1;
      v8 += 2;
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t outlined init with take of CGRect?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for CGRect?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for CGRect?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CGRect?)
  {
    type metadata accessor for CGRect(255);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CGRect?);
  }
}

uint64_t _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi4_(uint64_t result)
{
  *(_QWORD *)(result + 96) = *(_QWORD *)(result + 96) & 0xFF0301FFLL | 0x5000000000000000;
  return result;
}

uint64_t outlined init with take of GraphicsContext.ResolvedShading(uint64_t a1, uint64_t a2)
{
  __swift_memcpy160_8(a2, a1);
  return a2;
}

uint64_t outlined retain of LinearGradient(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of LinearGradient(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t instantiation function for generic protocol witness table for LinearGradient._Paint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for LinearGradient._Paint(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type LinearGradient._Paint and conformance LinearGradient._Paint, (uint64_t (*)(void))lazy protocol witness table accessor for type LinearGradient._Paint and conformance LinearGradient._Paint);
}

unint64_t lazy protocol witness table accessor for type LinearGradient._Paint and conformance LinearGradient._Paint()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LinearGradient._Paint and conformance LinearGradient._Paint;
  if (!lazy protocol witness table cache variable for type LinearGradient._Paint and conformance LinearGradient._Paint)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LinearGradient._Paint, &type metadata for LinearGradient._Paint);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinearGradient._Paint and conformance LinearGradient._Paint);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LinearGradient._Paint and conformance LinearGradient._Paint;
  if (!lazy protocol witness table cache variable for type LinearGradient._Paint and conformance LinearGradient._Paint)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LinearGradient._Paint, &type metadata for LinearGradient._Paint);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinearGradient._Paint and conformance LinearGradient._Paint);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LinearGradient._Paint and conformance LinearGradient._Paint;
  if (!lazy protocol witness table cache variable for type LinearGradient._Paint and conformance LinearGradient._Paint)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LinearGradient._Paint, &type metadata for LinearGradient._Paint);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinearGradient._Paint and conformance LinearGradient._Paint);
  }
  return result;
}

uint64_t associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in LinearGradient._Paint()
{
  return lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector> and conformance AnimatablePair<A, B>((unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector> and conformance AnimatablePair<A, B>, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, (void (*)(void))lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>);
}

uint64_t _s7SwiftUI14AnimatablePairVyS2dGACyxq_GAA16VectorArithmeticAAWlTm_0(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = a2(255);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatablePair<A, B>, v4);
    atomic_store(result, a1);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for ShapeStyle.Resolved : ShapeStyle in LinearGradient()
{
  return &protocol witness table for Never;
}

_UNKNOWN **associated type witness table accessor for View.Body : View in LinearGradient()
{
  return &protocol witness table for _ShapeView<A, B>;
}

uint64_t instantiation function for generic protocol witness table for RadialGradient._Paint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for LinearGradient._Paint(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type RadialGradient._Paint and conformance RadialGradient._Paint, (uint64_t (*)(void))lazy protocol witness table accessor for type RadialGradient._Paint and conformance RadialGradient._Paint);
}

unint64_t lazy protocol witness table accessor for type RadialGradient._Paint and conformance RadialGradient._Paint()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RadialGradient._Paint and conformance RadialGradient._Paint;
  if (!lazy protocol witness table cache variable for type RadialGradient._Paint and conformance RadialGradient._Paint)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for RadialGradient._Paint, &type metadata for RadialGradient._Paint);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RadialGradient._Paint and conformance RadialGradient._Paint);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RadialGradient._Paint and conformance RadialGradient._Paint;
  if (!lazy protocol witness table cache variable for type RadialGradient._Paint and conformance RadialGradient._Paint)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for RadialGradient._Paint, &type metadata for RadialGradient._Paint);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RadialGradient._Paint and conformance RadialGradient._Paint);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RadialGradient._Paint and conformance RadialGradient._Paint;
  if (!lazy protocol witness table cache variable for type RadialGradient._Paint and conformance RadialGradient._Paint)
  {
    result = MEMORY[0x23B7C9C04]("=q=\x1B", &type metadata for RadialGradient._Paint);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RadialGradient._Paint and conformance RadialGradient._Paint);
  }
  return result;
}

uint64_t associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in RadialGradient._Paint()
{
  return _s7SwiftUI14AnimatablePairVyS2dGACyxq_GAA16VectorArithmeticAAWlTm_0(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>);
}

uint64_t type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    a3(255);
    a4();
    lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector();
    type metadata accessor for AnimatablePair();
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector> and conformance AnimatablePair<A, B>(unint64_t *a1, uint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>(255, a2, a3, a4);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatablePair<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for EllipticalGradient._Paint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for LinearGradient._Paint(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type EllipticalGradient._Paint and conformance EllipticalGradient._Paint, (uint64_t (*)(void))lazy protocol witness table accessor for type EllipticalGradient._Paint and conformance EllipticalGradient._Paint);
}

unint64_t lazy protocol witness table accessor for type EllipticalGradient._Paint and conformance EllipticalGradient._Paint()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EllipticalGradient._Paint and conformance EllipticalGradient._Paint;
  if (!lazy protocol witness table cache variable for type EllipticalGradient._Paint and conformance EllipticalGradient._Paint)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EllipticalGradient._Paint, &type metadata for EllipticalGradient._Paint);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EllipticalGradient._Paint and conformance EllipticalGradient._Paint);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EllipticalGradient._Paint and conformance EllipticalGradient._Paint;
  if (!lazy protocol witness table cache variable for type EllipticalGradient._Paint and conformance EllipticalGradient._Paint)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EllipticalGradient._Paint, &type metadata for EllipticalGradient._Paint);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EllipticalGradient._Paint and conformance EllipticalGradient._Paint);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EllipticalGradient._Paint and conformance EllipticalGradient._Paint;
  if (!lazy protocol witness table cache variable for type EllipticalGradient._Paint and conformance EllipticalGradient._Paint)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EllipticalGradient._Paint, &type metadata for EllipticalGradient._Paint);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EllipticalGradient._Paint and conformance EllipticalGradient._Paint);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for AngularGradient._Paint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for LinearGradient._Paint(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AngularGradient._Paint and conformance AngularGradient._Paint, (uint64_t (*)(void))lazy protocol witness table accessor for type AngularGradient._Paint and conformance AngularGradient._Paint);
}

uint64_t instantiation function for generic protocol witness table for LinearGradient._Paint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = a4();
  result = a5();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AngularGradient._Paint and conformance AngularGradient._Paint()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AngularGradient._Paint and conformance AngularGradient._Paint;
  if (!lazy protocol witness table cache variable for type AngularGradient._Paint and conformance AngularGradient._Paint)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AngularGradient._Paint, &type metadata for AngularGradient._Paint);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AngularGradient._Paint and conformance AngularGradient._Paint);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AngularGradient._Paint and conformance AngularGradient._Paint;
  if (!lazy protocol witness table cache variable for type AngularGradient._Paint and conformance AngularGradient._Paint)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AngularGradient._Paint, &type metadata for AngularGradient._Paint);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AngularGradient._Paint and conformance AngularGradient._Paint);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AngularGradient._Paint and conformance AngularGradient._Paint;
  if (!lazy protocol witness table cache variable for type AngularGradient._Paint and conformance AngularGradient._Paint)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AngularGradient._Paint, &type metadata for AngularGradient._Paint);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AngularGradient._Paint and conformance AngularGradient._Paint);
  }
  return result;
}

uint64_t associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in AngularGradient._Paint()
{
  return _s7SwiftUI14AnimatablePairVyS2dGACyxq_GAA16VectorArithmeticAAWlTm_0(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>);
}

double sub_234A771AC@<D0>(uint64_t a1@<X8>)
{
  return key path getter for RadialGradient._Paint.animatableData : RadialGradient._Paint((void (*)(__int128 *__return_ptr))RadialGradient._Paint.animatableData.getter, a1);
}

uint64_t sub_234A771C8(uint64_t a1, uint64_t a2)
{
  return key path setter for RadialGradient._Paint.animatableData : RadialGradient._Paint(a1, a2);
}

double sub_234A771DC@<D0>(uint64_t a1@<X8>)
{
  return key path getter for RadialGradient._Paint.animatableData : RadialGradient._Paint((void (*)(__int128 *__return_ptr))EllipticalGradient._Paint.animatableData.getter, a1);
}

uint64_t sub_234A771F8(uint64_t a1, uint64_t a2)
{
  return key path setter for RadialGradient._Paint.animatableData : RadialGradient._Paint(a1, a2);
}

uint64_t initializeWithCopy for LinearGradient(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for LinearGradient()
{
  return &type metadata for LinearGradient;
}

uint64_t initializeWithCopy for LinearGradient._Paint(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

ValueMetadata *type metadata accessor for LinearGradient._Paint()
{
  return &type metadata for LinearGradient._Paint;
}

ValueMetadata *type metadata accessor for RadialGradient()
{
  return &type metadata for RadialGradient;
}

ValueMetadata *type metadata accessor for RadialGradient._Paint()
{
  return &type metadata for RadialGradient._Paint;
}

ValueMetadata *type metadata accessor for EllipticalGradient()
{
  return &type metadata for EllipticalGradient;
}

ValueMetadata *type metadata accessor for EllipticalGradient._Paint()
{
  return &type metadata for EllipticalGradient._Paint;
}

_QWORD *assignWithCopy for LinearGradient(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1;
}

uint64_t assignWithTake for LinearGradient(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for AngularGradient()
{
  return &type metadata for AngularGradient;
}

uint64_t assignWithCopy for LinearGradient._Paint(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for LinearGradient._Paint(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  return a1;
}

uint64_t getEnumTagSinglePayload for LinearGradient._Paint(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LinearGradient._Paint(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AngularGradient._Paint()
{
  return &type metadata for AngularGradient._Paint;
}

uint64_t initializeWithCopy for ConicGradient(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ConicGradient(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for ConicGradient(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for LinearGradient(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LinearGradient(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConicGradient()
{
  return &type metadata for ConicGradient;
}

uint64_t outlined init with take of GraphicsFilter(__int128 *a1, uint64_t a2)
{
  __swift_memcpy117_8(a2, a1);
  return a2;
}

uint64_t outlined copy of _SymbolEffect.Trigger(uint64_t result)
{
  if ((result & 0x8000000000000000) == 0)
    return swift_retain();
  return result;
}

uint64_t outlined consume of _SymbolEffect.Trigger?(uint64_t result)
{
  if ((~result & 0xF000000000000006) != 0)
    return outlined consume of _SymbolEffect.Trigger(result);
  return result;
}

uint64_t outlined consume of _SymbolEffect.Trigger(uint64_t result)
{
  if ((result & 0x8000000000000000) == 0)
    return swift_release();
  return result;
}

double static View<>._makeView(view:inputs:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, double *a6@<X8>)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  __int128 v18;
  int v19;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  int v33;

  v8 = *(_QWORD *)a2;
  v9 = *(_DWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_DWORD *)(a2 + 24);
  v12 = *(_DWORD *)(a2 + 28);
  v13 = *(_DWORD *)(a2 + 32);
  v14 = *(_DWORD *)(a2 + 36);
  v19 = *(_DWORD *)(a2 + 80);
  v33 = *a1;
  v22 = v8;
  v23 = v9;
  v24 = v10;
  v25 = v11;
  v26 = v12;
  v27 = v13;
  v28 = v14;
  v18 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)&v29 = *(_QWORD *)(a2 + 40);
  v15 = static Animatable.makeAnimatable(value:inputs:)((unsigned int *)&v33, &v22, a3, a4);
  _GraphValue.init(_:)(v15, &v33);
  v22 = v8;
  v23 = v9;
  v24 = v10;
  v25 = v11;
  v26 = v12;
  v27 = v13;
  v28 = v14;
  v16 = *(_OWORD *)(a2 + 56);
  v29 = v18;
  v30 = v16;
  v31 = *(_QWORD *)(a2 + 72);
  v32 = v19;
  return static View.makeView(view:inputs:)(&v33, &v22, a3, a5, a6);
}

uint64_t static View<>._makeViewList(view:inputs:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  char v34;
  int v35;

  v6 = *(_QWORD *)a2;
  v7 = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_DWORD *)(a2 + 24);
  v10 = *(_DWORD *)(a2 + 28);
  v12 = *(_DWORD *)(a2 + 32);
  v11 = *(_DWORD *)(a2 + 36);
  v13 = *(_QWORD *)(a2 + 40);
  v19 = *(_QWORD *)(a2 + 56);
  v20 = *(_QWORD *)(a2 + 48);
  v18 = *(_DWORD *)(a2 + 64);
  v17 = *(_QWORD *)(a2 + 72);
  v16 = *(_BYTE *)(a2 + 80);
  v35 = *a1;
  v22 = v6;
  v23 = v7;
  v24 = v8;
  v25 = v9;
  v26 = v10;
  v27 = v12;
  v28 = v11;
  v29 = v13;
  v14 = static Animatable.makeAnimatable(value:inputs:)((unsigned int *)&v35, &v22, a3, a4);
  _GraphValue.init(_:)(v14, &v35);
  v22 = v6;
  v23 = v7;
  v24 = v8;
  v25 = v9;
  v26 = v10;
  v27 = v12;
  v28 = v11;
  v29 = v13;
  v30 = v20;
  v31 = v19;
  v32 = v18;
  v33 = v17;
  v34 = v16;
  return static View.makeViewList(view:inputs:)(&v35, &v22, a3, a5);
}

BOOL ScrollPhase.isScrolling.getter(char a1)
{
  return a1 != 0;
}

void ScrollPhase.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

BOOL static ScrollPhase.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

Swift::Int ScrollPhase.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ScrollPhase()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t ScrollPhaseState.phase.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t ScrollPhaseState.phase.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*ScrollPhaseState.phase.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double ScrollPhaseState.velocity.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void ScrollPhaseState.velocity.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 8) = a1;
  *(double *)(v2 + 16) = a2;
}

uint64_t (*ScrollPhaseState.velocity.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

SwiftUI::ScrollPhaseState __swiftcall ScrollPhaseState.init(phase:velocity:)(SwiftUI::ScrollPhase phase, CGVector velocity)
{
  uint64_t v2;
  SwiftUI::ScrollPhaseState result;

  *(_BYTE *)v2 = phase;
  *(CGFloat *)(v2 + 8) = velocity.dx;
  *(CGFloat *)(v2 + 16) = velocity.dy;
  result.velocity.dy = velocity.dy;
  result.velocity.dx = velocity.dx;
  result.phase = phase;
  return result;
}

BOOL ScrollPhaseState.isScrolling.getter()
{
  _BYTE *v0;

  return *v0 != 0;
}

BOOL ScrollPhaseState.isTracking.getter()
{
  unsigned __int8 *v0;

  return *v0 == 1;
}

BOOL ScrollPhaseState.isInteracting.getter()
{
  unsigned __int8 *v0;

  return *v0 == 2;
}

BOOL ScrollPhaseState.isDecelerating.getter()
{
  unsigned __int8 *v0;

  return *v0 == 3;
}

BOOL ScrollPhaseState.isAnimating.getter()
{
  unsigned __int8 *v0;

  return *v0 == 4;
}

BOOL static ScrollPhaseState.== infix(_:_:)(double *a1, double *a2)
{
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2)
    return 0;
  if (a1[2] == a2[2])
    return a1[1] == a2[1];
  return 0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ScrollPhaseState(double *a1, double *a2)
{
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2)
    return 0;
  if (a1[2] == a2[2])
    return a1[1] == a2[1];
  return 0;
}

uint64_t static ScrollPhasePreferenceKey.defaultValue.getter()
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t static ScrollPhasePreferenceKey.reduce(value:nextValue:)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2;

  v2 = a2();
  return specialized Array.append<A>(contentsOf:)(v2);
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance ScrollPhasePreferenceKey@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  *a1 = static ScrollPhasePreferenceKey.defaultValue;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance ScrollPhasePreferenceKey(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  uint64_t v3;

  a2(&v3);
  return specialized Array.append<A>(contentsOf:)(v3);
}

uint64_t ScrollPhaseProvider.init(phaseState:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t ScrollPhaseProvider.value.getter()
{
  uint64_t v0;
  uint64_t Value;

  type metadata accessor for _ContiguousArrayStorage<ScrollPhaseState>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ScrollPhaseState>, (uint64_t (*)(_QWORD, ValueMetadata *))MEMORY[0x24BEE3598]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_23527E860;
  Value = AGGraphGetValue();
  *(_BYTE *)(v0 + 32) = *(_BYTE *)Value;
  *(_OWORD *)(v0 + 40) = *(_OWORD *)(Value + 8);
  return v0;
}

__n128 protocol witness for Rule.value.getter in conformance ScrollPhaseProvider@<Q0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t Value;
  __n128 result;

  type metadata accessor for _ContiguousArrayStorage<ScrollPhaseState>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ScrollPhaseState>, (uint64_t (*)(_QWORD, ValueMetadata *))MEMORY[0x24BEE3598]);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_23527E860;
  Value = AGGraphGetValue();
  result = *(__n128 *)(Value + 8);
  *(_BYTE *)(v2 + 32) = *(_BYTE *)Value;
  *(__n128 *)(v2 + 40) = result;
  *a1 = v2;
  return result;
}

uint64_t _GraphInputs.scrollPhaseState.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;

  v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    v3 = (int *)(v2 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    v3 = &static _GraphInputs.ScrollPhaseStateKey.defaultValue;
  }
  v4 = *v3;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v4;
}

uint64_t key path getter for _GraphInputs.scrollPhaseState : _GraphInputs@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = _GraphInputs.scrollPhaseState.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for _GraphInputs.scrollPhaseState : _GraphInputs(int *a1, uint64_t *a2)
{
  int v3;
  uint64_t v5;

  v3 = *a1;
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3, (uint64_t)&v5);
  return swift_release();
}

uint64_t _GraphInputs.scrollPhaseState.setter(int a1)
{
  uint64_t *v1;
  uint64_t v4;

  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1, (uint64_t)&v4);
  return swift_release();
}

uint64_t (*_GraphInputs.scrollPhaseState.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  int v6;

  v2 = (int *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v1;
  v3 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v4 = specialized find<A>(_:key:)(v3);
  if (v4)
  {
    v5 = (int *)(v4 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    v5 = &static _GraphInputs.ScrollPhaseStateKey.defaultValue;
  }
  v6 = *v5;
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *v2 = v6;
  return _GraphInputs.scrollPhaseState.modify;
}

uint64_t _GraphInputs.scrollPhaseState.modify(uint64_t a1, char a2)
{
  int v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;

  v4 = *(_DWORD *)(a1 + 24);
  v5 = *(uint64_t **)(a1 + 16);
  swift_retain();
  if ((a2 & 1) != 0)
  {
    v6 = v5;
    v7 = v4;
    v8 = a1;
  }
  else
  {
    v8 = a1 + 8;
    v6 = v5;
    v7 = v4;
  }
  specialized closure #1 in PropertyList.subscript.setter(v6, v7, v8);
  return swift_release();
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.ScrollPhaseStateKey@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  if (one-time initialization token for defaultValue != -1)
    result = swift_once();
  *a1 = static _GraphInputs.ScrollPhaseStateKey.defaultValue;
  return result;
}

uint64_t static ScrollPhaseStateConfigurationModifier._makeView(modifier:inputs:body:)@<X0>(uint64_t a1@<X1>, void (*a2)(_QWORD *__return_ptr, uint64_t, Swift::UInt *)@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  Swift::UInt value;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  unsigned int v24;
  uint64_t v25;
  _QWORD v28[2];
  Swift::UInt v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)a1;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(a1 + 64);
  v12 = *(_QWORD *)(a1 + 72);
  v13 = *(_DWORD *)(a1 + 80);
  LOBYTE(v29) = 0;
  v30 = 0;
  v31 = 0;
  type metadata accessor for _ContiguousArrayStorage<ScrollPhaseState>(0, &lazy cache variable for type metadata for External<ScrollPhaseState>, (uint64_t (*)(_QWORD, ValueMetadata *))MEMORY[0x24BE09670]);
  lazy protocol witness table accessor for type External<ScrollPhaseState> and conformance External<A>();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14 = Attribute.init<A>(body:value:flags:update:)();
  v15 = swift_retain();
  v16 = specialized find<A>(_:key:)(v15);
  if (!v16 || (value = v3, v14 != *(_DWORD *)(v16 + 72)))
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TypedElement<_GraphInputs.ScrollPhaseStateKey>, (uint64_t)&type metadata for _GraphInputs.ScrollPhaseStateKey, (uint64_t)&protocol witness table for _GraphInputs.ScrollPhaseStateKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
    *(_DWORD *)(swift_allocObject() + 72) = v14;
    value = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for _GraphInputs.ScrollPhaseStateKey, 0, v3).value;
  }
  swift_release();
  v29 = value;
  LODWORD(v30) = v4;
  v31 = v5;
  v32 = v6;
  v33 = v7;
  v34 = v9;
  v35 = v8;
  v36 = v10;
  v37 = v11;
  v38 = v12;
  v39 = v13;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v18 = swift_bridgeObjectRetain();
  a2(v28, v18, &v29);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<ScrollPhasePreferenceKey>, (uint64_t)&type metadata for ScrollPhasePreferenceKey, (uint64_t)&protocol witness table for ScrollPhasePreferenceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v20 = *(_QWORD *)(v8 + 16);
  if (v20)
  {
    v21 = v19;
    v22 = 32;
    while (*(_QWORD *)(v8 + v22) != v19)
    {
      v22 += 16;
      if (!--v20)
        goto LABEL_8;
    }
    LODWORD(v29) = v14;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ContiguousArrayStorage<ScrollPhaseState>(0, &lazy cache variable for type metadata for [ScrollPhaseState], (uint64_t (*)(_QWORD, ValueMetadata *))MEMORY[0x24BEE1250]);
    lazy protocol witness table accessor for type ScrollPhaseProvider and conformance ScrollPhaseProvider();
    swift_bridgeObjectRetain();
    v24 = Attribute.init<A>(body:value:flags:update:)();
    LOBYTE(v29) = 0;
    PreferencesOutputs.subscript.setter(v24, v21, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v25);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    result = swift_bridgeObjectRelease_n();
  }
  else
  {
LABEL_8:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
  }
  *a3 = v28[0];
  a3[1] = v28[1];
  return result;
}

uint64_t static ResetScrollInputsModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  int v36;

  v4 = *((_DWORD *)a2 + 2);
  v5 = a2[2];
  v7 = a2[5];
  v6 = a2[6];
  v8 = *((_DWORD *)a2 + 20);
  v28 = *a2;
  v29 = v4;
  v30 = v5;
  v31 = *(_OWORD *)(a2 + 3);
  v32 = v7;
  v33 = v6;
  v34 = *(_OWORD *)(a2 + 7);
  v35 = a2[9];
  v36 = v8;
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<ScrollPhasePreferenceKey>, (uint64_t)&type metadata for ScrollPhasePreferenceKey, (uint64_t)&protocol witness table for ScrollPhasePreferenceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v10 = *(_QWORD *)(v6 + 16);
  if (v10)
  {
    v11 = 0;
    v12 = 32;
    while (*(_QWORD *)(v6 + v12) != v9)
    {
      ++v11;
      v12 += 16;
      if (v10 == v11)
        goto LABEL_5;
    }
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Array.remove(at:)(v11);
    v6 = v33;
  }
  else
  {
LABEL_5:
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<ScrollGeometryPreferenceKey>, (uint64_t)&type metadata for ScrollGeometryPreferenceKey, (uint64_t)&protocol witness table for ScrollGeometryPreferenceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v14 = *(_QWORD *)(v6 + 16);
  if (v14)
  {
    v15 = 0;
    v16 = 32;
    while (*(_QWORD *)(v6 + v16) != v13)
    {
      ++v15;
      v16 += 16;
      if (v14 == v15)
        goto LABEL_13;
    }
    specialized Array.remove(at:)(v15);
    v6 = v33;
  }
LABEL_13:
  v19 = v28;
  v20 = v29;
  v21 = v30;
  v22 = v31;
  v23 = v32;
  v24 = v6;
  v25 = v34;
  v26 = v35;
  v27 = v36;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v17 = swift_bridgeObjectRetain();
  a3(v17, &v19);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t View.configuresScrollPhaseState()(uint64_t a1, uint64_t a2)
{
  return View.modifier<A>(_:)(a1, a1, &type metadata for ScrollPhaseStateConfigurationModifier, a2);
}

uint64_t View.resetScrollInputs()(uint64_t a1, uint64_t a2)
{
  return View.modifier<A>(_:)(a1, a1, &type metadata for ResetScrollInputsModifier, a2);
}

uint64_t ScrollPhase.debugDescription.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_234A786FC + 4 * byte_235280CB0[a1]))(1701602409, 0xE400000000000000);
}

uint64_t sub_234A786FC()
{
  return 0x676E696B63617274;
}

uint64_t sub_234A78714()
{
  return 0x7463617265746E69;
}

uint64_t sub_234A78734()
{
  return 0x6172656C65636564;
}

uint64_t sub_234A78754()
{
  return 0x6E6974616D696E61;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ScrollPhase()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_234A78798 + 4 * byte_235280CB5[*v0]))(1701602409, 0xE400000000000000);
}

uint64_t sub_234A78798()
{
  return 0x676E696B63617274;
}

uint64_t sub_234A787B0()
{
  return 0x7463617265746E69;
}

uint64_t sub_234A787D0()
{
  return 0x6172656C65636564;
}

uint64_t sub_234A787F0()
{
  return 0x6E6974616D696E61;
}

uint64_t ScrollPhaseState.description.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;

  _StringGuts.grow(_:)(36);
  v0._object = (void *)0x80000002352DDC50;
  v0._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0x69636F6C6576202CLL;
  v1._object = (void *)0xEC000000203A7974;
  String.append(_:)(v1);
  type metadata accessor for CGVector(0);
  _print_unlocked<A, B>(_:_:)();
  v2._countAndFlagsBits = 62;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0;
}

unint64_t lazy protocol witness table accessor for type ScrollPhase and conformance ScrollPhase()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollPhase and conformance ScrollPhase;
  if (!lazy protocol witness table cache variable for type ScrollPhase and conformance ScrollPhase)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ScrollPhase, &type metadata for ScrollPhase);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollPhase and conformance ScrollPhase);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollPhaseProvider and conformance ScrollPhaseProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollPhaseProvider and conformance ScrollPhaseProvider;
  if (!lazy protocol witness table cache variable for type ScrollPhaseProvider and conformance ScrollPhaseProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ScrollPhaseProvider, &type metadata for ScrollPhaseProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollPhaseProvider and conformance ScrollPhaseProvider);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ScrollPhase(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollPhase(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_234A78A84 + 4 * byte_235280CBF[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_234A78AB8 + 4 * byte_235280CBA[v4]))();
}

uint64_t sub_234A78AB8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234A78AC0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234A78AC8);
  return result;
}

uint64_t sub_234A78AD4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234A78ADCLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_234A78AE0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234A78AE8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ScrollPhase()
{
  return &type metadata for ScrollPhase;
}

uint64_t getEnumTagSinglePayload for ScrollPhaseState(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && a1[24])
    return (*(_DWORD *)a1 + 252);
  v3 = *a1;
  v4 = v3 >= 5;
  v5 = v3 - 5;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollPhaseState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 252;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 4;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollPhaseState()
{
  return &type metadata for ScrollPhaseState;
}

ValueMetadata *type metadata accessor for ScrollPhasePreferenceKey()
{
  return &type metadata for ScrollPhasePreferenceKey;
}

ValueMetadata *type metadata accessor for ScrollPhaseProvider()
{
  return &type metadata for ScrollPhaseProvider;
}

uint64_t sub_234A78BBC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA29IgnoresAutomaticPaddingLayout33_47C1BD8C61550BB60F4F3D12F752D53DLLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm(a1, (uint64_t)&type metadata for ScrollPhaseStateConfigurationModifier, (uint64_t)&protocol witness table for ScrollPhaseStateConfigurationModifier, a4);
}

uint64_t sub_234A78BD0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA29IgnoresAutomaticPaddingLayout33_47C1BD8C61550BB60F4F3D12F752D53DLLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm(a1, (uint64_t)&type metadata for ResetScrollInputsModifier, (uint64_t)&protocol witness table for ResetScrollInputsModifier, a4);
}

ValueMetadata *type metadata accessor for ResetScrollInputsModifier()
{
  return &type metadata for ResetScrollInputsModifier;
}

ValueMetadata *type metadata accessor for ScrollPhaseStateConfigurationModifier()
{
  return &type metadata for ScrollPhaseStateConfigurationModifier;
}

unint64_t lazy protocol witness table accessor for type External<ScrollPhaseState> and conformance External<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type External<ScrollPhaseState> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<ScrollPhaseState> and conformance External<A>)
  {
    type metadata accessor for _ContiguousArrayStorage<ScrollPhaseState>(255, &lazy cache variable for type metadata for External<ScrollPhaseState>, (uint64_t (*)(_QWORD, ValueMetadata *))MEMORY[0x24BE09670]);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BE09678], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<ScrollPhaseState> and conformance External<A>);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<ScrollPhaseState>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, ValueMetadata *))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, &type metadata for ScrollPhaseState);
    if (!v5)
      atomic_store(v4, a2);
  }
}

ValueMetadata *type metadata accessor for _GraphInputs.ScrollPhaseStateKey()
{
  return &type metadata for _GraphInputs.ScrollPhaseStateKey;
}

uint64_t static ArchivedViewCore.majorVersion.getter()
{
  return 13;
}

uint64_t one-time initialization function for archivedViewHostKey(uint64_t a1)
{
  return one-time initialization function for archivedViewHostKey(a1, static ArchivedViewCore.archivedViewHostKey);
}

uint64_t static ArchivedViewCore.archivedViewHostKey.getter@<X0>(uint64_t a1@<X8>)
{
  return static ArchivedViewCore.archivedViewHostKey.getter(&one-time initialization token for archivedViewHostKey, (uint64_t)static ArchivedViewCore.archivedViewHostKey, a1);
}

uint64_t one-time initialization function for archiveOptionsKey(uint64_t a1)
{
  return one-time initialization function for archivedViewHostKey(a1, static ArchivedViewCore.archiveOptionsKey);
}

uint64_t static ArchivedViewCore.archiveOptionsKey.getter@<X0>(uint64_t a1@<X8>)
{
  return static ArchivedViewCore.archivedViewHostKey.getter(&one-time initialization token for archiveOptionsKey, (uint64_t)static ArchivedViewCore.archiveOptionsKey, a1);
}

uint64_t static ArchivedViewCore.archivedViewHostKey.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = type metadata accessor for CodingUserInfoKey();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t one-time initialization function for rbEncoderSetKey(uint64_t a1)
{
  return one-time initialization function for archivedViewHostKey(a1, static ArchivedViewCore.rbEncoderSetKey);
}

uint64_t one-time initialization function for archivedViewHostKey(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  type metadata accessor for CodingUserInfoKey?();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CodingUserInfoKey();
  __swift_allocate_value_buffer(v6, a2);
  v7 = __swift_project_value_buffer(v6, (uint64_t)a2);
  CodingUserInfoKey.init(rawValue:)();
  v8 = *(_QWORD *)(v6 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(v7, v5, v6);
  __break(1u);
  return result;
}

uint64_t static ArchivedViewCore.rbEncoderSetKey.getter@<X0>(uint64_t a1@<X8>)
{
  return static ArchivedViewCore.archivedViewHostKey.getter(&one-time initialization token for rbEncoderSetKey, (uint64_t)static ArchivedViewCore.rbEncoderSetKey, a1);
}

uint64_t ArchivedViewCore.Metadata.majorVersion.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t ArchivedViewCore.Metadata.majorVersion.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*ArchivedViewCore.Metadata.majorVersion.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ArchivedViewCore.Metadata.stateAttachments.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ArchivedViewCore.Metadata.stateAttachments.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*ArchivedViewCore.Metadata.stateAttachments.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ArchivedViewCore.Metadata.stableIDsAttachment.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t ArchivedViewCore.Metadata.stableIDsAttachment.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = result;
  *(_BYTE *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*ArchivedViewCore.Metadata.stableIDsAttachment.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ArchivedViewCore.Metadata.dataAttachment.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t ArchivedViewCore.Metadata.dataAttachment.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = result;
  *(_BYTE *)(v2 + 40) = a2 & 1;
  return result;
}

uint64_t (*ArchivedViewCore.Metadata.dataAttachment.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ArchivedViewCore.Metadata.archiveID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ArchivedViewCore.Metadata() + 32);
  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ArchivedViewCore.Metadata()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ArchivedViewCore.Metadata;
  if (!type metadata singleton initialization cache for ArchivedViewCore.Metadata)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t ArchivedViewCore.Metadata.archiveID.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ArchivedViewCore.Metadata() + 32);
  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ArchivedViewCore.Metadata.archiveID.modify())(_QWORD, _QWORD)
{
  type metadata accessor for ArchivedViewCore.Metadata();
  return _ViewInputs.base.modify;
}

uint64_t ArchivedViewCore.Metadata.deploymentVersion.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ArchivedViewCore.Metadata();
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 36));
  return result;
}

uint64_t ArchivedViewCore.Metadata.deploymentVersion.setter(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t result;

  v2 = *a1;
  result = type metadata accessor for ArchivedViewCore.Metadata();
  *(_BYTE *)(v1 + *(int *)(result + 36)) = v2;
  return result;
}

uint64_t (*ArchivedViewCore.Metadata.deploymentVersion.modify())(_QWORD, _QWORD)
{
  type metadata accessor for ArchivedViewCore.Metadata();
  return _ViewInputs.base.modify;
}

uint64_t ArchivedViewCore.Metadata.preferredBundleLanguage.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ArchivedViewCore.Metadata() + 40));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ArchivedViewCore.Metadata.preferredBundleLanguage.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for ArchivedViewCore.Metadata() + 40));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*ArchivedViewCore.Metadata.preferredBundleLanguage.modify())(_QWORD, _QWORD)
{
  type metadata accessor for ArchivedViewCore.Metadata();
  return _ViewInputs.base.modify;
}

uint64_t property wrapper backing initializer of ArchivedViewCore.Metadata.preferredCompositionLanguage@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t ArchivedViewCore.Metadata.preferredCompositionLanguage.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ArchivedViewCore.Metadata() + 44));
}

uint64_t ArchivedViewCore.Metadata.preferredCompositionLanguage.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ArchivedViewCore.Metadata();
  *(_BYTE *)(v1 + *(int *)(result + 44)) = a1;
  return result;
}

uint64_t (*ArchivedViewCore.Metadata.preferredCompositionLanguage.modify())(_QWORD, _QWORD)
{
  type metadata accessor for ArchivedViewCore.Metadata();
  return _ViewInputs.base.modify;
}

uint64_t ArchivedViewCore.Metadata.init(majorVersion:stateAttachments:stableIDAttachment:dataAttachment:archiveID:deploymentVersion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, char *a8@<X7>, uint64_t a9@<X8>)
{
  id v16;
  id v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  char v27;

  v27 = *a8;
  v16 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v17 = objc_msgSend(v16, sel_preferredLocalizations);

  v18 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
  if (v18[2])
  {
    v19 = v18[4];
    v20 = v18[5];
    swift_bridgeObjectRetain();
  }
  else
  {
    v19 = 0;
    v20 = 0;
  }
  swift_bridgeObjectRelease();
  v21 = (int *)type metadata accessor for ArchivedViewCore.Metadata();
  v22 = (_QWORD *)(a9 + v21[10]);
  *v22 = v19;
  v22[1] = v20;
  v23 = v21[11];
  *(_BYTE *)(a9 + v23) = CTParagraphStyleGetCompositionLanguageForLanguage();
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_BYTE *)(a9 + 24) = a4 & 1;
  *(_QWORD *)(a9 + 32) = a5;
  *(_BYTE *)(a9 + 40) = a6 & 1;
  v24 = a9 + v21[8];
  v25 = type metadata accessor for UUID();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v24, a7, v25);
  *(_BYTE *)(a9 + v21[9]) = v27;
  return result;
}

uint64_t ArchivedViewCore.Metadata.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_234A793AC + 4 * byte_235280FB0[a1]))(0x726556726F6A616DLL, 0xEC0000006E6F6973);
}

unint64_t sub_234A793AC()
{
  return 0xD000000000000010;
}

unint64_t sub_234A793C8()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ArchivedViewCore.Metadata.CodingKeys()
{
  unsigned __int8 *v0;

  return ArchivedViewCore.Metadata.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ArchivedViewCore.Metadata.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized ArchivedViewCore.Metadata.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance ArchivedViewCore.Metadata.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ArchivedViewCore.Metadata.CodingKeys()
{
  lazy protocol witness table accessor for type ArchivedViewCore.Metadata.CodingKeys and conformance ArchivedViewCore.Metadata.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ArchivedViewCore.Metadata.CodingKeys()
{
  lazy protocol witness table accessor for type ArchivedViewCore.Metadata.CodingKeys and conformance ArchivedViewCore.Metadata.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t ArchivedViewCore.Metadata.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v3 = v1;
  type metadata accessor for KeyedEncodingContainer<ArchivedViewCore.Metadata.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<ArchivedViewCore.Metadata.CodingKeys>, (uint64_t (*)(uint64_t, void *, unint64_t))MEMORY[0x24BEE3520]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v12 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ArchivedViewCore.Metadata.CodingKeys and conformance ArchivedViewCore.Metadata.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v13) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v13 = *(_QWORD *)(v3 + 8);
    HIBYTE(v12) = 1;
    type metadata accessor for [Int]();
    lazy protocol witness table accessor for type [Int] and conformance <A> [A](&lazy protocol witness table cache variable for type [Int] and conformance <A> [A], MEMORY[0x24BEE1770], MEMORY[0x24BEE12A0]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v13) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v10 = type metadata accessor for ArchivedViewCore.Metadata();
    LOBYTE(v13) = 4;
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = *(_BYTE *)(v3 + *(int *)(v10 + 36));
    HIBYTE(v12) = 5;
    lazy protocol witness table accessor for type ArchivedViewInput.DeploymentVersion and conformance ArchivedViewInput.DeploymentVersion();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v13) = *(_BYTE *)(v3 + *(int *)(v10 + 44));
    HIBYTE(v12) = 7;
    type metadata accessor for CodableRawRepresentable<CTCompositionLanguage>();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type CodableRawRepresentable<CTCompositionLanguage> and conformance CodableRawRepresentable<A>, (uint64_t (*)(uint64_t))type metadata accessor for CodableRawRepresentable<CTCompositionLanguage>, (uint64_t)")\x1B=\x1Bе\v");
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t lazy protocol witness table accessor for type ArchivedViewCore.Metadata.CodingKeys and conformance ArchivedViewCore.Metadata.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivedViewCore.Metadata.CodingKeys and conformance ArchivedViewCore.Metadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivedViewCore.Metadata.CodingKeys and conformance ArchivedViewCore.Metadata.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ArchivedViewCore.Metadata.CodingKeys, &unk_2506202C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedViewCore.Metadata.CodingKeys and conformance ArchivedViewCore.Metadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivedViewCore.Metadata.CodingKeys and conformance ArchivedViewCore.Metadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivedViewCore.Metadata.CodingKeys and conformance ArchivedViewCore.Metadata.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ArchivedViewCore.Metadata.CodingKeys, &unk_2506202C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedViewCore.Metadata.CodingKeys and conformance ArchivedViewCore.Metadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivedViewCore.Metadata.CodingKeys and conformance ArchivedViewCore.Metadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivedViewCore.Metadata.CodingKeys and conformance ArchivedViewCore.Metadata.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ArchivedViewCore.Metadata.CodingKeys, &unk_2506202C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedViewCore.Metadata.CodingKeys and conformance ArchivedViewCore.Metadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivedViewCore.Metadata.CodingKeys and conformance ArchivedViewCore.Metadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivedViewCore.Metadata.CodingKeys and conformance ArchivedViewCore.Metadata.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ArchivedViewCore.Metadata.CodingKeys, &unk_2506202C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedViewCore.Metadata.CodingKeys and conformance ArchivedViewCore.Metadata.CodingKeys);
  }
  return result;
}

void type metadata accessor for [Int]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [Int])
  {
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [Int]);
  }
}

unint64_t lazy protocol witness table accessor for type ArchivedViewInput.DeploymentVersion and conformance ArchivedViewInput.DeploymentVersion()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivedViewInput.DeploymentVersion and conformance ArchivedViewInput.DeploymentVersion;
  if (!lazy protocol witness table cache variable for type ArchivedViewInput.DeploymentVersion and conformance ArchivedViewInput.DeploymentVersion)
  {
    result = MEMORY[0x23B7C9C04]("-H:\x1B؂\t", &type metadata for ArchivedViewInput.DeploymentVersion);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedViewInput.DeploymentVersion and conformance ArchivedViewInput.DeploymentVersion);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivedViewInput.DeploymentVersion and conformance ArchivedViewInput.DeploymentVersion;
  if (!lazy protocol witness table cache variable for type ArchivedViewInput.DeploymentVersion and conformance ArchivedViewInput.DeploymentVersion)
  {
    result = MEMORY[0x23B7C9C04]("EH:\x1B", &type metadata for ArchivedViewInput.DeploymentVersion);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedViewInput.DeploymentVersion and conformance ArchivedViewInput.DeploymentVersion);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivedViewInput.DeploymentVersion and conformance ArchivedViewInput.DeploymentVersion;
  if (!lazy protocol witness table cache variable for type ArchivedViewInput.DeploymentVersion and conformance ArchivedViewInput.DeploymentVersion)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ArchivedViewInput.DeploymentVersion, &type metadata for ArchivedViewInput.DeploymentVersion);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedViewInput.DeploymentVersion and conformance ArchivedViewInput.DeploymentVersion);
  }
  return result;
}

uint64_t type metadata accessor for CodableRawRepresentable<CTCompositionLanguage>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for CodableRawRepresentable<CTCompositionLanguage>;
  if (!lazy cache variable for type metadata for CodableRawRepresentable<CTCompositionLanguage>)
  {
    type metadata accessor for CTCompositionLanguage(255);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type CTCompositionLanguage and conformance CTCompositionLanguage, (uint64_t (*)(uint64_t))type metadata accessor for CTCompositionLanguage, (uint64_t)&protocol conformance descriptor for CTCompositionLanguage);
    type metadata accessor for CodableRawRepresentable();
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance ArchivedViewCore.Metadata@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ArchivedViewCore.Metadata.init(from:)(a1, a2);
}

uint64_t ArchivedViewCore.Metadata.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  id v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  char v42;
  uint64_t v43;

  v41 = a1;
  v34 = a2;
  v3 = type metadata accessor for UUID();
  v39 = *(_QWORD *)(v3 - 8);
  v40 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v35 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedEncodingContainer<ArchivedViewCore.Metadata.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<ArchivedViewCore.Metadata.CodingKeys>, (uint64_t (*)(uint64_t, void *, unint64_t))MEMORY[0x24BEE33E0]);
  v36 = *(_QWORD *)(v5 - 8);
  v37 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v33 - v6;
  v8 = type metadata accessor for ArchivedViewCore.Metadata();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_QWORD *)v10 + 2) = 0;
  v10[24] = 1;
  *((_QWORD *)v10 + 4) = 0;
  v10[40] = 1;
  v11 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v12 = objc_msgSend(v11, sel_preferredLocalizations);

  v13 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
  if (v13[2])
  {
    v15 = v13[4];
    v14 = v13[5];
    swift_bridgeObjectRetain();
  }
  else
  {
    v15 = 0;
    v14 = 0;
  }
  swift_bridgeObjectRelease();
  v16 = v8;
  v17 = (uint64_t *)&v10[*(int *)(v8 + 40)];
  *v17 = v15;
  v17[1] = v14;
  v38 = v16;
  v18 = *(int *)(v16 + 44);
  v10[v18] = CTParagraphStyleGetCompositionLanguageForLanguage();
  __swift_project_boxed_opaque_existential_1(v41, v41[3]);
  lazy protocol witness table accessor for type ArchivedViewCore.Metadata.CodingKeys and conformance ArchivedViewCore.Metadata.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v19 = v18;
    LOBYTE(v43) = 0;
    v20 = v37;
    *(_QWORD *)v10 = KeyedDecodingContainer.decode(_:forKey:)();
    type metadata accessor for [Int]();
    v42 = 1;
    lazy protocol witness table accessor for type [Int] and conformance <A> [A]((unint64_t *)&lazy protocol witness table cache variable for type [Int] and conformance <A> [A], MEMORY[0x24BEE1798], MEMORY[0x24BEE12D0]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *((_QWORD *)v10 + 1) = v43;
    LOBYTE(v43) = 2;
    *((_QWORD *)v10 + 2) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v10[24] = v22 & 1;
    LOBYTE(v43) = 3;
    *((_QWORD *)v10 + 4) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v10[40] = v23 & 1;
    LOBYTE(v43) = 4;
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
    v24 = v40;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v25 = v24;
    v26 = v20;
    v27 = v38;
    (*(void (**)(char *, char *, uint64_t))(v39 + 32))(&v10[*(int *)(v38 + 32)], v35, v25);
    v42 = 5;
    lazy protocol witness table accessor for type ArchivedViewInput.DeploymentVersion and conformance ArchivedViewInput.DeploymentVersion();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v28 = v43;
    if (BYTE1(v43))
      v28 = 1;
    v10[*(int *)(v27 + 36)] = v28;
    LOBYTE(v43) = 6;
    v29 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v31 = v30;
    swift_bridgeObjectRelease();
    *v17 = v29;
    v17[1] = v31;
    type metadata accessor for CodableRawRepresentable<CTCompositionLanguage>();
    v42 = 7;
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type CodableRawRepresentable<CTCompositionLanguage> and conformance CodableRawRepresentable<A>, (uint64_t (*)(uint64_t))type metadata accessor for CodableRawRepresentable<CTCompositionLanguage>, (uint64_t)&protocol conformance descriptor for CodableRawRepresentable<A>);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    if (BYTE1(v43))
      v32 = 0;
    else
      v32 = v43;
    (*(void (**)(char *, uint64_t))(v36 + 8))(v7, v26);
    v10[v19] = v32;
    outlined init with copy of ArchivedViewCore.Metadata((uint64_t)v10, v34);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
    return outlined destroy of ArchivedViewCore.Metadata((uint64_t)v10);
  }
}

void type metadata accessor for KeyedEncodingContainer<ArchivedViewCore.Metadata.CodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = lazy protocol witness table accessor for type ArchivedViewCore.Metadata.CodingKeys and conformance ArchivedViewCore.Metadata.CodingKeys();
    v7 = a3(a1, &unk_2506202C8, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t lazy protocol witness table accessor for type [Int] and conformance <A> [A](unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    type metadata accessor for [Int]();
    v8 = a2;
    result = MEMORY[0x23B7C9C04](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of ArchivedViewCore.Metadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ArchivedViewCore.Metadata();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ArchivedViewCore.Metadata(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ArchivedViewCore.Metadata();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ArchivedViewCore.Metadata(_QWORD *a1)
{
  return ArchivedViewCore.Metadata.encode(to:)(a1);
}

uint64_t sub_234A7A048@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = type metadata accessor for ArchivedViewCore.Metadata();
  *a2 = *(_BYTE *)(a1 + *(int *)(result + 44));
  return result;
}

uint64_t sub_234A7A07C(char *a1, uint64_t a2)
{
  char v3;
  uint64_t result;

  v3 = *a1;
  result = type metadata accessor for ArchivedViewCore.Metadata();
  *(_BYTE *)(a2 + *(int *)(result + 44)) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ArchivedViewCore()
{
  return &type metadata for ArchivedViewCore;
}

_QWORD *initializeBufferWithCopyOfBuffer for ArchivedViewCore.Metadata(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v8;
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    v9 = a3[8];
    v10 = a1 + v9;
    v11 = (uint64_t)a2 + v9;
    *(_QWORD *)a1 = v7;
    v12 = type metadata accessor for UUID();
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    v14 = a3[10];
    *((_BYTE *)v4 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    v15 = (_QWORD *)((char *)v4 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    *((_BYTE *)v4 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for ArchivedViewCore.Metadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ArchivedViewCore.Metadata(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;

  v6 = *a2;
  v7 = a2[2];
  *(_QWORD *)(a1 + 8) = a2[1];
  *(_QWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  v8 = a3[8];
  v9 = a1 + v8;
  v10 = (uint64_t)a2 + v8;
  *(_QWORD *)a1 = v6;
  v11 = type metadata accessor for UUID();
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  v13 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)((char *)a2 + v13);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  *(_BYTE *)(a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ArchivedViewCore.Metadata(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v7;
  v8 = a3[8];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v12 = a3[10];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  *v13 = *v14;
  v13[1] = v14[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  return a1;
}

uint64_t initializeWithTake for ArchivedViewCore.Metadata(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v6 = a3[8];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v10) = *(_OWORD *)(a2 + v10);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  return a1;
}

uint64_t assignWithTake for ArchivedViewCore.Metadata(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v7 = a3[8];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (uint64_t *)(a2 + v11);
  v15 = *v13;
  v14 = v13[1];
  *v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  return a1;
}

uint64_t getEnumTagSinglePayload for ArchivedViewCore.Metadata()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_234A7A544(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ArchivedViewCore.Metadata()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_234A7A5CC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for ArchivedViewCore.Metadata()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ArchivedViewCore.Metadata.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ArchivedViewCore.Metadata.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_234A7A7C4 + 4 * byte_235280FBD[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_234A7A7F8 + 4 * byte_235280FB8[v4]))();
}

uint64_t sub_234A7A7F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234A7A800(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234A7A808);
  return result;
}

uint64_t sub_234A7A814(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234A7A81CLL);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_234A7A820(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234A7A828(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ArchivedViewCore.Metadata.CodingKeys()
{
  return &unk_2506202C8;
}

uint64_t specialized ArchivedViewCore.Metadata.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x726556726F6A616DLL && a2 == 0xEC0000006E6F6973;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000002352DDC70
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000002352DDC90
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6174744161746164 && a2 == 0xEE00746E656D6863
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x4965766968637261 && a2 == 0xE900000000000044
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000002352DDCB0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000002352DDCD0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x80000002352DDCF0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

void type metadata accessor for CodingUserInfoKey?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CodingUserInfoKey?)
  {
    type metadata accessor for CodingUserInfoKey();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CodingUserInfoKey?);
  }
}

uint64_t static FormatStyle<>.reference(to:allowedFields:maxFieldCount:thresholdField:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t, uint64_t, double);
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v31 = a4;
  v32 = a3;
  v8 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Date();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16);
  v17(v16, a1, v12, v14);
  v29 = v9;
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v19 = v31;
  v31 = v8;
  v18(v11, v19, v8);
  v20 = (int *)type metadata accessor for SystemFormatStyle.DateReference();
  *(_QWORD *)(a5 + v20[8]) = 0;
  v30 = a2;
  swift_bridgeObjectRetain();
  static Locale.autoupdatingCurrent.getter();
  static Calendar.autoupdatingCurrent.getter();
  v21 = static TimeZone.autoupdatingCurrent.getter();
  MEMORY[0x23B7C4858](v21);
  v22 = ((uint64_t (*)(uint64_t, char *, uint64_t))v17)(a5, v16, v12);
  if (one-time initialization token for orderedFields != -1)
    v22 = swift_once();
  v23 = static Date.ComponentsFormatStyle.Field.orderedFields;
  MEMORY[0x24BDAC7A8](v22);
  *(&v28 - 2) = v30;
  *(&v28 - 1) = (uint64_t)v11;
  swift_bridgeObjectRetain();
  specialized _ArrayProtocol.filter(_:)((uint64_t (*)(char *))partial apply for closure #1 in SystemFormatStyle.DateReference.init(to:allowedFields:maxFieldCount:thresholdField:), (uint64_t)(&v28 - 4), v23);
  v25 = v24;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a5 + v20[5]) = v25;
  v26 = v31;
  *(_QWORD *)(a5 + v20[6]) = v32;
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v29 + 32))(a5 + v20[7], v11, v26);
}

uint64_t SystemFormatStyle.DateReference.init(to:allowedFields:maxFieldCount:thresholdField:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[4];
  uint64_t v21;

  v21 = a3;
  v9 = (int *)type metadata accessor for SystemFormatStyle.DateReference();
  *(_QWORD *)(a5 + v9[8]) = 0;
  static Locale.autoupdatingCurrent.getter();
  static Calendar.autoupdatingCurrent.getter();
  v10 = static TimeZone.autoupdatingCurrent.getter();
  MEMORY[0x23B7C4858](v10);
  v11 = type metadata accessor for Date();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(a5, a1, v11);
  if (one-time initialization token for orderedFields != -1)
    v13 = swift_once();
  v14 = static Date.ComponentsFormatStyle.Field.orderedFields;
  MEMORY[0x24BDAC7A8](v13);
  v20[2] = a2;
  v20[3] = a4;
  swift_bridgeObjectRetain();
  specialized _ArrayProtocol.filter(_:)((uint64_t (*)(char *))closure #1 in SystemFormatStyle.DateReference.init(to:allowedFields:maxFieldCount:thresholdField:)partial apply, (uint64_t)v20, v14);
  v16 = v15;
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v11);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a5 + v9[5]) = v16;
  *(_QWORD *)(a5 + v9[6]) = v21;
  v17 = a5 + v9[7];
  v18 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17, a4, v18);
}

uint64_t type metadata accessor for SystemFormatStyle.DateReference()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SystemFormatStyle.DateReference;
  if (!type metadata singleton initialization cache for SystemFormatStyle.DateReference)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t closure #1 in SystemFormatStyle.DateReference.init(to:allowedFields:maxFieldCount:thresholdField:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t, uint64_t);
  char v14;
  void (*v15)(char *, uint64_t);
  _QWORD v17[2];

  v6 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v17 - v11;
  LOBYTE(a2) = specialized Set.contains(_:)(a1, a2);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v13(v12, a1, v6);
  v13(v9, a3, v6);
  if ((a2 & 1) != 0)
    v14 = 1;
  else
    v14 = MEMORY[0x23B7C4FB4](v12, v9);
  v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v9, v6);
  v15(v12, v6);
  return v14 & 1;
}

_QWORD *specialized _ArrayProtocol.filter(_:)(uint64_t (*a1)(uint64_t *), _QWORD *a2, unint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v5 = a3;
  v18 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (a3 >> 62)
  {
LABEL_18:
    v8 = _CocoaArrayWrapper.endIndex.getter();
    if (v8)
      goto LABEL_3;
  }
  else
  {
    v8 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v8)
    {
LABEL_3:
      v9 = 0;
      v15 = v5 & 0xFFFFFFFFFFFFFF8;
      v16 = v5 & 0xC000000000000001;
      v14 = v5;
      while (1)
      {
        if (v16)
        {
          v10 = MEMORY[0x23B7C6D9C](v9, v5);
          v11 = v9 + 1;
          if (__OFADD__(v9, 1))
          {
LABEL_14:
            __break(1u);
LABEL_15:
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            return v3;
          }
        }
        else
        {
          if (v9 >= *(_QWORD *)(v15 + 16))
          {
            __break(1u);
            goto LABEL_18;
          }
          v10 = *(_QWORD *)(v5 + 8 * v9 + 32);
          swift_retain();
          v11 = v9 + 1;
          if (__OFADD__(v9, 1))
            goto LABEL_14;
        }
        v17 = v10;
        v3 = a2;
        v12 = a1(&v17);
        if (v4)
          goto LABEL_15;
        if ((v12 & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          v5 = v14;
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          v3 = &v18;
          specialized ContiguousArray._endMutation()();
        }
        else
        {
          swift_release();
        }
        ++v9;
        if (v11 == v8)
        {
          v3 = v18;
          goto LABEL_20;
        }
      }
    }
  }
  v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_20:
  swift_bridgeObjectRelease();
  return v3;
}

void specialized _ArrayProtocol.filter(_:)(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  char *v19;
  char v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t (*v33)(char *);
  uint64_t v34;
  char *v35;
  uint64_t v36;

  v4 = v3;
  v33 = a1;
  v34 = a2;
  type metadata accessor for Date.ComponentsFormatStyle.Field?(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v31 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13.n128_f64[0] = MEMORY[0x24BDAC7A8](v12);
  v35 = (char *)&v26 - v14;
  v36 = MEMORY[0x24BEE4AF8];
  v32 = *(_QWORD *)(a3 + 16);
  if (v32)
  {
    v15 = 0;
    v30 = a3;
    while (v15 < *(_QWORD *)(a3 + 16))
    {
      v16 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
      v17 = *(_QWORD *)(v10 + 72);
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v10 + 16))(v8, a3 + v16 + v17 * v15, v9, v13);
      v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v10 + 56);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v29)(v8, 0, 1, v9);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
        goto LABEL_17;
      v18 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
      v19 = v35;
      v18(v35, v8, v9);
      v20 = v33(v19);
      if (v4)
      {
        (*(void (**)(char *, uint64_t))(v10 + 8))(v35, v9);
        swift_bridgeObjectRelease();
        swift_release();
        return;
      }
      if ((v20 & 1) != 0)
      {
        v18(v31, v35, v9);
        v21 = v36;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v28 = 0;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v21 + 16) + 1, 1);
          v21 = v36;
        }
        v24 = *(_QWORD *)(v21 + 16);
        v23 = *(_QWORD *)(v21 + 24);
        v25 = v24 + 1;
        if (v24 >= v23 >> 1)
        {
          v27 = v24 + 1;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
          v25 = v27;
          v21 = v36;
        }
        *(_QWORD *)(v21 + 16) = v25;
        v18((char *)(v21 + v16 + v24 * v17), v31, v9);
        v36 = v21;
        v4 = v28;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v10 + 8))(v35, v9);
      }
      a3 = v30;
      if (v32 == ++v15)
      {
        v29(v8, 1, 1, v9, v13);
        goto LABEL_17;
      }
    }
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v10 + 56))(v8, 1, 1, v9, v13);
LABEL_17:
    swift_bridgeObjectRelease();
    outlined destroy of TypesettingConfiguration((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for Date.ComponentsFormatStyle.Field?);
  }
}

uint64_t SystemFormatStyle.DateReference.calendar(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  outlined init with copy of TypesettingLanguage(v2, a2, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateReference);
  v5 = a2 + *(int *)(type metadata accessor for SystemFormatStyle.DateReference() + 40);
  v6 = type metadata accessor for Calendar();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(v5, a1, v6);
}

uint64_t SystemFormatStyle.DateReference.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_234A7B6D4 + 4 * byte_2352811A8[a1]))(1702125924, 0xE400000000000000);
}

uint64_t sub_234A7B6D4()
{
  return 0x466465776F6C6C61;
}

uint64_t sub_234A7B6F8()
{
  return 0x646C65694678616DLL;
}

uint64_t sub_234A7B71C()
{
  return 0x6C6F687365726874;
}

uint64_t sub_234A7B740()
{
  return 0x69726156657A6973;
}

uint64_t sub_234A7B760()
{
  return 0x656C61636F6CLL;
}

uint64_t sub_234A7B774()
{
  return 0x7261646E656C6163;
}

uint64_t sub_234A7B78C()
{
  return 0x656E6F5A656D6974;
}

unint64_t sub_234A7B7A4()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SystemFormatStyle.DateReference.CodingKeys()
{
  unsigned __int8 *v0;

  return SystemFormatStyle.DateReference.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SystemFormatStyle.DateReference.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized SystemFormatStyle.DateReference.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance SystemFormatStyle.DateReference.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SystemFormatStyle.DateReference.CodingKeys()
{
  lazy protocol witness table accessor for type SystemFormatStyle.DateReference.CodingKeys and conformance SystemFormatStyle.DateReference.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SystemFormatStyle.DateReference.CodingKeys()
{
  lazy protocol witness table accessor for type SystemFormatStyle.DateReference.CodingKeys and conformance SystemFormatStyle.DateReference.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t SystemFormatStyle.DateReference.format(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char *v24;
  char v25;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = a1;
  v33 = a2;
  v3 = type metadata accessor for Date.FormatStyle.Attributed();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date();
  v32 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v31 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ClosedRange<Date>?(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ClosedRange<Date>();
  v13 = v12;
  v14 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v28 - v18;
  v34 = v2;
  SystemFormatStyle.DateReference.relativeStyleInterval.getter((uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v11, 1, v13) == 1)
  {
    v20 = v35;
    outlined destroy of TypesettingConfiguration((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>?);
    v21 = v33;
    return SystemFormatStyle.DateReference.relativeText(for:)(v20, v21);
  }
  v28 = v6;
  v29 = v4;
  v30 = v3;
  outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v11, (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
  v20 = v35;
  v22 = dispatch thunk of static Comparable.>= infix(_:_:)();
  v24 = v31;
  v23 = v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v31, v20, v7);
  outlined init with copy of TypesettingLanguage((uint64_t)v19, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  if ((v22 & 1) != 0)
  {
    v25 = dispatch thunk of static Comparable.<= infix(_:_:)();
    outlined destroy of TypesettingConfiguration((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v24, v7);
    v21 = v33;
    if ((v25 & 1) != 0)
    {
      outlined destroy of TypesettingConfiguration((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
      return SystemFormatStyle.DateReference.relativeText(for:)(v20, v21);
    }
  }
  else
  {
    outlined destroy of TypesettingConfiguration((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v24, v7);
  }
  v27 = (uint64_t)v28;
  SystemFormatStyle.DateReference.absoluteStyle(for:)(v20, (uint64_t)v28);
  Date.FormatStyle.Attributed.format(_:)();
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v27, v30);
  return outlined destroy of TypesettingConfiguration((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
}

uint64_t SystemFormatStyle.DateReference.relativeStyleInterval.getter@<X0>(uint64_t a1@<X8>)
{
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  double v68;
  char *v69;
  void (*v70)(char *, uint64_t);
  char *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  _QWORD *v75;
  void (*v76)(uint64_t);
  uint64_t v77;
  char *v78;
  _QWORD *v79;
  unsigned int (*v80)(char *, uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  void (*v85)(char *, uint64_t);
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  char v90;
  uint64_t result;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  void (*v96)(char *, char *, uint64_t);
  _QWORD *v97;
  char *v98;
  char *v99;
  void (*v100)(char *, char *, uint64_t);
  char *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  void (*v106)(char *, char *, uint64_t);
  char *v107;
  char *v108;
  uint64_t v109;
  char *v110;
  char v111;
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  char v116;
  char *v117;
  void (*v118)(char *, uint64_t);
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  char *v127;
  void (*v128)(char *, char *, uint64_t);
  char *v129;
  char *v130;
  char *v131;
  char *v132;
  char *v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  char *v138;
  char *v139;
  char *v140;
  uint64_t v141;
  char *v142;
  char *v143;
  char *v144;
  char *v145;
  char *v146;
  char *v147;
  uint64_t v148;
  char *v149;
  char *v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  double v165;
  double v166;

  v2 = v1;
  v164 = a1;
  type metadata accessor for Date?(0);
  MEMORY[0x24BDAC7A8](v3);
  v138 = (char *)&v132 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v132 - v6;
  type metadata accessor for (lower: Date, upper: Date)();
  v141 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v143 = (char *)&v132 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v140 = (char *)&v132 - v11;
  type metadata accessor for ClosedRange<Date>();
  v13 = v12;
  v14 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v142 = (char *)&v132 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = type metadata accessor for Date();
  v159 = *(_QWORD **)(v154 - 8);
  MEMORY[0x24BDAC7A8](v154);
  v133 = (char *)&v132 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v135 = (char *)&v132 - v18;
  MEMORY[0x24BDAC7A8](v19);
  v139 = (char *)&v132 - v20;
  MEMORY[0x24BDAC7A8](v21);
  v134 = (char *)&v132 - v22;
  MEMORY[0x24BDAC7A8](v23);
  v144 = (char *)&v132 - v24;
  MEMORY[0x24BDAC7A8](v25);
  v150 = (char *)&v132 - v26;
  MEMORY[0x24BDAC7A8](v27);
  v149 = (char *)&v132 - v28;
  MEMORY[0x24BDAC7A8](v29);
  v137 = (char *)&v132 - v30;
  MEMORY[0x24BDAC7A8](v31);
  v151 = (char *)&v132 - v32;
  MEMORY[0x24BDAC7A8](v33);
  v147 = (char *)&v132 - v34;
  MEMORY[0x24BDAC7A8](v35);
  v136 = (char *)&v132 - v36;
  type metadata accessor for DateInterval?(0);
  MEMORY[0x24BDAC7A8](v37);
  v146 = (char *)&v132 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = type metadata accessor for DateInterval();
  v153 = *(_QWORD *)(v148 - 8);
  MEMORY[0x24BDAC7A8](v148);
  v152 = (char *)&v132 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for Calendar.Component();
  v156 = *(_QWORD *)(v40 - 8);
  v157 = v40;
  MEMORY[0x24BDAC7A8](v40);
  v161 = (uint64_t)&v132 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Date.ComponentsFormatStyle.Field?(0);
  MEMORY[0x24BDAC7A8](v42);
  v44 = (char *)&v132 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  v46 = *(_QWORD *)(v45 - 8);
  MEMORY[0x24BDAC7A8](v45);
  v132 = (char *)&v132 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v48);
  v158 = (char *)&v132 - v49;
  MEMORY[0x24BDAC7A8](v50);
  v162 = (char *)&v132 - v51;
  v52 = type metadata accessor for SystemFormatStyle.DateReference();
  v53 = *(_QWORD *)&v2[*(int *)(v52 + 20)];
  v54 = *(_QWORD *)(v53 + 16);
  v163 = v13;
  v155 = v2;
  if (v54)
  {
    v145 = v7;
    v160 = v14;
    v55 = (*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
    v56 = *(_QWORD *)(v46 + 72);
    swift_bridgeObjectRetain();
    v57 = v53 + v55 + v56 * (v54 - 1);
    v58 = -v56;
    while (1)
    {
      Date.ComponentsFormatStyle.Field.magnitude.getter(&v166);
      v59 = v166;
      Date.ComponentsFormatStyle.Field.magnitude.getter(&v165);
      if (v165 < v59)
        break;
      v57 += v58;
      if (!--v54)
      {
        v60 = 1;
        v13 = v163;
        v14 = v160;
        goto LABEL_8;
      }
    }
    (*(void (**)(char *, uint64_t, uint64_t, double))(v46 + 16))(v44, v57, v45, v165);
    v60 = 0;
    v13 = v163;
    v14 = v160;
LABEL_8:
    v7 = v145;
  }
  else
  {
    swift_bridgeObjectRetain();
    v60 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v46 + 56))(v44, v60, 1, v45);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45) == 1)
  {
    outlined destroy of TypesettingConfiguration((uint64_t)v44, (uint64_t (*)(_QWORD))type metadata accessor for Date.ComponentsFormatStyle.Field?);
    v61 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v164, v61, 1, v13);
  }
  v62 = v7;
  v63 = v162;
  (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v162, v44, v45);
  v64 = v161;
  v65 = (uint64_t)v63;
  v66 = v155;
  SystemFormatStyle.DateReference.component(for:)(v65, v161);
  v67 = &v66[*(int *)(v52 + 28)];
  Date.ComponentsFormatStyle.Field.magnitude.getter(&v166);
  v68 = v166;
  v69 = v158;
  static Date.ComponentsFormatStyle.Style.spellOut.getter();
  Date.ComponentsFormatStyle.Field.magnitude.getter(&v165);
  v70 = *(void (**)(char *, uint64_t))(v46 + 8);
  v70(v69, v45);
  if (v165 < v68)
  {
    v71 = v146;
    Calendar.dateInterval(of:for:)();
    v72 = v153;
    v73 = v148;
    v74 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v153 + 48))(v71, 1, v148);
    v75 = v159;
    if (v74 == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v156 + 8))(v64, v157);
      v70(v162, v45);
      v76 = type metadata accessor for DateInterval?;
      v77 = (uint64_t)v71;
LABEL_21:
      outlined destroy of TypesettingConfiguration(v77, (uint64_t (*)(_QWORD))v76);
      v61 = 1;
      v13 = v163;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v164, v61, 1, v13);
    }
    (*(void (**)(char *, char *, uint64_t))(v72 + 32))(v152, v71, v73);
    v84 = v151;
    DateInterval.start.getter();
    static Date.- infix(_:_:)();
    v85 = (void (*)(char *, uint64_t))v75[1];
    v86 = v154;
    v85(v84, v154);
    Date.timeIntervalSinceReferenceDate.getter();
    v87 = v136;
    Date.init(timeIntervalSinceReferenceDate:)();
    v85(v147, v86);
    DateInterval.end.getter();
    static Date.- infix(_:_:)();
    v85(v84, v86);
    Date.timeIntervalSinceReferenceDate.getter();
    v88 = v153;
    v160 = v14;
    v89 = v137;
    Date.init(timeIntervalSinceReferenceDate:)();
    v85(v149, v86);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
    v90 = dispatch thunk of static Comparable.<= infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v88 + 8))(v152, v73);
    (*(void (**)(uint64_t, uint64_t))(v156 + 8))(v161, v157);
    result = ((uint64_t (*)(char *, uint64_t))v70)(v162, v45);
    if ((v90 & 1) != 0)
    {
      v92 = v87;
      v93 = v141;
      v94 = v140;
      v95 = &v140[*(int *)(v141 + 48)];
      v96 = (void (*)(char *, char *, uint64_t))v75[4];
      v96(v140, v92, v86);
      v96(v95, v89, v86);
      v97 = v75;
      v98 = v143;
      v99 = &v143[*(int *)(v93 + 48)];
      v100 = (void (*)(char *, char *, uint64_t))v97[2];
      v100(v143, v94, v86);
      v100(v99, v95, v86);
      v101 = v142;
      v96(v142, v98, v86);
      v85(v99, v86);
      v102 = &v98[*(int *)(v93 + 48)];
      v96(v98, v94, v86);
      v96(v102, v95, v86);
      v103 = v102;
      v13 = v163;
      v96(&v101[*(int *)(v163 + 36)], v103, v86);
      v85(v98, v86);
      v104 = (uint64_t)v101;
LABEL_28:
      outlined init with take of LocalizedStringKey.FormatArgument(v104, v164, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
      v61 = 0;
      v14 = v160;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v164, v61, 1, v13);
    }
    __break(1u);
    goto LABEL_31;
  }
  v149 = v67;
  v78 = (char *)v70;
  v153 = v45;
  Calendar.date(byAdding:value:to:wrappingComponents:)();
  v79 = v159;
  v80 = (unsigned int (*)(char *, uint64_t, uint64_t))v159[6];
  v81 = v154;
  if (v80(v62, 1, v154) == 1)
  {
    v82 = (uint64_t)v62;
    v83 = v153;
LABEL_20:
    (*(void (**)(uint64_t, uint64_t))(v156 + 8))(v161, v157);
    ((void (*)(char *, uint64_t))v78)(v162, v83);
    v76 = type metadata accessor for Date?;
    v77 = v82;
    goto LABEL_21;
  }
  v152 = v78;
  v160 = v14;
  v105 = v150;
  v106 = (void (*)(char *, char *, uint64_t))v79[4];
  v106(v150, v62, v81);
  v107 = v138;
  Calendar.date(byAdding:value:to:wrappingComponents:)();
  v82 = (uint64_t)v107;
  if (v80(v107, 1, v81) == 1)
  {
    ((void (*)(char *, uint64_t))v79[1])(v105, v81);
    v14 = v160;
    v78 = v152;
    v83 = v153;
    goto LABEL_20;
  }
  v155 = (char *)v106;
  v106(v144, v107, v81);
  v108 = v132;
  v109 = v153;
  (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v132, v149, v153);
  v110 = v158;
  static Date.ComponentsFormatStyle.Style.spellOut.getter();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], MEMORY[0x24BDCE6E8]);
  v111 = dispatch thunk of static Equatable.== infix(_:_:)();
  v112 = v152;
  ((void (*)(char *, uint64_t))v152)(v110, v109);
  if ((v111 & 1) != 0)
  {
    v113 = v135;
    v114 = v134;
    v115 = v133;
  }
  else
  {
    static Date.ComponentsFormatStyle.Field.minute.getter();
    v116 = dispatch thunk of static Equatable.== infix(_:_:)();
    ((void (*)(char *, uint64_t))v112)(v110, v109);
    v113 = v135;
    v114 = v134;
    v115 = v133;
    if ((v116 & 1) == 0)
    {
      static Date.ComponentsFormatStyle.Field.second.getter();
      dispatch thunk of static Equatable.== infix(_:_:)();
      ((void (*)(char *, uint64_t))v112)(v110, v109);
    }
  }
  ((void (*)(char *, uint64_t))v112)(v108, v109);
  v117 = v151;
  static Date.+ infix(_:_:)();
  static Date.+ infix(_:_:)();
  v118 = (void (*)(char *, uint64_t))v159[1];
  v119 = v154;
  v118(v117, v154);
  Date.timeIntervalSinceReferenceDate.getter();
  Date.init(timeIntervalSinceReferenceDate:)();
  v118(v139, v119);
  v120 = v151;
  static Date.- infix(_:_:)();
  static Date.- infix(_:_:)();
  v118(v120, v119);
  Date.timeIntervalSinceReferenceDate.getter();
  v121 = v152;
  Date.init(timeIntervalSinceReferenceDate:)();
  v118(v115, v119);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
  LOBYTE(v120) = dispatch thunk of static Comparable.<= infix(_:_:)();
  v118(v144, v119);
  v118(v150, v119);
  (*(void (**)(uint64_t, uint64_t))(v156 + 8))(v161, v157);
  result = ((uint64_t (*)(char *, uint64_t))v121)(v162, v109);
  if ((v120 & 1) != 0)
  {
    v122 = v141;
    v123 = v140;
    v124 = &v140[*(int *)(v141 + 48)];
    v125 = v155;
    ((void (*)(char *, char *, uint64_t))v155)(v140, v114, v119);
    ((void (*)(char *, char *, uint64_t))v125)(v124, v113, v119);
    v126 = v143;
    v127 = &v143[*(int *)(v122 + 48)];
    v128 = (void (*)(char *, char *, uint64_t))v159[2];
    v128(v143, v123, v119);
    v128(v127, v124, v119);
    v129 = v142;
    ((void (*)(char *, char *, uint64_t))v125)(v142, v126, v119);
    v118(v127, v119);
    v130 = &v126[*(int *)(v122 + 48)];
    ((void (*)(char *, char *, uint64_t))v125)(v126, v123, v119);
    ((void (*)(char *, char *, uint64_t))v125)(v130, v124, v119);
    v131 = v130;
    v13 = v163;
    ((void (*)(char *, char *, uint64_t))v125)(&v129[*(int *)(v163 + 36)], v131, v119);
    v118(v126, v119);
    v104 = (uint64_t)v129;
    goto LABEL_28;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t SystemFormatStyle.DateReference.absoluteStyle(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v55 = a1;
  v42 = a2;
  v3 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Date.ComponentsFormatStyle.Field?(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for FormatStyleCapitalizationContext();
  v53 = *(_QWORD *)(v10 - 8);
  v54 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v52 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for TimeZone();
  v12 = *(_QWORD *)(v51 - 8);
  MEMORY[0x24BDAC7A8](v51);
  v50 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Calendar();
  v48 = *(_QWORD *)(v14 - 8);
  v49 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v47 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Locale();
  v45 = *(_QWORD *)(v16 - 8);
  v46 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = v18;
  v19 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date.FormatStyle.TimeStyle?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDEE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v40 - v21;
  v44 = (char *)&v40 - v21;
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date.FormatStyle.DateStyle?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDF30], v19);
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v40 - v24;
  v26 = type metadata accessor for Date.FormatStyle();
  v40 = *(_QWORD *)(v26 - 8);
  v41 = v26;
  MEMORY[0x24BDAC7A8](v26);
  v28 = (char *)&v40 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for Date.FormatStyle.DateStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v25, 1, 1, v29);
  v30 = type metadata accessor for Date.FormatStyle.TimeStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v22, 1, 1, v30);
  v31 = (int *)type metadata accessor for SystemFormatStyle.DateReference();
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v18, v2 + v31[9], v46);
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v47, v2 + v31[10], v49);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v50, v2 + v31[11], v51);
  (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v52, v2 + v31[12], v54);
  Date.FormatStyle.init(date:time:locale:calendar:timeZone:capitalizationContext:)();
  result = SystemFormatStyle.DateReference.fieldsToShowInAbsoluteStyle(for:)(v55);
  v55 = result;
  v36 = v35 >> 1;
  if (v34 == v35 >> 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v9, 1, 1, v3);
LABEL_8:
    swift_unknownObjectRelease();
    Date.FormatStyle.attributedStyle.getter();
    return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v28, v41);
  }
  else
  {
    v37 = v33;
    v38 = v34;
    while (v38 < v36)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v9, v37 + *(_QWORD *)(v4 + 72) * v38, v3);
      v39 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
      v39(v9, 0, 1, v3);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
        goto LABEL_8;
      ++v38;
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v9, v3);
      SystemFormatStyle.DateReference.add(_:to:)(v6, (uint64_t)v28);
      result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      if (v36 == v38)
      {
        v39(v9, 1, 1, v3);
        goto LABEL_8;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t SystemFormatStyle.DateReference.relativeText(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  char *v63;
  char v64;
  void (*v65)(char *, uint64_t);
  uint64_t v66;
  void (*v67)(char *, uint64_t, uint64_t);
  uint64_t v68;
  char *v69;
  char v70;
  void (*v71)(char *, uint64_t);
  uint64_t v72;
  void (*v74)(uint64_t, uint64_t, uint64_t);
  uint64_t v75;
  char *v76;
  char v77;
  void (*v78)(char *, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char v99[9];

  v95 = a2;
  v97 = (char *)type metadata accessor for Date.ComponentsFormatStyle.Field();
  v4 = *((_QWORD *)v97 - 1);
  MEMORY[0x24BDAC7A8](v97);
  v82 = (char *)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (Date.ComponentsFormatStyle.Field?, Date.ComponentsFormatStyle.Field?)();
  v98 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v81 = (uint64_t)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v86 = (char *)&v79 - v9;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v79 - v11;
  type metadata accessor for Date.ComponentsFormatStyle.Field?(0);
  MEMORY[0x24BDAC7A8](v13);
  v79 = (uint64_t)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v84 = (uint64_t)&v79 - v16;
  MEMORY[0x24BDAC7A8](v17);
  v80 = (uint64_t)&v79 - v18;
  MEMORY[0x24BDAC7A8](v19);
  v85 = (char *)&v79 - v20;
  MEMORY[0x24BDAC7A8](v21);
  v83 = (uint64_t)&v79 - v22;
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v79 - v24;
  MEMORY[0x24BDAC7A8](v26);
  v28 = (char *)&v79 - v27;
  v29 = type metadata accessor for AttributeContainer();
  MEMORY[0x24BDAC7A8](v29);
  v30 = type metadata accessor for AttributedString();
  v93 = *(_QWORD *)(v30 - 8);
  v94 = v30;
  MEMORY[0x24BDAC7A8](v30);
  v87 = (uint64_t)&v79 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v32);
  v34 = (char *)&v79 - v33;
  v35 = type metadata accessor for Date.AnchoredRelativeFormatStyle();
  v90 = *(_QWORD *)(v35 - 8);
  v91 = v35;
  MEMORY[0x24BDAC7A8](v35);
  v37 = (char *)&v79 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  SystemFormatStyle.DateReference.relativeStyle.getter((uint64_t)v37);
  v88 = a1;
  v96 = v37;
  Date.AnchoredRelativeFormatStyle.format(_:)();
  AttributeContainer.init()();
  v92 = v34;
  AttributedString.init(_:attributes:)();
  v99[0] = 2;
  v38 = *(int *)(type metadata accessor for SystemFormatStyle.DateReference() + 20);
  v89 = v2;
  v39 = *(_QWORD *)(v2 + v38);
  v40 = *(_QWORD *)(v39 + 16);
  if (v40)
  {
    v41 = (uint64_t)v97;
    (*(void (**)(char *, unint64_t, char *))(v4 + 16))(v28, v39+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * (v40 - 1), v97);
    v42 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v42(v28, 0, 1, v41);
  }
  else
  {
    v42 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v41 = (uint64_t)v97;
    v42(v28, 1, 1, (uint64_t)v97);
  }
  v43 = v4;
  v44 = v98;
  static Date.ComponentsFormatStyle.Style.spellOut.getter();
  v42(v25, 0, 1, v41);
  v45 = (uint64_t)&v12[*(int *)(v44 + 48)];
  outlined init with copy of TypesettingLanguage((uint64_t)v25, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for Date.ComponentsFormatStyle.Field?);
  v97 = v28;
  outlined init with copy of TypesettingLanguage((uint64_t)v28, v45, (uint64_t (*)(_QWORD))type metadata accessor for Date.ComponentsFormatStyle.Field?);
  v46 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48);
  if (v46((uint64_t)v12, 1, v41) == 1)
  {
    outlined destroy of TypesettingConfiguration((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for Date.ComponentsFormatStyle.Field?);
    if (v46(v45, 1, v41) == 1)
      goto LABEL_12;
    goto LABEL_9;
  }
  v47 = v83;
  outlined init with copy of TypesettingLanguage((uint64_t)v12, v83, (uint64_t (*)(_QWORD))type metadata accessor for Date.ComponentsFormatStyle.Field?);
  if (v46(v45, 1, v41) == 1)
  {
    outlined destroy of TypesettingConfiguration((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for Date.ComponentsFormatStyle.Field?);
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v47, v41);
LABEL_9:
    outlined destroy of TypesettingConfiguration((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for (Date.ComponentsFormatStyle.Field?, Date.ComponentsFormatStyle.Field?));
    goto LABEL_10;
  }
  v63 = v82;
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 32))(v82, v45, v41);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], MEMORY[0x24BDCE6E8]);
  v64 = dispatch thunk of static Equatable.== infix(_:_:)();
  v65 = *(void (**)(char *, uint64_t))(v43 + 8);
  v65(v63, v41);
  outlined destroy of TypesettingConfiguration((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for Date.ComponentsFormatStyle.Field?);
  v65((char *)v47, v41);
  outlined destroy of TypesettingConfiguration((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for Date.ComponentsFormatStyle.Field?);
  if ((v64 & 1) != 0)
  {
    v52 = v94;
    v51 = v95;
    v54 = (uint64_t)v92;
    v53 = v93;
    v56 = v90;
    v55 = v91;
    goto LABEL_21;
  }
LABEL_10:
  v48 = (uint64_t)v85;
  static Date.ComponentsFormatStyle.Field.minute.getter();
  v42((char *)v48, 0, 1, v41);
  v12 = v86;
  v49 = (uint64_t)&v86[*(int *)(v98 + 48)];
  outlined init with copy of TypesettingLanguage(v48, (uint64_t)v86, (uint64_t (*)(_QWORD))type metadata accessor for Date.ComponentsFormatStyle.Field?);
  outlined init with copy of TypesettingLanguage((uint64_t)v97, v49, (uint64_t (*)(_QWORD))type metadata accessor for Date.ComponentsFormatStyle.Field?);
  if (v46((uint64_t)v12, 1, v41) == 1)
  {
    outlined destroy of TypesettingConfiguration(v48, (uint64_t (*)(_QWORD))type metadata accessor for Date.ComponentsFormatStyle.Field?);
    v50 = v43;
    if (v46(v49, 1, v41) == 1)
    {
LABEL_12:
      v52 = v94;
      v51 = v95;
      v54 = (uint64_t)v92;
      v53 = v93;
      v56 = v90;
      v55 = v91;
      outlined destroy of TypesettingConfiguration((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for Date.ComponentsFormatStyle.Field?);
LABEL_21:
      v58 = v96;
LABEL_28:
      outlined destroy of TypesettingConfiguration((uint64_t)v97, (uint64_t (*)(_QWORD))type metadata accessor for Date.ComponentsFormatStyle.Field?);
      goto LABEL_29;
    }
    goto LABEL_15;
  }
  v57 = v80;
  outlined init with copy of TypesettingLanguage((uint64_t)v12, v80, (uint64_t (*)(_QWORD))type metadata accessor for Date.ComponentsFormatStyle.Field?);
  if (v46(v49, 1, v41) == 1)
  {
    outlined destroy of TypesettingConfiguration(v48, (uint64_t (*)(_QWORD))type metadata accessor for Date.ComponentsFormatStyle.Field?);
    v50 = v43;
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v57, v41);
LABEL_15:
    outlined destroy of TypesettingConfiguration((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for (Date.ComponentsFormatStyle.Field?, Date.ComponentsFormatStyle.Field?));
    v58 = v96;
    goto LABEL_16;
  }
  v50 = v43;
  v67 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 32);
  v68 = v48;
  v69 = v82;
  v67(v82, v49, v41);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], MEMORY[0x24BDCE6E8]);
  v70 = dispatch thunk of static Equatable.== infix(_:_:)();
  v71 = *(void (**)(char *, uint64_t))(v50 + 8);
  v71(v69, v41);
  outlined destroy of TypesettingConfiguration(v68, (uint64_t (*)(_QWORD))type metadata accessor for Date.ComponentsFormatStyle.Field?);
  v71((char *)v57, v41);
  outlined destroy of TypesettingConfiguration((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for Date.ComponentsFormatStyle.Field?);
  v58 = v96;
  if ((v70 & 1) != 0)
  {
    v51 = v95;
    goto LABEL_27;
  }
LABEL_16:
  v59 = v84;
  static Date.ComponentsFormatStyle.Field.second.getter();
  v42((char *)v59, 0, 1, v41);
  v60 = v81;
  v61 = v81 + *(int *)(v98 + 48);
  outlined init with copy of TypesettingLanguage(v59, v81, (uint64_t (*)(_QWORD))type metadata accessor for Date.ComponentsFormatStyle.Field?);
  outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v97, v61, (uint64_t (*)(_QWORD))type metadata accessor for Date.ComponentsFormatStyle.Field?);
  if (v46(v60, 1, v41) == 1)
  {
    outlined destroy of TypesettingConfiguration(v59, (uint64_t (*)(_QWORD))type metadata accessor for Date.ComponentsFormatStyle.Field?);
    v62 = v46(v61, 1, v41);
    v51 = v95;
    if (v62 == 1)
    {
      v97 = (char *)v60;
LABEL_27:
      v53 = v93;
      v52 = v94;
      v55 = v91;
      v54 = (uint64_t)v92;
      v56 = v90;
      goto LABEL_28;
    }
    goto LABEL_24;
  }
  v66 = v79;
  outlined init with copy of TypesettingLanguage(v60, v79, (uint64_t (*)(_QWORD))type metadata accessor for Date.ComponentsFormatStyle.Field?);
  if (v46(v61, 1, v41) == 1)
  {
    outlined destroy of TypesettingConfiguration(v84, (uint64_t (*)(_QWORD))type metadata accessor for Date.ComponentsFormatStyle.Field?);
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v66, v41);
    v51 = v95;
LABEL_24:
    outlined destroy of TypesettingConfiguration(v60, (uint64_t (*)(_QWORD))type metadata accessor for (Date.ComponentsFormatStyle.Field?, Date.ComponentsFormatStyle.Field?));
    v53 = v93;
    v52 = v94;
    v55 = v91;
    v54 = (uint64_t)v92;
    v56 = v90;
LABEL_33:
    (*(void (**)(char *, uint64_t))(v56 + 8))(v58, v55);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v53 + 32))(v51, v54, v52);
  }
  v76 = v82;
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 32))(v82, v61, v41);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], MEMORY[0x24BDCE6E8]);
  v77 = dispatch thunk of static Equatable.== infix(_:_:)();
  v78 = *(void (**)(char *, uint64_t))(v50 + 8);
  v78(v76, v41);
  outlined destroy of TypesettingConfiguration(v84, (uint64_t (*)(_QWORD))type metadata accessor for Date.ComponentsFormatStyle.Field?);
  v78((char *)v66, v41);
  outlined destroy of TypesettingConfiguration(v60, (uint64_t (*)(_QWORD))type metadata accessor for Date.ComponentsFormatStyle.Field?);
  v52 = v94;
  v51 = v95;
  v54 = (uint64_t)v92;
  v53 = v93;
  v56 = v90;
  v55 = v91;
  if ((v77 & 1) == 0)
    goto LABEL_33;
LABEL_29:
  if ((specialized getter of showsZeroValue #1 in SystemFormatStyle.DateReference.relativeText(for:)(v99, v88, v89) & 1) != 0)
  {
    v72 = v87;
    SystemFormatStyle.DateReference.nowString(_:)(v54, v87);
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v54, v52);
    (*(void (**)(char *, uint64_t))(v56 + 8))(v58, v55);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v53 + 32))(v51, v72, v52);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v56 + 8))(v58, v55);
    v74 = *(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 32);
    v75 = v87;
    v74(v87, v54, v52);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v74)(v51, v75, v52);
  }
}

uint64_t SystemFormatStyle.DateReference.locale(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  outlined init with copy of TypesettingLanguage(v2, a2, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateReference);
  v5 = a2 + *(int *)(type metadata accessor for SystemFormatStyle.DateReference() + 36);
  v6 = type metadata accessor for Locale();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(v5, a1, v6);
}

uint64_t SystemFormatStyle.DateReference.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  uint64_t v5;

  v2 = v1;
  type metadata accessor for Date();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
  dispatch thunk of Hashable.hash(into:)();
  v4 = (int *)type metadata accessor for SystemFormatStyle.DateReference();
  v5 = *(_QWORD *)(v1 + v4[5]);
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v5);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(_QWORD *)(v2 + v4[6]));
  type metadata accessor for Date.ComponentsFormatStyle.Field();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], MEMORY[0x24BDCE6E0]);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(_QWORD *)(v2 + v4[8]));
  type metadata accessor for Locale();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Locale and conformance Locale, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], MEMORY[0x24BDCEED0]);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for Calendar();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Calendar and conformance Calendar, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], MEMORY[0x24BDCF300]);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for TimeZone();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], MEMORY[0x24BDCF530]);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for FormatStyleCapitalizationContext();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext, (uint64_t (*)(uint64_t))MEMORY[0x24BDCD6D8], MEMORY[0x24BDCD6F0]);
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t SystemFormatStyle.DateReference.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v3 = v1;
  type metadata accessor for KeyedEncodingContainer<SystemFormatStyle.DateReference.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<SystemFormatStyle.DateReference.CodingKeys>, (uint64_t (*)(uint64_t, void *, unint64_t))MEMORY[0x24BEE3520]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v12 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SystemFormatStyle.DateReference.CodingKeys and conformance SystemFormatStyle.DateReference.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v13) = 0;
  type metadata accessor for Date();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE920]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v10 = type metadata accessor for SystemFormatStyle.DateReference();
    v13 = *(_QWORD *)(v3 + *(int *)(v10 + 20));
    HIBYTE(v12) = 1;
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [Date.ComponentsFormatStyle.Field], (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    lazy protocol witness table accessor for type [Date.ComponentsFormatStyle.Field] and conformance <A> [A](&lazy protocol witness table cache variable for type [Date.ComponentsFormatStyle.Field] and conformance <A> [A], &lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x24BDCE6D8], MEMORY[0x24BEE12A0]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v13) = 3;
    type metadata accessor for Date.ComponentsFormatStyle.Field();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], MEMORY[0x24BDCE6D8]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v13 = *(_QWORD *)(v3 + *(int *)(v10 + 32));
    HIBYTE(v12) = 4;
    lazy protocol witness table accessor for type TextSizeVariant and conformance TextSizeVariant();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 5;
    type metadata accessor for Locale();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Locale and conformance Locale, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], MEMORY[0x24BDCEEC8]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 6;
    type metadata accessor for Calendar();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Calendar and conformance Calendar, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], MEMORY[0x24BDCF2F8]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 7;
    type metadata accessor for TimeZone();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], MEMORY[0x24BDCF528]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 8;
    type metadata accessor for FormatStyleCapitalizationContext();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext, (uint64_t (*)(uint64_t))MEMORY[0x24BDCD6D8], MEMORY[0x24BDCD6E8]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

Swift::Int SystemFormatStyle.DateReference.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  _BYTE v5[72];

  v1 = v0;
  Hasher.init(_seed:)();
  type metadata accessor for Date();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
  dispatch thunk of Hashable.hash(into:)();
  v2 = (int *)type metadata accessor for SystemFormatStyle.DateReference();
  v3 = *(_QWORD *)(v0 + v2[5]);
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v5, v3);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(_QWORD *)(v1 + v2[6]));
  type metadata accessor for Date.ComponentsFormatStyle.Field();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], MEMORY[0x24BDCE6E0]);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(_QWORD *)(v1 + v2[8]));
  type metadata accessor for Locale();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Locale and conformance Locale, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], MEMORY[0x24BDCEED0]);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for Calendar();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Calendar and conformance Calendar, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], MEMORY[0x24BDCF300]);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for TimeZone();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], MEMORY[0x24BDCF530]);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for FormatStyleCapitalizationContext();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext, (uint64_t (*)(uint64_t))MEMORY[0x24BDCD6D8], MEMORY[0x24BDCD6F0]);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t SystemFormatStyle.DateReference.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  int *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  int *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  _QWORD *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;

  v46 = a2;
  v3 = type metadata accessor for FormatStyleCapitalizationContext();
  v59 = *(_QWORD *)(v3 - 8);
  v60 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v47 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = type metadata accessor for TimeZone();
  v64 = *(_QWORD *)(v58 - 8);
  MEMORY[0x24BDAC7A8](v58);
  v48 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = type metadata accessor for Calendar();
  v67 = *(_QWORD *)(v70 - 8);
  MEMORY[0x24BDAC7A8](v70);
  v49 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for Locale();
  v69 = *(_QWORD *)(v71 - 8);
  MEMORY[0x24BDAC7A8](v71);
  v50 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  v51 = *(_QWORD *)(v52 - 8);
  MEMORY[0x24BDAC7A8](v52);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date();
  v57 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v53 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedEncodingContainer<SystemFormatStyle.DateReference.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<SystemFormatStyle.DateReference.CodingKeys>, (uint64_t (*)(uint64_t, void *, unint64_t))MEMORY[0x24BEE33E0]);
  v54 = v12;
  v13 = *(char **)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v44 - v14;
  v16 = (int *)type metadata accessor for SystemFormatStyle.DateReference();
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(int *)(v19 + 32);
  *(_QWORD *)&v18[v20] = 0;
  v68 = &v18[*(int *)(v19 + 36)];
  static Locale.autoupdatingCurrent.getter();
  v66 = &v18[v16[10]];
  static Calendar.autoupdatingCurrent.getter();
  v65 = &v18[v16[11]];
  v21 = static TimeZone.autoupdatingCurrent.getter();
  v56 = v16;
  v61 = &v18[v16[12]];
  MEMORY[0x23B7C4858](v21);
  v22 = a1[3];
  v62 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v22);
  lazy protocol witness table accessor for type SystemFormatStyle.DateReference.CodingKeys and conformance SystemFormatStyle.DateReference.CodingKeys();
  v55 = v15;
  v23 = v63;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v23)
  {
    v25 = v64;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
    v26 = v58;
    v27 = v59;
    v28 = v70;
    v29 = v61;
    v30 = v60;
    (*(void (**)(char *, uint64_t))(v69 + 8))(v68, v71);
    (*(void (**)(char *, uint64_t))(v67 + 8))(v66, v28);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v65, v26);
    return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v29, v30);
  }
  else
  {
    v45 = v20;
    v63 = v9;
    LOBYTE(v73) = 0;
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE960]);
    v24 = v53;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v18, v24, v10);
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [Date.ComponentsFormatStyle.Field], (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v72 = 1;
    lazy protocol witness table accessor for type [Date.ComponentsFormatStyle.Field] and conformance <A> [A](&lazy protocol witness table cache variable for type [Date.ComponentsFormatStyle.Field] and conformance <A> [A], &lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x24BDCE6F0], MEMORY[0x24BEE12D0]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v31 = v56;
    *(_QWORD *)&v18[v56[5]] = v73;
    LOBYTE(v73) = 2;
    *(_QWORD *)&v18[v31[6]] = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v73) = 3;
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], MEMORY[0x24BDCE6F0]);
    v32 = v63;
    v33 = v52;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v44 = v10;
    (*(void (**)(char *, char *, uint64_t))(v51 + 32))(&v18[v31[7]], v32, v33);
    v72 = 4;
    lazy protocol witness table accessor for type TextSizeVariant and conformance TextSizeVariant();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v34 = v60;
    v63 = v13;
    *(_QWORD *)&v18[v45] = v73;
    LOBYTE(v73) = 5;
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Locale and conformance Locale, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], MEMORY[0x24BDCEEE8]);
    v35 = v50;
    v36 = v71;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v37 = v61;
    (*(void (**)(char *, char *, uint64_t))(v69 + 40))(v68, v35, v36);
    LOBYTE(v73) = 6;
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Calendar and conformance Calendar, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], MEMORY[0x24BDCF310]);
    v38 = v49;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v39 = v58;
    v40 = v59;
    (*(void (**)(char *, char *, uint64_t))(v67 + 40))(v66, v38, v70);
    LOBYTE(v73) = 7;
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], MEMORY[0x24BDCF540]);
    v41 = v48;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, char *, uint64_t))(v64 + 40))(v65, v41, v39);
    LOBYTE(v73) = 8;
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext, (uint64_t (*)(uint64_t))MEMORY[0x24BDCD6D8], MEMORY[0x24BDCD700]);
    v42 = v47;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*((void (**)(char *, uint64_t))v63 + 1))(v55, v54);
    (*(void (**)(char *, char *, uint64_t))(v40 + 40))(v37, v42, v34);
    outlined init with copy of TypesettingLanguage((uint64_t)v18, v46, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateReference);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
    return outlined destroy of TypesettingConfiguration((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateReference);
  }
}

uint64_t protocol witness for FormatStyle.locale(_:) in conformance SystemFormatStyle.DateReference@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;

  outlined init with copy of TypesettingLanguage(v3, a3, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateReference);
  v7 = a3 + *(int *)(a2 + 36);
  v8 = type metadata accessor for Locale();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 24))(v7, a1, v8);
}

uint64_t protocol witness for Decodable.init(from:) in conformance SystemFormatStyle.DateReference@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SystemFormatStyle.DateReference.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SystemFormatStyle.DateReference(_QWORD *a1)
{
  return SystemFormatStyle.DateReference.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SystemFormatStyle.DateReference(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[72];

  v4 = v2;
  Hasher.init(_seed:)();
  type metadata accessor for Date();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
  dispatch thunk of Hashable.hash(into:)();
  v5 = *(_QWORD *)(v2 + a2[5]);
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v7, v5);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(_QWORD *)(v4 + a2[6]));
  type metadata accessor for Date.ComponentsFormatStyle.Field();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], MEMORY[0x24BDCE6E0]);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(_QWORD *)(v4 + a2[8]));
  type metadata accessor for Locale();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Locale and conformance Locale, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], MEMORY[0x24BDCEED0]);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for Calendar();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Calendar and conformance Calendar, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], MEMORY[0x24BDCF300]);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for TimeZone();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], MEMORY[0x24BDCF530]);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for FormatStyleCapitalizationContext();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext, (uint64_t (*)(uint64_t))MEMORY[0x24BDCD6D8], MEMORY[0x24BDCD6F0]);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t SystemFormatStyle.DateReference.discreteInput(before:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t result;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t (**v52)(char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t (**v55)(char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  unsigned int (*v72)(uint64_t, uint64_t, uint64_t);
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  unsigned int (*v83)(uint64_t, uint64_t, uint64_t);
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void (*v111)(char *, uint64_t);
  void (*v112)(uint64_t, uint64_t);
  uint64_t v113;
  char *v114;
  uint64_t v115;
  void (*v116)(char *, uint64_t);
  void (*v117)(uint64_t, uint64_t);
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  void (*v132)(char *, uint64_t, uint64_t);
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t (**v147)(char *, uint64_t);
  uint64_t v148;

  v148 = a1;
  v146 = a2;
  v145 = type metadata accessor for Date.AnchoredRelativeFormatStyle();
  v147 = *(uint64_t (***)(char *, uint64_t))(v145 - 8);
  MEMORY[0x24BDAC7A8](v145);
  v4 = (char *)&v119 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Date?(0);
  v139 = *(_QWORD *)(v5 - 8);
  v140 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v141 = (uint64_t)&v119 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = type metadata accessor for Calendar.Component();
  v131 = *(_QWORD *)(v134 - 8);
  MEMORY[0x24BDAC7A8](v134);
  v133 = (uint64_t)&v119 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DateInterval?(0);
  MEMORY[0x24BDAC7A8](v8);
  v124 = (char *)&v119 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v132 = (void (*)(char *, uint64_t, uint64_t))((char *)&v119 - v11);
  v12 = type metadata accessor for DateInterval();
  v135 = *(_QWORD *)(v12 - 8);
  v136 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v123 = (char *)&v119 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v130 = (char *)&v119 - v15;
  type metadata accessor for Date.ComponentsFormatStyle.Field?(0);
  MEMORY[0x24BDAC7A8](v16);
  v127 = (uint64_t)&v119 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v143 = (char *)&v119 - v19;
  v142 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  v144 = *(_QWORD *)(v142 - 8);
  MEMORY[0x24BDAC7A8](v142);
  v125 = (char *)&v119 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v137 = (char *)&v119 - v22;
  v23 = type metadata accessor for Date();
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v138 = (char *)&v119 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v122 = (char *)&v119 - v27;
  MEMORY[0x24BDAC7A8](v28);
  v129 = (char *)&v119 - v29;
  MEMORY[0x24BDAC7A8](v30);
  v32 = (char *)&v119 - v31;
  type metadata accessor for ClosedRange<Date>?(0);
  MEMORY[0x24BDAC7A8](v33);
  v35 = (char *)&v119 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ClosedRange<Date>();
  v37 = v36;
  v38 = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v40 = (char *)&v119 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v41);
  v43 = (char *)&v119 - v42;
  SystemFormatStyle.DateReference.relativeStyleInterval.getter((uint64_t)v35);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v35, 1, v37) == 1)
  {
    outlined destroy of TypesettingConfiguration((uint64_t)v35, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>?);
    SystemFormatStyle.DateReference.relativeStyle.getter((uint64_t)v4);
    Date.AnchoredRelativeFormatStyle.discreteInput(before:)();
    return v147[1](v4, v145);
  }
  v120 = v4;
  v126 = v2;
  outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v35, (uint64_t)v43, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  v45 = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
  v46 = v148;
  v47 = dispatch thunk of static Comparable.>= infix(_:_:)();
  v128 = v24;
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v32, v46, v23);
  v121 = v43;
  outlined init with copy of TypesettingLanguage((uint64_t)v43, (uint64_t)v40, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  v48 = v46;
  v49 = v23;
  if ((v47 & 1) != 0)
    v50 = dispatch thunk of static Comparable.<= infix(_:_:)();
  else
    v50 = 0;
  v51 = v126;
  v52 = v147;
  v53 = v45;
  outlined destroy of TypesettingConfiguration((uint64_t)v40, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  v54 = v128;
  v55 = *(uint64_t (***)(char *, uint64_t))(v128 + 8);
  ((void (*)(char *, uint64_t))v55)(v32, v49);
  if ((v50 & 1) != 0)
  {
    v56 = (uint64_t)v121;
    Date.timeIntervalSinceReferenceDate.getter();
    v147 = v55;
    v57 = v145;
    v58 = (uint64_t)v120;
    v59 = v138;
    Date.init(timeIntervalSinceReferenceDate:)();
    SystemFormatStyle.DateReference.relativeStyle.getter(v58);
    v60 = v141;
    Date.AnchoredRelativeFormatStyle.discreteInput(before:)();
    v52[1]((char *)v58, v57);
    v61 = v146;
    specialized max<A>(_:ifPresent:)(v59, v60, (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x24BEE07E8], v146);
    outlined destroy of TypesettingConfiguration(v60, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
    ((void (*)(char *, uint64_t))v147)(v59, v49);
    outlined destroy of TypesettingConfiguration(v56, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v54 + 56))(v61, 0, 1, v49);
  }
  v145 = v53;
  type metadata accessor for Date??(0);
  v62 = swift_allocBox();
  v63 = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v139 + 56))(v64, 1, 1, v140);
  result = SystemFormatStyle.DateReference.fieldsToShowInAbsoluteStyle(for:)(v48);
  v68 = v142;
  v69 = v144;
  if (v66 != v67 >> 1)
  {
    if (v66 >= (uint64_t)(v67 >> 1))
    {
      __break(1u);
      return result;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v144 + 16))(v143, v65 + *(_QWORD *)(v144 + 72) * v66, v142);
    v63 = 0;
  }
  v70 = v143;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v69 + 56))(v143, v63, 1, v68);
  v71 = (uint64_t)v70;
  swift_unknownObjectRelease();
  v72 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v69 + 48);
  if (v72(v71, 1, v68) == 1)
  {
    outlined destroy of TypesettingConfiguration(v71, (uint64_t (*)(_QWORD))type metadata accessor for Date.ComponentsFormatStyle.Field?);
LABEL_16:
    v84 = (uint64_t)v121;
    getter of switchToRelativeDate #1 in SystemFormatStyle.DateReference.discreteInput(before:)((uint64_t)v121, v146);
    outlined destroy of TypesettingConfiguration(v84, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
    return swift_release();
  }
  v139 = v49;
  v140 = v62;
  v73 = *(char **)(v69 + 32);
  v74 = (uint64_t)v137;
  v143 = v73;
  ((void (*)(char *, uint64_t, uint64_t))v73)(v137, v71, v68);
  v75 = type metadata accessor for SystemFormatStyle.DateReference();
  v76 = (char *)(v51 + *(int *)(v75 + 40));
  v77 = v133;
  v78 = v68;
  SystemFormatStyle.DateReference.component(for:)(v74, v133);
  v79 = (uint64_t)v132;
  v138 = v76;
  Calendar.dateInterval(of:for:)();
  v80 = *(void (**)(uint64_t, uint64_t))(v131 + 8);
  v80(v77, v134);
  v81 = v135;
  v82 = v136;
  v83 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v135 + 48);
  if (v83(v79, 1, v136) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v144 + 8))(v74, v78);
    outlined destroy of TypesettingConfiguration(v79, (uint64_t (*)(_QWORD))type metadata accessor for DateInterval?);
    goto LABEL_16;
  }
  v85 = v130;
  v132 = *(void (**)(char *, uint64_t, uint64_t))(v81 + 32);
  v132(v130, v79, v82);
  v86 = v129;
  DateInterval.end.getter();
  v87 = v139;
  v88 = dispatch thunk of static Comparable.< infix(_:_:)();
  v89 = ((uint64_t (*)(char *, uint64_t))v55)(v86, v87);
  if ((v88 & 1) != 0)
  {
    DateInterval.end.getter();
    v90 = v141;
    v91 = (uint64_t)v121;
    getter of switchToRelativeDate #1 in SystemFormatStyle.DateReference.discreteInput(before:)((uint64_t)v121, v141);
    v92 = v86;
    v93 = v146;
    specialized max<A>(_:ifPresent:)(v92, v90, (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x24BEE07E8], v146);
    outlined destroy of TypesettingConfiguration(v90, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
    ((void (*)(char *, uint64_t))v55)(v92, v87);
    (*(void (**)(char *, uint64_t))(v135 + 8))(v85, v136);
    outlined destroy of TypesettingConfiguration(v91, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
    (*(void (**)(char *, uint64_t))(v144 + 8))(v137, v142);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v128 + 56))(v93, 0, 1, v87);
  }
  else
  {
    v94 = *(_QWORD *)(v126 + *(int *)(v75 + 20));
    MEMORY[0x24BDAC7A8](v89);
    *(&v119 - 2) = (uint64_t)v137;
    swift_bridgeObjectRetain();
    v95 = v127;
    specialized BidirectionalCollection.last(where:)((uint64_t (*)(uint64_t))partial apply for closure #1 in SystemFormatStyle.DateReference.discreteInput(before:), v94, v127);
    v96 = v95;
    swift_bridgeObjectRelease();
    v97 = v142;
    if (v72(v95, 1, v142) == 1)
    {
      outlined destroy of TypesettingConfiguration(v95, (uint64_t (*)(_QWORD))type metadata accessor for Date.ComponentsFormatStyle.Field?);
      v98 = v146;
    }
    else
    {
      v99 = (uint64_t)v125;
      ((void (*)(char *, uint64_t, uint64_t))v143)(v125, v96, v97);
      v100 = v133;
      SystemFormatStyle.DateReference.component(for:)(v99, v133);
      v101 = (uint64_t)v124;
      Calendar.dateInterval(of:for:)();
      v80(v100, v134);
      v102 = v136;
      if (v83(v101, 1, v136) != 1)
      {
        v105 = v123;
        v132(v123, v101, v102);
        v106 = v129;
        DateInterval.start.getter();
        v107 = static Date.< infix(_:_:)();
        v108 = v139;
        ((void (*)(char *, uint64_t))v55)(v106, v139);
        v109 = v146;
        if ((v107 & 1) != 0)
        {
          v110 = (uint64_t)v121;
          getter of switchToRelativeDate #1 in SystemFormatStyle.DateReference.discreteInput(before:)((uint64_t)v121, v146);
          v111 = *(void (**)(char *, uint64_t))(v135 + 8);
          v111(v105, v102);
          v112 = *(void (**)(uint64_t, uint64_t))(v144 + 8);
          v113 = v142;
          v112(v99, v142);
          v111(v130, v102);
          outlined destroy of TypesettingConfiguration(v110, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
          v112((uint64_t)v137, v113);
        }
        else
        {
          v114 = v122;
          DateInterval.start.getter();
          Date.timeIntervalSinceReferenceDate.getter();
          v115 = v136;
          Date.init(timeIntervalSinceReferenceDate:)();
          ((void (*)(char *, uint64_t))v55)(v114, v108);
          v116 = *(void (**)(char *, uint64_t))(v135 + 8);
          v116(v105, v115);
          v117 = *(void (**)(uint64_t, uint64_t))(v144 + 8);
          v118 = v142;
          v117(v99, v142);
          v116(v130, v115);
          outlined destroy of TypesettingConfiguration((uint64_t)v121, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
          v117((uint64_t)v137, v118);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v128 + 56))(v109, 0, 1, v108);
        }
        return swift_release();
      }
      (*(void (**)(uint64_t, uint64_t))(v144 + 8))(v99, v97);
      outlined destroy of TypesettingConfiguration(v101, (uint64_t (*)(_QWORD))type metadata accessor for DateInterval?);
      v98 = v146;
    }
    v103 = v137;
    v104 = (uint64_t)v121;
    getter of switchToRelativeDate #1 in SystemFormatStyle.DateReference.discreteInput(before:)((uint64_t)v121, v98);
    (*(void (**)(char *, uint64_t))(v135 + 8))(v85, v136);
    outlined destroy of TypesettingConfiguration(v104, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
    (*(void (**)(char *, uint64_t))(v144 + 8))(v103, v97);
  }
  return swift_release();
}

uint64_t SystemFormatStyle.DateReference.relativeStyle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;

  v19[1] = a1;
  v25 = type metadata accessor for FormatStyleCapitalizationContext();
  v23 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v24 = (char *)v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Calendar();
  v21 = *(_QWORD *)(v3 - 8);
  v22 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Locale();
  v6 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date.RelativeFormatStyle.UnitsStyle();
  MEMORY[0x24BDAC7A8](v9);
  v10 = type metadata accessor for Date.RelativeFormatStyle.Presentation();
  MEMORY[0x24BDAC7A8](v10);
  v11 = type metadata accessor for Date();
  v12 = MEMORY[0x24BDAC7A8](v11);
  (*(void (**)(char *, uint64_t, double))(v14 + 16))((char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v1, v12);
  v15 = (int *)type metadata accessor for SystemFormatStyle.DateReference();
  v16 = swift_bridgeObjectRetain();
  specialized Set.init<A>(_:)(v16);
  swift_bridgeObjectRelease();
  static Date.RelativeFormatStyle.Presentation.named.getter();
  v17 = *(_QWORD *)(v1 + v15[8]);
  if (v17 > 1)
  {
    static Date.RelativeFormatStyle.UnitsStyle.narrow.getter();
  }
  else if (v17 == 1)
  {
    static Date.RelativeFormatStyle.UnitsStyle.abbreviated.getter();
  }
  else
  {
    static Date.RelativeFormatStyle.UnitsStyle.wide.getter();
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v1 + v15[9], v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v5, v1 + v15[10], v22);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v24, v1 + v15[12], v25);
  return Date.AnchoredRelativeFormatStyle.init(anchor:allowedFields:presentation:unitsStyle:locale:calendar:capitalizationContext:)();
}

uint64_t specialized max<A>(_:ifPresent:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return specialized max<A>(_:ifPresent:)(a1, a2, (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x24BEE07E8], a3);
}

uint64_t getter of switchToRelativeDate #1 in SystemFormatStyle.DateReference.discreteInput(before:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  type metadata accessor for Date?(0);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Date??(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v23 - v13;
  v15 = swift_projectBox();
  outlined init with copy of TypesettingLanguage(v15, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for Date??);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v14, 1, v5) == 1)
  {
    outlined destroy of TypesettingConfiguration((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for Date??);
    type metadata accessor for ClosedRange<Date>();
    v17 = a1 + *(int *)(v16 + 36);
    v18 = static Date.> infix(_:_:)();
    v19 = type metadata accessor for Date();
    v20 = *(_QWORD *)(v19 - 8);
    if ((v18 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v8, v17, v19);
      v21 = 0;
    }
    else
    {
      v21 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v8, v21, 1, v19);
    outlined init with copy of TypesettingLanguage((uint64_t)v8, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v11, 0, 1, v5);
    swift_beginAccess();
    outlined assign with take of Date??((uint64_t)v11, v15);
  }
  else
  {
    v8 = v14;
  }
  return outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v8, a2, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
}

uint64_t SystemFormatStyle.DateReference.fieldsToShowInAbsoluteStyle(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[2];
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  char *v40;
  uint64_t v41;

  v2 = v1;
  v38 = a1;
  v3 = type metadata accessor for Calendar.Component();
  v36 = *(_QWORD *)(v3 - 8);
  v37 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Date.ComponentsFormatStyle.Field?(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v32 - v14;
  v39 = (int *)type metadata accessor for SystemFormatStyle.DateReference();
  v16 = v39[5];
  v17 = *(_QWORD *)(v1 + v16);
  v41 = v2;
  swift_bridgeObjectRetain();
  v40 = v15;
  specialized BidirectionalCollection.last(where:)((uint64_t (*)(uint64_t))partial apply for closure #1 in SystemFormatStyle.DateReference.containerForThreshold.getter, v17, (uint64_t)v15);
  swift_bridgeObjectRelease();
  v33 = v16;
  v18 = *(_QWORD *)(v2 + v16);
  v19 = *(_QWORD *)(v18 + 16);
  v20 = *(unsigned __int8 *)(v7 + 80);
  v35 = v19;
  if (v19)
  {
    v21 = v18;
    v22 = v18 + ((v20 + 32) & ~v20);
    v34 = *(_QWORD *)(v7 + 72);
    v32[0] = v20;
    v32[1] = v21;
    swift_bridgeObjectRetain();
    v23 = 0;
    while (1)
    {
      outlined init with copy of TypesettingLanguage((uint64_t)v40, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for Date.ComponentsFormatStyle.Field?);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6) == 1)
      {
        outlined destroy of TypesettingConfiguration((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for Date.ComponentsFormatStyle.Field?);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v12, v6);
        v24 = MEMORY[0x23B7C4FB4](v9, v22);
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        if ((v24 & 1) != 0)
          break;
      }
      SystemFormatStyle.DateReference.component(for:)(v22, (uint64_t)v5);
      v25 = Calendar.isDate(_:equalTo:toGranularity:)();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v5, v37);
      if ((v25 & 1) == 0)
        break;
      ++v23;
      v22 += v34;
      if (v35 == v23)
      {
        swift_bridgeObjectRelease();
        v23 = 0;
        v18 = *(_QWORD *)(v2 + v33);
        v19 = *(_QWORD *)(v18 + 16);
LABEL_10:
        LODWORD(v20) = v32[0];
        goto LABEL_12;
      }
    }
    result = swift_bridgeObjectRelease();
    v18 = *(_QWORD *)(v2 + v33);
    v19 = *(_QWORD *)(v18 + 16);
    if (v19 >= v23)
      goto LABEL_10;
    __break(1u);
    goto LABEL_20;
  }
  v23 = 0;
LABEL_12:
  v27 = *(_QWORD *)(v2 + v39[8]);
  result = *(_QWORD *)(v2 + v39[6]);
  if (v27 < 3)
  {
LABEL_18:
    v31 = specialized Collection.prefix(_:)(result, v18, v18 + ((v20 + 32) & ~(unint64_t)v20), v23, (2 * v19) | 1);
    swift_bridgeObjectRetain();
    outlined destroy of TypesettingConfiguration((uint64_t)v40, (uint64_t (*)(_QWORD))type metadata accessor for Date.ComponentsFormatStyle.Field?);
    return v31;
  }
  v28 = result + 2;
  if (__OFADD__(result, 2))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v29 = __OFSUB__(v28, v27);
  v30 = v28 - v27;
  if (!v29)
  {
    if (v30 <= 1)
      result = 1;
    else
      result = v30;
    goto LABEL_18;
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t SystemFormatStyle.DateReference.component(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  _BYTE *v14;
  void (*v15)(_BYTE *, uint64_t);
  unsigned int *v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t);
  unsigned int *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  char v32;
  _BYTE v33[16];

  v3 = v2;
  v6 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8];
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v10 = &v33[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = &v33[-v13];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v8 + 16))(&v33[-v13], a1, v6, v12);
  static Date.ComponentsFormatStyle.Style.wide.getter();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, v7, MEMORY[0x24BDCE6E8]);
  LOBYTE(v7) = dispatch thunk of static Equatable.== infix(_:_:)();
  v15 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
  v15(v10, v6);
  if ((v7 & 1) != 0)
  {
    v15(v14, v6);
    v16 = (unsigned int *)MEMORY[0x24BDCF240];
LABEL_16:
    v30 = *v16;
    v22 = type metadata accessor for Calendar.Component();
    v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 104);
    v27 = a2;
    v26 = v30;
    return v23(v27, v26, v22);
  }
  static Date.ComponentsFormatStyle.Style.narrow.getter();
  v17 = dispatch thunk of static Equatable.== infix(_:_:)();
  v15(v10, v6);
  if ((v17 & 1) != 0)
  {
    v15(v14, v6);
    v16 = (unsigned int *)MEMORY[0x24BDCF250];
    goto LABEL_16;
  }
  static Date.ComponentsFormatStyle.Style.abbreviated.getter();
  v18 = dispatch thunk of static Equatable.== infix(_:_:)();
  v15(v10, v6);
  if ((v18 & 1) != 0)
  {
    v15(v14, v6);
    v19 = *(_QWORD *)(v3 + *(int *)(type metadata accessor for SystemFormatStyle.DateReference() + 20));
    swift_bridgeObjectRetain();
    v20 = static Date.ComponentsFormatStyle.Style.narrow.getter();
    MEMORY[0x24BDAC7A8](v20);
    *(_QWORD *)&v33[-16] = v10;
    v21 = specialized Sequence.contains(where:)((uint64_t (*)(char *))partial apply for specialized closure #1 in Sequence<>.contains(_:), (_BOOL8)&v33[-32], v19);
    v15(v10, v6);
    swift_bridgeObjectRelease();
    v22 = type metadata accessor for Calendar.Component();
    v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 104);
    if (v21)
      v24 = (unsigned int *)MEMORY[0x24BDCF1F8];
    else
      v24 = (unsigned int *)MEMORY[0x24BDCF1E8];
  }
  else
  {
    static Date.ComponentsFormatStyle.Style.condensedAbbreviated.getter();
    v25 = dispatch thunk of static Equatable.== infix(_:_:)();
    v15(v10, v6);
    if ((v25 & 1) != 0)
    {
      v15(v14, v6);
      v16 = (unsigned int *)MEMORY[0x24BDCF220];
      goto LABEL_16;
    }
    static Date.ComponentsFormatStyle.Style.spellOut.getter();
    v28 = dispatch thunk of static Equatable.== infix(_:_:)();
    v15(v10, v6);
    if ((v28 & 1) != 0)
    {
      v15(v14, v6);
      v16 = (unsigned int *)MEMORY[0x24BDCF230];
      goto LABEL_16;
    }
    static Date.ComponentsFormatStyle.Field.minute.getter();
    v29 = dispatch thunk of static Equatable.== infix(_:_:)();
    v15(v10, v6);
    if ((v29 & 1) != 0)
    {
      v15(v14, v6);
      v16 = (unsigned int *)MEMORY[0x24BDCF258];
      goto LABEL_16;
    }
    static Date.ComponentsFormatStyle.Field.second.getter();
    v32 = dispatch thunk of static Equatable.== infix(_:_:)();
    v15(v10, v6);
    v15(v14, v6);
    v22 = type metadata accessor for Calendar.Component();
    v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 104);
    if ((v32 & 1) != 0)
      v24 = (unsigned int *)MEMORY[0x24BDCF260];
    else
      v24 = (unsigned int *)MEMORY[0x24BDCF240];
  }
  v26 = *v24;
  v27 = a2;
  return v23(v27, v26, v22);
}

uint64_t specialized BidirectionalCollection.last(where:)@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    v8 = type metadata accessor for Date.ComponentsFormatStyle.Field();
    v9 = *(_QWORD *)(v8 - 8);
    v10 = *(_QWORD *)(v9 + 72);
    v11 = a2
        + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
        + v10 * (v5 - 1);
    v12 = -v10;
    while (1)
    {
      result = a1(v11);
      if (v3)
        break;
      if ((result & 1) != 0)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(a3, v11, v8);
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(a3, 0, 1, v8);
      }
      v11 += v12;
      if (!--v5)
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    v14 = type metadata accessor for Date.ComponentsFormatStyle.Field();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a3, 1, 1, v14);
  }
  return result;
}

uint64_t SystemFormatStyle.DateReference.discreteInput(after:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t result;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  void (*v57)(char *, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  unsigned int (*v70)(uint64_t, uint64_t, uint64_t);
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t);
  unsigned int (*v76)(uint64_t, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t, uint64_t);
  char *v80;
  char *v81;
  uint64_t v82;
  char v83;
  void (*v84)(char *, uint64_t);
  uint64_t v85;
  void (*v86)(char *, uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  unsigned int v104;
  char *v105;
  char *v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(char *, uint64_t);
  void (*v113)(char *, uint64_t);
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  void (*v118)(char *, uint64_t);
  void (*v119)(char *, uint64_t);
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  void (*v141)(char *, uint64_t, uint64_t);
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;

  v150 = a1;
  v148 = a2;
  v147 = type metadata accessor for Date.AnchoredRelativeFormatStyle();
  v149 = *(_QWORD *)(v147 - 8);
  MEMORY[0x24BDAC7A8](v147);
  v4 = (char *)&v121 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Date?(0);
  v139 = *(_QWORD *)(v5 - 8);
  v140 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v141 = (void (*)(char *, uint64_t, uint64_t))((char *)&v121 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v135 = type metadata accessor for Calendar.Component();
  v132 = *(_QWORD *)(v135 - 8);
  MEMORY[0x24BDAC7A8](v135);
  v134 = (uint64_t)&v121 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DateInterval?(0);
  MEMORY[0x24BDAC7A8](v8);
  v126 = (char *)&v121 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v133 = (char *)&v121 - v11;
  v137 = type metadata accessor for DateInterval();
  v143 = *(_QWORD *)(v137 - 8);
  MEMORY[0x24BDAC7A8](v137);
  v125 = (char *)&v121 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v131 = (char *)&v121 - v14;
  type metadata accessor for Date.ComponentsFormatStyle.Field?(0);
  MEMORY[0x24BDAC7A8](v15);
  v128 = (uint64_t)&v121 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v145 = (char *)&v121 - v18;
  v144 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  v146 = *(_QWORD *)(v144 - 8);
  MEMORY[0x24BDAC7A8](v144);
  v127 = (char *)&v121 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v142 = (char *)&v121 - v21;
  v22 = type metadata accessor for Date();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v138 = (char *)&v121 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25);
  v124 = (char *)&v121 - v26;
  MEMORY[0x24BDAC7A8](v27);
  v130 = (char *)&v121 - v28;
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)&v121 - v30;
  type metadata accessor for ClosedRange<Date>?(0);
  MEMORY[0x24BDAC7A8](v32);
  v34 = (char *)&v121 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ClosedRange<Date>();
  v36 = v35;
  v37 = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  v39 = (char *)&v121 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v40);
  v42 = (char *)&v121 - v41;
  SystemFormatStyle.DateReference.relativeStyleInterval.getter((uint64_t)v34);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v34, 1, v36) == 1)
  {
    outlined destroy of TypesettingConfiguration((uint64_t)v34, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>?);
    SystemFormatStyle.DateReference.relativeStyle.getter((uint64_t)v4);
    Date.AnchoredRelativeFormatStyle.discreteInput(after:)();
    return (*(uint64_t (**)(char *, uint64_t))(v149 + 8))(v4, v147);
  }
  v122 = v4;
  v136 = v2;
  outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v34, (uint64_t)v42, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  v44 = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
  v45 = v150;
  v46 = dispatch thunk of static Comparable.>= infix(_:_:)();
  v129 = v23;
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v31, v45, v22);
  v123 = v42;
  outlined init with copy of TypesettingLanguage((uint64_t)v42, (uint64_t)v39, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  v47 = v45;
  v48 = v22;
  if ((v46 & 1) != 0)
    v49 = dispatch thunk of static Comparable.<= infix(_:_:)();
  else
    v49 = 0;
  v50 = v146;
  v51 = v149;
  outlined destroy of TypesettingConfiguration((uint64_t)v39, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  v52 = v129;
  v149 = *(_QWORD *)(v129 + 8);
  ((void (*)(char *, uint64_t))v149)(v31, v48);
  if ((v49 & 1) != 0)
  {
    v53 = (uint64_t)v123;
    Date.timeIntervalSinceReferenceDate.getter();
    v54 = v147;
    v55 = (uint64_t)v122;
    v56 = v138;
    Date.init(timeIntervalSinceReferenceDate:)();
    SystemFormatStyle.DateReference.relativeStyle.getter(v55);
    v57 = v141;
    Date.AnchoredRelativeFormatStyle.discreteInput(after:)();
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v55, v54);
    v58 = v148;
    specialized max<A>(_:ifPresent:)(v56, (uint64_t)v57, (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x24BEE07E0], v148);
    outlined destroy of TypesettingConfiguration((uint64_t)v57, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
    ((void (*)(char *, uint64_t))v149)(v56, v48);
    outlined destroy of TypesettingConfiguration(v53, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v52 + 56))(v58, 0, 1, v48);
  }
  type metadata accessor for Date??(0);
  v59 = swift_allocBox();
  v60 = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v139 + 56))(v61, 1, 1, v140);
  result = SystemFormatStyle.DateReference.fieldsToShowInAbsoluteStyle(for:)(v47);
  v66 = v143;
  v65 = v144;
  v67 = (uint64_t)v142;
  if (v63 != v64 >> 1)
  {
    if (v63 >= (uint64_t)(v64 >> 1))
    {
      __break(1u);
      return result;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v145, v62 + *(_QWORD *)(v50 + 72) * v63, v144);
    v60 = 0;
  }
  v147 = v59;
  v68 = v145;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v50 + 56))(v145, v60, 1, v65);
  v69 = (uint64_t)v68;
  swift_unknownObjectRelease();
  v70 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48);
  if (v70(v69, 1, v65) == 1)
  {
    outlined destroy of TypesettingConfiguration(v69, (uint64_t (*)(_QWORD))type metadata accessor for Date.ComponentsFormatStyle.Field?);
LABEL_16:
    v78 = (uint64_t)v123;
    getter of switchToRelativeDate #1 in SystemFormatStyle.DateReference.discreteInput(after:)((uint64_t)v123, v148);
    outlined destroy of TypesettingConfiguration(v78, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
    return swift_release();
  }
  v139 = v44;
  v140 = v48;
  v138 = *(char **)(v50 + 32);
  ((void (*)(uint64_t, uint64_t, uint64_t))v138)(v67, v69, v65);
  v145 = (char *)type metadata accessor for SystemFormatStyle.DateReference();
  v71 = (char *)(v136 + *((int *)v145 + 10));
  v72 = v134;
  v73 = v65;
  SystemFormatStyle.DateReference.component(for:)(v67, v134);
  v74 = (uint64_t)v133;
  v122 = v71;
  Calendar.dateInterval(of:for:)();
  v75 = *(void (**)(uint64_t, uint64_t))(v132 + 8);
  v75(v72, v135);
  v76 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48);
  v77 = v137;
  if (v76(v74, 1, v137) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v67, v73);
    outlined destroy of TypesettingConfiguration(v74, (uint64_t (*)(_QWORD))type metadata accessor for DateInterval?);
    goto LABEL_16;
  }
  v79 = *(void (**)(char *, uint64_t, uint64_t))(v66 + 32);
  v80 = v131;
  v79(v131, v74, v77);
  v81 = v130;
  DateInterval.start.getter();
  v82 = v140;
  v83 = dispatch thunk of static Comparable.< infix(_:_:)();
  v84 = (void (*)(char *, uint64_t))v149;
  v85 = ((uint64_t (*)(char *, uint64_t))v149)(v81, v82);
  if ((v83 & 1) != 0)
  {
    DateInterval.start.getter();
    v86 = v141;
    v87 = (uint64_t)v123;
    getter of switchToRelativeDate #1 in SystemFormatStyle.DateReference.discreteInput(after:)((uint64_t)v123, (uint64_t)v141);
    v88 = v148;
    specialized max<A>(_:ifPresent:)(v81, (uint64_t)v86, (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x24BEE07E0], v148);
    outlined destroy of TypesettingConfiguration((uint64_t)v86, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
    v84(v81, v82);
    (*(void (**)(char *, uint64_t))(v143 + 8))(v80, v137);
    outlined destroy of TypesettingConfiguration(v87, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
    (*(void (**)(char *, uint64_t))(v146 + 8))(v142, v144);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v129 + 56))(v88, 0, 1, v82);
  }
  else
  {
    v141 = v79;
    v89 = *(_QWORD *)(v136 + *((int *)v145 + 5));
    MEMORY[0x24BDAC7A8](v85);
    v90 = v142;
    *(&v121 - 2) = (uint64_t)v142;
    swift_bridgeObjectRetain();
    v91 = v128;
    specialized BidirectionalCollection.last(where:)((uint64_t (*)(uint64_t))partial apply for closure #1 in SystemFormatStyle.DateReference.discreteInput(before:), v89, v128);
    swift_bridgeObjectRelease();
    v92 = v144;
    if (v70(v91, 1, v144) == 1)
    {
      outlined destroy of TypesettingConfiguration(v91, (uint64_t (*)(_QWORD))type metadata accessor for Date.ComponentsFormatStyle.Field?);
      v93 = v148;
      v94 = (uint64_t)v123;
      v95 = v131;
      v96 = v143;
      v97 = v146;
    }
    else
    {
      v98 = (uint64_t)v127;
      ((void (*)(char *, uint64_t, uint64_t))v138)(v127, v91, v92);
      v99 = v134;
      SystemFormatStyle.DateReference.component(for:)(v98, v134);
      v100 = v126;
      Calendar.dateInterval(of:for:)();
      v75(v99, v135);
      v101 = (uint64_t)v100;
      v102 = v100;
      v103 = v137;
      v104 = v76((uint64_t)v102, 1, v137);
      v96 = v143;
      if (v104 != 1)
      {
        v105 = v125;
        v141(v125, v101, v103);
        v106 = v130;
        DateInterval.end.getter();
        v107 = static Date.> infix(_:_:)();
        v108 = v140;
        v84(v106, v140);
        v109 = v148;
        v110 = v146;
        if ((v107 & 1) != 0)
        {
          v111 = (uint64_t)v123;
          getter of switchToRelativeDate #1 in SystemFormatStyle.DateReference.discreteInput(after:)((uint64_t)v123, v148);
          v112 = *(void (**)(char *, uint64_t))(v96 + 8);
          v112(v105, v103);
          v113 = *(void (**)(char *, uint64_t))(v110 + 8);
          v114 = v144;
          v113(v127, v144);
          v112(v131, v103);
          outlined destroy of TypesettingConfiguration(v111, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
          v113(v90, v114);
        }
        else
        {
          v115 = v124;
          DateInterval.end.getter();
          Date.timeIntervalSinceReferenceDate.getter();
          v116 = v137;
          v117 = v129;
          Date.init(timeIntervalSinceReferenceDate:)();
          v84(v115, v108);
          v118 = *(void (**)(char *, uint64_t))(v143 + 8);
          v118(v105, v116);
          v119 = *(void (**)(char *, uint64_t))(v110 + 8);
          v120 = v144;
          v119(v127, v144);
          v118(v131, v116);
          outlined destroy of TypesettingConfiguration((uint64_t)v123, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
          v119(v90, v120);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v117 + 56))(v109, 0, 1, v108);
        }
        return swift_release();
      }
      v97 = v146;
      (*(void (**)(uint64_t, uint64_t))(v146 + 8))(v98, v92);
      outlined destroy of TypesettingConfiguration(v101, (uint64_t (*)(_QWORD))type metadata accessor for DateInterval?);
      v93 = v148;
      v94 = (uint64_t)v123;
      v95 = v131;
    }
    getter of switchToRelativeDate #1 in SystemFormatStyle.DateReference.discreteInput(after:)(v94, v93);
    (*(void (**)(char *, uint64_t))(v96 + 8))(v95, v137);
    outlined destroy of TypesettingConfiguration(v94, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
    (*(void (**)(char *, uint64_t))(v97 + 8))(v90, v92);
  }
  return swift_release();
}

uint64_t specialized min<A>(_:ifPresent:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return specialized max<A>(_:ifPresent:)(a1, a2, (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x24BEE07E0], a3);
}

uint64_t specialized max<A>(_:ifPresent:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(char *, char *, uint64_t, uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;

  type metadata accessor for Date?(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TypesettingLanguage(a2, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of TypesettingConfiguration((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 16))(a4, a1, v11);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
    v16 = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
    if ((a3(v14, a1, v11, v16) & 1) != 0)
    {
      v17 = a4;
      v18 = v14;
    }
    else
    {
      v17 = a4;
      v18 = a1;
    }
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 16))(v17, v18, v11);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t getter of switchToRelativeDate #1 in SystemFormatStyle.DateReference.discreteInput(after:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  type metadata accessor for Date?(0);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Date??(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v21 - v13;
  v15 = swift_projectBox();
  outlined init with copy of TypesettingLanguage(v15, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for Date??);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v14, 1, v5) == 1)
  {
    outlined destroy of TypesettingConfiguration((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for Date??);
    v16 = static Date.< infix(_:_:)();
    v17 = type metadata accessor for Date();
    v18 = *(_QWORD *)(v17 - 8);
    if ((v16 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v8, a1, v17);
      v19 = 0;
    }
    else
    {
      v19 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v8, v19, 1, v17);
    outlined init with copy of TypesettingLanguage((uint64_t)v8, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v11, 0, 1, v5);
    swift_beginAccess();
    outlined assign with take of Date??((uint64_t)v11, v15);
  }
  else
  {
    v8 = v14;
  }
  return outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v8, a2, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
}

uint64_t SystemFormatStyle.DateReference.input(before:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  char v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  void (*v30)(char *, uint64_t, uint64_t);
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;

  v37 = a2;
  v36 = type metadata accessor for Date.AnchoredRelativeFormatStyle();
  v34 = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v33 = (uint64_t)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ClosedRange<Date>();
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v32 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v31 = (char *)&v30 - v14;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v30 - v16;
  type metadata accessor for ClosedRange<Date>?(0);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = v2;
  SystemFormatStyle.DateReference.relativeStyleInterval.getter((uint64_t)v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v20, 1, v6) == 1)
  {
    outlined destroy of TypesettingConfiguration((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>?);
LABEL_7:
    v24 = v33;
    SystemFormatStyle.DateReference.relativeStyle.getter(v33);
    Date.AnchoredRelativeFormatStyle.input(before:)();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 8))(v24, v36);
  }
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
  v21 = dispatch thunk of static Comparable.>= infix(_:_:)();
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v30(v17, a1, v10);
  outlined init with copy of TypesettingLanguage((uint64_t)v20, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  if ((v21 & 1) != 0)
    v22 = dispatch thunk of static Comparable.<= infix(_:_:)();
  else
    v22 = 0;
  outlined destroy of TypesettingConfiguration((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  v23 = *(void (**)(char *, uint64_t))(v11 + 8);
  v23(v17, v10);
  outlined destroy of TypesettingConfiguration((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  if ((v22 & 1) != 0)
    goto LABEL_7;
  Date.timeIntervalSinceReferenceDate.getter();
  v26 = v31;
  Date.init(timeIntervalSinceReferenceDate:)();
  v27 = v32;
  static Date.- infix(_:_:)();
  if ((dispatch thunk of static Comparable.< infix(_:_:)() & 1) != 0)
    v28 = v27;
  else
    v28 = v26;
  v29 = v37;
  v30(v37, (uint64_t)v28, v10);
  v23(v27, v10);
  v23(v26, v10);
  return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v29, 0, 1, v10);
}

uint64_t SystemFormatStyle.DateReference.input(after:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  char v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  void (*v30)(char *, uint64_t, uint64_t);
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;

  v37 = a2;
  v36 = type metadata accessor for Date.AnchoredRelativeFormatStyle();
  v34 = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v33 = (uint64_t)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ClosedRange<Date>();
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v32 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v31 = (char *)&v30 - v14;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v30 - v16;
  type metadata accessor for ClosedRange<Date>?(0);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = v2;
  SystemFormatStyle.DateReference.relativeStyleInterval.getter((uint64_t)v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v20, 1, v6) == 1)
  {
    outlined destroy of TypesettingConfiguration((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>?);
LABEL_7:
    v24 = v33;
    SystemFormatStyle.DateReference.relativeStyle.getter(v33);
    Date.AnchoredRelativeFormatStyle.input(after:)();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 8))(v24, v36);
  }
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
  v21 = dispatch thunk of static Comparable.>= infix(_:_:)();
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v30(v17, a1, v10);
  outlined init with copy of TypesettingLanguage((uint64_t)v20, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  if ((v21 & 1) != 0)
    v22 = dispatch thunk of static Comparable.<= infix(_:_:)();
  else
    v22 = 0;
  outlined destroy of TypesettingConfiguration((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  v23 = *(void (**)(char *, uint64_t))(v11 + 8);
  v23(v17, v10);
  outlined destroy of TypesettingConfiguration((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  if ((v22 & 1) != 0)
    goto LABEL_7;
  Date.timeIntervalSinceReferenceDate.getter();
  v26 = v31;
  Date.init(timeIntervalSinceReferenceDate:)();
  v27 = v32;
  static Date.+ infix(_:_:)();
  if ((dispatch thunk of static Comparable.>= infix(_:_:)() & 1) != 0)
    v28 = v27;
  else
    v28 = v26;
  v29 = v37;
  v30(v37, (uint64_t)v28, v10);
  v23(v27, v10);
  v23(v26, v10);
  return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v29, 0, 1, v10);
}

uint64_t specialized getter of showsZeroValue #1 in SystemFormatStyle.DateReference.relativeText(for:)(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  int v8;
  uint64_t v9;
  uint64_t (*v10)@<X0>(BOOL *@<X8>);
  uint64_t v11;
  uint64_t v12;
  char v13;
  _BYTE v15[8];

  type metadata accessor for Date?(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = *a1;
  if (v8 != 2)
    return v8 & 1;
  type metadata accessor for Date();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
  if ((dispatch thunk of static Comparable.< infix(_:_:)() & 1) != 0)
  {
    v9 = Date.AnchoredRelativeFormatStyle.discreteInput(after:)();
    MEMORY[0x24BDAC7A8](v9);
    *(_QWORD *)&v15[-16] = a3;
    v10 = partial apply for closure #2 in SystemFormatStyle.DateReference.relativeText(for:);
  }
  else
  {
    v12 = Date.AnchoredRelativeFormatStyle.discreteInput(before:)();
    MEMORY[0x24BDAC7A8](v12);
    *(_QWORD *)&v15[-16] = a3;
    v10 = partial apply for closure #1 in SystemFormatStyle.DateReference.relativeText(for:);
  }
  v13 = _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF10Foundation4DateV_s5NeverOSbTg5((void (*)(uint64_t *__return_ptr, char *))v10);
  outlined destroy of TypesettingConfiguration((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Date?);
  if (v13 == 2)
    v11 = 0;
  else
    v11 = v13 & 1;
  swift_beginAccess();
  *a1 = v11;
  return v11;
}

uint64_t closure #2 in SystemFormatStyle.DateReference.relativeText(for:)@<X0>(BOOL *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for Date();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
  result = dispatch thunk of static Comparable.< infix(_:_:)();
  *a1 = (result & 1) == 0;
  return result;
}

uint64_t SystemFormatStyle.DateReference.nowString(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  char v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char *v39;
  char *v40;
  id v41;
  char *v42;
  uint64_t KeyPath;
  char *v44;
  char *v45;
  char v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v56 = a1;
  v70 = a2;
  v3 = type metadata accessor for Locale.Language();
  v54 = *(_QWORD *)(v3 - 8);
  v55 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v53 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v52 = (char *)&v52 - v6;
  v7 = type metadata accessor for LocalizedStringResource.BundleDescription();
  v61 = *(_QWORD *)(v7 - 8);
  v62 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v65 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Locale();
  v59 = *(_QWORD *)(v9 - 8);
  v60 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v64 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for String.LocalizationValue();
  MEMORY[0x24BDAC7A8](v11);
  v63 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for LocalizedStringResource();
  MEMORY[0x24BDAC7A8](v13);
  v66 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for FormatStyleCapitalizationContext();
  v57 = *(_QWORD *)(v15 - 8);
  v58 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Date.RelativeFormatStyle.UnitsStyle();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v52 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v52 - v23;
  v25 = type metadata accessor for AttributedString();
  v68 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v67 = (char *)&v52 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = (int *)type metadata accessor for SystemFormatStyle.DateReference();
  v28 = *(_QWORD *)(v2 + v27[8]);
  v69 = v25;
  if (v28 <= 1)
  {
    if (v28 == 1)
      static Date.RelativeFormatStyle.UnitsStyle.abbreviated.getter();
    else
      static Date.RelativeFormatStyle.UnitsStyle.wide.getter();
  }
  else
  {
    static Date.RelativeFormatStyle.UnitsStyle.narrow.getter();
  }
  static Date.RelativeFormatStyle.UnitsStyle.narrow.getter();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle and conformance Date.RelativeFormatStyle.UnitsStyle, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE4E0], MEMORY[0x24BDCE4E8]);
  v29 = dispatch thunk of static Equatable.== infix(_:_:)();
  v30 = *(void (**)(char *, uint64_t))(v19 + 8);
  v30(v21, v18);
  if ((v29 & 1) != 0)
  {
    v31 = ((uint64_t (*)(char *, uint64_t))v30)(v24, v18);
    v32 = v2 + v27[12];
    MEMORY[0x23B7C4840](v31);
    LOBYTE(v32) = MEMORY[0x23B7C484C](v32, v17);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v17, v58);
    if ((v32 & 1) != 0)
    {
      String.LocalizationValue.init(stringLiteral:)();
      (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v64, v2 + v27[9], v60);
      v33 = v67;
      if (one-time initialization token for systemFormatStyle == -1)
        goto LABEL_22;
    }
    else
    {
      String.LocalizationValue.init(stringLiteral:)();
      (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v64, v2 + v27[9], v60);
      v33 = v67;
      if (one-time initialization token for systemFormatStyle == -1)
        goto LABEL_22;
    }
    goto LABEL_26;
  }
  static Date.RelativeFormatStyle.UnitsStyle.abbreviated.getter();
  v34 = dispatch thunk of static Equatable.== infix(_:_:)();
  v30(v21, v18);
  v35 = ((uint64_t (*)(char *, uint64_t))v30)(v24, v18);
  v36 = v2;
  v37 = v2 + v27[12];
  MEMORY[0x23B7C4840](v35);
  v38 = MEMORY[0x23B7C484C](v37, v17);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v17, v58);
  if ((v34 & 1) != 0)
  {
    v33 = v67;
    v39 = v64;
    if ((v38 & 1) != 0)
    {
      String.LocalizationValue.init(stringLiteral:)();
      (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v39, v36 + v27[9], v60);
      if (one-time initialization token for systemFormatStyle == -1)
        goto LABEL_22;
    }
    else
    {
      String.LocalizationValue.init(stringLiteral:)();
      (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v39, v36 + v27[9], v60);
      if (one-time initialization token for systemFormatStyle == -1)
        goto LABEL_22;
    }
    goto LABEL_26;
  }
  v33 = v67;
  v40 = v64;
  if ((v38 & 1) != 0)
  {
    String.LocalizationValue.init(stringLiteral:)();
    (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v40, v36 + v27[9], v60);
    if (one-time initialization token for systemFormatStyle == -1)
      goto LABEL_22;
    goto LABEL_26;
  }
  String.LocalizationValue.init(stringLiteral:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v40, v36 + v27[9], v60);
  if (one-time initialization token for systemFormatStyle != -1)
LABEL_26:
    swift_once();
LABEL_22:
  v41 = objc_msgSend((id)static NSBundle.systemFormatStyle, sel_bundleURL);
  v42 = v65;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(char *, _QWORD, uint64_t))(v61 + 104))(v42, *MEMORY[0x24BDCD330], v62);
  LocalizedStringResource.init(_:defaultValue:table:locale:bundle:comment:)();
  swift_getKeyPath();
  type metadata accessor for AttributeScopes.AccessibilityAttributes();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AttributeScopes.AccessibilityAttributes and conformance AttributeScopes.AccessibilityAttributes, (uint64_t (*)(uint64_t))MEMORY[0x24BDB3CA8], MEMORY[0x24BDB3CA0]);
  AttributedString.init<A>(localized:including:)();
  KeyPath = swift_getKeyPath();
  MEMORY[0x24BDAC7A8](KeyPath);
  swift_getKeyPath();
  AttributedString.subscript.getter();
  swift_release();
  if (v71)
  {
    v44 = v52;
    Locale.language.getter();
    v45 = v53;
    Locale.Language.init(identifier:)();
    v46 = Locale.Language.isEquivalent(to:)();
    v47 = v55;
    v48 = *(void (**)(char *, uint64_t))(v54 + 8);
    v48(v45, v55);
    v48(v44, v47);
    if ((v46 & 1) != 0)
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v68 + 32))(v70, v33, v69);
  }
  v51 = v68;
  v50 = v69;
  (*(void (**)(char *, uint64_t))(v68 + 8))(v33, v69);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v51 + 16))(v70, v56, v50);
}

uint64_t SystemFormatStyle.DateReference.add(_:to:)(char *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t);
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  char *v50;
  void (*v51)(char *, uint64_t);
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t result;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char v71;
  void (*v72)(char *, uint64_t);
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(uint64_t, uint64_t);
  void (*v86)(uint64_t, char *, uint64_t);
  char *v87;
  char *v88;
  char v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t (*v94)(char *, uint64_t);
  char *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  char *v108;
  void (*v109)(char *, _QWORD);
  char *v110;
  uint64_t *v111;
  char v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;

  v161 = a2;
  v162 = a1;
  v124 = type metadata accessor for Date.FormatStyle.Symbol.Second();
  v123 = *(_QWORD *)(v124 - 8);
  MEMORY[0x24BDAC7A8](v124);
  v122 = (char *)&v122 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = type metadata accessor for Date.FormatStyle.Symbol.Minute();
  v126 = *(_QWORD *)(v127 - 8);
  MEMORY[0x24BDAC7A8](v127);
  v125 = (char *)&v122 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = type metadata accessor for Date.FormatStyle.Symbol.Hour.AMPMStyle();
  v132 = *(_QWORD *)(v133 - 8);
  MEMORY[0x24BDAC7A8](v133);
  v129 = (char *)&v122 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = type metadata accessor for Date.FormatStyle.Symbol.Hour();
  v130 = *(_QWORD *)(v131 - 8);
  MEMORY[0x24BDAC7A8](v131);
  v128 = (char *)&v122 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = type metadata accessor for Date.FormatStyle.Symbol.Weekday();
  v137 = *(_QWORD *)(v138 - 8);
  MEMORY[0x24BDAC7A8](v138);
  v135 = (char *)&v122 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v136 = (char *)&v122 - v8;
  v9 = type metadata accessor for Date.FormatStyle.Symbol.Day();
  v144 = *(_QWORD *)(v9 - 8);
  v145 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v143 = (char *)&v122 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date.FormatStyle.Symbol.Week();
  v146 = *(_QWORD *)(v11 - 8);
  v147 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v139 = (char *)&v122 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v142 = (char *)&v122 - v14;
  v15 = type metadata accessor for Calendar.Component();
  v150 = *(_QWORD *)(v15 - 8);
  v151 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v149 = (char *)&v122 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v148 = (uint64_t)&v122 - v18;
  v19 = type metadata accessor for Date.FormatStyle.Symbol.Month();
  v153 = *(_QWORD *)(v19 - 8);
  v154 = v19;
  MEMORY[0x24BDAC7A8](v19);
  v152 = (char *)&v122 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Date.FormatStyle.Symbol.Year();
  v156 = *(_QWORD *)(v21 - 8);
  v157 = v21;
  MEMORY[0x24BDAC7A8](v21);
  v141 = (char *)&v122 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v155 = (char *)&v122 - v24;
  v25 = type metadata accessor for Date.FormatStyle();
  v26 = *(_QWORD *)(v25 - 8);
  v159 = v25;
  v160 = v26;
  MEMORY[0x24BDAC7A8](v25);
  v134 = (char *)&v122 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v28);
  v140 = (char *)&v122 - v29;
  MEMORY[0x24BDAC7A8](v30);
  v32 = (char *)&v122 - v31;
  MEMORY[0x24BDAC7A8](v33);
  v35 = (char *)&v122 - v34;
  MEMORY[0x24BDAC7A8](v36);
  v38 = (char *)&v122 - v37;
  MEMORY[0x24BDAC7A8](v39);
  v41 = (char *)&v122 - v40;
  v42 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  v43 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8];
  v44 = *(_QWORD *)(v42 - 8);
  MEMORY[0x24BDAC7A8](v42);
  v46 = (char *)&v122 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = MEMORY[0x24BDAC7A8](v47);
  v50 = (char *)&v122 - v49;
  (*(void (**)(char *, char *, uint64_t, double))(v44 + 16))((char *)&v122 - v49, v162, v42, v48);
  static Date.ComponentsFormatStyle.Style.wide.getter();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, v43, MEMORY[0x24BDCE6E8]);
  LOBYTE(v43) = dispatch thunk of static Equatable.== infix(_:_:)();
  v51 = *(void (**)(char *, uint64_t))(v44 + 8);
  v51(v46, v42);
  if ((v43 & 1) != 0)
  {
    v52 = v155;
    v51(v50, v42);
    v53 = v160;
    v54 = v159;
    (*(void (**)(char *, uint64_t, uint64_t))(v160 + 32))(v41, v161, v159);
    if (*(uint64_t *)(v158 + *(int *)(type metadata accessor for SystemFormatStyle.DateReference() + 32)) >= 2)
      static Date.FormatStyle.Symbol.Year.twoDigits.getter();
    else
      static Date.FormatStyle.Symbol.Year.defaultDigits.getter();
    v63 = v156;
    v62 = v157;
    Date.FormatStyle.year(_:)();
    (*(void (**)(char *, uint64_t))(v63 + 8))(v52, v62);
    return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v41, v54);
  }
  v155 = v32;
  v162 = v35;
  v55 = v161;
  static Date.ComponentsFormatStyle.Style.narrow.getter();
  v56 = dispatch thunk of static Equatable.== infix(_:_:)();
  v51(v46, v42);
  if ((v56 & 1) != 0)
  {
    v51(v50, v42);
    v57 = v159;
    v58 = v160;
    v59 = v38;
    (*(void (**)(char *, uint64_t, uint64_t))(v160 + 32))(v38, v55, v159);
    v60 = *(_QWORD *)(v158 + *(int *)(type metadata accessor for SystemFormatStyle.DateReference() + 32));
    if (v60 >= 2)
    {
      v61 = v152;
      MEMORY[0x23B7C4C60]();
    }
    else
    {
      v61 = v152;
      if (v60 == 1)
        MEMORY[0x23B7C4C54]();
      else
        MEMORY[0x23B7C4C6C]();
    }
    v93 = v153;
    v92 = v154;
    Date.FormatStyle.month(_:)();
    (*(void (**)(char *, uint64_t))(v93 + 8))(v61, v92);
    v94 = *(uint64_t (**)(char *, uint64_t))(v58 + 8);
    v95 = v59;
    return v94(v95, v57);
  }
  static Date.ComponentsFormatStyle.Style.abbreviated.getter();
  v65 = dispatch thunk of static Equatable.== infix(_:_:)();
  v51(v46, v42);
  if ((v65 & 1) != 0)
  {
    v51(v50, v42);
    static Date.ComponentsFormatStyle.Style.abbreviated.getter();
    v66 = v148;
    v67 = v158;
    SystemFormatStyle.DateReference.component(for:)((uint64_t)v46, v148);
    v51(v46, v42);
    v69 = v149;
    v68 = v150;
    v70 = v151;
    (*(void (**)(char *, _QWORD, uint64_t))(v150 + 104))(v149, *MEMORY[0x24BDCF1F8], v151);
    v71 = MEMORY[0x23B7C53C8](v66, v69);
    v72 = *(void (**)(char *, uint64_t))(v68 + 8);
    v72(v69, v70);
    v73 = ((uint64_t (*)(uint64_t, uint64_t))v72)(v66, v70);
    if ((v71 & 1) == 0)
    {
      v57 = v159;
      v96 = v160;
      v97 = v155;
      (*(void (**)(char *, uint64_t, uint64_t))(v160 + 32))(v155, v55, v159);
      if (*(uint64_t *)(v67 + *(int *)(type metadata accessor for SystemFormatStyle.DateReference() + 32)) >= 2)
      {
        v98 = v139;
        MEMORY[0x23B7C4C0C]();
      }
      else
      {
        v98 = v139;
        MEMORY[0x23B7C4BF4]();
      }
      v105 = v146;
      v104 = v147;
      Date.FormatStyle.week(_:)();
      (*(void (**)(char *, uint64_t))(v105 + 8))(v98, v104);
      v94 = *(uint64_t (**)(char *, uint64_t))(v96 + 8);
      v95 = v97;
      return v94(v95, v57);
    }
    v74 = v142;
    MEMORY[0x23B7C4BE8](v73);
    v75 = v162;
    Date.FormatStyle.week(_:)();
    v76 = v159;
    v77 = v160;
    (*(void (**)(uint64_t, uint64_t))(v160 + 8))(v55, v159);
    (*(void (**)(char *, uint64_t))(v146 + 8))(v74, v147);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v77 + 32))(v55, v75, v76);
  }
  static Date.ComponentsFormatStyle.Style.condensedAbbreviated.getter();
  v78 = dispatch thunk of static Equatable.== infix(_:_:)();
  v51(v46, v42);
  if ((v78 & 1) == 0)
  {
    static Date.ComponentsFormatStyle.Style.spellOut.getter();
    v99 = dispatch thunk of static Equatable.== infix(_:_:)();
    v51(v46, v42);
    if ((v99 & 1) != 0)
    {
      v51(v50, v42);
      v57 = v159;
      v100 = v160;
      v101 = v134;
      (*(void (**)(char *, uint64_t, uint64_t))(v160 + 32))(v134, v55, v159);
      v102 = *(_QWORD *)(v158 + *(int *)(type metadata accessor for SystemFormatStyle.DateReference() + 32));
      if (v102 >= 2)
      {
        v103 = v129;
        MEMORY[0x23B7C4BC4]();
      }
      else
      {
        v103 = v129;
        if (v102 == 1)
          static Date.FormatStyle.Symbol.Hour.AMPMStyle.abbreviated.getter();
        else
          static Date.FormatStyle.Symbol.Hour.AMPMStyle.wide.getter();
      }
      v117 = v133;
      v118 = v132;
      v119 = v131;
      v120 = v130;
      v121 = v128;
      static Date.FormatStyle.Symbol.Hour.defaultDigits(amPM:)();
      (*(void (**)(char *, uint64_t))(v118 + 8))(v103, v117);
      Date.FormatStyle.hour(_:)();
      (*(void (**)(char *, uint64_t))(v120 + 8))(v121, v119);
      v94 = *(uint64_t (**)(char *, uint64_t))(v100 + 8);
      v95 = v101;
      return v94(v95, v57);
    }
    static Date.ComponentsFormatStyle.Field.minute.getter();
    v106 = dispatch thunk of static Equatable.== infix(_:_:)();
    v51(v46, v42);
    if ((v106 & 1) != 0)
    {
      v107 = ((uint64_t (*)(char *, uint64_t))v51)(v50, v42);
      v108 = v125;
      MEMORY[0x23B7C4C90](v107);
      v75 = v162;
      Date.FormatStyle.minute(_:)();
      v76 = v159;
      v77 = v160;
      (*(void (**)(uint64_t, uint64_t))(v160 + 8))(v55, v159);
      v109 = *(void (**)(char *, _QWORD))(v126 + 8);
      v110 = v108;
      v111 = &v159;
    }
    else
    {
      static Date.ComponentsFormatStyle.Field.second.getter();
      v112 = dispatch thunk of static Equatable.== infix(_:_:)();
      v51(v46, v42);
      result = ((uint64_t (*)(char *, uint64_t))v51)(v50, v42);
      if ((v112 & 1) == 0)
        return result;
      v113 = v122;
      MEMORY[0x23B7C4CB4](result);
      v75 = v162;
      Date.FormatStyle.second(_:)();
      v76 = v159;
      v77 = v160;
      (*(void (**)(uint64_t, uint64_t))(v160 + 8))(v55, v159);
      v109 = *(void (**)(char *, _QWORD))(v123 + 8);
      v110 = v113;
      v111 = &v156;
    }
    v109(v110, *(v111 - 32));
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v77 + 32))(v55, v75, v76);
  }
  v79 = ((uint64_t (*)(char *, uint64_t))v51)(v50, v42);
  v80 = v143;
  MEMORY[0x23B7C4B4C](v79);
  v81 = v162;
  v82 = v55;
  Date.FormatStyle.day(_:)();
  v84 = v159;
  v83 = v160;
  v85 = *(void (**)(uint64_t, uint64_t))(v160 + 8);
  v85(v55, v159);
  (*(void (**)(char *, uint64_t))(v144 + 8))(v80, v145);
  v86 = *(void (**)(uint64_t, char *, uint64_t))(v83 + 32);
  v86(v55, v81, v84);
  (*(void (**)(char *, uint64_t, uint64_t))(v83 + 16))(v81, v55, v84);
  v87 = v141;
  static Date.FormatStyle.Symbol.SecondFraction.omitted.getter();
  v88 = v140;
  Date.FormatStyle.year(_:)();
  (*(void (**)(char *, uint64_t))(v156 + 8))(v87, v157);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE2A0], MEMORY[0x24BDCE2B8]);
  v89 = dispatch thunk of static Equatable.== infix(_:_:)();
  v85((uint64_t)v88, v84);
  v85((uint64_t)v81, v84);
  v90 = swift_allocObject();
  *(_BYTE *)(v90 + 16) = 2;
  switch(*(_QWORD *)(v158 + *(int *)(type metadata accessor for SystemFormatStyle.DateReference() + 32)))
  {
    case 0:
      if ((v89 & 1) == 0)
        goto LABEL_42;
      v91 = v135;
      MEMORY[0x23B7C4CFC]();
      break;
    case 1:
      if ((v89 & 1) == 0)
        goto LABEL_42;
      v91 = v135;
      MEMORY[0x23B7C4CF0]();
      break;
    case 2:
      if ((v89 & 1) == 0 || (getter of showsMonth #1 in SystemFormatStyle.DateReference.add(_:to:)(v90, v82) & 1) != 0)
        goto LABEL_42;
      v91 = v135;
      MEMORY[0x23B7C4D08]();
      break;
    case 3:
      if ((v89 & 1) == 0 || (getter of showsMonth #1 in SystemFormatStyle.DateReference.add(_:to:)(v90, v82) & 1) != 0)
        goto LABEL_42;
      v91 = v135;
      MEMORY[0x23B7C4D14]();
      break;
    default:
LABEL_42:
      v91 = v135;
      MEMORY[0x23B7C4D20]();
      break;
  }
  v114 = v138;
  v115 = v137;
  v116 = v136;
  (*(void (**)(char *, char *, uint64_t))(v137 + 32))(v136, v91, v138);
  Date.FormatStyle.weekday(_:)();
  v85(v82, v84);
  (*(void (**)(char *, uint64_t))(v115 + 8))(v116, v114);
  v86(v82, v81, v84);
  return swift_release();
}

uint64_t getter of showsMonth #1 in SystemFormatStyle.DateReference.add(_:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  char *v18;
  char v19;
  _BYTE *v20;
  int v21;
  void (*v22)(char *, uint64_t, uint64_t, double);
  void (*v23)(char *, uint64_t);
  char v24;
  char v25;
  uint64_t v27;

  v4 = type metadata accessor for Date.FormatStyle.Symbol.Month();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date.FormatStyle();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v27 - v13;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v27 - v16;
  v21 = *(unsigned __int8 *)(a1 + 16);
  v20 = (_BYTE *)(a1 + 16);
  v19 = v21;
  if (v21 == 2)
  {
    v27 = v4;
    v22 = *(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16);
    v22((char *)&v27 - v16, a2, v8, v17);
    ((void (*)(char *, uint64_t, uint64_t))v22)(v11, a2, v8);
    static Date.FormatStyle.Symbol.Month.omitted.getter();
    Date.FormatStyle.month(_:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v27);
    v23 = *(void (**)(char *, uint64_t))(v9 + 8);
    v23(v11, v8);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE2A0], MEMORY[0x24BDCE2B8]);
    v24 = dispatch thunk of static Equatable.== infix(_:_:)();
    v23(v14, v8);
    v23(v18, v8);
    v25 = v24 ^ 1;
    swift_beginAccess();
    *v20 = v25 & 1;
  }
  else
  {
    v25 = v19 & 1;
  }
  return v25 & 1;
}

BOOL closure #1 in SystemFormatStyle.DateReference.containerForThreshold.getter()
{
  double v0;
  double v2;
  double v3;

  Date.ComponentsFormatStyle.Field.magnitude.getter(&v3);
  v0 = v3;
  type metadata accessor for SystemFormatStyle.DateReference();
  Date.ComponentsFormatStyle.Field.magnitude.getter(&v2);
  return v2 < v0;
}

uint64_t SystemFormatStyle.DateReference.updateFrequency(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;

  type metadata accessor for Date.ComponentsFormatStyle.Field?(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v34 = (char *)&v30 - v13;
  v37 = *a1;
  outlined init with copy of TypesettingLanguage(v2, a2, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateReference);
  v14 = *(int *)(type metadata accessor for SystemFormatStyle.DateReference() + 20);
  v15 = *(_QWORD *)(a2 + v14);
  v39 = MEMORY[0x24BEE4AF8];
  v16 = *(_QWORD *)(v15 + 16);
  result = swift_bridgeObjectRetain();
  v36 = v16;
  v30 = v14;
  v31 = a2;
  if (v16)
  {
    v18 = 0;
    v32 = v11;
    v33 = v7;
    v19 = v34;
    v35 = v15;
    while (v18 < *(_QWORD *)(v15 + 16))
    {
      v20 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
      v21 = *(_QWORD *)(v9 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v7, v15 + v20 + v21 * v18, v8);
      v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      v22(v7, 0, 1, v8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
        goto LABEL_15;
      v23 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
      v23(v19, v7, v8);
      Date.ComponentsFormatStyle.Field.magnitude.getter(&v38);
      if (v38 < 1.0 / dbl_235281538[v37])
      {
        result = (*(uint64_t (**)(char *, uint64_t, double))(v9 + 8))(v19, v8, v38);
      }
      else
      {
        ((void (*)(char *, char *, uint64_t, double))v23)(v11, v19, v8, v38);
        v24 = v39;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v24 + 16) + 1, 1);
          v24 = v39;
        }
        v26 = *(_QWORD *)(v24 + 16);
        v25 = *(_QWORD *)(v24 + 24);
        if (v26 >= v25 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
          v24 = v39;
        }
        *(_QWORD *)(v24 + 16) = v26 + 1;
        v11 = v32;
        result = ((uint64_t (*)(unint64_t, char *, uint64_t))v23)(v24 + v20 + v26 * v21, v32, v8);
        v39 = v24;
        v7 = v33;
        v19 = v34;
      }
      ++v18;
      v15 = v35;
      if (v36 == v18)
        goto LABEL_14;
    }
    __break(1u);
  }
  else
  {
    v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
LABEL_14:
    v22(v7, 1, 1, v8);
LABEL_15:
    swift_bridgeObjectRelease();
    outlined destroy of TypesettingConfiguration((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Date.ComponentsFormatStyle.Field?);
    v27 = v39;
    v29 = v30;
    v28 = v31;
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v28 + v29) = v27;
  }
  return result;
}

uint64_t SystemFormatStyle.DateReference.capitalizationContext(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  v3 = v2;
  v6 = type metadata accessor for SystemFormatStyle.DateReference();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for FormatStyleCapitalizationContext();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = v3 + *(int *)(v6 + 48);
  MEMORY[0x23B7C4858](v11);
  LOBYTE(v14) = MEMORY[0x23B7C484C](v14, v13);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  if ((v14 & 1) == 0)
    return outlined init with copy of TypesettingLanguage(v3, a2, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateReference);
  outlined init with copy of TypesettingLanguage(v3, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateReference);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 24))(&v8[*(int *)(v6 + 48)], a1, v9);
  return outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v8, a2, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateReference);
}

uint64_t protocol witness for CapitalizationContextDependentFormatStyle.capitalizationContext(_:) in conformance SystemFormatStyle.DateReference@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;

  v5 = v3;
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for FormatStyleCapitalizationContext();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v5 + *(int *)(a2 + 48);
  MEMORY[0x23B7C4858](v12);
  LOBYTE(v15) = MEMORY[0x23B7C484C](v15, v14);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  if ((v15 & 1) == 0)
    return outlined init with copy of TypesettingLanguage(v5, a3, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateReference);
  outlined init with copy of TypesettingLanguage(v5, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateReference);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 24))(&v9[*(int *)(a2 + 48)], a1, v10);
  return outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v9, a3, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateReference);
}

void static SystemFormatStyle.DateReference.representation<A>(of:for:)(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  _QWORD v25[9];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _UNKNOWN **v37;

  v30 = a3;
  v31 = a4;
  v32 = a1;
  v28 = type metadata accessor for Date();
  v27 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v29 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for TimeZone();
  v25[6] = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v25[5] = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v25[8] = (char *)v25 - v10;
  MEMORY[0x24BDAC7A8](v11);
  v25[7] = (char *)v25 - v12;
  v13 = type metadata accessor for Calendar();
  v25[2] = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v25[1] = (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v25[4] = (char *)v25 - v16;
  MEMORY[0x24BDAC7A8](v17);
  v25[3] = (char *)v25 - v18;
  v19 = type metadata accessor for Locale();
  MEMORY[0x24BDAC7A8](v19);
  MEMORY[0x24BDAC7A8](v20);
  MEMORY[0x24BDAC7A8](v21);
  v22 = type metadata accessor for SystemFormatStyle.DateReference();
  MEMORY[0x24BDAC7A8](v22);
  LODWORD(a2) = *a2;
  v24 = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type SystemFormatStyle.DateReference and conformance SystemFormatStyle.DateReference, v23, (uint64_t)&protocol conformance descriptor for SystemFormatStyle.DateReference);
  if ((int)a2 <= 1)
  {
    v25[0] = a5;
    v33 = v30;
    v34 = v22;
    v35 = v31;
    v36 = v24;
    v37 = &protocol witness table for AttributedString;
    type metadata accessor for TimeDataFormatting.Resolvable();
  }
  v33 = v30;
  v34 = v22;
  v35 = v31;
  v36 = v24;
  v37 = &protocol witness table for AttributedString;
  type metadata accessor for TimeDataFormatting.Resolvable();
}

void sub_234A841EC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *boxed_opaque_existential_1;

  v1[3] = a1;
  v1[4] = (uint64_t)&protocol witness table for TimeDataFormatting.Resolvable<A, B>;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v1);
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(boxed_opaque_existential_1, *(_QWORD *)(v2 - 232), a1);
  JUMPOUT(0x234A8429CLL);
}

uint64_t partial apply for closure #1 in SystemFormatStyle.DateReference.init(to:allowedFields:maxFieldCount:thresholdField:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in SystemFormatStyle.DateReference.init(to:allowedFields:maxFieldCount:thresholdField:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24)) & 1;
}

void type metadata accessor for ClosedRange<Date>?(uint64_t a1)
{
  type metadata accessor for [(_:)](a1, &lazy cache variable for type metadata for ClosedRange<Date>?, (uint64_t (*)(uint64_t))type metadata accessor for ClosedRange<Date>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

void type metadata accessor for ClosedRange<Date>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ClosedRange<Date>)
  {
    type metadata accessor for Date();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
    v0 = type metadata accessor for ClosedRange();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ClosedRange<Date>);
  }
}

uint64_t specialized EnvironmentValues._set<A>(_:for:)(uint64_t a1)
{
  return specialized EnvironmentValues._set<A>(_:for:)(a1, (uint64_t (*)(_QWORD))type metadata accessor for Date?, (void (*)(uint64_t *, _BYTE *, _BYTE *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

{
  return specialized EnvironmentValues._set<A>(_:for:)(a1, (uint64_t (*)(_QWORD))type metadata accessor for Date?, (void (*)(uint64_t *, _BYTE *, _BYTE *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];

  v9[3] = *MEMORY[0x24BDAC8D0];
  v3 = type metadata accessor for EnvironmentValues.Key.Value();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v1;
  outlined init with copy of TypesettingLanguage(a1, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for EnvironmentValues.Key.Value);
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, (uint64_t)v5);
  swift_release();
  outlined destroy of TypesettingConfiguration((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for EnvironmentValues.Key.Value);
  if (v1[1])
  {
    v7 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v6, v7);
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  return specialized EnvironmentValues._set<A>(_:for:)(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BDCEEA8], (void (*)(uint64_t *, _BYTE *, _BYTE *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

{
  return specialized EnvironmentValues._set<A>(_:for:)(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BDCF2D8], (void (*)(uint64_t *, _BYTE *, _BYTE *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

{
  return specialized EnvironmentValues._set<A>(_:for:)(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BDCF510], (void (*)(uint64_t *, _BYTE *, _BYTE *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[40];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v2 = *v1;
  outlined init with copy of TypesettingLanguage(a1, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityTextAttributeResolver?);
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, (uint64_t)v5);
  swift_release();
  outlined destroy of TypesettingConfiguration((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityTextAttributeResolver?);
  if (v1[1])
  {
    v3 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v2, v3);
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  return specialized EnvironmentValues._set<A>(_:for:)(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

{
  return specialized EnvironmentValues._set<A>(_:for:)(a1, (uint64_t (*)(_QWORD))type metadata accessor for TypesettingConfiguration, (void (*)(uint64_t *, _BYTE *, _BYTE *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

{
  return specialized EnvironmentValues._set<A>(_:for:)(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

{
  return specialized EnvironmentValues._set<A>(_:for:)(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[40];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v2 = *v1;
  outlined init with copy of AnyTrackedValue(a1, (uint64_t)v5);
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, (uint64_t)v5);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  if (v1[1])
  {
    v3 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v2, v3);
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  return specialized EnvironmentValues._set<A>(_:for:)(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[8];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v2 = *v1;
  outlined init with copy of EnvironmentValues.PreferenceBridgeKey.Value(a1, (uint64_t)v5);
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, (uint64_t)v5);
  swift_release();
  outlined destroy of EnvironmentValues.PreferenceBridgeKey.Value((uint64_t)v5);
  if (v1[1])
  {
    v3 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v2, v3);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t specialized EnvironmentValues._set<A>(_:for:)(uint64_t a1, uint64_t (*a2)(_QWORD), void (*a3)(uint64_t *, _BYTE *, _BYTE *), void (*a4)(uint64_t, uint64_t))
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[16];

  v8 = a2(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = &v16[-v11];
  v13 = *v4;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v9 + 16))(&v16[-v11], a1, v8, v10);
  swift_retain_n();
  a3(v4, v12, v16);
  swift_release();
  (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v12, v8);
  if (v4[1])
  {
    v14 = *v4;
    swift_retain();
    swift_retain();
    a4(v13, v14);
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  uint64_t *v4;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[16];

  v9 = a2(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = &v15[-v10];
  v12 = *v4;
  outlined init with copy of TypesettingLanguage(a1, (uint64_t)&v15[-v10], a2);
  swift_retain_n();
  a3(v4, v11, v15);
  swift_release();
  outlined destroy of TypesettingConfiguration((uint64_t)v11, a2);
  if (v4[1])
  {
    v13 = *v4;
    swift_retain();
    swift_retain();
    a4(v12, v13);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t specialized EnvironmentValues._set<A>(_:for:)(uint64_t a1, void (*a2)(uint64_t *, uint64_t, uint64_t *), void (*a3)(uint64_t, uint64_t))
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v7 = *v3;
  swift_retain_n();
  swift_bridgeObjectRetain();
  a2(v3, a1, &v10);
  swift_bridgeObjectRelease();
  swift_release();
  if (v3[1])
  {
    v8 = *v3;
    swift_retain();
    swift_retain();
    a3(v7, v8);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void specialized Array<A>.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v4;
  Swift::UInt64 *v5;
  Swift::UInt64 v6;
  void (*v7)(uint64_t);
  Swift::UInt64 v8;

  v4 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    v5 = (Swift::UInt64 *)(a2 + 40);
    do
    {
      v6 = *v5;
      v7 = *(void (**)(uint64_t))(*(_QWORD *)*(v5 - 1) + 112);
      swift_retain();
      v7(a1);
      if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v8 = v6;
      else
        v8 = 0;
      Hasher._combine(_:)(v8);
      swift_release();
      v5 += 2;
      --v4;
    }
    while (v4);
  }
}

{
  Swift::UInt v4;
  Swift::UInt64 *v5;
  Swift::UInt64 v6;
  void (*v7)(uint64_t);
  Swift::UInt64 v8;

  v4 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    v5 = (Swift::UInt64 *)(a2 + 40);
    do
    {
      v6 = *v5;
      v7 = *(void (**)(uint64_t))(*(_QWORD *)*(v5 - 1) + 136);
      swift_retain();
      v7(a1);
      if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v8 = v6;
      else
        v8 = 0;
      Hasher._combine(_:)(v8);
      swift_release();
      v5 += 2;
      --v4;
    }
    while (v4);
  }
}

void specialized Array<A>.hash(into:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;
  id v7;
  Swift::UInt v8;

  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    Hasher._combine(_:)(v8);
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v3)
      return;
  }
  else
  {
    Hasher._combine(_:)(*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10));
    v3 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v3)
      return;
  }
  if (v3 < 1)
  {
    __break(1u);
  }
  else if ((a2 & 0xC000000000000001) != 0)
  {
    v4 = 0;
    do
    {
      MEMORY[0x23B7C6D9C](v4++, a2);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      _CFObject.hash(into:)();
      swift_unknownObjectRelease();
    }
    while (v3 != v4);
  }
  else
  {
    v5 = (void **)(a2 + 32);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    do
    {
      v6 = *v5++;
      v7 = v6;
      _CFObject.hash(into:)();

      --v3;
    }
    while (v3);
  }
}

uint64_t specialized Array<A>.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::UInt v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t (*v15)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  _QWORD v17[2];

  v4 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Date.ComponentsFormatStyle.Field?(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a2 + 16);
  v17[1] = a1;
  Hasher._combine(_:)(v11);
  if (v11)
  {
    v12 = a2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v13 = *(_QWORD *)(v5 + 72);
    v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    while (1)
    {
      v14(v10, v12, v4);
      v15 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
      v15(v10, 0, 1, v4);
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4);
      if ((_DWORD)result == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
      lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], MEMORY[0x24BDCE6E0]);
      dispatch thunk of Hashable.hash(into:)();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      v12 += v13;
      if (!--v11)
        return v15(v10, 1, 1, v4);
    }
  }
  else
  {
    v15 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    return v15(v10, 1, 1, v4);
  }
  return result;
}

uint64_t specialized static SystemFormatStyle.DateReference.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int *v4;

  if ((static Date.== infix(_:_:)() & 1) != 0)
  {
    v4 = (int *)type metadata accessor for SystemFormatStyle.DateReference();
    if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + v4[5]), *(_QWORD *)(a2 + v4[5])) & 1) != 0
      && *(_QWORD *)(a1 + v4[6]) == *(_QWORD *)(a2 + v4[6])
      && (MEMORY[0x23B7C4FB4](a1 + v4[7], a2 + v4[7]) & 1) != 0
      && *(_QWORD *)(a1 + v4[8]) == *(_QWORD *)(a2 + v4[8])
      && (MEMORY[0x23B7C526C](a1 + v4[9], a2 + v4[9]) & 1) != 0
      && (MEMORY[0x23B7C5374](a1 + v4[10], a2 + v4[10]) & 1) != 0
      && (MEMORY[0x23B7C5488](a1 + v4[11], a2 + v4[11]) & 1) != 0)
    {
      JUMPOUT(0x23B7C484CLL);
    }
  }
  return 0;
}

unint64_t lazy protocol witness table accessor for type SystemFormatStyle.DateReference.CodingKeys and conformance SystemFormatStyle.DateReference.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SystemFormatStyle.DateReference.CodingKeys and conformance SystemFormatStyle.DateReference.CodingKeys;
  if (!lazy protocol witness table cache variable for type SystemFormatStyle.DateReference.CodingKeys and conformance SystemFormatStyle.DateReference.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SystemFormatStyle.DateReference.CodingKeys, &unk_250626940);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemFormatStyle.DateReference.CodingKeys and conformance SystemFormatStyle.DateReference.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SystemFormatStyle.DateReference.CodingKeys and conformance SystemFormatStyle.DateReference.CodingKeys;
  if (!lazy protocol witness table cache variable for type SystemFormatStyle.DateReference.CodingKeys and conformance SystemFormatStyle.DateReference.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SystemFormatStyle.DateReference.CodingKeys, &unk_250626940);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemFormatStyle.DateReference.CodingKeys and conformance SystemFormatStyle.DateReference.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SystemFormatStyle.DateReference.CodingKeys and conformance SystemFormatStyle.DateReference.CodingKeys;
  if (!lazy protocol witness table cache variable for type SystemFormatStyle.DateReference.CodingKeys and conformance SystemFormatStyle.DateReference.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SystemFormatStyle.DateReference.CodingKeys, &unk_250626940);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemFormatStyle.DateReference.CodingKeys and conformance SystemFormatStyle.DateReference.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SystemFormatStyle.DateReference.CodingKeys and conformance SystemFormatStyle.DateReference.CodingKeys;
  if (!lazy protocol witness table cache variable for type SystemFormatStyle.DateReference.CodingKeys and conformance SystemFormatStyle.DateReference.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04]("=j=\x1Bl", &unk_250626940);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemFormatStyle.DateReference.CodingKeys and conformance SystemFormatStyle.DateReference.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextSizeVariant and conformance TextSizeVariant()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextSizeVariant and conformance TextSizeVariant;
  if (!lazy protocol witness table cache variable for type TextSizeVariant and conformance TextSizeVariant)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TextSizeVariant, &type metadata for TextSizeVariant);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextSizeVariant and conformance TextSizeVariant);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextSizeVariant and conformance TextSizeVariant;
  if (!lazy protocol witness table cache variable for type TextSizeVariant and conformance TextSizeVariant)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TextSizeVariant, &type metadata for TextSizeVariant);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextSizeVariant and conformance TextSizeVariant);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextSizeVariant and conformance TextSizeVariant;
  if (!lazy protocol witness table cache variable for type TextSizeVariant and conformance TextSizeVariant)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TextSizeVariant, &type metadata for TextSizeVariant);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextSizeVariant and conformance TextSizeVariant);
  }
  return result;
}

void type metadata accessor for KeyedEncodingContainer<SystemFormatStyle.DateReference.CodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = lazy protocol witness table accessor for type SystemFormatStyle.DateReference.CodingKeys and conformance SystemFormatStyle.DateReference.CodingKeys();
    v7 = a3(a1, &unk_250626940, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t lazy protocol witness table accessor for type [Date.ComponentsFormatStyle.Field] and conformance <A> [A](unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = *a1;
  if (!result)
  {
    v9 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8];
    type metadata accessor for [(_:)](255, &lazy cache variable for type metadata for [Date.ComponentsFormatStyle.Field], (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v11 = v10;
    v12 = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(a2, v9, a3);
    result = MEMORY[0x23B7C9C04](a4, v11, &v12);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for Date?(uint64_t a1)
{
  type metadata accessor for [(_:)](a1, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

void type metadata accessor for DateInterval?(uint64_t a1)
{
  type metadata accessor for [(_:)](a1, &lazy cache variable for type metadata for DateInterval?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

void type metadata accessor for Date.ComponentsFormatStyle.Field?(uint64_t a1)
{
  type metadata accessor for [(_:)](a1, &lazy cache variable for type metadata for Date.ComponentsFormatStyle.Field?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

void type metadata accessor for Date??(uint64_t a1)
{
  type metadata accessor for [(_:)](a1, &lazy cache variable for type metadata for Date??, (uint64_t (*)(uint64_t))type metadata accessor for Date?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

BOOL partial apply for closure #1 in SystemFormatStyle.DateReference.discreteInput(before:)()
{
  return partial apply for closure #1 in SystemFormatStyle.DateReference.discreteInput(before:)();
}

{
  double v0;
  double v2;
  double v3;

  Date.ComponentsFormatStyle.Field.magnitude.getter(&v3);
  v0 = v3;
  Date.ComponentsFormatStyle.Field.magnitude.getter(&v2);
  return v2 < v0;
}

uint64_t base witness table accessor for Decodable in SystemFormatStyle.DateReference()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type SystemFormatStyle.DateReference and conformance SystemFormatStyle.DateReference, (uint64_t (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateReference, (uint64_t)&protocol conformance descriptor for SystemFormatStyle.DateReference);
}

uint64_t base witness table accessor for Encodable in SystemFormatStyle.DateReference()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type SystemFormatStyle.DateReference and conformance SystemFormatStyle.DateReference, (uint64_t (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateReference, (uint64_t)&protocol conformance descriptor for SystemFormatStyle.DateReference);
}

uint64_t base witness table accessor for Hashable in SystemFormatStyle.DateReference()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type SystemFormatStyle.DateReference and conformance SystemFormatStyle.DateReference, (uint64_t (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateReference, (uint64_t)&protocol conformance descriptor for SystemFormatStyle.DateReference);
}

uint64_t base witness table accessor for Equatable in SystemFormatStyle.DateReference()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type SystemFormatStyle.DateReference and conformance SystemFormatStyle.DateReference, (uint64_t (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateReference, (uint64_t)&protocol conformance descriptor for SystemFormatStyle.DateReference);
}

uint64_t base witness table accessor for FormatStyle in SystemFormatStyle.DateReference()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type SystemFormatStyle.DateReference and conformance SystemFormatStyle.DateReference, (uint64_t (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateReference, (uint64_t)&protocol conformance descriptor for SystemFormatStyle.DateReference);
}

uint64_t instantiation function for generic protocol witness table for SystemFormatStyle.DateReference(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type SystemFormatStyle.DateReference and conformance SystemFormatStyle.DateReference, (uint64_t (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateReference, (uint64_t)&protocol conformance descriptor for SystemFormatStyle.DateReference);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  result = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type SystemFormatStyle.DateReference and conformance SystemFormatStyle.DateReference, (uint64_t (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateReference, (uint64_t)&protocol conformance descriptor for SystemFormatStyle.DateReference);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  result = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type SystemFormatStyle.DateReference and conformance SystemFormatStyle.DateReference, (uint64_t (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateReference, (uint64_t)&protocol conformance descriptor for SystemFormatStyle.DateReference);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **associated type witness table accessor for FormatStyle.FormatOutput : AttributedStringConvertible in SystemFormatStyle.DateReference()
{
  return &protocol witness table for AttributedString;
}

uint64_t *initializeBufferWithCopyOfBuffer for SystemFormatStyle.DateReference(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v30 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v30 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Date();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)a1 + v8) = *(uint64_t *)((char *)a2 + v8);
    v9 = a3[7];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Date.ComponentsFormatStyle.Field();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    v14 = a3[9];
    *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for Locale();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
    v18 = a3[10];
    v19 = (char *)a1 + v18;
    v20 = (char *)a2 + v18;
    v21 = type metadata accessor for Calendar();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
    v22 = a3[11];
    v23 = (char *)a1 + v22;
    v24 = (char *)a2 + v22;
    v25 = type metadata accessor for TimeZone();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v23, v24, v25);
    v26 = a3[12];
    v27 = (char *)a1 + v26;
    v28 = (char *)a2 + v26;
    v29 = type metadata accessor for FormatStyleCapitalizationContext();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v27, v28, v29);
  }
  return a1;
}

uint64_t destroy for SystemFormatStyle.DateReference(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  v5 = a1 + a2[7];
  v6 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[9];
  v8 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[10];
  v10 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[11];
  v12 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = a1 + a2[12];
  v14 = type metadata accessor for FormatStyleCapitalizationContext();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
}

uint64_t initializeWithCopy for SystemFormatStyle.DateReference(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[7];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  v13 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  v17 = a3[10];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
  v21 = a3[11];
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v22, v23, v24);
  v25 = a3[12];
  v26 = a1 + v25;
  v27 = a2 + v25;
  v28 = type metadata accessor for FormatStyleCapitalizationContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v26, v27, v28);
  return a1;
}

uint64_t assignWithCopy for SystemFormatStyle.DateReference(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v7 = a3[7];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  v11 = a3[9];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[10];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[11];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  v23 = a3[12];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = type metadata accessor for FormatStyleCapitalizationContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 24))(v24, v25, v26);
  return a1;
}

uint64_t initializeWithTake for SystemFormatStyle.DateReference(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[7];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
  v16 = a3[10];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
  v20 = a3[11];
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
  v24 = a3[12];
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = type metadata accessor for FormatStyleCapitalizationContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v25, v26, v27);
  return a1;
}

uint64_t assignWithTake for SystemFormatStyle.DateReference(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  swift_bridgeObjectRelease();
  v7 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[10];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[11];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  v23 = a3[12];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = type metadata accessor for FormatStyleCapitalizationContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 40))(v24, v25, v26);
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemFormatStyle.DateReference()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_234A85C90(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v13 = type metadata accessor for Date.ComponentsFormatStyle.Field();
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
    {
      v8 = v13;
      v15 = a3[7];
    }
    else
    {
      v16 = type metadata accessor for Locale();
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
      {
        v8 = v16;
        v15 = a3[9];
      }
      else
      {
        v17 = type metadata accessor for Calendar();
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
        {
          v8 = v17;
          v15 = a3[10];
        }
        else
        {
          v18 = type metadata accessor for TimeZone();
          v14 = *(_QWORD *)(v18 - 8);
          if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
          {
            v8 = v18;
            v15 = a3[11];
          }
          else
          {
            v8 = type metadata accessor for FormatStyleCapitalizationContext();
            v14 = *(_QWORD *)(v8 - 8);
            v15 = a3[12];
          }
        }
      }
    }
    v10 = a1 + v15;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + a3[5]);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for SystemFormatStyle.DateReference()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_234A85DD4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  result = type metadata accessor for Date();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[5]) = (a2 - 1);
      return result;
    }
    v13 = type metadata accessor for Date.ComponentsFormatStyle.Field();
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[7];
    }
    else
    {
      v16 = type metadata accessor for Locale();
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[9];
      }
      else
      {
        v17 = type metadata accessor for Calendar();
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[10];
        }
        else
        {
          v18 = type metadata accessor for TimeZone();
          v14 = *(_QWORD *)(v18 - 8);
          if (*(_DWORD *)(v14 + 84) == a3)
          {
            v10 = v18;
            v15 = a4[11];
          }
          else
          {
            v10 = type metadata accessor for FormatStyleCapitalizationContext();
            v14 = *(_QWORD *)(v10 - 8);
            v15 = a4[12];
          }
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata completion function for SystemFormatStyle.DateReference()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for Date.ComponentsFormatStyle.Field();
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for Locale();
      if (v3 <= 0x3F)
      {
        result = type metadata accessor for Calendar();
        if (v4 <= 0x3F)
        {
          result = type metadata accessor for TimeZone();
          if (v5 <= 0x3F)
          {
            result = type metadata accessor for FormatStyleCapitalizationContext();
            if (v6 <= 0x3F)
            {
              swift_initStructMetadata();
              return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SystemFormatStyle.DateReference.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SystemFormatStyle.DateReference.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_234A860F4 + 4 * byte_2352811BA[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_234A86128 + 4 * byte_2352811B5[v4]))();
}

uint64_t sub_234A86128(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234A86130(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234A86138);
  return result;
}

uint64_t sub_234A86144(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234A8614CLL);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_234A86150(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234A86158(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for SystemFormatStyle.DateReference.CodingKeys()
{
  return &unk_250626940;
}

uint64_t specialized SystemFormatStyle.DateReference.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1702125924 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x466465776F6C6C61 && a2 == 0xED000073646C6569
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x646C65694678616DLL && a2 == 0xED0000746E756F43
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6C6F687365726874 && a2 == 0xEE00646C65694664
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x69726156657A6973 && a2 == 0xEB00000000746E61
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x7261646E656C6163 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x656E6F5A656D6974 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000002352DDD90)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 8;
    else
      return 9;
  }
}

void type metadata accessor for AccessibilityTextAttributeResolver?(uint64_t a1)
{
  type metadata accessor for [(_:)](a1, &lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityTextAttributeResolver, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

uint64_t outlined assign with take of Date??(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Date??(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for specialized closure #1 in Sequence<>.contains(_:)()
{
  type metadata accessor for Date.ComponentsFormatStyle.Field();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE6C8], MEMORY[0x24BDCE6E8]);
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

BOOL partial apply for closure #1 in SystemFormatStyle.DateReference.containerForThreshold.getter()
{
  return closure #1 in SystemFormatStyle.DateReference.containerForThreshold.getter();
}

uint64_t sub_234A86750()
{
  return swift_deallocObject();
}

void type metadata accessor for (Date.ComponentsFormatStyle.Field?, Date.ComponentsFormatStyle.Field?)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (Date.ComponentsFormatStyle.Field?, Date.ComponentsFormatStyle.Field?))
  {
    type metadata accessor for Date.ComponentsFormatStyle.Field?(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Date.ComponentsFormatStyle.Field?, Date.ComponentsFormatStyle.Field?));
  }
}

uint64_t sub_234A867C8()
{
  return MEMORY[0x24BDCC060];
}

uint64_t sub_234A867D8()
{
  return 8;
}

uint64_t sub_234A867E4()
{
  return swift_release();
}

uint64_t sub_234A867EC(_QWORD *a1, _QWORD *a2)
{
  *a2 = *a1;
  return swift_retain();
}

_QWORD *sub_234A86800(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t partial apply for closure #1 in SystemFormatStyle.DateReference.relativeText(for:)@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = static Date.< infix(_:_:)();
  *a1 = result & 1;
  return result;
}

uint64_t partial apply for closure #2 in SystemFormatStyle.DateReference.relativeText(for:)@<X0>(BOOL *a1@<X8>)
{
  return closure #2 in SystemFormatStyle.DateReference.relativeText(for:)(a1);
}

void type metadata accessor for (lower: Date, upper: Date)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (lower: Date, upper: Date))
  {
    type metadata accessor for Date();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (lower: Date, upper: Date));
  }
}

uint64_t closure #1 in SystemFormatStyle.DateReference.init(to:allowedFields:maxFieldCount:thresholdField:)partial apply(uint64_t a1)
{
  return partial apply for closure #1 in SystemFormatStyle.DateReference.init(to:allowedFields:maxFieldCount:thresholdField:)(a1) & 1;
}

id static CAHostingLayerPlatformDefinition.makeView(kind:)(unsigned __int8 *a1)
{
  unsigned int v1;
  id v2;
  id v3;
  id result;
  void *v5;
  uint64_t v6;
  char **v7;

  v1 = *a1;
  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDE56D0]), sel_init);
  if (v1 != 12)
    goto LABEL_6;
  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDE56D0]), sel_init);
  objc_msgSend(v2, sel_setMask_, v3);

  result = objc_msgSend(v2, sel_mask);
  if (result)
  {
    v5 = result;
    if (one-time initialization token for shared != -1)
      swift_once();
    objc_msgSend(v5, sel_setDelegate_, static CAPlatformLayerDelegate.shared);
    objc_msgSend(v5, sel_setAnchorPoint_, 0.0, 0.0);
    objc_msgSend(v5, sel_setAllowsGroupOpacity_, 0);
    objc_msgSend(v5, sel_setAllowsGroupBlending_, 0);

LABEL_6:
    if (one-time initialization token for shared != -1)
      swift_once();
    objc_msgSend(v2, sel_setDelegate_, static CAPlatformLayerDelegate.shared);
    objc_msgSend(v2, sel_setAnchorPoint_, 0.0, 0.0);
    if (v1 > 0xC)
      return v2;
    v6 = 1;
    if (((1 << v1) & 0x1E01) != 0)
    {
      objc_msgSend(v2, sel_setAllowsGroupOpacity_, 0);
      v6 = 0;
      v7 = &selRef_setAllowsGroupBlending_;
    }
    else
    {
      if (((1 << v1) & 0xE) == 0)
        return v2;
      v7 = &selRef_setAllowsEdgeAntialiasing_;
    }
    objc_msgSend(v2, *v7, v6);
    return v2;
  }
  __break(1u);
  return result;
}

id static CAHostingLayerPlatformDefinition.makeLayerView(type:kind:)(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v2;
  id v3;
  uint64_t v4;
  char **v5;

  v2 = *a2;
  v3 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  if (one-time initialization token for shared != -1)
    swift_once();
  objc_msgSend(v3, sel_setDelegate_, static CAPlatformLayerDelegate.shared);
  objc_msgSend(v3, sel_setAnchorPoint_, 0.0, 0.0);
  if (v2 <= 0xC)
  {
    v4 = 1;
    if (((1 << v2) & 0x1E01) != 0)
    {
      objc_msgSend(v3, sel_setAllowsGroupOpacity_, 0);
      v4 = 0;
      v5 = &selRef_setAllowsGroupBlending_;
LABEL_8:
      objc_msgSend(v3, *v5, v4);
      return v3;
    }
    if (((1 << v2) & 0xE) != 0)
    {
      v5 = &selRef_setAllowsEdgeAntialiasing_;
      goto LABEL_8;
    }
  }
  return v3;
}

id static CAHostingLayerPlatformDefinition.makePlatformView(view:kind:)(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v2;
  void *v3;
  id result;
  uint64_t v5;
  char **v6;

  v2 = *a2;
  objc_opt_self();
  v3 = (void *)swift_dynamicCastObjCClassUnconditional();
  if (one-time initialization token for shared != -1)
    swift_once();
  objc_msgSend(v3, sel_setDelegate_, static CAPlatformLayerDelegate.shared);
  result = objc_msgSend(v3, sel_setAnchorPoint_, 0.0, 0.0);
  if (v2 <= 0xC)
  {
    v5 = 1;
    if (((1 << v2) & 0x1E01) != 0)
    {
      objc_msgSend(v3, sel_setAllowsGroupOpacity_, 0);
      v5 = 0;
      v6 = &selRef_setAllowsGroupBlending_;
    }
    else
    {
      if (((1 << v2) & 0xE) == 0)
        return result;
      v6 = &selRef_setAllowsEdgeAntialiasing_;
    }
    return objc_msgSend(v3, *v6, v5);
  }
  return result;
}

char *static CAHostingLayerPlatformDefinition.makeDrawingView(options:)(uint64_t a1)
{
  char v1;
  int v2;
  char v3;
  int v4;
  char v5;
  objc_class *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  id v15;
  uint64_t v16;
  char *v17;
  objc_super v19;
  char v20[4];
  int v21;
  char v22;
  int v23;
  char v24;

  v1 = *(_BYTE *)a1;
  v2 = *(_DWORD *)(a1 + 4);
  v3 = *(_BYTE *)(a1 + 8);
  v4 = *(_DWORD *)(a1 + 12);
  v5 = *(_BYTE *)(a1 + 16);
  if ((v4 & 1) != 0 && objc_msgSend((id)objc_opt_self(), sel_isSupported))
  {
    v6 = (objc_class *)type metadata accessor for RBDrawingLayer();
    v7 = (char *)objc_allocWithZone(v6);
    v8 = OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114RBDrawingLayer__state;
    type metadata accessor for AtomicBuffer<RBDrawingLayer.State>(0, v9, v10, v11);
    v12 = swift_allocObject();
    *(_DWORD *)(v12 + 16) = 0;
    *(_OWORD *)(v12 + 24) = 0u;
    *(_OWORD *)(v12 + 40) = 0u;
    *(_QWORD *)(v12 + 56) = 0;
    *(_BYTE *)(v12 + 64) = 5;
    *(_BYTE *)(v12 + 72) = 3;
    *(_QWORD *)(v12 + 80) = 0;
    *(_QWORD *)&v7[v8] = v12;
    v13 = &v7[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114RBDrawingLayer_options];
    *v13 = v1;
    *((_DWORD *)v13 + 1) = v2;
    v13[8] = v3;
    *((_DWORD *)v13 + 3) = v4;
    v13[16] = v5;
    v19.receiver = v7;
    v19.super_class = v6;
    v14 = (char *)objc_msgSendSuper2(&v19, sel_init);
    RBDrawingLayer.updateOptions()();

  }
  else
  {
    v20[0] = v1;
    v21 = v2;
    v22 = v3;
    v23 = v4;
    v24 = v5;
    v15 = objc_allocWithZone((Class)type metadata accessor for CGDrawingLayer());
    v14 = CGDrawingLayer.init(options:)(v20);
  }
  objc_msgSend(v14, sel_setContentsGravity_, *MEMORY[0x24BDE5CB0]);
  v16 = one-time initialization token for shared;
  v17 = v14;
  if (v16 != -1)
    swift_once();
  objc_msgSend(v17, sel_setDelegate_, static CAPlatformLayerDelegate.shared);
  objc_msgSend(v17, sel_setAnchorPoint_, 0.0, 0.0);

  return v17;
}

id static CAHostingLayerPlatformDefinition.setProjectionTransform(_:projectionView:)(__int128 *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  objc_opt_self();
  v2 = (void *)swift_dynamicCastObjCClassUnconditional();
  v3 = *((_QWORD *)a1 + 4);
  v4 = *((_QWORD *)a1 + 5);
  v5 = a1[1];
  v9 = *a1;
  v6 = *((_QWORD *)a1 + 8);
  v10 = 0;
  v11 = v5;
  v12 = v3;
  v13 = 0;
  v14 = v4;
  v15 = 0;
  v16 = 0;
  v7 = a1[3];
  v17 = xmmword_235281560;
  v18 = v7;
  v19 = 0;
  v20 = v6;
  return objc_msgSend(v2, sel_setTransform_, &v9);
}

uint64_t static CAHostingLayerPlatformDefinition.getRBLayer(drawingView:)()
{
  uint64_t result;

  swift_unknownObjectRetain();
  objc_opt_self();
  result = swift_dynamicCastObjCClass();
  if (!result)
  {
    swift_unknownObjectRelease();
    return 0;
  }
  return result;
}

id static CAHostingLayerPlatformDefinition.setIgnoresEvents(_:of:)(char a1, id a2)
{
  return objc_msgSend(a2, sel_setAllowsHitTesting_, (a1 & 1) == 0);
}

uint64_t CAHostingLayerPlatformDefinition.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CAHostingLayerPlatformDefinition()
{
  return objc_opt_self();
}

id one-time initialization function for shared()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CAPlatformLayerDelegate()), sel_init);
  static CAPlatformLayerDelegate.shared = (uint64_t)result;
  return result;
}

id CAPlatformLayerDelegate.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAPlatformLayerDelegate();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for CAPlatformLayerDelegate()
{
  return objc_opt_self();
}

void CGDrawingLayer.options.didset(uint64_t a1)
{
  _BYTE *v1;
  int v2;
  char v3;
  int v4;
  char v5;
  char *v6;
  unsigned __int8 v7;
  int v8;
  char v9;
  unsigned int v10;
  char v11;
  int v12;
  id *v13;
  id *v14;
  id v15;
  unsigned __int8 v16[4];
  int v17;
  char v18;
  unsigned int v19;
  char v20;
  unsigned __int8 v21[4];
  int v22;
  char v23;
  int v24;
  char v25;

  v2 = *(_DWORD *)(a1 + 4);
  v3 = *(_BYTE *)(a1 + 8);
  v4 = *(_DWORD *)(a1 + 12);
  v5 = *(_BYTE *)(a1 + 16);
  v6 = &v1[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_options];
  v7 = v1[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_options];
  v8 = *(_DWORD *)&v1[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_options + 4];
  v9 = v1[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_options + 8];
  v10 = *(_DWORD *)&v1[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_options + 12];
  v11 = v1[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_options + 16];
  v21[0] = *(_BYTE *)a1;
  v22 = v2;
  v23 = v3;
  v24 = v4;
  v25 = v5;
  v16[0] = v7;
  v17 = v8;
  v18 = v9;
  v19 = v10;
  v20 = v11;
  if (!specialized static RasterizationOptions.== infix(_:_:)(v21, v16))
  {
    objc_msgSend(v1, sel_setOpaque_, (v10 >> 1) & 1);
    v12 = *((_DWORD *)v6 + 3);
    v13 = (id *)MEMORY[0x24BDE5890];
    if ((v12 & 0x100) != 0)
      v13 = (id *)MEMORY[0x24BDE5898];
    if ((v12 & 0x40) != 0)
      v14 = (id *)MEMORY[0x24BDE5888];
    else
      v14 = v13;
    v15 = *v14;
    objc_msgSend(v1, sel_setContentsFormat_, v15);

  }
}

void (*CGDrawingLayer.options.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  char *v5;
  char v6;
  int v7;
  char v8;
  int v9;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_options;
  *v3 = v1;
  v3[1] = v4;
  v5 = (char *)(v1 + v4);
  v6 = *v5;
  v7 = *((_DWORD *)v5 + 1);
  v8 = v5[8];
  v9 = *((_DWORD *)v5 + 3);
  LOBYTE(v5) = v5[16];
  *((_DWORD *)v3 + 5) = v7;
  *((_BYTE *)v3 + 24) = v8;
  *((_DWORD *)v3 + 7) = v9;
  *((_BYTE *)v3 + 32) = (_BYTE)v5;
  *((_BYTE *)v3 + 16) = v6;
  return CGDrawingLayer.options.modify;
}

void CGDrawingLayer.options.modify(uint64_t a1)
{
  void *v1;
  char v2;
  char *v3;
  int v4;
  char v5;
  int v6;
  char v7;
  char v8;
  int v9;
  char v10;
  int v11;
  char v12;
  _BYTE v13[4];
  int v14;
  char v15;
  int v16;
  char v17;

  v1 = *(void **)a1;
  v2 = *(_BYTE *)(*(_QWORD *)a1 + 16);
  v3 = (char *)(**(_QWORD **)a1 + *(_QWORD *)(*(_QWORD *)a1 + 8));
  v4 = *(_DWORD *)(*(_QWORD *)a1 + 20);
  v5 = *(_BYTE *)(*(_QWORD *)a1 + 24);
  v6 = *(_DWORD *)(*(_QWORD *)a1 + 28);
  v7 = *(_BYTE *)(*(_QWORD *)a1 + 32);
  v8 = *v3;
  v9 = *((_DWORD *)v3 + 1);
  v10 = v3[8];
  v11 = *((_DWORD *)v3 + 3);
  v12 = v3[16];
  *v3 = v2;
  *((_DWORD *)v3 + 1) = v4;
  v3[8] = v5;
  *((_DWORD *)v3 + 3) = v6;
  v3[16] = v7;
  v13[0] = v8;
  v14 = v9;
  v15 = v10;
  v16 = v11;
  v17 = v12;
  CGDrawingLayer.options.didset((uint64_t)v13);
  free(v1);
}

char *CGDrawingLayer.init(options:)(char *a1)
{
  char *v1;
  objc_class *ObjectType;
  char v4;
  int v5;
  char v6;
  int v7;
  char v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  int v16;
  id *v17;
  id *v18;
  id v19;
  objc_super v21;

  ObjectType = (objc_class *)swift_getObjectType();
  v4 = *a1;
  v5 = *((_DWORD *)a1 + 1);
  v6 = a1[8];
  v7 = *((_DWORD *)a1 + 3);
  v8 = a1[16];
  v9 = &v1[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_content];
  *(_OWORD *)v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  *((_QWORD *)v9 + 4) = 0;
  v9[40] = 5;
  v10 = &v1[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_state];
  *v10 = 3;
  *((_QWORD *)v10 + 1) = 0;
  v11 = &v1[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_options];
  *v11 = v4;
  *((_DWORD *)v11 + 1) = v5;
  v11[8] = v6;
  *((_DWORD *)v11 + 3) = v7;
  v11[16] = v8;
  v21.receiver = v1;
  v21.super_class = ObjectType;
  v12 = (char *)objc_msgSendSuper2(&v21, sel_init);
  v13 = &v12[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_options];
  v14 = (*(_DWORD *)&v12[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_options + 12] >> 1) & 1;
  v15 = v12;
  objc_msgSend(v15, sel_setOpaque_, v14);
  v16 = *((_DWORD *)v13 + 3);
  v17 = (id *)MEMORY[0x24BDE5890];
  if ((v16 & 0x100) != 0)
    v17 = (id *)MEMORY[0x24BDE5898];
  if ((v16 & 0x40) != 0)
    v18 = (id *)MEMORY[0x24BDE5888];
  else
    v18 = v17;
  v19 = *v18;
  objc_msgSend(v15, sel_setContentsFormat_, v19);

  return v15;
}

uint64_t CGDrawingLayer.drawForTesting(in:)(void *a1)
{
  _BYTE *v1;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v10;
  uint64_t v11;

  LOBYTE(v11) = 3;
  v3 = *(void **)&v1[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_content];
  v4 = *(void **)&v1[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_content + 8];
  v5 = *(_QWORD *)&v1[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_content + 16];
  v6 = *(_QWORD *)&v1[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_content + 24];
  v7 = *(_QWORD *)&v1[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_content + 32];
  v8 = v1[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_content + 40];
  LOBYTE(v10) = v8;
  outlined copy of PlatformDrawableContent.Storage(v3, v4, v5, v6, v7, v8);
  objc_msgSend(v1, sel_bounds, v3, v4, v5, v6, v7, v10, v11, 0);
  PlatformDrawableContent.draw(in:size:state:)(a1);
  outlined consume of PlatformDrawableContent.Storage(v3, v4, v5, v6, v7, v8);
  return swift_release();
}

uint64_t type metadata accessor for CGDrawingLayer()
{
  return objc_opt_self();
}

void protocol witness for PlatformDrawable.options.getter in conformance CGDrawingLayer(uint64_t a1@<X8>)
{
  protocol witness for PlatformDrawable.options.getter in conformance CGDrawingLayer(&OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_options, a1);
}

void protocol witness for PlatformDrawable.options.setter in conformance CGDrawingLayer(char *a1)
{
  uint64_t v1;
  char v2;
  int v3;
  char v4;
  int v5;
  char v6;
  uint64_t v7;
  char v8;
  int v9;
  char v10;
  int v11;
  char v12;
  _BYTE v13[4];
  int v14;
  char v15;
  int v16;
  char v17;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 1);
  v4 = a1[8];
  v5 = *((_DWORD *)a1 + 3);
  v6 = a1[16];
  v7 = v1 + OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_options;
  v8 = *(_BYTE *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_options);
  v9 = *(_DWORD *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_options + 4);
  v10 = *(_BYTE *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_options + 8);
  v11 = *(_DWORD *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_options + 12);
  v12 = *(_BYTE *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_options + 16);
  *(_BYTE *)v7 = v2;
  *(_DWORD *)(v7 + 4) = v3;
  *(_BYTE *)(v7 + 8) = v4;
  *(_DWORD *)(v7 + 12) = v5;
  *(_BYTE *)(v7 + 16) = v6;
  v13[0] = v8;
  v14 = v9;
  v15 = v10;
  v16 = v11;
  v17 = v12;
  CGDrawingLayer.options.didset((uint64_t)v13);
}

uint64_t (*protocol witness for PlatformDrawable.options.modify in conformance CGDrawingLayer(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = CGDrawingLayer.options.modify(v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t protocol witness for PlatformDrawable.update(content:required:) in conformance CGDrawingLayer(uint64_t a1)
{
  char *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  char *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v2 = *(unsigned __int8 *)(a1 + 40);
  if (v2 != 255)
  {
    v3 = *(_QWORD *)(a1 + 24);
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    v7 = *(void **)a1;
    v8 = &v1[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_content];
    v9 = *(void **)&v1[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_content];
    v10 = *(void **)&v1[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_content + 8];
    v11 = *(_QWORD *)&v1[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_content + 16];
    v12 = *(_QWORD *)&v1[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_content + 24];
    v13 = *(_QWORD *)&v1[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_content + 32];
    *(_QWORD *)v8 = v7;
    *((_QWORD *)v8 + 1) = v5;
    *((_QWORD *)v8 + 2) = v6;
    *((_QWORD *)v8 + 3) = v3;
    *((_QWORD *)v8 + 4) = v4;
    v14 = v8[40];
    v8[40] = v2;
    outlined copy of PlatformDrawableContent.Storage(v7, v5, v6, v3, v4, v2);
    outlined consume of PlatformDrawableContent.Storage(v9, v10, v11, v12, v13, v14);
  }
  objc_msgSend(v1, sel_setNeedsDisplay);
  return 1;
}

uint64_t protocol witness for PlatformDrawable.makeAsyncUpdate(content:required:layer:bounds:) in conformance CGDrawingLayer()
{
  return 0;
}

id protocol witness for PlatformDrawable.setContentsScale(_:) in conformance CGDrawingLayer()
{
  void *v0;

  return objc_msgSend(v0, sel_setContentsScale_);
}

void RBDrawingLayer.updateOptions()()
{
  char *v0;
  char *v1;
  unsigned int v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;

  v1 = &v0[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114RBDrawingLayer_options];
  objc_msgSend(v0, sel_setOpaque_, (*(_DWORD *)&v0[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114RBDrawingLayer_options + 12] >> 1) & 1);
  v2 = *((_DWORD *)v1 + 3);
  v3 = v1[16];
  objc_opt_self();
  v4 = (void *)swift_dynamicCastObjCClassUnconditional();
  v5 = RasterizationOptions.resolvedColorMode.getter();
  v6 = v4;
  objc_msgSend(v6, sel_setColorMode_, v5);
  objc_msgSend(v6, sel_setRendersAsynchronously_, (v2 >> 2) & 1);
  objc_msgSend(v6, sel_setMaxDrawableCount_, v3);
  objc_msgSend(v6, sel_setAllowsDisplayCompositing_, (v2 >> 3) & 1);
  objc_msgSend(v6, sel_setAllowsPackedDrawable_, (v2 >> 5) & 1);

}

void (*RBDrawingLayer.options.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  char *v5;
  char v6;
  int v7;
  char v8;
  int v9;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114RBDrawingLayer_options;
  *v3 = v1;
  v3[1] = v4;
  v5 = (char *)(v1 + v4);
  v6 = *v5;
  v7 = *((_DWORD *)v5 + 1);
  v8 = v5[8];
  v9 = *((_DWORD *)v5 + 3);
  LOBYTE(v5) = v5[16];
  *((_DWORD *)v3 + 5) = v7;
  *((_BYTE *)v3 + 24) = v8;
  *((_DWORD *)v3 + 7) = v9;
  *((_BYTE *)v3 + 32) = (_BYTE)v5;
  *((_BYTE *)v3 + 16) = v6;
  return RBDrawingLayer.options.modify;
}

void RBDrawingLayer.options.modify(uint64_t *a1)
{
  uint64_t v1;
  unsigned __int8 v2;
  uint64_t v3;
  int v4;
  char v5;
  int v6;
  char v7;
  unsigned __int8 v8;
  int v9;
  char v10;
  int v11;
  char v12;
  unsigned __int8 v13[4];
  int v14;
  char v15;
  int v16;
  char v17;
  unsigned __int8 v18[4];
  int v19;
  char v20;
  int v21;
  char v22;

  v1 = *a1;
  v2 = *(_BYTE *)(*a1 + 16);
  v3 = *(_QWORD *)*a1 + *(_QWORD *)(*a1 + 8);
  v4 = *(_DWORD *)(v1 + 20);
  v5 = *(_BYTE *)(v1 + 24);
  v6 = *(_DWORD *)(v1 + 28);
  v7 = *(_BYTE *)(v1 + 32);
  v8 = *(_BYTE *)v3;
  v9 = *(_DWORD *)(v3 + 4);
  v10 = *(_BYTE *)(v3 + 8);
  v11 = *(_DWORD *)(v3 + 12);
  v12 = *(_BYTE *)(v3 + 16);
  *(_BYTE *)v3 = v2;
  *(_DWORD *)(v3 + 4) = v4;
  *(_BYTE *)(v3 + 8) = v5;
  *(_DWORD *)(v3 + 12) = v6;
  *(_BYTE *)(v3 + 16) = v7;
  v13[0] = v8;
  v14 = v9;
  v15 = v10;
  v16 = v11;
  v17 = v12;
  v18[0] = v2;
  v19 = v4;
  v20 = v5;
  v21 = v6;
  v22 = v7;
  if (!specialized static RasterizationOptions.== infix(_:_:)(v13, v18))
    RBDrawingLayer.updateOptions()();
  free((void *)v1);
}

uint64_t RBDrawingLayer.update(content:required:)(uint64_t a1, char a2)
{
  char *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v3 = *(void **)a1;
  v4 = *(void **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(unsigned __int8 *)(a1 + 40);
  if ((a2 & 1) != 0
    || (v2[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114RBDrawingLayer_options + 12] & 4) == 0
    || (result = (uint64_t)objc_msgSend(v2, sel_isDrawableAvailable), (_DWORD)result))
  {
    if (v8 != 255)
    {
      v10 = *(_QWORD *)&v2[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114RBDrawingLayer__state];
      outlined copy of PlatformDrawableContent?(v3, v4, v5, v6, v7, v8);
      outlined copy of PlatformDrawableContent?(v3, v4, v5, v6, v7, v8);
      swift_retain();
      os_unfair_lock_lock((os_unfair_lock_t)(v10 + 16));
      v11 = *(void **)(v10 + 24);
      v12 = *(void **)(v10 + 32);
      v13 = *(_QWORD *)(v10 + 40);
      v14 = *(_QWORD *)(v10 + 48);
      v15 = *(_QWORD *)(v10 + 56);
      *(_QWORD *)(v10 + 24) = v3;
      *(_QWORD *)(v10 + 32) = v4;
      *(_QWORD *)(v10 + 40) = v5;
      *(_QWORD *)(v10 + 48) = v6;
      *(_QWORD *)(v10 + 56) = v7;
      v16 = *(_BYTE *)(v10 + 64);
      *(_BYTE *)(v10 + 64) = v8;
      outlined consume of PlatformDrawableContent.Storage(v11, v12, v13, v14, v15, v16);
      os_unfair_lock_unlock((os_unfair_lock_t)(v10 + 16));
      swift_release();
      outlined consume of PlatformDrawableContent?(v3, v4, v5, v6, v7, v8);
    }
    objc_msgSend(v2, sel_setNeedsDisplay);
    return 1;
  }
  return result;
}

uint64_t closure #1 in RBDrawingLayer.makeAsyncUpdate(content:required:layer:bounds:)(char *a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  os_unfair_lock_s *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char *v16;
  uint64_t result;
  _QWORD v18[6];

  v12 = *(os_unfair_lock_s **)&a1[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114RBDrawingLayer__state];
  outlined retain of PlatformDrawableContent(a2);
  swift_retain();
  os_unfair_lock_lock(v12 + 4);
  outlined assign with take of PlatformDrawableContent(a2, (uint64_t)&v12[6]);
  os_unfair_lock_unlock(v12 + 4);
  swift_release();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a1;
  *(double *)(v13 + 24) = a3;
  *(double *)(v13 + 32) = a4;
  *(double *)(v13 + 40) = a5;
  *(double *)(v13 + 48) = a6;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = partial apply for closure #1 in closure #1 in RBDrawingLayer.makeAsyncUpdate(content:required:layer:bounds:);
  *(_QWORD *)(v14 + 24) = v13;
  v18[4] = partial apply for thunk for @callee_guaranteed (@guaranteed RBDisplayList) -> ();
  v18[5] = v14;
  v18[0] = MEMORY[0x24BDAC760];
  v18[1] = 1107296256;
  v18[2] = thunk for @escaping @callee_guaranteed (@guaranteed RBDisplayList) -> ();
  v18[3] = &block_descriptor;
  v15 = _Block_copy(v18);
  v16 = a1;
  swift_retain();
  swift_release();
  objc_msgSend(v16, sel_displayWithBounds_callback_, v15, a3, a4, a5, a6);
  _Block_release(v15);
  LOBYTE(v16) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v16 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t thunk for @callee_guaranteed (@guaranteed RBDisplayList) -> ()(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void thunk for @escaping @callee_guaranteed (@guaranteed RBDisplayList) -> ()(uint64_t a1, void *a2)
{
  void (*v2)(void);
  id v3;

  v2 = *(void (**)(void))(a1 + 32);
  v3 = a2;
  v2();

}

uint64_t RBDrawingLayer.drawForTesting(in:)(void *a1)
{
  char *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v2 = *(_QWORD *)&v1[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114RBDrawingLayer__state];
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 16));
  v3 = *(void **)(v2 + 24);
  v4 = *(void **)(v2 + 32);
  v5 = *(_QWORD *)(v2 + 40);
  v6 = *(_QWORD *)(v2 + 48);
  v7 = *(_QWORD *)(v2 + 56);
  v8 = *(_BYTE *)(v2 + 64);
  outlined copy of PlatformDrawableContent.Storage(v3, v4, v5, v6, v7, v8);
  swift_retain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 16));
  swift_release();
  outlined copy of PlatformDrawableContent.Storage(v3, v4, v5, v6, v7, v8);
  outlined consume of PlatformDrawableContent.Storage(v3, v4, v5, v6, v7, v8);
  swift_release();
  objc_msgSend(v1, sel_bounds);
  PlatformDrawableContent.draw(in:size:state:)(a1);
  outlined consume of PlatformDrawableContent.Storage(v3, v4, v5, v6, v7, v8);
  return swift_release();
}

void @objc CGDrawingLayer.init(layer:)()
{
  swift_unknownObjectRetain();
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id CGDrawingLayer.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for RBDrawingLayer()
{
  return objc_opt_self();
}

id outlined copy of PlatformDrawableContent.Storage(id result, id a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  switch(a6)
  {
    case 0:
    case 1:
      result = (id)swift_retain();
      break;
    case 2:
      result = (id)swift_bridgeObjectRetain();
      break;
    case 3:
      result = (id)swift_unknownObjectRetain();
      break;
    case 4:
      result = result;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t destroy for RBDrawingLayer.State(uint64_t a1)
{
  outlined consume of PlatformDrawableContent.Storage(*(void **)a1, *(id *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  return swift_release();
}

void outlined consume of PlatformDrawableContent.Storage(void *a1, id a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  switch(a6)
  {
    case 0:
    case 1:
      swift_release();
      break;
    case 2:
      swift_bridgeObjectRelease();
      break;
    case 3:
      swift_unknownObjectRelease();
      break;
    case 4:

      break;
    default:
      return;
  }
}

uint64_t initializeWithCopy for RBDrawingLayer.State(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *(id *)a2;
  v5 = *(void **)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_BYTE *)(a2 + 40);
  outlined copy of PlatformDrawableContent.Storage(*(id *)a2, v5, v6, v7, v8, v9);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = v9;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for RBDrawingLayer.State(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v4 = *(id *)a2;
  v5 = *(void **)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_BYTE *)(a2 + 40);
  outlined copy of PlatformDrawableContent.Storage(*(id *)a2, v5, v6, v7, v8, v9);
  v10 = *(void **)a1;
  v11 = *(void **)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  v15 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v9;
  outlined consume of PlatformDrawableContent.Storage(v10, v11, v12, v13, v14, v15);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for RBDrawingLayer.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  char v12;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_BYTE *)(a2 + 40);
  v6 = *(void **)a1;
  v7 = *(void **)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 32) = v4;
  v12 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v5;
  outlined consume of PlatformDrawableContent.Storage(v6, v7, v8, v9, v10, v12);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for RBDrawingLayer.State(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 56);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RBDrawingLayer.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
      *(_QWORD *)(result + 56) = a2;
  }
  return result;
}

void *type metadata accessor for RBDrawingLayer.State()
{
  return &unk_25061B678;
}

void protocol witness for PlatformDrawable.options.getter in conformance RBDrawingLayer(uint64_t a1@<X8>)
{
  protocol witness for PlatformDrawable.options.getter in conformance CGDrawingLayer(&OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114RBDrawingLayer_options, a1);
}

void protocol witness for PlatformDrawable.options.getter in conformance CGDrawingLayer(_QWORD *a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char *v3;
  char v4;
  int v5;
  char v6;
  int v7;

  v3 = (char *)(v2 + *a1);
  v4 = *v3;
  v5 = *((_DWORD *)v3 + 1);
  v6 = v3[8];
  v7 = *((_DWORD *)v3 + 3);
  LOBYTE(v3) = v3[16];
  *(_BYTE *)a2 = v4;
  *(_DWORD *)(a2 + 4) = v5;
  *(_BYTE *)(a2 + 8) = v6;
  *(_DWORD *)(a2 + 12) = v7;
  *(_BYTE *)(a2 + 16) = (_BYTE)v3;
}

void protocol witness for PlatformDrawable.options.setter in conformance RBDrawingLayer(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 v2;
  int v3;
  char v4;
  int v5;
  char v6;
  uint64_t v7;
  unsigned __int8 v8;
  int v9;
  char v10;
  int v11;
  char v12;
  unsigned __int8 v13[4];
  int v14;
  char v15;
  int v16;
  char v17;
  unsigned __int8 v18[4];
  int v19;
  char v20;
  int v21;
  char v22;

  v2 = *(_BYTE *)a1;
  v3 = *(_DWORD *)(a1 + 4);
  v4 = *(_BYTE *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 12);
  v6 = *(_BYTE *)(a1 + 16);
  v7 = v1 + OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114RBDrawingLayer_options;
  v8 = *(_BYTE *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114RBDrawingLayer_options);
  v9 = *(_DWORD *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114RBDrawingLayer_options + 4);
  v10 = *(_BYTE *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114RBDrawingLayer_options + 8);
  v11 = *(_DWORD *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114RBDrawingLayer_options + 12);
  v12 = *(_BYTE *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114RBDrawingLayer_options + 16);
  *(_BYTE *)v7 = v2;
  *(_DWORD *)(v7 + 4) = v3;
  *(_BYTE *)(v7 + 8) = v4;
  *(_DWORD *)(v7 + 12) = v5;
  *(_BYTE *)(v7 + 16) = v6;
  v18[0] = v8;
  v19 = v9;
  v20 = v10;
  v21 = v11;
  v22 = v12;
  v13[0] = v2;
  v14 = v3;
  v15 = v4;
  v16 = v5;
  v17 = v6;
  if (!specialized static RasterizationOptions.== infix(_:_:)(v18, v13))
    RBDrawingLayer.updateOptions()();
}

uint64_t (*protocol witness for PlatformDrawable.options.modify in conformance RBDrawingLayer(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = RBDrawingLayer.options.modify(v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

void specialized RBDrawingLayer.init(coder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;

  v5 = OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114RBDrawingLayer__state;
  type metadata accessor for AtomicBuffer<RBDrawingLayer.State>(0, a2, a3, a4);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_QWORD *)(v6 + 56) = 0;
  *(_BYTE *)(v6 + 64) = 5;
  *(_BYTE *)(v6 + 72) = 3;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)&v4[v5] = v6;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t (*specialized RBDrawingLayer.makeAsyncUpdate(content:required:layer:bounds:)(__int128 *a1, char a2, double a3, double a4, double a5, double a6))()
{
  _BYTE *v6;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  _BYTE *v15;
  __int128 v17;
  _OWORD v18[2];

  v12 = a1[1];
  v17 = *a1;
  v18[0] = v12;
  *(_OWORD *)((char *)v18 + 9) = *(__int128 *)((char *)a1 + 25);
  if ((a2 & 1) == 0
    && (v6[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114RBDrawingLayer_options + 12] & 4) != 0
    && !objc_msgSend(v6, sel_isDrawableAvailable, v17, v18[0], *(_QWORD *)&v18[1], *((_QWORD *)&v18[1] + 1)))
  {
    return 0;
  }
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v6;
  v14 = a1[1];
  *(_OWORD *)(v13 + 24) = *a1;
  *(_OWORD *)(v13 + 40) = v14;
  *(_OWORD *)(v13 + 49) = *(__int128 *)((char *)a1 + 25);
  *(double *)(v13 + 72) = a3;
  *(double *)(v13 + 80) = a4;
  *(double *)(v13 + 88) = a5;
  *(double *)(v13 + 96) = a6;
  v15 = v6;
  outlined retain of PlatformDrawableContent((uint64_t)&v17);
  return partial apply for closure #1 in RBDrawingLayer.makeAsyncUpdate(content:required:layer:bounds:);
}

uint64_t sub_234A886EC()
{
  uint64_t v0;

  outlined consume of PlatformDrawableContent.Storage(*(void **)(v0 + 24), *(id *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 64));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in RBDrawingLayer.makeAsyncUpdate(content:required:layer:bounds:)()
{
  uint64_t v0;

  return closure #1 in RBDrawingLayer.makeAsyncUpdate(content:required:layer:bounds:)(*(char **)(v0 + 16), v0 + 24, *(double *)(v0 + 72), *(double *)(v0 + 80), *(double *)(v0 + 88), *(double *)(v0 + 96));
}

uint64_t outlined retain of PlatformDrawableContent(uint64_t a1)
{
  outlined copy of PlatformDrawableContent.Storage(*(id *)a1, *(id *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  return a1;
}

uint64_t outlined assign with take of PlatformDrawableContent(uint64_t a1, uint64_t a2)
{
  assignWithTake for PlatformDrawableContent(a2, a1);
  return a2;
}

uint64_t sub_234A887A8()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in RBDrawingLayer.makeAsyncUpdate(content:required:layer:bounds:)(void *a1)
{
  return specialized RBDrawingLayer.draw(in:size:)(a1);
}

uint64_t sub_234A887EC()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed RBDisplayList) -> ()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t specialized RBDrawingLayer.draw(in:size:)(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v16;
  char v18;
  uint64_t v19;

  v2 = v1;
  v3 = *(_QWORD *)&v1[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114RBDrawingLayer__state];
  v4 = OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114RBDrawingLayer__state;
  v16 = OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114RBDrawingLayer__state;
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  v5 = *(_BYTE *)(v3 + 72);
  v6 = *(_QWORD *)(v3 + 80);
  *(_BYTE *)(v3 + 72) = 3;
  *(_QWORD *)(v3 + 80) = 0;
  v18 = v5;
  v19 = v6;
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  v7 = *(_QWORD *)&v2[v4];
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 16));
  v8 = *(void **)(v7 + 24);
  v9 = *(void **)(v7 + 32);
  v10 = *(_QWORD *)(v7 + 40);
  v11 = *(_QWORD *)(v7 + 48);
  v12 = *(_QWORD *)(v7 + 56);
  v13 = *(_BYTE *)(v7 + 64);
  outlined copy of PlatformDrawableContent.Storage(v8, v9, v10, v11, v12, v13);
  swift_retain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 16));
  swift_release();
  outlined copy of PlatformDrawableContent.Storage(v8, v9, v10, v11, v12, v13);
  outlined consume of PlatformDrawableContent.Storage(v8, v9, v10, v11, v12, v13);
  swift_release();
  objc_msgSend(v2, sel_bounds);
  PlatformDrawableContent.draw(in:size:state:)(a1);
  outlined consume of PlatformDrawableContent.Storage(v8, v9, v10, v11, v12, v13);
  v14 = *(_QWORD *)&v2[v16];
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v14 + 16));
  *(_BYTE *)(v14 + 72) = v18;
  *(_QWORD *)(v14 + 80) = v19;
  os_unfair_lock_unlock((os_unfair_lock_t)(v14 + 16));
  swift_release();
  return swift_release();
}

id outlined copy of PlatformDrawableContent?(id result, id a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6 != -1)
    return outlined copy of PlatformDrawableContent.Storage(result, a2, a3, a4, a5, a6);
  return result;
}

void outlined consume of PlatformDrawableContent?(void *a1, id a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6 != -1)
    outlined consume of PlatformDrawableContent.Storage(a1, a2, a3, a4, a5, a6);
}

void type metadata accessor for AtomicBuffer<RBDrawingLayer.State>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for AtomicBuffer<RBDrawingLayer.State>)
  {
    v4 = type metadata accessor for AtomicBuffer(0, (uint64_t)&unk_25061B678, a3, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<RBDrawingLayer.State>);
  }
}

uint64_t static AccessibilityCore.textResolvesToEmpty(_:in:)(uint64_t a1, unint64_t a2, char a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t *, uint64_t *);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v9 = *a5;
  v8 = a5[1];
  v10 = specialized Text.storedAccessibilityLabel.getter(a4);
  if (v13)
  {
    v14 = v10;
    v15 = v11;
    v16 = v12 & 1;
    v22 = v9;
    v23 = v8;
    LOBYTE(v21) = v12 & 1;
    v17 = static AccessibilityCore.textResolvesToEmpty(_:in:)();
    outlined consume of Text.Storage(v14, v15, v16);
    swift_bridgeObjectRelease();
  }
  else if ((a3 & 1) != 0)
  {
    v22 = v9;
    v23 = v8;
    v21 = 1;
    v19 = *(uint64_t (**)(uint64_t *, uint64_t *))(*(_QWORD *)a1 + 88);
    swift_retain();
    v17 = v19(&v22, &v21);
    outlined consume of Text.Storage(a1, a2, 1);
  }
  else
  {
    v18 = HIBYTE(a2) & 0xF;
    if ((a2 & 0x2000000000000000) == 0)
      v18 = a1 & 0xFFFFFFFFFFFFLL;
    v17 = v18 == 0;
  }
  return v17 & 1;
}

uint64_t static AccessibilityCore.textsResolveToEmpty(_:in:)(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  BOOL v11;
  __int128 v13;
  __int128 v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v13 = *a2;
    v3 = v2 - 1;
    v4 = (uint64_t *)(swift_bridgeObjectRetain() + 56);
    do
    {
      v5 = *v4;
      v6 = *((_BYTE *)v4 - 8);
      v8 = *(v4 - 3);
      v7 = *(v4 - 2);
      v14 = v13;
      outlined copy of Text.Storage(v8, v7, v6);
      swift_bridgeObjectRetain();
      v9 = static AccessibilityCore.textResolvesToEmpty(_:in:)(v8, v7, v6, v5, (uint64_t *)&v14);
      outlined consume of Text.Storage(v8, v7, v6);
      swift_bridgeObjectRelease();
      v11 = v3-- != 0;
      if ((v9 & 1) == 0)
        break;
      v4 += 4;
    }
    while (v11);
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = 1;
  }
  return v9 & 1;
}

uint64_t static AccessibilityCore.textResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5, int a6, int a7, uint64_t *a8)
{
  int *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  id v46;
  void *v47;
  BOOL v48;
  uint64_t v49;
  void *v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  id v63;
  id v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  void *v71;
  void *v72;
  Swift::String v73;
  __int128 v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;

  v79 = a3;
  v80 = a7;
  v77 = a6;
  v81 = a2;
  v78 = a1;
  v11 = (int *)type metadata accessor for Text.ResolvedString(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a5;
  v14 = a5[1];
  v17 = *a8;
  v16 = a8[1];
  v18 = specialized Text.storedAccessibilityLabel.getter(a4);
  if (v21)
  {
    v22 = v18;
    v23 = v19;
    v24 = v20 & 1;
    v85 = (void *)v15;
    v86 = v14;
    v83 = v17;
    v84 = v16;
    LOBYTE(v91) = v20 & 1;
    v25 = static AccessibilityCore.textResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:)();
    outlined consume of Text.Storage(v22, v23, v24);
    swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)&v75 = v17;
    *((_QWORD *)&v75 + 1) = v16;
    v26 = v78;
    v76 = a4;
    v27 = v80;
    if ((v79 & 1) != 0)
    {
      Text.Style.init()((uint64_t)v13);
      v31 = &v13[v11[5]];
      v32 = &v13[v11[6]];
      *(_QWORD *)v32 = 0;
      *((_QWORD *)v32 + 1) = 0xE000000000000000;
      v33 = v11[7];
      v13[v33] = 0;
      v34 = *((_QWORD *)&v75 + 1);
      *(_QWORD *)v31 = v75;
      *((_QWORD *)v31 + 1) = v34;
      v28 = v15;
      v35 = v15;
      v29 = v14;
      specialized Text.resolve<A>(into:in:with:)((uint64_t)v13, v35, v14, 1, v26, v81, 1, v76);
      v36 = *(_QWORD *)v32;
      v37 = *((_QWORD *)v32 + 1);
      v38 = v13[v33];
      swift_bridgeObjectRetain();
      outlined destroy of TypesettingConfiguration((uint64_t)v13, type metadata accessor for Text.ResolvedString);
      v91 = v36;
      v92 = v37;
      v30 = v27;
      if ((v77 & 1) != 0)
      {
        v39 = v26;
        if ((v38 & 1) != 0)
          goto LABEL_12;
        type metadata accessor for AccessibilityTextStorage();
        v40 = swift_dynamicCastClass();
        if (v40)
        {
          v41 = v40;
          swift_beginAccess();
          v42 = *(void **)(v41 + 16);
          v43 = *(_QWORD *)(v41 + 24);
          v44 = v81;
          if ((*(_BYTE *)(v41 + 32) & 1) != 0)
          {
            outlined copy of Text.Storage(v39, v81, 1);
            outlined copy of Text.Storage(v39, v44, 1);
            outlined copy of AccessibilityText.Storage(v42, v43, 1);
            v45 = v42;
          }
          else
          {
            v46 = objc_allocWithZone(MEMORY[0x24BDD1458]);
            outlined copy of Text.Storage(v39, v44, 1);
            outlined copy of Text.Storage(v39, v44, 1);
            outlined copy of AccessibilityText.Storage(v42, v43, 0);
            v47 = (void *)MEMORY[0x23B7C5DAC](v42, v43);
            v45 = objc_msgSend(v46, sel_initWithString_, v47);

            outlined consume of AccessibilityText.Storage(v42, v43, 0);
          }
          v48 = NSAttributedString.isDynamic.getter();

          outlined consume of Text.Storage(v39, v44, 1);
          outlined consume of Text.Storage(v39, v44, 1);
          if (v48)
          {
LABEL_12:
            v85 = (void *)v28;
            v86 = v29;
            v82 = v75;
            v49 = static AccessibilityCore.textResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:)(v39, v81, 1, v76, (uint64_t *)&v85, 0, 1, 1, 0, &v82);
            if (v49)
            {
              v50 = (void *)v49;
              swift_bridgeObjectRelease();
              v51 = objc_msgSend(v50, sel_string);
              v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v54 = v53;

              v91 = v52;
              v92 = v54;
            }
          }
        }
      }
    }
    else
    {
      v91 = v78;
      v92 = v81;
      swift_bridgeObjectRetain();
      v28 = v15;
      v29 = v14;
      v30 = v27;
    }
    if ((v30 & 1) != 0)
    {
      if (v29)
      {
        swift_retain_n();
        swift_retain_n();
        specialized PropertyList.Tracker.value<A>(_:for:)(v28, &v85);
        swift_release_n();
        swift_release_n();
        v55 = v85;
        v56 = v86;
        LOBYTE(v57) = v87;
        v58 = v88;
        v59 = v89;
        v60 = v90;
      }
      else
      {
        v61 = swift_retain_n();
        v62 = (_QWORD *)specialized find<A>(_:key:)(v61);
        if (v62)
        {
          v55 = (void *)v62[9];
          v56 = v62[10];
          v57 = v62[11];
          v58 = v62[12];
          v59 = v62[13];
          v60 = v62[14];
          outlined copy of ResolvedTextSuffix(v55, v56, v57, v58, v59, v60);
        }
        else
        {
          v55 = 0;
          v56 = 0;
          v57 = 0;
          v58 = 0;
          v59 = 0;
          v60 = 0x8000000000000000;
        }
        v85 = v55;
        v86 = v56;
        v87 = v57;
        swift_release_n();
      }
      if (v60 >> 62 == 1 && (v57 & 1) != 0)
      {
        v63 = objc_msgSend(v55, sel_attributedString);
        outlined consume of ResolvedTextSuffix(v55, v56, v57, v58, v59, v60);
        if (v63)
        {
          v64 = objc_msgSend(v63, sel_string);
          v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v67 = v66;

          swift_bridgeObjectRelease();
          v68 = HIBYTE(v67) & 0xF;
          if ((v67 & 0x2000000000000000) == 0)
            v68 = v65 & 0xFFFFFFFFFFFFLL;
          if (v68)
          {
            v69 = objc_msgSend(v63, sel_string);
            v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v72 = v71;

            v73._countAndFlagsBits = v70;
            v73._object = v72;
            String.append(_:)(v73);

            swift_bridgeObjectRelease();
          }
          else
          {

          }
        }
      }
      else
      {
        outlined consume of ResolvedTextSuffix(v55, v56, v57, v58, v59, v60);
      }
    }
    return v91;
  }
  return v25;
}

uint64_t static AccessibilityCore.textResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, int a6, char a7, char a8, char a9, _OWORD *a10)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  char **v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t isEscapingClosureAtFileLocation;
  uint64_t *v47;
  id v48;
  id v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  id v56;
  uint64_t result;
  char v58;
  id v59;
  uint64_t v60;
  id v61;
  id v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  id v67;
  id v68;
  id v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  id v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  void *aBlock;
  uint64_t v86;
  void *v87;
  void *v88;
  uint64_t (*v89)();
  void *v90;
  _OWORD v91[3];
  uint64_t v92[2];

  v83 = a6;
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  MEMORY[0x24BDAC7A8](v17);
  v81 = (uint64_t)&v76 - v18;
  v19 = type metadata accessor for ResolvableStringResolutionContext();
  v79 = *(_QWORD *)(v19 - 8);
  v20 = *(_QWORD *)(v79 + 64);
  MEMORY[0x24BDAC7A8](v19);
  v80 = (uint64_t)&v76 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v82 = (uint64_t)&v76 - v22;
  v23 = a5[1];
  v24 = *a5;
  aBlock = (void *)v24;
  v86 = v23;
  v84 = v23;
  v92[0] = 129;
  v91[0] = *a10;
  v25 = Text.resolveAttributedString(in:includeDefaultAttributes:options:idiom:)((uint64_t *)&aBlock, a7, v92, (uint64_t *)v91, a1, a2, a3 & 1, a4);
  if (v25)
  {
    v26 = v25;
    v27 = &selRef_bundleURL;
    v28 = (void *)MEMORY[0x24BDAC760];
    v29 = v84;
    if ((a8 & 1) != 0)
    {
      v26 = v25;
      if (NSAttributedString.isDynamic.getter())
      {
        v78 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1688]), sel_initWithAttributedString_, v26);

        v30 = type metadata accessor for Date();
        v31 = v82;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v82, 1, 1, v30);
        v32 = v31 + *(int *)(v19 + 24);
        *(_QWORD *)v32 = 0;
        *(_BYTE *)(v32 + 8) = 1;
        if (v29)
        {
          swift_retain_n();
          swift_retain_n();
          v33 = v81;
          specialized PropertyList.Tracker.value<A>(_:for:)(v24, v81);
          swift_release();
        }
        else
        {
          v44 = swift_retain_n();
          v45 = v81;
          specialized closure #1 in PropertyList.subscript.getter(v44, v81);
          v33 = v45;
          swift_release_n();
        }
        swift_release();
        isEscapingClosureAtFileLocation = v82;
        outlined assign with take of Date?(v33, v82);
        v47 = (uint64_t *)(isEscapingClosureAtFileLocation + *(int *)(v19 + 20));
        v77 = v24;
        *v47 = v24;
        v47[1] = v29;
        *(_QWORD *)v32 = 0;
        *(_BYTE *)(v32 + 8) = 1;
        if (one-time initialization token for resolvableTextSegment != -1)
          goto LABEL_35;
        while (1)
        {
          v81 = static NSAttributedStringKey.resolvableTextSegment;
          v48 = v78;
          v49 = objc_msgSend(v78, sel_length);
          v50 = v80;
          outlined init with copy of TypesettingLanguage(isEscapingClosureAtFileLocation, v80, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableStringResolutionContext);
          v51 = (*(unsigned __int8 *)(v79 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80);
          v52 = isEscapingClosureAtFileLocation;
          v53 = swift_allocObject();
          *(_QWORD *)(v53 + 16) = v48;
          outlined init with take of ResolvableStringResolutionContext(v50, v53 + v51);
          v54 = swift_allocObject();
          *(_QWORD *)(v54 + 16) = partial apply for closure #1 in static ResolvableTextSegmentAttribute.update(_:in:);
          *(_QWORD *)(v54 + 24) = v53;
          v89 = partial apply for thunk for @callee_guaranteed (@guaranteed RBDisplayList) -> ();
          v90 = (void *)v54;
          aBlock = v28;
          v86 = 1107296256;
          v87 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
          v88 = &block_descriptor_12;
          v55 = _Block_copy(&aBlock);
          v56 = v48;
          swift_retain();
          swift_release();
          objc_msgSend(v56, sel_enumerateAttribute_inRange_options_usingBlock_, v81, 0, v49, 2, v55);
          _Block_release(v55);
          LOBYTE(v48) = swift_isEscapingClosureAtFileLocation();
          swift_release();
          result = swift_release();
          if ((v48 & 1) != 0)
          {
            __break(1u);
            return result;
          }
          outlined destroy of TypesettingConfiguration(v52, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableStringResolutionContext);

          v26 = v56;
          v24 = v77;
          v29 = v84;
          v28 = (void *)MEMORY[0x24BDAC760];
          v27 = &selRef_bundleURL;
          if ((a9 & 1) == 0)
          {
LABEL_17:
            v58 = v83;
            goto LABEL_30;
          }
LABEL_9:
          if (v29)
          {
            swift_retain_n();
            swift_retain_n();
            specialized PropertyList.Tracker.value<A>(_:for:)(v24, &aBlock);
            swift_release_n();
            v35 = v24;
            swift_release_n();
            v36 = aBlock;
            v37 = v86;
            LOBYTE(v38) = (_BYTE)v87;
            v39 = (uint64_t)v88;
            v40 = (uint64_t)v89;
            v41 = (unint64_t)v90;
          }
          else
          {
            v42 = swift_retain_n();
            v35 = v24;
            v43 = (_QWORD *)specialized find<A>(_:key:)(v42);
            if (v43)
            {
              v36 = (void *)v43[9];
              v37 = v43[10];
              v38 = (void *)v43[11];
              v39 = v43[12];
              v40 = v43[13];
              v41 = v43[14];
              outlined copy of ResolvedTextSuffix(v36, v37, (char)v38, v39, v40, v41);
            }
            else
            {
              v36 = 0;
              v37 = 0;
              v38 = 0;
              v39 = 0;
              v40 = 0;
              v41 = 0x8000000000000000;
            }
            aBlock = v36;
            v86 = v37;
            v87 = v38;
            swift_release_n();
          }
          if (v41 >> 62 != 1 || (v38 & 1) == 0)
            break;
          v59 = objc_msgSend(v36, sel_attributedString);
          v60 = v39;
          v61 = v59;
          outlined consume of ResolvedTextSuffix(v36, v37, (char)v38, v60, v40, v41);
          if (!v61)
            goto LABEL_28;
          v62 = objc_msgSend(v61, sel_string);
          v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v65 = v64;

          swift_bridgeObjectRelease();
          v66 = HIBYTE(v65) & 0xF;
          if ((v65 & 0x2000000000000000) == 0)
            v66 = v63 & 0xFFFFFFFFFFFFLL;
          v58 = v83;
          v24 = v35;
          if (v66)
          {
            v27 = &selRef_bundleURL;
            v67 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1688]), sel_initWithAttributedString_, v26);
            objc_msgSend(v67, sel_appendAttributedString_, v61);

            v26 = v67;
            v29 = v84;
            v28 = (void *)MEMORY[0x24BDAC760];
            goto LABEL_30;
          }

LABEL_29:
          v29 = v84;
          v28 = (void *)MEMORY[0x24BDAC760];
          v27 = &selRef_bundleURL;
LABEL_30:
          LOBYTE(v92[0]) = 0;
          memset(v91, 0, 32);
          v68 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1688]), v27[22], v26);

          v69 = v68;
          v70 = objc_msgSend(v69, sel_length);

          v71 = swift_allocObject();
          *(_QWORD *)(v71 + 16) = v24;
          *(_QWORD *)(v71 + 24) = v29;
          *(_QWORD *)(v71 + 32) = v92;
          *(_QWORD *)(v71 + 40) = v91;
          *(_QWORD *)(v71 + 48) = v69;
          *(_BYTE *)(v71 + 56) = v58 & 1;
          v72 = swift_allocObject();
          *(_QWORD *)(v72 + 16) = partial apply for closure #1 in static AccessibilityCore.resolveAttributedTextAttributes(in:environment:includeResolvableAttributes:);
          *(_QWORD *)(v72 + 24) = v71;
          v89 = partial apply for thunk for @callee_guaranteed (@guaranteed RBDisplayList) -> ();
          v90 = (void *)v72;
          aBlock = v28;
          v86 = 1107296256;
          v87 = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
          v88 = &block_descriptor_0;
          v28 = _Block_copy(&aBlock);
          v26 = v90;
          swift_retain();
          v73 = v69;
          swift_retain();
          swift_retain();
          swift_release();
          objc_msgSend(v73, sel_enumerateAttributesInRange_options_usingBlock_, 0, v70, 0, v28);
          _Block_release(v28);
          isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
          swift_release();
          if ((isEscapingClosureAtFileLocation & 1) == 0)
          {
            v74 = v73;
            v75 = objc_msgSend(v74, sel_length);

            v34 = objc_msgSend(v74, sel_attributedSubstringFromRange_, 0, v75);
            swift_release();
            swift_bridgeObjectRelease();
            return (uint64_t)v34;
          }
          __break(1u);
LABEL_35:
          swift_once();
        }
        outlined consume of ResolvedTextSuffix(v36, v37, (char)v38, v39, v40, v41);
LABEL_28:
        v58 = v83;
        v24 = v35;
        goto LABEL_29;
      }

    }
    if ((a9 & 1) != 0)
      goto LABEL_9;
    goto LABEL_17;
  }
  return 0;
}

uint64_t static AccessibilityCore.textsResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:separator:)(uint64_t a1, __int128 *a2, char a3, char a4, __int128 *a5)
{
  int64_t v5;
  _QWORD *v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v32;
  int v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _QWORD *v39;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    return 0;
  v35 = *a5;
  v36 = *a2;
  v39 = (_QWORD *)MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
  v9 = v39;
  v10 = (uint64_t *)(a1 + 56);
  v34 = a3 & 1;
  v11 = a4 & 1;
  do
  {
    v12 = *(v10 - 3);
    v13 = *(v10 - 2);
    v14 = *((unsigned __int8 *)v10 - 8);
    v15 = *v10;
    v37 = v35;
    v38 = v36;
    outlined copy of Text.Storage(v12, v13, v14);
    swift_bridgeObjectRetain();
    v16 = static AccessibilityCore.textResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:)(v12, v13, v14, v15, (uint64_t *)&v38, v34, v11, (uint64_t *)&v37);
    v18 = v17;
    outlined consume of Text.Storage(v12, v13, v14);
    swift_bridgeObjectRelease();
    v39 = v9;
    v20 = v9[2];
    v19 = v9[3];
    if (v20 >= v19 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
      v9 = v39;
    }
    v9[2] = v20 + 1;
    v21 = &v9[2 * v20];
    v21[4] = v16;
    v21[5] = v18;
    v10 += 4;
    --v5;
  }
  while (v5);
  v22 = v20 + 1;
  v23 = v9 + 5;
  v24 = MEMORY[0x24BEE4AF8];
  do
  {
    v29 = *(v23 - 1);
    v28 = *v23;
    v30 = HIBYTE(*v23) & 0xF;
    if ((*v23 & 0x2000000000000000) == 0)
      v30 = v29 & 0xFFFFFFFFFFFFLL;
    if (v30)
    {
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v38 = v24;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v24 + 16) + 1, 1);
        v24 = v38;
      }
      v26 = *(_QWORD *)(v24 + 16);
      v25 = *(_QWORD *)(v24 + 24);
      if (v26 >= v25 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
        v24 = v38;
      }
      *(_QWORD *)(v24 + 16) = v26 + 1;
      v27 = v24 + 16 * v26;
      *(_QWORD *)(v27 + 32) = v29;
      *(_QWORD *)(v27 + 40) = v28;
    }
    v23 += 2;
    --v22;
  }
  while (v22);
  swift_release();
  *(_QWORD *)&v38 = v24;
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v32 = BidirectionalCollection<>.joined(separator:)();
  swift_release();
  return v32;
}

uint64_t static AccessibilityCore.resolveAttributedTextAttributes(in:environment:includeResolvableAttributes:)(_QWORD *a1, uint64_t *a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t result;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  _QWORD v20[6];
  _OWORD v21[2];
  unsigned __int8 v22;

  v5 = *a2;
  v6 = a2[1];
  v22 = 0;
  memset(v21, 0, sizeof(v21));
  v7 = (void *)*a1;
  v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1688]), sel_initWithAttributedString_, *a1);

  v9 = v8;
  v10 = objc_msgSend(v9, sel_length);

  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v5;
  *(_QWORD *)(v11 + 24) = v6;
  *(_QWORD *)(v11 + 32) = &v22;
  *(_QWORD *)(v11 + 40) = v21;
  *(_QWORD *)(v11 + 48) = v9;
  *(_BYTE *)(v11 + 56) = a3;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = partial apply for closure #1 in static AccessibilityCore.resolveAttributedTextAttributes(in:environment:includeResolvableAttributes:);
  *(_QWORD *)(v12 + 24) = v11;
  v20[4] = thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
  v20[5] = v12;
  v20[0] = MEMORY[0x24BDAC760];
  v20[1] = 1107296256;
  v20[2] = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  v20[3] = &block_descriptor_23;
  v13 = _Block_copy(v20);
  swift_retain();
  swift_retain();
  v14 = v9;
  swift_retain();
  swift_release();
  objc_msgSend(v14, sel_enumerateAttributesInRange_options_usingBlock_, 0, v10, 0, v13);
  _Block_release(v13);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v5 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v16 = v14;
    v17 = objc_msgSend(v16, sel_length);

    v18 = objc_msgSend(v16, sel_attributedSubstringFromRange_, 0, v17);
    *a1 = v18;
    v19 = v22;
    swift_release();
    swift_bridgeObjectRelease();
    return v19;
  }
  return result;
}

uint64_t closure #1 in static AccessibilityCore.resolveAttributedTextAttributes(in:environment:includeResolvableAttributes:)(uint64_t a1, _QWORD *a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t *a8, unint64_t *a9, unsigned __int8 a10)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  id v26;
  uint64_t v27;
  char v28;
  int64_t v29;
  id v30;
  uint64_t v31;
  void *v32;
  _QWORD *v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  int64_t v49;
  unint64_t v50;
  int64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _OWORD *v54;
  uint64_t v55;
  Swift::String v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  NSString *v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  char isUniquelyReferenced_nonNull_native;
  NSString *v67;
  uint64_t v68;
  void *v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  unint64_t *v73;
  id v74;
  char v75;
  id v76;
  id v77;
  void *v78;
  void *v79;
  Class isa;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  void *v87;
  char v88;
  _BYTE v89[12];
  int v90;
  _OWORD *v91;
  unint64_t *v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  int v96;
  _BYTE *v97;
  _BYTE *v98;
  _QWORD *v99;
  int64_t v100;
  _OWORD *v101;
  _QWORD *v102;
  _OWORD v103[2];
  uint64_t v104;
  _BYTE v105[32];
  _QWORD *v106;
  _OWORD v107[2];
  __int128 v108;
  __int128 v109;
  _QWORD *v110;

  type metadata accessor for Date?(0, &lazy cache variable for type metadata for ResolvableTextSegmentAttribute.Value?, (void (*)(uint64_t))type metadata accessor for ResolvableTextSegmentAttribute.Value);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (uint64_t)&v89[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v21);
  v97 = &v89[-v22];
  MEMORY[0x24BDAC7A8](v23);
  v98 = &v89[-v24];
  v110 = (_QWORD *)a1;
  *(_QWORD *)&v108 = a5;
  *((_QWORD *)&v108 + 1) = a6;
  swift_bridgeObjectRetain();
  specialized static AccessibilityCore.resolveAttributedTextAttributes(_:environment:)((uint64_t)&v110, (uint64_t *)&v108);
  if (one-time initialization token for coreAXLabel != -1)
LABEL_97:
    swift_once();
  v95 = v20;
  v25 = v110;
  if (!v110[2])
  {
    v109 = 0u;
    v108 = 0u;
    goto LABEL_11;
  }
  v20 = (uint64_t)&unk_254266000;
  v26 = (id)static NSAttributedStringKey.coreAXLabel;
  v27 = specialized __RawDictionaryStorage.find<A>(_:)(v26);
  if ((v28 & 1) == 0)
  {
    v109 = 0u;
    v108 = 0u;

    goto LABEL_11;
  }
  outlined init with copy of Any(v25[7] + 32 * v27, (uint64_t)&v108);

  if (!*((_QWORD *)&v109 + 1))
  {
LABEL_11:
    outlined destroy of Any?((uint64_t)&v108);
    goto LABEL_12;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_12:
    v90 = 0;
    goto LABEL_13;
  }
  a1 = (uint64_t)v106;
  v29 = *(_QWORD *)&v107[0];
  *(_BYTE *)a7 = 1;
  v30 = (id)static NSAttributedStringKey.coreAXLabel;
  specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v30, &v108);

  outlined destroy of Any?((uint64_t)&v108);
  v31 = MEMORY[0x23B7C5DAC](0xD00000000000001ELL, 0x80000002352DE7A0);
  v32 = (void *)v31;
  v33 = v110;
  if (v110[2] && (v34 = specialized __RawDictionaryStorage.find<A>(_:)(v31), (v35 & 1) != 0))
  {
    outlined init with copy of Any(v33[7] + 32 * v34, (uint64_t)&v108);
  }
  else
  {
    v109 = 0u;
    v108 = 0u;
  }

  if (!*((_QWORD *)&v109 + 1))
  {
    outlined destroy of Any?((uint64_t)&v108);
LABEL_80:
    v84 = a8[1];
    if (v84)
    {
      v85 = *a8;
      v20 = a8[2] + a8[3];
      swift_bridgeObjectRetain();
      if ((_QWORD *)v20 == a2)
      {
        if (v85 == a1 && v84 == v29)
        {
          swift_bridgeObjectRelease();
LABEL_88:
          swift_bridgeObjectRelease();
          objc_msgSend(a9, sel_deleteCharactersInRange_, a2, a3);
          v90 = 0;
          a3 = 0;
          goto LABEL_13;
        }
        v88 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v88 & 1) != 0)
          goto LABEL_88;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    v86 = (void *)MEMORY[0x23B7C5DAC](a1, v29);
    objc_msgSend(a9, sel_replaceCharactersInRange_withString_, a2, a3, v86);

    v87 = (void *)MEMORY[0x23B7C5DAC](a1, v29);
    a3 = objc_msgSend(v87, sel_length);

    *a8 = a1;
    a8[1] = v29;
    a8[2] = (uint64_t)a2;
    a8[3] = (uint64_t)a3;
    goto LABEL_95;
  }
  type metadata accessor for NSTextAttachment();
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_80;
  v36 = v106;
  v82 = a8[1];
  if (v82)
  {
    v20 = *a8;
    v83 = a8[2] + a8[3];
    swift_bridgeObjectRetain();
    if ((_QWORD *)v83 == a2)
    {
      if (v20 == a1 && v82 == v29)
      {
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
LABEL_93:
        v90 = 1;
        goto LABEL_13;
      }
LABEL_91:
      v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v20 & 1) != 0)
      {
        swift_bridgeObjectRelease();

        goto LABEL_93;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  a1 = MEMORY[0x23B7C5DAC](a1, v29);
  swift_bridgeObjectRelease();
  objc_msgSend(v36, sel_setAccessibilityLabel_, a1);

  *(_OWORD *)a8 = 0u;
  *((_OWORD *)a8 + 1) = 0u;
LABEL_95:
  swift_bridgeObjectRelease();
  v90 = 0;
LABEL_13:
  if (one-time initialization token for resolvableTextSegment != -1)
    swift_once();
  v36 = v110;
  v37 = v110[2];
  v93 = a2;
  v92 = a9;
  v91 = a3;
  if (!v37)
  {
    v109 = 0u;
    v108 = 0u;
LABEL_22:
    outlined destroy of Any?((uint64_t)&v108);
    v43 = type metadata accessor for ResolvableTextSegmentAttribute.Value(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v98, 1, 1, v43);
    goto LABEL_23;
  }
  v38 = (id)static NSAttributedStringKey.resolvableTextSegment;
  v39 = specialized __RawDictionaryStorage.find<A>(_:)(v38);
  if ((v40 & 1) != 0)
  {
    outlined init with copy of Any(v36[7] + 32 * v39, (uint64_t)&v108);
  }
  else
  {
    v109 = 0u;
    v108 = 0u;
  }

  if (!*((_QWORD *)&v109 + 1))
    goto LABEL_22;
  v41 = type metadata accessor for ResolvableTextSegmentAttribute.Value(0);
  v36 = v98;
  v42 = swift_dynamicCast();
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v36, v42 ^ 1u, 1, v41);
LABEL_23:
  a2 = v110;
  v44 = v110[8];
  v99 = v110 + 8;
  v45 = 1 << *((_BYTE *)v110 + 32);
  v46 = -1;
  if (v45 < 64)
    v46 = ~(-1 << v45);
  v96 = a10;
  a7 = v46 & v44;
  v100 = (unint64_t)(v45 + 63) >> 6;
  v101 = (__int128 *)((char *)&v108 + 8);
  a3 = v107;
  a8 = (uint64_t *)v105;
  swift_bridgeObjectRetain();
  v29 = 0;
  a9 = &lazy cache variable for type metadata for ResolvableTextSegmentAttribute.Value?;
  v94 = a2;
  while (a7)
  {
    v47 = __clz(__rbit64(a7));
    a7 &= a7 - 1;
    v48 = v47 | (v29 << 6);
LABEL_43:
    v52 = a2[7];
    *(_QWORD *)&v108 = *(_QWORD *)(a2[6] + 8 * v48);
    v53 = (_QWORD *)v108;
    v54 = v101;
    outlined init with copy of Any(v52 + 32 * v48, (uint64_t)v101);
    v106 = v53;
    outlined init with take of Any(v54, v107);
    v104 = (uint64_t)v53;
    outlined init with copy of Any((uint64_t)v107, (uint64_t)v105);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    a1 = v55;
    v20 = v53;
    v56._countAndFlagsBits = 0x7373656363414955;
    v56._object = (void *)0xEF7974696C696269;
    v36 = (_QWORD *)String.hasPrefix(_:)(v56);

    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v105);
    if ((v36 & 1) != 0)
    {
      outlined destroy of TypesettingConfiguration((uint64_t)&v106, (uint64_t (*)(_QWORD))type metadata accessor for (key: NSAttributedStringKey, value: Any));

    }
    else
    {
      v57 = v97;
      _s7SwiftUI34AccessibilityTextAttributeResolver_pSgWOcTm_0((uint64_t)v98, (uint64_t)v97, &lazy cache variable for type metadata for ResolvableTextSegmentAttribute.Value?, (void (*)(uint64_t))type metadata accessor for ResolvableTextSegmentAttribute.Value);
      v104 = v20;
      outlined init with copy of Any((uint64_t)v107, (uint64_t)v105);
      if ((v96 & 1) == 0)
      {
        v63 = (id)v20;
        outlined destroy of TypesettingConfiguration((uint64_t)&v104, (uint64_t (*)(_QWORD))type metadata accessor for (key: NSAttributedStringKey, value: Any));
        v62 = (uint64_t)v57;
        goto LABEL_48;
      }
      a1 = v95;
      _s7SwiftUI34AccessibilityTextAttributeResolver_pSgWOcTm_0((uint64_t)v57, v95, &lazy cache variable for type metadata for ResolvableTextSegmentAttribute.Value?, (void (*)(uint64_t))type metadata accessor for ResolvableTextSegmentAttribute.Value);
      v58 = type metadata accessor for ResolvableTextSegmentAttribute.Value(0);
      v59 = (uint64_t)v57;
      v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 48))(a1, 1, v58);
      v61 = (NSString *)(id)v20;
      if (v60 == 1)
      {
        outlined destroy of TypesettingConfiguration((uint64_t)&v104, (uint64_t (*)(_QWORD))type metadata accessor for (key: NSAttributedStringKey, value: Any));
        outlined destroy of ResolvableTextSegmentAttribute.Value?(v59, &lazy cache variable for type metadata for ResolvableTextSegmentAttribute.Value?, (void (*)(uint64_t))type metadata accessor for ResolvableTextSegmentAttribute.Value);
        v62 = a1;
        a2 = v94;
LABEL_48:
        outlined destroy of ResolvableTextSegmentAttribute.Value?(v62, &lazy cache variable for type metadata for ResolvableTextSegmentAttribute.Value?, (void (*)(uint64_t))type metadata accessor for ResolvableTextSegmentAttribute.Value);
        goto LABEL_49;
      }
      v67 = v61;
      v36 = (_QWORD *)ResolvableTextSegmentAttribute.Value.isAttributeRequiredForResolution(_:includeNonFunctionalAttributes:)(v61, 0);
      outlined destroy of TypesettingConfiguration((uint64_t)&v104, (uint64_t (*)(_QWORD))type metadata accessor for (key: NSAttributedStringKey, value: Any));
      outlined destroy of ResolvableTextSegmentAttribute.Value?(v59, &lazy cache variable for type metadata for ResolvableTextSegmentAttribute.Value?, (void (*)(uint64_t))type metadata accessor for ResolvableTextSegmentAttribute.Value);
      outlined destroy of TypesettingConfiguration(a1, type metadata accessor for ResolvableTextSegmentAttribute.Value);
      a2 = v94;
      if ((v36 & 1) != 0)
      {

        outlined destroy of TypesettingConfiguration((uint64_t)&v106, (uint64_t (*)(_QWORD))type metadata accessor for (key: NSAttributedStringKey, value: Any));
      }
      else
      {
LABEL_49:
        v104 = v20;
        outlined init with copy of Any((uint64_t)v107, (uint64_t)v105);
        v36 = v110;
        swift_bridgeObjectRetain();
        v64 = specialized __RawDictionaryStorage.find<A>(_:)(v20);
        a1 = v65;
        swift_bridgeObjectRelease();
        if ((a1 & 1) != 0)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v102 = v36;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            specialized _NativeDictionary.copy()();
            v36 = v102;
          }

          outlined init with take of Any((_OWORD *)(v36[7] + 32 * v64), v103);
          specialized _NativeDictionary._delete(at:)(v64, v36);
          v110 = v36;
          swift_bridgeObjectRelease();
        }
        else
        {
          memset(v103, 0, sizeof(v103));
        }

        outlined destroy of Any?((uint64_t)v103);
        outlined destroy of TypesettingConfiguration((uint64_t)&v106, (uint64_t (*)(_QWORD))type metadata accessor for (key: NSAttributedStringKey, value: Any));
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v105);
      }
    }
  }
  v49 = v29 + 1;
  if (__OFADD__(v29, 1))
  {
    __break(1u);
    goto LABEL_91;
  }
  if (v49 >= v100)
    goto LABEL_57;
  v50 = v99[v49];
  ++v29;
  if (v50)
    goto LABEL_42;
  v29 = v49 + 1;
  if (v49 + 1 >= v100)
    goto LABEL_57;
  v50 = v99[v29];
  if (v50)
    goto LABEL_42;
  v29 = v49 + 2;
  if (v49 + 2 >= v100)
    goto LABEL_57;
  v50 = v99[v29];
  if (v50)
  {
LABEL_42:
    a7 = (v50 - 1) & v50;
    v48 = __clz(__rbit64(v50)) + (v29 << 6);
    goto LABEL_43;
  }
  v51 = v49 + 3;
  if (v51 < v100)
  {
    v50 = v99[v51];
    if (!v50)
    {
      while (1)
      {
        v29 = v51 + 1;
        if (__OFADD__(v51, 1))
          break;
        if (v29 >= v100)
          goto LABEL_57;
        v50 = v99[v29];
        ++v51;
        if (v50)
          goto LABEL_42;
      }
      __break(1u);
      goto LABEL_97;
    }
    v29 = v51;
    goto LABEL_42;
  }
LABEL_57:
  swift_release();
  v68 = MEMORY[0x23B7C5DAC](0xD00000000000001ELL, 0x80000002352DE7A0);
  v69 = (void *)v68;
  v70 = v110;
  if (v110[2])
  {
    v71 = specialized __RawDictionaryStorage.find<A>(_:)(v68);
    v72 = v93;
    v73 = v92;
    v74 = v91;
    if ((v75 & 1) != 0)
    {
      outlined init with copy of Any(v70[7] + 32 * v71, (uint64_t)&v108);
    }
    else
    {
      v109 = 0u;
      v108 = 0u;
    }
  }
  else
  {
    v109 = 0u;
    v108 = 0u;
    v72 = v93;
    v73 = v92;
    v74 = v91;
  }

  if (!*((_QWORD *)&v109 + 1))
  {
    outlined destroy of Any?((uint64_t)&v108);
    goto LABEL_70;
  }
  type metadata accessor for NSTextAttachment();
  if ((swift_dynamicCast() & 1) != 0)
  {
    v76 = v106;
    v77 = objc_msgSend(v106, sel_accessibilityLabel);
    if (v77)
    {
      v78 = v77;
      v79 = (void *)MEMORY[0x23B7C5DAC](0xD00000000000001ELL, 0x80000002352DE7A0);
      specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v79, &v108);

      outlined destroy of Any?((uint64_t)&v108);
      if ((v90 & 1) != 0)
      {

        objc_msgSend(v73, sel_deleteCharactersInRange_, v72, v74);
        v74 = 0;
        goto LABEL_70;
      }
      objc_msgSend(v73, sel_replaceCharactersInRange_withString_, v72, v74, v78);
      v74 = objc_msgSend(v78, sel_length);

    }
  }
LABEL_70:
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
  swift_bridgeObjectRetain();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v73, sel_setAttributes_range_, isa, v72, v74);

  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v98, &lazy cache variable for type metadata for ResolvableTextSegmentAttribute.Value?, (void (*)(uint64_t))type metadata accessor for ResolvableTextSegmentAttribute.Value);
  return swift_bridgeObjectRelease();
}

uint64_t *NSAttributedStringKey.coreAXLabel.unsafeMutableAddressor()
{
  if (one-time initialization token for coreAXLabel != -1)
    swift_once();
  return &static NSAttributedStringKey.coreAXLabel;
}

void static NSAttributedStringKey.coreAXAttachment.getter()
{
  JUMPOUT(0x23B7C5DACLL);
}

BOOL NSAttributedStringKey.isAccessibilityAttribute.getter()
{
  Swift::String v0;
  Swift::Bool v1;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v0._countAndFlagsBits = 0x7373656363414955;
  v0._object = (void *)0xEF7974696C696269;
  v1 = String.hasPrefix(_:)(v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t EnvironmentValues.accessibilityTextAttributeResolver.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

uint64_t static AccessibilityCore.textsResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:separator:)(uint64_t a1, __int128 *a2, char a3, char a4, char a5, char a6, __int128 *a7, uint64_t a8, uint64_t a9)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t *v15;
  int v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  id v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  id v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  char v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43[3];
  unint64_t v44;

  v40 = *a7;
  v41 = *a2;
  v9 = MEMORY[0x24BEE4AF8];
  v44 = MEMORY[0x24BEE4AF8];
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    v15 = (uint64_t *)(swift_bridgeObjectRetain() + 56);
    v39 = a6 & 1;
    v16 = a3 & 1;
    v17 = a4 & 1;
    v18 = a5 & 1;
    do
    {
      v19 = *(v15 - 3);
      v20 = *(v15 - 2);
      v21 = *((_BYTE *)v15 - 8);
      v22 = *v15;
      v42 = v40;
      *(_OWORD *)v43 = v41;
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(v19, v20, v21);
      v23 = static AccessibilityCore.textResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:)(v19, v20, v21, v22, v43, v16, v17, v18, v39, &v42);
      outlined consume of Text.Storage(v19, v20, v21);
      v24 = swift_bridgeObjectRelease();
      if (v23)
      {
        MEMORY[0x23B7C61A8](v24);
        if (*(_QWORD *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v15 += 4;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
    v9 = v44;
  }
  v43[0] = v9;
  v25 = v9 >> 62;
  if (v9 >> 62)
  {
LABEL_40:
    swift_bridgeObjectRetain();
    v37 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v37)
      goto LABEL_11;
LABEL_41:
    swift_bridgeObjectRelease();
    return 0;
  }
  if (!*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_41;
LABEL_11:
  v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1688]), sel_init);
  if (!v25)
  {
    if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_15;
    goto LABEL_35;
  }
  swift_bridgeObjectRetain();
  v27 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v27)
  {
LABEL_35:
    swift_bridgeObjectRelease();
    return (uint64_t)v26;
  }
LABEL_15:
  while (1)
  {
    v25 = v9 >> 62;
    if (v9 >> 62)
      break;
    if (!*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
LABEL_17:
    if ((v9 & 0xC000000000000001) != 0)
    {
      v28 = (id)MEMORY[0x23B7C6D9C](0, v9);
      if (!v25)
        goto LABEL_20;
    }
    else
    {
      if (!*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_38;
      v28 = *(id *)(v9 + 32);
      if (!v25)
      {
LABEL_20:
        v29 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_26;
      }
    }
    swift_bridgeObjectRetain();
    v29 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
LABEL_26:
    if (!v29)
      goto LABEL_39;
    specialized Array.replaceSubrange<A>(_:with:)(0, 1);
    if ((uint64_t)objc_msgSend(v28, sel_length) >= 1)
    {
      if ((uint64_t)objc_msgSend(v26, sel_length) >= 1)
      {
        v33 = objc_allocWithZone(MEMORY[0x24BDD1458]);
        swift_bridgeObjectRetain();
        v34 = (void *)MEMORY[0x23B7C5DAC](a8, a9);
        swift_bridgeObjectRelease();
        v35 = objc_msgSend(v33, sel_initWithString_, v34);

        objc_msgSend(v26, sel_appendAttributedString_, v35);
      }
      objc_msgSend(v26, sel_appendAttributedString_, v28);
    }

    v9 = v43[0];
    if ((unint64_t)v43[0] >> 62)
    {
      swift_bridgeObjectRetain();
      v36 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v36)
        goto LABEL_35;
    }
    else if (!*(_QWORD *)((v43[0] & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_35;
    }
  }
  swift_bridgeObjectRetain();
  v30 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if (v30)
  {
    swift_bridgeObjectRetain();
    v32 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v32)
      goto LABEL_37;
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t Text.accessibilityResolvedText(in:idiom:)@<X0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  __int16 v15;
  __int128 v16;
  uint64_t v17[2];

  v12 = a1[1];
  v17[0] = *a1;
  v17[1] = v12;
  v16 = *a2;
  swift_bridgeObjectRetain();
  a5 &= 1u;
  outlined copy of Text.Storage(a3, a4, a5);
  swift_retain();
  swift_retain();
  v13 = static AccessibilityCore.textResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:)(a3, a4, a5, a6, v17, 1, 1, 0, 0, &v16);
  outlined consume of Text.Storage(a3, a4, a5);
  swift_release();
  swift_release();
  result = swift_bridgeObjectRelease();
  if (v13)
    v15 = 1;
  else
    v15 = 255;
  *(_QWORD *)a7 = v13;
  *(_QWORD *)(a7 + 8) = 0;
  *(_WORD *)(a7 + 16) = v15;
  return result;
}

uint64_t Text.Style.resolveAccessibilityTextAttributes(into:environment:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  uint64_t v12[3];
  uint64_t v13;
  uint64_t v14;

  v5 = *a2;
  v4 = a2[1];
  if (v4)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v5, (uint64_t)&v10);
    swift_release_n();
  }
  else
  {
    v6 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v6, (uint64_t)&v10);
  }
  swift_release_n();
  if (v11)
  {
    outlined init with take of ScrollStateRequest(&v10, (uint64_t)v12);
    v7 = v13;
    v8 = v14;
    __swift_project_boxed_opaque_existential_1(v12, v13);
    *(_QWORD *)&v10 = v5;
    *((_QWORD *)&v10 + 1) = v4;
    (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, uint64_t))(v8 + 16))(a1, v2, &v10, v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  else
  {
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)&v10, &lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (void (*)(uint64_t))type metadata accessor for AccessibilityTextAttributeResolver);
  }
  v12[0] = v5;
  v12[1] = v4;
  return specialized static AccessibilityCore.resolveAttributedTextAttributes(_:environment:)(a1, v12);
}

uint64_t key path getter for EnvironmentValues.accessibilityTextAttributeResolver : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a2);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a2);
  }
  return swift_release_n();
}

uint64_t key path setter for EnvironmentValues.accessibilityTextAttributeResolver : EnvironmentValues(uint64_t a1)
{
  _BYTE v2[40];
  _BYTE v3[40];

  _s7SwiftUI34AccessibilityTextAttributeResolver_pSgWOcTm_0(a1, (uint64_t)v3, &lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (void (*)(uint64_t))type metadata accessor for AccessibilityTextAttributeResolver);
  _s7SwiftUI34AccessibilityTextAttributeResolver_pSgWOcTm_0((uint64_t)v3, (uint64_t)v2, &lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (void (*)(uint64_t))type metadata accessor for AccessibilityTextAttributeResolver);
  specialized EnvironmentValues._set<A>(_:for:)((uint64_t)v2);
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v2, &lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (void (*)(uint64_t))type metadata accessor for AccessibilityTextAttributeResolver);
  return outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v3, &lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (void (*)(uint64_t))type metadata accessor for AccessibilityTextAttributeResolver);
}

uint64_t EnvironmentValues.accessibilityTextAttributeResolver.setter(uint64_t a1)
{
  _BYTE v3[40];

  _s7SwiftUI34AccessibilityTextAttributeResolver_pSgWOcTm_0(a1, (uint64_t)v3, &lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (void (*)(uint64_t))type metadata accessor for AccessibilityTextAttributeResolver);
  specialized EnvironmentValues._set<A>(_:for:)((uint64_t)v3);
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v3, &lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (void (*)(uint64_t))type metadata accessor for AccessibilityTextAttributeResolver);
  return outlined destroy of ResolvableTextSegmentAttribute.Value?(a1, &lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (void (*)(uint64_t))type metadata accessor for AccessibilityTextAttributeResolver);
}

void (*EnvironmentValues.accessibilityTextAttributeResolver.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[16] = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v4, (uint64_t)v3);
    swift_release_n();
  }
  else
  {
    v5 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v5, (uint64_t)v3);
  }
  swift_release_n();
  return EnvironmentValues.accessibilityTextAttributeResolver.modify;
}

void EnvironmentValues.accessibilityTextAttributeResolver.modify(uint64_t *a1, char a2)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)*a1;
  v3 = *a1 + 40;
  if ((a2 & 1) != 0)
  {
    _s7SwiftUI34AccessibilityTextAttributeResolver_pSgWOcTm_0(*a1, v3, &lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (void (*)(uint64_t))type metadata accessor for AccessibilityTextAttributeResolver);
    _s7SwiftUI34AccessibilityTextAttributeResolver_pSgWOcTm_0(v3, (uint64_t)v2 + 80, &lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (void (*)(uint64_t))type metadata accessor for AccessibilityTextAttributeResolver);
    specialized EnvironmentValues._set<A>(_:for:)((uint64_t)v2 + 80);
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v2 + 80, &lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (void (*)(uint64_t))type metadata accessor for AccessibilityTextAttributeResolver);
  }
  else
  {
    _s7SwiftUI34AccessibilityTextAttributeResolver_pSgWOcTm_0(*a1, v3, &lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (void (*)(uint64_t))type metadata accessor for AccessibilityTextAttributeResolver);
    specialized EnvironmentValues._set<A>(_:for:)(v3);
  }
  outlined destroy of ResolvableTextSegmentAttribute.Value?(v3, &lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (void (*)(uint64_t))type metadata accessor for AccessibilityTextAttributeResolver);
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v2, &lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (void (*)(uint64_t))type metadata accessor for AccessibilityTextAttributeResolver);
  free(v2);
}

double one-time initialization function for defaultValue()
{
  double result;

  qword_2561AF2C0 = 0;
  result = 0.0;
  static EnvironmentValues.AccessibilityTextAttributeResolverKey.defaultValue = 0u;
  *(_OWORD *)algn_2561AF2B0 = 0u;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  double result;
  _BYTE v5[296];
  _BYTE __src[296];

  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for EmptyGesture<()>, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EmptyGesture);
  v1 = v0;
  _s7SwiftUI16ArrayWith2InlineV7StorageOyAA12GestureDebugO4DataV_GWOi2_((uint64_t)v5);
  outlined init with take of ArrayWith2Inline<GestureDebug.Data>.Storage((uint64_t)v5, (uint64_t)__src, &lazy cache variable for type metadata for ArrayWith2Inline<GestureDebug.Data>.Storage, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ArrayWith2Inline.Storage);
  v2 = swift_allocObject();
  memcpy((void *)(v2 + 16), __src, 0x121uLL);
  v3 = *MEMORY[0x24BE096C0];
  LOBYTE(static GestureDebug.Data.defaultValue) = 0;
  *((_QWORD *)&static GestureDebug.Data.defaultValue + 1) = v1;
  LOWORD(xmmword_2561B47C0) = 768;
  *(_QWORD *)((char *)&xmmword_2561B47C0 + 4) = v3;
  result = 0.0;
  xmmword_2561B47D0 = 0u;
  xmmword_2561B47E0 = 0u;
  xmmword_2561B47F0 = 0u;
  xmmword_2561B4800 = 0u;
  xmmword_2561B4810 = 0u;
  xmmword_2561B4820 = 0u;
  LOBYTE(xmmword_2561B4830) = 3;
  *((_QWORD *)&xmmword_2561B4830 + 1) = v2;
  return result;
}

{
  uint64_t v0;
  double result;

  type metadata accessor for _ContiguousArrayStorage<(key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)>();
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_23527E860;
  *(_WORD *)(v0 + 32) = 0;
  *(_OWORD *)(v0 + 40) = xmmword_23528B790;
  result = 0.0;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  *(_BYTE *)(v0 + 120) = 0;
  *(_DWORD *)(v0 + 124) = 1065353216;
  *(_QWORD *)(v0 + 128) = 0;
  *(_BYTE *)(v0 + 136) = -1;
  *(_QWORD *)(v0 + 144) = MEMORY[0x24BEE4AF8];
  static _ShapeStyle_Pack.defaultValue = v0;
  return result;
}

{
  void (*v0)(double *__return_ptr);
  void *v1;
  double result;
  double v3[3];

  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v0 = *(void (**)(double *__return_ptr))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared) + 0x70);
  v1 = static CoreGlue.shared;
  v0(v3);

  result = v3[0];
  *(_OWORD *)&static ImplicitRootType.defaultValue = *(_OWORD *)v3;
  return result;
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.AccessibilityTextAttributeResolverKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  return _s7SwiftUI34AccessibilityTextAttributeResolver_pSgWOcTm_0((uint64_t)&static EnvironmentValues.AccessibilityTextAttributeResolverKey.defaultValue, a1, &lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (void (*)(uint64_t))type metadata accessor for AccessibilityTextAttributeResolver);
}

NSAttributedString __swiftcall NSAttributedString.init(axAttributedString:)(Swift::String axAttributedString)
{
  void *object;
  uint64_t countAndFlagsBits;
  id v3;
  void *v4;
  id v5;
  id v6;

  object = axAttributedString._object;
  countAndFlagsBits = axAttributedString._countAndFlagsBits;
  v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v4 = (void *)MEMORY[0x23B7C5DAC](countAndFlagsBits, object);
  swift_bridgeObjectRelease();
  v5 = AXAttributedStringConvert(v4);

  v6 = objc_msgSend(v3, sel_initWithAttributedString_, v5);
  return (NSAttributedString)v6;
}

void static NSAttributedStringKey.coreAXForegroundColor.getter()
{
  JUMPOUT(0x23B7C5DACLL);
}

void static NSAttributedStringKey.coreAXFontName.getter()
{
  JUMPOUT(0x23B7C5DACLL);
}

void static NSAttributedStringKey.coreAXFontSize.getter()
{
  JUMPOUT(0x23B7C5DACLL);
}

void static NSAttributedStringKey.coreAXFontFamily.getter()
{
  JUMPOUT(0x23B7C5DACLL);
}

void static NSAttributedStringKey.coreAXStrikethrough.getter()
{
  JUMPOUT(0x23B7C5DACLL);
}

void static NSAttributedStringKey.coreAXUnderline.getter()
{
  JUMPOUT(0x23B7C5DACLL);
}

void static NSAttributedStringKey.coreAXAlignment.getter()
{
  JUMPOUT(0x23B7C5DACLL);
}

void static NSAttributedStringKey.coreAXLink.getter()
{
  JUMPOUT(0x23B7C5DACLL);
}

void static NSAttributedStringKey.coreAXTextHeadingLevel.getter()
{
  JUMPOUT(0x23B7C5DACLL);
}

void static NSAttributedStringKey.coreAXSpeechPitch.getter()
{
  JUMPOUT(0x23B7C5DACLL);
}

void static NSAttributedStringKey.coreAXSpeechPunctuation.getter()
{
  JUMPOUT(0x23B7C5DACLL);
}

void static NSAttributedStringKey.coreAXSpeechSpellOut.getter()
{
  JUMPOUT(0x23B7C5DACLL);
}

void static NSAttributedStringKey.coreAXSpeechIPANotation.getter()
{
  JUMPOUT(0x23B7C5DACLL);
}

void static NSAttributedStringKey.coreAXTextualContext.getter()
{
  JUMPOUT(0x23B7C5DACLL);
}

void static NSAttributedStringKey.coreAXSpeechAnnouncementPriority.getter()
{
  JUMPOUT(0x23B7C5DACLL);
}

void static NSAttributedStringKey.coreAXSpeechLanguage.getter()
{
  JUMPOUT(0x23B7C5DACLL);
}

uint64_t one-time initialization function for coreAXLabel()
{
  uint64_t result;

  result = MEMORY[0x23B7C5DAC](0xD00000000000001ALL, 0x80000002352DEA80);
  static NSAttributedStringKey.coreAXLabel = result;
  return result;
}

id static NSAttributedStringKey.coreAXLabel.getter()
{
  if (one-time initialization token for coreAXLabel != -1)
    swift_once();
  return (id)static NSAttributedStringKey.coreAXLabel;
}

__CFString *static NSAttributedStringKey.coreAXDurationTimeMMSS.getter()
{
  return CFSTR("UIAccessibilityTokenDurationTimeMMSS");
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (*v9)(__int128 *, uint64_t, uint64_t, uint64_t);
  __int128 v11;
  __int128 v12;

  v9 = *(void (**)(__int128 *, uint64_t, uint64_t, uint64_t))(a1 + 32);
  if (a2)
  {
    *((_QWORD *)&v12 + 1) = swift_getObjectType();
    *(_QWORD *)&v11 = a2;
  }
  else
  {
    v11 = 0u;
    v12 = 0u;
  }
  swift_unknownObjectRetain();
  v9(&v11, a3, a4, a5);
  return outlined destroy of Any?((uint64_t)&v11);
}

uint64_t specialized Text.resolve<A>(into:in:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  int v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t (*v21)(_QWORD);
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  char v25;
  _BYTE v27[4];
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[2];

  v31 = a4;
  v14 = a7 & 1;
  v15 = type metadata accessor for Text.Style(0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = &v27[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v18);
  v20 = &v27[-v19];
  outlined init with copy of TypesettingLanguage(a1, (uint64_t)&v27[-v19], v21);
  v22 = *(_QWORD *)(a8 + 16);
  if (v22)
  {
    v28 = v14;
    v29 = a5;
    v30 = a6;
    swift_bridgeObjectRetain();
    v23 = (_BYTE *)(a8 + 16 * v22 + 24);
    do
    {
      --v22;
      v24 = *((_QWORD *)v23 - 1);
      v25 = *v23;
      v23 -= 16;
      v32[0] = a2;
      v32[1] = a3;
      outlined copy of Text.Modifier(v24, v25);
      Text.Modifier.modify(style:environment:)(a1, (uint64_t)v32, v24, v25);
      outlined consume of Text.Modifier(v24, v25);
    }
    while (v22);
    swift_bridgeObjectRelease();
    specialized Text.Storage.resolve<A>(into:in:with:)(a1, a2, a3, v31, v29, v30, v28);
    outlined init with copy of TypesettingLanguage((uint64_t)v20, (uint64_t)v17, type metadata accessor for Text.Style);
    outlined assign with take of Text.Style((uint64_t)v17, a1);
  }
  else
  {
    specialized Text.Storage.resolve<A>(into:in:with:)(a1, a2, a3, v31, a5, a6, v14);
  }
  return outlined destroy of TypesettingConfiguration((uint64_t)v20, type metadata accessor for Text.Style);
}

void *specialized Text.resolve<A>(into:in:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t (*v21)(_QWORD);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  void (*v31)(uint64_t, uint64_t *, uint64_t *, uint64_t, _UNKNOWN **);
  uint64_t v32;
  void *result;
  Swift::Int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  LODWORD(v9) = a7;
  v59 = a4;
  v60 = type metadata accessor for Text.Resolved(0);
  MEMORY[0x24BDAC7A8](v60);
  v54 = (uint64_t)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Text.Style(0);
  MEMORY[0x24BDAC7A8](v16);
  v55 = (uint64_t)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v52 - v19;
  outlined init with copy of TypesettingLanguage(a1, (uint64_t)&v52 - v19, v21);
  v25 = *(_QWORD *)(a8 + 16);
  if (v25)
  {
    v56 = v9;
    v57 = a5;
    v58 = a6;
    v26 = v20;
    swift_bridgeObjectRetain();
    v27 = (_BYTE *)(a8 + 16 * v25 + 24);
    v9 = v25;
    v28 = v25;
    do
    {
      --v28;
      v29 = *((_QWORD *)v27 - 1);
      v30 = *v27;
      v27 -= 16;
      v62 = a2;
      v63 = a3;
      outlined copy of Text.Modifier(v29, v30);
      Text.Modifier.modify(style:environment:)(a1, (uint64_t)&v62, v29, v30);
      outlined consume of Text.Modifier(v29, v30);
    }
    while (v28);
    swift_bridgeObjectRelease();
    v20 = v26;
    v25 = v9;
    a5 = v57;
    a6 = v58;
    LOBYTE(v9) = v56;
  }
  if ((v9 & 1) != 0)
  {
    v62 = a2;
    v63 = a3;
    v61 = v59;
    v31 = *(void (**)(uint64_t, uint64_t *, uint64_t *, uint64_t, _UNKNOWN **))(*(_QWORD *)a5 + 80);
    swift_retain();
    v31(a1, &v62, &v61, v60, &protocol witness table for Text.Resolved);
    outlined consume of Text.Storage(a5, a6, 1);
    if (!v25)
      return (void *)outlined destroy of TypesettingConfiguration((uint64_t)v20, type metadata accessor for Text.Style);
LABEL_9:
    v32 = v55;
    outlined init with copy of TypesettingLanguage((uint64_t)v20, v55, type metadata accessor for Text.Style);
    outlined assign with take of Text.Style(v32, a1);
    return (void *)outlined destroy of TypesettingConfiguration((uint64_t)v20, type metadata accessor for Text.Style);
  }
  v53 = v25;
  if (a3)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(a2, &v62);
    swift_release_n();
    swift_release_n();
    v57 = v62;
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, v22, v23, v24);
    BloomFilter.init(hashValue:)(v34);
    v35 = v62;
    v36 = swift_retain_n();
    v37 = specialized find1<A>(_:key:filter:)(v36, v35);
    if (v37)
      v57 = *(_QWORD *)(v37 + 72);
    else
      v57 = 0;
    swift_release_n();
  }
  v62 = a5;
  v63 = a6;
  swift_bridgeObjectRetain();
  v38 = String.init<A>(_:)();
  v62 = a2;
  v63 = a3;
  v40 = String.caseConvertedIfNeeded(_:)(&v62, v38, v39);
  v58 = v40;
  v42 = v41;
  swift_bridgeObjectRelease();
  v43 = v54;
  outlined init with copy of TypesettingLanguage(a1, v54, type metadata accessor for Text.Resolved);
  v44 = swift_allocObject();
  *(_QWORD *)(v44 + 16) = v40;
  *(_QWORD *)(v44 + 24) = v42;
  v45 = v60;
  v46 = a1 + *(int *)(v60 + 32);
  v62 = a2;
  v63 = a3;
  v47 = *(unsigned __int8 *)(v43 + *(int *)(v60 + 24));
  v61 = v59;
  swift_bridgeObjectRetain();
  v48 = Text.Style.nsAttributes(content:environment:includeDefaultAttributes:with:properties:)((uint64_t)partial apply for closure #1 in Text.Resolved.append<A>(_:in:with:isUniqueSizeVariant:), v44, &v62, v47, &v61, v46);
  swift_release();
  outlined destroy of TypesettingConfiguration(v43, type metadata accessor for Text.Resolved);
  v62 = a2;
  v63 = a3;
  Text.Resolved.append(_:with:in:)(v58, v42, v48, &v62);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = *(void **)(a1 + *(int *)(v45 + 20));
  if (result)
  {
    v49 = objc_msgSend(result, sel_isEmptyOrTerminatedByParagraphSeparator);
    v50 = v53;
    if (v49)
    {

      *(_QWORD *)(v46 + 128) = 0;
    }
    if (v57)
      v51 = 0;
    else
      v51 = 256;
    *(_WORD *)(v46 + 32) |= v51;
    if (!v50)
      return (void *)outlined destroy of TypesettingConfiguration((uint64_t)v20, type metadata accessor for Text.Style);
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t specialized Text.Storage.resolve<A>(into:in:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  void (*v12)(uint64_t, uint64_t *, uint64_t *, uint64_t, _UNKNOWN **);
  uint64_t v13;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  char v22;
  uint64_t v23;
  void *v24;
  void *v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if ((a7 & 1) != 0)
  {
    v32 = a2;
    v33 = a3;
    v31 = a4;
    v12 = *(void (**)(uint64_t, uint64_t *, uint64_t *, uint64_t, _UNKNOWN **))(*(_QWORD *)a5 + 80);
    v13 = type metadata accessor for Text.ResolvedString(0);
    swift_retain();
    v12(a1, &v32, &v31, v13, &protocol witness table for Text.ResolvedString);
    return outlined consume of Text.Storage(a5, a6, 1);
  }
  if (a3)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(a2, &v32);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, a2, 0, a4);
    BloomFilter.init(hashValue:)(v15);
    v16 = swift_retain_n();
    specialized find1<A>(_:key:filter:)(v16, v32);
  }
  swift_release_n();
  v32 = a5;
  v33 = a6;
  swift_bridgeObjectRetain();
  v17 = String.init<A>(_:)();
  v32 = a2;
  v33 = a3;
  v19 = String.caseConvertedIfNeeded(_:)(&v32, v17, v18);
  v21 = v20;
  swift_bridgeObjectRelease();
  if (!a3)
  {
    v32 = a2;
    v33 = 0;
    swift_retain();
    v30 = specialized static ShouldRedactContentKey.value(in:)(&v32, v27, v28, v29);
    swift_release();
    if ((v30 & 1) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
  swift_retain_n();
  swift_retain_n();
  v22 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(a2);
  swift_release_n();
  swift_release_n();
  if ((v22 & 1) != 0)
  {
LABEL_8:
    v23 = String.count.getter();
    v19 = MEMORY[0x23B7C5FA4](3081666804, 0xA400000000000000, v23);
    v25 = v24;
    swift_bridgeObjectRelease();
    v21 = v25;
  }
LABEL_9:
  type metadata accessor for Text.ResolvedString(0);
  v26._countAndFlagsBits = v19;
  v26._object = v21;
  String.append(_:)(v26);
  return swift_bridgeObjectRelease();
}

uint64_t specialized static AccessibilityCore.resolveAccessibilitySpeechAttributes(into:speechAttr:environment:includeDefaultAttributes:)(uint64_t a1, char *a2, uint64_t *a3, char a4)
{
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  __int128 v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;

  v6 = *a2;
  v7 = a2[1];
  v8 = *((_QWORD *)a2 + 1);
  v9 = a2[16];
  v10 = a2[17];
  v18 = *((_QWORD *)a2 + 4);
  v19 = *((_QWORD *)a2 + 3);
  v12 = *a3;
  v11 = a3[1];
  if (v11)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v12, (uint64_t)&v21);
    swift_release_n();
  }
  else
  {
    v13 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v13, (uint64_t)&v21);
  }
  swift_release_n();
  if (!v24)
    return outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)&v21, &lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (void (*)(uint64_t))type metadata accessor for AccessibilityTextAttributeResolver);
  outlined init with take of ScrollStateRequest(&v21, (uint64_t)v26);
  v17 = a1;
  v14 = v27;
  v15 = v28;
  __swift_project_boxed_opaque_existential_1(v26, v27);
  LOBYTE(v21) = v6;
  BYTE1(v21) = v7;
  *((_QWORD *)&v21 + 1) = v8;
  v22 = v9;
  v23 = v10;
  v24 = v19;
  v25 = v18;
  v20[0] = v12;
  v20[1] = v11;
  (*(void (**)(uint64_t, __int128 *, _QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 24))(v17, &v21, v20, a4 & 1, v14, v15);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
}

uint64_t specialized static AccessibilityCore.resolveAttributedTextAttributes(_:environment:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v3 = *a2;
  if (a2[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, (uint64_t)&v8);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, (uint64_t)&v8);
  }
  swift_release_n();
  if (!v9)
    return outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)&v8, &lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (void (*)(uint64_t))type metadata accessor for AccessibilityTextAttributeResolver);
  outlined init with take of ScrollStateRequest(&v8, (uint64_t)v10);
  v5 = v11;
  v6 = v12;
  __swift_project_boxed_opaque_existential_1(v10, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 8))(a1, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

uint64_t outlined consume of Text.Storage(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release();
  else
    return swift_bridgeObjectRelease();
}

uint64_t outlined copy of Text.Storage(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain();
  else
    return swift_bridgeObjectRetain();
}

uint64_t sub_234A8C4D0()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t outlined assign with take of Date?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Date?(0, &lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_234A8C54C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ResolvableStringResolutionContext() - 8) + 80);
  v2 = (v1 + 24) & ~v1;

  v3 = type metadata accessor for Date();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v0 + v2, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v2, v3);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined init with take of ResolvableStringResolutionContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ResolvableStringResolutionContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in static ResolvableTextSegmentAttribute.update(_:in:)(uint64_t a1, Swift::Int a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;

  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ResolvableStringResolutionContext() - 8) + 80);
  return closure #1 in static ResolvableTextSegmentAttribute.update(_:in:)(a1, a2, a3, a4, *(objc_class **)(v4 + 16), (objc_class *)(v4 + ((v9 + 24) & ~v9)));
}

uint64_t sub_234A8C6B8()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE12B0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

uint64_t objectdestroyTm_0()
{
  uint64_t v0;

  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static AccessibilityCore.resolveAttributedTextAttributes(in:environment:includeResolvableAttributes:)(uint64_t a1, _QWORD *a2, _OWORD *a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in static AccessibilityCore.resolveAttributedTextAttributes(in:environment:includeResolvableAttributes:)(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), *(uint64_t **)(v4 + 40), *(unint64_t **)(v4 + 48), *(_BYTE *)(v4 + 56));
}

uint64_t sub_234A8C794()
{
  return swift_deallocObject();
}

uint64_t outlined destroy of ResolvableTextSegmentAttribute.Value?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t v4;

  type metadata accessor for Date?(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t dispatch thunk of AccessibilityTextAttributeResolver.resolveDefaultAttributes(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of AccessibilityTextAttributeResolver.resolveTextStyleAttributes(_:textStyle:environment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of AccessibilityTextAttributeResolver.resolveAccessibilitySpeechAttributes(into:speechAttr:environment:includeDefaultAttributes:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 24))();
}

uint64_t outlined copy of Text.Modifier(uint64_t a1, unsigned __int8 a2)
{
  unsigned int v2;
  uint64_t result;

  v2 = a2 >> 5;
  if (v2 <= 6 && ((1 << v2) & 0x43) != 0)
    return swift_retain();
  return result;
}

uint64_t outlined consume of Text.Modifier(uint64_t a1, unsigned __int8 a2)
{
  unsigned int v2;
  uint64_t result;

  v2 = a2 >> 5;
  if (v2 <= 6 && ((1 << v2) & 0x43) != 0)
    return swift_release();
  return result;
}

uint64_t outlined assign with take of Text.Style(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Text.Style(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>)
  {
    v4 = type metadata accessor for EnvironmentPropertyKey(0, (uint64_t)&type metadata for EnvironmentValues.TextSizeVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSizeVariantKey, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>);
  }
}

uint64_t sub_234A8C8F0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Text.Resolved.append<A>(_:in:with:isUniqueSizeVariant:)()
{
  uint64_t v0;

  return closure #1 in Text.Resolved.append<A>(_:in:with:isUniqueSizeVariant:)(*(_QWORD *)(v0 + 16));
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t type metadata accessor for NSTextAttachment()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSTextAttachment;
  if (!lazy cache variable for type metadata for NSTextAttachment)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSTextAttachment);
  }
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentValues.AccessibilityTextAttributeResolverKey()
{
  return &type metadata for EnvironmentValues.AccessibilityTextAttributeResolverKey;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *);
  uint64_t v28;

  v25 = a5;
  v26 = a2;
  v28 = a4;
  v27 = a1;
  v24 = a3;
  v9 = *(_QWORD *)(a3 - 8);
  v10 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 + 16);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v10);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, v6);
  v22 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1, v14) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
    v27(v18, v12);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    if (v7)
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v25, v12, v24);
    v22 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(a6, v22, 1);
}

BOOL ScrollPosition.matches<A>(id:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t DynamicType;

  v1 = *(_QWORD *)(v0 + 64);
  DynamicType = swift_getDynamicType();
  return v1 == MEMORY[0x24BEE23D0] || DynamicType == v1;
}

uint64_t ScrollPosition.scrollTo<A>(id:anchor:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v14[7];
  char v15;
  char v16;

  v14[3] = a5;
  v14[4] = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v14);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16))(boxed_opaque_existential_1, a1, a5);
  v14[5] = a2;
  v14[6] = a3;
  v15 = a4 & 1;
  v16 = 0;
  return outlined assign with take of ScrollPosition.Storage((uint64_t)v14, v6);
}

uint64_t ScrollPosition.isPositionedByUser.setter(char a1)
{
  uint64_t v1;
  int8x16_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t result;
  _QWORD v8[3];
  int8x16_t v9;
  int8x16_t v10;
  char v11;
  char v12;

  outlined init with copy of ScrollPosition.Storage(v1, (uint64_t)v8);
  if (v12 == 5)
  {
    v3 = vorrq_s8(v9, v10);
    v4 = *(_QWORD *)&vorr_s8(*(int8x8_t *)v3.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL)) | v8[2] | v8[1];
    v5 = !v11 && v8[0] == 1;
    if (v5 && v4 == 0)
      return outlined destroy of ScrollPosition.Storage((uint64_t)v8);
  }
  result = outlined destroy of ScrollPosition.Storage((uint64_t)v8);
  if ((a1 & 1) != 0)
  {
    result = outlined destroy of ScrollPosition.Storage(v1);
    *(_QWORD *)v1 = 1;
    *(_OWORD *)(v1 + 8) = 0u;
    *(_OWORD *)(v1 + 24) = 0u;
    *(_OWORD *)(v1 + 40) = 0u;
    *(_WORD *)(v1 + 56) = 1280;
  }
  return result;
}

uint64_t ScrollPosition.wantsUpdate(toPosition:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unsigned int v5;
  int v6;
  _BYTE v7[64];
  _BYTE v8[64];
  _OWORD v9[2];
  _OWORD v10[2];
  _OWORD v11[2];
  _OWORD v12[2];
  _OWORD v13[2];
  _OWORD v14[2];
  _BYTE v15[64];
  _OWORD v16[2];
  _BYTE v17[25];
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  outlined init with copy of ScrollPosition.Storage(v1, (uint64_t)v15);
  outlined init with copy of ScrollPosition.Storage(a1, (uint64_t)v16);
  if (v15[57])
    goto LABEL_4;
  outlined init with copy of ScrollPosition.Storage((uint64_t)v15, (uint64_t)v13);
  if (v18)
  {
    outlined destroy of ScrollPosition.ViewID((uint64_t)v13);
LABEL_4:
    outlined destroy of TypesettingConfiguration((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for (ScrollPosition.Storage, ScrollPosition.Storage));
    return 1;
  }
  v11[0] = v13[0];
  v11[1] = v13[1];
  v12[0] = v14[0];
  *(_OWORD *)((char *)v12 + 9) = *(_OWORD *)((char *)v14 + 9);
  v9[0] = v16[0];
  v9[1] = v16[1];
  v10[0] = *(_OWORD *)v17;
  *(_OWORD *)((char *)v10 + 9) = *(_OWORD *)&v17[9];
  if (one-time initialization token for v6 != -1)
    swift_once();
  v5 = static Semantics.v6;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FAB4 & 1) != 0)
    v6 = dyld_program_sdk_at_least();
  else
    v6 = static Semantics.forced >= v5;
  outlined init with copy of ScrollPosition.ViewID((uint64_t)v11, (uint64_t)v8);
  outlined init with copy of ScrollPosition.ViewID((uint64_t)v9, (uint64_t)v7);
  if (v6)
  {
    type metadata accessor for Hashable & Sendable();
    v3 = AGCompareValues() ^ 1;
  }
  else
  {
    v3 = 1;
  }
  outlined destroy of ScrollPosition.ViewID((uint64_t)v7);
  outlined destroy of ScrollPosition.ViewID((uint64_t)v8);
  outlined destroy of ScrollPosition.ViewID((uint64_t)v9);
  outlined destroy of ScrollPosition.ViewID((uint64_t)v11);
  outlined destroy of ScrollPosition.Storage((uint64_t)v15);
  return v3;
}

uint64_t static ScrollPosition.ViewID.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  if ((*(_BYTE *)(a1 + 56) & 1) == 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 1) == 0
      && *(double *)(a1 + 40) == *(double *)(a2 + 40)
      && *(double *)(a1 + 48) == *(double *)(a2 + 48))
    {
      goto LABEL_10;
    }
    return 0;
  }
  if (!*(_BYTE *)(a2 + 56))
    return 0;
LABEL_10:
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = __swift_project_boxed_opaque_existential_1((_QWORD *)a1, v5);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = __swift_project_boxed_opaque_existential_1((_QWORD *)a2, v8);
  return project #1 <A, B>(lhs:rhs:) in static ScrollPosition.ViewID.== infix(_:_:)((uint64_t)v7, (uint64_t)v9, v5, v8, v6);
}

uint64_t ScrollPosition.ViewID.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of AnyTrackedValue(v1, a1);
}

uint64_t ScrollPosition.ViewID.id.setter(__int128 *a1)
{
  uint64_t v1;

  __swift_destroy_boxed_opaque_existential_1(v1);
  return outlined init with take of ScrollStateRequest(a1, v1);
}

uint64_t (*ScrollPosition.ViewID.id.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrollPosition.ViewID.anchor.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t ScrollPosition.ViewID.anchor.setter(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 40) = result;
  *(_QWORD *)(v3 + 48) = a2;
  *(_BYTE *)(v3 + 56) = a3 & 1;
  return result;
}

uint64_t (*ScrollPosition.ViewID.anchor.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrollPosition.storage.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ScrollPosition.Storage(v1, a1);
}

uint64_t ScrollPosition.storage.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of ScrollPosition.Storage(a1, v1);
}

uint64_t (*ScrollPosition.storage.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrollPosition.idType.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

uint64_t ScrollPosition.idType.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 64) = result;
  *(_QWORD *)(v2 + 72) = a2;
  return result;
}

uint64_t (*ScrollPosition.idType.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

_OWORD *ScrollPosition.init<A>(idType:storage:)@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  _OWORD *result;

  result = outlined init with take of ScrollPosition.Storage(a2, (_OWORD *)a4);
  *(_QWORD *)(a4 + 64) = a1;
  *(_QWORD *)(a4 + 72) = a3;
  return result;
}

uint64_t outlined assign with take of ScrollPosition.Storage(uint64_t a1, uint64_t a2)
{
  assignWithTake for ScrollPosition.Storage(a2, a1);
  return a2;
}

uint64_t ScrollPosition.init<A>(id:anchor:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t DynamicType;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v16;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;

  DynamicType = swift_getDynamicType();
  v19 = a5;
  v20 = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v18);
  v16 = *(_QWORD *)(a5 - 8);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v16 + 16))(boxed_opaque_existential_1, a1, a5);
  v21 = a2;
  v22 = a3;
  v23 = a4 & 1;
  v24 = 0;
  outlined init with take of ScrollPosition.Storage(&v18, (_OWORD *)a7);
  *(_QWORD *)(a7 + 64) = DynamicType;
  *(_QWORD *)(a7 + 72) = a6;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(a1, a5);
}

_OWORD *ScrollPosition.init<A>(idType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  _OWORD *result;
  _BYTE v7[57];
  char v8;

  memset(v7, 0, sizeof(v7));
  v8 = 5;
  result = outlined init with take of ScrollPosition.Storage((__int128 *)v7, (_OWORD *)a3);
  *(_QWORD *)(a3 + 64) = a1;
  *(_QWORD *)(a3 + 72) = a2;
  return result;
}

_OWORD *ScrollPosition.init<A>(idType:edge:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  _OWORD *result;
  __int128 v8[3];
  char v9;

  LOBYTE(v8[0]) = a2;
  v9 = 1;
  result = outlined init with take of ScrollPosition.Storage(v8, (_OWORD *)a4);
  *(_QWORD *)(a4 + 64) = a1;
  *(_QWORD *)(a4 + 72) = a3;
  return result;
}

_OWORD *ScrollPosition.init<A>(idType:point:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  _OWORD *result;
  __int128 v9;
  char v10;

  *(double *)&v9 = a4;
  *((double *)&v9 + 1) = a5;
  v10 = 2;
  result = outlined init with take of ScrollPosition.Storage(&v9, (_OWORD *)a3);
  *(_QWORD *)(a3 + 64) = a1;
  *(_QWORD *)(a3 + 72) = a2;
  return result;
}

_OWORD *ScrollPosition.init<A>(idType:x:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>, double a4@<D0>)
{
  return ScrollPosition.init<A>(idType:x:)(a1, a2, 3, a3, a4);
}

_OWORD *ScrollPosition.init<A>(idType:y:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>, double a4@<D0>)
{
  return ScrollPosition.init<A>(idType:x:)(a1, a2, 4, a3, a4);
}

_OWORD *ScrollPosition.init<A>(idType:x:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, char a3@<W3>, uint64_t a4@<X8>, double a5@<D0>)
{
  _OWORD *result;
  __int128 v9[3];
  char v10;

  *(double *)v9 = a5;
  v10 = a3;
  result = outlined init with take of ScrollPosition.Storage(v9, (_OWORD *)a4);
  *(_QWORD *)(a4 + 64) = a1;
  *(_QWORD *)(a4 + 72) = a2;
  return result;
}

Swift::Void __swiftcall ScrollPosition.scrollTo(edge:)(SwiftUI::Edge edge)
{
  SwiftUI::Edge *v1;

  outlined destroy of ScrollPosition.Storage((uint64_t)v1);
  *v1 = edge;
  *((_BYTE *)v1 + 57) = 1;
}

uint64_t ScrollPosition.scrollTo(x:y:)(double a1, double a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined destroy of ScrollPosition.Storage(v2);
  *(double *)v2 = a1;
  *(double *)(v2 + 8) = a2;
  *(_BYTE *)(v2 + 57) = 2;
  return result;
}

uint64_t ScrollPosition.scrollTo(x:)(double a1)
{
  uint64_t v1;
  uint64_t result;

  result = outlined destroy of ScrollPosition.Storage(v1);
  *(double *)v1 = a1;
  *(_BYTE *)(v1 + 57) = 3;
  return result;
}

uint64_t ScrollPosition.scrollTo(y:)(double a1)
{
  uint64_t v1;
  uint64_t result;

  result = outlined destroy of ScrollPosition.Storage(v1);
  *(double *)v1 = a1;
  *(_BYTE *)(v1 + 57) = 4;
  return result;
}

BOOL ScrollPosition.isPositionedByUser.getter()
{
  uint64_t v0;
  int8x16_t v1;
  uint64_t v2;
  BOOL v3;
  _BOOL8 v5;
  _QWORD v7[3];
  int8x16_t v8;
  int8x16_t v9;
  char v10;
  char v11;

  outlined init with copy of ScrollPosition.Storage(v0, (uint64_t)v7);
  v5 = 0;
  if (v11 == 5)
  {
    v1 = vorrq_s8(v8, v9);
    v2 = *(_QWORD *)&vorr_s8(*(int8x8_t *)v1.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1, v1, 8uLL)) | v7[2] | v7[1];
    v3 = !v10 && v7[0] == 1;
    if (v3 && v2 == 0)
      v5 = 1;
  }
  outlined destroy of ScrollPosition.Storage((uint64_t)v7);
  return v5;
}

void type metadata accessor for (ScrollPosition.Storage, ScrollPosition.Storage)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ScrollPosition.Storage, ScrollPosition.Storage))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ScrollPosition.Storage, ScrollPosition.Storage));
  }
}

uint64_t key path getter for ScrollPosition.isPositionedByUser : ScrollPosition@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  int8x16_t v3;
  uint64_t v4;
  BOOL v5;
  BOOL v7;
  uint64_t result;
  _QWORD v9[3];
  int8x16_t v10;
  int8x16_t v11;
  char v12;
  char v13;

  outlined init with copy of ScrollPosition.Storage(a1, (uint64_t)v9);
  v7 = 0;
  if (v13 == 5)
  {
    v3 = vorrq_s8(v10, v11);
    v4 = *(_QWORD *)&vorr_s8(*(int8x8_t *)v3.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL)) | v9[2] | v9[1];
    v5 = !v12 && v9[0] == 1;
    if (v5 && v4 == 0)
      v7 = 1;
  }
  result = outlined destroy of ScrollPosition.Storage((uint64_t)v9);
  *a2 = v7;
  return result;
}

uint64_t key path setter for ScrollPosition.isPositionedByUser : ScrollPosition(char *a1, uint64_t a2)
{
  char v3;
  int8x16_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t result;
  _QWORD v9[3];
  int8x16_t v10;
  int8x16_t v11;
  char v12;
  char v13;

  v3 = *a1;
  outlined init with copy of ScrollPosition.Storage(a2, (uint64_t)v9);
  if (v13 == 5)
  {
    v4 = vorrq_s8(v10, v11);
    v5 = *(_QWORD *)&vorr_s8(*(int8x8_t *)v4.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 8uLL)) | v9[2] | v9[1];
    v6 = !v12 && v9[0] == 1;
    if (v6 && v5 == 0)
      return outlined destroy of ScrollPosition.Storage((uint64_t)v9);
  }
  result = outlined destroy of ScrollPosition.Storage((uint64_t)v9);
  if ((v3 & 1) != 0)
  {
    result = outlined destroy of ScrollPosition.Storage(a2);
    *(_QWORD *)a2 = 1;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_WORD *)(a2 + 56) = 1280;
  }
  return result;
}

void (*ScrollPosition.isPositionedByUser.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  char *v4;
  int8x16_t v5;
  uint64_t v6;
  BOOL v7;
  BOOL v9;

  v2 = v1;
  v4 = (char *)malloc(0x48uLL);
  *a1 = v4;
  *((_QWORD *)v4 + 8) = v2;
  outlined init with copy of ScrollPosition.Storage(v2, (uint64_t)v4);
  v9 = 0;
  if (v4[57] == 5)
  {
    v5 = vorrq_s8(*(int8x16_t *)(v4 + 24), *(int8x16_t *)(v4 + 40));
    v6 = *(_QWORD *)&vorr_s8(*(int8x8_t *)v5.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)) | *((_QWORD *)v4 + 2) | *((_QWORD *)v4 + 1);
    v7 = !v4[56] && *(_QWORD *)v4 == 1;
    if (v7 && v6 == 0)
      v9 = 1;
  }
  outlined destroy of ScrollPosition.Storage((uint64_t)v4);
  v4[58] = v9;
  return ScrollPosition.isPositionedByUser.modify;
}

void ScrollPosition.isPositionedByUser.modify(uint64_t *a1, char a2)
{
  unsigned __int8 *v3;
  int v4;
  int v5;
  int8x16_t v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  int8x16_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v14;

  v3 = (unsigned __int8 *)*a1;
  v4 = *(unsigned __int8 *)(*a1 + 58);
  outlined init with copy of ScrollPosition.Storage(*(_QWORD *)(*a1 + 64), *a1);
  v5 = v3[57];
  if ((a2 & 1) != 0)
  {
    if (v5 != 5
      || ((v6 = vorrq_s8(*(int8x16_t *)(v3 + 24), *(int8x16_t *)(v3 + 40)),
           v7 = *(_QWORD *)&vorr_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)) | *((_QWORD *)v3 + 2) | *((_QWORD *)v3 + 1),
           !v3[56])
        ? (v8 = *(_QWORD *)v3 == 1)
        : (v8 = 0),
          v8 ? (v9 = v7 == 0) : (v9 = 0),
          !v9))
    {
      outlined destroy of ScrollPosition.Storage((uint64_t)v3);
      if ((v4 & 1) == 0)
        goto LABEL_23;
      goto LABEL_21;
    }
LABEL_22:
    outlined destroy of ScrollPosition.Storage((uint64_t)v3);
    goto LABEL_23;
  }
  if (v5 == 5)
  {
    v10 = vorrq_s8(*(int8x16_t *)(v3 + 24), *(int8x16_t *)(v3 + 40));
    v11 = *(_QWORD *)&vorr_s8(*(int8x8_t *)v10.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL)) | *((_QWORD *)v3 + 2) | *((_QWORD *)v3 + 1);
    v12 = !v3[56] && *(_QWORD *)v3 == 1;
    if (v12 && v11 == 0)
      goto LABEL_22;
  }
  outlined destroy of ScrollPosition.Storage((uint64_t)v3);
  if (v4)
  {
LABEL_21:
    v14 = *((_QWORD *)v3 + 8);
    outlined destroy of ScrollPosition.Storage(v14);
    *(_QWORD *)v14 = 1;
    *(_OWORD *)(v14 + 8) = 0u;
    *(_OWORD *)(v14 + 24) = 0u;
    *(_OWORD *)(v14 + 40) = 0u;
    *(_WORD *)(v14 + 56) = 1280;
  }
LABEL_23:
  free(v3);
}

uint64_t ScrollPosition.edge.getter()
{
  uint64_t v0;
  _BYTE v2[64];

  outlined init with copy of ScrollPosition.Storage(v0, (uint64_t)v2);
  if (v2[57] == 1)
    return v2[0];
  outlined destroy of ScrollPosition.Storage((uint64_t)v2);
  return 4;
}

uint64_t ScrollPosition.point.getter()
{
  uint64_t v0;
  uint64_t v2;
  char v3;

  outlined init with copy of ScrollPosition.Storage(v0, (uint64_t)&v2);
  if (v3 == 2)
    return v2;
  outlined destroy of ScrollPosition.Storage((uint64_t)&v2);
  return 0;
}

uint64_t ScrollPosition.viewID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  _OWORD v4[2];
  _BYTE v5[25];
  char v6;
  __int128 v7[2];
  _OWORD v8[2];

  outlined init with copy of ScrollPosition.Storage(v1, (uint64_t)v4);
  if (v6)
  {
    result = outlined destroy of ScrollPosition.Storage((uint64_t)v4);
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  else
  {
    v7[0] = v4[0];
    v7[1] = v4[1];
    v8[0] = *(_OWORD *)v5;
    *(_OWORD *)((char *)v8 + 9) = *(_OWORD *)&v5[9];
    return outlined init with take of ScrollStateRequest(v7, a1);
  }
  return result;
}

uint64_t ScrollPosition.viewID<A>(type:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[6];
  _OWORD v12[2];
  _BYTE v13[25];
  char v14;
  __int128 v15[2];
  _OWORD v16[2];
  _BYTE v17[32];
  uint64_t v18;

  v4 = v3;
  outlined init with copy of ScrollPosition.Storage(v4, (uint64_t)v12);
  if (v14)
  {
    outlined destroy of ScrollPosition.Storage((uint64_t)v12);
    memset(v17, 0, sizeof(v17));
    v18 = 0;
  }
  else
  {
    v15[0] = v12[0];
    v15[1] = v12[1];
    v16[0] = *(_OWORD *)v13;
    *(_OWORD *)((char *)v16 + 9) = *(_OWORD *)&v13[9];
    outlined init with take of ScrollStateRequest(v15, (uint64_t)v17);
  }
  v8 = outlined init with take of (Hashable & Sendable)?((uint64_t)v17, (uint64_t)v12);
  MEMORY[0x24BDAC7A8](v8);
  v11[2] = a1;
  v11[3] = a2;
  type metadata accessor for (Hashable & Sendable)?();
  _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in ScrollPosition.viewID<A>(type:), (uint64_t)v11, MEMORY[0x24BEE4078], a1, v9, a3);
  return outlined destroy of TypesettingConfiguration((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for (Hashable & Sendable)?);
}

uint64_t project #1 <A><A1>(_:) in ScrollPosition.viewID<A>(type:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;

  v5 = MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, double))(v7 + 16))((char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  v8 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a3, v8 ^ 1u, 1, a2);
}

uint64_t _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, char *);
  uint64_t v29;

  v26 = a5;
  v27 = a2;
  v28 = a1;
  v29 = a6;
  v9 = *(_QWORD *)(a3 - 8);
  v10 = MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 + 16);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v10);
  v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1, v14) == 1)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 56))(v29, 1, 1, a4);
  v25 = a3;
  v24 = v26;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
  v28(v18, v12);
  result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  if (v6)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v24, v12, v25);
  return result;
}

BOOL static ScrollPosition.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  _BYTE v7[64];
  _BYTE v8[64];

  outlined init with copy of ScrollPosition.Storage(a1, (uint64_t)v8);
  outlined init with copy of ScrollPosition.Storage(a2, (uint64_t)v7);
  specialized static ScrollPosition.Storage.== infix(_:_:)((uint64_t)v8, (uint64_t)v7);
  v5 = v4;
  outlined destroy of ScrollPosition.Storage((uint64_t)v7);
  outlined destroy of ScrollPosition.Storage((uint64_t)v8);
  return (v5 & 1) != 0 && *(_QWORD *)(a1 + 64) == *(_QWORD *)(a2 + 64);
}

BOOL project #1 <A, B>(lhs:rhs:) in static ScrollPosition.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ScrollPosition(uint64_t a1, uint64_t a2)
{
  char v4;
  _BYTE v7[64];
  _BYTE v8[64];

  outlined init with copy of ScrollPosition.Storage(a1, (uint64_t)v8);
  outlined init with copy of ScrollPosition.Storage(a2, (uint64_t)v7);
  v4 = static ScrollPosition.Storage.== infix(_:_:)(v8, v7);
  outlined destroy of ScrollPosition.Storage((uint64_t)v7);
  outlined destroy of ScrollPosition.Storage((uint64_t)v8);
  return (v4 & 1) != 0
      && project #1 <A, B>(lhs:rhs:) in static ScrollPosition.== infix(_:_:)(*(_QWORD *)(a1 + 64), *(_QWORD *)(a2 + 64));
}

uint64_t project #1 <A, B>(lhs:rhs:) in static ScrollPosition.ViewID.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  char v23;
  _QWORD v25[2];

  v25[1] = a5;
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v25 - v10;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a3 - 8);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))(v14, a2, a4, v17);
  v21 = swift_dynamicCast();
  v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  if (v21)
  {
    v22(v11, 0, 1, a3);
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v19, v11, a3);
    v23 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v19, a3);
  }
  else
  {
    v22(v11, 1, 1, a3);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v23 = 0;
  }
  return v23 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ScrollPosition.ViewID(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  if ((*(_BYTE *)(a1 + 56) & 1) == 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 1) == 0
      && *(double *)(a1 + 40) == *(double *)(a2 + 40)
      && *(double *)(a1 + 48) == *(double *)(a2 + 48))
    {
      goto LABEL_10;
    }
    return 0;
  }
  if (!*(_BYTE *)(a2 + 56))
    return 0;
LABEL_10:
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = __swift_project_boxed_opaque_existential_1((_QWORD *)a1, v5);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = __swift_project_boxed_opaque_existential_1((_QWORD *)a2, v8);
  return project #1 <A, B>(lhs:rhs:) in static ScrollPosition.ViewID.== infix(_:_:)((uint64_t)v7, (uint64_t)v9, v5, v8, v6);
}

uint64_t ScrollPositionToValue.anchor.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t ScrollPositionToValue.anchor.setter(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;

  *(_QWORD *)v3 = result;
  *(_QWORD *)(v3 + 8) = a2;
  *(_BYTE *)(v3 + 16) = a3 & 1;
  return result;
}

uint64_t (*ScrollPositionToValue.anchor.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrollPositionToValue.get(base:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return ScrollPosition.viewID<A>(type:)(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t ScrollPositionToValue.set(base:newValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = a1;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v19 - v9;
  v11 = *(_QWORD *)(v6 - 8);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)v3;
  v20 = *(_QWORD *)(v3 + 8);
  v21 = v16;
  v17 = *(_BYTE *)(v3 + 16);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a2, v7, v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v6) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v15, v10, v6);
  ScrollPosition.scrollTo<A>(id:anchor:)((uint64_t)v15, v21, v20, v17, v6, *(_QWORD *)(a3 + 24));
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v15, v6);
}

Swift::Int ScrollPositionToValue.hashValue.getter(uint64_t a1)
{
  return ScrollPositionToValue.hashValue.getter(a1, (void (*)(_BYTE *))ScrollPositionToValue.hash(into:));
}

uint64_t protocol witness for Projection.get(base:) in conformance ScrollPositionToValue<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return ScrollPositionToValue.get(base:)(a1, a2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ScrollPositionToValue<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance ScrollPositionToValue<A>(a1, a2, a3, (void (*)(_BYTE *))ScrollPositionToValue.hash(into:));
}

uint64_t (*ValueToScrollPosition.anchor.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrollPositionToValue.init(_:anchor:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v10 = type metadata accessor for Optional();
  v13 = type metadata accessor for Binding(0, v10, v11, v12);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a1, v13);
  *(_QWORD *)a5 = a2;
  *(_QWORD *)(a5 + 8) = a3;
  *(_BYTE *)(a5 + 16) = a4 & 1;
  return result;
}

uint64_t ValueToScrollPosition.get(base:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __int128 *v2;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  __int128 v9;
  __int128 v10;
  _QWORD v11[4];
  __int128 v12;
  char v13;
  _OWORD v14[4];
  __int128 v15;
  _BYTE v16[57];
  char v17;

  v4 = *((_BYTE *)v2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v11[2] = v5;
  v11[3] = v6;
  v12 = *v2;
  v13 = v4;
  type metadata accessor for Optional();
  result = _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in ValueToScrollPosition.get(base:), (uint64_t)v11, MEMORY[0x24BEE4078], (uint64_t)&type metadata for ScrollPosition, v7, (uint64_t)v14);
  if ((_QWORD)v15)
  {
    v9 = v14[3];
    *(_OWORD *)(a2 + 32) = v14[2];
    *(_OWORD *)(a2 + 48) = v9;
    *(_OWORD *)(a2 + 64) = v15;
    v10 = v14[1];
    *(_OWORD *)a2 = v14[0];
    *(_OWORD *)(a2 + 16) = v10;
  }
  else
  {
    memset(v16, 0, sizeof(v16));
    v17 = 5;
    outlined init with take of ScrollPosition.Storage((__int128 *)v16, (_OWORD *)a2);
    *(_QWORD *)(a2 + 64) = v5;
    *(_QWORD *)(a2 + 72) = v6;
    return outlined destroy of TypesettingConfiguration((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for ScrollPosition?);
  }
  return result;
}

uint64_t closure #1 in ValueToScrollPosition.get(base:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  char v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v12 = a4 & 1;
  v13 = MEMORY[0x24BDAC7A8](a1);
  v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v16 + 16))(v15, v13);
  return ScrollPosition.init<A>(id:anchor:)((uint64_t)v15, a2, a3, v12, a5, a6, a7);
}

uint64_t ValueToScrollPosition.set(base:newValue:)(char *a1, uint64_t a2, uint64_t a3)
{
  return specialized ValueToScrollPosition.set(base:newValue:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

void ScrollPositionToValue.hash(into:)()
{
  uint64_t v0;
  double v1;
  double v2;

  if (*(_BYTE *)(v0 + 16) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v2 = *(double *)v0;
    v1 = *(double *)(v0 + 8);
    Hasher._combine(_:)(1u);
    UnitPoint.hash(into:)(v2, v1);
  }
}

BOOL static ScrollPositionToValue.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(a1 + 16) & 1) == 0)
    return (*(_BYTE *)(a2 + 16) & 1) == 0
        && *(double *)a1 == *(double *)a2
        && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  return (*(_BYTE *)(a2 + 16) & 1) != 0;
}

Swift::Int ValueToScrollPosition.hashValue.getter(uint64_t a1)
{
  return ScrollPositionToValue.hashValue.getter(a1, (void (*)(_BYTE *))ValueToScrollPosition.hash(into:));
}

Swift::Int ScrollPositionToValue.hashValue.getter(uint64_t a1, void (*a2)(_BYTE *))
{
  __int128 *v2;
  char v4;
  _BYTE v6[72];
  __int128 v7;
  char v8;

  v4 = *((_BYTE *)v2 + 16);
  v7 = *v2;
  v8 = v4;
  Hasher.init(_seed:)();
  a2(v6);
  return Hasher._finalize()();
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance ValueToScrollPosition<A>(char *a1, uint64_t a2, uint64_t a3)
{
  return specialized ValueToScrollPosition.set(base:newValue:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ValueToScrollPosition<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance ScrollPositionToValue<A>(a1, a2, a3, (void (*)(_BYTE *))ValueToScrollPosition.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ScrollPositionToValue<A>(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *))
{
  _BYTE v6[72];

  Hasher.init(_seed:)();
  a4(v6);
  return Hasher._finalize()();
}

uint64_t outlined init with copy of ScrollPosition.ViewID(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  char v5;

  v4 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 24) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a2, a1);
  v5 = *(_BYTE *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_BYTE *)(a2 + 56) = v5;
  return a2;
}

unint64_t type metadata accessor for Hashable & Sendable()
{
  unint64_t result;

  result = lazy cache variable for type metadata for Hashable & Sendable;
  if (!lazy cache variable for type metadata for Hashable & Sendable)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Hashable & Sendable);
  }
  return result;
}

void specialized static ScrollPosition.Storage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  _QWORD v3[7];
  uint64_t v5;

  outlined init with copy of ScrollPosition.Storage(a1, (uint64_t)v3);
  outlined init with copy of ScrollPosition.Storage(a2, (uint64_t)&v5);
  __asm { BR              X11 }
}

uint64_t sub_234A8E5CC()
{
  __int128 *v0;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[25];
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  char v17;
  _BYTE v18[192];

  outlined init with copy of ScrollPosition.Storage((uint64_t)v18, (uint64_t)v12);
  if (!v18[121])
  {
    *(_OWORD *)&v11[9] = *(__int128 *)((char *)v0 + 41);
    v3 = v0[2];
    v10 = v0[1];
    *(_OWORD *)v11 = v3;
    v9 = *v0;
    if ((v17 & 1) != 0)
    {
      if (v11[24])
        goto LABEL_12;
    }
    else if ((v11[24] & 1) == 0 && v15 == *(double *)&v11[8] && v16 == *(double *)&v11[16])
    {
LABEL_12:
      v4 = v13;
      v5 = v14;
      v6 = __swift_project_boxed_opaque_existential_1(v12, v13);
      v7 = *((_QWORD *)&v10 + 1);
      v8 = __swift_project_boxed_opaque_existential_1(&v9, *((uint64_t *)&v10 + 1));
      LOBYTE(v4) = project #1 <A, B>(lhs:rhs:) in static ScrollPosition.ViewID.== infix(_:_:)((uint64_t)v6, (uint64_t)v8, v4, v7, v5);
      outlined destroy of ScrollPosition.ViewID((uint64_t)&v9);
      outlined destroy of ScrollPosition.ViewID((uint64_t)v12);
      if ((v4 & 1) != 0)
      {
        outlined destroy of ScrollPosition.Storage((uint64_t)v18);
        return 1;
      }
      goto LABEL_14;
    }
    outlined destroy of ScrollPosition.ViewID((uint64_t)&v9);
    outlined destroy of ScrollPosition.ViewID((uint64_t)v12);
LABEL_14:
    outlined destroy of ScrollPosition.Storage((uint64_t)v18);
    return 0;
  }
  outlined destroy of ScrollPosition.ViewID((uint64_t)v12);
  outlined destroy of TypesettingConfiguration((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for (ScrollPosition.Storage, ScrollPosition.Storage));
  return 0;
}

_OWORD *outlined init with take of ScrollPosition.Storage(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  *(_OWORD *)((char *)a2 + 42) = *(__int128 *)((char *)a1 + 42);
  a2[1] = v3;
  a2[2] = v4;
  *a2 = v2;
  return a2;
}

uint64_t outlined init with take of (Hashable & Sendable)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for (Hashable & Sendable)?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for (Hashable & Sendable)?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (Hashable & Sendable)?)
  {
    type metadata accessor for Hashable & Sendable();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (Hashable & Sendable)?);
  }
}

uint64_t partial apply for closure #1 in ScrollPosition.viewID<A>(type:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v2 + 16);
  v5 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  return project #1 <A><A1>(_:) in ScrollPosition.viewID<A>(type:)((uint64_t)v5, v4, a2);
}

uint64_t partial apply for closure #1 in ValueToScrollPosition.get(base:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in ValueToScrollPosition.get(base:)(a1, *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_BYTE *)(v2 + 48), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

void type metadata accessor for ScrollPosition?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ScrollPosition?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ScrollPosition?);
  }
}

uint64_t specialized ValueToScrollPosition.set(base:newValue:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(char *, uint64_t, uint64_t);
  int v19;
  void (*v20)(char *, uint64_t);
  int v21;
  uint64_t result;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;

  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v25 - v12;
  v14 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  ScrollPosition.viewID<A>(type:)(a3, a4, (uint64_t)v13);
  v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v19 = v18(v13, 1, a3);
  v20 = *(void (**)(char *, uint64_t))(v8 + 8);
  if (v19 == 1)
  {
    v20(v13, v7);
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, a1, v7);
    v21 = v18(v10, 1, a3);
    result = ((uint64_t (*)(char *, uint64_t))v20)(v10, v7);
    if (v21 == 1)
      return result;
    v20(a1, v7);
    v23 = 1;
  }
  else
  {
    v20(a1, v7);
    v24 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    v24(v17, v13, a3);
    v24(a1, v17, a3);
    v23 = 0;
  }
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(a1, v23, 1, a3);
}

uint64_t instantiation function for generic protocol witness table for ScrollPositionToValue<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ScrollPositionToValue<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for Equatable in ScrollPositionToValue<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t instantiation function for generic protocol witness table for ValueToScrollPosition<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ValueToScrollPosition<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for Equatable in ValueToScrollPosition<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t destroy for ScrollPosition(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 57))
    return __swift_destroy_boxed_opaque_existential_1(a1);
  return a1;
}

uint64_t initializeWithCopy for ScrollPosition(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  if (*(_BYTE *)(a2 + 57))
  {
    v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 42) = *(_OWORD *)(a2 + 42);
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_WORD *)(a1 + 56) = *(unsigned __int8 *)(a2 + 56);
  }
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  return a1;
}

uint64_t assignWithCopy for ScrollPosition(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  unsigned __int8 v8;

  if ((__int128 *)a1 != a2)
  {
    outlined destroy of ScrollPosition.Storage(a1);
    if (*((_BYTE *)a2 + 57))
    {
      v4 = *a2;
      v5 = a2[1];
      v6 = a2[2];
      *(_OWORD *)(a1 + 42) = *(__int128 *)((char *)a2 + 42);
      *(_OWORD *)(a1 + 16) = v5;
      *(_OWORD *)(a1 + 32) = v6;
      *(_OWORD *)a1 = v4;
    }
    else
    {
      v7 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v7;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v7 - 8))(a1, a2);
      v8 = *((_BYTE *)a2 + 56);
      *(_OWORD *)(a1 + 40) = *(__int128 *)((char *)a2 + 40);
      *(_WORD *)(a1 + 56) = v8;
    }
  }
  *(_OWORD *)(a1 + 64) = a2[4];
  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

_OWORD *assignWithTake for ScrollPosition(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;

  if (a1 != a2)
  {
    outlined destroy of ScrollPosition.Storage((uint64_t)a1);
    v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    a1[2] = a2[2];
    *(_OWORD *)((char *)a1 + 42) = *(_OWORD *)((char *)a2 + 42);
  }
  a1[4] = a2[4];
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollPosition(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollPosition(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 64) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollPosition()
{
  return &type metadata for ScrollPosition;
}

uint64_t destroy for ScrollPosition.Storage(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 57);
  if (v1 >= 5)
    v1 = *(_DWORD *)a1 + 5;
  if (!v1)
    return __swift_destroy_boxed_opaque_existential_1(a1);
  return a1;
}

uint64_t initializeWithCopy for ScrollPosition.Storage(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  __int128 v5;
  __int128 v6;
  char v7;

  v4 = *(unsigned __int8 *)(a2 + 57);
  if (v4 >= 5)
    v4 = *(_DWORD *)a2 + 5;
  switch(v4)
  {
    case 0u:
      v5 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v5;
      (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_WORD *)(a1 + 56) = *(unsigned __int8 *)(a2 + 56);
      return a1;
    case 1u:
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v7 = 1;
      goto LABEL_10;
    case 2u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v7 = 2;
      goto LABEL_10;
    case 3u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v7 = 3;
      goto LABEL_10;
    case 4u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v7 = 4;
LABEL_10:
      *(_BYTE *)(a1 + 57) = v7;
      break;
    default:
      v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 42) = *(_OWORD *)(a2 + 42);
      break;
  }
  return a1;
}

uint64_t assignWithCopy for ScrollPosition.Storage(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned __int8 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char v11;

  if ((__int128 *)a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 57);
    if (v4 >= 5)
      v4 = *(_DWORD *)a1 + 5;
    if (!v4)
      __swift_destroy_boxed_opaque_existential_1(a1);
    v5 = *((unsigned __int8 *)a2 + 57);
    if (v5 >= 5)
      v5 = *(_DWORD *)a2 + 5;
    switch(v5)
    {
      case 0u:
        v6 = *((_QWORD *)a2 + 3);
        *(_QWORD *)(a1 + 24) = v6;
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        (**(void (***)(uint64_t, __int128 *))(v6 - 8))(a1, a2);
        v7 = *((_BYTE *)a2 + 56);
        *(_OWORD *)(a1 + 40) = *(__int128 *)((char *)a2 + 40);
        *(_WORD *)(a1 + 56) = v7;
        return a1;
      case 1u:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        v11 = 1;
        goto LABEL_15;
      case 2u:
        *(_OWORD *)a1 = *a2;
        v11 = 2;
        goto LABEL_15;
      case 3u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v11 = 3;
        goto LABEL_15;
      case 4u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v11 = 4;
LABEL_15:
        *(_BYTE *)(a1 + 57) = v11;
        break;
      default:
        v8 = *a2;
        v9 = a2[1];
        v10 = a2[2];
        *(_OWORD *)(a1 + 42) = *(__int128 *)((char *)a2 + 42);
        *(_OWORD *)(a1 + 16) = v9;
        *(_OWORD *)(a1 + 32) = v10;
        *(_OWORD *)a1 = v8;
        break;
    }
  }
  return a1;
}

__n128 __swift_memcpy58_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 42) = *(_OWORD *)(a2 + 42);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ScrollPosition.Storage(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  __int128 v7;
  char v8;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 57);
    if (v4 >= 5)
      v4 = *(_DWORD *)a1 + 5;
    if (!v4)
      __swift_destroy_boxed_opaque_existential_1(a1);
    v5 = *(unsigned __int8 *)(a2 + 57);
    if (v5 >= 5)
      v5 = *(_DWORD *)a2 + 5;
    switch(v5)
    {
      case 0u:
        v6 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v6;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
        *(_BYTE *)(a1 + 57) = 0;
        return a1;
      case 1u:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        v8 = 1;
        goto LABEL_15;
      case 2u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v8 = 2;
        goto LABEL_15;
      case 3u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v8 = 3;
        goto LABEL_15;
      case 4u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v8 = 4;
LABEL_15:
        *(_BYTE *)(a1 + 57) = v8;
        break;
      default:
        v7 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v7;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 42) = *(_OWORD *)(a2 + 42);
        break;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollPosition.Storage(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFB && *(_BYTE *)(a1 + 58))
    return (*(_DWORD *)a1 + 251);
  v3 = *(unsigned __int8 *)(a1 + 57);
  if (v3 >= 6)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ScrollPosition.Storage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_OWORD *)(result + 42) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 251;
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 58) = 1;
  }
  else
  {
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 58) = 0;
    if (a2)
      *(_BYTE *)(result + 57) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for ScrollPosition.Storage(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 57);
  if (result >= 5)
    return (*(_DWORD *)a1 + 5);
  return result;
}

uint64_t destructiveInjectEnumTag for ScrollPosition.Storage(uint64_t result, unsigned int a2)
{
  if (a2 > 4)
  {
    *(_OWORD *)(result + 41) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 5;
    LOBYTE(a2) = 5;
  }
  *(_BYTE *)(result + 57) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ScrollPosition.Storage()
{
  return &type metadata for ScrollPosition.Storage;
}

uint64_t initializeWithCopy for ScrollPosition.ViewID(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t assignWithCopy for ScrollPosition.ViewID(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  v4 = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v4;
  return a1;
}

__n128 __swift_memcpy57_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ScrollPosition.ViewID(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollPosition.ViewID(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 57))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollPosition.ViewID(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 57) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollPosition.ViewID()
{
  return &type metadata for ScrollPosition.ViewID;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for ScrollPositionToValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ScrollPositionToValue);
}

uint64_t type metadata accessor for ValueToScrollPosition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ValueToScrollPosition);
}

uint64_t static HorizontalDirection.Set.leading.getter()
{
  return 1;
}

uint64_t static HorizontalDirection.Set.trailing.getter()
{
  return 2;
}

uint64_t static HorizontalDirection.Set.all.getter()
{
  return 3;
}

void *static HorizontalDirection.allCases.getter()
{
  return &outlined read-only object #0 of static HorizontalDirection.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance HorizontalDirection(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance HorizontalDirection;
}

uint64_t protocol witness for Decodable.init(from:) in conformance HorizontalDirection()
{
  lazy protocol witness table accessor for type HorizontalDirection and conformance HorizontalDirection();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance HorizontalDirection()
{
  lazy protocol witness table accessor for type HorizontalDirection and conformance HorizontalDirection();
  return RawRepresentable<>.encode(to:)();
}

uint64_t VerticalDirection.Set.init(_:)(char a1)
{
  return (1 << (a1 & 1));
}

uint64_t static VerticalDirection.Set.up.getter()
{
  return 1;
}

uint64_t static VerticalDirection.Set.down.getter()
{
  return 2;
}

uint64_t static VerticalDirection.Set.all.getter()
{
  return 3;
}

SwiftUI::VerticalDirection_optional __swiftcall VerticalDirection.init(rawValue:)(Swift::Int8 rawValue)
{
  SwiftUI::VerticalDirection_optional v1;

  if (rawValue == 1)
    v1.value = SwiftUI_VerticalDirection_down;
  else
    v1.value = SwiftUI_VerticalDirection_unknownDefault;
  if (rawValue)
    return v1;
  else
    return 0;
}

void *static VerticalDirection.allCases.getter()
{
  return &outlined read-only object #0 of static VerticalDirection.allCases.getter;
}

_BYTE *protocol witness for RawRepresentable.init(rawValue:) in conformance VerticalDirection@<X0>(_BYTE *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (*result)
    v3 = v2;
  else
    v3 = 0;
  *a2 = v3;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance VerticalDirection(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance VerticalDirection;
}

uint64_t protocol witness for Decodable.init(from:) in conformance VerticalDirection()
{
  lazy protocol witness table accessor for type VerticalDirection and conformance VerticalDirection();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance VerticalDirection()
{
  lazy protocol witness table accessor for type VerticalDirection and conformance VerticalDirection();
  return RawRepresentable<>.encode(to:)();
}

uint64_t VerticalDirection.codingProxy.getter(char a1)
{
  return a1 & 1;
}

BOOL static VerticalDirection.unwrap(codingProxy:)(char a1)
{
  return a1 == 1;
}

unint64_t lazy protocol witness table accessor for type HorizontalDirection.Set and conformance HorizontalDirection.Set()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HorizontalDirection.Set and conformance HorizontalDirection.Set;
  if (!lazy protocol witness table cache variable for type HorizontalDirection.Set and conformance HorizontalDirection.Set)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for HorizontalDirection.Set, &type metadata for HorizontalDirection.Set);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HorizontalDirection.Set and conformance HorizontalDirection.Set);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HorizontalDirection.Set and conformance HorizontalDirection.Set;
  if (!lazy protocol witness table cache variable for type HorizontalDirection.Set and conformance HorizontalDirection.Set)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for HorizontalDirection.Set, &type metadata for HorizontalDirection.Set);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HorizontalDirection.Set and conformance HorizontalDirection.Set);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HorizontalDirection.Set and conformance HorizontalDirection.Set;
  if (!lazy protocol witness table cache variable for type HorizontalDirection.Set and conformance HorizontalDirection.Set)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for HorizontalDirection.Set, &type metadata for HorizontalDirection.Set);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HorizontalDirection.Set and conformance HorizontalDirection.Set);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HorizontalDirection.Set and conformance HorizontalDirection.Set;
  if (!lazy protocol witness table cache variable for type HorizontalDirection.Set and conformance HorizontalDirection.Set)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for HorizontalDirection.Set, &type metadata for HorizontalDirection.Set);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HorizontalDirection.Set and conformance HorizontalDirection.Set);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HorizontalDirection and conformance HorizontalDirection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HorizontalDirection and conformance HorizontalDirection;
  if (!lazy protocol witness table cache variable for type HorizontalDirection and conformance HorizontalDirection)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for HorizontalDirection, &type metadata for HorizontalDirection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HorizontalDirection and conformance HorizontalDirection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HorizontalDirection and conformance HorizontalDirection;
  if (!lazy protocol witness table cache variable for type HorizontalDirection and conformance HorizontalDirection)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for HorizontalDirection, &type metadata for HorizontalDirection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HorizontalDirection and conformance HorizontalDirection);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in HorizontalDirection()
{
  return lazy protocol witness table accessor for type [HorizontalDirection] and conformance [A](&lazy protocol witness table cache variable for type [HorizontalDirection] and conformance [A], &lazy cache variable for type metadata for [HorizontalDirection]);
}

unint64_t lazy protocol witness table accessor for type VerticalDirection.Set and conformance VerticalDirection.Set()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VerticalDirection.Set and conformance VerticalDirection.Set;
  if (!lazy protocol witness table cache variable for type VerticalDirection.Set and conformance VerticalDirection.Set)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for VerticalDirection.Set, &type metadata for VerticalDirection.Set);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VerticalDirection.Set and conformance VerticalDirection.Set);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VerticalDirection.Set and conformance VerticalDirection.Set;
  if (!lazy protocol witness table cache variable for type VerticalDirection.Set and conformance VerticalDirection.Set)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for VerticalDirection.Set, &type metadata for VerticalDirection.Set);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VerticalDirection.Set and conformance VerticalDirection.Set);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VerticalDirection.Set and conformance VerticalDirection.Set;
  if (!lazy protocol witness table cache variable for type VerticalDirection.Set and conformance VerticalDirection.Set)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for VerticalDirection.Set, &type metadata for VerticalDirection.Set);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VerticalDirection.Set and conformance VerticalDirection.Set);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VerticalDirection.Set and conformance VerticalDirection.Set;
  if (!lazy protocol witness table cache variable for type VerticalDirection.Set and conformance VerticalDirection.Set)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for VerticalDirection.Set, &type metadata for VerticalDirection.Set);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VerticalDirection.Set and conformance VerticalDirection.Set);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type VerticalDirection and conformance VerticalDirection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VerticalDirection and conformance VerticalDirection;
  if (!lazy protocol witness table cache variable for type VerticalDirection and conformance VerticalDirection)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for VerticalDirection, &type metadata for VerticalDirection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VerticalDirection and conformance VerticalDirection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VerticalDirection and conformance VerticalDirection;
  if (!lazy protocol witness table cache variable for type VerticalDirection and conformance VerticalDirection)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for VerticalDirection, &type metadata for VerticalDirection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VerticalDirection and conformance VerticalDirection);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in VerticalDirection()
{
  return lazy protocol witness table accessor for type [HorizontalDirection] and conformance [A](&lazy protocol witness table cache variable for type [VerticalDirection] and conformance [A], &lazy cache variable for type metadata for [VerticalDirection]);
}

uint64_t lazy protocol witness table accessor for type [HorizontalDirection] and conformance [A](unint64_t *a1, unint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    type metadata accessor for [HorizontalDirection](255, a2);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE12E0], v4);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for [HorizontalDirection](uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = type metadata accessor for Array();
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t associated type witness table accessor for CodableByProxy.CodingProxy : Decodable in HorizontalDirection()
{
  return MEMORY[0x24BEE3E70];
}

uint64_t associated type witness table accessor for CodableByProxy.CodingProxy : Encodable in HorizontalDirection()
{
  return MEMORY[0x24BEE3E58];
}

_BYTE *protocol witness for static CodableByProxy.unwrap(codingProxy:) in conformance VerticalDirection@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result == 1;
  return result;
}

ValueMetadata *type metadata accessor for HorizontalDirection()
{
  return &type metadata for HorizontalDirection;
}

ValueMetadata *type metadata accessor for HorizontalDirection.Set()
{
  return &type metadata for HorizontalDirection.Set;
}

uint64_t storeEnumTagSinglePayload for HorizontalDirection(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_234A8FAD4 + 4 * byte_235281915[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_234A8FB08 + 4 * byte_235281910[v4]))();
}

uint64_t sub_234A8FB08(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234A8FB10(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234A8FB18);
  return result;
}

uint64_t sub_234A8FB24(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234A8FB2CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_234A8FB30(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234A8FB38(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VerticalDirection()
{
  return &type metadata for VerticalDirection;
}

ValueMetadata *type metadata accessor for VerticalDirection.Set()
{
  return &type metadata for VerticalDirection.Set;
}

ValueMetadata *type metadata accessor for SmallTextEffect()
{
  return &type metadata for SmallTextEffect;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.DefaultAnimatorPhase and conformance Text.Effect.DefaultAnimatorPhase()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.DefaultAnimatorPhase and conformance Text.Effect.DefaultAnimatorPhase;
  if (!lazy protocol witness table cache variable for type Text.Effect.DefaultAnimatorPhase and conformance Text.Effect.DefaultAnimatorPhase)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.DefaultAnimatorPhase, &type metadata for Text.Effect.DefaultAnimatorPhase);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.DefaultAnimatorPhase and conformance Text.Effect.DefaultAnimatorPhase);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.DefaultAnimatorPhase and conformance Text.Effect.DefaultAnimatorPhase;
  if (!lazy protocol witness table cache variable for type Text.Effect.DefaultAnimatorPhase and conformance Text.Effect.DefaultAnimatorPhase)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.DefaultAnimatorPhase, &type metadata for Text.Effect.DefaultAnimatorPhase);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.DefaultAnimatorPhase and conformance Text.Effect.DefaultAnimatorPhase);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.Effect.DefaultAnimatorPhase and conformance Text.Effect.DefaultAnimatorPhase;
  if (!lazy protocol witness table cache variable for type Text.Effect.DefaultAnimatorPhase and conformance Text.Effect.DefaultAnimatorPhase)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Text.Effect.DefaultAnimatorPhase, &type metadata for Text.Effect.DefaultAnimatorPhase);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.DefaultAnimatorPhase and conformance Text.Effect.DefaultAnimatorPhase);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SmallTextEffect.LayoutState and conformance SmallTextEffect.LayoutState()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SmallTextEffect.LayoutState and conformance SmallTextEffect.LayoutState;
  if (!lazy protocol witness table cache variable for type SmallTextEffect.LayoutState and conformance SmallTextEffect.LayoutState)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SmallTextEffect.LayoutState, &type metadata for SmallTextEffect.LayoutState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SmallTextEffect.LayoutState and conformance SmallTextEffect.LayoutState);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SmallTextEffect.LayoutState and conformance SmallTextEffect.LayoutState;
  if (!lazy protocol witness table cache variable for type SmallTextEffect.LayoutState and conformance SmallTextEffect.LayoutState)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SmallTextEffect.LayoutState, &type metadata for SmallTextEffect.LayoutState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SmallTextEffect.LayoutState and conformance SmallTextEffect.LayoutState);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for Text.Effect.Base.Timing : Text.Effect.DurationProvider in SmallTextEffect()
{
  return &protocol witness table for Text.Effect.Timing;
}

double one-time initialization function for spring()
{
  double result;

  result = 9.2736185;
  static SmallTextEffect.spring = xmmword_235281F40;
  qword_25622D130 = 0x3FF0000000000000;
  return result;
}

{
  double result;

  result = 6.61437828;
  static ShakeHorizontalTextEffect.spring = xmmword_23529C540;
  qword_25622D170 = 0x3FF0000000000000;
  return result;
}

{
  double result;

  result = 9.68245837;
  static SomersaultTextEffect.spring = xmmword_2352A6D70;
  qword_25622D1E0 = 0x3FF0000000000000;
  return result;
}

{
  double result;

  result = 7.48331477;
  static BigTextEffect.spring = xmmword_2352BA5B0;
  qword_25622D230 = 0x3FF0000000000000;
  return result;
}

{
  double result;

  result = 6.61437828;
  static ShakeVerticalTextEffect.spring = xmmword_23529C540;
  qword_25622D2C0 = 0x3FF0000000000000;
  return result;
}

{
  double result;

  result = 7.19374728;
  static BloomTextEffect.spring = xmmword_2352D86C0;
  qword_25622D2E0 = 0x3FF0000000000000;
  return result;
}

{
  double result;

  result = 9.68245837;
  static SquishTextEffect.spring = xmmword_2352A6D70;
  qword_25622D300 = 0x3FF0000000000000;
  return result;
}

{
  double result;

  result = 9.68245837;
  static BounceTextEffect.spring = xmmword_2352A6D70;
  qword_25622D320 = 0x3FF0000000000000;
  return result;
}

{
  double result;

  result = 9.68245837;
  static StretchTextEffect.spring = xmmword_2352A6D70;
  qword_25622D340 = 0x3FF0000000000000;
  return result;
}

id closure #1 in SmallTextEffect.configuration(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Text.Effect.Content.fontSize(scale:)(a1, a2, a3, a4, 0.7);
}

uint64_t closure #2 in SmallTextEffect.configuration(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  Swift::UInt64 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t inited;
  int64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t result;
  __n128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  _QWORD v52[3];
  _QWORD *v53;
  _QWORD *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>(a2);
  v10 = 0;
  specialized Text.Effect.PathInterpolator.init<A>(_:quantization:default:options:body:)(a2, a3, 8, a2, &v46, 0.0);
  v11 = *(_OWORD *)(a2 + 32);
  v56 = *(_OWORD *)(a2 + 16);
  v57 = v11;
  v55 = *(_OWORD *)a2;
  v58 = *(_QWORD *)(a2 + 48);
  if ((*((_QWORD *)&v11 + 1) & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (*((_QWORD *)&v57 + 1) == 1 && Text.Effect.BaseFragment.coversAllParagraphs.getter())
  {
    v12 = *((_QWORD *)&v55 + 1);
    v13 = *(_QWORD *)(*((_QWORD *)&v56 + 1) + 184);
    v14 = *(_QWORD *)(*((_QWORD *)&v56 + 1) + 192);
    v15 = *(_QWORD *)(*((_QWORD *)&v56 + 1) + 200);
    v16 = *(_QWORD *)(*((_QWORD *)&v56 + 1) + 208);
    type metadata accessor for Text.Effect.ConcreteLayoutState<SmallTextEffect>(0, &lazy cache variable for type metadata for Text.Effect.ConcreteLayoutState<SmallTextEffect>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for Text.Effect.ConcreteLayoutState);
    v17 = swift_allocObject();
    v18 = 1;
    *(_BYTE *)(v17 + 16) = 1;
    v19 = v57;
    v20 = swift_retain();
    specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v20, v12, v17, v19, v52);
    v21 = v53;
    v54 = v53;
    swift_retain();
    outlined release of Text.Effect.BaseFragment((uint64_t)v52);
    v10 = v21[23];
    v22 = v21[24];
    v23 = v21[25];
    v24 = v21[26];
    outlined release of ViewTransform((uint64_t)&v54);
  }
  else
  {
    v18 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
  }
  v59 = v6;
  v60 = v7;
  v61 = v8;
  v62 = v9;
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = *(_OWORD *)a1;
  *(_QWORD *)(v25 + 32) = v6;
  *(_QWORD *)(v25 + 40) = v7;
  *(_QWORD *)(v25 + 48) = v8;
  *(_QWORD *)(v25 + 56) = v9;
  *(_BYTE *)(v25 + 64) = v18;
  *(_QWORD *)(v25 + 72) = v13;
  *(_QWORD *)(v25 + 80) = v14;
  *(_QWORD *)(v25 + 88) = v15;
  *(_QWORD *)(v25 + 96) = v16;
  *(_QWORD *)(v25 + 104) = v10;
  *(_QWORD *)(v25 + 112) = v22;
  *(_QWORD *)(v25 + 120) = v23;
  *(_QWORD *)(v25 + 128) = v24;
  v26 = v46;
  *(_OWORD *)(v25 + 152) = v47;
  *(__n128 *)(v25 + 136) = v26;
  v27 = v48;
  v28 = v49;
  v29 = v50;
  *(_QWORD *)(v25 + 216) = v51;
  *(_OWORD *)(v25 + 200) = v29;
  *(_OWORD *)(v25 + 184) = v28;
  *(_OWORD *)(v25 + 168) = v27;
  v30 = swift_allocObject();
  v31 = v49;
  *(_OWORD *)(v30 + 48) = v48;
  *(_OWORD *)(v30 + 64) = v31;
  *(_OWORD *)(v30 + 80) = v50;
  v32 = v51;
  v33 = v47;
  *(__n128 *)(v30 + 16) = v46;
  *(_OWORD *)(v30 + 32) = v33;
  *(_QWORD *)(v30 + 96) = v32;
  *(_QWORD *)(v30 + 104) = partial apply for closure #2 in closure #2 in SmallTextEffect.configuration(_:);
  *(_QWORD *)(v30 + 112) = v25;
  type metadata accessor for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>);
  v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_23527E860;
  *(_QWORD *)(v34 + 32) = partial apply for closure #1 in Text.Effect.DrawableFragment.transform(with:transform:);
  v35 = v34 + 32;
  *(_QWORD *)(v34 + 40) = v30;
  type metadata accessor for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Drawable>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23527E860;
  *(_QWORD *)(inited + 32) = v34;
  v37 = *(_QWORD *)(v34 + 16);
  outlined retain of Text.Effect.PathInterpolator((uint64_t)&v46);
  outlined retain of Text.Effect.PathInterpolator((uint64_t)&v46);
  outlined retain of LinearGradient((uint64_t)&v59);
  outlined retain of LinearGradient((uint64_t)&v60);
  outlined retain of LinearGradient((uint64_t)&v61);
  outlined retain of LinearGradient((uint64_t)&v62);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v37, 1, MEMORY[0x24BEE4AF8]);
  v39 = v38;
  if (!*(_QWORD *)(v34 + 16))
  {
    if (!v37)
      goto LABEL_14;
    goto LABEL_16;
  }
  v40 = v38[2];
  if ((v38[3] >> 1) - v40 < v37)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v41 = (unint64_t)&v38[2 * v40 + 4];
  if (v35 < v41 + 16 * v37 && v41 < v35 + 16 * v37)
    goto LABEL_19;
  swift_arrayInitWithCopy();
  if (!v37)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    swift_arrayDestroy();
    outlined release of Text.Effect.PathInterpolator((uint64_t)&v46);
    return (uint64_t)v39;
  }
  v42 = v39[2];
  v43 = __OFADD__(v42, v37);
  v44 = v42 + v37;
  if (!v43)
  {
    v39[2] = v44;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
LABEL_19:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #2 in SmallTextEffect.configuration(_:)(_QWORD *a1, uint64_t a2)
{
  Swift::UInt64 v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  _QWORD v13[7];
  _QWORD v14[7];

  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 32);
  type metadata accessor for Text.Effect.ConcreteLayoutState<SmallTextEffect>(0, &lazy cache variable for type metadata for Text.Effect.ConcreteLayoutState<SmallTextEffect>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for Text.Effect.ConcreteLayoutState);
  v5 = swift_allocObject();
  *(_BYTE *)(v5 + 16) = 0;
  v6 = swift_retain();
  specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v6, v3, v5, v4, v13);
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>((uint64_t)v13);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v14[0] = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v13, isUniquelyReferenced_nonNull_native, 0.0);
  *a1 = v14[0];
  swift_bridgeObjectRelease();
  outlined release of Text.Effect.BaseFragment((uint64_t)v13);
  v8 = swift_allocObject();
  *(_BYTE *)(v8 + 16) = 1;
  v9 = swift_retain();
  specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v9, v3, v8, v4, v14);
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>((uint64_t)v14);
  v10 = swift_isUniquelyReferenced_nonNull_native();
  v12 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v14, v10, 1.0);
  *a1 = v12;
  swift_bridgeObjectRelease();
  return outlined release of Text.Effect.BaseFragment((uint64_t)v14);
}

unint64_t closure #2 in closure #2 in SmallTextEffect.configuration(_:)(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13)
{
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  double v30;
  double v31;
  unint64_t v32;
  double v33;
  double v38;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t result;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  double v62;
  unint64_t v63;
  uint64_t v64;
  double v65;
  unint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  char v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  double v80;
  uint64_t v81;
  double v82;
  __int128 v83;
  __int128 v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  double v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  double v94;
  uint64_t v95;
  double v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  double v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  _QWORD v113[9];
  char v114;
  double v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  char v121;

  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_37;
  }
  v15 = (_QWORD *)a1;
  if (*(_QWORD *)(*(_QWORD *)(a3 + 16) + 16) <= a1)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v27 = *(_QWORD *)(a3 + 32);
  if (*(_QWORD *)(v27 + 16) <= a1)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v16 = a5;
  v13 = a4;
  v14 = a2;
  v80 = a7;
  v81 = *(_QWORD *)&a8;
  v29 = v27 + 40 * a1;
  v30 = *(double *)(v29 + 32);
  v31 = *(double *)(v29 + 40);
  v83 = *(_OWORD *)(v29 + 48);
  v32 = *(_QWORD *)(v29 + 64);
  v33 = *(double *)(a2 + 40) - *(double *)(a2 + 32);
  v38 = 0.0;
  if (v33 < 0.0)
  {
    if (v30 >= 0.0)
      goto LABEL_11;
    v38 = 1.0;
    v33 = 0.0;
    if (v30 + v31 <= 0.0)
      goto LABEL_11;
LABEL_10:
    v38 = (v33 - v30) / v31;
    goto LABEL_11;
  }
  if (v33 > v30)
  {
    v38 = 1.0;
    if (v30 + v31 > v33)
      goto LABEL_10;
  }
LABEL_11:
  v115 = specialized SmallTextEffect.target(at:)(v38);
  v116 = 0u;
  v117 = 0u;
  v118 = 0;
  __asm { FMOV            V0.2D, #1.0 }
  v119 = _Q0;
  v120 = 0x3FF0000000000000;
  v121 = 0;
  v84 = v83;
  v85 = v32;
  Text.Effect.TransformContext.update(target:for:spring:)((uint64_t)&v115, (uint64_t)v15, (double *)&v84, (uint64_t)&v104);
  v22 = v104;
  v20 = 0.0;
  if (v104 < 0.0)
    v44 = 0.0;
  else
    v44 = v104;
  if (v44 > 1.0)
    v44 = 1.0;
  v82 = v44;
  if ((v13 & 1) != 0)
    v20 = Text.Effect.Metrics.offsetForCenterAlignment(other:t:)(a10, a11, a12, a13, v44, a6, v80);
  v19 = v105;
  v21 = v107;
  v23 = v108;
  v24 = v109;
  v25 = v110;
  v26 = v111;
  *(double *)v113 = v22;
  v113[1] = v105;
  *(double *)&v113[2] = v20;
  v113[3] = v106;
  v113[4] = v107;
  v113[5] = v108;
  v113[6] = v109;
  v113[7] = v110;
  v113[8] = v111;
  v114 = v112;
  v17 = *(_QWORD *)(v14 + 272);
  if (!v17)
    goto LABEL_23;
  v75 = v112;
  v79 = v106;
  v76 = v15;
  v45 = *(_QWORD *)(v14 + 288);
  v46 = *(_QWORD *)(v14 + 296);
  v47 = *(_QWORD *)(v14 + 344);
  v48 = *(_QWORD *)(v14 + 352);
  v15 = *(_QWORD **)(v14 + 264);
  v72 = *(_QWORD *)(v14 + 312);
  v73 = *(_QWORD *)(v14 + 336);
  v71 = *(_QWORD *)(v14 + 280);
  v77 = *(_QWORD *)(v14 + 304);
  v78 = v16;
  v80 = *(double *)(v14 + 328);
  v81 = *(_QWORD *)(v14 + 320);
  outlined copy of Text.Effect.TransformContext.DrawingMode(v17, v71, v45, v46, v77, v72, v81, *(uint64_t *)&v80, v73, v47, v48);
  v18 = v17;
  swift_retain();
  v17 = v45;
  swift_retain();
  v16 = (_QWORD *)v46;
  swift_retain();
  v70 = v47;
  swift_bridgeObjectRetain();
  v13 = v48;
  outlined copy of Text.Effect.PathInterpolator.MapKeys(v48);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_40;
  while (1)
  {
    v50 = v15[2];
    v49 = v15[3];
    v51 = v79;
    if (v50 >= v49 >> 1)
    {
      v67 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v49 > 1), v50 + 1, 1, v15);
      v51 = v79;
      v74 = v67;
    }
    else
    {
      v74 = v15;
    }
    v68 = v18;
    v69 = (uint64_t)v16;
    *(_QWORD *)&v84 = v18;
    *((_QWORD *)&v84 + 1) = v71;
    v85 = v17;
    v86 = v16;
    v18 = v72;
    v87 = v77;
    v88 = v72;
    v89 = v81;
    v90 = v80;
    v91 = v73;
    v92 = v70;
    v52 = v13;
    v93 = v13;
    v94 = v22;
    v95 = v19;
    v96 = v20;
    v97 = v51;
    v98 = v21;
    v99 = v23;
    v100 = v24;
    v101 = v25;
    v102 = v26;
    v103 = v75;
    _s7SwiftUI4TextVAAE6EffectO11DisplayInfoV13DrawOperationOWOi1_((uint64_t)&v84);
    v13 = (unint64_t)v74;
    v74[2] = v50 + 1;
    outlined init with take of Text.Effect.DisplayInfo.DrawOperation((uint64_t)&v84, (uint64_t)&v74[27 * v50 + 4]);
    outlined consume of Text.Effect.TransformContext.DrawingMode(v68, v71, v17, v69, v77, v72, v81, *(uint64_t *)&v80, v73, v70, v52);
    *(_QWORD *)(v14 + 264) = v74;
    v16 = v78;
    v15 = v76;
LABEL_23:
    result = Text.Effect.TransformContext.draw(state:keyPath:)((uint64_t)v113, 0, 0, 0, 1);
    if (!__OFSUB__(*(_QWORD *)v14, v15))
      break;
LABEL_39:
    __break(1u);
LABEL_40:
    v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
  }
  if (*(_QWORD **)v14 == v15)
  {
    v54 = v16[8];
    _VF = __OFSUB__(v15, v54);
    v55 = (unint64_t)v15 - v54;
    if (_VF)
    {
      __break(1u);
    }
    else if ((v55 & 0x8000000000000000) == 0)
    {
      v56 = v16[9];
      if (v55 < *(_QWORD *)(v56 + 16))
      {
        v57 = v56 + 56 * v55;
        v60 = *(_QWORD *)(v57 + 64);
        v58 = (uint64_t *)(v57 + 64);
        v59 = v60;
        v61 = v16[10];
        result = Text.Effect.PathInterpolator.MapKeys.index(for:)(v61, v82);
        if ((result & 0x8000000000000000) == 0)
        {
          v63 = *(_QWORD *)(v59 + 16);
          if (result < v63)
          {
            if (result + 1 < v63)
            {
              *(double *)(v14 + 136) = *(double *)(v59 + 32 + 8 * result)
                                     + v62
                                     * (*(double *)(v59 + 32 + 8 * (result + 1)) - *(double *)(v59 + 32 + 8 * result));
              v64 = *v58;
              result = Text.Effect.PathInterpolator.MapKeys.index(for:)(v61, v82);
              if ((result & 0x8000000000000000) == 0)
              {
                v66 = *(_QWORD *)(v64 + 16);
                if (result < v66)
                {
                  if (result + 1 < v66)
                  {
                    *(double *)(v14 + 136) = *(double *)(v64 + 32 + 8 * result)
                                           + v65
                                           * (*(double *)(v64 + 32 + 8 * (result + 1))
                                            - *(double *)(v64 + 32 + 8 * result));
                    return result;
                  }
LABEL_50:
                  __break(1u);
                  return result;
                }
LABEL_49:
                __break(1u);
                goto LABEL_50;
              }
LABEL_48:
              __break(1u);
              goto LABEL_49;
            }
LABEL_47:
            __break(1u);
            goto LABEL_48;
          }
LABEL_46:
          __break(1u);
          goto LABEL_47;
        }
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    __break(1u);
    goto LABEL_44;
  }
  return result;
}

uint64_t protocol witness for static TextEffect.name.getter in conformance SmallTextEffect()
{
  return 0x6C6C616D73;
}

void *protocol witness for static Text.Effect.Base.states.getter in conformance SmallTextEffect()
{
  return &outlined read-only object #0 of protocol witness for static Text.Effect.Base.states.getter in conformance SmallTextEffect;
}

double protocol witness for Text.Effect.Base.timing(for:from:to:duration:) in conformance SmallTextEffect@<D0>(uint64_t a1@<X0>, double a2@<X5>, char a3@<W6>, _OWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 v11;
  double v12;
  __int128 v13;
  double result;
  _OWORD v15[2];
  __int128 v16;
  __int128 v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  char v32;
  char v33;
  char v34;
  char v35;

  type metadata accessor for Text.Effect.ConcreteLayoutState<SmallTextEffect>(0, &lazy cache variable for type metadata for Text.Effect.DrawableContent<SmallTextEffect>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for Text.Effect.DrawableContent);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v15 - v9;
  v35 = 1;
  v34 = 1;
  v33 = 0;
  v17 = xmmword_235281F50;
  v18 = 1;
  v19 = 0;
  v20 = 0;
  v21 = 2;
  v23 = 0;
  v24 = 0;
  v22 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 1;
  v29 = MEMORY[0x24BEE4AF8];
  v30 = 0;
  v31 = xmmword_235281F60;
  v32 = 0;
  if (one-time initialization token for spring != -1)
    swift_once();
  v11 = static SmallTextEffect.spring;
  v12 = *(double *)&qword_25622D130;
  outlined init with copy of Text.Effect.DrawableContent<SmallTextEffect>(a1, (uint64_t)v10);
  specialized Text.Effect.Timing.init<A>(configuration:duration:spring:content:)((uint64_t)&v17, a2, a3 & 1, (uint64_t)v10, v15, *(double *)&v11, *((double *)&v11 + 1), v12);
  v13 = v15[1];
  *a4 = v15[0];
  a4[1] = v13;
  result = *(double *)&v16;
  a4[2] = v16;
  return result;
}

unint64_t instantiation function for generic protocol witness table for SmallTextEffect(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type SmallTextEffect and conformance SmallTextEffect();
  result = lazy protocol witness table accessor for type SmallTextEffect and conformance SmallTextEffect();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

double specialized SmallTextEffect.target(at:)(double a1)
{
  double v1;
  long double v2;
  long double v3;
  long double v4;
  long double v5;

  v1 = 0.0;
  if (a1 >= 0.0)
  {
    if (a1 >= 0.1)
    {
      v1 = 1.0;
      if (a1 >= 0.95)
      {
        v1 = 0.0;
        if (a1 < 1.0)
        {
          v4 = (a1 + -0.95) / 0.05;
          v5 = v4 * 6.0 * ((1.0 - v4) * (1.0 - v4)) + pow(1.0 - v4, 3.0) - (1.0 - v4) * (v4 * v4 * 3.0);
          return v5 + pow(v4, 3.0) * 0.0;
        }
      }
    }
    else
    {
      v2 = a1 / 0.1;
      v3 = (1.0 - a1 / 0.1) * (v2 * v2 * 6.0)
         + pow(1.0 - a1 / 0.1, 3.0) * 0.0
         - v2 * 3.0 * ((1.0 - a1 / 0.1) * (1.0 - a1 / 0.1));
      return pow(v2, 3.0) + v3;
    }
  }
  return v1;
}

_QWORD *specialized SmallTextEffect.configuration(_:)()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v2 = v0[2];
  v1 = v0[3];
  if (v2 >= v1 >> 1)
    v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v1 > 1), v2 + 1, 1, v0);
  v0[2] = v2 + 1;
  v3 = &v0[4 * v2];
  v3[4] = 1;
  v3[5] = closure #1 in SmallTextEffect.configuration(_:);
  v3[6] = 0;
  *((_BYTE *)v3 + 56) = 1;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = partial apply for closure #2 in SmallTextEffect.configuration(_:);
  *(_QWORD *)(v4 + 24) = 0;
  v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v7 = v5[2];
  v6 = v5[3];
  if (v7 >= v6 >> 1)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 1, 1, v5);
  v5[2] = v7 + 1;
  v8 = &v5[2 * v7];
  v8[4] = partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.Text.Effect.Base.Timing, @guaranteed Text.Effect.DrawableFragment<A>, @unowned Text.Effect.QuantizationContext) -> (@owned Text.Effect.Drawable);
  v8[5] = v4;
  return v0;
}

uint64_t sub_234A90BE4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.Text.Effect.Base.Timing, @guaranteed Text.Effect.DrawableFragment<A>, @unowned Text.Effect.QuantizationContext) -> (@owned Text.Effect.Drawable)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t (*v6)(_OWORD *, _OWORD *, _OWORD *);
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t result;
  _OWORD v11[3];
  _OWORD v12[3];
  uint64_t v13;
  _OWORD v14[2];
  uint64_t v15;

  v6 = *(uint64_t (**)(_OWORD *, _OWORD *, _OWORD *))(v4 + 16);
  v7 = *(_OWORD *)(a2 + 16);
  v12[0] = *(_OWORD *)a2;
  v12[1] = v7;
  v12[2] = *(_OWORD *)(a2 + 32);
  v13 = *(_QWORD *)(a2 + 48);
  v8 = *(_OWORD *)(a3 + 16);
  v14[0] = *(_OWORD *)a3;
  v14[1] = v8;
  v15 = *(_QWORD *)(a3 + 32);
  v9 = a1[1];
  v11[0] = *a1;
  v11[1] = v9;
  v11[2] = a1[2];
  result = v6(v11, v12, v14);
  *a4 = result;
  return result;
}

uint64_t sub_234A90C7C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 216) >= 3uLL)
    swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t partial apply for closure #2 in closure #2 in SmallTextEffect.configuration(_:)(unint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #2 in closure #2 in SmallTextEffect.configuration(_:)(a1, a2, v2 + 16, *(unsigned __int8 *)(v2 + 64), (_QWORD *)(v2 + 136), *(double *)(v2 + 72), *(double *)(v2 + 80), *(double *)(v2 + 88), *(double *)(v2 + 96), *(double *)(v2 + 104), *(double *)(v2 + 112), *(double *)(v2 + 120), *(double *)(v2 + 128));
}

uint64_t sub_234A90D08()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 96) >= 3uLL)
    swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

double partial apply for closure #1 in Text.Effect.DrawableFragment.transform(with:transform:)(uint64_t a1, __n128 *a2)
{
  uint64_t v2;
  double result;

  *(_QWORD *)&result = closure #1 in Text.Effect.DrawableFragment.transform(with:transform:)(a1, a2, v2 + 16, (void (*)(uint64_t, __n128 *))*(_QWORD *)(v2 + 104)).n128_u64[0];
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = type metadata accessor for _ContiguousArrayStorage();
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t outlined retain of Text.Effect.PathInterpolator(uint64_t a1)
{
  unint64_t v2;

  v2 = *(_QWORD *)(a1 + 80);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of Text.Effect.PathInterpolator.MapKeys(v2);
  return a1;
}

unint64_t outlined copy of Text.Effect.PathInterpolator.MapKeys(unint64_t result)
{
  if (result >= 3)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t outlined release of Text.Effect.PathInterpolator(uint64_t a1)
{
  unint64_t v2;

  v2 = *(_QWORD *)(a1 + 80);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of Text.Effect.PathInterpolator.MapKeys(v2);
  return a1;
}

unint64_t outlined consume of Text.Effect.PathInterpolator.MapKeys(unint64_t result)
{
  if (result >= 3)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t outlined release of Text.Effect.BaseFragment(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

unint64_t outlined copy of Text.Effect.TransformContext.DrawingMode(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11)
{
  if (result)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    return outlined copy of Text.Effect.PathInterpolator.MapKeys(a11);
  }
  return result;
}

uint64_t _s7SwiftUI4TextVAAE6EffectO11DisplayInfoV13DrawOperationOWOi1_(uint64_t result)
{
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(result + 208);
  v2 = *(_QWORD *)(result + 176) & 0x1FFFFFFFFLL;
  *(_QWORD *)(result + 160) &= 0xFFFFFFFF000000FFLL;
  *(_QWORD *)(result + 176) = v2;
  *(_BYTE *)(result + 208) = v1 & 1 | 0x80;
  return result;
}

uint64_t outlined init with take of Text.Effect.DisplayInfo.DrawOperation(uint64_t a1, uint64_t a2)
{
  __swift_memcpy209_8(a2, a1);
  return a2;
}

unint64_t outlined consume of Text.Effect.TransformContext.DrawingMode(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11)
{
  if (result)
  {
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    return outlined consume of Text.Effect.PathInterpolator.MapKeys(a11);
  }
  return result;
}

uint64_t outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void type metadata accessor for Text.Effect.ConcreteLayoutState<SmallTextEffect>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = lazy protocol witness table accessor for type SmallTextEffect and conformance SmallTextEffect();
    v7 = a3(a1, &type metadata for SmallTextEffect, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t outlined init with copy of Text.Effect.DrawableContent<SmallTextEffect>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Text.Effect.ConcreteLayoutState<SmallTextEffect>(0, &lazy cache variable for type metadata for Text.Effect.DrawableContent<SmallTextEffect>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for Text.Effect.DrawableContent);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for SmallTextEffect.LayoutState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_234A91124 + 4 * byte_235281F7D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_234A91158 + 4 * byte_235281F78[v4]))();
}

uint64_t sub_234A91158(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234A91160(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234A91168);
  return result;
}

uint64_t sub_234A91174(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234A9117CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_234A91180(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234A91188(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SmallTextEffect.LayoutState()
{
  return &type metadata for SmallTextEffect.LayoutState;
}

uint64_t GestureGraph.eventBindingManager.getter()
{
  return swift_retain();
}

uint64_t GestureGraph.description.getter()
{
  uint64_t v0;
  _QWORD *Strong;
  uint64_t v2;
  void *v3;
  void *v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  _QWORD v9[2];

  Strong = (_QWORD *)swift_weakLoadStrong();
  if (Strong)
  {
    v9[0] = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(v0 + 184) + 8) + 32))(*Strong);
    type metadata accessor for Any.Type();
    v2 = String.init<A>(describing:)();
    v4 = v3;
    swift_release();
  }
  else
  {
    v4 = (void *)0xE300000000000000;
    v2 = 7104878;
  }
  strcpy((char *)v9, "GestureGraph<");
  v5._countAndFlagsBits = v2;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 8254;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  _print_unlocked<A, B>(_:_:)();
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9[0];
}

unint64_t type metadata accessor for Any.Type()
{
  unint64_t result;

  result = lazy cache variable for type metadata for Any.Type;
  if (!lazy cache variable for type metadata for Any.Type)
  {
    result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Any.Type);
  }
  return result;
}

Swift::Void __swiftcall GestureGraph.instantiateOutputs()()
{
  int32x2_t *v0;
  int32x2_t *v1;
  _QWORD *Strong;
  _QWORD *v3;
  int32x2_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int32 v10;
  __int32 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  void (*v20)(_QWORD *__return_ptr, _OWORD *);
  uint64_t v21;
  int v22;
  __int32 v23;
  uint64_t v24;
  unint64_t v25;
  __int32 v26;
  unint64_t v27;
  __int32 v28;
  unint64_t v29;
  __int32 v30;
  unint64_t v31;
  __int32 v32;
  unint64_t v33;
  __int32 v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD v37[6];
  _OWORD v38[2];
  _QWORD v39[2];
  int v40;
  __int128 v41;
  _BYTE v42[64];
  __int128 v43;
  _OWORD v44[2];
  __int128 v45;
  _BYTE v46[64];
  __int128 v47;
  _BYTE v48[28];

  v1 = v0;
  Strong = (_QWORD *)swift_weakLoadStrong();
  if (Strong)
  {
    v3 = Strong;
    v4 = v0[23];
    v5 = *Strong;
    (*(void (**)(__int128 *__return_ptr, _QWORD, int32x2_t))(*(_QWORD *)&v4 + 16))(&v41, *Strong, v4);
    v6 = v41;
    v7 = *(_QWORD *)v42;
    v8 = v43;
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)&v4 + 8) + 8))(v5);
    LODWORD(v5) = v0[27].i32[1];
    swift_beginAccess();
    v10 = v0[5].i32[1];
    v11 = v0[32].i32[1];
    *(_QWORD *)&v45 = v6;
    *(_QWORD *)v46 = v7;
    *(_OWORD *)&v46[8] = *(_OWORD *)&v42[8];
    *(_OWORD *)&v46[24] = *(_OWORD *)&v42[24];
    *(_OWORD *)&v46[40] = *(_OWORD *)&v42[40];
    *(_QWORD *)&v46[56] = *(_QWORD *)&v42[56];
    LODWORD(v47) = v8;
    DWORD2(v45) = v10;
    *(int32x2_t *)&v48[16] = vrev64_s32(v0[28]);
    *((_QWORD *)&v47 + 1) = v9;
    *(_QWORD *)v48 = MEMORY[0x24BEE4AF8];
    *(_DWORD *)&v48[8] = v11;
    *(_DWORD *)&v48[12] = v5;
    *(_DWORD *)&v48[24] = 20;
    if (one-time initialization token for _eventDebugTriggers != -1)
      swift_once();
    swift_beginAccess();
    if ((_eventDebugTriggers.rawValue & 0x20) != 0)
      *(_DWORD *)&v48[24] = 28;
    type metadata accessor for _AnyPreferenceKey<GestureLabelKey>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<GestureLabelKey>, (uint64_t)&type metadata for GestureLabelKey, (uint64_t)&protocol witness table for GestureLabelKey);
    v36 = v12;
    PreferenceKeys.add(_:)(v12, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>);
    type metadata accessor for _AnyPreferenceKey<GestureLabelKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<IsCancellableGestureKey>, (uint64_t)&type metadata for IsCancellableGestureKey, (uint64_t)&protocol witness table for IsCancellableGestureKey);
    v35 = v13;
    PreferenceKeys.add(_:)(v13, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>);
    type metadata accessor for _AnyPreferenceKey<GestureLabelKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<RequiredTapCountKey>, (uint64_t)&type metadata for RequiredTapCountKey, (uint64_t)&protocol witness table for RequiredTapCountKey);
    v15 = v14;
    PreferenceKeys.add(_:)(v14, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>);
    type metadata accessor for _AnyPreferenceKey<GestureLabelKey>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<GestureDependency.Key>, (uint64_t)&type metadata for GestureDependency.Key, (uint64_t)&protocol witness table for GestureDependency.Key);
    v17 = v16;
    PreferenceKeys.add(_:)(v16, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>);
    v18 = *(id *)&v0[4];
    AGGraphClearUpdate();
    v19 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    *(_OWORD *)&v42[48] = *(_OWORD *)&v46[48];
    v43 = v47;
    v44[0] = *(_OWORD *)v48;
    *(_OWORD *)((char *)v44 + 12) = *(_OWORD *)&v48[12];
    v41 = v45;
    *(_OWORD *)v42 = *(_OWORD *)v46;
    *(_OWORD *)&v42[16] = *(_OWORD *)&v46[16];
    *(_OWORD *)&v42[32] = *(_OWORD *)&v46[32];
    v37[4] = *(_OWORD *)&v46[48];
    v37[5] = v47;
    v38[0] = *(_OWORD *)v48;
    *(_OWORD *)((char *)v38 + 12) = *(_OWORD *)&v48[12];
    v37[0] = v45;
    v37[1] = *(_OWORD *)v46;
    v37[2] = *(_OWORD *)&v46[16];
    v37[3] = *(_OWORD *)&v46[32];
    v20 = *(void (**)(_QWORD *__return_ptr, _OWORD *))(*v3 + 112);
    outlined retain of _GestureInputs((uint64_t)&v41);
    v20(v39, v37);
    outlined release of _GestureInputs((uint64_t)&v41);
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
    v21 = v39[1];
    v22 = v40;
    v23 = *MEMORY[0x24BE096C0];
    v0[29] = (int32x2_t)v39[0];
    type metadata accessor for _AnyPreferenceKey<GestureLabelKey>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<GestureCategory.Key>, (uint64_t)&type metadata for GestureCategory.Key, (uint64_t)&protocol witness table for GestureCategory.Key);
    *(_QWORD *)&v37[0] = v21;
    DWORD2(v37[0]) = v22;
    v25 = PreferencesOutputs.subscript.getter(v24);
    if ((v25 & 0x100000000) != 0)
      v26 = v23;
    else
      v26 = v25;
    v0[30].i32[0] = v26;
    *(_QWORD *)&v37[0] = v21;
    DWORD2(v37[0]) = v22;
    v27 = PreferencesOutputs.subscript.getter(v36);
    if ((v27 & 0x100000000) != 0)
      v28 = v23;
    else
      v28 = v27;
    v0[30].i32[1] = v28;
    *(_QWORD *)&v37[0] = v21;
    DWORD2(v37[0]) = v22;
    v29 = PreferencesOutputs.subscript.getter(v35);
    if ((v29 & 0x100000000) != 0)
      v30 = v23;
    else
      v30 = v29;
    v0[31].i32[0] = v30;
    *(_QWORD *)&v37[0] = v21;
    DWORD2(v37[0]) = v22;
    v31 = PreferencesOutputs.subscript.getter(v15);
    if ((v31 & 0x100000000) != 0)
      v32 = v23;
    else
      v32 = v31;
    v0[31].i32[1] = v32;
    *(_QWORD *)&v37[0] = v21;
    DWORD2(v37[0]) = v22;
    v33 = PreferencesOutputs.subscript.getter(v17);
    swift_bridgeObjectRelease();
    if ((v33 & 0x100000000) != 0)
      v34 = v23;
    else
      v34 = v33;
    v1[32].i32[0] = v34;
    swift_release();
    outlined release of _GestureInputs((uint64_t)&v41);
  }
}

Swift::Void __swiftcall GestureGraph.uninstantiateOutputs()()
{
  uint64_t v0;
  uint64_t Strong;

  *(_DWORD *)(v0 + 232) = *MEMORY[0x24BE096C0];
  type metadata accessor for [EventID : EventType]();
  AGGraphSetValue();
  AGGraphSetValue();
  AGGraphSetValue();
  AGGraphSetValue();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)Strong + 120))(Strong);
    swift_release();
  }
}

uint64_t GestureGraph.responderNode.getter()
{
  return swift_weakLoadStrong();
}

Swift::Void __swiftcall GestureGraph.timeDidChange()()
{
  uint64_t v0;

  if (one-time initialization token for infinity != -1)
    swift_once();
  *(_QWORD *)(v0 + 264) = static Time.infinity;
}

uint64_t GestureGraph.focusedResponder.getter()
{
  uint64_t Strong;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  Strong = swift_weakLoadStrong();
  if (!Strong)
    return 0;
  v1 = Strong;
  v2 = Strong + 16;
  swift_beginAccess();
  v3 = MEMORY[0x23B7C9E44](v2);
  v4 = *(_QWORD *)(v1 + 24);
  swift_release();
  if (!v3)
    return 0;
  ObjectType = swift_getObjectType();
  v6 = type metadata accessor for AnyPreferenceKey(0, (unint64_t *)&lazy cache variable for type metadata for EventGraphHost);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 16))(v11, v6, v6, ObjectType, v4);
  swift_unknownObjectRelease();
  if (!v11[0])
    return 0;
  v7 = v11[1];
  v8 = swift_getObjectType();
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 24))(v8, v7);
  swift_unknownObjectRelease();
  return v9;
}

double GestureGraph.nextGestureUpdateTime.getter@<D0>(double *a1@<X8>)
{
  uint64_t v1;
  double result;

  result = *(double *)(v1 + 264);
  *a1 = result;
  return result;
}

Swift::Void __swiftcall GestureGraph.setInheritedPhase(_:)(SwiftUI::_GestureInputs::InheritedPhase a1)
{
  AGGraphSetValue();
}

uint64_t *GestureGraph.sendEvents(_:rootNode:at:)@<X0>(uint64_t a1@<X0>, double *a2@<X2>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  double v7;
  uint64_t *result;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *Value;
  uint64_t v21;
  char v22;
  char v23;
  _BYTE *v24;
  uint64_t v25;
  int v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(void);
  uint64_t v32;

  v4 = (_QWORD *)v3;
  v7 = *a2;
  result = (uint64_t *)swift_weakLoadStrong();
  if (!result)
    goto LABEL_20;
  v9 = *(_QWORD *)(*(_QWORD *)(v3 + 184) + 8);
  v31 = *(uint64_t (**)(void))(v9 + 40);
  v32 = *result;
  if ((v31() & 1) == 0)
  {
    result = (uint64_t *)swift_release();
LABEL_20:
    v22 = 0;
    v23 = 3;
    goto LABEL_21;
  }
  v30 = a1;
  v24 = a3;
  GraphHost.instantiateIfNeeded()();
  *(_BYTE *)(v3 + 152) = 1;
  swift_beginAccess();
  AGGraphGetValue();
  AGGraphSetValue();
  if (*(double *)AGGraphGetValue() != v7)
  {
    AGGraphSetValue();
    AGGraphGetValue();
    AGGraphSetValue();
    if (one-time initialization token for infinity != -1)
LABEL_23:
      swift_once();
    v4[33] = static Time.infinity;
  }
  type metadata accessor for [EventID : EventType]();
  AGGraphSetValue();
  v10 = (void *)v4[3];
  v11 = v4 + 20;
  swift_bridgeObjectRetain();
  v12 = v10;
  swift_beginAccess();
  v13 = 0;
  v28 = 0;
  v26 = *MEMORY[0x24BE096C0];
  v29 = (uint64_t)v4;
  v14 = v4[20];
  v27 = 3;
  v25 = MEMORY[0x24BEE4AE0] + 8;
  do
  {
    *v11 = MEMORY[0x24BEE4AF8];
    v4 = *(_QWORD **)(v14 + 16);
    if (v4)
    {
      v15 = v14 + 40;
      do
      {
        v16 = *(void (**)(uint64_t))(v15 - 8);
        v17 = swift_retain();
        v16(v17);
        swift_release();
        v15 += 16;
        v4 = (_QWORD *)((char *)v4 - 1);
      }
      while (v4);
    }
    swift_bridgeObjectRelease();
    AGSubgraphUpdate();
    v18 = *(_QWORD *)(*v11 + 16);
    if ((((uint64_t (*)(uint64_t, uint64_t))v31)(v32, v9) & 1) != 0)
    {
      if (v18)
      {
        if (*(_QWORD *)(v30 + 16))
        {
          v19 = MEMORY[0x24BEE4B00];
          AGGraphSetValue();
          swift_bridgeObjectRelease();
          v30 = v19;
        }
      }
      else
      {
        if (*(_DWORD *)(v29 + 232) == v26)
        {
          __break(1u);
          goto LABEL_23;
        }
        type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, v25, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
        Value = (char *)AGGraphGetValue();
        v27 = Value[1];
        v28 = *Value;
      }
    }
    if (++v13 == 8)
      break;
    v14 = *v11;
  }
  while (*(_QWORD *)(*v11 + 16));
  *(_BYTE *)(v29 + 152) = 0;

  v21 = swift_retain();
  specialized printGestures(data:host:)(v21, v29);
  swift_bridgeObjectRelease();
  swift_release();
  result = (uint64_t *)swift_release();
  a3 = v24;
  v23 = v27;
  v22 = v28;
LABEL_21:
  *a3 = v22;
  a3[1] = v23;
  return result;
}

Swift::Void __swiftcall GestureGraph.resetEvents()()
{
  GraphHost.uninstantiate(immediately:)(0);
}

uint64_t GestureGraph.enqueueAction(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;
  uint64_t ObjectType;

  result = MEMORY[0x23B7C9E44](v2 + 192);
  if (result)
  {
    v6 = *(_QWORD *)(v2 + 200);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 8))(a1, a2, ObjectType, v6);
    return swift_unknownObjectRelease();
  }
  return result;
}

SwiftUI::GestureCategory_optional __swiftcall GestureGraph.gestureCategory()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  Swift::Int v6;
  Swift::Bool v7;
  SwiftUI::GestureCategory_optional result;

  v2 = v0;
  specialized static Update.begin()();
  GraphHost.instantiateIfNeeded()();
  v3 = *(_DWORD *)(v1 + 240);
  v4 = *MEMORY[0x24BE096C0];
  if (v3 == *MEMORY[0x24BE096C0])
    v5 = 0;
  else
    v5 = *(_QWORD *)AGGraphGetValue();
  *(_QWORD *)v2 = v5;
  *(_BYTE *)(v2 + 8) = v3 == v4;
  v6 = static Update.end()();
  result.value.rawValue = v6;
  result.is_nil = v7;
  return result;
}

void GestureGraph.__allocating_init(data:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void GestureGraph.init(data:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t GestureGraph.__ivar_destroyer()
{
  uint64_t v0;

  outlined destroy of weak AnyGestureResponder?(v0 + 176);
  outlined destroy of weak GestureGraphDelegate?(v0 + 192);
  return swift_release();
}

uint64_t GestureGraph.deinit()
{
  _QWORD *v0;
  int64_t v1;
  uint64_t result;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  GraphHost.invalidate()();
  if (one-time initialization token for blockedGraphHosts != -1)
    swift_once();
  swift_beginAccess();
  swift_retain();
  v1 = specialized MutableCollection._halfStablePartition(isSuffixElement:)((uint64_t)&blockedGraphHosts, (uint64_t)v0);
  result = swift_release();
  v3 = *((_QWORD *)blockedGraphHosts._rawValue + 2);
  if (v3 < v1)
  {
    __break(1u);
  }
  else
  {
    specialized Array.replaceSubrange<A>(_:with:)(v1, v3);
    swift_endAccess();
    v4 = (void *)v0[2];
    v5 = (void *)v0[3];
    v6 = (void *)v0[4];
    swift_bridgeObjectRelease();
    swift_release();

    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of weak AnyGestureResponder?((uint64_t)(v0 + 22));
    outlined destroy of weak GestureGraphDelegate?((uint64_t)(v0 + 24));
    swift_release();
    return (uint64_t)v0;
  }
  return result;
}

uint64_t GestureGraph.__deallocating_deinit()
{
  _QWORD *v0;
  int64_t v1;
  uint64_t result;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  GraphHost.invalidate()();
  if (one-time initialization token for blockedGraphHosts != -1)
    swift_once();
  swift_beginAccess();
  swift_retain();
  v1 = specialized MutableCollection._halfStablePartition(isSuffixElement:)((uint64_t)&blockedGraphHosts, (uint64_t)v0);
  result = swift_release();
  v3 = *((_QWORD *)blockedGraphHosts._rawValue + 2);
  if (v3 < v1)
  {
    __break(1u);
  }
  else
  {
    specialized Array.replaceSubrange<A>(_:with:)(v1, v3);
    swift_endAccess();
    v4 = (void *)v0[2];
    v5 = (void *)v0[3];
    v6 = (void *)v0[4];
    swift_bridgeObjectRelease();
    swift_release();

    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of weak AnyGestureResponder?((uint64_t)(v0 + 22));
    outlined destroy of weak GestureGraphDelegate?((uint64_t)(v0 + 24));
    swift_release();
    return swift_deallocClassInstance();
  }
  return result;
}

uint64_t protocol witness for EventGraphHost.eventBindingManager.getter in conformance GestureGraph()
{
  return swift_retain();
}

uint64_t protocol witness for EventGraphHost.responderNode.getter in conformance GestureGraph()
{
  return swift_weakLoadStrong();
}

double protocol witness for EventGraphHost.nextGestureUpdateTime.getter in conformance GestureGraph@<D0>(double *a1@<X8>)
{
  uint64_t v1;
  double result;

  result = *(double *)(v1 + 264);
  *a1 = result;
  return result;
}

uint64_t protocol witness for EventGraphHost.setInheritedPhase(_:) in conformance GestureGraph()
{
  return AGGraphSetValue();
}

void protocol witness for EventGraphHost.resetEvents() in conformance GestureGraph()
{
  GraphHost.uninstantiate(immediately:)(0);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GestureGraph()
{
  return GestureGraph.description.getter();
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@out ())(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t outlined retain of _GestureInputs(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 88);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v3 = v2;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of _GestureInputs(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 88);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1;
}

void type metadata accessor for _AnyPreferenceKey<GestureLabelKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = type metadata accessor for _AnyPreferenceKey(0, a3, a4, a4);
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t specialized GestureGraph.init(rootResponder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  int v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  __int128 v26;
  void *v27;
  void *v28;
  char v29;
  char v30;
  int v31;
  int v32;
  unint64_t v33;
  void *v34;
  void *v35;
  char v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a2 + 184) = 0;
  swift_weakInit();
  *(_QWORD *)(a2 + 200) = 0;
  swift_unknownObjectWeakInit();
  type metadata accessor for EventBindingManager();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v6 + 40) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v6 + 48) = MEMORY[0x24BEE4B00];
  v7 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v6 + 56) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_BYTE *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 72) = 0;
  *(_QWORD *)(a2 + 208) = v6;
  v8 = *MEMORY[0x24BE096C0];
  *(int32x4_t *)(a2 + 232) = vdupq_n_s32(*MEMORY[0x24BE096C0]);
  *(_DWORD *)(a2 + 248) = v8;
  *(_DWORD *)(a2 + 252) = v8;
  *(_DWORD *)(a2 + 256) = v8;
  v9 = one-time initialization token for infinity;
  swift_retain();
  if (v9 != -1)
    swift_once();
  *(_QWORD *)(a2 + 264) = static Time.infinity;
  if ((specialized static GestureContainerFeature.isEnabled.getter() & 1) != 0)
  {
    *(_QWORD *)(a2 + 184) = a4;
    swift_weakAssign();
    GraphHost.Data.init()((uint64_t)&v33);
    v10 = v34;
    v27 = (void *)v33;
    v28 = v35;
    v29 = v37;
    v30 = v36;
    v11 = v41;
    v31 = v42;
    v32 = v40;
    v12 = v43;
    v13 = v46;
    v26 = v38;
    v14 = v39;
    v15 = v44;
    v16 = v45;
    AGSubgraphSetCurrent();
    v33 = 0;
    v17 = MEMORY[0x24BE09670];
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for External<Time>, (uint64_t)&type metadata for Time, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE09670]);
    lazy protocol witness table accessor for type External<PreferenceKeys> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type External<Time> and conformance External<A>, &lazy cache variable for type metadata for External<Time>, (uint64_t)&type metadata for Time);
    *(_DWORD *)(a2 + 216) = Attribute.init<A>(body:value:flags:update:)();
    v33 = specialized Dictionary.init(dictionaryLiteral:)(v7);
    type metadata accessor for [EventID : EventType]();
    type metadata accessor for External<[EventID : EventType]>();
    lazy protocol witness table accessor for type External<[EventID : EventType]> and conformance External<A>();
    v18 = Attribute.init<A>(body:value:flags:update:)();
    swift_bridgeObjectRelease();
    *(_DWORD *)(a2 + 220) = v18;
    v33 = 1;
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for External<_GestureInputs.InheritedPhase>, (uint64_t)&type metadata for _GestureInputs.InheritedPhase, (uint64_t (*)(_QWORD, uint64_t))v17);
    lazy protocol witness table accessor for type External<PreferenceKeys> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type External<_GestureInputs.InheritedPhase> and conformance External<A>, &lazy cache variable for type metadata for External<_GestureInputs.InheritedPhase>, (uint64_t)&type metadata for _GestureInputs.InheritedPhase);
    *(_DWORD *)(a2 + 224) = Attribute.init<A>(body:value:flags:update:)();
    LODWORD(v33) = 0;
    v19 = MEMORY[0x24BEE44F0];
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for External<UInt32>, MEMORY[0x24BEE44F0], (uint64_t (*)(_QWORD, uint64_t))v17);
    lazy protocol witness table accessor for type External<PreferenceKeys> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type External<UInt32> and conformance External<A>, (unint64_t *)&lazy cache variable for type metadata for External<UInt32>, v19);
    *(_DWORD *)(a2 + 228) = Attribute.init<A>(body:value:flags:update:)();
    v33 = v7;
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for External<PreferenceKeys>, (uint64_t)&type metadata for PreferenceKeys, (uint64_t (*)(_QWORD, uint64_t))v17);
    lazy protocol witness table accessor for type External<PreferenceKeys> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type External<PreferenceKeys> and conformance External<A>, (unint64_t *)&lazy cache variable for type metadata for External<PreferenceKeys>, (uint64_t)&type metadata for PreferenceKeys);
    *(_DWORD *)(a2 + 260) = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v33 = (unint64_t)v27;
    v34 = v10;
    v35 = v28;
    v36 = v30;
    v37 = v29;
    v38 = v26;
    v39 = v14;
    v40 = v32;
    v41 = v11;
    v42 = v31;
    v43 = v12;
    v44 = v15;
    v45 = v16;
    v46 = v13;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v20 = v27;
    v21 = v10;
    v22 = v28;
    v23 = GraphHost.init(data:)((uint64_t)&v33);
    v24 = *(_QWORD *)(v23 + 208);
    swift_beginAccess();
    *(_QWORD *)(v24 + 24) = &protocol witness table for GestureGraph;
    swift_unknownObjectWeakAssign();
    swift_retain();
    AGSubgraphSetCurrent();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

    swift_release();
    swift_release();
    return v23;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

unint64_t specialized MutableCollection._halfStablePartition(isSuffixElement:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (!v4)
    return 0;
  v7 = 0;
  while (v3[v7 + 4] != a2)
  {
    if (v4 == ++v7)
      return *(_QWORD *)(*(_QWORD *)a1 + 16);
  }
  if (__OFADD__(v7, 1))
  {
LABEL_24:
    __break(1u);
  }
  else
  {
    if (v7 + 1 == v4)
      return v7;
    v2 = v7 + 5;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_10;
  }
  v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
LABEL_10:
  v8 = v3 + 4;
  do
  {
    v10 = v3[2];
    if (v2 - 4 >= v10)
    {
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    v11 = v3[v2];
    if (v11 != a2)
    {
      if (v2 - 4 != v7)
      {
        if (v7 >= v10)
          goto LABEL_23;
        v12 = v8[v7];
        v8[v7] = v11;
        v3[v2] = v12;
      }
      if (__OFADD__(v7++, 1))
        goto LABEL_22;
      v10 = v3[2];
    }
    v9 = v2 - 3;
    ++v2;
  }
  while (v9 != v10);
  *(_QWORD *)a1 = v3;
  return v7;
}

uint64_t outlined destroy of weak AnyGestureResponder?(uint64_t a1)
{
  swift_weakDestroy();
  return a1;
}

uint64_t outlined destroy of weak GestureGraphDelegate?(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

uint64_t specialized static GestureGraph.current.getter()
{
  id v0;
  void *v1;
  id v2;
  uint64_t result;

  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    v0 = (id)AGSubgraphGetCurrent();
    if (!v0)
      goto LABEL_8;
    v1 = v0;
    v2 = (id)AGSubgraphGetGraph();

  }
  else
  {
    v2 = (id)AGGraphGetAttributeGraph();
  }
  if (AGGraphGetContext())
  {
    swift_retain();

    type metadata accessor for GestureGraph();
    return swift_dynamicCastClassUnconditional();
  }
  __break(1u);
LABEL_8:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t dispatch thunk of GestureGraphDelegate.enqueueAction(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t type metadata accessor for GestureGraph()
{
  return objc_opt_self();
}

uint64_t method lookup function for GestureGraph()
{
  return swift_lookUpClassMethod();
}

uint64_t _GraphInputs.scrollPositionBinding(kind:)(char *a1)
{
  uint64_t *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;

  v2 = *a1;
  v3 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  if ((v2 & 1) != 0)
  {
    v4 = specialized find<A>(_:key:)(v3);
    if (v4)
      goto LABEL_3;
LABEL_10:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release_n();
    return *MEMORY[0x24BE096C0];
  }
  v4 = specialized find<A>(_:key:)(v3);
  if (!v4)
    goto LABEL_10;
LABEL_3:
  v5 = *(unsigned __int8 *)(v4 + 76);
  v6 = *(unsigned int *)(v4 + 72) | ((unint64_t)*(unsigned __int8 *)(v4 + 76) << 32);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  if (v5 <= 0xFEuLL && (v6 & 0x100000000) == 0)
    return v6;
  return *MEMORY[0x24BE096C0];
}

Swift::Bool __swiftcall _GraphInputs.hasValueScrollPosition(kind:)(SwiftUI::ScrollStateInputKind kind)
{
  uint64_t *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;

  v2 = *(_BYTE *)kind;
  v3 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  if ((v2 & 1) != 0)
  {
    v4 = specialized find<A>(_:key:)(v3);
    if (!v4)
    {
LABEL_3:
      swift_bridgeObjectRelease();
      swift_release();
      swift_release_n();
      return 0;
    }
  }
  else
  {
    v4 = specialized find<A>(_:key:)(v3);
    if (!v4)
      goto LABEL_3;
  }
  v6 = *(unsigned __int8 *)(v4 + 76);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v6 < 0xFF;
}

uint64_t _GraphInputs.scrollPositionAnchor(kind:)(char *a1)
{
  uint64_t *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;

  v2 = *a1;
  v3 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  if ((v2 & 1) != 0)
  {
    v4 = specialized find<A>(_:key:)(v3);
    if (!v4)
    {
      if (one-time initialization token for defaultValue != -1)
        swift_once();
      v5 = &static _GraphInputs.ContentScrollPositionAnchorKey.defaultValue;
      goto LABEL_11;
    }
LABEL_7:
    v5 = (int *)(v4 + 72);
    goto LABEL_11;
  }
  v4 = specialized find<A>(_:key:)(v3);
  if (v4)
    goto LABEL_7;
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v5 = &static _GraphInputs.ScrollPositionAnchorKey.defaultValue;
LABEL_11:
  v6 = *v5;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v6;
}

uint64_t ScrollPositionBindingModifier.binding.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Binding<ScrollPosition>(v1, a1, &lazy cache variable for type metadata for Binding<ScrollPosition>, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for Binding);
}

uint64_t ScrollPositionBindingModifier.binding.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of Binding<ScrollPosition>(a1, v1, &lazy cache variable for type metadata for Binding<ScrollPosition>, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for Binding);
}

uint64_t (*ScrollPositionBindingModifier.binding.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrollPositionBindingModifier.anchor.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 96);
}

uint64_t ScrollPositionBindingModifier.anchor.setter(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 96) = result;
  *(_QWORD *)(v3 + 104) = a2;
  *(_BYTE *)(v3 + 112) = a3 & 1;
  return result;
}

uint64_t (*ScrollPositionBindingModifier.anchor.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

__n128 ScrollPositionBindingModifier.init(binding:anchor:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;

  v5 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a5 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a5 + 48) = v5;
  v6 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a5 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a5 + 80) = v6;
  result = *(__n128 *)a1;
  v8 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a5 = *(_OWORD *)a1;
  *(_OWORD *)(a5 + 16) = v8;
  *(_QWORD *)(a5 + 96) = a2;
  *(_QWORD *)(a5 + 104) = a3;
  *(_BYTE *)(a5 + 112) = a4 & 1;
  return result;
}

Swift::Void __swiftcall _GraphInputs.resetScrollPosition(kind:)(SwiftUI::ScrollStateInputKind kind)
{
  uint64_t *v1;
  char v2;
  int v3;
  int v4;
  _BYTE v5[8];
  _BYTE v6[8];
  _BYTE v7[8];
  _BYTE v8[16];

  v2 = *(_BYTE *)kind;
  swift_retain();
  if ((v2 & 1) != 0)
  {
    specialized closure #1 in PropertyList.subscript.setter(v1, 0xFF00000000uLL, (uint64_t)v8);
    swift_release();
    v3 = *MEMORY[0x24BE096C0];
    swift_retain();
    specialized closure #1 in PropertyList.subscript.setter(v1, v3, (uint64_t)v7);
  }
  else
  {
    specialized closure #1 in PropertyList.subscript.setter(v1, 0xFF00000000uLL, (uint64_t)v6);
    swift_release();
    v4 = *MEMORY[0x24BE096C0];
    swift_retain();
    specialized closure #1 in PropertyList.subscript.setter(v1, v4, (uint64_t)v5);
  }
  swift_release();
}

uint64_t _GraphInputs.setScrollPositionAnchor(_:kind:)(int a1, char *a2)
{
  uint64_t *v2;
  char v4;
  _BYTE v6[8];
  _BYTE v7[16];

  v4 = *a2;
  swift_retain();
  if ((v4 & 1) != 0)
    specialized closure #1 in PropertyList.subscript.setter(v2, a1, (uint64_t)v7);
  else
    specialized closure #1 in PropertyList.subscript.setter(v2, a1, (uint64_t)v6);
  return swift_release();
}

uint64_t _GraphInputs.setScrollPosition(storage:kind:)(unsigned int *a1, char *a2)
{
  uint64_t *v2;
  unint64_t v3;
  char v4;
  _BYTE v6[8];
  _BYTE v7[16];

  v3 = *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32);
  v4 = *a2;
  swift_retain();
  if ((v4 & 1) != 0)
    specialized closure #1 in PropertyList.subscript.setter(v2, v3, (uint64_t)v7);
  else
    specialized closure #1 in PropertyList.subscript.setter(v2, v3, (uint64_t)v6);
  return swift_release();
}

uint64_t ScrollPositionBindingModifier.AdjustedAnchor.value.getter()
{
  unsigned int v0;
  __int128 *Value;

  if (one-time initialization token for v6 != -1)
    swift_once();
  v0 = static Semantics.v6;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FAB4 == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) != 0)
      goto LABEL_13;
  }
  else if (static Semantics.forced >= v0)
  {
LABEL_13:
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for UnitPoint?, (uint64_t)&type metadata for UnitPoint, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    Value = (__int128 *)AGGraphGetValue();
    return *(_QWORD *)Value;
  }
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for UnitPoint?, (uint64_t)&type metadata for UnitPoint, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  if (*(_BYTE *)(AGGraphGetValue() + 16) != 1)
    goto LABEL_13;
  if (one-time initialization token for topLeading != -1)
    swift_once();
  Value = &static UnitPoint.topLeading;
  return *(_QWORD *)Value;
}

void protocol witness for static Rule.initialValue.getter in conformance ScrollPositionBindingModifier.AdjustedAnchor(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 256;
}

uint64_t protocol witness for Rule.value.getter in conformance ScrollPositionBindingModifier.AdjustedAnchor@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  result = ScrollPositionBindingModifier.AdjustedAnchor.value.getter();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4 & 1;
  return result;
}

Swift::Void __swiftcall ScrollPositionBindingModifier.MakeRequest.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t Value;
  uint64_t v4;
  char v5;
  uint64_t (*v6)(void);
  char v7;
  BOOL v8;
  uint64_t (*v9)(void);
  uint64_t (*v10)(void);
  uint64_t OutputValue;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 *v27;
  _OWORD v28[4];
  __int128 v29;
  _QWORD v30[9];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[96];
  _BYTE v46[80];
  _QWORD v47[12];

  v1 = v0;
  v47[10] = *MEMORY[0x24BDAC8D0];
  AGGraphClearUpdate();
  outlined init with copy of ScrollPositionBindingModifier.MakeRequest(v0, (uint64_t)&v31);
  v2 = *(_QWORD *)AGGraphGetValue();
  swift_retain();
  outlined destroy of ScrollPositionBindingModifier.MakeRequest((uint64_t)&v31);
  AGGraphSetUpdate();
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Binding<ScrollPosition>, (uint64_t)&type metadata for ScrollPosition, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for Binding);
  Value = AGGraphGetValue();
  outlined init with copy of Binding<ScrollPosition>(Value, (uint64_t)&v31, &lazy cache variable for type metadata for Binding<ScrollPosition>, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for Binding);
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock) && static Update.dispatchDepth < static Update.depth)
  {
    (*(void (**)(uint64_t))(**((_QWORD **)&v31 + 1) + 104))(1);
    outlined init with copy of ScrollPosition((uint64_t)&v32, (uint64_t)v47);
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr))(**((_QWORD **)&v31 + 1) + 120))(v47);
  }
  outlined destroy of Binding<ScrollPosition>((uint64_t)&v31, &lazy cache variable for type metadata for Binding<ScrollPosition>, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for Binding);
  v4 = swift_retain();
  v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
  swift_release();
  outlined init with copy of ScrollPosition((uint64_t)v47, (uint64_t)v45);
  v6 = MEMORY[0x24BEE1C68];
  outlined init with copy of Binding<ScrollPosition>(v1 + 16, (uint64_t)v46, (unint64_t *)&lazy cache variable for type metadata for ScrollPosition?, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  outlined init with copy of Binding<ScrollPosition>((uint64_t)v45, (uint64_t)&v31, (unint64_t *)&lazy cache variable for type metadata for ScrollPosition?, (uint64_t (*)(_QWORD, uint64_t))v6);
  outlined init with copy of Binding<ScrollPosition>((uint64_t)v46, (uint64_t)&v36, (unint64_t *)&lazy cache variable for type metadata for ScrollPosition?, (uint64_t (*)(_QWORD, uint64_t))v6);
  if (!(_QWORD)v35)
  {
    v9 = MEMORY[0x24BEE1C68];
    outlined destroy of Binding<ScrollPosition>((uint64_t)v46, (unint64_t *)&lazy cache variable for type metadata for ScrollPosition?, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    outlined destroy of Binding<ScrollPosition>((uint64_t)v45, (unint64_t *)&lazy cache variable for type metadata for ScrollPosition?, (uint64_t (*)(_QWORD, uint64_t))v9);
    if (!(_QWORD)v40)
    {
      outlined destroy of Binding<ScrollPosition>((uint64_t)&v31, (unint64_t *)&lazy cache variable for type metadata for ScrollPosition?, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
      v8 = 1;
      goto LABEL_17;
    }
LABEL_14:
    outlined destroy of TypesettingConfiguration((uint64_t)&v31, (uint64_t (*)(_QWORD))type metadata accessor for (ScrollPosition?, ScrollPosition?));
    v8 = 0;
    goto LABEL_17;
  }
  outlined init with copy of Binding<ScrollPosition>((uint64_t)&v31, (uint64_t)v30, (unint64_t *)&lazy cache variable for type metadata for ScrollPosition?, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  if (!(_QWORD)v40)
  {
    v10 = MEMORY[0x24BEE1C68];
    outlined destroy of Binding<ScrollPosition>((uint64_t)v46, (unint64_t *)&lazy cache variable for type metadata for ScrollPosition?, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    outlined destroy of Binding<ScrollPosition>((uint64_t)v45, (unint64_t *)&lazy cache variable for type metadata for ScrollPosition?, (uint64_t (*)(_QWORD, uint64_t))v10);
    outlined destroy of ScrollPosition((uint64_t)v30);
    goto LABEL_14;
  }
  v28[2] = v38;
  v28[3] = v39;
  v29 = v40;
  v28[0] = v36;
  v28[1] = v37;
  specialized static ScrollPosition.Storage.== infix(_:_:)((uint64_t)v30, (uint64_t)v28);
  v8 = (v7 & 1) != 0 && project #1 <A, B>(lhs:rhs:) in static ScrollPosition.== infix(_:_:)(v30[8], v29);
  outlined destroy of ScrollPosition((uint64_t)v28);
  outlined destroy of Binding<ScrollPosition>((uint64_t)v46, (unint64_t *)&lazy cache variable for type metadata for ScrollPosition?, (uint64_t (*)(_QWORD, uint64_t))v6);
  outlined destroy of Binding<ScrollPosition>((uint64_t)v45, (unint64_t *)&lazy cache variable for type metadata for ScrollPosition?, (uint64_t (*)(_QWORD, uint64_t))v6);
  outlined destroy of ScrollPosition((uint64_t)v30);
  outlined destroy of Binding<ScrollPosition>((uint64_t)&v31, (unint64_t *)&lazy cache variable for type metadata for ScrollPosition?, (uint64_t (*)(_QWORD, uint64_t))v6);
LABEL_17:
  type metadata accessor for ScrollStateRequest?();
  OutputValue = AGGraphGetOutputValue();
  if (!((OutputValue == 0) | v5 & 1) && !v8)
  {
    v12 = AGGraphGetValue();
    outlined init with copy of Binding<ScrollPosition>(v12, (uint64_t)v45, &lazy cache variable for type metadata for Binding<ScrollPosition>, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for Binding);
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for UnitPoint?, (uint64_t)&type metadata for UnitPoint, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v13 = AGGraphGetValue();
    v14 = v2;
    v15 = *(_QWORD *)v13;
    v16 = *(_QWORD *)(v13 + 8);
    v17 = *(_BYTE *)(v13 + 16);
    v18 = *(_QWORD *)(AGGraphGetValue() + 8);
    outlined init with copy of ScrollPosition((uint64_t)v47, (uint64_t)v46);
    v30[3] = &type metadata for ScrollToScrollStateRequest;
    v30[4] = &protocol witness table for ScrollToScrollStateRequest;
    v19 = (_OWORD *)swift_allocObject();
    v30[0] = v19;
    *((_QWORD *)&v44 + 1) = 0;
    outlined init with copy of Binding<ScrollPosition>((uint64_t)v45, (uint64_t)&v31, &lazy cache variable for type metadata for Binding<ScrollPosition>, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for Binding);
    *(_QWORD *)&v37 = v15;
    *((_QWORD *)&v37 + 1) = v16;
    LOBYTE(v38) = v17;
    *((_QWORD *)&v38 + 1) = v18;
    outlined init with copy of ScrollPosition((uint64_t)v46, (uint64_t)&v39);
    *(_QWORD *)&v44 = v14;
    swift_retain();
    outlined destroy of ScrollPosition((uint64_t)v46);
    outlined destroy of Binding<ScrollPosition>((uint64_t)v45, &lazy cache variable for type metadata for Binding<ScrollPosition>, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for Binding);
    *((_QWORD *)&v44 + 1) = 0;
    v20 = v42;
    v19[11] = v41;
    v19[12] = v20;
    v21 = v38;
    v19[7] = v37;
    v19[8] = v21;
    v22 = v40;
    v19[9] = v39;
    v19[10] = v22;
    v23 = v34;
    v19[3] = v33;
    v19[4] = v23;
    v24 = v36;
    v19[5] = v35;
    v19[6] = v24;
    v25 = v32;
    v19[1] = v31;
    v19[2] = v25;
    v26 = v44;
    v19[13] = v43;
    v19[14] = v26;
    AGGraphSetOutputValue();
    v27 = (__int128 *)v30;
LABEL_22:
    outlined destroy of TypesettingConfiguration((uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for ScrollStateRequest?);
    goto LABEL_23;
  }
  if ((OutputValue == 0 || v8) | v5 & 1)
  {
    *(_QWORD *)&v33 = 0;
    v31 = 0u;
    v32 = 0u;
    AGGraphSetOutputValue();
    v27 = &v31;
    goto LABEL_22;
  }
LABEL_23:
  $defer #1 () in ScrollPositionBindingModifier.MakeRequest.updateValue()(v1);
  swift_release();
  outlined destroy of ScrollPosition((uint64_t)v47);
}

uint64_t $defer #1 () in ScrollPositionBindingModifier.MakeRequest.updateValue()(uint64_t a1)
{
  uint64_t Value;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD v7[24];
  _QWORD v8[10];

  outlined init with copy of ScrollPositionBindingModifier.MakeRequest(a1, (uint64_t)v7);
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Binding<ScrollPosition>, (uint64_t)&type metadata for ScrollPosition, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for Binding);
  Value = AGGraphGetValue();
  outlined init with copy of Binding<ScrollPosition>(Value, (uint64_t)&v4, &lazy cache variable for type metadata for Binding<ScrollPosition>, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for Binding);
  outlined destroy of ScrollPositionBindingModifier.MakeRequest((uint64_t)v7);
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock) && static Update.dispatchDepth < static Update.depth)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 104))(1);
    outlined init with copy of ScrollPosition((uint64_t)&v6, (uint64_t)v8);
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v5 + 120))(v8);
  }
  outlined destroy of Binding<ScrollPosition>((uint64_t)&v4, &lazy cache variable for type metadata for Binding<ScrollPosition>, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for Binding);
  return outlined assign with take of Binding<ScrollPosition>((uint64_t)v8, a1 + 16, (unint64_t *)&lazy cache variable for type metadata for ScrollPosition?, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
}

double protocol witness for static StatefulRule.initialValue.getter in conformance ScrollPositionBindingModifier.MakeRequest@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)&result = 1;
  *(_OWORD *)(a1 + 24) = xmmword_235260EF0;
  return result;
}

uint64_t ScrollValueModifier.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ScrollPosition(v1, a1);
}

_OWORD *ScrollValueModifier.value.setter(_OWORD *a1)
{
  _OWORD *v1;

  return outlined assign with take of ScrollPosition(a1, v1);
}

uint64_t (*ScrollValueModifier.value.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

__n128 ScrollValueModifier.init(value:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v2;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  result = *(__n128 *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

BOOL static ScrollStateInputKind.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void ScrollStateInputKind.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int ScrollStateInputKind.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t _GraphInputs.scrollPositionValue()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;

  v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    v3 = *(unsigned __int8 *)(v2 + 76);
    v4 = *(unsigned int *)(v2 + 72) | ((unint64_t)*(unsigned __int8 *)(v2 + 76) << 32);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release_n();
    if (v3 <= 0xFEuLL && (v4 & 0x100000000) != 0)
      return v4;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release_n();
  }
  return *MEMORY[0x24BE096C0];
}

Swift::Void __swiftcall _GraphInputs.convertScrollStateInputsToContent()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  _BYTE v8[8];
  _BYTE v9[16];

  v1 = swift_retain();
  v2 = specialized find<A>(_:key:)(v1);
  if (v2)
    v3 = *(unsigned int *)(v2 + 72) | ((unint64_t)*(unsigned __int8 *)(v2 + 76) << 32);
  else
    v3 = 0xFF00000000;
  swift_release();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v0, v3, (uint64_t)v9);
  swift_release();
  v4 = swift_retain();
  v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    v6 = (int *)(v5 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    v6 = &static _GraphInputs.ScrollPositionAnchorKey.defaultValue;
  }
  v7 = *v6;
  swift_release();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v0, v7, (uint64_t)v8);
  swift_release();
}

void protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.ScrollPositionKey(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 4) = -1;
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.ScrollPositionAnchorKey@<X0>(_DWORD *a1@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.ScrollPositionAnchorKey(&one-time initialization token for defaultValue, &static _GraphInputs.ScrollPositionAnchorKey.defaultValue, a1);
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.ContentScrollPositionAnchorKey@<X0>(_DWORD *a1@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.ScrollPositionAnchorKey(&one-time initialization token for defaultValue, &static _GraphInputs.ContentScrollPositionAnchorKey.defaultValue, a1);
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.ScrollPositionAnchorKey@<X0>(_QWORD *a1@<X2>, _DWORD *a2@<X3>, _DWORD *a3@<X8>)
{
  uint64_t result;

  if (*a1 != -1)
    result = swift_once();
  *a3 = *a2;
  return result;
}

uint64_t specialized static ScrollValueModifier._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t *a2)
{
  unsigned int OffsetAttribute2;
  int v4;
  uint64_t v6;
  _BYTE v7[8];
  _BYTE v8[16];

  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, 0xFF00000000uLL, (uint64_t)v8);
  swift_release();
  v4 = *MEMORY[0x24BE096C0];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v4, (uint64_t)v7);
  swift_release();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, OffsetAttribute2 | 0x100000000, (uint64_t)&v6);
  return swift_release();
}

uint64_t specialized static ScrollPositionBindingModifier._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2)
{
  unsigned int OffsetAttribute2;
  int v4;
  int v5;
  int v6;
  int v7;
  _BYTE v9[8];
  _BYTE v10[8];
  _BYTE v11[8];
  _BYTE v12[8];
  _BYTE v13[16];
  _BYTE v14[96];
  _DWORD v15[4];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v15[0] = AGGraphCreateOffsetAttribute2();
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for UnitPoint?, (uint64_t)&type metadata for UnitPoint, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  lazy protocol witness table accessor for type ScrollPositionBindingModifier.AdjustedAnchor and conformance ScrollPositionBindingModifier.AdjustedAnchor();
  v4 = Attribute.init<A>(body:value:flags:update:)();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)a2, 0xFF00000000uLL, (uint64_t)v13);
  swift_release();
  v5 = *MEMORY[0x24BE096C0];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)a2, v5, (uint64_t)v12);
  swift_release();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)a2, v4, (uint64_t)v11);
  swift_release();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)a2, OffsetAttribute2, (uint64_t)v10);
  swift_release();
  v6 = *(_DWORD *)(a2 + 28);
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v15[0] = OffsetAttribute2;
  v15[1] = v4;
  v15[2] = v6;
  outlined init with copy of ScrollPositionBindingModifier.MakeRequest((uint64_t)v15, (uint64_t)v14);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for ScrollStateRequest?();
  lazy protocol witness table accessor for type ScrollPositionBindingModifier.MakeRequest and conformance ScrollPositionBindingModifier.MakeRequest();
  v7 = Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of ScrollPositionBindingModifier.MakeRequest((uint64_t)v14);
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)a2, v7, (uint64_t)v9);
  swift_release();
  return outlined destroy of ScrollPositionBindingModifier.MakeRequest((uint64_t)v15);
}

unint64_t lazy protocol witness table accessor for type ScrollStateInputKind and conformance ScrollStateInputKind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollStateInputKind and conformance ScrollStateInputKind;
  if (!lazy protocol witness table cache variable for type ScrollStateInputKind and conformance ScrollStateInputKind)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ScrollStateInputKind, &type metadata for ScrollStateInputKind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollStateInputKind and conformance ScrollStateInputKind);
  }
  return result;
}

uint64_t __swift_memcpy5_4(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_BYTE *)(result + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ScrollPositionStorage(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 5))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 4);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollPositionStorage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 5) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 5) = 0;
    if (a2)
      *(_BYTE *)(result + 4) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for ScrollPositionStorage(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 4);
}

uint64_t destructiveInjectEnumTag for ScrollPositionStorage(uint64_t result, char a2)
{
  *(_BYTE *)(result + 4) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ScrollPositionStorage()
{
  return &type metadata for ScrollPositionStorage;
}

uint64_t destroy for ScrollPositionBindingModifier(uint64_t a1)
{
  uint64_t result;

  swift_release();
  result = swift_release();
  if (!*(_BYTE *)(a1 + 73))
    return __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  return result;
}

uint64_t initializeWithCopy for ScrollPositionBindingModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = (_OWORD *)(a1 + 16);
  v6 = (_OWORD *)(a2 + 16);
  v7 = *(unsigned __int8 *)(a2 + 73);
  swift_retain();
  swift_retain();
  if (v7)
  {
    v8 = v6[1];
    *v5 = *v6;
    *(_OWORD *)(a1 + 32) = v8;
    *(_OWORD *)(a1 + 48) = v6[2];
    *(_OWORD *)(a1 + 58) = *(_OWORD *)((char *)v6 + 42);
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 40) = v9;
    (**(void (***)(uint64_t, _OWORD *))(v9 - 8))(a1 + 16, v6);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_WORD *)(a1 + 72) = *(unsigned __int8 *)(a2 + 72);
  }
  v10 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v10;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  return a1;
}

uint64_t assignWithCopy for ScrollPositionBindingModifier(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  unsigned __int8 v8;
  __int128 v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    outlined destroy of ScrollPosition.Storage(a1 + 16);
    if (*(_BYTE *)(a2 + 73))
    {
      v4 = *(_OWORD *)(a2 + 16);
      v5 = *(_OWORD *)(a2 + 32);
      v6 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 58) = *(_OWORD *)(a2 + 58);
      *(_OWORD *)(a1 + 32) = v5;
      *(_OWORD *)(a1 + 48) = v6;
      *(_OWORD *)(a1 + 16) = v4;
    }
    else
    {
      v7 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 40) = v7;
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 16, a2 + 16);
      v8 = *(_BYTE *)(a2 + 72);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_WORD *)(a1 + 72) = v8;
    }
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  v9 = *(_OWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = v9;
  return a1;
}

__n128 __swift_memcpy113_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for ScrollPositionBindingModifier(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  if (a1 != a2)
  {
    outlined destroy of ScrollPosition.Storage(a1 + 16);
    v4 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v4;
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 58) = *(_OWORD *)(a2 + 58);
  }
  v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollPositionBindingModifier(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 113))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollPositionBindingModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 112) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 113) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 113) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollPositionBindingModifier()
{
  return &type metadata for ScrollPositionBindingModifier;
}

ValueMetadata *type metadata accessor for ScrollValueModifier()
{
  return &type metadata for ScrollValueModifier;
}

uint64_t storeEnumTagSinglePayload for ScrollStateInputKind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_234A944C8 + 4 * byte_235282175[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_234A944FC + 4 * byte_235282170[v4]))();
}

uint64_t sub_234A944FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234A94504(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234A9450CLL);
  return result;
}

uint64_t sub_234A94518(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234A94520);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_234A94524(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234A9452C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ScrollStateInputKind()
{
  return &type metadata for ScrollStateInputKind;
}

unint64_t lazy protocol witness table accessor for type ScrollPositionBindingModifier.AdjustedAnchor and conformance ScrollPositionBindingModifier.AdjustedAnchor()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollPositionBindingModifier.AdjustedAnchor and conformance ScrollPositionBindingModifier.AdjustedAnchor;
  if (!lazy protocol witness table cache variable for type ScrollPositionBindingModifier.AdjustedAnchor and conformance ScrollPositionBindingModifier.AdjustedAnchor)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ScrollPositionBindingModifier.AdjustedAnchor, &type metadata for ScrollPositionBindingModifier.AdjustedAnchor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollPositionBindingModifier.AdjustedAnchor and conformance ScrollPositionBindingModifier.AdjustedAnchor);
  }
  return result;
}

uint64_t outlined init with copy of ScrollPositionBindingModifier.MakeRequest(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ScrollPositionBindingModifier.MakeRequest(a2, a1);
  return a2;
}

void type metadata accessor for ScrollStateRequest?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ScrollStateRequest?)
  {
    type metadata accessor for ScrollStateRequest();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest?);
  }
}

unint64_t type metadata accessor for ScrollStateRequest()
{
  unint64_t result;

  result = lazy cache variable for type metadata for ScrollStateRequest;
  if (!lazy cache variable for type metadata for ScrollStateRequest)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollPositionBindingModifier.MakeRequest and conformance ScrollPositionBindingModifier.MakeRequest()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollPositionBindingModifier.MakeRequest and conformance ScrollPositionBindingModifier.MakeRequest;
  if (!lazy protocol witness table cache variable for type ScrollPositionBindingModifier.MakeRequest and conformance ScrollPositionBindingModifier.MakeRequest)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ScrollPositionBindingModifier.MakeRequest, &type metadata for ScrollPositionBindingModifier.MakeRequest);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollPositionBindingModifier.MakeRequest and conformance ScrollPositionBindingModifier.MakeRequest);
  }
  return result;
}

uint64_t outlined destroy of ScrollPositionBindingModifier.MakeRequest(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 80) && !*(_BYTE *)(a1 + 73))
    __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  return a1;
}

uint64_t outlined init with copy of Binding<ScrollPosition>(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(_QWORD, uint64_t))
{
  uint64_t v6;

  type metadata accessor for MutableBox<CachedEnvironment>(0, a3, (uint64_t)&type metadata for ScrollPosition, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t outlined destroy of Binding<ScrollPosition>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, uint64_t))
{
  uint64_t v4;

  type metadata accessor for MutableBox<CachedEnvironment>(0, a2, (uint64_t)&type metadata for ScrollPosition, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void type metadata accessor for (ScrollPosition?, ScrollPosition?)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ScrollPosition?, ScrollPosition?))
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, (unint64_t *)&lazy cache variable for type metadata for ScrollPosition?, (uint64_t)&type metadata for ScrollPosition, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ScrollPosition?, ScrollPosition?));
  }
}

uint64_t sub_234A947F8()
{
  uint64_t v0;

  swift_release();
  swift_release();
  if (!*(_BYTE *)(v0 + 89))
  {
    __swift_destroy_boxed_opaque_existential_1(v0 + 32);
    if (*(_BYTE *)(v0 + 201))
      goto LABEL_3;
LABEL_5:
    __swift_destroy_boxed_opaque_existential_1(v0 + 144);
    goto LABEL_3;
  }
  if (!*(_BYTE *)(v0 + 201))
    goto LABEL_5;
LABEL_3:
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined assign with take of Binding<ScrollPosition>(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(_QWORD, uint64_t))
{
  uint64_t v6;

  type metadata accessor for MutableBox<CachedEnvironment>(0, a3, (uint64_t)&type metadata for ScrollPosition, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a2, a1, v6);
  return a2;
}

uint64_t destroy for ScrollPositionBindingModifier.MakeRequest(uint64_t result)
{
  if (*(_QWORD *)(result + 80))
  {
    if (!*(_BYTE *)(result + 73))
      return __swift_destroy_boxed_opaque_existential_1(result + 16);
  }
  return result;
}

uint64_t initializeWithCopy for ScrollPositionBindingModifier.MakeRequest(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v4 = (_OWORD *)(a1 + 16);
  v5 = (_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 80);
  if (v6)
  {
    if (*(_BYTE *)(a2 + 73))
    {
      v7 = v5[1];
      *v4 = *v5;
      v4[1] = v7;
      v4[2] = v5[2];
      *(_OWORD *)((char *)v4 + 42) = *(_OWORD *)((char *)v5 + 42);
    }
    else
    {
      v10 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 40) = v10;
      (**(void (***)(_OWORD *, _OWORD *))(v10 - 8))(v4, v5);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
      *(_BYTE *)(a1 + 73) = 0;
      v6 = *(_QWORD *)(a2 + 80);
    }
    v11 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 80) = v6;
    *(_QWORD *)(a1 + 88) = v11;
  }
  else
  {
    v8 = v5[3];
    v4[2] = v5[2];
    v4[3] = v8;
    v4[4] = v5[4];
    v9 = v5[1];
    *v4 = *v5;
    v4[1] = v9;
  }
  return a1;
}

uint64_t assignWithCopy for ScrollPositionBindingModifier.MakeRequest(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  unsigned __int8 v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v4 = (_OWORD *)(a1 + 16);
  v5 = (_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 80);
  if (!*(_QWORD *)(a1 + 80))
  {
    if (!v6)
    {
      *v4 = *v5;
      v16 = *(_OWORD *)(a2 + 32);
      v17 = *(_OWORD *)(a2 + 48);
      v18 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v18;
      *(_OWORD *)(a1 + 32) = v16;
      *(_OWORD *)(a1 + 48) = v17;
      return a1;
    }
    goto LABEL_6;
  }
  if (v6)
  {
    if (a1 == a2)
    {
LABEL_10:
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      return a1;
    }
    outlined destroy of ScrollPosition.Storage(a1 + 16);
LABEL_6:
    if (*(_BYTE *)(a2 + 73))
    {
      v7 = *v5;
      v8 = v5[1];
      v9 = v5[2];
      *(_OWORD *)((char *)v4 + 42) = *(_OWORD *)((char *)v5 + 42);
      v4[1] = v8;
      v4[2] = v9;
      *v4 = v7;
    }
    else
    {
      v13 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 40) = v13;
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      (**(void (***)(_OWORD *, _OWORD *))(v13 - 8))(v4, v5);
      v14 = *(_BYTE *)(a2 + 72);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_WORD *)(a1 + 72) = v14;
    }
    goto LABEL_10;
  }
  outlined destroy of ScrollPosition(a1 + 16);
  *v4 = *v5;
  v10 = v5[4];
  v12 = v5[1];
  v11 = v5[2];
  v4[3] = v5[3];
  v4[4] = v10;
  v4[1] = v12;
  v4[2] = v11;
  return a1;
}

uint64_t assignWithTake for ScrollPositionBindingModifier.MakeRequest(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  _OWORD *v4;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v3 = (_OWORD *)(a1 + 16);
  v4 = (_OWORD *)(a2 + 16);
  if (!*(_QWORD *)(a1 + 80))
    goto LABEL_7;
  v6 = *(_QWORD *)(a2 + 80);
  if (!v6)
  {
    outlined destroy of ScrollPosition(a1 + 16);
LABEL_7:
    v9 = v4[3];
    v3[2] = v4[2];
    v3[3] = v9;
    v3[4] = v4[4];
    v10 = v4[1];
    *v3 = *v4;
    v3[1] = v10;
    return a1;
  }
  if (a1 != a2)
  {
    outlined destroy of ScrollPosition.Storage(a1 + 16);
    v7 = v4[1];
    *v3 = *v4;
    v3[1] = v7;
    v3[2] = v4[2];
    *(_OWORD *)((char *)v3 + 42) = *(_OWORD *)((char *)v4 + 42);
    v6 = *(_QWORD *)(a2 + 80);
  }
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v6;
  *(_QWORD *)(a1 + 88) = v8;
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollPositionBindingModifier.MakeRequest(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 96))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 80);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollPositionBindingModifier.MakeRequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 96) = 0;
    if (a2)
      *(_QWORD *)(result + 80) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollPositionBindingModifier.MakeRequest()
{
  return &type metadata for ScrollPositionBindingModifier.MakeRequest;
}

ValueMetadata *type metadata accessor for ScrollPositionBindingModifier.AdjustedAnchor()
{
  return &type metadata for ScrollPositionBindingModifier.AdjustedAnchor;
}

ValueMetadata *type metadata accessor for _GraphInputs.ContentScrollPositionKey()
{
  return &type metadata for _GraphInputs.ContentScrollPositionKey;
}

ValueMetadata *type metadata accessor for _GraphInputs.ScrollPositionKey()
{
  return &type metadata for _GraphInputs.ScrollPositionKey;
}

ValueMetadata *type metadata accessor for _GraphInputs.ScrollPositionAnchorKey()
{
  return &type metadata for _GraphInputs.ScrollPositionAnchorKey;
}

ValueMetadata *type metadata accessor for _GraphInputs.ContentScrollPositionAnchorKey()
{
  return &type metadata for _GraphInputs.ContentScrollPositionAnchorKey;
}

uint64_t static AnyTransition.modifier<A>(active:identity:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, uint64_t, uint64_t, double);
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v6 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v23 - v10;
  v14 = type metadata accessor for ModifierTransition(0, v12, v13, v13);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v23 - v16;
  v18 = *(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16);
  v18(v11, a1, a3, v15);
  ((void (*)(char *, uint64_t, uint64_t))v18)(v8, a2, a3);
  v19 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v19(v17, v11, a3);
  v19(&v17[*(int *)(v14 + 36)], v8, a3);
  v20 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ModifierTransition<A>, v14);
  return AnyTransition.init<A>(_:)((uint64_t)v17, v14, v20, v21);
}

uint64_t type metadata accessor for ModifierTransition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ModifierTransition);
}

uint64_t type metadata completion function for ModifierTransition()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ModifierTransition(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v14;
  void (*v15)(uint64_t *, uint64_t *, uint64_t);

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_DWORD *)(v6 + 80);
  v9 = ~v8;
  v10 = v7 + v8;
  v11 = ((v7 + v8) & ~v8) + v7;
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v11 > 0x18)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + ((v8 + 16) & v9));
    swift_retain();
  }
  else
  {
    v15 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v15(a1, a2, *(_QWORD *)(a3 + 16));
    v15((uint64_t *)(((unint64_t)v4 + v10) & v9), (uint64_t *)(((unint64_t)a2 + v10) & v9), v5);
  }
  return v4;
}

uint64_t destroy for ModifierTransition(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(unint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v6 = *(uint64_t (**)(unint64_t, uint64_t))(v4 + 8);
  v6(a1, v3);
  return v6((*(_QWORD *)(v4 + 64) + a1 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), v3);
}

unint64_t initializeWithCopy for ModifierTransition(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(unint64_t, unint64_t, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  v7((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), v5);
  return a1;
}

unint64_t assignWithCopy for ModifierTransition(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(unint64_t, unint64_t, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 24);
  v7(a1, a2, v5);
  v7((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), v5);
  return a1;
}

unint64_t initializeWithTake for ModifierTransition(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(unint64_t, unint64_t, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  v7((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), v5);
  return a1;
}

unint64_t assignWithTake for ModifierTransition(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(unint64_t, unint64_t, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  v7((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for ModifierTransition(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = ((*(_QWORD *)(v4 + 64) + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
     + *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234A951B4 + 4 * byte_235282510[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for ModifierTransition(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t associated type witness table accessor for Transition.Body : View in ModifierTransition<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t ModifierTransition.body(content:phase:)@<X0>(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(_BYTE *, uint64_t);
  _BYTE v27[4];
  int v28;
  uint64_t v29;
  _QWORD v30[2];

  v5 = v4;
  v29 = a4;
  v28 = a2;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = &v27[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for PlaceholderContentView(255, v11, v11, v12);
  v15 = type metadata accessor for ModifiedContent(0, v13, v7, v14);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = &v27[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20.n128_f64[0] = MEMORY[0x24BDAC7A8](v19);
  v22 = &v27[-v21];
  if (v28 == 1)
    v5 += *(int *)(a3 + 36);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v8 + 16))(v10, v5, v7, v20);
  View.modifier<A>(_:)(v10, v13, v7, &protocol witness table for PlaceholderContentView<A>);
  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
  v23 = *(_QWORD *)(a3 + 24);
  v30[0] = &protocol witness table for PlaceholderContentView<A>;
  v30[1] = v23;
  v24 = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v15, v30);
  static ViewBuilder.buildExpression<A>(_:)(v18, v15, v24);
  v25 = *(void (**)(_BYTE *, uint64_t))(v16 + 8);
  v25(v18, v15);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v22, v15, v29);
  return ((uint64_t (*)(_BYTE *, uint64_t))v25)(v22, v15);
}

uint64_t sub_234A955A8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];

  v4 = *a1;
  v5 = a1[1];
  v6 = type metadata accessor for ModifierTransition(255, *a1, v5, a4);
  v9 = type metadata accessor for PlaceholderContentView(255, v6, v7, v8);
  v11 = type metadata accessor for ModifiedContent(255, v9, v4, v10);
  v13[0] = &protocol witness table for PlaceholderContentView<A>;
  v13[1] = v5;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v11, v13);
}

void DisplayList.PlatformEffect.features.getter(_WORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t DisplayList.PlatformEffect.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t static DisplayList.PlatformEffect.== infix(_:_:)()
{
  return 1;
}

void DisplayList.PlatformEffect.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int DisplayList.PlatformEffect.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type DisplayList.PlatformEffect and conformance DisplayList.PlatformEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayList.PlatformEffect and conformance DisplayList.PlatformEffect;
  if (!lazy protocol witness table cache variable for type DisplayList.PlatformEffect and conformance DisplayList.PlatformEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DisplayList.PlatformEffect, &type metadata for DisplayList.PlatformEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.PlatformEffect and conformance DisplayList.PlatformEffect);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for DisplayList.PlatformEffect(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_234A95748 + 4 * byte_235282570[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_234A95768 + 4 * byte_235282575[v4]))();
}

_BYTE *sub_234A95748(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_234A95768(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_234A95770(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_234A95778(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_234A95780(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_234A95788(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.PlatformEffect()
{
  return &type metadata for DisplayList.PlatformEffect;
}

ValueMetadata *type metadata accessor for DisplayList.ViewUpdater.PlatformViewInfo()
{
  return &type metadata for DisplayList.ViewUpdater.PlatformViewInfo;
}

ValueMetadata *type metadata accessor for DisplayList.ViewUpdater.Platform.PlatformState()
{
  return &type metadata for DisplayList.ViewUpdater.Platform.PlatformState;
}

ValueMetadata *type metadata accessor for DisplayList.ViewUpdater.PlatformViewInfo.Seeds()
{
  return &type metadata for DisplayList.ViewUpdater.PlatformViewInfo.Seeds;
}

uint64_t specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(unint64_t a1, unint64_t a2, int a3)
{
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;

  v4 = a2;
  v5 = a1;
  v6 = HIDWORD(a1);
  v7 = HIDWORD(a2);
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  v8 = swift_allocObject();
  v9 = MEMORY[0x24BEE44F0];
  *(_OWORD *)(v8 + 16) = xmmword_235282650;
  v10 = MEMORY[0x24BEE4558];
  *(_QWORD *)(v8 + 56) = v9;
  *(_QWORD *)(v8 + 64) = v10;
  *(_DWORD *)(v8 + 32) = a3;
  *(_QWORD *)(v8 + 96) = v9;
  *(_QWORD *)(v8 + 104) = v10;
  *(_DWORD *)(v8 + 72) = v7;
  *(_QWORD *)(v8 + 136) = v9;
  *(_QWORD *)(v8 + 144) = v10;
  *(_DWORD *)(v8 + 112) = v4;
  *(_QWORD *)(v8 + 176) = v9;
  *(_QWORD *)(v8 + 184) = v10;
  *(_DWORD *)(v8 + 152) = v6;
  *(_QWORD *)(v8 + 216) = v9;
  *(_QWORD *)(v8 + 224) = v10;
  *(_DWORD *)(v8 + 192) = v5;
  v11._countAndFlagsBits = String.init(format:_:)();
  String.append(_:)(v11);
  return swift_bridgeObjectRelease();
}

uint64_t DisplayList.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  Swift::String v5;
  uint64_t v6;
  _QWORD v7[2];
  __int128 v8;
  unint64_t v9;

  v1 = *v0;
  strcpy((char *)v7, "(display-list");
  HIWORD(v7[1]) = -4864;
  v8 = xmmword_235282660;
  v9 = 0xE200000000000000;
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    goto LABEL_6;
  swift_bridgeObjectRetain();
  v3 = v1 + 100;
  do
  {
    DisplayList.Item.print(into:)(v7);
    v3 += 72;
    --v2;
  }
  while (v2);
  result = swift_bridgeObjectRelease();
  if (!(_QWORD)v8)
    goto LABEL_7;
  if ((_QWORD)v8 != 0x8000000000000000)
  {
LABEL_6:
    specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
LABEL_7:
    v5._countAndFlagsBits = 41;
    v5._object = (void *)0xE100000000000000;
    String.append(_:)(v5);
    v6 = v7[0];
    swift_bridgeObjectRelease();
    return v6;
  }
  __break(1u);
  return result;
}

uint64_t DisplayList.minimalDescription.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  Swift::String v5;
  uint64_t v6;
  _QWORD v7[2];
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v1 = *v0;
  v7[0] = 4998184;
  v7[1] = 0xE300000000000000;
  v8 = 0;
  v9 = 0;
  v10 = 0xE000000000000000;
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    goto LABEL_7;
  swift_bridgeObjectRetain();
  v3 = v1 + 100;
  do
  {
    DisplayList.Item.printMinimally(into:)(v7);
    v3 += 72;
    --v2;
  }
  while (v2);
  result = swift_bridgeObjectRelease();
  if (!v8)
    goto LABEL_7;
  if (v8 != 0x8000000000000000)
  {
    specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
LABEL_7:
    v5._countAndFlagsBits = 41;
    v5._object = (void *)0xE100000000000000;
    String.append(_:)(v5);
    v6 = v7[0];
    swift_bridgeObjectRelease();
    return v6;
  }
  __break(1u);
  return result;
}

void DisplayList.Item.print(into:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  void *v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  void *v23;
  Swift::String v24;
  Swift::String v25;
  unsigned int v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  uint64_t v35;
  unint64_t v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  uint64_t v41;
  void *v42;
  Swift::String v43;
  uint64_t v44;
  void *v45;
  Swift::String v46;
  uint64_t v47;
  void *v48;
  Swift::String v49;
  Swift::String v50;
  uint64_t v51;
  Swift::String v52;
  _BYTE v53[96];
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  _BYTE *v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int16 v68;
  char v69;
  int v70;
  uint64_t v71;

  v3 = type metadata accessor for DisplayList.ArchiveIDs();
  MEMORY[0x24BDAC7A8](v3);
  v57 = &v53[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for DisplayList.ArchiveIDs?();
  MEMORY[0x24BDAC7A8](v5);
  MEMORY[0x24BDAC7A8](v6);
  v58 = &v53[-v7];
  v9 = *(_QWORD *)v1;
  v8 = *(_QWORD *)(v1 + 8);
  v11 = *(_QWORD *)(v1 + 16);
  v10 = *(_QWORD *)(v1 + 24);
  v12 = *(_QWORD *)(v1 + 32);
  v59 = *(_QWORD *)(v1 + 40);
  v13 = *(_QWORD *)(v1 + 48);
  v56 = *(_QWORD *)(v1 + 56);
  v55 = *(unsigned __int16 *)(v1 + 64) | (*(unsigned __int8 *)(v1 + 66) << 16);
  v14 = *(_DWORD *)(v1 + 68);
  v15._countAndFlagsBits = 1835365481;
  v15._object = (void *)0xE400000000000000;
  SExpPrinter.push(_:)(v15);
  if (v14)
  {
    v60 = 0x69746E6564693A23;
    v61 = 0xEB00000000207974;
    LODWORD(v71) = v14;
    v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17 = v60;
    v18 = (void *)v61;
    v19._countAndFlagsBits = 32;
    v19._object = (void *)0xE100000000000000;
    String.append(_:)(v19);
    v20._countAndFlagsBits = v17;
    v20._object = v18;
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
  }
  v60 = 0x6F69737265763A23;
  v61 = 0xEA0000000000206ELL;
  v71 = v12;
  v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22 = v60;
  v23 = (void *)v61;
  v24._countAndFlagsBits = 32;
  v24._object = (void *)0xE100000000000000;
  String.append(_:)(v24);
  v25._countAndFlagsBits = v22;
  v25._object = v23;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v60 = v9;
  v61 = v8;
  v62 = v11;
  v63 = v10;
  v64 = v12;
  v65 = v59;
  v66 = v13;
  v67 = v56;
  v26 = HIWORD(v55);
  v69 = BYTE2(v55);
  v68 = v55;
  v70 = v14;
  DisplayList.Item.features.getter();
  if ((v71 & 1) != 0)
  {
    v27._countAndFlagsBits = 32;
    v27._object = (void *)0xE100000000000000;
    String.append(_:)(v27);
    v28._countAndFlagsBits = 0x7269757165723A23;
    v28._object = (void *)0xEF65757274206465;
    String.append(_:)(v28);
  }
  v60 = v9;
  v61 = v8;
  v62 = v11;
  v63 = v10;
  v64 = v12;
  v65 = v59;
  v54 = v13;
  v66 = v13;
  v67 = v56;
  v69 = v26;
  v68 = v55;
  v70 = v14;
  DisplayList.Item.features.getter();
  if ((v71 & 2) != 0)
  {
    v29._countAndFlagsBits = 32;
    v29._object = (void *)0xE100000000000000;
    String.append(_:)(v29);
    v30._countAndFlagsBits = 0x2073776569763A23;
    v30._object = (void *)0xEC00000065757274;
    String.append(_:)(v30);
  }
  v60 = 0x2820656D61726628;
  v61 = 0xE800000000000000;
  v31._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  v32._countAndFlagsBits = 32;
  v32._object = (void *)0xE100000000000000;
  String.append(_:)(v32);
  v33._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  v34._countAndFlagsBits = 59;
  v34._object = (void *)0xE100000000000000;
  String.append(_:)(v34);
  v35 = v60;
  v36 = v61;
  v60 = 32;
  v61 = 0xE100000000000000;
  v37._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  v38._countAndFlagsBits = 32;
  v38._object = (void *)0xE100000000000000;
  String.append(_:)(v38);
  v39._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v39);
  swift_bridgeObjectRelease();
  v40._countAndFlagsBits = 10537;
  v40._object = (void *)0xE200000000000000;
  String.append(_:)(v40);
  v41 = v60;
  v42 = (void *)v61;
  v60 = v35;
  v61 = v36;
  swift_bridgeObjectRetain();
  v43._countAndFlagsBits = v41;
  v43._object = v42;
  String.append(_:)(v43);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v44 = v60;
  v45 = (void *)v61;
  if (a1[2])
  {
    v46._countAndFlagsBits = 10;
    v46._object = (void *)0xE100000000000000;
    String.append(_:)(v46);
    v47 = a1[3];
    v48 = (void *)a1[4];
    swift_bridgeObjectRetain();
    v49._countAndFlagsBits = v47;
    v49._object = v48;
    String.append(_:)(v49);
    swift_bridgeObjectRelease();
  }
  else
  {
    v50._countAndFlagsBits = 32;
    v50._object = (void *)0xE100000000000000;
    String.append(_:)(v50);
  }
  v51 = v54;
  v52._countAndFlagsBits = v44;
  v52._object = v45;
  String.append(_:)(v52);
  swift_bridgeObjectRelease();
  __asm { BR              X10 }
}

void sub_234A96024()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  void *v6;
  Swift::String v7;
  uint64_t v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;

  *(_QWORD *)(v2 - 368) = 0;
  *(_QWORD *)(v2 - 360) = 0xE000000000000000;
  outlined copy of DisplayList.Item.Value(*(_QWORD *)(v2 - 384), v1);
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  strcpy((char *)(v2 - 368), "(content-seed ");
  *(_BYTE *)(v2 - 353) = -18;
  *(_WORD *)(v2 - 192) = v1;
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 41;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  v5 = *(_QWORD *)(v2 - 368);
  v6 = *(void **)(v2 - 360);
  if (v0[2])
  {
    v7._countAndFlagsBits = 10;
    v7._object = (void *)0xE100000000000000;
    String.append(_:)(v7);
    v8 = v0[3];
    v9 = (void *)v0[4];
    swift_bridgeObjectRetain();
    v10._countAndFlagsBits = v8;
    v10._object = v9;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
  }
  else
  {
    v11._countAndFlagsBits = 32;
    v11._object = (void *)0xE100000000000000;
    String.append(_:)(v11);
  }
  v12._countAndFlagsBits = v5;
  v12._object = v6;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  __asm { BR              X10 }
}

void sub_234A96658()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  float v4;
  float v5;
  float v6;
  float v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  void *v13;
  Swift::String v14;
  uint64_t v15;
  void *v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  void *v23;
  Swift::String v24;
  uint64_t v25;
  void *v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  void *v33;
  Swift::String v34;
  uint64_t v35;
  void *v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  Swift::String v43;
  uint64_t v44;

  v3 = *(_QWORD *)(v2 - 384);
  v4 = *(float *)(v3 + 20);
  v5 = *(float *)(v3 + 24);
  v6 = *(float *)(v3 + 28);
  v7 = *(float *)(v3 + 32);
  v8 = *(_QWORD *)(v3 + 40);
  outlined copy of DisplayList.Item.Value(v3, v1);
  swift_bridgeObjectRetain();
  v9._countAndFlagsBits = 0x706F72646B636162;
  v9._object = (void *)0xE800000000000000;
  SExpPrinter.push(_:)(v9);
  *(_QWORD *)(v2 - 368) = 0;
  *(_QWORD *)(v2 - 360) = 0xE000000000000000;
  v10._countAndFlagsBits = 0x20656C61637328;
  v10._object = (void *)0xE700000000000000;
  String.append(_:)(v10);
  Float.write<A>(to:)();
  v11._countAndFlagsBits = 41;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  v12 = *(_QWORD *)(v2 - 368);
  v13 = *(void **)(v2 - 360);
  if (v0[2])
  {
    v14._countAndFlagsBits = 10;
    v14._object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    v15 = v0[3];
    v16 = (void *)v0[4];
    swift_bridgeObjectRetain();
    v17._countAndFlagsBits = v15;
    v17._object = v16;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
  }
  else
  {
    v18._countAndFlagsBits = 32;
    v18._object = (void *)0xE100000000000000;
    String.append(_:)(v18);
  }
  v19._countAndFlagsBits = v12;
  v19._object = v13;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 - 368) = 0x20726F6C6F6328;
  *(_QWORD *)(v2 - 360) = 0xE700000000000000;
  Color.Resolved.description.getter(v4, v5, v6, v7);
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 41;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  v22 = *(_QWORD *)(v2 - 368);
  v23 = *(void **)(v2 - 360);
  if (v0[2])
  {
    v24._countAndFlagsBits = 10;
    v24._object = (void *)0xE100000000000000;
    String.append(_:)(v24);
    v25 = v0[3];
    v26 = (void *)v0[4];
    swift_bridgeObjectRetain();
    v27._countAndFlagsBits = v25;
    v27._object = v26;
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
  }
  else
  {
    v28._countAndFlagsBits = 32;
    v28._object = (void *)0xE100000000000000;
    String.append(_:)(v28);
  }
  v29._countAndFlagsBits = v22;
  v29._object = v23;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 - 368) = 0x737265746C696628;
  *(_QWORD *)(v2 - 360) = 0xE900000000000020;
  v30._countAndFlagsBits = MEMORY[0x23B7C61E4](v8, &type metadata for GraphicsFilter);
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v31._countAndFlagsBits = 41;
  v31._object = (void *)0xE100000000000000;
  String.append(_:)(v31);
  v32 = *(_QWORD *)(v2 - 368);
  v33 = *(void **)(v2 - 360);
  if (v0[2])
  {
    v34._countAndFlagsBits = 10;
    v34._object = (void *)0xE100000000000000;
    String.append(_:)(v34);
    v35 = v0[3];
    v36 = (void *)v0[4];
    swift_bridgeObjectRetain();
    v37._countAndFlagsBits = v35;
    v37._object = v36;
    String.append(_:)(v37);
    swift_bridgeObjectRelease();
  }
  else
  {
    v38._countAndFlagsBits = 32;
    v38._object = (void *)0xE100000000000000;
    String.append(_:)(v38);
  }
  v39._countAndFlagsBits = v32;
  v39._object = v33;
  String.append(_:)(v39);
  swift_bridgeObjectRelease();
  v40 = v0[2];
  if (v40)
  {
    v41 = __OFSUB__(v40, 1);
    v42 = v40 - 1;
    if (v41)
    {
      __break(1u);
      JUMPOUT(0x234A996A4);
    }
    v0[2] = v42;
    specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
  }
  v43._countAndFlagsBits = 41;
  v43._object = (void *)0xE100000000000000;
  String.append(_:)(v43);
  v44 = *(_QWORD *)(v2 - 384);
  outlined consume of DisplayList.Item.Value(v44, v1);
  outlined consume of DisplayList.Item.Value(v44, v1);
  if (!v0[2])
    JUMPOUT(0x234A99634);
  JUMPOUT(0x234A9961CLL);
}

void sub_234A96750()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  float *v3;
  float v4;
  float v5;
  float v6;
  float v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  void *v11;
  Swift::String v12;
  uint64_t v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;

  v3 = *(float **)(v2 - 384);
  v4 = v3[4];
  v5 = v3[5];
  v6 = v3[6];
  v7 = v3[7];
  *(_QWORD *)(v2 - 368) = 0x20726F6C6F6328;
  *(_QWORD *)(v2 - 360) = 0xE700000000000000;
  outlined copy of DisplayList.Item.Value((uint64_t)v3, v1);
  Color.Resolved.description.getter(v4, v5, v6, v7);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 41;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  v10 = *(_QWORD *)(v2 - 368);
  v11 = *(void **)(v2 - 360);
  if (v0[2])
  {
    v12._countAndFlagsBits = 10;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    v13 = v0[3];
    v14 = (void *)v0[4];
    swift_bridgeObjectRetain();
    v15._countAndFlagsBits = v13;
    v15._object = v14;
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
  }
  else
  {
    v16._countAndFlagsBits = 32;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
  }
  v17._countAndFlagsBits = v10;
  v17._object = v11;
  String.append(_:)(v17);
  v18 = *(_QWORD *)(v2 - 384);
  outlined consume of DisplayList.Item.Value(v18, v1);
  swift_bridgeObjectRelease();
  outlined consume of DisplayList.Item.Value(v18, v1);
  if (!v0[2])
    JUMPOUT(0x234A99634);
  JUMPOUT(0x234A9961CLL);
}

void sub_234A9681C()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  float v4;
  float v5;
  float v6;
  float v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  void *v13;
  Swift::String v14;
  uint64_t v15;
  void *v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  void *v23;
  Swift::String v24;
  uint64_t v25;
  void *v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;

  v3 = *(_QWORD *)(v2 - 384);
  v4 = *(float *)(v3 + 16);
  v5 = *(float *)(v3 + 20);
  v6 = *(float *)(v3 + 24);
  v7 = *(float *)(v3 + 28);
  v8 = *(_QWORD *)(v3 + 32);
  outlined copy of DisplayList.Item.Value(v3, v1);
  v9._countAndFlagsBits = 0x6F656C656D616863;
  v9._object = (void *)0xEF726F6C6F632D6ELL;
  SExpPrinter.push(_:)(v9);
  *(_QWORD *)(v2 - 368) = 0x20726F6C6F6328;
  *(_QWORD *)(v2 - 360) = 0xE700000000000000;
  Color.Resolved.description.getter(v4, v5, v6, v7);
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 41;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  v12 = *(_QWORD *)(v2 - 368);
  v13 = *(void **)(v2 - 360);
  if (v0[2])
  {
    v14._countAndFlagsBits = 10;
    v14._object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    v15 = v0[3];
    v16 = (void *)v0[4];
    swift_bridgeObjectRetain();
    v17._countAndFlagsBits = v15;
    v17._object = v16;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
  }
  else
  {
    v18._countAndFlagsBits = 32;
    v18._object = (void *)0xE100000000000000;
    String.append(_:)(v18);
  }
  v19._countAndFlagsBits = v12;
  v19._object = v13;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 - 368) = 0x737265746C696628;
  *(_QWORD *)(v2 - 360) = 0xE900000000000020;
  v20._countAndFlagsBits = MEMORY[0x23B7C61E4](v8, &type metadata for GraphicsFilter);
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 41;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  v22 = *(_QWORD *)(v2 - 368);
  v23 = *(void **)(v2 - 360);
  if (v0[2])
  {
    v24._countAndFlagsBits = 10;
    v24._object = (void *)0xE100000000000000;
    String.append(_:)(v24);
    v25 = v0[3];
    v26 = (void *)v0[4];
    swift_bridgeObjectRetain();
    v27._countAndFlagsBits = v25;
    v27._object = v26;
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
  }
  else
  {
    v28._countAndFlagsBits = 32;
    v28._object = (void *)0xE100000000000000;
    String.append(_:)(v28);
  }
  v29._countAndFlagsBits = v22;
  v29._object = v23;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v30 = v0[2];
  if (v30)
  {
    if (!__OFSUB__(v30, 1))
      JUMPOUT(0x234A98AA4);
    __break(1u);
    JUMPOUT(0x234A988ACLL);
  }
  JUMPOUT(0x234A98AB4);
}

uint64_t sub_234A96914()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  double v6;
  double v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  void *v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  Swift::String v22;
  uint64_t v23;

  v3 = *(_QWORD *)(v2 - 384);
  v4 = *(void **)(v3 + 16);
  v5 = *(_BYTE *)(v3 + 24);
  v6 = *(double *)(v3 + 32);
  v7 = *(double *)(v3 + 48);
  v8 = *(unsigned __int8 *)(v3 + 56);
  outlined copy of DisplayList.Item.Value(v3, v1);
  outlined copy of GraphicsImage.Contents?(v4, v5);
  v9._countAndFlagsBits = 0x6567616D69;
  v9._object = (void *)0xE500000000000000;
  SExpPrinter.push(_:)(v9);
  if (v6 == 0.0)
  {
    *(_QWORD *)(v2 - 368) = 0x2820657A69733A23;
    *(_QWORD *)(v2 - 360) = 0xE800000000000000;
    v11._countAndFlagsBits = Double.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._countAndFlagsBits = 32;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    v13._countAndFlagsBits = Double.description.getter();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14._countAndFlagsBits = 41;
    v14._object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    v15 = *(_QWORD *)(v2 - 368);
    v16 = *(void **)(v2 - 360);
    v17._countAndFlagsBits = 32;
    v17._object = (void *)0xE100000000000000;
    String.append(_:)(v17);
    v18._countAndFlagsBits = v15;
    v18._object = v16;
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19 = *(_QWORD *)(v0 + 16);
    if (v19)
    {
      v20 = __OFSUB__(v19, 1);
      v21 = v19 - 1;
      if (v20)
      {
        __break(1u);
        JUMPOUT(0x234A99690);
      }
      *(_QWORD *)(v0 + 16) = v21;
      specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
    }
    v22._countAndFlagsBits = 41;
    v22._object = (void *)0xE100000000000000;
    String.append(_:)(v22);
    v23 = *(_QWORD *)(v2 - 384);
    outlined consume of DisplayList.Item.Value(v23, v1);
    outlined consume of GraphicsImage.Contents?(v4, v5);
    outlined consume of DisplayList.Item.Value(v23, v1);
    if (!*(_QWORD *)(v0 + 16))
      JUMPOUT(0x234A99634);
    JUMPOUT(0x234A9961CLL);
  }
  return ((uint64_t (*)(double, double))((char *)&loc_234A96980 + dword_234A9975C[v8]))(0.0, v7);
}

void sub_234A96AB0()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  char v6;
  Swift::String v7;
  uint64_t v8;
  const CGPath *v9;
  const CGPath *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  void *v18;
  Swift::String v19;
  uint64_t v20;
  void *v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  _QWORD *v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  void *v29;
  Swift::String v30;
  uint64_t v31;
  void *v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  uint64_t v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v39;
  void *v40;
  Swift::String v41;
  uint64_t v42;
  void *v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  Swift::String v50;

  v3 = *(_QWORD *)(v2 - 384);
  v4 = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(v2 - 368) = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v2 - 352) = v4;
  *(_BYTE *)(v2 - 336) = *(_BYTE *)(v3 + 48);
  v5 = *(_QWORD *)(v3 + 56);
  *(_DWORD *)(v2 - 400) = *(unsigned __int8 *)(v3 + 64);
  v6 = *(_BYTE *)(v3 + 65);
  outlined copy of DisplayList.Item.Value(v3, v1);
  outlined retain of Path.Storage(v2 - 368, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
  swift_retain();
  v7._countAndFlagsBits = 0x6570616873;
  v7._object = (void *)0xE500000000000000;
  SExpPrinter.push(_:)(v7);
  v8 = v2 - 240;
  *(_QWORD *)(v8 + 48) = 0x206874617028;
  *(_QWORD *)(v8 + 56) = 0xE600000000000000;
  Path.cgPath.getter();
  v10 = v9;
  v11 = (void *)_CGPathCopyDescription(v9, 0.0);

  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v14 = v13;

  v15._countAndFlagsBits = v12;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 41;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  v17 = *(_QWORD *)(v2 - 192);
  v18 = *(void **)(v2 - 184);
  if (v0[2])
  {
    v19._countAndFlagsBits = 10;
    v19._object = (void *)0xE100000000000000;
    String.append(_:)(v19);
    v20 = v0[3];
    v21 = (void *)v0[4];
    swift_bridgeObjectRetain();
    v22._countAndFlagsBits = v20;
    v22._object = v21;
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
  }
  else
  {
    v23._countAndFlagsBits = 32;
    v23._object = (void *)0xE100000000000000;
    String.append(_:)(v23);
  }
  v24._countAndFlagsBits = v17;
  v24._object = v18;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25 = (_QWORD *)(v2 - 240);
  v25[6] = 0;
  v25[7] = 0xE000000000000000;
  v26._countAndFlagsBits = 0x20746E69617028;
  v26._object = (void *)0xE700000000000000;
  String.append(_:)(v26);
  *v25 = v5;
  type metadata accessor for AnyResolvedPaint();
  _print_unlocked<A, B>(_:_:)();
  v27._countAndFlagsBits = 41;
  v27._object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  v28 = *(_QWORD *)(v2 - 192);
  v29 = *(void **)(v2 - 184);
  if (v0[2])
  {
    v30._countAndFlagsBits = 10;
    v30._object = (void *)0xE100000000000000;
    String.append(_:)(v30);
    v31 = v0[3];
    v32 = (void *)v0[4];
    swift_bridgeObjectRetain();
    v33._countAndFlagsBits = v31;
    v33._object = v32;
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
  }
  else
  {
    v34._countAndFlagsBits = 32;
    v34._object = (void *)0xE100000000000000;
    String.append(_:)(v34);
  }
  v35._countAndFlagsBits = v28;
  v35._object = v29;
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  v36 = v2 - 240;
  *(_QWORD *)(v36 + 48) = 0;
  *(_QWORD *)(v36 + 56) = 0xE000000000000000;
  v37._countAndFlagsBits = 0x20656C79747328;
  v37._object = (void *)0xE700000000000000;
  String.append(_:)(v37);
  *(_BYTE *)(v2 - 240) = *(_DWORD *)(v2 - 400);
  *(_BYTE *)(v2 - 239) = v6;
  _print_unlocked<A, B>(_:_:)();
  v38._countAndFlagsBits = 41;
  v38._object = (void *)0xE100000000000000;
  String.append(_:)(v38);
  v39 = *(_QWORD *)(v2 - 192);
  v40 = *(void **)(v2 - 184);
  if (v0[2])
  {
    v41._countAndFlagsBits = 10;
    v41._object = (void *)0xE100000000000000;
    String.append(_:)(v41);
    v42 = v0[3];
    v43 = (void *)v0[4];
    swift_bridgeObjectRetain();
    v44._countAndFlagsBits = v42;
    v44._object = v43;
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
  }
  else
  {
    v45._countAndFlagsBits = 32;
    v45._object = (void *)0xE100000000000000;
    String.append(_:)(v45);
  }
  v46._countAndFlagsBits = v39;
  v46._object = v40;
  String.append(_:)(v46);
  swift_bridgeObjectRelease();
  v47 = v0[2];
  if (v47)
  {
    v48 = __OFSUB__(v47, 1);
    v49 = v47 - 1;
    if (v48)
    {
      __break(1u);
      JUMPOUT(0x234A996A8);
    }
    v0[2] = v49;
    specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
  }
  v50._countAndFlagsBits = 41;
  v50._object = (void *)0xE100000000000000;
  String.append(_:)(v50);
  outlined consume of DisplayList.Item.Value(*(_QWORD *)(v2 - 384), v1);
  swift_release();
  outlined retain of Path.Storage(v2 - 368, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  JUMPOUT(0x234A98B80);
}

void sub_234A96BE0()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  Swift::String v13;
  const CGPath *v14;
  const CGPath *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  void *v23;
  Swift::String v24;
  uint64_t v25;
  void *v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  _QWORD *v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v33;
  void *v34;
  Swift::String v35;
  uint64_t v36;
  void *v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  Swift::String v44;

  v3 = *(_QWORD *)(v2 - 384);
  v4 = *(_OWORD *)(v3 + 32);
  v5 = v2 - 240;
  *(_OWORD *)(v5 + 48) = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v5 + 64) = v4;
  *(_BYTE *)(v2 - 160) = *(_BYTE *)(v3 + 48);
  v6 = *(_QWORD *)(v3 + 56);
  v7 = *(_QWORD *)(v3 + 64);
  v8 = *(_QWORD *)(v3 + 72);
  v9 = *(_QWORD *)(v3 + 80);
  v10 = *(_QWORD *)(v3 + 88);
  v11 = *(_DWORD *)(v3 + 96);
  v12 = *(_BYTE *)(v3 + 100);
  outlined copy of DisplayList.Item.Value(v3, v1);
  outlined retain of Path.Storage(v2 - 192, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
  v13._countAndFlagsBits = 0x776F64616873;
  v13._object = (void *)0xE600000000000000;
  SExpPrinter.push(_:)(v13);
  *(_QWORD *)(v2 - 368) = 0x206874617028;
  *(_QWORD *)(v2 - 360) = 0xE600000000000000;
  Path.cgPath.getter();
  v15 = v14;
  v16 = (void *)_CGPathCopyDescription(v14, 0.0);

  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v19 = v18;

  v20._countAndFlagsBits = v17;
  v20._object = v19;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 41;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  v22 = *(_QWORD *)(v2 - 368);
  v23 = *(void **)(v2 - 360);
  if (v0[2])
  {
    v24._countAndFlagsBits = 10;
    v24._object = (void *)0xE100000000000000;
    String.append(_:)(v24);
    v25 = v0[3];
    v26 = (void *)v0[4];
    swift_bridgeObjectRetain();
    v27._countAndFlagsBits = v25;
    v27._object = v26;
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
  }
  else
  {
    v28._countAndFlagsBits = 32;
    v28._object = (void *)0xE100000000000000;
    String.append(_:)(v28);
  }
  v29._countAndFlagsBits = v22;
  v29._object = v23;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v30 = (_QWORD *)(v2 - 240);
  *v30 = 0;
  v30[1] = 0xE000000000000000;
  v31._countAndFlagsBits = 0x20776F6461687328;
  v31._object = (void *)0xE800000000000000;
  String.append(_:)(v31);
  *(_QWORD *)(v2 - 368) = v6;
  *(_QWORD *)(v2 - 360) = v7;
  *(_QWORD *)(v2 - 352) = v8;
  *(_QWORD *)(v2 - 344) = v9;
  *(_QWORD *)(v2 - 336) = v10;
  *(_DWORD *)(v2 - 328) = v11;
  *(_BYTE *)(v2 - 324) = v12;
  _print_unlocked<A, B>(_:_:)();
  v32._countAndFlagsBits = 41;
  v32._object = (void *)0xE100000000000000;
  String.append(_:)(v32);
  v33 = *(_QWORD *)(v2 - 240);
  v34 = *(void **)(v2 - 232);
  if (v0[2])
  {
    v35._countAndFlagsBits = 10;
    v35._object = (void *)0xE100000000000000;
    String.append(_:)(v35);
    v36 = v0[3];
    v37 = (void *)v0[4];
    swift_bridgeObjectRetain();
    v38._countAndFlagsBits = v36;
    v38._object = v37;
    String.append(_:)(v38);
    swift_bridgeObjectRelease();
  }
  else
  {
    v39._countAndFlagsBits = 32;
    v39._object = (void *)0xE100000000000000;
    String.append(_:)(v39);
  }
  v40._countAndFlagsBits = v33;
  v40._object = v34;
  String.append(_:)(v40);
  swift_bridgeObjectRelease();
  v41 = v0[2];
  if (v41)
  {
    v42 = __OFSUB__(v41, 1);
    v43 = v41 - 1;
    if (v42)
    {
      __break(1u);
      JUMPOUT(0x234A996A0);
    }
    v0[2] = v43;
    specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
  }
  v44._countAndFlagsBits = 41;
  v44._object = (void *)0xE100000000000000;
  String.append(_:)(v44);
  outlined consume of DisplayList.Item.Value(*(_QWORD *)(v2 - 384), v1);
  JUMPOUT(0x234A98B7CLL);
}

void sub_234A96D10()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  Swift::String v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  Swift::String v7;

  v3._countAndFlagsBits = 0x6D726F6674616C70;
  v3._object = (void *)0xED0000776569762DLL;
  SExpPrinter.push(_:)(v3);
  v4 = *(_QWORD *)(v0 + 16);
  if (v4)
  {
    v5 = __OFSUB__(v4, 1);
    v6 = v4 - 1;
    if (v5)
    {
      __break(1u);
      JUMPOUT(0x234A96D4CLL);
    }
    *(_QWORD *)(v0 + 16) = v6;
    specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
  }
  v7._countAndFlagsBits = 41;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  outlined consume of DisplayList.Item.Value(*(_QWORD *)(v2 - 384), v1);
  if (!*(_QWORD *)(v0 + 16))
    JUMPOUT(0x234A99634);
  JUMPOUT(0x234A9961CLL);
}

void sub_234A96DCC()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  Swift::String v17;
  uint64_t v18;
  void *v19;
  Swift::String v20;
  uint64_t v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;

  v3 = *(_QWORD **)(v2 - 384);
  v4 = v3[2];
  v5 = v3[5];
  v6 = v3[6];
  *(_QWORD *)(v2 - 368) = 0;
  *(_QWORD *)(v2 - 360) = 0xE000000000000000;
  outlined copy of DisplayList.Item.Value((uint64_t)v3, v1);
  swift_retain();
  swift_retain();
  _StringGuts.grow(_:)(21);
  v7 = *(_QWORD *)(v2 - 360);
  *(_QWORD *)(v2 - 368) = *(_QWORD *)(v2 - 368);
  *(_QWORD *)(v2 - 360) = v7;
  v8._countAndFlagsBits = 0x22207478657428;
  v8._object = (void *)0xE700000000000000;
  String.append(_:)(v8);
  v9 = *(void **)(v4 + 192);
  swift_retain();
  if (v9)
  {
    v10 = objc_msgSend(v9, sel_string);
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v13 = v12;

  }
  else
  {
    v11 = 0;
    v13 = (void *)0xE000000000000000;
  }
  v14._countAndFlagsBits = v11;
  v14._object = v13;
  String.append(_:)(v14);
  swift_release();
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 0x657A69733A232022;
  v15._object = (void *)0xE900000000000020;
  String.append(_:)(v15);
  v16 = v2 - 240;
  *(_QWORD *)(v16 + 48) = v5;
  *(_QWORD *)(v16 + 56) = v6;
  type metadata accessor for CGSize(0);
  _print_unlocked<A, B>(_:_:)();
  v17._countAndFlagsBits = 41;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  v18 = *(_QWORD *)(v2 - 368);
  v19 = *(void **)(v2 - 360);
  if (v0[2])
  {
    v20._countAndFlagsBits = 10;
    v20._object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    v21 = v0[3];
    v22 = (void *)v0[4];
    swift_bridgeObjectRetain();
    v23._countAndFlagsBits = v21;
    v23._object = v22;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
  }
  else
  {
    v24._countAndFlagsBits = 32;
    v24._object = (void *)0xE100000000000000;
    String.append(_:)(v24);
  }
  v25._countAndFlagsBits = v18;
  v25._object = v19;
  String.append(_:)(v25);
  outlined consume of DisplayList.Item.Value(*(_QWORD *)(v2 - 384), v1);
  swift_release();
  swift_release();
  JUMPOUT(0x234A98A60);
}

void sub_234A96E98()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  __int16 v19;
  char v20;
  int v21;
  uint64_t v22;

  v3 = *(_QWORD *)(v2 - 384);
  v4 = *(_QWORD *)(v3 + 16);
  v6 = *(double *)(v3 + 32);
  v5 = *(double *)(v3 + 40);
  outlined copy of DisplayList.Item.Value(v3, v1);
  v7._object = (void *)0xE900000000000064;
  v7._countAndFlagsBits = 0x656E657474616C66;
  SExpPrinter.push(_:)(v7);
  if (v6 != 0.0 || v5 != 0.0)
  {
    *(_QWORD *)(v2 - 368) = 0;
    *(_QWORD *)(v2 - 360) = 0xE000000000000000;
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v2 - 368) = 0x6E696769726F3A23;
    *(_QWORD *)(v2 - 360) = 0xEA00000000002820;
    v8._countAndFlagsBits = Double.description.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = 32;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    v10._countAndFlagsBits = Double.description.getter();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._countAndFlagsBits = 41;
    v11._object = (void *)0xE100000000000000;
    String.append(_:)(v11);
    v12 = *(_QWORD *)(v2 - 368);
    v13 = *(void **)(v2 - 360);
    v14._countAndFlagsBits = 32;
    v14._object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    v15._countAndFlagsBits = v12;
    v15._object = v13;
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
  }
  v16 = specialized Array._getCount()(v4);
  if (v16)
  {
    v17 = v16;
    if (v16 < 1)
      goto LABEL_13;
    swift_bridgeObjectRetain();
    v18 = (_DWORD *)(v4 + 100);
    do
    {
      v19 = *((_WORD *)v18 - 2);
      v20 = *((_BYTE *)v18 - 2);
      v21 = *v18;
      *(_OWORD *)(v2 - 368) = *(_OWORD *)(v18 - 17);
      *(_OWORD *)(v2 - 352) = *(_OWORD *)(v18 - 13);
      *(_OWORD *)(v2 - 336) = *(_OWORD *)(v18 - 9);
      *(_OWORD *)(v2 - 320) = *(_OWORD *)(v18 - 5);
      *(_BYTE *)(v2 - 302) = v20;
      *(_WORD *)(v2 - 304) = v19;
      *(_DWORD *)(v2 - 300) = v21;
      DisplayList.Item.print(into:)(v0);
      v18 += 18;
      --v17;
    }
    while (v17);
    swift_bridgeObjectRelease();
  }
  v22 = v0[2];
  if (!v22)
    JUMPOUT(0x234A98AB4);
  if (!__OFSUB__(v22, 1))
    JUMPOUT(0x234A98AA4);
  __break(1u);
LABEL_13:
  __break(1u);
  JUMPOUT(0x234A99698);
}

void sub_234A97070()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  int v6;
  Swift::String v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;

  v3 = *(_QWORD *)(v2 - 384);
  v5 = *(double *)(v3 + 24);
  v4 = *(double *)(v3 + 32);
  v6 = *(_DWORD *)(v3 + 52);
  outlined copy of DisplayList.Item.Value(v3, v1);
  v7._countAndFlagsBits = 0x676E6977617264;
  v7._object = (void *)0xE700000000000000;
  SExpPrinter.push(_:)(v7);
  if (v5 == 0.0 && v4 == 0.0)
  {
    if ((v6 & 1) == 0)
      goto LABEL_4;
  }
  else
  {
    *(_QWORD *)(v2 - 368) = 0;
    *(_QWORD *)(v2 - 360) = 0xE000000000000000;
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v2 - 368) = 0x74657366666F3A23;
    *(_QWORD *)(v2 - 360) = 0xEA00000000002820;
    v9._countAndFlagsBits = Double.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 32;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    v11._countAndFlagsBits = Double.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._countAndFlagsBits = 41;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    v13 = *(_QWORD *)(v2 - 368);
    v14 = *(void **)(v2 - 360);
    v15._countAndFlagsBits = 32;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);
    v16._countAndFlagsBits = v13;
    v16._object = v14;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    if ((v6 & 1) == 0)
    {
LABEL_4:
      if ((v6 & 0x40) == 0)
        goto LABEL_5;
      goto LABEL_9;
    }
  }
  v17._countAndFlagsBits = 32;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0x656C656363613A23;
  v18._object = (void *)0xED00006465746172;
  String.append(_:)(v18);
  if ((v6 & 0x40) == 0)
  {
LABEL_5:
    v8 = *(_QWORD *)(v0 + 16);
    if (!v8)
LABEL_14:
      JUMPOUT(0x234A98AB4);
LABEL_10:
    if (!__OFSUB__(v8, 1))
      JUMPOUT(0x234A98AA4);
    __break(1u);
    JUMPOUT(0x234A982C0);
  }
LABEL_9:
  v19._countAndFlagsBits = 32;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 0x2D6168706C613A23;
  v20._object = (void *)0xEC000000796C6E6FLL;
  String.append(_:)(v20);
  v8 = *(_QWORD *)(v0 + 16);
  if (!v8)
    goto LABEL_14;
  goto LABEL_10;
}

void sub_234A970D4()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;

  v3 = *(_QWORD *)(v2 - 384);
  outlined init with copy of AnyTrackedValue((v3 & 0xFFFFFFFFFFFFFFFLL) + 16, v2 - 368);
  v4 = v2 - 240;
  strcpy((char *)(v2 - 192), "view #:type ");
  *(_BYTE *)(v4 + 61) = 0;
  *(_WORD *)(v4 + 62) = -5120;
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v2 - 368), *(_QWORD *)(v2 - 344));
  swift_getDynamicType();
  outlined copy of DisplayList.Item.Value(v3, v1);
  v5._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  SExpPrinter.push(_:)(*(Swift::String *)(v2 - 192));
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v0 + 16);
  if (v6)
  {
    v7 = __OFSUB__(v6, 1);
    v8 = v6 - 1;
    if (v7)
    {
      __break(1u);
      JUMPOUT(0x234A9969CLL);
    }
    *(_QWORD *)(v0 + 16) = v8;
    specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
  }
  v9._countAndFlagsBits = 41;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  v10 = *(_QWORD *)(v2 - 384);
  outlined consume of DisplayList.Item.Value(v10, v1);
  __swift_destroy_boxed_opaque_existential_1(v2 - 368);
  outlined consume of DisplayList.Item.Value(v10, v1);
  if (!*(_QWORD *)(v0 + 16))
    JUMPOUT(0x234A99634);
  JUMPOUT(0x234A9961CLL);
}

void sub_234A971E4()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  void *v7;
  Swift::String v8;
  uint64_t v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;

  *(_QWORD *)(v2 - 368) = 0;
  *(_QWORD *)(v2 - 360) = 0xE000000000000000;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)(v2 - 368), "(placeholder ");
  *(_WORD *)(v2 - 354) = -4864;
  v3 = v2 - 240;
  *(_QWORD *)(v3 + 48) = 35;
  *(_QWORD *)(v3 + 56) = 0xE100000000000000;
  *(_DWORD *)(v2 - 240) = *(_QWORD *)(v2 - 384);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  String.append(_:)(*(Swift::String *)(v2 - 192));
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 41;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  v6 = *(_QWORD *)(v2 - 368);
  v7 = *(void **)(v2 - 360);
  if (v0[2])
  {
    v8._countAndFlagsBits = 10;
    v8._object = (void *)0xE100000000000000;
    String.append(_:)(v8);
    v9 = v0[3];
    v10 = (void *)v0[4];
    swift_bridgeObjectRetain();
    v11._countAndFlagsBits = v9;
    v11._object = v10;
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
  }
  else
  {
    v12._countAndFlagsBits = 32;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
  }
  v13._countAndFlagsBits = v6;
  v13._object = v7;
  String.append(_:)(v13);
  outlined consume of DisplayList.Item.Value(*(_QWORD *)(v2 - 384), v1);
  swift_bridgeObjectRelease();
  if (!v0[2])
    JUMPOUT(0x234A99634);
  JUMPOUT(0x234A9961CLL);
}

void sub_234A972FC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  Swift::String v13;
  uint64_t v14;
  void *v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  __int16 v22;
  char v23;
  int v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;

  v7 = swift_projectBox();
  v8 = *(_QWORD *)(v6 - 400);
  outlined init with copy of DisplayList.ArchiveIDs?(v7, v8);
  outlined init with copy of DisplayList.ArchiveIDs?(v8, v2);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v2, 1, v5) == 1)
  {
    v9 = (void *)0xE300000000000000;
    v10 = 7104878;
  }
  else
  {
    v11 = *(_QWORD *)(v6 - 416);
    outlined init with take of DisplayList.ArchiveIDs(v2, v11);
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type UUID and conformance UUID();
    v10 = dispatch thunk of CustomStringConvertible.description.getter();
    v9 = v12;
    outlined destroy of TypesettingConfiguration(v11, (uint64_t (*)(_QWORD))type metadata accessor for DisplayList.ArchiveIDs);
  }
  *(_QWORD *)(v6 - 368) = 0x7669686372613A23;
  *(_QWORD *)(v6 - 360) = 0xEA00000000002065;
  v13._countAndFlagsBits = v10;
  v13._object = v9;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(v6 - 368);
  v15 = *(void **)(v6 - 360);
  v16._countAndFlagsBits = 32;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = v14;
  v17._object = v15;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  outlined destroy of TypesettingConfiguration(*(_QWORD *)(v6 - 400), (uint64_t (*)(_QWORD))type metadata accessor for DisplayList.ArchiveIDs?);
  v18 = *(_QWORD *)(v6 - 464);
  v19 = specialized Array._getCount()(v18);
  if (!v19)
  {
    swift_bridgeObjectRelease();
    v25 = v0[2];
    if (!v25)
      goto LABEL_13;
    goto LABEL_11;
  }
  v20 = v19;
  if (v19 < 1)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  swift_bridgeObjectRetain();
  v21 = (_DWORD *)(v18 + 100);
  do
  {
    v22 = *((_WORD *)v21 - 2);
    v23 = *((_BYTE *)v21 - 2);
    v24 = *v21;
    *(_OWORD *)(v6 - 368) = *(_OWORD *)(v21 - 17);
    *(_OWORD *)(v6 - 352) = *(_OWORD *)(v21 - 13);
    *(_OWORD *)(v6 - 336) = *(_OWORD *)(v21 - 9);
    *(_OWORD *)(v6 - 320) = *(_OWORD *)(v21 - 5);
    *(_BYTE *)(v6 - 302) = v23;
    *(_WORD *)(v6 - 304) = v22;
    *(_DWORD *)(v6 - 300) = v24;
    DisplayList.Item.print(into:)(v0);
    v21 += 18;
    --v20;
  }
  while (v20);
  swift_bridgeObjectRelease_n();
  v25 = v0[2];
  if (v25)
  {
LABEL_11:
    v26 = __OFSUB__(v25, 1);
    v27 = v25 - 1;
    if (v26)
    {
LABEL_19:
      __break(1u);
      JUMPOUT(0x234A99688);
    }
    v0[2] = v27;
    specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
  }
LABEL_13:
  v28._countAndFlagsBits = 41;
  v28._object = (void *)0xE100000000000000;
  String.append(_:)(v28);
  outlined consume of DisplayList.Effect(*(_QWORD *)(v6 - 384), v4, v3);
  v29 = v0[2];
  if (v29)
  {
    v26 = __OFSUB__(v29, 1);
    v30 = v29 - 1;
    if (!v26)
    {
      v0[2] = v30;
      specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
      goto LABEL_16;
    }
    __break(1u);
    goto LABEL_18;
  }
LABEL_16:
  v31._countAndFlagsBits = 41;
  v31._object = (void *)0xE100000000000000;
  String.append(_:)(v31);
}

void sub_234A97350()
{
  _QWORD *v0;
  char v1;
  char v2;
  uint64_t v3;
  char v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  __int16 v25;
  char v26;
  int v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  Swift::String v34;

  v4 = *(_QWORD *)(v3 - 384);
  if ((*(_QWORD *)(v3 - 384) & 1) != 0)
  {
    v5._countAndFlagsBits = 32;
    v5._object = (void *)0xE100000000000000;
    String.append(_:)(v5);
    v6._countAndFlagsBits = 0xD000000000000012;
    v6._object = (void *)0x80000002352DEE50;
    String.append(_:)(v6);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_QWORD *)(v3 - 384) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  v7._countAndFlagsBits = 32;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  v8._countAndFlagsBits = 0xD000000000000014;
  v8._object = (void *)0x80000002352DEE30;
  String.append(_:)(v8);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  v9._countAndFlagsBits = 32;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 0xD000000000000013;
  v10._object = (void *)0x80000002352DEE10;
  String.append(_:)(v10);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  v11._countAndFlagsBits = 32;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  v12._countAndFlagsBits = 0xD000000000000015;
  v12._object = (void *)0x80000002352DEDF0;
  String.append(_:)(v12);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  v13._countAndFlagsBits = 32;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  v14._object = (void *)0x80000002352DEDD0;
  v14._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v14);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0)
      goto LABEL_8;
LABEL_16:
    v17._countAndFlagsBits = 32;
    v17._object = (void *)0xE100000000000000;
    String.append(_:)(v17);
    v18._countAndFlagsBits = 0xD00000000000001FLL;
    v18._object = (void *)0x80000002352DED90;
    String.append(_:)(v18);
    if ((v4 & 0x80) == 0)
      goto LABEL_18;
    goto LABEL_17;
  }
LABEL_15:
  v15._countAndFlagsBits = 32;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0xD000000000000013;
  v16._object = (void *)0x80000002352DEDB0;
  String.append(_:)(v16);
  if ((v4 & 8) != 0)
    goto LABEL_16;
LABEL_8:
  if ((v4 & 0x80) == 0)
    goto LABEL_18;
LABEL_17:
  v19._countAndFlagsBits = 32;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 0xD00000000000001ALL;
  v20._object = (void *)0x80000002352DED70;
  String.append(_:)(v20);
LABEL_18:
  v21 = *(_QWORD *)(v3 - 464);
  v22 = specialized Array._getCount()(v21);
  if (!v22)
  {
    swift_bridgeObjectRelease();
    v28 = v0[2];
    if (!v28)
      goto LABEL_27;
    goto LABEL_25;
  }
  v23 = v22;
  if (v22 < 1)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  swift_bridgeObjectRetain();
  v24 = (_DWORD *)(v21 + 100);
  do
  {
    v25 = *((_WORD *)v24 - 2);
    v26 = *((_BYTE *)v24 - 2);
    v27 = *v24;
    *(_OWORD *)(v3 - 368) = *(_OWORD *)(v24 - 17);
    *(_OWORD *)(v3 - 352) = *(_OWORD *)(v24 - 13);
    *(_OWORD *)(v3 - 336) = *(_OWORD *)(v24 - 9);
    *(_OWORD *)(v3 - 320) = *(_OWORD *)(v24 - 5);
    *(_BYTE *)(v3 - 302) = v26;
    *(_WORD *)(v3 - 304) = v25;
    *(_DWORD *)(v3 - 300) = v27;
    DisplayList.Item.print(into:)(v0);
    v24 += 18;
    --v23;
  }
  while (v23);
  swift_bridgeObjectRelease_n();
  v28 = v0[2];
  if (v28)
  {
LABEL_25:
    v29 = __OFSUB__(v28, 1);
    v30 = v28 - 1;
    if (v29)
    {
LABEL_33:
      __break(1u);
      JUMPOUT(0x234A99688);
    }
    v0[2] = v30;
    specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
  }
LABEL_27:
  v31._countAndFlagsBits = 41;
  v31._object = (void *)0xE100000000000000;
  String.append(_:)(v31);
  outlined consume of DisplayList.Effect(*(_QWORD *)(v3 - 384), v2, v1);
  v32 = v0[2];
  if (v32)
  {
    v29 = __OFSUB__(v32, 1);
    v33 = v32 - 1;
    if (!v29)
    {
      v0[2] = v33;
      specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
      goto LABEL_30;
    }
    __break(1u);
    goto LABEL_32;
  }
LABEL_30:
  v34._countAndFlagsBits = 41;
  v34._object = (void *)0xE100000000000000;
  String.append(_:)(v34);
}

void sub_234A97388()
{
  Swift::String v0;
  Swift::String v1;

  v0._countAndFlagsBits = 32;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
  v1._object = (void *)0x80000002352DEE90;
  v1._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v1);
  JUMPOUT(0x234A99518);
}

void sub_234A973A4()
{
  uint64_t v0;
  Swift::String v1;

  *(_QWORD *)(v0 - 368) = 0;
  *(_QWORD *)(v0 - 360) = 0xE000000000000000;
  v1._object = (void *)0xEA00000000002079;
  v1._countAndFlagsBits = 0x74696361706F3A23;
  String.append(_:)(v1);
  Float.write<A>(to:)();
  JUMPOUT(0x234A97404);
}

void sub_234A9743C()
{
  _QWORD *v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  uint64_t v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  __int16 v14;
  char v15;
  int v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;

  *(_QWORD *)(v3 - 368) = 0;
  *(_QWORD *)(v3 - 360) = 0xE000000000000000;
  v4 = *(_QWORD *)(v3 - 384);
  outlined copy of DisplayList.Effect(v4, v2, 5);
  v5._countAndFlagsBits = 0x2D646E656C623A23;
  v5._object = (void *)0xED00002065646F6DLL;
  String.append(_:)(v5);
  *(_QWORD *)(v3 - 192) = v4;
  *(_BYTE *)(v3 - 184) = v2 & 1;
  _print_unlocked<A, B>(_:_:)();
  v6 = *(_QWORD *)(v3 - 368);
  v7 = *(void **)(v3 - 360);
  v8._countAndFlagsBits = 32;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  v9._countAndFlagsBits = v6;
  v9._object = v7;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  outlined consume of DisplayList.Effect(v4, v2, 5);
  v10 = *(_QWORD *)(v3 - 464);
  v11 = specialized Array._getCount()(v10);
  if (!v11)
  {
    swift_bridgeObjectRelease();
    v17 = v0[2];
    if (!v17)
      goto LABEL_10;
    goto LABEL_8;
  }
  v12 = v11;
  if (v11 < 1)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  v13 = (_DWORD *)(v10 + 100);
  do
  {
    v14 = *((_WORD *)v13 - 2);
    v15 = *((_BYTE *)v13 - 2);
    v16 = *v13;
    *(_OWORD *)(v3 - 368) = *(_OWORD *)(v13 - 17);
    *(_OWORD *)(v3 - 352) = *(_OWORD *)(v13 - 13);
    *(_OWORD *)(v3 - 336) = *(_OWORD *)(v13 - 9);
    *(_OWORD *)(v3 - 320) = *(_OWORD *)(v13 - 5);
    *(_BYTE *)(v3 - 302) = v15;
    *(_WORD *)(v3 - 304) = v14;
    *(_DWORD *)(v3 - 300) = v16;
    DisplayList.Item.print(into:)(v0);
    v13 += 18;
    --v12;
  }
  while (v12);
  swift_bridgeObjectRelease_n();
  v17 = v0[2];
  if (v17)
  {
LABEL_8:
    v18 = __OFSUB__(v17, 1);
    v19 = v17 - 1;
    if (v18)
    {
LABEL_16:
      __break(1u);
      JUMPOUT(0x234A99688);
    }
    v0[2] = v19;
    specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
  }
LABEL_10:
  v20._countAndFlagsBits = 41;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  outlined consume of DisplayList.Effect(*(_QWORD *)(v3 - 384), v2, v1);
  v21 = v0[2];
  if (v21)
  {
    v18 = __OFSUB__(v21, 1);
    v22 = v21 - 1;
    if (!v18)
    {
      v0[2] = v22;
      specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
      goto LABEL_13;
    }
    __break(1u);
    goto LABEL_15;
  }
LABEL_13:
  v23._countAndFlagsBits = 41;
  v23._object = (void *)0xE100000000000000;
  String.append(_:)(v23);
}

void sub_234A9750C()
{
  _QWORD *v0;
  char v1;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  __int128 v6;
  _OWORD *v7;
  char v8;
  char v9;
  int v10;
  Swift::String v11;
  const CGPath *v12;
  const CGPath *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  void *v21;
  Swift::String v22;
  uint64_t v23;
  void *v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;
  void *v31;
  Swift::String v32;
  uint64_t v33;
  void *v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  uint64_t v40;
  void *v41;
  Swift::String v42;
  uint64_t v43;
  void *v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  Swift::String v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  __int16 v56;
  char v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  Swift::String v61;
  uint64_t v62;
  uint64_t v63;
  Swift::String v64;

  v4 = v1;
  v5 = *(_QWORD *)(v3 - 384);
  v6 = *(_OWORD *)(v5 + 32);
  v7 = (_OWORD *)(v3 - 240);
  *v7 = *(_OWORD *)(v5 + 16);
  v7[1] = v6;
  *(_BYTE *)(v3 - 208) = *(_BYTE *)(v5 + 48);
  v8 = *(_BYTE *)(v5 + 49);
  v9 = *(_BYTE *)(v5 + 50);
  v10 = *(_DWORD *)(v5 + 52);
  outlined init with take of Path.Storage(v3 - 240, v3 - 192);
  outlined retain of Path.Storage(v3 - 192, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
  v11._countAndFlagsBits = 1885957219;
  v11._object = (void *)0xE400000000000000;
  SExpPrinter.push(_:)(v11);
  *(_QWORD *)(v3 - 368) = 0x206874617028;
  *(_QWORD *)(v3 - 360) = 0xE600000000000000;
  Path.cgPath.getter();
  v13 = v12;
  v14 = (void *)_CGPathCopyDescription(v12, 0.0);

  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v17 = v16;

  v18._countAndFlagsBits = v15;
  v18._object = v17;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 41;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  v20 = *(_QWORD *)(v3 - 368);
  v21 = *(void **)(v3 - 360);
  if (v0[2])
  {
    v22._countAndFlagsBits = 10;
    v22._object = (void *)0xE100000000000000;
    String.append(_:)(v22);
    v23 = v0[3];
    v24 = (void *)v0[4];
    swift_bridgeObjectRetain();
    v25._countAndFlagsBits = v23;
    v25._object = v24;
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
  }
  else
  {
    v26._countAndFlagsBits = 32;
    v26._object = (void *)0xE100000000000000;
    String.append(_:)(v26);
  }
  v27._countAndFlagsBits = v20;
  v27._object = v21;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 - 368) = 0;
  *(_QWORD *)(v3 - 360) = 0xE000000000000000;
  v28._countAndFlagsBits = 0x20656C79747328;
  v28._object = (void *)0xE700000000000000;
  String.append(_:)(v28);
  *(_BYTE *)(v3 - 372) = v8;
  *(_BYTE *)(v3 - 371) = v9;
  _print_unlocked<A, B>(_:_:)();
  v29._countAndFlagsBits = 41;
  v29._object = (void *)0xE100000000000000;
  String.append(_:)(v29);
  v30 = *(_QWORD *)(v3 - 368);
  v31 = *(void **)(v3 - 360);
  if (v0[2])
  {
    v32._countAndFlagsBits = 10;
    v32._object = (void *)0xE100000000000000;
    String.append(_:)(v32);
    v33 = v0[3];
    v34 = (void *)v0[4];
    swift_bridgeObjectRetain();
    v35._countAndFlagsBits = v33;
    v35._object = v34;
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
  }
  else
  {
    v36._countAndFlagsBits = 32;
    v36._object = (void *)0xE100000000000000;
    String.append(_:)(v36);
  }
  v37._countAndFlagsBits = v30;
  v37._object = v31;
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  if (v10)
  {
    *(_QWORD *)(v3 - 368) = 0;
    *(_QWORD *)(v3 - 360) = 0xE000000000000000;
    v38._countAndFlagsBits = 0x736E6F6974706F28;
    v38._object = (void *)0xE900000000000020;
    String.append(_:)(v38);
    *(_DWORD *)(v3 - 372) = v10;
    _print_unlocked<A, B>(_:_:)();
    v39._countAndFlagsBits = 41;
    v39._object = (void *)0xE100000000000000;
    String.append(_:)(v39);
    v40 = *(_QWORD *)(v3 - 368);
    v41 = *(void **)(v3 - 360);
    if (v0[2])
    {
      v42._countAndFlagsBits = 10;
      v42._object = (void *)0xE100000000000000;
      String.append(_:)(v42);
      v43 = v0[3];
      v44 = (void *)v0[4];
      swift_bridgeObjectRetain();
      v45._countAndFlagsBits = v43;
      v45._object = v44;
      String.append(_:)(v45);
      swift_bridgeObjectRelease();
    }
    else
    {
      v46._countAndFlagsBits = 32;
      v46._object = (void *)0xE100000000000000;
      String.append(_:)(v46);
    }
    v47._countAndFlagsBits = v40;
    v47._object = v41;
    String.append(_:)(v47);
    swift_bridgeObjectRelease();
  }
  v48 = v0[2];
  if (v48)
  {
    v49 = __OFSUB__(v48, 1);
    v50 = v48 - 1;
    if (v49)
    {
      __break(1u);
      JUMPOUT(0x234A996BCLL);
    }
    v0[2] = v50;
    specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
  }
  v51._countAndFlagsBits = 41;
  v51._object = (void *)0xE100000000000000;
  String.append(_:)(v51);
  outlined retain of Path.Storage(v3 - 240, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  v52 = *(_QWORD *)(v3 - 464);
  v53 = specialized Array._getCount()(v52);
  if (!v53)
  {
    swift_bridgeObjectRelease();
    v59 = v0[2];
    if (!v59)
      goto LABEL_24;
    goto LABEL_22;
  }
  v54 = v53;
  if (v53 < 1)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  swift_bridgeObjectRetain();
  v55 = (_DWORD *)(v52 + 100);
  do
  {
    v56 = *((_WORD *)v55 - 2);
    v57 = *((_BYTE *)v55 - 2);
    v58 = *v55;
    *(_OWORD *)(v3 - 368) = *(_OWORD *)(v55 - 17);
    *(_OWORD *)(v3 - 352) = *(_OWORD *)(v55 - 13);
    *(_OWORD *)(v3 - 336) = *(_OWORD *)(v55 - 9);
    *(_OWORD *)(v3 - 320) = *(_OWORD *)(v55 - 5);
    *(_BYTE *)(v3 - 302) = v57;
    *(_WORD *)(v3 - 304) = v56;
    *(_DWORD *)(v3 - 300) = v58;
    DisplayList.Item.print(into:)(v0);
    v55 += 18;
    --v54;
  }
  while (v54);
  swift_bridgeObjectRelease_n();
  v59 = v0[2];
  if (v59)
  {
LABEL_22:
    v49 = __OFSUB__(v59, 1);
    v60 = v59 - 1;
    if (v49)
    {
LABEL_30:
      __break(1u);
      JUMPOUT(0x234A99688);
    }
    v0[2] = v60;
    specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
  }
LABEL_24:
  v61._countAndFlagsBits = 41;
  v61._object = (void *)0xE100000000000000;
  String.append(_:)(v61);
  outlined consume of DisplayList.Effect(*(_QWORD *)(v3 - 384), v2, v4);
  v62 = v0[2];
  if (v62)
  {
    v49 = __OFSUB__(v62, 1);
    v63 = v62 - 1;
    if (!v49)
    {
      v0[2] = v63;
      specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
      goto LABEL_27;
    }
    __break(1u);
    goto LABEL_29;
  }
LABEL_27:
  v64._countAndFlagsBits = 41;
  v64._object = (void *)0xE100000000000000;
  String.append(_:)(v64);
}

void sub_234A9762C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  void *v9;
  Swift::String v10;
  uint64_t v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  __int16 v19;
  char v20;
  int v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v2 = *(_QWORD *)(v1 - 384);
  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_DWORD *)(v2 + 28);
  v5._countAndFlagsBits = 1802723693;
  v5._object = (void *)0xE400000000000000;
  SExpPrinter.push(_:)(v5);
  if (v4)
  {
    *(_QWORD *)(v1 - 368) = 0;
    *(_QWORD *)(v1 - 360) = 0xE000000000000000;
    v6._countAndFlagsBits = 0x736E6F6974706F28;
    v6._object = (void *)0xE900000000000020;
    String.append(_:)(v6);
    *(_DWORD *)(v1 - 192) = v4;
    _print_unlocked<A, B>(_:_:)();
    v7._countAndFlagsBits = 41;
    v7._object = (void *)0xE100000000000000;
    String.append(_:)(v7);
    v8 = *(_QWORD *)(v1 - 368);
    v9 = *(void **)(v1 - 360);
    if (v0[2])
    {
      v10._countAndFlagsBits = 10;
      v10._object = (void *)0xE100000000000000;
      String.append(_:)(v10);
      v11 = v0[3];
      v12 = (void *)v0[4];
      swift_bridgeObjectRetain();
      v13._countAndFlagsBits = v11;
      v13._object = v12;
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
    }
    else
    {
      v14._countAndFlagsBits = 32;
      v14._object = (void *)0xE100000000000000;
      String.append(_:)(v14);
    }
    v15._countAndFlagsBits = v8;
    v15._object = v9;
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
  }
  v16 = specialized Array._getCount()(v3);
  if (v16)
  {
    v17 = v16;
    if (v16 < 1)
    {
      __break(1u);
      JUMPOUT(0x234A996B8);
    }
    swift_bridgeObjectRetain();
    v18 = (_DWORD *)(v3 + 100);
    do
    {
      v19 = *((_WORD *)v18 - 2);
      v20 = *((_BYTE *)v18 - 2);
      v21 = *v18;
      *(_OWORD *)(v1 - 368) = *(_OWORD *)(v18 - 17);
      *(_OWORD *)(v1 - 352) = *(_OWORD *)(v18 - 13);
      *(_OWORD *)(v1 - 336) = *(_OWORD *)(v18 - 9);
      *(_OWORD *)(v1 - 320) = *(_OWORD *)(v18 - 5);
      *(_BYTE *)(v1 - 302) = v20;
      *(_WORD *)(v1 - 304) = v19;
      *(_DWORD *)(v1 - 300) = v21;
      DisplayList.Item.print(into:)(v0);
      v18 += 18;
      --v17;
    }
    while (v17);
    swift_bridgeObjectRelease();
  }
  v22 = v0[2];
  if (v22)
  {
    v23 = __OFSUB__(v22, 1);
    v24 = v22 - 1;
    if (v23)
    {
      __break(1u);
      JUMPOUT(0x234A991CCLL);
    }
    v0[2] = v24;
    specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
  }
  JUMPOUT(0x234A99514);
}

void sub_234A9770C()
{
  _QWORD *v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  Swift::String v7;
  uint64_t v8;
  Swift::String v9;
  void *v10;
  uint64_t v11;
  Swift::String v12;
  uint64_t v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  __int16 v22;
  char v23;
  int v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;

  v4 = *(_QWORD *)(v3 - 384);
  *(_OWORD *)(v3 - 400) = *(_OWORD *)(v4 + 16);
  *(_OWORD *)(v3 - 416) = *(_OWORD *)(v4 + 32);
  *(_OWORD *)(v3 - 432) = *(_OWORD *)(v4 + 48);
  *(_OWORD *)(v3 - 448) = *(_OWORD *)(v4 + 64);
  v5 = *(_QWORD *)(v4 + 80);
  v6 = *(_BYTE *)(v4 + 88);
  v7._object = (void *)0xEB00000000206D72;
  v8 = v3 - 240;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 56) = 0xE000000000000000;
  v7._countAndFlagsBits = 0x6F66736E61727428;
  String.append(_:)(v7);
  *(_OWORD *)(v3 - 368) = *(_OWORD *)(v3 - 400);
  *(_OWORD *)(v3 - 352) = *(_OWORD *)(v3 - 416);
  *(_OWORD *)(v3 - 336) = *(_OWORD *)(v3 - 432);
  *(_OWORD *)(v3 - 320) = *(_OWORD *)(v3 - 448);
  *(_QWORD *)(v3 - 304) = v5;
  *(_BYTE *)(v3 - 296) = v6;
  _print_unlocked<A, B>(_:_:)();
  v9._countAndFlagsBits = 41;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  v11 = *(_QWORD *)(v3 - 192);
  v10 = *(void **)(v3 - 184);
  if (v0[2])
  {
    v12._countAndFlagsBits = 10;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    v13 = v0[3];
    v14 = (void *)v0[4];
    swift_bridgeObjectRetain();
    v15._countAndFlagsBits = v13;
    v15._object = v14;
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
  }
  else
  {
    v16._countAndFlagsBits = 32;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
  }
  v17._countAndFlagsBits = v11;
  v17._object = v10;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18 = *(_QWORD *)(v3 - 464);
  v19 = specialized Array._getCount()(v18);
  if (!v19)
  {
    swift_bridgeObjectRelease();
    v25 = v0[2];
    if (!v25)
      goto LABEL_13;
    goto LABEL_11;
  }
  v20 = v19;
  if (v19 < 1)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  swift_bridgeObjectRetain();
  v21 = (_DWORD *)(v18 + 100);
  do
  {
    v22 = *((_WORD *)v21 - 2);
    v23 = *((_BYTE *)v21 - 2);
    v24 = *v21;
    *(_OWORD *)(v3 - 368) = *(_OWORD *)(v21 - 17);
    *(_OWORD *)(v3 - 352) = *(_OWORD *)(v21 - 13);
    *(_OWORD *)(v3 - 336) = *(_OWORD *)(v21 - 9);
    *(_OWORD *)(v3 - 320) = *(_OWORD *)(v21 - 5);
    *(_BYTE *)(v3 - 302) = v23;
    *(_WORD *)(v3 - 304) = v22;
    *(_DWORD *)(v3 - 300) = v24;
    DisplayList.Item.print(into:)(v0);
    v21 += 18;
    --v20;
  }
  while (v20);
  swift_bridgeObjectRelease_n();
  v25 = v0[2];
  if (v25)
  {
LABEL_11:
    v26 = __OFSUB__(v25, 1);
    v27 = v25 - 1;
    if (v26)
    {
LABEL_19:
      __break(1u);
      JUMPOUT(0x234A99688);
    }
    v0[2] = v27;
    specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
  }
LABEL_13:
  v28._countAndFlagsBits = 41;
  v28._object = (void *)0xE100000000000000;
  String.append(_:)(v28);
  outlined consume of DisplayList.Effect(*(_QWORD *)(v3 - 384), v2, v1);
  v29 = v0[2];
  if (v29)
  {
    v26 = __OFSUB__(v29, 1);
    v30 = v29 - 1;
    if (!v26)
    {
      v0[2] = v30;
      specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
      goto LABEL_16;
    }
    __break(1u);
    goto LABEL_18;
  }
LABEL_16:
  v31._countAndFlagsBits = 41;
  v31._object = (void *)0xE100000000000000;
  String.append(_:)(v31);
}

void sub_234A97844()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  Swift::String v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  __int16 v41;
  char v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  Swift::String v46;
  uint64_t v47;
  uint64_t v48;
  Swift::String v49;

  *(_QWORD *)(v2 - 400) = v1;
  v3 = *(_QWORD *)(v2 - 384);
  v5 = *(void **)(v3 + 16);
  v4 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(v2 - 504) = v4;
  v6 = *(void **)(v3 + 32);
  v7 = *(_QWORD *)(v3 + 40);
  *(_QWORD *)(v2 - 488) = v6;
  *(_QWORD *)(v2 - 496) = v7;
  v8 = *(_QWORD *)(v3 + 48);
  v9 = *(_QWORD *)(v3 + 56);
  *(_QWORD *)(v2 - 416) = v8;
  v10 = *(_QWORD *)(v3 + 64);
  v11 = *(_QWORD *)(v3 + 72);
  v12 = *(_QWORD *)(v3 + 80);
  v13 = *(_QWORD *)(v3 + 88);
  *(_QWORD *)(v2 - 472) = v12;
  v14 = *(_QWORD *)(v3 + 96);
  v15 = *(_QWORD *)(v3 + 104);
  *(_QWORD *)(v2 - 456) = v14;
  v16 = *(_QWORD *)(v3 + 112);
  v17 = *(_QWORD *)(v3 + 120);
  *(_QWORD *)(v2 - 448) = v16;
  v18 = *(_DWORD *)(v3 + 128);
  *(_DWORD *)(v2 - 432) = v18;
  v19 = *(unsigned __int8 *)(v3 + 132);
  outlined copy of GraphicsFilter(v5, v4, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, SBYTE2(v18));
  v20._countAndFlagsBits = 0x7265746C6966;
  v20._object = (void *)0xE600000000000000;
  SExpPrinter.push(_:)(v20);
  *(_QWORD *)(v2 - 512) = v5;
  *(_QWORD *)(v2 - 368) = v5;
  v21 = *(_QWORD *)(v2 - 472);
  v22 = v11;
  v23 = v10;
  v24 = v9;
  v25 = *(_QWORD *)(v2 - 496);
  v26 = *(void **)(v2 - 488);
  v27 = *(_QWORD *)(v2 - 504);
  *(_QWORD *)(v2 - 360) = v27;
  *(_QWORD *)(v2 - 352) = v26;
  *(_QWORD *)(v2 - 344) = v25;
  *(_QWORD *)(v2 - 336) = *(_QWORD *)(v2 - 416);
  *(_QWORD *)(v2 - 560) = v24;
  *(_QWORD *)(v2 - 328) = v24;
  *(_QWORD *)(v2 - 544) = v23;
  *(_QWORD *)(v2 - 320) = v23;
  *(_QWORD *)(v2 - 528) = v22;
  *(_QWORD *)(v2 - 312) = v22;
  *(_QWORD *)(v2 - 304) = v21;
  *(_QWORD *)(v2 - 520) = v13;
  *(_QWORD *)(v2 - 296) = v13;
  v28 = *(_QWORD *)(v2 - 456);
  *(_QWORD *)(v2 - 288) = v28;
  *(_QWORD *)(v2 - 536) = v15;
  *(_QWORD *)(v2 - 280) = v15;
  v29 = *(_QWORD *)(v2 - 448);
  *(_QWORD *)(v2 - 272) = v29;
  *(_QWORD *)(v2 - 552) = v17;
  *(_QWORD *)(v2 - 264) = v17;
  v30 = *(_DWORD *)(v2 - 432);
  *(_DWORD *)(v2 - 256) = v30;
  *(_DWORD *)(v2 - 564) = v19;
  *(_BYTE *)(v2 - 252) = v19;
  GraphicsFilter.print(into:)();
  v31 = v0[2];
  if (v31)
  {
    v32 = __OFSUB__(v31, 1);
    v33 = v31 - 1;
    if (v32)
    {
      __break(1u);
      JUMPOUT(0x234A996ACLL);
    }
    v0[2] = v33;
    specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
  }
  v34._countAndFlagsBits = 41;
  v34._object = (void *)0xE100000000000000;
  String.append(_:)(v34);
  outlined consume of GraphicsFilter(*(void **)(v2 - 512), v27, v26, v25, *(_QWORD *)(v2 - 416), *(_QWORD *)(v2 - 560), *(_QWORD *)(v2 - 544), *(_QWORD *)(v2 - 528), v21, *(_QWORD *)(v2 - 520), v28, *(_QWORD *)(v2 - 536), v29, *(_QWORD *)(v2 - 552), v30, SBYTE2(v30));
  v35 = *(_QWORD *)(v2 - 480);
  v36 = *(_QWORD *)(v2 - 400);
  v37 = *(_QWORD *)(v2 - 464);
  v38 = specialized Array._getCount()(v37);
  if (!v38)
  {
    swift_bridgeObjectRelease();
    v44 = v0[2];
    if (!v44)
      goto LABEL_13;
    goto LABEL_11;
  }
  v39 = v38;
  if (v38 < 1)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  swift_bridgeObjectRetain();
  v40 = (_DWORD *)(v37 + 100);
  do
  {
    v41 = *((_WORD *)v40 - 2);
    v42 = *((_BYTE *)v40 - 2);
    v43 = *v40;
    *(_OWORD *)(v2 - 368) = *(_OWORD *)(v40 - 17);
    *(_OWORD *)(v2 - 352) = *(_OWORD *)(v40 - 13);
    *(_OWORD *)(v2 - 336) = *(_OWORD *)(v40 - 9);
    *(_OWORD *)(v2 - 320) = *(_OWORD *)(v40 - 5);
    *(_BYTE *)(v2 - 302) = v42;
    *(_WORD *)(v2 - 304) = v41;
    *(_DWORD *)(v2 - 300) = v43;
    DisplayList.Item.print(into:)(v0);
    v40 += 18;
    --v39;
  }
  while (v39);
  swift_bridgeObjectRelease_n();
  v44 = v0[2];
  if (v44)
  {
LABEL_11:
    v32 = __OFSUB__(v44, 1);
    v45 = v44 - 1;
    if (v32)
    {
LABEL_19:
      __break(1u);
      JUMPOUT(0x234A99688);
    }
    v0[2] = v45;
    specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
  }
LABEL_13:
  v46._countAndFlagsBits = 41;
  v46._object = (void *)0xE100000000000000;
  String.append(_:)(v46);
  outlined consume of DisplayList.Effect(*(_QWORD *)(v2 - 384), v35, v36);
  v47 = v0[2];
  if (v47)
  {
    v32 = __OFSUB__(v47, 1);
    v48 = v47 - 1;
    if (!v32)
    {
      v0[2] = v48;
      specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
      goto LABEL_16;
    }
    __break(1u);
    goto LABEL_18;
  }
LABEL_16:
  v49._countAndFlagsBits = 41;
  v49._object = (void *)0xE100000000000000;
  String.append(_:)(v49);
}

void sub_234A97ABC()
{
  _QWORD *v0;
  char v1;
  char v2;
  uint64_t v3;
  Swift::String v4;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  void *v8;
  uint64_t v9;
  Swift::String v10;
  uint64_t v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  __int16 v24;
  char v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String v32;

  outlined init with copy of AnyTrackedValue(*(_QWORD *)(v3 - 384) + 16, v3 - 368);
  v4._object = (void *)0xE90000000000006ELL;
  v4._countAndFlagsBits = 0x6F6974616D696E61;
  SExpPrinter.push(_:)(v4);
  v5 = v3 - 240;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = 0xE000000000000000;
  v6._countAndFlagsBits = 0x6974616D696E6128;
  v6._object = (void *)0xEB00000000206E6FLL;
  String.append(_:)(v6);
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation);
  _print_unlocked<A, B>(_:_:)();
  v7._countAndFlagsBits = 41;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  v9 = *(_QWORD *)(v3 - 192);
  v8 = *(void **)(v3 - 184);
  if (v0[2])
  {
    v10._countAndFlagsBits = 10;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    v11 = v0[3];
    v12 = (void *)v0[4];
    swift_bridgeObjectRetain();
    v13._countAndFlagsBits = v11;
    v13._object = v12;
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
  }
  else
  {
    v14._countAndFlagsBits = 32;
    v14._object = (void *)0xE100000000000000;
    String.append(_:)(v14);
  }
  v15._countAndFlagsBits = v9;
  v15._object = v8;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16 = v0[2];
  if (v16)
  {
    v17 = __OFSUB__(v16, 1);
    v18 = v16 - 1;
    if (v17)
    {
      __break(1u);
      JUMPOUT(0x234A996B0);
    }
    v0[2] = v18;
    specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
  }
  v19._countAndFlagsBits = 41;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  __swift_destroy_boxed_opaque_existential_1(v3 - 368);
  v20 = *(_QWORD *)(v3 - 464);
  v21 = specialized Array._getCount()(v20);
  if (!v21)
  {
    swift_bridgeObjectRelease();
    v27 = v0[2];
    if (!v27)
      goto LABEL_16;
    goto LABEL_14;
  }
  v22 = v21;
  if (v21 < 1)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  v23 = (_DWORD *)(v20 + 100);
  do
  {
    v24 = *((_WORD *)v23 - 2);
    v25 = *((_BYTE *)v23 - 2);
    v26 = *v23;
    *(_OWORD *)(v3 - 368) = *(_OWORD *)(v23 - 17);
    *(_OWORD *)(v3 - 352) = *(_OWORD *)(v23 - 13);
    *(_OWORD *)(v3 - 336) = *(_OWORD *)(v23 - 9);
    *(_OWORD *)(v3 - 320) = *(_OWORD *)(v23 - 5);
    *(_BYTE *)(v3 - 302) = v25;
    *(_WORD *)(v3 - 304) = v24;
    *(_DWORD *)(v3 - 300) = v26;
    DisplayList.Item.print(into:)(v0);
    v23 += 18;
    --v22;
  }
  while (v22);
  swift_bridgeObjectRelease_n();
  v27 = v0[2];
  if (v27)
  {
LABEL_14:
    v17 = __OFSUB__(v27, 1);
    v28 = v27 - 1;
    if (v17)
    {
LABEL_22:
      __break(1u);
      JUMPOUT(0x234A99688);
    }
    v0[2] = v28;
    specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
  }
LABEL_16:
  v29._countAndFlagsBits = 41;
  v29._object = (void *)0xE100000000000000;
  String.append(_:)(v29);
  outlined consume of DisplayList.Effect(*(_QWORD *)(v3 - 384), v2, v1);
  v30 = v0[2];
  if (v30)
  {
    v17 = __OFSUB__(v30, 1);
    v31 = v30 - 1;
    if (!v17)
    {
      v0[2] = v31;
      specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
      goto LABEL_19;
    }
    __break(1u);
    goto LABEL_21;
  }
LABEL_19:
  v32._countAndFlagsBits = 41;
  v32._object = (void *)0xE100000000000000;
  String.append(_:)(v32);
}

void sub_234A97BB0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  void *v15;
  Swift::String v16;
  uint64_t v17;
  void *v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  Swift::String v25;

  *(_QWORD *)(v2 - 400) = v1;
  v3 = *(_QWORD *)(v2 - 384);
  v4 = *(_QWORD *)(v3 + 16);
  v5 = *(unsigned __int8 *)(v3 + 28);
  v6 = *(unsigned int *)(v3 + 24);
  v7 = v6 | (v5 << 32);
  v8 = *(_BYTE *)(v3 + 29);
  v9 = *(_BYTE *)(v3 + 30);
  v10 = *(_QWORD *)(v3 + 32);
  outlined copy of ContentTransition.Storage(v4, v7, v8);
  swift_retain();
  v11._countAndFlagsBits = 0xD000000000000011;
  v11._object = (void *)0x80000002352DED50;
  SExpPrinter.push(_:)(v11);
  *(_QWORD *)(v2 - 368) = 0;
  *(_QWORD *)(v2 - 360) = 0xE000000000000000;
  v12._countAndFlagsBits = 0x7469736E61727428;
  v12._object = (void *)0xEC000000206E6F69;
  String.append(_:)(v12);
  *(_QWORD *)(v2 - 192) = v4;
  *(_BYTE *)(v2 - 180) = v5;
  *(_DWORD *)(v2 - 184) = v6;
  *(_BYTE *)(v2 - 179) = v8;
  *(_BYTE *)(v2 - 178) = v9;
  _print_unlocked<A, B>(_:_:)();
  v13._countAndFlagsBits = 41;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  v14 = *(_QWORD *)(v2 - 368);
  v15 = *(void **)(v2 - 360);
  if (v0[2])
  {
    v16._countAndFlagsBits = 10;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    v17 = v0[3];
    v18 = (void *)v0[4];
    swift_bridgeObjectRetain();
    v19._countAndFlagsBits = v17;
    v19._object = v18;
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
  }
  else
  {
    v20._countAndFlagsBits = 32;
    v20._object = (void *)0xE100000000000000;
    String.append(_:)(v20);
  }
  v21._countAndFlagsBits = v14;
  v21._object = v15;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  if (v10)
  {
    *(_QWORD *)(v2 - 368) = v10;
    closure #2 in DisplayList.Item.print(into:)((uint64_t *)(v2 - 368), v0);
  }
  v22 = v0[2];
  if (v22)
  {
    v23 = __OFSUB__(v22, 1);
    v24 = v22 - 1;
    if (v23)
    {
      __break(1u);
      JUMPOUT(0x234A996B4);
    }
    v0[2] = v24;
    specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
  }
  v25._countAndFlagsBits = 41;
  v25._object = (void *)0xE100000000000000;
  String.append(_:)(v25);
  outlined consume of ContentTransition.Storage(v4, v7, v8);
  swift_release();
  JUMPOUT(0x234A98FD4);
}

void sub_234A97CE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  uint64_t v4;

  outlined init with copy of AnyTrackedValue(*(_QWORD *)(v1 - 384) + 16, v1 - 368);
  v2 = v1 - 240;
  strcpy((char *)(v1 - 192), "view #:type ");
  *(_BYTE *)(v2 + 61) = 0;
  *(_WORD *)(v2 + 62) = -5120;
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 - 368), *(_QWORD *)(v1 - 344));
  swift_getDynamicType();
  v3._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  SExpPrinter.push(_:)(*(Swift::String *)(v1 - 192));
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(v0 + 16);
  if (v4)
  {
    if (!__OFSUB__(v4, 1))
      JUMPOUT(0x234A98F1CLL);
    __break(1u);
  }
  JUMPOUT(0x234A98F2CLL);
}

void sub_234A97D88()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  v1._countAndFlagsBits = 0x6269737365636361;
  v1._object = (void *)0xED00007974696C69;
  SExpPrinter.push(_:)(v1);
  v2 = *(_QWORD *)(v0 + 16);
  if (v2)
  {
    v3 = __OFSUB__(v2, 1);
    v4 = v2 - 1;
    if (v3)
      __break(1u);
    *(_QWORD *)(v0 + 16) = v4;
    specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
  }
  JUMPOUT(0x234A99514);
}

void sub_234A97DC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  Swift::String v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  v2 = *(_QWORD *)(v1 - 384);
  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  v5 = *(_DWORD *)(v2 + 32);
  *(_QWORD *)(v1 - 368) = 0;
  *(_QWORD *)(v1 - 360) = 0xE000000000000000;
  v6._countAndFlagsBits = 0x206574617473;
  v6._object = (void *)0xE600000000000000;
  String.append(_:)(v6);
  specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v3, v4, v5);
  SExpPrinter.push(_:)(*(Swift::String *)(v1 - 368));
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(v0 + 16);
  if (v7)
  {
    v8 = __OFSUB__(v7, 1);
    v9 = v7 - 1;
    if (v8)
      __break(1u);
    *(_QWORD *)(v0 + 16) = v9;
    specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
  }
  JUMPOUT(0x234A99514);
}

void sub_234A97E48()
{
  _QWORD *v0;
  uint64_t v1;
  double *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  Swift::String v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;
  Swift::String v11;
  uint64_t v12;
  void *v13;
  Swift::String v14;
  uint64_t v15;
  void *v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  Swift::String v21;
  uint64_t v22;
  Swift::String v23;
  uint64_t v24;
  void *v25;
  Swift::String v26;
  uint64_t v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;

  v2 = *(double **)(v1 - 384);
  v3 = v2[3];
  v4 = v2[4];
  v5 = v2[5];
  v6 = v2[6];
  v7._object = (void *)0x80000002352DECF0;
  v7._countAndFlagsBits = 0xD000000000000010;
  SExpPrinter.push(_:)(v7);
  if (v3 != 0.0 || v4 != 0.0)
  {
    *(_QWORD *)(v1 - 368) = 0;
    *(_QWORD *)(v1 - 360) = 0xE000000000000000;
    _StringGuts.grow(_:)(19);
    v8 = *(_QWORD *)(v1 - 360);
    *(_QWORD *)(v1 - 368) = *(_QWORD *)(v1 - 368);
    *(_QWORD *)(v1 - 360) = v8;
    v9._object = (void *)0x80000002352DED10;
    v9._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v9);
    v10 = v1 - 240;
    *(double *)(v10 + 48) = v3;
    *(double *)(v10 + 56) = v4;
    type metadata accessor for CGPoint(0);
    _print_unlocked<A, B>(_:_:)();
    v11._countAndFlagsBits = 41;
    v11._object = (void *)0xE100000000000000;
    String.append(_:)(v11);
    v12 = *(_QWORD *)(v1 - 368);
    v13 = *(void **)(v1 - 360);
    if (v0[2])
    {
      v14._countAndFlagsBits = 10;
      v14._object = (void *)0xE100000000000000;
      String.append(_:)(v14);
      v15 = v0[3];
      v16 = (void *)v0[4];
      swift_bridgeObjectRetain();
      v17._countAndFlagsBits = v15;
      v17._object = v16;
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
    }
    else
    {
      v18._countAndFlagsBits = 32;
      v18._object = (void *)0xE100000000000000;
      String.append(_:)(v18);
    }
    v19._countAndFlagsBits = v12;
    v19._object = v13;
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
  }
  if (v5 != 0.0 || v6 != 0.0)
  {
    *(_QWORD *)(v1 - 368) = 0;
    *(_QWORD *)(v1 - 360) = 0xE000000000000000;
    _StringGuts.grow(_:)(19);
    v20 = *(_QWORD *)(v1 - 360);
    *(_QWORD *)(v1 - 368) = *(_QWORD *)(v1 - 368);
    *(_QWORD *)(v1 - 360) = v20;
    v21._object = (void *)0x80000002352DED30;
    v21._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v21);
    v22 = v1 - 240;
    *(double *)(v22 + 48) = v5;
    *(double *)(v22 + 56) = v6;
    type metadata accessor for CGSize(0);
    _print_unlocked<A, B>(_:_:)();
    v23._countAndFlagsBits = 41;
    v23._object = (void *)0xE100000000000000;
    String.append(_:)(v23);
    v24 = *(_QWORD *)(v1 - 368);
    v25 = *(void **)(v1 - 360);
    if (v0[2])
    {
      v26._countAndFlagsBits = 10;
      v26._object = (void *)0xE100000000000000;
      String.append(_:)(v26);
      v27 = v0[3];
      v28 = (void *)v0[4];
      swift_bridgeObjectRetain();
      v29._countAndFlagsBits = v27;
      v29._object = v28;
      String.append(_:)(v29);
      swift_bridgeObjectRelease();
    }
    else
    {
      v30._countAndFlagsBits = 32;
      v30._object = (void *)0xE100000000000000;
      String.append(_:)(v30);
    }
    v31._countAndFlagsBits = v24;
    v31._object = v25;
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
  }
  v32 = v0[2];
  if (v32)
  {
    if (__OFSUB__(v32, 1))
    {
      __break(1u);
      JUMPOUT(0x234A996C4);
    }
    JUMPOUT(0x234A994F8);
  }
  JUMPOUT(0x234A99508);
}

void sub_234A97F70()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  Swift::String v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  *(_QWORD *)(v2 - 368) = 0;
  *(_QWORD *)(v2 - 360) = 0xE000000000000000;
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 - 368) = 0xD00000000000001BLL;
  *(_QWORD *)(v2 - 360) = 0x80000002352DECD0;
  *(_DWORD *)(v2 - 192) = v1;
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  SExpPrinter.push(_:)(*(Swift::String *)(v2 - 368));
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(v0 + 16);
  if (v4)
  {
    v5 = __OFSUB__(v4, 1);
    v6 = v4 - 1;
    if (v5)
      __break(1u);
    *(_QWORD *)(v0 + 16) = v6;
    specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
  }
  JUMPOUT(0x234A99514);
}

void sub_234A98034()
{
  _QWORD *v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  Swift::String v10;
  uint64_t v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  void *v15;
  Swift::String v16;
  uint64_t v17;
  void *v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  void *v25;
  uint64_t v26;
  Swift::String v27;
  uint64_t v28;
  void *v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  __int16 v41;
  char v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  Swift::String v46;
  uint64_t v47;
  uint64_t v48;
  Swift::String v49;

  v4 = *(_QWORD *)(v3 - 384);
  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(_DWORD *)(v4 + 32);
  v8 = *(_BYTE *)(v4 + 36);
  v9 = *(_QWORD *)(v4 + 40);
  swift_retain();
  v10._countAndFlagsBits = 0xD000000000000016;
  v10._object = (void *)0x80000002352DECB0;
  SExpPrinter.push(_:)(v10);
  if ((v8 & 1) == 0)
  {
    *(_QWORD *)(v3 - 368) = 0;
    *(_QWORD *)(v3 - 360) = 0xE000000000000000;
    v12._countAndFlagsBits = 0x2065756C617628;
    v12._object = (void *)0xE700000000000000;
    String.append(_:)(v12);
    specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v5, v6, v7);
    v13._countAndFlagsBits = 41;
    v13._object = (void *)0xE100000000000000;
    String.append(_:)(v13);
    v14 = *(_QWORD *)(v3 - 368);
    v15 = *(void **)(v3 - 360);
    if (v0[2])
    {
      v16._countAndFlagsBits = 10;
      v16._object = (void *)0xE100000000000000;
      String.append(_:)(v16);
      v17 = v0[3];
      v18 = (void *)v0[4];
      swift_bridgeObjectRetain();
      v19._countAndFlagsBits = v17;
      v19._object = v18;
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
    }
    else
    {
      v20._countAndFlagsBits = 32;
      v20._object = (void *)0xE100000000000000;
      String.append(_:)(v20);
    }
    v21._countAndFlagsBits = v14;
    v21._object = v15;
    String.append(_:)(v21);
    v11 = swift_bridgeObjectRelease();
  }
  if (v9)
  {
    v22 = v3 - 240;
    *(_QWORD *)(v22 + 48) = 0x6974616D696E6128;
    *(_QWORD *)(v22 + 56) = 0xEB00000000206E6FLL;
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 88))(v11);
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for CustomAnimation);
    swift_retain();
    v23._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._countAndFlagsBits = 41;
    v24._object = (void *)0xE100000000000000;
    String.append(_:)(v24);
    v26 = *(_QWORD *)(v3 - 192);
    v25 = *(void **)(v3 - 184);
    if (v0[2])
    {
      v27._countAndFlagsBits = 10;
      v27._object = (void *)0xE100000000000000;
      String.append(_:)(v27);
      v28 = v0[3];
      v29 = (void *)v0[4];
      swift_bridgeObjectRetain();
      v30._countAndFlagsBits = v28;
      v30._object = v29;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
    }
    else
    {
      v31._countAndFlagsBits = 32;
      v31._object = (void *)0xE100000000000000;
      String.append(_:)(v31);
    }
    v32._countAndFlagsBits = v26;
    v32._object = v25;
    String.append(_:)(v32);
    swift_release();
    swift_bridgeObjectRelease();
  }
  v33 = v0[2];
  if (v33)
  {
    v34 = __OFSUB__(v33, 1);
    v35 = v33 - 1;
    if (v34)
    {
      __break(1u);
      JUMPOUT(0x234A996C0);
    }
    v0[2] = v35;
    specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
  }
  v36._countAndFlagsBits = 41;
  v36._object = (void *)0xE100000000000000;
  String.append(_:)(v36);
  swift_release();
  v37 = *(_QWORD *)(v3 - 464);
  v38 = specialized Array._getCount()(v37);
  if (!v38)
  {
    swift_bridgeObjectRelease();
    v44 = v0[2];
    if (!v44)
      goto LABEL_23;
    goto LABEL_21;
  }
  v39 = v38;
  if (v38 < 1)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  swift_bridgeObjectRetain();
  v40 = (_DWORD *)(v37 + 100);
  do
  {
    v41 = *((_WORD *)v40 - 2);
    v42 = *((_BYTE *)v40 - 2);
    v43 = *v40;
    *(_OWORD *)(v3 - 368) = *(_OWORD *)(v40 - 17);
    *(_OWORD *)(v3 - 352) = *(_OWORD *)(v40 - 13);
    *(_OWORD *)(v3 - 336) = *(_OWORD *)(v40 - 9);
    *(_OWORD *)(v3 - 320) = *(_OWORD *)(v40 - 5);
    *(_BYTE *)(v3 - 302) = v42;
    *(_WORD *)(v3 - 304) = v41;
    *(_DWORD *)(v3 - 300) = v43;
    DisplayList.Item.print(into:)(v0);
    v40 += 18;
    --v39;
  }
  while (v39);
  swift_bridgeObjectRelease_n();
  v44 = v0[2];
  if (v44)
  {
LABEL_21:
    v34 = __OFSUB__(v44, 1);
    v45 = v44 - 1;
    if (v34)
    {
LABEL_29:
      __break(1u);
      JUMPOUT(0x234A99688);
    }
    v0[2] = v45;
    specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
  }
LABEL_23:
  v46._countAndFlagsBits = 41;
  v46._object = (void *)0xE100000000000000;
  String.append(_:)(v46);
  outlined consume of DisplayList.Effect(*(_QWORD *)(v3 - 384), v2, v1);
  v47 = v0[2];
  if (v47)
  {
    v34 = __OFSUB__(v47, 1);
    v48 = v47 - 1;
    if (!v34)
    {
      v0[2] = v48;
      specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
      goto LABEL_26;
    }
    __break(1u);
    goto LABEL_28;
  }
LABEL_26:
  v49._countAndFlagsBits = 41;
  v49._object = (void *)0xE100000000000000;
  String.append(_:)(v49);
}

void sub_234A98118()
{
  _QWORD *v0;
  char v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  __int16 v10;
  char v11;
  int v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;

  if (*(_QWORD *)(v3 - 384) | v2)
  {
    v4 = 32;
    v5 = 0xE100000000000000;
    if (!(*(_QWORD *)(v3 - 384) ^ 1 | v2))
    {
      String.append(_:)(*(Swift::String *)&v4);
      JUMPOUT(0x234A9815CLL);
    }
    String.append(_:)(*(Swift::String *)&v4);
    JUMPOUT(0x234A990ECLL);
  }
  v6 = *(_QWORD *)(v3 - 464);
  v7 = specialized Array._getCount()(v6);
  if (!v7)
  {
    swift_bridgeObjectRelease();
    v13 = v0[2];
    if (!v13)
      goto LABEL_16;
    goto LABEL_14;
  }
  v8 = v7;
  if (v7 < 1)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  v9 = (_DWORD *)(v6 + 100);
  do
  {
    v10 = *((_WORD *)v9 - 2);
    v11 = *((_BYTE *)v9 - 2);
    v12 = *v9;
    *(_OWORD *)(v3 - 368) = *(_OWORD *)(v9 - 17);
    *(_OWORD *)(v3 - 352) = *(_OWORD *)(v9 - 13);
    *(_OWORD *)(v3 - 336) = *(_OWORD *)(v9 - 9);
    *(_OWORD *)(v3 - 320) = *(_OWORD *)(v9 - 5);
    *(_BYTE *)(v3 - 302) = v11;
    *(_WORD *)(v3 - 304) = v10;
    *(_DWORD *)(v3 - 300) = v12;
    DisplayList.Item.print(into:)(v0);
    v9 += 18;
    --v8;
  }
  while (v8);
  swift_bridgeObjectRelease_n();
  v13 = v0[2];
  if (v13)
  {
LABEL_14:
    v14 = __OFSUB__(v13, 1);
    v15 = v13 - 1;
    if (v14)
    {
LABEL_22:
      __break(1u);
      JUMPOUT(0x234A99688);
    }
    v0[2] = v15;
    specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
  }
LABEL_16:
  v16._countAndFlagsBits = 41;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  outlined consume of DisplayList.Effect(*(_QWORD *)(v3 - 384), v2, v1);
  v17 = v0[2];
  if (v17)
  {
    v14 = __OFSUB__(v17, 1);
    v18 = v17 - 1;
    if (!v14)
    {
      v0[2] = v18;
      specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
      goto LABEL_19;
    }
    __break(1u);
    goto LABEL_21;
  }
LABEL_19:
  v19._countAndFlagsBits = 41;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
}

void DisplayList.Item.printMinimally(into:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;
  void *v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  _QWORD v22[13];
  uint64_t v23;
  Swift::String v24;

  v3 = type metadata accessor for DisplayList.ArchiveIDs();
  v22[10] = *(_QWORD *)(v3 - 8);
  v22[11] = v3;
  MEMORY[0x24BDAC7A8](v3);
  v22[6] = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DisplayList.ArchiveIDs?();
  MEMORY[0x24BDAC7A8](v5);
  v22[9] = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v22[12] = (char *)v22 - v8;
  v9 = *(_QWORD *)(v1 + 48);
  v22[4] = *(_QWORD *)(v1 + 40);
  v22[3] = *(_QWORD *)(v1 + 56);
  v10 = *(_DWORD *)(v1 + 68);
  v24._countAndFlagsBits = 14921;
  v24._object = (void *)0xE200000000000000;
  LODWORD(v23) = v10;
  v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12 = v24;
  v13 = a1[2];
  if (v13)
  {
    v14 = v9;
    v15._countAndFlagsBits = 10;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);
    v16 = a1[3];
    v17 = (void *)a1[4];
    swift_bridgeObjectRetain();
    v18._countAndFlagsBits = v16;
    v18._object = v17;
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 40;
    v19._object = (void *)0xE100000000000000;
    String.append(_:)(v19);
    String.append(_:)(v12);
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      JUMPOUT(0x234A9AF84);
    }
    a1[2] = v13 + 1;
    v20._countAndFlagsBits = 8224;
    v20._object = (void *)0xE200000000000000;
    String.append(_:)(v20);
    v9 = v14;
  }
  else
  {
    v21._countAndFlagsBits = 40;
    v21._object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    String.append(_:)(v12);
  }
  swift_bridgeObjectRelease();
  __asm { BR              X10 }
}

void DisplayList.Item.description.getter()
{
  Swift::String v0;
  _QWORD v1[2];
  __int128 v2;
  unint64_t v3;

  v1[0] = 0xD000000000000012;
  v1[1] = 0x80000002352DEC70;
  v2 = xmmword_235282660;
  v3 = 0xE200000000000000;
  DisplayList.Item.print(into:)(v1);
  if (!(_QWORD)v2)
    goto LABEL_4;
  if ((_QWORD)v2 != 0x8000000000000000)
  {
    specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
LABEL_4:
    v0._countAndFlagsBits = 41;
    v0._object = (void *)0xE100000000000000;
    String.append(_:)(v0);
    swift_bridgeObjectRelease();
    return;
  }
  __break(1u);
}

void GraphicsFilter.print(into:)()
{
  __asm { BR              X10 }
}

uint64_t sub_234A9B180()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t v3;
  void *v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  _QWORD *v9;

  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 41;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  if (v9[2])
  {
    v2._countAndFlagsBits = 10;
    v2._object = (void *)0xE100000000000000;
    String.append(_:)(v2);
    v3 = v9[3];
    v4 = (void *)v9[4];
    swift_bridgeObjectRetain();
    v5._countAndFlagsBits = v3;
    v5._object = v4;
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    v6._countAndFlagsBits = 32;
    v6._object = (void *)0xE100000000000000;
    String.append(_:)(v6);
  }
  v7._countAndFlagsBits = 0x3A232072756C6228;
  v7._object = (void *)0xEF20737569646172;
  String.append(_:)(v7);
  return swift_bridgeObjectRelease();
}

uint64_t closure #2 in DisplayList.Item.print(into:)(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  void *v6;
  uint64_t v7;
  Swift::String v8;
  uint64_t v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  _QWORD v15[5];
  uint64_t v16;
  unint64_t v17;

  v3 = *a1;
  v16 = 0x6974616D696E6128;
  v17 = 0xEB00000000206E6FLL;
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v3 + 88))(v15);
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for CustomAnimation);
  v4._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 41;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  v7 = v16;
  v6 = (void *)v17;
  if (a2[2])
  {
    v8._countAndFlagsBits = 10;
    v8._object = (void *)0xE100000000000000;
    String.append(_:)(v8);
    v9 = a2[3];
    v10 = (void *)a2[4];
    swift_bridgeObjectRetain();
    v11._countAndFlagsBits = v9;
    v11._object = v10;
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
  }
  else
  {
    v12._countAndFlagsBits = 32;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
  }
  v13._countAndFlagsBits = v7;
  v13._object = v6;
  String.append(_:)(v13);
  return swift_bridgeObjectRelease();
}

unint64_t specialized RangeReplaceableCollection<>.removeLast(_:)(unint64_t result)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  char v4;

  if (result)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v2 = v1[1];
      if ((v2 & 0x2000000000000000) != 0)
        v3 = HIBYTE(v2) & 0xF;
      else
        v3 = *v1 & 0xFFFFFFFFFFFFLL;
      result = String.index(_:offsetBy:limitedBy:)();
      if ((v4 & 1) != 0)
        goto LABEL_12;
      if (4 * v3 >= result >> 14)
        return String.removeSubrange(_:)();
    }
    __break(1u);
LABEL_12:
    __break(1u);
  }
  return result;
}

void type metadata accessor for DisplayList.ArchiveIDs?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for DisplayList.ArchiveIDs?)
  {
    type metadata accessor for DisplayList.ArchiveIDs();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DisplayList.ArchiveIDs?);
  }
}

void type metadata accessor for _ContiguousArrayStorage<CVarArg>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>)
  {
    type metadata accessor for ScrollStateRequest(255, (unint64_t *)&lazy cache variable for type metadata for CVarArg);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  }
}

uint64_t outlined init with take of DisplayList.ArchiveIDs(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DisplayList.ArchiveIDs();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type UUID and conformance UUID()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    v1 = type metadata accessor for UUID();
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BDCEAB8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  _OWORD v12[2];
  _OWORD v13[2];

  v3 = v2;
  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v13);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v12[0] = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v13, a2, isUniquelyReferenced_nonNull_native);
    *v2 = *(_QWORD *)&v12[0];
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of NamedImage.Cache.WeakCatalog?(a1, (unint64_t *)&lazy cache variable for type metadata for Any?);
    v7 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v8 & 1) != 0)
    {
      v9 = v7;
      v10 = swift_isUniquelyReferenced_nonNull_native();
      v11 = *v2;
      *(_QWORD *)&v13[0] = *v3;
      *v3 = 0x8000000000000000;
      if ((v10 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        v11 = *(_QWORD *)&v13[0];
      }
      outlined init with take of Any((_OWORD *)(*(_QWORD *)(v11 + 56) + 32 * v9), v12);
      specialized _NativeDictionary._delete(at:)(v9, v11);
      *v3 = v11;
      swift_bridgeObjectRelease();
      outlined init with take of Any(v12, v13);
    }
    else
    {
      memset(v13, 0, sizeof(v13));
    }
    return outlined destroy of NamedImage.Cache.WeakCatalog?((uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for Any?);
  }
}

{
  _QWORD *v2;
  _QWORD *v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  __int128 v12[2];
  _OWORD v13[2];
  uint64_t v14;

  v3 = v2;
  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with take of ScrollStateRequest((__int128 *)a1, (uint64_t)v13);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v12[0] = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v13, a2, isUniquelyReferenced_nonNull_native);
    *v2 = *(_QWORD *)&v12[0];
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of AnyTrackedValue?(a1, (unint64_t *)&lazy cache variable for type metadata for AnyTrackedValue?, (unint64_t *)&lazy cache variable for type metadata for AnyTrackedValue);
    v7 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v8 & 1) != 0)
    {
      v9 = v7;
      v10 = swift_isUniquelyReferenced_nonNull_native();
      v11 = *v2;
      *(_QWORD *)&v13[0] = *v3;
      *v3 = 0x8000000000000000;
      if ((v10 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        v11 = *(_QWORD *)&v13[0];
      }
      outlined init with take of ScrollStateRequest((__int128 *)(*(_QWORD *)(v11 + 56) + 40 * v9), (uint64_t)v12);
      specialized _NativeDictionary._delete(at:)(v9, v11);
      *v3 = v11;
      swift_bridgeObjectRelease();
      outlined init with take of ScrollStateRequest(v12, (uint64_t)v13);
    }
    else
    {
      v14 = 0;
      memset(v13, 0, sizeof(v13));
    }
    return outlined destroy of AnyTrackedValue?((uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for AnyTrackedValue?, (unint64_t *)&lazy cache variable for type metadata for AnyTrackedValue);
  }
}

{
  uint64_t *v2;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[16];

  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    outlined destroy of NamedImage.Cache.WeakCatalog?(a1, &lazy cache variable for type metadata for NamedImage.Cache.WeakCatalog?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, (uint64_t)v9);
    v4 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a2, v4);
    return outlined destroy of NamedImage.Cache.WeakCatalog?((uint64_t)v9, &lazy cache variable for type metadata for NamedImage.Cache.WeakCatalog?);
  }
  else
  {
    outlined init with take of NamedImage.Cache.WeakCatalog(a1, (uint64_t)v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v8 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v9, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v8;
    swift_bridgeObjectRelease();
    v7 = type metadata accessor for URL();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a2, v7);
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[2];

  v3 = v2;
  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v14);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v14, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v12;
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of NamedImage.Cache.WeakCatalog?(a1, (unint64_t *)&lazy cache variable for type metadata for Any?);
    v7 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v8 & 1) != 0)
    {
      v9 = v7;
      v10 = swift_isUniquelyReferenced_nonNull_native();
      v11 = *v2;
      v13 = *v3;
      *v3 = 0x8000000000000000;
      if ((v10 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        v11 = v13;
      }
      outlined init with take of Any((_OWORD *)(*(_QWORD *)(v11 + 56) + 32 * v9), v14);
      specialized _NativeDictionary._delete(at:)(v9, v11);
      *v3 = v11;
      swift_bridgeObjectRelease();
    }
    else
    {
      memset(v14, 0, sizeof(v14));
    }
    return outlined destroy of NamedImage.Cache.WeakCatalog?((uint64_t)v14, (unint64_t *)&lazy cache variable for type metadata for Any?);
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[2];
  uint64_t v15;

  v3 = v2;
  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with take of ScrollStateRequest((__int128 *)a1, (uint64_t)v14);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v14, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v12;
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of AnyTrackedValue?(a1, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest?, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest);
    v7 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v8 & 1) != 0)
    {
      v9 = v7;
      v10 = swift_isUniquelyReferenced_nonNull_native();
      v11 = *v2;
      v13 = *v3;
      *v3 = 0x8000000000000000;
      if ((v10 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        v11 = v13;
      }
      outlined init with take of ScrollStateRequest((__int128 *)(*(_QWORD *)(v11 + 56) + 40 * v9), (uint64_t)v14);
      specialized _NativeDictionary._delete(at:)(v9, v11);
      *v3 = v11;
      swift_bridgeObjectRelease();
    }
    else
    {
      v15 = 0;
      memset(v14, 0, sizeof(v14));
    }
    return outlined destroy of AnyTrackedValue?((uint64_t)v14, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest?, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest);
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[2];
  uint64_t v15;

  v3 = v2;
  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with take of ScrollStateRequest((__int128 *)a1, (uint64_t)v14);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v14, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v12;
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of AnyTrackedValue?(a1, &lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    v7 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v8 & 1) != 0)
    {
      v9 = v7;
      v10 = swift_isUniquelyReferenced_nonNull_native();
      v11 = *v2;
      v13 = *v3;
      *v3 = 0x8000000000000000;
      if ((v10 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        v11 = v13;
      }
      outlined init with take of ScrollStateRequest((__int128 *)(*(_QWORD *)(v11 + 56) + 40 * v9), (uint64_t)v14);
      specialized _NativeDictionary._delete(at:)(v9, v11);
      *v3 = v11;
      swift_bridgeObjectRelease();
    }
    else
    {
      v15 = 0;
      memset(v14, 0, sizeof(v14));
    }
    return outlined destroy of AnyTrackedValue?((uint64_t)v14, &lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[2];
  uint64_t v15;

  v3 = v2;
  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with take of ScrollStateRequest((__int128 *)a1, (uint64_t)v14);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v14, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v12;
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of AnyTrackedValue?(a1, (unint64_t *)&lazy cache variable for type metadata for ForwardedEventDispatcher?, &lazy cache variable for type metadata for ForwardedEventDispatcher);
    v7 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v8 & 1) != 0)
    {
      v9 = v7;
      v10 = swift_isUniquelyReferenced_nonNull_native();
      v11 = *v2;
      v13 = *v3;
      *v3 = 0x8000000000000000;
      if ((v10 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        v11 = v13;
      }
      outlined init with take of ScrollStateRequest((__int128 *)(*(_QWORD *)(v11 + 56) + 40 * v9), (uint64_t)v14);
      specialized _NativeDictionary._delete(at:)(v9, v11);
      *v3 = v11;
      swift_bridgeObjectRelease();
    }
    else
    {
      v15 = 0;
      memset(v14, 0, sizeof(v14));
    }
    return outlined destroy of AnyTrackedValue?((uint64_t)v14, (unint64_t *)&lazy cache variable for type metadata for ForwardedEventDispatcher?, &lazy cache variable for type metadata for ForwardedEventDispatcher);
  }
}

{
  uint64_t *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  _BYTE v7[16];

  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    outlined destroy of TypesettingConfiguration(a1, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<AnyLocationBase>?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, (uint64_t)v7);
    outlined destroy of AnyHashable(a2);
    return outlined destroy of TypesettingConfiguration((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<AnyLocationBase>?);
  }
  else
  {
    outlined init with take of LocalizedStringKey.FormatArgument(a1, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<AnyLocationBase>);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v6 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v7, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v6;
    swift_bridgeObjectRelease();
    return outlined destroy of AnyHashable(a2);
  }
}

unint64_t specialized Dictionary.subscript.setter(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t result;
  char v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = v2;
  if (a1)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v13 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2 & 1, isUniquelyReferenced_nonNull_native);
    *v2 = v13;
  }
  else
  {
    result = specialized __RawDictionaryStorage.find<A>(_:)(a2 & 1);
    if ((v8 & 1) == 0)
      return result;
    v9 = result;
    v10 = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v2;
    v14 = *v3;
    *v3 = 0x8000000000000000;
    if (!v10)
    {
      specialized _NativeDictionary.copy()();
      v11 = v14;
    }
    v12 = *(void **)(*(_QWORD *)(v11 + 56) + 8 * v9);
    specialized _NativeDictionary._delete(at:)(v9, v11);
    *v3 = v11;

  }
  return swift_bridgeObjectRelease();
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, void *a2)
{
  uint64_t *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  _OWORD v7[2];

  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v7);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v6 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v7, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v6;

    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of NamedImage.Cache.WeakCatalog?(a1, (unint64_t *)&lazy cache variable for type metadata for Any?);
    specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)a2, v7);

    return outlined destroy of NamedImage.Cache.WeakCatalog?((uint64_t)v7, (unint64_t *)&lazy cache variable for type metadata for Any?);
  }
}

unint64_t specialized Dictionary.subscript.setter(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  char v7;
  unint64_t result;
  char v9;
  unint64_t v10;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = v3;
  if ((a2 & 1) != 0)
  {
    result = specialized __RawDictionaryStorage.find<A>(_:)(a3);
    if ((v9 & 1) == 0)
      return result;
    v10 = result;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = *v3;
    v14 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v12 = v14;
    }
    specialized _NativeDictionary._delete(at:)(v10, v12);
    *v4 = v12;
  }
  else
  {
    v7 = swift_isUniquelyReferenced_nonNull_native();
    v13 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a3, v7, *(double *)&a1);
    *v3 = v13;
  }
  return swift_bridgeObjectRelease();
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  char v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16[2];
  uint64_t v17;

  v4 = v3;
  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with take of ScrollStateRequest((__int128 *)a1, (uint64_t)v16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v16, a2, a3, isUniquelyReferenced_nonNull_native);
    *v3 = v14;
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of AnyTrackedValue?(a1, &lazy cache variable for type metadata for _DisplayList_AnyEffectAnimator?, &lazy cache variable for type metadata for _DisplayList_AnyEffectAnimator);
    v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v10 & 1) != 0)
    {
      v11 = v9;
      v12 = swift_isUniquelyReferenced_nonNull_native();
      v13 = *v3;
      v15 = *v4;
      *v4 = 0x8000000000000000;
      if ((v12 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        v13 = v15;
      }
      outlined init with take of ScrollStateRequest((__int128 *)(*(_QWORD *)(v13 + 56) + 40 * v11), (uint64_t)v16);
      specialized _NativeDictionary._delete(at:)(v11, v13);
      *v4 = v13;
      swift_bridgeObjectRelease();
    }
    else
    {
      v17 = 0;
      memset(v16, 0, sizeof(v16));
    }
    return outlined destroy of AnyTrackedValue?((uint64_t)v16, &lazy cache variable for type metadata for _DisplayList_AnyEffectAnimator?, &lazy cache variable for type metadata for _DisplayList_AnyEffectAnimator);
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, Swift::UInt a2, Swift::UInt a3)
{
  uint64_t *v3;
  uint64_t *v4;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  char v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16[2];
  uint64_t v17;

  v4 = v3;
  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with take of ScrollStateRequest((__int128 *)a1, (uint64_t)v16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v16, a2, a3, isUniquelyReferenced_nonNull_native);
    *v3 = v14;
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of AnyTrackedValue?(a1, &lazy cache variable for type metadata for EventType?, (unint64_t *)&lazy cache variable for type metadata for EventType);
    v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v10 & 1) != 0)
    {
      v11 = v9;
      v12 = swift_isUniquelyReferenced_nonNull_native();
      v13 = *v3;
      v15 = *v4;
      *v4 = 0x8000000000000000;
      if ((v12 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        v13 = v15;
      }
      outlined init with take of ScrollStateRequest((__int128 *)(*(_QWORD *)(v13 + 56) + 40 * v11), (uint64_t)v16);
      specialized _NativeDictionary._delete(at:)(v11, v13);
      *v4 = v13;
      swift_bridgeObjectRelease();
    }
    else
    {
      v17 = 0;
      memset(v16, 0, sizeof(v16));
    }
    return outlined destroy of AnyTrackedValue?((uint64_t)v16, &lazy cache variable for type metadata for EventType?, (unint64_t *)&lazy cache variable for type metadata for EventType);
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  uint64_t v19;

  v4 = v3;
  type metadata accessor for AccessibilityCustomAttributes.Value?(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AccessibilityCustomAttributes.Value();
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, double))(v15 + 48))(a1, 1, v12) == 1)
  {
    outlined destroy of TypesettingConfiguration(a1, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityCustomAttributes.Value?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, (uint64_t)v10);
    swift_bridgeObjectRelease();
    return outlined destroy of TypesettingConfiguration((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityCustomAttributes.Value?);
  }
  else
  {
    outlined init with take of LocalizedStringKey.FormatArgument(a1, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityCustomAttributes.Value);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v19 = *v4;
    *v4 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v14, a2, a3, isUniquelyReferenced_nonNull_native);
    *v4 = v19;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

unint64_t specialized Dictionary.subscript.setter(uint64_t a1, Swift::UInt a2, Swift::UInt a3)
{
  uint64_t *v3;
  uint64_t *v4;
  char isUniquelyReferenced_nonNull_native;
  unint64_t result;
  char v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = v3;
  if (a1)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, isUniquelyReferenced_nonNull_native);
    *v3 = v14;
  }
  else
  {
    result = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v10 & 1) == 0)
      return result;
    v11 = result;
    v12 = swift_isUniquelyReferenced_nonNull_native();
    v13 = *v3;
    v15 = *v4;
    *v4 = 0x8000000000000000;
    if ((v12 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      v13 = v15;
    }
    specialized _NativeDictionary._delete(at:)(v11, v13);
    *v4 = v13;
    swift_release();
  }
  return swift_bridgeObjectRelease();
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[2];

  v3 = v2;
  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v14);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v14, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v12;
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of NamedImage.Cache.WeakCatalog?(a1, (unint64_t *)&lazy cache variable for type metadata for Any?);
    v7 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v8 & 1) != 0)
    {
      v9 = v7;
      v10 = swift_isUniquelyReferenced_nonNull_native();
      v11 = *v2;
      v13 = *v3;
      *v3 = 0x8000000000000000;
      if ((v10 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        v11 = v13;
      }
      outlined init with take of Any((_OWORD *)(*(_QWORD *)(v11 + 56) + 32 * v9), v14);
      specialized _NativeDictionary._delete(at:)(v9, v11);
      *v3 = v11;
      swift_bridgeObjectRelease();
    }
    else
    {
      memset(v14, 0, sizeof(v14));
    }
    return outlined destroy of NamedImage.Cache.WeakCatalog?((uint64_t)v14, (unint64_t *)&lazy cache variable for type metadata for Any?);
  }
}

Swift::Int DisplayList.GraphicsRenderer.Cache.CallbackKey.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt32 v1;
  Swift::UInt32 v2;
  Swift::UInt32 v3;
  Swift::UInt32 v4;
  Swift::UInt64 v5;
  Swift::UInt16 v6;
  Swift::UInt64 v7;

  v1 = *(_DWORD *)v0;
  v2 = *(_DWORD *)(v0 + 4);
  v3 = *(_DWORD *)(v0 + 8);
  v4 = *(_DWORD *)(v0 + 12);
  v5 = *(_QWORD *)(v0 + 24);
  v6 = *(_WORD *)(v0 + 16);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v6);
  if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v7 = v5;
  else
    v7 = 0;
  Hasher._combine(_:)(v7);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance DisplayList.GraphicsRenderer.Cache.CallbackKey()
{
  uint64_t v0;
  Swift::UInt32 v1;
  Swift::UInt32 v2;
  Swift::UInt32 v3;
  Swift::UInt64 v4;
  Swift::UInt16 v5;
  Swift::UInt64 v6;

  v1 = *(_DWORD *)(v0 + 4);
  v2 = *(_DWORD *)(v0 + 8);
  v3 = *(_DWORD *)(v0 + 12);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = *(_WORD *)(v0 + 16);
  Hasher._combine(_:)(*(_DWORD *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v5);
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v6 = v4;
  else
    v6 = 0;
  Hasher._combine(_:)(v6);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DisplayList.GraphicsRenderer.Cache.CallbackKey()
{
  uint64_t v0;
  Swift::UInt32 v1;
  Swift::UInt32 v2;
  Swift::UInt32 v3;
  Swift::UInt32 v4;
  Swift::UInt64 v5;
  Swift::UInt16 v6;
  Swift::UInt64 v7;

  v1 = *(_DWORD *)v0;
  v2 = *(_DWORD *)(v0 + 4);
  v3 = *(_DWORD *)(v0 + 8);
  v4 = *(_DWORD *)(v0 + 12);
  v5 = *(_QWORD *)(v0 + 24);
  v6 = *(_WORD *)(v0 + 16);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v6);
  if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v7 = v5;
  else
    v7 = 0;
  Hasher._combine(_:)(v7);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DisplayList.GraphicsRenderer.Cache.AnimatorKey()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;
  Swift::UInt32 v2;
  Swift::UInt32 v3;
  Swift::UInt32 v4;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance DisplayList.GraphicsRenderer.Cache.AnimatorKey(int32x4_t *a1, int32x4_t *a2)
{
  return vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(*a1, *a2)), 0xFuLL))) & 1;
}

uint64_t DisplayList.GraphicsRenderer.platformViewMode.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *a1 = *(_BYTE *)(v1 + 112);
  return result;
}

uint64_t DisplayList.GraphicsRenderer.platformViewMode.setter(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t result;

  v2 = *a1;
  result = swift_beginAccess();
  *(_BYTE *)(v1 + 112) = v2;
  return result;
}

uint64_t (*DisplayList.GraphicsRenderer.platformViewMode.modify())()
{
  swift_beginAccess();
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

uint64_t DisplayList.GraphicsRenderer.__allocating_init(platformViewMode:)(char *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  DisplayList.GraphicsRenderer.init(platformViewMode:)(a1);
  return v2;
}

uint64_t DisplayList.GraphicsRenderer.init(platformViewMode:)(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  BOOL v4;
  Swift::UInt32 v5;
  int v6;
  char v7;

  v2 = *a1;
  v3 = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)(v1 + 24) = v3;
  *(_QWORD *)(v1 + 32) = v3;
  *(_QWORD *)(v1 + 40) = v3;
  *(_QWORD *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 56) = 0;
  *(_BYTE *)(v1 + 64) = 0;
  if (one-time initialization token for infinity != -1)
    swift_once();
  *(_QWORD *)(v1 + 80) = static Time.infinity;
  *(_QWORD *)(v1 + 88) = 0;
  *(_BYTE *)(v1 + 96) = 0;
  *(_QWORD *)(v1 + 104) = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(v1 + 112) = v2;
  v4 = __CFADD__(lastIdentity, 1);
  v5 = ++lastIdentity;
  if (v4)
  {
    v7 = 0;
    v6 = *(_DWORD *)(v1 + 52) + 1;
  }
  else
  {
    v6 = 0;
    *(_DWORD *)(v1 + 48) = v5;
    v7 = 1;
  }
  *(_DWORD *)(v1 + 52) = v6;
  *(_BYTE *)(v1 + 64) = v7;
  return v1;
}

__n128 specialized DisplayList.GraphicsRenderer.render(at:do:)(unint64_t *a1, __n128 *a2, void **a3, uint64_t a4, _QWORD *a5)
{
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 v11;
  unint64_t v12;
  __n128 result;
  __n128 v14;

  v9 = a2[3].n128_u64[0];
  v10 = a2[3].n128_u64[1];
  v11 = a2[4].n128_u8[0];
  a2[4].n128_u64[1] = *a1;
  if (one-time initialization token for infinity != -1)
    swift_once();
  a2[5].n128_u64[0] = static Time.infinity;
  closure #1 in DisplayList.InterpolatorLayer.Contents.render(at:renderer:storage:contentsScale:)(a3, a4, a5);
  swift_beginAccess();
  v12 = MEMORY[0x24BEE4B00];
  a2[1].n128_u64[0] = MEMORY[0x24BEE4B00];
  a2[1].n128_u64[1] = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v14 = a2[1];
  result = a2[2];
  a2[1] = result;
  a2[2] = v14;
  a2[3].n128_u64[0] = v9;
  a2[3].n128_u64[1] = v10;
  a2[4].n128_u8[0] = v11;
  return result;
}

__n128 DisplayList.GraphicsRenderer.render(at:do:)(unint64_t *a1, void (*a2)(void))
{
  __n128 *v2;
  unint64_t v4;
  unint64_t v5;
  unsigned __int8 v6;
  unint64_t v7;
  __n128 result;
  __n128 v9;

  v4 = v2[3].n128_u64[0];
  v5 = v2[3].n128_u64[1];
  v6 = v2[4].n128_u8[0];
  v2[4].n128_u64[1] = *a1;
  if (one-time initialization token for infinity != -1)
    swift_once();
  v2[5].n128_u64[0] = static Time.infinity;
  a2();
  swift_beginAccess();
  v7 = MEMORY[0x24BEE4B00];
  v2[1].n128_u64[0] = MEMORY[0x24BEE4B00];
  v2[1].n128_u64[1] = v7;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v9 = v2[1];
  result = v2[2];
  v2[1] = result;
  v2[2] = v9;
  v2[3].n128_u64[0] = v4;
  v2[3].n128_u64[1] = v5;
  v2[4].n128_u8[0] = v6;
  return result;
}

uint64_t DisplayList.GraphicsRenderer.renderDisplayList(_:at:in:)(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  __n128 *v3;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  unint64_t v10;

  v5 = *(_QWORD *)a1;
  v6 = *(unsigned __int16 *)(a1 + 8);
  v7 = *(unsigned __int8 *)(a1 + 10);
  v10 = *a2;
  v8 = v6 | (v7 << 16);
  swift_retain();
  swift_bridgeObjectRetain();
  specialized DisplayList.GraphicsRenderer.render(at:do:)(&v10, v3, (uint64_t)v3, v5, v8, a3);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t DisplayList.GraphicsRenderer.render(list:in:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt32 *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  Swift::UInt32 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  id v24;
  uint64_t v25;
  int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v32;
  uint64_t v33;
  id v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  int v42;
  int v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  _OWORD v48[2];
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  __int16 v53;
  char v54;
  Swift::UInt32 v55;

  v3 = v2;
  v5 = *a1;
  RBDrawingStateGetIdentifier();
  RBDrawingStateGetIdentifierNamespace2();
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    v7 = (Swift::UInt32 *)(v5 + 100);
    v35 = a2;
    do
    {
      v8 = *(_QWORD *)(v7 - 9);
      v47 = *(_QWORD *)(v7 - 7);
      v9 = *(_QWORD *)(v7 - 5);
      v10 = *(_QWORD *)(v7 - 3);
      v11 = *((unsigned __int16 *)v7 - 2) | (*((unsigned __int8 *)v7 - 2) << 16);
      v12 = *v7;
      v45 = *(_OWORD *)(v7 - 13);
      v46 = *(_OWORD *)(v7 - 17);
      if (*v7)
      {
        v39 = *(_QWORD *)(v7 - 9);
        v44 = *(_QWORD *)(v7 - 3);
        v42 = *(_DWORD *)(v3 + 52);
        v43 = *(_DWORD *)(v3 + 48);
        v13 = *(_QWORD *)(v3 + 56);
        v14 = *(_BYTE *)(v3 + 64);
        *(_DWORD *)(v3 + 48) = v12;
        *(_DWORD *)(v3 + 52) = 0;
        *(_BYTE *)(v3 + 64) = 1;
        swift_beginAccess();
        v15 = *(_QWORD *)(v3 + 88);
        if (v15 && *(_QWORD *)(v15 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(v12), (v16 & 1) != 0))
        {
          swift_endAccess();
          outlined copy of DisplayList.Item.Value(v47, v9);
          a2 = v35;
          RBUUIDInitFromHash();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            v36 = RBDrawingStateInit();
            type metadata accessor for GraphicsContext.Storage();
            swift_allocObject();
            v17 = swift_retain();
            a2 = v35;
            *v35 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v17, v36, 1, 0);
            swift_release();
          }
          RBDrawingStateSetIdentifier2();
          v10 = v44;
        }
        else
        {
          swift_endAccess();
          v10 = v44;
          outlined copy of DisplayList.Item.Value(v47, v9);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            v40 = v14;
            v18 = RBDrawingStateInit();
            v19 = *a2;
            type metadata accessor for GraphicsContext.Storage();
            v20 = swift_allocObject();
            *(_QWORD *)(v20 + 32) = 1065353216;
            *(_QWORD *)(v20 + 40) = 0x7FF8000000000000;
            v38 = v19;
            v21 = *(_QWORD *)(v19 + 16);
            LODWORD(v19) = *(_DWORD *)(v21 + 64);
            v37 = v18;
            if ((_DWORD)v19 == RBDrawingStateGetDefaultColorSpace())
            {
              swift_retain();
              swift_retain();
            }
            else
            {
              v24 = (id)RBDrawingStateGetDisplayList();
              v25 = *(_QWORD *)(v21 + 48);
              v33 = *(_QWORD *)(v21 + 56);
              v34 = v24;
              type metadata accessor for GraphicsContext.Storage.Shared();
              v21 = swift_allocObject();
              *(_QWORD *)(v21 + 24) = 0;
              v32 = objc_allocWithZone(MEMORY[0x24BE7EF48]);
              swift_retain();
              swift_retain();
              swift_retain();
              *(_QWORD *)(v21 + 32) = objc_msgSend(v32, sel_init);
              *(_QWORD *)(v21 + 40) = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EF20]), sel_init);
              *(_QWORD *)(v21 + 72) = 0;
              _s7SwiftUI15GraphicsContextV15ResolvedShadingOSgWOi0_((uint64_t)v48);
              outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v48, v21 + 80);
              *(_BYTE *)(v21 + 240) = 2;
              *(_QWORD *)(v21 + 256) = 0;
              *(_QWORD *)(v21 + 264) = 0;
              *(_QWORD *)(v21 + 248) = 0;
              *(_QWORD *)(v21 + 16) = v34;
              *(_QWORD *)(v21 + 48) = v25;
              *(_QWORD *)(v21 + 56) = v33;
              *(_DWORD *)(v21 + 64) = objc_msgSend(v34, sel_defaultColorSpace);
            }
            *(_QWORD *)(v20 + 16) = v21;
            *(_QWORD *)(v20 + 24) = v37;
            *(_BYTE *)(v20 + 48) = 1;
            *(_DWORD *)(v20 + 32) = *(_DWORD *)(v38 + 32);
            v26 = *(_DWORD *)(v38 + 36);
            swift_release();
            *(_DWORD *)(v20 + 36) = v26;
            a2 = v35;
            *v35 = v20;
            swift_release();
            v14 = v40;
            v10 = v44;
          }
          RBDrawingStateSetIdentifier();
        }
        v23 = v45;
        v22 = v46;
        v8 = v39;
      }
      else
      {
        v42 = *(_DWORD *)(v3 + 52) + 1;
        v43 = *(_DWORD *)(v3 + 48);
        *(_DWORD *)(v3 + 52) = v42;
        v13 = *(_QWORD *)(v3 + 56);
        v41 = *(_BYTE *)(v3 + 64);
        *(_BYTE *)(v3 + 64) = 0;
        outlined copy of DisplayList.Item.Value(v47, v9);
        v14 = v41;
        v23 = v45;
        v22 = v46;
      }
      v48[0] = v22;
      v48[1] = v23;
      v49 = v8;
      v50 = v47;
      v51 = v9;
      v52 = v10;
      v53 = v11;
      v54 = BYTE2(v11);
      v55 = v12;
      DisplayList.GraphicsRenderer.render(item:in:)((uint64_t)v48);
      outlined consume of DisplayList.Item.Value(v47, v9);
      v27 = *(_BYTE *)(v3 + 64);
      if ((v27 & 0xC) != 0)
      {
        v28 = *(_QWORD *)(v3 + 48);
        if ((*(_BYTE *)(v3 + 64) & 4) != 0)
          *(_QWORD *)(v3 + 48) = *(_QWORD *)(v3 + 56);
        if ((v27 & 8) != 0)
          *(_QWORD *)(v3 + 56) = v28;
      }
      if ((v27 & 1) != 0)
      {
        *(_DWORD *)(v3 + 48) = v43;
        *(_DWORD *)(v3 + 52) = v42;
      }
      if ((v27 & 2) != 0)
        *(_QWORD *)(v3 + 56) = v13;
      v7 += 18;
      *(_BYTE *)(v3 + 64) = v14;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v29 = RBDrawingStateInit();
    type metadata accessor for GraphicsContext.Storage();
    swift_allocObject();
    v30 = swift_retain();
    *a2 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v30, v29, 1, 0);
    swift_release();
  }
  return RBDrawingStateSetIdentifier2();
}

void DisplayList.GraphicsRenderer.render(item:in:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  _OWORD v5[2];
  uint64_t v6;
  _BYTE v7[32];
  _BYTE v8[8];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for DisplayList.ArchiveIDs?();
  MEMORY[0x24BDAC7A8](v2);
  MEMORY[0x24BDAC7A8](v3);
  v4 = *(_OWORD *)(a1 + 48);
  v5[0] = *(_OWORD *)(a1 + 32);
  v5[1] = v4;
  v6 = *(_QWORD *)(a1 + 64);
  outlined init with take of DisplayList.Item.Value((uint64_t)v5 + 8, (uint64_t)v7);
  outlined init with take of DisplayList.Item.Value((uint64_t)v7, (uint64_t)v8);
  __asm { BR              X10 }
}

uint64_t sub_234A9E69C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 192) = v0 & 0x3FFFFFFFFFFFFFFFLL;
  return ((uint64_t (*)(void))((char *)&loc_234A9E6B4 + dword_234AA0EFC[*(_QWORD *)(v1 - 200) >> 60]))();
}

uint64_t sub_234A9E6C4()
{
  uint64_t v0;
  uint64_t v1;
  _OWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  BOOL IsNull;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  CGRect v21;

  *(_OWORD *)(v0 + 192) = *(_OWORD *)(v1 + 20);
  v4 = *(_QWORD *)(v1 + 40);
  v5 = *v3;
  *(_QWORD *)(v0 + 656) = *v3;
  v6 = *(_QWORD *)(v4 + 16);
  if (v6)
  {
    outlined retain of DisplayList.Item(v0 + 704);
    outlined retain of DisplayList.Item(v0 + 704);
    swift_retain();
    swift_bridgeObjectRetain();
    v7 = v4 + 120 * v6 - 24;
    do
    {
      if (v6 > *(_QWORD *)(v4 + 16))
      {
        __break(1u);
        JUMPOUT(0x234AA04A0);
      }
      --v6;
      v8 = *(_DWORD *)(v7 + 48);
      v9 = *(_BYTE *)(v7 + 52);
      *v2 = *(_OWORD *)(v7 - 64);
      v2[1] = *(_OWORD *)(v7 - 48);
      v2[2] = *(_OWORD *)(v7 - 32);
      v2[3] = *(_OWORD *)(v7 - 16);
      v2[4] = *(_OWORD *)v7;
      v2[5] = *(_OWORD *)(v7 + 16);
      v2[6] = *(_OWORD *)(v7 + 32);
      *(_DWORD *)(v0 + 544) = v8;
      *(_BYTE *)(v0 + 548) = v9;
      GraphicsContext.addFilter(_:in:)(v0 + 432);
      v7 -= 120;
    }
    while (v6);
    swift_bridgeObjectRelease();
    v5 = *(_QWORD *)(v0 + 656);
  }
  else
  {
    outlined retain of DisplayList.Item(v0 + 704);
    outlined retain of DisplayList.Item(v0 + 704);
    swift_retain();
  }
  v10 = *(double *)(v0 + 704);
  v11 = *(double *)(v0 + 712);
  v12 = *(double *)(v0 + 720);
  v13 = *(double *)(v0 + 728);
  swift_retain();
  v21.origin.x = v10;
  v21.origin.y = v11;
  v21.size.width = v12;
  v21.size.height = v13;
  IsNull = CGRectIsNull(v21);
  if (IsNull)
    v15 = 0;
  else
    v15 = *(_QWORD *)&v10;
  if (IsNull)
    v16 = 0;
  else
    v16 = *(_QWORD *)&v11;
  *(_QWORD *)(v0 + 224) = v15;
  *(_QWORD *)(v0 + 232) = v16;
  if (IsNull)
    v17 = 0;
  else
    v17 = *(_QWORD *)&v12;
  if (IsNull)
    v18 = 0;
  else
    v18 = *(_QWORD *)&v13;
  *(_QWORD *)(v0 + 240) = v17;
  *(_QWORD *)(v0 + 248) = v18;
  if (IsNull)
    v19 = 6;
  else
    v19 = 0;
  *(_BYTE *)(v0 + 256) = v19;
  *v2 = *(_OWORD *)(v0 + 192);
  v2[1] = 0u;
  v2[2] = 0u;
  v2[3] = 0u;
  *(_OWORD *)((char *)v2 + 57) = 0u;
  *(_QWORD *)(v0 + 272) = 256;
  *(_OWORD *)(v0 + 280) = 0u;
  *(_OWORD *)(v0 + 296) = 0u;
  *(_BYTE *)(v0 + 312) = 0;
  GraphicsContext.draw(_:with:style:)(v0 + 224, (unint64_t *)(v0 + 432), (uint64_t *)(v0 + 272), v5);
  outlined consume of Path.Storage(v15, v16, v17, v18, v19);
  swift_release();
  outlined release of DisplayList.Item(v0 + 704);
  swift_release();
  return outlined release of DisplayList.Item(v0 + 704);
}

void sub_234AA0E28()
{
  uint64_t v0;
  char v1;

  outlined consume of DisplayList.Effect(v0, v1, 10);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x234AA0E8CLL);
}

uint64_t closure #1 in DisplayList.GraphicsRenderer.render(item:in:)(uint64_t *a1, double *a2, _QWORD *a3, uint64_t a4)
{
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7 = a2[2];
  v8 = a2[3];
  if (*a2 != 0.0 || a2[1] != 0.0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = RBDrawingStateInit();
      type metadata accessor for GraphicsContext.Storage();
      swift_allocObject();
      v10 = swift_retain();
      *a1 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v10, v9, 1, 0);
      swift_release();
    }
    RBDrawingStateTranslateCTM();
  }
  v11 = a3[3];
  v12 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v11);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, double, double))(v12 + 32))(*a1, a4, v11, v12, v7, v8);
}

uint64_t DisplayList.GraphicsRenderer.drawImplicitLayer(in:content:)(uint64_t a1, void (*a2)(uint64_t *))
{
  uint64_t v2;
  int v3;
  char v4;
  uint64_t result;

  v3 = *(unsigned __int8 *)(v2 + 96);
  *(_BYTE *)(v2 + 96) = 0;
  if (v3)
    v4 = 0;
  else
    v4 = 16;
  result = GraphicsContext.drawLayer(flags:content:)(v4, a2);
  *(_BYTE *)(v2 + 96) = v3;
  return result;
}

uint64_t closure #2 in DisplayList.GraphicsRenderer.render(item:in:)(uint64_t a1, double *a2, _QWORD *a3, double a4, double a5, uint64_t a6, uint64_t a7, _QWORD *a8, uint64_t a9)
{
  unint64_t v16;
  unint64_t v17;
  double v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  id v22;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v25;

  GraphicsContext.translateBy(x:y:)(*a2, a2[1]);
  v16 = a3[6];
  v17 = a3[7];
  v18 = fmax(round(GraphicsContext.userToDeviceScale.getter()), 1.0);
  swift_beginAccess();
  v19 = a3[2];
  if (*(_QWORD *)(v19 + 16)
    && (v20 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17, a7, v18), (v21 & 1) != 0))
  {
    v22 = *(id *)(*(_QWORD *)(v19 + 56) + 8 * v20);
    swift_endAccess();
    swift_unknownObjectRetain();
  }
  else
  {
    swift_endAccess();
    v22 = closure #1 in implicit closure #1 in closure #2 in DisplayList.GraphicsRenderer.render(item:in:)(v18, a4, a5, a1, v16, v17, a7, a8, a9);
  }
  swift_beginAccess();
  swift_unknownObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v25 = a3[4];
  a3[4] = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v22, v16, v17, a7, isUniquelyReferenced_nonNull_native, v18);
  a3[4] = v25;
  swift_bridgeObjectRelease();
  swift_endAccess();
  RBDrawingStateDrawDisplayList();
  return swift_unknownObjectRelease();
}

id closure #1 in implicit closure #1 in closure #2 in DisplayList.GraphicsRenderer.render(item:in:)(double a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, uint64_t a9)
{
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  BOOL v18;
  id v19;

  v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EEF8]), sel_init);
  objc_msgSend(v14, sel_setDefaultColorSpace_, RBDrawingStateGetDefaultColorSpace());
  objc_msgSend(v14, sel_setDeviceScale_, a1);
  RBDisplayListGetState();
  v15 = (id)RBDrawingStateBeginCGContext();
  v16 = objc_msgSend(objc_allocWithZone((Class)CoreGraphicsContext), sel_initWithCGContext_, v15);
  objc_msgSend(v16, sel_push);
  if (one-time initialization token for shared != -1)
    swift_once();
  v17 = static TextDrawingContext.shared;
  if (a8[24])
  {
    swift_retain();
    v18 = NSAttributedString.isDynamic.getter();
  }
  else
  {
    swift_retain();
    v18 = 0;
  }
  (*(void (**)(uint64_t, BOOL, uint64_t, uint64_t, double, double, double, double, double, double))(*a8 + 288))(1, v18, v17, a9, 0.0, 0.0, a2, a3, a2, a3);
  swift_release();
  objc_msgSend(v16, "pop");

  RBDrawingStateEndCGContext();
  v19 = objc_msgSend(v14, sel_moveContents);

  return v19;
}

void DisplayList.GraphicsRenderer.renderPlatformView(_:in:size:viewType:)(uint64_t a1, uint64_t a2, double a3, CGFloat a4)
{
  uint64_t v4;
  int v9;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  id v18;

  swift_beginAccess();
  v9 = *(unsigned __int8 *)(v4 + 112);
  if (v9 != 2)
  {
    if (v9 == 3 || a1 == 0)
    {
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease();
      v11._countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      v12._countAndFlagsBits = 46;
      v12._object = (void *)0xE100000000000000;
      String.append(_:)(v12);
      specialized static Log.externalWarning(_:)(0xD000000000000026, 0x80000002352DF040);
      swift_bridgeObjectRelease();
      v13 = RBDrawingStateBeginLayer();
      type metadata accessor for GraphicsContext.Storage();
      swift_allocObject();
      v14 = swift_retain();
      GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v14, v13, 0, 1);
      GraphicsContext.renderMissingPlatformView(size:)((CGSize)__PAIR128__(*(unint64_t *)&a4, *(unint64_t *)&a3));
      RBDrawingStateDrawLayer();
      swift_release();
    }
    else
    {
      v15 = (void *)swift_unknownObjectRetain();
      v16 = (id)CoreViewSpeculativeLayer(v15);
      if (v16)
      {
        v17 = v16;
        if ((v9 & 1) != 0)
        {
          objc_msgSend(v16, sel_setBounds_, 0.0, 0.0, a3, a4);
          objc_msgSend(v17, sel_layoutIfNeeded);
        }
        v18 = v17;
        specialized GraphicsContext.drawLayer(flags:content:)(0, a4, a2, v18);
        swift_unknownObjectRelease();

      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
  }
}

Swift::Void __swiftcall GraphicsContext.renderMissingPlatformView(size:)(CGSize size)
{
  uint64_t v1;
  uint64_t v2;
  CGFloat height;
  CGFloat width;
  double v5;
  double v6;
  CGFloat v7;
  double v8;
  double v9;
  double v10;
  double v11;
  _BOOL4 IsNull;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  double v16;
  _BYTE v17[40];
  char v18;
  _BYTE v19[56];
  __int128 v20;
  char v21;
  _OWORD v22[2];
  char v23;
  _QWORD v24[4];
  unsigned __int8 v25;
  CGRect v26;
  CGRect v27;
  CGRect v28;

  v2 = v1;
  height = size.height;
  width = size.width;
  v5 = size.width * 0.5;
  v6 = size.height * 0.5;
  if (size.height >= size.width)
    size.height = size.width;
  v16 = size.height * 0.5 * 0.2;
  v7 = size.height * 0.5 - v16;
  v8 = v7 * 0.707106781;
  memset(v17, 0, 32);
  v17[32] = 6;
  v9 = v5 - v7;
  v10 = v6 - v7;
  v11 = v7 + v7;
  v26.origin.x = v5 - v7;
  v26.origin.y = v10;
  v26.size.width = v11;
  v26.size.height = v11;
  if (!CGRectIsNull(v26))
  {
    *(_QWORD *)v19 = 0x3FF0000000000000;
    *(_OWORD *)&v19[8] = 0uLL;
    *(_OWORD *)&v19[24] = 0x3FF0000000000000uLL;
    *(_QWORD *)&v19[40] = 0;
    v27.origin.x = v9;
    v27.origin.y = v10;
    v27.size.width = v11;
    v27.size.height = v11;
    *(CGRect *)v17 = CGRectApplyAffineTransform(v27, (CGAffineTransform *)v19);
    v17[32] = 1;
  }
  specialized Path.withMutableBuffer(do:)((uint64_t)v17, v5 + v8, v6 + v8);
  specialized Path.withMutableBuffer(do:)((uint64_t)v17, v5 - v8, v6 - v8);
  v22[0] = *(_OWORD *)v17;
  v22[1] = *(_OWORD *)&v17[16];
  v23 = v17[32];
  v28.origin.x = 0.0;
  v28.origin.y = 0.0;
  v28.size.width = width;
  v28.size.height = height;
  IsNull = CGRectIsNull(v28);
  if (IsNull)
    v13 = 0;
  else
    v13 = *(_QWORD *)&width;
  if (IsNull)
    v14 = 0;
  else
    v14 = *(_QWORD *)&height;
  if (IsNull)
    v15 = 6;
  else
    v15 = 0;
  v24[0] = 0;
  v24[1] = 0;
  v24[2] = v13;
  v24[3] = v14;
  v25 = v15;
  if (one-time initialization token for yellow != -1)
    swift_once();
  *(_QWORD *)v19 = static Color.yellow;
  memset(&v19[8], 0, 48);
  v20 = 0u;
  v21 = 1;
  *(_QWORD *)v17 = 256;
  memset(&v17[8], 0, 32);
  v18 = 0;
  swift_retain();
  GraphicsContext.draw(_:with:style:)((uint64_t)v24, (unint64_t *)v19, (uint64_t *)v17, v2);
  outlined consume of Path.Storage(0, 0, v13, v14, v15);
  swift_release();
  if (one-time initialization token for red != -1)
    swift_once();
  *(_QWORD *)v19 = static Color.red;
  memset(&v19[8], 0, 48);
  v20 = 0u;
  v21 = 1;
  *(double *)v17 = v16;
  *(_OWORD *)&v17[8] = xmmword_2352826E0;
  *(_QWORD *)&v17[24] = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&v17[32] = 0;
  v18 = 1;
  swift_retain();
  GraphicsContext.draw(_:with:style:)((uint64_t)v22, (unint64_t *)v19, (uint64_t *)v17, v2);
  outlined retain of Path.Storage((uint64_t)v22, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  swift_release();
}

uint64_t DisplayList.GraphicsRenderer.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t DisplayList.GraphicsRenderer.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t (*specialized Array.subscript.read(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x23B7C6D9C](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_retain();
LABEL_5:
    *v3 = v4;
    return destroy for Image.ResizableProvider;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x23B7C6D9C](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_retain();
LABEL_5:
    *v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

void (*specialized Array.subscript.read(void (**a1)(void ***a1), unint64_t a2, uint64_t a3))(void ***a1)
{
  void (*result)(void ***);
  void (*v7)(void ***);
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;

  result = (void (*)(void ***))malloc(0x75uLL);
  *a1 = result;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(a3 + 16) > a2)
  {
    v7 = result;
    v8 = a3 + 120 * a2;
    v9 = *(void **)(v8 + 32);
    v10 = *(_QWORD *)(v8 + 40);
    v11 = *(void **)(v8 + 48);
    v12 = *(_QWORD *)(v8 + 56);
    v13 = *(_QWORD *)(v8 + 64);
    v14 = *(_QWORD *)(v8 + 72);
    v15 = *(_QWORD *)(v8 + 80);
    v16 = *(_QWORD *)(v8 + 88);
    v17 = *(_QWORD *)(v8 + 96);
    v18 = *(_QWORD *)(v8 + 104);
    v19 = *(_QWORD *)(v8 + 112);
    v20 = *(_QWORD *)(v8 + 120);
    v21 = *(_QWORD *)(v8 + 128);
    v22 = *(_QWORD *)(v8 + 136);
    v23 = *(_DWORD *)(v8 + 144);
    LOBYTE(v8) = *(_BYTE *)(v8 + 148);
    *(_QWORD *)v7 = v9;
    *((_QWORD *)v7 + 1) = v10;
    *((_QWORD *)v7 + 2) = v11;
    *((_QWORD *)v7 + 3) = v12;
    *((_QWORD *)v7 + 4) = v13;
    *((_QWORD *)v7 + 5) = v14;
    *((_QWORD *)v7 + 6) = v15;
    *((_QWORD *)v7 + 7) = v16;
    *((_QWORD *)v7 + 8) = v17;
    *((_QWORD *)v7 + 9) = v18;
    *((_QWORD *)v7 + 10) = v19;
    *((_QWORD *)v7 + 11) = v20;
    *((_QWORD *)v7 + 12) = v21;
    *((_QWORD *)v7 + 13) = v22;
    *((_DWORD *)v7 + 28) = v23;
    *((_BYTE *)v7 + 116) = v8;
    outlined copy of GraphicsFilter(v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, SBYTE2(v23));
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

void Array.subscript.readspecialized (void ***a1)
{
  void **v1;

  v1 = *a1;
  outlined consume of GraphicsFilter(**a1, (int)v1[1], v1[2], (char)v1[3], (uint64_t)v1[4], (uint64_t)v1[5], (uint64_t)v1[6], (uint64_t)v1[7], (uint64_t)v1[8], (uint64_t)v1[9], (uint64_t)v1[10], (uint64_t)v1[11], (uint64_t)v1[12], (uint64_t)v1[13], *((_DWORD *)v1 + 28), BYTE2(*((_DWORD *)v1 + 28)));
  free(v1);
}

BOOL specialized static DisplayList.GraphicsRenderer.Cache.CallbackKey.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(*(int32x4_t *)a1, *(int32x4_t *)a2)), 0xFuLL))) & 1) != 0
    && *(unsigned __int16 *)(a1 + 16) == *(unsigned __int16 *)(a2 + 16))
  {
    return *(double *)(a1 + 24) == *(double *)(a2 + 24);
  }
  return result;
}

__n128 specialized DisplayList.GraphicsRenderer.render(at:do:)(unint64_t *a1, __n128 *a2, uint64_t a3, uint64_t a4, int a5, uint64_t *a6)
{
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 v12;
  unint64_t v13;
  __n128 result;
  __n128 v15;
  uint64_t v16;
  __int16 v17;
  char v18;

  v10 = a2[3].n128_u64[0];
  v11 = a2[3].n128_u64[1];
  v12 = a2[4].n128_u8[0];
  a2[4].n128_u64[1] = *a1;
  if (one-time initialization token for infinity != -1)
    swift_once();
  a2[5].n128_u64[0] = static Time.infinity;
  v16 = a4;
  v17 = a5;
  v18 = BYTE2(a5);
  DisplayList.GraphicsRenderer.render(list:in:)(&v16, a6);
  swift_beginAccess();
  v13 = MEMORY[0x24BEE4B00];
  a2[1].n128_u64[0] = MEMORY[0x24BEE4B00];
  a2[1].n128_u64[1] = v13;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v15 = a2[1];
  result = a2[2];
  a2[1] = result;
  a2[2] = v15;
  a2[3].n128_u64[0] = v10;
  a2[3].n128_u64[1] = v11;
  a2[4].n128_u8[0] = v12;
  return result;
}

double _s7SwiftUI15GraphicsContextV15ResolvedShadingOSgWOi0_(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 96) = 0x7FFFF00FCFE00;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 152) = 0;
  return result;
}

uint64_t outlined init with take of GraphicsContext.ResolvedShading?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for GraphicsContext.ResolvedShading?(0, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of DisplayList.Item.Value(uint64_t a1, uint64_t a2)
{
  __swift_memcpy27_8(a2, a1);
  return a2;
}

uint64_t outlined retain of DisplayList.Item(uint64_t a1)
{
  outlined copy of DisplayList.Item.Value(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  return a1;
}

uint64_t outlined release of DisplayList.Item(uint64_t a1)
{
  outlined consume of DisplayList.Item.Value(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  return a1;
}

uint64_t partial apply for closure #1 in DisplayList.GraphicsRenderer.render(item:in:)(uint64_t *a1)
{
  uint64_t v1;

  return closure #1 in DisplayList.GraphicsRenderer.render(item:in:)(a1, *(double **)(v1 + 16), *(_QWORD **)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi0_(uint64_t result)
{
  *(_QWORD *)(result + 96) = *(_QWORD *)(result + 96) & 0xFF0301FFLL | 0x1000000000000000;
  return result;
}

uint64_t type metadata accessor for DisplayList.GraphicsRenderer()
{
  return objc_opt_self();
}

uint64_t method lookup function for DisplayList.GraphicsRenderer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DisplayList.GraphicsRenderer.__allocating_init(platformViewMode:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t getEnumTagSinglePayload for DisplayList.GraphicsRenderer.PlatformViewMode(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t result;
  unsigned int v6;
  unsigned int v7;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
  {
    v6 = *a1;
    if (v6 >= 2)
    {
      v7 = (v6 + 2147483646) & 0x7FFFFFFF;
      result = v7 - 1;
      if (v7 > 1)
        return result;
    }
    return 0;
  }
  v2 = a2 + 3;
  if (a2 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if (v2 >> 8 < 0xFF)
    v3 = 1;
  if (v2 >= 0x100)
    v4 = v3;
  else
    v4 = 0;
  return ((uint64_t (*)(void))((char *)&loc_234AA1E68 + 4 * byte_2352826F8[v4]))();
}

uint64_t storeEnumTagSinglePayload for DisplayList.GraphicsRenderer.PlatformViewMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 3;
  if (a3 + 3 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFD)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_234AA1F14 + 4 * byte_235282702[v5]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_234AA1F48 + 4 * byte_2352826FD[v5]))();
}

uint64_t sub_234AA1F48(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234AA1F50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234AA1F58);
  return result;
}

uint64_t sub_234AA1F64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234AA1F6CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_234AA1F70(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234AA1F78(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for DisplayList.GraphicsRenderer.PlatformViewMode(unsigned __int8 *a1)
{
  unsigned int v1;
  BOOL v2;
  int v3;

  v1 = *a1;
  v2 = v1 >= 2;
  v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2)
    return (v3 + 1);
  else
    return 0;
}

_BYTE *destructiveInjectEnumTag for DisplayList.GraphicsRenderer.PlatformViewMode(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 1;
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.GraphicsRenderer.PlatformViewMode()
{
  return &type metadata for DisplayList.GraphicsRenderer.PlatformViewMode;
}

uint64_t destroy for DisplayList.GraphicsRenderer.Cache()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for DisplayList.GraphicsRenderer.Cache(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for DisplayList.GraphicsRenderer.Cache(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for DisplayList.GraphicsRenderer.Cache(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

void *type metadata accessor for DisplayList.GraphicsRenderer.Cache()
{
  return &unk_25060FF98;
}

uint64_t outlined destroy of NamedImage.Cache.WeakCatalog?(uint64_t a1, unint64_t *a2)
{
  uint64_t v3;

  type metadata accessor for GraphicsContext.ResolvedShading?(0, a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for WeakBox<AnyLocationBase>?(uint64_t a1)
{
  type metadata accessor for [(_:)](a1, &lazy cache variable for type metadata for WeakBox<AnyLocationBase>?, (uint64_t (*)(uint64_t))type metadata accessor for WeakBox<AnyLocationBase>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

void type metadata accessor for WeakBox<AnyLocationBase>(uint64_t a1)
{
  type metadata accessor for [(_:)](a1, &lazy cache variable for type metadata for WeakBox<AnyLocationBase>, (uint64_t (*)(uint64_t))type metadata accessor for AnyLocationBase, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for WeakBox);
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 8))();
  return a1;
}

void type metadata accessor for GraphicsContext.ResolvedShading?(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = type metadata accessor for Optional();
    if (!v4)
      atomic_store(v3, a2);
  }
}

void type metadata accessor for AccessibilityCustomAttributes.Value?(uint64_t a1)
{
  type metadata accessor for [(_:)](a1, &lazy cache variable for type metadata for AccessibilityCustomAttributes.Value?, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityCustomAttributes.Value, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

ValueMetadata *type metadata accessor for DisplayList.GraphicsRenderer.Cache.AnimatorKey()
{
  return &type metadata for DisplayList.GraphicsRenderer.Cache.AnimatorKey;
}

ValueMetadata *type metadata accessor for DisplayList.GraphicsRenderer.Cache.CallbackKey()
{
  return &type metadata for DisplayList.GraphicsRenderer.Cache.CallbackKey;
}

double DisplayList.InterpolatorGroup.maxDuration.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(double *)(v0 + 16);
}

uint64_t DisplayList.InterpolatorGroup.maxDuration.setter(double a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(double *)(v1 + 16) = a1;
  return result;
}

uint64_t (*DisplayList.InterpolatorGroup.maxDuration.modify())()
{
  swift_beginAccess();
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

uint64_t DisplayList.InterpolatorGroup.deinit()
{
  uint64_t v0;

  (*(void (**)(void))(*(_QWORD *)v0 + 88))();
  return v0;
}

uint64_t DisplayList.InterpolatorGroup.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(void))(*(_QWORD *)v0 + 88))();
  return swift_deallocClassInstance();
}

uint64_t DisplayList.InterpolatorGroup.rewriteDisplayList(_:time:contentOrigin:contentOffset:version:)(uint64_t a1, unsigned int a2, uint64_t *a3, double a4, double a5, double a6, double a7)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v15;
  _BYTE v17[9];

  if ((*(_WORD *)(a1 + 8) & 0x10) != 0)
  {
    v8 = *a3;
    v17[0] = 0;
    *(_WORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 10) = 0;
    v9 = *(_QWORD **)a1;
    v15 = v8;
    if (*(_QWORD *)(*(_QWORD *)a1 + 16))
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        goto LABEL_11;
      for (; v9[2]; v9 = specialized _ArrayBuffer._consumeAndCreateNew()(v9))
      {
        closure #1 in DisplayList.InterpolatorGroup.rewriteDisplayList(_:time:contentOrigin:contentOffset:version:)(v9 + 4, v7, a2, v15, v17, a4, a5, a6, a7);
        if (v9[2])
        {
          DisplayList.Item.features.getter();
          if (v9[2])
            __asm { BR              X10 }
        }
        else
        {
          __break(1u);
        }
        __break(1u);
LABEL_11:
        ;
      }
      __break(1u);
      JUMPOUT(0x234AA26F8);
    }
  }
  return 0;
}

unint64_t closure #1 in DisplayList.InterpolatorGroup.rewriteDisplayList(_:time:contentOrigin:contentOffset:version:)(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, _BYTE *a5, double a6, double a7, double a8, double a9)
{
  unint64_t v9;
  _BYTE *v10;
  unint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  __int16 v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  char v26;
  uint64_t v27;
  __int16 v28;
  char v29;
  double v30;
  double v31;
  double v32;
  double v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;
  char v38;
  int v39;
  char v40;
  uint64_t v41;
  __int16 v42;
  char v43;
  uint64_t v44;
  __int16 v45;
  char v46;
  double v47;
  double v48;
  uint64_t (*v49)(unint64_t, uint64_t *, uint64_t, unint64_t *, double, double, double, double, double, double, double, double);
  int v50;
  char v51;
  int v52;
  char v53;
  int v54;
  char v55;
  unint64_t v57;
  unint64_t v58;
  __int16 v59;
  char v60;
  uint64_t v61;
  __int16 v62;
  char v63;

  v9 = *(_QWORD *)(result + 48);
  if ((v9 >> 62) - 2 < 2)
    return result;
  v10 = a5;
  v16 = result;
  v17 = *(_QWORD *)(result + 40);
  v18 = *(unsigned __int8 *)(result + 66);
  v19 = *(unsigned __int16 *)(result + 64);
  if (!(v9 >> 62))
  {
    if (v17 >> 60 != 9)
      return result;
    v20 = *(_WORD *)(v17 + 24);
    v21 = *(_BYTE *)(v17 + 26);
    v22 = *(_QWORD *)(v17 + 32);
    v23 = *(_QWORD *)(v17 + 40);
    v54 = *(_DWORD *)(v17 + 52);
    v55 = *(_BYTE *)(v17 + 48);
    v52 = *(_DWORD *)(v17 + 60);
    v53 = *(_BYTE *)(v17 + 56);
    v51 = *(_BYTE *)(v17 + 64);
    v61 = *(_QWORD *)(v17 + 16);
    v62 = v20;
    v63 = v21;
    v24 = *(double *)result + a6;
    v25 = *(double *)(result + 8) + a7;
    v58 = a4;
    outlined copy of DisplayList.Item.Value(v17, v9);
    outlined copy of DisplayList.Item.Value(v17, v9);
    swift_bridgeObjectRetain();
    v26 = DisplayList.InterpolatorGroup.rewriteDisplayList(_:time:contentOrigin:contentOffset:version:)((uint64_t)&v61, a3, (uint64_t *)&v58, v24, v25, a8, a9);
    v27 = swift_allocObject();
    v28 = v62;
    v29 = v63;
    *(_QWORD *)(v27 + 16) = v61;
    *(_WORD *)(v27 + 24) = v28;
    *(_BYTE *)(v27 + 26) = v29;
    *(_QWORD *)(v27 + 32) = v22;
    *(_QWORD *)(v27 + 40) = v23;
    *(_BYTE *)(v27 + 48) = v55;
    *(_DWORD *)(v27 + 52) = v54;
    *(_BYTE *)(v27 + 56) = v53;
    *(_DWORD *)(v27 + 60) = v52;
    *(_BYTE *)(v27 + 64) = v51;
    outlined consume of DisplayList.Item.Value(v17, v9);
    outlined consume of DisplayList.Item.Value(v17, v9);
    result = outlined consume of DisplayList.Content.Value(v17);
    if ((v26 & 1) != 0)
    {
      if (a4)
        v9 = (2 * ((33 * (a4 >> 16)) ^ a4)) | 1;
      else
        LOWORD(v9) = 0;
    }
    *(_QWORD *)(v16 + 40) = v27 | 0x9000000000000000;
    *(_QWORD *)(v16 + 48) = (unsigned __int16)v9;
    *(_QWORD *)(v16 + 56) = 0;
    *(_BYTE *)(v16 + 66) = 0;
    *(_WORD *)(v16 + 64) = 0;
    goto LABEL_18;
  }
  v61 = *(_QWORD *)(result + 56);
  v62 = v19;
  v63 = (v19 | (v18 << 16)) >> 16;
  v30 = *(double *)result;
  v31 = *(double *)(result + 8);
  v32 = *(double *)result + a6;
  v33 = v31 + a7;
  v58 = a4;
  outlined copy of DisplayList.Item.Value(v17, v9);
  outlined copy of DisplayList.Effect(v17, v9, SBYTE4(v9));
  v34 = DisplayList.InterpolatorGroup.rewriteDisplayList(_:time:contentOrigin:contentOffset:version:)((uint64_t)&v61, a3, (uint64_t *)&v58, v32, v33, a8, a9);
  if (BYTE4(v9) == 7)
  {
    v36 = *(_QWORD *)(v17 + 16);
    v37 = *(_WORD *)(v17 + 24);
    v38 = *(_BYTE *)(v17 + 26);
    v39 = *(_DWORD *)(v17 + 28);
    v57 = a4;
    v58 = v36;
    v59 = v37;
    v60 = v38;
    swift_bridgeObjectRetain();
    v40 = DisplayList.InterpolatorGroup.rewriteDisplayList(_:time:contentOrigin:contentOffset:version:)((uint64_t)&v58, a3, (uint64_t *)&v57, v32, v33, a8, a9);
    outlined consume of DisplayList.Effect(v17, v9, 7);
    v26 = v40 | v34;
    v41 = swift_allocObject();
    v42 = v59;
    v43 = v60;
    *(_QWORD *)(v41 + 16) = v58;
    *(_WORD *)(v41 + 24) = v42;
    *(_BYTE *)(v41 + 26) = v43;
    *(_DWORD *)(v41 + 28) = v39;
    outlined consume of DisplayList.Effect(v17, v9, 7);
    result = outlined consume of DisplayList.Item.Value(v17, v9);
    LODWORD(v9) = 0;
    v35 = 0x700000000;
    v17 = v41;
  }
  else
  {
    if (BYTE4(v9) == 17)
    {
      if (v17 == a2)
      {
        v47 = *(double *)(v16 + 16);
        v48 = *(double *)(v16 + 24);
        v58 = a4;
        v49 = *(uint64_t (**)(unint64_t, uint64_t *, uint64_t, unint64_t *, double, double, double, double, double, double, double, double))(*(_QWORD *)a2 + 136);
        swift_retain();
        LOBYTE(v49) = v49(v9, &v61, a3, &v58, v30, v31, v47, v48, v32, v33, a8, a9);
        outlined consume of DisplayList.Effect(v17, v9, 17);
        outlined consume of DisplayList.Effect(v17, v9, 17);
        swift_release();
        result = outlined consume of DisplayList.Item.Value(v17, v9);
        v17 = 0;
        LODWORD(v9) = 0;
        v26 = v49 | v34;
        v35 = 0x1300000000;
        goto LABEL_14;
      }
      outlined consume of DisplayList.Effect(v17, v9, 17);
      result = outlined consume of DisplayList.Item.Value(v17, v9);
      v35 = 0x1100000000;
    }
    else
    {
      outlined consume of DisplayList.Effect(v17, v9, SBYTE4(v9));
      result = outlined consume of DisplayList.Item.Value(v17, v9);
      v35 = v9 & 0xFF00000000;
    }
    v26 = v34;
  }
LABEL_14:
  v10 = a5;
  v44 = v61;
  v45 = v62;
  v46 = v63;
  *(_QWORD *)(v16 + 40) = v17;
  *(_QWORD *)(v16 + 48) = v9 | (unint64_t)v35 | 0x4000000000000000;
  *(_QWORD *)(v16 + 56) = v44;
  *(_BYTE *)(v16 + 66) = v46;
  *(_WORD *)(v16 + 64) = v45;
LABEL_18:
  v50 = *v10;
  if (v50 != 1)
    LOBYTE(v50) = v26 & 1;
  *v10 = v50;
  if ((v26 & 1) != 0)
    *(_QWORD *)(v16 + 32) = a4;
  return result;
}

uint64_t DisplayList.UnaryInterpolatorGroup.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = swift_allocObject();
  if (one-time initialization token for infinity != -1)
    swift_once();
  v1 = static Time.infinity;
  v2 = MEMORY[0x24BEE4AF8];
  *(_WORD *)(v0 + 32) = 0;
  *(_BYTE *)(v0 + 34) = 0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 56) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 64) = v1;
  *(_DWORD *)(v0 + 72) = 0;
  *(_BYTE *)(v0 + 76) = 1;
  *(_DWORD *)(v0 + 116) = 0;
  *(_QWORD *)(v0 + 80) = v2;
  *(_QWORD *)(v0 + 88) = 0;
  *(_QWORD *)(v0 + 96) = 0;
  *(_QWORD *)(v0 + 104) = 0;
  *(_BYTE *)(v0 + 112) = 0;
  *(_BYTE *)(v0 + 120) = 1;
  *(_DWORD *)(v0 + 124) = 160;
  *(_BYTE *)(v0 + 128) = 3;
  *(_QWORD *)(v0 + 16) = 0x7FF0000000000000;
  *(_QWORD *)(v0 + 24) = v2;
  return v0;
}

uint64_t DisplayList.UnaryInterpolatorGroup.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = one-time initialization token for infinity;
  swift_retain();
  if (v1 != -1)
    swift_once();
  v2 = static Time.infinity;
  v3 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 24) = MEMORY[0x24BEE4AF8];
  *(_WORD *)(v0 + 32) = 0;
  *(_BYTE *)(v0 + 34) = 0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 56) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 64) = v2;
  *(_DWORD *)(v0 + 72) = 0;
  *(_BYTE *)(v0 + 76) = 1;
  *(_DWORD *)(v0 + 116) = 0;
  *(_QWORD *)(v0 + 80) = v3;
  *(_QWORD *)(v0 + 88) = 0;
  *(_QWORD *)(v0 + 96) = 0;
  *(_QWORD *)(v0 + 104) = 0;
  *(_BYTE *)(v0 + 112) = 0;
  *(_BYTE *)(v0 + 120) = 1;
  *(_DWORD *)(v0 + 124) = 160;
  *(_BYTE *)(v0 + 128) = 3;
  swift_release();
  *(_QWORD *)(v0 + 16) = 0x7FF0000000000000;
  return v0;
}

Swift::Void __swiftcall DisplayList.UnaryInterpolatorGroup.reset()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void (*v6)(void);
  id v7;
  id v8;
  id v9;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    v3 = v1 + 112;
    do
    {
      if (*(_QWORD *)v3)
      {
        v4 = *(void **)(v3 - 8);
        v5 = *(void **)(v3 - 24);
        v6 = *(void (**)(void))(**(_QWORD **)v3 + 96);
        v7 = *(id *)(v3 - 16);
        v8 = v4;
        swift_retain_n();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        v9 = v5;
        v6();
        swift_release_n();

        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
      }
      v3 += 112;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)(v0 + 80) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 96) = 0;
  *(_BYTE *)(v0 + 107) = 1;
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_release();
}

SwiftUI::Time __swiftcall DisplayList.UnaryInterpolatorGroup.nextUpdate(after:)(SwiftUI::Time after)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  SwiftUI::Time result;

  v3 = v1;
  swift_beginAccess();
  v4 = v2 + 8;
  if (*(_QWORD *)(v2[10] + 16))
    v4 = v2 + 11;
  *(SwiftUI::Time *)&result.seconds = (SwiftUI::Time)*v4;
  *v3 = *v4;
  return result;
}

uint64_t DisplayList.UnaryInterpolatorGroup.features.getter@<X0>(_WORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  __int16 *v9;
  uint64_t v10;
  __int16 v11;
  __int16 v12;
  uint64_t v13;
  __int16 *v14;
  __int16 v15;

  result = swift_beginAccess();
  v4 = *(_WORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 80);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    if (v6 == 1)
    {
      v7 = 0;
LABEL_7:
      v13 = v6 - v7;
      v14 = (__int16 *)(v5 + 112 * v7 + 40);
      do
      {
        v15 = *v14;
        v14 += 56;
        v4 |= v15;
        --v13;
      }
      while (v13);
      goto LABEL_9;
    }
    v8 = 0;
    v7 = v6 & 0x7FFFFFFFFFFFFFFELL;
    v9 = (__int16 *)(v5 + 152);
    v10 = v6 & 0x7FFFFFFFFFFFFFFELL;
    do
    {
      v11 = *(v9 - 56);
      v12 = *v9;
      v9 += 112;
      v4 |= v11;
      v8 |= v12;
      v10 -= 2;
    }
    while (v10);
    v4 |= v8;
    if (v6 != v7)
      goto LABEL_7;
  }
LABEL_9:
  *a1 = v4;
  return result;
}

uint64_t DisplayList.UnaryInterpolatorGroup.properties.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char *v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  char *v14;
  char v15;

  result = swift_beginAccess();
  v4 = *(_BYTE *)(v1 + 34);
  v5 = *(_QWORD *)(v1 + 80);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    if (v6 == 1)
    {
      v7 = 0;
LABEL_7:
      v13 = v6 - v7;
      v14 = (char *)(v5 + 112 * v7 + 42);
      do
      {
        v15 = *v14;
        v14 += 112;
        v4 |= v15;
        --v13;
      }
      while (v13);
      goto LABEL_9;
    }
    v8 = 0;
    v7 = v6 & 0x7FFFFFFFFFFFFFFELL;
    v9 = (char *)(v5 + 154);
    v10 = v6 & 0x7FFFFFFFFFFFFFFELL;
    do
    {
      v11 = *(v9 - 112);
      v12 = *v9;
      v9 += 224;
      v4 |= v11;
      v8 |= v12;
      v10 -= 2;
    }
    while (v10);
    v4 |= v8;
    if (v6 != v7)
      goto LABEL_7;
  }
LABEL_9:
  *a1 = v4;
  return result;
}

uint64_t DisplayList.UnaryInterpolatorGroup.update(contentSeed:transition:animation:listener:contentsScale:rasterizationOptions:supportsVFD:)(unsigned __int16 *a1, uint64_t *a2, uint64_t a3, uint64_t a4, char *a5, char a6, float a7)
{
  uint64_t v7;
  uint64_t v12;
  __int16 v13;
  int v14;
  char v15;
  char v16;
  int v17;
  char v18;
  int v19;
  char v20;
  uint64_t result;
  uint64_t v22;
  int v23;
  __int16 v24;
  char v25;
  unsigned __int16 v26;

  v12 = *a2;
  v13 = *((_WORD *)a2 + 6);
  v14 = *((_DWORD *)a2 + 2);
  v15 = *((_BYTE *)a2 + 14);
  v16 = *a5;
  v17 = *((_DWORD *)a5 + 1);
  v18 = a5[8];
  v19 = *((_DWORD *)a5 + 3);
  v20 = a5[16];
  v26 = *a1;
  v22 = v12;
  v23 = v14;
  v24 = v13;
  v25 = v15;
  swift_beginAccess();
  DisplayList.InterpolatorLayer.update(contentSeed:transition:animation:listener:supportsVFD:)(&v26, (uint64_t)&v22, a3, a4, a6);
  result = swift_endAccess();
  if (*(float *)(v7 + 108) != a7)
  {
    *(float *)(v7 + 108) = a7;
    swift_beginAccess();
    DisplayList.InterpolatorLayer.invalidateContentsScale()();
    result = swift_endAccess();
  }
  *(_BYTE *)(v7 + 112) = v16;
  *(_DWORD *)(v7 + 116) = v17;
  *(_BYTE *)(v7 + 120) = v18;
  *(_DWORD *)(v7 + 124) = v19;
  *(_BYTE *)(v7 + 128) = v20;
  return result;
}

unsigned __int16 *DisplayList.InterpolatorLayer.update(contentSeed:transition:animation:listener:supportsVFD:)(unsigned __int16 *result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int v19;
  void (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  BOOL v38;
  int v39;
  int v40;
  id v41;
  char v42;
  int v43;
  char v44;
  __int16 v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  void *v50;
  void *v51;
  int v52;
  __int16 v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;

  v6 = v5;
  v7 = *result;
  v8 = *(_QWORD *)a2;
  v9 = *(unsigned __int8 *)(a2 + 13);
  if (*((unsigned __int16 *)v5 + 40) == v7 || a3 == 0)
    goto LABEL_21;
  v11 = a3;
  v12 = *(unsigned int *)(a2 + 8) | ((unint64_t)*(unsigned __int8 *)(a2 + 12) << 32);
  v13 = *(_BYTE *)(a2 + 14);
  v14 = v5[7];
  v15 = *(_QWORD *)(v14 + 16);
  v53 = *result;
  v54 = a5;
  v48 = v5 + 7;
  if (v15)
  {
    if (*(_BYTE *)(v14 + 112 * v15 + 24))
    {
      if (v15 >= 8)
      {
        swift_retain();
        DisplayList.InterpolatorLayer.remove(prefix:)(0);
        goto LABEL_14;
      }
      goto LABEL_8;
    }
    swift_retain();
    specialized Array._customRemoveLast()((uint64_t)&v55);
    if (v55)
    {
      v17 = v63;
      v16 = v64;
      v50 = v61;
      v51 = v62;
      if (!v64)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();

        goto LABEL_14;
      }
    }
    else
    {
      specialized Array.remove(at:)(*(_QWORD *)(v5[7] + 16) - 1, (uint64_t)&v55);
      v17 = v63;
      v50 = v61;
      v51 = v62;
      v16 = v64;
      if (!v64)
        goto LABEL_12;
    }
    v18 = v11;
    v19 = v9;
    v20 = *(void (**)(uint64_t))(*(_QWORD *)v16 + 96);
    v21 = swift_retain();
    v20(v21);
    v9 = v19;
    v11 = v18;
    swift_release_n();
    goto LABEL_12;
  }
LABEL_8:
  swift_retain();
LABEL_14:
  v22 = *v6;
  v44 = *((_BYTE *)v6 + 10);
  v45 = *((_WORD *)v6 + 4);
  v23 = v6[2];
  v24 = v6[3];
  v25 = v6[4];
  v26 = v6[5];
  v42 = *((_BYTE *)v6 + 52);
  v43 = *((_DWORD *)v6 + 12);
  v55 = v8;
  BYTE4(v56) = BYTE4(v12);
  LODWORD(v56) = v12;
  v52 = v9;
  BYTE5(v56) = v9;
  BYTE6(v56) = v13;
  v46 = v25;
  swift_unknownObjectRetain();
  v47 = v22;
  swift_bridgeObjectRetain();
  v41 = ContentTransition.rbTransition.getter();
  v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EEE8]), sel_init);
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v11 + 96))(&v55);
  v28 = v55;
  v29 = v56;
  v31 = v57;
  v30 = v58;
  v32 = v59;
  v33 = v60;
  v65 = v55;
  v66 = v56;
  v67 = v57;
  v68 = v58;
  v69 = v59;
  v70 = v60;
  Animation.Function.apply(to:)();
  outlined consume of Animation.Function(v28, v29, v31, v30, v32, v33);
  v34 = (_QWORD *)v6[7];
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v34[2] + 1, 1, v34);
  v36 = v34[2];
  v35 = v34[3];
  v9 = v52;
  if (v36 >= v35 >> 1)
    v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v35 > 1), v36 + 1, 1, v34);
  v34[2] = v36 + 1;
  v37 = &v34[14 * v36];
  v37[4] = v47;
  *((_WORD *)v37 + 20) = v45;
  *((_BYTE *)v37 + 42) = v44;
  v37[6] = v23;
  v37[7] = v24;
  v37[8] = v46;
  v37[9] = v26;
  *((_DWORD *)v37 + 20) = v43;
  *((_BYTE *)v37 + 84) = v42;
  v37[11] = 0;
  v37[12] = v41;
  v37[13] = v27;
  v37[14] = a4;
  *(_OWORD *)(v37 + 15) = xmmword_2352828B0;
  *((_BYTE *)v37 + 136) = 0;
  *v48 = v34;
  if (a4)
    (*(void (**)(void))(*(_QWORD *)a4 + 88))();
  result = (unsigned __int16 *)swift_release();
  *((_BYTE *)v6 + 83) = 1;
  LOWORD(v7) = v53;
  a5 = v54;
LABEL_21:
  *((_WORD *)v6 + 40) = v7;
  *((_BYTE *)v6 + 82) = a5 & 1;
  if (v9)
    v38 = 0;
  else
    v38 = (v8 & 0xC000000000) == 0x4000000000;
  v39 = !v38;
  if ((v8 & 0x100000000) == 0)
    v39 = 1;
  if (v39)
    v40 = 0;
  else
    v40 = v8;
  *((_DWORD *)v6 + 12) = v40;
  *((_BYTE *)v6 + 52) = v39;
  return result;
}

Swift::Void __swiftcall DisplayList.InterpolatorLayer.invalidateContentsScale()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  void **v4;
  void *v5;

  swift_unknownObjectRelease();
  *(_QWORD *)(v0 + 32) = 0;
  v1 = *(_QWORD **)(v0 + 56);
  v2 = v1[2];
  if (v2)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_11:
      v1 = specialized _ArrayBuffer._consumeAndCreateNew()(v1);
    v3 = 0;
    v4 = (void **)(v1 + 11);
    do
    {
      if (v3 >= v1[2])
      {
        __break(1u);
LABEL_10:
        __break(1u);
        goto LABEL_11;
      }
      *(v4 - 3) = 0;
      swift_unknownObjectRelease();
      if (v3 >= v1[2])
        goto LABEL_10;
      ++v3;
      v5 = *v4;
      *v4 = 0;
      v4 += 14;

    }
    while (v2 != v3);
    *(_QWORD *)(v0 + 56) = v1;
  }
  *(_BYTE *)(v0 + 83) = 1;
}

uint64_t DisplayList.UnaryInterpolatorGroup.rewriteInterpolation(serial:list:time:frame:contentOrigin:contentOffset:version:)(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t v12;
  uint64_t v20;
  __int16 v21;
  char v22;
  _QWORD *Value;
  uint64_t v24;
  double v25;
  double v26;
  Swift::Float v27;
  Swift::Double v28;
  uint64_t v29;
  __int16 v30;
  char v31;
  uint64_t v32;
  double v33;
  int v34;
  char v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  __int16 v39;
  char v40;
  char v41;
  int v42;
  char v43;
  char v44;
  char v46[4];
  int v47;
  char v48;
  int v49;
  char v50;
  uint64_t v51[2];
  __int16 v52;
  char v53;
  __int128 v54;
  uint64_t v55;
  double v56;
  int v57;
  char v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  __int16 v62;
  char v63;
  char v64;
  uint64_t v65;
  __int16 v66;
  char v67;

  v20 = *a12;
  v21 = *(_WORD *)(a10 + 8);
  v22 = *(_BYTE *)(a10 + 10);
  v65 = *(_QWORD *)a10;
  v66 = v21;
  v67 = v22;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  DisplayList.InterpolatorLayer.setDisplayList(_:origin:)((uint64_t)&v65, a5, a6);
  swift_endAccess();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(*(_QWORD *)(v12 + 80) + 16))
  {
    Value = (_QWORD *)AGGraphGetValue();
    if (*(double *)(v12 + 88) != *(double *)Value)
    {
      *(_QWORD *)(v12 + 88) = *Value;
      *(_BYTE *)(v12 + 107) = 1;
    }
    v24 = specialized static ViewGraph.current.getter();
    v25 = *(double *)AGGraphGetValue();
    swift_beginAccess();
    v26 = *(double *)(v24 + 376);
    if (v25 < v26)
      v26 = v25;
    *(double *)(v24 + 376) = v26;
    swift_release();
    v27 = *(float *)(v12 + 108);
    swift_beginAccess();
    v28 = *(double *)(v12 + 16);
    swift_beginAccess();
    DisplayList.InterpolatorLayer.updateInterpolators(contentsScale:maxDuration:)(v27, v28);
    swift_endAccess();
    v29 = *(_QWORD *)(v12 + 24);
    v30 = *(_WORD *)(v12 + 32);
    v31 = *(_BYTE *)(v12 + 34);
    v32 = *(_QWORD *)(v12 + 56);
    v33 = *(double *)(v12 + 64);
    v34 = *(_DWORD *)(v12 + 72);
    v35 = *(_BYTE *)(v12 + 76);
    v36 = *(_QWORD *)(v12 + 80);
    v37 = *(double *)(v12 + 88);
    v38 = *(_QWORD *)(v12 + 96);
    v39 = *(_WORD *)(v12 + 104);
    v40 = *(_BYTE *)(v12 + 106);
    v41 = *(_BYTE *)(v12 + 107);
    v51[0] = v20;
    v51[1] = v29;
    v52 = v30;
    v53 = v31;
    v54 = *(_OWORD *)(v12 + 40);
    v55 = v32;
    v56 = v33;
    v57 = v34;
    v58 = v35;
    v59 = v36;
    v60 = v37;
    v61 = v38;
    v62 = v39;
    v63 = v40;
    v64 = v41;
    v42 = *(_DWORD *)(v12 + 116);
    v43 = *(_BYTE *)(v12 + 120);
    LODWORD(v32) = *(_DWORD *)(v12 + 124);
    LOBYTE(v34) = *(_BYTE *)(v12 + 128);
    v46[0] = *(_BYTE *)(v12 + 112);
    v47 = v42;
    v48 = v43;
    v49 = v32;
    v50 = v34;
    v44 = DisplayList.InterpolatorLayer.updateOutput(list:frame:contentOffset:version:rasterizationOptions:)(a10, v51, v46, v33, v37, a3, a4, a7, a8);
  }
  else
  {
    v44 = 0;
  }
  return v44 & 1;
}

void DisplayList.InterpolatorLayer.setDisplayList(_:origin:)(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v6;
  int v7;
  int v8;
  BOOL v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  void *v20;

  v6 = *(_QWORD *)a1;
  v7 = *(unsigned __int16 *)(a1 + 8);
  v8 = *(unsigned __int8 *)(a1 + 10);
  v9 = *(double *)(v3 + 16) == a2 && *(double *)(v3 + 24) == a3;
  if (!v9
    || (v10 = *(unsigned __int16 *)(v3 + 8),
        v11 = *(unsigned __int8 *)(v3 + 10),
        !specialized static Array<A>.== infix(_:_:)(*(_QWORD *)v3, v6))
    || (v10 == v7 ? (v12 = v11 == v8) : (v12 = 0), !v12))
  {
    v13 = *(_DWORD *)(v3 + 48);
    v14 = *(_BYTE *)(v3 + 52);
    v15 = one-time initialization token for infinity;
    swift_bridgeObjectRetain();
    if (v15 != -1)
      swift_once();
    v16 = static Time.infinity;
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    *(_QWORD *)v3 = v6;
    *(_WORD *)(v3 + 8) = v7;
    *(_BYTE *)(v3 + 10) = v8;
    *(double *)(v3 + 16) = a2;
    *(double *)(v3 + 24) = a3;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = v16;
    *(_DWORD *)(v3 + 48) = v13;
    *(_BYTE *)(v3 + 52) = v14;
    *(_BYTE *)(v3 + 83) = 1;
    v17 = *(_QWORD **)(v3 + 56);
    v18 = v17[2];
    if (v18)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v17 = specialized _ArrayBuffer._consumeAndCreateNew()(v17);
      if (v18 > v17[2])
      {
        __break(1u);
      }
      else
      {
        v19 = &v17[14 * v18];
        v20 = (void *)*(v19 - 3);
        *(v19 - 3) = 0;

        *(_QWORD *)(v3 + 56) = v17;
      }
    }
  }
}

Swift::Void __swiftcall DisplayList.InterpolatorLayer.updateInterpolators(contentsScale:maxDuration:)(Swift::Float contentsScale, Swift::Double maxDuration)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;

  if (*(_BYTE *)(v2 + 83) == 1)
  {
    *(_BYTE *)(v2 + 83) = 0;
    v3 = *(_QWORD *)(v2 + 56);
    if (*(_QWORD *)(v3 + 16))
      __asm { BR              X9 }
    v4 = *(double *)(v2 + 40);
    if (one-time initialization token for infinity != -1)
      swift_once();
    v5 = *(double *)&static Time.infinity;

    if (v4 >= v5)
    {
      swift_release();
      *(_QWORD *)(v2 + 72) = 0;
    }
  }
}

uint64_t DisplayList.InterpolatorLayer.updateOutput(list:frame:contentOffset:version:rasterizationOptions:)(uint64_t a1, uint64_t *a2, char *a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  char v21;
  double v22;
  double v23;
  double v24;
  int v25;
  uint64_t result;
  void *v27;
  uint64_t v28;
  __int16 v29;
  char v30;
  char v31;
  uint64_t v32;
  void *v33;
  int v34;
  float v35;
  float v36;
  id v37;
  double v38;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  BOOL IsNull;
  CGFloat v44;
  CGFloat v45;
  CGFloat v46;
  CGFloat v47;
  double v48;
  double v49;
  CGFloat v50;
  CGFloat v51;
  id v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  double v57;
  double v58;
  uint64_t v59;
  double v60;
  __int16 v61;
  char v62;
  double v63;
  double v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  double v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  __int16 v73;
  char v74;
  double v75;
  char v76;
  char v77;
  int v78;
  char v79;
  __int16 v80;
  char *v81;
  uint64_t v82;
  __int16 v83;
  char v84;
  CGRect v85;
  CGRect v86;

  v10 = *(_QWORD *)(v9 + 56);
  v11 = *(_QWORD *)(v10 + 16);
  if (!v11)
    return 0;
  v17 = *a2;
  v78 = *((_DWORD *)a3 + 1);
  v79 = *a3;
  v18 = *((_DWORD *)a3 + 3);
  v76 = a3[16];
  v77 = a3[8];
  v19 = *(_QWORD *)v9;
  v20 = *(_WORD *)(v9 + 8);
  v21 = *(_BYTE *)(v9 + 10);
  v22 = *(double *)(v9 + 16);
  v23 = *(double *)(v9 + 24);
  v24 = *(double *)(v9 + 64);
  v25 = *(unsigned __int8 *)(v9 + 82);
  result = swift_bridgeObjectRelease();
  if (v11 == 1)
  {
    if (!*(_QWORD *)(v10 + 16))
      goto LABEL_27;
    v27 = *(void **)(v10 + 88);
    if (!v27 || (result = (uint64_t)objc_msgSend(v27, sel_onlyFades), (_DWORD)result))
    {
      v28 = *(_QWORD *)(v10 + 32);
      v29 = *(_WORD *)(v10 + 40);
      v30 = *(_BYTE *)(v10 + 42);
      v81 = (char *)MEMORY[0x24BEE4AF8];
      v82 = v28;
      v83 = v29;
      v84 = v30;
      specialized DisplayList.forEachIdentity(_:)(&v82, &v81);
      if (*((_QWORD *)v81 + 2))
      {
        specialized MutableCollection<>.sort(by:)(&v81);
        v82 = v19;
        v83 = v20;
        v84 = v21;
        v31 = specialized DisplayList.forEachIdentity(_:)(&v82, (uint64_t)&v81);
        result = swift_bridgeObjectRelease();
        if ((v31 & 1) == 0)
          goto LABEL_8;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      objc_msgSend(*(id *)(v10 + 104), sel_evaluateAtTime_, v24 - *(double *)(v10 + 120));
      v66 = COERCE_UNSIGNED_INT(1.0 - *(float *)&v65);
      v67 = *(_QWORD *)(v10 + 32);
      v80 = *(_WORD *)(v10 + 40);
      v68 = *(_BYTE *)(v10 + 42);
      v69 = *(double *)(v10 + 48) - v22 + a8;
      v70 = *(double *)(v10 + 56) - v23 + a9;
      v71 = v65;
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v72 = swift_allocObject();
      *(_OWORD *)(v72 + 16) = xmmword_2352828C0;
      *(double *)(v72 + 32) = v69;
      *(double *)(v72 + 40) = v70;
      *(double *)(v72 + 48) = a6;
      *(double *)(v72 + 56) = a7;
      *(_QWORD *)(v72 + 64) = v17;
      *(_QWORD *)(v72 + 72) = v66;
      *(_QWORD *)(v72 + 80) = 0x4000000400000000;
      *(_QWORD *)(v72 + 88) = v67;
      *(_BYTE *)(v72 + 98) = v68;
      *(_WORD *)(v72 + 96) = v80;
      *(_DWORD *)(v72 + 100) = 0;
      *(double *)(v72 + 104) = a8;
      *(double *)(v72 + 112) = a9;
      *(double *)(v72 + 120) = a6;
      *(double *)(v72 + 128) = a7;
      *(_QWORD *)(v72 + 136) = v17;
      *(_QWORD *)(v72 + 144) = v71;
      *(_QWORD *)(v72 + 152) = 0x4000000400000000;
      *(_QWORD *)(v72 + 160) = v19;
      *(_BYTE *)(v72 + 170) = v21;
      *(_WORD *)(v72 + 168) = v20;
      *(_DWORD *)(v72 + 172) = 0;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      DisplayList.init(_:)((_QWORD *)v72, (uint64_t)&v82);
      v73 = v83;
      v74 = v84;
      *(_QWORD *)a1 = v82;
      *(_WORD *)(a1 + 8) = v73;
      *(_BYTE *)(a1 + 10) = v74;
      return 1;
    }
  }
LABEL_8:
  if (v11 <= *(_QWORD *)(v10 + 16))
  {
    v32 = v10 + 112 * v11;
    v33 = *(void **)(v32 - 24);
    if (!v33)
    {
      result = 0;
      *(_QWORD *)a1 = MEMORY[0x24BEE4AF8];
      *(_WORD *)(a1 + 8) = 0;
      *(_BYTE *)(a1 + 10) = 0;
      return result;
    }
    v75 = v22;
    v34 = v25;
    v35 = v24 - *(double *)(v32 + 8);
    if (v35 < 0.0)
      v36 = 0.0;
    else
      v36 = v24 - *(double *)(v32 + 8);
    v37 = v33;
    *(float *)&v38 = v36;
    objc_msgSend(v37, sel_boundingRectWithProgress_, v38);
    x = v85.origin.x;
    y = v85.origin.y;
    width = v85.size.width;
    height = v85.size.height;
    IsNull = CGRectIsNull(v85);
    v44 = 0.0;
    v45 = 0.0;
    v46 = 0.0;
    v47 = 0.0;
    if (!IsNull)
    {
      v44 = x;
      v45 = y;
      v46 = width;
      v47 = height;
    }
    v86 = CGRectIntegral(*(CGRect *)&v44);
    v48 = v86.origin.x;
    v49 = v86.origin.y;
    v50 = v86.size.width;
    v51 = v86.size.height;
    *(float *)&v86.origin.x = v36;
    v52 = objc_msgSend(v37, sel_copyContentsWithProgress_, v86.origin.x);
    v53 = v18 | 0x100;
    v54 = swift_allocObject();
    *(_QWORD *)(v54 + 16) = v52;
    *(double *)(v54 + 24) = v48;
    *(double *)(v54 + 32) = v49;
    *(_BYTE *)(v54 + 40) = v79;
    *(_DWORD *)(v54 + 44) = v78;
    *(_BYTE *)(v54 + 48) = v77;
    *(_DWORD *)(v54 + 52) = v53;
    *(_BYTE *)(v54 + 56) = v76;
    if (v17)
      v55 = (2 * (((33 * WORD1(v17)) ^ v17) & 0x7FFFLL)) | 1;
    else
      v55 = 0;
    v56 = a9 - v23;
    v57 = a8 - v75 + v48;
    v58 = v56 + v49;
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v59 = swift_allocObject();
    *(_OWORD *)(v59 + 16) = xmmword_23527E860;
    *(double *)(v59 + 32) = v57;
    *(double *)(v59 + 40) = v58;
    *(CGFloat *)(v59 + 48) = v50;
    *(CGFloat *)(v59 + 56) = v51;
    *(_QWORD *)(v59 + 64) = v17;
    *(_QWORD *)(v59 + 72) = v54 | 0xA000000000000000;
    *(_QWORD *)(v59 + 80) = v55;
    *(_QWORD *)(v59 + 88) = 0;
    *(_BYTE *)(v59 + 98) = 0;
    *(_WORD *)(v59 + 96) = 0;
    *(_DWORD *)(v59 + 100) = 0;
    swift_unknownObjectRetain();
    swift_retain();
    DisplayList.init(_:)((_QWORD *)v59, (uint64_t)&v82);
    v61 = v83;
    v62 = v84;
    *(_QWORD *)a1 = v82;
    *(_WORD *)(a1 + 8) = v61;
    *(_BYTE *)(a1 + 10) = v62;
    if (v34)
    {
      *(float *)&v60 = v36;
      objc_msgSend(v37, sel_maxAbsoluteVelocityWithProgress_, v60);
      v64 = v63;
      specialized static ViewGraph.current.getter();
      swift_beginAccess();
      ViewGraph.NextUpdate.maxVelocity(_:)(v64);
      swift_endAccess();
      swift_release();
      swift_unknownObjectRelease();
      swift_release();

    }
    else
    {

      swift_unknownObjectRelease();
      swift_release();
    }
    return 1;
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t DisplayList.UnaryInterpolatorGroup.apply(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  uint64_t result;
  char v16;
  __int16 v17;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(unsigned __int16 *)(a1 + 64) | (*(unsigned __int8 *)(a1 + 66) << 16);
  if (v4 >> 62 == 3 && (v6 & 0xFFFFFF) == 0 && v4 == 0xC000000000000000 && (v5 | v3) == 0)
  {
    result = swift_retain();
    v16 = 0;
    v14 = 0;
    v13 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(_QWORD *)(a1 + 24);
    v12 = *(_QWORD *)(a1 + 32);
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_23527E860;
    *(_QWORD *)(v13 + 32) = 0;
    *(_QWORD *)(v13 + 40) = 0;
    *(_QWORD *)(v13 + 48) = v10;
    *(_QWORD *)(v13 + 56) = v11;
    *(_QWORD *)(v13 + 64) = v12;
    *(_QWORD *)(v13 + 72) = v3;
    *(_QWORD *)(v13 + 80) = v4;
    *(_QWORD *)(v13 + 88) = v5;
    *(_BYTE *)(v13 + 98) = BYTE2(v6);
    *(_WORD *)(v13 + 96) = v6;
    *(_DWORD *)(v13 + 100) = 0;
    swift_retain();
    outlined copy of DisplayList.Item.Value(v3, v4);
    DisplayList.Item.features.getter();
    v14 = v17;
    DisplayList.Item.properties.getter();
    result = outlined consume of DisplayList.Item.Value(v3, v4);
    v16 = v17;
  }
  *(_QWORD *)(a1 + 40) = v1;
  *(_QWORD *)(a1 + 48) = 0x4000001100000000;
  *(_QWORD *)(a1 + 56) = v13;
  *(_BYTE *)(a1 + 66) = v16;
  *(_WORD *)(a1 + 64) = v14;
  return result;
}

uint64_t DisplayList.UnaryInterpolatorGroup.__ivar_destroyer()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t DisplayList.UnaryInterpolatorGroup.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void (*v6)(void);
  id v7;
  id v8;
  id v9;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    v3 = v1 + 112;
    do
    {
      if (*(_QWORD *)v3)
      {
        v4 = *(void **)(v3 - 8);
        v5 = *(void **)(v3 - 24);
        v6 = *(void (**)(void))(**(_QWORD **)v3 + 96);
        v7 = *(id *)(v3 - 16);
        v8 = v4;
        swift_retain_n();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        v9 = v5;
        v6();
        swift_release_n();

        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
      }
      v3 += 112;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)(v0 + 80) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 96) = 0;
  *(_BYTE *)(v0 + 107) = 1;
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t DisplayList.UnaryInterpolatorGroup.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void (*v6)(void);
  id v7;
  id v8;
  id v9;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    v3 = v1 + 112;
    do
    {
      if (*(_QWORD *)v3)
      {
        v4 = *(void **)(v3 - 8);
        v5 = *(void **)(v3 - 24);
        v6 = *(void (**)(void))(**(_QWORD **)v3 + 96);
        v7 = *(id *)(v3 - 16);
        v8 = v4;
        swift_retain_n();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        v9 = v5;
        v6();
        swift_release_n();

        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
      }
      v3 += 112;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)(v0 + 80) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 96) = 0;
  *(_BYTE *)(v0 + 107) = 1;
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

void DisplayList.InterpolatorLayer.remove(prefix:)(uint64_t a1)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void (*v7)(void);
  id v8;
  id v9;
  id v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  int64_t v16;
  uint64_t v17;

  if (a1 < 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v2 = a1 + 1;
  if (__OFADD__(a1, 1))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v3 = *(_QWORD *)(v1 + 56);
  v17 = v1 + 56;
  if (*(_QWORD *)(v3 + 16) < v2)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if ((v2 & 0x8000000000000000) == 0)
  {
    swift_bridgeObjectRetain();
    v4 = v3 + 112;
    v16 = v2;
    do
    {
      if (*(_QWORD *)v4)
      {
        v5 = *(void **)(v4 - 8);
        v6 = *(void **)(v4 - 24);
        v7 = *(void (**)(void))(**(_QWORD **)v4 + 96);
        v8 = *(id *)(v4 - 16);
        v9 = v5;
        swift_retain_n();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        v10 = v6;
        v7();
        swift_release_n();

        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
      }
      v4 += 112;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
    specialized Array.replaceSubrange<A>(_:with:)(0, v16);
    v11 = *(_QWORD **)v17;
    v12 = *(_QWORD *)(*(_QWORD *)v17 + 16);
    if (!v12)
    {
LABEL_16:
      *(_BYTE *)(v1 + 83) = 1;
      return;
    }
    v13 = 0;
    v14 = 11;
    while (1)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v11 = specialized _ArrayBuffer._consumeAndCreateNew()(v11);
      if (v13 >= v11[2])
        break;
      ++v13;
      v15 = (void *)v11[v14];
      v11[v14] = 0;

      v14 += 14;
      if (v12 == v13)
      {
        *(_QWORD *)v17 = v11;
        goto LABEL_16;
      }
    }
    __break(1u);
    goto LABEL_18;
  }
LABEL_21:
  __break(1u);
}

uint64_t DisplayList.InterpolatorLayer.Contents.render(at:renderer:storage:contentsScale:)(double *a1, __n128 **a2, void **a3, float a4)
{
  uint64_t v4;
  uint64_t v5;
  double v9;
  uint64_t result;
  void *v11;
  __n128 *v12;
  id v13;
  Class isa;
  id v15;
  unint64_t v16;
  char v17;

  v5 = v4;
  v9 = *a1;
  if (*(_QWORD *)(v4 + 32) && v9 < *(double *)(v4 + 40))
    return 0;
  v11 = *a3;
  if (*a3)
  {
    v12 = *a2;
    if (*a2)
      goto LABEL_6;
    goto LABEL_11;
  }
  result = (uint64_t)objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EEF8]), sel_init);
  *a3 = (void *)result;
  if (result)
  {
    v11 = (void *)result;
    objc_msgSend((id)result, sel_setDeviceScale_, a4);
    v12 = *a2;
    if (*a2)
    {
LABEL_6:
      if ((*(_BYTE *)(v5 + 52) & 1) != 0)
      {
LABEL_8:
        *(double *)&v16 = v9;
        swift_retain();
        specialized DisplayList.GraphicsRenderer.render(at:do:)(&v16, v12, a3, v5, a2);
        swift_release();
        *(_QWORD *)(v5 + 40) = v12[5].n128_u64[0];
        v15 = objc_msgSend(v11, sel_moveContents, v16);
        swift_unknownObjectRelease();
        *(_QWORD *)(v5 + 32) = v15;
        return 1;
      }
LABEL_7:
      v13 = v11;
      isa = Float._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v13, sel_setValue_forAttribute_, isa, 0);

      goto LABEL_8;
    }
LABEL_11:
    v17 = 3;
    type metadata accessor for DisplayList.GraphicsRenderer();
    swift_allocObject();
    v12 = (__n128 *)DisplayList.GraphicsRenderer.init(platformViewMode:)(&v17);
    *a2 = v12;
    if ((*(_BYTE *)(v5 + 52) & 1) != 0)
      goto LABEL_8;
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

void closure #1 in DisplayList.InterpolatorLayer.Contents.render(at:renderer:storage:contentsScale:)(void **a1, uint64_t a2, _QWORD *a3)
{
  void *v3;
  uint64_t v6;
  id v7;
  void (*v8)(uint64_t *);
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t State;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  char v18;
  uint64_t v19[2];
  uint64_t v20;
  uint64_t v21;

  v3 = *a1;
  if (*a1)
  {
    v20 = 0;
    v21 = 0;
    v6 = one-time initialization token for shared;
    v7 = v3;
    if (v6 != -1)
      swift_once();
    swift_beginAccess();
    v8 = *(void (**)(uint64_t *))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue2.shared) + 0x68);
    v9 = static CoreGlue2.shared;
    v8(&v20);

    v10 = v20;
    v11 = v21;
    type metadata accessor for GraphicsContext.Storage();
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 32) = 1065353216;
    *(_QWORD *)(v12 + 40) = 0x7FF8000000000000;
    v19[0] = v10;
    v19[1] = v11;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    v13 = v7;
    *(_QWORD *)(v12 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v13, v19);
    State = RBDisplayListGetState();

    *(_QWORD *)(v12 + 24) = State;
    *(_BYTE *)(v12 + 48) = 0;
    v19[0] = v12;
    if (*(double *)(a2 + 16) != 0.0 || *(double *)(a2 + 24) != 0.0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v15 = RBDrawingStateInit();
        swift_allocObject();
        v16 = swift_retain();
        v19[0] = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v16, v15, 1, 0);
        swift_release();
      }
      RBDrawingStateTranslateCTM();
    }
    if (*a3)
    {
      v17 = *(_WORD *)(a2 + 8);
      v18 = *(_BYTE *)(a2 + 10);
      v20 = *(_QWORD *)a2;
      LOWORD(v21) = v17;
      BYTE2(v21) = v18;
      swift_retain();
      swift_bridgeObjectRetain();
      DisplayList.GraphicsRenderer.render(list:in:)(&v20, v19);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

Swift::Int specialized MutableCollection<>.sort(by:)(char **a1)
{
  char *v2;
  uint64_t v3;
  Swift::Int result;
  _QWORD v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v2);
  v3 = *((_QWORD *)v2 + 2);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

uint64_t type metadata accessor for DisplayList.InterpolatorGroup()
{
  return objc_opt_self();
}

uint64_t method lookup function for DisplayList.InterpolatorGroup()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for DisplayList.UnaryInterpolatorGroup()
{
  return objc_opt_self();
}

uint64_t method lookup function for DisplayList.UnaryInterpolatorGroup()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DisplayList.UnaryInterpolatorGroup.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t destroy for DisplayList.InterpolatorLayer()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for DisplayList.InterpolatorLayer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  v4 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v4;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for DisplayList.InterpolatorLayer(uint64_t a1, uint64_t a2)
{
  int v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v4 = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_retain();
  swift_release();
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_BYTE *)(a1 + 82) = *(_BYTE *)(a2 + 82);
  *(_BYTE *)(a1 + 83) = *(_BYTE *)(a2 + 83);
  return a1;
}

uint64_t assignWithTake for DisplayList.InterpolatorLayer(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_release();
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_BYTE *)(a1 + 82) = *(_BYTE *)(a2 + 82);
  *(_BYTE *)(a1 + 83) = *(_BYTE *)(a2 + 83);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayList.InterpolatorLayer(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 84))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DisplayList.InterpolatorLayer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 80) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 84) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 84) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.InterpolatorLayer()
{
  return &type metadata for DisplayList.InterpolatorLayer;
}

uint64_t sub_234AA5640()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_234AA5664()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_234AA5688()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  Swift::Int v18;
  Swift::Int v19;
  int v20;
  Swift::Int v21;
  unsigned int *v22;
  unsigned int v23;
  Swift::Int v24;
  unsigned int *v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t i;
  unsigned int v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  Swift::Int v95;
  Swift::Int v96;
  uint64_t v97;
  char *__dst;

  v2 = a1;
  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_137;
    if ((unint64_t)v3 >= 2)
    {
      v78 = 0;
      v79 = *v2;
      for (i = 1; i != v3; ++i)
      {
        v81 = *(_DWORD *)(v79 + 4 * i);
        v82 = v78;
        do
        {
          v83 = *(_DWORD *)(v79 + v82);
          if (v81 >= v83)
            break;
          if (!v79)
            goto LABEL_141;
          *(_DWORD *)(v79 + v82 + 4) = v83;
          *(_DWORD *)(v79 + v82) = v81;
          v82 -= 4;
        }
        while (v82 != -4);
        v78 += 4;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_146;
  v95 = result;
  v96 = v3;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v11 = (char *)MEMORY[0x24BEE4AF8];
LABEL_103:
      v94 = v8;
      if (v12 >= 2)
      {
        v84 = *v2;
        do
        {
          v85 = v12 - 2;
          if (v12 < 2)
            goto LABEL_132;
          if (!v84)
            goto LABEL_145;
          v86 = v11;
          v87 = v11 + 32;
          v88 = *(_QWORD *)&v11[16 * v85 + 32];
          v89 = *(_QWORD *)&v11[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v84 + 4 * v88), (char *)(v84 + 4 * *(_QWORD *)&v87[16 * v12 - 16]), v84 + 4 * v89, __dst);
          if (v1)
            break;
          if (v89 < v88)
            goto LABEL_133;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v86 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v86);
          if (v85 >= *((_QWORD *)v86 + 2))
            goto LABEL_134;
          v90 = &v86[16 * v85 + 32];
          *(_QWORD *)v90 = v88;
          *((_QWORD *)v90 + 1) = v89;
          v91 = *((_QWORD *)v86 + 2);
          if (v12 > v91)
            goto LABEL_135;
          memmove(&v86[16 * v12 + 16], &v86[16 * v12 + 32], 16 * (v91 - v12));
          v11 = v86;
          *((_QWORD *)v86 + 2) = v91 - 1;
          v12 = v91 - 1;
        }
        while (v91 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v94 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v94 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v7 + 16) = v6;
    v3 = v96;
    v94 = v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *v2;
  v92 = v2;
  v93 = *v2 - 4;
  v11 = (char *)MEMORY[0x24BEE4AF8];
  v97 = *v2;
  while (1)
  {
    v13 = v9++;
    if (v9 < v3)
    {
      v14 = *(_DWORD *)(v10 + 4 * v9);
      v15 = *(_DWORD *)(v10 + 4 * v13);
      v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v16 = v14;
        while (1)
        {
          v17 = *(_DWORD *)(v10 + 4 * v9);
          if (v14 < v15 == v17 >= v16)
            break;
          ++v9;
          v16 = v17;
          if (v3 == v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13)
          goto LABEL_138;
        if (v13 < v9)
        {
          v18 = v9 - 1;
          v19 = v13;
          do
          {
            if (v19 != v18)
            {
              if (!v10)
                goto LABEL_144;
              v20 = *(_DWORD *)(v10 + 4 * v19);
              *(_DWORD *)(v10 + 4 * v19) = *(_DWORD *)(v10 + 4 * v18);
              *(_DWORD *)(v10 + 4 * v18) = v20;
            }
            v59 = ++v19 < v18--;
          }
          while (v59);
        }
      }
    }
    if (v9 >= v3)
      goto LABEL_47;
    if (__OFSUB__(v9, v13))
      goto LABEL_136;
    if (v9 - v13 >= v95)
      goto LABEL_47;
    v21 = v13 + v95;
    if (__OFADD__(v13, v95))
      goto LABEL_139;
    if (v21 >= v3)
      v21 = v3;
    if (v21 < v13)
      break;
    if (v9 != v21)
    {
      v22 = (unsigned int *)(v93 + 4 * v9);
      do
      {
        v23 = *(_DWORD *)(v10 + 4 * v9);
        v24 = v13;
        v25 = v22;
        do
        {
          v26 = *v25;
          if (v23 >= *v25)
            break;
          if (!v10)
            goto LABEL_142;
          *v25 = v23;
          v25[1] = v26;
          --v25;
          ++v24;
        }
        while (v9 != v24);
        ++v9;
        ++v22;
      }
      while (v9 != v21);
      v9 = v21;
    }
LABEL_47:
    if (v9 < v13)
      goto LABEL_131;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v28 = *((_QWORD *)v11 + 2);
    v27 = *((_QWORD *)v11 + 3);
    v12 = v28 + 1;
    v10 = v97;
    if (v28 >= v27 >> 1)
    {
      v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v28 + 1, 1, v11);
      v10 = v97;
      v11 = v77;
    }
    *((_QWORD *)v11 + 2) = v12;
    v29 = v11 + 32;
    v30 = &v11[16 * v28 + 32];
    *(_QWORD *)v30 = v13;
    *((_QWORD *)v30 + 1) = v9;
    if (v28)
    {
      while (1)
      {
        v31 = v12 - 1;
        if (v12 >= 4)
        {
          v36 = &v29[16 * v12];
          v37 = *((_QWORD *)v36 - 8);
          v38 = *((_QWORD *)v36 - 7);
          v42 = __OFSUB__(v38, v37);
          v39 = v38 - v37;
          if (v42)
            goto LABEL_120;
          v41 = *((_QWORD *)v36 - 6);
          v40 = *((_QWORD *)v36 - 5);
          v42 = __OFSUB__(v40, v41);
          v34 = v40 - v41;
          v35 = v42;
          if (v42)
            goto LABEL_121;
          v43 = v12 - 2;
          v44 = &v29[16 * v12 - 32];
          v46 = *(_QWORD *)v44;
          v45 = *((_QWORD *)v44 + 1);
          v42 = __OFSUB__(v45, v46);
          v47 = v45 - v46;
          if (v42)
            goto LABEL_123;
          v42 = __OFADD__(v34, v47);
          v48 = v34 + v47;
          if (v42)
            goto LABEL_126;
          if (v48 >= v39)
          {
            v66 = &v29[16 * v31];
            v68 = *(_QWORD *)v66;
            v67 = *((_QWORD *)v66 + 1);
            v42 = __OFSUB__(v67, v68);
            v69 = v67 - v68;
            if (v42)
              goto LABEL_130;
            v59 = v34 < v69;
            goto LABEL_84;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v60 = *((_QWORD *)v11 + 4);
            v61 = *((_QWORD *)v11 + 5);
            v42 = __OFSUB__(v61, v60);
            v53 = v61 - v60;
            v54 = v42;
            goto LABEL_78;
          }
          v33 = *((_QWORD *)v11 + 4);
          v32 = *((_QWORD *)v11 + 5);
          v42 = __OFSUB__(v32, v33);
          v34 = v32 - v33;
          v35 = v42;
        }
        if ((v35 & 1) != 0)
          goto LABEL_122;
        v43 = v12 - 2;
        v49 = &v29[16 * v12 - 32];
        v51 = *(_QWORD *)v49;
        v50 = *((_QWORD *)v49 + 1);
        v52 = __OFSUB__(v50, v51);
        v53 = v50 - v51;
        v54 = v52;
        if (v52)
          goto LABEL_125;
        v55 = &v29[16 * v31];
        v57 = *(_QWORD *)v55;
        v56 = *((_QWORD *)v55 + 1);
        v42 = __OFSUB__(v56, v57);
        v58 = v56 - v57;
        if (v42)
          goto LABEL_128;
        if (__OFADD__(v53, v58))
          goto LABEL_129;
        if (v53 + v58 >= v34)
        {
          v59 = v34 < v58;
LABEL_84:
          if (v59)
            v31 = v43;
          goto LABEL_86;
        }
LABEL_78:
        if ((v54 & 1) != 0)
          goto LABEL_124;
        v62 = &v29[16 * v31];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v42 = __OFSUB__(v63, v64);
        v65 = v63 - v64;
        if (v42)
          goto LABEL_127;
        if (v65 < v53)
          goto LABEL_15;
LABEL_86:
        v70 = v31 - 1;
        if (v31 - 1 >= v12)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v10)
          goto LABEL_143;
        v71 = &v29[16 * v70];
        v72 = *(_QWORD *)v71;
        v73 = v29;
        v74 = &v29[16 * v31];
        v75 = *((_QWORD *)v74 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v10 + 4 * *(_QWORD *)v71), (char *)(v10 + 4 * *(_QWORD *)v74), v10 + 4 * v75, __dst);
        if (v1)
          goto LABEL_114;
        if (v75 < v72)
          goto LABEL_117;
        if (v31 > *((_QWORD *)v11 + 2))
          goto LABEL_118;
        *(_QWORD *)v71 = v72;
        *(_QWORD *)&v73[16 * v70 + 8] = v75;
        v76 = *((_QWORD *)v11 + 2);
        if (v31 >= v76)
          goto LABEL_119;
        v12 = v76 - 1;
        memmove(v74, v74 + 16, 16 * (v76 - 1 - v31));
        v29 = v73;
        *((_QWORD *)v11 + 2) = v76 - 1;
        v10 = v97;
        if (v76 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v96;
    if (v9 >= v96)
    {
      v8 = v94;
      v2 = v92;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v2;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  Swift::Int v12;
  double v13;
  double v14;
  double *v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  Swift::Int v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  Swift::Int v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  double v77;
  Swift::Int v78;
  double *v79;
  double *v80;
  uint64_t v81;
  char v82;
  double v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t i;
  double v95;
  uint64_t v96;
  double *v97;
  double *v98;
  uint64_t v99;
  char v100;
  double v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  unint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  Swift::Int v120;
  Swift::Int v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  double *v127;
  char *v128;

  v2 = a1;
  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_139;
    if ((unint64_t)v3 >= 2)
    {
      v91 = *v2;
      v92 = *v2 + 184;
      v93 = -1;
      for (i = 1; i != v3; ++i)
      {
        v95 = *(double *)(v91 + 96 * i + 80);
        v96 = v93;
        v97 = (double *)v92;
        do
        {
          if (v95 >= *(v97 - 13))
            break;
          if (!v91)
            goto LABEL_143;
          v98 = v97 - 11;
          v99 = *((_QWORD *)v97 - 3);
          v100 = *((_BYTE *)v97 - 16);
          v101 = *v97;
          v102 = *(_OWORD *)(v97 - 11);
          v103 = *(_OWORD *)(v97 - 9);
          v104 = *(_OWORD *)(v97 - 7);
          v105 = *(_OWORD *)(v97 - 5);
          v106 = *(_OWORD *)(v97 - 17);
          *((_OWORD *)v98 + 2) = *(_OWORD *)(v97 - 19);
          *((_OWORD *)v98 + 3) = v106;
          v107 = *(_OWORD *)(v97 - 13);
          *((_OWORD *)v98 + 4) = *(_OWORD *)(v97 - 15);
          *((_OWORD *)v98 + 5) = v107;
          v108 = *(_OWORD *)(v97 - 21);
          *(_OWORD *)v98 = *(_OWORD *)(v97 - 23);
          *((_OWORD *)v98 + 1) = v108;
          *(v97 - 12) = v101;
          v97 -= 12;
          *(_OWORD *)(v97 - 11) = v102;
          *(_OWORD *)(v97 - 9) = v103;
          *(_OWORD *)(v97 - 7) = v104;
          *(_OWORD *)(v97 - 5) = v105;
          *((_QWORD *)v97 - 3) = v99;
          *((_BYTE *)v97 - 16) = v100;
          *(v97 - 1) = v95;
        }
        while (!__CFADD__(v96++, 1));
        v92 += 96;
        --v93;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_148;
  v120 = result;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    v127 = (double *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v11 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v110 = (char *)MEMORY[0x24BEE4AF8];
LABEL_105:
      v119 = v8;
      if (v11 >= 2)
      {
        v111 = *v2;
        do
        {
          v112 = v11 - 2;
          if (v11 < 2)
            goto LABEL_134;
          if (!v111)
            goto LABEL_147;
          v113 = v110;
          v114 = *(_QWORD *)&v110[16 * v112 + 32];
          v115 = *(_QWORD *)&v110[16 * v11 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v111 + 96 * v114), (double *)(v111 + 96 * *(_QWORD *)&v110[16 * v11 + 16]), v111 + 96 * v115, v127);
          if (v1)
            break;
          if (v115 < v114)
            goto LABEL_135;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v113 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v113);
          if (v112 >= *((_QWORD *)v113 + 2))
            goto LABEL_136;
          v116 = &v113[16 * v112 + 32];
          *(_QWORD *)v116 = v114;
          *((_QWORD *)v116 + 1) = v115;
          v117 = *((_QWORD *)v113 + 2);
          if (v11 > v117)
            goto LABEL_137;
          memmove(&v113[16 * v11 + 16], &v113[16 * v11 + 32], 16 * (v117 - v11));
          v110 = v113;
          *((_QWORD *)v113 + 2) = v117 - 1;
          v11 = v117 - 1;
        }
        while (v117 > 2);
      }
LABEL_95:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v119 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v119 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v7 + 16) = v6;
    v119 = v7;
    v127 = (double *)(v7 + 32);
  }
  v9 = 0;
  v118 = v2;
  v10 = *v2;
  v128 = (char *)MEMORY[0x24BEE4AF8];
  v121 = v3;
  while (1)
  {
    v12 = v9++;
    if (v9 < v3)
    {
      v13 = *(double *)(v10 + 96 * v9 + 80);
      v14 = *(double *)(v10 + 96 * v12 + 80);
      v9 = v12 + 2;
      if (v12 + 2 < v3)
      {
        v15 = (double *)(v10 + 272 + 96 * v12);
        v16 = v13;
        while (1)
        {
          v17 = v16;
          v16 = *v15;
          if (v13 < v14 == *v15 >= v17)
            break;
          ++v9;
          v15 += 12;
          if (v3 == v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v13 < v14)
      {
        if (v9 < v12)
          goto LABEL_140;
        if (v12 < v9)
        {
          v18 = 96 * v9;
          v19 = 96 * v12;
          v20 = v9;
          v21 = v12;
          do
          {
            if (v21 != --v20)
            {
              if (!v10)
                goto LABEL_146;
              v22 = v10 + v18;
              v23 = *(_QWORD *)(v10 + v19 + 64);
              v24 = *(_BYTE *)(v10 + v19 + 72);
              v124 = *(_OWORD *)(v10 + v19 + 16);
              v125 = *(_OWORD *)(v10 + v19);
              v122 = *(_OWORD *)(v10 + v19 + 48);
              v123 = *(_OWORD *)(v10 + v19 + 32);
              v126 = *(_OWORD *)(v10 + v19 + 80);
              memmove((void *)(v10 + v19), (const void *)(v10 + v18 - 96), 0x60uLL);
              *(_OWORD *)(v22 - 96) = v125;
              *(_OWORD *)(v22 - 80) = v124;
              *(_OWORD *)(v22 - 64) = v123;
              *(_OWORD *)(v22 - 48) = v122;
              *(_QWORD *)(v22 - 32) = v23;
              *(_BYTE *)(v22 - 24) = v24;
              *(_OWORD *)(v22 - 16) = v126;
            }
            ++v21;
            v18 -= 96;
            v19 += 96;
          }
          while (v21 < v20);
          v3 = v121;
        }
      }
    }
    if (v9 >= v3)
      goto LABEL_39;
    if (__OFSUB__(v9, v12))
      goto LABEL_138;
    if (v9 - v12 >= v120)
      goto LABEL_39;
    v25 = v12 + v120;
    if (__OFADD__(v12, v120))
      goto LABEL_141;
    if (v25 >= v3)
      v25 = v3;
    if (v25 < v12)
      break;
    if (v9 != v25)
    {
      v76 = v10 + 88 + 96 * v9;
      v26 = v128;
      do
      {
        v77 = *(double *)(v10 + 96 * v9 + 80);
        v78 = v12;
        v79 = (double *)v76;
        do
        {
          if (v77 >= *(v79 - 13))
            break;
          if (!v10)
            goto LABEL_144;
          v80 = v79 - 11;
          v81 = *((_QWORD *)v79 - 3);
          v82 = *((_BYTE *)v79 - 16);
          v83 = *v79;
          v84 = *(_OWORD *)(v79 - 11);
          v85 = *(_OWORD *)(v79 - 9);
          v86 = *(_OWORD *)(v79 - 7);
          v87 = *(_OWORD *)(v79 - 5);
          v88 = *(_OWORD *)(v79 - 17);
          *((_OWORD *)v80 + 2) = *(_OWORD *)(v79 - 19);
          *((_OWORD *)v80 + 3) = v88;
          v89 = *(_OWORD *)(v79 - 13);
          *((_OWORD *)v80 + 4) = *(_OWORD *)(v79 - 15);
          *((_OWORD *)v80 + 5) = v89;
          v90 = *(_OWORD *)(v79 - 21);
          *(_OWORD *)v80 = *(_OWORD *)(v79 - 23);
          *((_OWORD *)v80 + 1) = v90;
          *(v79 - 12) = v83;
          v79 -= 12;
          *(_OWORD *)(v79 - 11) = v84;
          *(_OWORD *)(v79 - 9) = v85;
          *(_OWORD *)(v79 - 7) = v86;
          *(_OWORD *)(v79 - 5) = v87;
          *((_QWORD *)v79 - 3) = v81;
          *((_BYTE *)v79 - 16) = v82;
          ++v78;
          *(v79 - 1) = v77;
        }
        while (v9 != v78);
        ++v9;
        v76 += 96;
      }
      while (v9 != v25);
      v9 = v25;
      if (v25 < v12)
        goto LABEL_133;
      goto LABEL_40;
    }
LABEL_39:
    v26 = v128;
    if (v9 < v12)
      goto LABEL_133;
LABEL_40:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v26 + 2) + 1, 1, v26);
    v28 = *((_QWORD *)v26 + 2);
    v27 = *((_QWORD *)v26 + 3);
    v11 = v28 + 1;
    if (v28 >= v27 >> 1)
      v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v28 + 1, 1, v26);
    *((_QWORD *)v26 + 2) = v11;
    v29 = v26 + 32;
    v30 = &v26[16 * v28 + 32];
    *(_QWORD *)v30 = v12;
    *((_QWORD *)v30 + 1) = v9;
    v128 = v26;
    if (v28)
    {
      while (1)
      {
        v31 = v11 - 1;
        if (v11 >= 4)
        {
          v36 = &v29[16 * v11];
          v37 = *((_QWORD *)v36 - 8);
          v38 = *((_QWORD *)v36 - 7);
          v42 = __OFSUB__(v38, v37);
          v39 = v38 - v37;
          if (v42)
            goto LABEL_122;
          v41 = *((_QWORD *)v36 - 6);
          v40 = *((_QWORD *)v36 - 5);
          v42 = __OFSUB__(v40, v41);
          v34 = v40 - v41;
          v35 = v42;
          if (v42)
            goto LABEL_123;
          v43 = v11 - 2;
          v44 = &v29[16 * v11 - 32];
          v46 = *(_QWORD *)v44;
          v45 = *((_QWORD *)v44 + 1);
          v42 = __OFSUB__(v45, v46);
          v47 = v45 - v46;
          if (v42)
            goto LABEL_125;
          v42 = __OFADD__(v34, v47);
          v48 = v34 + v47;
          if (v42)
            goto LABEL_128;
          if (v48 >= v39)
          {
            v66 = &v29[16 * v31];
            v68 = *(_QWORD *)v66;
            v67 = *((_QWORD *)v66 + 1);
            v42 = __OFSUB__(v67, v68);
            v69 = v67 - v68;
            if (v42)
              goto LABEL_132;
            v59 = v34 < v69;
            goto LABEL_76;
          }
        }
        else
        {
          if (v11 != 3)
          {
            v60 = *((_QWORD *)v26 + 4);
            v61 = *((_QWORD *)v26 + 5);
            v42 = __OFSUB__(v61, v60);
            v53 = v61 - v60;
            v54 = v42;
            goto LABEL_70;
          }
          v33 = *((_QWORD *)v26 + 4);
          v32 = *((_QWORD *)v26 + 5);
          v42 = __OFSUB__(v32, v33);
          v34 = v32 - v33;
          v35 = v42;
        }
        if ((v35 & 1) != 0)
          goto LABEL_124;
        v43 = v11 - 2;
        v49 = &v29[16 * v11 - 32];
        v51 = *(_QWORD *)v49;
        v50 = *((_QWORD *)v49 + 1);
        v52 = __OFSUB__(v50, v51);
        v53 = v50 - v51;
        v54 = v52;
        if (v52)
          goto LABEL_127;
        v55 = &v29[16 * v31];
        v57 = *(_QWORD *)v55;
        v56 = *((_QWORD *)v55 + 1);
        v42 = __OFSUB__(v56, v57);
        v58 = v56 - v57;
        if (v42)
          goto LABEL_130;
        if (__OFADD__(v53, v58))
          goto LABEL_131;
        if (v53 + v58 >= v34)
        {
          v59 = v34 < v58;
LABEL_76:
          if (v59)
            v31 = v43;
          goto LABEL_78;
        }
LABEL_70:
        if ((v54 & 1) != 0)
          goto LABEL_126;
        v62 = &v29[16 * v31];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v42 = __OFSUB__(v63, v64);
        v65 = v63 - v64;
        if (v42)
          goto LABEL_129;
        if (v65 < v53)
          goto LABEL_15;
LABEL_78:
        v70 = v31 - 1;
        if (v31 - 1 >= v11)
        {
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }
        if (!v10)
          goto LABEL_145;
        v71 = &v29[16 * v70];
        v72 = *(_QWORD *)v71;
        v73 = &v29[16 * v31];
        v74 = *((_QWORD *)v73 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v10 + 96 * *(_QWORD *)v71), (double *)(v10 + 96 * *(_QWORD *)v73), v10 + 96 * v74, v127);
        if (v1)
          goto LABEL_95;
        if (v74 < v72)
          goto LABEL_119;
        if (v31 > *((_QWORD *)v128 + 2))
          goto LABEL_120;
        *(_QWORD *)v71 = v72;
        *(_QWORD *)&v29[16 * v70 + 8] = v74;
        v75 = *((_QWORD *)v128 + 2);
        if (v31 >= v75)
          goto LABEL_121;
        v26 = v128;
        v11 = v75 - 1;
        memmove(&v29[16 * v31], v73 + 16, 16 * (v75 - 1 - v31));
        *((_QWORD *)v128 + 2) = v75 - 1;
        if (v75 <= 2)
          goto LABEL_15;
      }
    }
    v11 = 1;
LABEL_15:
    v3 = v121;
    if (v9 >= v121)
    {
      v8 = v119;
      v110 = v128;
      v2 = v118;
      goto LABEL_105;
    }
  }
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v2;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t *v18;
  Swift::Int v19;
  Swift::Int v20;
  uint64_t *v21;
  uint64_t v22;
  Swift::Int v23;
  double *v24;
  double v25;
  Swift::Int v26;
  double *v27;
  double v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  char v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t i;
  double v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  unint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  Swift::Int v97;
  Swift::Int v98;
  uint64_t v99;
  double *__dst;

  v2 = a1;
  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_136;
    if ((unint64_t)v3 >= 2)
    {
      v80 = 0;
      v81 = *v2;
      for (i = 1; i != v3; ++i)
      {
        v83 = *(double *)(v81 + 8 * i);
        v84 = v80;
        do
        {
          v85 = v81 + 8 * v84;
          if (v83 >= *(double *)v85)
            break;
          if (!v81)
            goto LABEL_140;
          *(_QWORD *)(v85 + 8) = *(_QWORD *)v85;
          *(double *)(v81 + 8 * v84--) = v83;
        }
        while (v84 != -1);
        ++v80;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_145;
  v97 = result;
  v98 = v3;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    __dst = (double *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v11 = (char *)MEMORY[0x24BEE4AF8];
LABEL_102:
      v96 = v8;
      if (v12 >= 2)
      {
        v86 = *v2;
        do
        {
          v87 = v12 - 2;
          if (v12 < 2)
            goto LABEL_131;
          if (!v86)
            goto LABEL_144;
          v88 = v11;
          v89 = v11 + 32;
          v90 = *(_QWORD *)&v11[16 * v87 + 32];
          v91 = *(_QWORD *)&v11[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v86 + 8 * v90), (double *)(v86 + 8 * *(_QWORD *)&v89[16 * v12 - 16]), v86 + 8 * v91, __dst);
          if (v1)
            break;
          if (v91 < v90)
            goto LABEL_132;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v88 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v88);
          if (v87 >= *((_QWORD *)v88 + 2))
            goto LABEL_133;
          v92 = &v88[16 * v87 + 32];
          *(_QWORD *)v92 = v90;
          *((_QWORD *)v92 + 1) = v91;
          v93 = *((_QWORD *)v88 + 2);
          if (v12 > v93)
            goto LABEL_134;
          memmove(&v88[16 * v12 + 16], &v88[16 * v12 + 32], 16 * (v93 - v12));
          v11 = v88;
          *((_QWORD *)v88 + 2) = v93 - 1;
          v12 = v93 - 1;
        }
        while (v93 > 2);
      }
LABEL_113:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v96 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v96 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v7 + 16) = v6;
    v3 = v98;
    v96 = v7;
    __dst = (double *)(v7 + 32);
  }
  v9 = 0;
  v10 = *v2;
  v94 = v2;
  v95 = *v2 - 8;
  v11 = (char *)MEMORY[0x24BEE4AF8];
  v99 = *v2;
  while (1)
  {
    v13 = v9++;
    if (v9 < v3)
    {
      v14 = *(double *)(v10 + 8 * v9);
      v15 = *(double *)(v10 + 8 * v13);
      v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v16 = v14;
        while (1)
        {
          v17 = v16;
          v16 = *(double *)(v10 + 8 * v9);
          if (v14 < v15 == v16 >= v17)
            break;
          if (v3 == ++v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13)
          goto LABEL_137;
        if (v13 < v9)
        {
          v18 = (uint64_t *)(v95 + 8 * v9);
          v19 = v9;
          v20 = v13;
          v21 = (uint64_t *)(v10 + 8 * v13);
          do
          {
            if (v20 != --v19)
            {
              if (!v10)
                goto LABEL_143;
              v22 = *v21;
              *v21 = *v18;
              *v18 = v22;
            }
            ++v20;
            --v18;
            ++v21;
          }
          while (v20 < v19);
        }
      }
    }
    if (v9 >= v3)
      goto LABEL_46;
    if (__OFSUB__(v9, v13))
      goto LABEL_135;
    if (v9 - v13 >= v97)
      goto LABEL_46;
    v23 = v13 + v97;
    if (__OFADD__(v13, v97))
      goto LABEL_138;
    if (v23 >= v3)
      v23 = v3;
    if (v23 < v13)
      break;
    if (v9 != v23)
    {
      v24 = (double *)(v95 + 8 * v9);
      do
      {
        v25 = *(double *)(v10 + 8 * v9);
        v26 = v13;
        v27 = v24;
        do
        {
          v28 = *v27;
          if (v25 >= *v27)
            break;
          if (!v10)
            goto LABEL_141;
          *v27 = v25;
          v27[1] = v28;
          --v27;
          ++v26;
        }
        while (v9 != v26);
        ++v9;
        ++v24;
      }
      while (v9 != v23);
      v9 = v23;
    }
LABEL_46:
    if (v9 < v13)
      goto LABEL_130;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v30 = *((_QWORD *)v11 + 2);
    v29 = *((_QWORD *)v11 + 3);
    v12 = v30 + 1;
    v10 = v99;
    if (v30 >= v29 >> 1)
    {
      v79 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v29 > 1), v30 + 1, 1, v11);
      v10 = v99;
      v11 = v79;
    }
    *((_QWORD *)v11 + 2) = v12;
    v31 = v11 + 32;
    v32 = &v11[16 * v30 + 32];
    *(_QWORD *)v32 = v13;
    *((_QWORD *)v32 + 1) = v9;
    if (v30)
    {
      while (1)
      {
        v33 = v12 - 1;
        if (v12 >= 4)
        {
          v38 = &v31[16 * v12];
          v39 = *((_QWORD *)v38 - 8);
          v40 = *((_QWORD *)v38 - 7);
          v44 = __OFSUB__(v40, v39);
          v41 = v40 - v39;
          if (v44)
            goto LABEL_119;
          v43 = *((_QWORD *)v38 - 6);
          v42 = *((_QWORD *)v38 - 5);
          v44 = __OFSUB__(v42, v43);
          v36 = v42 - v43;
          v37 = v44;
          if (v44)
            goto LABEL_120;
          v45 = v12 - 2;
          v46 = &v31[16 * v12 - 32];
          v48 = *(_QWORD *)v46;
          v47 = *((_QWORD *)v46 + 1);
          v44 = __OFSUB__(v47, v48);
          v49 = v47 - v48;
          if (v44)
            goto LABEL_122;
          v44 = __OFADD__(v36, v49);
          v50 = v36 + v49;
          if (v44)
            goto LABEL_125;
          if (v50 >= v41)
          {
            v68 = &v31[16 * v33];
            v70 = *(_QWORD *)v68;
            v69 = *((_QWORD *)v68 + 1);
            v44 = __OFSUB__(v69, v70);
            v71 = v69 - v70;
            if (v44)
              goto LABEL_129;
            v61 = v36 < v71;
            goto LABEL_83;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v62 = *((_QWORD *)v11 + 4);
            v63 = *((_QWORD *)v11 + 5);
            v44 = __OFSUB__(v63, v62);
            v55 = v63 - v62;
            v56 = v44;
            goto LABEL_77;
          }
          v35 = *((_QWORD *)v11 + 4);
          v34 = *((_QWORD *)v11 + 5);
          v44 = __OFSUB__(v34, v35);
          v36 = v34 - v35;
          v37 = v44;
        }
        if ((v37 & 1) != 0)
          goto LABEL_121;
        v45 = v12 - 2;
        v51 = &v31[16 * v12 - 32];
        v53 = *(_QWORD *)v51;
        v52 = *((_QWORD *)v51 + 1);
        v54 = __OFSUB__(v52, v53);
        v55 = v52 - v53;
        v56 = v54;
        if (v54)
          goto LABEL_124;
        v57 = &v31[16 * v33];
        v59 = *(_QWORD *)v57;
        v58 = *((_QWORD *)v57 + 1);
        v44 = __OFSUB__(v58, v59);
        v60 = v58 - v59;
        if (v44)
          goto LABEL_127;
        if (__OFADD__(v55, v60))
          goto LABEL_128;
        if (v55 + v60 >= v36)
        {
          v61 = v36 < v60;
LABEL_83:
          if (v61)
            v33 = v45;
          goto LABEL_85;
        }
LABEL_77:
        if ((v56 & 1) != 0)
          goto LABEL_123;
        v64 = &v31[16 * v33];
        v66 = *(_QWORD *)v64;
        v65 = *((_QWORD *)v64 + 1);
        v44 = __OFSUB__(v65, v66);
        v67 = v65 - v66;
        if (v44)
          goto LABEL_126;
        if (v67 < v55)
          goto LABEL_15;
LABEL_85:
        v72 = v33 - 1;
        if (v33 - 1 >= v12)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v10)
          goto LABEL_142;
        v73 = &v31[16 * v72];
        v74 = *(_QWORD *)v73;
        v75 = v31;
        v76 = &v31[16 * v33];
        v77 = *((_QWORD *)v76 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v10 + 8 * *(_QWORD *)v73), (double *)(v10 + 8 * *(_QWORD *)v76), v10 + 8 * v77, __dst);
        if (v1)
          goto LABEL_113;
        if (v77 < v74)
          goto LABEL_116;
        if (v33 > *((_QWORD *)v11 + 2))
          goto LABEL_117;
        *(_QWORD *)v73 = v74;
        *(_QWORD *)&v75[16 * v72 + 8] = v77;
        v78 = *((_QWORD *)v11 + 2);
        if (v33 >= v78)
          goto LABEL_118;
        v12 = v78 - 1;
        memmove(v76, v76 + 16, 16 * (v78 - 1 - v33));
        v31 = v75;
        *((_QWORD *)v11 + 2) = v78 - 1;
        v10 = v99;
        if (v78 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v98;
    if (v9 >= v98)
    {
      v8 = v96;
      v2 = v94;
      goto LABEL_102;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  unsigned int *v17;
  char *v18;
  char *v19;
  unsigned int v20;
  uint64_t result;
  char *v22;
  char *v23;
  char *v24;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 3;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 2;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 3;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 2;
  v24 = __src;
  v23 = __dst;
  if (v10 >= v12 >> 2)
  {
    if (v11 >= -3)
    {
      if (__dst != a2 || &a2[4 * v13] <= __dst)
        memmove(__dst, a2, 4 * v13);
      v16 = &v4[4 * v13];
      v22 = v16;
      v24 = v6;
      if (v7 < v6 && v11 >= 4)
      {
        v17 = (unsigned int *)(a3 - 4);
        while (1)
        {
          v18 = (char *)(v17 + 1);
          v19 = v6 - 4;
          v20 = *((_DWORD *)v6 - 1);
          if (*((_DWORD *)v16 - 1) >= v20)
          {
            v22 = v16 - 4;
            if (v18 < v16 || v17 >= (unsigned int *)v16 || v18 != v16)
              *v17 = *((_DWORD *)v16 - 1);
            v16 -= 4;
            if (v6 <= v7)
              goto LABEL_42;
          }
          else
          {
            if (v18 != v6 || v17 >= (unsigned int *)v6)
              *v17 = v20;
            v24 = v6 - 4;
            v6 -= 4;
            if (v19 <= v7)
              goto LABEL_42;
          }
          --v17;
          if (v16 <= v4)
            goto LABEL_42;
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -3)
  {
    if (__dst != __src || &__src[4 * v10] <= __dst)
      memmove(__dst, __src, 4 * v10);
    v14 = &v4[4 * v10];
    v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 4)
    {
      do
      {
        if (*(_DWORD *)v6 >= *(_DWORD *)v4)
        {
          if (v7 != v4)
            *(_DWORD *)v7 = *(_DWORD *)v4;
          v4 += 4;
          v23 = v4;
          v15 = v6;
        }
        else
        {
          v15 = v6 + 4;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
            *(_DWORD *)v7 = *(_DWORD *)v6;
        }
        v7 += 4;
        if (v4 >= v14)
          break;
        v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      v24 = v7;
    }
LABEL_42:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  unint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  uint64_t result;
  char *v24;
  const void *v25;
  char *v26;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = (a2 - __src) / 24;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 24;
  v26 = __src;
  v25 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -23)
    {
      if (__dst != a2 || &a2[24 * v11] <= __dst)
        memmove(__dst, a2, 24 * v11);
      v17 = &v4[24 * v11];
      v24 = v17;
      v26 = v6;
      if (v7 < v6 && v10 >= 24)
      {
        v18 = a3 - 24;
        do
        {
          v19 = (char *)(v18 + 24);
          if (*((_QWORD *)v17 - 1) >= *((_QWORD *)v6 - 1))
          {
            v24 = v17 - 24;
            if (v19 < v17 || v18 >= (unint64_t)v17 || v19 != v17)
            {
              v22 = *(_OWORD *)(v17 - 24);
              *(_QWORD *)(v18 + 16) = *((_QWORD *)v17 - 1);
              *(_OWORD *)v18 = v22;
            }
            v20 = v6;
            v17 -= 24;
            if (v6 <= v7)
              break;
          }
          else
          {
            v20 = v6 - 24;
            if (v19 != v6 || v18 >= (unint64_t)v6)
            {
              v21 = *(_OWORD *)v20;
              *(_QWORD *)(v18 + 16) = *((_QWORD *)v6 - 1);
              *(_OWORD *)v18 = v21;
            }
            v26 = v6 - 24;
            if (v20 <= v7)
              break;
          }
          v18 -= 24;
          v6 = v20;
        }
        while (v17 > v4);
      }
LABEL_40:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v26, &v25, &v24);
      return 1;
    }
  }
  else if (v8 >= -23)
  {
    if (__dst != __src || &__src[24 * v9] <= __dst)
      memmove(__dst, __src, 24 * v9);
    v12 = &v4[24 * v9];
    v24 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 24)
    {
      v13 = v4;
      while (1)
      {
        if (*((_QWORD *)v6 + 2) >= *((_QWORD *)v13 + 2))
        {
          v4 = v13 + 24;
          v15 = v13;
          v14 = v6;
          if (v7 == v13)
          {
            v13 += 24;
            if (v7 < v4)
              goto LABEL_18;
          }
          else
          {
            v13 += 24;
          }
        }
        else
        {
          v14 = v6 + 24;
          v15 = v6;
          if (v7 == v6 && v7 < v14)
            goto LABEL_18;
        }
        v16 = *(_OWORD *)v15;
        *((_QWORD *)v7 + 2) = *((_QWORD *)v15 + 2);
        *(_OWORD *)v7 = v16;
LABEL_18:
        v7 += 24;
        if (v13 < v12)
        {
          v6 = v14;
          if ((unint64_t)v14 < a3)
            continue;
        }
        v25 = v4;
        v26 = v7;
        goto LABEL_40;
      }
    }
    goto LABEL_40;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t result;
  char *v25;
  char *v26;
  char *v27;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v26 = __dst;
  v27 = __src;
  if (v10 >= v13)
  {
    if (v11 >= -15)
    {
      v19 = 16 * v13;
      if (__dst != a2 || &a2[v19] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v20 = &v4[v19];
      v25 = &v4[v19];
      v27 = v6;
      if (v7 < v6 && (unint64_t)(v11 - 16) <= 0xFFFFFFFFFFFFFFE0)
      {
        v21 = (char *)(a3 - 16);
        do
        {
          v22 = v21 + 16;
          if (*(v20 - 8) >= *(v6 - 8))
          {
            v25 = v20 - 16;
            if (v22 < v20 || v21 >= v20 || v22 != v20)
              *(_OWORD *)v21 = *((_OWORD *)v20 - 1);
            v23 = v6;
            v20 -= 16;
            if (v6 <= v7)
              break;
          }
          else
          {
            v23 = v6 - 16;
            if (v22 != v6 || v21 >= v6)
              *(_OWORD *)v21 = *(_OWORD *)v23;
            v27 = v6 - 16;
            if (v23 <= v7)
              break;
          }
          v21 -= 16;
          v6 = v23;
        }
        while (v20 > v4);
      }
LABEL_44:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v27, (const void **)&v26, &v25);
      return 1;
    }
  }
  else if (v8 >= -15)
  {
    v14 = 16 * v10;
    if (__dst != __src || &__src[v14] <= __dst)
      memmove(__dst, __src, v14);
    v15 = &v4[v14];
    v25 = &v4[v14];
    if ((unint64_t)v6 < a3 && (unint64_t)(v8 - 16) <= 0xFFFFFFFFFFFFFFE0)
    {
      v16 = v4;
      while (1)
      {
        if (v6[8] >= v16[8])
        {
          v4 = v16 + 16;
          v18 = v16;
          v17 = v6;
          if (v7 == v16)
          {
            v16 += 16;
            if (v7 < v4)
              goto LABEL_22;
          }
          else
          {
            v16 += 16;
          }
        }
        else
        {
          v17 = v6 + 16;
          v18 = v6;
          if (v7 == v6 && v7 < v17)
            goto LABEL_22;
        }
        *(_OWORD *)v7 = *(_OWORD *)v18;
LABEL_22:
        v7 += 16;
        if (v16 < v15)
        {
          v6 = v17;
          if ((unint64_t)v17 < a3)
            continue;
        }
        v26 = v4;
        v27 = v7;
        goto LABEL_44;
      }
    }
    goto LABEL_44;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined consume of Animation.Function(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t result;

  switch(a6)
  {
    case 6:
    case 7:
    case 8:
    case 9:
      result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t destroy for DisplayList.InterpolatorLayer.Removed(id *a1)
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for DisplayList.InterpolatorLayer.Removed(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  id v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  v4 = *(void **)(a2 + 56);
  v5 = *(void **)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v4;
  *(_QWORD *)(a1 + 64) = v5;
  v7 = *(void **)(a2 + 72);
  v6 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v7;
  *(_QWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v8 = v4;
  v9 = v5;
  v10 = v7;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for DisplayList.InterpolatorLayer.Removed(uint64_t a1, uint64_t a2)
{
  int v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v4 = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = v4;
  v5 = *(void **)(a1 + 56);
  v6 = *(void **)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v6;
  v7 = v6;

  v8 = *(void **)(a1 + 64);
  v9 = *(void **)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v9;
  v10 = v9;

  v11 = *(void **)(a2 + 72);
  v12 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v11;
  v13 = v11;

  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  return a1;
}

__n128 __swift_memcpy105_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_OWORD *)(a1 + 89) = *(__int128 *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for DisplayList.InterpolatorLayer.Removed(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);

  v4 = *(void **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);

  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayList.InterpolatorLayer.Removed(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 105))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DisplayList.InterpolatorLayer.Removed(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 104) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 105) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 105) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.InterpolatorLayer.Removed()
{
  return &type metadata for DisplayList.InterpolatorLayer.Removed;
}

uint64_t destroy for DisplayList.InterpolatorLayer.Contents()
{
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for DisplayList.InterpolatorLayer.Contents(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DisplayList.InterpolatorLayer.Contents(uint64_t a1, uint64_t a2)
{
  int v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v4 = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = v4;
  return a1;
}

__n128 __swift_memcpy53_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 45) = *(_QWORD *)(a2 + 45);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for DisplayList.InterpolatorLayer.Contents(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayList.InterpolatorLayer.Contents(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 53))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DisplayList.InterpolatorLayer.Contents(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 52) = 0;
    *(_DWORD *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 53) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 53) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for DisplayList.InterpolatorLayer.Contents()
{
  return &unk_250610210;
}

uint64_t storeEnumTagSinglePayload for DisplayList.InterpolatorLayer.Phase(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_234AA6604 + 4 * byte_2352828E5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_234AA6638 + 4 * byte_2352828E0[v4]))();
}

uint64_t sub_234AA6638(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234AA6640(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234AA6648);
  return result;
}

uint64_t sub_234AA6654(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234AA665CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_234AA6660(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234AA6668(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for DisplayList.InterpolatorLayer.Phase()
{
  return &unk_2506100E8;
}

unint64_t lazy protocol witness table accessor for type DisplayList.InterpolatorLayer.Phase and conformance DisplayList.InterpolatorLayer.Phase()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayList.InterpolatorLayer.Phase and conformance DisplayList.InterpolatorLayer.Phase;
  if (!lazy protocol witness table cache variable for type DisplayList.InterpolatorLayer.Phase and conformance DisplayList.InterpolatorLayer.Phase)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DisplayList.InterpolatorLayer.Phase, &unk_2506100E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.InterpolatorLayer.Phase and conformance DisplayList.InterpolatorLayer.Phase);
  }
  return result;
}

uint64_t static ScrollPrefetchState.defaultValue.getter()
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  return static ScrollPrefetchState.defaultValue;
}

void ScrollPrefetchState.id.getter(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

_QWORD *ScrollPrefetchState.id.setter(_QWORD *result)
{
  _QWORD *v1;

  *v1 = *result;
  return result;
}

uint64_t (*ScrollPrefetchState.id.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrollPrefetchState.deadline.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t ScrollPrefetchState.deadline.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*ScrollPrefetchState.deadline.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrollPrefetchState.edges.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t ScrollPrefetchState.edges.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = result;
  return result;
}

uint64_t (*ScrollPrefetchState.edges.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrollPrefetchState.init(deadline:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = AGMakeUniqueID();
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = a1;
  *(_BYTE *)(a2 + 16) = 0;
  return result;
}

uint64_t ScrollPrefetchState.commit(to:)(unint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t result;
  id v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;

  v3 = *(_QWORD *)v1;
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(unsigned __int8 *)(v1 + 16);
  result = AGWeakAttributeGetAttribute();
  if ((_DWORD)result != *MEMORY[0x24BE096C0])
  {
    v7 = (id)AGGraphGetAttributeGraph();
    result = AGGraphGetContext();
    if (result)
    {
      v8 = result;
      swift_retain();

      v17 = 0;
      specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v17, 1);
      v9 = v17;
      swift_retain();
      v10 = _threadTransactionID();
      specialized GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)(v9, v10, a1, v3, v4, v5, 1, 0);
      swift_release();
      swift_retain();
      specialized static Update.begin()();
      v11 = swift_allocObject();
      *(_QWORD *)(v11 + 16) = partial apply for closure #1 in ScrollPrefetchState.commit(to:);
      *(_QWORD *)(v11 + 24) = v8;
      v12 = one-time initialization token for actions;
      swift_retain();
      if (v12 != -1)
        swift_once();
      v13 = static Update.actions;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
      v15 = v13[2];
      v14 = v13[3];
      if (v15 >= v14 >> 1)
        v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v13);
      v13[2] = v15 + 1;
      v16 = &v13[2 * v15];
      v16[4] = partial apply for thunk for @escaping @callee_guaranteed () -> ();
      v16[5] = v11;
      static Update.actions = v13;
      swift_bridgeObjectRelease();
      static Update.end()();
      swift_release_n();
      return swift_release();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t specialized GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t ObjectType;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  char v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  BOOL v40;
  _QWORD v41[3];
  __int128 v42;
  unint64_t v43;
  ValueMetadata *v44;
  _UNKNOWN **v45;

  v7 = v6;
  if (one-time initialization token for _lock != -1)
    swift_once();
  v14 = &unk_254270000;
  v15 = static Update._lock;
  _MovableLockLock(static Update._lock);
  swift_beginAccess();
  if (*(_QWORD *)(v7 + 16))
  {
    v16 = (a5 & 1) != 0 || AGGraphGetCounter() != 0;
    swift_beginAccess();
    *(_BYTE *)(v7 + 168) &= a6 & 1;
    v17 = v7 + 144;
    v18 = swift_beginAccess();
    v19 = *(_QWORD *)(*(_QWORD *)(v7 + 144) + 16);
    if (v19)
    {
      swift_beginAccess();
      v20 = *(_QWORD **)v17;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)v17 = v20;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v20 = specialized _ArrayBuffer._consumeAndCreateNew()(v20);
        *(_QWORD *)v17 = v20;
      }
      if (v19 > v20[2])
      {
        __break(1u);
        goto LABEL_39;
      }
      v22 = &v20[3 * v19];
      if (*((_DWORD *)v22 + 4) == (_DWORD)a2)
      {
        v20 = v22 + 1;
        v23 = v22[1];
        if (v23)
        {
          if (a1)
          {
            v41[0] = MEMORY[0x24BEE4AF8];
            swift_retain();
            swift_retain();
            v40 = compareLists(_:_:ignoredTypes:)(v23, a1, (uint64_t)v41);
            swift_release();
            swift_release();
            v14 = (_QWORD *)&unk_254270000;
            swift_bridgeObjectRelease();
            if (v40)
            {
LABEL_15:
              specialized AsyncTransaction.append<A>(_:)(a3, a4);
              swift_endAccess();
              if (v16)
              {
LABEL_31:
                v15 = v14[226];
                return _MovableLockUnlock(v15);
              }
              swift_beginAccess();
              if (*(_QWORD *)(*(_QWORD *)v17 + 16))
              {
                specialized Array._customRemoveLast()((uint64_t)&v42);
                a1 = v43;
                if (v43)
                {
                  LODWORD(a4) = DWORD2(v42);
                  a2 = v42;
                }
                else
                {
                  specialized Array.remove(at:)(*(_QWORD *)(*(_QWORD *)v17 + 16) - 1, (uint64_t)&v42);
                  a2 = v42;
                  LODWORD(a4) = DWORD2(v42);
                  a1 = v43;
                }
                swift_endAccess();
                GraphHost.flushTransactions()();
                swift_beginAccess();
                v20 = *(_QWORD **)(v7 + 144);
                swift_retain();
                swift_bridgeObjectRetain();
                v36 = swift_isUniquelyReferenced_nonNull_native();
                *(_QWORD *)(v7 + 144) = v20;
                if ((v36 & 1) != 0)
                {
LABEL_35:
                  v38 = v20[2];
                  v37 = v20[3];
                  if (v38 >= v37 >> 1)
                  {
                    v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v37 > 1), v38 + 1, 1, v20);
                    *(_QWORD *)v17 = v20;
                  }
                  v20[2] = v38 + 1;
                  v39 = &v20[3 * v38];
                  v39[4] = a2;
                  *((_DWORD *)v39 + 10) = a4;
                  v39[6] = a1;
                  swift_endAccess();
                  swift_bridgeObjectRelease();
                  swift_release();
                  goto LABEL_31;
                }
LABEL_40:
                v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
                *(_QWORD *)v17 = v20;
                goto LABEL_35;
              }
LABEL_39:
              __break(1u);
              goto LABEL_40;
            }
          }
        }
        else if (!a1)
        {
          goto LABEL_15;
        }
      }
      swift_endAccess();
      if (!v16)
        GraphHost.flushTransactions()();
    }
    else if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 192))(v18))
    {
      v25 = v24;
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v25 + 32))(ObjectType, v25);
      swift_unknownObjectRelease();
    }
    swift_retain();
    swift_bridgeObjectRetain();
    v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
    v29 = v27[2];
    v28 = v27[3];
    if (v29 >= v28 >> 1)
      v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v28 > 1), v29 + 1, 1, v27);
    v44 = &type metadata for ObservationGraphMutation;
    v45 = &protocol witness table for ObservationGraphMutation;
    *(_QWORD *)&v42 = a3;
    *((_QWORD *)&v42 + 1) = a4;
    v27[2] = v29 + 1;
    outlined init with take of ScrollStateRequest(&v42, (uint64_t)&v27[5 * v29 + 4]);
    swift_beginAccess();
    v30 = *(_QWORD **)v17;
    v31 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v17 = v30;
    if ((v31 & 1) == 0)
    {
      v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30[2] + 1, 1, v30);
      *(_QWORD *)v17 = v30;
    }
    v33 = v30[2];
    v32 = v30[3];
    if (v33 >= v32 >> 1)
    {
      v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v32 > 1), v33 + 1, 1, v30);
      *(_QWORD *)v17 = v30;
    }
    v30[2] = v33 + 1;
    v34 = &v30[3 * v33];
    v34[4] = a1;
    *((_DWORD *)v34 + 10) = a2;
    v34[6] = v27;
    swift_endAccess();
    goto LABEL_31;
  }
  return _MovableLockUnlock(v15);
}

uint64_t specialized GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)(unint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t ObjectType;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  char v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD v35[3];
  __int128 v36;
  unint64_t v37;
  ValueMetadata *v38;
  _UNKNOWN **v39;

  v5 = v4;
  if (one-time initialization token for _lock != -1)
    swift_once();
  v10 = static Update._lock;
  _MovableLockLock(static Update._lock);
  swift_beginAccess();
  if (*(_QWORD *)(v5 + 16))
  {
    v11 = (a3 & 1) != 0 || AGGraphGetCounter() != 0;
    swift_beginAccess();
    *(_BYTE *)(v5 + 168) &= a4 & 1;
    v12 = v5 + 144;
    v13 = swift_beginAccess();
    v14 = *(_QWORD *)(*(_QWORD *)(v5 + 144) + 16);
    if (v14)
    {
      swift_beginAccess();
      v15 = *(_QWORD **)v12;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)v12 = v15;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v15 = specialized _ArrayBuffer._consumeAndCreateNew()(v15);
        *(_QWORD *)v12 = v15;
      }
      if (v14 > v15[2])
      {
        __break(1u);
        goto LABEL_39;
      }
      v17 = &v15[3 * v14];
      if (*((_DWORD *)v17 + 4) == (_DWORD)a2)
      {
        v15 = v17 + 1;
        v14 = v17[1];
        if (v14)
        {
          if (a1)
          {
            v35[0] = MEMORY[0x24BEE4AF8];
            swift_retain();
            swift_retain();
            v18 = compareLists(_:_:ignoredTypes:)(v14, a1, (uint64_t)v35);
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            if (v18)
            {
LABEL_15:
              specialized AsyncTransaction.append<A>(_:)();
              swift_endAccess();
              if (v11)
              {
LABEL_31:
                v10 = static Update._lock;
                return _MovableLockUnlock(v10);
              }
              swift_beginAccess();
              if (*(_QWORD *)(*(_QWORD *)v12 + 16))
              {
                specialized Array._customRemoveLast()((uint64_t)&v36);
                a1 = v37;
                if (v37)
                {
                  LODWORD(v14) = DWORD2(v36);
                  a2 = v36;
                }
                else
                {
                  specialized Array.remove(at:)(*(_QWORD *)(*(_QWORD *)v12 + 16) - 1, (uint64_t)&v36);
                  a2 = v36;
                  LODWORD(v14) = DWORD2(v36);
                  a1 = v37;
                }
                swift_endAccess();
                GraphHost.flushTransactions()();
                swift_beginAccess();
                v15 = *(_QWORD **)(v5 + 144);
                swift_retain();
                swift_bridgeObjectRetain();
                v31 = swift_isUniquelyReferenced_nonNull_native();
                *(_QWORD *)(v5 + 144) = v15;
                if ((v31 & 1) != 0)
                {
LABEL_35:
                  v33 = v15[2];
                  v32 = v15[3];
                  if (v33 >= v32 >> 1)
                  {
                    v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v32 > 1), v33 + 1, 1, v15);
                    *(_QWORD *)v12 = v15;
                  }
                  v15[2] = v33 + 1;
                  v34 = &v15[3 * v33];
                  v34[4] = a2;
                  *((_DWORD *)v34 + 10) = v14;
                  v34[6] = a1;
                  swift_endAccess();
                  swift_bridgeObjectRelease();
                  swift_release();
                  goto LABEL_31;
                }
LABEL_40:
                v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
                *(_QWORD *)v12 = v15;
                goto LABEL_35;
              }
LABEL_39:
              __break(1u);
              goto LABEL_40;
            }
          }
        }
        else if (!a1)
        {
          goto LABEL_15;
        }
      }
      swift_endAccess();
      if (!v11)
        GraphHost.flushTransactions()();
    }
    else if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 192))(v13))
    {
      v20 = v19;
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v20 + 32))(ObjectType, v20);
      swift_unknownObjectRelease();
    }
    swift_retain();
    v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
    v24 = v22[2];
    v23 = v22[3];
    if (v24 >= v23 >> 1)
      v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, v22);
    v38 = &type metadata for EmptyGraphMutation;
    v39 = &protocol witness table for EmptyGraphMutation;
    v22[2] = v24 + 1;
    outlined init with take of ScrollStateRequest(&v36, (uint64_t)&v22[5 * v24 + 4]);
    swift_beginAccess();
    v25 = *(_QWORD **)v12;
    v26 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v12 = v25;
    if ((v26 & 1) == 0)
    {
      v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
      *(_QWORD *)v12 = v25;
    }
    v28 = v25[2];
    v27 = v25[3];
    if (v28 >= v27 >> 1)
    {
      v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v27 > 1), v28 + 1, 1, v25);
      *(_QWORD *)v12 = v25;
    }
    v25[2] = v28 + 1;
    v29 = &v25[3 * v28];
    v29[4] = a1;
    *((_DWORD *)v29 + 10) = a2;
    v29[6] = v22;
    swift_endAccess();
    goto LABEL_31;
  }
  return _MovableLockUnlock(v10);
}

uint64_t specialized GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)(unint64_t a1, int a2, unint64_t a3, uint64_t a4, uint64_t a5, int a6, char a7, char a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t ObjectType;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  char v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  BOOL v43;
  _QWORD v45[3];
  __int128 v46;
  unint64_t v47;
  void *v48;
  _UNKNOWN **v49;

  v9 = v8;
  if (one-time initialization token for _lock != -1)
    swift_once();
  v17 = static Update._lock;
  _MovableLockLock(static Update._lock);
  swift_beginAccess();
  if (*(_QWORD *)(v9 + 16))
  {
    v18 = (a7 & 1) != 0 || AGGraphGetCounter() != 0;
    swift_beginAccess();
    *(_BYTE *)(v9 + 168) &= a8 & 1;
    v19 = v9 + 144;
    v20 = swift_beginAccess();
    v21 = *(_QWORD *)(*(_QWORD *)(v9 + 144) + 16);
    if (v21)
    {
      swift_beginAccess();
      v22 = *(_QWORD **)v19;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)v19 = v22;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v22 = specialized _ArrayBuffer._consumeAndCreateNew()(v22);
        *(_QWORD *)v19 = v22;
      }
      if (v21 > v22[2])
      {
        __break(1u);
        goto LABEL_39;
      }
      v24 = &v22[3 * v21];
      if (*((_DWORD *)v24 + 4) == a2)
      {
        v22 = v24 + 1;
        v25 = v24[1];
        if (v25)
        {
          if (a1)
          {
            v45[0] = MEMORY[0x24BEE4AF8];
            swift_retain();
            swift_retain();
            v43 = compareLists(_:_:ignoredTypes:)(v25, a1, (uint64_t)v45);
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            if (v43)
            {
LABEL_15:
              specialized AsyncTransaction.append<A>(_:)(a3, a4, a5, a6);
              swift_endAccess();
              if ((v18 & 1) != 0)
              {
LABEL_31:
                v17 = static Update._lock;
                return _MovableLockUnlock(v17);
              }
              swift_beginAccess();
              if (*(_QWORD *)(*(_QWORD *)v19 + 16))
              {
                specialized Array._customRemoveLast()((uint64_t)&v46);
                a1 = v47;
                if (v47)
                {
                  a6 = DWORD2(v46);
                  v18 = v46;
                }
                else
                {
                  specialized Array.remove(at:)(*(_QWORD *)(*(_QWORD *)v19 + 16) - 1, (uint64_t)&v46);
                  v18 = v46;
                  a6 = DWORD2(v46);
                  a1 = v47;
                }
                swift_endAccess();
                GraphHost.flushTransactions()();
                swift_beginAccess();
                v22 = *(_QWORD **)(v9 + 144);
                swift_retain();
                swift_bridgeObjectRetain();
                v39 = swift_isUniquelyReferenced_nonNull_native();
                *(_QWORD *)(v9 + 144) = v22;
                if ((v39 & 1) != 0)
                {
LABEL_35:
                  v41 = v22[2];
                  v40 = v22[3];
                  if (v41 >= v40 >> 1)
                  {
                    v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v40 > 1), v41 + 1, 1, v22);
                    *(_QWORD *)v19 = v22;
                  }
                  v22[2] = v41 + 1;
                  v42 = &v22[3 * v41];
                  v42[4] = v18;
                  *((_DWORD *)v42 + 10) = a6;
                  v42[6] = a1;
                  swift_endAccess();
                  swift_bridgeObjectRelease();
                  swift_release();
                  goto LABEL_31;
                }
LABEL_40:
                v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
                *(_QWORD *)v19 = v22;
                goto LABEL_35;
              }
LABEL_39:
              __break(1u);
              goto LABEL_40;
            }
          }
        }
        else if (!a1)
        {
          goto LABEL_15;
        }
      }
      swift_endAccess();
      if ((v18 & 1) == 0)
        GraphHost.flushTransactions()();
    }
    else if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 192))(v20))
    {
      v27 = v26;
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v27 + 32))(ObjectType, v27);
      swift_unknownObjectRelease();
    }
    swift_retain();
    v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
    v31 = v29[2];
    v30 = v29[3];
    if (v31 >= v30 >> 1)
      v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v30 > 1), v31 + 1, 1, v29);
    v48 = &unk_25062D720;
    v49 = &protocol witness table for ScrollPrefetchState.PrefetchMutation;
    v32 = swift_allocObject();
    *(_QWORD *)&v46 = v32;
    *(_QWORD *)(v32 + 16) = a3;
    *(_QWORD *)(v32 + 24) = a4;
    *(_QWORD *)(v32 + 32) = a5;
    *(_BYTE *)(v32 + 40) = a6;
    v29[2] = v31 + 1;
    outlined init with take of ScrollStateRequest(&v46, (uint64_t)&v29[5 * v31 + 4]);
    swift_beginAccess();
    v33 = *(_QWORD **)v19;
    v34 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v19 = v33;
    if ((v34 & 1) == 0)
    {
      v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33[2] + 1, 1, v33);
      *(_QWORD *)v19 = v33;
    }
    v36 = v33[2];
    v35 = v33[3];
    if (v36 >= v35 >> 1)
    {
      v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v35 > 1), v36 + 1, 1, v33);
      *(_QWORD *)v19 = v33;
    }
    v33[2] = v36 + 1;
    v37 = &v33[3 * v36];
    v37[4] = a1;
    *((_DWORD *)v37 + 10) = a2;
    v37[6] = v29;
    swift_endAccess();
    goto LABEL_31;
  }
  return _MovableLockUnlock(v17);
}

uint64_t specialized GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)(unint64_t a1, uint64_t a2, unint64_t a3, char a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t ObjectType;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  char v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD v39[3];
  __int128 v40;
  unint64_t v41;
  ValueMetadata *v42;
  char **v43;

  v6 = v5;
  if (one-time initialization token for _lock != -1)
    swift_once();
  v12 = &unk_254270000;
  v13 = static Update._lock;
  _MovableLockLock(static Update._lock);
  swift_beginAccess();
  if (*(_QWORD *)(v6 + 16))
  {
    v14 = (a4 & 1) != 0 || AGGraphGetCounter() != 0;
    swift_beginAccess();
    *(_BYTE *)(v6 + 168) &= a5 & 1;
    v15 = v6 + 144;
    v16 = swift_beginAccess();
    v17 = *(_QWORD *)(*(_QWORD *)(v6 + 144) + 16);
    if (v17)
    {
      swift_beginAccess();
      v18 = *(_QWORD **)v15;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)v15 = v18;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v18 = specialized _ArrayBuffer._consumeAndCreateNew()(v18);
        *(_QWORD *)v15 = v18;
      }
      if (v17 > v18[2])
      {
        __break(1u);
        goto LABEL_39;
      }
      v20 = &v18[3 * v17];
      if (*((_DWORD *)v20 + 4) == (_DWORD)a2)
      {
        v18 = v20 + 1;
        v21 = v20[1];
        if (v21)
        {
          if (a1)
          {
            v39[0] = MEMORY[0x24BEE4AF8];
            swift_retain();
            swift_retain();
            v22 = compareLists(_:_:ignoredTypes:)(v21, a1, (uint64_t)v39);
            swift_release();
            swift_release();
            v12 = (_QWORD *)&unk_254270000;
            swift_bridgeObjectRelease();
            if (v22)
            {
LABEL_15:
              specialized AsyncTransaction.append<A>(_:)(a3);
              swift_endAccess();
              if (v14)
              {
LABEL_31:
                v13 = v12[226];
                return _MovableLockUnlock(v13);
              }
              swift_beginAccess();
              if (*(_QWORD *)(*(_QWORD *)v15 + 16))
              {
                specialized Array._customRemoveLast()((uint64_t)&v40);
                a1 = v41;
                if (v41)
                {
                  LODWORD(a3) = DWORD2(v40);
                  a2 = v40;
                }
                else
                {
                  specialized Array.remove(at:)(*(_QWORD *)(*(_QWORD *)v15 + 16) - 1, (uint64_t)&v40);
                  a2 = v40;
                  LODWORD(a3) = DWORD2(v40);
                  a1 = v41;
                }
                swift_endAccess();
                GraphHost.flushTransactions()();
                swift_beginAccess();
                v18 = *(_QWORD **)(v6 + 144);
                swift_retain();
                swift_bridgeObjectRetain();
                v35 = swift_isUniquelyReferenced_nonNull_native();
                *(_QWORD *)(v6 + 144) = v18;
                if ((v35 & 1) != 0)
                {
LABEL_35:
                  v37 = v18[2];
                  v36 = v18[3];
                  if (v37 >= v36 >> 1)
                  {
                    v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v36 > 1), v37 + 1, 1, v18);
                    *(_QWORD *)v15 = v18;
                  }
                  v18[2] = v37 + 1;
                  v38 = &v18[3 * v37];
                  v38[4] = a2;
                  *((_DWORD *)v38 + 10) = a3;
                  v38[6] = a1;
                  swift_endAccess();
                  swift_bridgeObjectRelease();
                  swift_release();
                  goto LABEL_31;
                }
LABEL_40:
                v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
                *(_QWORD *)v15 = v18;
                goto LABEL_35;
              }
LABEL_39:
              __break(1u);
              goto LABEL_40;
            }
          }
        }
        else if (!a1)
        {
          goto LABEL_15;
        }
      }
      swift_endAccess();
      if (!v14)
        GraphHost.flushTransactions()();
    }
    else if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 192))(v16))
    {
      v24 = v23;
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v24 + 32))(ObjectType, v24);
      swift_unknownObjectRelease();
    }
    swift_retain();
    v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
    v28 = v26[2];
    v27 = v26[3];
    if (v28 >= v27 >> 1)
      v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v27 > 1), v28 + 1, 1, v26);
    v42 = &type metadata for InvalidatingGraphMutation;
    v43 = &protocol witness table for InvalidatingGraphMutation;
    *(_QWORD *)&v40 = a3;
    v26[2] = v28 + 1;
    outlined init with take of ScrollStateRequest(&v40, (uint64_t)&v26[5 * v28 + 4]);
    swift_beginAccess();
    v29 = *(_QWORD **)v15;
    v30 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v15 = v29;
    if ((v30 & 1) == 0)
    {
      v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1, v29);
      *(_QWORD *)v15 = v29;
    }
    v32 = v29[2];
    v31 = v29[3];
    if (v32 >= v31 >> 1)
    {
      v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v31 > 1), v32 + 1, 1, v29);
      *(_QWORD *)v15 = v29;
    }
    v29[2] = v32 + 1;
    v33 = &v29[3 * v32];
    v33[4] = a1;
    *((_DWORD *)v33 + 10) = a2;
    v33[6] = v26;
    swift_endAccess();
    goto LABEL_31;
  }
  return _MovableLockUnlock(v13);
}

uint64_t specialized GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)(unint64_t a1, int a2, _QWORD *a3, uint64_t a4, char a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v12;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t ObjectType;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  char v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  _QWORD *v51;
  _QWORD v52[2];
  __int128 v53;
  unint64_t v54;
  ValueMetadata *v55;
  _UNKNOWN **v56;

  v7 = v6;
  LODWORD(v12) = a2;
  if (one-time initialization token for _lock != -1)
    swift_once();
  v14 = &unk_254270000;
  v15 = static Update._lock;
  _MovableLockLock(static Update._lock);
  swift_beginAccess();
  if (*(_QWORD *)(v7 + 16))
  {
    v16 = (a5 & 1) != 0 || AGGraphGetCounter() != 0;
    swift_beginAccess();
    *(_BYTE *)(v7 + 168) &= a6 & 1;
    v17 = (uint64_t *)(v7 + 144);
    v18 = swift_beginAccess();
    v19 = *(_QWORD *)(*(_QWORD *)(v7 + 144) + 16);
    if (v19)
    {
      swift_beginAccess();
      v20 = *v17;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v17 = v20;
      v50 = v16;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v20 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v20);
        *v17 = v20;
      }
      if (v19 > *(_QWORD *)(v20 + 16))
      {
        __break(1u);
        goto LABEL_49;
      }
      v51 = a3;
      v22 = v19 - 1;
      v23 = v20 + 32;
      if (*(_DWORD *)(v20 + 32 + 24 * v22 + 8) == (_DWORD)v12)
      {
        v24 = *(_QWORD *)(v23 + 24 * v22);
        if (v24)
        {
          if (a1)
          {
            *(_QWORD *)&v53 = MEMORY[0x24BEE4AF8];
            swift_retain();
            swift_retain();
            v25 = compareLists(_:_:ignoredTypes:)(v24, a1, (uint64_t)&v53);
            swift_release();
            swift_release();
            v14 = (_QWORD *)&unk_254270000;
            swift_bridgeObjectRelease();
            if (v25)
            {
LABEL_15:
              v26 = v23 + 24 * v22;
              v27 = *(_QWORD *)(v26 + 16);
              v16 = v26 + 16;
              v20 = v27;
              v28 = *(_QWORD *)(v27 + 16);
              v52[0] = v51;
              v52[1] = a4;
              if (v28)
              {
                swift_retain();
                v29 = swift_isUniquelyReferenced_nonNull_native();
                *(_QWORD *)v16 = v20;
                if ((v29 & 1) == 0)
                {
                  v20 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v20);
                  *(_QWORD *)v16 = v20;
                }
                if (v28 > *(_QWORD *)(v20 + 16))
                {
                  __break(1u);
                  goto LABEL_51;
                }
                v30 = v20 + 40 * (v28 - 1);
                v12 = *(_QWORD *)(v30 + 56);
                v31 = *(_QWORD *)(v30 + 64);
                __swift_mutable_project_boxed_opaque_existential_1(v30 + 32, v12);
                v20 = (*(uint64_t (**)(_QWORD *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v31 + 16))(v52, &type metadata for CustomGraphMutation, &protocol witness table for CustomGraphMutation, v12, v31);
                swift_release();
                if ((v20 & 1) != 0)
                {
LABEL_25:
                  swift_endAccess();
                  if ((v50 & 1) != 0)
                  {
LABEL_41:
                    v15 = v14[226];
                    return _MovableLockUnlock(v15);
                  }
                  swift_beginAccess();
                  if (*(_QWORD *)(*v17 + 16))
                  {
                    specialized Array._customRemoveLast()((uint64_t)&v53);
                    v28 = v54;
                    if (v54)
                    {
                      LODWORD(v12) = DWORD2(v53);
                      a4 = v53;
                    }
                    else
                    {
                      specialized Array.remove(at:)(*(_QWORD *)(*v17 + 16) - 1, (uint64_t)&v53);
                      a4 = v53;
                      LODWORD(v12) = DWORD2(v53);
                      v28 = v54;
                    }
                    swift_endAccess();
                    GraphHost.flushTransactions()();
                    swift_beginAccess();
                    v20 = *(_QWORD *)(v7 + 144);
                    swift_retain();
                    swift_bridgeObjectRetain();
                    v46 = swift_isUniquelyReferenced_nonNull_native();
                    *(_QWORD *)(v7 + 144) = v20;
                    if ((v46 & 1) != 0)
                    {
LABEL_45:
                      v48 = *(_QWORD *)(v20 + 16);
                      v47 = *(_QWORD *)(v20 + 24);
                      if (v48 >= v47 >> 1)
                      {
                        v20 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v47 > 1), v48 + 1, 1, (_QWORD *)v20);
                        *v17 = v20;
                      }
                      *(_QWORD *)(v20 + 16) = v48 + 1;
                      v49 = v20 + 24 * v48;
                      *(_QWORD *)(v49 + 32) = a4;
                      *(_DWORD *)(v49 + 40) = v12;
                      *(_QWORD *)(v49 + 48) = v28;
                      swift_endAccess();
                      swift_bridgeObjectRelease();
                      swift_release();
                      goto LABEL_41;
                    }
LABEL_52:
                    v20 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v20 + 16) + 1, 1, (_QWORD *)v20);
                    *v17 = v20;
                    goto LABEL_45;
                  }
LABEL_51:
                  __break(1u);
                  goto LABEL_52;
                }
                v20 = *(_QWORD *)v16;
              }
              swift_retain();
              v32 = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)v16 = v20;
              a3 = v14;
              if ((v32 & 1) != 0)
              {
LABEL_22:
                v28 = *(_QWORD *)(v20 + 16);
                v33 = *(_QWORD *)(v20 + 24);
                v12 = v28 + 1;
                if (v28 >= v33 >> 1)
                {
                  v20 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v33 > 1), v28 + 1, 1, (_QWORD *)v20);
                  *(_QWORD *)v16 = v20;
                }
                v55 = &type metadata for CustomGraphMutation;
                v56 = &protocol witness table for CustomGraphMutation;
                *(_QWORD *)&v53 = v51;
                *((_QWORD *)&v53 + 1) = a4;
                *(_QWORD *)(v20 + 16) = v12;
                outlined init with take of ScrollStateRequest(&v53, v20 + 40 * v28 + 32);
                v14 = a3;
                goto LABEL_25;
              }
LABEL_49:
              v20 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v20 + 16) + 1, 1, (_QWORD *)v20);
              *(_QWORD *)v16 = v20;
              goto LABEL_22;
            }
          }
        }
        else if (!a1)
        {
          goto LABEL_15;
        }
      }
      swift_endAccess();
      a3 = v51;
      if ((v50 & 1) == 0)
        GraphHost.flushTransactions()();
    }
    else if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 192))(v18))
    {
      v35 = v34;
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v35 + 32))(ObjectType, v35);
      swift_unknownObjectRelease();
    }
    swift_retain();
    swift_retain();
    v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
    v39 = v37[2];
    v38 = v37[3];
    if (v39 >= v38 >> 1)
      v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v38 > 1), v39 + 1, 1, v37);
    v55 = &type metadata for CustomGraphMutation;
    v56 = &protocol witness table for CustomGraphMutation;
    *(_QWORD *)&v53 = a3;
    *((_QWORD *)&v53 + 1) = a4;
    v37[2] = v39 + 1;
    outlined init with take of ScrollStateRequest(&v53, (uint64_t)&v37[5 * v39 + 4]);
    swift_beginAccess();
    v40 = (_QWORD *)*v17;
    v41 = swift_isUniquelyReferenced_nonNull_native();
    *v17 = (uint64_t)v40;
    if ((v41 & 1) == 0)
    {
      v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40[2] + 1, 1, v40);
      *v17 = (uint64_t)v40;
    }
    v43 = v40[2];
    v42 = v40[3];
    if (v43 >= v42 >> 1)
    {
      v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v42 > 1), v43 + 1, 1, v40);
      *v17 = (uint64_t)v40;
    }
    v40[2] = v43 + 1;
    v44 = &v40[3 * v43];
    v44[4] = a1;
    *((_DWORD *)v44 + 10) = v12;
    v44[6] = v37;
    swift_endAccess();
    goto LABEL_41;
  }
  return _MovableLockUnlock(v15);
}

uint64_t ScrollPrefetchState.PrefetchMutation.combine<A>(with:)(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t result;
  _QWORD v9[3];
  char v10;

  v2 = MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, double))(v4 + 16))((char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  if ((swift_dynamicCast() & 1) == 0)
    return 0;
  v5 = v9[1];
  v6 = v9[2];
  v7 = v10;
  if ((static WeakAttribute.== infix(_:_:)() & 1) == 0)
    return 0;
  *(_QWORD *)(v1 + 8) = v5;
  *(_QWORD *)(v1 + 16) = v6;
  result = 1;
  *(_BYTE *)(v1 + 24) = v7;
  return result;
}

uint64_t protocol witness for GraphMutation.apply() in conformance ScrollPrefetchState.PrefetchMutation()
{
  uint64_t result;

  result = AGWeakAttributeGetAttribute();
  if ((_DWORD)result != *MEMORY[0x24BE096C0])
    return AGGraphSetValue();
  return result;
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance ScrollPrefetchState@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  if (one-time initialization token for defaultValue != -1)
    result = swift_once();
  *a1 = static ScrollPrefetchState.defaultValue;
  return result;
}

uint64_t specialized AsyncTransaction.append<A>(_:)(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t result;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  ValueMetadata *v18;
  _UNKNOWN **v19;
  _QWORD v20[2];

  v3 = v2;
  v5 = a1;
  v6 = *(_QWORD **)(v2 + 16);
  v7 = v6[2];
  v8 = HIDWORD(a1);
  v20[0] = a1;
  v20[1] = a2;
  if (v7)
  {
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v3 + 16) = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v6 = specialized _ArrayBuffer._consumeAndCreateNew()(v6);
      *(_QWORD *)(v3 + 16) = v6;
    }
    if (v7 > v6[2])
    {
      __break(1u);
      goto LABEL_12;
    }
    v10 = &v6[5 * v7 - 5];
    v11 = v10[7];
    v12 = v10[8];
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v10 + 4), v11);
    v13 = (*(uint64_t (**)(_QWORD *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v12 + 16))(v20, &type metadata for ObservationGraphMutation, &protocol witness table for ObservationGraphMutation, v11, v12);
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 16) = v6;
    if ((v13 & 1) != 0)
      return result;
  }
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_12:
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
  v16 = v6[2];
  v15 = v6[3];
  if (v16 >= v15 >> 1)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v6);
  v18 = &type metadata for ObservationGraphMutation;
  v19 = &protocol witness table for ObservationGraphMutation;
  *(_QWORD *)&v17 = __PAIR64__(v8, v5);
  *((_QWORD *)&v17 + 1) = a2;
  v6[2] = v16 + 1;
  result = outlined init with take of ScrollStateRequest(&v17, (uint64_t)&v6[5 * v16 + 4]);
  *(_QWORD *)(v3 + 16) = v6;
  return result;
}

uint64_t specialized AsyncTransaction.append<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  ValueMetadata *v11;
  _UNKNOWN **v12;

  v1 = v0;
  v2 = *(_QWORD **)(v0 + 16);
  v3 = v2[2];
  if (v3)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v1 + 16) = v2;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
      *(_QWORD *)(v1 + 16) = v2;
    }
    if (v3 > v2[2])
    {
      __break(1u);
      goto LABEL_12;
    }
    v5 = &v2[5 * v3 - 5];
    v6 = v5[8];
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v5 + 4), v5[7]);
    result = (*(uint64_t (**)(void))(v6 + 16))();
    *(_QWORD *)(v1 + 16) = v2;
    if ((result & 1) != 0)
      return result;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_12:
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1, 1, v2);
  v9 = v2[2];
  v8 = v2[3];
  if (v9 >= v8 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, v2);
  v11 = &type metadata for EmptyGraphMutation;
  v12 = &protocol witness table for EmptyGraphMutation;
  v2[2] = v9 + 1;
  result = outlined init with take of ScrollStateRequest(&v10, (uint64_t)&v2[5 * v9 + 4]);
  *(_QWORD *)(v1 + 16) = v2;
  return result;
}

uint64_t specialized AsyncTransaction.append<A>(_:)(unint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  int v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int128 v21;
  void *v22;
  _UNKNOWN **v23;
  _QWORD v24[3];
  char v25;

  v5 = v4;
  v9 = a1;
  v10 = *(_QWORD **)(v4 + 16);
  v11 = v10[2];
  v12 = HIDWORD(a1);
  v24[0] = a1;
  v24[1] = a2;
  v24[2] = a3;
  v25 = a4;
  if (v11)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v5 + 16) = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
      *(_QWORD *)(v5 + 16) = v10;
    }
    if (v11 > v10[2])
    {
      __break(1u);
      goto LABEL_12;
    }
    v14 = &v10[5 * v11 - 5];
    v15 = v14[7];
    v16 = v14[8];
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v14 + 4), v15);
    result = (*(uint64_t (**)(_QWORD *, void *, _UNKNOWN **, uint64_t, uint64_t))(v16 + 16))(v24, &unk_25062D720, &protocol witness table for ScrollPrefetchState.PrefetchMutation, v15, v16);
    *(_QWORD *)(v5 + 16) = v10;
    if ((result & 1) != 0)
      return result;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_12:
    v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
  v19 = v10[2];
  v18 = v10[3];
  if (v19 >= v18 >> 1)
    v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v19 + 1, 1, v10);
  v22 = &unk_25062D720;
  v23 = &protocol witness table for ScrollPrefetchState.PrefetchMutation;
  v20 = swift_allocObject();
  *(_QWORD *)&v21 = v20;
  *(_DWORD *)(v20 + 16) = v9;
  *(_DWORD *)(v20 + 20) = v12;
  *(_QWORD *)(v20 + 24) = a2;
  *(_QWORD *)(v20 + 32) = a3;
  *(_BYTE *)(v20 + 40) = a4;
  v10[2] = v19 + 1;
  result = outlined init with take of ScrollStateRequest(&v21, (uint64_t)&v10[5 * v19 + 4]);
  *(_QWORD *)(v5 + 16) = v10;
  return result;
}

uint64_t specialized AsyncTransaction.append<A>(_:)(unint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  unint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  ValueMetadata *v15;
  char **v16;
  unint64_t v17;

  v3 = v1;
  v5 = *(_QWORD **)(v1 + 16);
  v6 = v5[2];
  v17 = a1;
  if (v6)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v3 + 16) = v5;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
      *(_QWORD *)(v3 + 16) = v5;
    }
    if (v6 > v5[2])
    {
      __break(1u);
      goto LABEL_12;
    }
    v8 = &v5[5 * v6 - 5];
    v9 = v8[7];
    v10 = v8[8];
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v8 + 4), v9);
    result = (*(uint64_t (**)(unint64_t *, ValueMetadata *, char **, uint64_t, uint64_t))(v10 + 16))(&v17, &type metadata for InvalidatingGraphMutation, &protocol witness table for InvalidatingGraphMutation, v9, v10);
    *(_QWORD *)(v3 + 16) = v5;
    if ((result & 1) != 0)
      return result;
  }
  v2 = HIDWORD(a1);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_12:
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  v13 = v5[2];
  v12 = v5[3];
  if (v13 >= v12 >> 1)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v5);
  v15 = &type metadata for InvalidatingGraphMutation;
  v16 = &protocol witness table for InvalidatingGraphMutation;
  *(_QWORD *)&v14 = __PAIR64__(v2, a1);
  v5[2] = v13 + 1;
  result = outlined init with take of ScrollStateRequest(&v14, (uint64_t)&v5[5 * v13 + 4]);
  *(_QWORD *)(v3 + 16) = v5;
  return result;
}

uint64_t sub_234AA8A30()
{
  swift_release();
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for ScrollPrefetchState()
{
  return &type metadata for ScrollPrefetchState;
}

uint64_t sub_234AA8A64()
{
  return swift_deallocObject();
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ScrollPrefetchState.PrefetchMutation(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ScrollPrefetchState.PrefetchMutation(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 25) = v3;
  return result;
}

void *type metadata accessor for ScrollPrefetchState.PrefetchMutation()
{
  return &unk_25062D720;
}

uint64_t initializeBufferWithCopyOfBuffer for TimerTimelineSchedule(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for TimerTimelineSchedule(uint64_t a1, uint64_t a2)
{
  return destroy for TimerTimelineSchedule(a1, a2, (uint64_t (*)(_QWORD))MEMORY[0x24BDCE900]);
}

uint64_t initializeWithCopy for TimerTimelineSchedule(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for TimerTimelineSchedule(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for TimerTimelineSchedule(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for TimerTimelineSchedule(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for TimerTimelineSchedule()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_234AA8C4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for TimerTimelineSchedule()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_234AA8C94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for TimerTimelineSchedule(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for TimerTimelineSchedule);
}

uint64_t type metadata completion function for TimerTimelineSchedule()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for TimerIntervalTimelineSchedule(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for DateInterval();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t destroy for TimerIntervalTimelineSchedule(uint64_t a1, uint64_t a2)
{
  return destroy for TimerTimelineSchedule(a1, a2, (uint64_t (*)(_QWORD))MEMORY[0x24BDCB878]);
}

uint64_t destroy for TimerTimelineSchedule(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v4;

  v4 = a3(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
}

uint64_t initializeWithCopy for TimerIntervalTimelineSchedule(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithCopy for TimerIntervalTimelineSchedule(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t initializeWithTake for TimerIntervalTimelineSchedule(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for TimerIntervalTimelineSchedule(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for TimerIntervalTimelineSchedule()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_234AA8F94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for DateInterval();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 2)
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TimerIntervalTimelineSchedule()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_234AA902C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for DateInterval();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  return result;
}

uint64_t type metadata accessor for TimerIntervalTimelineSchedule(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for TimerIntervalTimelineSchedule);
}

uint64_t type metadata completion function for TimerIntervalTimelineSchedule()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for DateInterval();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnySequence<Date> and conformance AnySequence<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnySequence<Date> and conformance AnySequence<A>;
  if (!lazy protocol witness table cache variable for type AnySequence<Date> and conformance AnySequence<A>)
  {
    type metadata accessor for [(_:)](255, (unint64_t *)&lazy cache variable for type metadata for AnySequence<Date>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE2428]);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE2440], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnySequence<Date> and conformance AnySequence<A>);
  }
  return result;
}

_QWORD *TimerIntervalTimelineSchedule.entries(from:mode:)(uint64_t a1, _BYTE *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t (*v33)(uint64_t);
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v44 = a1;
  v3 = type metadata accessor for DateInterval();
  v42 = *(_QWORD *)(v3 - 8);
  v43 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v41 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries(0);
  MEMORY[0x24BDAC7A8](v5);
  v40 = (uint64_t)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v40 - v11;
  v13 = type metadata accessor for Date();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v40 - v18;
  v20 = type metadata accessor for EverySecondEntries(0);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v40 - v24;
  LOBYTE(a2) = *a2;
  v26 = type metadata accessor for TimerIntervalTimelineSchedule(0);
  if ((a2 & 1) != 0)
  {
    v27 = (uint64_t)v9;
    v28 = v41;
    v29 = v42;
    v30 = v43;
    v31 = v45;
    v32 = *(unsigned __int8 *)(v45 + *(int *)(v26 + 20));
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v19, v44, v13);
    if (v32 == 1)
    {
      DateInterval.end.getter();
      TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries.init(start:end:)(v19, v16, v27);
      v33 = type metadata accessor for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries;
      type metadata accessor for _SequenceBox<TimerTimelineSchedule.ReducedFrequencyEntries>(0, &lazy cache variable for type metadata for _SequenceBox<TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries>, type metadata accessor for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries, &lazy protocol witness table cache variable for type TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries and conformance TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries, (uint64_t)&protocol conformance descriptor for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries);
      v34 = (_QWORD *)swift_allocObject();
      v35 = (uint64_t)v34 + *(_QWORD *)(*MEMORY[0x24BEE26A0] + *v34 + 16);
      v36 = v27;
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v28, v31, v30);
      v38 = v40;
      TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries.init(start:interval:)((uint64_t)v19, v28, v40);
      v33 = type metadata accessor for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries;
      type metadata accessor for _SequenceBox<TimerTimelineSchedule.ReducedFrequencyEntries>(0, &lazy cache variable for type metadata for _SequenceBox<TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries>, type metadata accessor for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries, &lazy protocol witness table cache variable for type TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries and conformance TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries, (uint64_t)&protocol conformance descriptor for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries);
      v34 = (_QWORD *)swift_allocObject();
      v35 = (uint64_t)v34 + *(_QWORD *)(*MEMORY[0x24BEE26A0] + *v34 + 16);
      v36 = v38;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v19, v44, v13);
    DateInterval.end.getter();
    v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
    v37(v12, 0, 1, v13);
    v37(v22, 1, 1, v13);
    outlined destroy of Date?((uint64_t)v22);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v22, v19, v13);
    v37(v22, 0, 1, v13);
    outlined init with take of Date?((uint64_t)v12, (uint64_t)&v22[*(int *)(v20 + 20)]);
    v33 = type metadata accessor for EverySecondEntries;
    outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v22, (uint64_t)v25, type metadata accessor for EverySecondEntries);
    type metadata accessor for _SequenceBox<TimerTimelineSchedule.ReducedFrequencyEntries>(0, &lazy cache variable for type metadata for _SequenceBox<EverySecondEntries>, type metadata accessor for EverySecondEntries, &lazy protocol witness table cache variable for type EverySecondEntries and conformance EverySecondEntries, (uint64_t)&protocol conformance descriptor for EverySecondEntries);
    v34 = (_QWORD *)swift_allocObject();
    v35 = (uint64_t)v34 + *(_QWORD *)(*MEMORY[0x24BEE26A0] + *v34 + 16);
    v36 = (uint64_t)v25;
  }
  outlined init with take of LocalizedStringKey.FormatArgument(v36, v35, v33);
  return v34;
}

uint64_t TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries.init(start:end:)@<X0>(char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, _QWORD, uint64_t);
  uint64_t v41;
  char *v42;
  int *v43;
  uint64_t v44;
  char *v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t);
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  void (*v56)(char *, char *, uint64_t);
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char v67;
  char v68;
  char *v69;
  void (*v70)(char *, uint64_t);
  void (*v71)(char *, uint64_t);
  void (*v72)(char *, uint64_t);
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t, uint64_t, uint64_t, double);
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(char *, char *, uint64_t);
  char *v100;
  void (*v101)(uint64_t, uint64_t, uint64_t);
  char *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;

  v106 = a2;
  v107 = a1;
  v111 = a3;
  v89 = type metadata accessor for Calendar.SearchDirection();
  v88 = *(_QWORD *)(v89 - 8);
  MEMORY[0x24BDAC7A8](v89);
  v82 = (char *)&v81 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = type metadata accessor for Calendar.RepeatedTimePolicy();
  v86 = *(_QWORD *)(v87 - 8);
  MEMORY[0x24BDAC7A8](v87);
  v81 = (char *)&v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = type metadata accessor for Calendar.MatchingPolicy();
  v84 = *(_QWORD *)(v85 - 8);
  MEMORY[0x24BDAC7A8](v85);
  v91 = (char *)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Calendar.Component();
  v8 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCF290];
  v9 = *(_QWORD *)(v7 - 8);
  v10 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v102 = (char *)&v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v12);
  v83 = (uint64_t)&v81 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v101 = (void (*)(uint64_t, uint64_t, uint64_t))((char *)&v81 - v15);
  v16 = type metadata accessor for Date();
  v17 = *(_QWORD *)(v16 - 8);
  v97 = v16;
  v98 = v17;
  v18 = v17;
  MEMORY[0x24BDAC7A8](v16);
  v104 = (char *)&v81 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v100 = (char *)&v81 - v21;
  MEMORY[0x24BDAC7A8](v22);
  v92 = (char *)&v81 - v23;
  v110 = type metadata accessor for DateComponents();
  v24 = *(_QWORD *)(v110 - 8);
  MEMORY[0x24BDAC7A8](v110);
  v103 = (char *)&v81 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v28 = (char *)&v81 - v27;
  v105 = type metadata accessor for Calendar();
  v95 = *(_QWORD *)(v105 - 8);
  MEMORY[0x24BDAC7A8](v105);
  v93 = (char *)&v81 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = MEMORY[0x24BDAC7A8](v30);
  v33 = (char *)&v81 - v32;
  v90 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, double))(v18 + 56);
  v90(a3, 1, 1, v16, v31);
  static Calendar.current.getter();
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>, v8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v34 = *(_QWORD *)(v9 + 72);
  v35 = *(unsigned __int8 *)(v9 + 80);
  v36 = v9;
  v96 = v9;
  v37 = (v35 + 32) & ~v35;
  v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = xmmword_2352828C0;
  v39 = v38 + v37;
  v40 = *(void (**)(uint64_t, _QWORD, uint64_t))(v36 + 104);
  v41 = v10;
  v40(v39, *MEMORY[0x24BDCF260], v10);
  v40(v39 + v34, *MEMORY[0x24BDCF1D8], v10);
  specialized Set.init(_nonEmptyArrayLiteral:)(v38);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  v42 = v106;
  Calendar.dateComponents(_:from:)();
  swift_bridgeObjectRelease();
  v43 = (int *)type metadata accessor for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries(0);
  v44 = v111;
  v45 = (char *)(v111 + v43[6]);
  v94 = v24;
  v46 = *(void (**)(char *, char *, uint64_t))(v24 + 16);
  v109 = v28;
  v99 = v46;
  v46(v45, v28, v110);
  v47 = v44 + v43[5];
  v48 = v97;
  v49 = v98;
  v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(v98 + 16);
  v51 = v42;
  v50(v47, (uint64_t)v42, v97);
  v52 = v102;
  v40((uint64_t)v102, *MEMORY[0x24BDCF258], v41);
  v53 = (uint64_t)v101;
  v108 = v33;
  Calendar.date(byAdding:value:to:wrappingComponents:)();
  v54 = v52;
  v55 = v100;
  (*(void (**)(char *, uint64_t))(v96 + 8))(v54, v41);
  v102 = (char *)v50;
  v50((uint64_t)v55, (uint64_t)v51, v48);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v53, 1, v48) == 1)
  {
    v56 = *(void (**)(char *, char *, uint64_t))(v49 + 32);
    v57 = v92;
    v56(v92, v55, v48);
    outlined destroy of Date?(v53);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v49 + 8))(v55, v48);
    v56 = *(void (**)(char *, char *, uint64_t))(v49 + 32);
    v57 = v92;
    v56(v92, (char *)v53, v48);
  }
  v58 = v107;
  v59 = v95;
  v60 = v93;
  v61 = (char *)(v111 + v43[7]);
  v101 = (void (*)(uint64_t, uint64_t, uint64_t))v56;
  v56(v61, v57, v48);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
  v62 = dispatch thunk of static Comparable.< infix(_:_:)();
  v63 = v105;
  (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v60, v108, v105);
  v64 = v104;
  ((void (*)(char *, char *, uint64_t))v102)(v104, v58, v48);
  v65 = v103;
  v66 = v110;
  v99(v103, v109, v110);
  if ((v62 & 1) != 0)
  {
    v67 = Calendar.date(_:matchesComponents:)();
    v66 = v110;
    v68 = v67;
    v69 = v64;
    v70 = *(void (**)(char *, uint64_t))(v94 + 8);
    v70(v65, v110);
    v71 = *(void (**)(char *, uint64_t))(v49 + 8);
    v71(v69, v48);
    v72 = *(void (**)(char *, uint64_t))(v59 + 8);
    v72(v60, v63);
    v73 = v106;
    if ((v68 & 1) == 0)
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v84 + 104))(v91, *MEMORY[0x24BDCF020], v85);
      v74 = v81;
      (*(void (**)(char *, _QWORD, uint64_t))(v86 + 104))(v81, *MEMORY[0x24BDCF0B0], v87);
      v75 = v82;
      (*(void (**)(char *, _QWORD, uint64_t))(v88 + 104))(v82, *MEMORY[0x24BDCF068], v89);
      v77 = v107;
      v76 = v108;
      Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)();
      v71(v73, v48);
      v71(v77, v48);
      (*(void (**)(char *, uint64_t))(v88 + 8))(v75, v89);
      (*(void (**)(char *, uint64_t))(v86 + 8))(v74, v87);
      (*(void (**)(char *, uint64_t))(v84 + 8))(v91, v85);
      v70(v109, v110);
      v72(v76, v63);
      return outlined assign with take of Date?(v83, v111);
    }
  }
  else
  {
    v79 = v64;
    v70 = *(void (**)(char *, uint64_t))(v94 + 8);
    v70(v65, v66);
    v71 = *(void (**)(char *, uint64_t))(v49 + 8);
    v71(v79, v48);
    v72 = *(void (**)(char *, uint64_t))(v59 + 8);
    v72(v60, v63);
    v73 = v106;
  }
  v71(v73, v48);
  v70(v109, v66);
  v72(v108, v63);
  v80 = v111;
  outlined destroy of Date?(v111);
  v101(v80, (uint64_t)v107, v48);
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v90)(v80, 0, 1, v48);
}

uint64_t TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries.init(start:interval:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, uint64_t);
  void (*v31)(char *, uint64_t, uint64_t);
  char *v32;
  uint64_t v33;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t);
  void (*v37)(char *, uint64_t);
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;

  v50 = a2;
  v40 = type metadata accessor for DateInterval();
  v5 = *(_QWORD *)(v40 - 8);
  MEMORY[0x24BDAC7A8](v40);
  v42 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for Calendar.Component();
  v7 = *(_QWORD *)(v39 - 8);
  MEMORY[0x24BDAC7A8](v39);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v10);
  v38 = (char *)&v35 - v11;
  v12 = type metadata accessor for Date();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v44 = (char *)&v35 - v17;
  v18 = type metadata accessor for Calendar();
  v45 = *(_QWORD *)(v18 - 8);
  v46 = v18;
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(a3 + *(int *)(v21 + 24), 1, 1, v12);
  v41 = v21;
  v22 = a3 + *(int *)(v21 + 20);
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
  v49 = a1;
  v23(v22, a1, v12);
  v47 = v5;
  v48 = a3;
  v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v24 = v40;
  v36(a3, (uint64_t)v50, v40);
  static Calendar.current.getter();
  v25 = v39;
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x24BDCF258], v39);
  DateInterval.start.getter();
  v26 = (uint64_t)v38;
  v43 = v20;
  Calendar.date(byAdding:value:to:wrappingComponents:)();
  v27 = v42;
  v37 = *(void (**)(char *, uint64_t))(v13 + 8);
  v37(v15, v12);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v25);
  v28 = v24;
  v36((uint64_t)v27, (uint64_t)v50, v24);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v26, 1, v12) == 1)
  {
    v29 = v44;
    DateInterval.start.getter();
    v30 = *(void (**)(char *, uint64_t))(v47 + 8);
    v30(v27, v28);
    outlined destroy of Date?(v26);
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v48 + *(int *)(v41 + 28), v29, v12);
  }
  else
  {
    v30 = *(void (**)(char *, uint64_t))(v47 + 8);
    v30(v27, v24);
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 32);
    v32 = v44;
    v31(v44, v26, v12);
    v31((char *)(v48 + *(int *)(v41 + 28)), (uint64_t)v32, v12);
  }
  v33 = v49;
  TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries.makeNext(current:)(v49);
  v30(v50, v28);
  v37((char *)v33, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v43, v46);
}

_QWORD *protocol witness for TimelineSchedule.entries(from:mode:) in conformance TimerIntervalTimelineSchedule@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;

  result = TimerIntervalTimelineSchedule.entries(from:mode:)(a1, a2);
  *a3 = result;
  return result;
}

_QWORD *TimerTimelineSchedule.entries(from:mode:)(uint64_t a1, char *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  char v22;
  void (*v23)(char *, uint64_t, uint64_t, double);
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t);
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;

  v33 = a1;
  v3 = type metadata accessor for TimerTimelineSchedule.ReducedFrequencyEntries(0);
  MEMORY[0x24BDAC7A8](v3);
  v32 = (uint64_t)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v31 - v6;
  v8 = type metadata accessor for Date();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v31 - v13;
  v15 = type metadata accessor for EverySecondEntries(0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)v31 - v20;
  v22 = *a2;
  v23 = *(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16);
  v23(v14, v33, v8, v19);
  if ((v22 & 1) != 0)
  {
    ((void (*)(char *, _QWORD, uint64_t))v23)(v11, v31[1], v8);
    v24 = v32;
    TimerTimelineSchedule.ReducedFrequencyEntries.init(start:alignment:)((uint64_t)v14, (uint64_t)v11, v32);
    type metadata accessor for _SequenceBox<TimerTimelineSchedule.ReducedFrequencyEntries>(0, &lazy cache variable for type metadata for _SequenceBox<TimerTimelineSchedule.ReducedFrequencyEntries>, type metadata accessor for TimerTimelineSchedule.ReducedFrequencyEntries, &lazy protocol witness table cache variable for type TimerTimelineSchedule.ReducedFrequencyEntries and conformance TimerTimelineSchedule.ReducedFrequencyEntries, (uint64_t)&protocol conformance descriptor for TimerTimelineSchedule.ReducedFrequencyEntries);
    v25 = (_QWORD *)swift_allocObject();
    v26 = (uint64_t)v25 + *(_QWORD *)(*MEMORY[0x24BEE26A0] + *v25 + 16);
    v27 = v24;
    v28 = type metadata accessor for TimerTimelineSchedule.ReducedFrequencyEntries;
  }
  else
  {
    v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v29(v7, 1, 1, v8);
    v29(v17, 1, 1, v8);
    outlined destroy of Date?((uint64_t)v17);
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v17, v14, v8);
    v29(v17, 0, 1, v8);
    outlined init with take of Date?((uint64_t)v7, (uint64_t)&v17[*(int *)(v15 + 20)]);
    outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v17, (uint64_t)v21, type metadata accessor for EverySecondEntries);
    type metadata accessor for _SequenceBox<TimerTimelineSchedule.ReducedFrequencyEntries>(0, &lazy cache variable for type metadata for _SequenceBox<EverySecondEntries>, type metadata accessor for EverySecondEntries, &lazy protocol witness table cache variable for type EverySecondEntries and conformance EverySecondEntries, (uint64_t)&protocol conformance descriptor for EverySecondEntries);
    v25 = (_QWORD *)swift_allocObject();
    v26 = (uint64_t)v25 + *(_QWORD *)(*MEMORY[0x24BEE26A0] + *v25 + 16);
    v27 = (uint64_t)v21;
    v28 = type metadata accessor for EverySecondEntries;
  }
  outlined init with take of LocalizedStringKey.FormatArgument(v27, v26, v28);
  return v25;
}

uint64_t TimerTimelineSchedule.ReducedFrequencyEntries.init(start:alignment:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void (*v26)(unint64_t, _QWORD, uint64_t);
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v62 = a2;
  v57 = a1;
  v4 = type metadata accessor for Calendar.SearchDirection();
  v55 = *(_QWORD *)(v4 - 8);
  v56 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v54 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Calendar.RepeatedTimePolicy();
  v52 = *(_QWORD *)(v6 - 8);
  v53 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v50 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Calendar.MatchingPolicy();
  v60 = *(_QWORD *)(v8 - 8);
  v61 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v58 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v10);
  v59 = (uint64_t)&v42 - v11;
  v12 = type metadata accessor for DateComponents();
  v13 = *(_QWORD *)(v12 - 8);
  v44 = v12;
  v45 = v13;
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for Calendar();
  v49 = *(_QWORD *)(v51 - 8);
  MEMORY[0x24BDAC7A8](v51);
  v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Date();
  v19 = *(_QWORD *)(v18 - 8);
  v47 = v18;
  v48 = v19;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(a3, 1, 1, v18);
  static Calendar.current.getter();
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF290], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v20 = type metadata accessor for Calendar.Component();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(_QWORD *)(v21 + 72);
  v23 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_2352828C0;
  v25 = v24 + v23;
  v26 = *(void (**)(unint64_t, _QWORD, uint64_t))(v21 + 104);
  v26(v25, *MEMORY[0x24BDCF260], v20);
  v26(v25 + v22, *MEMORY[0x24BDCF1D8], v20);
  specialized Set.init(_nonEmptyArrayLiteral:)(v24);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  Calendar.dateComponents(_:from:)();
  swift_bridgeObjectRelease();
  v27 = *(int *)(type metadata accessor for TimerTimelineSchedule.ReducedFrequencyEntries(0) + 20);
  v46 = a3;
  v28 = a3 + v27;
  v29 = *(void (**)(uint64_t, char *, uint64_t))(v13 + 16);
  v43 = v15;
  v29(v28, v15, v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v60 + 104))(v58, *MEMORY[0x24BDCF020], v61);
  v31 = v52;
  v30 = v53;
  v32 = v50;
  (*(void (**)(char *, _QWORD, uint64_t))(v52 + 104))(v50, *MEMORY[0x24BDCF0B0], v53);
  v33 = v54;
  v34 = v55;
  v35 = v56;
  (*(void (**)(char *, _QWORD, uint64_t))(v55 + 104))(v54, *MEMORY[0x24BDCF068], v56);
  v36 = v57;
  v37 = v32;
  v38 = v33;
  Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)();
  v39 = v47;
  v40 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
  v40(v62, v47);
  v40(v36, v39);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v38, v35);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v37, v30);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v58, v61);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v43, v44);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v17, v51);
  return outlined assign with take of Date?(v59, v46);
}

_QWORD *protocol witness for TimelineSchedule.entries(from:mode:) in conformance TimerTimelineSchedule@<X0>(uint64_t a1@<X0>, char *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;

  result = TimerTimelineSchedule.entries(from:mode:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t type metadata accessor for TimerTimelineSchedule.ReducedFrequencyEntries(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for TimerTimelineSchedule.ReducedFrequencyEntries);
}

uint64_t type metadata accessor for EverySecondEntries(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for EverySecondEntries);
}

uint64_t outlined init with take of Date?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t EverySecondEntries.next()@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  char v24;
  void (*v25)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v26;
  uint64_t v27;
  char *v28;

  v2 = v1;
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v27 - v8;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v27 - v11;
  v13 = type metadata accessor for Date();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v27 - v18;
  outlined init with copy of Date?(v2, (uint64_t)v12);
  v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v20(v12, 1, v13) == 1)
  {
    outlined destroy of Date?((uint64_t)v12);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(a1, 1, 1, v13);
  }
  v28 = a1;
  v22 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  v22(v19, v12, v13);
  v23 = type metadata accessor for EverySecondEntries(0);
  outlined init with copy of Date?(v2 + *(int *)(v23 + 20), (uint64_t)v9);
  if (v20(v9, 1, v13) == 1)
  {
    outlined destroy of Date?((uint64_t)v9);
  }
  else
  {
    v22(v16, v9, v13);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
    v24 = dispatch thunk of static Comparable.< infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    if ((v24 & 1) == 0)
    {
      outlined destroy of Date?(v2);
      v25 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
      v25(v2, 1, 1, v13);
      goto LABEL_8;
    }
  }
  Date.addingTimeInterval(_:)();
  v25 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  v25((uint64_t)v6, 0, 1, v13);
  outlined assign with take of Date?((uint64_t)v6, v2);
LABEL_8:
  v26 = v28;
  v22(v28, v19, v13);
  return ((uint64_t (*)(char *, _QWORD, uint64_t, uint64_t))v25)(v26, 0, 1, v13);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance EverySecondEntries@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with take of LocalizedStringKey.FormatArgument(v1, a1, type metadata accessor for EverySecondEntries);
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance EverySecondEntries()
{
  return 0;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance EverySecondEntries()
{
  uint64_t v0;
  uint64_t v1;

  v1 = specialized _copySequenceToContiguousArray<A>(_:)(v0);
  outlined destroy of TypesettingConfiguration(v0, type metadata accessor for EverySecondEntries);
  return v1;
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance EverySecondEntries()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries.next()@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, _QWORD, uint64_t);
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  char *v54;
  void (*v55)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v61;
  void (*v62)(uint64_t, char *, uint64_t);
  uint64_t v63;
  char v64;
  uint64_t v65;
  char *v66;
  void (*v67)(uint64_t, char *, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t (*v74)(uint64_t, uint64_t, uint64_t);
  char *v75;
  char *v76;
  void (*v77)(char *, char *, uint64_t);
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;

  v2 = v1;
  v89 = a1;
  v3 = type metadata accessor for Calendar.SearchDirection();
  v84 = *(_QWORD *)(v3 - 8);
  v85 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v83 = (char *)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = type metadata accessor for Calendar.RepeatedTimePolicy();
  v87 = *(_QWORD *)(v79 - 8);
  MEMORY[0x24BDAC7A8](v79);
  v82 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = type metadata accessor for Calendar.MatchingPolicy();
  v88 = *(_QWORD *)(v86 - 8);
  MEMORY[0x24BDAC7A8](v86);
  v78 = (char *)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Calendar();
  v80 = *(_QWORD *)(v7 - 8);
  v81 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v68 - v14;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v68 - v17;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v68 - v20;
  v22 = type metadata accessor for Date();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v68 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v90 = (char *)&v68 - v27;
  v28 = v2;
  outlined init with copy of Date?(v2, (uint64_t)v21);
  v29 = v22;
  v30 = v22;
  v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
  if (v31((uint64_t)v21, 1, v30) == 1)
  {
    outlined destroy of Date?((uint64_t)v21);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v89, 1, 1, v29);
  }
  else
  {
    v73 = v18;
    v74 = v31;
    v72 = v25;
    v75 = v15;
    v76 = v12;
    v33 = v88;
    v77 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v77(v90, v21, v29);
    v34 = type metadata accessor for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries(0);
    v35 = v28;
    v36 = v29;
    v37 = v34;
    v38 = v35;
    v39 = v35 + *(int *)(v34 + 28);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
    if ((dispatch thunk of static Comparable.< infix(_:_:)() & 1) != 0)
    {
      v69 = v39;
      v70 = v23;
      v40 = v9;
      static Calendar.current.getter();
      v41 = *(int *)(v37 + 24);
      v71 = v38;
      v73 = (char *)(v38 + v41);
      v42 = *(void (**)(char *, _QWORD, uint64_t))(v33 + 104);
      v43 = v78;
      v42(v78, *MEMORY[0x24BDCF020], v86);
      v44 = v82;
      v45 = v79;
      (*(void (**)(char *, _QWORD, uint64_t))(v87 + 104))(v82, *MEMORY[0x24BDCF0B0], v79);
      v47 = v83;
      v46 = v84;
      v48 = v85;
      (*(void (**)(char *, _QWORD, uint64_t))(v84 + 104))(v83, *MEMORY[0x24BDCF068], v85);
      v49 = (uint64_t)v75;
      v50 = v90;
      Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)();
      (*(void (**)(char *, uint64_t))(v46 + 8))(v47, v48);
      (*(void (**)(char *, uint64_t))(v87 + 8))(v44, v45);
      (*(void (**)(char *, uint64_t))(v88 + 8))(v43, v86);
      (*(void (**)(char *, uint64_t))(v80 + 8))(v40, v81);
      v51 = (uint64_t)v76;
      outlined init with copy of Date?(v49, (uint64_t)v76);
      v52 = v74(v51, 1, v36);
      v53 = v71;
      v54 = v50;
      if (v52 == 1)
      {
        outlined destroy of Date?(v49);
        outlined destroy of Date?(v51);
        outlined destroy of Date?(v53);
        v55 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v70 + 56);
        v55(v53, 1, 1, v36);
        v56 = v89;
        v77(v89, v54, v36);
      }
      else
      {
        v61 = v72;
        v62 = (void (*)(uint64_t, char *, uint64_t))v77;
        v77(v72, (char *)v51, v36);
        v63 = v69;
        v64 = static Date.> infix(_:_:)();
        outlined destroy of Date?(v49);
        v56 = v89;
        v65 = v70;
        if ((v64 & 1) != 0)
        {
          (*(void (**)(char *, uint64_t))(v70 + 8))(v61, v36);
          outlined destroy of Date?(v53);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 16))(v53, v63, v36);
        }
        else
        {
          outlined destroy of Date?(v53);
          v62(v53, v61, v36);
        }
        v55 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v65 + 56);
        v55(v53, 0, 1, v36);
        v62((uint64_t)v56, v54, v36);
      }
      return ((uint64_t (*)(char *, _QWORD, uint64_t, uint64_t))v55)(v56, 0, 1, v36);
    }
    else
    {
      v57 = v90;
      v58 = v38;
      if ((dispatch thunk of static Comparable.< infix(_:_:)() & 1) != 0)
      {
        v59 = (uint64_t)v73;
        Date.addingTimeInterval(_:)();
        v60 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56);
        v60(v59, 0, 1, v36);
      }
      else
      {
        v60 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56);
        v59 = (uint64_t)v73;
        v60((uint64_t)v73, 1, 1, v36);
      }
      v66 = v89;
      v67 = (void (*)(uint64_t, char *, uint64_t))v77;
      outlined assign with take of Date?(v59, v58);
      v67((uint64_t)v66, v57, v36);
      return ((uint64_t (*)(char *, _QWORD, uint64_t, uint64_t))v60)(v66, 0, 1, v36);
    }
  }
}

uint64_t protocol witness for Sequence.makeIterator() in conformance TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with take of LocalizedStringKey.FormatArgument(v1, a1, type metadata accessor for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries()
{
  uint64_t v0;
  uint64_t v1;

  v1 = specialized _copySequenceToContiguousArray<A>(_:)(v0);
  outlined destroy of TypesettingConfiguration(v0, type metadata accessor for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries);
  return v1;
}

uint64_t TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries.makeNext(current:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void (*v37)(unint64_t, _QWORD, uint64_t);
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t, uint64_t);
  char *v57;
  char *v58;
  uint64_t v59;
  char v60;
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t);
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;

  v2 = v1;
  v4 = type metadata accessor for Calendar.SearchDirection();
  v77 = *(_QWORD *)(v4 - 8);
  v78 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v76 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Calendar.RepeatedTimePolicy();
  v74 = *(_QWORD *)(v6 - 8);
  v75 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v73 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = type metadata accessor for Calendar.MatchingPolicy();
  v8 = *(_QWORD *)(v72 - 8);
  MEMORY[0x24BDAC7A8](v72);
  v10 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date();
  v12 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
  v13 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v84 = (char *)&v64 - v17;
  v18 = type metadata accessor for DateComponents();
  v80 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v88 = (char *)&v64 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = type metadata accessor for Calendar();
  v79 = *(_QWORD *)(v81 - 8);
  MEMORY[0x24BDAC7A8](v81);
  v87 = (char *)&v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, v12, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v21);
  v71 = (uint64_t)&v64 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v85 = (uint64_t)&v64 - v24;
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)&v64 - v26;
  v28 = type metadata accessor for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries(0);
  v86 = a1;
  if ((static Date.< infix(_:_:)() & 1) != 0)
  {
    Date.addingTimeInterval(_:)();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v27, 0, 1, v11);
    return outlined assign with take of Date?((uint64_t)v27, v2 + *(int *)(v28 + 24));
  }
  v69 = v28;
  v70 = v18;
  v66 = v15;
  static Calendar.current.getter();
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF290], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v30 = type metadata accessor for Calendar.Component();
  v82 = v13;
  v83 = v11;
  v31 = *(_QWORD *)(v30 - 8);
  v32 = v2;
  v33 = *(_QWORD *)(v31 + 72);
  v34 = (*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
  v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_2352828C0;
  v36 = v35 + v34;
  v37 = *(void (**)(unint64_t, _QWORD, uint64_t))(v31 + 104);
  v37(v36, *MEMORY[0x24BDCF260], v30);
  v37(v36 + v33, *MEMORY[0x24BDCF1D8], v30);
  specialized Set.init(_nonEmptyArrayLiteral:)(v35);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  v38 = v84;
  v68 = v32;
  DateInterval.start.getter();
  Calendar.dateComponents(_:from:)();
  swift_bridgeObjectRelease();
  v65 = *(void (**)(char *, uint64_t))(v82 + 8);
  v65(v38, v83);
  v39 = *MEMORY[0x24BDCF020];
  v67 = v8;
  v40 = v10;
  v41 = v10;
  v42 = v72;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 104))(v41, v39, v72);
  v44 = v73;
  v43 = v74;
  v45 = v75;
  (*(void (**)(char *, _QWORD, uint64_t))(v74 + 104))(v73, *MEMORY[0x24BDCF0B0], v75);
  v47 = v76;
  v46 = v77;
  v48 = v78;
  (*(void (**)(char *, _QWORD, uint64_t))(v77 + 104))(v76, *MEMORY[0x24BDCF068], v78);
  v49 = v85;
  Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)();
  v50 = v47;
  v51 = v48;
  v53 = v82;
  v52 = v83;
  (*(void (**)(char *, uint64_t))(v46 + 8))(v50, v51);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v44, v45);
  (*(void (**)(char *, uint64_t))(v67 + 8))(v40, v42);
  v54 = v71;
  outlined init with copy of Date?(v49, v71);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v54, 1, v52) == 1)
  {
    outlined destroy of Date?(v85);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v88, v70);
    (*(void (**)(char *, uint64_t))(v79 + 8))(v87, v81);
    outlined destroy of Date?(v54);
    v55 = v68 + *(int *)(v69 + 24);
LABEL_7:
    outlined destroy of Date?(v55);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 56))(v55, 1, 1, v52);
  }
  v56 = *(void (**)(char *, uint64_t, uint64_t))(v53 + 32);
  v57 = v66;
  v56(v66, v54, v52);
  v58 = v84;
  v59 = v68;
  DateInterval.end.getter();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
  v60 = dispatch thunk of static Comparable.< infix(_:_:)();
  v61 = v65;
  v65(v58, v52);
  outlined destroy of Date?(v85);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v88, v70);
  (*(void (**)(char *, uint64_t))(v79 + 8))(v87, v81);
  v62 = v69;
  if ((v60 & 1) != 0)
  {
    v61(v57, v52);
    v55 = v59 + *(int *)(v62 + 24);
    goto LABEL_7;
  }
  v63 = v59 + *(int *)(v69 + 24);
  outlined destroy of Date?(v63);
  v56((char *)v63, (uint64_t)v57, v52);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v53 + 56))(v63, 0, 1, v52);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with take of LocalizedStringKey.FormatArgument(v1, a1, type metadata accessor for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries()
{
  uint64_t v0;
  uint64_t v1;

  v1 = specialized _copySequenceToContiguousArray<A>(_:)(v0);
  outlined destroy of TypesettingConfiguration(v0, type metadata accessor for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries);
  return v1;
}

uint64_t protocol witness for IteratorProtocol.next() in conformance TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v14 - v6;
  v8 = type metadata accessor for Date();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = v2 + *(int *)(a1 + 24);
  outlined init with copy of Date?(v12, (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    outlined destroy of Date?((uint64_t)v7);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a2, 1, 1, v8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
    outlined init with copy of Date?(v12, a2);
    TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries.makeNext(current:)((uint64_t)v11);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
}

uint64_t TimerTimelineSchedule.ReducedFrequencyEntries.next()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, char *, uint64_t);
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v2 = v1;
  v44 = a1;
  v3 = type metadata accessor for Calendar.SearchDirection();
  v40 = *(_QWORD *)(v3 - 8);
  v41 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Calendar.RepeatedTimePolicy();
  v38 = *(_QWORD *)(v6 - 8);
  v39 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Calendar.MatchingPolicy();
  v42 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Calendar();
  v37 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v33 - v19;
  outlined init with copy of Date?(v2, (uint64_t)&v33 - v19);
  v21 = type metadata accessor for Date();
  v43 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v20, 1, v21) == 1)
  {
    outlined destroy of Date?((uint64_t)v20);
    v22 = 1;
  }
  else
  {
    v23 = *(void (**)(uint64_t, char *, uint64_t))(v43 + 32);
    v35 = v2;
    v36 = v12;
    v23(v44, v20, v21);
    v24 = v14;
    static Calendar.current.getter();
    v33 = v2 + *(int *)(type metadata accessor for TimerTimelineSchedule.ReducedFrequencyEntries(0) + 20);
    v25 = v11;
    (*(void (**)(char *, _QWORD, uint64_t))(v42 + 104))(v11, *MEMORY[0x24BDCF020], v9);
    v26 = *MEMORY[0x24BDCF0B0];
    v34 = v9;
    v28 = v38;
    v27 = v39;
    (*(void (**)(char *, uint64_t, uint64_t))(v38 + 104))(v8, v26, v39);
    v29 = v5;
    v30 = v40;
    v31 = v41;
    (*(void (**)(char *, _QWORD, uint64_t))(v40 + 104))(v29, *MEMORY[0x24BDCF068], v41);
    Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v29, v31);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v8, v27);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v25, v34);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v24, v36);
    outlined assign with take of Date?((uint64_t)v17, v35);
    v22 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56))(v44, v22, 1, v21);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance TimerTimelineSchedule.ReducedFrequencyEntries@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with take of LocalizedStringKey.FormatArgument(v1, a1, type metadata accessor for TimerTimelineSchedule.ReducedFrequencyEntries);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance TimerTimelineSchedule.ReducedFrequencyEntries()
{
  uint64_t v0;
  uint64_t v1;

  v1 = specialized _copySequenceToContiguousArray<A>(_:)(v0);
  outlined destroy of TypesettingConfiguration(v0, type metadata accessor for TimerTimelineSchedule.ReducedFrequencyEntries);
  return v1;
}

uint64_t type metadata accessor for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries);
}

uint64_t type metadata accessor for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries);
}

uint64_t type metadata accessor for TimerTimelineSchedule(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata accessor for _SequenceBox<TimerTimelineSchedule.ReducedFrequencyEntries>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    a3(255);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(a4, a3, a5);
    v9 = type metadata accessor for _SequenceBox();
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t outlined init with copy of Date?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t *initializeBufferWithCopyOfBuffer for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Date();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      v10 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16);
    }
    else
    {
      v10 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16);
      v10(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v10((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = type metadata accessor for DateComponents();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v10((uint64_t *)((char *)a1 + a3[7]), (uint64_t *)((char *)a2 + a3[7]), v7);
  }
  return a1;
}

uint64_t destroy for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void (*v10)(uint64_t, uint64_t);

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4);
  v10 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  if (!v6)
    v10(a1, v4);
  v10(a1 + a2[5], v4);
  v7 = a1 + a2[6];
  v8 = type metadata accessor for DateComponents();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  return ((uint64_t (*)(uint64_t, uint64_t))v10)(a1 + a2[7], v4);
}

char *initializeWithCopy for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    v9 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  }
  else
  {
    v9 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v9(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9(&a1[a3[5]], &a2[a3[5]], v6);
  v10 = a3[6];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for DateComponents();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  v9(&a1[a3[7]], &a2[a3[7]], v6);
  return a1;
}

char *assignWithCopy for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = *(void (**)(char *, char *, uint64_t))(v7 + 24);
  v12(&a1[a3[5]], &a2[a3[5]], v6);
  v13 = a3[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = type metadata accessor for DateComponents();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 24))(v14, v15, v16);
  v12(&a1[a3[7]], &a2[a3[7]], v6);
  return a1;
}

char *initializeWithTake for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    v9 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  }
  else
  {
    v9 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v9(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9(&a1[a3[5]], &a2[a3[5]], v6);
  v10 = a3[6];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for DateComponents();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  v9(&a1[a3[7]], &a2[a3[7]], v6);
  return a1;
}

char *assignWithTake for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = *(void (**)(char *, char *, uint64_t))(v7 + 40);
  v12(&a1[a3[5]], &a2[a3[5]], v6);
  v13 = a3[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = type metadata accessor for DateComponents();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 40))(v14, v15, v16);
  v12(&a1[a3[7]], &a2[a3[7]], v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_234AAC690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = type metadata accessor for Date();
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = type metadata accessor for DateComponents();
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_234AAC74C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = type metadata accessor for Date();
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = type metadata accessor for DateComponents();
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for [(_:)](319, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date();
    if (v1 <= 0x3F)
    {
      type metadata accessor for DateComponents();
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

char *initializeBufferWithCopyOfBuffer for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for DateInterval();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = &a2[v8];
    v11 = type metadata accessor for Date();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    v13(v9, v10, v11);
    v14 = a3[6];
    v15 = &a1[v14];
    v16 = &a2[v14];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(&a2[v14], 1, v11))
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v13(v15, v16, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v15, 0, 1, v11);
    }
    v13(&a1[a3[7]], &a2[a3[7]], v11);
  }
  return a1;
}

uint64_t destroy for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v10)(uint64_t, uint64_t);

  v4 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v10(v5, v6);
  v8 = a1 + a2[6];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v8, 1, v6))
    v10(v8, v6);
  return ((uint64_t (*)(uint64_t, uint64_t))v10)(a1 + a2[7], v6);
}

uint64_t initializeWithCopy for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void *, const void *, uint64_t);
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;

  v6 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for Date();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(void *, const void *, uint64_t))(v11 + 16);
  v12(v8, v9, v10);
  v13 = a3[6];
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a2 + v13, 1, v10))
  {
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v12(v14, v15, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
  }
  v12((void *)(a1 + a3[7]), (const void *)(a2 + a3[7]), v10);
  return a1;
}

uint64_t assignWithCopy for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void *, const void *, uint64_t);
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t (*v16)(const void *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;

  v6 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for Date();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(void *, const void *, uint64_t))(v11 + 24);
  v12(v8, v9, v10);
  v13 = a3[6];
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  v16 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  v17 = v16((const void *)(a1 + v13), 1, v10);
  v18 = v16(v15, 1, v10);
  if (!v17)
  {
    if (!v18)
    {
      v12(v14, v15, v10);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v14, v10);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v14, v15, v10);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
LABEL_7:
  v12((void *)(a1 + a3[7]), (const void *)(a2 + a3[7]), v10);
  return a1;
}

uint64_t initializeWithTake for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void *, const void *, uint64_t);
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;

  v6 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for Date();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(void *, const void *, uint64_t))(v11 + 32);
  v12(v8, v9, v10);
  v13 = a3[6];
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a2 + v13, 1, v10))
  {
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v12(v14, v15, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
  }
  v12((void *)(a1 + a3[7]), (const void *)(a2 + a3[7]), v10);
  return a1;
}

uint64_t assignWithTake for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void *, const void *, uint64_t);
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t (*v16)(const void *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;

  v6 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for Date();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(void *, const void *, uint64_t))(v11 + 40);
  v12(v8, v9, v10);
  v13 = a3[6];
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  v16 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  v17 = v16((const void *)(a1 + v13), 1, v10);
  v18 = v16(v15, 1, v10);
  if (!v17)
  {
    if (!v18)
    {
      v12(v14, v15, v10);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v14, v10);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v14, v15, v10);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
LABEL_7:
  v12((void *)(a1 + a3[7]), (const void *)(a2 + a3[7]), v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_234AAD014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for DateInterval();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = type metadata accessor for Date();
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v8 = v14;
      v12 = *(_QWORD *)(v14 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_234AAD0D0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = type metadata accessor for DateInterval();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = type metadata accessor for Date();
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v10 = v16;
      v14 = *(_QWORD *)(v16 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for DateInterval();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date();
    if (v1 <= 0x3F)
    {
      type metadata accessor for [(_:)](319, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for EverySecondEntries(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Date();
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48);
    if (v9(a2, 1, v7))
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v12 = *(int *)(a3 + 20);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    if (v9((uint64_t *)v14, 1, v7))
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v13, v14, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v13, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for EverySecondEntries(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t result;

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v6(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v7 = a1 + *(int *)(a2 + 20);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(v7, 1, v4);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v4);
  return result;
}

char *initializeWithCopy for EverySecondEntries(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v10 = *(int *)(a3 + 20);
  v11 = &a1[v10];
  v12 = &a2[v10];
  if (v8(v12, 1, v6))
  {
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v12, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  return a1;
}

char *assignWithCopy for EverySecondEntries(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int v15;
  int v16;
  uint64_t v17;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = v8(&a1[v12], 1, v6);
  v16 = v8(v14, 1, v6);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(v13, v14, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    goto LABEL_12;
  }
  if (v16)
  {
LABEL_12:
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v13, v14, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
  return a1;
}

char *initializeWithTake for EverySecondEntries(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v10 = *(int *)(a3 + 20);
  v11 = &a1[v10];
  v12 = &a2[v10];
  if (v8(v12, 1, v6))
  {
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v11, v12, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  return a1;
}

char *assignWithTake for EverySecondEntries(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int v15;
  int v16;
  uint64_t v17;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = v8(&a1[v12], 1, v6);
  v16 = v8(v14, 1, v6);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v13, v14, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    goto LABEL_12;
  }
  if (v16)
  {
LABEL_12:
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v13, v14, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for EverySecondEntries()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_234AADAA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for EverySecondEntries()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_234AADB04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void type metadata completion function for EverySecondEntries()
{
  unint64_t v0;

  type metadata accessor for [(_:)](319, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t *initializeBufferWithCopyOfBuffer for TimerTimelineSchedule.ReducedFrequencyEntries(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Date();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = *(int *)(a3 + 20);
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for DateComponents();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  }
  return a1;
}

uint64_t destroy for TimerTimelineSchedule.ReducedFrequencyEntries(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v6 = a1 + *(int *)(a2 + 20);
  v7 = type metadata accessor for DateComponents();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

char *initializeWithCopy for TimerTimelineSchedule.ReducedFrequencyEntries(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = type metadata accessor for DateComponents();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  return a1;
}

char *assignWithCopy for TimerTimelineSchedule.ReducedFrequencyEntries(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for DateComponents();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  return a1;
}

char *initializeWithTake for TimerTimelineSchedule.ReducedFrequencyEntries(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = type metadata accessor for DateComponents();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  return a1;
}

char *assignWithTake for TimerTimelineSchedule.ReducedFrequencyEntries(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for DateComponents();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for TimerTimelineSchedule.ReducedFrequencyEntries()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_234AAE1DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for DateComponents();
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for TimerTimelineSchedule.ReducedFrequencyEntries()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_234AAE274(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for DateComponents();
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for TimerTimelineSchedule.ReducedFrequencyEntries()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for [(_:)](319, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for DateComponents();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries and conformance TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries, type metadata accessor for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries, (uint64_t)&protocol conformance descriptor for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries and conformance TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries, type metadata accessor for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries, (uint64_t)&protocol conformance descriptor for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in EverySecondEntries()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type EverySecondEntries and conformance EverySecondEntries, type metadata accessor for EverySecondEntries, (uint64_t)&protocol conformance descriptor for EverySecondEntries);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in TimerTimelineSchedule.ReducedFrequencyEntries()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type TimerTimelineSchedule.ReducedFrequencyEntries and conformance TimerTimelineSchedule.ReducedFrequencyEntries, type metadata accessor for TimerTimelineSchedule.ReducedFrequencyEntries, (uint64_t)&protocol conformance descriptor for TimerTimelineSchedule.ReducedFrequencyEntries);
}

uint64_t specialized _ViewInputs.subscript.getter@<X0>(_DWORD *a1@<X8>)
{
  _OWORD *v1;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _OWORD v8[3];
  uint64_t v9;

  v3 = v1[1];
  v8[0] = *v1;
  v8[1] = v3;
  v8[2] = v1[2];
  v4 = *(_QWORD *)&v8[0];
  v9 = *(_QWORD *)&v8[0];
  outlined retain of _GraphInputs((uint64_t)v8);
  outlined retain of ViewTransform((uint64_t)&v9);
  v5 = specialized find<A>(_:key:)(v4);
  if (v5)
    v6 = *(_DWORD *)(v5 + 72);
  else
    v6 = 0;
  *a1 = v6;
  outlined release of ViewTransform((uint64_t)&v9);
  return outlined release of _GraphInputs((uint64_t)v8);
}

uint64_t specialized _ViewInputs.subscript.getter@<X0>(_BYTE *a1@<X8>)
{
  _OWORD *v1;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  _OWORD v9[3];
  uint64_t v10;

  v3 = v1[1];
  v9[0] = *v1;
  v9[1] = v3;
  v9[2] = v1[2];
  v4 = *(_QWORD *)&v9[0];
  v10 = *(_QWORD *)&v9[0];
  outlined retain of _GraphInputs((uint64_t)v9);
  outlined retain of ViewTransform((uint64_t)&v10);
  v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    v6 = *(_BYTE *)(v5 + 72);
    v7 = *(_BYTE *)(v5 + 73);
  }
  else
  {
    v6 = 0;
    v7 = 2;
  }
  *a1 = v6;
  a1[1] = v7;
  outlined release of ViewTransform((uint64_t)&v10);
  return outlined release of _GraphInputs((uint64_t)v9);
}

unint64_t specialized _ViewInputs.subscript.getter()
{
  _OWORD *v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _OWORD v7[3];
  uint64_t v8;

  v1 = v0[1];
  v7[0] = *v0;
  v7[1] = v1;
  v7[2] = v0[2];
  v2 = *(_QWORD *)&v7[0];
  v8 = *(_QWORD *)&v7[0];
  outlined retain of _GraphInputs((uint64_t)v7);
  outlined retain of ViewTransform((uint64_t)&v8);
  v3 = specialized find<A>(_:key:)(v2);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 + 72);
    v5 = (unint64_t)*(unsigned int *)(v3 + 76) << 32;
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  outlined release of ViewTransform((uint64_t)&v8);
  outlined release of _GraphInputs((uint64_t)v7);
  return v5 | v4;
}

uint64_t specialized _ViewInputs.subscript.getter()
{
  _OWORD *v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD v9[3];
  uint64_t v10;

  v1 = v0[1];
  v9[0] = *v0;
  v9[1] = v1;
  v9[2] = v0[2];
  v2 = *(_QWORD *)&v9[0];
  v10 = *(_QWORD *)&v9[0];
  outlined retain of _GraphInputs((uint64_t)v9);
  outlined retain of ViewTransform((uint64_t)&v10);
  v3 = specialized find<A>(_:key:)(v2);
  if (v3)
  {
    v4 = (uint64_t *)(v3 + 72);
    v5 = (unsigned int *)(v3 + 76);
  }
  else
  {
    v4 = &static _DisplayList_StableIdentityScope.defaultValue;
    v5 = (unsigned int *)&static _DisplayList_StableIdentityScope.defaultValue + 1;
    if (one-time initialization token for defaultValue != -1)
      swift_once();
  }
  v6 = *(unsigned int *)v4;
  v7 = *v5;
  outlined release of ViewTransform((uint64_t)&v10);
  outlined release of _GraphInputs((uint64_t)v9);
  return v6 | (v7 << 32);
}

void (*Image.Resolved.image.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *a1 = v1;
  return Image.Resolved.image.modify;
}

void Image.Resolved.image.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
    Image.Resolved.image.didset();
}

Swift::Int specialized MutableCollection<>.sort(by:)(char **a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  Swift::Int result;
  _QWORD v7[2];

  v4 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
  v5 = *((_QWORD *)v4 + 2);
  v7[0] = v4 + 32;
  v7[1] = v5;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)((uint64_t)v7, a2);
  *a1 = v4;
  return result;
}

double Image.LayoutMetrics.baselineOffset.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void Image.LayoutMetrics.baselineOffset.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*Image.LayoutMetrics.baselineOffset.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double Image.LayoutMetrics.capHeight.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void Image.LayoutMetrics.capHeight.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

uint64_t (*Image.LayoutMetrics.capHeight.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double Image.LayoutMetrics.contentSize.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void Image.LayoutMetrics.contentSize.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 16) = a1;
  *(double *)(v2 + 24) = a2;
}

uint64_t (*Image.LayoutMetrics.contentSize.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double Image.LayoutMetrics.alignmentOrigin.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

void Image.LayoutMetrics.alignmentOrigin.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 32) = a1;
  *(double *)(v2 + 40) = a2;
}

uint64_t (*Image.LayoutMetrics.alignmentOrigin.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double Image.LayoutMetrics.backgroundSize.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 48);
}

void Image.LayoutMetrics.backgroundSize.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 48) = a1;
  *(double *)(v2 + 56) = a2;
}

uint64_t (*Image.LayoutMetrics.backgroundSize.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void Image.LayoutMetrics.init(baselineOffset:capHeight:contentSize:alignmentOrigin:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>, double a7@<D5>)
{
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 24) = a5;
  *(double *)(a1 + 32) = a6;
  *(double *)(a1 + 40) = a7;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
}

id Image.Resolved.image.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  char v7;
  __int16 v8;
  char v9;
  __int128 v10;

  v2 = *(void **)v1;
  v3 = *(_QWORD *)(v1 + 32);
  v4 = *(_BYTE *)(v1 + 40);
  v5 = *(_BYTE *)(v1 + 60);
  v6 = *(_BYTE *)(v1 + 96);
  v7 = *(_BYTE *)(v1 + 97);
  v8 = *(_WORD *)(v1 + 98);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  v9 = *(_BYTE *)(v1 + 8);
  *(_BYTE *)(a1 + 8) = v9;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(a1 + 32) = v3;
  *(_BYTE *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 44) = *(_OWORD *)(v1 + 44);
  *(_BYTE *)(a1 + 60) = v5;
  v10 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(a1 + 80) = v10;
  *(_BYTE *)(a1 + 96) = v6;
  *(_BYTE *)(a1 + 97) = v7;
  *(_WORD *)(a1 + 98) = v8;
  return outlined copy of GraphicsImage.Contents?(v2, v9);
}

id key path getter for Image.Resolved.image : Image.Resolved@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  char v7;
  __int16 v8;
  char v9;
  __int128 v10;

  v2 = *(void **)a1;
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_BYTE *)(a1 + 40);
  v5 = *(_BYTE *)(a1 + 60);
  v6 = *(_BYTE *)(a1 + 96);
  v7 = *(_BYTE *)(a1 + 97);
  v8 = *(_WORD *)(a1 + 98);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a2 + 8) = v9;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 32) = v3;
  *(_BYTE *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 44) = *(_OWORD *)(a1 + 44);
  *(_BYTE *)(a2 + 60) = v5;
  v10 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v10;
  *(_BYTE *)(a2 + 96) = v6;
  *(_BYTE *)(a2 + 97) = v7;
  *(_WORD *)(a2 + 98) = v8;
  return outlined copy of GraphicsImage.Contents?(v2, v9);
}

void key path setter for Image.Resolved.image : Image.Resolved(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  void *v10;
  char v11;
  char v12;
  __int16 v13;
  char v14;
  char v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;

  v3 = *(id *)a1;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_BYTE *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 44);
  v7 = *(_QWORD *)(a1 + 52);
  v8 = *(_BYTE *)(a1 + 60);
  v17 = *(_OWORD *)(a1 + 64);
  v18 = *(_OWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 80);
  v16 = *(_QWORD *)(a1 + 88);
  v14 = *(_BYTE *)(a1 + 97);
  v15 = *(_BYTE *)(a1 + 96);
  v13 = *(_WORD *)(a1 + 98);
  v10 = *(void **)a2;
  v11 = *(_BYTE *)(a1 + 8);
  v12 = *(_BYTE *)(a2 + 8);
  outlined copy of GraphicsImage.Contents?(*(id *)a1, v11);
  outlined consume of GraphicsImage.Contents?(v10, v12);
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v11;
  *(_OWORD *)(a2 + 16) = v18;
  *(_QWORD *)(a2 + 32) = v4;
  *(_BYTE *)(a2 + 40) = v5;
  *(_QWORD *)(a2 + 44) = v6;
  *(_QWORD *)(a2 + 52) = v7;
  *(_BYTE *)(a2 + 60) = v8;
  *(_OWORD *)(a2 + 64) = v17;
  *(_QWORD *)(a2 + 80) = v9;
  *(_QWORD *)(a2 + 88) = v16;
  *(_BYTE *)(a2 + 96) = v15;
  *(_BYTE *)(a2 + 97) = v14;
  *(_WORD *)(a2 + 98) = v13;
  Image.Resolved.image.didset();
}

void Image.Resolved.image.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int16 v12;
  char v13;
  __int128 v14;
  __int128 v15;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  v4 = a1[4];
  v5 = *((_BYTE *)a1 + 40);
  v6 = *(uint64_t *)((char *)a1 + 44);
  v7 = *(uint64_t *)((char *)a1 + 52);
  v8 = *((_BYTE *)a1 + 60);
  v14 = *((_OWORD *)a1 + 4);
  v15 = *((_OWORD *)a1 + 1);
  v9 = a1[10];
  v10 = a1[11];
  v11 = *((_BYTE *)a1 + 96);
  v12 = *((_WORD *)a1 + 49);
  v13 = *((_BYTE *)a1 + 97);
  outlined consume of GraphicsImage.Contents?(*(void **)v1, *(_BYTE *)(v1 + 8));
  *(_QWORD *)v1 = v2;
  *(_BYTE *)(v1 + 8) = v3;
  *(_OWORD *)(v1 + 16) = v15;
  *(_QWORD *)(v1 + 32) = v4;
  *(_BYTE *)(v1 + 40) = v5;
  *(_QWORD *)(v1 + 44) = v6;
  *(_QWORD *)(v1 + 52) = v7;
  *(_BYTE *)(v1 + 60) = v8;
  *(_OWORD *)(v1 + 64) = v14;
  *(_QWORD *)(v1 + 80) = v9;
  *(_QWORD *)(v1 + 88) = v10;
  *(_BYTE *)(v1 + 96) = v11;
  *(_BYTE *)(v1 + 97) = v13;
  *(_WORD *)(v1 + 98) = v12;
  Image.Resolved.image.didset();
}

void Image.Resolved.image.didset()
{
  uint64_t v0;
  char v1;
  int v2;
  void *v3;
  id v4;
  id v5;
  __int16 v6;
  uint64_t v7;
  __int16 v8;
  char v9;
  char v10;
  __int16 v11;
  void *v12;
  uint64_t v13;
  __int16 v14;
  char v15;

  v1 = *(_BYTE *)(v0 + 178);
  v2 = *(unsigned __int8 *)(v0 + 8);
  if (v2 == 255)
  {
    v11 = 0;
    goto LABEL_7;
  }
  if (v2 != 2)
  {
    v11 = *(unsigned __int8 *)(v0 + 60) ^ 1;
LABEL_7:

    v9 = 0;
    *(_QWORD *)(v0 + 168) = 0;
    *(_WORD *)(v0 + 176) = v11;
    if ((v1 & 2) != 0)
      goto LABEL_4;
LABEL_8:
    v10 = v9 & 0xFD;
    goto LABEL_9;
  }
  v3 = *(void **)(*(_QWORD *)v0 + 32);
  v4 = *(id *)(*(_QWORD *)v0 + 16);
  outlined copy of Image.Location(v3);
  v5 = v4;
  outlined copy of Image.Location(v3);
  v6 = (unsigned __int16)objc_msgSend(v5, sel_styleMask);
  v12 = v3;
  outlined copy of Image.Location(v3);
  _ShapeStyle_ResolverMode.init(rbSymbolStyleMask:location:)(v6, &v12, (uint64_t)&v13);

  outlined consume of Image.Location(v3);
  outlined consume of Image.Location(v3);
  v7 = v13;
  v8 = v14;
  v9 = v15;

  *(_QWORD *)(v0 + 168) = v7;
  *(_WORD *)(v0 + 176) = v8;
  if ((v1 & 2) == 0)
    goto LABEL_8;
LABEL_4:
  v10 = v9 | 2;
LABEL_9:
  *(_BYTE *)(v0 + 178) = v10;
}

uint64_t Image.Resolved.label.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v1[13];
  v3 = v1[14];
  v4 = v1[15];
  v5 = v1[16];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of AccessibilityImageLabel?(v2, v3, v4);
}

__n128 Image.Resolved.label.setter(__n128 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  __n128 v5;

  v5 = *a1;
  v2 = a1[1].n128_i64[0];
  v3 = a1[1].n128_i64[1];
  outlined consume of AccessibilityImageLabel?(v1[13], v1[14], v1[15]);
  result = v5;
  *(__n128 *)(v1 + 13) = v5;
  v1[15] = v2;
  v1[16] = v3;
  return result;
}

uint64_t (*Image.Resolved.label.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t property wrapper backing initializer of Image.Resolved.basePlatformItemImage@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t Image.Resolved.basePlatformItemImage.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t Image.Resolved.basePlatformItemImage.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_unknownObjectRelease();
  *(_QWORD *)(v1 + 136) = a1;
  return result;
}

uint64_t (*Image.Resolved.basePlatformItemImage.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t property wrapper backing initializer of Image.Resolved.layoutMetrics@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if ((a1[4] & 1) != 0)
  {
    result = 0;
  }
  else
  {
    v5 = *((_QWORD *)a1 + 6);
    v4 = *((_QWORD *)a1 + 7);
    v7 = a1[1];
    v8 = a1[2];
    v6 = *a1;
    result = swift_allocObject();
    *(_OWORD *)(result + 16) = v6;
    *(_OWORD *)(result + 32) = v7;
    *(_OWORD *)(result + 48) = v8;
    *(_QWORD *)(result + 64) = v5;
    *(_QWORD *)(result + 72) = v4;
  }
  *a2 = result;
  return result;
}

void Image.Resolved.layoutMetrics.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  _OWORD *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD **)(v1 + 144);
  if (v2)
  {
    v3 = v2[3];
    v4 = v2[4];
    v5 = v2[2];
    *(_OWORD *)a1 = v2[1];
  }
  else
  {
    v5 = 0uLL;
    *(_OWORD *)a1 = 0u;
    v3 = 0uLL;
    v4 = 0uLL;
  }
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(_BYTE *)(a1 + 64) = v2 == 0;
}

uint64_t key path getter for Image.Resolved.layoutMetrics : Image.Resolved@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  _OWORD *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v2 = *(_OWORD **)(result + 144);
  if (v2)
  {
    v3 = v2[1];
    v4 = v2[2];
    v5 = v2[3];
    v6 = v2[4];
  }
  else
  {
    v3 = 0uLL;
    v4 = 0uLL;
    v5 = 0uLL;
    v6 = 0uLL;
  }
  *(_OWORD *)a2 = v3;
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(_OWORD *)(a2 + 48) = v6;
  *(_BYTE *)(a2 + 64) = v2 == 0;
  return result;
}

_QWORD *key path setter for Image.Resolved.layoutMetrics : Image.Resolved(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *result;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  v7 = a1[4];
  v8 = a1[5];
  v9 = a1[6];
  v10 = a1[7];
  v11 = *((_BYTE *)a1 + 64);
  swift_release();
  if ((v11 & 1) != 0)
  {
    result = 0;
  }
  else
  {
    result = (_QWORD *)swift_allocObject();
    result[2] = v3;
    result[3] = v4;
    result[4] = v5;
    result[5] = v6;
    result[6] = v7;
    result[7] = v8;
    result[8] = v9;
    result[9] = v10;
  }
  *(_QWORD *)(a2 + 144) = result;
  return result;
}

_QWORD *Image.Resolved.layoutMetrics.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD *result;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  v8 = a1[6];
  v9 = a1[7];
  v10 = *((_BYTE *)a1 + 64);
  swift_release();
  if ((v10 & 1) != 0)
  {
    result = 0;
  }
  else
  {
    result = (_QWORD *)swift_allocObject();
    result[2] = v2;
    result[3] = v3;
    result[4] = v4;
    result[5] = v5;
    result[6] = v6;
    result[7] = v7;
    result[8] = v8;
    result[9] = v9;
  }
  *(_QWORD *)(v1 + 144) = result;
  return result;
}

void (*Image.Resolved.layoutMetrics.modify(_QWORD *a1))(uint64_t **a1)
{
  uint64_t v1;
  _QWORD *v3;
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v3 = malloc(0x50uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(_OWORD **)(v1 + 144);
  if (v4)
  {
    v5 = v4[3];
    v6 = v4[4];
    v7 = v4[2];
    *(_OWORD *)v3 = v4[1];
  }
  else
  {
    v7 = 0uLL;
    *(_OWORD *)v3 = 0u;
    v5 = 0uLL;
    v6 = 0uLL;
  }
  *((_OWORD *)v3 + 1) = v7;
  *((_OWORD *)v3 + 2) = v5;
  *((_OWORD *)v3 + 3) = v6;
  *((_BYTE *)v3 + 64) = v4 == 0;
  return Image.Resolved.layoutMetrics.modify;
}

void Image.Resolved.layoutMetrics.modify(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD *v11;

  v1 = *a1;
  v2 = **a1;
  v3 = (*a1)[1];
  v4 = (*a1)[2];
  v5 = (*a1)[3];
  v6 = (*a1)[4];
  v7 = (*a1)[5];
  v8 = (*a1)[6];
  v9 = (*a1)[7];
  v10 = *((_BYTE *)*a1 + 64);
  swift_release();
  if ((v10 & 1) != 0)
  {
    v11 = 0;
  }
  else
  {
    v11 = (_QWORD *)swift_allocObject();
    v11[2] = v2;
    v11[3] = v3;
    v11[4] = v4;
    v11[5] = v5;
    v11[6] = v6;
    v11[7] = v7;
    v11[8] = v8;
    v11[9] = v9;
  }
  *(_QWORD *)(v1[9] + 144) = v11;
  free(v1);
}

uint64_t Image.Resolved.decorative.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 152);
}

uint64_t Image.Resolved.decorative.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 152) = result;
  return result;
}

uint64_t (*Image.Resolved.decorative.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void Image.Resolved.backgroundShape.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 153);
}

_BYTE *Image.Resolved.backgroundShape.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 153) = *result;
  return result;
}

uint64_t (*Image.Resolved.backgroundShape.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

unint64_t Image.Resolved.backgroundCornerRadius.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 156) | ((unint64_t)*(unsigned __int8 *)(v0 + 160) << 32);
}

uint64_t Image.Resolved.backgroundCornerRadius.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 156) = result;
  *(_BYTE *)(v1 + 160) = BYTE4(result) & 1;
  return result;
}

uint64_t (*Image.Resolved.backgroundCornerRadius.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

id Image.Resolved.styleResolverMode.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  __int16 v3;
  char v4;

  v2 = *(void **)(v1 + 168);
  v3 = *(_WORD *)(v1 + 176);
  v4 = *(_BYTE *)(v1 + 178);
  *(_QWORD *)a1 = v2;
  *(_WORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 10) = v4;
  return v2;
}

void Image.Resolved.styleResolverMode.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  char v4;

  v2 = *a1;
  v3 = *((_WORD *)a1 + 4);
  v4 = *((_BYTE *)a1 + 10);

  *(_QWORD *)(v1 + 168) = v2;
  *(_WORD *)(v1 + 176) = v3;
  *(_BYTE *)(v1 + 178) = v4;
}

uint64_t (*Image.Resolved.styleResolverMode.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void Image.Resolved.init(image:decorative:label:basePlatformItemImage:backgroundShape:backgroundCornerRadius:)(uint64_t *a1@<X0>, char a2@<W1>, __int128 *a3@<X2>, uint64_t a4@<X3>, unsigned __int8 *a5@<X4>, double a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  __int16 v15;
  __int128 v16;
  __int128 v17;
  char v18;
  char v19;
  char v20;
  char v21;
  __int128 v22;
  __int128 v23;
  int v24;
  void *v25;
  id v26;
  id v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  char v31;
  char v32;
  float v33;
  float v34;
  char v35;
  char v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char v42;
  __int128 v43;
  char v44;
  char v45;
  double v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  __int16 v50;
  char v51;

  v9 = *a1;
  v10 = *((unsigned __int8 *)a1 + 8);
  v11 = *((_OWORD *)a1 + 1);
  v12 = a1[4];
  v13 = *((_BYTE *)a1 + 40);
  v14 = *(_OWORD *)((char *)a1 + 44);
  v15 = *((unsigned __int8 *)a1 + 60);
  v16 = *((_OWORD *)a1 + 4);
  v17 = *((_OWORD *)a1 + 5);
  v18 = *((_BYTE *)a1 + 96);
  v19 = *((_BYTE *)a1 + 97);
  v20 = *((_BYTE *)a1 + 98);
  v21 = *((_BYTE *)a1 + 99);
  v22 = *a3;
  v23 = a3[1];
  v24 = *a5;
  if (v10 == 255)
  {
    v31 = 0;
    v30 = 0;
    v29 = 0;
  }
  else if (v10 == 2)
  {
    v25 = *(void **)(v9 + 32);
    v47 = a4;
    v46 = a6;
    v44 = a7;
    v45 = a2;
    v43 = *((_OWORD *)a1 + 1);
    v42 = *((_BYTE *)a1 + 40);
    v40 = *((_OWORD *)a1 + 4);
    v41 = *(_OWORD *)((char *)a1 + 44);
    v38 = *a3;
    v39 = *((_OWORD *)a1 + 5);
    v37 = a3[1];
    v35 = *((_BYTE *)a1 + 99);
    v36 = *((_BYTE *)a1 + 98);
    v26 = *(id *)(v9 + 16);
    outlined copy of Image.Location(v25);
    v27 = v26;
    outlined copy of Image.Location(v25);
    v28 = (unsigned __int16)objc_msgSend(v27, sel_styleMask);
    v48 = v25;
    outlined copy of Image.Location(v25);
    _ShapeStyle_ResolverMode.init(rbSymbolStyleMask:location:)(v28, &v48, (uint64_t)&v49);

    outlined consume of Image.Location(v25);
    outlined consume of Image.Location(v25);
    v21 = v35;
    v20 = v36;
    v23 = v37;
    v22 = v38;
    v17 = v39;
    v16 = v40;
    v14 = v41;
    v13 = v42;
    v11 = v43;
    a7 = v44;
    a2 = v45;
    a6 = v46;
    a4 = v47;
    v29 = v49;
    v30 = v50;
    v31 = v51 & 0xFD;
  }
  else
  {
    v31 = 0;
    v29 = 0;
    v30 = v15 ^ 1;
  }
  LOBYTE(v49) = v15;
  LOBYTE(v48) = a7 & 1;
  v32 = v31 | (2 * (v24 != 3));
  *(_QWORD *)a8 = v9;
  v33 = a6;
  v34 = v33;
  *(_BYTE *)(a8 + 8) = v10;
  if ((a7 & 1) != 0)
    v34 = 0.0;
  *(_OWORD *)(a8 + 16) = v11;
  *(_QWORD *)(a8 + 32) = v12;
  *(_BYTE *)(a8 + 40) = v13;
  *(_OWORD *)(a8 + 44) = v14;
  *(_BYTE *)(a8 + 60) = v15;
  *(_OWORD *)(a8 + 64) = v16;
  *(_OWORD *)(a8 + 80) = v17;
  *(_BYTE *)(a8 + 96) = v18;
  *(_BYTE *)(a8 + 97) = v19;
  *(_BYTE *)(a8 + 98) = v20;
  *(_BYTE *)(a8 + 99) = v21;
  *(_OWORD *)(a8 + 104) = v22;
  *(_OWORD *)(a8 + 120) = v23;
  *(_QWORD *)(a8 + 136) = a4;
  *(_QWORD *)(a8 + 144) = 0;
  *(_BYTE *)(a8 + 152) = a2 & 1;
  *(_BYTE *)(a8 + 153) = v24;
  *(float *)(a8 + 156) = v34;
  *(_BYTE *)(a8 + 160) = (_BYTE)v48;
  *(_QWORD *)(a8 + 168) = v29;
  *(_WORD *)(a8 + 176) = v30;
  *(_BYTE *)(a8 + 178) = v32;
}

uint64_t Image.Resolved.size.getter()
{
  uint64_t v0;
  uint64_t result;

  if (*(double *)(v0 + 16) != 0.0)
    return ((uint64_t (*)(double, double))((char *)sub_234AAF294
                                                   + 4 * byte_235282E20[*(unsigned __int8 *)(v0 + 40)]))(*(double *)(v0 + 24), *(double *)(v0 + 32));
  return result;
}

double sub_234AAF294(double a1, double a2, double a3, double a4)
{
  return 1.0 / a3 * a4;
}

double Image.Resolved.baselineOffset.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 144);
  if (v1)
    return *(double *)(v1 + 16);
  else
    return 0.0;
}

uint64_t Image.Resolved.capHeight.getter()
{
  uint64_t v0;
  double v1;
  uint64_t result;

  if (!*(_QWORD *)(v0 + 144))
  {
    v1 = *(double *)(v0 + 16);
    if (v1 != 0.0)
      return ((uint64_t (*)(double, double, double))((char *)sub_234AAF30C
                                                             + 4 * byte_235282E28[*(unsigned __int8 *)(v0 + 40)]))(*(double *)(v0 + 32), v1, *(double *)(v0 + 24));
  }
  return result;
}

double sub_234AAF30C(double a1, double a2, double a3)
{
  return 1.0 / a2 * a3;
}

uint64_t Image.Resolved.contentSize.getter()
{
  uint64_t v0;
  uint64_t result;

  if (!*(_QWORD *)(v0 + 144) && *(double *)(v0 + 16) != 0.0)
    return ((uint64_t (*)(double, double))((char *)sub_234AAF36C
                                                   + 4 * byte_235282E30[*(unsigned __int8 *)(v0 + 40)]))(*(double *)(v0 + 24), *(double *)(v0 + 32));
  return result;
}

double sub_234AAF36C(double a1, double a2, double a3, double a4)
{
  return 1.0 / a3 * a4;
}

double Image.Resolved.alignmentOrigin.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 144);
  if (v1)
    return *(double *)(v1 + 48);
  else
    return 0.0;
}

double Image.Resolved.foregroundColor(_:)@<D0>(float (*a1)(uint64_t)@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void *v10;
  char v11;
  int v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  __int16 v17;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  void *v24;
  id v25;
  id v26;
  char v27;
  int v28;
  char v29;
  char v30;
  double result;
  __int16 v32;
  char v33;
  __int128 v34;
  char v35;
  char v36;
  char v37;
  char v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  void *v42;
  void *v43;
  __int16 v44;
  char v45;
  __int128 v46;
  __int128 v47;
  _BYTE v48[32];
  __int128 v49;
  __int128 v50;
  _BYTE v51[64];
  _BYTE v52[19];

  v4 = v2[8];
  v5 = v2[10];
  *(_OWORD *)&v51[48] = v2[9];
  *(_OWORD *)v52 = v5;
  *(_DWORD *)&v52[15] = *(_DWORD *)((char *)v2 + 175);
  v6 = v2[5];
  v49 = v2[4];
  v50 = v6;
  v7 = v2[7];
  *(_OWORD *)v51 = v2[6];
  *(_OWORD *)&v51[16] = v7;
  *(_OWORD *)&v51[32] = v4;
  v8 = v2[1];
  v46 = *v2;
  v47 = v8;
  v9 = v2[3];
  *(_OWORD *)v48 = v2[2];
  *(_OWORD *)&v48[16] = v9;
  v10 = *(void **)&v52[8];
  v11 = v52[18];
  v41 = v46;
  v12 = BYTE8(v46);
  v34 = v47;
  v13 = *(_QWORD *)v48;
  v33 = v48[8];
  v14 = BYTE12(v9);
  v39 = v50;
  v40 = v49;
  v37 = v51[1];
  v38 = v51[0];
  v35 = v51[3];
  v36 = v51[2];
  if ((BYTE12(v9) & 1) == 0)
  {
    v19 = outlined retain of Image.Resolved((uint64_t)&v46);
    *(float *)&v20 = a1(v19);
    v16 = v20 | ((unint64_t)v21 << 32);
    v15 = v22 | ((unint64_t)v23 << 32);
    if (v12 == 2)
    {
      v24 = *(void **)(v41 + 32);
      v25 = *(id *)(v41 + 16);
      outlined copy of Image.Location(v24);
      v26 = v25;
      outlined copy of Image.Location(v24);
      v32 = (unsigned __int16)objc_msgSend(v26, sel_styleMask);
      v42 = v24;
      outlined copy of Image.Location(v24);
      _ShapeStyle_ResolverMode.init(rbSymbolStyleMask:location:)(v32, &v42, (uint64_t)&v43);

      outlined consume of Image.Location(v24);
      outlined consume of Image.Location(v24);

      v10 = v43;
      v17 = v44;
      v27 = v45;
      if ((v11 & 2) == 0)
      {
LABEL_8:
        v11 = v27 & 0xFD;
        goto LABEL_9;
      }
    }
    else
    {
      v17 = v12 != 255;

      v27 = 0;
      v10 = 0;
      if ((v11 & 2) == 0)
        goto LABEL_8;
    }
    v11 = v27 | 2;
    goto LABEL_9;
  }
  v15 = *(_QWORD *)&v48[20];
  v16 = *(_QWORD *)&v48[12];
  v17 = *(_WORD *)&v52[16];
  outlined retain of Image.Resolved((uint64_t)&v46);
LABEL_9:
  v28 = *(_DWORD *)&v51[60];
  v29 = v51[57];
  v30 = v51[56];
  LOBYTE(v42) = v52[0];
  *(_QWORD *)a2 = v41;
  *(_BYTE *)(a2 + 8) = v12;
  *(_OWORD *)(a2 + 16) = v34;
  *(_QWORD *)(a2 + 32) = v13;
  *(_BYTE *)(a2 + 40) = v33;
  *(_QWORD *)(a2 + 44) = v16;
  *(_QWORD *)(a2 + 52) = v15;
  *(_BYTE *)(a2 + 60) = v14;
  *(_OWORD *)(a2 + 64) = v40;
  *(_OWORD *)(a2 + 80) = v39;
  *(_BYTE *)(a2 + 96) = v38;
  *(_BYTE *)(a2 + 97) = v37;
  *(_BYTE *)(a2 + 98) = v36;
  *(_BYTE *)(a2 + 99) = v35;
  *(_OWORD *)(a2 + 104) = *(_OWORD *)&v51[8];
  *(_OWORD *)(a2 + 120) = *(_OWORD *)&v51[24];
  result = *(double *)&v51[40];
  *(_OWORD *)(a2 + 136) = *(_OWORD *)&v51[40];
  *(_BYTE *)(a2 + 152) = v30;
  *(_BYTE *)(a2 + 153) = v29;
  *(_DWORD *)(a2 + 156) = v28;
  *(_BYTE *)(a2 + 160) = (_BYTE)v42;
  *(_QWORD *)(a2 + 168) = v10;
  *(_WORD *)(a2 + 176) = v17;
  *(_BYTE *)(a2 + 178) = v11;
  return result;
}

BOOL specialized static IndirectOptional<A>.== infix(_:_:)(unint64_t a1, unint64_t a2)
{
  _BOOL8 v2;

  v2 = (a1 | a2) == 0;
  if (!a1 || !a2)
    return v2;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 16), *(float64x2_t *)(a2 + 16)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 32), *(float64x2_t *)(a2 + 32)))), 0xFuLL))) & 1) == 0|| *(double *)(a1 + 48) != *(double *)(a2 + 48)|| *(double *)(a1 + 56) != *(double *)(a2 + 56))
  {
    return 0;
  }
  return *(double *)(a1 + 64) == *(double *)(a2 + 64) && *(double *)(a1 + 72) == *(double *)(a2 + 72);
}

uint64_t Image.NamedResolved.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Image.NamedResolved.name.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*Image.NamedResolved.name.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

id Image.NamedResolved.location.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 16);
  *a1 = v2;
  return outlined copy of Image.Location(v2);
}

void Image.NamedResolved.location.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *a1;
  outlined consume of Image.Location(*(id *)(v1 + 16));
  *(_QWORD *)(v1 + 16) = v2;
}

uint64_t (*Image.NamedResolved.location.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

unint64_t Image.NamedResolved.value.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 24) | ((unint64_t)*(unsigned __int8 *)(v0 + 28) << 32);
}

uint64_t Image.NamedResolved.value.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 24) = result;
  *(_BYTE *)(v1 + 28) = BYTE4(result) & 1;
  return result;
}

uint64_t (*Image.NamedResolved.value.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void Image.NamedResolved.symbolRenderingMode.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 29);
}

_BYTE *Image.NamedResolved.symbolRenderingMode.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 29) = *result;
  return result;
}

uint64_t (*Image.NamedResolved.symbolRenderingMode.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t Image.NamedResolved.isTemplate.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 30);
}

uint64_t Image.NamedResolved.isTemplate.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 30) = result;
  return result;
}

uint64_t (*Image.NamedResolved.isTemplate.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t Image.NamedResolved.environment.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 40);
  *a1 = *(_QWORD *)(v1 + 32);
  a1[1] = v2;
  swift_retain();
  return swift_retain();
}

uint64_t Image.NamedResolved.environment.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  swift_release();
  result = swift_release();
  *(_QWORD *)(v1 + 32) = v2;
  *(_QWORD *)(v1 + 40) = v3;
  return result;
}

uint64_t (*Image.NamedResolved.environment.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void Image.LayoutMetrics.init(glyph:flipsRightToLeft:)(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  double v22;
  uint64_t v23;
  double MaxX;
  double v25;
  uint64_t v26;
  CGRect v27;

  objc_msgSend(a1, sel_baselineOffset);
  v7 = v6;
  objc_msgSend(a1, sel_capHeight);
  v9 = v8;
  if (one-time initialization token for introduced != -1)
    swift_once();
  v10 = static _SemanticFeature_v2_1.introduced;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FAB4 == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0)
      goto LABEL_7;
  }
  else if (static Semantics.forced < v10)
  {
LABEL_7:
    if (one-time initialization token for introduced != -1)
      swift_once();
    if (byte_25426FAB4 == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) == 0)
      {
LABEL_11:
        v11 = -v7;
        objc_msgSend(a1, sel_alignmentRect);
        v13 = v12;

        v14 = 0.0;
        v15 = v9;
        goto LABEL_18;
      }
    }
    else if (static Semantics.forced < static _SemanticFeature_v2.introduced)
    {
      goto LABEL_11;
    }
    objc_msgSend(a1, sel_alignmentRect);
    v13 = v25;
    v15 = v26;

    v11 = 0.0;
    v14 = 0.0;
    goto LABEL_18;
  }
  objc_msgSend(a1, sel_alignmentRect);
  v14 = v16;
  v11 = v17;
  v19 = v18;
  v21 = v20;
  objc_msgSend(a1, sel_contentBounds);
  v13 = v22;
  v15 = v23;
  if ((a2 & 1) != 0)
  {
    v27.origin.x = v14;
    v27.origin.y = v11;
    v27.size.width = v19;
    v27.size.height = v21;
    MaxX = CGRectGetMaxX(v27);

    v14 = v13 - MaxX;
  }
  else
  {

  }
LABEL_18:
  *(double *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(double *)(a3 + 16) = v13;
  *(_QWORD *)(a3 + 24) = v15;
  *(double *)(a3 + 32) = v14;
  *(double *)(a3 + 40) = v11;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
}

void Image.LayoutMetrics.adjustForBackground(glyph:shape:size:growsToFitBackground:)(void *a1, unsigned __int8 *a2, _QWORD *a3, char a4)
{
  _QWORD *v4;
  int v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;

  v8 = *a2;
  v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE28CA0]), sel_init);
  objc_msgSend(v26, sel_setShape_, (v8 - 3) < 0xFFFFFFFE);
  if ((a4 & 1) != 0)
    v9 = 1;
  else
    v9 = 3;
  objc_msgSend(v26, sel_setImageScaling_, v9);
  v10 = objc_msgSend(a1, sel_graphicVariantWithOptions_, v26);
  if (v10)
  {
    v11 = v10;
    objc_msgSend(v10, sel_interiorAlignmentRect);
    v13 = v12;
    v15 = v14;
    *a3 = v16;
    a3[1] = v17;
    objc_msgSend(v11, sel_baselineOffset);
    *v4 = v18;
    objc_msgSend(v11, sel_capHeight);
    v4[1] = v19;
    objc_msgSend(v11, sel_contentBounds);
    v4[2] = v20;
    v4[3] = v21;
    v4[4] = v13;
    v4[5] = v15;
    objc_msgSend(v11, sel_alignmentRect);
    v23 = v22;
    v25 = v24;

    v4[6] = v23;
    v4[7] = v25;
  }
  else
  {

  }
}

uint64_t Image.Resolved.mustUpdate(data:position:)()
{
  _BYTE *v0;
  _BYTE *v1;
  void *v2;
  void *v3;
  void *v4;
  double *Value;
  double v6;
  id v7;
  double width;
  double height;
  double *v10;
  double v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  unsigned int v16;
  uint64_t v18;
  id v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  int v24;
  double v25;
  double v26;
  CGSize v27;
  __C::CGRect v28;

  if (v0[8] != 2)
    return 0;
  v1 = v0;
  v2 = *(void **)v0;
  v3 = *(void **)(*(_QWORD *)v0 + 16);
  v4 = *(void **)(*(_QWORD *)v0 + 32);
  v23 = *(_BYTE *)(*(_QWORD *)v0 + 24);
  v24 = *(_DWORD *)(*(_QWORD *)v0 + 40);
  LODWORD(v20) = *(unsigned __int8 *)(*(_QWORD *)v0 + 45);
  HIDWORD(v20) = *(unsigned __int8 *)(*(_QWORD *)v0 + 44);
  Value = (double *)AGGraphGetValue();
  v25 = *Value;
  v26 = Value[1];
  v27 = *(CGSize *)AGGraphGetValue();
  v6 = *(double *)AGGraphGetValue();
  v7 = v3;
  outlined copy of Image.Location(v4);
  outlined copy of Image.Location(v4);
  CGRect.roundCoordinatesToNearestOrUp(toMultipleOf:)(v6);
  v28 = Image.Resolved.frame(in:)(v27);
  width = v28.size.width;
  height = v28.size.height;
  objc_msgSend(v7, sel_setPosition_, v28.origin.x + v25, v28.origin.y + v26);
  objc_msgSend(v7, sel_setSize_, width, height);
  v10 = (double *)AGGraphGetValue();
  objc_msgSend(v7, sel_setPresentationPosition_, *v10, v10[1]);
  if (objc_msgSend(v7, sel_isAnimating))
  {
    v11 = *(double *)AGGraphGetValue();
    objc_msgSend(v7, sel_setCurrentTime_, v11);
    v12 = specialized static ViewGraph.current.getter();
    swift_beginAccess();
    v13 = *(double *)(v12 + 376);
    if (v11 < v13)
      v13 = v11;
    *(double *)(v12 + 376) = v13;
    objc_msgSend(v7, sel_maxVelocity, v20);
    v15 = v14;
    swift_beginAccess();
    ViewGraph.NextUpdate.maxVelocity(_:)(v15);
    swift_endAccess();
    swift_release();
  }
  v16 = objc_msgSend(v7, sel_version, v20);

  if (v24 == v16)
  {

    outlined consume of Image.Location(v4);
    outlined consume of Image.Location(v4);

    return 0;
  }
  v18 = swift_allocObject();
  v19 = v7;
  outlined copy of Image.Location(v4);
  outlined consume of Image.Location(v4);

  *(_QWORD *)(v18 + 16) = v19;
  *(_BYTE *)(v18 + 24) = v23;
  *(_QWORD *)(v18 + 32) = v4;
  *(_DWORD *)(v18 + 40) = v16;
  *(_BYTE *)(v18 + 44) = v22;
  *(_BYTE *)(v18 + 45) = v21;
  outlined consume of GraphicsImage.Contents?(v2, 2);
  *(_QWORD *)v1 = v18;
  v1[8] = 2;
  Image.Resolved.image.didset();

  outlined consume of Image.Location(v4);
  return 1;
}

__C::CGRect __swiftcall Image.Resolved.frame(in:)(CGSize in)
{
  uint64_t v1;
  __n128 v2;
  double height;
  double width;
  double v5;
  double v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __C::CGRect result;

  height = in.height;
  width = in.width;
  v5 = 0.0;
  v6 = 0.0;
  if (*(_BYTE *)(v1 + 96) == 2)
  {
    v2.n128_u64[0] = *(_QWORD *)(v1 + 16);
    v7 = *(_QWORD *)(v1 + 144);
    width = 0.0;
    if (v7)
    {
      v5 = *(double *)(v7 + 48);
      v6 = *(double *)(v7 + 56);
    }
    if (v2.n128_f64[0] == 0.0)
      height = 0.0;
    else
      ((void (*)(__n128, __n128, double, __n128, double))((char *)&loc_234AB0018
                                                                   + 4 * byte_235282E38[*(unsigned __int8 *)(v1 + 40)]))((__n128)__PAIR128__(v8, *(unint64_t *)&v5), (__n128)__PAIR128__(v9, *(unint64_t *)&v6), *(double *)(v1 + 24), v2, *(double *)(v1 + 32));
  }
  result.size.height = height;
  result.size.width = width;
  result.origin.y = v6;
  result.origin.x = v5;
  return result;
}

double Image.Resolved.shape(in:)(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  __int128 v19;
  double v20;

  v3 = *(void **)v1;
  v4 = *(unsigned __int8 *)(v1 + 8);
  v5 = *(double *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = *(_QWORD *)(v1 + 32);
  v8 = *(unsigned __int8 *)(v1 + 40);
  v9 = *(_QWORD *)(v1 + 52);
  v10 = *(unsigned __int8 *)(v1 + 96);
  v11 = *(_QWORD *)(v1 + 144);
  v12 = v8 | (*(_QWORD *)(v1 + 44) << 32);
  *((_QWORD *)&v14 + 1) = v9;
  *(_QWORD *)&v14 = *(_QWORD *)(v1 + 44);
  v13 = v14 >> 32;
  v15 = 0x100000000;
  if (!*(_BYTE *)(v1 + 60))
    v15 = 0;
  v16 = v15 & 0xFFFFFFFF00000000 | HIDWORD(v9);
  if (*(_BYTE *)(v1 + 97))
    v17 = 256;
  else
    v17 = 0;
  v18 = v17 | v10 | (*(unsigned __int8 *)(v1 + 98) << 16) | (*(unsigned __int8 *)(v1 + 99) << 24) | 0x400000;
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(double *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = v13;
  *(_QWORD *)(a1 + 56) = v16;
  v19 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(a1 + 80) = v19;
  *(_DWORD *)(a1 + 96) = v18;
  v20 = 0.0;
  if (v10 == 2)
  {
    if (v11)
      v20 = *(double *)(v11 + 48);
    if (v5 != 0.0)
      __asm { BR              X10 }
  }
  outlined copy of GraphicsImage.Contents?(v3, v4);
  return v20;
}

uint64_t static Image.Resolved.hasBackground.getter()
{
  return 1;
}

double Image.Resolved.backgroundShape(in:)(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  double *v5;
  uint64_t v7;
  CGFloat v8;
  CGFloat v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  double result;
  _OWORD v14[2];
  unsigned __int8 v15;

  v5 = *(double **)(v3 + 144);
  if (*(_BYTE *)(v3 + 153) == 3 || v5 == 0)
  {
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    v10 = 0x800000;
  }
  else
  {
    v7 = *(unsigned int *)(v3 + 156);
    v8 = v5[8] * (a2 / v5[4]);
    v9 = v5[9] * (a3 / v5[5]);
    LOBYTE(v14[0]) = *(_BYTE *)(v3 + 160);
    SymbolVariants.Shape.path(in:cornerRadius:)(v7 | ((unint64_t)LOBYTE(v14[0]) << 32), (uint64_t)v14, 0.0, 0.0, v8, v9);
    v10 = 0;
    v11 = v15 | 0x10000;
    v12 = v14[1];
    *(_OWORD *)a1 = v14[0];
    *(_OWORD *)(a1 + 16) = v12;
    *(_QWORD *)(a1 + 32) = v11;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_QWORD *)(a1 + 72) = 0;
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  result = 0.0;
  *(_DWORD *)(a1 + 96) = v10;
  return result;
}

BOOL Image.Resolved.isClear(styles:)(uint64_t *a1)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  int v6;
  char v7;
  char v8;
  Swift::Bool v9;
  Swift::Bool v10;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  int v16;
  char v17;
  char v18;

  v2 = *a1;
  if (v1[8] == 2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)v1 + 16);
    v4 = *(_BYTE *)(*(_QWORD *)v1 + 24);
    v5 = *(_QWORD *)(*(_QWORD *)v1 + 32);
    v6 = *(_DWORD *)(*(_QWORD *)v1 + 40);
    v7 = *(_BYTE *)(*(_QWORD *)v1 + 44);
    v8 = *(_BYTE *)(*(_QWORD *)v1 + 45);
    v12 = *a1;
    v13 = v3;
    v14 = v4;
    v15 = v5;
    v16 = v6;
    v17 = v7;
    v18 = v8;
    if (!ResolvedVectorGlyph.isClear(styles:)(&v12))
      return 0;
LABEL_7:
    v13 = v2;
    LOBYTE(v12) = 1;
    return _ShapeStyle_Pack.isClear(name:)((SwiftUI::_ShapeStyle_Name)&v12);
  }
  if ((v1[60] & 1) == 0)
  {
    v13 = *a1;
    LOBYTE(v12) = 0;
    v10 = _ShapeStyle_Pack.isClear(name:)((SwiftUI::_ShapeStyle_Name)&v12);
    v9 = 0;
    if (!v10)
      return v9;
    goto LABEL_7;
  }
  return 0;
}

uint64_t Image.Resolved.sizeThatFits(in:)(uint64_t result, __n128 a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;

  a4.n128_u64[0] = *(_QWORD *)(v6 + 16);
  a5.n128_u64[0] = *(_QWORD *)(v6 + 24);
  v7 = *(unsigned __int8 *)(v6 + 40);
  if (*(_BYTE *)(v6 + 96) == 2)
  {
    if (!*(_QWORD *)(v6 + 144) && a4.n128_f64[0] != 0.0)
      return ((uint64_t (*)(double, double, double, double))((char *)&loc_234AB03E0 + 4 * byte_235282E58[v7]))(0.0, *(double *)(v6 + 32), a4.n128_f64[0], a5.n128_f64[0]);
    return result;
  }
  a2.n128_u64[0] = *(_QWORD *)result;
  if ((*(_BYTE *)(result + 8) & 1) != 0)
  {
    a3.n128_u64[0] = *(_QWORD *)(result + 16);
    if ((*(_BYTE *)(result + 24) & 1) != 0)
      goto LABEL_6;
LABEL_11:
    v9 = *(double *)(v6 + 64);
    if (*(double *)(v6 + 80) + v9 >= a3.n128_f64[0])
      a3.n128_f64[0] = *(double *)(v6 + 80) + v9;
    if ((*(_BYTE *)(result + 8) & 1) == 0)
      goto LABEL_15;
LABEL_14:
    a2.n128_u64[0] = 0;
    if (a4.n128_f64[0] != 0.0)
      return ((uint64_t (*)(double, __n128))((char *)&loc_234AB0418 + 4 * byte_235282E48[v7]))(*(double *)(v6 + 24), a3);
    goto LABEL_15;
  }
  v8 = *(double *)(v6 + 72);
  if (*(double *)(v6 + 88) + v8 >= a2.n128_f64[0])
    a2.n128_f64[0] = *(double *)(v6 + 88) + v8;
  a3.n128_u64[0] = *(_QWORD *)(result + 16);
  if ((*(_BYTE *)(result + 24) & 1) == 0)
    goto LABEL_11;
LABEL_6:
  if ((*(_BYTE *)(result + 8) & 1) != 0)
    goto LABEL_14;
LABEL_15:
  if ((*(_BYTE *)(result + 24) & 1) != 0 && a4.n128_f64[0] != 0.0)
  {
    a6.n128_u64[0] = *(_QWORD *)(v6 + 32);
    return ((uint64_t (*)(__n128, double, __n128, __n128, __n128))((char *)sub_234AB0448
                                                                           + 4 * byte_235282E50[v7]))(a2, 0.0, a4, a5, a6);
  }
  return result;
}

uint64_t static Image.Resolved._makeView(view:inputs:)@<X0>(unsigned int *a1@<X0>, __int128 *a2@<X1>, _OWORD *a3@<X8>)
{
  __int128 v3;
  __int128 v4;
  int v5;
  __int128 v6;
  __int128 v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t KeyPath;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  int v27;
  unsigned int v28;
  unsigned int OffsetAttribute2;
  unsigned int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  __int128 v37;
  __int128 v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  __int128 v43;
  uint64_t v44;
  unsigned __int8 v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t result;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  unsigned int v74;
  int v75;
  unsigned int v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  int v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  int v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  int v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;

  v101 = *MEMORY[0x24BDAC8D0];
  v77 = *a1;
  v3 = a2[3];
  v88 = a2[2];
  v89 = v3;
  v90 = a2[4];
  v91 = *((_DWORD *)a2 + 20);
  v4 = a2[1];
  v86 = *a2;
  v87 = v4;
  v99 = v4;
  v100 = v88;
  v98 = v86;
  v5 = DWORD1(v88);
  v6 = v86;
  v7 = v4;
  v8 = DWORD1(v88);
  v9 = *((_QWORD *)&v88 + 1);
  v78 = v3;
  v69 = v88;
  v70 = *((_QWORD *)&v3 + 1);
  v72 = *((_QWORD *)&v90 + 1);
  v71 = v90;
  v73 = v91;
  outlined retain of _ViewInputs((uint64_t)&v86);
  if ((v5 & 2) != 0)
  {
    if (one-time initialization token for introduced != -1)
      swift_once();
    v10 = static _SemanticFeature_v2.introduced;
    if (one-time initialization token for forced != -1)
      swift_once();
    swift_beginAccess();
    if ((byte_25426FAB4 & 1) != 0)
      v11 = dyld_program_sdk_at_least();
    else
      v11 = static Semantics.forced >= v10;
    if (v11)
      v8 = v5 & 0xFFFFFFFD;
    v74 = v8;
    v75 = v11;
  }
  else
  {
    v74 = v8;
    v75 = 0;
  }
  v68 = DWORD2(v90);
  v12 = v90;
  v13 = v89;
  v14 = v99;
  v67 = DWORD2(v98);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v16 = *(_QWORD *)(v13 + 16);
  if (v16)
  {
    v66 = v12;
    v17 = (_QWORD *)(v13 + 32);
    v18 = (_QWORD *)(v13 + 32);
    v19 = *(_QWORD *)(v13 + 16);
    while (*v18 != v15)
    {
      v18 += 2;
      if (!--v19)
      {
        type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
        while (*v17 != v20)
        {
          v17 += 2;
          if (!--v16)
            goto LABEL_20;
        }
        break;
      }
    }
    v65 = v9;
    KeyPath = swift_getKeyPath();
    swift_beginAccess();
    outlined retain of _GraphInputs((uint64_t)&v98);
    v23 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
    swift_endAccess();
    outlined release of _GraphInputs((uint64_t)&v98);
    swift_release();
    outlined retain of _ViewInputs((uint64_t)&v86);
    outlined retain of _GraphInputs((uint64_t)&v98);
    v24 = swift_retain();
    v25 = specialized find<A>(_:key:)(v24);
    if (v25)
    {
      v26 = *(_BYTE *)(v25 + 72);
      swift_release();
      outlined release of _GraphInputs((uint64_t)&v98);
      outlined release of _ViewInputs((uint64_t)&v86);
      if ((v26 & 1) != 0)
      {
        v27 = *(_DWORD *)(v14 + 16);
        *((_QWORD *)&v92 + 1) = 0x8000000004;
        BYTE4(v93) = 3;
        LODWORD(v92) = v27;
        LODWORD(v93) = 0x2000000;
        *(_WORD *)((char *)&v93 + 5) = 0;
        protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
        lazy protocol witness table accessor for type ContentTransitionEffect.Init and conformance ContentTransitionEffect.Init();
        v28 = Attribute.init<A>(body:value:flags:update:)();
        OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
        v94 = v88;
        v95 = v89;
        v96 = v90;
        v97 = v91;
        v92 = v86;
        v93 = v87;
        LOBYTE(v79) = 1;
        swift_beginAccess();
        v30 = CachedEnvironment.resolvedShapeStyles(for:role:mode:)((uint64_t)&v92, (unsigned __int8 *)&v79, OffsetAttribute2);
        swift_endAccess();
        v92 = v6;
        v93 = v7;
        *(_QWORD *)&v94 = __PAIR64__(v74, v69);
        *((_QWORD *)&v94 + 1) = v9;
        *(_QWORD *)&v95 = v78;
        *((_QWORD *)&v95 + 1) = v70;
        *(_QWORD *)&v96 = v71;
        *((_QWORD *)&v96 + 1) = v72;
        v97 = v73;
        outlined retain of _ViewInputs((uint64_t)&v92);
        specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(v28, (uint64_t)&v92, v77, v30, v67 | (v12 << 32), v68 | (v23 << 32), &v80);
        outlined release of _ViewInputs((uint64_t)&v92);
        v79 = v80;
        if (!v75)
          goto LABEL_25;
LABEL_44:
        LODWORD(v80) = v77;
        protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
        lazy protocol witness table accessor for type ResolvedImageLayoutComputer and conformance ResolvedImageLayoutComputer();
        HIDWORD(v79) = Attribute.init<A>(body:value:flags:update:)();
        v32 = DWORD2(v79);
        if ((BYTE8(v79) & 0x80) != 0)
          goto LABEL_46;
        goto LABEL_45;
      }
    }
    else
    {
      swift_release();
      outlined release of _GraphInputs((uint64_t)&v98);
      outlined release of _ViewInputs((uint64_t)&v86);
    }
    v63 = v23;
    type metadata accessor for _ShapeStyle_InterpolatorGroup();
    v33 = swift_allocObject();
    v34 = MEMORY[0x24BEE4AF8];
    *(_DWORD *)(v33 + 32) = 0;
    *(_BYTE *)(v33 + 36) = 0;
    *(_DWORD *)(v33 + 40) = 0;
    *(_BYTE *)(v33 + 44) = 1;
    *(_DWORD *)(v33 + 48) = 160;
    *(_BYTE *)(v33 + 52) = 3;
    *(_QWORD *)(v33 + 56) = 0;
    *(_QWORD *)(v33 + 16) = 0x7FF0000000000000;
    *(_QWORD *)(v33 + 24) = v34;
    swift_beginAccess();
    if ((v5 & 0x20) == 0)
    {
LABEL_43:
      swift_endAccess();
      v48 = AGGraphCreateOffsetAttribute2();
      v94 = v88;
      v95 = v89;
      v96 = v90;
      v97 = v91;
      v92 = v86;
      v93 = v87;
      LOBYTE(v79) = 1;
      swift_beginAccess();
      v49 = CachedEnvironment.resolvedShapeStyles(for:role:mode:)((uint64_t)&v92, (unsigned __int8 *)&v79, v48);
      swift_endAccess();
      *(_QWORD *)&v92 = v6;
      DWORD2(v92) = DWORD2(v6);
      v93 = v7;
      *(_QWORD *)&v94 = __PAIR64__(v74, v69);
      *((_QWORD *)&v94 + 1) = v65;
      *(_QWORD *)&v95 = v78;
      *((_QWORD *)&v95 + 1) = v70;
      *(_QWORD *)&v96 = __PAIR64__(v12, v71);
      *((_QWORD *)&v96 + 1) = v72;
      v97 = v73;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(v77, (uint64_t)&v92, v49, v33, v67 | (v66 << 32), v68 | (v63 << 32), &v80);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      v79 = v80;
      specialized _ViewOutputs.applyInterpolatorGroup<A>(_:content:inputs:animatesSize:defersRender:)(v33, v77, (uint64_t)&v86, 1, 0);
      swift_release();
      if (!v75)
        goto LABEL_25;
      goto LABEL_44;
    }
    v64 = v86;
    v35 = DWORD2(v86);
    v36 = DWORD2(v87);
    v37 = v88;
    v62 = v87;
    v38 = v89;
    v60 = *((_QWORD *)&v90 + 1);
    v61 = v90;
    v39 = v91;
    v94 = v88;
    v95 = v89;
    v96 = v90;
    v97 = v91;
    v92 = v86;
    v93 = v87;
    outlined retain of _ViewInputs((uint64_t)&v86);
    v40 = _ViewInputs.geometryTransaction()();
    v41 = swift_getKeyPath();
    v42 = specialized CachedEnvironment.attribute<A>(keyPath:)(v41);
    swift_release();
    if ((*(_BYTE *)(v14 + 81) & 1) == 0
      && (_DWORD)v61 == *(_DWORD *)(v14 + 32)
      && (_DWORD)v60 == *(_DWORD *)(v14 + 36)
      && v42 == *(_DWORD *)(v14 + 40)
      && v35 == *(_DWORD *)(v14 + 44)
      && v40 == *(_DWORD *)(v14 + 48)
      && v36 == *(_DWORD *)(v14 + 52))
    {
      if ((*(_BYTE *)(v14 + 64) & 1) == 0)
      {
        LODWORD(v12) = *(_DWORD *)(v14 + 60);
LABEL_42:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        goto LABEL_43;
      }
    }
    else
    {
      *(_QWORD *)&v92 = v64;
      *(_QWORD *)&v93 = v62;
      DWORD2(v92) = v35;
      *((_QWORD *)&v93 + 1) = __PAIR64__(v40, v36);
      v94 = v37;
      v95 = v38;
      *(_QWORD *)&v96 = v61;
      *((_QWORD *)&v96 + 1) = v60;
      v97 = v39;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v92, v42, (uint64_t)&v80);
      v43 = v81;
      v44 = v82;
      v45 = v83;
      v46 = v82 | ((unint64_t)DWORD1(v82) << 32);
      v47 = BYTE8(v82) | ((unint64_t)HIDWORD(v82) << 32);
      *(_OWORD *)(v14 + 32) = v80;
      *(_OWORD *)(v14 + 48) = v43;
      *(_QWORD *)(v14 + 64) = v46;
      *(_QWORD *)(v14 + 72) = v47;
      *(_WORD *)(v14 + 80) = v45;
      if (v44 != 1)
      {
        v12 = HIDWORD(*((_QWORD *)&v43 + 1));
        goto LABEL_42;
      }
    }
    LODWORD(v12) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v14 + 60) = v12;
    *(_BYTE *)(v14 + 64) = 0;
    goto LABEL_42;
  }
LABEL_20:
  v21 = *MEMORY[0x24BE096C0];
  *(_QWORD *)&v79 = MEMORY[0x24BEE4AF8];
  DWORD2(v79) = 0;
  HIDWORD(v79) = v21;
  if (v75)
    goto LABEL_44;
LABEL_25:
  if ((v74 & 2) != 0)
  {
    LODWORD(v80) = v77;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for LeafLayoutComputer<Image.Resolved>, (uint64_t)&type metadata for Image.Resolved, (uint64_t)&protocol witness table for Image.Resolved, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for LeafLayoutComputer);
    lazy protocol witness table accessor for type LeafLayoutComputer<Image.Resolved> and conformance LeafLayoutComputer<A>();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v31 = Attribute.init<A>(body:value:flags:update:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    HIDWORD(v79) = v31;
    v32 = DWORD2(v79);
    if ((BYTE8(v79) & 0x80) == 0)
LABEL_45:
      DWORD2(v79) = v32 | 0x80;
  }
LABEL_46:
  outlined retain of _ViewInputs((uint64_t)&v86);
  outlined retain of _GraphInputs((uint64_t)&v98);
  v50 = swift_retain();
  v51 = specialized find<A>(_:key:)(v50);
  if (v51)
  {
    v52 = *(_QWORD *)(v51 + 72);
    v53 = *(_QWORD *)(v51 + 80);
    swift_release();
    outlined release of _GraphInputs((uint64_t)&v98);
    outlined release of _ViewInputs((uint64_t)&v86);
    if (v52)
    {
      v82 = v88;
      v83 = v89;
      v84 = v90;
      v85 = v91;
      v80 = v86;
      v81 = v87;
      if (((*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v53 + 8))(&v80, v52, v53) & 1) != 0)
      {
        v54 = swift_getKeyPath();
        swift_beginAccess();
        outlined retain of _GraphInputs((uint64_t)&v98);
        v55 = specialized CachedEnvironment.attribute<A>(keyPath:)(v54);
        swift_endAccess();
        outlined release of _GraphInputs((uint64_t)&v98);
        swift_release();
        v56 = swift_getKeyPath();
        swift_beginAccess();
        outlined retain of _GraphInputs((uint64_t)&v98);
        v57 = specialized CachedEnvironment.attribute<A>(keyPath:)(v56);
        swift_endAccess();
        outlined release of _GraphInputs((uint64_t)&v98);
        swift_release();
        *(_QWORD *)&v80 = __PAIR64__(v55, v77);
        DWORD2(v80) = v57;
        protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
        lazy protocol witness table accessor for type Image.Resolved.MakeRepresentableContext and conformance Image.Resolved.MakeRepresentableContext();
        v58 = Attribute.init<A>(body:value:flags:update:)();
        v82 = v88;
        v83 = v89;
        v84 = v90;
        v85 = v91;
        v80 = v86;
        v81 = v87;
        (*(void (**)(__int128 *, uint64_t, __int128 *, uint64_t, uint64_t))(v53 + 16))(&v80, v58, &v79, v52, v53);
      }
    }
  }
  else
  {
    swift_release();
    outlined release of _GraphInputs((uint64_t)&v98);
    outlined release of _ViewInputs((uint64_t)&v86);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  *a3 = v79;
  return result;
}

uint64_t specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  __int128 v16;
  char v17;
  int v18;
  int OffsetAttribute2;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  int v29;
  uint64_t KeyPath;
  int v31;
  int v32;
  uint64_t v33;
  unsigned __int8 v34;
  unint64_t v35;
  unint64_t v36;
  __int128 v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  int v45;
  uint64_t v46;
  int v47;
  __int128 v48;
  uint64_t v49;
  unsigned __int8 v50;
  unint64_t v51;
  unint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  int v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  unsigned __int8 v77;
  unint64_t v78;
  unint64_t v79;
  __int128 v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  int v88;
  uint64_t v89;
  int v90;
  __int128 v91;
  uint64_t v92;
  unsigned __int8 v93;
  unint64_t v94;
  unint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t result;
  uint64_t v106;
  void (*v107)(_BYTE *, _QWORD);
  int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  Swift::UInt32 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  _QWORD *v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  __int128 v147;
  __int128 v148;
  unsigned __int8 v149;
  unsigned int v150;
  unsigned __int8 v151;
  unsigned int v152;
  unsigned __int8 v153;
  _BYTE v154[32];
  __int128 v155;
  __int128 v156;
  __int128 v157;
  int v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  _QWORD v162[3];

  v142 = __PAIR64__(a3, a1);
  v162[1] = *MEMORY[0x24BDAC8D0];
  v8 = MEMORY[0x24BEE4AF8];
  v143 = MEMORY[0x24BEE4AF8];
  v9 = *MEMORY[0x24BE096C0];
  LODWORD(v144) = 0;
  HIDWORD(v144) = *MEMORY[0x24BE096C0];
  v145 = *(_QWORD *)(a2 + 48);
  v10 = v145;
  v146 = *(_DWORD *)(a2 + 56);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v12 = *(_QWORD *)(v145 + 16);
  if (!v12)
    goto LABEL_36;
  v13 = v11;
  v14 = (_QWORD *)(v145 + 32);
  v15 = *(_QWORD *)(v145 + 16);
  while (*v14 != v11)
  {
    v14 += 2;
    if (!--v15)
      goto LABEL_36;
  }
  v135 = ++lastIdentity;
  v16 = *(_OWORD *)(a2 + 32);
  v160 = *(_OWORD *)(a2 + 16);
  v161 = v16;
  v159 = *(_OWORD *)a2;
  v17 = BYTE4(v16);
  if ((WORD2(v16) & 0x100) != 0)
  {
    v106 = a4;
    outlined retain of _ViewInputs(a2);
    specialized _ViewInputs.subscript.getter();
    outlined release of _ViewInputs(a2);
    result = AGWeakAttributeGetAttribute();
    if ((_DWORD)result == v9)
    {
      __break(1u);
      return result;
    }
    LODWORD(v147) = v135;
    v107 = (void (*)(_BYTE *, _QWORD))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v147);
    v107(v154, 0);
    a4 = v106;
  }
  v138 = v145;
  v140 = a5;
  v18 = *(_DWORD *)(a2 + 72);
  v132 = a4;
  swift_retain();
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v20 = v160;
  v21 = (unsigned int *)(v160 + 16);
  swift_beginAccess();
  v129 = OffsetAttribute2;
  if ((v17 & 0x20) != 0)
  {
    v126 = *(_QWORD *)a2;
    v23 = *(_DWORD *)(a2 + 8);
    v24 = *(_DWORD *)(a2 + 24);
    v25 = *(_QWORD *)(a2 + 32);
    v116 = *(_QWORD *)(a2 + 40);
    v119 = *(_QWORD *)(a2 + 16);
    v114 = *(_QWORD *)(a2 + 48);
    v26 = *(_QWORD *)(a2 + 56);
    v110 = *(_QWORD *)(a2 + 72);
    v112 = *(_QWORD *)(a2 + 64);
    v108 = *(_DWORD *)(a2 + 80);
    v27 = *(_OWORD *)(a2 + 48);
    v155 = *(_OWORD *)(a2 + 32);
    v156 = v27;
    v157 = *(_OWORD *)(a2 + 64);
    v158 = *(_DWORD *)(a2 + 80);
    v28 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v154 = *(_OWORD *)a2;
    *(_OWORD *)&v154[16] = v28;
    outlined retain of _ViewInputs(a2);
    v29 = _ViewInputs.geometryTransaction()();
    KeyPath = swift_getKeyPath();
    v31 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
    swift_release();
    if ((*(_BYTE *)(v20 + 81) & 1) == 0
      && (_DWORD)v112 == *(_DWORD *)(v20 + 32)
      && (_DWORD)v110 == *(_DWORD *)(v20 + 36)
      && v31 == *(_DWORD *)(v20 + 40)
      && v23 == *(_DWORD *)(v20 + 44)
      && v29 == *(_DWORD *)(v20 + 48)
      && v24 == *(_DWORD *)(v20 + 52))
    {
      if ((*(_BYTE *)(v20 + 72) & 1) == 0)
      {
        v32 = *(_DWORD *)(v20 + 68);
        goto LABEL_20;
      }
    }
    else
    {
      *(_QWORD *)v154 = v126;
      *(_DWORD *)&v154[8] = v23;
      *(_QWORD *)&v154[16] = v119;
      *(_DWORD *)&v154[24] = v24;
      *(_DWORD *)&v154[28] = v29;
      *(_QWORD *)&v155 = v25;
      *((_QWORD *)&v155 + 1) = v116;
      *(_QWORD *)&v156 = v114;
      *((_QWORD *)&v156 + 1) = v26;
      *(_QWORD *)&v157 = v112;
      *((_QWORD *)&v157 + 1) = v110;
      v158 = v108;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(v154, v31, (uint64_t)&v147);
      v32 = v150;
      v33 = v151;
      v34 = v153;
      v35 = v149 | ((unint64_t)v150 << 32);
      v36 = v151 | ((unint64_t)v152 << 32);
      v37 = v148;
      *(_OWORD *)(v20 + 32) = v147;
      *(_OWORD *)(v20 + 48) = v37;
      *(_QWORD *)(v20 + 64) = v35;
      *(_QWORD *)(v20 + 72) = v36;
      *(_WORD *)(v20 + 80) = v34;
      if (v33 != 1)
        goto LABEL_20;
    }
    v32 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v20 + 68) = v32;
    *(_BYTE *)(v20 + 72) = 0;
LABEL_20:
    v125 = v32;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v38 = *(_DWORD *)(a2 + 8);
    v39 = *(_QWORD *)(a2 + 16);
    v40 = *(_DWORD *)(a2 + 24);
    v41 = *(_QWORD *)(a2 + 32);
    v115 = *(_QWORD *)(a2 + 40);
    v117 = *(_QWORD *)a2;
    v120 = *(_QWORD *)(a2 + 48);
    v42 = *(_QWORD *)(a2 + 56);
    v111 = *(_QWORD *)(a2 + 72);
    v113 = *(_QWORD *)(a2 + 64);
    v109 = *(_DWORD *)(a2 + 80);
    v43 = *(_OWORD *)(a2 + 48);
    v155 = *(_OWORD *)(a2 + 32);
    v156 = v43;
    v157 = *(_OWORD *)(a2 + 64);
    v158 = *(_DWORD *)(a2 + 80);
    v44 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v154 = *(_OWORD *)a2;
    *(_OWORD *)&v154[16] = v44;
    outlined retain of _ViewInputs(a2);
    v45 = _ViewInputs.geometryTransaction()();
    v46 = swift_getKeyPath();
    v47 = specialized CachedEnvironment.attribute<A>(keyPath:)(v46);
    swift_release();
    if ((*(_BYTE *)(v20 + 81) & 1) == 0
      && (_DWORD)v113 == *(_DWORD *)(v20 + 32)
      && (_DWORD)v111 == *(_DWORD *)(v20 + 36)
      && v47 == *(_DWORD *)(v20 + 40)
      && v38 == *(_DWORD *)(v20 + 44)
      && v45 == *(_DWORD *)(v20 + 48)
      && v40 == *(_DWORD *)(v20 + 52))
    {
      if ((*(_BYTE *)(v20 + 64) & 1) == 0)
      {
        LODWORD(v22) = *(_DWORD *)(v20 + 60);
        goto LABEL_31;
      }
    }
    else
    {
      *(_QWORD *)v154 = v117;
      *(_DWORD *)&v154[8] = v38;
      *(_QWORD *)&v154[16] = v39;
      *(_DWORD *)&v154[24] = v40;
      *(_DWORD *)&v154[28] = v45;
      *(_QWORD *)&v155 = v41;
      *((_QWORD *)&v155 + 1) = v115;
      *(_QWORD *)&v156 = v120;
      *((_QWORD *)&v156 + 1) = v42;
      *(_QWORD *)&v157 = v113;
      *((_QWORD *)&v157 + 1) = v111;
      v158 = v109;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(v154, v47, (uint64_t)&v147);
      v48 = v148;
      v49 = v149;
      v50 = v153;
      v51 = v149 | ((unint64_t)v150 << 32);
      v52 = v151 | ((unint64_t)v152 << 32);
      *(_OWORD *)(v20 + 32) = v147;
      *(_OWORD *)(v20 + 48) = v48;
      *(_QWORD *)(v20 + 64) = v51;
      *(_QWORD *)(v20 + 72) = v52;
      *(_WORD *)(v20 + 80) = v50;
      if (v49 != 1)
      {
        v22 = HIDWORD(*((_QWORD *)&v48 + 1));
LABEL_31:
        v21 = (unsigned int *)(v20 + 16);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        goto LABEL_32;
      }
    }
    LODWORD(v22) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v20 + 60) = v22;
    *(_BYTE *)(v20 + 64) = 0;
    goto LABEL_31;
  }
  v125 = v18;
  LODWORD(v22) = *(_DWORD *)(a2 + 64);
LABEL_32:
  swift_endAccess();
  v53 = *v21;
  v54 = v159;
  v162[0] = v159;
  outlined retain of _ViewInputs(a2);
  outlined retain of _GraphInputs((uint64_t)&v159);
  outlined retain of ViewTransform((uint64_t)v162);
  v55 = specialized find<A>(_:key:)(v54);
  if (v55)
    v56 = *(_BYTE *)(v55 + 72);
  else
    v56 = 0;
  v57 = *(_DWORD *)(a2 + 68);
  v58 = *(_DWORD *)(a2 + 60);
  v59 = *(_DWORD *)(a2 + 76);
  outlined release of ViewTransform((uint64_t)v162);
  outlined release of _GraphInputs((uint64_t)&v159);
  outlined release of _ViewInputs(a2);
  *(_QWORD *)v154 = v132;
  *(_DWORD *)&v154[8] = v135;
  *(_QWORD *)&v154[12] = v142;
  *(_DWORD *)&v154[20] = v129;
  *(_DWORD *)&v154[24] = v125;
  *(_DWORD *)&v154[28] = v22;
  *(_QWORD *)&v155 = __PAIR64__(v58, v57);
  *((_QWORD *)&v155 + 1) = __PAIR64__(v59, v53);
  LOBYTE(v156) = v56;
  WORD1(v156) = 0;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
  lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>();
  v60 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  v154[0] = 0;
  PreferencesOutputs.subscript.setter(v60, v13, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v61);
  v10 = v138;
  a5 = v140;
  v8 = MEMORY[0x24BEE4AF8];
LABEL_36:
  v62 = *(_QWORD *)(a2 + 16);
  v63 = *(_DWORD *)(a2 + 36);
  swift_beginAccess();
  if ((v63 & 0x20) != 0)
  {
    v139 = v10;
    v141 = a5;
    v65 = *(_DWORD *)(a2 + 8);
    v133 = *(_QWORD *)(a2 + 16);
    v136 = *(_QWORD *)a2;
    v66 = *(_DWORD *)(a2 + 24);
    v67 = *(_QWORD *)(a2 + 32);
    v68 = *(_QWORD *)(a2 + 48);
    v131 = *(_QWORD *)(a2 + 40);
    v69 = *(_QWORD *)(a2 + 56);
    v123 = *(_QWORD *)(a2 + 72);
    v127 = *(_QWORD *)(a2 + 64);
    v121 = *(_DWORD *)(a2 + 80);
    v70 = *(_OWORD *)(a2 + 48);
    v155 = *(_OWORD *)(a2 + 32);
    v156 = v70;
    v157 = *(_OWORD *)(a2 + 64);
    v158 = *(_DWORD *)(a2 + 80);
    v71 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v154 = *(_OWORD *)a2;
    *(_OWORD *)&v154[16] = v71;
    outlined retain of _ViewInputs(a2);
    v72 = _ViewInputs.geometryTransaction()();
    v73 = swift_getKeyPath();
    v74 = specialized CachedEnvironment.attribute<A>(keyPath:)(v73);
    swift_release();
    if ((*(_BYTE *)(v62 + 81) & 1) == 0
      && (_DWORD)v127 == *(_DWORD *)(v62 + 32)
      && (_DWORD)v123 == *(_DWORD *)(v62 + 36)
      && v74 == *(_DWORD *)(v62 + 40)
      && v65 == *(_DWORD *)(v62 + 44)
      && v72 == *(_DWORD *)(v62 + 48)
      && v66 == *(_DWORD *)(v62 + 52))
    {
      if ((*(_BYTE *)(v62 + 72) & 1) == 0)
      {
        v75 = *(_DWORD *)(v62 + 68);
LABEL_49:
        v130 = v75;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        v81 = *(_DWORD *)(a2 + 8);
        v128 = *(_QWORD *)(a2 + 16);
        v82 = *(_DWORD *)(a2 + 24);
        v83 = *(_QWORD *)(a2 + 32);
        v84 = *(_QWORD *)(a2 + 48);
        v134 = *(_QWORD *)(a2 + 40);
        v137 = *(_QWORD *)a2;
        v85 = *(_QWORD *)(a2 + 56);
        v122 = *(_QWORD *)(a2 + 72);
        v124 = *(_QWORD *)(a2 + 64);
        v118 = *(_DWORD *)(a2 + 80);
        v86 = *(_OWORD *)(a2 + 48);
        v155 = *(_OWORD *)(a2 + 32);
        v156 = v86;
        v157 = *(_OWORD *)(a2 + 64);
        v158 = *(_DWORD *)(a2 + 80);
        v87 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)v154 = *(_OWORD *)a2;
        *(_OWORD *)&v154[16] = v87;
        outlined retain of _ViewInputs(a2);
        v88 = _ViewInputs.geometryTransaction()();
        v89 = swift_getKeyPath();
        v90 = specialized CachedEnvironment.attribute<A>(keyPath:)(v89);
        swift_release();
        if ((*(_BYTE *)(v62 + 81) & 1) == 0
          && (_DWORD)v124 == *(_DWORD *)(v62 + 32)
          && (_DWORD)v122 == *(_DWORD *)(v62 + 36)
          && v90 == *(_DWORD *)(v62 + 40)
          && v81 == *(_DWORD *)(v62 + 44)
          && v88 == *(_DWORD *)(v62 + 48)
          && v82 == *(_DWORD *)(v62 + 52))
        {
          v10 = v139;
          a5 = v141;
          v8 = MEMORY[0x24BEE4AF8];
          if ((*(_BYTE *)(v62 + 64) & 1) == 0)
          {
            LODWORD(v64) = *(_DWORD *)(v62 + 60);
LABEL_61:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            goto LABEL_62;
          }
        }
        else
        {
          *(_QWORD *)v154 = v137;
          *(_DWORD *)&v154[8] = v81;
          *(_QWORD *)&v154[16] = v128;
          *(_DWORD *)&v154[24] = v82;
          *(_DWORD *)&v154[28] = v88;
          *(_QWORD *)&v155 = v83;
          *((_QWORD *)&v155 + 1) = v134;
          *(_QWORD *)&v156 = v84;
          *((_QWORD *)&v156 + 1) = v85;
          *(_QWORD *)&v157 = v124;
          *((_QWORD *)&v157 + 1) = v122;
          v158 = v118;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(v154, v90, (uint64_t)&v147);
          v91 = v148;
          v92 = v149;
          v93 = v153;
          v94 = v149 | ((unint64_t)v150 << 32);
          v95 = v151 | ((unint64_t)v152 << 32);
          *(_OWORD *)(v62 + 32) = v147;
          *(_OWORD *)(v62 + 48) = v91;
          *(_QWORD *)(v62 + 64) = v94;
          *(_QWORD *)(v62 + 72) = v95;
          *(_WORD *)(v62 + 80) = v93;
          v10 = v139;
          a5 = v141;
          v8 = MEMORY[0x24BEE4AF8];
          if (v92 != 1)
          {
            v64 = HIDWORD(*((_QWORD *)&v91 + 1));
            goto LABEL_61;
          }
        }
        LODWORD(v64) = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v62 + 60) = v64;
        *(_BYTE *)(v62 + 64) = 0;
        goto LABEL_61;
      }
    }
    else
    {
      *(_QWORD *)v154 = v136;
      *(_DWORD *)&v154[8] = v65;
      *(_QWORD *)&v154[16] = v133;
      *(_DWORD *)&v154[24] = v66;
      *(_DWORD *)&v154[28] = v72;
      *(_QWORD *)&v155 = v67;
      *((_QWORD *)&v155 + 1) = v131;
      *(_QWORD *)&v156 = v68;
      *((_QWORD *)&v156 + 1) = v69;
      *(_QWORD *)&v157 = v127;
      *((_QWORD *)&v157 + 1) = v123;
      v158 = v121;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(v154, v74, (uint64_t)&v147);
      v75 = v150;
      v76 = v151;
      v77 = v153;
      v78 = v149 | ((unint64_t)v150 << 32);
      v79 = v151 | ((unint64_t)v152 << 32);
      v80 = v148;
      *(_OWORD *)(v62 + 32) = v147;
      *(_OWORD *)(v62 + 48) = v80;
      *(_QWORD *)(v62 + 64) = v78;
      *(_QWORD *)(v62 + 72) = v79;
      *(_WORD *)(v62 + 80) = v77;
      if (v76 != 1)
        goto LABEL_49;
    }
    v75 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v62 + 68) = v75;
    *(_BYTE *)(v62 + 72) = 0;
    goto LABEL_49;
  }
  v130 = *(_DWORD *)(a2 + 72);
  LODWORD(v64) = *(_DWORD *)(a2 + 64);
LABEL_62:
  swift_endAccess();
  v96 = *(_DWORD *)(a2 + 60);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderData<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
  v97 = swift_allocObject();
  *(_OWORD *)(v97 + 40) = 0u;
  *(_OWORD *)(v97 + 56) = 0u;
  *(_OWORD *)(v97 + 72) = 0u;
  *(_OWORD *)(v97 + 88) = 0u;
  *(_OWORD *)(v97 + 104) = 0u;
  *(_OWORD *)(v97 + 120) = 0u;
  *(_QWORD *)(v97 + 136) = 0;
  *(_QWORD *)(v97 + 144) = v8;
  *(_DWORD *)(v97 + 152) = 0;
  *(_BYTE *)(v97 + 156) = 1;
  *(_QWORD *)(v97 + 24) = 0;
  *(_QWORD *)(v97 + 160) = 0;
  *(_QWORD *)(v97 + 168) = 0;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  v98 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x23B7C9E44](v98 + 200);
  v99 = *(_QWORD *)(v98 + 208);
  swift_release();
  swift_beginAccess();
  *(_QWORD *)(v97 + 24) = v99;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  if (v12)
  {
    v101 = v100;
    v102 = (_QWORD *)(v10 + 32);
    while (*v102 != v100)
    {
      v102 += 2;
      if (!--v12)
        goto LABEL_68;
    }
    *(_QWORD *)v154 = v142;
    *(_DWORD *)&v154[8] = v130;
    *(_DWORD *)&v154[12] = v64;
    *(_DWORD *)&v154[16] = v96;
    *(_QWORD *)&v154[24] = v97;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v145);
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>();
    swift_retain();
    v103 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v154[0] = 0;
    PreferencesOutputs.subscript.setter(v103, v101, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v104);
    outlined release of LinearGradient((uint64_t)&v145);
  }
LABEL_68:
  result = swift_release();
  *a5 = v143;
  a5[1] = v144;
  return result;
}

{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  __int128 v16;
  char v17;
  int v18;
  int OffsetAttribute2;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  int v29;
  uint64_t KeyPath;
  int v31;
  int v32;
  uint64_t v33;
  unsigned __int8 v34;
  unint64_t v35;
  unint64_t v36;
  __int128 v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  int v45;
  uint64_t v46;
  int v47;
  __int128 v48;
  uint64_t v49;
  unsigned __int8 v50;
  unint64_t v51;
  unint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  int v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  unsigned __int8 v77;
  unint64_t v78;
  unint64_t v79;
  __int128 v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  int v88;
  uint64_t v89;
  int v90;
  __int128 v91;
  uint64_t v92;
  unsigned __int8 v93;
  unint64_t v94;
  unint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t result;
  uint64_t v106;
  void (*v107)(_BYTE *, _QWORD);
  int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  Swift::UInt32 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  _QWORD *v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  __int128 v147;
  __int128 v148;
  unsigned __int8 v149;
  unsigned int v150;
  unsigned __int8 v151;
  unsigned int v152;
  unsigned __int8 v153;
  _BYTE v154[32];
  __int128 v155;
  __int128 v156;
  __int128 v157;
  int v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  _QWORD v162[3];

  v142 = __PAIR64__(a3, a1);
  v162[1] = *MEMORY[0x24BDAC8D0];
  v8 = MEMORY[0x24BEE4AF8];
  v143 = MEMORY[0x24BEE4AF8];
  v9 = *MEMORY[0x24BE096C0];
  LODWORD(v144) = 0;
  HIDWORD(v144) = *MEMORY[0x24BE096C0];
  v145 = *(_QWORD *)(a2 + 48);
  v10 = v145;
  v146 = *(_DWORD *)(a2 + 56);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v12 = *(_QWORD *)(v145 + 16);
  if (!v12)
    goto LABEL_36;
  v13 = v11;
  v14 = (_QWORD *)(v145 + 32);
  v15 = *(_QWORD *)(v145 + 16);
  while (*v14 != v11)
  {
    v14 += 2;
    if (!--v15)
      goto LABEL_36;
  }
  v135 = ++lastIdentity;
  v16 = *(_OWORD *)(a2 + 32);
  v160 = *(_OWORD *)(a2 + 16);
  v161 = v16;
  v159 = *(_OWORD *)a2;
  v17 = BYTE4(v16);
  if ((WORD2(v16) & 0x100) != 0)
  {
    v106 = a4;
    outlined retain of _ViewInputs(a2);
    specialized _ViewInputs.subscript.getter();
    outlined release of _ViewInputs(a2);
    result = AGWeakAttributeGetAttribute();
    if ((_DWORD)result == v9)
    {
      __break(1u);
      return result;
    }
    LODWORD(v147) = v135;
    v107 = (void (*)(_BYTE *, _QWORD))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v147);
    v107(v154, 0);
    a4 = v106;
  }
  v138 = v145;
  v140 = a5;
  v18 = *(_DWORD *)(a2 + 72);
  v132 = a4;
  swift_retain();
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v20 = v160;
  v21 = (unsigned int *)(v160 + 16);
  swift_beginAccess();
  v129 = OffsetAttribute2;
  if ((v17 & 0x20) != 0)
  {
    v126 = *(_QWORD *)a2;
    v23 = *(_DWORD *)(a2 + 8);
    v24 = *(_DWORD *)(a2 + 24);
    v25 = *(_QWORD *)(a2 + 32);
    v116 = *(_QWORD *)(a2 + 40);
    v119 = *(_QWORD *)(a2 + 16);
    v114 = *(_QWORD *)(a2 + 48);
    v26 = *(_QWORD *)(a2 + 56);
    v110 = *(_QWORD *)(a2 + 72);
    v112 = *(_QWORD *)(a2 + 64);
    v108 = *(_DWORD *)(a2 + 80);
    v27 = *(_OWORD *)(a2 + 48);
    v155 = *(_OWORD *)(a2 + 32);
    v156 = v27;
    v157 = *(_OWORD *)(a2 + 64);
    v158 = *(_DWORD *)(a2 + 80);
    v28 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v154 = *(_OWORD *)a2;
    *(_OWORD *)&v154[16] = v28;
    outlined retain of _ViewInputs(a2);
    v29 = _ViewInputs.geometryTransaction()();
    KeyPath = swift_getKeyPath();
    v31 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
    swift_release();
    if ((*(_BYTE *)(v20 + 81) & 1) == 0
      && (_DWORD)v112 == *(_DWORD *)(v20 + 32)
      && (_DWORD)v110 == *(_DWORD *)(v20 + 36)
      && v31 == *(_DWORD *)(v20 + 40)
      && v23 == *(_DWORD *)(v20 + 44)
      && v29 == *(_DWORD *)(v20 + 48)
      && v24 == *(_DWORD *)(v20 + 52))
    {
      if ((*(_BYTE *)(v20 + 72) & 1) == 0)
      {
        v32 = *(_DWORD *)(v20 + 68);
        goto LABEL_20;
      }
    }
    else
    {
      *(_QWORD *)v154 = v126;
      *(_DWORD *)&v154[8] = v23;
      *(_QWORD *)&v154[16] = v119;
      *(_DWORD *)&v154[24] = v24;
      *(_DWORD *)&v154[28] = v29;
      *(_QWORD *)&v155 = v25;
      *((_QWORD *)&v155 + 1) = v116;
      *(_QWORD *)&v156 = v114;
      *((_QWORD *)&v156 + 1) = v26;
      *(_QWORD *)&v157 = v112;
      *((_QWORD *)&v157 + 1) = v110;
      v158 = v108;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(v154, v31, (uint64_t)&v147);
      v32 = v150;
      v33 = v151;
      v34 = v153;
      v35 = v149 | ((unint64_t)v150 << 32);
      v36 = v151 | ((unint64_t)v152 << 32);
      v37 = v148;
      *(_OWORD *)(v20 + 32) = v147;
      *(_OWORD *)(v20 + 48) = v37;
      *(_QWORD *)(v20 + 64) = v35;
      *(_QWORD *)(v20 + 72) = v36;
      *(_WORD *)(v20 + 80) = v34;
      if (v33 != 1)
        goto LABEL_20;
    }
    v32 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v20 + 68) = v32;
    *(_BYTE *)(v20 + 72) = 0;
LABEL_20:
    v125 = v32;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v38 = *(_DWORD *)(a2 + 8);
    v39 = *(_QWORD *)(a2 + 16);
    v40 = *(_DWORD *)(a2 + 24);
    v41 = *(_QWORD *)(a2 + 32);
    v115 = *(_QWORD *)(a2 + 40);
    v117 = *(_QWORD *)a2;
    v120 = *(_QWORD *)(a2 + 48);
    v42 = *(_QWORD *)(a2 + 56);
    v111 = *(_QWORD *)(a2 + 72);
    v113 = *(_QWORD *)(a2 + 64);
    v109 = *(_DWORD *)(a2 + 80);
    v43 = *(_OWORD *)(a2 + 48);
    v155 = *(_OWORD *)(a2 + 32);
    v156 = v43;
    v157 = *(_OWORD *)(a2 + 64);
    v158 = *(_DWORD *)(a2 + 80);
    v44 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v154 = *(_OWORD *)a2;
    *(_OWORD *)&v154[16] = v44;
    outlined retain of _ViewInputs(a2);
    v45 = _ViewInputs.geometryTransaction()();
    v46 = swift_getKeyPath();
    v47 = specialized CachedEnvironment.attribute<A>(keyPath:)(v46);
    swift_release();
    if ((*(_BYTE *)(v20 + 81) & 1) == 0
      && (_DWORD)v113 == *(_DWORD *)(v20 + 32)
      && (_DWORD)v111 == *(_DWORD *)(v20 + 36)
      && v47 == *(_DWORD *)(v20 + 40)
      && v38 == *(_DWORD *)(v20 + 44)
      && v45 == *(_DWORD *)(v20 + 48)
      && v40 == *(_DWORD *)(v20 + 52))
    {
      if ((*(_BYTE *)(v20 + 64) & 1) == 0)
      {
        LODWORD(v22) = *(_DWORD *)(v20 + 60);
        goto LABEL_31;
      }
    }
    else
    {
      *(_QWORD *)v154 = v117;
      *(_DWORD *)&v154[8] = v38;
      *(_QWORD *)&v154[16] = v39;
      *(_DWORD *)&v154[24] = v40;
      *(_DWORD *)&v154[28] = v45;
      *(_QWORD *)&v155 = v41;
      *((_QWORD *)&v155 + 1) = v115;
      *(_QWORD *)&v156 = v120;
      *((_QWORD *)&v156 + 1) = v42;
      *(_QWORD *)&v157 = v113;
      *((_QWORD *)&v157 + 1) = v111;
      v158 = v109;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(v154, v47, (uint64_t)&v147);
      v48 = v148;
      v49 = v149;
      v50 = v153;
      v51 = v149 | ((unint64_t)v150 << 32);
      v52 = v151 | ((unint64_t)v152 << 32);
      *(_OWORD *)(v20 + 32) = v147;
      *(_OWORD *)(v20 + 48) = v48;
      *(_QWORD *)(v20 + 64) = v51;
      *(_QWORD *)(v20 + 72) = v52;
      *(_WORD *)(v20 + 80) = v50;
      if (v49 != 1)
      {
        v22 = HIDWORD(*((_QWORD *)&v48 + 1));
LABEL_31:
        v21 = (unsigned int *)(v20 + 16);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        goto LABEL_32;
      }
    }
    LODWORD(v22) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v20 + 60) = v22;
    *(_BYTE *)(v20 + 64) = 0;
    goto LABEL_31;
  }
  v125 = v18;
  LODWORD(v22) = *(_DWORD *)(a2 + 64);
LABEL_32:
  swift_endAccess();
  v53 = *v21;
  v54 = v159;
  v162[0] = v159;
  outlined retain of _ViewInputs(a2);
  outlined retain of _GraphInputs((uint64_t)&v159);
  outlined retain of ViewTransform((uint64_t)v162);
  v55 = specialized find<A>(_:key:)(v54);
  if (v55)
    v56 = *(_BYTE *)(v55 + 72);
  else
    v56 = 0;
  v57 = *(_DWORD *)(a2 + 68);
  v58 = *(_DWORD *)(a2 + 60);
  v59 = *(_DWORD *)(a2 + 76);
  outlined release of ViewTransform((uint64_t)v162);
  outlined release of _GraphInputs((uint64_t)&v159);
  outlined release of _ViewInputs(a2);
  *(_QWORD *)v154 = v132;
  *(_DWORD *)&v154[8] = v135;
  *(_QWORD *)&v154[12] = v142;
  *(_DWORD *)&v154[20] = v129;
  *(_DWORD *)&v154[24] = v125;
  *(_DWORD *)&v154[28] = v22;
  *(_QWORD *)&v155 = __PAIR64__(v58, v57);
  *((_QWORD *)&v155 + 1) = __PAIR64__(v59, v53);
  LOBYTE(v156) = v56;
  WORD1(v156) = 0;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<CombinedContentShape, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<CombinedContentShape, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
  lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<CombinedContentShape, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>();
  v60 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  v154[0] = 0;
  PreferencesOutputs.subscript.setter(v60, v13, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v61);
  v10 = v138;
  a5 = v140;
  v8 = MEMORY[0x24BEE4AF8];
LABEL_36:
  v62 = *(_QWORD *)(a2 + 16);
  v63 = *(_DWORD *)(a2 + 36);
  swift_beginAccess();
  if ((v63 & 0x20) != 0)
  {
    v139 = v10;
    v141 = a5;
    v65 = *(_DWORD *)(a2 + 8);
    v133 = *(_QWORD *)(a2 + 16);
    v136 = *(_QWORD *)a2;
    v66 = *(_DWORD *)(a2 + 24);
    v67 = *(_QWORD *)(a2 + 32);
    v68 = *(_QWORD *)(a2 + 48);
    v131 = *(_QWORD *)(a2 + 40);
    v69 = *(_QWORD *)(a2 + 56);
    v123 = *(_QWORD *)(a2 + 72);
    v127 = *(_QWORD *)(a2 + 64);
    v121 = *(_DWORD *)(a2 + 80);
    v70 = *(_OWORD *)(a2 + 48);
    v155 = *(_OWORD *)(a2 + 32);
    v156 = v70;
    v157 = *(_OWORD *)(a2 + 64);
    v158 = *(_DWORD *)(a2 + 80);
    v71 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v154 = *(_OWORD *)a2;
    *(_OWORD *)&v154[16] = v71;
    outlined retain of _ViewInputs(a2);
    v72 = _ViewInputs.geometryTransaction()();
    v73 = swift_getKeyPath();
    v74 = specialized CachedEnvironment.attribute<A>(keyPath:)(v73);
    swift_release();
    if ((*(_BYTE *)(v62 + 81) & 1) == 0
      && (_DWORD)v127 == *(_DWORD *)(v62 + 32)
      && (_DWORD)v123 == *(_DWORD *)(v62 + 36)
      && v74 == *(_DWORD *)(v62 + 40)
      && v65 == *(_DWORD *)(v62 + 44)
      && v72 == *(_DWORD *)(v62 + 48)
      && v66 == *(_DWORD *)(v62 + 52))
    {
      if ((*(_BYTE *)(v62 + 72) & 1) == 0)
      {
        v75 = *(_DWORD *)(v62 + 68);
LABEL_49:
        v130 = v75;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        v81 = *(_DWORD *)(a2 + 8);
        v128 = *(_QWORD *)(a2 + 16);
        v82 = *(_DWORD *)(a2 + 24);
        v83 = *(_QWORD *)(a2 + 32);
        v84 = *(_QWORD *)(a2 + 48);
        v134 = *(_QWORD *)(a2 + 40);
        v137 = *(_QWORD *)a2;
        v85 = *(_QWORD *)(a2 + 56);
        v122 = *(_QWORD *)(a2 + 72);
        v124 = *(_QWORD *)(a2 + 64);
        v118 = *(_DWORD *)(a2 + 80);
        v86 = *(_OWORD *)(a2 + 48);
        v155 = *(_OWORD *)(a2 + 32);
        v156 = v86;
        v157 = *(_OWORD *)(a2 + 64);
        v158 = *(_DWORD *)(a2 + 80);
        v87 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)v154 = *(_OWORD *)a2;
        *(_OWORD *)&v154[16] = v87;
        outlined retain of _ViewInputs(a2);
        v88 = _ViewInputs.geometryTransaction()();
        v89 = swift_getKeyPath();
        v90 = specialized CachedEnvironment.attribute<A>(keyPath:)(v89);
        swift_release();
        if ((*(_BYTE *)(v62 + 81) & 1) == 0
          && (_DWORD)v124 == *(_DWORD *)(v62 + 32)
          && (_DWORD)v122 == *(_DWORD *)(v62 + 36)
          && v90 == *(_DWORD *)(v62 + 40)
          && v81 == *(_DWORD *)(v62 + 44)
          && v88 == *(_DWORD *)(v62 + 48)
          && v82 == *(_DWORD *)(v62 + 52))
        {
          v10 = v139;
          a5 = v141;
          v8 = MEMORY[0x24BEE4AF8];
          if ((*(_BYTE *)(v62 + 64) & 1) == 0)
          {
            LODWORD(v64) = *(_DWORD *)(v62 + 60);
LABEL_61:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            goto LABEL_62;
          }
        }
        else
        {
          *(_QWORD *)v154 = v137;
          *(_DWORD *)&v154[8] = v81;
          *(_QWORD *)&v154[16] = v128;
          *(_DWORD *)&v154[24] = v82;
          *(_DWORD *)&v154[28] = v88;
          *(_QWORD *)&v155 = v83;
          *((_QWORD *)&v155 + 1) = v134;
          *(_QWORD *)&v156 = v84;
          *((_QWORD *)&v156 + 1) = v85;
          *(_QWORD *)&v157 = v124;
          *((_QWORD *)&v157 + 1) = v122;
          v158 = v118;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(v154, v90, (uint64_t)&v147);
          v91 = v148;
          v92 = v149;
          v93 = v153;
          v94 = v149 | ((unint64_t)v150 << 32);
          v95 = v151 | ((unint64_t)v152 << 32);
          *(_OWORD *)(v62 + 32) = v147;
          *(_OWORD *)(v62 + 48) = v91;
          *(_QWORD *)(v62 + 64) = v94;
          *(_QWORD *)(v62 + 72) = v95;
          *(_WORD *)(v62 + 80) = v93;
          v10 = v139;
          a5 = v141;
          v8 = MEMORY[0x24BEE4AF8];
          if (v92 != 1)
          {
            v64 = HIDWORD(*((_QWORD *)&v91 + 1));
            goto LABEL_61;
          }
        }
        LODWORD(v64) = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v62 + 60) = v64;
        *(_BYTE *)(v62 + 64) = 0;
        goto LABEL_61;
      }
    }
    else
    {
      *(_QWORD *)v154 = v136;
      *(_DWORD *)&v154[8] = v65;
      *(_QWORD *)&v154[16] = v133;
      *(_DWORD *)&v154[24] = v66;
      *(_DWORD *)&v154[28] = v72;
      *(_QWORD *)&v155 = v67;
      *((_QWORD *)&v155 + 1) = v131;
      *(_QWORD *)&v156 = v68;
      *((_QWORD *)&v156 + 1) = v69;
      *(_QWORD *)&v157 = v127;
      *((_QWORD *)&v157 + 1) = v123;
      v158 = v121;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(v154, v74, (uint64_t)&v147);
      v75 = v150;
      v76 = v151;
      v77 = v153;
      v78 = v149 | ((unint64_t)v150 << 32);
      v79 = v151 | ((unint64_t)v152 << 32);
      v80 = v148;
      *(_OWORD *)(v62 + 32) = v147;
      *(_OWORD *)(v62 + 48) = v80;
      *(_QWORD *)(v62 + 64) = v78;
      *(_QWORD *)(v62 + 72) = v79;
      *(_WORD *)(v62 + 80) = v77;
      if (v76 != 1)
        goto LABEL_49;
    }
    v75 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v62 + 68) = v75;
    *(_BYTE *)(v62 + 72) = 0;
    goto LABEL_49;
  }
  v130 = *(_DWORD *)(a2 + 72);
  LODWORD(v64) = *(_DWORD *)(a2 + 64);
LABEL_62:
  swift_endAccess();
  v96 = *(_DWORD *)(a2 + 60);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<_ShapeView<CombinedContentShape, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderData<_ShapeView<CombinedContentShape, ForegroundStyle>>, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
  v97 = swift_allocObject();
  *(_OWORD *)(v97 + 40) = 0u;
  *(_OWORD *)(v97 + 56) = 0u;
  *(_OWORD *)(v97 + 72) = 0u;
  *(_OWORD *)(v97 + 88) = 0u;
  *(_OWORD *)(v97 + 104) = 0u;
  *(_QWORD *)(v97 + 120) = v8;
  *(_DWORD *)(v97 + 128) = 0;
  *(_BYTE *)(v97 + 132) = 1;
  *(_QWORD *)(v97 + 24) = 0;
  *(_QWORD *)(v97 + 136) = 0;
  *(_QWORD *)(v97 + 144) = 0;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  v98 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x23B7C9E44](v98 + 200);
  v99 = *(_QWORD *)(v98 + 208);
  swift_release();
  swift_beginAccess();
  *(_QWORD *)(v97 + 24) = v99;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  if (v12)
  {
    v101 = v100;
    v102 = (_QWORD *)(v10 + 32);
    while (*v102 != v100)
    {
      v102 += 2;
      if (!--v12)
        goto LABEL_68;
    }
    *(_QWORD *)v154 = v142;
    *(_DWORD *)&v154[8] = v130;
    *(_DWORD *)&v154[12] = v64;
    *(_DWORD *)&v154[16] = v96;
    *(_QWORD *)&v154[24] = v97;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v145);
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<CombinedContentShape, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<CombinedContentShape, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<CombinedContentShape, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>();
    swift_retain();
    v103 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v154[0] = 0;
    PreferencesOutputs.subscript.setter(v103, v101, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v104);
    outlined release of LinearGradient((uint64_t)&v145);
  }
LABEL_68:
  result = swift_release();
  *a5 = v143;
  a5[1] = v144;
  return result;
}

{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  __int128 v16;
  char v17;
  int v18;
  int OffsetAttribute2;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  int v29;
  uint64_t KeyPath;
  int v31;
  int v32;
  uint64_t v33;
  unsigned __int8 v34;
  unint64_t v35;
  unint64_t v36;
  __int128 v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  int v45;
  uint64_t v46;
  int v47;
  __int128 v48;
  uint64_t v49;
  unsigned __int8 v50;
  unint64_t v51;
  unint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  int v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  unsigned __int8 v77;
  unint64_t v78;
  unint64_t v79;
  __int128 v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  int v88;
  uint64_t v89;
  int v90;
  __int128 v91;
  uint64_t v92;
  unsigned __int8 v93;
  unint64_t v94;
  unint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t result;
  uint64_t v106;
  void (*v107)(_BYTE *, _QWORD);
  int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  Swift::UInt32 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  _QWORD *v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  __int128 v147;
  __int128 v148;
  unsigned __int8 v149;
  unsigned int v150;
  unsigned __int8 v151;
  unsigned int v152;
  unsigned __int8 v153;
  _BYTE v154[32];
  __int128 v155;
  __int128 v156;
  __int128 v157;
  int v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  _QWORD v162[3];

  v142 = __PAIR64__(a3, a1);
  v162[1] = *MEMORY[0x24BDAC8D0];
  v8 = MEMORY[0x24BEE4AF8];
  v143 = MEMORY[0x24BEE4AF8];
  v9 = *MEMORY[0x24BE096C0];
  LODWORD(v144) = 0;
  HIDWORD(v144) = *MEMORY[0x24BE096C0];
  v145 = *(_QWORD *)(a2 + 48);
  v10 = v145;
  v146 = *(_DWORD *)(a2 + 56);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v12 = *(_QWORD *)(v145 + 16);
  if (!v12)
    goto LABEL_36;
  v13 = v11;
  v14 = (_QWORD *)(v145 + 32);
  v15 = *(_QWORD *)(v145 + 16);
  while (*v14 != v11)
  {
    v14 += 2;
    if (!--v15)
      goto LABEL_36;
  }
  v135 = ++lastIdentity;
  v16 = *(_OWORD *)(a2 + 32);
  v160 = *(_OWORD *)(a2 + 16);
  v161 = v16;
  v159 = *(_OWORD *)a2;
  v17 = BYTE4(v16);
  if ((WORD2(v16) & 0x100) != 0)
  {
    v106 = a4;
    outlined retain of _ViewInputs(a2);
    specialized _ViewInputs.subscript.getter();
    outlined release of _ViewInputs(a2);
    result = AGWeakAttributeGetAttribute();
    if ((_DWORD)result == v9)
    {
      __break(1u);
      return result;
    }
    LODWORD(v147) = v135;
    v107 = (void (*)(_BYTE *, _QWORD))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v147);
    v107(v154, 0);
    a4 = v106;
  }
  v138 = v145;
  v140 = a5;
  v18 = *(_DWORD *)(a2 + 72);
  v132 = a4;
  swift_retain();
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v20 = v160;
  v21 = (unsigned int *)(v160 + 16);
  swift_beginAccess();
  v129 = OffsetAttribute2;
  if ((v17 & 0x20) != 0)
  {
    v126 = *(_QWORD *)a2;
    v23 = *(_DWORD *)(a2 + 8);
    v24 = *(_DWORD *)(a2 + 24);
    v25 = *(_QWORD *)(a2 + 32);
    v116 = *(_QWORD *)(a2 + 40);
    v119 = *(_QWORD *)(a2 + 16);
    v114 = *(_QWORD *)(a2 + 48);
    v26 = *(_QWORD *)(a2 + 56);
    v110 = *(_QWORD *)(a2 + 72);
    v112 = *(_QWORD *)(a2 + 64);
    v108 = *(_DWORD *)(a2 + 80);
    v27 = *(_OWORD *)(a2 + 48);
    v155 = *(_OWORD *)(a2 + 32);
    v156 = v27;
    v157 = *(_OWORD *)(a2 + 64);
    v158 = *(_DWORD *)(a2 + 80);
    v28 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v154 = *(_OWORD *)a2;
    *(_OWORD *)&v154[16] = v28;
    outlined retain of _ViewInputs(a2);
    v29 = _ViewInputs.geometryTransaction()();
    KeyPath = swift_getKeyPath();
    v31 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
    swift_release();
    if ((*(_BYTE *)(v20 + 81) & 1) == 0
      && (_DWORD)v112 == *(_DWORD *)(v20 + 32)
      && (_DWORD)v110 == *(_DWORD *)(v20 + 36)
      && v31 == *(_DWORD *)(v20 + 40)
      && v23 == *(_DWORD *)(v20 + 44)
      && v29 == *(_DWORD *)(v20 + 48)
      && v24 == *(_DWORD *)(v20 + 52))
    {
      if ((*(_BYTE *)(v20 + 72) & 1) == 0)
      {
        v32 = *(_DWORD *)(v20 + 68);
        goto LABEL_20;
      }
    }
    else
    {
      *(_QWORD *)v154 = v126;
      *(_DWORD *)&v154[8] = v23;
      *(_QWORD *)&v154[16] = v119;
      *(_DWORD *)&v154[24] = v24;
      *(_DWORD *)&v154[28] = v29;
      *(_QWORD *)&v155 = v25;
      *((_QWORD *)&v155 + 1) = v116;
      *(_QWORD *)&v156 = v114;
      *((_QWORD *)&v156 + 1) = v26;
      *(_QWORD *)&v157 = v112;
      *((_QWORD *)&v157 + 1) = v110;
      v158 = v108;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(v154, v31, (uint64_t)&v147);
      v32 = v150;
      v33 = v151;
      v34 = v153;
      v35 = v149 | ((unint64_t)v150 << 32);
      v36 = v151 | ((unint64_t)v152 << 32);
      v37 = v148;
      *(_OWORD *)(v20 + 32) = v147;
      *(_OWORD *)(v20 + 48) = v37;
      *(_QWORD *)(v20 + 64) = v35;
      *(_QWORD *)(v20 + 72) = v36;
      *(_WORD *)(v20 + 80) = v34;
      if (v33 != 1)
        goto LABEL_20;
    }
    v32 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v20 + 68) = v32;
    *(_BYTE *)(v20 + 72) = 0;
LABEL_20:
    v125 = v32;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v38 = *(_DWORD *)(a2 + 8);
    v39 = *(_QWORD *)(a2 + 16);
    v40 = *(_DWORD *)(a2 + 24);
    v41 = *(_QWORD *)(a2 + 32);
    v115 = *(_QWORD *)(a2 + 40);
    v117 = *(_QWORD *)a2;
    v120 = *(_QWORD *)(a2 + 48);
    v42 = *(_QWORD *)(a2 + 56);
    v111 = *(_QWORD *)(a2 + 72);
    v113 = *(_QWORD *)(a2 + 64);
    v109 = *(_DWORD *)(a2 + 80);
    v43 = *(_OWORD *)(a2 + 48);
    v155 = *(_OWORD *)(a2 + 32);
    v156 = v43;
    v157 = *(_OWORD *)(a2 + 64);
    v158 = *(_DWORD *)(a2 + 80);
    v44 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v154 = *(_OWORD *)a2;
    *(_OWORD *)&v154[16] = v44;
    outlined retain of _ViewInputs(a2);
    v45 = _ViewInputs.geometryTransaction()();
    v46 = swift_getKeyPath();
    v47 = specialized CachedEnvironment.attribute<A>(keyPath:)(v46);
    swift_release();
    if ((*(_BYTE *)(v20 + 81) & 1) == 0
      && (_DWORD)v113 == *(_DWORD *)(v20 + 32)
      && (_DWORD)v111 == *(_DWORD *)(v20 + 36)
      && v47 == *(_DWORD *)(v20 + 40)
      && v38 == *(_DWORD *)(v20 + 44)
      && v45 == *(_DWORD *)(v20 + 48)
      && v40 == *(_DWORD *)(v20 + 52))
    {
      if ((*(_BYTE *)(v20 + 64) & 1) == 0)
      {
        LODWORD(v22) = *(_DWORD *)(v20 + 60);
        goto LABEL_31;
      }
    }
    else
    {
      *(_QWORD *)v154 = v117;
      *(_DWORD *)&v154[8] = v38;
      *(_QWORD *)&v154[16] = v39;
      *(_DWORD *)&v154[24] = v40;
      *(_DWORD *)&v154[28] = v45;
      *(_QWORD *)&v155 = v41;
      *((_QWORD *)&v155 + 1) = v115;
      *(_QWORD *)&v156 = v120;
      *((_QWORD *)&v156 + 1) = v42;
      *(_QWORD *)&v157 = v113;
      *((_QWORD *)&v157 + 1) = v111;
      v158 = v109;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(v154, v47, (uint64_t)&v147);
      v48 = v148;
      v49 = v149;
      v50 = v153;
      v51 = v149 | ((unint64_t)v150 << 32);
      v52 = v151 | ((unint64_t)v152 << 32);
      *(_OWORD *)(v20 + 32) = v147;
      *(_OWORD *)(v20 + 48) = v48;
      *(_QWORD *)(v20 + 64) = v51;
      *(_QWORD *)(v20 + 72) = v52;
      *(_WORD *)(v20 + 80) = v50;
      if (v49 != 1)
      {
        v22 = HIDWORD(*((_QWORD *)&v48 + 1));
LABEL_31:
        v21 = (unsigned int *)(v20 + 16);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        goto LABEL_32;
      }
    }
    LODWORD(v22) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v20 + 60) = v22;
    *(_BYTE *)(v20 + 64) = 0;
    goto LABEL_31;
  }
  v125 = v18;
  LODWORD(v22) = *(_DWORD *)(a2 + 64);
LABEL_32:
  swift_endAccess();
  v53 = *v21;
  v54 = v159;
  v162[0] = v159;
  outlined retain of _ViewInputs(a2);
  outlined retain of _GraphInputs((uint64_t)&v159);
  outlined retain of ViewTransform((uint64_t)v162);
  v55 = specialized find<A>(_:key:)(v54);
  if (v55)
    v56 = *(_BYTE *)(v55 + 72);
  else
    v56 = 0;
  v57 = *(_DWORD *)(a2 + 68);
  v58 = *(_DWORD *)(a2 + 60);
  v59 = *(_DWORD *)(a2 + 76);
  outlined release of ViewTransform((uint64_t)v162);
  outlined release of _GraphInputs((uint64_t)&v159);
  outlined release of _ViewInputs(a2);
  *(_QWORD *)v154 = v132;
  *(_DWORD *)&v154[8] = v135;
  *(_QWORD *)&v154[12] = v142;
  *(_DWORD *)&v154[20] = v129;
  *(_DWORD *)&v154[24] = v125;
  *(_DWORD *)&v154[28] = v22;
  *(_QWORD *)&v155 = __PAIR64__(v58, v57);
  *((_QWORD *)&v155 + 1) = __PAIR64__(v59, v53);
  LOBYTE(v156) = v56;
  WORD1(v156) = 0;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ShapeStyledDisplayList<StyledTextContentView>, (uint64_t)&type metadata for StyledTextContentView, (uint64_t)&protocol witness table for StyledTextContentView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
  lazy protocol witness table accessor for type ShapeStyledDisplayList<StyledTextContentView> and conformance ShapeStyledDisplayList<A>();
  v60 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  v154[0] = 0;
  PreferencesOutputs.subscript.setter(v60, v13, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v61);
  v10 = v138;
  a5 = v140;
  v8 = MEMORY[0x24BEE4AF8];
LABEL_36:
  v62 = *(_QWORD *)(a2 + 16);
  v63 = *(_DWORD *)(a2 + 36);
  swift_beginAccess();
  if ((v63 & 0x20) != 0)
  {
    v139 = v10;
    v141 = a5;
    v65 = *(_DWORD *)(a2 + 8);
    v133 = *(_QWORD *)(a2 + 16);
    v136 = *(_QWORD *)a2;
    v66 = *(_DWORD *)(a2 + 24);
    v67 = *(_QWORD *)(a2 + 32);
    v68 = *(_QWORD *)(a2 + 48);
    v131 = *(_QWORD *)(a2 + 40);
    v69 = *(_QWORD *)(a2 + 56);
    v123 = *(_QWORD *)(a2 + 72);
    v127 = *(_QWORD *)(a2 + 64);
    v121 = *(_DWORD *)(a2 + 80);
    v70 = *(_OWORD *)(a2 + 48);
    v155 = *(_OWORD *)(a2 + 32);
    v156 = v70;
    v157 = *(_OWORD *)(a2 + 64);
    v158 = *(_DWORD *)(a2 + 80);
    v71 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v154 = *(_OWORD *)a2;
    *(_OWORD *)&v154[16] = v71;
    outlined retain of _ViewInputs(a2);
    v72 = _ViewInputs.geometryTransaction()();
    v73 = swift_getKeyPath();
    v74 = specialized CachedEnvironment.attribute<A>(keyPath:)(v73);
    swift_release();
    if ((*(_BYTE *)(v62 + 81) & 1) == 0
      && (_DWORD)v127 == *(_DWORD *)(v62 + 32)
      && (_DWORD)v123 == *(_DWORD *)(v62 + 36)
      && v74 == *(_DWORD *)(v62 + 40)
      && v65 == *(_DWORD *)(v62 + 44)
      && v72 == *(_DWORD *)(v62 + 48)
      && v66 == *(_DWORD *)(v62 + 52))
    {
      if ((*(_BYTE *)(v62 + 72) & 1) == 0)
      {
        v75 = *(_DWORD *)(v62 + 68);
LABEL_49:
        v130 = v75;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        v81 = *(_DWORD *)(a2 + 8);
        v128 = *(_QWORD *)(a2 + 16);
        v82 = *(_DWORD *)(a2 + 24);
        v83 = *(_QWORD *)(a2 + 32);
        v84 = *(_QWORD *)(a2 + 48);
        v134 = *(_QWORD *)(a2 + 40);
        v137 = *(_QWORD *)a2;
        v85 = *(_QWORD *)(a2 + 56);
        v122 = *(_QWORD *)(a2 + 72);
        v124 = *(_QWORD *)(a2 + 64);
        v118 = *(_DWORD *)(a2 + 80);
        v86 = *(_OWORD *)(a2 + 48);
        v155 = *(_OWORD *)(a2 + 32);
        v156 = v86;
        v157 = *(_OWORD *)(a2 + 64);
        v158 = *(_DWORD *)(a2 + 80);
        v87 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)v154 = *(_OWORD *)a2;
        *(_OWORD *)&v154[16] = v87;
        outlined retain of _ViewInputs(a2);
        v88 = _ViewInputs.geometryTransaction()();
        v89 = swift_getKeyPath();
        v90 = specialized CachedEnvironment.attribute<A>(keyPath:)(v89);
        swift_release();
        if ((*(_BYTE *)(v62 + 81) & 1) == 0
          && (_DWORD)v124 == *(_DWORD *)(v62 + 32)
          && (_DWORD)v122 == *(_DWORD *)(v62 + 36)
          && v90 == *(_DWORD *)(v62 + 40)
          && v81 == *(_DWORD *)(v62 + 44)
          && v88 == *(_DWORD *)(v62 + 48)
          && v82 == *(_DWORD *)(v62 + 52))
        {
          v10 = v139;
          a5 = v141;
          v8 = MEMORY[0x24BEE4AF8];
          if ((*(_BYTE *)(v62 + 64) & 1) == 0)
          {
            LODWORD(v64) = *(_DWORD *)(v62 + 60);
LABEL_61:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            goto LABEL_62;
          }
        }
        else
        {
          *(_QWORD *)v154 = v137;
          *(_DWORD *)&v154[8] = v81;
          *(_QWORD *)&v154[16] = v128;
          *(_DWORD *)&v154[24] = v82;
          *(_DWORD *)&v154[28] = v88;
          *(_QWORD *)&v155 = v83;
          *((_QWORD *)&v155 + 1) = v134;
          *(_QWORD *)&v156 = v84;
          *((_QWORD *)&v156 + 1) = v85;
          *(_QWORD *)&v157 = v124;
          *((_QWORD *)&v157 + 1) = v122;
          v158 = v118;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(v154, v90, (uint64_t)&v147);
          v91 = v148;
          v92 = v149;
          v93 = v153;
          v94 = v149 | ((unint64_t)v150 << 32);
          v95 = v151 | ((unint64_t)v152 << 32);
          *(_OWORD *)(v62 + 32) = v147;
          *(_OWORD *)(v62 + 48) = v91;
          *(_QWORD *)(v62 + 64) = v94;
          *(_QWORD *)(v62 + 72) = v95;
          *(_WORD *)(v62 + 80) = v93;
          v10 = v139;
          a5 = v141;
          v8 = MEMORY[0x24BEE4AF8];
          if (v92 != 1)
          {
            v64 = HIDWORD(*((_QWORD *)&v91 + 1));
            goto LABEL_61;
          }
        }
        LODWORD(v64) = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v62 + 60) = v64;
        *(_BYTE *)(v62 + 64) = 0;
        goto LABEL_61;
      }
    }
    else
    {
      *(_QWORD *)v154 = v136;
      *(_DWORD *)&v154[8] = v65;
      *(_QWORD *)&v154[16] = v133;
      *(_DWORD *)&v154[24] = v66;
      *(_DWORD *)&v154[28] = v72;
      *(_QWORD *)&v155 = v67;
      *((_QWORD *)&v155 + 1) = v131;
      *(_QWORD *)&v156 = v68;
      *((_QWORD *)&v156 + 1) = v69;
      *(_QWORD *)&v157 = v127;
      *((_QWORD *)&v157 + 1) = v123;
      v158 = v121;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(v154, v74, (uint64_t)&v147);
      v75 = v150;
      v76 = v151;
      v77 = v153;
      v78 = v149 | ((unint64_t)v150 << 32);
      v79 = v151 | ((unint64_t)v152 << 32);
      v80 = v148;
      *(_OWORD *)(v62 + 32) = v147;
      *(_OWORD *)(v62 + 48) = v80;
      *(_QWORD *)(v62 + 64) = v78;
      *(_QWORD *)(v62 + 72) = v79;
      *(_WORD *)(v62 + 80) = v77;
      if (v76 != 1)
        goto LABEL_49;
    }
    v75 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v62 + 68) = v75;
    *(_BYTE *)(v62 + 72) = 0;
    goto LABEL_49;
  }
  v130 = *(_DWORD *)(a2 + 72);
  LODWORD(v64) = *(_DWORD *)(a2 + 64);
LABEL_62:
  swift_endAccess();
  v96 = *(_DWORD *)(a2 + 60);
  type metadata accessor for LeafViewResponder<ShapeStyledResponderData<StyledTextContentView>>(0);
  v97 = swift_allocObject();
  *(_OWORD *)(v97 + 40) = 0u;
  *(_OWORD *)(v97 + 56) = 0u;
  *(_OWORD *)(v97 + 72) = 0u;
  *(_OWORD *)(v97 + 88) = 0u;
  *(_OWORD *)(v97 + 104) = 0u;
  *(_QWORD *)(v97 + 120) = 0;
  *(_QWORD *)(v97 + 128) = v8;
  *(_DWORD *)(v97 + 136) = 0;
  *(_BYTE *)(v97 + 140) = 1;
  *(_QWORD *)(v97 + 24) = 0;
  *(_QWORD *)(v97 + 144) = 0;
  *(_QWORD *)(v97 + 152) = 0;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  v98 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x23B7C9E44](v98 + 200);
  v99 = *(_QWORD *)(v98 + 208);
  swift_release();
  swift_beginAccess();
  *(_QWORD *)(v97 + 24) = v99;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  if (v12)
  {
    v101 = v100;
    v102 = (_QWORD *)(v10 + 32);
    while (*v102 != v100)
    {
      v102 += 2;
      if (!--v12)
        goto LABEL_68;
    }
    *(_QWORD *)v154 = v142;
    *(_DWORD *)&v154[8] = v130;
    *(_DWORD *)&v154[12] = v64;
    *(_DWORD *)&v154[16] = v96;
    *(_QWORD *)&v154[24] = v97;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v145);
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ShapeStyledResponderFilter<StyledTextContentView>, (uint64_t)&type metadata for StyledTextContentView, (uint64_t)&protocol witness table for StyledTextContentView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<StyledTextContentView> and conformance ShapeStyledResponderFilter<A>();
    swift_retain();
    v103 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v154[0] = 0;
    PreferencesOutputs.subscript.setter(v103, v101, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v104);
    outlined release of LinearGradient((uint64_t)&v145);
  }
LABEL_68:
  result = swift_release();
  *a5 = v143;
  a5[1] = v144;
  return result;
}

{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  Swift::UInt32 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt32 v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  int v36;
  __int128 v37;
  __int128 v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t result;
  void (*v50)(_BYTE *, _QWORD);
  int v51;
  int v52;
  int OffsetAttribute2;
  unint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  Swift::UInt32 v60[6];
  _BYTE v61[32];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  int v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _QWORD v69[3];

  v54 = __PAIR64__(a3, a1);
  v69[1] = *MEMORY[0x24BDAC8D0];
  v7 = MEMORY[0x24BEE4AF8];
  v56 = MEMORY[0x24BEE4AF8];
  v8 = *MEMORY[0x24BE096C0];
  LODWORD(v57) = 0;
  HIDWORD(v57) = *MEMORY[0x24BE096C0];
  v58 = *(_QWORD *)(a2 + 48);
  v9 = v58;
  v59 = *(_DWORD *)(a2 + 56);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v11 = *(_QWORD *)(v58 + 16);
  if (v11)
  {
    v12 = v10;
    v13 = (_QWORD *)(v58 + 32);
    v14 = *(_QWORD *)(v58 + 16);
    while (*v13 != v10)
    {
      v13 += 2;
      if (!--v14)
        goto LABEL_11;
    }
    v15 = ++lastIdentity;
    v16 = *(_OWORD *)(a2 + 32);
    v67 = *(_OWORD *)(a2 + 16);
    v68 = v16;
    v66 = *(_OWORD *)a2;
    if ((BYTE5(v16) & 1) != 0)
    {
      outlined retain of _ViewInputs(a2);
      specialized _ViewInputs.subscript.getter();
      outlined release of _ViewInputs(a2);
      result = AGWeakAttributeGetAttribute();
      if ((_DWORD)result == v8)
      {
        __break(1u);
        return result;
      }
      v60[0] = v15;
      v50 = (void (*)(_BYTE *, _QWORD))Attribute<A>.subscript.modify();
      _DisplayList_StableIdentityScope.pushIdentity(_:)(v60);
      v50(v61, 0);
    }
    swift_retain();
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    v17 = v67;
    v18 = *(_OWORD *)(a2 + 48);
    v62 = *(_OWORD *)(a2 + 32);
    v63 = v18;
    v64 = *(_OWORD *)(a2 + 64);
    v65 = *(_DWORD *)(a2 + 80);
    v19 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v61 = *(_OWORD *)a2;
    *(_OWORD *)&v61[16] = v19;
    swift_beginAccess();
    v52 = CachedEnvironment.animatedSize(for:)((uint64_t *)v61);
    v20 = *(_OWORD *)(a2 + 48);
    v62 = *(_OWORD *)(a2 + 32);
    v63 = v20;
    v64 = *(_OWORD *)(a2 + 64);
    v65 = *(_DWORD *)(a2 + 80);
    v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v61 = *(_OWORD *)a2;
    *(_OWORD *)&v61[16] = v21;
    v51 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v61);
    swift_endAccess();
    v22 = *(_DWORD *)(v17 + 16);
    v23 = v66;
    v69[0] = v66;
    outlined retain of _ViewInputs(a2);
    outlined retain of _GraphInputs((uint64_t)&v66);
    outlined retain of ViewTransform((uint64_t)v69);
    v24 = specialized find<A>(_:key:)(v23);
    v25 = v15;
    v26 = a4;
    if (v24)
      v27 = *(_BYTE *)(v24 + 72);
    else
      v27 = 0;
    v28 = *(_DWORD *)(a2 + 68);
    v29 = *(_DWORD *)(a2 + 60);
    v30 = *(_DWORD *)(a2 + 76);
    outlined release of ViewTransform((uint64_t)v69);
    outlined release of _GraphInputs((uint64_t)&v66);
    outlined release of _ViewInputs(a2);
    *(_QWORD *)v61 = v26;
    *(_DWORD *)&v61[8] = v25;
    *(_QWORD *)&v61[12] = v54;
    *(_DWORD *)&v61[20] = OffsetAttribute2;
    *(_DWORD *)&v61[24] = v52;
    *(_DWORD *)&v61[28] = v51;
    *(_QWORD *)&v62 = __PAIR64__(v29, v28);
    *((_QWORD *)&v62 + 1) = __PAIR64__(v30, v22);
    LOBYTE(v63) = v27;
    WORD1(v63) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<Rectangle, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<Rectangle, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>();
    v31 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v61[0] = 0;
    PreferencesOutputs.subscript.setter(v31, v12, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v32);
    v7 = MEMORY[0x24BEE4AF8];
    v9 = v58;
  }
LABEL_11:
  v33 = *(_OWORD *)(a2 + 48);
  v34 = *(_OWORD *)(a2 + 64);
  v35 = *(_OWORD *)(a2 + 16);
  v62 = *(_OWORD *)(a2 + 32);
  v63 = v33;
  v64 = v34;
  v65 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)v61 = *(_OWORD *)a2;
  *(_OWORD *)&v61[16] = v35;
  swift_beginAccess();
  v36 = CachedEnvironment.animatedSize(for:)((uint64_t *)v61);
  v37 = *(_OWORD *)(a2 + 48);
  v62 = *(_OWORD *)(a2 + 32);
  v63 = v37;
  v64 = *(_OWORD *)(a2 + 64);
  v65 = *(_DWORD *)(a2 + 80);
  v38 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v61 = *(_OWORD *)a2;
  *(_OWORD *)&v61[16] = v38;
  v39 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v61);
  swift_endAccess();
  v40 = *(_DWORD *)(a2 + 60);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<_ShapeView<Rectangle, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderData<_ShapeView<Rectangle, ForegroundStyle>>, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
  v41 = swift_allocObject();
  *(_OWORD *)(v41 + 40) = 0u;
  *(_OWORD *)(v41 + 56) = 0u;
  *(_OWORD *)(v41 + 72) = 0u;
  *(_OWORD *)(v41 + 88) = 0u;
  *(_QWORD *)(v41 + 104) = 0;
  *(_QWORD *)(v41 + 112) = v7;
  *(_DWORD *)(v41 + 120) = 0;
  *(_BYTE *)(v41 + 124) = 1;
  *(_QWORD *)(v41 + 24) = 0;
  *(_QWORD *)(v41 + 128) = 0;
  *(_QWORD *)(v41 + 136) = 0;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  v42 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x23B7C9E44](v42 + 200);
  v43 = *(_QWORD *)(v42 + 208);
  swift_release();
  swift_beginAccess();
  *(_QWORD *)(v41 + 24) = v43;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  if (v11)
  {
    v45 = v44;
    v46 = (_QWORD *)(v9 + 32);
    while (*v46 != v44)
    {
      v46 += 2;
      if (!--v11)
        goto LABEL_17;
    }
    *(_QWORD *)v61 = v54;
    *(_DWORD *)&v61[8] = v36;
    *(_DWORD *)&v61[12] = v39;
    *(_DWORD *)&v61[16] = v40;
    *(_QWORD *)&v61[24] = v41;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v58);
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<Rectangle, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<Rectangle, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>();
    v47 = Attribute.init<A>(body:value:flags:update:)();
    v61[0] = 0;
    PreferencesOutputs.subscript.setter(v47, v45, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v48);
    outlined release of LinearGradient((uint64_t)&v58);
  }
LABEL_17:
  result = swift_release();
  *a5 = v56;
  a5[1] = v57;
  return result;
}

{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  Swift::UInt32 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt32 v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  int v36;
  __int128 v37;
  __int128 v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t result;
  void (*v50)(_BYTE *, _QWORD);
  int v51;
  int v52;
  int OffsetAttribute2;
  unint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  Swift::UInt32 v60[6];
  _BYTE v61[32];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  int v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _QWORD v69[3];

  v54 = __PAIR64__(a3, a1);
  v69[1] = *MEMORY[0x24BDAC8D0];
  v7 = MEMORY[0x24BEE4AF8];
  v56 = MEMORY[0x24BEE4AF8];
  v8 = *MEMORY[0x24BE096C0];
  LODWORD(v57) = 0;
  HIDWORD(v57) = *MEMORY[0x24BE096C0];
  v58 = *(_QWORD *)(a2 + 48);
  v9 = v58;
  v59 = *(_DWORD *)(a2 + 56);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v11 = *(_QWORD *)(v58 + 16);
  if (v11)
  {
    v12 = v10;
    v13 = (_QWORD *)(v58 + 32);
    v14 = *(_QWORD *)(v58 + 16);
    while (*v13 != v10)
    {
      v13 += 2;
      if (!--v14)
        goto LABEL_11;
    }
    v15 = ++lastIdentity;
    v16 = *(_OWORD *)(a2 + 32);
    v67 = *(_OWORD *)(a2 + 16);
    v68 = v16;
    v66 = *(_OWORD *)a2;
    if ((BYTE5(v16) & 1) != 0)
    {
      outlined retain of _ViewInputs(a2);
      specialized _ViewInputs.subscript.getter();
      outlined release of _ViewInputs(a2);
      result = AGWeakAttributeGetAttribute();
      if ((_DWORD)result == v8)
      {
        __break(1u);
        return result;
      }
      v60[0] = v15;
      v50 = (void (*)(_BYTE *, _QWORD))Attribute<A>.subscript.modify();
      _DisplayList_StableIdentityScope.pushIdentity(_:)(v60);
      v50(v61, 0);
    }
    swift_retain();
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    v17 = v67;
    v18 = *(_OWORD *)(a2 + 48);
    v62 = *(_OWORD *)(a2 + 32);
    v63 = v18;
    v64 = *(_OWORD *)(a2 + 64);
    v65 = *(_DWORD *)(a2 + 80);
    v19 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v61 = *(_OWORD *)a2;
    *(_OWORD *)&v61[16] = v19;
    swift_beginAccess();
    v52 = CachedEnvironment.animatedSize(for:)((uint64_t *)v61);
    v20 = *(_OWORD *)(a2 + 48);
    v62 = *(_OWORD *)(a2 + 32);
    v63 = v20;
    v64 = *(_OWORD *)(a2 + 64);
    v65 = *(_DWORD *)(a2 + 80);
    v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v61 = *(_OWORD *)a2;
    *(_OWORD *)&v61[16] = v21;
    v51 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v61);
    swift_endAccess();
    v22 = *(_DWORD *)(v17 + 16);
    v23 = v66;
    v69[0] = v66;
    outlined retain of _ViewInputs(a2);
    outlined retain of _GraphInputs((uint64_t)&v66);
    outlined retain of ViewTransform((uint64_t)v69);
    v24 = specialized find<A>(_:key:)(v23);
    v25 = v15;
    v26 = a4;
    if (v24)
      v27 = *(_BYTE *)(v24 + 72);
    else
      v27 = 0;
    v28 = *(_DWORD *)(a2 + 68);
    v29 = *(_DWORD *)(a2 + 60);
    v30 = *(_DWORD *)(a2 + 76);
    outlined release of ViewTransform((uint64_t)v69);
    outlined release of _GraphInputs((uint64_t)&v66);
    outlined release of _ViewInputs(a2);
    *(_QWORD *)v61 = v26;
    *(_DWORD *)&v61[8] = v25;
    *(_QWORD *)&v61[12] = v54;
    *(_DWORD *)&v61[20] = OffsetAttribute2;
    *(_DWORD *)&v61[24] = v52;
    *(_DWORD *)&v61[28] = v51;
    *(_QWORD *)&v62 = __PAIR64__(v29, v28);
    *((_QWORD *)&v62 + 1) = __PAIR64__(v30, v22);
    LOBYTE(v63) = v27;
    WORD1(v63) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ShapeStyledDisplayList<AnimatedShape<Rectangle._Inset>>(0);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ShapeStyledDisplayList<AnimatedShape<Rectangle._Inset>> and conformance ShapeStyledDisplayList<A>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledDisplayList<AnimatedShape<Rectangle._Inset>>, (uint64_t)&protocol conformance descriptor for ShapeStyledDisplayList<A>);
    v31 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v61[0] = 0;
    PreferencesOutputs.subscript.setter(v31, v12, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v32);
    v7 = MEMORY[0x24BEE4AF8];
    v9 = v58;
  }
LABEL_11:
  v33 = *(_OWORD *)(a2 + 48);
  v34 = *(_OWORD *)(a2 + 64);
  v35 = *(_OWORD *)(a2 + 16);
  v62 = *(_OWORD *)(a2 + 32);
  v63 = v33;
  v64 = v34;
  v65 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)v61 = *(_OWORD *)a2;
  *(_OWORD *)&v61[16] = v35;
  swift_beginAccess();
  v36 = CachedEnvironment.animatedSize(for:)((uint64_t *)v61);
  v37 = *(_OWORD *)(a2 + 48);
  v62 = *(_OWORD *)(a2 + 32);
  v63 = v37;
  v64 = *(_OWORD *)(a2 + 64);
  v65 = *(_DWORD *)(a2 + 80);
  v38 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v61 = *(_OWORD *)a2;
  *(_OWORD *)&v61[16] = v38;
  v39 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v61);
  swift_endAccess();
  v40 = *(_DWORD *)(a2 + 60);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<AnimatedShape<Rectangle._Inset>>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderData<AnimatedShape<Rectangle._Inset>>, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
  v41 = swift_allocObject();
  *(_OWORD *)(v41 + 40) = 0u;
  *(_OWORD *)(v41 + 56) = 0u;
  *(_OWORD *)(v41 + 72) = 0u;
  *(_OWORD *)(v41 + 88) = 0u;
  *(_OWORD *)(v41 + 104) = 0u;
  *(_QWORD *)(v41 + 120) = v7;
  *(_DWORD *)(v41 + 128) = 0;
  *(_BYTE *)(v41 + 132) = 1;
  *(_QWORD *)(v41 + 24) = 0;
  *(_QWORD *)(v41 + 136) = 0;
  *(_QWORD *)(v41 + 144) = 0;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  v42 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x23B7C9E44](v42 + 200);
  v43 = *(_QWORD *)(v42 + 208);
  swift_release();
  swift_beginAccess();
  *(_QWORD *)(v41 + 24) = v43;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  if (v11)
  {
    v45 = v44;
    v46 = (_QWORD *)(v9 + 32);
    while (*v46 != v44)
    {
      v46 += 2;
      if (!--v11)
        goto LABEL_17;
    }
    *(_QWORD *)v61 = v54;
    *(_DWORD *)&v61[8] = v36;
    *(_DWORD *)&v61[12] = v39;
    *(_DWORD *)&v61[16] = v40;
    *(_QWORD *)&v61[24] = v41;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v58);
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<Rectangle._Inset>>(0);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<AnimatedShape<Rectangle._Inset>> and conformance ShapeStyledResponderFilter<A>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<Rectangle._Inset>>, (uint64_t)&protocol conformance descriptor for ShapeStyledResponderFilter<A>);
    v47 = Attribute.init<A>(body:value:flags:update:)();
    v61[0] = 0;
    PreferencesOutputs.subscript.setter(v47, v45, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v48);
    outlined release of LinearGradient((uint64_t)&v58);
  }
LABEL_17:
  result = swift_release();
  *a5 = v56;
  a5[1] = v57;
  return result;
}

{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  Swift::UInt32 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt32 v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  int v36;
  __int128 v37;
  __int128 v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t result;
  void (*v50)(_BYTE *, _QWORD);
  int v51;
  int v52;
  int OffsetAttribute2;
  unint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  Swift::UInt32 v60[6];
  _BYTE v61[32];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  int v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _QWORD v69[3];

  v54 = __PAIR64__(a3, a1);
  v69[1] = *MEMORY[0x24BDAC8D0];
  v7 = MEMORY[0x24BEE4AF8];
  v56 = MEMORY[0x24BEE4AF8];
  v8 = *MEMORY[0x24BE096C0];
  LODWORD(v57) = 0;
  HIDWORD(v57) = *MEMORY[0x24BE096C0];
  v58 = *(_QWORD *)(a2 + 48);
  v9 = v58;
  v59 = *(_DWORD *)(a2 + 56);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v11 = *(_QWORD *)(v58 + 16);
  if (v11)
  {
    v12 = v10;
    v13 = (_QWORD *)(v58 + 32);
    v14 = *(_QWORD *)(v58 + 16);
    while (*v13 != v10)
    {
      v13 += 2;
      if (!--v14)
        goto LABEL_11;
    }
    v15 = ++lastIdentity;
    v16 = *(_OWORD *)(a2 + 32);
    v67 = *(_OWORD *)(a2 + 16);
    v68 = v16;
    v66 = *(_OWORD *)a2;
    if ((BYTE5(v16) & 1) != 0)
    {
      outlined retain of _ViewInputs(a2);
      specialized _ViewInputs.subscript.getter();
      outlined release of _ViewInputs(a2);
      result = AGWeakAttributeGetAttribute();
      if ((_DWORD)result == v8)
      {
        __break(1u);
        return result;
      }
      v60[0] = v15;
      v50 = (void (*)(_BYTE *, _QWORD))Attribute<A>.subscript.modify();
      _DisplayList_StableIdentityScope.pushIdentity(_:)(v60);
      v50(v61, 0);
    }
    swift_retain();
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    v17 = v67;
    v18 = *(_OWORD *)(a2 + 48);
    v62 = *(_OWORD *)(a2 + 32);
    v63 = v18;
    v64 = *(_OWORD *)(a2 + 64);
    v65 = *(_DWORD *)(a2 + 80);
    v19 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v61 = *(_OWORD *)a2;
    *(_OWORD *)&v61[16] = v19;
    swift_beginAccess();
    v52 = CachedEnvironment.animatedSize(for:)((uint64_t *)v61);
    v20 = *(_OWORD *)(a2 + 48);
    v62 = *(_OWORD *)(a2 + 32);
    v63 = v20;
    v64 = *(_OWORD *)(a2 + 64);
    v65 = *(_DWORD *)(a2 + 80);
    v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v61 = *(_OWORD *)a2;
    *(_OWORD *)&v61[16] = v21;
    v51 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v61);
    swift_endAccess();
    v22 = *(_DWORD *)(v17 + 16);
    v23 = v66;
    v69[0] = v66;
    outlined retain of _ViewInputs(a2);
    outlined retain of _GraphInputs((uint64_t)&v66);
    outlined retain of ViewTransform((uint64_t)v69);
    v24 = specialized find<A>(_:key:)(v23);
    v25 = v15;
    v26 = a4;
    if (v24)
      v27 = *(_BYTE *)(v24 + 72);
    else
      v27 = 0;
    v28 = *(_DWORD *)(a2 + 68);
    v29 = *(_DWORD *)(a2 + 60);
    v30 = *(_DWORD *)(a2 + 76);
    outlined release of ViewTransform((uint64_t)v69);
    outlined release of _GraphInputs((uint64_t)&v66);
    outlined release of _ViewInputs(a2);
    *(_QWORD *)v61 = v26;
    *(_DWORD *)&v61[8] = v25;
    *(_QWORD *)&v61[12] = v54;
    *(_DWORD *)&v61[20] = OffsetAttribute2;
    *(_DWORD *)&v61[24] = v52;
    *(_DWORD *)&v61[28] = v51;
    *(_QWORD *)&v62 = __PAIR64__(v29, v28);
    *((_QWORD *)&v62 + 1) = __PAIR64__(v30, v22);
    LOBYTE(v63) = v27;
    WORD1(v63) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ShapeStyledDisplayList<AnimatedShape<AnyShape>>(0);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ShapeStyledDisplayList<AnimatedShape<AnyShape>> and conformance ShapeStyledDisplayList<A>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledDisplayList<AnimatedShape<AnyShape>>, (uint64_t)&protocol conformance descriptor for ShapeStyledDisplayList<A>);
    v31 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v61[0] = 0;
    PreferencesOutputs.subscript.setter(v31, v12, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v32);
    v7 = MEMORY[0x24BEE4AF8];
    v9 = v58;
  }
LABEL_11:
  v33 = *(_OWORD *)(a2 + 48);
  v34 = *(_OWORD *)(a2 + 64);
  v35 = *(_OWORD *)(a2 + 16);
  v62 = *(_OWORD *)(a2 + 32);
  v63 = v33;
  v64 = v34;
  v65 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)v61 = *(_OWORD *)a2;
  *(_OWORD *)&v61[16] = v35;
  swift_beginAccess();
  v36 = CachedEnvironment.animatedSize(for:)((uint64_t *)v61);
  v37 = *(_OWORD *)(a2 + 48);
  v62 = *(_OWORD *)(a2 + 32);
  v63 = v37;
  v64 = *(_OWORD *)(a2 + 64);
  v65 = *(_DWORD *)(a2 + 80);
  v38 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v61 = *(_OWORD *)a2;
  *(_OWORD *)&v61[16] = v38;
  v39 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v61);
  swift_endAccess();
  v40 = *(_DWORD *)(a2 + 60);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<AnimatedShape<AnyShape>>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderData<AnimatedShape<AnyShape>>, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
  v41 = swift_allocObject();
  *(_OWORD *)(v41 + 40) = 0u;
  *(_OWORD *)(v41 + 56) = 0u;
  *(_OWORD *)(v41 + 72) = 0u;
  *(_OWORD *)(v41 + 88) = 0u;
  *(_OWORD *)(v41 + 104) = 0u;
  *(_QWORD *)(v41 + 120) = v7;
  *(_DWORD *)(v41 + 128) = 0;
  *(_BYTE *)(v41 + 132) = 1;
  *(_QWORD *)(v41 + 24) = 0;
  *(_QWORD *)(v41 + 136) = 0;
  *(_QWORD *)(v41 + 144) = 0;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  v42 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x23B7C9E44](v42 + 200);
  v43 = *(_QWORD *)(v42 + 208);
  swift_release();
  swift_beginAccess();
  *(_QWORD *)(v41 + 24) = v43;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  if (v11)
  {
    v45 = v44;
    v46 = (_QWORD *)(v9 + 32);
    while (*v46 != v44)
    {
      v46 += 2;
      if (!--v11)
        goto LABEL_17;
    }
    *(_QWORD *)v61 = v54;
    *(_DWORD *)&v61[8] = v36;
    *(_DWORD *)&v61[12] = v39;
    *(_DWORD *)&v61[16] = v40;
    *(_QWORD *)&v61[24] = v41;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v58);
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<AnyShape>>(0);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<AnimatedShape<AnyShape>> and conformance ShapeStyledResponderFilter<A>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<AnyShape>>, (uint64_t)&protocol conformance descriptor for ShapeStyledResponderFilter<A>);
    v47 = Attribute.init<A>(body:value:flags:update:)();
    v61[0] = 0;
    PreferencesOutputs.subscript.setter(v47, v45, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v48);
    outlined release of LinearGradient((uint64_t)&v58);
  }
LABEL_17:
  result = swift_release();
  *a5 = v56;
  a5[1] = v57;
  return result;
}

{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  Swift::UInt32 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt32 v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  int v36;
  __int128 v37;
  __int128 v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t result;
  void (*v50)(_BYTE *, _QWORD);
  int v51;
  int v52;
  int OffsetAttribute2;
  unint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  Swift::UInt32 v60[6];
  _BYTE v61[32];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  int v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _QWORD v69[3];

  v54 = __PAIR64__(a3, a1);
  v69[1] = *MEMORY[0x24BDAC8D0];
  v7 = MEMORY[0x24BEE4AF8];
  v56 = MEMORY[0x24BEE4AF8];
  v8 = *MEMORY[0x24BE096C0];
  LODWORD(v57) = 0;
  HIDWORD(v57) = *MEMORY[0x24BE096C0];
  v58 = *(_QWORD *)(a2 + 48);
  v9 = v58;
  v59 = *(_DWORD *)(a2 + 56);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v11 = *(_QWORD *)(v58 + 16);
  if (v11)
  {
    v12 = v10;
    v13 = (_QWORD *)(v58 + 32);
    v14 = *(_QWORD *)(v58 + 16);
    while (*v13 != v10)
    {
      v13 += 2;
      if (!--v14)
        goto LABEL_11;
    }
    v15 = ++lastIdentity;
    v16 = *(_OWORD *)(a2 + 32);
    v67 = *(_OWORD *)(a2 + 16);
    v68 = v16;
    v66 = *(_OWORD *)a2;
    if ((BYTE5(v16) & 1) != 0)
    {
      outlined retain of _ViewInputs(a2);
      specialized _ViewInputs.subscript.getter();
      outlined release of _ViewInputs(a2);
      result = AGWeakAttributeGetAttribute();
      if ((_DWORD)result == v8)
      {
        __break(1u);
        return result;
      }
      v60[0] = v15;
      v50 = (void (*)(_BYTE *, _QWORD))Attribute<A>.subscript.modify();
      _DisplayList_StableIdentityScope.pushIdentity(_:)(v60);
      v50(v61, 0);
    }
    swift_retain();
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    v17 = v67;
    v18 = *(_OWORD *)(a2 + 48);
    v62 = *(_OWORD *)(a2 + 32);
    v63 = v18;
    v64 = *(_OWORD *)(a2 + 64);
    v65 = *(_DWORD *)(a2 + 80);
    v19 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v61 = *(_OWORD *)a2;
    *(_OWORD *)&v61[16] = v19;
    swift_beginAccess();
    v52 = CachedEnvironment.animatedSize(for:)((uint64_t *)v61);
    v20 = *(_OWORD *)(a2 + 48);
    v62 = *(_OWORD *)(a2 + 32);
    v63 = v20;
    v64 = *(_OWORD *)(a2 + 64);
    v65 = *(_DWORD *)(a2 + 80);
    v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v61 = *(_OWORD *)a2;
    *(_OWORD *)&v61[16] = v21;
    v51 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v61);
    swift_endAccess();
    v22 = *(_DWORD *)(v17 + 16);
    v23 = v66;
    v69[0] = v66;
    outlined retain of _ViewInputs(a2);
    outlined retain of _GraphInputs((uint64_t)&v66);
    outlined retain of ViewTransform((uint64_t)v69);
    v24 = specialized find<A>(_:key:)(v23);
    v25 = v15;
    v26 = a4;
    if (v24)
      v27 = *(_BYTE *)(v24 + 72);
    else
      v27 = 0;
    v28 = *(_DWORD *)(a2 + 68);
    v29 = *(_DWORD *)(a2 + 60);
    v30 = *(_DWORD *)(a2 + 76);
    outlined release of ViewTransform((uint64_t)v69);
    outlined release of _GraphInputs((uint64_t)&v66);
    outlined release of _ViewInputs(a2);
    *(_QWORD *)v61 = v26;
    *(_DWORD *)&v61[8] = v25;
    *(_QWORD *)&v61[12] = v54;
    *(_DWORD *)&v61[20] = OffsetAttribute2;
    *(_DWORD *)&v61[24] = v52;
    *(_DWORD *)&v61[28] = v51;
    *(_QWORD *)&v62 = __PAIR64__(v29, v28);
    *((_QWORD *)&v62 + 1) = __PAIR64__(v30, v22);
    LOBYTE(v63) = v27;
    WORD1(v63) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<Ellipse, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Ellipse, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<Ellipse, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>();
    v31 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v61[0] = 0;
    PreferencesOutputs.subscript.setter(v31, v12, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v32);
    v7 = MEMORY[0x24BEE4AF8];
    v9 = v58;
  }
LABEL_11:
  v33 = *(_OWORD *)(a2 + 48);
  v34 = *(_OWORD *)(a2 + 64);
  v35 = *(_OWORD *)(a2 + 16);
  v62 = *(_OWORD *)(a2 + 32);
  v63 = v33;
  v64 = v34;
  v65 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)v61 = *(_OWORD *)a2;
  *(_OWORD *)&v61[16] = v35;
  swift_beginAccess();
  v36 = CachedEnvironment.animatedSize(for:)((uint64_t *)v61);
  v37 = *(_OWORD *)(a2 + 48);
  v62 = *(_OWORD *)(a2 + 32);
  v63 = v37;
  v64 = *(_OWORD *)(a2 + 64);
  v65 = *(_DWORD *)(a2 + 80);
  v38 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v61 = *(_OWORD *)a2;
  *(_OWORD *)&v61[16] = v38;
  v39 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v61);
  swift_endAccess();
  v40 = *(_DWORD *)(a2 + 60);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<_ShapeView<Ellipse, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderData<_ShapeView<Ellipse, ForegroundStyle>>, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
  v41 = swift_allocObject();
  *(_OWORD *)(v41 + 40) = 0u;
  *(_OWORD *)(v41 + 56) = 0u;
  *(_OWORD *)(v41 + 72) = 0u;
  *(_OWORD *)(v41 + 88) = 0u;
  *(_QWORD *)(v41 + 104) = 0;
  *(_QWORD *)(v41 + 112) = v7;
  *(_DWORD *)(v41 + 120) = 0;
  *(_BYTE *)(v41 + 124) = 1;
  *(_QWORD *)(v41 + 24) = 0;
  *(_QWORD *)(v41 + 128) = 0;
  *(_QWORD *)(v41 + 136) = 0;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  v42 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x23B7C9E44](v42 + 200);
  v43 = *(_QWORD *)(v42 + 208);
  swift_release();
  swift_beginAccess();
  *(_QWORD *)(v41 + 24) = v43;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  if (v11)
  {
    v45 = v44;
    v46 = (_QWORD *)(v9 + 32);
    while (*v46 != v44)
    {
      v46 += 2;
      if (!--v11)
        goto LABEL_17;
    }
    *(_QWORD *)v61 = v54;
    *(_DWORD *)&v61[8] = v36;
    *(_DWORD *)&v61[12] = v39;
    *(_DWORD *)&v61[16] = v40;
    *(_QWORD *)&v61[24] = v41;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v58);
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<Ellipse, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Ellipse, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<Ellipse, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>();
    v47 = Attribute.init<A>(body:value:flags:update:)();
    v61[0] = 0;
    PreferencesOutputs.subscript.setter(v47, v45, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v48);
    outlined release of LinearGradient((uint64_t)&v58);
  }
LABEL_17:
  result = swift_release();
  *a5 = v56;
  a5[1] = v57;
  return result;
}

{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  Swift::UInt32 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt32 v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  int v36;
  __int128 v37;
  __int128 v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t result;
  void (*v50)(_BYTE *, _QWORD);
  int v51;
  int v52;
  int OffsetAttribute2;
  unint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  Swift::UInt32 v60[6];
  _BYTE v61[32];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  int v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _QWORD v69[3];

  v54 = __PAIR64__(a3, a1);
  v69[1] = *MEMORY[0x24BDAC8D0];
  v7 = MEMORY[0x24BEE4AF8];
  v56 = MEMORY[0x24BEE4AF8];
  v8 = *MEMORY[0x24BE096C0];
  LODWORD(v57) = 0;
  HIDWORD(v57) = *MEMORY[0x24BE096C0];
  v58 = *(_QWORD *)(a2 + 48);
  v9 = v58;
  v59 = *(_DWORD *)(a2 + 56);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v11 = *(_QWORD *)(v58 + 16);
  if (v11)
  {
    v12 = v10;
    v13 = (_QWORD *)(v58 + 32);
    v14 = *(_QWORD *)(v58 + 16);
    while (*v13 != v10)
    {
      v13 += 2;
      if (!--v14)
        goto LABEL_11;
    }
    v15 = ++lastIdentity;
    v16 = *(_OWORD *)(a2 + 32);
    v67 = *(_OWORD *)(a2 + 16);
    v68 = v16;
    v66 = *(_OWORD *)a2;
    if ((BYTE5(v16) & 1) != 0)
    {
      outlined retain of _ViewInputs(a2);
      specialized _ViewInputs.subscript.getter();
      outlined release of _ViewInputs(a2);
      result = AGWeakAttributeGetAttribute();
      if ((_DWORD)result == v8)
      {
        __break(1u);
        return result;
      }
      v60[0] = v15;
      v50 = (void (*)(_BYTE *, _QWORD))Attribute<A>.subscript.modify();
      _DisplayList_StableIdentityScope.pushIdentity(_:)(v60);
      v50(v61, 0);
    }
    swift_retain();
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    v17 = v67;
    v18 = *(_OWORD *)(a2 + 48);
    v62 = *(_OWORD *)(a2 + 32);
    v63 = v18;
    v64 = *(_OWORD *)(a2 + 64);
    v65 = *(_DWORD *)(a2 + 80);
    v19 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v61 = *(_OWORD *)a2;
    *(_OWORD *)&v61[16] = v19;
    swift_beginAccess();
    v52 = CachedEnvironment.animatedSize(for:)((uint64_t *)v61);
    v20 = *(_OWORD *)(a2 + 48);
    v62 = *(_OWORD *)(a2 + 32);
    v63 = v20;
    v64 = *(_OWORD *)(a2 + 64);
    v65 = *(_DWORD *)(a2 + 80);
    v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v61 = *(_OWORD *)a2;
    *(_OWORD *)&v61[16] = v21;
    v51 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v61);
    swift_endAccess();
    v22 = *(_DWORD *)(v17 + 16);
    v23 = v66;
    v69[0] = v66;
    outlined retain of _ViewInputs(a2);
    outlined retain of _GraphInputs((uint64_t)&v66);
    outlined retain of ViewTransform((uint64_t)v69);
    v24 = specialized find<A>(_:key:)(v23);
    v25 = v15;
    v26 = a4;
    if (v24)
      v27 = *(_BYTE *)(v24 + 72);
    else
      v27 = 0;
    v28 = *(_DWORD *)(a2 + 68);
    v29 = *(_DWORD *)(a2 + 60);
    v30 = *(_DWORD *)(a2 + 76);
    outlined release of ViewTransform((uint64_t)v69);
    outlined release of _GraphInputs((uint64_t)&v66);
    outlined release of _ViewInputs(a2);
    *(_QWORD *)v61 = v26;
    *(_DWORD *)&v61[8] = v25;
    *(_QWORD *)&v61[12] = v54;
    *(_DWORD *)&v61[20] = OffsetAttribute2;
    *(_DWORD *)&v61[24] = v52;
    *(_DWORD *)&v61[28] = v51;
    *(_QWORD *)&v62 = __PAIR64__(v29, v28);
    *((_QWORD *)&v62 + 1) = __PAIR64__(v30, v22);
    LOBYTE(v63) = v27;
    WORD1(v63) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ShapeStyledDisplayList<AnimatedShape<Ellipse._Inset>>(0);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ShapeStyledDisplayList<AnimatedShape<Ellipse._Inset>> and conformance ShapeStyledDisplayList<A>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledDisplayList<AnimatedShape<Ellipse._Inset>>, (uint64_t)&protocol conformance descriptor for ShapeStyledDisplayList<A>);
    v31 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v61[0] = 0;
    PreferencesOutputs.subscript.setter(v31, v12, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v32);
    v7 = MEMORY[0x24BEE4AF8];
    v9 = v58;
  }
LABEL_11:
  v33 = *(_OWORD *)(a2 + 48);
  v34 = *(_OWORD *)(a2 + 64);
  v35 = *(_OWORD *)(a2 + 16);
  v62 = *(_OWORD *)(a2 + 32);
  v63 = v33;
  v64 = v34;
  v65 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)v61 = *(_OWORD *)a2;
  *(_OWORD *)&v61[16] = v35;
  swift_beginAccess();
  v36 = CachedEnvironment.animatedSize(for:)((uint64_t *)v61);
  v37 = *(_OWORD *)(a2 + 48);
  v62 = *(_OWORD *)(a2 + 32);
  v63 = v37;
  v64 = *(_OWORD *)(a2 + 64);
  v65 = *(_DWORD *)(a2 + 80);
  v38 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v61 = *(_OWORD *)a2;
  *(_OWORD *)&v61[16] = v38;
  v39 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v61);
  swift_endAccess();
  v40 = *(_DWORD *)(a2 + 60);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<AnimatedShape<Ellipse._Inset>>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderData<AnimatedShape<Ellipse._Inset>>, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
  v41 = swift_allocObject();
  *(_OWORD *)(v41 + 40) = 0u;
  *(_OWORD *)(v41 + 56) = 0u;
  *(_OWORD *)(v41 + 72) = 0u;
  *(_OWORD *)(v41 + 88) = 0u;
  *(_OWORD *)(v41 + 104) = 0u;
  *(_QWORD *)(v41 + 120) = v7;
  *(_DWORD *)(v41 + 128) = 0;
  *(_BYTE *)(v41 + 132) = 1;
  *(_QWORD *)(v41 + 24) = 0;
  *(_QWORD *)(v41 + 136) = 0;
  *(_QWORD *)(v41 + 144) = 0;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  v42 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x23B7C9E44](v42 + 200);
  v43 = *(_QWORD *)(v42 + 208);
  swift_release();
  swift_beginAccess();
  *(_QWORD *)(v41 + 24) = v43;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  if (v11)
  {
    v45 = v44;
    v46 = (_QWORD *)(v9 + 32);
    while (*v46 != v44)
    {
      v46 += 2;
      if (!--v11)
        goto LABEL_17;
    }
    *(_QWORD *)v61 = v54;
    *(_DWORD *)&v61[8] = v36;
    *(_DWORD *)&v61[12] = v39;
    *(_DWORD *)&v61[16] = v40;
    *(_QWORD *)&v61[24] = v41;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v58);
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<Ellipse._Inset>>(0);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<AnimatedShape<Ellipse._Inset>> and conformance ShapeStyledResponderFilter<A>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<Ellipse._Inset>>, (uint64_t)&protocol conformance descriptor for ShapeStyledResponderFilter<A>);
    v47 = Attribute.init<A>(body:value:flags:update:)();
    v61[0] = 0;
    PreferencesOutputs.subscript.setter(v47, v45, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v48);
    outlined release of LinearGradient((uint64_t)&v58);
  }
LABEL_17:
  result = swift_release();
  *a5 = v56;
  a5[1] = v57;
  return result;
}

{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  Swift::UInt32 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt32 v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  int v36;
  __int128 v37;
  __int128 v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t result;
  void (*v50)(_BYTE *, _QWORD);
  int v51;
  int v52;
  int OffsetAttribute2;
  unint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  Swift::UInt32 v60[6];
  _BYTE v61[32];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  int v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _QWORD v69[3];

  v54 = __PAIR64__(a3, a1);
  v69[1] = *MEMORY[0x24BDAC8D0];
  v7 = MEMORY[0x24BEE4AF8];
  v56 = MEMORY[0x24BEE4AF8];
  v8 = *MEMORY[0x24BE096C0];
  LODWORD(v57) = 0;
  HIDWORD(v57) = *MEMORY[0x24BE096C0];
  v58 = *(_QWORD *)(a2 + 48);
  v9 = v58;
  v59 = *(_DWORD *)(a2 + 56);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v11 = *(_QWORD *)(v58 + 16);
  if (v11)
  {
    v12 = v10;
    v13 = (_QWORD *)(v58 + 32);
    v14 = *(_QWORD *)(v58 + 16);
    while (*v13 != v10)
    {
      v13 += 2;
      if (!--v14)
        goto LABEL_11;
    }
    v15 = ++lastIdentity;
    v16 = *(_OWORD *)(a2 + 32);
    v67 = *(_OWORD *)(a2 + 16);
    v68 = v16;
    v66 = *(_OWORD *)a2;
    if ((BYTE5(v16) & 1) != 0)
    {
      outlined retain of _ViewInputs(a2);
      specialized _ViewInputs.subscript.getter();
      outlined release of _ViewInputs(a2);
      result = AGWeakAttributeGetAttribute();
      if ((_DWORD)result == v8)
      {
        __break(1u);
        return result;
      }
      v60[0] = v15;
      v50 = (void (*)(_BYTE *, _QWORD))Attribute<A>.subscript.modify();
      _DisplayList_StableIdentityScope.pushIdentity(_:)(v60);
      v50(v61, 0);
    }
    swift_retain();
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    v17 = v67;
    v18 = *(_OWORD *)(a2 + 48);
    v62 = *(_OWORD *)(a2 + 32);
    v63 = v18;
    v64 = *(_OWORD *)(a2 + 64);
    v65 = *(_DWORD *)(a2 + 80);
    v19 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v61 = *(_OWORD *)a2;
    *(_OWORD *)&v61[16] = v19;
    swift_beginAccess();
    v52 = CachedEnvironment.animatedSize(for:)((uint64_t *)v61);
    v20 = *(_OWORD *)(a2 + 48);
    v62 = *(_OWORD *)(a2 + 32);
    v63 = v20;
    v64 = *(_OWORD *)(a2 + 64);
    v65 = *(_DWORD *)(a2 + 80);
    v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v61 = *(_OWORD *)a2;
    *(_OWORD *)&v61[16] = v21;
    v51 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v61);
    swift_endAccess();
    v22 = *(_DWORD *)(v17 + 16);
    v23 = v66;
    v69[0] = v66;
    outlined retain of _ViewInputs(a2);
    outlined retain of _GraphInputs((uint64_t)&v66);
    outlined retain of ViewTransform((uint64_t)v69);
    v24 = specialized find<A>(_:key:)(v23);
    v25 = v15;
    v26 = a4;
    if (v24)
      v27 = *(_BYTE *)(v24 + 72);
    else
      v27 = 0;
    v28 = *(_DWORD *)(a2 + 68);
    v29 = *(_DWORD *)(a2 + 60);
    v30 = *(_DWORD *)(a2 + 76);
    outlined release of ViewTransform((uint64_t)v69);
    outlined release of _GraphInputs((uint64_t)&v66);
    outlined release of _ViewInputs(a2);
    *(_QWORD *)v61 = v26;
    *(_DWORD *)&v61[8] = v25;
    *(_QWORD *)&v61[12] = v54;
    *(_DWORD *)&v61[20] = OffsetAttribute2;
    *(_DWORD *)&v61[24] = v52;
    *(_DWORD *)&v61[28] = v51;
    *(_QWORD *)&v62 = __PAIR64__(v29, v28);
    *((_QWORD *)&v62 + 1) = __PAIR64__(v30, v22);
    LOBYTE(v63) = v27;
    WORD1(v63) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<Capsule, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Capsule, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<Capsule, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>();
    v31 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v61[0] = 0;
    PreferencesOutputs.subscript.setter(v31, v12, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v32);
    v7 = MEMORY[0x24BEE4AF8];
    v9 = v58;
  }
LABEL_11:
  v33 = *(_OWORD *)(a2 + 48);
  v34 = *(_OWORD *)(a2 + 64);
  v35 = *(_OWORD *)(a2 + 16);
  v62 = *(_OWORD *)(a2 + 32);
  v63 = v33;
  v64 = v34;
  v65 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)v61 = *(_OWORD *)a2;
  *(_OWORD *)&v61[16] = v35;
  swift_beginAccess();
  v36 = CachedEnvironment.animatedSize(for:)((uint64_t *)v61);
  v37 = *(_OWORD *)(a2 + 48);
  v62 = *(_OWORD *)(a2 + 32);
  v63 = v37;
  v64 = *(_OWORD *)(a2 + 64);
  v65 = *(_DWORD *)(a2 + 80);
  v38 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v61 = *(_OWORD *)a2;
  *(_OWORD *)&v61[16] = v38;
  v39 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v61);
  swift_endAccess();
  v40 = *(_DWORD *)(a2 + 60);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<_ShapeView<Capsule, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderData<_ShapeView<Capsule, ForegroundStyle>>, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
  v41 = swift_allocObject();
  *(_OWORD *)(v41 + 40) = 0u;
  *(_OWORD *)(v41 + 56) = 0u;
  *(_OWORD *)(v41 + 72) = 0u;
  *(_OWORD *)(v41 + 88) = 0u;
  *(_QWORD *)(v41 + 104) = 0;
  *(_QWORD *)(v41 + 112) = v7;
  *(_DWORD *)(v41 + 120) = 0;
  *(_BYTE *)(v41 + 124) = 1;
  *(_QWORD *)(v41 + 24) = 0;
  *(_QWORD *)(v41 + 128) = 0;
  *(_QWORD *)(v41 + 136) = 0;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  v42 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x23B7C9E44](v42 + 200);
  v43 = *(_QWORD *)(v42 + 208);
  swift_release();
  swift_beginAccess();
  *(_QWORD *)(v41 + 24) = v43;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  if (v11)
  {
    v45 = v44;
    v46 = (_QWORD *)(v9 + 32);
    while (*v46 != v44)
    {
      v46 += 2;
      if (!--v11)
        goto LABEL_17;
    }
    *(_QWORD *)v61 = v54;
    *(_DWORD *)&v61[8] = v36;
    *(_DWORD *)&v61[12] = v39;
    *(_DWORD *)&v61[16] = v40;
    *(_QWORD *)&v61[24] = v41;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v58);
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<Capsule, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Capsule, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<Capsule, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>();
    v47 = Attribute.init<A>(body:value:flags:update:)();
    v61[0] = 0;
    PreferencesOutputs.subscript.setter(v47, v45, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v48);
    outlined release of LinearGradient((uint64_t)&v58);
  }
LABEL_17:
  result = swift_release();
  *a5 = v56;
  a5[1] = v57;
  return result;
}

{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  Swift::UInt32 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt32 v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  int v36;
  __int128 v37;
  __int128 v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t result;
  void (*v50)(_BYTE *, _QWORD);
  int v51;
  int v52;
  int OffsetAttribute2;
  unint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  Swift::UInt32 v60[6];
  _BYTE v61[32];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  int v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _QWORD v69[3];

  v54 = __PAIR64__(a3, a1);
  v69[1] = *MEMORY[0x24BDAC8D0];
  v7 = MEMORY[0x24BEE4AF8];
  v56 = MEMORY[0x24BEE4AF8];
  v8 = *MEMORY[0x24BE096C0];
  LODWORD(v57) = 0;
  HIDWORD(v57) = *MEMORY[0x24BE096C0];
  v58 = *(_QWORD *)(a2 + 48);
  v9 = v58;
  v59 = *(_DWORD *)(a2 + 56);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v11 = *(_QWORD *)(v58 + 16);
  if (v11)
  {
    v12 = v10;
    v13 = (_QWORD *)(v58 + 32);
    v14 = *(_QWORD *)(v58 + 16);
    while (*v13 != v10)
    {
      v13 += 2;
      if (!--v14)
        goto LABEL_11;
    }
    v15 = ++lastIdentity;
    v16 = *(_OWORD *)(a2 + 32);
    v67 = *(_OWORD *)(a2 + 16);
    v68 = v16;
    v66 = *(_OWORD *)a2;
    if ((BYTE5(v16) & 1) != 0)
    {
      outlined retain of _ViewInputs(a2);
      specialized _ViewInputs.subscript.getter();
      outlined release of _ViewInputs(a2);
      result = AGWeakAttributeGetAttribute();
      if ((_DWORD)result == v8)
      {
        __break(1u);
        return result;
      }
      v60[0] = v15;
      v50 = (void (*)(_BYTE *, _QWORD))Attribute<A>.subscript.modify();
      _DisplayList_StableIdentityScope.pushIdentity(_:)(v60);
      v50(v61, 0);
    }
    swift_retain();
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    v17 = v67;
    v18 = *(_OWORD *)(a2 + 48);
    v62 = *(_OWORD *)(a2 + 32);
    v63 = v18;
    v64 = *(_OWORD *)(a2 + 64);
    v65 = *(_DWORD *)(a2 + 80);
    v19 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v61 = *(_OWORD *)a2;
    *(_OWORD *)&v61[16] = v19;
    swift_beginAccess();
    v52 = CachedEnvironment.animatedSize(for:)((uint64_t *)v61);
    v20 = *(_OWORD *)(a2 + 48);
    v62 = *(_OWORD *)(a2 + 32);
    v63 = v20;
    v64 = *(_OWORD *)(a2 + 64);
    v65 = *(_DWORD *)(a2 + 80);
    v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v61 = *(_OWORD *)a2;
    *(_OWORD *)&v61[16] = v21;
    v51 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v61);
    swift_endAccess();
    v22 = *(_DWORD *)(v17 + 16);
    v23 = v66;
    v69[0] = v66;
    outlined retain of _ViewInputs(a2);
    outlined retain of _GraphInputs((uint64_t)&v66);
    outlined retain of ViewTransform((uint64_t)v69);
    v24 = specialized find<A>(_:key:)(v23);
    v25 = v15;
    v26 = a4;
    if (v24)
      v27 = *(_BYTE *)(v24 + 72);
    else
      v27 = 0;
    v28 = *(_DWORD *)(a2 + 68);
    v29 = *(_DWORD *)(a2 + 60);
    v30 = *(_DWORD *)(a2 + 76);
    outlined release of ViewTransform((uint64_t)v69);
    outlined release of _GraphInputs((uint64_t)&v66);
    outlined release of _ViewInputs(a2);
    *(_QWORD *)v61 = v26;
    *(_DWORD *)&v61[8] = v25;
    *(_QWORD *)&v61[12] = v54;
    *(_DWORD *)&v61[20] = OffsetAttribute2;
    *(_DWORD *)&v61[24] = v52;
    *(_DWORD *)&v61[28] = v51;
    *(_QWORD *)&v62 = __PAIR64__(v29, v28);
    *((_QWORD *)&v62 + 1) = __PAIR64__(v30, v22);
    LOBYTE(v63) = v27;
    WORD1(v63) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ShapeStyledDisplayList<AnimatedShape<Capsule._Inset>>(0);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ShapeStyledDisplayList<AnimatedShape<Capsule._Inset>> and conformance ShapeStyledDisplayList<A>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledDisplayList<AnimatedShape<Capsule._Inset>>, (uint64_t)&protocol conformance descriptor for ShapeStyledDisplayList<A>);
    v31 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v61[0] = 0;
    PreferencesOutputs.subscript.setter(v31, v12, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v32);
    v7 = MEMORY[0x24BEE4AF8];
    v9 = v58;
  }
LABEL_11:
  v33 = *(_OWORD *)(a2 + 48);
  v34 = *(_OWORD *)(a2 + 64);
  v35 = *(_OWORD *)(a2 + 16);
  v62 = *(_OWORD *)(a2 + 32);
  v63 = v33;
  v64 = v34;
  v65 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)v61 = *(_OWORD *)a2;
  *(_OWORD *)&v61[16] = v35;
  swift_beginAccess();
  v36 = CachedEnvironment.animatedSize(for:)((uint64_t *)v61);
  v37 = *(_OWORD *)(a2 + 48);
  v62 = *(_OWORD *)(a2 + 32);
  v63 = v37;
  v64 = *(_OWORD *)(a2 + 64);
  v65 = *(_DWORD *)(a2 + 80);
  v38 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v61 = *(_OWORD *)a2;
  *(_OWORD *)&v61[16] = v38;
  v39 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v61);
  swift_endAccess();
  v40 = *(_DWORD *)(a2 + 60);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<AnimatedShape<Capsule._Inset>>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderData<AnimatedShape<Capsule._Inset>>, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
  v41 = swift_allocObject();
  *(_OWORD *)(v41 + 40) = 0u;
  *(_OWORD *)(v41 + 56) = 0u;
  *(_OWORD *)(v41 + 72) = 0u;
  *(_OWORD *)(v41 + 88) = 0u;
  *(_OWORD *)(v41 + 104) = 0u;
  *(_QWORD *)(v41 + 120) = v7;
  *(_DWORD *)(v41 + 128) = 0;
  *(_BYTE *)(v41 + 132) = 1;
  *(_QWORD *)(v41 + 24) = 0;
  *(_QWORD *)(v41 + 136) = 0;
  *(_QWORD *)(v41 + 144) = 0;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  v42 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x23B7C9E44](v42 + 200);
  v43 = *(_QWORD *)(v42 + 208);
  swift_release();
  swift_beginAccess();
  *(_QWORD *)(v41 + 24) = v43;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  if (v11)
  {
    v45 = v44;
    v46 = (_QWORD *)(v9 + 32);
    while (*v46 != v44)
    {
      v46 += 2;
      if (!--v11)
        goto LABEL_17;
    }
    *(_QWORD *)v61 = v54;
    *(_DWORD *)&v61[8] = v36;
    *(_DWORD *)&v61[12] = v39;
    *(_DWORD *)&v61[16] = v40;
    *(_QWORD *)&v61[24] = v41;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v58);
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<Capsule._Inset>>(0);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<AnimatedShape<Capsule._Inset>> and conformance ShapeStyledResponderFilter<A>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<Capsule._Inset>>, (uint64_t)&protocol conformance descriptor for ShapeStyledResponderFilter<A>);
    v47 = Attribute.init<A>(body:value:flags:update:)();
    v61[0] = 0;
    PreferencesOutputs.subscript.setter(v47, v45, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v48);
    outlined release of LinearGradient((uint64_t)&v58);
  }
LABEL_17:
  result = swift_release();
  *a5 = v56;
  a5[1] = v57;
  return result;
}

{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  Swift::UInt32 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt32 v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  int v36;
  __int128 v37;
  __int128 v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t result;
  void (*v50)(_BYTE *, _QWORD);
  int v51;
  int v52;
  int OffsetAttribute2;
  unint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  Swift::UInt32 v60[6];
  _BYTE v61[32];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  int v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _QWORD v69[3];

  v54 = __PAIR64__(a3, a1);
  v69[1] = *MEMORY[0x24BDAC8D0];
  v7 = MEMORY[0x24BEE4AF8];
  v56 = MEMORY[0x24BEE4AF8];
  v8 = *MEMORY[0x24BE096C0];
  LODWORD(v57) = 0;
  HIDWORD(v57) = *MEMORY[0x24BE096C0];
  v58 = *(_QWORD *)(a2 + 48);
  v9 = v58;
  v59 = *(_DWORD *)(a2 + 56);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v11 = *(_QWORD *)(v58 + 16);
  if (v11)
  {
    v12 = v10;
    v13 = (_QWORD *)(v58 + 32);
    v14 = *(_QWORD *)(v58 + 16);
    while (*v13 != v10)
    {
      v13 += 2;
      if (!--v14)
        goto LABEL_11;
    }
    v15 = ++lastIdentity;
    v16 = *(_OWORD *)(a2 + 32);
    v67 = *(_OWORD *)(a2 + 16);
    v68 = v16;
    v66 = *(_OWORD *)a2;
    if ((BYTE5(v16) & 1) != 0)
    {
      outlined retain of _ViewInputs(a2);
      specialized _ViewInputs.subscript.getter();
      outlined release of _ViewInputs(a2);
      result = AGWeakAttributeGetAttribute();
      if ((_DWORD)result == v8)
      {
        __break(1u);
        return result;
      }
      v60[0] = v15;
      v50 = (void (*)(_BYTE *, _QWORD))Attribute<A>.subscript.modify();
      _DisplayList_StableIdentityScope.pushIdentity(_:)(v60);
      v50(v61, 0);
    }
    swift_retain();
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    v17 = v67;
    v18 = *(_OWORD *)(a2 + 48);
    v62 = *(_OWORD *)(a2 + 32);
    v63 = v18;
    v64 = *(_OWORD *)(a2 + 64);
    v65 = *(_DWORD *)(a2 + 80);
    v19 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v61 = *(_OWORD *)a2;
    *(_OWORD *)&v61[16] = v19;
    swift_beginAccess();
    v52 = CachedEnvironment.animatedSize(for:)((uint64_t *)v61);
    v20 = *(_OWORD *)(a2 + 48);
    v62 = *(_OWORD *)(a2 + 32);
    v63 = v20;
    v64 = *(_OWORD *)(a2 + 64);
    v65 = *(_DWORD *)(a2 + 80);
    v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v61 = *(_OWORD *)a2;
    *(_OWORD *)&v61[16] = v21;
    v51 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v61);
    swift_endAccess();
    v22 = *(_DWORD *)(v17 + 16);
    v23 = v66;
    v69[0] = v66;
    outlined retain of _ViewInputs(a2);
    outlined retain of _GraphInputs((uint64_t)&v66);
    outlined retain of ViewTransform((uint64_t)v69);
    v24 = specialized find<A>(_:key:)(v23);
    v25 = v15;
    v26 = a4;
    if (v24)
      v27 = *(_BYTE *)(v24 + 72);
    else
      v27 = 0;
    v28 = *(_DWORD *)(a2 + 68);
    v29 = *(_DWORD *)(a2 + 60);
    v30 = *(_DWORD *)(a2 + 76);
    outlined release of ViewTransform((uint64_t)v69);
    outlined release of _GraphInputs((uint64_t)&v66);
    outlined release of _ViewInputs(a2);
    *(_QWORD *)v61 = v26;
    *(_DWORD *)&v61[8] = v25;
    *(_QWORD *)&v61[12] = v54;
    *(_DWORD *)&v61[20] = OffsetAttribute2;
    *(_DWORD *)&v61[24] = v52;
    *(_DWORD *)&v61[28] = v51;
    *(_QWORD *)&v62 = __PAIR64__(v29, v28);
    *((_QWORD *)&v62 + 1) = __PAIR64__(v30, v22);
    LOBYTE(v63) = v27;
    WORD1(v63) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<Circle, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Circle, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<Circle, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>();
    v31 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v61[0] = 0;
    PreferencesOutputs.subscript.setter(v31, v12, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v32);
    v7 = MEMORY[0x24BEE4AF8];
    v9 = v58;
  }
LABEL_11:
  v33 = *(_OWORD *)(a2 + 48);
  v34 = *(_OWORD *)(a2 + 64);
  v35 = *(_OWORD *)(a2 + 16);
  v62 = *(_OWORD *)(a2 + 32);
  v63 = v33;
  v64 = v34;
  v65 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)v61 = *(_OWORD *)a2;
  *(_OWORD *)&v61[16] = v35;
  swift_beginAccess();
  v36 = CachedEnvironment.animatedSize(for:)((uint64_t *)v61);
  v37 = *(_OWORD *)(a2 + 48);
  v62 = *(_OWORD *)(a2 + 32);
  v63 = v37;
  v64 = *(_OWORD *)(a2 + 64);
  v65 = *(_DWORD *)(a2 + 80);
  v38 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v61 = *(_OWORD *)a2;
  *(_OWORD *)&v61[16] = v38;
  v39 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v61);
  swift_endAccess();
  v40 = *(_DWORD *)(a2 + 60);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<_ShapeView<Circle, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderData<_ShapeView<Circle, ForegroundStyle>>, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
  v41 = swift_allocObject();
  *(_OWORD *)(v41 + 40) = 0u;
  *(_OWORD *)(v41 + 56) = 0u;
  *(_OWORD *)(v41 + 72) = 0u;
  *(_OWORD *)(v41 + 88) = 0u;
  *(_QWORD *)(v41 + 104) = 0;
  *(_QWORD *)(v41 + 112) = v7;
  *(_DWORD *)(v41 + 120) = 0;
  *(_BYTE *)(v41 + 124) = 1;
  *(_QWORD *)(v41 + 24) = 0;
  *(_QWORD *)(v41 + 128) = 0;
  *(_QWORD *)(v41 + 136) = 0;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  v42 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x23B7C9E44](v42 + 200);
  v43 = *(_QWORD *)(v42 + 208);
  swift_release();
  swift_beginAccess();
  *(_QWORD *)(v41 + 24) = v43;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  if (v11)
  {
    v45 = v44;
    v46 = (_QWORD *)(v9 + 32);
    while (*v46 != v44)
    {
      v46 += 2;
      if (!--v11)
        goto LABEL_17;
    }
    *(_QWORD *)v61 = v54;
    *(_DWORD *)&v61[8] = v36;
    *(_DWORD *)&v61[12] = v39;
    *(_DWORD *)&v61[16] = v40;
    *(_QWORD *)&v61[24] = v41;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v58);
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<Circle, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Circle, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<Circle, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>();
    v47 = Attribute.init<A>(body:value:flags:update:)();
    v61[0] = 0;
    PreferencesOutputs.subscript.setter(v47, v45, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v48);
    outlined release of LinearGradient((uint64_t)&v58);
  }
LABEL_17:
  result = swift_release();
  *a5 = v56;
  a5[1] = v57;
  return result;
}

{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  Swift::UInt32 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt32 v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  int v36;
  __int128 v37;
  __int128 v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t result;
  void (*v50)(_BYTE *, _QWORD);
  int v51;
  int v52;
  int OffsetAttribute2;
  unint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  Swift::UInt32 v60[6];
  _BYTE v61[32];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  int v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _QWORD v69[3];

  v54 = __PAIR64__(a3, a1);
  v69[1] = *MEMORY[0x24BDAC8D0];
  v7 = MEMORY[0x24BEE4AF8];
  v56 = MEMORY[0x24BEE4AF8];
  v8 = *MEMORY[0x24BE096C0];
  LODWORD(v57) = 0;
  HIDWORD(v57) = *MEMORY[0x24BE096C0];
  v58 = *(_QWORD *)(a2 + 48);
  v9 = v58;
  v59 = *(_DWORD *)(a2 + 56);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v11 = *(_QWORD *)(v58 + 16);
  if (v11)
  {
    v12 = v10;
    v13 = (_QWORD *)(v58 + 32);
    v14 = *(_QWORD *)(v58 + 16);
    while (*v13 != v10)
    {
      v13 += 2;
      if (!--v14)
        goto LABEL_11;
    }
    v15 = ++lastIdentity;
    v16 = *(_OWORD *)(a2 + 32);
    v67 = *(_OWORD *)(a2 + 16);
    v68 = v16;
    v66 = *(_OWORD *)a2;
    if ((BYTE5(v16) & 1) != 0)
    {
      outlined retain of _ViewInputs(a2);
      specialized _ViewInputs.subscript.getter();
      outlined release of _ViewInputs(a2);
      result = AGWeakAttributeGetAttribute();
      if ((_DWORD)result == v8)
      {
        __break(1u);
        return result;
      }
      v60[0] = v15;
      v50 = (void (*)(_BYTE *, _QWORD))Attribute<A>.subscript.modify();
      _DisplayList_StableIdentityScope.pushIdentity(_:)(v60);
      v50(v61, 0);
    }
    swift_retain();
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    v17 = v67;
    v18 = *(_OWORD *)(a2 + 48);
    v62 = *(_OWORD *)(a2 + 32);
    v63 = v18;
    v64 = *(_OWORD *)(a2 + 64);
    v65 = *(_DWORD *)(a2 + 80);
    v19 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v61 = *(_OWORD *)a2;
    *(_OWORD *)&v61[16] = v19;
    swift_beginAccess();
    v52 = CachedEnvironment.animatedSize(for:)((uint64_t *)v61);
    v20 = *(_OWORD *)(a2 + 48);
    v62 = *(_OWORD *)(a2 + 32);
    v63 = v20;
    v64 = *(_OWORD *)(a2 + 64);
    v65 = *(_DWORD *)(a2 + 80);
    v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v61 = *(_OWORD *)a2;
    *(_OWORD *)&v61[16] = v21;
    v51 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v61);
    swift_endAccess();
    v22 = *(_DWORD *)(v17 + 16);
    v23 = v66;
    v69[0] = v66;
    outlined retain of _ViewInputs(a2);
    outlined retain of _GraphInputs((uint64_t)&v66);
    outlined retain of ViewTransform((uint64_t)v69);
    v24 = specialized find<A>(_:key:)(v23);
    v25 = v15;
    v26 = a4;
    if (v24)
      v27 = *(_BYTE *)(v24 + 72);
    else
      v27 = 0;
    v28 = *(_DWORD *)(a2 + 68);
    v29 = *(_DWORD *)(a2 + 60);
    v30 = *(_DWORD *)(a2 + 76);
    outlined release of ViewTransform((uint64_t)v69);
    outlined release of _GraphInputs((uint64_t)&v66);
    outlined release of _ViewInputs(a2);
    *(_QWORD *)v61 = v26;
    *(_DWORD *)&v61[8] = v25;
    *(_QWORD *)&v61[12] = v54;
    *(_DWORD *)&v61[20] = OffsetAttribute2;
    *(_DWORD *)&v61[24] = v52;
    *(_DWORD *)&v61[28] = v51;
    *(_QWORD *)&v62 = __PAIR64__(v29, v28);
    *((_QWORD *)&v62 + 1) = __PAIR64__(v30, v22);
    LOBYTE(v63) = v27;
    WORD1(v63) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ShapeStyledDisplayList<AnimatedShape<Circle._Inset>>(0);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ShapeStyledDisplayList<AnimatedShape<Circle._Inset>> and conformance ShapeStyledDisplayList<A>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledDisplayList<AnimatedShape<Circle._Inset>>, (uint64_t)&protocol conformance descriptor for ShapeStyledDisplayList<A>);
    v31 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v61[0] = 0;
    PreferencesOutputs.subscript.setter(v31, v12, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v32);
    v7 = MEMORY[0x24BEE4AF8];
    v9 = v58;
  }
LABEL_11:
  v33 = *(_OWORD *)(a2 + 48);
  v34 = *(_OWORD *)(a2 + 64);
  v35 = *(_OWORD *)(a2 + 16);
  v62 = *(_OWORD *)(a2 + 32);
  v63 = v33;
  v64 = v34;
  v65 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)v61 = *(_OWORD *)a2;
  *(_OWORD *)&v61[16] = v35;
  swift_beginAccess();
  v36 = CachedEnvironment.animatedSize(for:)((uint64_t *)v61);
  v37 = *(_OWORD *)(a2 + 48);
  v62 = *(_OWORD *)(a2 + 32);
  v63 = v37;
  v64 = *(_OWORD *)(a2 + 64);
  v65 = *(_DWORD *)(a2 + 80);
  v38 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v61 = *(_OWORD *)a2;
  *(_OWORD *)&v61[16] = v38;
  v39 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v61);
  swift_endAccess();
  v40 = *(_DWORD *)(a2 + 60);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<AnimatedShape<Circle._Inset>>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderData<AnimatedShape<Circle._Inset>>, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
  v41 = swift_allocObject();
  *(_OWORD *)(v41 + 40) = 0u;
  *(_OWORD *)(v41 + 56) = 0u;
  *(_OWORD *)(v41 + 72) = 0u;
  *(_OWORD *)(v41 + 88) = 0u;
  *(_OWORD *)(v41 + 104) = 0u;
  *(_QWORD *)(v41 + 120) = v7;
  *(_DWORD *)(v41 + 128) = 0;
  *(_BYTE *)(v41 + 132) = 1;
  *(_QWORD *)(v41 + 24) = 0;
  *(_QWORD *)(v41 + 136) = 0;
  *(_QWORD *)(v41 + 144) = 0;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  v42 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x23B7C9E44](v42 + 200);
  v43 = *(_QWORD *)(v42 + 208);
  swift_release();
  swift_beginAccess();
  *(_QWORD *)(v41 + 24) = v43;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  if (v11)
  {
    v45 = v44;
    v46 = (_QWORD *)(v9 + 32);
    while (*v46 != v44)
    {
      v46 += 2;
      if (!--v11)
        goto LABEL_17;
    }
    *(_QWORD *)v61 = v54;
    *(_DWORD *)&v61[8] = v36;
    *(_DWORD *)&v61[12] = v39;
    *(_DWORD *)&v61[16] = v40;
    *(_QWORD *)&v61[24] = v41;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v58);
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<Circle._Inset>>(0);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<AnimatedShape<Circle._Inset>> and conformance ShapeStyledResponderFilter<A>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<Circle._Inset>>, (uint64_t)&protocol conformance descriptor for ShapeStyledResponderFilter<A>);
    v47 = Attribute.init<A>(body:value:flags:update:)();
    v61[0] = 0;
    PreferencesOutputs.subscript.setter(v47, v45, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v48);
    outlined release of LinearGradient((uint64_t)&v58);
  }
LABEL_17:
  result = swift_release();
  *a5 = v56;
  a5[1] = v57;
  return result;
}

{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  Swift::UInt32 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt32 v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  int v36;
  __int128 v37;
  __int128 v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t result;
  void (*v50)(_BYTE *, _QWORD);
  int v51;
  int v52;
  int OffsetAttribute2;
  unint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  Swift::UInt32 v60[6];
  _BYTE v61[32];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  int v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _QWORD v69[3];

  v54 = __PAIR64__(a3, a1);
  v69[1] = *MEMORY[0x24BDAC8D0];
  v7 = MEMORY[0x24BEE4AF8];
  v56 = MEMORY[0x24BEE4AF8];
  v8 = *MEMORY[0x24BE096C0];
  LODWORD(v57) = 0;
  HIDWORD(v57) = *MEMORY[0x24BE096C0];
  v58 = *(_QWORD *)(a2 + 48);
  v9 = v58;
  v59 = *(_DWORD *)(a2 + 56);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v11 = *(_QWORD *)(v58 + 16);
  if (v11)
  {
    v12 = v10;
    v13 = (_QWORD *)(v58 + 32);
    v14 = *(_QWORD *)(v58 + 16);
    while (*v13 != v10)
    {
      v13 += 2;
      if (!--v14)
        goto LABEL_11;
    }
    v15 = ++lastIdentity;
    v16 = *(_OWORD *)(a2 + 32);
    v67 = *(_OWORD *)(a2 + 16);
    v68 = v16;
    v66 = *(_OWORD *)a2;
    if ((BYTE5(v16) & 1) != 0)
    {
      outlined retain of _ViewInputs(a2);
      specialized _ViewInputs.subscript.getter();
      outlined release of _ViewInputs(a2);
      result = AGWeakAttributeGetAttribute();
      if ((_DWORD)result == v8)
      {
        __break(1u);
        return result;
      }
      v60[0] = v15;
      v50 = (void (*)(_BYTE *, _QWORD))Attribute<A>.subscript.modify();
      _DisplayList_StableIdentityScope.pushIdentity(_:)(v60);
      v50(v61, 0);
    }
    swift_retain();
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    v17 = v67;
    v18 = *(_OWORD *)(a2 + 48);
    v62 = *(_OWORD *)(a2 + 32);
    v63 = v18;
    v64 = *(_OWORD *)(a2 + 64);
    v65 = *(_DWORD *)(a2 + 80);
    v19 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v61 = *(_OWORD *)a2;
    *(_OWORD *)&v61[16] = v19;
    swift_beginAccess();
    v52 = CachedEnvironment.animatedSize(for:)((uint64_t *)v61);
    v20 = *(_OWORD *)(a2 + 48);
    v62 = *(_OWORD *)(a2 + 32);
    v63 = v20;
    v64 = *(_OWORD *)(a2 + 64);
    v65 = *(_DWORD *)(a2 + 80);
    v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v61 = *(_OWORD *)a2;
    *(_OWORD *)&v61[16] = v21;
    v51 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v61);
    swift_endAccess();
    v22 = *(_DWORD *)(v17 + 16);
    v23 = v66;
    v69[0] = v66;
    outlined retain of _ViewInputs(a2);
    outlined retain of _GraphInputs((uint64_t)&v66);
    outlined retain of ViewTransform((uint64_t)v69);
    v24 = specialized find<A>(_:key:)(v23);
    v25 = v15;
    v26 = a4;
    if (v24)
      v27 = *(_BYTE *)(v24 + 72);
    else
      v27 = 0;
    v28 = *(_DWORD *)(a2 + 68);
    v29 = *(_DWORD *)(a2 + 60);
    v30 = *(_DWORD *)(a2 + 76);
    outlined release of ViewTransform((uint64_t)v69);
    outlined release of _GraphInputs((uint64_t)&v66);
    outlined release of _ViewInputs(a2);
    *(_QWORD *)v61 = v26;
    *(_DWORD *)&v61[8] = v25;
    *(_QWORD *)&v61[12] = v54;
    *(_DWORD *)&v61[20] = OffsetAttribute2;
    *(_DWORD *)&v61[24] = v52;
    *(_DWORD *)&v61[28] = v51;
    *(_QWORD *)&v62 = __PAIR64__(v29, v28);
    *((_QWORD *)&v62 + 1) = __PAIR64__(v30, v22);
    LOBYTE(v63) = v27;
    WORD1(v63) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<Path, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Path, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<Path, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>();
    v31 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v61[0] = 0;
    PreferencesOutputs.subscript.setter(v31, v12, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v32);
    v7 = MEMORY[0x24BEE4AF8];
    v9 = v58;
  }
LABEL_11:
  v33 = *(_OWORD *)(a2 + 48);
  v34 = *(_OWORD *)(a2 + 64);
  v35 = *(_OWORD *)(a2 + 16);
  v62 = *(_OWORD *)(a2 + 32);
  v63 = v33;
  v64 = v34;
  v65 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)v61 = *(_OWORD *)a2;
  *(_OWORD *)&v61[16] = v35;
  swift_beginAccess();
  v36 = CachedEnvironment.animatedSize(for:)((uint64_t *)v61);
  v37 = *(_OWORD *)(a2 + 48);
  v62 = *(_OWORD *)(a2 + 32);
  v63 = v37;
  v64 = *(_OWORD *)(a2 + 64);
  v65 = *(_DWORD *)(a2 + 80);
  v38 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v61 = *(_OWORD *)a2;
  *(_OWORD *)&v61[16] = v38;
  v39 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v61);
  swift_endAccess();
  v40 = *(_DWORD *)(a2 + 60);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<_ShapeView<Path, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderData<_ShapeView<Path, ForegroundStyle>>, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
  v41 = swift_allocObject();
  *(_OWORD *)(v41 + 40) = 0u;
  *(_OWORD *)(v41 + 56) = 0u;
  *(_OWORD *)(v41 + 72) = 0u;
  *(_OWORD *)(v41 + 88) = 0u;
  *(_OWORD *)(v41 + 104) = 0u;
  *(_OWORD *)(v41 + 120) = 0u;
  *(_QWORD *)(v41 + 136) = 0;
  *(_QWORD *)(v41 + 144) = v7;
  *(_DWORD *)(v41 + 152) = 0;
  *(_BYTE *)(v41 + 156) = 1;
  *(_QWORD *)(v41 + 24) = 0;
  *(_QWORD *)(v41 + 160) = 0;
  *(_QWORD *)(v41 + 168) = 0;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  v42 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x23B7C9E44](v42 + 200);
  v43 = *(_QWORD *)(v42 + 208);
  swift_release();
  swift_beginAccess();
  *(_QWORD *)(v41 + 24) = v43;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  if (v11)
  {
    v45 = v44;
    v46 = (_QWORD *)(v9 + 32);
    while (*v46 != v44)
    {
      v46 += 2;
      if (!--v11)
        goto LABEL_17;
    }
    *(_QWORD *)v61 = v54;
    *(_DWORD *)&v61[8] = v36;
    *(_DWORD *)&v61[12] = v39;
    *(_DWORD *)&v61[16] = v40;
    *(_QWORD *)&v61[24] = v41;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v58);
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<Path, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Path, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<Path, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>();
    v47 = Attribute.init<A>(body:value:flags:update:)();
    v61[0] = 0;
    PreferencesOutputs.subscript.setter(v47, v45, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v48);
    outlined release of LinearGradient((uint64_t)&v58);
  }
LABEL_17:
  result = swift_release();
  *a5 = v56;
  a5[1] = v57;
  return result;
}

{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  Swift::UInt32 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt32 v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  int v36;
  __int128 v37;
  __int128 v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t result;
  void (*v50)(_BYTE *, _QWORD);
  int v51;
  int v52;
  int OffsetAttribute2;
  unint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  Swift::UInt32 v60[6];
  _BYTE v61[32];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  int v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _QWORD v69[3];

  v54 = __PAIR64__(a3, a1);
  v69[1] = *MEMORY[0x24BDAC8D0];
  v7 = MEMORY[0x24BEE4AF8];
  v56 = MEMORY[0x24BEE4AF8];
  v8 = *MEMORY[0x24BE096C0];
  LODWORD(v57) = 0;
  HIDWORD(v57) = *MEMORY[0x24BE096C0];
  v58 = *(_QWORD *)(a2 + 48);
  v9 = v58;
  v59 = *(_DWORD *)(a2 + 56);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v11 = *(_QWORD *)(v58 + 16);
  if (v11)
  {
    v12 = v10;
    v13 = (_QWORD *)(v58 + 32);
    v14 = *(_QWORD *)(v58 + 16);
    while (*v13 != v10)
    {
      v13 += 2;
      if (!--v14)
        goto LABEL_11;
    }
    v15 = ++lastIdentity;
    v16 = *(_OWORD *)(a2 + 32);
    v67 = *(_OWORD *)(a2 + 16);
    v68 = v16;
    v66 = *(_OWORD *)a2;
    if ((BYTE5(v16) & 1) != 0)
    {
      outlined retain of _ViewInputs(a2);
      specialized _ViewInputs.subscript.getter();
      outlined release of _ViewInputs(a2);
      result = AGWeakAttributeGetAttribute();
      if ((_DWORD)result == v8)
      {
        __break(1u);
        return result;
      }
      v60[0] = v15;
      v50 = (void (*)(_BYTE *, _QWORD))Attribute<A>.subscript.modify();
      _DisplayList_StableIdentityScope.pushIdentity(_:)(v60);
      v50(v61, 0);
    }
    swift_retain();
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    v17 = v67;
    v18 = *(_OWORD *)(a2 + 48);
    v62 = *(_OWORD *)(a2 + 32);
    v63 = v18;
    v64 = *(_OWORD *)(a2 + 64);
    v65 = *(_DWORD *)(a2 + 80);
    v19 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v61 = *(_OWORD *)a2;
    *(_OWORD *)&v61[16] = v19;
    swift_beginAccess();
    v52 = CachedEnvironment.animatedSize(for:)((uint64_t *)v61);
    v20 = *(_OWORD *)(a2 + 48);
    v62 = *(_OWORD *)(a2 + 32);
    v63 = v20;
    v64 = *(_OWORD *)(a2 + 64);
    v65 = *(_DWORD *)(a2 + 80);
    v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v61 = *(_OWORD *)a2;
    *(_OWORD *)&v61[16] = v21;
    v51 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v61);
    swift_endAccess();
    v22 = *(_DWORD *)(v17 + 16);
    v23 = v66;
    v69[0] = v66;
    outlined retain of _ViewInputs(a2);
    outlined retain of _GraphInputs((uint64_t)&v66);
    outlined retain of ViewTransform((uint64_t)v69);
    v24 = specialized find<A>(_:key:)(v23);
    v25 = v15;
    v26 = a4;
    if (v24)
      v27 = *(_BYTE *)(v24 + 72);
    else
      v27 = 0;
    v28 = *(_DWORD *)(a2 + 68);
    v29 = *(_DWORD *)(a2 + 60);
    v30 = *(_DWORD *)(a2 + 76);
    outlined release of ViewTransform((uint64_t)v69);
    outlined release of _GraphInputs((uint64_t)&v66);
    outlined release of _ViewInputs(a2);
    *(_QWORD *)v61 = v26;
    *(_DWORD *)&v61[8] = v25;
    *(_QWORD *)&v61[12] = v54;
    *(_DWORD *)&v61[20] = OffsetAttribute2;
    *(_DWORD *)&v61[24] = v52;
    *(_DWORD *)&v61[28] = v51;
    *(_QWORD *)&v62 = __PAIR64__(v29, v28);
    *((_QWORD *)&v62 + 1) = __PAIR64__(v30, v22);
    LOBYTE(v63) = v27;
    WORD1(v63) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ShapeStyledDisplayList<AnimatedShape<UnevenRoundedRectangle>>(0);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ShapeStyledDisplayList<AnimatedShape<UnevenRoundedRectangle>> and conformance ShapeStyledDisplayList<A>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledDisplayList<AnimatedShape<UnevenRoundedRectangle>>, (uint64_t)&protocol conformance descriptor for ShapeStyledDisplayList<A>);
    v31 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v61[0] = 0;
    PreferencesOutputs.subscript.setter(v31, v12, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v32);
    v7 = MEMORY[0x24BEE4AF8];
    v9 = v58;
  }
LABEL_11:
  v33 = *(_OWORD *)(a2 + 48);
  v34 = *(_OWORD *)(a2 + 64);
  v35 = *(_OWORD *)(a2 + 16);
  v62 = *(_OWORD *)(a2 + 32);
  v63 = v33;
  v64 = v34;
  v65 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)v61 = *(_OWORD *)a2;
  *(_OWORD *)&v61[16] = v35;
  swift_beginAccess();
  v36 = CachedEnvironment.animatedSize(for:)((uint64_t *)v61);
  v37 = *(_OWORD *)(a2 + 48);
  v62 = *(_OWORD *)(a2 + 32);
  v63 = v37;
  v64 = *(_OWORD *)(a2 + 64);
  v65 = *(_DWORD *)(a2 + 80);
  v38 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v61 = *(_OWORD *)a2;
  *(_OWORD *)&v61[16] = v38;
  v39 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v61);
  swift_endAccess();
  v40 = *(_DWORD *)(a2 + 60);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<AnimatedShape<UnevenRoundedRectangle>>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderData<AnimatedShape<UnevenRoundedRectangle>>, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
  v41 = swift_allocObject();
  *(_OWORD *)(v41 + 40) = 0u;
  *(_OWORD *)(v41 + 56) = 0u;
  *(_OWORD *)(v41 + 72) = 0u;
  *(_OWORD *)(v41 + 88) = 0u;
  *(_OWORD *)(v41 + 104) = 0u;
  *(_OWORD *)(v41 + 120) = 0u;
  *(_QWORD *)(v41 + 136) = 0;
  *(_QWORD *)(v41 + 144) = v7;
  *(_DWORD *)(v41 + 152) = 0;
  *(_BYTE *)(v41 + 156) = 1;
  *(_QWORD *)(v41 + 24) = 0;
  *(_QWORD *)(v41 + 160) = 0;
  *(_QWORD *)(v41 + 168) = 0;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  v42 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x23B7C9E44](v42 + 200);
  v43 = *(_QWORD *)(v42 + 208);
  swift_release();
  swift_beginAccess();
  *(_QWORD *)(v41 + 24) = v43;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  if (v11)
  {
    v45 = v44;
    v46 = (_QWORD *)(v9 + 32);
    while (*v46 != v44)
    {
      v46 += 2;
      if (!--v11)
        goto LABEL_17;
    }
    *(_QWORD *)v61 = v54;
    *(_DWORD *)&v61[8] = v36;
    *(_DWORD *)&v61[12] = v39;
    *(_DWORD *)&v61[16] = v40;
    *(_QWORD *)&v61[24] = v41;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v58);
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<UnevenRoundedRectangle>>(0);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<AnimatedShape<UnevenRoundedRectangle>> and conformance ShapeStyledResponderFilter<A>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<UnevenRoundedRectangle>>, (uint64_t)&protocol conformance descriptor for ShapeStyledResponderFilter<A>);
    v47 = Attribute.init<A>(body:value:flags:update:)();
    v61[0] = 0;
    PreferencesOutputs.subscript.setter(v47, v45, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v48);
    outlined release of LinearGradient((uint64_t)&v58);
  }
LABEL_17:
  result = swift_release();
  *a5 = v56;
  a5[1] = v57;
  return result;
}

{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  Swift::UInt32 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt32 v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  int v36;
  __int128 v37;
  __int128 v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t result;
  void (*v50)(_BYTE *, _QWORD);
  int v51;
  int v52;
  int OffsetAttribute2;
  unint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  Swift::UInt32 v60[6];
  _BYTE v61[32];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  int v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _QWORD v69[3];

  v54 = __PAIR64__(a3, a1);
  v69[1] = *MEMORY[0x24BDAC8D0];
  v7 = MEMORY[0x24BEE4AF8];
  v56 = MEMORY[0x24BEE4AF8];
  v8 = *MEMORY[0x24BE096C0];
  LODWORD(v57) = 0;
  HIDWORD(v57) = *MEMORY[0x24BE096C0];
  v58 = *(_QWORD *)(a2 + 48);
  v9 = v58;
  v59 = *(_DWORD *)(a2 + 56);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v11 = *(_QWORD *)(v58 + 16);
  if (v11)
  {
    v12 = v10;
    v13 = (_QWORD *)(v58 + 32);
    v14 = *(_QWORD *)(v58 + 16);
    while (*v13 != v10)
    {
      v13 += 2;
      if (!--v14)
        goto LABEL_11;
    }
    v15 = ++lastIdentity;
    v16 = *(_OWORD *)(a2 + 32);
    v67 = *(_OWORD *)(a2 + 16);
    v68 = v16;
    v66 = *(_OWORD *)a2;
    if ((BYTE5(v16) & 1) != 0)
    {
      outlined retain of _ViewInputs(a2);
      specialized _ViewInputs.subscript.getter();
      outlined release of _ViewInputs(a2);
      result = AGWeakAttributeGetAttribute();
      if ((_DWORD)result == v8)
      {
        __break(1u);
        return result;
      }
      v60[0] = v15;
      v50 = (void (*)(_BYTE *, _QWORD))Attribute<A>.subscript.modify();
      _DisplayList_StableIdentityScope.pushIdentity(_:)(v60);
      v50(v61, 0);
    }
    swift_retain();
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    v17 = v67;
    v18 = *(_OWORD *)(a2 + 48);
    v62 = *(_OWORD *)(a2 + 32);
    v63 = v18;
    v64 = *(_OWORD *)(a2 + 64);
    v65 = *(_DWORD *)(a2 + 80);
    v19 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v61 = *(_OWORD *)a2;
    *(_OWORD *)&v61[16] = v19;
    swift_beginAccess();
    v52 = CachedEnvironment.animatedSize(for:)((uint64_t *)v61);
    v20 = *(_OWORD *)(a2 + 48);
    v62 = *(_OWORD *)(a2 + 32);
    v63 = v20;
    v64 = *(_OWORD *)(a2 + 64);
    v65 = *(_DWORD *)(a2 + 80);
    v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v61 = *(_OWORD *)a2;
    *(_OWORD *)&v61[16] = v21;
    v51 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v61);
    swift_endAccess();
    v22 = *(_DWORD *)(v17 + 16);
    v23 = v66;
    v69[0] = v66;
    outlined retain of _ViewInputs(a2);
    outlined retain of _GraphInputs((uint64_t)&v66);
    outlined retain of ViewTransform((uint64_t)v69);
    v24 = specialized find<A>(_:key:)(v23);
    v25 = v15;
    v26 = a4;
    if (v24)
      v27 = *(_BYTE *)(v24 + 72);
    else
      v27 = 0;
    v28 = *(_DWORD *)(a2 + 68);
    v29 = *(_DWORD *)(a2 + 60);
    v30 = *(_DWORD *)(a2 + 76);
    outlined release of ViewTransform((uint64_t)v69);
    outlined release of _GraphInputs((uint64_t)&v66);
    outlined release of _ViewInputs(a2);
    *(_QWORD *)v61 = v26;
    *(_DWORD *)&v61[8] = v25;
    *(_QWORD *)&v61[12] = v54;
    *(_DWORD *)&v61[20] = OffsetAttribute2;
    *(_DWORD *)&v61[24] = v52;
    *(_DWORD *)&v61[28] = v51;
    *(_QWORD *)&v62 = __PAIR64__(v29, v28);
    *((_QWORD *)&v62 + 1) = __PAIR64__(v30, v22);
    LOBYTE(v63) = v27;
    WORD1(v63) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ShapeStyledDisplayList<AnimatedShape<UnevenRoundedRectangle._Inset>>(0);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ShapeStyledDisplayList<AnimatedShape<UnevenRoundedRectangle._Inset>> and conformance ShapeStyledDisplayList<A>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledDisplayList<AnimatedShape<UnevenRoundedRectangle._Inset>>, (uint64_t)&protocol conformance descriptor for ShapeStyledDisplayList<A>);
    v31 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v61[0] = 0;
    PreferencesOutputs.subscript.setter(v31, v12, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v32);
    v7 = MEMORY[0x24BEE4AF8];
    v9 = v58;
  }
LABEL_11:
  v33 = *(_OWORD *)(a2 + 48);
  v34 = *(_OWORD *)(a2 + 64);
  v35 = *(_OWORD *)(a2 + 16);
  v62 = *(_OWORD *)(a2 + 32);
  v63 = v33;
  v64 = v34;
  v65 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)v61 = *(_OWORD *)a2;
  *(_OWORD *)&v61[16] = v35;
  swift_beginAccess();
  v36 = CachedEnvironment.animatedSize(for:)((uint64_t *)v61);
  v37 = *(_OWORD *)(a2 + 48);
  v62 = *(_OWORD *)(a2 + 32);
  v63 = v37;
  v64 = *(_OWORD *)(a2 + 64);
  v65 = *(_DWORD *)(a2 + 80);
  v38 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v61 = *(_OWORD *)a2;
  *(_OWORD *)&v61[16] = v38;
  v39 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v61);
  swift_endAccess();
  v40 = *(_DWORD *)(a2 + 60);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<AnimatedShape<UnevenRoundedRectangle._Inset>>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderData<AnimatedShape<UnevenRoundedRectangle._Inset>>, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
  v41 = swift_allocObject();
  *(_OWORD *)(v41 + 40) = 0u;
  *(_OWORD *)(v41 + 56) = 0u;
  *(_OWORD *)(v41 + 72) = 0u;
  *(_OWORD *)(v41 + 88) = 0u;
  *(_OWORD *)(v41 + 104) = 0u;
  *(_OWORD *)(v41 + 120) = 0u;
  *(_OWORD *)(v41 + 136) = 0u;
  *(_QWORD *)(v41 + 152) = 0;
  *(_QWORD *)(v41 + 160) = v7;
  *(_DWORD *)(v41 + 168) = 0;
  *(_BYTE *)(v41 + 172) = 1;
  *(_QWORD *)(v41 + 24) = 0;
  *(_QWORD *)(v41 + 176) = 0;
  *(_QWORD *)(v41 + 184) = 0;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  v42 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x23B7C9E44](v42 + 200);
  v43 = *(_QWORD *)(v42 + 208);
  swift_release();
  swift_beginAccess();
  *(_QWORD *)(v41 + 24) = v43;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  if (v11)
  {
    v45 = v44;
    v46 = (_QWORD *)(v9 + 32);
    while (*v46 != v44)
    {
      v46 += 2;
      if (!--v11)
        goto LABEL_17;
    }
    *(_QWORD *)v61 = v54;
    *(_DWORD *)&v61[8] = v36;
    *(_DWORD *)&v61[12] = v39;
    *(_DWORD *)&v61[16] = v40;
    *(_QWORD *)&v61[24] = v41;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v58);
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<UnevenRoundedRectangle._Inset>>(0);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<AnimatedShape<UnevenRoundedRectangle._Inset>> and conformance ShapeStyledResponderFilter<A>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<UnevenRoundedRectangle._Inset>>, (uint64_t)&protocol conformance descriptor for ShapeStyledResponderFilter<A>);
    v47 = Attribute.init<A>(body:value:flags:update:)();
    v61[0] = 0;
    PreferencesOutputs.subscript.setter(v47, v45, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v48);
    outlined release of LinearGradient((uint64_t)&v58);
  }
LABEL_17:
  result = swift_release();
  *a5 = v56;
  a5[1] = v57;
  return result;
}

{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  Swift::UInt32 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt32 v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  int v36;
  __int128 v37;
  __int128 v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t result;
  void (*v50)(_BYTE *, _QWORD);
  int v51;
  int v52;
  int OffsetAttribute2;
  unint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  Swift::UInt32 v60[6];
  _BYTE v61[32];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  int v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _QWORD v69[3];

  v54 = __PAIR64__(a3, a1);
  v69[1] = *MEMORY[0x24BDAC8D0];
  v7 = MEMORY[0x24BEE4AF8];
  v56 = MEMORY[0x24BEE4AF8];
  v8 = *MEMORY[0x24BE096C0];
  LODWORD(v57) = 0;
  HIDWORD(v57) = *MEMORY[0x24BE096C0];
  v58 = *(_QWORD *)(a2 + 48);
  v9 = v58;
  v59 = *(_DWORD *)(a2 + 56);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v11 = *(_QWORD *)(v58 + 16);
  if (v11)
  {
    v12 = v10;
    v13 = (_QWORD *)(v58 + 32);
    v14 = *(_QWORD *)(v58 + 16);
    while (*v13 != v10)
    {
      v13 += 2;
      if (!--v14)
        goto LABEL_11;
    }
    v15 = ++lastIdentity;
    v16 = *(_OWORD *)(a2 + 32);
    v67 = *(_OWORD *)(a2 + 16);
    v68 = v16;
    v66 = *(_OWORD *)a2;
    if ((BYTE5(v16) & 1) != 0)
    {
      outlined retain of _ViewInputs(a2);
      specialized _ViewInputs.subscript.getter();
      outlined release of _ViewInputs(a2);
      result = AGWeakAttributeGetAttribute();
      if ((_DWORD)result == v8)
      {
        __break(1u);
        return result;
      }
      v60[0] = v15;
      v50 = (void (*)(_BYTE *, _QWORD))Attribute<A>.subscript.modify();
      _DisplayList_StableIdentityScope.pushIdentity(_:)(v60);
      v50(v61, 0);
    }
    swift_retain();
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    v17 = v67;
    v18 = *(_OWORD *)(a2 + 48);
    v62 = *(_OWORD *)(a2 + 32);
    v63 = v18;
    v64 = *(_OWORD *)(a2 + 64);
    v65 = *(_DWORD *)(a2 + 80);
    v19 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v61 = *(_OWORD *)a2;
    *(_OWORD *)&v61[16] = v19;
    swift_beginAccess();
    v52 = CachedEnvironment.animatedSize(for:)((uint64_t *)v61);
    v20 = *(_OWORD *)(a2 + 48);
    v62 = *(_OWORD *)(a2 + 32);
    v63 = v20;
    v64 = *(_OWORD *)(a2 + 64);
    v65 = *(_DWORD *)(a2 + 80);
    v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v61 = *(_OWORD *)a2;
    *(_OWORD *)&v61[16] = v21;
    v51 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v61);
    swift_endAccess();
    v22 = *(_DWORD *)(v17 + 16);
    v23 = v66;
    v69[0] = v66;
    outlined retain of _ViewInputs(a2);
    outlined retain of _GraphInputs((uint64_t)&v66);
    outlined retain of ViewTransform((uint64_t)v69);
    v24 = specialized find<A>(_:key:)(v23);
    v25 = v15;
    v26 = a4;
    if (v24)
      v27 = *(_BYTE *)(v24 + 72);
    else
      v27 = 0;
    v28 = *(_DWORD *)(a2 + 68);
    v29 = *(_DWORD *)(a2 + 60);
    v30 = *(_DWORD *)(a2 + 76);
    outlined release of ViewTransform((uint64_t)v69);
    outlined release of _GraphInputs((uint64_t)&v66);
    outlined release of _ViewInputs(a2);
    *(_QWORD *)v61 = v26;
    *(_DWORD *)&v61[8] = v25;
    *(_QWORD *)&v61[12] = v54;
    *(_DWORD *)&v61[20] = OffsetAttribute2;
    *(_DWORD *)&v61[24] = v52;
    *(_DWORD *)&v61[28] = v51;
    *(_QWORD *)&v62 = __PAIR64__(v29, v28);
    *((_QWORD *)&v62 + 1) = __PAIR64__(v30, v22);
    LOBYTE(v63) = v27;
    WORD1(v63) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<ContainerRelativeShape, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<ContainerRelativeShape, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<ContainerRelativeShape, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>();
    v31 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v61[0] = 0;
    PreferencesOutputs.subscript.setter(v31, v12, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v32);
    v7 = MEMORY[0x24BEE4AF8];
    v9 = v58;
  }
LABEL_11:
  v33 = *(_OWORD *)(a2 + 48);
  v34 = *(_OWORD *)(a2 + 64);
  v35 = *(_OWORD *)(a2 + 16);
  v62 = *(_OWORD *)(a2 + 32);
  v63 = v33;
  v64 = v34;
  v65 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)v61 = *(_OWORD *)a2;
  *(_OWORD *)&v61[16] = v35;
  swift_beginAccess();
  v36 = CachedEnvironment.animatedSize(for:)((uint64_t *)v61);
  v37 = *(_OWORD *)(a2 + 48);
  v62 = *(_OWORD *)(a2 + 32);
  v63 = v37;
  v64 = *(_OWORD *)(a2 + 64);
  v65 = *(_DWORD *)(a2 + 80);
  v38 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v61 = *(_OWORD *)a2;
  *(_OWORD *)&v61[16] = v38;
  v39 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v61);
  swift_endAccess();
  v40 = *(_DWORD *)(a2 + 60);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<_ShapeView<ContainerRelativeShape, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderData<_ShapeView<ContainerRelativeShape, ForegroundStyle>>, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
  v41 = swift_allocObject();
  *(_OWORD *)(v41 + 40) = 0u;
  *(_OWORD *)(v41 + 56) = 0u;
  *(_OWORD *)(v41 + 72) = 0u;
  *(_OWORD *)(v41 + 88) = 0u;
  *(_QWORD *)(v41 + 104) = 0;
  *(_QWORD *)(v41 + 112) = v7;
  *(_DWORD *)(v41 + 120) = 0;
  *(_BYTE *)(v41 + 124) = 1;
  *(_QWORD *)(v41 + 24) = 0;
  *(_QWORD *)(v41 + 128) = 0;
  *(_QWORD *)(v41 + 136) = 0;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  v42 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x23B7C9E44](v42 + 200);
  v43 = *(_QWORD *)(v42 + 208);
  swift_release();
  swift_beginAccess();
  *(_QWORD *)(v41 + 24) = v43;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  if (v11)
  {
    v45 = v44;
    v46 = (_QWORD *)(v9 + 32);
    while (*v46 != v44)
    {
      v46 += 2;
      if (!--v11)
        goto LABEL_17;
    }
    *(_QWORD *)v61 = v54;
    *(_DWORD *)&v61[8] = v36;
    *(_DWORD *)&v61[12] = v39;
    *(_DWORD *)&v61[16] = v40;
    *(_QWORD *)&v61[24] = v41;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v58);
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<ContainerRelativeShape, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<ContainerRelativeShape, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<ContainerRelativeShape, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>();
    v47 = Attribute.init<A>(body:value:flags:update:)();
    v61[0] = 0;
    PreferencesOutputs.subscript.setter(v47, v45, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v48);
    outlined release of LinearGradient((uint64_t)&v58);
  }
LABEL_17:
  result = swift_release();
  *a5 = v56;
  a5[1] = v57;
  return result;
}

{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  Swift::UInt32 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt32 v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  int v36;
  __int128 v37;
  __int128 v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t result;
  void (*v50)(_BYTE *, _QWORD);
  int v51;
  int v52;
  int OffsetAttribute2;
  unint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  Swift::UInt32 v60[6];
  _BYTE v61[32];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  int v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _QWORD v69[3];

  v54 = __PAIR64__(a3, a1);
  v69[1] = *MEMORY[0x24BDAC8D0];
  v7 = MEMORY[0x24BEE4AF8];
  v56 = MEMORY[0x24BEE4AF8];
  v8 = *MEMORY[0x24BE096C0];
  LODWORD(v57) = 0;
  HIDWORD(v57) = *MEMORY[0x24BE096C0];
  v58 = *(_QWORD *)(a2 + 48);
  v9 = v58;
  v59 = *(_DWORD *)(a2 + 56);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v11 = *(_QWORD *)(v58 + 16);
  if (v11)
  {
    v12 = v10;
    v13 = (_QWORD *)(v58 + 32);
    v14 = *(_QWORD *)(v58 + 16);
    while (*v13 != v10)
    {
      v13 += 2;
      if (!--v14)
        goto LABEL_11;
    }
    v15 = ++lastIdentity;
    v16 = *(_OWORD *)(a2 + 32);
    v67 = *(_OWORD *)(a2 + 16);
    v68 = v16;
    v66 = *(_OWORD *)a2;
    if ((BYTE5(v16) & 1) != 0)
    {
      outlined retain of _ViewInputs(a2);
      specialized _ViewInputs.subscript.getter();
      outlined release of _ViewInputs(a2);
      result = AGWeakAttributeGetAttribute();
      if ((_DWORD)result == v8)
      {
        __break(1u);
        return result;
      }
      v60[0] = v15;
      v50 = (void (*)(_BYTE *, _QWORD))Attribute<A>.subscript.modify();
      _DisplayList_StableIdentityScope.pushIdentity(_:)(v60);
      v50(v61, 0);
    }
    swift_retain();
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    v17 = v67;
    v18 = *(_OWORD *)(a2 + 48);
    v62 = *(_OWORD *)(a2 + 32);
    v63 = v18;
    v64 = *(_OWORD *)(a2 + 64);
    v65 = *(_DWORD *)(a2 + 80);
    v19 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v61 = *(_OWORD *)a2;
    *(_OWORD *)&v61[16] = v19;
    swift_beginAccess();
    v52 = CachedEnvironment.animatedSize(for:)((uint64_t *)v61);
    v20 = *(_OWORD *)(a2 + 48);
    v62 = *(_OWORD *)(a2 + 32);
    v63 = v20;
    v64 = *(_OWORD *)(a2 + 64);
    v65 = *(_DWORD *)(a2 + 80);
    v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v61 = *(_OWORD *)a2;
    *(_OWORD *)&v61[16] = v21;
    v51 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v61);
    swift_endAccess();
    v22 = *(_DWORD *)(v17 + 16);
    v23 = v66;
    v69[0] = v66;
    outlined retain of _ViewInputs(a2);
    outlined retain of _GraphInputs((uint64_t)&v66);
    outlined retain of ViewTransform((uint64_t)v69);
    v24 = specialized find<A>(_:key:)(v23);
    v25 = v15;
    v26 = a4;
    if (v24)
      v27 = *(_BYTE *)(v24 + 72);
    else
      v27 = 0;
    v28 = *(_DWORD *)(a2 + 68);
    v29 = *(_DWORD *)(a2 + 60);
    v30 = *(_DWORD *)(a2 + 76);
    outlined release of ViewTransform((uint64_t)v69);
    outlined release of _GraphInputs((uint64_t)&v66);
    outlined release of _ViewInputs(a2);
    *(_QWORD *)v61 = v26;
    *(_DWORD *)&v61[8] = v25;
    *(_QWORD *)&v61[12] = v54;
    *(_DWORD *)&v61[20] = OffsetAttribute2;
    *(_DWORD *)&v61[24] = v52;
    *(_DWORD *)&v61[28] = v51;
    *(_QWORD *)&v62 = __PAIR64__(v29, v28);
    *((_QWORD *)&v62 + 1) = __PAIR64__(v30, v22);
    LOBYTE(v63) = v27;
    WORD1(v63) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ShapeStyledDisplayList<AnimatedShape<ContainerRelativeShape._Inset>>(0);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ShapeStyledDisplayList<AnimatedShape<ContainerRelativeShape._Inset>> and conformance ShapeStyledDisplayList<A>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledDisplayList<AnimatedShape<ContainerRelativeShape._Inset>>, (uint64_t)&protocol conformance descriptor for ShapeStyledDisplayList<A>);
    v31 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v61[0] = 0;
    PreferencesOutputs.subscript.setter(v31, v12, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v32);
    v7 = MEMORY[0x24BEE4AF8];
    v9 = v58;
  }
LABEL_11:
  v33 = *(_OWORD *)(a2 + 48);
  v34 = *(_OWORD *)(a2 + 64);
  v35 = *(_OWORD *)(a2 + 16);
  v62 = *(_OWORD *)(a2 + 32);
  v63 = v33;
  v64 = v34;
  v65 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)v61 = *(_OWORD *)a2;
  *(_OWORD *)&v61[16] = v35;
  swift_beginAccess();
  v36 = CachedEnvironment.animatedSize(for:)((uint64_t *)v61);
  v37 = *(_OWORD *)(a2 + 48);
  v62 = *(_OWORD *)(a2 + 32);
  v63 = v37;
  v64 = *(_OWORD *)(a2 + 64);
  v65 = *(_DWORD *)(a2 + 80);
  v38 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v61 = *(_OWORD *)a2;
  *(_OWORD *)&v61[16] = v38;
  v39 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v61);
  swift_endAccess();
  v40 = *(_DWORD *)(a2 + 60);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<AnimatedShape<ContainerRelativeShape._Inset>>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderData<AnimatedShape<ContainerRelativeShape._Inset>>, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
  v41 = swift_allocObject();
  *(_OWORD *)(v41 + 40) = 0u;
  *(_OWORD *)(v41 + 56) = 0u;
  *(_OWORD *)(v41 + 72) = 0u;
  *(_OWORD *)(v41 + 88) = 0u;
  *(_OWORD *)(v41 + 104) = 0u;
  *(_QWORD *)(v41 + 120) = v7;
  *(_DWORD *)(v41 + 128) = 0;
  *(_BYTE *)(v41 + 132) = 1;
  *(_QWORD *)(v41 + 24) = 0;
  *(_QWORD *)(v41 + 136) = 0;
  *(_QWORD *)(v41 + 144) = 0;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  v42 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x23B7C9E44](v42 + 200);
  v43 = *(_QWORD *)(v42 + 208);
  swift_release();
  swift_beginAccess();
  *(_QWORD *)(v41 + 24) = v43;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  if (v11)
  {
    v45 = v44;
    v46 = (_QWORD *)(v9 + 32);
    while (*v46 != v44)
    {
      v46 += 2;
      if (!--v11)
        goto LABEL_17;
    }
    *(_QWORD *)v61 = v54;
    *(_DWORD *)&v61[8] = v36;
    *(_DWORD *)&v61[12] = v39;
    *(_DWORD *)&v61[16] = v40;
    *(_QWORD *)&v61[24] = v41;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v58);
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<ContainerRelativeShape._Inset>>(0);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<AnimatedShape<ContainerRelativeShape._Inset>> and conformance ShapeStyledResponderFilter<A>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<ContainerRelativeShape._Inset>>, (uint64_t)&protocol conformance descriptor for ShapeStyledResponderFilter<A>);
    v47 = Attribute.init<A>(body:value:flags:update:)();
    v61[0] = 0;
    PreferencesOutputs.subscript.setter(v47, v45, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v48);
    outlined release of LinearGradient((uint64_t)&v58);
  }
LABEL_17:
  result = swift_release();
  *a5 = v56;
  a5[1] = v57;
  return result;
}

{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  Swift::UInt32 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt32 v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  int v36;
  __int128 v37;
  __int128 v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t result;
  void (*v50)(_BYTE *, _QWORD);
  int v51;
  int v52;
  int OffsetAttribute2;
  unint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  Swift::UInt32 v60[6];
  _BYTE v61[32];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  int v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _QWORD v69[3];

  v54 = __PAIR64__(a3, a1);
  v69[1] = *MEMORY[0x24BDAC8D0];
  v7 = MEMORY[0x24BEE4AF8];
  v56 = MEMORY[0x24BEE4AF8];
  v8 = *MEMORY[0x24BE096C0];
  LODWORD(v57) = 0;
  HIDWORD(v57) = *MEMORY[0x24BE096C0];
  v58 = *(_QWORD *)(a2 + 48);
  v9 = v58;
  v59 = *(_DWORD *)(a2 + 56);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v11 = *(_QWORD *)(v58 + 16);
  if (v11)
  {
    v12 = v10;
    v13 = (_QWORD *)(v58 + 32);
    v14 = *(_QWORD *)(v58 + 16);
    while (*v13 != v10)
    {
      v13 += 2;
      if (!--v14)
        goto LABEL_11;
    }
    v15 = ++lastIdentity;
    v16 = *(_OWORD *)(a2 + 32);
    v67 = *(_OWORD *)(a2 + 16);
    v68 = v16;
    v66 = *(_OWORD *)a2;
    if ((BYTE5(v16) & 1) != 0)
    {
      outlined retain of _ViewInputs(a2);
      specialized _ViewInputs.subscript.getter();
      outlined release of _ViewInputs(a2);
      result = AGWeakAttributeGetAttribute();
      if ((_DWORD)result == v8)
      {
        __break(1u);
        return result;
      }
      v60[0] = v15;
      v50 = (void (*)(_BYTE *, _QWORD))Attribute<A>.subscript.modify();
      _DisplayList_StableIdentityScope.pushIdentity(_:)(v60);
      v50(v61, 0);
    }
    swift_retain();
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    v17 = v67;
    v18 = *(_OWORD *)(a2 + 48);
    v62 = *(_OWORD *)(a2 + 32);
    v63 = v18;
    v64 = *(_OWORD *)(a2 + 64);
    v65 = *(_DWORD *)(a2 + 80);
    v19 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v61 = *(_OWORD *)a2;
    *(_OWORD *)&v61[16] = v19;
    swift_beginAccess();
    v52 = CachedEnvironment.animatedSize(for:)((uint64_t *)v61);
    v20 = *(_OWORD *)(a2 + 48);
    v62 = *(_OWORD *)(a2 + 32);
    v63 = v20;
    v64 = *(_OWORD *)(a2 + 64);
    v65 = *(_DWORD *)(a2 + 80);
    v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v61 = *(_OWORD *)a2;
    *(_OWORD *)&v61[16] = v21;
    v51 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v61);
    swift_endAccess();
    v22 = *(_DWORD *)(v17 + 16);
    v23 = v66;
    v69[0] = v66;
    outlined retain of _ViewInputs(a2);
    outlined retain of _GraphInputs((uint64_t)&v66);
    outlined retain of ViewTransform((uint64_t)v69);
    v24 = specialized find<A>(_:key:)(v23);
    v25 = v15;
    v26 = a4;
    if (v24)
      v27 = *(_BYTE *)(v24 + 72);
    else
      v27 = 0;
    v28 = *(_DWORD *)(a2 + 68);
    v29 = *(_DWORD *)(a2 + 60);
    v30 = *(_DWORD *)(a2 + 76);
    outlined release of ViewTransform((uint64_t)v69);
    outlined release of _GraphInputs((uint64_t)&v66);
    outlined release of _ViewInputs(a2);
    *(_QWORD *)v61 = v26;
    *(_DWORD *)&v61[8] = v25;
    *(_QWORD *)&v61[12] = v54;
    *(_DWORD *)&v61[20] = OffsetAttribute2;
    *(_DWORD *)&v61[24] = v52;
    *(_DWORD *)&v61[28] = v51;
    *(_QWORD *)&v62 = __PAIR64__(v29, v28);
    *((_QWORD *)&v62 + 1) = __PAIR64__(v30, v22);
    LOBYTE(v63) = v27;
    WORD1(v63) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<Rectangle, EllipticalGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, EllipticalGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<Rectangle, EllipticalGradient>> and conformance ShapeStyledDisplayList<A>();
    v31 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v61[0] = 0;
    PreferencesOutputs.subscript.setter(v31, v12, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v32);
    v7 = MEMORY[0x24BEE4AF8];
    v9 = v58;
  }
LABEL_11:
  v33 = *(_OWORD *)(a2 + 48);
  v34 = *(_OWORD *)(a2 + 64);
  v35 = *(_OWORD *)(a2 + 16);
  v62 = *(_OWORD *)(a2 + 32);
  v63 = v33;
  v64 = v34;
  v65 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)v61 = *(_OWORD *)a2;
  *(_OWORD *)&v61[16] = v35;
  swift_beginAccess();
  v36 = CachedEnvironment.animatedSize(for:)((uint64_t *)v61);
  v37 = *(_OWORD *)(a2 + 48);
  v62 = *(_OWORD *)(a2 + 32);
  v63 = v37;
  v64 = *(_OWORD *)(a2 + 64);
  v65 = *(_DWORD *)(a2 + 80);
  v38 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v61 = *(_OWORD *)a2;
  *(_OWORD *)&v61[16] = v38;
  v39 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v61);
  swift_endAccess();
  v40 = *(_DWORD *)(a2 + 60);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<_ShapeView<Rectangle, EllipticalGradient>>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderData<_ShapeView<Rectangle, EllipticalGradient>>, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
  v41 = swift_allocObject();
  *(_OWORD *)(v41 + 40) = 0u;
  *(_OWORD *)(v41 + 56) = 0u;
  *(_OWORD *)(v41 + 72) = 0u;
  *(_OWORD *)(v41 + 88) = 0u;
  *(_OWORD *)(v41 + 104) = 0u;
  *(_OWORD *)(v41 + 120) = 0u;
  *(_OWORD *)(v41 + 136) = 0u;
  *(_QWORD *)(v41 + 152) = v7;
  *(_DWORD *)(v41 + 160) = 0;
  *(_BYTE *)(v41 + 164) = 1;
  *(_QWORD *)(v41 + 24) = 0;
  *(_QWORD *)(v41 + 168) = 0;
  *(_QWORD *)(v41 + 176) = 0;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  v42 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x23B7C9E44](v42 + 200);
  v43 = *(_QWORD *)(v42 + 208);
  swift_release();
  swift_beginAccess();
  *(_QWORD *)(v41 + 24) = v43;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  if (v11)
  {
    v45 = v44;
    v46 = (_QWORD *)(v9 + 32);
    while (*v46 != v44)
    {
      v46 += 2;
      if (!--v11)
        goto LABEL_17;
    }
    *(_QWORD *)v61 = v54;
    *(_DWORD *)&v61[8] = v36;
    *(_DWORD *)&v61[12] = v39;
    *(_DWORD *)&v61[16] = v40;
    *(_QWORD *)&v61[24] = v41;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v58);
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<Rectangle, EllipticalGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, EllipticalGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<Rectangle, EllipticalGradient>> and conformance ShapeStyledResponderFilter<A>();
    v47 = Attribute.init<A>(body:value:flags:update:)();
    v61[0] = 0;
    PreferencesOutputs.subscript.setter(v47, v45, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v48);
    outlined release of LinearGradient((uint64_t)&v58);
  }
LABEL_17:
  result = swift_release();
  *a5 = v56;
  a5[1] = v57;
  return result;
}

{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  Swift::UInt32 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt32 v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  int v36;
  __int128 v37;
  __int128 v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t result;
  void (*v50)(_BYTE *, _QWORD);
  int v51;
  int v52;
  int OffsetAttribute2;
  unint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  Swift::UInt32 v60[6];
  _BYTE v61[32];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  int v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _QWORD v69[3];

  v54 = __PAIR64__(a3, a1);
  v69[1] = *MEMORY[0x24BDAC8D0];
  v7 = MEMORY[0x24BEE4AF8];
  v56 = MEMORY[0x24BEE4AF8];
  v8 = *MEMORY[0x24BE096C0];
  LODWORD(v57) = 0;
  HIDWORD(v57) = *MEMORY[0x24BE096C0];
  v58 = *(_QWORD *)(a2 + 48);
  v9 = v58;
  v59 = *(_DWORD *)(a2 + 56);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v11 = *(_QWORD *)(v58 + 16);
  if (v11)
  {
    v12 = v10;
    v13 = (_QWORD *)(v58 + 32);
    v14 = *(_QWORD *)(v58 + 16);
    while (*v13 != v10)
    {
      v13 += 2;
      if (!--v14)
        goto LABEL_11;
    }
    v15 = ++lastIdentity;
    v16 = *(_OWORD *)(a2 + 32);
    v67 = *(_OWORD *)(a2 + 16);
    v68 = v16;
    v66 = *(_OWORD *)a2;
    if ((BYTE5(v16) & 1) != 0)
    {
      outlined retain of _ViewInputs(a2);
      specialized _ViewInputs.subscript.getter();
      outlined release of _ViewInputs(a2);
      result = AGWeakAttributeGetAttribute();
      if ((_DWORD)result == v8)
      {
        __break(1u);
        return result;
      }
      v60[0] = v15;
      v50 = (void (*)(_BYTE *, _QWORD))Attribute<A>.subscript.modify();
      _DisplayList_StableIdentityScope.pushIdentity(_:)(v60);
      v50(v61, 0);
    }
    swift_retain();
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    v17 = v67;
    v18 = *(_OWORD *)(a2 + 48);
    v62 = *(_OWORD *)(a2 + 32);
    v63 = v18;
    v64 = *(_OWORD *)(a2 + 64);
    v65 = *(_DWORD *)(a2 + 80);
    v19 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v61 = *(_OWORD *)a2;
    *(_OWORD *)&v61[16] = v19;
    swift_beginAccess();
    v52 = CachedEnvironment.animatedSize(for:)((uint64_t *)v61);
    v20 = *(_OWORD *)(a2 + 48);
    v62 = *(_OWORD *)(a2 + 32);
    v63 = v20;
    v64 = *(_OWORD *)(a2 + 64);
    v65 = *(_DWORD *)(a2 + 80);
    v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v61 = *(_OWORD *)a2;
    *(_OWORD *)&v61[16] = v21;
    v51 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v61);
    swift_endAccess();
    v22 = *(_DWORD *)(v17 + 16);
    v23 = v66;
    v69[0] = v66;
    outlined retain of _ViewInputs(a2);
    outlined retain of _GraphInputs((uint64_t)&v66);
    outlined retain of ViewTransform((uint64_t)v69);
    v24 = specialized find<A>(_:key:)(v23);
    v25 = v15;
    v26 = a4;
    if (v24)
      v27 = *(_BYTE *)(v24 + 72);
    else
      v27 = 0;
    v28 = *(_DWORD *)(a2 + 68);
    v29 = *(_DWORD *)(a2 + 60);
    v30 = *(_DWORD *)(a2 + 76);
    outlined release of ViewTransform((uint64_t)v69);
    outlined release of _GraphInputs((uint64_t)&v66);
    outlined release of _ViewInputs(a2);
    *(_QWORD *)v61 = v26;
    *(_DWORD *)&v61[8] = v25;
    *(_QWORD *)&v61[12] = v54;
    *(_DWORD *)&v61[20] = OffsetAttribute2;
    *(_DWORD *)&v61[24] = v52;
    *(_DWORD *)&v61[28] = v51;
    *(_QWORD *)&v62 = __PAIR64__(v29, v28);
    *((_QWORD *)&v62 + 1) = __PAIR64__(v30, v22);
    LOBYTE(v63) = v27;
    WORD1(v63) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ShapeStyledDisplayList<AnimatedShape<RoundedRectangle>>(0);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ShapeStyledDisplayList<AnimatedShape<RoundedRectangle>> and conformance ShapeStyledDisplayList<A>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledDisplayList<AnimatedShape<RoundedRectangle>>, (uint64_t)&protocol conformance descriptor for ShapeStyledDisplayList<A>);
    v31 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v61[0] = 0;
    PreferencesOutputs.subscript.setter(v31, v12, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v32);
    v7 = MEMORY[0x24BEE4AF8];
    v9 = v58;
  }
LABEL_11:
  v33 = *(_OWORD *)(a2 + 48);
  v34 = *(_OWORD *)(a2 + 64);
  v35 = *(_OWORD *)(a2 + 16);
  v62 = *(_OWORD *)(a2 + 32);
  v63 = v33;
  v64 = v34;
  v65 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)v61 = *(_OWORD *)a2;
  *(_OWORD *)&v61[16] = v35;
  swift_beginAccess();
  v36 = CachedEnvironment.animatedSize(for:)((uint64_t *)v61);
  v37 = *(_OWORD *)(a2 + 48);
  v62 = *(_OWORD *)(a2 + 32);
  v63 = v37;
  v64 = *(_OWORD *)(a2 + 64);
  v65 = *(_DWORD *)(a2 + 80);
  v38 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v61 = *(_OWORD *)a2;
  *(_OWORD *)&v61[16] = v38;
  v39 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v61);
  swift_endAccess();
  v40 = *(_DWORD *)(a2 + 60);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<AnimatedShape<RoundedRectangle>>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderData<AnimatedShape<RoundedRectangle>>, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
  v41 = swift_allocObject();
  *(_OWORD *)(v41 + 40) = 0u;
  *(_OWORD *)(v41 + 56) = 0u;
  *(_OWORD *)(v41 + 72) = 0u;
  *(_OWORD *)(v41 + 88) = 0u;
  *(_OWORD *)(v41 + 104) = 0u;
  *(_QWORD *)(v41 + 120) = 0;
  *(_QWORD *)(v41 + 128) = v7;
  *(_DWORD *)(v41 + 136) = 0;
  *(_BYTE *)(v41 + 140) = 1;
  *(_QWORD *)(v41 + 24) = 0;
  *(_QWORD *)(v41 + 144) = 0;
  *(_QWORD *)(v41 + 152) = 0;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  v42 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x23B7C9E44](v42 + 200);
  v43 = *(_QWORD *)(v42 + 208);
  swift_release();
  swift_beginAccess();
  *(_QWORD *)(v41 + 24) = v43;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  if (v11)
  {
    v45 = v44;
    v46 = (_QWORD *)(v9 + 32);
    while (*v46 != v44)
    {
      v46 += 2;
      if (!--v11)
        goto LABEL_17;
    }
    *(_QWORD *)v61 = v54;
    *(_DWORD *)&v61[8] = v36;
    *(_DWORD *)&v61[12] = v39;
    *(_DWORD *)&v61[16] = v40;
    *(_QWORD *)&v61[24] = v41;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v58);
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<RoundedRectangle>>(0);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<AnimatedShape<RoundedRectangle>> and conformance ShapeStyledResponderFilter<A>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<RoundedRectangle>>, (uint64_t)&protocol conformance descriptor for ShapeStyledResponderFilter<A>);
    v47 = Attribute.init<A>(body:value:flags:update:)();
    v61[0] = 0;
    PreferencesOutputs.subscript.setter(v47, v45, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v48);
    outlined release of LinearGradient((uint64_t)&v58);
  }
LABEL_17:
  result = swift_release();
  *a5 = v56;
  a5[1] = v57;
  return result;
}

{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  Swift::UInt32 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt32 v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  int v36;
  __int128 v37;
  __int128 v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t result;
  void (*v50)(_BYTE *, _QWORD);
  int v51;
  int v52;
  int OffsetAttribute2;
  unint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  Swift::UInt32 v60[6];
  _BYTE v61[32];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  int v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _QWORD v69[3];

  v54 = __PAIR64__(a3, a1);
  v69[1] = *MEMORY[0x24BDAC8D0];
  v7 = MEMORY[0x24BEE4AF8];
  v56 = MEMORY[0x24BEE4AF8];
  v8 = *MEMORY[0x24BE096C0];
  LODWORD(v57) = 0;
  HIDWORD(v57) = *MEMORY[0x24BE096C0];
  v58 = *(_QWORD *)(a2 + 48);
  v9 = v58;
  v59 = *(_DWORD *)(a2 + 56);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v11 = *(_QWORD *)(v58 + 16);
  if (v11)
  {
    v12 = v10;
    v13 = (_QWORD *)(v58 + 32);
    v14 = *(_QWORD *)(v58 + 16);
    while (*v13 != v10)
    {
      v13 += 2;
      if (!--v14)
        goto LABEL_11;
    }
    v15 = ++lastIdentity;
    v16 = *(_OWORD *)(a2 + 32);
    v67 = *(_OWORD *)(a2 + 16);
    v68 = v16;
    v66 = *(_OWORD *)a2;
    if ((BYTE5(v16) & 1) != 0)
    {
      outlined retain of _ViewInputs(a2);
      specialized _ViewInputs.subscript.getter();
      outlined release of _ViewInputs(a2);
      result = AGWeakAttributeGetAttribute();
      if ((_DWORD)result == v8)
      {
        __break(1u);
        return result;
      }
      v60[0] = v15;
      v50 = (void (*)(_BYTE *, _QWORD))Attribute<A>.subscript.modify();
      _DisplayList_StableIdentityScope.pushIdentity(_:)(v60);
      v50(v61, 0);
    }
    swift_retain();
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    v17 = v67;
    v18 = *(_OWORD *)(a2 + 48);
    v62 = *(_OWORD *)(a2 + 32);
    v63 = v18;
    v64 = *(_OWORD *)(a2 + 64);
    v65 = *(_DWORD *)(a2 + 80);
    v19 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v61 = *(_OWORD *)a2;
    *(_OWORD *)&v61[16] = v19;
    swift_beginAccess();
    v52 = CachedEnvironment.animatedSize(for:)((uint64_t *)v61);
    v20 = *(_OWORD *)(a2 + 48);
    v62 = *(_OWORD *)(a2 + 32);
    v63 = v20;
    v64 = *(_OWORD *)(a2 + 64);
    v65 = *(_DWORD *)(a2 + 80);
    v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v61 = *(_OWORD *)a2;
    *(_OWORD *)&v61[16] = v21;
    v51 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v61);
    swift_endAccess();
    v22 = *(_DWORD *)(v17 + 16);
    v23 = v66;
    v69[0] = v66;
    outlined retain of _ViewInputs(a2);
    outlined retain of _GraphInputs((uint64_t)&v66);
    outlined retain of ViewTransform((uint64_t)v69);
    v24 = specialized find<A>(_:key:)(v23);
    v25 = v15;
    v26 = a4;
    if (v24)
      v27 = *(_BYTE *)(v24 + 72);
    else
      v27 = 0;
    v28 = *(_DWORD *)(a2 + 68);
    v29 = *(_DWORD *)(a2 + 60);
    v30 = *(_DWORD *)(a2 + 76);
    outlined release of ViewTransform((uint64_t)v69);
    outlined release of _GraphInputs((uint64_t)&v66);
    outlined release of _ViewInputs(a2);
    *(_QWORD *)v61 = v26;
    *(_DWORD *)&v61[8] = v25;
    *(_QWORD *)&v61[12] = v54;
    *(_DWORD *)&v61[20] = OffsetAttribute2;
    *(_DWORD *)&v61[24] = v52;
    *(_DWORD *)&v61[28] = v51;
    *(_QWORD *)&v62 = __PAIR64__(v29, v28);
    *((_QWORD *)&v62 + 1) = __PAIR64__(v30, v22);
    LOBYTE(v63) = v27;
    WORD1(v63) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ShapeStyledDisplayList<AnimatedShape<RoundedRectangle._Inset>>(0);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ShapeStyledDisplayList<AnimatedShape<RoundedRectangle._Inset>> and conformance ShapeStyledDisplayList<A>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledDisplayList<AnimatedShape<RoundedRectangle._Inset>>, (uint64_t)&protocol conformance descriptor for ShapeStyledDisplayList<A>);
    v31 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v61[0] = 0;
    PreferencesOutputs.subscript.setter(v31, v12, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v32);
    v7 = MEMORY[0x24BEE4AF8];
    v9 = v58;
  }
LABEL_11:
  v33 = *(_OWORD *)(a2 + 48);
  v34 = *(_OWORD *)(a2 + 64);
  v35 = *(_OWORD *)(a2 + 16);
  v62 = *(_OWORD *)(a2 + 32);
  v63 = v33;
  v64 = v34;
  v65 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)v61 = *(_OWORD *)a2;
  *(_OWORD *)&v61[16] = v35;
  swift_beginAccess();
  v36 = CachedEnvironment.animatedSize(for:)((uint64_t *)v61);
  v37 = *(_OWORD *)(a2 + 48);
  v62 = *(_OWORD *)(a2 + 32);
  v63 = v37;
  v64 = *(_OWORD *)(a2 + 64);
  v65 = *(_DWORD *)(a2 + 80);
  v38 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v61 = *(_OWORD *)a2;
  *(_OWORD *)&v61[16] = v38;
  v39 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v61);
  swift_endAccess();
  v40 = *(_DWORD *)(a2 + 60);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<AnimatedShape<RoundedRectangle._Inset>>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderData<AnimatedShape<RoundedRectangle._Inset>>, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
  v41 = swift_allocObject();
  *(_OWORD *)(v41 + 40) = 0u;
  *(_OWORD *)(v41 + 56) = 0u;
  *(_OWORD *)(v41 + 72) = 0u;
  *(_OWORD *)(v41 + 88) = 0u;
  *(_OWORD *)(v41 + 104) = 0u;
  *(_OWORD *)(v41 + 120) = 0u;
  *(_QWORD *)(v41 + 136) = 0;
  *(_QWORD *)(v41 + 144) = v7;
  *(_DWORD *)(v41 + 152) = 0;
  *(_BYTE *)(v41 + 156) = 1;
  *(_QWORD *)(v41 + 24) = 0;
  *(_QWORD *)(v41 + 160) = 0;
  *(_QWORD *)(v41 + 168) = 0;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  v42 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x23B7C9E44](v42 + 200);
  v43 = *(_QWORD *)(v42 + 208);
  swift_release();
  swift_beginAccess();
  *(_QWORD *)(v41 + 24) = v43;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  if (v11)
  {
    v45 = v44;
    v46 = (_QWORD *)(v9 + 32);
    while (*v46 != v44)
    {
      v46 += 2;
      if (!--v11)
        goto LABEL_17;
    }
    *(_QWORD *)v61 = v54;
    *(_DWORD *)&v61[8] = v36;
    *(_DWORD *)&v61[12] = v39;
    *(_DWORD *)&v61[16] = v40;
    *(_QWORD *)&v61[24] = v41;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v58);
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<RoundedRectangle._Inset>>(0);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<AnimatedShape<RoundedRectangle._Inset>> and conformance ShapeStyledResponderFilter<A>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<RoundedRectangle._Inset>>, (uint64_t)&protocol conformance descriptor for ShapeStyledResponderFilter<A>);
    v47 = Attribute.init<A>(body:value:flags:update:)();
    v61[0] = 0;
    PreferencesOutputs.subscript.setter(v47, v45, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v48);
    outlined release of LinearGradient((uint64_t)&v58);
  }
LABEL_17:
  result = swift_release();
  *a5 = v56;
  a5[1] = v57;
  return result;
}

{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  Swift::UInt32 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt32 v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  int v36;
  __int128 v37;
  __int128 v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t result;
  void (*v50)(_BYTE *, _QWORD);
  int v51;
  int v52;
  int OffsetAttribute2;
  unint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  Swift::UInt32 v60[6];
  _BYTE v61[32];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  int v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _QWORD v69[3];

  v54 = __PAIR64__(a3, a1);
  v69[1] = *MEMORY[0x24BDAC8D0];
  v7 = MEMORY[0x24BEE4AF8];
  v56 = MEMORY[0x24BEE4AF8];
  v8 = *MEMORY[0x24BE096C0];
  LODWORD(v57) = 0;
  HIDWORD(v57) = *MEMORY[0x24BE096C0];
  v58 = *(_QWORD *)(a2 + 48);
  v9 = v58;
  v59 = *(_DWORD *)(a2 + 56);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v11 = *(_QWORD *)(v58 + 16);
  if (v11)
  {
    v12 = v10;
    v13 = (_QWORD *)(v58 + 32);
    v14 = *(_QWORD *)(v58 + 16);
    while (*v13 != v10)
    {
      v13 += 2;
      if (!--v14)
        goto LABEL_11;
    }
    v15 = ++lastIdentity;
    v16 = *(_OWORD *)(a2 + 32);
    v67 = *(_OWORD *)(a2 + 16);
    v68 = v16;
    v66 = *(_OWORD *)a2;
    if ((BYTE5(v16) & 1) != 0)
    {
      outlined retain of _ViewInputs(a2);
      specialized _ViewInputs.subscript.getter();
      outlined release of _ViewInputs(a2);
      result = AGWeakAttributeGetAttribute();
      if ((_DWORD)result == v8)
      {
        __break(1u);
        return result;
      }
      v60[0] = v15;
      v50 = (void (*)(_BYTE *, _QWORD))Attribute<A>.subscript.modify();
      _DisplayList_StableIdentityScope.pushIdentity(_:)(v60);
      v50(v61, 0);
    }
    swift_retain();
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    v17 = v67;
    v18 = *(_OWORD *)(a2 + 48);
    v62 = *(_OWORD *)(a2 + 32);
    v63 = v18;
    v64 = *(_OWORD *)(a2 + 64);
    v65 = *(_DWORD *)(a2 + 80);
    v19 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v61 = *(_OWORD *)a2;
    *(_OWORD *)&v61[16] = v19;
    swift_beginAccess();
    v52 = CachedEnvironment.animatedSize(for:)((uint64_t *)v61);
    v20 = *(_OWORD *)(a2 + 48);
    v62 = *(_OWORD *)(a2 + 32);
    v63 = v20;
    v64 = *(_OWORD *)(a2 + 64);
    v65 = *(_DWORD *)(a2 + 80);
    v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v61 = *(_OWORD *)a2;
    *(_OWORD *)&v61[16] = v21;
    v51 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v61);
    swift_endAccess();
    v22 = *(_DWORD *)(v17 + 16);
    v23 = v66;
    v69[0] = v66;
    outlined retain of _ViewInputs(a2);
    outlined retain of _GraphInputs((uint64_t)&v66);
    outlined retain of ViewTransform((uint64_t)v69);
    v24 = specialized find<A>(_:key:)(v23);
    v25 = v15;
    v26 = a4;
    if (v24)
      v27 = *(_BYTE *)(v24 + 72);
    else
      v27 = 0;
    v28 = *(_DWORD *)(a2 + 68);
    v29 = *(_DWORD *)(a2 + 60);
    v30 = *(_DWORD *)(a2 + 76);
    outlined release of ViewTransform((uint64_t)v69);
    outlined release of _GraphInputs((uint64_t)&v66);
    outlined release of _ViewInputs(a2);
    *(_QWORD *)v61 = v26;
    *(_DWORD *)&v61[8] = v25;
    *(_QWORD *)&v61[12] = v54;
    *(_DWORD *)&v61[20] = OffsetAttribute2;
    *(_DWORD *)&v61[24] = v52;
    *(_DWORD *)&v61[28] = v51;
    *(_QWORD *)&v62 = __PAIR64__(v29, v28);
    *((_QWORD *)&v62 + 1) = __PAIR64__(v30, v22);
    LOBYTE(v63) = v27;
    WORD1(v63) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<Rectangle, AngularGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, AngularGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<Rectangle, AngularGradient>> and conformance ShapeStyledDisplayList<A>();
    v31 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v61[0] = 0;
    PreferencesOutputs.subscript.setter(v31, v12, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v32);
    v7 = MEMORY[0x24BEE4AF8];
    v9 = v58;
  }
LABEL_11:
  v33 = *(_OWORD *)(a2 + 48);
  v34 = *(_OWORD *)(a2 + 64);
  v35 = *(_OWORD *)(a2 + 16);
  v62 = *(_OWORD *)(a2 + 32);
  v63 = v33;
  v64 = v34;
  v65 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)v61 = *(_OWORD *)a2;
  *(_OWORD *)&v61[16] = v35;
  swift_beginAccess();
  v36 = CachedEnvironment.animatedSize(for:)((uint64_t *)v61);
  v37 = *(_OWORD *)(a2 + 48);
  v62 = *(_OWORD *)(a2 + 32);
  v63 = v37;
  v64 = *(_OWORD *)(a2 + 64);
  v65 = *(_DWORD *)(a2 + 80);
  v38 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v61 = *(_OWORD *)a2;
  *(_OWORD *)&v61[16] = v38;
  v39 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v61);
  swift_endAccess();
  v40 = *(_DWORD *)(a2 + 60);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<_ShapeView<Rectangle, AngularGradient>>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderData<_ShapeView<Rectangle, AngularGradient>>, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
  v41 = swift_allocObject();
  *(_OWORD *)(v41 + 40) = 0u;
  *(_OWORD *)(v41 + 56) = 0u;
  *(_OWORD *)(v41 + 72) = 0u;
  *(_OWORD *)(v41 + 88) = 0u;
  *(_OWORD *)(v41 + 104) = 0u;
  *(_OWORD *)(v41 + 120) = 0u;
  *(_OWORD *)(v41 + 136) = 0u;
  *(_QWORD *)(v41 + 152) = v7;
  *(_DWORD *)(v41 + 160) = 0;
  *(_BYTE *)(v41 + 164) = 1;
  *(_QWORD *)(v41 + 24) = 0;
  *(_QWORD *)(v41 + 168) = 0;
  *(_QWORD *)(v41 + 176) = 0;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  v42 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x23B7C9E44](v42 + 200);
  v43 = *(_QWORD *)(v42 + 208);
  swift_release();
  swift_beginAccess();
  *(_QWORD *)(v41 + 24) = v43;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  if (v11)
  {
    v45 = v44;
    v46 = (_QWORD *)(v9 + 32);
    while (*v46 != v44)
    {
      v46 += 2;
      if (!--v11)
        goto LABEL_17;
    }
    *(_QWORD *)v61 = v54;
    *(_DWORD *)&v61[8] = v36;
    *(_DWORD *)&v61[12] = v39;
    *(_DWORD *)&v61[16] = v40;
    *(_QWORD *)&v61[24] = v41;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v58);
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<Rectangle, AngularGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, AngularGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<Rectangle, AngularGradient>> and conformance ShapeStyledResponderFilter<A>();
    v47 = Attribute.init<A>(body:value:flags:update:)();
    v61[0] = 0;
    PreferencesOutputs.subscript.setter(v47, v45, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v48);
    outlined release of LinearGradient((uint64_t)&v58);
  }
LABEL_17:
  result = swift_release();
  *a5 = v56;
  a5[1] = v57;
  return result;
}

{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  Swift::UInt32 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt32 v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  int v36;
  __int128 v37;
  __int128 v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t result;
  void (*v50)(_BYTE *, _QWORD);
  int v51;
  int v52;
  int OffsetAttribute2;
  unint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  Swift::UInt32 v60[6];
  _BYTE v61[32];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  int v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _QWORD v69[3];

  v54 = __PAIR64__(a3, a1);
  v69[1] = *MEMORY[0x24BDAC8D0];
  v7 = MEMORY[0x24BEE4AF8];
  v56 = MEMORY[0x24BEE4AF8];
  v8 = *MEMORY[0x24BE096C0];
  LODWORD(v57) = 0;
  HIDWORD(v57) = *MEMORY[0x24BE096C0];
  v58 = *(_QWORD *)(a2 + 48);
  v9 = v58;
  v59 = *(_DWORD *)(a2 + 56);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v11 = *(_QWORD *)(v58 + 16);
  if (v11)
  {
    v12 = v10;
    v13 = (_QWORD *)(v58 + 32);
    v14 = *(_QWORD *)(v58 + 16);
    while (*v13 != v10)
    {
      v13 += 2;
      if (!--v14)
        goto LABEL_11;
    }
    v15 = ++lastIdentity;
    v16 = *(_OWORD *)(a2 + 32);
    v67 = *(_OWORD *)(a2 + 16);
    v68 = v16;
    v66 = *(_OWORD *)a2;
    if ((BYTE5(v16) & 1) != 0)
    {
      outlined retain of _ViewInputs(a2);
      specialized _ViewInputs.subscript.getter();
      outlined release of _ViewInputs(a2);
      result = AGWeakAttributeGetAttribute();
      if ((_DWORD)result == v8)
      {
        __break(1u);
        return result;
      }
      v60[0] = v15;
      v50 = (void (*)(_BYTE *, _QWORD))Attribute<A>.subscript.modify();
      _DisplayList_StableIdentityScope.pushIdentity(_:)(v60);
      v50(v61, 0);
    }
    swift_retain();
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    v17 = v67;
    v18 = *(_OWORD *)(a2 + 48);
    v62 = *(_OWORD *)(a2 + 32);
    v63 = v18;
    v64 = *(_OWORD *)(a2 + 64);
    v65 = *(_DWORD *)(a2 + 80);
    v19 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v61 = *(_OWORD *)a2;
    *(_OWORD *)&v61[16] = v19;
    swift_beginAccess();
    v52 = CachedEnvironment.animatedSize(for:)((uint64_t *)v61);
    v20 = *(_OWORD *)(a2 + 48);
    v62 = *(_OWORD *)(a2 + 32);
    v63 = v20;
    v64 = *(_OWORD *)(a2 + 64);
    v65 = *(_DWORD *)(a2 + 80);
    v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v61 = *(_OWORD *)a2;
    *(_OWORD *)&v61[16] = v21;
    v51 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v61);
    swift_endAccess();
    v22 = *(_DWORD *)(v17 + 16);
    v23 = v66;
    v69[0] = v66;
    outlined retain of _ViewInputs(a2);
    outlined retain of _GraphInputs((uint64_t)&v66);
    outlined retain of ViewTransform((uint64_t)v69);
    v24 = specialized find<A>(_:key:)(v23);
    v25 = v15;
    v26 = a4;
    if (v24)
      v27 = *(_BYTE *)(v24 + 72);
    else
      v27 = 0;
    v28 = *(_DWORD *)(a2 + 68);
    v29 = *(_DWORD *)(a2 + 60);
    v30 = *(_DWORD *)(a2 + 76);
    outlined release of ViewTransform((uint64_t)v69);
    outlined release of _GraphInputs((uint64_t)&v66);
    outlined release of _ViewInputs(a2);
    *(_QWORD *)v61 = v26;
    *(_DWORD *)&v61[8] = v25;
    *(_QWORD *)&v61[12] = v54;
    *(_DWORD *)&v61[20] = OffsetAttribute2;
    *(_DWORD *)&v61[24] = v52;
    *(_DWORD *)&v61[28] = v51;
    *(_QWORD *)&v62 = __PAIR64__(v29, v28);
    *((_QWORD *)&v62 + 1) = __PAIR64__(v30, v22);
    LOBYTE(v63) = v27;
    WORD1(v63) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<Rectangle, RadialGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, RadialGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<Rectangle, RadialGradient>> and conformance ShapeStyledDisplayList<A>();
    v31 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v61[0] = 0;
    PreferencesOutputs.subscript.setter(v31, v12, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v32);
    v7 = MEMORY[0x24BEE4AF8];
    v9 = v58;
  }
LABEL_11:
  v33 = *(_OWORD *)(a2 + 48);
  v34 = *(_OWORD *)(a2 + 64);
  v35 = *(_OWORD *)(a2 + 16);
  v62 = *(_OWORD *)(a2 + 32);
  v63 = v33;
  v64 = v34;
  v65 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)v61 = *(_OWORD *)a2;
  *(_OWORD *)&v61[16] = v35;
  swift_beginAccess();
  v36 = CachedEnvironment.animatedSize(for:)((uint64_t *)v61);
  v37 = *(_OWORD *)(a2 + 48);
  v62 = *(_OWORD *)(a2 + 32);
  v63 = v37;
  v64 = *(_OWORD *)(a2 + 64);
  v65 = *(_DWORD *)(a2 + 80);
  v38 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v61 = *(_OWORD *)a2;
  *(_OWORD *)&v61[16] = v38;
  v39 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v61);
  swift_endAccess();
  v40 = *(_DWORD *)(a2 + 60);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<_ShapeView<Rectangle, RadialGradient>>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderData<_ShapeView<Rectangle, RadialGradient>>, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
  v41 = swift_allocObject();
  *(_OWORD *)(v41 + 40) = 0u;
  *(_OWORD *)(v41 + 56) = 0u;
  *(_OWORD *)(v41 + 72) = 0u;
  *(_OWORD *)(v41 + 88) = 0u;
  *(_OWORD *)(v41 + 104) = 0u;
  *(_OWORD *)(v41 + 120) = 0u;
  *(_OWORD *)(v41 + 136) = 0u;
  *(_QWORD *)(v41 + 152) = v7;
  *(_DWORD *)(v41 + 160) = 0;
  *(_BYTE *)(v41 + 164) = 1;
  *(_QWORD *)(v41 + 24) = 0;
  *(_QWORD *)(v41 + 168) = 0;
  *(_QWORD *)(v41 + 176) = 0;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  v42 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x23B7C9E44](v42 + 200);
  v43 = *(_QWORD *)(v42 + 208);
  swift_release();
  swift_beginAccess();
  *(_QWORD *)(v41 + 24) = v43;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  if (v11)
  {
    v45 = v44;
    v46 = (_QWORD *)(v9 + 32);
    while (*v46 != v44)
    {
      v46 += 2;
      if (!--v11)
        goto LABEL_17;
    }
    *(_QWORD *)v61 = v54;
    *(_DWORD *)&v61[8] = v36;
    *(_DWORD *)&v61[12] = v39;
    *(_DWORD *)&v61[16] = v40;
    *(_QWORD *)&v61[24] = v41;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v58);
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<Rectangle, RadialGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, RadialGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<Rectangle, RadialGradient>> and conformance ShapeStyledResponderFilter<A>();
    v47 = Attribute.init<A>(body:value:flags:update:)();
    v61[0] = 0;
    PreferencesOutputs.subscript.setter(v47, v45, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v48);
    outlined release of LinearGradient((uint64_t)&v58);
  }
LABEL_17:
  result = swift_release();
  *a5 = v56;
  a5[1] = v57;
  return result;
}

{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  Swift::UInt32 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt32 v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  int v36;
  __int128 v37;
  __int128 v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t result;
  void (*v50)(_BYTE *, _QWORD);
  int v51;
  int v52;
  int OffsetAttribute2;
  unint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  Swift::UInt32 v60[6];
  _BYTE v61[32];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  int v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _QWORD v69[3];

  v54 = __PAIR64__(a3, a1);
  v69[1] = *MEMORY[0x24BDAC8D0];
  v7 = MEMORY[0x24BEE4AF8];
  v56 = MEMORY[0x24BEE4AF8];
  v8 = *MEMORY[0x24BE096C0];
  LODWORD(v57) = 0;
  HIDWORD(v57) = *MEMORY[0x24BE096C0];
  v58 = *(_QWORD *)(a2 + 48);
  v9 = v58;
  v59 = *(_DWORD *)(a2 + 56);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v11 = *(_QWORD *)(v58 + 16);
  if (v11)
  {
    v12 = v10;
    v13 = (_QWORD *)(v58 + 32);
    v14 = *(_QWORD *)(v58 + 16);
    while (*v13 != v10)
    {
      v13 += 2;
      if (!--v14)
        goto LABEL_11;
    }
    v15 = ++lastIdentity;
    v16 = *(_OWORD *)(a2 + 32);
    v67 = *(_OWORD *)(a2 + 16);
    v68 = v16;
    v66 = *(_OWORD *)a2;
    if ((BYTE5(v16) & 1) != 0)
    {
      outlined retain of _ViewInputs(a2);
      specialized _ViewInputs.subscript.getter();
      outlined release of _ViewInputs(a2);
      result = AGWeakAttributeGetAttribute();
      if ((_DWORD)result == v8)
      {
        __break(1u);
        return result;
      }
      v60[0] = v15;
      v50 = (void (*)(_BYTE *, _QWORD))Attribute<A>.subscript.modify();
      _DisplayList_StableIdentityScope.pushIdentity(_:)(v60);
      v50(v61, 0);
    }
    swift_retain();
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    v17 = v67;
    v18 = *(_OWORD *)(a2 + 48);
    v62 = *(_OWORD *)(a2 + 32);
    v63 = v18;
    v64 = *(_OWORD *)(a2 + 64);
    v65 = *(_DWORD *)(a2 + 80);
    v19 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v61 = *(_OWORD *)a2;
    *(_OWORD *)&v61[16] = v19;
    swift_beginAccess();
    v52 = CachedEnvironment.animatedSize(for:)((uint64_t *)v61);
    v20 = *(_OWORD *)(a2 + 48);
    v62 = *(_OWORD *)(a2 + 32);
    v63 = v20;
    v64 = *(_OWORD *)(a2 + 64);
    v65 = *(_DWORD *)(a2 + 80);
    v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v61 = *(_OWORD *)a2;
    *(_OWORD *)&v61[16] = v21;
    v51 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v61);
    swift_endAccess();
    v22 = *(_DWORD *)(v17 + 16);
    v23 = v66;
    v69[0] = v66;
    outlined retain of _ViewInputs(a2);
    outlined retain of _GraphInputs((uint64_t)&v66);
    outlined retain of ViewTransform((uint64_t)v69);
    v24 = specialized find<A>(_:key:)(v23);
    v25 = v15;
    v26 = a4;
    if (v24)
      v27 = *(_BYTE *)(v24 + 72);
    else
      v27 = 0;
    v28 = *(_DWORD *)(a2 + 68);
    v29 = *(_DWORD *)(a2 + 60);
    v30 = *(_DWORD *)(a2 + 76);
    outlined release of ViewTransform((uint64_t)v69);
    outlined release of _GraphInputs((uint64_t)&v66);
    outlined release of _ViewInputs(a2);
    *(_QWORD *)v61 = v26;
    *(_DWORD *)&v61[8] = v25;
    *(_QWORD *)&v61[12] = v54;
    *(_DWORD *)&v61[20] = OffsetAttribute2;
    *(_DWORD *)&v61[24] = v52;
    *(_DWORD *)&v61[28] = v51;
    *(_QWORD *)&v62 = __PAIR64__(v29, v28);
    *((_QWORD *)&v62 + 1) = __PAIR64__(v30, v22);
    LOBYTE(v63) = v27;
    WORD1(v63) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<Rectangle, LinearGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, LinearGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<Rectangle, LinearGradient>> and conformance ShapeStyledDisplayList<A>();
    v31 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v61[0] = 0;
    PreferencesOutputs.subscript.setter(v31, v12, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v32);
    v7 = MEMORY[0x24BEE4AF8];
    v9 = v58;
  }
LABEL_11:
  v33 = *(_OWORD *)(a2 + 48);
  v34 = *(_OWORD *)(a2 + 64);
  v35 = *(_OWORD *)(a2 + 16);
  v62 = *(_OWORD *)(a2 + 32);
  v63 = v33;
  v64 = v34;
  v65 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)v61 = *(_OWORD *)a2;
  *(_OWORD *)&v61[16] = v35;
  swift_beginAccess();
  v36 = CachedEnvironment.animatedSize(for:)((uint64_t *)v61);
  v37 = *(_OWORD *)(a2 + 48);
  v62 = *(_OWORD *)(a2 + 32);
  v63 = v37;
  v64 = *(_OWORD *)(a2 + 64);
  v65 = *(_DWORD *)(a2 + 80);
  v38 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v61 = *(_OWORD *)a2;
  *(_OWORD *)&v61[16] = v38;
  v39 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v61);
  swift_endAccess();
  v40 = *(_DWORD *)(a2 + 60);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<_ShapeView<Rectangle, LinearGradient>>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderData<_ShapeView<Rectangle, LinearGradient>>, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
  v41 = swift_allocObject();
  *(_OWORD *)(v41 + 40) = 0u;
  *(_OWORD *)(v41 + 56) = 0u;
  *(_OWORD *)(v41 + 72) = 0u;
  *(_OWORD *)(v41 + 88) = 0u;
  *(_OWORD *)(v41 + 104) = 0u;
  *(_OWORD *)(v41 + 120) = 0u;
  *(_OWORD *)(v41 + 136) = 0u;
  *(_QWORD *)(v41 + 152) = v7;
  *(_DWORD *)(v41 + 160) = 0;
  *(_BYTE *)(v41 + 164) = 1;
  *(_QWORD *)(v41 + 24) = 0;
  *(_QWORD *)(v41 + 168) = 0;
  *(_QWORD *)(v41 + 176) = 0;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  v42 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x23B7C9E44](v42 + 200);
  v43 = *(_QWORD *)(v42 + 208);
  swift_release();
  swift_beginAccess();
  *(_QWORD *)(v41 + 24) = v43;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  if (v11)
  {
    v45 = v44;
    v46 = (_QWORD *)(v9 + 32);
    while (*v46 != v44)
    {
      v46 += 2;
      if (!--v11)
        goto LABEL_17;
    }
    *(_QWORD *)v61 = v54;
    *(_DWORD *)&v61[8] = v36;
    *(_DWORD *)&v61[12] = v39;
    *(_DWORD *)&v61[16] = v40;
    *(_QWORD *)&v61[24] = v41;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v58);
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<Rectangle, LinearGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, LinearGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<Rectangle, LinearGradient>> and conformance ShapeStyledResponderFilter<A>();
    v47 = Attribute.init<A>(body:value:flags:update:)();
    v61[0] = 0;
    PreferencesOutputs.subscript.setter(v47, v45, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v48);
    outlined release of LinearGradient((uint64_t)&v58);
  }
LABEL_17:
  result = swift_release();
  *a5 = v56;
  a5[1] = v57;
  return result;
}

{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  Swift::UInt32 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt32 v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  int v36;
  __int128 v37;
  __int128 v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t result;
  void (*v50)(_BYTE *, _QWORD);
  int v51;
  int v52;
  int OffsetAttribute2;
  unint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  Swift::UInt32 v60[6];
  _BYTE v61[32];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  int v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _QWORD v69[3];

  v54 = __PAIR64__(a3, a1);
  v69[1] = *MEMORY[0x24BDAC8D0];
  v7 = MEMORY[0x24BEE4AF8];
  v56 = MEMORY[0x24BEE4AF8];
  v8 = *MEMORY[0x24BE096C0];
  LODWORD(v57) = 0;
  HIDWORD(v57) = *MEMORY[0x24BE096C0];
  v58 = *(_QWORD *)(a2 + 48);
  v9 = v58;
  v59 = *(_DWORD *)(a2 + 56);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v11 = *(_QWORD *)(v58 + 16);
  if (v11)
  {
    v12 = v10;
    v13 = (_QWORD *)(v58 + 32);
    v14 = *(_QWORD *)(v58 + 16);
    while (*v13 != v10)
    {
      v13 += 2;
      if (!--v14)
        goto LABEL_11;
    }
    v15 = ++lastIdentity;
    v16 = *(_OWORD *)(a2 + 32);
    v67 = *(_OWORD *)(a2 + 16);
    v68 = v16;
    v66 = *(_OWORD *)a2;
    if ((BYTE5(v16) & 1) != 0)
    {
      outlined retain of _ViewInputs(a2);
      specialized _ViewInputs.subscript.getter();
      outlined release of _ViewInputs(a2);
      result = AGWeakAttributeGetAttribute();
      if ((_DWORD)result == v8)
      {
        __break(1u);
        return result;
      }
      v60[0] = v15;
      v50 = (void (*)(_BYTE *, _QWORD))Attribute<A>.subscript.modify();
      _DisplayList_StableIdentityScope.pushIdentity(_:)(v60);
      v50(v61, 0);
    }
    swift_retain();
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    v17 = v67;
    v18 = *(_OWORD *)(a2 + 48);
    v62 = *(_OWORD *)(a2 + 32);
    v63 = v18;
    v64 = *(_OWORD *)(a2 + 64);
    v65 = *(_DWORD *)(a2 + 80);
    v19 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v61 = *(_OWORD *)a2;
    *(_OWORD *)&v61[16] = v19;
    swift_beginAccess();
    v52 = CachedEnvironment.animatedSize(for:)((uint64_t *)v61);
    v20 = *(_OWORD *)(a2 + 48);
    v62 = *(_OWORD *)(a2 + 32);
    v63 = v20;
    v64 = *(_OWORD *)(a2 + 64);
    v65 = *(_DWORD *)(a2 + 80);
    v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v61 = *(_OWORD *)a2;
    *(_OWORD *)&v61[16] = v21;
    v51 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v61);
    swift_endAccess();
    v22 = *(_DWORD *)(v17 + 16);
    v23 = v66;
    v69[0] = v66;
    outlined retain of _ViewInputs(a2);
    outlined retain of _GraphInputs((uint64_t)&v66);
    outlined retain of ViewTransform((uint64_t)v69);
    v24 = specialized find<A>(_:key:)(v23);
    v25 = v15;
    v26 = a4;
    if (v24)
      v27 = *(_BYTE *)(v24 + 72);
    else
      v27 = 0;
    v28 = *(_DWORD *)(a2 + 68);
    v29 = *(_DWORD *)(a2 + 60);
    v30 = *(_DWORD *)(a2 + 76);
    outlined release of ViewTransform((uint64_t)v69);
    outlined release of _GraphInputs((uint64_t)&v66);
    outlined release of _ViewInputs(a2);
    *(_QWORD *)v61 = v26;
    *(_DWORD *)&v61[8] = v25;
    *(_QWORD *)&v61[12] = v54;
    *(_DWORD *)&v61[20] = OffsetAttribute2;
    *(_DWORD *)&v61[24] = v52;
    *(_DWORD *)&v61[28] = v51;
    *(_QWORD *)&v62 = __PAIR64__(v29, v28);
    *((_QWORD *)&v62 + 1) = __PAIR64__(v30, v22);
    LOBYTE(v63) = v27;
    WORD1(v63) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<Rectangle, MeshGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, MeshGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<Rectangle, MeshGradient>> and conformance ShapeStyledDisplayList<A>();
    v31 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    v61[0] = 0;
    PreferencesOutputs.subscript.setter(v31, v12, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v32);
    v7 = MEMORY[0x24BEE4AF8];
    v9 = v58;
  }
LABEL_11:
  v33 = *(_OWORD *)(a2 + 48);
  v34 = *(_OWORD *)(a2 + 64);
  v35 = *(_OWORD *)(a2 + 16);
  v62 = *(_OWORD *)(a2 + 32);
  v63 = v33;
  v64 = v34;
  v65 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)v61 = *(_OWORD *)a2;
  *(_OWORD *)&v61[16] = v35;
  swift_beginAccess();
  v36 = CachedEnvironment.animatedSize(for:)((uint64_t *)v61);
  v37 = *(_OWORD *)(a2 + 48);
  v62 = *(_OWORD *)(a2 + 32);
  v63 = v37;
  v64 = *(_OWORD *)(a2 + 64);
  v65 = *(_DWORD *)(a2 + 80);
  v38 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v61 = *(_OWORD *)a2;
  *(_OWORD *)&v61[16] = v38;
  v39 = CachedEnvironment.animatedPosition(for:)((uint64_t *)v61);
  swift_endAccess();
  v40 = *(_DWORD *)(a2 + 60);
  type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<_ShapeView<Rectangle, MeshGradient>>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyledResponderData<_ShapeView<Rectangle, MeshGradient>>, (uint64_t)&protocol witness table for ShapeStyledResponderData<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
  v41 = swift_allocObject();
  *(_OWORD *)(v41 + 40) = 0u;
  *(_OWORD *)(v41 + 56) = 0u;
  *(_OWORD *)(v41 + 72) = 0u;
  *(_OWORD *)(v41 + 88) = 0u;
  *(_OWORD *)(v41 + 104) = 0u;
  *(_OWORD *)(v41 + 120) = 0u;
  *(_OWORD *)(v41 + 136) = 0u;
  *(_OWORD *)(v41 + 152) = 0u;
  *(_QWORD *)(v41 + 168) = v7;
  *(_DWORD *)(v41 + 176) = 0;
  *(_BYTE *)(v41 + 180) = 1;
  *(_QWORD *)(v41 + 24) = 0;
  *(_QWORD *)(v41 + 184) = 0;
  *(_QWORD *)(v41 + 192) = 0;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  v42 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x23B7C9E44](v42 + 200);
  v43 = *(_QWORD *)(v42 + 208);
  swift_release();
  swift_beginAccess();
  *(_QWORD *)(v41 + 24) = v43;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  if (v11)
  {
    v45 = v44;
    v46 = (_QWORD *)(v9 + 32);
    while (*v46 != v44)
    {
      v46 += 2;
      if (!--v11)
        goto LABEL_17;
    }
    *(_QWORD *)v61 = v54;
    *(_DWORD *)&v61[8] = v36;
    *(_DWORD *)&v61[12] = v39;
    *(_DWORD *)&v61[16] = v40;
    *(_QWORD *)&v61[24] = v41;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v58);
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<Rectangle, MeshGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, MeshGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<Rectangle, MeshGradient>> and conformance ShapeStyledResponderFilter<A>();
    v47 = Attribute.init<A>(body:value:flags:update:)();
    v61[0] = 0;
    PreferencesOutputs.subscript.setter(v47, v45, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v48);
    outlined release of LinearGradient((uint64_t)&v58);
  }
LABEL_17:
  result = swift_release();
  *a5 = v56;
  a5[1] = v57;
  return result;
}

