uint64_t _ViewList_Section.header.getter(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5[2];
  unsigned int v6;

  v2 = *(_QWORD *)(v1 + 8);
  if (*(_QWORD *)(v2 + 16))
  {
    v3 = result;
    outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v2 + 32, (uint64_t)v5);
    v4 = v6;
    outlined init with take of ScrollStateRequest(v5, v3);
    return v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _ViewList_Node.applyNodes(from:transform:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _ViewList_Node.applyNodes(from:transform:to:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t))_ViewList_Node.applyNodes(from:style:transform:to:));
}

void _ViewList_Node.applySublists(from:style:transform:to:)()
{
  uint64_t v0;
  _BYTE v1[120];

  outlined init with copy of _ViewList_Node(v0, (uint64_t)v1);
  __asm { BR              X10 }
}

uint64_t sub_234EA11E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD, uint64_t, unint64_t, uint64_t, uint64_t (*)(), uint64_t, uint64_t, uint64_t);
  char v12;

  *(_QWORD *)(v6 - 352) = v0;
  v7 = *(unsigned int *)(v6 - 160);
  v8 = *(_BYTE *)(v6 - 156);
  outlined init with take of ScrollStateRequest((__int128 *)(v6 - 200), v6 - 288);
  v9 = *(_QWORD *)(v6 - 264);
  v10 = *(_QWORD *)(v6 - 256);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v6 - 288), v9);
  *(_QWORD *)(v4 + 184) = v3;
  *(_QWORD *)(v6 - 320) = v1;
  *(_QWORD *)(v6 - 312) = v5;
  v11 = *(uint64_t (**)(_QWORD, uint64_t, unint64_t, uint64_t, uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v10 + 48);
  *(_BYTE *)(v6 - 108) = v8;
  v12 = v11(*(_QWORD *)(v6 - 352), v6 - 104, v7 | ((unint64_t)v8 << 32), v2, partial apply for closure #1 in _ViewList_Node.applySublists(from:style:transform:to:), v6 - 336, v9, v10);
  __swift_destroy_boxed_opaque_existential_1(v6 - 288);
  return v12 & 1;
}

uint64_t ViewList.applySublists(from:style:list:transform:to:)(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD v9[5];
  uint64_t v10;

  v10 = *a2;
  v9[2] = a5;
  v9[3] = a6;
  return (*(uint64_t (**)(uint64_t, uint64_t *, unint64_t, uint64_t, uint64_t (*)(), _QWORD *))(a8 + 48))(a1, &v10, a3 | ((HIDWORD(a3) & 1) << 32), a4, partial apply for closure #1 in _ViewList_Node.applySublists(from:style:transform:to:), v9) & 1;
}

uint64_t _ViewList_Section.applyNodes(from:style:transform:to:)(uint64_t result, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v5;
  uint64_t v6;
  unint64_t v7;
  __int128 v8;
  int v9;
  uint64_t v10;
  int64_t v11;
  BOOL v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t (*v25)(uint64_t *, __int128 *, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t));
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  uint64_t *v33;
  __int128 v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  char v42;
  __int128 v43[2];
  unsigned int v44;
  _QWORD v45[6];

  v37 = a4;
  v38 = a5;
  v36 = a3;
  v6 = result;
  v7 = *a2;
  v35 = *v5;
  v8 = *(_OWORD *)(v5 + 2);
  v9 = *((unsigned __int8 *)v5 + 24);
  v10 = *(_QWORD *)result;
  v12 = *(_QWORD *)result == 0;
  v39 = v7;
  v11 = v7 >> 1;
  v12 = v12 || v11 == 1;
  if (v12)
  {
LABEL_8:
    v31 = v7 >> 1;
    v34 = v8;
    v40 = v8;
    if (v9)
      v15 = 1;
    else
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    result = specialized Collection.prefix(_:)(v15, 0, *(_QWORD *)(v8 + 16));
    if (result == v16)
      return 1;
    v17 = result;
    v18 = v16;
    if (v16 >= result)
    {
      v32 = v39 & 0xFFFFFFFFFFFFFFFELL | ((v39 & 0xFFFFFFFFFFFFFFFELL) != 2);
      v19 = v40 + 48 * result + 32;
      v20 = result;
      v33 = (uint64_t *)v6;
      while (v20 < v18)
      {
        if (v17 < 0)
          goto LABEL_32;
        if ((unint64_t)v20 >= *(_QWORD *)(v40 + 16))
          goto LABEL_33;
        outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v19, (uint64_t)v43);
        v21 = v44;
        outlined init with take of ScrollStateRequest(v43, (uint64_t)v45);
        if (v20 == 1)
          v22 = v39;
        else
          v22 = v32;
        v23 = v45[4];
        v24 = __swift_project_boxed_opaque_existential_1(v45, v45[3]);
        v41 = &v30;
        *(_QWORD *)&v43[0] = v22;
        MEMORY[0x24BDAC7A8](v24);
        v25 = *(uint64_t (**)(uint64_t *, __int128 *, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t)))(v23 + 48);
        v42 = 0;
        v26 = v21;
        v27 = v33;
        result = v25(v33, v43, v26, v36, partial apply for closure #1 in _ViewList_Section.applyNodes(from:style:transform:to:));
        if ((result & 1) == 0)
          goto LABEL_29;
        v28 = *v27;
        if (*v27 && v31 != 1)
        {
          if (!v31)
            goto LABEL_34;
          v13 = __OFSUB__(v28, v28 % v31);
          v29 = v28 - v28 % v31;
          if (v13)
          {
            __break(1u);
LABEL_29:
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
            return 0;
          }
          *v27 = v29;
        }
        ++v20;
        result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
        v19 += 48;
        if (v18 == v20)
          return 1;
      }
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
    }
    __break(1u);
    goto LABEL_36;
  }
  if (!v11)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v13 = __OFSUB__(v10, v10 % v11);
  v14 = v10 - v10 % v11;
  if (!v13)
  {
    *(_QWORD *)result = v14;
    goto LABEL_8;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t _ViewList_Node.applySublists(from:transform:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _ViewList_Node.applyNodes(from:transform:to:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t))_ViewList_Node.applySublists(from:style:transform:to:));
}

uint64_t _ViewList_Node.applyNodes(from:transform:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;

  v6 = 2;
  return a5(a1, &v6, a2, a3, a4) & 1;
}

void _ViewList_Node.firstOffset<A>(forID:style:)()
{
  uint64_t v0;
  _BYTE v1[88];

  outlined init with copy of _ViewList_Node(v0, (uint64_t)v1);
  __asm { BR              X10 }
}

uint64_t sub_234EA182C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  outlined init with take of ScrollStateRequest(&v12, (uint64_t)v8);
  v4 = v9;
  v5 = v10;
  __swift_project_boxed_opaque_existential_1(v8, v9);
  v11 = v3;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 64))(v2, &v11, v1, v0, v4, v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v6;
}

uint64_t _ViewList_Group.firstOffset<A>(forID:style:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30[3];
  _QWORD v31[3];
  uint64_t v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  _BYTE v36[28];
  _QWORD v37[3];
  uint64_t v38;
  uint64_t v39;
  __int128 v40[2];
  int v41;
  _BYTE v42[40];
  int v43;
  _QWORD v44[8];
  _BYTE v45[52];
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  int v49;

  v5 = *(_QWORD *)(*v4 + 16);
  v27 = *v4 + 32;
  v28 = *v4;
  v29 = *a2;
  result = swift_bridgeObjectRetain();
  v7 = 0;
  while (1)
  {
    if (v7 == v5)
    {
      v8 = v5;
      memset(v45, 0, sizeof(v45));
    }
    else
    {
      if ((v7 & 0x8000000000000000) != 0)
        goto LABEL_25;
      if (v7 >= *(_QWORD *)(v28 + 16))
        goto LABEL_26;
      v8 = v7 + 1;
      outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v27 + 48 * v7, (uint64_t)&v44[1]);
      *(_QWORD *)v45 = v7;
      *(_OWORD *)&v45[8] = *(_OWORD *)&v44[1];
      *(_OWORD *)&v45[24] = *(_OWORD *)&v44[3];
      *(_OWORD *)&v45[36] = *(_OWORD *)((char *)&v44[4] + 4);
    }
    outlined init with take of (key: AnyHashable, value: ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item)?((uint64_t)v45, (uint64_t)&v46, &lazy cache variable for type metadata for (offset: Int, element: (list: ViewList, attribute: Attribute<ViewList>))?, (void (*)(uint64_t))type metadata accessor for (offset: Int, element: (list: ViewList, attribute: Attribute<ViewList>)));
    if (!v48)
      break;
    v26 = v8;
    v9 = v46;
    v10 = v49;
    outlined init with take of ScrollStateRequest(&v47, (uint64_t)v40);
    v41 = v10;
    outlined init with take of ScrollStateRequest(v40, (uint64_t)v42);
    v43 = v10;
    outlined init with copy of AnyTrackedValue((uint64_t)v42, (uint64_t)v45);
    outlined init with take of ScrollStateRequest((__int128 *)v45, (uint64_t)v37);
    v11 = v38;
    v12 = v39;
    __swift_project_boxed_opaque_existential_1(v37, v38);
    *(_QWORD *)v45 = v29;
    v13 = (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 64))(a1, v45, a3, a4, v11, v12);
    if ((v14 & 1) == 0)
    {
      v15 = v13;
      result = swift_bridgeObjectRetain();
      v16 = 0;
      if (!v5)
      {
LABEL_12:
        v16 = v5;
        memset(v44, 0, 52);
        goto LABEL_15;
      }
      while (v16 < *(_QWORD *)(v28 + 16))
      {
        outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v27 + 48 * v16, (uint64_t)&v35);
        v44[0] = v16;
        *(_OWORD *)&v44[1] = v35;
        *(_OWORD *)&v44[3] = *(_OWORD *)v36;
        *(_OWORD *)((char *)&v44[4] + 4) = *(_OWORD *)&v36[12];
        ++v16;
LABEL_15:
        outlined init with take of (key: AnyHashable, value: ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item)?((uint64_t)v44, (uint64_t)v45, &lazy cache variable for type metadata for (offset: Int, element: (list: ViewList, attribute: Attribute<ViewList>))?, (void (*)(uint64_t))type metadata accessor for (offset: Int, element: (list: ViewList, attribute: Attribute<ViewList>)));
        if (!*(_QWORD *)&v45[32])
        {
          swift_bridgeObjectRelease();
          goto LABEL_3;
        }
        v17 = *(_QWORD *)v45;
        v18 = *(_DWORD *)&v45[48];
        outlined init with take of ScrollStateRequest((__int128 *)&v45[8], (uint64_t)&v34);
        *(_DWORD *)&v36[16] = v18;
        outlined init with take of ScrollStateRequest((__int128 *)&v34, (uint64_t)v44);
        LODWORD(v44[5]) = v18;
        if (v17 == v9)
        {
          outlined destroy of (list: ViewList, attribute: Attribute<ViewList>)((uint64_t)v44);
          swift_bridgeObjectRelease();
          outlined destroy of (list: ViewList, attribute: Attribute<ViewList>)((uint64_t)v42);
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
          return v15;
        }
        outlined init with copy of AnyTrackedValue((uint64_t)v44, (uint64_t)v30);
        outlined init with take of ScrollStateRequest(v30, (uint64_t)v31);
        v19 = v32;
        v20 = v33;
        __swift_project_boxed_opaque_existential_1(v31, v32);
        *(_QWORD *)&v30[0] = v29;
        v21 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v20 + 8))(v30, v19, v20);
        result = outlined destroy of (list: ViewList, attribute: Attribute<ViewList>)((uint64_t)v44);
        v22 = __OFADD__(v15, v21);
        v15 += v21;
        if (v22)
        {
          __break(1u);
          break;
        }
        result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
        if (v16 == v5)
          goto LABEL_12;
      }
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
      return result;
    }
LABEL_3:
    outlined destroy of (list: ViewList, attribute: Attribute<ViewList>)((uint64_t)v42);
    v7 = v26;
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t _ViewList_Section.firstOffset<A>(forID:style:)(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t i;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v42;
  _QWORD v43[3];
  uint64_t v44;
  uint64_t v45;
  __int128 v46[3];
  _QWORD v47[3];
  uint64_t v48;
  uint64_t v49;

  v5 = *a2;
  v42 = *(_QWORD *)(v4 + 8);
  if (*(_BYTE *)(v4 + 24))
    v6 = 1;
  else
    v6 = 0x7FFFFFFFFFFFFFFFLL;
  result = specialized Collection.prefix(_:)(v6, 0, *(_QWORD *)(v42 + 16));
  if (result == v8)
  {
    return 0;
  }
  else
  {
    v9 = result;
    v10 = v8;
    if (v8 < result)
    {
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
    }
    else
    {
      v37 = v5 & 0xFFFFFFFFFFFFFFFELL;
      v38 = v5 & 0xFFFFFFFFFFFFFFFELL | ((v5 & 0xFFFFFFFFFFFFFFFELL) != 2);
      v11 = v42 + 32 + 48 * result;
      v12 = result;
      while (1)
      {
        if (v12 >= v10)
        {
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          goto LABEL_45;
        }
        if (v9 < 0)
          goto LABEL_43;
        if ((unint64_t)v12 >= *(_QWORD *)(v42 + 16))
          goto LABEL_44;
        outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v11, (uint64_t)v46);
        outlined init with take of ScrollStateRequest(v46, (uint64_t)v47);
        v13 = v5;
        v14 = v12 == 1 ? v5 : v38;
        v15 = v48;
        v16 = v49;
        __swift_project_boxed_opaque_existential_1(v47, v48);
        *(_QWORD *)&v46[0] = v14;
        result = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 64))(a1, v46, a3, a4, v15, v16);
        if ((v17 & 1) == 0)
          break;
        ++v12;
        result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
        v11 += 48;
        v5 = v13;
        if (v10 == v12)
          return 0;
      }
      v18 = result;
      if (!v12)
        goto LABEL_40;
      if ((unint64_t)(v12 - 1) >= *(_QWORD *)(v42 + 16))
        goto LABEL_50;
      v19 = v13;
      v20 = v13 >> 1;
      v21 = v37 | (v13 >> 1 != 1);
      outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v42 + 32, (uint64_t)v46);
      outlined init with take of ScrollStateRequest(v46, (uint64_t)v43);
      v22 = v44;
      v23 = v45;
      __swift_project_boxed_opaque_existential_1(v43, v44);
      *(_QWORD *)&v46[0] = v21;
      result = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v23 + 8))(v46, v22, v23);
      if (v20 == 1)
        goto LABEL_23;
      if (v19 < 2)
      {
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
      v24 = result % v20;
      if (!(result % v20))
        goto LABEL_23;
      v25 = __OFSUB__(v20, v24);
      v26 = v20 - v24;
      if (v25)
        goto LABEL_48;
      v25 = __OFADD__(result, v26);
      result += v26;
      if (!v25)
      {
LABEL_23:
        v25 = __OFADD__(v18, result);
        v18 += result;
        if (v25)
          goto LABEL_45;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
        if (v12 == 1)
          goto LABEL_40;
        outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v42 + 80, (uint64_t)v46);
        outlined init with take of ScrollStateRequest(v46, (uint64_t)v43);
        v27 = v44;
        v28 = v45;
        __swift_project_boxed_opaque_existential_1(v43, v44);
        *(_QWORD *)&v46[0] = v19;
        result = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v28 + 8))(v46, v27, v28);
        if (v20 == 1)
          goto LABEL_30;
        if (v19 < 2)
          goto LABEL_46;
        v29 = result % v20;
        if (!(result % v20))
          goto LABEL_30;
        v25 = __OFSUB__(v20, v29);
        v30 = v20 - v29;
        if (v25)
          goto LABEL_48;
        v25 = __OFADD__(result, v30);
        result += v30;
        if (!v25)
        {
LABEL_30:
          v25 = __OFADD__(v18, result);
          v18 += result;
          if (!v25)
          {
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
            if (v12 != 2)
            {
              v31 = v42 + 128;
              for (i = 2; i != v12; ++i)
              {
                outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v31, (uint64_t)v46);
                outlined init with take of ScrollStateRequest(v46, (uint64_t)v43);
                v33 = v44;
                v34 = v45;
                __swift_project_boxed_opaque_existential_1(v43, v44);
                *(_QWORD *)&v46[0] = v21;
                result = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v34 + 8))(v46, v33, v34);
                if (v20 != 1)
                {
                  if (v19 < 2)
                    goto LABEL_46;
                  v35 = result % v20;
                  if (result % v20)
                  {
                    v25 = __OFSUB__(v20, v35);
                    v36 = v20 - v35;
                    if (v25)
                      goto LABEL_48;
                    v25 = __OFADD__(result, v36);
                    result += v36;
                    if (v25)
                      goto LABEL_49;
                  }
                }
                v25 = __OFADD__(v18, result);
                v18 += result;
                if (v25)
                  goto LABEL_45;
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
                v31 += 48;
              }
            }
LABEL_40:
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
            return v18;
          }
LABEL_45:
          __break(1u);
          goto LABEL_46;
        }
      }
    }
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
  }
  return result;
}

BOOL ViewList.isEmpty.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = 2;
  return (*(uint64_t (**)(uint64_t *, uint64_t))(a2 + 8))(&v3, a1) == 0;
}

uint64_t ViewList.count.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = 2;
  return (*(uint64_t (**)(uint64_t *, uint64_t))(a2 + 8))(&v3, a1);
}

uint64_t ViewList.estimatedCount.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = 2;
  return (*(uint64_t (**)(uint64_t *, uint64_t))(a2 + 16))(&v3, a1);
}

uint64_t ViewList.applySublists(from:list:transform:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t (*v7)(uint64_t, uint64_t *, unint64_t, uint64_t, uint64_t (*)(), _BYTE *, uint64_t);
  _BYTE v9[16];
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v9[0] = BYTE4(a2) & 1;
  v13 = 2;
  v10 = a4;
  v11 = a5;
  v7 = *(uint64_t (**)(uint64_t, uint64_t *, unint64_t, uint64_t, uint64_t (*)(), _BYTE *, uint64_t))(a7 + 48);
  v12 = BYTE4(a2) & 1;
  return v7(a1, &v13, a2 | ((unint64_t)(BYTE4(a2) & 1) << 32), a3, partial apply for closure #1 in _ViewList_Node.applySublists(from:style:transform:to:), v9, a6) & 1;
}

uint64_t ViewList.applySublists(from:style:list:to:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t *, unint64_t, uint64_t *, uint64_t (*)(), _BYTE *, uint64_t);
  char v9;
  uint64_t v11;
  _BYTE v12[16];
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v7 = *a2;
  v11 = MEMORY[0x24BEE4AF8];
  v12[0] = BYTE4(a3) & 1;
  v16 = v7;
  v13 = a4;
  v14 = a5;
  v8 = *(uint64_t (**)(uint64_t, uint64_t *, unint64_t, uint64_t *, uint64_t (*)(), _BYTE *, uint64_t))(a7 + 48);
  v15 = BYTE4(a3) & 1;
  v9 = v8(a1, &v16, a3 | ((unint64_t)(BYTE4(a3) & 1) << 32), &v11, partial apply for closure #1 in _ViewList_Node.applySublists(from:style:transform:to:), v12, a6);
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t ViewList.applySublists(from:style:to:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;

  v7 = *a2;
  return ViewList.applySublists(from:style:list:to:)(a1, &v7, 0x100000000, a3, a4, a5, a6) & 1;
}

uint64_t ViewList.applySublists(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;

  v6 = 2;
  return ViewList.applySublists(from:style:list:to:)(a1, &v6, 0x100000000, a2, a3, a4, a5) & 1;
}

uint64_t _ViewList_ID.elementIDs(count:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = v2[1];
  *a2 = *v2;
  a2[1] = v3;
  a2[2] = a1;
  return swift_bridgeObjectRetain();
}

_BYTE *_ViewList_ID._Views.__allocating_init(_:isDataDependent:)(uint64_t a1, char a2)
{
  uint64_t v2;
  _BYTE *v4;

  v4 = specialized _ViewList_ID._Views.__allocating_init(_:isDataDependent:)(a1, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 128) - 8) + 8))(a1);
  return v4;
}

uint64_t ViewList.applyIDs(from:style:listAttribute:transform:to:)(uint64_t a1, unint64_t *a2, unint64_t a3, uint64_t *a4, uint64_t (*a5)(unint64_t *), uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v12;
  unint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  double v23;
  uint64_t v24;
  void (*v25)(_QWORD *__return_ptr, _QWORD);
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  void (*v38)(_QWORD *__return_ptr, _QWORD);
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t (*v42)(uint64_t);
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;

  v12 = (uint64_t *)a1;
  v13 = *a2;
  if (*a2 != 2 || (a1 = (*(uint64_t (**)(uint64_t, uint64_t))(a8 + 32))(a7, a8)) == 0)
  {
    v43 = v13;
    v23 = MEMORY[0x24BDAC7A8](a1);
    v22 = (*(uint64_t (**)(uint64_t *, unint64_t *, unint64_t, uint64_t *, void (*)(uint64_t, uint64_t, uint64_t), double))(a8 + 48))(v12, &v43, a3 | ((HIDWORD(a3) & 1) << 32), a4, partial apply for closure #1 in ViewList.applyIDs(from:style:listAttribute:transform:to:), v23);
    return v22 & 1;
  }
  v14 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 88);
  swift_retain();
  v15 = v14();
  result = v14();
  if (result < 0)
  {
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v17 = v14();
  result = swift_release();
  if (v15 < 0 || v17 < v15)
    goto LABEL_27;
  v18 = *v12;
  v19 = *v12 - v15;
  if (*v12 >= v15)
  {
    swift_release();
    *v12 = v19;
    v22 = 1;
    return v22 & 1;
  }
  swift_retain();
  result = specialized Collection.dropFirst(_:)(v18);
  if (result == v20)
  {
LABEL_8:
    swift_release();
    swift_release();
    *v12 = 0;
    v22 = 1;
    return v22 & 1;
  }
  v24 = result;
  v25 = *(void (**)(_QWORD *__return_ptr, _QWORD))(*(_QWORD *)v21 + 96);
  v41 = a4;
  v42 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 88);
  v26 = result;
  v39 = v20;
  v40 = result;
  v38 = v25;
  while (v26 < v20)
  {
    v25(&v43, v26);
    v27 = v43;
    v28 = HIDWORD(v43);
    v29 = v44;
    v30 = swift_retain();
    v31 = v42(v30);
    result = swift_release();
    if (v24 < 0 || v26 >= v31)
      goto LABEL_29;
    v47 = v27;
    v48 = v28;
    v49 = v29;
    v32 = *v41;
    v33 = *(_QWORD *)(*v41 + 16);
    if (v33)
    {
      swift_bridgeObjectRetain();
      v34 = v32 + 40 * v33 - 8;
      while (v33 <= *(_QWORD *)(v32 + 16))
      {
        --v33;
        outlined init with copy of AnyTrackedValue(v34, (uint64_t)&v43);
        v35 = v45;
        v36 = v46;
        __swift_project_boxed_opaque_existential_1(&v43, v45);
        (*(void (**)(unsigned int *, uint64_t, uint64_t))(v36 + 16))(&v47, v35, v36);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v43);
        v34 -= 40;
        if (!v33)
        {
          swift_bridgeObjectRelease();
          v27 = v47;
          v28 = v48;
          v29 = v49;
          goto LABEL_21;
        }
      }
      __break(1u);
LABEL_25:
      swift_release();
      swift_release();
      v22 = 0;
      *v12 = 0;
      return v22 & 1;
    }
LABEL_21:
    v43 = __PAIR64__(v28, v27);
    v44 = v29;
    v37 = a5(&v43);
    result = swift_bridgeObjectRelease();
    if ((v37 & 1) == 0)
      goto LABEL_25;
    ++v26;
    v20 = v39;
    v24 = v40;
    v25 = v38;
    if (v26 == v39)
      goto LABEL_8;
  }
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

void closure #1 in ViewList.applyIDs(from:style:listAttribute:transform:to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE v3[104];

  outlined init with copy of _ViewList_Node(a3, (uint64_t)v3);
  __asm { BR              X10 }
}

uint64_t sub_234EA25C4()
{
  uint64_t v0;
  uint64_t (*v1)(unint64_t *);
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  unint64_t v15;

  v5 = *(unsigned int *)(v4 - 144);
  v6 = *(_BYTE *)(v4 - 140);
  outlined init with take of ScrollStateRequest((__int128 *)(v4 - 184), (uint64_t)v11);
  v7 = v12;
  v8 = v13;
  __swift_project_boxed_opaque_existential_1(v11, v12);
  v15 = v3;
  v14 = v6;
  LOBYTE(v7) = ViewList.applyIDs(from:style:listAttribute:transform:to:)(v0, &v15, v5 | ((unint64_t)v6 << 32), v2, v1, v10, v7, v8);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  return v7 & 1;
}

uint64_t ViewList.applyIDs(from:listAttribute:transform:to:)(uint64_t a1, unint64_t a2, uint64_t *a3, uint64_t (*a4)(unint64_t *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  unint64_t v15;
  uint64_t v16;

  v13 = *a3;
  v15 = 2;
  v16 = v13;
  swift_bridgeObjectRetain();
  LOBYTE(a7) = ViewList.applyIDs(from:style:listAttribute:transform:to:)(a1, &v15, a2 | ((HIDWORD(a2) & 1) << 32), &v16, a4, a5, a6, a7);
  swift_bridgeObjectRelease();
  return a7 & 1;
}

uint64_t ViewList.applyIDs(from:transform:to:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(unint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;

  v7 = *a2;
  return ViewList.applyIDs(from:listAttribute:transform:to:)(a1, 0x100000000uLL, &v7, a3, a4, a5, a6) & 1;
}

uint64_t ViewList.firstOffset(of:style:)(unsigned int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  _DWORD v14[6];
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;

  v6 = *a1;
  v7 = a1[1];
  v8 = *((_QWORD *)a1 + 1);
  v9 = *a2;
  if (*a2 == 2 && (a1 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4)) != 0)
  {
    v10 = (uint64_t)a1;
    swift_retain();
    v11 = specialized Collection.firstIndex(where:)(v10, v6 | (v7 << 32), v8);
    swift_release();
    swift_release();
  }
  else
  {
    v20 = 0;
    v21 = 0;
    v18 = 0;
    v19 = 1;
    MEMORY[0x24BDAC7A8](a1);
    v14[4] = v6;
    v14[5] = v7;
    v15 = v8;
    v16 = &v18;
    v17 = &v20;
    v23 = v9;
    v22 = v12;
    ViewList.applySublists(from:style:list:to:)((uint64_t)&v21, &v23, (unint64_t)v12 << 32, (uint64_t)partial apply for closure #2 in ViewList.firstOffset(of:style:), (uint64_t)v14, a3, a4);
    return v18;
  }
  return v11;
}

uint64_t closure #2 in ViewList.firstOffset(of:style:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t i;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  int v18;

  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
    return 1;
  v8 = *(_QWORD *)(a1 + 24);
  v18 = *(_DWORD *)(a1 + 20);
  v9 = HIDWORD(a2);
  v10 = a2;
  v11 = v5 & ~(v5 >> 63);
  result = swift_bridgeObjectRetain();
  for (i = 0x80000000; i; --i)
  {
    if (!v11)
      goto LABEL_30;
    if (*(_QWORD *)(v8 + 16))
    {
      v14 = *(_QWORD *)(v8 + 32);
      if ((*(_BYTE *)(v8 + 52) & 1) != 0)
      {
        if (v10 || (_DWORD)v9 != -1)
          goto LABEL_6;
        swift_retain();
        goto LABEL_19;
      }
      swift_retain();
      if (v10)
        goto LABEL_5;
    }
    else
    {
      v14 = 0;
      if (v10)
        goto LABEL_5;
    }
    if (v18 != (_DWORD)v9)
      goto LABEL_5;
    if (!v14)
    {
      if (!a3)
        goto LABEL_28;
      goto LABEL_4;
    }
LABEL_19:
    if (!a3)
    {
      swift_retain();
LABEL_4:
      swift_retain();
      swift_release_n();
LABEL_5:
      result = swift_release();
      goto LABEL_6;
    }
    if (v14 == a3)
    {
      swift_release();
LABEL_28:
      swift_bridgeObjectRelease();
      result = 0;
      *(_QWORD *)a4 = *a5;
      *(_BYTE *)(a4 + 8) = 0;
      return result;
    }
    v15 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 104);
    swift_retain_n();
    v16 = swift_retain();
    LOBYTE(v15) = v15(v16);
    swift_release_n();
    result = swift_release();
    if ((v15 & 1) != 0)
      goto LABEL_28;
LABEL_6:
    ++*a5;
    --v11;
    --v10;
    if (!--v5)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
  }
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t _ViewList_Elements.retain()()
{
  return 0;
}

uint64_t _ViewList_Elements.makeAllElements(inputs:indirectMap:body:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _OWORD *a7@<X8>)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  uint64_t result;
  _BYTE v21[16];
  uint64_t (*v22)();
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  __int128 v32;
  uint64_t v33;

  v12 = *a1;
  v13 = *((_DWORD *)a1 + 2);
  v14 = a1[2];
  v15 = *((_DWORD *)a1 + 20);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a3;
  *(_QWORD *)(v16 + 24) = a4;
  v33 = 0;
  v24 = v12;
  v25 = v13;
  v26 = v14;
  v17 = *(_OWORD *)(a1 + 5);
  v27 = *(_OWORD *)(a1 + 3);
  v28 = v17;
  v29 = *(_OWORD *)(a1 + 7);
  v30 = a1[9];
  v31 = v15;
  v22 = thunk for @callee_guaranteed (@in_guaranteed _ViewInputs, @guaranteed @escaping @callee_guaranteed (@in_guaranteed _ViewInputs) -> (@out _ViewOutputs)) -> (@out _ViewOutputs?)partial apply;
  v23 = v16;
  (*(void (**)(__int128 *, uint64_t *, uint64_t *, uint64_t, uint64_t (*)(), _BYTE *, uint64_t, uint64_t))(a6 + 16))(&v32, &v33, &v24, a2, closure #1 in closure #1 in _ViewList_Elements.makeAllElements(inputs:indirectMap:body:)partial apply, v21, a5, a6);
  *a7 = v32;
  LOBYTE(a6) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((a6 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t specialized closure #1 in closure #1 in _ViewList_Elements.makeAllElements(inputs:indirectMap:body:)(_QWORD *a1, uint64_t *a2, void (*a3)(_QWORD *__return_ptr, uint64_t *))
{
  int v4;
  uint64_t v5;
  int v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  _QWORD v18[2];

  v4 = *((_DWORD *)a2 + 2);
  v5 = a2[2];
  v6 = *((_DWORD *)a2 + 20);
  v10 = *a2;
  v11 = v4;
  v12 = v5;
  v7 = *(_OWORD *)(a2 + 5);
  v13 = *(_OWORD *)(a2 + 3);
  v14 = v7;
  v15 = *(_OWORD *)(a2 + 7);
  v16 = a2[9];
  v17 = v6;
  a3(v18, &v10);
  v8 = v18[1];
  *a1 = v18[0];
  a1[1] = v8;
  return 1;
}

uint64_t closure #1 in closure #1 in _ViewList_Elements.makeAllElements(inputs:indirectMap:body:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *, uint64_t, uint64_t))
{
  int v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  int v17;

  v5 = *((_DWORD *)a2 + 2);
  v6 = a2[2];
  v7 = *((_DWORD *)a2 + 20);
  v10 = *a2;
  v11 = v5;
  v12 = v6;
  v8 = *(_OWORD *)(a2 + 5);
  v13 = *(_OWORD *)(a2 + 3);
  v14 = v8;
  v15 = *(_OWORD *)(a2 + 7);
  v16 = a2[9];
  v17 = v7;
  a5(&v10, a3, a4);
  return 1;
}

uint64_t _ViewList_Elements.makeOneElement(at:inputs:indirectMap:body:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _OWORD *a8@<X8>)
{
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  uint64_t result;
  _BYTE v23[16];
  uint64_t (*v24)();
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  __int128 v34;
  uint64_t v35;

  v13 = *a2;
  v14 = *((_DWORD *)a2 + 2);
  v15 = a2[2];
  v16 = *((_DWORD *)a2 + 20);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = a4;
  *(_QWORD *)(v17 + 24) = a5;
  v35 = a1;
  v26 = v13;
  v27 = v14;
  v28 = v15;
  v18 = *(_OWORD *)(a2 + 5);
  v29 = *(_OWORD *)(a2 + 3);
  v30 = v18;
  v31 = *(_OWORD *)(a2 + 7);
  v32 = a2[9];
  v33 = v16;
  v24 = thunk for @callee_guaranteed (@in_guaranteed _ViewInputs, @guaranteed @escaping @callee_guaranteed (@in_guaranteed _ViewInputs) -> (@out _ViewOutputs)) -> (@out _ViewOutputs?)partial apply;
  v25 = v17;
  (*(void (**)(__int128 *, uint64_t *, uint64_t *, uint64_t, uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t), _BYTE *, uint64_t, uint64_t))(a7 + 16))(&v34, &v35, &v26, a3, partial apply for closure #1 in closure #1 in _ViewList_Elements.makeOneElement(at:inputs:indirectMap:body:), v23, a6, a7);
  *a8 = v34;
  LOBYTE(a7) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((a7 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t specialized closure #1 in closure #1 in _ViewList_Elements.makeOneElement(at:inputs:indirectMap:body:)(_QWORD *a1, uint64_t *a2, void (*a3)(_QWORD *__return_ptr, uint64_t *))
{
  int v4;
  uint64_t v5;
  int v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  _QWORD v18[2];

  v4 = *((_DWORD *)a2 + 2);
  v5 = a2[2];
  v6 = *((_DWORD *)a2 + 20);
  v10 = *a2;
  v11 = v4;
  v12 = v5;
  v7 = *(_OWORD *)(a2 + 5);
  v13 = *(_OWORD *)(a2 + 3);
  v14 = v7;
  v15 = *(_OWORD *)(a2 + 7);
  v16 = a2[9];
  v17 = v6;
  a3(v18, &v10);
  v8 = v18[1];
  *a1 = v18[0];
  a1[1] = v8;
  return 0;
}

uint64_t closure #1 in closure #1 in _ViewList_Elements.makeOneElement(at:inputs:indirectMap:body:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *, uint64_t, uint64_t))
{
  int v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  int v17;

  v5 = *((_DWORD *)a2 + 2);
  v6 = a2[2];
  v7 = *((_DWORD *)a2 + 20);
  v10 = *a2;
  v11 = v5;
  v12 = v6;
  v8 = *(_OWORD *)(a2 + 5);
  v13 = *(_OWORD *)(a2 + 3);
  v14 = v8;
  v15 = *(_OWORD *)(a2 + 7);
  v16 = a2[9];
  v17 = v7;
  a5(&v10, a3, a4);
  return 0;
}

uint64_t _ViewList_Elements.makeOneElement(at:inputs:body:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _OWORD *a7@<X8>)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  uint64_t result;
  _BYTE v21[16];
  uint64_t (*v22)();
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  __int128 v32;
  uint64_t v33;

  v12 = *a2;
  v13 = *((_DWORD *)a2 + 2);
  v14 = a2[2];
  v15 = *((_DWORD *)a2 + 20);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a3;
  *(_QWORD *)(v16 + 24) = a4;
  v33 = a1;
  v24 = v12;
  v25 = v13;
  v26 = v14;
  v17 = *(_OWORD *)(a2 + 5);
  v27 = *(_OWORD *)(a2 + 3);
  v28 = v17;
  v29 = *(_OWORD *)(a2 + 7);
  v30 = a2[9];
  v31 = v15;
  v22 = thunk for @callee_guaranteed (@in_guaranteed _ViewInputs, @guaranteed @escaping @callee_guaranteed (@in_guaranteed _ViewInputs) -> (@out _ViewOutputs)) -> (@out _ViewOutputs?)partial apply;
  v23 = v16;
  (*(void (**)(__int128 *, uint64_t *, uint64_t *, _QWORD, uint64_t (*)(), _BYTE *, uint64_t, uint64_t))(a6 + 16))(&v32, &v33, &v24, 0, closure #1 in closure #1 in _ViewList_Elements.makeOneElement(at:inputs:indirectMap:body:)partial apply, v21, a5, a6);
  *a7 = v32;
  LOBYTE(v15) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v15 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t _ViewList_ID.index.getter()
{
  int *v0;

  return *v0;
}

uint64_t (*_ViewList_ID.index.modify(_QWORD *a1))()
{
  int *v1;

  *a1 = *v1;
  a1[1] = v1;
  return _ViewList_ID.index.modify;
}

uint64_t _ViewList_ID.init(implicitID:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    *(_DWORD *)a2 = 0;
    *(_DWORD *)(a2 + 4) = result;
    *(_QWORD *)(a2 + 8) = MEMORY[0x24BEE4AF8];
    return result;
  }
  __break(1u);
  return result;
}

void _ViewList_ID.init()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = MEMORY[0x24BEE4AF8];
}

uint64_t static _ViewList_ID.explicit<A>(_:owner:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  *a5 = 0;
  a5[1] = MEMORY[0x24BEE4AF8];
  return _ViewList_ID.bind<A>(explicitID:owner:isUnary:reuseID:)(a1, a2, 1, 0, a3, a4);
}

uint64_t _ViewList_ID.bind<A>(explicitID:owner:isUnary:)(uint64_t a1, int a2, char a3, uint64_t a4, uint64_t a5)
{
  return _ViewList_ID.bind<A>(explicitID:owner:isUnary:reuseID:)(a1, a2, a3, 0, a4, a5);
}

uint64_t static _ViewList_ID.explicit<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  int v5;

  v5 = *MEMORY[0x24BE096C0];
  *a4 = 0;
  a4[1] = MEMORY[0x24BEE4AF8];
  return _ViewList_ID.bind<A>(explicitID:owner:isUnary:reuseID:)(a1, v5, 1, 0, a2, a3);
}

uint64_t _ViewList_ID.elementID(at:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    v3 = *(_DWORD *)(v2 + 4);
    v4 = *(_QWORD *)(v2 + 8);
    *(_DWORD *)a2 = result;
    *(_DWORD *)(a2 + 4) = v3;
    *(_QWORD *)(a2 + 8) = v4;
    return swift_bridgeObjectRetain();
  }
  __break(1u);
  return result;
}

uint64_t _ViewList_ID.index.setter(uint64_t result)
{
  _DWORD *v1;

  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    *v1 = result;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t (*_ViewList_ID.Canonical.index.modify(_QWORD *a1))()
{
  int *v1;

  *a1 = *v1;
  a1[1] = v1;
  return _ViewList_ID.index.modify;
}

uint64_t _ViewList_ID.index.modify(uint64_t result, char a2)
{
  uint64_t v2;
  BOOL v3;

  v2 = *(_QWORD *)result;
  v3 = *(_QWORD *)result < (uint64_t)0xFFFFFFFF80000000;
  if ((a2 & 1) != 0)
  {
    if (*(_QWORD *)result < (int64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
      goto LABEL_9;
    }
    v3 = v2 < 0x7FFFFFFF;
    if (v2 <= 0x7FFFFFFF)
    {
LABEL_7:
      **(_DWORD **)(result + 8) = v2;
      return result;
    }
    __break(1u);
  }
  if (v3)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v2 <= 0x7FFFFFFF)
    goto LABEL_7;
LABEL_10:
  __break(1u);
  return result;
}

uint64_t _ViewList_ID.Canonical.explicitID.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 8);
  return swift_retain();
}

uint64_t _ViewList_ID.Canonical.explicitID.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_release();
  *(_QWORD *)(v1 + 8) = v2;
  return result;
}

uint64_t (*_ViewList_ID.Canonical.explicitID.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

BOOL _ViewList_ID.Canonical.requiresImplicitID.getter()
{
  uint64_t v0;

  return *(_DWORD *)(v0 + 4) >= 0;
}

uint64_t _ViewList_ID.Canonical.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;

  v1 = *(_QWORD *)(v0 + 8);
  if (v1)
  {
    v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 88);
    v3 = swift_retain();
    v4 = v2(v3);
    swift_release();
  }
  else
  {
    v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    return 64;
  }
  return v4;
}

void _ViewList_ID.Canonical.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::UInt32 v4;
  uint64_t v5;
  void (*v6)(uint64_t);

  v2 = v1;
  v4 = *(_DWORD *)(v2 + 4);
  v5 = *(_QWORD *)(v2 + 8);
  Hasher._combine(_:)(*(_DWORD *)v2);
  Hasher._combine(_:)(v4);
  if (v5)
  {
    Hasher._combine(_:)(1u);
    v6 = *(void (**)(uint64_t))(*(_QWORD *)v5 + 112);
    swift_retain();
    v6(a1);
    swift_release();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int _ViewList_ID.Canonical.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt32 v1;
  Swift::UInt32 v2;
  uint64_t v3;
  void (*v4)(_BYTE *);
  _BYTE v6[72];

  v1 = *(_DWORD *)v0;
  v2 = *(_DWORD *)(v0 + 4);
  v3 = *(_QWORD *)(v0 + 8);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  if (v3)
  {
    Hasher._combine(_:)(1u);
    v4 = *(void (**)(_BYTE *))(*(_QWORD *)v3 + 112);
    swift_retain();
    v4(v6);
    swift_release();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance _ViewList_ID.Canonical()
{
  uint64_t v0;
  Swift::UInt32 v1;
  Swift::UInt32 v2;
  uint64_t v3;
  void (*v4)(_BYTE *);
  _BYTE v6[72];

  v1 = *(_DWORD *)v0;
  v2 = *(_DWORD *)(v0 + 4);
  v3 = *(_QWORD *)(v0 + 8);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  if (v3)
  {
    Hasher._combine(_:)(1u);
    v4 = *(void (**)(_BYTE *))(*(_QWORD *)v3 + 112);
    swift_retain();
    v4(v6);
    swift_release();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance _ViewList_ID.Canonical(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::UInt32 v4;
  uint64_t v5;
  void (*v6)(uint64_t);

  v2 = v1;
  v4 = *(_DWORD *)(v2 + 4);
  v5 = *(_QWORD *)(v2 + 8);
  Hasher._combine(_:)(*(_DWORD *)v2);
  Hasher._combine(_:)(v4);
  if (v5)
  {
    Hasher._combine(_:)(1u);
    v6 = *(void (**)(uint64_t))(*(_QWORD *)v5 + 112);
    swift_retain();
    v6(a1);
    swift_release();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _ViewList_ID.Canonical()
{
  uint64_t v0;
  Swift::UInt32 v1;
  uint64_t v2;
  void (*v3)(_BYTE *);
  _BYTE v5[72];

  Hasher.init(_seed:)();
  v1 = *(_DWORD *)(v0 + 4);
  v2 = *(_QWORD *)(v0 + 8);
  Hasher._combine(_:)(*(_DWORD *)v0);
  Hasher._combine(_:)(v1);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    v3 = *(void (**)(_BYTE *))(*(_QWORD *)v2 + 112);
    swift_retain();
    v3(v5);
    swift_release();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t _ViewList_ID.ElementCollection.id.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

double _ViewList_ID.ElementCollection.id.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  double result;

  v3 = *(_QWORD *)(a1 + 8);
  swift_bridgeObjectRelease();
  result = *(double *)a1;
  *v1 = *(_QWORD *)a1;
  v1[1] = v3;
  return result;
}

uint64_t (*_ViewList_ID.ElementCollection.id.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewList_ID.ElementCollection.count.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t _ViewList_ID.ElementCollection.count.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*_ViewList_ID.ElementCollection.count.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double _ViewList_ID.ElementCollection.init(id:count:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  double result;

  v3 = *(_QWORD *)(a1 + 8);
  result = *(double *)a1;
  *a3 = *(_QWORD *)a1;
  a3[1] = v3;
  a3[2] = a2;
  return result;
}

uint64_t _ViewList_ID.ElementCollection.startIndex.getter()
{
  return 0;
}

uint64_t _ViewList_ID.ElementCollection.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    v3 = *(_DWORD *)(v2 + 4);
    v4 = *(_QWORD *)(v2 + 8);
    *(_DWORD *)a2 = result;
    *(_DWORD *)(a2 + 4) = v3;
    *(_QWORD *)(a2 + 8) = v4;
    return swift_bridgeObjectRetain();
  }
  __break(1u);
  return result;
}

_QWORD *protocol witness for BidirectionalCollection.index(before:) in conformance _ViewList_ID.ElementCollection@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if ((v3 & 0x8000000000000000) == 0 && v3 < *(_QWORD *)(v2 + 16))
  {
    *a2 = v3;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance _ViewList_ID.ElementCollection(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if ((v2 & 0x8000000000000000) == 0 && v2 < *(_QWORD *)(v1 + 16))
  {
    *result = v2;
    return result;
  }
  __break(1u);
  return result;
}

void protocol witness for Collection.endIndex.getter in conformance _ViewList_ID.ElementCollection(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance _ViewList_ID.ElementCollection(uint64_t (*result)(), uint64_t *a2))()
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  int v5;
  uint64_t v6;

  v3 = *a2;
  if (*a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v3 <= 0x7FFFFFFF)
  {
    v4 = result;
    v5 = *(_DWORD *)(v2 + 4);
    v6 = *(_QWORD *)(v2 + 8);
    *(_DWORD *)v4 = v3;
    *((_DWORD *)v4 + 1) = v5;
    *((_QWORD *)v4 + 1) = v6;
    swift_bridgeObjectRetain();
    return destroy for HostPreferencesCombiner;
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.subscript.getter in conformance _ViewList_ID.ElementCollection@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = v2[2];
  if (v3 < 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  v4 = *result;
  if (*result < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v5 = result[1];
  if (v3 >= v5)
  {
    v6 = v2[1];
    a2[2] = *v2;
    a2[3] = v6;
    a2[4] = v3;
    *a2 = v4;
    a2[1] = v5;
    return (uint64_t *)swift_bridgeObjectRetain();
  }
LABEL_7:
  __break(1u);
  return result;
}

void protocol witness for Collection.indices.getter in conformance _ViewList_ID.ElementCollection(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 16);
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    *a1 = 0;
    a1[1] = v2;
  }
}

BOOL protocol witness for Collection.isEmpty.getter in conformance _ViewList_ID.ElementCollection()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16) == 0;
}

_QWORD *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance _ViewList_ID.ElementCollection@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v4 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0 && *(_QWORD *)(v3 + 16) >= v4)
  {
    *a3 = v4;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance _ViewList_ID.ElementCollection@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  char v6;

  result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t *protocol witness for RandomAccessCollection.distance(from:to:) in conformance _ViewList_ID.ElementCollection(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = *(_QWORD *)(v2 + 16);
  if (v4 >= *a2)
  {
    v5 = *result;
    if (((v3 | *result) & 0x8000000000000000) == 0 && v4 >= v5)
      return (uint64_t *)(v3 - v5);
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.index(after:) in conformance _ViewList_ID.ElementCollection@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *result;
  if (*result < 0 || v3 >= *(_QWORD *)(v2 + 16))
    __break(1u);
  else
    *a2 = v3 + 1;
  return result;
}

uint64_t *protocol witness for Collection.formIndex(after:) in conformance _ViewList_ID.ElementCollection(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *result;
  if (*result < 0 || v2 >= *(_QWORD *)(v1 + 16))
    __break(1u);
  else
    *result = v2 + 1;
  return result;
}

double protocol witness for Sequence.makeIterator() in conformance _ViewList_ID.ElementCollection@<D0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double result;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  result = *(double *)v1;
  *a1 = *(_QWORD *)v1;
  a1[1] = v2;
  a1[2] = v3;
  a1[3] = 0;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance _ViewList_ID.ElementCollection()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance _ViewList_ID.ElementCollection()
{
  uint64_t v0;
  uint64_t v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t _ViewList_ID.bind<A>(explicitID:owner:isUnary:reuseID:)(uint64_t a1, int a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;

  v12 = MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v15 + 16))(v14, v12);
  AnyHashable2.init<A>(_:)((uint64_t)v14, a5, a6, v16, &v24);
  v17 = v24;
  v18 = *(_QWORD **)(v6 + 8);
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
  v20 = v18[2];
  v19 = v18[3];
  if (v20 >= v19 >> 1)
    v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v19 > 1), v20 + 1, 1, v18);
  v18[2] = v20 + 1;
  v21 = &v18[3 * v20];
  v21[4] = v17;
  v21[5] = a4;
  *((_DWORD *)v21 + 12) = a2;
  *((_BYTE *)v21 + 52) = a3 & 1;
  result = swift_release();
  *(_QWORD *)(v6 + 8) = v18;
  return result;
}

uint64_t _ViewList_ID.bind<A>(explicitID:owner:reuseID:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return _ViewList_ID.bind<A>(explicitID:owner:isUnary:reuseID:)(a1, a2, 0, a3, a4, a5);
}

uint64_t _ViewList_ID.bind<A>(explicitID:owner:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  return _ViewList_ID.bind<A>(explicitID:owner:isUnary:reuseID:)(a1, a2, 0, 0, a3, a4);
}

uint64_t _ViewList_ID.primaryExplicitID.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  if (*(_QWORD *)(*(_QWORD *)(v1 + 8) + 16))
    result = swift_retain();
  else
    result = 0;
  *a1 = result;
  return result;
}

uint64_t _ViewList_ID.allExplicitIDs.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_bridgeObjectRetain();
  v1 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI12_ViewList_IDV8Explicit33_E479C0E92CDD045BAF2EF653123E2E0BLLVG_AF12AnyHashable2Vs5NeverOTg503_s7d5UI12_fg9_IDV14alli10IDsSayAA12rs6VGvgAfk5G033_jklmnopQ56BLLVcfu_33_9e41cf4a1fd9b43cf13e2534f667327eAjFTf3nnnpk_nTf1cn_n(v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t _ViewList_ID.explicitID<A>(owner:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *i;
  uint64_t v15;
  uint64_t v17;
  __n128 v18;
  _QWORD v19[2];

  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  v9.n128_f64[0] = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v19 - v10;
  v12 = *(_QWORD *)(v3 + 8);
  v13 = *(_QWORD *)(v12 + 16);
  if (!v13)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(a2 - 8) + 56))(a3, 1, 1, a2, v9);
  v19[0] = a3;
  swift_bridgeObjectRetain();
  for (i = (_DWORD *)(v12 + 48); *i != a1; i += 6)
  {
LABEL_3:
    if (!--v13)
    {
      swift_bridgeObjectRelease();
      a3 = v19[0];
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(a2 - 8) + 56))(a3, 1, 1, a2, v9);
    }
  }
  v19[1] = *((_QWORD *)i - 2);
  AnyHashable2.as<A>(type:)();
  v15 = *(_QWORD *)(a2 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v11, 1, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    goto LABEL_3;
  }
  swift_bridgeObjectRelease();
  v17 = v19[0];
  (*(void (**)(_QWORD, char *, uint64_t))(v15 + 32))(v19[0], v11, a2);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, __n128))(v15 + 56))(v17, 0, 1, a2, v18);
}

uint64_t _ViewList_ID.containsID<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v19 = a1;
  v4 = type metadata accessor for Optional();
  v17 = *(_QWORD *)(v4 - 8);
  v18 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v17 - v5;
  v7 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v2 + 8);
  v12 = *(_QWORD *)(v11 + 16);
  if (!v12)
    return 0;
  swift_bridgeObjectRetain();
  v13 = 32;
  do
  {
    v20 = *(_QWORD *)(v11 + v13);
    swift_retain();
    AnyHashable2.as<A>(type:)();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v6, 1, a2) == 1)
    {
      swift_release();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v6, v18);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v6, a2);
      v14 = dispatch thunk of static Equatable.== infix(_:_:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, a2);
      if ((v14 & 1) != 0)
      {
        v15 = 1;
        goto LABEL_9;
      }
    }
    v13 += 24;
    --v12;
  }
  while (v12);
  v15 = 0;
LABEL_9:
  swift_bridgeObjectRelease();
  return v15;
}

void _ViewList_ID.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  Swift::UInt32 v3;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt32 *v6;
  uint64_t v7;
  Swift::UInt32 v8;
  void (*v9)(uint64_t);

  v3 = *(_DWORD *)(v1 + 4);
  v4 = *(_QWORD *)(v1 + 8);
  Hasher._combine(_:)(*(_DWORD *)v1);
  Hasher._combine(_:)(v3);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    v6 = (Swift::UInt32 *)(v4 + 48);
    do
    {
      v7 = *((_QWORD *)v6 - 2);
      v8 = *v6;
      v6 += 6;
      v9 = *(void (**)(uint64_t))(*(_QWORD *)v7 + 112);
      swift_retain();
      v9(a1);
      Hasher._combine(_:)(v8);
      swift_release();
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
}

Swift::Int _ViewList_ID.reuseIdentifier.getter()
{
  uint64_t v0;
  Swift::UInt32 v1;
  Swift::UInt32 v2;
  uint64_t v3;
  uint64_t v4;
  Swift::UInt *v5;
  Swift::UInt v6;

  v1 = *(_DWORD *)v0;
  v2 = *(_DWORD *)(v0 + 4);
  v3 = *(_QWORD *)(v0 + 8);
  Hasher.init()();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = (Swift::UInt *)(v3 + 40);
    do
    {
      v6 = *v5;
      v5 += 3;
      Hasher._combine(_:)(v6);
      --v4;
    }
    while (v4);
  }
  return Hasher.finalize()();
}

uint64_t _ViewList_ID._Views.base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 128) - 8) + 16))(a1, v1 + *(_QWORD *)(*(_QWORD *)v1 + 152));
}

_BYTE *_ViewList_ID._Views.init(_:isDataDependent:)(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v4;
  _BYTE *v5;

  v4 = *v2;
  v5 = specialized _ViewList_ID._Views.init(_:isDataDependent:)(a1, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v4 + 128) - 8) + 8))(a1);
  return v5;
}

uint64_t _ViewList_ID_Views.init(isDataDependent:)(char a1)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = a1;
  return v1;
}

uint64_t _ViewList_ID_Views.startIndex.getter()
{
  return 0;
}

uint64_t _ViewList_ID._Views.endIndex.getter()
{
  uint64_t v1;

  dispatch thunk of Collection.endIndex.getter();
  return v1;
}

uint64_t _ViewList_ID._Views.subscript.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t (*v3)(_BYTE *, _QWORD);
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[32];
  uint64_t v10;

  v10 = a1;
  v3 = (uint64_t (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
  v5 = v4;
  v6 = v4[1];
  swift_bridgeObjectRetain();
  v7 = *v5;
  result = v3(v9, 0);
  *a2 = v7;
  a2[1] = v6;
  return result;
}

uint64_t _ViewList_ID._Views.isEqual(to:)()
{
  uint64_t result;
  char v1;

  result = swift_dynamicCastClass();
  if (result)
  {
    swift_retain();
    v1 = dispatch thunk of static Equatable.== infix(_:_:)();
    swift_release();
    return v1 & 1;
  }
  return result;
}

void _ViewList_ID._Views.__allocating_init(isDataDependent:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void _ViewList_ID._Views.init(isDataDependent:)()
{
  specialized _ViewList_ID._Views.init(isDataDependent:)();
}

uint64_t _ViewList_ID._Views.__ivar_destroyer()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 128) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 152));
}

uint64_t _ViewList_ID._Views.deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 128) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 152));
  return v0;
}

uint64_t _ViewList_ID_Views.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t _ViewList_ID._Views.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 128) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 152));
  return swift_deallocClassInstance();
}

uint64_t _ViewList_ID_Views.withDataDependency()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0;
  if ((*(_BYTE *)(v0 + 16) & 1) == 0)
  {
    type metadata accessor for _ViewList_ID._Views<_ViewList_ID_Views>(0);
    v1 = swift_allocObject();
    *(_QWORD *)(v1 + 24) = v0;
    *(_BYTE *)(v1 + 16) = 1;
  }
  swift_retain();
  return v1;
}

uint64_t _ViewList_ID.JoinedViews.views.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t _ViewList_ID.JoinedViews.count.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t _ViewList_ID.JoinedViews.__allocating_init(_:isDataDependent:)(unint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = swift_allocObject();
  v5 = specialized _ViewList_ID.JoinedViews.init(_:isDataDependent:)(a1, a2, v4);
  swift_bridgeObjectRelease();
  swift_release();
  return v5;
}

uint64_t _ViewList_ID.JoinedViews.init(_:isDataDependent:)(unint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = specialized _ViewList_ID.JoinedViews.init(_:isDataDependent:)(a1, a2, v2);
  swift_bridgeObjectRelease();
  swift_release();
  return v3;
}

uint64_t _ViewList_ID.JoinedViews.subscript.getter(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;

  v2 = result;
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = 0;
    v6 = v3 + 32;
    v7 = *(_QWORD *)(v3 + 16);
    do
    {
      v8 = v7 >> 1;
      v9 = v5 + (v7 >> 1);
      if (__OFADD__(v5, v7 >> 1))
      {
        __break(1u);
LABEL_18:
        __break(1u);
        goto LABEL_19;
      }
      if (v9 >= v4)
        goto LABEL_18;
      v7 += ~v8;
      if (*(_QWORD *)(v6 + 16 * v9 + 8) <= result)
        v5 = v9 + 1;
      else
        v7 = v8;
    }
    while ((uint64_t)v7 > 0);
    if (!v5)
      goto LABEL_13;
    if ((uint64_t)(v5 - 1) < (uint64_t)v4)
    {
      v2 = result - *(_QWORD *)(v6 + 16 * (v5 - 1) + 8);
      goto LABEL_13;
    }
  }
  else
  {
    v5 = 0;
LABEL_13:
    if (v5 >= v4)
    {
LABEL_19:
      __break(1u);
    }
    else
    {
      v10 = *(_QWORD *)(v3 + 16 * v5 + 32);
      v11 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 88);
      v12 = swift_retain();
      result = v11(v12);
      if ((v2 & 0x8000000000000000) == 0 && result >= v2)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 96))(v2);
        return swift_release();
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t _ViewList_ID.JoinedViews.isEqual(to:)()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;

  result = swift_dynamicCastClass();
  if (!result || *(_QWORD *)(v0 + 32) != *(_QWORD *)(result + 32))
    return 0;
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3)
    return 1;
  v4 = *(_QWORD *)(result + 24);
  if (*(_QWORD *)(v4 + 16))
  {
    v5 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(v2 + 32) + 104);
    swift_retain();
    swift_retain();
    v6 = swift_retain();
    LOBYTE(v5) = v5(v6);
    swift_release();
    result = swift_release();
    if ((v5 & 1) != 0)
    {
      v7 = v2 + 48;
      v8 = v4 + 48;
      v9 = 1;
      do
      {
        v10 = v3 == v9;
        if (v3 == v9)
          break;
        if (v9 >= *(_QWORD *)(v2 + 16))
        {
          __break(1u);
LABEL_18:
          __break(1u);
          goto LABEL_19;
        }
        if (v9++ >= *(_QWORD *)(v4 + 16))
          goto LABEL_18;
        v11 = v7 + 16;
        v12 = v8 + 16;
        v13 = *(uint64_t (**)(uint64_t))(**(_QWORD **)v7 + 104);
        swift_retain();
        v14 = swift_retain();
        LOBYTE(v13) = v13(v14);
        swift_release();
        result = swift_release();
        v8 = v12;
        v7 = v11;
      }
      while ((v13 & 1) != 0);
    }
    else
    {
      v10 = 0;
    }
    swift_release();
    return v10;
  }
LABEL_19:
  __break(1u);
  return result;
}

uint64_t static _ViewList_ID_Views.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a2) & 1;
}

void _ViewList_ID.JoinedViews.__allocating_init(isDataDependent:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void _ViewList_ID.JoinedViews.init(isDataDependent:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t _ViewList_ID.JoinedViews.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t _ViewList_ID.JoinedViews.__deallocating_deinit()
{
  return _ViewList_ID.JoinedViews.__deallocating_deinit((void (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

Swift::Int _ViewList_ID.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];
  uint64_t v4;
  uint64_t v5;

  v1 = v0[1];
  v4 = *v0;
  v5 = v1;
  Hasher.init(_seed:)();
  _ViewList_ID.hash(into:)((uint64_t)v3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance _ViewList_ID()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];
  uint64_t v4;
  uint64_t v5;

  v1 = v0[1];
  v4 = *v0;
  v5 = v1;
  Hasher.init(_seed:)();
  _ViewList_ID.hash(into:)((uint64_t)v3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _ViewList_ID()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  _ViewList_ID.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _ViewList_ID(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 == *(_DWORD *)a2 && *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4))
    return specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
  else
    return 0;
}

uint64_t _ViewList_ID_Views.isDataDependent.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

void _ViewList_ID_Views.endIndex.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void _ViewList_ID_Views.subscript.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void _ViewList_ID_Views.isEqual(to:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t _ViewList_ID_Views.__allocating_init(isDataDependent:)(char a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_BYTE *)(result + 16) = a1;
  return result;
}

uint64_t _ViewList_ID_Views.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _ViewList_ID_Views(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 104))(*a2) & 1;
}

_QWORD *protocol witness for BidirectionalCollection.index(before:) in conformance _ViewList_ID_Views@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else
  {
    result = (_QWORD *)(*(uint64_t (**)(void))(**(_QWORD **)v2 + 88))();
    if ((v4 & 0x8000000000000000) == 0 && v4 < (uint64_t)result)
    {
      *a2 = v4;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance _ViewList_ID_Views(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;

  v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else
  {
    v3 = result;
    result = (uint64_t *)(*(uint64_t (**)(void))(**(_QWORD **)v1 + 88))();
    if ((v2 & 0x8000000000000000) == 0 && v2 < (uint64_t)result)
    {
      *v3 = v2;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.endIndex.getter in conformance _ViewList_ID_Views@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 88))();
  *a1 = result;
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance _ViewList_ID_Views(uint64_t a1, _QWORD *a2))()
{
  uint64_t v2;

  (*(void (**)(_QWORD))(**(_QWORD **)v2 + 96))(*a2);
  return destroy for Image.Location.Error;
}

uint64_t protocol witness for Collection.subscript.getter in conformance _ViewList_ID_Views@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v5 = *a1;
  v4 = a1[1];
  v6 = *v2;
  result = (*(uint64_t (**)(void))(*(_QWORD *)v6 + 88))();
  if (result < 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v5 < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (result >= v4)
  {
    *a2 = v5;
    a2[1] = v4;
    a2[2] = v6;
    return swift_retain();
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.indices.getter in conformance _ViewList_ID_Views@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 88))();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    *a1 = 0;
    a1[1] = result;
  }
  return result;
}

_QWORD *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance _ViewList_ID_Views@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;

  v5 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else
  {
    result = (_QWORD *)(*(uint64_t (**)(void))(**(_QWORD **)v3 + 88))();
    if ((v5 & 0x8000000000000000) == 0 && (uint64_t)result >= v5)
    {
      *a3 = v5;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance _ViewList_ID_Views@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  char v6;

  result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t protocol witness for RandomAccessCollection.distance(from:to:) in conformance _ViewList_ID_Views(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t result;

  v3 = *a1;
  v4 = *a2;
  v5 = *(uint64_t (**)(void))(**(_QWORD **)v2 + 88);
  result = v5();
  if (v3 < 0 || result < v3)
  {
    __break(1u);
  }
  else
  {
    result = v5();
    if ((v4 & 0x8000000000000000) == 0 && result >= v4)
      return v4 - v3;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.index(after:) in conformance _ViewList_ID_Views@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v4 = *a1;
  result = (*(uint64_t (**)(void))(**(_QWORD **)v2 + 88))();
  if (v4 < 0 || v4 >= result)
    __break(1u);
  else
    *a2 = v4 + 1;
  return result;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance _ViewList_ID_Views(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 88))();
  if (v3 < 0 || v3 >= result)
    __break(1u);
  else
    *a1 = v3 + 1;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance _ViewList_ID_Views(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ViewList_ID_Views, a1);
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance _ViewList_ID_Views()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_release();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance _ViewList_ID_Views(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance _ViewList_ID_Views()
{
  type metadata accessor for _ViewList_ID_Views();
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t static _ViewListOutputs.staticList(_:inputs:staticCount:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  int v15;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  char v20;
  BOOL v21;
  uint64_t result;
  int v23;
  char v24;
  uint64_t v25;
  __int128 v26[2];
  uint64_t v27;
  int v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v7 = *((_DWORD *)a2 + 2);
  v8 = a2[2];
  v9 = a2[5];
  v10 = a2[6];
  v11 = a2[7];
  v12 = *((_DWORD *)a2 + 16);
  v25 = a2[9];
  v24 = *((_BYTE *)a2 + 80);
  v27 = *a2;
  v28 = v7;
  v29 = v8;
  v30 = *(_OWORD *)(a2 + 3);
  v31 = v9;
  v13 = _GraphInputs.stableIDScope.getter();
  v15 = *MEMORY[0x24BE096C0];
  v17 = v12 != *MEMORY[0x24BE096C0] || (v11 & 3) == 1;
  v18 = (v14 & 1) == 0 || v17;
  if (v18 == 1)
  {
    v19 = v13;
    v20 = v14;
    outlined init with copy of AnyTrackedValue(a1, (uint64_t)v26);
    if ((v11 & 1) != 0)
    {
      v21 = (v11 & 2) == 0;
      if (v12 != v15)
      {
LABEL_17:
        outlined init with take of ScrollStateRequest(v26, (uint64_t)&v27);
        v31 = v10;
        v32 = v21;
        v33 = v19;
        v34 = v20 & 1;
        v35 = v25;
        v36 = v24;
        v37 = v12;
        protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
        type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
        lazy protocol witness table accessor for type BaseViewList.Init and conformance BaseViewList.Init();
        swift_bridgeObjectRetain();
        v23 = Attribute.init<A>(body:value:flags:update:)();
        result = outlined destroy of BaseViewList.Init((uint64_t)&v27);
        *(_DWORD *)a4 = v23;
        *(_QWORD *)(a4 + 8) = 0;
        goto LABEL_18;
      }
    }
    else
    {
      v21 = 0;
      if (v12 != v15)
        goto LABEL_17;
    }
    v12 = v15;
    goto LABEL_17;
  }
  result = outlined init with copy of AnyTrackedValue(a1, a4);
LABEL_18:
  *(_BYTE *)(a4 + 40) = v18;
  *(_QWORD *)(a4 + 48) = v10 + a3;
  *(_QWORD *)(a4 + 56) = a3;
  *(_BYTE *)(a4 + 64) = 0;
  return result;
}

uint64_t type metadata accessor for BodyUnaryViewGenerator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BodyUnaryViewGenerator);
}

uint64_t type metadata accessor for UnaryElements(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UnaryElements);
}

uint64_t sub_234EA5230()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t BaseViewList.init(elements:implicitID:canTransition:stableIDScope:traitKeys:traits:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, unint64_t a4@<X3>, char a5@<W4>, uint64_t *a6@<X5>, _QWORD **a7@<X6>, uint64_t a8@<X8>)
{
  _UNKNOWN **v8;
  uint64_t v12;
  uint64_t v14;
  char v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  ValueMetadata *v19;
  uint64_t v20;
  _UNKNOWN **v21;
  ValueMetadata *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  ValueMetadata *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(__int128 *, uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  _QWORD *v44;
  _UNKNOWN **v45;

  LOBYTE(v8) = a5;
  v12 = a1;
  v14 = *a6;
  v15 = *((_BYTE *)a6 + 8);
  v16 = *a7;
  outlined init with copy of AnyTrackedValue(a1, a8);
  *(_QWORD *)(a8 + 40) = a2;
  *(_QWORD *)(a8 + 48) = v14;
  *(_BYTE *)(a8 + 56) = v15;
  *(_QWORD *)(a8 + 64) = v16;
  if ((a3 & 1) == 0)
    goto LABEL_12;
  v17 = v16[2];
  if (!v17)
  {
LABEL_8:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_35;
    while (1)
    {
      v24 = v16[2];
      v23 = v16[3];
      if (v24 >= v23 >> 1)
        v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, v16);
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ViewTraitCollection.AnyTrait<CanTransitionTraitKey>, (uint64_t)&type metadata for CanTransitionTraitKey, (uint64_t)&protocol witness table for CanTransitionTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewTraitCollection.AnyTrait);
      v44 = (_QWORD *)v25;
      v45 = &protocol witness table for ViewTraitCollection.AnyTrait<A>;
      LOBYTE(v43) = 1;
      v16[2] = v24 + 1;
      outlined init with take of ScrollStateRequest(&v43, (uint64_t)&v16[5 * v24 + 4]);
      *(_QWORD *)(a8 + 64) = v16;
LABEL_12:
      if ((v8 & 1) != 0)
        return __swift_destroy_boxed_opaque_existential_1(v12);
LABEL_13:
      v8 = (_UNKNOWN **)HIDWORD(a4);
      v26 = v16[2];
      if (!v26)
      {
LABEL_19:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
        v31 = v16[2];
        v30 = v16[3];
        if (v31 >= v30 >> 1)
          v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v30 > 1), v31 + 1, 1, v16);
        type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ViewTraitCollection.AnyTrait<_DisplayList_StableIdentityScope>, (uint64_t)&type metadata for _DisplayList_StableIdentityScope, (uint64_t)&protocol witness table for _DisplayList_StableIdentityScope, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewTraitCollection.AnyTrait);
        v44 = (_QWORD *)v32;
        v45 = &protocol witness table for ViewTraitCollection.AnyTrait<A>;
        *(_QWORD *)&v43 = __PAIR64__(v8, a4);
        v16[2] = v31 + 1;
        outlined init with take of ScrollStateRequest(&v43, (uint64_t)&v16[5 * v31 + 4]);
        *(_QWORD *)(a8 + 64) = v16;
        return __swift_destroy_boxed_opaque_existential_1(v12);
      }
      v42 = v12;
      v12 = HIDWORD(a4);
      v27 = a4;
      v18 = 0;
      a4 = 0;
      while (1)
      {
        v28 = *(_QWORD *)(a8 + 64);
        if (a4 >= *(_QWORD *)(v28 + 16))
          break;
        outlined init with copy of AnyTrackedValue(v28 + v18 * 8 + 32, (uint64_t)&v43);
        v16 = v44;
        v8 = v45;
        __swift_project_boxed_opaque_existential_1(&v43, (uint64_t)v44);
        v29 = (ValueMetadata *)((uint64_t (*)(_QWORD *, _UNKNOWN **))v8[1])(v16, v8);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v43);
        if (v29 == &type metadata for _DisplayList_StableIdentityScope)
        {
          *(_QWORD *)&v43 = __PAIR64__(v12, v27);
          v19 = *(ValueMetadata **)(a8 + 64);
          result = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(a8 + 64) = v19;
          if ((result & 1) == 0)
            goto LABEL_37;
          goto LABEL_30;
        }
        ++a4;
        v18 += 5;
        if (v26 == a4)
        {
          v16 = *(_QWORD **)(a8 + 64);
          LODWORD(a4) = v27;
          LODWORD(v8) = v12;
          v12 = v42;
          goto LABEL_19;
        }
      }
LABEL_34:
      __break(1u);
LABEL_35:
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
    }
  }
  v42 = a4;
  v18 = 0;
  a4 = 0;
  v19 = &type metadata for CanTransitionTraitKey;
  while (1)
  {
    v20 = *(_QWORD *)(a8 + 64);
    if (a4 >= *(_QWORD *)(v20 + 16))
    {
      __break(1u);
      goto LABEL_34;
    }
    outlined init with copy of AnyTrackedValue(v20 + v18 * 8 + 32, (uint64_t)&v43);
    v16 = v44;
    v21 = v45;
    __swift_project_boxed_opaque_existential_1(&v43, (uint64_t)v44);
    v22 = (ValueMetadata *)((uint64_t (*)(_QWORD *, _UNKNOWN **))v21[1])(v16, v21);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v43);
    if (v22 == &type metadata for CanTransitionTraitKey)
      break;
    ++a4;
    v18 += 5;
    if (v17 == a4)
    {
      v16 = *(_QWORD **)(a8 + 64);
      a4 = v42;
      goto LABEL_8;
    }
  }
  LOBYTE(v43) = 1;
  v16 = *(_QWORD **)(a8 + 64);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(a8 + 64) = v16;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v16 = specialized _ArrayBuffer._consumeAndCreateNew()(v16);
    *(_QWORD *)(a8 + 64) = v16;
  }
  if (a4 < v16[2])
  {
    v34 = (uint64_t)&v16[v18 + 4];
    v35 = v16[v18 + 7];
    v36 = v16[v18 + 8];
    __swift_mutable_project_boxed_opaque_existential_1(v34, v35);
    (*(void (**)(__int128 *, _QWORD, uint64_t, uint64_t))(v36 + 24))(&v43, MEMORY[0x24BEE1328], v35, v36);
    *(_QWORD *)(a8 + 64) = v16;
    a4 = v42;
    if ((v8 & 1) == 0)
      goto LABEL_13;
    return __swift_destroy_boxed_opaque_existential_1(v12);
  }
  __break(1u);
LABEL_37:
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v19);
  v19 = (ValueMetadata *)result;
  *(_QWORD *)(a8 + 64) = result;
LABEL_30:
  v12 = v42;
  if (a4 < v19[1].Kind)
  {
    v38 = *(uint64_t *)((char *)&v19[3].Description + v18 * 8);
    v39 = *(uint64_t *)((char *)&v19[4].Kind + v18 * 8);
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v19[2] + v18 * 8, v38);
    v40 = *(void (**)(__int128 *, uint64_t, uint64_t, uint64_t))(v39 + 24);
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for WeakAttribute<_DisplayList_StableIdentityScope>, (uint64_t)&type metadata for _DisplayList_StableIdentityScope, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE095D0]);
    v40(&v43, v41, v38, v39);
    *(_QWORD *)(a8 + 64) = v19;
    return __swift_destroy_boxed_opaque_existential_1(v12);
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance _ViewListOutputs.ApplyModifiers@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Value;

  v3 = *(_QWORD *)(v1 + 8);
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  Value = AGGraphGetValue();
  outlined init with copy of AnyTrackedValue(Value, a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 80))(a1);
}

uint64_t _ViewListOutputs.multiModifier<A>(_:inputs:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  _UNKNOWN **v34;
  char v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[40];
  __int128 v43[2];
  char v44;

  v31 = v4;
  v6 = *a1;
  v7 = *a2;
  v8 = *((_DWORD *)a2 + 2);
  v9 = a2[2];
  v11 = *((_DWORD *)a2 + 6);
  v10 = *((_DWORD *)a2 + 7);
  v13 = *((_DWORD *)a2 + 8);
  v12 = *((_DWORD *)a2 + 9);
  v14 = a2[5];
  outlined init with copy of _ViewListOutputs.Views(v31, (uint64_t)v43);
  if ((v44 & 1) != 0)
  {
    v28 = v43[0];
    v27 = *((_QWORD *)&v43[0] + 1);
    type metadata accessor for ModifiedViewList.ListModifier(0, a3, a4, v15);
    LODWORD(v32) = v6;
    *(_QWORD *)&v36 = v7;
    DWORD2(v36) = v8;
    *(_QWORD *)&v37 = v9;
    *((_QWORD *)&v37 + 1) = __PAIR64__(v10, v11);
    *(_QWORD *)&v38 = __PAIR64__(v12, v13);
    *((_QWORD *)&v38 + 1) = v14;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v16 = ModifiedViewList.ListModifier.__allocating_init(pred:modifier:inputs:)(v27, (uint64_t)&v32, (uint64_t *)&v36);
    LODWORD(v36) = v28;
    *((_QWORD *)&v36 + 1) = v16;
    BYTE8(v38) = 1;
    v17 = &v36;
  }
  else
  {
    outlined init with take of ScrollStateRequest(v43, (uint64_t)v42);
    outlined init with copy of AnyTrackedValue((uint64_t)v42, (uint64_t)&v32);
    v18 = AGCreateWeakAttribute();
    v19 = v18;
    v29 = a4;
    v20 = HIDWORD(v18);
    outlined init with take of ScrollStateRequest(&v32, (uint64_t)&v36);
    *((_QWORD *)&v38 + 1) = __PAIR64__(v20, v19);
    *(_QWORD *)&v39 = v7;
    DWORD2(v39) = v8;
    *(_QWORD *)&v40 = v9;
    *((_QWORD *)&v40 + 1) = __PAIR64__(v10, v11);
    *(_QWORD *)&v41 = __PAIR64__(v12, v13);
    *((_QWORD *)&v41 + 1) = v14;
    v33 = type metadata accessor for ModifiedElements(0, a3, v29, v21);
    v34 = &protocol witness table for ModifiedElements<A>;
    v22 = (_OWORD *)swift_allocObject();
    *(_QWORD *)&v32 = v22;
    v23 = v39;
    v22[3] = v38;
    v22[4] = v23;
    v24 = v41;
    v22[5] = v40;
    v22[6] = v24;
    v25 = v37;
    v22[1] = v36;
    v22[2] = v25;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
    v35 = 0;
    v17 = &v32;
  }
  return outlined assign with take of _ViewListOutputs.Views((uint64_t)v17, v31);
}

uint64_t ModifiedViewList.ListModifier.__allocating_init(pred:modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = swift_allocObject();
  v7 = specialized ModifiedViewList.ListModifier.init(pred:modifier:inputs:)(a1, a2, a3, v6);
  swift_release();
  return v7;
}

uint64_t mergeStatic #1 (from:to:) in static _ViewListOutputs.concat(_:inputs:)@<X0>(unint64_t a1@<X0>, int64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v7;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v16;
  _QWORD *v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  unint64_t v23;
  char v24;
  char v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  _QWORD *v30;
  __int128 v31;
  ValueMetadata *v32;
  _UNKNOWN **v33;
  char v34;
  uint64_t v35;
  char v36;
  __int128 v37[2];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v7 != 1)
  {
    if (!v7)
    {
      v12 = 0;
      v13 = 0;
      v32 = &type metadata for EmptyViewListElements;
      v33 = &protocol witness table for EmptyViewListElements;
LABEL_15:
      outlined init with copy of AnyTrackedValue((uint64_t)&v31, (uint64_t)v37);
      swift_beginAccess();
      v20 = *(_QWORD *)(a4 + 16);
      v21 = (*(_QWORD *)(a5 + 56) & 3) == 1;
      v22 = *(_OWORD *)(a5 + 16);
      v38 = *(_OWORD *)a5;
      v39 = v22;
      v40 = *(_OWORD *)(a5 + 32);
      v23 = _GraphInputs.stableIDScope.getter();
      v25 = v24 & 1;
      v35 = MEMORY[0x24BEE4B08];
      v36 = 0;
      v30 = (_QWORD *)MEMORY[0x24BEE4AF8];
      *((_QWORD *)&v39 + 1) = &type metadata for BaseViewList;
      *(_QWORD *)&v40 = &protocol witness table for BaseViewList;
      *(_QWORD *)&v38 = swift_allocObject();
      BaseViewList.init(elements:implicitID:canTransition:stableIDScope:traitKeys:traits:)((uint64_t)v37, v20, v21, v23, v25, &v35, &v30, v38 + 16);
      type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
      type metadata accessor for External<ViewList>(0, (unint64_t *)&lazy cache variable for type metadata for External<ViewList>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BE09670]);
      lazy protocol witness table accessor for type External<ViewList> and conformance External<A>();
      LODWORD(v23) = Attribute.init<A>(body:value:flags:update:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v38);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v31);
      result = swift_beginAccess();
      v27 = *(_QWORD *)(a4 + 16) + 1;
      *(_QWORD *)(a4 + 16) = v27;
      *(_DWORD *)a6 = v23;
      *(_QWORD *)(a6 + 8) = 0;
      *(_BYTE *)(a6 + 40) = 1;
      *(_QWORD *)(a6 + 48) = v27;
      *(_QWORD *)(a6 + 56) = v12;
      *(_BYTE *)(a6 + 64) = v13;
      return result;
    }
    if (a2 >= (uint64_t)a1)
    {
      if ((a1 & 0x8000000000000000) == 0)
      {
        v16 = *(_QWORD *)(a3 + 16);
        if (v16 >= a1 && (uint64_t)v16 >= a2)
        {
          v32 = (ValueMetadata *)&unk_25061B068;
          v33 = &protocol witness table for MergedElements;
          v17 = (_QWORD *)swift_allocObject();
          *(_QWORD *)&v31 = v17;
          v17[2] = a3;
          v17[3] = a3 + 32;
          v17[4] = a1;
          v17[5] = (2 * a2) | 1;
          v18 = a2 >= a1;
          v19 = a2 - a1;
          if (!v19)
          {
            swift_bridgeObjectRetain();
            v12 = 0;
            v13 = 0;
            goto LABEL_15;
          }
          if (v19 != 0 && v18)
          {
            swift_bridgeObjectRetain();
            v12 = 0;
            v13 = 0;
            v28 = a3 + 72 * a1 + 32;
            while (1)
            {
              outlined init with copy of _ViewListOutputs(v28, (uint64_t)&v38);
              if ((v13 & 1) != 0 || (v42 & 1) != 0)
              {
                v12 = 0;
                v13 = 1;
              }
              else
              {
                v29 = __OFADD__(v12, v41);
                v12 += v41;
                if (v29)
                {
                  __break(1u);
                  goto LABEL_26;
                }
                v13 = 0;
              }
              outlined destroy of _ViewListOutputs((uint64_t)&v38);
              v28 += 72;
              if (!--v19)
                goto LABEL_15;
            }
          }
LABEL_32:
          __break(1u);
        }
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    goto LABEL_28;
  }
  if ((a1 & 0x8000000000000000) != 0)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (*(_QWORD *)(a3 + 16) <= a1)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v14 = a3 + 72 * a1 + 32;
  outlined init with copy of _ViewListOutputs(v14, (uint64_t)&v38);
  outlined init with take of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(&v38, &v31);
  if ((v34 & 1) == 0)
  {
    outlined init with take of ScrollStateRequest(&v31, (uint64_t)v37);
    outlined init with take of ScrollStateRequest(v37, (uint64_t)&v31);
    v12 = *(_QWORD *)(v14 + 56);
    v13 = *(_BYTE *)(v14 + 64);
    goto LABEL_15;
  }
  outlined destroy of _ViewListOutputs.Views((uint64_t)&v31);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int __swiftcall EmptyViewList.count(style:)(SwiftUI::_ViewList_IteratorStyle style)
{
  return 0;
}

Swift::Int __swiftcall EmptyViewList.estimatedCount(style:)(SwiftUI::_ViewList_IteratorStyle style)
{
  return 0;
}

void EmptyViewList.traitKeys.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = MEMORY[0x24BEE4B08];
  *(_BYTE *)(a1 + 8) = 0;
}

void EmptyViewList.traits.getter(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x24BEE4AF8];
}

uint64_t EmptyViewList.viewIDs.getter()
{
  uint64_t result;

  type metadata accessor for _ViewList_ID._Views<EmptyCollection<_ViewList_ID>>(0);
  result = swift_allocObject();
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t EmptyViewList.applyNodes(from:style:list:transform:to:)()
{
  return 1;
}

void EmptyViewList.edit(forID:since:)(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t EmptyViewList.firstOffset<A>(forID:style:)()
{
  return 0;
}

void protocol witness for ViewList.traitKeys.getter in conformance EmptyViewList(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = MEMORY[0x24BEE4B08];
  *(_BYTE *)(a1 + 8) = 0;
}

uint64_t protocol witness for ViewList.viewIDs.getter in conformance EmptyViewList()
{
  uint64_t result;

  type metadata accessor for _ViewList_ID._Views<EmptyCollection<_ViewList_ID>>(0);
  result = swift_allocObject();
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t EmptyViewListElements.count.getter()
{
  return 0;
}

uint64_t EmptyViewListElements.makeElements(from:inputs:indirectMap:body:)(_QWORD *a1)
{
  *a1 = 0;
  a1[1] = 0;
  return 1;
}

uint64_t EmptyViewListElements.tryToReuseElement(at:by:at:indirectMap:testOnly:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v4[40];

  outlined init with copy of AnyTrackedValue(a2, (uint64_t)v4);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for _ViewList_Elements);
  v2 = swift_dynamicCast();
  if ((v2 & 1) == 0)
    specialized static Log.graphReuse(_:)();
  return v2;
}

uint64_t protocol witness for _ViewList_Elements.makeElements(from:inputs:indirectMap:body:) in conformance EmptyViewListElements(_QWORD *a1)
{
  *a1 = 0;
  a1[1] = 0;
  return 1;
}

uint64_t protocol witness for _ViewList_Elements.tryToReuseElement(at:by:at:indirectMap:testOnly:) in conformance EmptyViewListElements(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v4[40];

  outlined init with copy of AnyTrackedValue(a2, (uint64_t)v4);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for _ViewList_Elements);
  v2 = swift_dynamicCast();
  if ((v2 & 1) == 0)
    specialized static Log.graphReuse(_:)();
  return v2;
}

uint64_t BaseViewList.applyNodes(from:style:list:transform:to:)(_QWORD *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD *, unint64_t *, _BYTE *, uint64_t))
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _BYTE v23[88];
  unint64_t v24;
  _QWORD v25[2];
  int v26;
  int v27;
  uint64_t v28;
  _QWORD v29[6];
  int v30;
  char v31;

  v6 = (uint64_t)v5;
  v11 = *a2;
  v12 = v5[3];
  v13 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v12);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
  v15 = result;
  v16 = result;
  if ((v11 & 1) != 0)
  {
    v16 = result * (v11 >> 1);
    if ((unsigned __int128)(result * (__int128)(v11 >> 1)) >> 64 != v16 >> 63)
    {
      __break(1u);
LABEL_10:
      __break(1u);
      goto LABEL_11;
    }
  }
  v17 = *a1;
  v18 = __OFSUB__(*a1, v16);
  v19 = *a1 - v16;
  if (v19 < 0 == v18)
  {
    *a1 = v19;
    v22 = 1;
    return v22 & 1;
  }
  v20 = *(_QWORD *)(v6 + 40);
  if (v20 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_10;
  if (v20 <= 0x7FFFFFFF)
  {
    outlined init with copy of AnyTrackedValue(v6, (uint64_t)v29);
    v21 = *(_QWORD *)(v6 + 64);
    v25[0] = v17;
    v25[1] = v15;
    v26 = 0;
    v27 = v20;
    v28 = MEMORY[0x24BEE4AF8];
    v29[5] = v21;
    v30 = a3;
    v31 = BYTE4(a3) & 1;
    v24 = v11;
    outlined init with copy of _ViewList_Sublist((uint64_t)v25, (uint64_t)v23);
    v23[85] = 1;
    swift_bridgeObjectRetain();
    v22 = a5(a1, &v24, v23, a4);
    outlined destroy of _ViewList_Node((uint64_t)v23);
    outlined destroy of _ViewList_Sublist((uint64_t)v25);
    *a1 = 0;
    return v22 & 1;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t BaseViewList.Init.value.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char v5;
  unint64_t v6;
  char v7;
  char v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v13;
  uint64_t v14;
  char v15;
  _BYTE v16[40];

  v2 = v1;
  outlined init with copy of AnyTrackedValue(v1, (uint64_t)v16);
  v4 = *(_QWORD *)(v1 + 40);
  v5 = *(_BYTE *)(v1 + 48);
  v6 = *(_QWORD *)(v2 + 52);
  v7 = *(_BYTE *)(v2 + 60);
  v8 = *(_BYTE *)(v2 + 72);
  v14 = *(_QWORD *)(v2 + 64);
  v15 = v8;
  if (*(_DWORD *)(v2 + 76) == *MEMORY[0x24BE096C0])
  {
    v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  else
  {
    AGGraphGetValue();
    v9 = (_QWORD *)swift_bridgeObjectRetain();
  }
  v13 = v9;
  a1[3] = (uint64_t)&type metadata for BaseViewList;
  a1[4] = (uint64_t)&protocol witness table for BaseViewList;
  v10 = swift_allocObject();
  v11 = v10 + 16;
  *a1 = v10;
  swift_bridgeObjectRetain();
  return BaseViewList.init(elements:implicitID:canTransition:stableIDScope:traitKeys:traits:)((uint64_t)v16, v4, v5, v6, v7, &v14, &v13, v11);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance BaseViewList.Init()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 93;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 0x73746E656D656C45;
}

uint64_t protocol witness for ViewList.count(style:) in conformance BaseViewList(unint64_t *a1)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v2 = *a1;
  v3 = v1[3];
  v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  if ((v2 & 1) != 0)
  {
    v6 = result;
    result *= v2 >> 1;
    if ((unsigned __int128)(v6 * (__int128)(v2 >> 1)) >> 64 != result >> 63)
      __break(1u);
  }
  return result;
}

uint64_t protocol witness for ViewList.traitKeys.getter in conformance BaseViewList@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 56);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 48);
  *(_BYTE *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

void protocol witness for ViewList.viewIDs.getter in conformance BaseViewList()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[5];
  if (v1 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v1 <= 0x7FFFFFFF)
  {
    v2 = v0[3];
    v3 = v0[4];
    __swift_project_boxed_opaque_existential_1(v0, v2);
    v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
    type metadata accessor for _ViewList_ID._Views<_ViewList_ID.ElementCollection>(0);
    v5 = swift_allocObject();
    *(_DWORD *)(v5 + 24) = 0;
    *(_DWORD *)(v5 + 28) = v1;
    *(_QWORD *)(v5 + 32) = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v5 + 40) = v4;
    *(_BYTE *)(v5 + 16) = 0;
    return;
  }
  __break(1u);
}

uint64_t protocol witness for ViewList.traits.getter in conformance BaseViewList@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 64);
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for ViewList.applyNodes(from:style:list:transform:to:) in conformance BaseViewList(_QWORD *a1, unint64_t *a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD *, unint64_t *, _BYTE *, uint64_t))
{
  return BaseViewList.applyNodes(from:style:list:transform:to:)(a1, a2, a3 | ((HIDWORD(a3) & 1) << 32), a4, a5);
}

uint64_t ViewListSlice.ViewIDsSlice.endIndex.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  result = v2 - v1;
  if (__OFSUB__(v2, v1))
    __break(1u);
  return result;
}

uint64_t ViewListSlice.ViewIDsSlice.subscript.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t result;

  v2 = *(_QWORD *)(v1 + 32);
  v3 = __OFADD__(a1, v2);
  result = a1 + v2;
  if (!v3)
    return (*(uint64_t (**)(uint64_t))(**(_QWORD **)(v1 + 24) + 96))(result);
  __break(1u);
  return result;
}

uint64_t ViewListSlice.ViewIDsSlice.__deallocating_deinit()
{
  return _ViewList_ID.JoinedViews.__deallocating_deinit((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t _ViewList_ID.JoinedViews.__deallocating_deinit(void (*a1)(_QWORD))
{
  uint64_t v1;

  a1(*(_QWORD *)(v1 + 24));
  return swift_deallocClassInstance();
}

void vtable thunk for _ViewList_ID_Views.__allocating_init(isDataDependent:) dispatching to ViewListSlice.ViewIDsSlice.__allocating_init(isDataDependent:)()
{
  specialized vtable thunk for _ViewList_ID_Views.__allocating_init(isDataDependent:) dispatching to ViewListSlice.ViewIDsSlice.__allocating_init(isDataDependent:)();
}

uint64_t sub_234EA63C4()
{
  return swift_retain();
}

void ViewListSlice.traitKeys.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void ViewListSlice.traits.getter(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x24BEE4AF8];
}

uint64_t ViewListSlice.viewIDs.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
  v5 = v0[5];
  v4 = v0[6];
  type metadata accessor for ViewListSlice.ViewIDsSlice();
  result = swift_allocObject();
  if (v3)
  {
    *(_QWORD *)(result + 24) = v3;
    *(_QWORD *)(result + 32) = v5;
    *(_QWORD *)(result + 40) = v4;
    *(_BYTE *)(result + 16) = *(_BYTE *)(v3 + 16);
  }
  else
  {
    swift_deallocPartialClassInstance();
    return 0;
  }
  return result;
}

uint64_t ViewListSlice.init(base:bounds:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;

  result = outlined init with take of ScrollStateRequest(a1, a4);
  *(_QWORD *)(a4 + 40) = a2;
  *(_QWORD *)(a4 + 48) = a3;
  return result;
}

uint64_t ViewListSlice.count(style:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  result = v2 - v1;
  if (__OFSUB__(v2, v1))
    __break(1u);
  return result;
}

_QWORD *ViewListSlice.applyNodes(from:style:list:transform:to:)(_QWORD *result, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  double v13;
  uint64_t v14;
  _QWORD v15[5];
  uint64_t v16;

  v5 = *(_QWORD *)(v4 + 40);
  v6 = __OFADD__(v5, *result);
  v7 = v5 + *result;
  if (v6)
  {
    __break(1u);
  }
  else
  {
    v10 = *a2;
    v16 = v7;
    outlined init with copy of AnyTrackedValue(v4, (uint64_t)v15);
    v11 = v15[4];
    v12 = __swift_project_boxed_opaque_existential_1(v15, v15[3]);
    v14 = v10;
    v13 = MEMORY[0x24BDAC7A8](v12);
    LOBYTE(a4) = (*(uint64_t (**)(uint64_t *, uint64_t *, unint64_t, uint64_t, uint64_t (*)(_QWORD *, uint64_t *), double))(v11 + 48))(&v16, &v14, a3 | ((HIDWORD(a3) & 1) << 32), a4, partial apply for closure #1 in ViewListSlice.applyNodes(from:style:list:transform:to:), v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    return (_QWORD *)(a4 & 1);
  }
  return result;
}

uint64_t ViewListSlice.edit(forID:since:)(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  _QWORD v10[2];

  v4 = a1[1];
  v5 = *a2;
  v6 = v2[3];
  v7 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v6);
  v10[0] = *a1;
  v10[1] = v4;
  v9 = v5;
  return (*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t, uint64_t))(v7 + 56))(v10, &v9, v6, v7);
}

uint64_t ViewListSlice.firstOffset<A>(forID:style:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v5 = v4;
  v9 = *a2;
  v10 = v5[3];
  v11 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v10);
  v16 = v9;
  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 64))(a1, &v16, a3, a4, v10, v11);
  if ((v13 & 1) == 0)
  {
    v14 = v5[5];
    v15 = __OFSUB__(result, v14);
    result -= v14;
    if (v15)
      __break(1u);
  }
  return result;
}

_QWORD *protocol witness for ViewList.applyNodes(from:style:list:transform:to:) in conformance ViewListSlice(_QWORD *a1, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  return ViewListSlice.applyNodes(from:style:list:transform:to:)(a1, a2, a3 | ((HIDWORD(a3) & 1) << 32), a4);
}

uint64_t protocol witness for ViewList.edit(forID:since:) in conformance ViewListSlice(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  _QWORD v10[2];

  v4 = a1[1];
  v5 = *a2;
  v6 = v2[3];
  v7 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v6);
  v10[0] = *a1;
  v10[1] = v4;
  v9 = v5;
  return (*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t, uint64_t))(v7 + 56))(v10, &v9, v6, v7);
}

uint64_t protocol witness for ViewList.firstOffset<A>(forID:style:) in conformance ViewListSlice(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return ViewListSlice.firstOffset<A>(forID:style:)(a1, a2, a3, a4);
}

uint64_t UnaryElements.makeElements(from:inputs:indirectMap:body:)(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t (*v16)(_QWORD *, uint64_t *, _QWORD, uint64_t);
  char *v17;
  uint64_t v18;
  char v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t (*v29)(_QWORD *, uint64_t *, _QWORD, uint64_t);
  uint64_t v30;
  int v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  int v37;

  v12 = *(_QWORD *)(a7 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v17 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*v14)
  {
    v18 = (*v14 - 1) & ~((*v14 - 1) >> 63);
    *a1 = 0;
    a1[1] = 0;
    v19 = 1;
  }
  else
  {
    v20 = *((_DWORD *)v15 + 20);
    v21 = v15[2];
    v22 = *((_DWORD *)v15 + 2);
    v23 = *v15;
    v29 = v16;
    v30 = v23;
    v31 = v22;
    v32 = v21;
    v24 = *(_OWORD *)(v15 + 5);
    v33 = *(_OWORD *)(v15 + 3);
    v34 = v24;
    v35 = *(_OWORD *)(v15 + 7);
    v36 = v15[9];
    v37 = v20;
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v7, a7);
    v25 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    v26 = (v13 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
    v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = *(_OWORD *)(a7 + 16);
    (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v27 + v25, v17, a7);
    *(_QWORD *)(v27 + v26) = a4;
    swift_retain();
    v19 = v29(a1, &v30, partial apply for closure #1 in UnaryElements.makeElements(from:inputs:indirectMap:body:), v27);
    swift_release();
    v18 = (*a2 - 1) & ~((*a2 - 1) >> 63);
  }
  *a2 = v18;
  return v19 & 1;
}

uint64_t closure #1 in UnaryElements.makeElements(from:inputs:indirectMap:body:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t *, uint64_t, uint64_t, uint64_t);
  int v23;
  int v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;

  v6 = a1[2];
  v7 = a1[6];
  v27 = *a1;
  v28 = a1[5];
  v25 = *(_OWORD *)(a1 + 7);
  v26 = *(_OWORD *)(a1 + 3);
  v8 = a1[9];
  v23 = *((_DWORD *)a1 + 20);
  v24 = *((_DWORD *)a1 + 2);
  v9 = (uint64_t *)(a2 + *(int *)(type metadata accessor for UnaryElements(0, a4, a5, a4) + 36));
  v10 = *v9;
  v11 = *((_DWORD *)v9 + 2);
  v12 = v9[2];
  v13 = *((_DWORD *)v9 + 6);
  v14 = *((_DWORD *)v9 + 7);
  v16 = *((_DWORD *)v9 + 8);
  v15 = *((_DWORD *)v9 + 9);
  v17 = v9[5];
  v50 = *v9;
  v51 = v11;
  v52 = v12;
  v53 = v13;
  v54 = v14;
  v55 = v16;
  v56 = v15;
  v57 = v17;
  v31 = a3;
  if (a3)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v18 = swift_retain();
    _GraphInputs.makeReusable(indirectMap:)(v18);
    swift_release();
    v19 = v50;
    v11 = v51;
    v12 = v52;
    v13 = v53;
    v14 = v54;
    v16 = v55;
    v15 = v56;
    v17 = v57;
  }
  else
  {
    v20 = v10;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v19 = v20;
  }
  v41 = v27;
  v42 = v24;
  v43 = v6;
  v44 = v26;
  v45 = v28;
  v46 = v7;
  v47 = v25;
  v48 = v8;
  v49 = v23;
  v32 = v19;
  v33 = v11;
  v34 = v12;
  *(_QWORD *)&v35 = __PAIR64__(v14, v13);
  *((_QWORD *)&v35 + 1) = __PAIR64__(v15, v16);
  v36 = v17;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _GraphInputs.merge(_:ignoringPhase:)((uint64_t)&v32, 0);
  v32 = v41;
  v33 = v42;
  v34 = v43;
  v35 = v44;
  v36 = v45;
  v37 = v46;
  v38 = v47;
  v39 = v48;
  v40 = v49;
  v21 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(a5 + 8);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21(&v32, v31, a4, a5);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t protocol witness for _ViewList_Elements.tryToReuseElement(at:by:at:indirectMap:testOnly:) in conformance UnaryElements<A>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  return specialized UnaryElements.tryToReuseElement(at:by:at:indirectMap:testOnly:)(a2, a4, a5, a6);
}

uint64_t _ViewList_Group.lists.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t _ViewList_Group.lists.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*_ViewList_Group.lists.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void _ViewList_Group.traits.getter(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x24BEE4AF8];
}

uint64_t _ViewList_Group.traitKeys.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v11;
  char v12;
  _OWORD v13[3];
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v2 = *v1;
  v16 = MEMORY[0x24BEE4B08];
  v17 = 0;
  v3 = *(_QWORD *)(v2 + 16);
  result = swift_bridgeObjectRetain();
  v5 = 0;
  v6 = 0;
  if (v3)
    goto LABEL_3;
LABEL_2:
  v6 = v3;
  memset(v13, 0, 44);
  while (1)
  {
    outlined init with take of (key: AnyHashable, value: ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item)?((uint64_t)v13, (uint64_t)&v14, (unint64_t *)&lazy cache variable for type metadata for (list: ViewList, attribute: Attribute<ViewList>)?, (void (*)(uint64_t))type metadata accessor for (list: ViewList, attribute: Attribute<ViewList>));
    if (!v15)
    {
      result = swift_bridgeObjectRelease();
      *(_QWORD *)a1 = v16;
      *(_BYTE *)(a1 + 8) = v5 & 1;
      return result;
    }
    outlined init with take of ScrollStateRequest(&v14, (uint64_t)v13);
    v7 = *((_QWORD *)&v13[1] + 1);
    v8 = *(_QWORD *)&v13[2];
    __swift_project_boxed_opaque_existential_1(v13, *((uint64_t *)&v13[1] + 1));
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v8 + 24))(&v11, v7, v8);
    v9 = v12;
    if (!v11)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_QWORD *)a1 = 0;
      *(_BYTE *)(a1 + 8) = v9;
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    }
    specialized Set.formUnion<A>(_:)(v11);
    v5 = v17 | v9;
    v17 = (v17 | v9) & 1;
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    if (v6 == v3)
      goto LABEL_2;
LABEL_3:
    if (v6 >= *(_QWORD *)(v2 + 16))
      break;
    outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v2 + 32 + 48 * v6++, (uint64_t)v13);
  }
  __break(1u);
  return result;
}

uint64_t _ViewList_Group.viewIDs.getter()
{
  uint64_t *v0;
  unint64_t v1;
  unint64_t v2;
  char v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _OWORD v20[3];
  __int128 v21;
  uint64_t v22;
  unint64_t v23;

  v1 = *v0;
  v23 = MEMORY[0x24BEE4AF8];
  v2 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain();
  v3 = 0;
  v4 = 0;
  while (1)
  {
    if (v4 == v2)
    {
      v4 = v2;
      memset(v20, 0, 44);
    }
    else
    {
      if (v4 >= *(_QWORD *)(v1 + 16))
      {
        __break(1u);
        goto LABEL_22;
      }
      outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v1 + 32 + 48 * v4++, (uint64_t)v20);
    }
    outlined init with take of (key: AnyHashable, value: ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item)?((uint64_t)v20, (uint64_t)&v21, (unint64_t *)&lazy cache variable for type metadata for (list: ViewList, attribute: Attribute<ViewList>)?, (void (*)(uint64_t))type metadata accessor for (list: ViewList, attribute: Attribute<ViewList>));
    if (!v22)
      break;
    outlined init with take of ScrollStateRequest(&v21, (uint64_t)v20);
    v5 = *((_QWORD *)&v20[1] + 1);
    v6 = *(_QWORD *)&v20[2];
    __swift_project_boxed_opaque_existential_1(v20, *((uint64_t *)&v20[1] + 1));
    v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
    if (!v7)
    {
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
      swift_bridgeObjectRelease();
      return 0;
    }
    v8 = v7;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 88);
    v10 = swift_retain();
    v13 = v9(v10, v11, v12);
    swift_release();
    if (v13)
    {
      v14 = swift_retain();
      MEMORY[0x23B7C61A8](v14);
      if (*(_QWORD *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      if ((v3 & 1) != 0)
        v3 = 1;
      else
        v3 = *(_BYTE *)(v8 + 16);
    }
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  result = swift_bridgeObjectRelease();
  v1 = v23;
  if (v23 >> 62)
  {
LABEL_22:
    swift_bridgeObjectRetain();
    v16 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (v16 == 1)
      goto LABEL_23;
LABEL_17:
    if (v16)
    {
      type metadata accessor for _ViewList_ID.JoinedViews();
      v18 = swift_allocObject();
      v19 = swift_bridgeObjectRetain();
      v17 = specialized _ViewList_ID.JoinedViews.init(_:isDataDependent:)(v19, v3 & 1, v18);
      swift_bridgeObjectRelease_n();
      swift_release();
      return v17;
    }
    type metadata accessor for _ViewList_ID._Views<EmptyCollection<_ViewList_ID>>(0);
    v17 = swift_allocObject();
    *(_BYTE *)(v17 + 16) = 0;
LABEL_26:
    swift_bridgeObjectRelease();
    return v17;
  }
  v16 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v16 != 1)
    goto LABEL_17;
LABEL_23:
  if ((v1 & 0xC000000000000001) != 0)
  {
    v17 = MEMORY[0x23B7C6D9C](0, v1);
    goto LABEL_26;
  }
  if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v17 = *(_QWORD *)(v1 + 32);
    swift_retain();
    goto LABEL_26;
  }
  __break(1u);
  return result;
}

uint64_t _ViewList_Group.applyNodes(from:style:list:transform:to:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t *, _QWORD *, uint64_t))
{
  uint64_t *v5;
  uint64_t v9;
  char v10;
  _QWORD v12[10];
  char v13;
  uint64_t v14;

  v9 = *v5;
  v14 = *a2;
  v12[0] = v9;
  v13 = 2;
  swift_bridgeObjectRetain();
  v10 = a5(a1, &v14, v12, a4);
  outlined destroy of _ViewList_Node((uint64_t)v12);
  return v10 & 1;
}

uint64_t _ViewList_Group.edit(forID:since:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  char v18;
  _OWORD v19[3];
  __int128 v20;
  uint64_t v21;

  v4 = *a1;
  v5 = a1[1];
  v6 = *a2;
  v7 = *v3;
  v8 = *(_QWORD *)(*v3 + 16);
  v15 = *v3 + 32;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  if (v8)
    goto LABEL_3;
LABEL_2:
  v10 = v8;
  memset(v19, 0, 44);
  while (1)
  {
    outlined init with take of (key: AnyHashable, value: ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item)?((uint64_t)v19, (uint64_t)&v20, (unint64_t *)&lazy cache variable for type metadata for (list: ViewList, attribute: Attribute<ViewList>)?, (void (*)(uint64_t))type metadata accessor for (list: ViewList, attribute: Attribute<ViewList>));
    if (!v21)
    {
      result = swift_bridgeObjectRelease();
      *a3 = 2;
      return result;
    }
    outlined init with take of ScrollStateRequest(&v20, (uint64_t)v19);
    v11 = *((_QWORD *)&v19[1] + 1);
    v12 = *(_QWORD *)&v19[2];
    __swift_project_boxed_opaque_existential_1(v19, *((uint64_t *)&v19[1] + 1));
    v17[0] = v4;
    v17[1] = v5;
    v16 = v6;
    (*(void (**)(char *__return_ptr, _QWORD *, uint64_t *, uint64_t, uint64_t))(v12 + 56))(&v18, v17, &v16, v11, v12);
    v13 = v18;
    if (v18 != 2)
    {
      swift_bridgeObjectRelease();
      *a3 = v13;
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    }
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    if (v10 == v8)
      goto LABEL_2;
LABEL_3:
    if (v10 >= *(_QWORD *)(v7 + 16))
      break;
    outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v15 + 48 * v10++, (uint64_t)v19);
  }
  __break(1u);
  return result;
}

void _ViewList_Group.Init.value.getter(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t Value;
  unint64_t v9;
  unint64_t v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[28];
  uint64_t v16;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v16 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
    v6 = 0;
    v5 = v16;
    do
    {
      v7 = *(_DWORD *)(v3 + 4 * v6 + 32);
      Value = AGGraphGetValue();
      outlined init with copy of AnyTrackedValue(Value, (uint64_t)&v14);
      *(_DWORD *)&v15[24] = v7;
      v16 = v5;
      v10 = *(_QWORD *)(v5 + 16);
      v9 = *(_QWORD *)(v5 + 24);
      if (v10 >= v9 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
        v5 = v16;
      }
      ++v6;
      *(_QWORD *)(v5 + 16) = v10 + 1;
      v11 = (_OWORD *)(v5 + 48 * v10);
      v12 = v14;
      v13 = *(_OWORD *)v15;
      *(_OWORD *)((char *)v11 + 60) = *(_OWORD *)&v15[12];
      v11[2] = v12;
      v11[3] = v13;
    }
    while (v4 != v6);
    swift_bridgeObjectRelease();
  }
  a1[3] = &type metadata for _ViewList_Group;
  a1[4] = &protocol witness table for _ViewList_Group;
  *a1 = v5;
}

uint64_t _ViewList_Group.Init.description.getter()
{
  return 11176162;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _ViewList_Group.Init()
{
  return 11176162;
}

uint64_t protocol witness for ViewList.applyNodes(from:style:list:transform:to:) in conformance _ViewList_Group(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t *, _QWORD *, uint64_t))
{
  uint64_t *v5;
  uint64_t v9;
  char v10;
  _QWORD v12[10];
  char v13;
  uint64_t v14;

  v9 = *v5;
  v14 = *a2;
  v12[0] = v9;
  v13 = 2;
  swift_bridgeObjectRetain();
  v10 = a5(a1, &v14, v12, a4);
  outlined destroy of _ViewList_Node((uint64_t)v12);
  return v10 & 1;
}

uint64_t protocol witness for ViewList.firstOffset<A>(forID:style:) in conformance _ViewList_Group(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return _ViewList_Group.firstOffset<A>(forID:style:)(a1, a2, a3, a4);
}

uint64_t _ViewList_Section.id.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t _ViewList_Section.id.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*_ViewList_Section.id.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewList_Section.base.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 8);
  return swift_bridgeObjectRetain();
}

uint64_t _ViewList_Section.base.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = v2;
  return result;
}

uint64_t (*_ViewList_Section.base.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewList_Section.traits.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t _ViewList_Section.traits.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = v2;
  return result;
}

uint64_t (*_ViewList_Section.traits.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewList_Section.isHierarchical.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t _ViewList_Section.isHierarchical.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 24) = result;
  return result;
}

uint64_t (*_ViewList_Section.isHierarchical.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewList_Section.content.getter(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5[2];
  unsigned int v6;

  v2 = *(_QWORD *)(v1 + 8);
  if (*(_QWORD *)(v2 + 16) < 2uLL)
  {
    __break(1u);
  }
  else
  {
    v3 = result;
    outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v2 + 80, (uint64_t)v5);
    v4 = v6;
    outlined init with take of ScrollStateRequest(v5, v3);
    return v4;
  }
  return result;
}

uint64_t _ViewList_Section.footer.getter(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5[2];
  unsigned int v6;

  v2 = *(_QWORD *)(v1 + 8);
  if (*(_QWORD *)(v2 + 16) < 3uLL)
  {
    __break(1u);
  }
  else
  {
    v3 = result;
    outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v2 + 128, (uint64_t)v5);
    v4 = v6;
    outlined init with take of ScrollStateRequest(v5, v3);
    return v4;
  }
  return result;
}

uint64_t _ViewList_Section.traitKeys.getter@<X0>(uint64_t a1@<X8>)
{
  return _ViewList_Group.traitKeys.getter(a1);
}

void _ViewList_Section.viewIDs.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4[3];
  _QWORD v5[3];
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 8);
  if (*(_BYTE *)(v0 + 24) == 1)
  {
    if (*(_QWORD *)(v1 + 16))
    {
      outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v1 + 32, (uint64_t)v4);
      outlined init with take of ScrollStateRequest(v4, (uint64_t)v5);
      v2 = v6;
      v3 = v7;
      __swift_project_boxed_opaque_existential_1(v5, v6);
      (*(void (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(_QWORD *)&v4[0] = *(_QWORD *)(v0 + 8);
    _ViewList_Group.viewIDs.getter();
  }
}

uint64_t _ViewList_Section.applyNodes(from:style:list:transform:to:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t *, int *, uint64_t))
{
  int *v5;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;

  v9 = *v5;
  v10 = *((_QWORD *)v5 + 1);
  v11 = *((_QWORD *)v5 + 2);
  v12 = *((_BYTE *)v5 + 24);
  v20 = *a2;
  v15 = v9;
  v16 = v10;
  v17 = v11;
  v18 = v12;
  v19 = 3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13 = a5(a1, &v20, &v15, a4);
  outlined destroy of _ViewList_Node((uint64_t)&v15);
  return v13 & 1;
}

uint64_t _ViewList_Section.Info.id.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t _ViewList_Section.Info.id.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*_ViewList_Section.Info.id.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewList_Section.Info.isHeader.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 4);
}

uint64_t _ViewList_Section.Info.isHeader.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 4) = result;
  return result;
}

uint64_t (*_ViewList_Section.Info.isHeader.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewList_Section.Info.isFooter.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 5);
}

uint64_t _ViewList_Section.Info.isFooter.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 5) = result;
  return result;
}

uint64_t (*_ViewList_Section.Info.isFooter.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewList_Section.edit(forID:since:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8[3];

  v4 = *a2;
  v5 = *(_QWORD *)(v3 + 8);
  v8[1] = a1[1];
  v8[2] = v5;
  v8[0] = *a1;
  v7 = v4;
  return _ViewList_Group.edit(forID:since:)(v8, &v7, a3);
}

uint64_t protocol witness for ViewList.traitKeys.getter in conformance _ViewList_Section@<X0>(uint64_t a1@<X8>)
{
  return _ViewList_Group.traitKeys.getter(a1);
}

uint64_t protocol witness for ViewList.traits.getter in conformance _ViewList_Section@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for ViewList.applyNodes(from:style:list:transform:to:) in conformance _ViewList_Section(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t *, int *, uint64_t))
{
  int *v5;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;

  v9 = *v5;
  v10 = *((_QWORD *)v5 + 1);
  v11 = *((_QWORD *)v5 + 2);
  v12 = *((_BYTE *)v5 + 24);
  v20 = *a2;
  v15 = v9;
  v16 = v10;
  v17 = v11;
  v18 = v12;
  v19 = 3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13 = a5(a1, &v20, &v15, a4);
  outlined destroy of _ViewList_Node((uint64_t)&v15);
  return v13 & 1;
}

uint64_t protocol witness for ViewList.edit(forID:since:) in conformance _ViewList_Section@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8[3];

  v4 = *a2;
  v5 = *(_QWORD *)(v3 + 8);
  v8[1] = a1[1];
  v8[2] = v5;
  v8[0] = *a1;
  v7 = v4;
  return _ViewList_Group.edit(forID:since:)(v8, &v7, a3);
}

uint64_t protocol witness for ViewList.firstOffset<A>(forID:style:) in conformance _ViewList_Section(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  return _ViewList_Section.firstOffset<A>(forID:style:)(a1, a2, a3, a4);
}

uint64_t MergedElements.count.getter(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t result;
  __int128 v14[2];
  char v15;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[72];

  v4 = a4 >> 1;
  if (a4 >> 1 == a3)
  {
    return 0;
  }
  else
  {
    v6 = a3;
    swift_unknownObjectRetain();
    v5 = 0;
    v8 = a2 + 72 * v6;
    while (v6 < v4)
    {
      outlined init with copy of _ViewListOutputs(v8, (uint64_t)v19);
      outlined init with copy of _ViewListOutputs.Views((uint64_t)v19, (uint64_t)v14);
      if ((v15 & 1) != 0)
        goto LABEL_12;
      outlined init with take of ScrollStateRequest(v14, (uint64_t)v16);
      v9 = v17;
      v10 = v18;
      __swift_project_boxed_opaque_existential_1(v16, v17);
      v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
      v12 = __OFADD__(v5, v11);
      v5 += v11;
      if (v12)
        goto LABEL_11;
      ++v6;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
      outlined destroy of _ViewListOutputs((uint64_t)v19);
      v8 += 72;
      if (v4 == v6)
      {
        swift_unknownObjectRelease();
        return v5;
      }
    }
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    outlined destroy of _ViewListOutputs.Views((uint64_t)v14);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t MergedElements.makeElements(from:inputs:indirectMap:body:)(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unsigned int *v43;
  unint64_t v44;
  uint64_t result;
  _QWORD *v47;
  int v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  int v67;
  _QWORD v68[2];
  _QWORD v69[3];
  uint64_t v70;
  uint64_t v71;
  _BYTE v72[80];

  v10 = a1;
  v11 = a9;
  v12 = a3[6];
  v13 = a10 >> 1;
  v14 = MEMORY[0x24BEE4AF8];
  if (a10 >> 1 == a9)
  {
    v15 = 1;
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_17:
    v28 = v16[2];
    if (v28 == 1)
    {
      v29 = v16[4];
      v30 = v16[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *v10 = v29;
      v10[1] = v30;
    }
    else if (v28)
    {
      v59 = v12;
      *(_QWORD *)&v60 = v14;
      v47 = v10;
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28, 0);
      v31 = v60;
      v32 = v16 + 5;
      do
      {
        v33 = *((_QWORD *)v32 - 1);
        v34 = *v32;
        *(_QWORD *)&v60 = v31;
        v35 = *(_QWORD *)(v31 + 16);
        v36 = *(_QWORD *)(v31 + 24);
        swift_bridgeObjectRetain();
        if (v35 >= v36 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v35 + 1, 1);
          v31 = v60;
        }
        *(_QWORD *)(v31 + 16) = v35 + 1;
        v37 = v31 + 16 * v35;
        *(_QWORD *)(v37 + 32) = v33;
        *(_DWORD *)(v37 + 40) = v34;
        v32 += 4;
        --v28;
      }
      while (v28);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v60 = v31;
      v38 = MEMORY[0x24BEE4AF8];
      *((_QWORD *)&v60 + 1) = MEMORY[0x24BEE4AF8];
      LODWORD(v61) = 0;
      v39 = *(_QWORD *)(v59 + 16);
      if (v39)
      {
        swift_bridgeObjectRetain();
        v40 = v59 + 40;
        v41 = v47;
        do
        {
          (*(void (**)(__int128 *, ValueMetadata *, _UNKNOWN **))(*(_QWORD *)v40 + 16))(&v60, &type metadata for MultiPreferenceCombinerVisitor, &protocol witness table for MultiPreferenceCombinerVisitor);
          v40 += 16;
          --v39;
        }
        while (v39);
        swift_bridgeObjectRelease();
        v42 = v61;
        v38 = *((_QWORD *)&v60 + 1);
      }
      else
      {
        v42 = 0;
        v41 = v10;
      }
      v43 = (unsigned int *)MEMORY[0x24BE096C0];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v44 = v42 | ((unint64_t)*v43 << 32);
      *v41 = v38;
      v41[1] = v44;
    }
    else
    {
      swift_bridgeObjectRelease();
      *v10 = 0;
      v10[1] = 0;
    }
    return v15;
  }
  else
  {
    v54 = *a3;
    v53 = *((_DWORD *)a3 + 2);
    v52 = a3[2];
    v51 = *(_OWORD *)(a3 + 3);
    v50 = a3[5];
    v49 = *(_OWORD *)(a3 + 7);
    v18 = a3[9];
    v48 = *((_DWORD *)a3 + 20);
    swift_unknownObjectRetain();
    v19 = a8 + 72 * a9;
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    while (v11 < v13)
    {
      outlined init with copy of _ViewListOutputs(v19, (uint64_t)v72);
      outlined init with copy of _ViewListOutputs.Views((uint64_t)v72, (uint64_t)&v60);
      outlined destroy of _ViewListOutputs((uint64_t)v72);
      if ((v63 & 1) != 0)
        goto LABEL_33;
      outlined init with take of ScrollStateRequest(&v60, (uint64_t)v69);
      v20 = v70;
      v21 = v71;
      __swift_project_boxed_opaque_existential_1(v69, v70);
      *(_QWORD *)&v60 = v54;
      DWORD2(v60) = v53;
      v61 = v52;
      v62 = v51;
      v63 = v50;
      v64 = v12;
      v65 = v49;
      v66 = v18;
      v67 = v48;
      v22 = (*(uint64_t (**)(_QWORD *, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 16))(v68, a2, &v60, a4, a5, a6, v20, v21);
      v23 = v68[0];
      if (v68[0])
      {
        v24 = v68[1];
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
        v26 = v16[2];
        v25 = v16[3];
        if (v26 >= v25 >> 1)
          v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v26 + 1, 1, v16);
        v16[2] = v26 + 1;
        v27 = &v16[2 * v26];
        v27[4] = v23;
        v27[5] = v24;
        swift_bridgeObjectRelease();
      }
      if ((v22 & 1) == 0)
      {
        swift_unknownObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v69);
        v15 = 0;
        goto LABEL_16;
      }
      ++v11;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v69);
      v19 += 72;
      if (v13 == v11)
      {
        swift_unknownObjectRelease();
        v15 = 1;
LABEL_16:
        v10 = a1;
        v14 = MEMORY[0x24BEE4AF8];
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_33:
    outlined destroy of _ViewListOutputs.Views((uint64_t)&v60);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t MergedElements.tryToReuseElement(at:by:at:indirectMap:testOnly:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v24;
  _BYTE v25[40];
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  outlined init with copy of AnyTrackedValue(a2, (uint64_t)&v26);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for _ViewList_Elements);
  if (!swift_dynamicCast())
  {
    swift_beginAccess();
    if (static ReuseTrace.recorder)
      AGGraphAddTraceEvent();
    goto LABEL_12;
  }
  v24 = a4;
  v15 = v29[1];
  v17 = v29[2];
  v16 = v30;
  MergedElements.findElement(at:)(a1, a7, a8, a9, (uint64_t)&v26);
  if (!v27)
  {
    outlined destroy of (_ViewList_Elements, Int)?((uint64_t)&v26);
LABEL_9:
    swift_beginAccess();
    if (static ReuseTrace.recorder)
      AGGraphAddTraceEvent();
    swift_unknownObjectRelease();
LABEL_12:
    v22 = 0;
    return v22 & 1;
  }
  v18 = v28;
  outlined init with take of ScrollStateRequest(&v26, (uint64_t)v29);
  MergedElements.findElement(at:)(a3, v15, v17, v16, (uint64_t)&v26);
  if (!v27)
  {
    outlined destroy of (_ViewList_Elements, Int)?((uint64_t)&v26);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    goto LABEL_9;
  }
  v19 = v28;
  outlined init with take of ScrollStateRequest(&v26, (uint64_t)v25);
  v20 = v30;
  v21 = v31;
  __swift_project_boxed_opaque_existential_1(v29, v30);
  v22 = (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v21 + 24))(v18, v25, v19, v24, a5 & 1, v20, v21);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  return v22 & 1;
}

uint64_t MergedElements.findElement(at:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t a4@<X4>, uint64_t a5@<X8>)
{
  int64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16[2];
  char v17;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[80];

  v6 = a4 >> 1;
  if (a4 >> 1 == a3)
  {
LABEL_12:
    *(_OWORD *)(a5 + 16) = 0u;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)a5 = 0u;
  }
  else
  {
    v7 = a3;
    v9 = result;
    swift_unknownObjectRetain();
    v10 = 0;
    v11 = a2 + 72 * v7;
    while (v7 < v6)
    {
      outlined init with copy of _ViewListOutputs(v11, (uint64_t)v21);
      outlined init with copy of _ViewListOutputs.Views((uint64_t)v21, (uint64_t)v16);
      outlined destroy of _ViewListOutputs((uint64_t)v21);
      if ((v17 & 1) != 0)
        goto LABEL_17;
      outlined init with take of ScrollStateRequest(v16, (uint64_t)v18);
      v12 = v19;
      v13 = v20;
      __swift_project_boxed_opaque_existential_1(v18, v19);
      v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
      v15 = v10 + v14;
      if (__OFADD__(v10, v14))
        goto LABEL_15;
      if (v15 < v10)
        goto LABEL_16;
      if (v9 >= v10 && v15 > v9)
      {
        swift_unknownObjectRelease();
        outlined init with copy of AnyTrackedValue((uint64_t)v18, a5);
        *(_QWORD *)(a5 + 40) = v9 - v10;
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
      }
      ++v7;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
      v11 += 72;
      v10 = v15;
      if (v6 == v7)
      {
        result = swift_unknownObjectRelease();
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    outlined destroy of _ViewListOutputs.Views((uint64_t)v16);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for _ViewList_Elements.count.getter in conformance MergedElements()
{
  uint64_t v0;

  return MergedElements.count.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t protocol witness for _ViewList_Elements.makeElements(from:inputs:indirectMap:body:) in conformance MergedElements(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  return MergedElements.makeElements(from:inputs:indirectMap:body:)(a1, a2, a3, a4, a5, a6, *(_QWORD *)v6, *(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24)) & 1;
}

uint64_t protocol witness for _ViewList_Elements.tryToReuseElement(at:by:at:indirectMap:testOnly:) in conformance MergedElements(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;

  return MergedElements.tryToReuseElement(at:by:at:indirectMap:testOnly:)(a1, a2, a3, a4, a5, *(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24)) & 1;
}

uint64_t ModifiedElements.count.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

uint64_t ModifiedElements.makeElements(from:inputs:indirectMap:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  char v19;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _OWORD v22[5];
  int v23;
  _OWORD v24[3];

  v14 = *(_OWORD *)(a3 + 48);
  v22[2] = *(_OWORD *)(a3 + 32);
  v22[3] = v14;
  v22[4] = *(_OWORD *)(a3 + 64);
  v23 = *(_DWORD *)(a3 + 80);
  v15 = *(_OWORD *)(a3 + 16);
  v22[0] = *(_OWORD *)a3;
  v22[1] = v15;
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a5;
  *(_QWORD *)(v16 + 24) = a6;
  v17 = *(_QWORD *)(v7 + 40);
  v18 = *(_OWORD *)(v7 + 64);
  v24[0] = *(_OWORD *)(v7 + 48);
  v24[1] = v18;
  v24[2] = *(_OWORD *)(v7 + 80);
  v19 = closure #1 in ModifiedElements.makeElements(from:inputs:indirectMap:body:)(a1, (uint64_t)partial apply for thunk for @callee_guaranteed (@guaranteed NSTextRange?, @unowned CGRect, @unowned CGFloat, @guaranteed NSTextContainer) -> (@unowned Bool), v16, v7, a2, (uint64_t)v22, a4, (uint64_t)v24, v17, *(_QWORD *)(a7 + 16), *(_QWORD *)(a7 + 24));
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
    return v19 & 1;
  __break(1u);
  return result;
}

uint64_t closure #1 in ModifiedElements.makeElements(from:inputs:indirectMap:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  char v19;
  _BYTE v24[16];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD v32[5];
  int v33;
  _QWORD v34[3];
  uint64_t v35;
  uint64_t v36;

  outlined init with copy of AnyTrackedValue(a4, (uint64_t)v34);
  v15 = v35;
  v16 = v36;
  __swift_project_boxed_opaque_existential_1(v34, v35);
  v17 = *(_OWORD *)(a6 + 48);
  v32[2] = *(_OWORD *)(a6 + 32);
  v32[3] = v17;
  v32[4] = *(_OWORD *)(a6 + 64);
  v33 = *(_DWORD *)(a6 + 80);
  v18 = *(_OWORD *)(a6 + 16);
  v32[0] = *(_OWORD *)a6;
  v32[1] = v18;
  v25 = a10;
  v26 = a11;
  v27 = a2;
  v28 = a3;
  v29 = a8;
  v30 = a7;
  v31 = a9;
  v19 = (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t), _BYTE *, uint64_t, uint64_t))(v16 + 16))(a1, a5, v32, a7, partial apply for closure #1 in closure #1 in ModifiedElements.makeElements(from:inputs:indirectMap:body:), v24, v15, v16);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
  return v19 & 1;
}

uint64_t closure #1 in closure #1 in ModifiedElements.makeElements(from:inputs:indirectMap:body:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t *, uint64_t (*)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>), uint64_t), uint64_t a6, _OWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  char v22;
  uint64_t v25;
  int v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  int v32;

  v16 = *((_DWORD *)a2 + 2);
  v17 = a2[2];
  v18 = *((_DWORD *)a2 + 20);
  v25 = *a2;
  v26 = v16;
  v27 = v17;
  v19 = *(_OWORD *)(a2 + 5);
  v28 = *(_OWORD *)(a2 + 3);
  v29 = v19;
  v30 = *(_OWORD *)(a2 + 7);
  v31 = a2[9];
  v32 = v18;
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = a10;
  *(_QWORD *)(v20 + 24) = a11;
  v21 = a7[1];
  *(_OWORD *)(v20 + 32) = *a7;
  *(_OWORD *)(v20 + 48) = v21;
  *(_OWORD *)(v20 + 64) = a7[2];
  *(_QWORD *)(v20 + 80) = a8;
  *(_QWORD *)(v20 + 88) = a9;
  *(_QWORD *)(v20 + 96) = a3;
  *(_QWORD *)(v20 + 104) = a4;
  outlined retain of _GraphInputs((uint64_t)a7);
  swift_retain();
  swift_retain();
  v22 = a5(a1, &v25, partial apply for closure #1 in closure #1 in closure #1 in ModifiedElements.makeElements(from:inputs:indirectMap:body:), v20);
  swift_release();
  return v22 & 1;
}

uint64_t closure #1 in closure #1 in closure #1 in ModifiedElements.makeElements(from:inputs:indirectMap:body:)@<X0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  uint64_t Attribute;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  int ShouldRecordTree;
  void (*v29)(int *, uint64_t *, uint64_t (*)(uint64_t, uint64_t *), uint64_t);
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  int v45;
  int v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  int v87;
  __int128 v88;
  _OWORD v89[2];
  uint64_t v90;

  v90 = *MEMORY[0x24BDAC8D0];
  v8 = *a1;
  v9 = *((_DWORD *)a1 + 2);
  v10 = a1[2];
  v12 = a1[5];
  v11 = a1[6];
  v42 = *(_OWORD *)(a1 + 7);
  v44 = *(_OWORD *)(a1 + 3);
  v13 = a1[9];
  v14 = *((_DWORD *)a1 + 20);
  v15 = a2[1];
  v88 = *a2;
  v89[0] = v15;
  v89[1] = a2[2];
  if (a3)
  {
    outlined retain of _GraphInputs((uint64_t)a2);
    v16 = swift_retain();
    _GraphInputs.makeReusable(indirectMap:)(v16);
    swift_release();
  }
  else
  {
    outlined retain of _GraphInputs((uint64_t)a2);
  }
  v79 = v8;
  v81 = v10;
  v82 = v44;
  v83 = v12;
  v84 = v11;
  v85 = v42;
  v86 = v13;
  v80 = v9;
  v87 = v14;
  v66 = v88;
  v67 = DWORD2(v88);
  v68 = *(_QWORD *)&v89[0];
  v69 = *(_OWORD *)((char *)v89 + 8);
  v70 = *((_QWORD *)&v89[1] + 1);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _GraphInputs.merge(_:ignoringPhase:)((uint64_t)&v66, 0);
  Attribute = AGWeakAttributeGetAttribute();
  if ((_DWORD)Attribute == *MEMORY[0x24BE096C0])
  {
    *(_QWORD *)a7 = MEMORY[0x24BEE4AF8];
    *(_DWORD *)(a7 + 8) = 0;
    *(_DWORD *)(a7 + 12) = Attribute;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    v49 = Attribute;
    if (a3)
    {
      type metadata accessor for Attribute();
      v19 = swift_retain();
      Attribute.makeReusable(indirectMap:)(v19);
      swift_release();
      Attribute = v49;
    }
    _GraphValue.init(_:)(Attribute, &v48);
    v45 = v48;
    v20 = v79;
    v21 = v81;
    v35 = v80;
    v36 = DWORD1(v82);
    v37 = v82;
    v38 = DWORD2(v82);
    v22 = v83;
    v23 = v84;
    v24 = HIDWORD(v82);
    v25 = DWORD1(v85);
    v33 = DWORD2(v85);
    v34 = v85;
    v26 = HIDWORD(v85);
    v31 = HIDWORD(v86);
    v32 = v86;
    v30 = v87;
    v27 = swift_allocObject();
    *(_QWORD *)(v27 + 16) = a4;
    *(_QWORD *)(v27 + 24) = a5;
    v43 = v27;
    ShouldRecordTree = AGSubgraphShouldRecordTree();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    if (ShouldRecordTree)
      AGSubgraphBeginTreeElement();
    v66 = v20;
    v67 = v35;
    v68 = v21;
    *(_QWORD *)&v69 = __PAIR64__(v36, v37);
    v70 = v22;
    v71 = v23;
    HIDWORD(v69) = v24;
    v72 = v34;
    v73 = v25;
    v74 = v33;
    v75 = v26;
    v76 = v32;
    v77 = v31;
    v78 = v30;
    v47 = v45;
    v50 = v20;
    v51 = v35;
    v52 = v21;
    v53 = v37;
    v54 = v36;
    v55 = 0;
    v56 = v24;
    v57 = v22;
    v58 = v23;
    v59 = v34;
    v60 = v25;
    v61 = v33;
    v62 = v26;
    v63 = v32;
    v64 = v31;
    v65 = v30;
    v29 = *(void (**)(int *, uint64_t *, uint64_t (*)(uint64_t, uint64_t *), uint64_t))(a6 + 24);
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v29(&v47, &v50, partial apply for closure #1 in DynamicLayoutViewAdaptor.MakeTransition.visit<A>(_:), v43);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    DWORD2(v69) = v38;
    if ((ShouldRecordTree & 1) != 0)
    {
      specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a7, (uint64_t)&v66);
      AGSubgraphEndTreeElement();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_release_n();
      swift_release_n();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
}

uint64_t ModifiedElements.tryToReuseElement(at:by:at:indirectMap:testOnly:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int Attribute;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t DynamicType;
  unsigned int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  _OWORD v47[3];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _OWORD v51[3];
  __int128 v52;
  _BYTE v53[32];
  uint64_t v54;

  v7 = v6;
  v54 = *MEMORY[0x24BDAC8D0];
  outlined init with copy of AnyTrackedValue((uint64_t)a2, (uint64_t)&v41);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for _ViewList_Elements);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v51[2] = v47[2];
    v52 = v48;
    *(_OWORD *)v53 = v49;
    *(_OWORD *)&v53[16] = v50;
    v51[0] = v47[0];
    v51[1] = v47[1];
    Attribute = AGWeakAttributeGetAttribute();
    v15 = *MEMORY[0x24BE096C0];
    if (Attribute != *MEMORY[0x24BE096C0])
    {
      v16 = Attribute;
      v17 = AGWeakAttributeGetAttribute();
      if ((_DWORD)v17 != v15 && (Attribute.tryToReuse(by:indirectMap:testOnly:)(v17, a4, a5 & 1, v16) & 1) != 0)
      {
        v40 = *(_QWORD *)(v7 + 64);
        v32 = *(_QWORD *)(v7 + 76);
        v30 = *(_DWORD *)(v7 + 84);
        v38 = *(_QWORD *)(v7 + 88);
        v39 = *(_QWORD *)(v7 + 48);
        v35 = DWORD2(v52);
        v36 = *(_DWORD *)(v7 + 56);
        v18 = *(_QWORD *)v53;
        v33 = *(_DWORD *)&v53[8];
        v34 = *(_DWORD *)(v7 + 72);
        v31 = *(_QWORD *)&v53[12];
        v29 = *(_DWORD *)&v53[20];
        v19 = *(_QWORD *)&v53[24];
        v37 = v52;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        if ((specialized Attribute.tryToReuse(by:indirectMap:testOnly:)(v35, a4, a5 & 1, v36) & 1) != 0
          && (specialized Attribute.tryToReuse(by:indirectMap:testOnly:)(v33, a4, a5 & 1, v34) & 1) != 0
          && (swift_beginAccess(),
              v28 = *(_DWORD *)(v40 + 16),
              swift_beginAccess(),
              (specialized Attribute.tryToReuse(by:indirectMap:testOnly:)(*(unsigned int *)(v18 + 16), a4, a5 & 1, v28) & 1) != 0)
          && (specialized Attribute.tryToReuse(by:indirectMap:testOnly:)(v31, a4, a5 & 1, v32) & 1) != 0)
        {
          *(_QWORD *)&v47[0] = v39;
          DWORD2(v47[0]) = v36;
          *(_QWORD *)&v47[1] = v40;
          DWORD2(v47[1]) = v34;
          *(_QWORD *)((char *)&v47[1] + 12) = v32;
          DWORD1(v47[2]) = v30;
          *((_QWORD *)&v47[2] + 1) = v38;
          *(_QWORD *)&v41 = v37;
          DWORD2(v41) = v35;
          v42 = v18;
          v43 = v33;
          v44 = v31;
          v45 = v29;
          v46 = v19;
          v20 = _GraphInputs.reuseCustomInputs(by:indirectMap:testOnly:)(&v41, a4, a5 & 1);
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          if ((v20 & 1) != 0)
          {
            v21 = *(_QWORD *)(v7 + 24);
            v22 = *(_QWORD *)(v7 + 32);
            __swift_project_boxed_opaque_existential_1((_QWORD *)v7, v21);
            v23 = (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v22 + 24))(a1, v51, a3, a4, a5 & 1, v21, v22);
            (*(void (**)(_OWORD *, uint64_t))(*(_QWORD *)(a6 - 8) + 8))(v51, a6);
            return v23 & 1;
          }
        }
        else
        {
          specialized static Log.graphReuse(_:)();
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
        }
      }
    }
    (*(void (**)(_OWORD *, uint64_t))(*(_QWORD *)(a6 - 8) + 8))(v51, a6);
  }
  else
  {
    v24 = type metadata accessor for Optional();
    memset(v47, 0, sizeof(v47));
    v48 = 0u;
    v49 = 0u;
    v50 = 0u;
    (*(void (**)(_OWORD *, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v47, v24);
  }
  v25 = type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  DynamicType = swift_getDynamicType();
  swift_beginAccess();
  if (static ReuseTrace.recorder)
  {
    *(_QWORD *)&v47[0] = v25;
    *((_QWORD *)&v47[0] + 1) = DynamicType;
    AGGraphAddTraceEvent();
  }
  v23 = 0;
  return v23 & 1;
}

uint64_t protocol witness for _ViewList_Elements.retain() in conformance ModifiedElements<A>()
{
  return ModifiedElements.retain()();
}

uint64_t ModifiedViewList.traitKeys.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
}

uint64_t ModifiedElements.retain()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
}

uint64_t ModifiedViewList.traits.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 40))(v1, v2);
}

uint64_t ModifiedViewList.count(style:)(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = *a1;
  v3 = v1[3];
  v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  v6 = v2;
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 + 8))(&v6, v3, v4);
}

uint64_t ModifiedViewList.estimatedCount(style:)(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = *a1;
  v3 = v1[3];
  v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  v6 = v2;
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 + 16))(&v6, v3, v4);
}

uint64_t ModifiedViewList.applyNodes(from:style:list:transform:to:)(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v25[2];
  int v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;

  v8 = (_QWORD *)v7;
  v13 = *a2;
  v14 = *(_QWORD *)(v7 + 48);
  v15 = *(_DWORD *)(v7 + 56);
  v16 = *(_QWORD *)(v7 + 64);
  v17 = *(_QWORD *)(v7 + 88);
  v18 = *(_QWORD *)(a7 + 16);
  v19 = *(_QWORD *)(a7 + 24);
  v25[0] = *(_QWORD *)(v7 + 40);
  v25[1] = v14;
  v26 = v15;
  v27 = v16;
  v28 = *(_OWORD *)(v7 + 72);
  v29 = v17;
  v20 = type metadata accessor for ModifiedViewList.Transform(0, v18, v19, a4);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  _ViewList_SublistTransform.push<A>(_:)((uint64_t)v25, v20, (uint64_t)&protocol witness table for ModifiedViewList<A>.Transform);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v21 = v8[3];
  v22 = v8[4];
  __swift_project_boxed_opaque_existential_1(v8, v21);
  v25[0] = v13;
  LOBYTE(v13) = (*(uint64_t (**)(uint64_t, _QWORD *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 48))(a1, v25, a3 | ((HIDWORD(a3) & 1) << 32), a4, a5, a6, v21, v22);
  _ViewList_SublistTransform.pop()();
  return v13 & 1;
}

uint64_t ModifiedViewList.ListModifier.apply(to:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17[2];

  v2 = v1;
  v4 = *v1;
  v5 = v1[2];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 80))(a1);
  outlined init with take of ScrollStateRequest((__int128 *)a1, (uint64_t)v17);
  v6 = v2[4];
  v7 = *((_DWORD *)v2 + 10);
  v8 = v2[6];
  v9 = v2[9];
  v11 = type metadata accessor for ModifiedViewList(0, *(_QWORD *)(v4 + 96), *(_QWORD *)(v4 + 104), v10);
  v12 = swift_allocObject();
  v13 = v2[3];
  v14 = v2[7];
  v15 = v2[8];
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)(a1 + 32) = &protocol witness table for ModifiedViewList<A>;
  *(_QWORD *)a1 = v12;
  outlined init with take of ScrollStateRequest(v17, v12 + 16);
  *(_QWORD *)(v12 + 56) = v13;
  *(_QWORD *)(v12 + 64) = v6;
  *(_DWORD *)(v12 + 72) = v7;
  *(_QWORD *)(v12 + 80) = v8;
  *(_QWORD *)(v12 + 88) = v14;
  *(_QWORD *)(v12 + 96) = v15;
  *(_QWORD *)(v12 + 104) = v9;
  swift_retain();
  swift_retain();
  return swift_bridgeObjectRetain();
}

uint64_t ModifiedViewList.ListModifier.__ivar_destroyer()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t ModifiedViewList.ListModifier.deinit()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v0;
}

uint64_t ModifiedViewList.ListModifier.__deallocating_deinit()
{
  ModifiedViewList.ListModifier.deinit();
  return swift_deallocClassInstance();
}

double ModifiedViewList.Transform.apply(sublist:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;
  __int128 v14[2];

  v5 = *(_QWORD *)(v2 + 8);
  v6 = *(_DWORD *)(v2 + 16);
  v7 = *(_QWORD *)(v2 + 24);
  v8 = *(_QWORD *)(v2 + 48);
  v9 = (uint64_t)(a1 + 4);
  outlined init with copy of AnyTrackedValue((uint64_t)(a1 + 4), (uint64_t)v14);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1(v9);
  a1[7] = type metadata accessor for ModifiedElements(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), v10);
  a1[8] = &protocol witness table for ModifiedElements<A>;
  v11 = swift_allocObject();
  a1[4] = v11;
  outlined init with take of ScrollStateRequest(v14, v11 + 16);
  *(_QWORD *)(v11 + 56) = *(_QWORD *)v2;
  *(_QWORD *)(v11 + 64) = v5;
  *(_DWORD *)(v11 + 72) = v6;
  *(_QWORD *)(v11 + 80) = v7;
  result = *(double *)(v2 + 32);
  v13 = *(_QWORD *)(v2 + 40);
  *(double *)(v11 + 88) = result;
  *(_QWORD *)(v11 + 96) = v13;
  *(_QWORD *)(v11 + 104) = v8;
  return result;
}

uint64_t ModifiedViewList.firstOffset<A>(forID:style:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v9 = *a2;
  v10 = v5[3];
  v11 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v10);
  v13 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 64))(a1, &v13, a4, a5, v10, v11);
}

uint64_t protocol witness for ViewList.applyNodes(from:style:list:transform:to:) in conformance ModifiedViewList<A>(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return ModifiedViewList.applyNodes(from:style:list:transform:to:)(a1, a2, a3 | ((HIDWORD(a3) & 1) << 32), a4, a5, a6, a7);
}

uint64_t protocol witness for ViewList.firstOffset<A>(forID:style:) in conformance ModifiedViewList<A>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return ModifiedViewList.firstOffset<A>(forID:style:)(a1, a2, a5, a3, a4);
}

uint64_t TypedUnaryViewGenerator.makeView(inputs:indirectMap:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  int ShouldRecordTree;
  char v18;
  void (*v19)(int *, uint64_t *, uint64_t, uint64_t);
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v9 = *a1;
  v22 = *((_DWORD *)a1 + 2);
  v10 = a1[2];
  v11 = *((_DWORD *)a1 + 6);
  v12 = *((_DWORD *)a1 + 7);
  v30 = *((_DWORD *)a1 + 9);
  v31 = *((_DWORD *)a1 + 8);
  v13 = a1[5];
  v14 = a1[6];
  v28 = *((_DWORD *)a1 + 15);
  v29 = *((_DWORD *)a1 + 14);
  v26 = *((_DWORD *)a1 + 17);
  v27 = *((_DWORD *)a1 + 16);
  v24 = *((_DWORD *)a1 + 19);
  v25 = *((_DWORD *)a1 + 18);
  v23 = *((_DWORD *)a1 + 20);
  result = AGWeakAttributeGetAttribute();
  if ((_DWORD)result == *MEMORY[0x24BE096C0])
  {
    *(_QWORD *)a5 = MEMORY[0x24BEE4AF8];
    *(_DWORD *)(a5 + 8) = 0;
    *(_DWORD *)(a5 + 12) = result;
  }
  else
  {
    v20 = a4;
    v34 = result;
    if (a2)
    {
      type metadata accessor for Attribute();
      v16 = swift_retain();
      Attribute.makeReusable(indirectMap:)(v16);
      swift_release();
      result = v34;
    }
    _GraphValue.init(_:)(result, &v33);
    v21 = v33;
    ShouldRecordTree = AGSubgraphShouldRecordTree();
    v18 = ShouldRecordTree;
    if (ShouldRecordTree)
      AGSubgraphBeginTreeElement();
    v51 = v9;
    v52 = v22;
    v53 = v10;
    v54 = v11;
    v55 = v12;
    v58 = v13;
    v59 = v14;
    v57 = v30;
    v60 = v29;
    v61 = v28;
    v62 = v27;
    v63 = v26;
    v64 = v25;
    v65 = v24;
    v66 = v23;
    v32 = v21;
    v35 = v9;
    v36 = v22;
    v37 = v10;
    v38 = v11;
    v39 = v12;
    v40 = 0;
    v41 = v30;
    v42 = v13;
    v43 = v14;
    v44 = v29;
    v45 = v28;
    v46 = v27;
    v47 = v26;
    v48 = v25;
    v49 = v24;
    v50 = v23;
    v19 = *(void (**)(int *, uint64_t *, uint64_t, uint64_t))(v20 + 24);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v19(&v32, &v35, a3, v20);
    v56 = v31;
    if ((v18 & 1) != 0)
    {
      specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a5, (uint64_t)&v51);
      AGSubgraphEndTreeElement();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t TypedUnaryViewGenerator.tryToReuse(by:indirectMap:testOnly:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t Attribute;
  int v6;
  unsigned int v7;

  Attribute = AGWeakAttributeGetAttribute();
  v6 = *MEMORY[0x24BE096C0];
  if ((_DWORD)Attribute != *MEMORY[0x24BE096C0])
  {
    v7 = Attribute;
    Attribute = AGWeakAttributeGetAttribute();
    if ((_DWORD)Attribute != v6)
      return Attribute.tryToReuse(by:indirectMap:testOnly:)(Attribute, a2, a3 & 1, v7);
  }
  MEMORY[0x24BDAC7A8](Attribute);
  specialized static Log.graphReuse(_:)(partial apply for implicit closure #1 in TypedUnaryViewGenerator.tryToReuse(by:indirectMap:testOnly:));
  return 0;
}

uint64_t implicit closure #1 in TypedUnaryViewGenerator.tryToReuse(by:indirectMap:testOnly:)()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;

  _StringGuts.grow(_:)(38);
  v0._object = (void *)0x80000002352E4820;
  v0._countAndFlagsBits = 0xD000000000000024;
  String.append(_:)(v0);
  v1._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t protocol witness for UnaryViewGenerator.makeView(inputs:indirectMap:) in conformance TypedUnaryViewGenerator<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return TypedUnaryViewGenerator.makeView(inputs:indirectMap:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

uint64_t protocol witness for UnaryViewGenerator.tryToReuse(by:indirectMap:testOnly:) in conformance TypedUnaryViewGenerator<A>(uint64_t *a1, uint64_t a2, char a3)
{
  return TypedUnaryViewGenerator.tryToReuse(by:indirectMap:testOnly:)(*a1, a2, a3);
}

uint64_t BodyUnaryViewGenerator.makeView(inputs:indirectMap:)(uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t *))
{
  int v3;
  uint64_t v4;
  int v5;
  __int128 v6;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  int v15;

  v3 = *((_DWORD *)a1 + 2);
  v4 = a1[2];
  v5 = *((_DWORD *)a1 + 20);
  v8 = *a1;
  v9 = v3;
  v10 = v4;
  v6 = *(_OWORD *)(a1 + 5);
  v11 = *(_OWORD *)(a1 + 3);
  v12 = v6;
  v13 = *(_OWORD *)(a1 + 7);
  v14 = a1[9];
  v15 = v5;
  return a3(&v8);
}

uint64_t implicit closure #1 in BodyUnaryViewGenerator.tryToReuse(by:indirectMap:testOnly:)()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;

  _StringGuts.grow(_:)(34);
  v0._countAndFlagsBits = 0x6166206573756552;
  v0._object = (void *)0xEE00203A64656C69;
  String.append(_:)(v0);
  v1._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._object = (void *)0x80000002352E47E0;
  v2._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v2);
  return 0;
}

uint64_t protocol witness for UnaryViewGenerator.makeView(inputs:indirectMap:) in conformance BodyUnaryViewGenerator<A>(uint64_t *a1, uint64_t a2)
{
  uint64_t (**v2)(uint64_t *);

  return BodyUnaryViewGenerator.makeView(inputs:indirectMap:)(a1, a2, *v2);
}

uint64_t protocol witness for UnaryViewGenerator.tryToReuse(by:indirectMap:testOnly:) in conformance BodyUnaryViewGenerator<A>()
{
  return specialized BodyUnaryViewGenerator.tryToReuse(by:indirectMap:testOnly:)();
}

id _ViewList_Subgraph.subgraph.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

uint64_t _ViewList_Subgraph.refcount.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned int *)(v0 + 24);
}

uint64_t _ViewList_Subgraph.__allocating_init(subgraph:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_DWORD *)(result + 24) = 1;
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t _ViewList_Subgraph.init(subgraph:)(uint64_t a1)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 24) = 1;
  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

uint64_t _ViewList_Subgraph.wrapping(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return _ViewList_Subgraph.wrapping(_:)(a1, (uint64_t)&type metadata for SubgraphElements, (uint64_t)&protocol witness table for SubgraphElements, a2);
}

{
  return _ViewList_Subgraph.wrapping(_:)(a1, (uint64_t)&unk_2506149A0, (uint64_t)&protocol witness table for SubgraphList, a2);
}

uint64_t _ViewList_Subgraph.wrapping(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;

  a4[3] = a2;
  a4[4] = a3;
  v7 = swift_allocObject();
  *a4 = v7;
  outlined init with copy of AnyTrackedValue(a1, v7 + 16);
  *(_QWORD *)(v7 + 56) = v4;
  return swift_retain();
}

uint64_t _ViewList_Subgraph.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t _ViewList_Subgraph.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t SubgraphElements.makeElements(from:inputs:indirectMap:body:)(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  int v33;

  v11 = *a3;
  v12 = *((_DWORD *)a3 + 2);
  v13 = a3[2];
  v23 = *(_OWORD *)(a3 + 5);
  v24 = *(_OWORD *)(a3 + 3);
  v22 = *(_OWORD *)(a3 + 7);
  v14 = a3[9];
  v15 = *((_DWORD *)a3 + 20);
  v16 = v6[5];
  swift_beginAccess();
  if (*(_DWORD *)(v16 + 24) && AGSubgraphIsValid())
  {
    v21 = a6;
    v17 = v6[3];
    v18 = v6[4];
    __swift_project_boxed_opaque_existential_1(v6, v17);
    v26 = v11;
    v27 = v12;
    v28 = v13;
    v29 = v24;
    v30 = v23;
    v31 = v22;
    v32 = v14;
    v33 = v15;
    v19 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 16))(a1, a2, &v26, a4, a5, v21, v17, v18);
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    v19 = 1;
  }
  return v19 & 1;
}

uint64_t SubgraphElements.retain()()
{
  _QWORD *v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0[5];
  swift_beginAccess();
  v2 = *(_DWORD *)(v1 + 24);
  if (!v2 || !AGSubgraphIsValid())
    return 0;
  *(_DWORD *)(v1 + 24) = v2 + 1;
  v3 = v0[3];
  v4 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v3);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  type metadata accessor for _ViewList_ReleaseElements();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v5;
  *(_QWORD *)(v6 + 24) = v1;
  swift_retain();
  return v6;
}

uint64_t SubgraphElements.tryToReuseElement(at:by:at:indirectMap:testOnly:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t DynamicType;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19[5];
  _OWORD v20[3];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  outlined init with copy of AnyTrackedValue((uint64_t)a2, (uint64_t)v19);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for _ViewList_Elements);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v20[1] = v17;
    v20[2] = v18;
    v20[0] = v16;
    swift_beginAccess();
    if (*(_DWORD *)(*((_QWORD *)&v18 + 1) + 24) && AGSubgraphIsValid())
    {
      v11 = v5[3];
      v12 = v5[4];
      __swift_project_boxed_opaque_existential_1(v5, v11);
      v13 = (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 24))(a1, v20, a3, a4, a5 & 1, v11, v12);
      outlined destroy of SubgraphElements((uint64_t)v20);
      return v13 & 1;
    }
    outlined destroy of SubgraphElements((uint64_t)v20);
  }
  else
  {
    v17 = 0u;
    v18 = 0u;
    v16 = 0u;
    outlined destroy of SubgraphElements?((uint64_t)&v16);
  }
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  DynamicType = swift_getDynamicType();
  swift_beginAccess();
  if (static ReuseTrace.recorder)
  {
    v19[0] = DynamicType;
    AGGraphAddTraceEvent();
  }
  v13 = 0;
  return v13 & 1;
}

uint64_t _ViewList_ReleaseElements.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  int v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t IsValid;
  uint64_t v8;
  uint64_t v9;

  v1 = v0;
  if (one-time initialization token for _lock != -1)
    swift_once();
  v2 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  v3 = *(_DWORD **)(v0 + 24);
  swift_beginAccess();
  v4 = v3[6] - 1;
  v3[6] = v4;
  if (!v4)
  {
    v5 = *(void (**)(uint64_t))(*(_QWORD *)v3 + 104);
    v6 = swift_retain();
    v5(v6);
    IsValid = AGSubgraphIsValid();
    if ((_DWORD)IsValid)
    {
      MEMORY[0x24BDAC7A8](IsValid);
      AGSubgraphApply();
      AGSubgraphInvalidate();
    }
    swift_release();
  }
  static Update.end()();
  _MovableLockUnlock(v2);
  swift_release();
  v8 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v8)
  {
    do
    {
      if (!swift_isUniquelyReferenced_native())
        break;
      v9 = *(_QWORD *)(v8 + 16);
      swift_retain();
      swift_release();
      v8 = v9;
    }
    while (v9);
  }
  swift_release();
  return v1;
}

uint64_t _ViewList_ReleaseElements.__deallocating_deinit()
{
  _ViewList_ReleaseElements.deinit();
  return swift_deallocClassInstance();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance _ViewList_ReleaseElements(uint64_t *a1, uint64_t *a2)
{
  return specialized static _ViewList_ReleaseElements.== infix(_:_:)(*a1, *a2);
}

uint64_t SubgraphList.applyNodes(from:style:list:transform:to:)(uint64_t a1, uint64_t *a2, unint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v22;
  void *v23;
  _UNKNOWN **v24;

  v7 = v6;
  v12 = *a2;
  v13 = v6[5];
  v14 = (_QWORD *)*a4;
  swift_retain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
  v16 = v14[2];
  v15 = v14[3];
  if (v16 >= v15 >> 1)
    v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v14);
  v23 = &unk_250614930;
  v24 = &protocol witness table for SubgraphList.Transform;
  *(_QWORD *)&v22 = v13;
  v14[2] = v16 + 1;
  outlined init with take of ScrollStateRequest(&v22, (uint64_t)&v14[5 * v16 + 4]);
  swift_release();
  *a4 = v14;
  v17 = v7[3];
  v18 = v7[4];
  __swift_project_boxed_opaque_existential_1(v7, v17);
  *(_QWORD *)&v22 = v12;
  v19 = (*(uint64_t (**)(uint64_t, __int128 *, unint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 48))(a1, &v22, a3 | ((HIDWORD(a3) & 1) << 32), a4, a5, a6, v17, v18);
  $defer #1 () in SubgraphList.applyNodes(from:style:list:transform:to:)(a4);
  return v19 & 1;
}

uint64_t $defer #1 () in SubgraphList.applyNodes(from:style:list:transform:to:)(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v2 = (_QWORD *)*a1;
  if (!*(_QWORD *)(*a1 + 16))
  {
    __break(1u);
LABEL_6:
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    v2 = (_QWORD *)result;
    v4 = *(_QWORD *)(result + 16);
    if (v4)
      goto LABEL_4;
    goto LABEL_7;
  }
  v1 = a1;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
    goto LABEL_6;
  v4 = v2[2];
  if (v4)
  {
LABEL_4:
    v5 = v4 - 1;
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v2[5 * v4 - 1]);
    v2[2] = v5;
    *v1 = v2;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t SubgraphList.firstOffset<A>(forID:style:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v8 = *a2;
  v9 = v4[3];
  v10 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v9);
  v12 = v8;
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 64))(a1, &v12, a3, a4, v9, v10);
}

uint64_t protocol witness for _ViewList_SublistTransform_Item.apply(sublist:) in conformance SubgraphList.Transform(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  ValueMetadata *v6;
  _UNKNOWN **v7;

  v2 = *v1;
  v3 = a1 + 32;
  v6 = &type metadata for SubgraphElements;
  v7 = &protocol witness table for SubgraphElements;
  *(_QWORD *)&v5 = swift_allocObject();
  outlined init with copy of AnyTrackedValue(v3, v5 + 16);
  *(_QWORD *)(v5 + 56) = v2;
  swift_retain();
  __swift_destroy_boxed_opaque_existential_1(v3);
  return outlined init with take of ScrollStateRequest(&v5, v3);
}

uint64_t protocol witness for ViewList.applyNodes(from:style:list:transform:to:) in conformance SubgraphList(uint64_t a1, uint64_t *a2, unint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  return SubgraphList.applyNodes(from:style:list:transform:to:)(a1, a2, a3 | ((HIDWORD(a3) & 1) << 32), a4, a5, a6);
}

uint64_t protocol witness for ViewList.firstOffset<A>(forID:style:) in conformance SubgraphList(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return SubgraphList.firstOffset<A>(forID:style:)(a1, a2, a3, a4);
}

uint64_t specialized ModifiedViewList.ListModifier.init(pred:modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v6 = *a3;
  v7 = *((_DWORD *)a3 + 2);
  v8 = a3[2];
  v9 = a3[5];
  *(_QWORD *)(a4 + 16) = a1;
  swift_retain();
  *(_QWORD *)(a4 + 24) = AGCreateWeakAttribute();
  *(_QWORD *)(a4 + 32) = v6;
  *(_DWORD *)(a4 + 40) = v7;
  *(_QWORD *)(a4 + 48) = v8;
  *(_OWORD *)(a4 + 56) = *(_OWORD *)(a3 + 3);
  *(_QWORD *)(a4 + 72) = v9;
  return a4;
}

BOOL specialized static _ViewList_ReleaseElements.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char v6;

  if (*(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
    return 0;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a2 + 16);
  result = (v3 | v4) == 0;
  if (v3)
    v5 = v4 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    swift_retain();
    swift_retain();
    v6 = specialized static _ViewList_ReleaseElements.== infix(_:_:)(v3, v4);
    swift_release();
    swift_release();
    return v6 & 1;
  }
  return result;
}

BOOL specialized static _ViewList_ID.Canonical.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;

  if (*(_DWORD *)a1 != *(_DWORD *)a2 || *(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
    return 0;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a2 + 8);
  if (!v3)
  {
    if (!v4)
      return 1;
    goto LABEL_14;
  }
  if (!v4)
  {
    swift_retain();
LABEL_14:
    swift_release();
    return 0;
  }
  if (v3 == v4)
    return 1;
  v5 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 104);
  swift_retain_n();
  v6 = swift_retain();
  LOBYTE(v5) = v5(v6);
  swift_release_n();
  swift_release();
  return (v5 & 1) != 0;
}

uint64_t specialized static _ViewList_ID.Explicit.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(unsigned __int8 *)(a1 + 20);
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_DWORD *)(a2 + 16);
  v7 = *(unsigned __int8 *)(a2 + 20);
  if (*(_QWORD *)a1 == *(_QWORD *)a2)
  {
    if (v2 != v5 || v3 != v6)
      return 0;
    return v4 ^ v7 ^ 1u;
  }
  v8 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a1 + 104);
  swift_retain();
  v9 = swift_retain();
  LOBYTE(v8) = v8(v9);
  swift_release();
  swift_release();
  result = 0;
  if ((v8 & 1) != 0 && v2 == v5 && v3 == v6)
    return v4 ^ v7 ^ 1u;
  return result;
}

uint64_t specialized static _ViewList_ID.ElementCollection.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  if (*(_DWORD *)a1 != *(_DWORD *)a2 || *(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
    return 0;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = specialized static Array<A>.== infix(_:_:)(v6, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & (v7 == v5);
}

_BYTE *specialized _ViewList_ID._Views.init(_:isDataDependent:)(uint64_t a1, char a2)
{
  _BYTE *v2;

  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 128) - 8) + 16))(&v2[*(_QWORD *)(*(_QWORD *)v2 + 152)], a1);
  v2[16] = a2;
  return v2;
}

_BYTE *specialized _ViewList_ID._Views.__allocating_init(_:isDataDependent:)(uint64_t a1, char a2)
{
  _BYTE *v4;

  v4 = (_BYTE *)swift_allocObject();
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 128) - 8) + 16))(&v4[*(_QWORD *)(*(_QWORD *)v4 + 152)], a1);
  v4[16] = a2;
  return v4;
}

uint64_t specialized _ViewList_ID.JoinedViews.init(_:isDataDependent:)(unint64_t a1, char a2, uint64_t a3)
{
  uint64_t (*v4)(void);
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  char v18;

  LOBYTE(v4) = a2;
  if (a1 >> 62)
    goto LABEL_21;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_retain();
  v18 = (char)v4;
  if (v6)
  {
    while (v6 >= 1)
    {
      v8 = 0;
      v9 = 0;
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      while (1)
      {
        if ((a1 & 0xC000000000000001) != 0)
        {
          v11 = MEMORY[0x23B7C6D9C](v9, a1);
        }
        else
        {
          v11 = *(_QWORD *)(a1 + 8 * v9 + 32);
          swift_retain();
        }
        v4 = *(uint64_t (**)(void))(*(_QWORD *)v11 + 88);
        v12 = v4();
        if (v4() < 0)
          break;
        v13 = v4();
        if (v12 < 0 || v13 < v12)
          goto LABEL_19;
        v14 = __OFADD__(v8, v12);
        v8 += v12;
        if (v14)
          goto LABEL_20;
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
        v16 = v10[2];
        v15 = v10[3];
        if (v16 >= v15 >> 1)
          v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v10);
        ++v9;
        v10[2] = v16 + 1;
        v17 = &v10[2 * v16];
        v17[4] = v11;
        v17[5] = v8;
        swift_release();
        if (v6 == v9)
          goto LABEL_23;
      }
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      swift_retain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v6 = result;
      v18 = (char)v4;
      if (!result)
        goto LABEL_22;
    }
    __break(1u);
  }
  else
  {
LABEL_22:
    v8 = 0;
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_23:
    *(_QWORD *)(a3 + 24) = v10;
    *(_QWORD *)(a3 + 32) = v8;
    *(_BYTE *)(a3 + 16) = v18 & 1;
    return a3;
  }
  return result;
}

uint64_t specialized Collection.firstIndex(where:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t (*v6)(void);
  uint64_t v7;
  void (*v8)(uint64_t *__return_ptr, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  char v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v6 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 88);
  if (v6())
  {
    v7 = 0;
    v19 = HIDWORD(a2);
    v8 = *(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 96);
    while (1)
    {
      v8(&v17, v7);
      v10 = v17;
      v9 = HIDWORD(v17);
      if (*(_QWORD *)(v18 + 16))
      {
        v11 = *(_QWORD *)(v18 + 32);
        if ((*(_BYTE *)(v18 + 52) & 1) != 0)
        {
          if ((_DWORD)v17 != (_DWORD)a2 || (_DWORD)v19 != -1)
          {
            v12 = swift_bridgeObjectRelease();
            goto LABEL_18;
          }
          swift_retain();
          if (!a3)
          {
LABEL_24:
            swift_retain();
LABEL_25:
            swift_bridgeObjectRelease();
            v12 = swift_release_n();
            goto LABEL_18;
          }
          goto LABEL_14;
        }
        swift_retain();
        if (v10 != (_DWORD)a2)
          goto LABEL_17;
      }
      else
      {
        v11 = 0;
        if ((_DWORD)v17 != (_DWORD)a2)
          goto LABEL_17;
      }
      if (v9 != (_DWORD)v19)
      {
LABEL_17:
        swift_bridgeObjectRelease();
        v12 = swift_release();
        goto LABEL_18;
      }
      if (!v11)
      {
        if (!a3)
        {
          swift_bridgeObjectRelease();
          return v7;
        }
        goto LABEL_25;
      }
      if (!a3)
        goto LABEL_24;
LABEL_14:
      if (v11 == a3)
      {
        swift_bridgeObjectRelease();
        swift_release();
        return v7;
      }
      v13 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104);
      swift_retain_n();
      v14 = swift_retain();
      v15 = v13(v14);
      swift_bridgeObjectRelease();
      swift_release_n();
      v12 = swift_release();
      if ((v15 & 1) != 0)
        return v7;
LABEL_18:
      result = ((uint64_t (*)(uint64_t))v6)(v12);
      if (v7 >= result)
      {
        __break(1u);
        return result;
      }
      if (++v7 == v6())
        return 0;
    }
  }
  return 0;
}

uint64_t specialized _ViewListCountInputs.subscript.setter(uint64_t a1, Swift::Int a2, uint64_t a3, uint64_t a4)
{
  return specialized PropertyList.subscript.setter(a1, a2, a3, *(_QWORD *)(a4 + 8));
}

uint64_t sub_234EAAD24()
{
  return swift_deallocObject();
}

uint64_t sub_234EAAD34()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_234EAAD58()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t type metadata accessor for TypedUnaryViewGenerator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TypedUnaryViewGenerator);
}

uint64_t sub_234EAAD98()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_234EAADCC()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ViewList.allViewIDs.getter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = a1[2];
  v1 = a1[3];
  v3 = a1[1];
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v2, v1, v3);
  return 1;
}

void type metadata accessor for _ViewList_ID._Views<[_ViewList_ID]>(uint64_t a1)
{
  uint64_t (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!lazy cache variable for type metadata for _ViewList_ID._Views<[_ViewList_ID]>)
  {
    v2 = MEMORY[0x24BEE1250];
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for [_ViewList_ID], (uint64_t)&type metadata for _ViewList_ID, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    v4 = v3;
    v5 = lazy protocol witness table accessor for type [_ViewList_ID] and conformance <A> [A]();
    v6 = lazy protocol witness table accessor for type EmptyCollection<_ViewList_ID> and conformance EmptyCollection<A>(&lazy protocol witness table cache variable for type [_ViewList_ID] and conformance [A], &lazy cache variable for type metadata for [_ViewList_ID], (uint64_t (*)(_QWORD, uint64_t))v2, MEMORY[0x24BEE12D8]);
    v7 = type metadata accessor for _ViewList_ID._Views(a1, v4, v5, v6);
    if (!v8)
      atomic_store(v7, (unint64_t *)&lazy cache variable for type metadata for _ViewList_ID._Views<[_ViewList_ID]>);
  }
}

unint64_t lazy protocol witness table accessor for type [_ViewList_ID] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type [_ViewList_ID] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [_ViewList_ID] and conformance <A> [A])
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for [_ViewList_ID], (uint64_t)&type metadata for _ViewList_ID, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type _ViewList_ID and conformance _ViewList_ID();
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE12C0], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [_ViewList_ID] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewList_ID and conformance _ViewList_ID()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewList_ID and conformance _ViewList_ID;
  if (!lazy protocol witness table cache variable for type _ViewList_ID and conformance _ViewList_ID)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ViewList_ID, &type metadata for _ViewList_ID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewList_ID and conformance _ViewList_ID);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type EmptyCollection<_ViewList_ID> and conformance EmptyCollection<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(_QWORD, uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, a2, (uint64_t)&type metadata for _ViewList_ID, a3);
    result = MEMORY[0x23B7C9C04](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for _ViewList_ID._Views(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ViewList_ID._Views);
}

uint64_t outlined init with copy of _ViewList_Node(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for _ViewList_Node(a2, a1);
  return a2;
}

uint64_t outlined destroy of _ViewList_Sublist(uint64_t a1)
{
  destroy for _ViewList_Sublist(a1);
  return a1;
}

uint64_t outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for (list: ViewList, attribute: Attribute<ViewList>)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for External<ViewList>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = type metadata accessor for ScrollStateRequest(255, (unint64_t *)&lazy cache variable for type metadata for ViewList);
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t outlined destroy of (list: ViewList, attribute: Attribute<ViewList>)(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for (list: ViewList, attribute: Attribute<ViewList>)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of _ViewList_Sublist(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for _ViewList_Sublist(a2, a1);
  return a2;
}

uint64_t outlined destroy of _ViewList_Node(uint64_t a1)
{
  destroy for _ViewList_Node(a1);
  return a1;
}

uint64_t partial apply for closure #2 in _ViewList_Node.applySublists(from:style:transform:to:)()
{
  char v0;

  _ViewList_Node.applySublists(from:style:transform:to:)();
  return v0 & 1;
}

uint64_t partial apply for closure #1 in _ViewList_Node.applySublists(from:style:transform:to:)()
{
  char v0;

  _ViewList_Node.applySublists(from:style:transform:to:)();
  return v0 & 1;
}

uint64_t partial apply for closure #1 in _ViewList_Section.applyNodes(from:style:transform:to:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t *, uint64_t, int *, uint64_t);
  int v9;
  BOOL v10;
  BOOL v11;
  uint64_t v12;

  v5 = *(_DWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 48);
  v7 = *(uint64_t (**)(uint64_t, uint64_t *, uint64_t, int *, uint64_t))(v4 + 56);
  v12 = *a2;
  v9 = v5;
  v10 = v6 == 0;
  v11 = v6 == 2;
  return v7(a1, &v12, a3, &v9, a4) & 1;
}

void type metadata accessor for (offset: Int, element: (list: ViewList, attribute: Attribute<ViewList>))()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (offset: Int, element: (list: ViewList, attribute: Attribute<ViewList>)))
  {
    type metadata accessor for (list: ViewList, attribute: Attribute<ViewList>)();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: (list: ViewList, attribute: Attribute<ViewList>)));
  }
}

void partial apply for closure #1 in ViewList.applyIDs(from:style:listAttribute:transform:to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  closure #1 in ViewList.applyIDs(from:style:listAttribute:transform:to:)(a1, a2, a3);
}

uint64_t partial apply for closure #2 in ViewList.firstOffset(of:style:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in ViewList.firstOffset(of:style:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD **)(v1 + 40));
}

uint64_t sub_234EAB308()
{
  return swift_deallocObject();
}

uint64_t sub_234EAB318()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in _ViewList_Elements.makeOneElement(at:inputs:indirectMap:body:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in closure #1 in _ViewList_Elements.makeOneElement(at:inputs:indirectMap:body:)(a1, a2, a3, a4, *(void (**)(uint64_t *, uint64_t, uint64_t))(v4 + 16));
}

uint64_t sub_234EAB330()
{
  return swift_deallocObject();
}

void specialized _ViewList_ID._Views.init(isDataDependent:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void type metadata accessor for _ViewList_ID._Views<_ViewList_ID_Views>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!lazy cache variable for type metadata for _ViewList_ID._Views<_ViewList_ID_Views>)
  {
    v2 = type metadata accessor for _ViewList_ID_Views();
    v4 = lazy protocol witness table accessor for type AnyTextSizingModifier and conformance AnyTextSizingModifier(&lazy protocol witness table cache variable for type _ViewList_ID_Views and conformance _ViewList_ID_Views, v3, (uint64_t (*)(uint64_t))type metadata accessor for _ViewList_ID_Views, (uint64_t)&protocol conformance descriptor for _ViewList_ID_Views);
    v6 = lazy protocol witness table accessor for type AnyTextSizingModifier and conformance AnyTextSizingModifier(&lazy protocol witness table cache variable for type _ViewList_ID_Views and conformance _ViewList_ID_Views, v5, (uint64_t (*)(uint64_t))type metadata accessor for _ViewList_ID_Views, (uint64_t)&protocol conformance descriptor for _ViewList_ID_Views);
    v7 = type metadata accessor for _ViewList_ID._Views(a1, v2, v4, v6);
    if (!v8)
      atomic_store(v7, (unint64_t *)&lazy cache variable for type metadata for _ViewList_ID._Views<_ViewList_ID_Views>);
  }
}

uint64_t type metadata accessor for _ViewList_ID_Views()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for ModifiedViewList.ListModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ModifiedViewList.ListModifier);
}

uint64_t type metadata accessor for ModifiedElements(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ModifiedElements);
}

void type metadata accessor for _ViewList_ID._Views<EmptyCollection<_ViewList_ID>>(uint64_t a1)
{
  uint64_t (*v2)(_QWORD, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!lazy cache variable for type metadata for _ViewList_ID._Views<EmptyCollection<_ViewList_ID>>)
  {
    v2 = (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE2A90];
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for EmptyCollection<_ViewList_ID>, (uint64_t)&type metadata for _ViewList_ID, MEMORY[0x24BEE2A90]);
    v4 = v3;
    v5 = lazy protocol witness table accessor for type EmptyCollection<_ViewList_ID> and conformance EmptyCollection<A>(&lazy protocol witness table cache variable for type EmptyCollection<_ViewList_ID> and conformance EmptyCollection<A>, &lazy cache variable for type metadata for EmptyCollection<_ViewList_ID>, v2, MEMORY[0x24BEE2AA0]);
    v6 = lazy protocol witness table accessor for type EmptyCollection<_ViewList_ID> and conformance EmptyCollection<A>(&lazy protocol witness table cache variable for type EmptyCollection<_ViewList_ID> and conformance EmptyCollection<A>, &lazy cache variable for type metadata for EmptyCollection<_ViewList_ID>, v2, MEMORY[0x24BEE2AA8]);
    v7 = type metadata accessor for _ViewList_ID._Views(a1, v4, v5, v6);
    if (!v8)
      atomic_store(v7, (unint64_t *)&lazy cache variable for type metadata for _ViewList_ID._Views<EmptyCollection<_ViewList_ID>>);
  }
}

uint64_t type metadata accessor for ViewListSlice.ViewIDsSlice()
{
  return objc_opt_self();
}

uint64_t partial apply for closure #1 in ViewListSlice.applyNodes(from:style:list:transform:to:)(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v4)(void);
  uint64_t result;
  uint64_t v6;

  if (*a1 >= *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48))
  {
    LOBYTE(result) = 0;
    return result & 1;
  }
  v4 = *(uint64_t (**)(void))(v2 + 24);
  v6 = *a2;
  result = v4();
  if (!__OFADD__(*a1, 1))
  {
    ++*a1;
    return result & 1;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for _ViewList_ID.JoinedViews()
{
  return objc_opt_self();
}

uint64_t objectdestroy_36Tm()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type _ViewListInputs.Options and conformance _ViewListInputs.Options()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewListInputs.Options and conformance _ViewListInputs.Options;
  if (!lazy protocol witness table cache variable for type _ViewListInputs.Options and conformance _ViewListInputs.Options)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ViewListInputs.Options, &type metadata for _ViewListInputs.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewListInputs.Options and conformance _ViewListInputs.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewListInputs.Options and conformance _ViewListInputs.Options;
  if (!lazy protocol witness table cache variable for type _ViewListInputs.Options and conformance _ViewListInputs.Options)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ViewListInputs.Options, &type metadata for _ViewListInputs.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewListInputs.Options and conformance _ViewListInputs.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewListInputs.Options and conformance _ViewListInputs.Options;
  if (!lazy protocol witness table cache variable for type _ViewListInputs.Options and conformance _ViewListInputs.Options)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ViewListInputs.Options, &type metadata for _ViewListInputs.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewListInputs.Options and conformance _ViewListInputs.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewListInputs.Options and conformance _ViewListInputs.Options;
  if (!lazy protocol witness table cache variable for type _ViewListInputs.Options and conformance _ViewListInputs.Options)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ViewListInputs.Options, &type metadata for _ViewListInputs.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewListInputs.Options and conformance _ViewListInputs.Options);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewList_Edit and conformance _ViewList_Edit()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewList_Edit and conformance _ViewList_Edit;
  if (!lazy protocol witness table cache variable for type _ViewList_Edit and conformance _ViewList_Edit)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ViewList_Edit, &type metadata for _ViewList_Edit);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewList_Edit and conformance _ViewList_Edit);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewList_ID.ElementCollection and conformance _ViewList_ID.ElementCollection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewList_ID.ElementCollection and conformance _ViewList_ID.ElementCollection;
  if (!lazy protocol witness table cache variable for type _ViewList_ID.ElementCollection and conformance _ViewList_ID.ElementCollection)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ViewList_ID.ElementCollection, &type metadata for _ViewList_ID.ElementCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewList_ID.ElementCollection and conformance _ViewList_ID.ElementCollection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewList_ID.ElementCollection and conformance _ViewList_ID.ElementCollection;
  if (!lazy protocol witness table cache variable for type _ViewList_ID.ElementCollection and conformance _ViewList_ID.ElementCollection)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ViewList_ID.ElementCollection, &type metadata for _ViewList_ID.ElementCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewList_ID.ElementCollection and conformance _ViewList_ID.ElementCollection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewList_ID.ElementCollection and conformance _ViewList_ID.ElementCollection;
  if (!lazy protocol witness table cache variable for type _ViewList_ID.ElementCollection and conformance _ViewList_ID.ElementCollection)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ViewList_ID.ElementCollection, &type metadata for _ViewList_ID.ElementCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewList_ID.ElementCollection and conformance _ViewList_ID.ElementCollection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewList_ID.ElementCollection and conformance _ViewList_ID.ElementCollection;
  if (!lazy protocol witness table cache variable for type _ViewList_ID.ElementCollection and conformance _ViewList_ID.ElementCollection)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ViewList_ID.ElementCollection, &type metadata for _ViewList_ID.ElementCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewList_ID.ElementCollection and conformance _ViewList_ID.ElementCollection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewList_ID.ElementCollection and conformance _ViewList_ID.ElementCollection;
  if (!lazy protocol witness table cache variable for type _ViewList_ID.ElementCollection and conformance _ViewList_ID.ElementCollection)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ViewList_ID.ElementCollection, &type metadata for _ViewList_ID.ElementCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewList_ID.ElementCollection and conformance _ViewList_ID.ElementCollection);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in _ViewList_ID.ElementCollection()
{
  return lazy protocol witness table accessor for type Slice<_ViewList_ID.ElementCollection> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<_ViewList_ID.ElementCollection> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ViewList_ID.ElementCollection and conformance _ViewList_ID.ElementCollection, MEMORY[0x24BEE4230]);
}

uint64_t lazy protocol witness table accessor for type Slice<_ViewList_ID.ElementCollection> and conformance <> Slice<A>(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<_ViewList_ID.ElementCollection>(255, &lazy cache variable for type metadata for Slice<_ViewList_ID.ElementCollection>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE41D8]);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x23B7C9C04](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in _ViewList_ID.ElementCollection()
{
  return lazy protocol witness table accessor for type Slice<_ViewList_ID.ElementCollection> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<_ViewList_ID.ElementCollection> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ViewList_ID.ElementCollection and conformance _ViewList_ID.ElementCollection, MEMORY[0x24BEE4218]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in _ViewList_ID.ElementCollection()
{
  return lazy protocol witness table accessor for type IndexingIterator<_ViewList_ID.ElementCollection> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type Slice<_ViewList_ID.ElementCollection> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<_ViewList_ID.ElementCollection>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE41D8], MEMORY[0x24BEE4238]);
}

uint64_t lazy protocol witness table accessor for type IndexingIterator<_ViewList_ID.ElementCollection> and conformance IndexingIterator<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<_ViewList_ID.ElementCollection>(255, a2, a3);
    result = MEMORY[0x23B7C9C04](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in _ViewList_ID.ElementCollection()
{
  return lazy protocol witness table accessor for type IndexingIterator<_ViewList_ID.ElementCollection> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type IndexingIterator<_ViewList_ID.ElementCollection> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<_ViewList_ID.ElementCollection>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE2C00], MEMORY[0x24BEE2C18]);
}

void type metadata accessor for Slice<_ViewList_ID.ElementCollection>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = lazy protocol witness table accessor for type _ViewList_ID.ElementCollection and conformance _ViewList_ID.ElementCollection();
    v7 = a3(a1, &type metadata for _ViewList_ID.ElementCollection, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t base witness table accessor for BidirectionalCollection in _ViewList_ID_Views(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type AnyTextSizingModifier and conformance AnyTextSizingModifier(&lazy protocol witness table cache variable for type _ViewList_ID_Views and conformance _ViewList_ID_Views, a2, (uint64_t (*)(uint64_t))type metadata accessor for _ViewList_ID_Views, (uint64_t)&protocol conformance descriptor for _ViewList_ID_Views);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in _ViewList_ID_Views()
{
  return lazy protocol witness table accessor for type Slice<_ViewList_ID_Views> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<_ViewList_ID_Views> and conformance <> Slice<A>, &lazy protocol witness table cache variable for type _ViewList_ID_Views and conformance _ViewList_ID_Views, (uint64_t)&protocol conformance descriptor for _ViewList_ID_Views, MEMORY[0x24BEE4230]);
}

uint64_t lazy protocol witness table accessor for type Slice<_ViewList_ID_Views> and conformance <> Slice<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<_ViewList_ID_Views>(255);
    v10 = v9;
    v12 = lazy protocol witness table accessor for type AnyTextSizingModifier and conformance AnyTextSizingModifier(a2, v11, (uint64_t (*)(uint64_t))type metadata accessor for _ViewList_ID_Views, a3);
    result = MEMORY[0x23B7C9C04](a4, v10, &v12);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for Slice<_ViewList_ID_Views>(uint64_t a1)
{
  type metadata accessor for Slice<_ViewList_ID_Views>(a1, &lazy cache variable for type metadata for Slice<_ViewList_ID_Views>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE41D8]);
}

uint64_t base witness table accessor for Collection in _ViewList_ID_Views(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type AnyTextSizingModifier and conformance AnyTextSizingModifier(&lazy protocol witness table cache variable for type _ViewList_ID_Views and conformance _ViewList_ID_Views, a2, (uint64_t (*)(uint64_t))type metadata accessor for _ViewList_ID_Views, (uint64_t)&protocol conformance descriptor for _ViewList_ID_Views);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in _ViewList_ID_Views()
{
  return lazy protocol witness table accessor for type Slice<_ViewList_ID_Views> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<_ViewList_ID_Views> and conformance <> Slice<A>, &lazy protocol witness table cache variable for type _ViewList_ID_Views and conformance _ViewList_ID_Views, (uint64_t)&protocol conformance descriptor for _ViewList_ID_Views, MEMORY[0x24BEE4218]);
}

uint64_t base witness table accessor for Sequence in _ViewList_ID_Views(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type AnyTextSizingModifier and conformance AnyTextSizingModifier(&lazy protocol witness table cache variable for type _ViewList_ID_Views and conformance _ViewList_ID_Views, a2, (uint64_t (*)(uint64_t))type metadata accessor for _ViewList_ID_Views, (uint64_t)&protocol conformance descriptor for _ViewList_ID_Views);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in _ViewList_ID_Views()
{
  return lazy protocol witness table accessor for type AnyTextSizingModifier and conformance AnyTextSizingModifier(&lazy protocol witness table cache variable for type Slice<_ViewList_ID_Views> and conformance Slice<A>, 255, (uint64_t (*)(uint64_t))type metadata accessor for Slice<_ViewList_ID_Views>, MEMORY[0x24BEE4238]);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in _ViewList_ID_Views()
{
  return lazy protocol witness table accessor for type AnyTextSizingModifier and conformance AnyTextSizingModifier(&lazy protocol witness table cache variable for type IndexingIterator<_ViewList_ID_Views> and conformance IndexingIterator<A>, 255, (uint64_t (*)(uint64_t))type metadata accessor for IndexingIterator<_ViewList_ID_Views>, MEMORY[0x24BEE2C18]);
}

void type metadata accessor for IndexingIterator<_ViewList_ID_Views>(uint64_t a1)
{
  type metadata accessor for Slice<_ViewList_ID_Views>(a1, &lazy cache variable for type metadata for IndexingIterator<_ViewList_ID_Views>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE2C00]);
}

void type metadata accessor for Slice<_ViewList_ID_Views>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v6 = type metadata accessor for _ViewList_ID_Views();
    v8 = lazy protocol witness table accessor for type AnyTextSizingModifier and conformance AnyTextSizingModifier(&lazy protocol witness table cache variable for type _ViewList_ID_Views and conformance _ViewList_ID_Views, v7, (uint64_t (*)(uint64_t))type metadata accessor for _ViewList_ID_Views, (uint64_t)&protocol conformance descriptor for _ViewList_ID_Views);
    v9 = a3(a1, v6, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t instantiation function for generic protocol witness table for _ViewList_Group.Init(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _ViewList_Group.Init and conformance _ViewList_Group.Init();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_234EABD28@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2;
  BOOL v3;

  v2 = *(_DWORD *)(result + 64);
  v3 = v2 == *MEMORY[0x24BE096C0];
  if (v2 == *MEMORY[0x24BE096C0])
    v2 = 0;
  *(_DWORD *)a2 = v2;
  *(_BYTE *)(a2 + 4) = v3;
  return result;
}

uint64_t sub_234EABD50(uint64_t result, uint64_t a2)
{
  _DWORD *v2;

  if (*(_BYTE *)(result + 4))
    v2 = (_DWORD *)MEMORY[0x24BE096C0];
  else
    v2 = (_DWORD *)result;
  *(_DWORD *)(a2 + 64) = *v2;
  return result;
}

_BYTE *sub_234EABD70@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result & 1;
  return result;
}

unsigned __int8 *sub_234EABD80(unsigned __int8 *result, unint64_t *a2)
{
  *a2 = *a2 & 0xFFFFFFFFFFFFFFFELL | *result;
  return result;
}

_QWORD *sub_234EABD98@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result >> 1;
  return result;
}

_QWORD *sub_234EABDA8(_QWORD *result, uint64_t *a2)
{
  *a2 = *a2 & 1 | (2 * *result);
  return result;
}

int *sub_234EABDBC@<X0>(int *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t *keypath_set_46Tm(uint64_t *result, _DWORD *a2)
{
  uint64_t v2;

  v2 = *result;
  if (*result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v2 <= 0x7FFFFFFF)
  {
    *a2 = v2;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t destroy for _ViewListInputs()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _ViewListInputs(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _ViewListInputs(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  return a1;
}

uint64_t assignWithTake for _ViewListInputs(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ViewListInputs(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 81))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _ViewListInputs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 80) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 81) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 81) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _ViewListInputs()
{
  return &type metadata for _ViewListInputs;
}

ValueMetadata *type metadata accessor for _ViewListInputs.Options()
{
  return &type metadata for _ViewListInputs.Options;
}

uint64_t initializeWithCopy for _ViewListCountInputs(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _ViewListCountInputs(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for _ViewListCountInputs(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for _ViewListCountInputs()
{
  return &type metadata for _ViewListCountInputs;
}

uint64_t destroy for _ViewListOutputs(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    return swift_release();
  else
    return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t initializeWithCopy for _ViewListOutputs(uint64_t a1, uint64_t a2)
{
  char v4;
  __int128 v5;
  uint64_t v6;

  v4 = *(_BYTE *)(a2 + 40);
  if ((v4 & 1) != 0)
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    swift_retain();
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
  }
  *(_BYTE *)(a1 + 40) = v4;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t assignWithCopy for _ViewListOutputs(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a1 != a2)
  {
    outlined destroy of _ViewListOutputs.Views(a1);
    if ((*(_BYTE *)(a2 + 40) & 1) != 0)
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_BYTE *)(a1 + 40) = 1;
      swift_retain();
    }
    else
    {
      v4 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v4;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 0;
    }
  }
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v5;
  return a1;
}

uint64_t assignWithTake for _ViewListOutputs(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  if (a1 != a2)
  {
    outlined destroy of _ViewListOutputs.Views(a1);
    v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ViewListOutputs(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 65))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _ViewListOutputs(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 65) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for _ViewListOutputs()
{
  return &type metadata for _ViewListOutputs;
}

uint64_t destroy for _ViewListOutputs.Views(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 2)
    v1 = *(_DWORD *)a1 + 2;
  if (v1 == 1)
    return swift_release();
  else
    return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t initializeWithCopy for _ViewListOutputs.Views(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  char v4;
  __int128 v5;

  v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 2)
    v3 = *(_DWORD *)a2 + 2;
  if (v3 == 1)
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    swift_retain();
    v4 = 1;
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t))(v5 - 8))(a1);
    v4 = 0;
  }
  *(_BYTE *)(a1 + 40) = v4;
  return a1;
}

uint64_t assignWithCopy for _ViewListOutputs.Views(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
      swift_release();
    else
      __swift_destroy_boxed_opaque_existential_1(a1);
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_BYTE *)(a1 + 40) = 1;
      swift_retain();
    }
    else
    {
      v6 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v6;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 0;
    }
  }
  return a1;
}

uint64_t assignWithTake for _ViewListOutputs.Views(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
      swift_release();
    else
      __swift_destroy_boxed_opaque_existential_1(a1);
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    else
    {
      LOBYTE(v5) = 0;
      v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    }
    *(_BYTE *)(a1 + 40) = v5;
  }
  return a1;
}

ValueMetadata *type metadata accessor for _ViewListOutputs.Views()
{
  return &type metadata for _ViewListOutputs.Views;
}

uint64_t type metadata accessor for _ViewListOutputs.ListModifier()
{
  return objc_opt_self();
}

uint64_t method lookup function for _ViewListOutputs.ListModifier()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of _ViewListOutputs.ListModifier.apply(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 80))();
}

uint64_t dispatch thunk of ViewList.count(style:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of ViewList.estimatedCount(style:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of ViewList.traitKeys.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ViewList.traits.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of ViewList.applyNodes(from:style:list:transform:to:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(a8 + 48))(a1, a2, a3 | ((HIDWORD(a3) & 1) << 32));
}

uint64_t dispatch thunk of ViewList.edit(forID:since:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t dispatch thunk of ViewList.firstOffset<A>(forID:style:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 64))();
}

ValueMetadata *type metadata accessor for _ViewList_IteratorStyle()
{
  return &type metadata for _ViewList_IteratorStyle;
}

uint64_t storeEnumTagSinglePayload for _ViewList_Edit(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_234EAC734 + 4 * byte_2352AB149[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_234EAC768 + 4 * byte_2352AB144[v4]))();
}

uint64_t sub_234EAC768(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234EAC770(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234EAC778);
  return result;
}

uint64_t sub_234EAC784(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234EAC78CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_234EAC790(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234EAC798(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for _ViewList_Edit()
{
  return &type metadata for _ViewList_Edit;
}

uint64_t destroy for _ViewList_Sublist(uint64_t a1)
{
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 32);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _ViewList_Sublist(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = a2 + 32;
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 56) = v5;
  v6 = v5;
  v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_bridgeObjectRetain();
  v7(a1 + 32, v4, v6);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _ViewList_Sublist(uint64_t a1, uint64_t a2)
{
  int v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 32), (uint64_t *)(a2 + 32));
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_DWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  *(_DWORD *)(a1 + 80) = v4;
  return a1;
}

__n128 __swift_memcpy85_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 77) = *(_QWORD *)(a2 + 77);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for _ViewList_Sublist(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  v5 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v5;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ViewList_Sublist(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 85))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _ViewList_Sublist(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 84) = 0;
    *(_DWORD *)(result + 80) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 85) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 85) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _ViewList_Sublist()
{
  return &type metadata for _ViewList_Sublist;
}

ValueMetadata *type metadata accessor for _ViewList_SublistTransform()
{
  return &type metadata for _ViewList_SublistTransform;
}

uint64_t dispatch thunk of _ViewList_SublistTransform_Item.apply(sublist:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of _ViewList_SublistTransform_Item.bindID(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t destroy for _ViewList_Node(uint64_t a1)
{
  int v2;

  v2 = *(unsigned __int8 *)(a1 + 85);
  while (2)
  {
    switch(v2)
    {
      case 0:
        return __swift_destroy_boxed_opaque_existential_1(a1);
      case 1:
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1(a1 + 32);
        return swift_bridgeObjectRelease();
      case 2:
        return swift_bridgeObjectRelease();
      case 3:
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      default:
        v2 = *(_DWORD *)a1 + 4;
        continue;
    }
  }
}

uint64_t initializeWithCopy for _ViewList_Node(uint64_t a1, uint64_t a2)
{
  int v4;
  __int128 v5;
  char v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v4 = *(unsigned __int8 *)(a2 + 85);
  while (2)
  {
    switch(v4)
    {
      case 0:
        v5 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v5;
        (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
        *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
        *(_BYTE *)(a1 + 85) = 0;
        return a1;
      case 1:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
        v8 = *(_OWORD *)(a2 + 56);
        *(_OWORD *)(a1 + 56) = v8;
        v9 = v8;
        v10 = **(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8);
        swift_bridgeObjectRetain();
        v10(a1 + 32, a2 + 32, v9);
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
        *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
        *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
        v6 = 1;
        goto LABEL_8;
      case 2:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v6 = 2;
LABEL_8:
        *(_BYTE *)(a1 + 85) = v6;
        break;
      case 3:
        *(_DWORD *)a1 = *(_DWORD *)a2;
        v7 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a1 + 16) = v7;
        *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
        *(_BYTE *)(a1 + 85) = 3;
        swift_bridgeObjectRetain();
        break;
      default:
        v4 = *(_DWORD *)a2 + 4;
        continue;
    }
    break;
  }
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _ViewList_Node(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  int v10;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 85);
    while (2)
    {
      switch(v4)
      {
        case 0:
          __swift_destroy_boxed_opaque_existential_1(a1);
          goto LABEL_9;
        case 1:
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_1(a1 + 32);
          goto LABEL_8;
        case 2:
          goto LABEL_8;
        case 3:
          swift_bridgeObjectRelease();
LABEL_8:
          swift_bridgeObjectRelease();
LABEL_9:
          v5 = *(unsigned __int8 *)(a2 + 85);
          while (2)
          {
            switch(v5)
            {
              case 0:
                v6 = *(_QWORD *)(a2 + 24);
                *(_QWORD *)(a1 + 24) = v6;
                *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
                (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
                v7 = *(_BYTE *)(a2 + 44);
                *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
                *(_BYTE *)(a1 + 44) = v7;
                *(_BYTE *)(a1 + 85) = 0;
                return a1;
              case 1:
                *(_QWORD *)a1 = *(_QWORD *)a2;
                *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
                *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
                *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
                *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
                v8 = *(_QWORD *)(a2 + 56);
                *(_QWORD *)(a1 + 56) = v8;
                *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
                v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8);
                swift_bridgeObjectRetain();
                v9(a1 + 32, a2 + 32, v8);
                *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
                v10 = *(_DWORD *)(a2 + 80);
                *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
                *(_DWORD *)(a1 + 80) = v10;
                *(_BYTE *)(a1 + 85) = 1;
                goto LABEL_16;
              case 2:
                *(_QWORD *)a1 = *(_QWORD *)a2;
                *(_BYTE *)(a1 + 85) = 2;
                goto LABEL_16;
              case 3:
                *(_DWORD *)a1 = *(_DWORD *)a2;
                *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
                *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
                *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
                *(_BYTE *)(a1 + 85) = 3;
                swift_bridgeObjectRetain();
LABEL_16:
                swift_bridgeObjectRetain();
                break;
              default:
                v5 = *(_DWORD *)a2 + 4;
                continue;
            }
            break;
          }
          break;
        default:
          v4 = *(_DWORD *)a1 + 4;
          continue;
      }
      break;
    }
  }
  return a1;
}

__n128 __swift_memcpy86_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 78) = *(_QWORD *)(a2 + 78);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for _ViewList_Node(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  char v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 85);
    while (2)
    {
      switch(v4)
      {
        case 0:
          __swift_destroy_boxed_opaque_existential_1(a1);
          goto LABEL_9;
        case 1:
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_1(a1 + 32);
          goto LABEL_8;
        case 2:
          goto LABEL_8;
        case 3:
          swift_bridgeObjectRelease();
LABEL_8:
          swift_bridgeObjectRelease();
LABEL_9:
          v5 = *(unsigned __int8 *)(a2 + 85);
          while (2)
          {
            switch(v5)
            {
              case 0:
                v6 = 0;
                v7 = *(_OWORD *)(a2 + 16);
                *(_OWORD *)a1 = *(_OWORD *)a2;
                *(_OWORD *)(a1 + 16) = v7;
                *(_OWORD *)(a1 + 29) = *(_OWORD *)(a2 + 29);
                break;
              case 1:
                v8 = *(_OWORD *)(a2 + 48);
                *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
                *(_OWORD *)(a1 + 48) = v8;
                *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
                *(_QWORD *)(a1 + 77) = *(_QWORD *)(a2 + 77);
                v9 = *(_OWORD *)(a2 + 16);
                v6 = 1;
                *(_OWORD *)a1 = *(_OWORD *)a2;
                *(_OWORD *)(a1 + 16) = v9;
                break;
              case 2:
                *(_QWORD *)a1 = *(_QWORD *)a2;
                v6 = 2;
                break;
              case 3:
                *(_OWORD *)a1 = *(_OWORD *)a2;
                *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
                v6 = 3;
                break;
              default:
                v5 = *(_DWORD *)a2 + 4;
                continue;
            }
            break;
          }
          *(_BYTE *)(a1 + 85) = v6;
          break;
        default:
          v4 = *(_DWORD *)a1 + 4;
          continue;
      }
      break;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for _ViewList_Node(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 86))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 85);
  if (v3 >= 4)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for _ViewList_Node(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_QWORD *)(result + 78) = 0;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 86) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 86) = 0;
    if (a2)
      *(_BYTE *)(result + 85) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for _ViewList_Node(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 85);
  if (result >= 4)
    return (*(_DWORD *)a1 + 4);
  return result;
}

uint64_t destructiveInjectEnumTag for _ViewList_Node(uint64_t result, unsigned int a2)
{
  unsigned int v2;

  if (a2 > 3)
  {
    v2 = a2 - 4;
    *(_QWORD *)(result + 77) = 0;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    LOBYTE(a2) = 4;
    *(_DWORD *)result = v2;
  }
  *(_BYTE *)(result + 85) = a2;
  return result;
}

ValueMetadata *type metadata accessor for _ViewList_Node()
{
  return &type metadata for _ViewList_Node;
}

uint64_t dispatch thunk of _ViewList_Elements.count.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of _ViewList_Elements.makeElements(from:inputs:indirectMap:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 16))();
}

uint64_t dispatch thunk of _ViewList_Elements.tryToReuseElement(at:by:at:indirectMap:testOnly:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 24))();
}

uint64_t dispatch thunk of _ViewList_Elements.retain()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

ValueMetadata *type metadata accessor for _ViewList_ID()
{
  return &type metadata for _ViewList_ID;
}

uint64_t assignWithCopy for _ViewList_ID.Canonical(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for _ViewList_ID.Canonical(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for _ViewList_ID.Canonical()
{
  return &type metadata for _ViewList_ID.Canonical;
}

_QWORD *initializeBufferWithCopyOfBuffer for _ViewList_ID.ElementCollection(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  *a1 = *a2;
  v3 = a2[2];
  a1[1] = a2[1];
  a1[2] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _ViewList_ID.ElementCollection(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

_QWORD *assignWithTake for _ViewList_ID.ElementCollection(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

ValueMetadata *type metadata accessor for _ViewList_ID.ElementCollection()
{
  return &type metadata for _ViewList_ID.ElementCollection;
}

uint64_t type metadata completion function for _ViewList_ID._Views()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for _ViewList_ID._Views()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of _ViewList_ID._Views.__allocating_init(_:isDataDependent:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t method lookup function for _ViewList_ID.JoinedViews()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of _ViewList_ID.JoinedViews.__allocating_init(_:isDataDependent:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t method lookup function for _ViewList_ID_Views()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of _ViewList_ID_Views.endIndex.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of _ViewList_ID_Views.subscript.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of _ViewList_ID_Views.isEqual(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of _ViewList_ID_Views.__allocating_init(isDataDependent:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of _ViewList_ID_Views.withDataDependency()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

ValueMetadata *type metadata accessor for EmptyViewList()
{
  return &type metadata for EmptyViewList;
}

ValueMetadata *type metadata accessor for EmptyViewListElements()
{
  return &type metadata for EmptyViewListElements;
}

uint64_t initializeWithCopy for ViewListSlice(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t *assignWithCopy for ViewListSlice(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  a1[5] = a2[5];
  a1[6] = a2[6];
  return a1;
}

uint64_t assignWithTake for ViewListSlice(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

ValueMetadata *type metadata accessor for ViewListSlice()
{
  return &type metadata for ViewListSlice;
}

ValueMetadata *type metadata accessor for _ViewList_Group()
{
  return &type metadata for _ViewList_Group;
}

ValueMetadata *type metadata accessor for _ViewList_Group.Init()
{
  return &type metadata for _ViewList_Group.Init;
}

uint64_t initializeWithCopy for _ViewList_Section(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _ViewList_Section(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for _ViewList_Section(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ViewList_Section(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _ViewList_Section(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _ViewList_Section()
{
  return &type metadata for _ViewList_Section;
}

ValueMetadata *type metadata accessor for _ViewList_Section.Info()
{
  return &type metadata for _ViewList_Section.Info;
}

uint64_t type metadata completion function for ModifiedViewList.ListModifier()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for _ViewList_Subgraph()
{
  return objc_opt_self();
}

uint64_t method lookup function for _ViewList_Subgraph()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of _ViewList_Subgraph.__allocating_init(subgraph:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of _ViewList_Subgraph.invalidate()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t type metadata accessor for _ViewList_ReleaseElements()
{
  return objc_opt_self();
}

uint64_t method lookup function for _ViewList_ReleaseElements()
{
  return swift_lookUpClassMethod();
}

uint64_t initializeBufferWithCopyOfBuffer for _ViewList_ID.Explicit(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for _ViewList_ID.Explicit(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  return a1;
}

__n128 __swift_memcpy21_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_QWORD *)(a1 + 13) = *(_QWORD *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for _ViewList_ID.Explicit(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ViewList_ID.Explicit(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 21))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _ViewList_ID.Explicit(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 21) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 21) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _ViewList_ID.Explicit()
{
  return &type metadata for _ViewList_ID.Explicit;
}

uint64_t destroy for SubgraphList(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  return swift_release();
}

void *type metadata accessor for SubgraphList()
{
  return &unk_2506149A0;
}

uint64_t initializeWithCopy for SubgraphList(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  return a1;
}

uint64_t *assignWithCopy for SubgraphList(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SubgraphList(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for SubgraphElements()
{
  return &type metadata for SubgraphElements;
}

uint64_t destroy for BaseViewList(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for BaseViewList(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for BaseViewList(uint64_t a1, uint64_t a2)
{
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for BaseViewList(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for BaseViewList(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BaseViewList(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BaseViewList()
{
  return &type metadata for BaseViewList;
}

ValueMetadata *type metadata accessor for _ViewListOutputs.ApplyModifiers()
{
  return &type metadata for _ViewListOutputs.ApplyModifiers;
}

uint64_t initializeWithCopy for MergedElements(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_unknownObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for MergedElements(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

_OWORD *assignWithTake for MergedElements(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;

  swift_unknownObjectRelease();
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  return a1;
}

void *type metadata accessor for MergedElements()
{
  return &unk_25061B068;
}

uint64_t type metadata completion function for UnaryElements()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for UnaryElements(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 48 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    *(_DWORD *)(v10 + 8) = *(_DWORD *)(v11 + 8);
    *(_QWORD *)(v10 + 16) = *(_QWORD *)(v11 + 16);
    *(_DWORD *)(v10 + 24) = *(_DWORD *)(v11 + 24);
    *(_DWORD *)(v10 + 28) = *(_DWORD *)(v11 + 28);
    *(_DWORD *)(v10 + 32) = *(_DWORD *)(v11 + 32);
    *(_DWORD *)(v10 + 36) = *(_DWORD *)(v11 + 36);
    *(_QWORD *)(v10 + 40) = *(_QWORD *)(v11 + 40);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for UnaryElements(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for UnaryElements(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 + 16);
  *(_DWORD *)(v7 + 24) = *(_DWORD *)(v8 + 24);
  *(_DWORD *)(v7 + 28) = *(_DWORD *)(v8 + 28);
  *(_DWORD *)(v7 + 32) = *(_DWORD *)(v8 + 32);
  *(_DWORD *)(v7 + 36) = *(_DWORD *)(v8 + 36);
  *(_QWORD *)(v7 + 40) = *(_QWORD *)(v8 + 40);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for UnaryElements(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  swift_retain();
  swift_release();
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(v7 + 24) = *(_DWORD *)(v8 + 24);
  *(_DWORD *)(v7 + 28) = *(_DWORD *)(v8 + 28);
  *(_DWORD *)(v7 + 32) = *(_DWORD *)(v8 + 32);
  *(_DWORD *)(v7 + 36) = *(_DWORD *)(v8 + 36);
  *(_QWORD *)(v7 + 40) = *(_QWORD *)(v8 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for UnaryElements(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v10 = v8[1];
  v9 = v8[2];
  *v7 = *v8;
  v7[1] = v10;
  v7[2] = v9;
  return a1;
}

uint64_t assignWithTake for UnaryElements(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  swift_release();
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 + 16);
  swift_release();
  *(_DWORD *)(v7 + 24) = *(_DWORD *)(v8 + 24);
  *(_DWORD *)(v7 + 28) = *(_DWORD *)(v8 + 28);
  *(_DWORD *)(v7 + 32) = *(_DWORD *)(v8 + 32);
  *(_DWORD *)(v7 + 36) = *(_DWORD *)(v8 + 36);
  *(_QWORD *)(v7 + 40) = *(_QWORD *)(v8 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UnaryElements(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 48) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_234EAE0E0 + 4 * byte_2352AB166[v10]))();
  }
}

void storeEnumTagSinglePayload for UnaryElements(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFD0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFD0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 48);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_234EAE258()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x234EAE2E0);
}

void sub_234EAE260(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x234EAE268);
  JUMPOUT(0x234EAE2E0);
}

void sub_234EAE2AC()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x234EAE2E0);
}

void sub_234EAE2B4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x234EAE2E0);
}

uint64_t sub_234EAE2BC(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFF)
  {
    if (a2 < 0)
      JUMPOUT(0x234EAE2C8);
    *(_QWORD *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) = (a2 - 1);
LABEL_6:
    JUMPOUT(0x234EAE2E0);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

unint64_t instantiation function for generic protocol witness table for _ViewListOutputs.ApplyModifiers(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _ViewListOutputs.ApplyModifiers and conformance _ViewListOutputs.ApplyModifiers();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t specialized BodyUnaryViewGenerator.tryToReuse(by:indirectMap:testOnly:)()
{
  uint64_t v0;
  uint64_t v1;

  type metadata accessor for (_:)();
  v0 = AGCompareValues();
  if ((v0 & 1) == 0)
  {
    v1 = swift_beginAccess();
    if (static ReuseTrace.recorder)
      v1 = AGGraphAddTraceEvent();
    MEMORY[0x24BDAC7A8](v1);
    specialized static Log.graphReuse(_:)(partial apply for implicit closure #1 in BodyUnaryViewGenerator.tryToReuse(by:indirectMap:testOnly:));
  }
  return v0;
}

uint64_t partial apply for implicit closure #1 in BodyUnaryViewGenerator.tryToReuse(by:indirectMap:testOnly:)()
{
  return implicit closure #1 in BodyUnaryViewGenerator.tryToReuse(by:indirectMap:testOnly:)();
}

uint64_t specialized UnaryElements.tryToReuseElement(at:by:at:indirectMap:testOnly:)(_QWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  char *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t DynamicType;
  void (*v32)(char *, char *, uint64_t);
  _QWORD *v33;
  char v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  char v37;
  uint64_t v38;
  char v39;
  char *v40;
  char *v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  char v59;
  char v60;
  char v61;
  unsigned int v63;
  int v64;
  int v65;
  int v66;
  __int128 v67;
  __int128 v68;
  unsigned int v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  int v78;
  char *v79;
  __int128 v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  unsigned __int8 v93[8];
  uint64_t v94;

  v78 = a3;
  v77 = a2;
  v94 = *MEMORY[0x24BDAC8D0];
  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v63 - v9;
  v11 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v79 = (char *)&v63 - v16;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v63 - v18;
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v63 - v21;
  outlined init with copy of AnyTrackedValue((uint64_t)a1, (uint64_t)&v86);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for _ViewList_Elements);
  v23 = swift_dynamicCast();
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  if (!v23)
  {
    v24(v10, 1, 1, a4);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    specialized static Log.graphReuse(_:)();
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    DynamicType = swift_getDynamicType();
    swift_beginAccess();
    if (static ReuseTrace.recorder)
    {
      *(_QWORD *)&v80 = DynamicType;
      AGGraphAddTraceEvent();
    }
    goto LABEL_18;
  }
  v76 = v14;
  v25 = 1;
  v24(v10, 0, 1, a4);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v22, v10, a4);
  v26 = *(_QWORD **)&v4[*(int *)(a4 + 36)];
  v27 = MEMORY[0x24BEE4B08];
  v86 = MEMORY[0x24BEE4B08];
  v93[0] = 1;
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for BodyInput<()>, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for BodyInput);
  v29 = v28;
  if (v26)
  {
    v30 = MEMORY[0x23B7C80F8](v28);
    *(_QWORD *)&v80 = 0;
    specialized PropertyList.Element.forEach(filter:_:)((uint64_t *)&v80, v26, v30, &v86, v93);
    v25 = v93[0];
  }
  swift_bridgeObjectRelease();
  v32 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v32(v19, v22, a4);
  if (!v25)
  {
    v36 = *(void (**)(char *, uint64_t))(v11 + 8);
    v36(v19, a4);
LABEL_17:
    v36(v22, a4);
LABEL_18:
    v61 = 0;
    return v61 & 1;
  }
  v33 = *(_QWORD **)&v19[*(int *)(a4 + 36)];
  v86 = v27;
  v34 = 1;
  v93[0] = 1;
  if (v33)
  {
    v35 = MEMORY[0x23B7C80F8](v29);
    *(_QWORD *)&v80 = 0;
    specialized PropertyList.Element.forEach(filter:_:)((uint64_t *)&v80, v33, v35, &v86, v93);
    v34 = v93[0];
  }
  swift_bridgeObjectRelease();
  v36 = *(void (**)(char *, uint64_t))(v11 + 8);
  v36(v19, a4);
  if ((v34 & 1) == 0)
    goto LABEL_17;
  v37 = v78 & 1;
  v38 = v77;
  v39 = (*(uint64_t (**)(char *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a4 + 24) + 16))(v22, v77, v78 & 1, *(_QWORD *)(a4 + 16));
  v40 = v79;
  v32(v79, v4, a4);
  v41 = v76;
  v32(v76, v22, a4);
  if ((v39 & 1) != 0)
  {
    v43 = *(int *)(a4 + 36);
    v44 = *(_QWORD *)&v40[v43];
    v71 = *(_DWORD *)&v40[v43 + 8];
    v70 = *(_QWORD *)&v40[v43 + 16];
    v72 = *(_DWORD *)&v40[v43 + 24];
    *(_QWORD *)&v42 = *(_QWORD *)&v40[v43 + 28];
    v68 = v42;
    v66 = *(_DWORD *)&v40[v43 + 36];
    v45 = *(_QWORD *)&v40[v43 + 40];
    v46 = &v41[v43];
    v47 = *(_QWORD *)v46;
    v48 = *((unsigned int *)v46 + 2);
    v49 = *((_QWORD *)v46 + 2);
    v69 = *((_DWORD *)v46 + 6);
    *(_QWORD *)&v42 = *(_QWORD *)(v46 + 28);
    v67 = v42;
    v64 = *((_DWORD *)v46 + 9);
    v50 = *((_QWORD *)v46 + 5);
    v75 = v47;
    swift_retain();
    swift_retain();
    v73 = v50;
    swift_bridgeObjectRetain();
    v74 = v44;
    swift_retain();
    v51 = v70;
    swift_retain();
    v52 = v45;
    v53 = v51;
    v54 = v71;
    swift_bridgeObjectRetain();
    v65 = v48;
    v55 = specialized Attribute.tryToReuse(by:indirectMap:testOnly:)(v48, v38, v37, v54);
    v56 = v38;
    v57 = v49;
    v58 = v72;
    if ((v55 & 1) != 0
      && (v59 = v78 & 1, (specialized Attribute.tryToReuse(by:indirectMap:testOnly:)(v69, v56, v78 & 1, v72) & 1) != 0)
      && (swift_beginAccess(),
          v63 = *(_DWORD *)(v53 + 16),
          swift_beginAccess(),
          (specialized Attribute.tryToReuse(by:indirectMap:testOnly:)(*(unsigned int *)(v57 + 16), v56, v59, v63) & 1) != 0)
      && (v60 = v78 & 1,
          (specialized Attribute.tryToReuse(by:indirectMap:testOnly:)(v67, v56, v78 & 1, v68) & 1) != 0))
    {
      v86 = v74;
      v87 = v54;
      v88 = v53;
      v89 = v58;
      v90 = v68;
      v91 = v66;
      v92 = v52;
      *(_QWORD *)&v80 = v75;
      DWORD2(v80) = v65;
      v81 = v57;
      v82 = v69;
      v83 = v67;
      v84 = v64;
      v85 = v73;
      v61 = _GraphInputs.reuseCustomInputs(by:indirectMap:testOnly:)(&v80, v56, v60);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      specialized static Log.graphReuse(_:)();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v61 = 0;
    }
    v40 = v79;
  }
  else
  {
    v61 = 0;
  }
  v36(v76, a4);
  v36(v40, a4);
  v36(v22, a4);
  return v61 & 1;
}

uint64_t sub_234EAEB38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UnaryElements(0, v5, *(_QWORD *)(v4 + 24), a4) - 8)
                          + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4 + ((v6 + 32) & ~v6), v5);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UnaryElements.makeElements(from:inputs:indirectMap:body:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(_QWORD *)(type metadata accessor for UnaryElements(0, v6, v7, a4) - 8);
  v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  return closure #1 in UnaryElements.makeElements(from:inputs:indirectMap:body:)(a1, v4 + v9, *(_QWORD *)(v4 + ((*(_QWORD *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFF8)), v6, v7);
}

uint64_t outlined destroy of (_ViewList_Elements, Int)?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for Date?(0, &lazy cache variable for type metadata for (_ViewList_Elements, Int)?, (void (*)(uint64_t))type metadata accessor for (_ViewList_Elements, Int));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for (_ViewList_Elements, Int)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (_ViewList_Elements, Int))
  {
    type metadata accessor for ScrollStateRequest(255, &lazy cache variable for type metadata for _ViewList_Elements);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (_ViewList_Elements, Int));
  }
}

void type metadata accessor for _ViewList_ID._Views<_ViewList_ID.ElementCollection>(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for _ViewList_ID._Views<_ViewList_ID.ElementCollection>)
  {
    v2 = lazy protocol witness table accessor for type _ViewList_ID.ElementCollection and conformance _ViewList_ID.ElementCollection();
    v3 = lazy protocol witness table accessor for type _ViewList_ID.ElementCollection and conformance _ViewList_ID.ElementCollection();
    v4 = type metadata accessor for _ViewList_ID._Views(a1, (uint64_t)&type metadata for _ViewList_ID.ElementCollection, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for _ViewList_ID._Views<_ViewList_ID.ElementCollection>);
  }
}

uint64_t partial apply for implicit closure #1 in TypedUnaryViewGenerator.tryToReuse(by:indirectMap:testOnly:)()
{
  return implicit closure #1 in TypedUnaryViewGenerator.tryToReuse(by:indirectMap:testOnly:)();
}

uint64_t sub_234EAEDDC()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in ModifiedElements.makeElements(from:inputs:indirectMap:body:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in closure #1 in ModifiedElements.makeElements(from:inputs:indirectMap:body:)(a1, a2, a3, a4, *(uint64_t (**)(uint64_t, uint64_t *, uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>), uint64_t))(v4 + 32), *(_QWORD *)(v4 + 40), *(_OWORD **)(v4 + 48), *(_QWORD *)(v4 + 56), *(_QWORD *)(v4 + 64), *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24)) & 1;
}

uint64_t sub_234EAEE24()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in ModifiedElements.makeElements(from:inputs:indirectMap:body:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in closure #1 in closure #1 in ModifiedElements.makeElements(from:inputs:indirectMap:body:)(a1, (__int128 *)(v2 + 32), *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 96), *(_QWORD *)(v2 + 104), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_234EAEE7C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined destroy of SubgraphElements?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for SubgraphElements?, (uint64_t)&type metadata for SubgraphElements, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined destroy of SubgraphElements(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_release();
  return a1;
}

uint64_t type metadata accessor for ModifiedViewList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ModifiedViewList);
}

unint64_t lazy protocol witness table accessor for type BaseViewList.Init and conformance BaseViewList.Init()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BaseViewList.Init and conformance BaseViewList.Init;
  if (!lazy protocol witness table cache variable for type BaseViewList.Init and conformance BaseViewList.Init)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for BaseViewList.Init, &type metadata for BaseViewList.Init);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BaseViewList.Init and conformance BaseViewList.Init);
  }
  return result;
}

uint64_t destroy for BaseViewList.Init(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for BaseViewList.Init(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 52) = *(_QWORD *)(a2 + 52);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for BaseViewList.Init(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 52);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  *(_QWORD *)(a1 + 52) = v4;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  return a1;
}

uint64_t assignWithTake for BaseViewList.Init(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 52) = *(_QWORD *)(a2 + 52);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  return a1;
}

uint64_t getEnumTagSinglePayload for BaseViewList.Init(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BaseViewList.Init(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BaseViewList.Init()
{
  return &type metadata for BaseViewList.Init;
}

uint64_t destroy for ModifiedElements(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ModifiedElements(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ModifiedElements(uint64_t a1, uint64_t a2)
{
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ModifiedElements(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_release();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ModifiedElements(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ModifiedElements(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for SubgraphList.Transform()
{
  return &unk_250614930;
}

unint64_t instantiation function for generic protocol witness table for BaseViewList.Init(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type BaseViewList.Init and conformance BaseViewList.Init();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for ModifiedViewList.Transform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ModifiedViewList.Transform);
}

uint64_t destroy for ModifiedViewList.Transform()
{
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ModifiedViewList.Transform(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ModifiedViewList.Transform(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ModifiedViewList.Transform(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t FloatingPoint.isAlmostEqual(to:tolerance:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  void (*v24)(char *, uint64_t);
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char v29;
  _QWORD v31[2];
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;

  v35 = a2;
  v6 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v33 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v31 - v9;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v31 - v12;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v31 - v15;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)v31 - v18;
  v34 = v3;
  v21 = v20;
  v22 = dispatch thunk of FloatingPoint.isFinite.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v19, a1, a3);
  if ((v22 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v19, a3);
    goto LABEL_5;
  }
  v32 = v16;
  v23 = dispatch thunk of FloatingPoint.isFinite.getter();
  v24 = *(void (**)(char *, uint64_t))(v6 + 8);
  v24(v19, a3);
  if ((v23 & 1) == 0)
  {
LABEL_5:
    v29 = FloatingPoint.rescaledAlmostEqual(to:tolerance:)(a1, v35, a3, v21);
    return v29 & 1;
  }
  v31[1] = *(_QWORD *)(*(_QWORD *)(v21 + 24) + 8);
  v25 = v13;
  abs<A>(_:)();
  v26 = v10;
  abs<A>(_:)();
  v27 = v33;
  dispatch thunk of static FloatingPoint.leastNormalMagnitude.getter();
  static Array._allocateUninitialized(_:)();
  max<A>(_:_:_:_:)();
  swift_bridgeObjectRelease();
  v24(v27, a3);
  v24(v26, a3);
  v24(v25, a3);
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  abs<A>(_:)();
  v24(v26, a3);
  v28 = v32;
  dispatch thunk of static Numeric.* infix(_:_:)();
  v29 = dispatch thunk of static Comparable.< infix(_:_:)();
  v24(v26, a3);
  v24(v25, a3);
  v24(v28, a3);
  return v29 & 1;
}

uint64_t FloatingPoint.rescaledAlmostEqual(to:tolerance:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  void (*v33)(char *, uint64_t);
  char v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t AssociatedConformanceWitness;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  void (*v49)(char *, uint64_t);
  void (*v51)(char *, uint64_t);
  void (*v52)(char *, uint64_t, uint64_t);
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t AssociatedTypeWitness;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v62 = a2;
  swift_getAssociatedTypeWitness();
  v64 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 8) + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v61 = (char *)&v51 - v8;
  v63 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) + 8) + 16);
  v57 = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](v57);
  v56 = (char *)&v51 - v9;
  v58 = swift_checkMetadataState();
  MEMORY[0x24BDAC7A8](v58);
  v60 = (char *)&v51 - v10;
  v11 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v51 - v16;
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v51 - v19;
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v51 - v22;
  v65 = v4;
  v66 = a4;
  v24 = dispatch thunk of FloatingPoint.isNaN.getter();
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v26 = a3;
  v25(v23, a1, a3);
  if ((v24 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v23, a3);
    v27 = 0;
  }
  else
  {
    v52 = v25;
    v53 = v14;
    v29 = v65;
    v28 = v66;
    v54 = v20;
    v55 = v17;
    v30 = v63;
    v31 = v64;
    v32 = dispatch thunk of FloatingPoint.isNaN.getter();
    v33 = *(void (**)(char *, uint64_t))(v11 + 8);
    v33(v23, v26);
    if ((v32 & 1) != 0)
    {
      v27 = 0;
    }
    else
    {
      if ((dispatch thunk of FloatingPoint.isInfinite.getter() & 1) != 0)
      {
        if ((dispatch thunk of FloatingPoint.isInfinite.getter() & 1) == 0)
        {
          dispatch thunk of FloatingPoint.sign.getter();
          v35 = v33;
          v51 = v33;
          v36 = v28;
          v65 = a1;
          v37 = v55;
          dispatch thunk of static FloatingPoint.greatestFiniteMagnitude.getter();
          dispatch thunk of FloatingPoint.exponent.getter();
          v35(v37, v26);
          v38 = v30;
          v39 = v57;
          AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
          v41 = v56;
          MEMORY[0x23B7C7558](&qword_235283E58, 512, v39, AssociatedConformanceWitness);
          v42 = v53;
          MEMORY[0x23B7C742C](v41, v26, v38);
          v43 = v54;
          dispatch thunk of FloatingPoint.init(sign:exponent:significand:)();
          v44 = v31;
          v46 = v58;
          v45 = AssociatedTypeWitness;
          v47 = swift_getAssociatedConformanceWitness();
          v48 = v61;
          MEMORY[0x23B7C7558](&unk_2352AC270, 257, v45, v47);
          MEMORY[0x23B7C742C](v48, v46, v44);
          v52(v42, v65, v26);
          dispatch thunk of FloatingPoint.init(sign:exponent:significand:)();
          v27 = FloatingPoint.isAlmostEqual(to:tolerance:)(v37, v62, v26, v36);
          v49 = v51;
          v51(v37, v26);
          v49(v43, v26);
          return v27 & 1;
        }
        v34 = dispatch thunk of static Equatable.== infix(_:_:)();
      }
      else
      {
        v34 = FloatingPoint.rescaledAlmostEqual(to:tolerance:)(v29, v62, v26, v28);
      }
      v27 = v34;
    }
  }
  return v27 & 1;
}

uint64_t FloatingPoint.isAlmostEqual(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void (*v10)(char *, uint64_t);
  char v11;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v13 - v8;
  dispatch thunk of static FloatingPoint.ulpOfOne.getter();
  dispatch thunk of FloatingPoint.squareRoot()();
  v10 = *(void (**)(char *, uint64_t))(v4 + 8);
  v10(v6, a2);
  v11 = FloatingPoint.isAlmostEqual(to:tolerance:)(a1, (uint64_t)v9, a2);
  v10(v9, a2);
  return v11 & 1;
}

uint64_t FloatingPoint.isAlmostZero(absoluteTolerance:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char v6;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  abs<A>(_:)();
  v6 = dispatch thunk of static Comparable.< infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, a2);
  return v6 & 1;
}

Swift::Bool __swiftcall FloatingPoint.isAlmostZero()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void (*v8)(char *, uint64_t);
  char v9;
  uint64_t v11;

  v1 = v0;
  v2 = *(_QWORD *)(v0 - 8);
  ((void (*)())MEMORY[0x24BDAC7A8])();
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v11 - v6;
  dispatch thunk of static FloatingPoint.ulpOfOne.getter();
  dispatch thunk of FloatingPoint.squareRoot()();
  v8 = *(void (**)(char *, uint64_t))(v2 + 8);
  v8(v4, v1);
  v9 = FloatingPoint.isAlmostZero(absoluteTolerance:)((uint64_t)v7, v1);
  v8(v7, v1);
  return v9 & 1;
}

void TimeDataFormatting.Resolvable.entries(from:mode:)()
{
  type metadata accessor for TimeDataFormatting.Configuration();
}

void sub_234EB0098(uint64_t a1)
{
  uint64_t v1;
  int v2;
  char v3;
  unsigned __int8 v4;
  _QWORD v5[14];

  TimeDataFormatting.Configuration.formatAndFrequency(for:mode:)((uint64_t)v5, (char *)&v4, v1, &v3, a1);
  v2 = v4;
  __swift_project_boxed_opaque_existential_1(v5, v5[3]);
  if (v2 == 3)
    DiscreteFormatStyle.complyingFormatStyleEntries<A>(from:for:)(v1);
  v4 = v2;
  DiscreteFormatStyle.fallbackRedactionEntries<A>(from:for:allowedFrequency:)(v1);
}

void DiscreteFormatStyle.fallbackRedactionEntries<A>(from:for:allowedFrequency:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v1);
  v2 = type metadata accessor for TimeDataFormatting.EntriesState();
  MEMORY[0x24BDAC7A8](v2);
  type metadata accessor for TimeDataFormatting.FallbackRedactionEntries();
}

void sub_234EB0240(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char v18;
  uint64_t v19;

  MEMORY[0x24BDAC7A8](a1);
  v17 = (char *)&a9 - v16;
  v18 = *v13;
  v19 = type metadata accessor for Date();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v11, *(_QWORD *)(v15 - 144), v19);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v15 - 152) + 16))(v14, *(_QWORD *)(v15 - 136), v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v15 - 128) + 16))(v12, *(_QWORD *)(v15 - 120), v10);
  *(_BYTE *)(v15 - 112) = v18;
  TimeDataFormatting.FallbackRedactionEntries.init(state:source:format:allowedFrequency:)(v11, (uint64_t)v17);
}

uint64_t sub_234EB02F8()
{
  uint64_t v0;

  MEMORY[0x23B7C9C04](&protocol conformance descriptor for TimeDataFormatting.FallbackRedactionEntries<A, B>, v0);
  return AnySequence.init<A>(_:)();
}

void DiscreteFormatStyle.complyingFormatStyleEntries<A>(from:for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v1);
  v2 = type metadata accessor for TimeDataFormatting.EntriesState();
  MEMORY[0x24BDAC7A8](v2);
  type metadata accessor for TimeDataFormatting.ComplyingFormatStyleEntries();
}

void sub_234EB041C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;

  MEMORY[0x24BDAC7A8](a1);
  v17 = (char *)&a9 - v16;
  v18 = type metadata accessor for Date();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v12, *(_QWORD *)(v15 - 144), v18);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v9 + 16))(v14, *(_QWORD *)(v15 - 136), v11);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v15 - 128) + 16))(v13, *(_QWORD *)(v15 - 120), v10);
  TimeDataFormatting.ComplyingFormatStyleEntries.init(state:source:format:)(v12, (uint64_t)v17);
}

uint64_t sub_234EB04C4()
{
  uint64_t v0;

  MEMORY[0x23B7C9C04](&protocol conformance descriptor for TimeDataFormatting.ComplyingFormatStyleEntries<A, B>, v0);
  return AnySequence.init<A>(_:)();
}

void protocol witness for TimelineSchedule.entries(from:mode:) in conformance TimeDataFormatting.Resolvable<A, B>()
{
  TimeDataFormatting.Resolvable.entries(from:mode:)();
}

uint64_t sub_234EB051C(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t type metadata accessor for TimeDataFormatting.EntriesState()
{
  uint64_t result;

  result = type metadata singleton initialization cache for TimeDataFormatting.EntriesState;
  if (!type metadata singleton initialization cache for TimeDataFormatting.EntriesState)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata accessor for TimeDataFormatting.FallbackRedactionEntries()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void TimeDataFormatting.ComplyingFormatStyleEntries.init(state:source:format:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with take of TimeDataFormatting.EntriesState(a1, a2);
  type metadata accessor for TimeDataFormatting.ComplyingFormatStyleEntries();
}

uint64_t sub_234EB05C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v5 + *(int *)(a1 + 52), v4, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v5 + *(int *)(a1 + 56), v3, v1);
}

void TimeDataFormatting.FallbackRedactionEntries.init(state:source:format:allowedFrequency:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with take of TimeDataFormatting.EntriesState(a1, a2);
  type metadata accessor for TimeDataFormatting.FallbackRedactionEntries();
}

uint64_t sub_234EB0678(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v5 + a1[13], v4, v2);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v5 + a1[14], v3, v1);
  *(_BYTE *)(v5 + a1[15]) = v6;
  return result;
}

uint64_t outlined init with take of TimeDataFormatting.EntriesState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TimeDataFormatting.EntriesState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for TimeDataFormatting.ComplyingFormatStyleEntries()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t type metadata completion function for TimeDataFormatting.ComplyingFormatStyleEntries()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = type metadata accessor for TimeDataFormatting.EntriesState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TimeDataFormatting.ComplyingFormatStyleEntries(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  unint64_t v24;
  size_t __n;
  uint64_t v27;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v8 + 1 + v10;
  v12 = *(_QWORD *)(v9 + 64);
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v14 = *(_DWORD *)(v13 + 80);
  v15 = *(_DWORD *)(v7 + 80);
  v16 = (*(_BYTE *)(v9 + 80) | v15 | *(_BYTE *)(v13 + 80));
  if (v16 <= 7
    && ((v12 + v14 + (v11 & ~v10)) & (unint64_t)~v14) + *(_QWORD *)(v13 + 64) <= 0x18
    && ((*(_DWORD *)(v9 + 80) | v15 | *(_DWORD *)(v13 + 80)) & 0x100000) == 0)
  {
    v20 = *((unsigned __int8 *)a2 + v8);
    if (v20 >= 2)
    {
      if (v8 <= 3)
        v21 = v8;
      else
        v21 = 4;
      __asm { BR              X15 }
    }
    v22 = ~v10;
    v27 = *(_QWORD *)(a3 + 24);
    __n = *(_QWORD *)(a3 + 16);
    if (v20 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
      v23 = __n;
      *((_BYTE *)a1 + v8) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
      v23 = __n;
      *((_BYTE *)a1 + v8) = 0;
    }
    v24 = ((unint64_t)a2 + v11) & v22;
    (*(void (**)(unint64_t, unint64_t, size_t))(v9 + 16))(((unint64_t)a1 + v11) & v22, v24, v23);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v13 + 16))(((((unint64_t)a1 + v11) & v22) + v12 + v14) & ~v14, (v24 + v12 + v14) & ~v14, v27);
  }
  else
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v16 + 16) & ~v16));
    swift_retain();
  }
  return a1;
}

uint64_t initializeWithCopy for TimeDataFormatting.ComplyingFormatStyleEntries(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = *(unsigned __int8 *)(a2 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X13 }
  }
  if (v9 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, v6);
    *(_BYTE *)(a1 + v8) = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, v6);
    *(_BYTE *)(a1 + v8) = 0;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = v8 + v12 + 1;
  v14 = (v13 + a1) & ~v12;
  v15 = (v13 + a2) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v11 + 16))(v14, v15);
  v16 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v16 + 16))((*(_QWORD *)(v11 + 64) + *(unsigned __int8 *)(v16 + 80) + v14) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), (*(_QWORD *)(v11 + 64) + *(unsigned __int8 *)(v16 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  return a1;
}

uint64_t assignWithCopy for TimeDataFormatting.ComplyingFormatStyleEntries(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    v6 = type metadata accessor for Date();
    v7 = *(_QWORD *)(v6 - 8);
    v8 = *(_QWORD *)(v7 + 64);
    if (*(unsigned __int8 *)(a1 + v8) >= 2u)
    {
      if (v8 <= 3)
        v9 = v8;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v10 = *(unsigned __int8 *)(a2 + v8);
    if (v10 >= 2)
    {
      if (v8 <= 3)
        v11 = v8;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, v6);
      *(_BYTE *)(a1 + v8) = 1;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, v6);
      *(_BYTE *)(a1 + v8) = 0;
    }
  }
  v12 = type metadata accessor for Date();
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + v14 + 1;
  v16 = (v15 + a1) & ~v14;
  v17 = (v15 + a2) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 24))(v16, v17);
  v18 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v18 + 24))((*(_QWORD *)(v13 + 64) + *(unsigned __int8 *)(v18 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80), (*(_QWORD *)(v13 + 64) + *(unsigned __int8 *)(v18 + 80) + v17) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
  return a1;
}

uint64_t initializeWithTake for TimeDataFormatting.ComplyingFormatStyleEntries(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = *(unsigned __int8 *)(a2 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X13 }
  }
  if (v9 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, v6);
    *(_BYTE *)(a1 + v8) = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, v6);
    *(_BYTE *)(a1 + v8) = 0;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = v8 + v12 + 1;
  v14 = (v13 + a1) & ~v12;
  v15 = (v13 + a2) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v11 + 32))(v14, v15);
  v16 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v16 + 32))((*(_QWORD *)(v11 + 64) + *(unsigned __int8 *)(v16 + 80) + v14) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), (*(_QWORD *)(v11 + 64) + *(unsigned __int8 *)(v16 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  return a1;
}

uint64_t assignWithTake for TimeDataFormatting.ComplyingFormatStyleEntries(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    v6 = type metadata accessor for Date();
    v7 = *(_QWORD *)(v6 - 8);
    v8 = *(_QWORD *)(v7 + 64);
    if (*(unsigned __int8 *)(a1 + v8) >= 2u)
    {
      if (v8 <= 3)
        v9 = v8;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v10 = *(unsigned __int8 *)(a2 + v8);
    if (v10 >= 2)
    {
      if (v8 <= 3)
        v11 = v8;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, v6);
      *(_BYTE *)(a1 + v8) = 1;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, v6);
      *(_BYTE *)(a1 + v8) = 0;
    }
  }
  v12 = type metadata accessor for Date();
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + v14 + 1;
  v16 = (v15 + a1) & ~v14;
  v17 = (v15 + a2) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 40))(v16, v17);
  v18 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v18 + 40))((*(_QWORD *)(v13 + 64) + *(unsigned __int8 *)(v18 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80), (*(_QWORD *)(v13 + 64) + *(unsigned __int8 *)(v18 + 80) + v17) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for TimeDataFormatting.ComplyingFormatStyleEntries(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  int v21;
  unsigned int v23;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_DWORD *)(v8 + 84);
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v11 = *(unsigned int *)(v10 + 84);
  if (v9 <= v11)
    v12 = *(_DWORD *)(v10 + 84);
  else
    v12 = *(_DWORD *)(v8 + 84);
  if (v12 <= 0xFD)
    v13 = 253;
  else
    v13 = v12;
  if (!a2)
    return 0;
  v14 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  v15 = *(unsigned __int8 *)(v8 + 80);
  v16 = v14 + v15 + 1;
  v17 = *(_QWORD *)(v8 + 64);
  v18 = *(unsigned __int8 *)(v10 + 80);
  if (a2 <= v13)
    goto LABEL_27;
  v19 = ((v17 + v18 + (v16 & ~v15)) & ~v18) + *(_QWORD *)(v10 + 64);
  v20 = 8 * v19;
  if (v19 <= 3)
  {
    v23 = ((a2 - v13 + ~(-1 << v20)) >> v20) + 1;
    if (HIWORD(v23))
    {
      v21 = *(_DWORD *)(a1 + v19);
      if (!v21)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v23 > 0xFF)
    {
      v21 = *(unsigned __int16 *)(a1 + v19);
      if (!*(_WORD *)(a1 + v19))
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v23 < 2)
    {
LABEL_27:
      if (v12 > 0xFD)
      {
        v27 = (v16 + a1) & ~v15;
        if (v9 == v13)
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v8 + 48))(v27, *(unsigned int *)(v8 + 84), v7);
        else
          return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v10 + 48))((v27 + v17 + v18) & ~v18, v11, *(_QWORD *)(a3 + 24));
      }
      else
      {
        v26 = *(unsigned __int8 *)(a1 + v14);
        if (v26 >= 3)
          return (v26 ^ 0xFF) + 1;
        else
          return 0;
      }
    }
  }
  v21 = *(unsigned __int8 *)(a1 + v19);
  if (!*(_BYTE *)(a1 + v19))
    goto LABEL_27;
LABEL_18:
  v24 = (v21 - 1) << v20;
  if (v19 > 3)
    v24 = 0;
  if ((_DWORD)v19)
  {
    if (v19 <= 3)
      v25 = ((v17 + v18 + (v16 & ~(_DWORD)v15)) & ~(_DWORD)v18) + *(_DWORD *)(v10 + 64);
    else
      v25 = 4;
    __asm { BR              X12 }
  }
  return v13 + v24 + 1;
}

void storeEnumTagSinglePayload for TimeDataFormatting.ComplyingFormatStyleEntries(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  size_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;

  v8 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for Date() - 8) + 64);
  v9 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v10 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v9 + 84) <= *(_DWORD *)(v10 + 84))
    v11 = *(_DWORD *)(v10 + 84);
  else
    v11 = *(_DWORD *)(v9 + 84);
  if (v11 <= 0xFD)
    v12 = 253;
  else
    v12 = v11;
  v13 = ((*(_QWORD *)(v9 + 64)
        + *(unsigned __int8 *)(v10 + 80)
        + ((v8 + 1 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))
      + *(_QWORD *)(v10 + 64);
  if (a3 <= v12)
  {
    v14 = 0;
  }
  else if (v13 <= 3)
  {
    v16 = ((a3 - v12 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
    if (HIWORD(v16))
    {
      v14 = 4u;
    }
    else if (v16 >= 0x100)
    {
      v14 = 2;
    }
    else
    {
      v14 = v16 > 1;
    }
  }
  else
  {
    v14 = 1u;
  }
  if (v12 < a2)
  {
    v15 = ~v12 + a2;
    if (v13 < 4)
    {
      if ((_DWORD)v13)
      {
        v17 = v15 & ~(-1 << (8 * v13));
        bzero(a1, v13);
        if ((_DWORD)v13 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if ((_DWORD)v13 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v13);
      *(_DWORD *)a1 = v15;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X6 }
}

uint64_t type metadata completion function for TimeDataFormatting.FallbackRedactionEntries()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = type metadata accessor for TimeDataFormatting.EntriesState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TimeDataFormatting.FallbackRedactionEntries(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  size_t __n;
  uint64_t v32;
  uint64_t v33;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(a3 + 24);
  v11 = *(_QWORD *)(v9 - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = v8 + 1 + v12;
  v14 = *(_QWORD *)(v10 - 8);
  v15 = *(_DWORD *)(v14 + 80);
  v16 = *(_QWORD *)(v14 + 64);
  v17 = *(_DWORD *)(v7 + 80);
  v18 = (*(_BYTE *)(v11 + 80) | v17 | *(_BYTE *)(v14 + 80));
  if (v18 <= 7
    && v16 + ((*(_QWORD *)(v11 + 64) + v15 + (v13 & ~v12)) & (unint64_t)~v15) + 1 <= 0x18
    && ((*(_DWORD *)(v11 + 80) | v17 | *(_DWORD *)(v14 + 80)) & 0x100000) == 0)
  {
    v22 = *((unsigned __int8 *)a2 + v8);
    if (v22 >= 2)
    {
      if (v8 <= 3)
        v23 = v8;
      else
        v23 = 4;
      __asm { BR              X15 }
    }
    v24 = ~v12;
    v25 = ~v15;
    v32 = *(_QWORD *)(v11 + 64);
    v33 = v10;
    __n = v9;
    if (v22 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
      v26 = __n;
      *((_BYTE *)a1 + v8) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
      v26 = __n;
      *((_BYTE *)a1 + v8) = 0;
    }
    v27 = ((unint64_t)a2 + v13) & v24;
    (*(void (**)(unint64_t, unint64_t, size_t))(v11 + 16))(((unint64_t)a1 + v13) & v24, v27, v26);
    v28 = ((((unint64_t)a1 + v13) & v24) + v32 + v15) & v25;
    v29 = (v27 + v32 + v15) & v25;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v14 + 16))(v28, v29, v33);
    *(_BYTE *)(v28 + v16) = *(_BYTE *)(v29 + v16);
  }
  else
  {
    v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + ((v18 + 16) & ~v18));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for TimeDataFormatting.ComplyingFormatStyleEntries(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (*(unsigned __int8 *)(a1 + v6) >= 2u)
  {
    if (v6 <= 3)
      v7 = v6;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v8 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v9 = (a1 + v6 + *(unsigned __int8 *)(v8 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t))(v8 + 8))(v9);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((v9 + *(_QWORD *)(v8 + 64) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
}

uint64_t initializeWithCopy for TimeDataFormatting.FallbackRedactionEntries(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = *(unsigned __int8 *)(a2 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X13 }
  }
  if (v9 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, v6);
    *(_BYTE *)(a1 + v8) = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, v6);
    *(_BYTE *)(a1 + v8) = 0;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = v8 + v12 + 1;
  v14 = (v13 + a1) & ~v12;
  v15 = (v13 + a2) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v11 + 16))(v14, v15);
  v16 = *(_QWORD *)(v11 + 64);
  v17 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = v16 + v18;
  v20 = (v19 + v14) & ~v18;
  v21 = (v19 + v15) & ~v18;
  (*(void (**)(uint64_t, uint64_t))(v17 + 16))(v20, v21);
  *(_BYTE *)(v20 + *(_QWORD *)(v17 + 64)) = *(_BYTE *)(v21 + *(_QWORD *)(v17 + 64));
  return a1;
}

uint64_t assignWithCopy for TimeDataFormatting.FallbackRedactionEntries(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a1 != a2)
  {
    v6 = type metadata accessor for Date();
    v7 = *(_QWORD *)(v6 - 8);
    v8 = *(_QWORD *)(v7 + 64);
    if (*(unsigned __int8 *)(a1 + v8) >= 2u)
    {
      if (v8 <= 3)
        v9 = v8;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v10 = *(unsigned __int8 *)(a2 + v8);
    if (v10 >= 2)
    {
      if (v8 <= 3)
        v11 = v8;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, v6);
      *(_BYTE *)(a1 + v8) = 1;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, v6);
      *(_BYTE *)(a1 + v8) = 0;
    }
  }
  v12 = type metadata accessor for Date();
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + v14 + 1;
  v16 = (v15 + a1) & ~v14;
  v17 = (v15 + a2) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 24))(v16, v17);
  v18 = *(_QWORD *)(v13 + 64);
  v19 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = v18 + v20;
  v22 = (v21 + v16) & ~v20;
  v23 = (v21 + v17) & ~v20;
  (*(void (**)(uint64_t, uint64_t))(v19 + 24))(v22, v23);
  *(_BYTE *)(v22 + *(_QWORD *)(v19 + 64)) = *(_BYTE *)(v23 + *(_QWORD *)(v19 + 64));
  return a1;
}

uint64_t initializeWithTake for TimeDataFormatting.FallbackRedactionEntries(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = *(unsigned __int8 *)(a2 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X13 }
  }
  if (v9 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, v6);
    *(_BYTE *)(a1 + v8) = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, v6);
    *(_BYTE *)(a1 + v8) = 0;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = v8 + v12 + 1;
  v14 = (v13 + a1) & ~v12;
  v15 = (v13 + a2) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v11 + 32))(v14, v15);
  v16 = *(_QWORD *)(v11 + 64);
  v17 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = v16 + v18;
  v20 = (v19 + v14) & ~v18;
  v21 = (v19 + v15) & ~v18;
  (*(void (**)(uint64_t, uint64_t))(v17 + 32))(v20, v21);
  *(_BYTE *)(v20 + *(_QWORD *)(v17 + 64)) = *(_BYTE *)(v21 + *(_QWORD *)(v17 + 64));
  return a1;
}

uint64_t assignWithTake for TimeDataFormatting.FallbackRedactionEntries(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a1 != a2)
  {
    v6 = type metadata accessor for Date();
    v7 = *(_QWORD *)(v6 - 8);
    v8 = *(_QWORD *)(v7 + 64);
    if (*(unsigned __int8 *)(a1 + v8) >= 2u)
    {
      if (v8 <= 3)
        v9 = v8;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v10 = *(unsigned __int8 *)(a2 + v8);
    if (v10 >= 2)
    {
      if (v8 <= 3)
        v11 = v8;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, v6);
      *(_BYTE *)(a1 + v8) = 1;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, v6);
      *(_BYTE *)(a1 + v8) = 0;
    }
  }
  v12 = type metadata accessor for Date();
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + v14 + 1;
  v16 = (v15 + a1) & ~v14;
  v17 = (v15 + a2) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 40))(v16, v17);
  v18 = *(_QWORD *)(v13 + 64);
  v19 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = v18 + v20;
  v22 = (v21 + v16) & ~v20;
  v23 = (v21 + v17) & ~v20;
  (*(void (**)(uint64_t, uint64_t))(v19 + 40))(v22, v23);
  *(_BYTE *)(v22 + *(_QWORD *)(v19 + 64)) = *(_BYTE *)(v23 + *(_QWORD *)(v19 + 64));
  return a1;
}

uint64_t getEnumTagSinglePayload for TimeDataFormatting.FallbackRedactionEntries(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  int v21;
  unsigned int v23;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_DWORD *)(v8 + 84);
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v11 = *(unsigned int *)(v10 + 84);
  if (v9 <= v11)
    v12 = *(_DWORD *)(v10 + 84);
  else
    v12 = *(_DWORD *)(v8 + 84);
  if (v12 <= 0xFD)
    v13 = 253;
  else
    v13 = v12;
  if (!a2)
    return 0;
  v14 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  v15 = *(unsigned __int8 *)(v8 + 80);
  v16 = v14 + v15 + 1;
  v17 = *(_QWORD *)(v8 + 64);
  v18 = *(unsigned __int8 *)(v10 + 80);
  if (a2 <= v13)
    goto LABEL_27;
  v19 = *(_QWORD *)(v10 + 64) + ((v17 + v18 + (v16 & ~v15)) & ~v18) + 1;
  v20 = 8 * v19;
  if (v19 <= 3)
  {
    v23 = ((a2 - v13 + ~(-1 << v20)) >> v20) + 1;
    if (HIWORD(v23))
    {
      v21 = *(_DWORD *)(a1 + v19);
      if (!v21)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v23 > 0xFF)
    {
      v21 = *(unsigned __int16 *)(a1 + v19);
      if (!*(_WORD *)(a1 + v19))
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v23 < 2)
    {
LABEL_27:
      if (v12 > 0xFD)
      {
        v27 = (v16 + a1) & ~v15;
        if (v9 == v13)
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v8 + 48))(v27, *(unsigned int *)(v8 + 84), v7);
        else
          return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v10 + 48))((v27 + v17 + v18) & ~v18, v11, *(_QWORD *)(a3 + 24));
      }
      else
      {
        v26 = *(unsigned __int8 *)(a1 + v14);
        if (v26 >= 3)
          return (v26 ^ 0xFF) + 1;
        else
          return 0;
      }
    }
  }
  v21 = *(unsigned __int8 *)(a1 + v19);
  if (!*(_BYTE *)(a1 + v19))
    goto LABEL_27;
LABEL_18:
  v24 = (v21 - 1) << v20;
  if (v19 > 3)
    v24 = 0;
  if (*(_DWORD *)(v10 + 64) + (((_DWORD)v17 + (_DWORD)v18 + (v16 & ~(_DWORD)v15)) & ~(_DWORD)v18) != -1)
  {
    if (v19 <= 3)
      v25 = *(_DWORD *)(v10 + 64) + ((v17 + v18 + (v16 & ~(_DWORD)v15)) & ~(_DWORD)v18) + 1;
    else
      v25 = 4;
    __asm { BR              X12 }
  }
  return v13 + v24 + 1;
}

void storeEnumTagSinglePayload for TimeDataFormatting.FallbackRedactionEntries(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  size_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;

  v8 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for Date() - 8) + 64);
  v9 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v10 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v9 + 84) <= *(_DWORD *)(v10 + 84))
    v11 = *(_DWORD *)(v10 + 84);
  else
    v11 = *(_DWORD *)(v9 + 84);
  if (v11 <= 0xFD)
    v12 = 253;
  else
    v12 = v11;
  v13 = *(_QWORD *)(v10 + 64)
      + ((*(_QWORD *)(v9 + 64)
        + *(unsigned __int8 *)(v10 + 80)
        + ((v8 + 1 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))
      + 1;
  if (a3 <= v12)
  {
    v14 = 0;
  }
  else if (v13 <= 3)
  {
    v16 = ((a3 - v12 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
    if (HIWORD(v16))
    {
      v14 = 4u;
    }
    else if (v16 >= 0x100)
    {
      v14 = 2;
    }
    else
    {
      v14 = v16 > 1;
    }
  }
  else
  {
    v14 = 1u;
  }
  if (v12 < a2)
  {
    v15 = ~v12 + a2;
    if (v13 < 4)
    {
      if (*(_DWORD *)(v10 + 64)
         + ((*(_DWORD *)(v9 + 64)
           + *(unsigned __int8 *)(v10 + 80)
           + (((_DWORD)v8 + 1 + *(unsigned __int8 *)(v9 + 80)) & ~*(unsigned __int8 *)(v9 + 80))) & ~*(unsigned __int8 *)(v10 + 80)) != -1)
      {
        v17 = v15 & ~(-1 << (8 * v13));
        bzero(a1, v13);
        if ((_DWORD)v13 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if ((_DWORD)v13 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v13);
      *(_DWORD *)a1 = v15;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X6 }
}

uint64_t *initializeBufferWithCopyOfBuffer for TimeDataFormatting.EntriesState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else if (swift_getEnumCaseMultiPayload() > 1)
  {
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  else
  {
    v7 = type metadata accessor for Date();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for TimeDataFormatting.EntriesState(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  if (result <= 1)
  {
    v3 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  return result;
}

void *initializeWithCopy for TimeDataFormatting.EntriesState(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() > 1)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for Date();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithCopy for TimeDataFormatting.EntriesState(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of TimeDataFormatting.EntriesState((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() > 1)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for Date();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t outlined destroy of TimeDataFormatting.EntriesState(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TimeDataFormatting.EntriesState();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *initializeWithTake for TimeDataFormatting.EntriesState(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() > 1)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for Date();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for TimeDataFormatting.EntriesState(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of TimeDataFormatting.EntriesState((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() > 1)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for Date();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for TimeDataFormatting.EntriesState()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void implicit closure #1 in TimeDataFormatting.ComplyingFormatStyleEntries.next()()
{
  type metadata accessor for TimeDataFormatting.ComplyingFormatStyleEntries();
}

void (*sub_234EB2B58(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  double v8;
  uint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  char *v12;
  _BYTE v14[96];

  v7 = *(_QWORD *)(a1 - 8);
  v8 = MEMORY[0x24BDAC7A8](a1);
  v10 = &v14[-v9];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v7 + 16))(&v14[-v9], v5, a1, v8);
  v11 = (*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v12 = (char *)swift_allocObject();
  *((_QWORD *)v12 + 2) = v4;
  *((_QWORD *)v12 + 3) = v3;
  *((_QWORD *)v12 + 4) = v2;
  *((_QWORD *)v12 + 5) = v1;
  (*(void (**)(char *, _BYTE *, uint64_t))(v7 + 32))(&v12[v11], v10, a1);
  return partial apply for implicit closure #2 in implicit closure #1 in TimeDataFormatting.ComplyingFormatStyleEntries.next();
}

uint64_t TimeDataFormatting.ComplyingFormatStyleEntries.nextEntry(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char v27[16];
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v26 = a3;
  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v25 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v25 - v19;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v13, v3 + *(int *)(a2 + 52), v9, v18);
  v21 = *(_QWORD *)(a2 + 24);
  v28 = v9;
  v29 = v21;
  v30 = *(_OWORD *)(a2 + 32);
  v31 = v3;
  TimeDataSourceStorage.withValue(for:call:)(a1, (void (*)(char *))partial apply for closure #1 in TimeDataFormatting.ComplyingFormatStyleEntries.nextEntry(for:), (uint64_t)v27, v9, v30, (uint64_t)v20);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  outlined init with copy of Date?((uint64_t)v20, (uint64_t)v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v16, 1, v6) == 1)
  {
    outlined destroy of Date?((uint64_t)v16);
    return outlined init with take of Date?((uint64_t)v20, v26);
  }
  v22 = v25;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v25, v16, v6);
  lazy protocol witness table accessor for type Date and conformance Date();
  if ((dispatch thunk of static Comparable.< infix(_:_:)() & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v22, v6);
    return outlined init with take of Date?((uint64_t)v20, v26);
  }
  Date.timeIntervalSinceReferenceDate.getter();
  v24 = v26;
  Date.init(timeIntervalSinceReferenceDate:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v22, v6);
  outlined destroy of Date?((uint64_t)v20);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v24, 0, 1, v6);
}

uint64_t TimeDataFormatting.EntriesState.next(_:)@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int EnumCaseMultiPayload;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  void (*v20)(uint64_t, char *, uint64_t);
  double v21;
  void (*v22)(char *, uint64_t);
  uint64_t v24;
  void (*v25)(char *);

  v25 = a1;
  type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v24 - v5;
  v7 = type metadata accessor for Date();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v24 - v12;
  v14 = type metadata accessor for TimeDataFormatting.EntriesState();
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TimeDataFormatting.EntriesState(v2, (uint64_t)v16);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    outlined destroy of TimeDataFormatting.EntriesState(v2);
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(a2, v16, v7);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v2, a2, v7);
    swift_storeEnumTagMultiPayload();
LABEL_11:
    v19 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a2, v19, 1, v7);
  }
  if (EnumCaseMultiPayload != 1)
  {
    v19 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a2, v19, 1, v7);
  }
  v24 = a2;
  outlined destroy of TimeDataFormatting.EntriesState(v2);
  v18 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v18(v13, v16, v7);
  v25(v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
  {
    v18(v10, v6, v7);
    v20 = *(void (**)(uint64_t, char *, uint64_t))(v8 + 16);
    v20(v2, v10, v7);
    swift_storeEnumTagMultiPayload();
    Date.timeIntervalSince(_:)();
    a2 = v24;
    if (v21 <= 0.0333333333)
      v20(v24, v10, v7);
    else
      static Date.+ infix(_:_:)();
    v22 = *(void (**)(char *, uint64_t))(v8 + 8);
    v22(v10, v7);
    v22(v13, v7);
    goto LABEL_11;
  }
  (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  outlined destroy of Date?((uint64_t)v6);
  swift_storeEnumTagMultiPayload();
  v19 = 1;
  a2 = v24;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a2, v19, 1, v7);
}

uint64_t protocol witness for IteratorProtocol.next() in conformance TimeDataFormatting.ComplyingFormatStyleEntries<A, B>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TimeDataFormatting.ComplyingFormatStyleEntries.next()(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))implicit closure #1 in TimeDataFormatting.ComplyingFormatStyleEntries.next(), a2);
}

uint64_t TimeDataFormatting.ComplyingFormatStyleEntries.next()@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  void (*v5)(char *);

  v5 = (void (*)(char *))a2(v3, a1[2], a1[3], a1[4], a1[5]);
  TimeDataFormatting.EntriesState.next(_:)(v5, a3);
  return swift_release();
}

void implicit closure #1 in TimeDataFormatting.FallbackRedactionEntries.next()()
{
  type metadata accessor for TimeDataFormatting.FallbackRedactionEntries();
}

void (*sub_234EB31EC(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  double v8;
  uint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  char *v12;
  _BYTE v14[96];

  v7 = *(_QWORD *)(a1 - 8);
  v8 = MEMORY[0x24BDAC7A8](a1);
  v10 = &v14[-v9];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v7 + 16))(&v14[-v9], v5, a1, v8);
  v11 = (*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v12 = (char *)swift_allocObject();
  *((_QWORD *)v12 + 2) = v4;
  *((_QWORD *)v12 + 3) = v3;
  *((_QWORD *)v12 + 4) = v2;
  *((_QWORD *)v12 + 5) = v1;
  (*(void (**)(char *, _BYTE *, uint64_t))(v7 + 32))(&v12[v11], v10, a1);
  return partial apply for implicit closure #2 in implicit closure #1 in TimeDataFormatting.FallbackRedactionEntries.next();
}

uint64_t TimeDataFormatting.FallbackRedactionEntries.nextEntry(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  void (*v34)(char *, char *, uint64_t);
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;

  v64 = a3;
  v65 = a1;
  v5 = type metadata accessor for Date();
  v62 = *(_QWORD *)(v5 - 8);
  v63 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v53 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v54 = (char *)&v53 - v8;
  MEMORY[0x24BDAC7A8](v9);
  v59 = (char *)&v53 - v10;
  v11 = *(_QWORD *)(a2 + 16);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v55 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v58 = (char *)&v53 - v16;
  type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v17);
  v56 = (uint64_t)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v53 - v20;
  MEMORY[0x24BDAC7A8](v22);
  v57 = (uint64_t)&v53 - v23;
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v53 - v25;
  v27 = *(int *)(a2 + 52);
  v66 = v3[*(int *)(a2 + 60)];
  v61 = v3;
  v28 = &v3[v27];
  v29 = *(_QWORD *)(a2 + 24);
  v32 = a2 + 32;
  v30 = *(_QWORD *)(a2 + 32);
  v31 = *(_QWORD *)(v32 + 8);
  v33 = DiscreteFormatStyle.needsRedaction<A>(for:evaluating:at:)(&v66, (uint64_t)&v3[v27], v65, v29, v11, v31, v30);
  v60 = v12;
  v34 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  if (v33)
  {
    v35 = v58;
    v34(v58, v28, v11);
    v36 = (uint64_t)v59;
    v37 = static Date.+ infix(_:_:)();
    MEMORY[0x24BDAC7A8](v37);
    *(&v53 - 6) = (char *)v11;
    *(&v53 - 5) = (char *)v29;
    *(&v53 - 4) = (char *)v30;
    *(&v53 - 3) = (char *)v31;
    *(&v53 - 2) = v61;
    TimeDataSourceStorage.withValue(for:call:)(v36, (void (*)(char *))partial apply for closure #2 in TimeDataFormatting.FallbackRedactionEntries.nextEntry(for:), (uint64_t)(&v53 - 8), v11, v30, (uint64_t)v26);
    v38 = v62;
    v39 = v63;
    v40 = *(void (**)(uint64_t, uint64_t))(v62 + 8);
    v40(v36, v63);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v35, v11);
    v41 = v57;
    outlined init with copy of Date?((uint64_t)v26, v57);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v41, 1, v39) == 1)
    {
      outlined destroy of Date?(v41);
      v42 = (uint64_t)v26;
    }
    else
    {
      v48 = v54;
      (*(void (**)(char *, uint64_t, uint64_t))(v38 + 32))(v54, v41, v39);
      lazy protocol witness table accessor for type Date and conformance Date();
      if ((dispatch thunk of static Comparable.< infix(_:_:)() & 1) == 0)
      {
        Date.timeIntervalSinceReferenceDate.getter();
        v51 = v64;
        Date.init(timeIntervalSinceReferenceDate:)();
        v40((uint64_t)v48, v39);
        outlined destroy of Date?((uint64_t)v26);
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v51, 0, 1, v39);
      }
      v40((uint64_t)v48, v39);
      v42 = (uint64_t)v26;
    }
  }
  else
  {
    v43 = v55;
    v44 = ((uint64_t (*)(char *, char *, uint64_t))v34)(v55, v28, v11);
    MEMORY[0x24BDAC7A8](v44);
    *(&v53 - 6) = (char *)v11;
    *(&v53 - 5) = (char *)v29;
    *(&v53 - 4) = (char *)v30;
    *(&v53 - 3) = (char *)v31;
    *(&v53 - 2) = v61;
    TimeDataSourceStorage.withValue(for:call:)(v65, (void (*)(char *))partial apply for closure #1 in TimeDataFormatting.FallbackRedactionEntries.nextEntry(for:), (uint64_t)(&v53 - 8), v11, v30, (uint64_t)v21);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v43, v11);
    v45 = v56;
    outlined init with copy of Date?((uint64_t)v21, v56);
    v47 = v62;
    v46 = v63;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48))(v45, 1, v63) == 1)
    {
      outlined destroy of Date?(v45);
    }
    else
    {
      v49 = v53;
      (*(void (**)(char *, uint64_t, uint64_t))(v47 + 32))(v53, v45, v46);
      lazy protocol witness table accessor for type Date and conformance Date();
      if ((dispatch thunk of static Comparable.< infix(_:_:)() & 1) == 0)
      {
        Date.timeIntervalSinceReferenceDate.getter();
        v52 = v64;
        Date.init(timeIntervalSinceReferenceDate:)();
        (*(void (**)(char *, uint64_t))(v47 + 8))(v49, v46);
        outlined destroy of Date?((uint64_t)v21);
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v47 + 56))(v52, 0, 1, v46);
      }
      (*(void (**)(char *, uint64_t))(v47 + 8))(v49, v46);
    }
    v42 = (uint64_t)v21;
  }
  return outlined init with take of Date?(v42, v64);
}

void closure #2 in TimeDataFormatting.FallbackRedactionEntries.nextEntry(for:)(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  _QWORD v31[13];
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v31[7] = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v32 = type metadata accessor for Optional();
  v31[11] = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v31[3] = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v31[6] = (char *)v31 - v12;
  MEMORY[0x24BDAC7A8](v13);
  v33 = (char *)v31 - v14;
  MEMORY[0x24BDAC7A8](v15);
  v31[9] = (char *)v31 - v16;
  MEMORY[0x24BDAC7A8](v17);
  v35 = (char *)v31 - v18;
  v19 = type metadata accessor for FloatingPointRoundingRule();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)v31 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31[10] = AssociatedTypeWitness;
  v31[8] = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v23);
  v31[1] = (char *)v31 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25);
  v31[2] = (char *)v31 - v26;
  MEMORY[0x24BDAC7A8](v27);
  v31[4] = (char *)v31 - v28;
  v30 = MEMORY[0x24BDAC7A8](v29);
  (*(void (**)(char *, _QWORD, uint64_t, double))(v20 + 104))(v22, *MEMORY[0x24BEE38E8], v19, v30);
  v36 = a1;
  v37 = a2;
  v31[12] = a2;
  v38 = a3;
  v39 = a4;
  v34 = a4;
  type metadata accessor for TimeDataFormatting.FallbackRedactionEntries();
}

uint64_t sub_234EB39F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  int v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  int v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, double))(v7 + 56))(v3, v8, v5, v7, 1.0 / dbl_2352AC4D0[*(char *)(v2 + *(int *)(a1 + 60))]);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v4);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 64))(v3, v5, v7);
  *(_QWORD *)(v9 - 216) = v2;
  if ((v10 & 1) != 0)
  {
    v11 = *(_QWORD *)(v9 - 184);
    dispatch thunk of DiscreteFormatStyle.discreteInput(after:)();
    v12 = *(_QWORD *)(v9 - 152);
    v13 = *(_QWORD *)(v9 - 192);
    v14 = *(_QWORD *)(v9 - 176);
  }
  else
  {
    v13 = *(_QWORD *)(v9 - 192);
    v11 = *(_QWORD *)(v9 - 184);
    v14 = *(_QWORD *)(v9 - 176);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v11, v1, v14);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v14);
    v12 = *(_QWORD *)(v9 - 152);
  }
  v15 = *(_QWORD *)(v9 - 128);
  v16 = *(_QWORD *)(v9 - 168);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(v15, v11, v12);
  v17 = *(_QWORD *)(v9 - 144);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v17, v15, v12);
  v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  v19 = v18(v17, 1, v14);
  v20 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
  if (v19 != 1)
  {
    v20(v15, v12);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v1, v14);
    v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32);
    v24 = *(_QWORD *)(v9 - 224);
    v23(v24, v17, v14);
    v22 = *(_QWORD *)(v9 - 200);
    v23(v22, v24, v14);
    goto LABEL_11;
  }
  v20(v17, v12);
  v21 = *(_QWORD *)(v9 - 208);
  dispatch thunk of DiscreteFormatStyle.discreteInput(before:)();
  if (v18(v21, 1, v14) != 1)
  {
    v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32);
    v26 = *(_QWORD *)(v9 - 240);
    *(_QWORD *)(v9 - 144) = v25;
    v25(v26, v21, v14);
    v21 = *(_QWORD *)(v9 - 232);
    dispatch thunk of DiscreteFormatStyle.input(after:)();
    v27 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v27(v26, v14);
    v20(*(_QWORD *)(v9 - 128), v12);
    v27(v1, v14);
    v28 = v18(v21, 1, v14);
    v22 = *(_QWORD *)(v9 - 200);
    if (v28 == 1)
      goto LABEL_9;
    v30 = *(_QWORD *)(v9 - 248);
    v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 - 144);
    v31(v30, v21, v14);
    v31(v22, v30, v14);
LABEL_11:
    v29 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v22, v29, 1, v14);
  }
  v20(*(_QWORD *)(v9 - 128), v12);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v1, v14);
  v22 = *(_QWORD *)(v9 - 200);
LABEL_9:
  v20(v21, v12);
  v29 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v22, v29, 1, v14);
}

uint64_t protocol witness for IteratorProtocol.next() in conformance TimeDataFormatting.FallbackRedactionEntries<A, B>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TimeDataFormatting.ComplyingFormatStyleEntries.next()(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))implicit closure #1 in TimeDataFormatting.FallbackRedactionEntries.next(), a2);
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in TimeDataFormatting.ComplyingFormatStyleEntries<A, B>()
{
  JUMPOUT(0x23B7C9C04);
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in TimeDataFormatting.FallbackRedactionEntries<A, B>()
{
  JUMPOUT(0x23B7C9C04);
}

void type metadata accessor for AnySequence<Date>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = type metadata accessor for Date();
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t outlined init with copy of TimeDataFormatting.EntriesState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TimeDataFormatting.EntriesState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_234EB3DAC()
{
  objectdestroyTm_9((void (*)(_QWORD, uint64_t *))type metadata accessor for TimeDataFormatting.ComplyingFormatStyleEntries);
}

void partial apply for implicit closure #2 in implicit closure #1 in TimeDataFormatting.ComplyingFormatStyleEntries.next()(uint64_t a1)
{
  partial apply for implicit closure #2 in implicit closure #1 in TimeDataFormatting.ComplyingFormatStyleEntries.next()(a1, (void (*)(_QWORD, _QWORD *))type metadata accessor for TimeDataFormatting.ComplyingFormatStyleEntries);
}

void partial apply for closure #1 in TimeDataFormatting.ComplyingFormatStyleEntries.nextEntry(for:)(uint64_t a1)
{
  partial apply for closure #1 in TimeDataFormatting.ComplyingFormatStyleEntries.nextEntry(for:)(a1, (void (*)(_QWORD, uint64_t *))type metadata accessor for TimeDataFormatting.ComplyingFormatStyleEntries);
}

void sub_234EB3DD8()
{
  objectdestroyTm_9((void (*)(_QWORD, uint64_t *))type metadata accessor for TimeDataFormatting.FallbackRedactionEntries);
}

void objectdestroyTm_9(void (*a1)(_QWORD, uint64_t *))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v1 + 40);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_OWORD *)(v1 + 24);
  v5 = v2;
  a1(0, &v3);
  JUMPOUT(0x234EB3E2CLL);
}

void partial apply for implicit closure #2 in implicit closure #1 in TimeDataFormatting.FallbackRedactionEntries.next()(uint64_t a1)
{
  partial apply for implicit closure #2 in implicit closure #1 in TimeDataFormatting.ComplyingFormatStyleEntries.next()(a1, (void (*)(_QWORD, _QWORD *))type metadata accessor for TimeDataFormatting.FallbackRedactionEntries);
}

void partial apply for implicit closure #2 in implicit closure #1 in TimeDataFormatting.ComplyingFormatStyleEntries.next()(uint64_t a1, void (*a2)(_QWORD, _QWORD *))
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  v3 = v2[3];
  v4 = v2[4];
  v5 = v2[5];
  v6[0] = v2[2];
  v6[1] = v3;
  v6[2] = v4;
  v6[3] = v5;
  a2(0, v6);
  JUMPOUT(0x234EB3F48);
}

void partial apply for closure #1 in TimeDataFormatting.FallbackRedactionEntries.nextEntry(for:)(uint64_t a1)
{
  partial apply for closure #1 in TimeDataFormatting.ComplyingFormatStyleEntries.nextEntry(for:)(a1, (void (*)(_QWORD, uint64_t *))type metadata accessor for TimeDataFormatting.FallbackRedactionEntries);
}

void partial apply for closure #1 in TimeDataFormatting.ComplyingFormatStyleEntries.nextEntry(for:)(uint64_t a1, void (*a2)(_QWORD, uint64_t *))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  v3 = *(_QWORD *)(v2 + 40);
  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_OWORD *)(v2 + 24);
  v6 = v3;
  a2(0, &v4);
  JUMPOUT(0x234EB3FF8);
}

void partial apply for closure #2 in TimeDataFormatting.FallbackRedactionEntries.nextEntry(for:)(uint64_t a1@<X8>)
{
  uint64_t *v1;

  closure #2 in TimeDataFormatting.FallbackRedactionEntries.nextEntry(for:)(v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t static Color._background.getter()
{
  type metadata accessor for ColorBox<Color.BackgroundColorProvider>(0);
  return swift_allocObject();
}

void type metadata accessor for ColorBox<Color.BackgroundColorProvider>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ColorBox<Color.BackgroundColorProvider>)
  {
    v2 = lazy protocol witness table accessor for type Color.BackgroundColorProvider and conformance Color.BackgroundColorProvider();
    v4 = type metadata accessor for ColorBox(a1, (uint64_t)&type metadata for Color.BackgroundColorProvider, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.BackgroundColorProvider>);
  }
}

uint64_t BackgroundStyle._apply(to:)(uint64_t a1)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _BYTE v7[32];

  v2 = *(_BYTE *)(a1 + 106);
  if ((v2 & 4) != 0)
    goto LABEL_7;
  v3 = *(_QWORD *)(a1 + 48);
  if (*(_QWORD *)(a1 + 56))
  {
    swift_retain_n();
    swift_retain_n();
    v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
    swift_release_n();
    if (v4)
      goto LABEL_4;
LABEL_7:
    __asm { BR              X10 }
  }
  v6 = swift_retain_n();
  v4 = specialized closure #1 in PropertyList.subscript.getter(v6, (uint64_t)v7);
  swift_release_n();
  if (!v4)
    goto LABEL_7;
LABEL_4:
  *(_BYTE *)(a1 + 106) = v2 | 4;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 80))(a1);
  result = swift_release();
  if ((*(_BYTE *)(a1 + 106) & 4) != 0)
    *(_BYTE *)(a1 + 106) &= ~4u;
  return result;
}

uint64_t EnvironmentValues.backgroundInfo.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.backgroundContext.getter@<X0>(char *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

uint64_t BackgroundContext.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

double static BackgroundStyle._makeView<A>(view:inputs:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  double result;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  int v19;

  v5 = *(_QWORD *)a2;
  v6 = *(_DWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_DWORD *)(a2 + 80);
  v19 = *a1;
  v11 = v5;
  v12 = v6;
  v13 = v7;
  v9 = *(_OWORD *)(a2 + 40);
  v14 = *(_OWORD *)(a2 + 24);
  v15 = v9;
  v16 = *(_OWORD *)(a2 + 56);
  v17 = *(_QWORD *)(a2 + 72);
  v18 = v8;
  *(_QWORD *)&result = static ShapeStyle.legacyMakeShapeView<A>(view:inputs:)(&v19, &v11, &type metadata for BackgroundStyle, a3, (uint64_t)&protocol witness table for BackgroundStyle, a4, a5).n128_u64[0];
  return result;
}

uint64_t EnvironmentValues.currentBackgroundStyle.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2;
  }
  else
  {
    v4 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v4, (uint64_t)&v6);
    swift_release_n();
    return v5;
  }
}

_DWORD *BackgroundStyle.base(level:env:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _DWORD *result;
  char v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  Swift::Int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  char v28;
  char v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v5 = *a2;
  if (a2[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v5, &v34);
    swift_release_n();
    result = (_DWORD *)swift_release_n();
    if (!__OFADD__(v35, a1))
    {
      v32 = v34;
      v33 = v35 + a1;
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v5, &v31);
      swift_release_n();
      swift_release_n();
      v30 = v31;
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v5, &v29);
      swift_release_n();
      swift_release_n();
      v7 = v29;
LABEL_15:
      v28 = v7;
      specialized static Color.systemBackgroundColor(info:context:scheme:)(&v32, (unsigned __int8 *)&v30, &v28);
      v21 = v20;
      v23 = v22;
      v25 = v24;
      v27 = v26;
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ShapeStyleBox<Color.Resolved>, (uint64_t)&type metadata for Color.Resolved, (uint64_t)&protocol witness table for Color.Resolved, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ShapeStyleBox);
      result = (_DWORD *)swift_allocObject();
      result[4] = v21;
      result[5] = v23;
      result[6] = v25;
      result[7] = v27;
      *a3 = result;
      return result;
    }
  }
  else
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundInfoKey>, (uint64_t)&type metadata for BackgroundInfoKey, (uint64_t)&protocol witness table for BackgroundInfoKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v8);
    v9 = swift_retain_n();
    v10 = specialized find1<A>(_:key:filter:)(v9, v34);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 72);
      v12 = *(_QWORD *)(v10 + 80);
    }
    else
    {
      v11 = 0;
      v12 = 0;
    }
    result = (_DWORD *)swift_release_n();
    if (!__OFADD__(v12, a1))
    {
      v32 = v11;
      v33 = v12 + a1;
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundContextKey>, (uint64_t)&type metadata for BackgroundContextKey, (uint64_t)&protocol witness table for BackgroundContextKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      BloomFilter.init(hashValue:)(v13);
      v14 = swift_retain_n();
      v15 = specialized find1<A>(_:key:filter:)(v14, v34);
      if (v15)
        v16 = *(_BYTE *)(v15 + 72);
      else
        v16 = 0;
      swift_release_n();
      v30 = v16;
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeKey>, (uint64_t)&type metadata for ColorSchemeKey, (uint64_t)&protocol witness table for ColorSchemeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      BloomFilter.init(hashValue:)(v17);
      v18 = swift_retain_n();
      v19 = specialized find1<A>(_:key:filter:)(v18, v34);
      if (v19)
        v7 = *(_BYTE *)(v19 + 72);
      else
        v7 = 0;
      swift_release_n();
      goto LABEL_15;
    }
  }
  __break(1u);
  return result;
}

uint64_t EnvironmentValues.backgroundInfo.setter(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  v3 = a1[1];
  v4 = *v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v2, v3);
  swift_release();
  if (v1[1])
  {
    v5 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }
  return swift_release();
}

_BYTE *static BackgroundStyle._apply(to:)(_BYTE *result)
{
  *result = 1;
  return result;
}

uint64_t View._addingBackgroundGroup()(uint64_t a1, uint64_t a2)
{
  return View._addingBackgroundGroup()(a1, a2, (uint64_t)&unk_2352AC500, (uint64_t)closure #1 in View._addingBackgroundGroup());
}

double key path getter for EnvironmentValues.backgroundInfo : EnvironmentValues@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  double result;
  __int128 v6;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, (uint64_t *)&v6);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, &v6);
  }
  swift_release_n();
  result = *(double *)&v6;
  *a2 = v6;
  return result;
}

uint64_t key path setter for EnvironmentValues.backgroundInfo : EnvironmentValues(__int128 *a1)
{
  __int128 v2;

  v2 = *a1;
  return EnvironmentValues.backgroundInfo.setter((uint64_t *)&v2);
}

uint64_t View._addingBackgroundLayer()(uint64_t a1, uint64_t a2)
{
  return View._addingBackgroundGroup()(a1, a2, (uint64_t)&unk_2352AC530, (uint64_t)closure #1 in View._addingBackgroundGroup());
}

uint64_t View._addingBackgroundGroup()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *KeyPath;

  KeyPath = (uint64_t *)swift_getKeyPath();
  View.transformEnvironment<A>(_:transform:)(KeyPath, a4, 0, a1, a2);
  return swift_release();
}

_QWORD *closure #1 in View._addingBackgroundGroup()(_QWORD *result)
{
  if (__OFADD__(*result, 1))
    __break(1u);
  else
    ++*result;
  return result;
}

uint64_t key path getter for EnvironmentValues.backgroundContext : EnvironmentValues@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v6;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v6);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, &v6);
  }
  result = swift_release_n();
  *a2 = v6;
  return result;
}

uint64_t EnvironmentValues.backgroundContext.setter(char *a1)
{
  uint64_t *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v2);
  swift_release();
  if (v1[1])
  {
    v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.backgroundStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for _EnvironmentBackgroundStyleModifier(0, v11, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v20 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v16);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v18, v10, a3);
  View.modifier<A>(_:)(v18, a2, v14, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
}

uint64_t _EnvironmentBackgroundStyleModifier.init(style:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t EnvironmentValues.backgroundStyle.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2;
  }
  else
  {
    v4 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v4, (uint64_t)&v6);
    swift_release_n();
    return v5;
  }
}

uint64_t key path getter for EnvironmentValues.backgroundStyle : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
  }
  else
  {
    v5 = swift_retain_n();
    v4 = specialized closure #1 in PropertyList.subscript.getter(v5, (uint64_t)&v7);
  }
  result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t EnvironmentValues.backgroundStyle.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  swift_retain();
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  swift_release();
  swift_release();
  if (v1[1])
  {
    v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  swift_release();
  return swift_release();
}

void (*EnvironmentValues.backgroundStyle.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    v6 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v6, (uint64_t)(v3 + 1));
  }
  swift_release_n();
  v3[5] = 0;
  *v3 = v5;
  return EnvironmentValues.backgroundStyle.modify;
}

void EnvironmentValues.backgroundStyle.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = **a1;
  v4 = (uint64_t *)(*a1)[4];
  v5 = *v4;
  if ((a2 & 1) != 0)
  {
    swift_retain_n();
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter(v4, v3);
    swift_release();
    swift_release();
    if (v4[1])
    {
      v6 = *(_QWORD *)v2[4];
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v5, v6);
      swift_release();
      swift_release();
    }
    swift_release();
    swift_release();
  }
  else
  {
    swift_retain();
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter(v4, v3);
    swift_release();
    swift_release();
    if (v4[1])
    {
      v7 = *(_QWORD *)v2[4];
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v5, v7);
      swift_release();
      swift_release();
    }
    swift_release();
  }
  swift_release();
  free(v2);
}

uint64_t EnvironmentValues.effectiveBackgroundStyle.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    if (v2)
      return v2;
  }
  else
  {
    v3 = swift_retain_n();
    v2 = specialized closure #1 in PropertyList.subscript.getter(v3, (uint64_t)&v5);
    swift_release_n();
    if (v2)
      return v2;
  }
  if (one-time initialization token for shared != -1)
    swift_once();
  v2 = static BackgroundStyle.shared;
  swift_retain();
  return v2;
}

uint64_t (*EnvironmentValues.backgroundContext.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t *v1;
  char *v2;
  uint64_t v3;
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v9;

  v2 = (char *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v1;
  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, v2);
    swift_release_n();
  }
  else
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundContextKey>, (uint64_t)&type metadata for BackgroundContextKey, (uint64_t)&protocol witness table for BackgroundContextKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v4);
    v5 = swift_retain_n();
    v6 = specialized find1<A>(_:key:filter:)(v5, v9);
    if (v6)
      v7 = *(_BYTE *)(v6 + 72);
    else
      v7 = 0;
    *v2 = v7;
  }
  swift_release_n();
  return EnvironmentValues.backgroundContext.modify;
}

uint64_t EnvironmentValues.backgroundContext.modify(uint64_t a1)
{
  uint64_t *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(uint64_t **)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 24);
  v4 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3);
  swift_release();
  if (v2[1])
  {
    v5 = **(_QWORD **)(a1 + 16);
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void (*EnvironmentValues.backgroundInfo.modify(uint64_t **a1))(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t *v3;
  uint64_t v4;
  Swift::Int v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v10;

  v3 = (uint64_t *)malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (uint64_t)v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v4, v3);
    swift_release_n();
  }
  else
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundInfoKey>, (uint64_t)&type metadata for BackgroundInfoKey, (uint64_t)&protocol witness table for BackgroundInfoKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v5);
    v6 = swift_retain_n();
    v7 = specialized find1<A>(_:key:filter:)(v6, v10);
    if (v7)
      v8 = *(_OWORD *)(v7 + 72);
    else
      v8 = 0uLL;
    *(_OWORD *)v3 = v8;
  }
  swift_release_n();
  return EnvironmentValues.backgroundInfo.modify;
}

void EnvironmentValues.backgroundInfo.modify(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *a1;
  v2 = (uint64_t *)(*a1)[4];
  v3 = **a1;
  v4 = (*a1)[1];
  v5 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3, v4);
  swift_release();
  if (v2[1])
  {
    v6 = *(_QWORD *)v1[4];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v5, v6);
    swift_release();
    swift_release();
  }
  swift_release();
  free(v1);
}

SwiftUI::BackgroundContext_optional __swiftcall BackgroundContext.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  if (rawValue == 1)
    v2 = 1;
  else
    v2 = 2;
  if (!rawValue)
    v2 = 0;
  *v1 = v2;
  return (SwiftUI::BackgroundContext_optional)rawValue;
}

void *static BackgroundContext.allCases.getter()
{
  return &outlined read-only object #0 of static BackgroundContext.allCases.getter;
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance BackgroundContext@<X0>(_QWORD *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (*result)
    v3 = v2;
  else
    v3 = 0;
  *a2 = v3;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance BackgroundContext(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance BackgroundContext;
}

uint64_t BackgroundInfo.layer.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t BackgroundInfo.layer.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*BackgroundInfo.layer.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t BackgroundInfo.groupCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t BackgroundInfo.groupCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*BackgroundInfo.groupCount.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

SwiftUI::BackgroundInfo __swiftcall BackgroundInfo.init(layer:groupCount:)(Swift::Int layer, Swift::Int groupCount)
{
  Swift::Int *v2;
  SwiftUI::BackgroundInfo result;

  *v2 = layer;
  v2[1] = groupCount;
  result.groupCount = groupCount;
  result.layer = layer;
  return result;
}

BOOL static BackgroundInfo.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance BackgroundInfo(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t _EnvironmentBackgroundStyleModifier.style.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _EnvironmentBackgroundStyleModifier.style.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_EnvironmentBackgroundStyleModifier.style.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t static _EnvironmentBackgroundStyleModifier._makeViewInputs(modifier:inputs:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5;

  v5 = *a1;
  return static _EnvironmentBackgroundStyleModifier._makeInputs(modifier:inputs:)(&v5, a2, a3, a4);
}

uint64_t static _EnvironmentBackgroundStyleModifier._makeInputs(modifier:inputs:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int v17;
  int v18;
  _DWORD v19[2];
  _BYTE v20[16];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v7 = *a1;
  v8 = *(_QWORD *)(a2 + 16);
  swift_beginAccess();
  v9 = *(_DWORD *)(v8 + 16);
  v19[0] = v7;
  v19[1] = v9;
  v21 = type metadata accessor for _EnvironmentBackgroundStyleModifier.ChildEnvironment(0, a3, a4, v10);
  v22 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _EnvironmentBackgroundStyleModifier<A>.ChildEnvironment, v21);
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Attribute<EnvironmentValues>, (uint64_t)&type metadata for EnvironmentValues, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE095F0]);
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v19, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v20, v21, MEMORY[0x24BEE4078], v11, MEMORY[0x24BEE40A8], v12);
  v13 = MEMORY[0x24BEE4AF8];
  v14 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
  v15 = swift_allocObject();
  *(_DWORD *)(v15 + 16) = v18;
  *(_QWORD *)(v15 + 24) = v13;
  *(_OWORD *)(v15 + 32) = 0u;
  *(_OWORD *)(v15 + 48) = 0u;
  *(_OWORD *)(v15 + 64) = 0u;
  *(_WORD *)(v15 + 80) = 256;
  *(_QWORD *)(v15 + 88) = v14;
  result = swift_release();
  *(_QWORD *)(a2 + 16) = v15;
  v17 = *(_DWORD *)(a2 + 32);
  if ((v17 & 0x20) == 0)
    *(_DWORD *)(a2 + 32) = v17 | 0x20;
  return result;
}

uint64_t static _EnvironmentBackgroundStyleModifier._makeViewList(modifier:inputs:body:)(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  int v33;
  uint64_t v34;
  char v35;

  v9 = *a1;
  v10 = *((_DWORD *)a2 + 2);
  v11 = a2[2];
  v12 = a2[5];
  v13 = *((_DWORD *)a2 + 16);
  v14 = a2[9];
  v15 = *((_BYTE *)a2 + 80);
  v27 = *a2;
  v28 = v10;
  v29 = v11;
  v30 = *(_OWORD *)(a2 + 3);
  v31 = v12;
  v32 = *((_OWORD *)a2 + 3);
  v33 = v13;
  v34 = v14;
  v35 = v15;
  LODWORD(v18) = v9;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _EnvironmentBackgroundStyleModifier._makeInputs(modifier:inputs:)((int *)&v18, (uint64_t)&v27, a5, a6);
  v18 = v27;
  v19 = v28;
  v20 = v29;
  v21 = v30;
  v22 = v31;
  v23 = v32;
  v24 = v33;
  v25 = v34;
  v26 = v35;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v16 = swift_bridgeObjectRetain();
  a3(v16, &v18);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t _EnvironmentBackgroundStyleModifier.ChildEnvironment.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t Value;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v18[2];
  char v19;

  v7 = type metadata accessor for _EnvironmentBackgroundStyleModifier(0, a1, a2, a3);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v18 - v9 + 8;
  MaterialView.ChildEnvironment.environment.getter(a4);
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, Value, v7);
  v19 = 1;
  v12 = *a4;
  v13 = a4[1];
  v18[0] = *a4;
  v18[1] = v13;
  swift_retain();
  swift_retain();
  v14 = ShapeStyle.copyStyle(name:in:foregroundStyle:)((uint64_t)&v19, (uint64_t)v18, 0, a1, a2);
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v10, a1);
  swift_retain_n();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a4, v14);
  swift_release();
  swift_release();
  if (a4[1])
  {
    v15 = *a4;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v12, v15);
    swift_release();
    swift_release();
  }
  swift_release();
  return swift_release();
}

uint64_t protocol witness for Rule.value.getter in conformance _EnvironmentBackgroundStyleModifier<A>.ChildEnvironment@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  return _EnvironmentBackgroundStyleModifier.ChildEnvironment.value.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2, a3);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance _EnvironmentBackgroundStyleModifier<A>.ChildEnvironment(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for _EnvironmentBackgroundStyleModifier<A>.ChildEnvironment, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t protocol witness for static ViewInputsModifier._makeViewInputs(modifier:inputs:) in conformance _EnvironmentBackgroundStyleModifier<A>(int *a1, uint64_t a2, uint64_t a3)
{
  return static _EnvironmentBackgroundStyleModifier._makeViewInputs(modifier:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _EnvironmentBackgroundStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  return static _EnvironmentBackgroundStyleModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24));
}

void specialized static Color.systemBackgroundColor(info:context:scheme:)(_QWORD *a1, unsigned __int8 *a2, _BYTE *a3)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  float v6;
  int v7;
  uint64_t v8;
  char v9;
  float v10;

  v3 = a1[1];
  if ((*a3 & 1) != 0)
  {
    v4 = __OFADD__(*a1, v3);
    v5 = *a1 + v3;
    if (!v4)
    {
      switch(v5)
      {
        case 0:
          return;
        case 2:
          v6 = 0.17255;
          v7 = 1043904697;
          break;
        case 1:
          v6 = 0.1098;
          v7 = 1039200497;
          break;
        default:
          v6 = 0.22745;
          v7 = 1047589105;
          break;
      }
      v10 = *(float *)&v7;
      goto LABEL_14;
    }
    __break(1u);
LABEL_17:
    __break(1u);
    return;
  }
  v8 = *a2;
  v4 = __OFADD__(v3, v8);
  v9 = v3 + v8;
  if (v4)
    goto LABEL_17;
  if ((v9 & 1) == 0)
    return;
  v6 = 0.94902;
  v10 = 0.96863;
LABEL_14:
  specialized Color.Resolved.init(red:green:blue:opacity:)(v6, v6, v10);
}

uint64_t sub_234EB5FE4(__int128 *a1)
{
  __int128 v2;

  v2 = *a1;
  return EnvironmentValues.backgroundInfo.setter((uint64_t *)&v2);
}

uint64_t type metadata accessor for _EnvironmentBackgroundStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _EnvironmentBackgroundStyleModifier);
}

unint64_t lazy protocol witness table accessor for type BackgroundContext and conformance BackgroundContext()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BackgroundContext and conformance BackgroundContext;
  if (!lazy protocol witness table cache variable for type BackgroundContext and conformance BackgroundContext)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for BackgroundContext, &type metadata for BackgroundContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BackgroundContext and conformance BackgroundContext);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [BackgroundContext] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [BackgroundContext] and conformance [A];
  if (!lazy protocol witness table cache variable for type [BackgroundContext] and conformance [A])
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for [BackgroundContext], (uint64_t)&type metadata for BackgroundContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [BackgroundContext] and conformance [A]);
  }
  return result;
}

uint64_t sub_234EB60D4()
{
  uint64_t v0;

  v0 = swift_retain();
  specialized EnvironmentValues.subscript.setter(v0);
  return swift_release();
}

uint64_t sub_234EB6108(char *a1)
{
  char v2;

  v2 = *a1;
  return EnvironmentValues.backgroundContext.setter(&v2);
}

ValueMetadata *type metadata accessor for BackgroundStyle()
{
  return &type metadata for BackgroundStyle;
}

uint64_t storeEnumTagSinglePayload for BackgroundContext(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_234EB6198 + 4 * byte_2352AC4ED[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_234EB61CC + 4 * byte_2352AC4E8[v4]))();
}

uint64_t sub_234EB61CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234EB61D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234EB61DCLL);
  return result;
}

uint64_t sub_234EB61E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234EB61F0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_234EB61F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234EB61FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BackgroundContext()
{
  return &type metadata for BackgroundContext;
}

ValueMetadata *type metadata accessor for BackgroundInfo()
{
  return &type metadata for BackgroundInfo;
}

uint64_t getEnumTagSinglePayload for _EnvironmentBackgroundStyleModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234EB62D8 + 4 * byte_2352AC4F2[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for _EnvironmentBackgroundStyleModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t sub_234EB64D8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v1 = *a1;
  v2 = a1[1];
  type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Int>, MEMORY[0x24BEE1768], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for _EnvironmentKeyTransformModifier);
  v5 = type metadata accessor for ModifiedContent(255, v1, v3, v4);
  v7[0] = v2;
  v7[1] = &protocol witness table for _EnvironmentKeyTransformModifier<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v7);
}

uint64_t sub_234EB654C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v4 = *a1;
  v5 = a1[2];
  v6 = type metadata accessor for _EnvironmentBackgroundStyleModifier(255, a1[1], a1[3], a4);
  v8 = type metadata accessor for ModifiedContent(255, v4, v6, v7);
  v10[0] = v5;
  v10[1] = &protocol witness table for _EnvironmentBackgroundStyleModifier<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v8, v10);
}

ValueMetadata *type metadata accessor for BackgroundContextKey()
{
  return &type metadata for BackgroundContextKey;
}

ValueMetadata *type metadata accessor for BackgroundInfoKey()
{
  return &type metadata for BackgroundInfoKey;
}

ValueMetadata *type metadata accessor for Color.BackgroundColorProvider()
{
  return &type metadata for Color.BackgroundColorProvider;
}

unint64_t instantiation function for generic protocol witness table for Color.BackgroundColorProvider(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Color.BackgroundColorProvider and conformance Color.BackgroundColorProvider();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void specialized Color.BackgroundColorProvider.resolve(in:)(uint64_t *a1)
{
  uint64_t v1;
  char v2;
  Swift::Int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  char v18;
  __int128 v19;
  __int128 v20;

  v1 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v1, (uint64_t *)&v20);
    swift_release_n();
    swift_release_n();
    v19 = v20;
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v1, &v18);
    swift_release_n();
    swift_release_n();
    v17 = v18;
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v1, &v16);
    swift_release_n();
    swift_release_n();
    v2 = v16;
  }
  else
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundInfoKey>, (uint64_t)&type metadata for BackgroundInfoKey, (uint64_t)&protocol witness table for BackgroundInfoKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v3);
    v4 = swift_retain_n();
    v5 = specialized find1<A>(_:key:filter:)(v4, v20);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 72);
      v7 = *(_QWORD *)(v5 + 80);
    }
    else
    {
      v6 = 0;
      v7 = 0;
    }
    swift_release_n();
    *(_QWORD *)&v19 = v6;
    *((_QWORD *)&v19 + 1) = v7;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundContextKey>, (uint64_t)&type metadata for BackgroundContextKey, (uint64_t)&protocol witness table for BackgroundContextKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v8);
    v9 = swift_retain_n();
    v10 = specialized find1<A>(_:key:filter:)(v9, v20);
    if (v10)
      v11 = *(_BYTE *)(v10 + 72);
    else
      v11 = 0;
    swift_release_n();
    v17 = v11;
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeKey>, (uint64_t)&type metadata for ColorSchemeKey, (uint64_t)&protocol witness table for ColorSchemeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v12);
    v13 = swift_retain_n();
    v14 = specialized find1<A>(_:key:filter:)(v13, v20);
    if (v14)
      v2 = *(_BYTE *)(v14 + 72);
    else
      v2 = 0;
    swift_release_n();
  }
  v15 = v2;
  specialized static Color.systemBackgroundColor(info:context:scheme:)(&v19, (unsigned __int8 *)&v17, &v15);
}

uint64_t type metadata accessor for _EnvironmentBackgroundStyleModifier.ChildEnvironment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _EnvironmentBackgroundStyleModifier.ChildEnvironment);
}

ValueMetadata *type metadata accessor for BackgroundStyleKey()
{
  return &type metadata for BackgroundStyleKey;
}

uint64_t instantiation function for generic protocol witness table for _EnvironmentBackgroundStyleModifier<A>.ChildEnvironment(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _EnvironmentBackgroundStyleModifier<A>.ChildEnvironment);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in _EnvironmentBackgroundStyleModifier<A>.ChildEnvironment()
{
  JUMPOUT(0x23B7C9C04);
}

void ShapeStyle.mix<A>(_:by:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD v22[4];

  v12 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v15 - 8);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v20, v21, a2, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a6, v20, a2);
  v22[0] = a2;
  v22[1] = a3;
  v22[2] = a4;
  v22[3] = a5;
  type metadata accessor for InterpolatedShapeStyle();
}

uint64_t sub_234EB6A1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v1 + *(int *)(a1 + 52), v3, v2);
  *(_DWORD *)(v1 + *(int *)(a1 + 56)) = v5;
  return result;
}

void InterpolatedShapeStyle.init(from:to:progress:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
  type metadata accessor for InterpolatedShapeStyle();
}

uint64_t sub_234EB6AC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v3 + *(int *)(a1 + 52), v2, v1);
  *(_DWORD *)(v3 + *(int *)(a1 + 56)) = v4;
  return result;
}

void type metadata accessor for InterpolatedShapeStyle()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t InterpolatedShapeStyle.from.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t InterpolatedShapeStyle.from.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*InterpolatedShapeStyle.from.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t InterpolatedShapeStyle.to.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t InterpolatedShapeStyle.to.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 40))(v2 + *(int *)(a2 + 52), a1);
}

uint64_t (*InterpolatedShapeStyle.to.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

float InterpolatedShapeStyle.progress.getter(uint64_t a1)
{
  uint64_t v1;

  return *(float *)(v1 + *(int *)(a1 + 56));
}

uint64_t InterpolatedShapeStyle.progress.setter(uint64_t result, float a2)
{
  uint64_t v2;

  *(float *)(v2 + *(int *)(result + 56)) = a2;
  return result;
}

uint64_t (*InterpolatedShapeStyle.progress.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t InterpolatedShapeStyle._apply(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float v3;

  v3 = *(float *)(v2 + *(int *)(a2 + 56));
  if (v3 == 0.0)
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a2 + 32) + 32))(a1, *(_QWORD *)(a2 + 16));
  if (v3 != 1.0)
    __asm { BR              X13 }
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a2 + 40) + 32))(a1, *(_QWORD *)(a2 + 24));
}

void sub_234EB6CB4()
{
  uint64_t v0;

  outlined consume of _ShapeStyle_Shape.Result(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  *(_QWORD *)(v0 + 32) = 0;
  *(_BYTE *)(v0 + 40) = 0;
  JUMPOUT(0x234EB6C6CLL);
}

void sub_234EB6CCC(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, __int128 a16, __int128 a17, uint64_t a18, int a19)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  __int16 v29;
  __int128 v30;
  uint64_t v31;
  void (*v32)(uint64_t *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;

  v24 = *(_QWORD *)(v21 + 32);
  v25 = *(_QWORD *)(v21 + 48);
  v26 = *(_QWORD *)(v21 + 56);
  v27 = *(_QWORD *)(v21 + 96);
  v28 = *(_BYTE *)(v21 + 104);
  v29 = *(_WORD *)(v21 + 105);
  a8 = a1;
  a9 = v19;
  a10 = v20;
  a11 = 1;
  a12 = v24;
  a13 = *(_BYTE *)(v21 + 40);
  a14 = v25;
  a15 = v26;
  v30 = *(_OWORD *)(v21 + 80);
  a16 = *(_OWORD *)(v21 + 64);
  a17 = v30;
  a18 = v27;
  LOBYTE(a19) = v28;
  *(_WORD *)((char *)&a19 + 1) = v29;
  v31 = v22[4];
  v32 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v31 + 32);
  outlined copy of _ShapeStyle_Shape.Result(v24, a13);
  v33 = v22[2];
  swift_retain();
  swift_retain();
  swift_retain();
  v32(&a8, v33, v31);
  v34 = a12;
  v35 = a13;
  if (a13 == 1)
  {
    a7 = a12;
    v36 = v22[5];
    v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 32);
    v38 = v22[3];
    swift_bridgeObjectRetain_n();
    v37(v21, v38, v36);
    v39 = *(_QWORD *)(v21 + 32);
    v40 = *(unsigned __int8 *)(v21 + 40);
    if (v40 == 1)
    {
      a5 = v34;
      swift_bridgeObjectRetain();
      _ShapeStyle_Pack.animatableData.getter(&a6);
      outlined consume of _ShapeStyle_Shape.Result(v34, 1);
      a4 = v39;
      _ShapeStyle_Pack.animatableData.getter(&a5);
      outlined consume of _ShapeStyle_Shape.Result(v39, 1);
      a4 = a6;
      specialized static _ShapeStyle_Pack.AnimatableData.-= infix(_:_:)((uint64_t)&a5, &a4);
      _ShapeStyle_Pack.AnimatableData.scale(by:)(v23);
      a4 = a5;
      specialized static _ShapeStyle_Pack.AnimatableData.+= infix(_:_:)((uint64_t)&a6, &a4);
      swift_bridgeObjectRelease();
      a4 = a6;
      _ShapeStyle_Pack.animatableData.setter(&a4);
      outlined consume of _ShapeStyle_Shape.Result(v34, 1);
      swift_release();
      swift_release();
      swift_release();
      outlined consume of _ShapeStyle_Shape.Result(v39, 1);
      v34 = a7;
    }
    else
    {
      outlined consume of _ShapeStyle_Shape.Result(v34, 1);
      outlined consume of _ShapeStyle_Shape.Result(v34, 1);
      v41 = swift_bridgeObjectRetain();
      outlined consume of _ShapeStyle_Shape.Result(v41, 1);
      swift_release();
      swift_release();
      swift_release();
      outlined consume of _ShapeStyle_Shape.Result(v39, v40);
    }
    *(_QWORD *)(v21 + 32) = v34;
    *(_BYTE *)(v21 + 40) = 1;
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD))(v22[5] + 32))(v21, v22[3]);
    outlined consume of _ShapeStyle_Shape.Result(v34, v35);
    swift_release();
    swift_release();
    swift_release();
  }
  JUMPOUT(0x234EB6C6CLL);
}

uint64_t type metadata completion function for InterpolatedShapeStyle()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for InterpolatedShapeStyle(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = *(_QWORD *)(v7 + 64) + 3;
  v11 = v8 | *(_DWORD *)(v6 + 80) & 0xFC | 3;
  if (v11 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || ((v10 + (v9 & ~v8)) & 0xFFFFFFFFFFFFFFFCLL) + 4 > 0x18)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + ((v11 + 16) & ~v11));
    swift_retain();
  }
  else
  {
    v15 = ~v8;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    v16 = ((unint64_t)a2 + v9) & v15;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(((unint64_t)v4 + v9) & v15, v16, v5);
    *(_DWORD *)((v10 + (((unint64_t)v4 + v9) & v15)) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)((v10 + v16) & 0xFFFFFFFFFFFFFCLL);
  }
  return v4;
}

uint64_t initializeWithCopy for InterpolatedShapeStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v11, v12);
  *(_DWORD *)((*(_QWORD *)(v8 + 64) + 3 + v11) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)((*(_QWORD *)(v8 + 64) + 3 + v12) & 0xFFFFFFFFFFFFFCLL);
  return a1;
}

uint64_t assignWithCopy for InterpolatedShapeStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v11, v12);
  *(_DWORD *)((*(_QWORD *)(v8 + 64) + 3 + v11) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)((*(_QWORD *)(v8 + 64) + 3 + v12) & 0xFFFFFFFFFFFFFCLL);
  return a1;
}

uint64_t initializeWithTake for InterpolatedShapeStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v11, v12);
  *(_DWORD *)((*(_QWORD *)(v8 + 64) + 3 + v11) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)((*(_QWORD *)(v8 + 64) + 3 + v12) & 0xFFFFFFFFFFFFFCLL);
  return a1;
}

uint64_t assignWithTake for InterpolatedShapeStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v11, v12);
  *(_DWORD *)((*(_QWORD *)(v8 + 64) + 3 + v11) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)((*(_QWORD *)(v8 + 64) + 3 + v12) & 0xFFFFFFFFFFFFFCLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for InterpolatedShapeStyle(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  if (v8 >= a2)
  {
    if (v8)
    {
      if (v5 >= v7)
        return (*(uint64_t (**)(uint64_t, _QWORD))(v4 + 48))(a1, *(unsigned int *)(v4 + 84));
      else
        return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
    }
    return 0;
  }
  if (((((*(_QWORD *)(v6 + 64) + (v10 & ~v9) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4) & 0xFFFFFFFC) != 0)
    v11 = 2;
  else
    v11 = a2 - v8 + 1;
  if (v11 >= 0x10000)
    v12 = 4;
  else
    v12 = 2;
  if (v11 < 0x100)
    v12 = 1;
  if (v11 >= 2)
    v13 = v12;
  else
    v13 = 0;
  return ((uint64_t (*)(void))((char *)&loc_234EB73F8 + 4 * byte_2352AC95E[v13]))();
}

void storeEnumTagSinglePayload for InterpolatedShapeStyle(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  if (v7 >= a3)
  {
    v11 = 0;
    if (a2 <= v7)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v6 + 64) + ((*(_DWORD *)(v5 + 64) + (_DWORD)v8) & ~(_DWORD)v8) + 3) & 0xFFFFFFFC) == 0xFFFFFFFC)
      v9 = a3 - v7 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_17:
      __asm { BR              X16 }
  }
  if (((*(_DWORD *)(v6 + 64) + ((*(_DWORD *)(v5 + 64) + (_DWORD)v8) & ~(_DWORD)v8) + 3) & 0xFFFFFFFC) != 0xFFFFFFFC)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + ((*(_QWORD *)(v5 + 64) + v8) & ~v8) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_234EB7594()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_234EB759C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x234EB75A4);
}

void sub_234EB75E0()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_234EB75E8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_234EB75F0(uint64_t a1, int a2, unsigned int a3)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_WORD *)(v9 + v10) = 0;
  if (!a2)
    JUMPOUT(0x234EB75F8);
  if (v4 >= a3)
    return (*(uint64_t (**)(uint64_t))(v7 + 56))(v9);
  else
    return (*(uint64_t (**)(uint64_t))(v6 + 56))((v8 + v9) & v5);
}

_UNKNOWN **sub_234EB7610()
{
  return &protocol witness table for InterpolatedShapeStyle<A, B>;
}

uint64_t EnvironmentValues.foregroundStyle.getter()
{
  return EnvironmentValues.foregroundStyle.getter(specialized PropertyList.Tracker.value<A>(_:for:), specialized find<A>(_:key:));
}

uint64_t EnvironmentValues.foregroundStyle.setter(uint64_t a1)
{
  return EnvironmentValues.foregroundStyle.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.defaultForegroundStyle.getter()
{
  return EnvironmentValues.foregroundStyle.getter(specialized PropertyList.Tracker.value<A>(_:for:), specialized find<A>(_:key:));
}

uint64_t EnvironmentValues.foregroundStyle.getter(uint64_t (*a1)(uint64_t), uint64_t (*a2)(uint64_t))
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v3 = *v2;
  if (v2[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = a1(v3);
    swift_release_n();
  }
  else
  {
    v7 = swift_retain_n();
    v8 = a2(v7);
    if (v8)
    {
      v5 = *(_QWORD *)(v8 + 72);
      swift_retain();
    }
    else
    {
      v5 = 0;
    }
    swift_release();
  }
  swift_release_n();
  return v5;
}

uint64_t EnvironmentValues.defaultForegroundStyle.setter(uint64_t a1)
{
  return EnvironmentValues.foregroundStyle.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.foregroundStyle.setter(uint64_t a1, void (*a2)(uint64_t *, uint64_t, uint64_t *), void (*a3)(uint64_t, uint64_t))
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v7 = *v3;
  swift_retain();
  swift_retain_n();
  a2(v3, a1, &v10);
  swift_release();
  swift_release();
  if (v3[1])
  {
    v8 = *v3;
    swift_retain();
    swift_retain();
    a3(v7, v8);
    swift_release();
    swift_release();
  }
  swift_release();
  return swift_release();
}

uint64_t EnvironmentValues._effectiveForegroundStyle.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_retain();
  swift_retain();
  v0 = EnvironmentValues.foregroundStyle.getter();
  if (v0)
  {
    v1 = v0;
    swift_release();
    swift_release();
  }
  else
  {
    v1 = EnvironmentValues.defaultForegroundStyle.getter();
    swift_release();
    swift_release();
    if (!v1)
    {
      if (one-time initialization token for sharedPrimary != -1)
        swift_once();
      v1 = static HierarchicalShapeStyle.sharedPrimary;
      swift_retain();
    }
  }
  return v1;
}

uint64_t View.foregroundStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for _ForegroundStyleModifier(0, v11, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v20 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v16);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v18, v10, a3);
  View.modifier<A>(_:)(v18, a2, v14, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
}

uint64_t _ForegroundStyleModifier.init(style:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

void _ForegroundStyleModifier2.init(primary:secondary:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
  type metadata accessor for _ForegroundStyleModifier2();
}

uint64_t sub_234EB7A38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v3 + *(int *)(a1 + 52), v2, v1);
}

void View.foregroundStyle<A, B>(_:_:)(uint64_t a1)
{
  uint64_t v1;

  MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v1);
  type metadata accessor for _ForegroundStyleModifier2();
}

void sub_234EB7B18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;

  v17 = MEMORY[0x24BDAC7A8](a1);
  v19 = (char *)&a9 - v18;
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v10 + 16))(v11, *(_QWORD *)(v16 - 160), v15, v17);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v9 + 16))(v14, *(_QWORD *)(v16 - 152), v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v19, v11, v15);
  *(_QWORD *)(v16 - 112) = v15;
  *(_QWORD *)(v16 - 104) = v12;
  v20 = *(_QWORD *)(v16 - 168);
  *(_QWORD *)(v16 - 96) = v13;
  *(_QWORD *)(v16 - 88) = v20;
  type metadata accessor for _ForegroundStyleModifier2();
}

uint64_t sub_234EB7B98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v3 + *(int *)(a1 + 52), v5, v2);
  View.modifier<A>(_:)(v3, *(_QWORD *)(v7 - 136), v6, *(_QWORD *)(v7 - 128));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v6);
}

void View.foregroundStyle<A, B, C>(_:_:_:)(uint64_t a1)
{
  View.foregroundStyle<A, B, C>(_:_:_:)(a1);
}

{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v1);
  MEMORY[0x24BDAC7A8](v2);
  type metadata accessor for _ForegroundStyleModifier3();
}

void _ForegroundStyleModifier3.init(primary:secondary:tertiary:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for _ForegroundStyleModifier3();
}

uint64_t sub_234EB7C7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v5 + *(int *)(a1 + 68), v4, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v5 + *(int *)(a1 + 72), v3, v1);
}

void View._foregroundStyle<A, B, C>(primary:secondary:tertiary:)(uint64_t a1)
{
  View.foregroundStyle<A, B, C>(_:_:_:)(a1);
}

void sub_234EB7DD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;

  *(_QWORD *)(v17 - 208) = *(_QWORD *)(a1 - 8);
  v18 = MEMORY[0x24BDAC7A8](a1);
  v20 = (char *)&a9 - v19;
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v16 + 16))(v10, *(_QWORD *)(v17 - 200), v14, v18);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v15 + 16))(v12, *(_QWORD *)(v17 - 184), v13);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v17 - 192) + 16))(v9, *(_QWORD *)(v17 - 176), v11);
  _ForegroundStyleModifier3.init(primary:secondary:tertiary:)(v10, v14, (uint64_t)v20);
}

uint64_t sub_234EB7E70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  View.modifier<A>(_:)(v0, *(_QWORD *)(v2 - 160), v1, *(_QWORD *)(v2 - 152));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 208) + 8))(v0, v1);
}

uint64_t (*EnvironmentValues.foregroundStyle.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  a1[3] = v1;
  *a1 = EnvironmentValues.foregroundStyle.getter();
  return EnvironmentValues.foregroundStyle.modify;
}

uint64_t EnvironmentValues.foregroundStyle.modify(uint64_t *a1, char a2)
{
  return EnvironmentValues.foregroundStyle.modify(a1, a2, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t (*EnvironmentValues.defaultForegroundStyle.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  a1[3] = v1;
  *a1 = EnvironmentValues.defaultForegroundStyle.getter();
  return EnvironmentValues.defaultForegroundStyle.modify;
}

uint64_t EnvironmentValues.defaultForegroundStyle.modify(uint64_t *a1, char a2)
{
  return EnvironmentValues.foregroundStyle.modify(a1, a2, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.foregroundStyle.modify(uint64_t *a1, char a2, void (*a3)(uint64_t *, uint64_t, uint64_t *), void (*a4)(uint64_t, uint64_t))
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v7 = (uint64_t *)a1[3];
  v8 = *a1;
  v9 = *v7;
  if ((a2 & 1) != 0)
  {
    swift_retain_n();
    swift_retain_n();
    a3(v7, v8, a1 + 1);
    swift_release();
    swift_release();
    if (v7[1])
    {
      v10 = *(_QWORD *)a1[3];
      swift_retain();
      swift_retain();
      a4(v9, v10);
      swift_release();
      swift_release();
    }
    swift_release();
    swift_release();
  }
  else
  {
    swift_retain();
    swift_retain_n();
    a3(v7, v8, a1 + 2);
    swift_release();
    swift_release();
    if (v7[1])
    {
      v11 = *(_QWORD *)a1[3];
      swift_retain();
      swift_retain();
      a4(v9, v11);
      swift_release();
      swift_release();
    }
    swift_release();
  }
  return swift_release();
}

uint64_t EnvironmentValues.currentForegroundStyle.getter()
{
  uint64_t result;

  result = EnvironmentValues.foregroundStyle.getter();
  if (!result)
    return EnvironmentValues.defaultForegroundStyle.getter();
  return result;
}

uint64_t static _ForegroundStyleModifier.graphInputsSemantics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  if (one-time initialization token for v4 != -1)
    result = swift_once();
  *(_DWORD *)a1 = static Semantics.v4;
  *(_BYTE *)(a1 + 4) = 0;
  return result;
}

uint64_t _ForegroundStyleModifier.style.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _ForegroundStyleModifier.style.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_ForegroundStyleModifier.style.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t static _ForegroundStyleModifier._makeViewInputs(modifier:inputs:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int v17;
  int v18;
  _DWORD v19[2];
  _BYTE v20[16];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v7 = *a1;
  v8 = *(_QWORD *)(a2 + 16);
  swift_beginAccess();
  v9 = *(_DWORD *)(v8 + 16);
  v19[0] = v7;
  v19[1] = v9;
  v21 = type metadata accessor for _ForegroundStyleModifier.ForegroundStyleEnvironment(0, a3, a4, v10);
  v22 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ForegroundStyleModifier<A>.ForegroundStyleEnvironment, v21);
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Attribute<EnvironmentValues>, (uint64_t)&type metadata for EnvironmentValues, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE095F0]);
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v19, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v20, v21, MEMORY[0x24BEE4078], v11, MEMORY[0x24BEE40A8], v12);
  v13 = MEMORY[0x24BEE4AF8];
  v14 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
  v15 = swift_allocObject();
  *(_DWORD *)(v15 + 16) = v18;
  *(_QWORD *)(v15 + 24) = v13;
  *(_OWORD *)(v15 + 32) = 0u;
  *(_OWORD *)(v15 + 48) = 0u;
  *(_OWORD *)(v15 + 64) = 0u;
  *(_WORD *)(v15 + 80) = 256;
  *(_QWORD *)(v15 + 88) = v14;
  result = swift_release();
  *(_QWORD *)(a2 + 16) = v15;
  v17 = *(_DWORD *)(a2 + 32);
  if ((v17 & 0x20) == 0)
    *(_DWORD *)(a2 + 32) = v17 | 0x20;
  return result;
}

uint64_t _ForegroundStyleModifier.ForegroundStyleEnvironment.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t Value;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  _QWORD v19[2];

  v7 = type metadata accessor for _ForegroundStyleModifier(0, a1, a2, a3);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v17 - v9;
  MaterialView.ChildEnvironment.environment.getter(a4);
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, Value, v7);
  v12 = *a4;
  v13 = a4[1];
  v19[0] = *a4;
  v19[1] = v13;
  default argument 0 of ShapeStyle.copyStyle(name:in:foregroundStyle:)(&v18);
  swift_retain();
  swift_retain();
  v14 = ShapeStyle.copyStyle(name:in:foregroundStyle:)((uint64_t)&v18, (uint64_t)v19, 0, a1, a2);
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v10, a1);
  swift_retain_n();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a4, v14);
  swift_release();
  swift_release();
  if (a4[1])
  {
    v15 = *a4;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v12, v15);
    swift_release();
    swift_release();
  }
  swift_release();
  return swift_release();
}

uint64_t protocol witness for Rule.value.getter in conformance _ForegroundStyleModifier<A>.ForegroundStyleEnvironment@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  return _ForegroundStyleModifier.ForegroundStyleEnvironment.value.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2, a3);
}

uint64_t protocol witness for static ViewInputsModifier._makeViewInputs(modifier:inputs:) in conformance _ForegroundStyleModifier<A>(int *a1, uint64_t a2, uint64_t a3)
{
  return static _ForegroundStyleModifier._makeViewInputs(modifier:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t static _ForegroundStyleModifier2.graphInputsSemantics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  if (one-time initialization token for v4 != -1)
    result = swift_once();
  *(_DWORD *)a1 = static Semantics.v4;
  *(_BYTE *)(a1 + 4) = 0;
  return result;
}

uint64_t (*_ForegroundStyleModifier2.primary.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ForegroundStyleModifier2.secondary.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t _ForegroundStyleModifier2.secondary.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 40))(v2 + *(int *)(a2 + 52), a1);
}

uint64_t (*_ForegroundStyleModifier2.secondary.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void static _ForegroundStyleModifier2._makeViewInputs(modifier:inputs:)()
{
  swift_beginAccess();
  type metadata accessor for _ForegroundStyleModifier2.ForegroundStyleEnvironment();
}

uint64_t sub_234EB8648(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  uint64_t v11;
  _QWORD v12[4];
  int v13;

  v12[2] = a1;
  v12[3] = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ForegroundStyleModifier2<A, B>.ForegroundStyleEnvironment, a1);
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Attribute<EnvironmentValues>, (uint64_t)&type metadata for EnvironmentValues, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE095F0]);
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v11, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v12, a1, MEMORY[0x24BEE4078], v3, MEMORY[0x24BEE40A8], v4);
  v5 = v13;
  v6 = MEMORY[0x24BEE4AF8];
  v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
  v8 = swift_allocObject();
  *(_DWORD *)(v8 + 16) = v5;
  *(_QWORD *)(v8 + 24) = v6;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_WORD *)(v8 + 80) = 256;
  *(_QWORD *)(v8 + 88) = v7;
  result = swift_release();
  *(_QWORD *)(v1 + 16) = v8;
  v10 = *(_DWORD *)(v1 + 32);
  if ((v10 & 0x20) == 0)
    *(_DWORD *)(v1 + 32) = v10 | 0x20;
  return result;
}

void _ForegroundStyleModifier2.ForegroundStyleEnvironment.modifier.getter()
{
  type metadata accessor for _ForegroundStyleModifier2();
}

uint64_t sub_234EB87A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;

  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, Value, a1);
}

void _ForegroundStyleModifier2.ForegroundStyleEnvironment.value.getter(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[14];

  v10[0] = a3;
  v10[5] = *(_QWORD *)(a2 - 8);
  v10[6] = a1;
  MEMORY[0x24BDAC7A8](a1);
  v10[4] = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10[1] = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v10[10] = v6;
  v10[11] = v7;
  v10[12] = v8;
  v10[13] = v9;
  type metadata accessor for _ForegroundStyleModifier2();
}

void sub_234EB8894(uint64_t a1)
{
  _QWORD *v1;

  MEMORY[0x24BDAC7A8](a1);
  MaterialView.ChildEnvironment.environment.getter(v1);
  _ForegroundStyleModifier2.ForegroundStyleEnvironment.modifier.getter();
}

void sub_234EB88FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  _QWORD *v9;
  uint64_t v10;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 16))(v1, v6, v4);
  v8 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  *(_QWORD *)(v7 - 176) = v8;
  v8(v6, v5);
  v9 = *(_QWORD **)(v7 - 192);
  v10 = v9[1];
  *(_QWORD *)(v7 - 112) = *v9;
  *(_QWORD *)(v7 - 104) = v10;
  default argument 0 of ShapeStyle.copyStyle(name:in:foregroundStyle:)((_BYTE *)(v7 - 113));
  swift_retain();
  swift_retain();
  *(_QWORD *)(v7 - 168) = ShapeStyle.copyStyle(name:in:foregroundStyle:)(v7 - 113, v7 - 112, 0, v4, v3);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 184) + 8))(v1, v4);
  _ForegroundStyleModifier2.ForegroundStyleEnvironment.modifier.getter();
}

uint64_t sub_234EB89AC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *(_QWORD *)(v5 - 160);
  v7 = *(_QWORD *)(v5 - 152);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v4 + *(int *)(v3 + 52), v1);
  (*(void (**)(uint64_t, uint64_t))(v5 - 176))(v4, v3);
  v9 = *v0;
  v8 = v0[1];
  *(_QWORD *)(v5 - 112) = *v0;
  *(_QWORD *)(v5 - 104) = v8;
  default argument 0 of ShapeStyle.copyStyle(name:in:foregroundStyle:)((_BYTE *)(v5 - 113));
  swift_retain();
  swift_retain();
  v10 = v2;
  v11 = v6;
  v12 = ShapeStyle.copyStyle(name:in:foregroundStyle:)(v5 - 113, v5 - 112, 0, v1, v10);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v11, v1);
  type metadata accessor for ShapeStyleBox<ShapeStylePair<AnyShapeStyle, AnyShapeStyle>>(0, &lazy cache variable for type metadata for ShapeStyleBox<ShapeStylePair<AnyShapeStyle, AnyShapeStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStylePair<AnyShapeStyle, AnyShapeStyle>, (uint64_t)&protocol witness table for ShapeStylePair<A, B>);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v5 - 168);
  *(_QWORD *)(v13 + 24) = v12;
  swift_retain_n();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v0, v13);
  swift_release();
  swift_release();
  if (v0[1])
  {
    v14 = *v0;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v9, v14);
    swift_release();
    swift_release();
  }
  swift_release();
  return swift_release();
}

void protocol witness for Rule.value.getter in conformance _ForegroundStyleModifier2<A, B>.ForegroundStyleEnvironment(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  _ForegroundStyleModifier2.ForegroundStyleEnvironment.value.getter(*v2, *(_QWORD *)(a1 + 24), a2);
}

void protocol witness for static ViewInputsModifier._makeViewInputs(modifier:inputs:) in conformance _ForegroundStyleModifier2<A, B>()
{
  static _ForegroundStyleModifier2._makeViewInputs(modifier:inputs:)();
}

uint64_t static _ForegroundStyleModifier3.graphInputsSemantics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  if (one-time initialization token for v4 != -1)
    result = swift_once();
  *(_DWORD *)a1 = static Semantics.v4;
  *(_BYTE *)(a1 + 4) = 0;
  return result;
}

uint64_t (*_ForegroundStyleModifier3.primary.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ForegroundStyleModifier3.secondary.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 68));
}

uint64_t _ForegroundStyleModifier3.secondary.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 40))(v2 + *(int *)(a2 + 68), a1);
}

uint64_t (*_ForegroundStyleModifier3.secondary.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ForegroundStyleModifier3.tertiary.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 32) - 8) + 16))(a2, v2 + *(int *)(a1 + 72));
}

uint64_t _ForegroundStyleModifier3.tertiary.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 32) - 8) + 40))(v2 + *(int *)(a2 + 72), a1);
}

uint64_t (*_ForegroundStyleModifier3.tertiary.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void static _ForegroundStyleModifier3._makeViewInputs(modifier:inputs:)()
{
  swift_beginAccess();
  type metadata accessor for _ForegroundStyleModifier3.ForegroundStyleEnvironment();
}

uint64_t sub_234EB8CD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  uint64_t v11;
  _QWORD v12[4];
  int v13;

  v12[2] = a1;
  v12[3] = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ForegroundStyleModifier3<A, B, C>.ForegroundStyleEnvironment, a1);
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Attribute<EnvironmentValues>, (uint64_t)&type metadata for EnvironmentValues, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE095F0]);
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v11, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v12, a1, MEMORY[0x24BEE4078], v3, MEMORY[0x24BEE40A8], v4);
  v5 = v13;
  v6 = MEMORY[0x24BEE4AF8];
  v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
  v8 = swift_allocObject();
  *(_DWORD *)(v8 + 16) = v5;
  *(_QWORD *)(v8 + 24) = v6;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_WORD *)(v8 + 80) = 256;
  *(_QWORD *)(v8 + 88) = v7;
  result = swift_release();
  *(_QWORD *)(v1 + 16) = v8;
  v10 = *(_DWORD *)(v1 + 32);
  if ((v10 & 0x20) == 0)
    *(_DWORD *)(v1 + 32) = v10 | 0x20;
  return result;
}

void _ForegroundStyleModifier3.ForegroundStyleEnvironment.modifier.getter()
{
  type metadata accessor for _ForegroundStyleModifier3();
}

uint64_t sub_234EB8E38(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;

  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, Value, a1);
}

void _ForegroundStyleModifier3.ForegroundStyleEnvironment.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[26];

  v17[10] = *(_QWORD *)(a4 - 8);
  v17[11] = a4;
  MEMORY[0x24BDAC7A8](a1);
  v17[9] = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[7] = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v17[6] = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[5] = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v17[1] = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[19] = v11;
  v17[20] = v12;
  v17[21] = v13;
  v17[22] = v14;
  v17[23] = v15;
  v17[24] = v16;
  v17[2] = v15;
  type metadata accessor for _ForegroundStyleModifier3();
}

void sub_234EB8F74(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *Value;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 - 192) = a1;
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v4 - 184) = v3;
  Value = (uint64_t *)AGGraphGetValue();
  v7 = *Value;
  v6 = Value[1];
  *(_QWORD *)(v4 - 168) = v1;
  *v1 = v7;
  v1[1] = v6;
  swift_retain();
  swift_retain();
  *(_QWORD *)(v4 - 264) = v2;
  _ForegroundStyleModifier3.ForegroundStyleEnvironment.modifier.getter();
}

void sub_234EB9000()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, _QWORD);
  _QWORD *v8;
  uint64_t v9;

  v5 = *(_QWORD *)(v4 - 248);
  v6 = *(_QWORD *)(v4 - 280);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v6, v1, v3);
  v7 = *(void (**)(uint64_t, _QWORD))(v2 + 8);
  *(_QWORD *)(v4 - 176) = v7;
  v7(v1, *(_QWORD *)(v4 - 192));
  v8 = *(_QWORD **)(v4 - 168);
  v9 = v8[1];
  *(_QWORD *)(v4 - 136) = *v8;
  *(_QWORD *)(v4 - 128) = v9;
  default argument 0 of ShapeStyle.copyStyle(name:in:foregroundStyle:)((_BYTE *)(v4 - 137));
  swift_retain();
  swift_retain();
  *(_QWORD *)(v4 - 256) = v0;
  *(_QWORD *)(v4 - 224) = ShapeStyle.copyStyle(name:in:foregroundStyle:)(v4 - 137, v4 - 136, 0, v3, v0);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v3);
  _ForegroundStyleModifier3.ForegroundStyleEnvironment.modifier.getter();
}

void sub_234EB90CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(_QWORD *)(v3 - 192);
  v6 = *(_QWORD *)(v3 - 240);
  v5 = *(_QWORD *)(v3 - 232);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v6, v0 + *(int *)(v4 + 68), v2);
  (*(void (**)(uint64_t, uint64_t))(v3 - 176))(v0, v4);
  v7 = *(_QWORD **)(v3 - 168);
  v8 = v7[1];
  *(_QWORD *)(v3 - 136) = *v7;
  *(_QWORD *)(v3 - 128) = v8;
  default argument 0 of ShapeStyle.copyStyle(name:in:foregroundStyle:)((_BYTE *)(v3 - 137));
  swift_retain();
  swift_retain();
  *(_QWORD *)(v3 - 248) = ShapeStyle.copyStyle(name:in:foregroundStyle:)(v3 - 137, v3 - 136, 0, v2, v1);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v2);
  _ForegroundStyleModifier3.ForegroundStyleEnvironment.modifier.getter();
}

uint64_t sub_234EB9198()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_QWORD *)(v4 - 216);
  v5 = *(_QWORD *)(v4 - 208);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v6, v2 + *(int *)(v3 + 72), v0);
  (*(void (**)(uint64_t, uint64_t))(v4 - 176))(v2, v3);
  v7 = *(uint64_t **)(v4 - 168);
  v9 = *v7;
  v8 = v7[1];
  *(_QWORD *)(v4 - 136) = *v7;
  *(_QWORD *)(v4 - 128) = v8;
  default argument 0 of ShapeStyle.copyStyle(name:in:foregroundStyle:)((_BYTE *)(v4 - 137));
  swift_retain();
  swift_retain();
  v10 = ShapeStyle.copyStyle(name:in:foregroundStyle:)(v4 - 137, v4 - 136, 0, v0, v1);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v0);
  type metadata accessor for ShapeStyleBox<ShapeStylePair<AnyShapeStyle, AnyShapeStyle>>(0, &lazy cache variable for type metadata for ShapeStyleBox<ShapeStyleTriple<AnyShapeStyle, AnyShapeStyle, AnyShapeStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStyleTriple<AnyShapeStyle, AnyShapeStyle, AnyShapeStyle>, (uint64_t)&protocol witness table for ShapeStyleTriple<A, B, C>);
  v11 = (_QWORD *)swift_allocObject();
  v12 = *(_QWORD *)(v4 - 248);
  v11[2] = *(_QWORD *)(v4 - 224);
  v11[3] = v12;
  v11[4] = v10;
  swift_retain_n();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v7, (uint64_t)v11);
  swift_release();
  swift_release();
  if (v7[1])
  {
    v13 = *v7;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v9, v13);
    swift_release();
    swift_release();
  }
  swift_release();
  return swift_release();
}

void protocol witness for Rule.value.getter in conformance _ForegroundStyleModifier3<A, B, C>.ForegroundStyleEnvironment(uint64_t *a1)
{
  uint64_t *v1;

  _ForegroundStyleModifier3.ForegroundStyleEnvironment.value.getter(*v1, a1[2], a1[3], a1[4]);
}

void protocol witness for static ViewInputsModifier._makeViewInputs(modifier:inputs:) in conformance _ForegroundStyleModifier3<A, B, C>()
{
  static _ForegroundStyleModifier3._makeViewInputs(modifier:inputs:)();
}

double static ForegroundStyle._makeView<A>(view:inputs:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  double result;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  int v19;

  v5 = *(_QWORD *)a2;
  v6 = *(_DWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_DWORD *)(a2 + 80);
  v19 = *a1;
  v11 = v5;
  v12 = v6;
  v13 = v7;
  v9 = *(_OWORD *)(a2 + 40);
  v14 = *(_OWORD *)(a2 + 24);
  v15 = v9;
  v16 = *(_OWORD *)(a2 + 56);
  v17 = *(_QWORD *)(a2 + 72);
  v18 = v8;
  *(_QWORD *)&result = static ShapeStyle.legacyMakeShapeView<A>(view:inputs:)(&v19, &v11, &type metadata for ForegroundStyle, a3, (uint64_t)&protocol witness table for ForegroundStyle, a4, a5).n128_u64[0];
  return result;
}

_BYTE *static ForegroundStyle._apply(to:)(_BYTE *result)
{
  *result = 1;
  return result;
}

uint64_t one-time initialization function for shared(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  type metadata accessor for ShapeStyleBox<ForegroundStyle>(0, a2, a3, a4);
  result = swift_allocObject();
  static ForegroundStyle.shared = result;
  return result;
}

uint64_t specialized _ImplicitShapeStyle._apply(to:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  if (*(_BYTE *)(a1 + 24) != 3)
    return specialized ForegroundStyle._apply(to:)(a1);
  if (*(_OWORD *)a1 == 1)
    v2 = EnvironmentValues.effectiveBackgroundStyle.getter();
  else
    v2 = _ShapeStyle_Shape.effectiveForegroundStyle.getter();
  v4 = v2;
  result = outlined consume of _ShapeStyle_Shape.Result(*(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  *(_QWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 40) = 2;
  return result;
}

uint64_t specialized ForegroundStyle._apply(to:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_BYTE *)(a1 + 106) & 2) != 0)
  {
    if (one-time initialization token for sharedPrimary != -1)
      swift_once();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)static LegacyContentStyle.sharedPrimary + 80))(a1);
  }
  else
  {
    *(_BYTE *)(a1 + 106) |= 2u;
    v2 = _ShapeStyle_Shape.effectiveForegroundStyle.getter();
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 80))(a1);
    result = swift_release();
    if ((*(_BYTE *)(a1 + 106) & 2) != 0)
      *(_BYTE *)(a1 + 106) &= ~2u;
  }
  return result;
}

uint64_t type metadata accessor for _ForegroundStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ForegroundStyleModifier);
}

void type metadata accessor for _ForegroundStyleModifier2()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void type metadata accessor for _ForegroundStyleModifier3()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t type metadata accessor for _ForegroundStyleModifier.ForegroundStyleEnvironment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ForegroundStyleModifier.ForegroundStyleEnvironment);
}

void type metadata accessor for _ForegroundStyleModifier2.ForegroundStyleEnvironment()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void type metadata accessor for _ForegroundStyleModifier3.ForegroundStyleEnvironment()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t sub_234EB9648@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.defaultForegroundStyle.getter();
  *a1 = result;
  return result;
}

uint64_t sub_234EB9680()
{
  uint64_t v0;

  v0 = swift_retain();
  specialized EnvironmentValues.subscript.setter(v0);
  return swift_release();
}

uint64_t getEnumTagSinglePayload for _ForegroundStyleModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234EB9760 + 4 * byte_2352AC9D0[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for _ForegroundStyleModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t getEnumTagSinglePayload for _ForegroundStyleModifier2(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_234EB9A3C + 4 * byte_2352AC9DE[v17 - 1]))();
}

void storeEnumTagSinglePayload for _ForegroundStyleModifier2(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t type metadata completion function for _ForegroundStyleModifier3()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _ForegroundStyleModifier3(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;

  v4 = a1;
  v5 = a3[3];
  v6 = *(_QWORD *)(a3[2] - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = *(_QWORD *)(a3[4] - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v12 = *(_QWORD *)(v7 + 64) + v11;
  v13 = (*(_BYTE *)(v7 + 80) | *(_BYTE *)(v6 + 80) | v11);
  if (v13 <= 7
    && ((v12 + (v9 & ~v8)) & ~(unint64_t)v11) + *(_QWORD *)(v10 + 64) <= 0x18
    && ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v6 + 80) | v11) & 0x100000) == 0)
  {
    v17 = ~v8;
    v18 = ~(unint64_t)v11;
    v21 = a3[4];
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    v19 = ((unint64_t)a2 + v9) & v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(((unint64_t)v4 + v9) & v17, v19, v5);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16))(((((unint64_t)v4 + v9) & v17) + v12) & v18, (v19 + v12) & v18, v21);
  }
  else
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v16 + ((v13 + 16) & ~v13));
    swift_retain();
  }
  return v4;
}

uint64_t destroy for _ForegroundStyleModifier3(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *(_QWORD *)(a2[2] - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(v4 + 64) + a1;
  v6 = *(_QWORD *)(a2[3] - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v7);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(a2[4] - 8) + 8))((v7
                                                                                       + *(_QWORD *)(v6 + 64)
                                                                                       + *(unsigned __int8 *)(*(_QWORD *)(a2[4] - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a2[4] - 8) + 80));
}

uint64_t initializeWithCopy for _ForegroundStyleModifier3(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v10, v11);
  v12 = *(_QWORD *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v12 + 16))((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v12 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80), (*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v12 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  return a1;
}

uint64_t assignWithCopy for _ForegroundStyleModifier3(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v10, v11);
  v12 = *(_QWORD *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v12 + 24))((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v12 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80), (*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v12 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  return a1;
}

uint64_t initializeWithTake for _ForegroundStyleModifier3(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v10, v11);
  v12 = *(_QWORD *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v12 + 32))((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v12 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80), (*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v12 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  return a1;
}

uint64_t assignWithTake for _ForegroundStyleModifier3(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v10, v11);
  v12 = *(_QWORD *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v12 + 40))((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v12 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80), (*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v12 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for _ForegroundStyleModifier3(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  char v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;

  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(a3[3] - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  v9 = a3[4];
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) > v8)
    v8 = *(_DWORD *)(v10 + 84);
  if (!a2)
    return 0;
  v11 = *(unsigned __int8 *)(v6 + 80);
  v12 = *(_QWORD *)(v4 + 64) + v11;
  v13 = *(_QWORD *)(v6 + 64);
  v14 = *(unsigned __int8 *)(v10 + 80);
  v15 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_25;
  v16 = ((v13 + v14 + (v12 & ~v11)) & ~v14) + *(_QWORD *)(v10 + 64);
  v17 = 8 * v16;
  if (v16 <= 3)
  {
    v19 = ((v15 + ~(-1 << v17)) >> v17) + 1;
    if (HIWORD(v19))
    {
      v18 = *(_DWORD *)(a1 + v16);
      if (!v18)
        goto LABEL_25;
      goto LABEL_16;
    }
    if (v19 > 0xFF)
    {
      v18 = *(unsigned __int16 *)(a1 + v16);
      if (!*(_WORD *)(a1 + v16))
        goto LABEL_25;
      goto LABEL_16;
    }
    if (v19 < 2)
    {
LABEL_25:
      if (v8)
      {
        if (v5 == v8)
          return (*(uint64_t (**)(void))(v4 + 48))();
        v22 = (v12 + a1) & ~v11;
        if (v7 == v8)
          return (*(uint64_t (**)(uint64_t))(v6 + 48))(v22);
        else
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v10 + 48))((v22 + v13 + v14) & ~v14, *(unsigned int *)(v10 + 84), v9);
      }
      return 0;
    }
  }
  v18 = *(unsigned __int8 *)(a1 + v16);
  if (!*(_BYTE *)(a1 + v16))
    goto LABEL_25;
LABEL_16:
  v20 = (v18 - 1) << v17;
  if (v16 > 3)
    v20 = 0;
  if ((_DWORD)v16)
  {
    if (v16 <= 3)
      v21 = ((v13 + v14 + (v12 & ~(_DWORD)v11)) & ~(_DWORD)v14) + *(_DWORD *)(v10 + 64);
    else
      v21 = 4;
    __asm { BR              X11 }
  }
  return v8 + v20 + 1;
}

void storeEnumTagSinglePayload for _ForegroundStyleModifier3(_WORD *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(a4[2] - 8);
  v6 = *(_QWORD *)(a4[3] - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(a4[4] - 8);
  if (*(_DWORD *)(v8 + 84) > v7)
    v7 = *(_DWORD *)(v8 + 84);
  v9 = ((*(_QWORD *)(v6 + 64)
       + *(unsigned __int8 *)(v8 + 80)
       + ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
     + *(_QWORD *)(v8 + 64);
  if (a3 > v7)
  {
    if (v9 <= 3)
    {
      v12 = ((a3 - v7 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v12))
      {
        v10 = 4u;
      }
      else if (v12 >= 0x100)
      {
        v10 = 2;
      }
      else
      {
        v10 = v12 > 1;
      }
    }
    else
    {
      v10 = 1u;
    }
  }
  else
  {
    v10 = 0;
  }
  if (v7 < a2)
  {
    v11 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v13;
          *((_BYTE *)a1 + 2) = BYTE2(v13);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v13;
        }
        else
        {
          *(_BYTE *)a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X21 }
}

ValueMetadata *type metadata accessor for ForegroundStyle()
{
  return &type metadata for ForegroundStyle;
}

ValueMetadata *type metadata accessor for _ImplicitShapeStyle()
{
  return &type metadata for _ImplicitShapeStyle;
}

uint64_t sub_234EBA5E0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v4 = *a1;
  v5 = a1[2];
  v6 = type metadata accessor for _ForegroundStyleModifier(255, a1[1], a1[3], a4);
  v8 = type metadata accessor for ModifiedContent(255, v4, v6, v7);
  v10[0] = v5;
  v10[1] = &protocol witness table for _ForegroundStyleModifier<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v8, v10);
}

void sub_234EBA640()
{
  type metadata accessor for _ForegroundStyleModifier2();
}

uint64_t sub_234EBA670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[10];

  v6 = type metadata accessor for ModifiedContent(255, v4, a1, a4);
  v8[0] = v5;
  v8[1] = &protocol witness table for _ForegroundStyleModifier2<A, B>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v6, v8);
}

void sub_234EBA6B0()
{
  type metadata accessor for _ForegroundStyleModifier3();
}

uint64_t sub_234EBA6F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[12];

  v6 = type metadata accessor for ModifiedContent(255, v4, a1, a4);
  v8[0] = v5;
  v8[1] = &protocol witness table for _ForegroundStyleModifier3<A, B, C>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v6, v8);
}

void base witness table accessor for _AttributeBody in _ForegroundStyleModifier3<A, B, C>.ForegroundStyleEnvironment()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for _AttributeBody in _ForegroundStyleModifier2<A, B>.ForegroundStyleEnvironment()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for _AttributeBody in _ForegroundStyleModifier<A>.ForegroundStyleEnvironment()
{
  JUMPOUT(0x23B7C9C04);
}

void type metadata accessor for ShapeStyleBox<ShapeStylePair<AnyShapeStyle, AnyShapeStyle>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v7 = a3(255);
    v9 = type metadata accessor for ShapeStyleBox(a1, v7, a4, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t type metadata accessor for ShapeStyleTriple<AnyShapeStyle, AnyShapeStyle, AnyShapeStyle>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for ShapeStyleTriple<AnyShapeStyle, AnyShapeStyle, AnyShapeStyle>;
  if (!lazy cache variable for type metadata for ShapeStyleTriple<AnyShapeStyle, AnyShapeStyle, AnyShapeStyle>)
    type metadata accessor for ShapeStyleTriple();
  return result;
}

void type metadata accessor for ShapeStyleBox<ForegroundStyle>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ShapeStyleBox<ForegroundStyle>)
  {
    v4 = type metadata accessor for ShapeStyleBox(0, (uint64_t)&type metadata for ForegroundStyle, (uint64_t)&protocol witness table for ForegroundStyle, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ShapeStyleBox<ForegroundStyle>);
  }
}

ValueMetadata *type metadata accessor for ForegroundStyleKey()
{
  return &type metadata for ForegroundStyleKey;
}

ValueMetadata *type metadata accessor for DefaultForegroundStyleKey()
{
  return &type metadata for DefaultForegroundStyleKey;
}

uint64_t static ShapeStyle._apply(to:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t AssociatedConformanceWitness;

  result = swift_getAssociatedTypeWitness();
  if (result != MEMORY[0x24BEE4078])
  {
    v3 = result;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(a1, v3, AssociatedConformanceWitness);
  }
  return result;
}

{
  return static ShapeStyle._apply(to:)(a1);
}

void protocol witness for ShapeStyle.resolve(in:) in conformance LinearGradient()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void ShapeStyle<>.resolve(in:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t _ShapeStyle_Shape.applyingOpacity(at:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  float (*v7)(uint64_t, _QWORD *);
  float v8;
  _QWORD v10[2];

  v4 = a2;
  if (a1 >= 1)
  {
    v6 = *(_QWORD *)(v2 + 56);
    v10[0] = *(_QWORD *)(v2 + 48);
    v10[1] = v6;
    v7 = *(float (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 152);
    swift_retain();
    swift_retain();
    v8 = v7(a1, v10);
    swift_release();
    swift_release();
    type metadata accessor for ColorBox<Color.OpacityColor>(0);
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = a2;
    *(double *)(v4 + 24) = v8;
  }
  swift_retain();
  return v4;
}

float _ShapeStyle_Shape.opacity(for:at:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  float (*v5)(uint64_t, _QWORD *);
  float v6;
  _QWORD v8[2];

  v4 = *(_QWORD *)(v2 + 56);
  v8[0] = *(_QWORD *)(v2 + 48);
  v8[1] = v4;
  v5 = *(float (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 152);
  swift_retain();
  swift_retain();
  v6 = v5(a2, v8);
  swift_release();
  swift_release();
  return v6;
}

double protocol witness for static ShapeStyle._makeView<A>(view:inputs:) in conformance AnyGradient@<D0>(int *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, ValueMetadata *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return static ShapeStyle._makeView<A>(view:inputs:)(a1, a2, a5, a3, a6, a4, a7);
}

double static ShapeStyle._makeView<A>(view:inputs:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, ValueMetadata *a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  double result;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  int v21;

  v7 = *(_QWORD *)a2;
  v8 = *(_DWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_DWORD *)(a2 + 80);
  v21 = *a1;
  v13 = v7;
  v14 = v8;
  v15 = v9;
  v11 = *(_OWORD *)(a2 + 40);
  v16 = *(_OWORD *)(a2 + 24);
  v17 = v11;
  v18 = *(_OWORD *)(a2 + 56);
  v19 = *(_QWORD *)(a2 + 72);
  v20 = v10;
  *(_QWORD *)&result = static ShapeStyle.legacyMakeShapeView<A>(view:inputs:)(&v21, &v13, a3, a4, a5, a6, a7).n128_u64[0];
  return result;
}

uint64_t ShapeStyle.fallbackColor(in:level:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(_QWORD *, uint64_t, uint64_t);
  uint64_t v9;
  int v10;
  _QWORD v12[3];
  char v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char v21;
  __int16 v22;

  v7 = *a1;
  v6 = a1[1];
  v12[1] = 0;
  v12[2] = 0;
  v12[0] = a2;
  v13 = 2;
  v14 = 0;
  v15 = 5;
  v16 = v7;
  v17 = v6;
  v18 = 0u;
  v19 = 0u;
  v20 = 0;
  v21 = 1;
  v22 = 0;
  v8 = *(void (**)(_QWORD *, uint64_t, uint64_t))(a4 + 32);
  swift_retain();
  swift_retain();
  v8(v12, a3, a4);
  v9 = v14;
  v10 = v15;
  outlined copy of _ShapeStyle_Shape.Result(v14, v15);
  outlined consume of _ShapeStyle_Shape.Result(v9, v10);
  swift_release();
  swift_release();
  swift_release();
  if (v10 != 3)
  {
    outlined consume of _ShapeStyle_Shape.Result(v9, v10);
    return 0;
  }
  return v9;
}

float _ShapeStyle_Shape.applyingOpacity(at:to:)(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  if (a1 >= 1)
  {
    v6 = *(_QWORD *)(v2 + 48);
    v5 = *(_QWORD *)(v2 + 56);
    EnvironmentValues.systemColorDefinition.getter();
    v9[0] = v6;
    v9[1] = v5;
    (*(float (**)(uint64_t, _QWORD *))(v7 + 16))(a1, v9);
  }
  return a2;
}

Swift::Float __swiftcall _ShapeStyle_Shape.opacity(at:)(Swift::Int at)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Float result;
  _QWORD v7[2];

  v3 = *(_QWORD *)(v1 + 48);
  v4 = *(_QWORD *)(v1 + 56);
  EnvironmentValues.systemColorDefinition.getter();
  v7[0] = v3;
  v7[1] = v4;
  (*(void (**)(Swift::Int, _QWORD *))(v5 + 16))(at, v7);
  return result;
}

void ShapeStyle.mapCopiedStyle<A>(in:body:)(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v13 = MEMORY[0x24BDAC7A8](a1);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v16 + 24) == 3)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v12 + 32))(a1, v11, v12, v13);
    if (*(_BYTE *)(a1 + 40) == 2)
    {
      v17 = *(_QWORD *)(a1 + 32);
      v18 = swift_retain();
      a2(v18);
      v19 = AnyShapeStyle.init<A>(_:)((uint64_t)v15, a5, a7);
      outlined consume of _ShapeStyle_Shape.Result(v17, 2);
      outlined consume of _ShapeStyle_Shape.Result(v17, 2);
      *(_QWORD *)(a1 + 32) = v19;
      *(_BYTE *)(a1 + 40) = 2;
    }
  }
}

uint64_t _ShapeStyle_Shape.init(operation:result:environment:foregroundStyle:bounds:role:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t result;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_BYTE *)(a1 + 24);
  v10 = *a2;
  v11 = *((_BYTE *)a2 + 8);
  v12 = *a6;
  *(_BYTE *)(a7 + 106) = 0;
  *(_OWORD *)a7 = *(_OWORD *)a1;
  *(_QWORD *)(a7 + 16) = v8;
  *(_BYTE *)(a7 + 24) = v9;
  *(_QWORD *)(a7 + 32) = v10;
  *(_BYTE *)(a7 + 40) = v11;
  *(_OWORD *)(a7 + 48) = *a3;
  *(_QWORD *)(a7 + 64) = a4;
  result = outlined init with take of CGRect?(a5, a7 + 72);
  *(_BYTE *)(a7 + 105) = v12;
  return result;
}

BOOL static _ShapeStyle_Name.< infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

uint64_t _ShapeStyle_Shape.currentForegroundStyle.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 64);
  if (!v1)
  {
    swift_retain();
    swift_retain();
    v2 = EnvironmentValues.foregroundStyle.getter();
    if (!v2)
      v2 = EnvironmentValues.defaultForegroundStyle.getter();
    v1 = v2;
    swift_release();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t ShapeStyle.primaryStyle(in:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(_QWORD *, uint64_t, uint64_t);
  uint64_t v8;
  int v9;
  _QWORD v11[3];
  char v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  __int16 v21;

  v6 = *a1;
  v5 = a1[1];
  v11[1] = 0;
  v11[2] = 0;
  v11[0] = 1;
  v12 = 5;
  v13 = 0;
  v14 = 5;
  v15 = v6;
  v16 = v5;
  v17 = 0u;
  v18 = 0u;
  v19 = 0;
  v20 = 1;
  v21 = 0;
  v7 = *(void (**)(_QWORD *, uint64_t, uint64_t))(a3 + 32);
  swift_retain();
  swift_retain();
  v7(v11, a2, a3);
  v8 = v13;
  v9 = v14;
  outlined copy of _ShapeStyle_Shape.Result(v13, v14);
  outlined consume of _ShapeStyle_Shape.Result(v8, v9);
  swift_release();
  swift_release();
  swift_release();
  if (v9 != 2)
  {
    outlined consume of _ShapeStyle_Shape.Result(v8, v9);
    return 0;
  }
  return v8;
}

uint64_t ShapeStyle.isMultiLevel(in:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(_QWORD *, uint64_t, uint64_t);
  uint64_t v8;
  int v9;
  _QWORD v11[3];
  char v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  __int16 v21;

  v6 = *a1;
  v5 = a1[1];
  memset(v11, 0, sizeof(v11));
  v12 = 5;
  v13 = 0;
  v14 = 5;
  v15 = v6;
  v16 = v5;
  v17 = 0u;
  v18 = 0u;
  v19 = 0;
  v20 = 1;
  v21 = 0;
  v7 = *(void (**)(_QWORD *, uint64_t, uint64_t))(a3 + 32);
  swift_retain();
  swift_retain();
  v7(v11, a2, a3);
  v8 = v13;
  v9 = v14;
  outlined copy of _ShapeStyle_Shape.Result(v13, v14);
  outlined consume of _ShapeStyle_Shape.Result(v8, v9);
  swift_release();
  swift_release();
  swift_release();
  if (v9 == 4)
  {
    if ((v8 & 1) != 0)
      return 1;
  }
  else
  {
    outlined consume of _ShapeStyle_Shape.Result(v8, v9);
  }
  return 0;
}

uint64_t ShapeStyle.copyStyle(name:in:foregroundStyle:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD *, uint64_t, uint64_t);
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[3];
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  char v33;
  __int16 v34;

  v8 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v11;
  v14 = *v13;
  v15 = v13[1];
  v24[1] = 0;
  v24[2] = 0;
  v24[0] = v12;
  v25 = 3;
  v26 = 0;
  v27 = 5;
  v28 = v14;
  v29 = v15;
  v30 = v16;
  v31 = 0u;
  v32 = 0u;
  v33 = 1;
  v34 = 0;
  v18 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v17 + 32);
  swift_retain();
  swift_retain();
  swift_retain();
  v18(v24, a4, a5);
  v19 = v26;
  v20 = v27;
  if (v27 == 2)
  {
    v21 = swift_retain();
    outlined consume of _ShapeStyle_Shape.Result(v21, 2);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v5, a4);
    v22 = AnyShapeStyle.init<A>(_:)((uint64_t)v10, a4, a5);
    outlined consume of _ShapeStyle_Shape.Result(v19, v20);
    swift_release();
    swift_release();
    swift_release();
    return v22;
  }
  return v19;
}

uint64_t _ShapeStyle_Shape.effectiveForegroundStyle.getter()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + 64))
  {
    v1 = *(_QWORD *)(v0 + 64);
  }
  else
  {
    swift_retain();
    swift_retain();
    v1 = EnvironmentValues.foregroundStyle.getter();
    if (!v1)
    {
      v1 = EnvironmentValues.defaultForegroundStyle.getter();
      if (!v1)
      {
        if (one-time initialization token for sharedPrimary != -1)
          swift_once();
        v1 = static HierarchicalShapeStyle.sharedPrimary;
        swift_retain();
      }
    }
    swift_release();
    swift_release();
  }
  swift_retain();
  return v1;
}

void ShapeStyle._apply(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t AssociatedConformanceWitness;
  __int128 v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v9 = (char *)&v12 - v8;
  if (v10 != MEMORY[0x24BEE4078])
  {
    v12 = *(_OWORD *)(a1 + 48);
    (*(void (**)(__int128 *, uint64_t, uint64_t))(a3 + 48))(&v12, a2, a3);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(a1, AssociatedTypeWitness, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  }
}

void static Never._makeView<A>(view:inputs:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for static ShapeStyle._makeView<A>(view:inputs:) in conformance Never()
{
  static Never._makeView<A>(view:inputs:)();
}

uint64_t *ShapeStyle.resolveBackgroundMaterial(in:level:)@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unsigned __int8 v5;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_QWORD *, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  unsigned __int8 v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v32;
  uint64_t v33;
  unint64_t v35;
  unsigned __int8 v36;
  uint64_t v37;
  unint64_t v38[3];
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  unsigned __int8 v48;
  _QWORD v49[3];
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  char v58;
  __int16 v59;

  if (__OFADD__(a2, 1))
  {
    __break(1u);
    goto LABEL_11;
  }
  v5 = a2;
  if (a2 + 1 < a2)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  v9 = *result;
  v8 = result[1];
  v49[0] = 1;
  v49[1] = a2;
  v49[2] = a2 + 1;
  v50 = 1;
  v51 = 0;
  v52 = 5;
  v53 = v9;
  v54 = v8;
  v55 = 0u;
  v56 = 0u;
  v57 = 0;
  v58 = 1;
  v59 = 0;
  v10 = *(void (**)(_QWORD *, uint64_t, uint64_t))(a4 + 32);
  swift_retain();
  swift_retain();
  v10(v49, a3, a4);
  v11 = v51;
  v32 = v52;
  v33 = v51;
  if (v52 == 1)
    swift_bridgeObjectRetain();
  else
    v11 = MEMORY[0x24BEE4AF8];
  v37 = v11;
  v36 = 1;
  _ShapeStyle_Pack.subscript.getter(&v36, v5, (uint64_t)v38);
  swift_bridgeObjectRelease();
  v12 = v38[1];
  v35 = v38[0];
  v14 = v38[2];
  v13 = v39;
  v15 = v40;
  v16 = v41;
  v17 = v42;
  v18 = v43;
  v19 = v44;
  v20 = v45;
  v21 = v46;
  v22 = v47;
  v23 = v48;
  if (v46 == 3)
  {
    v29 = v47;
    v24 = v39;
    v25 = v40;
    v28 = v48;
    v26 = v41;
    v27 = v44;
    outlined copy of Material.ID(v38[0]);
    v19 = v27;
    v16 = v26;
    v23 = v28;
    v15 = v25;
    v13 = v24;
    v22 = v29;
    v21 = 3;
    v30 = v35;
    v31 = v12;
  }
  else
  {
    v31 = 0;
    v30 = 8;
  }
  outlined consume of _ShapeStyle_Pack.Fill(v35, v12, v14, v13, v15, v16, v17, v18, v19, v20, v21);
  outlined consume of GraphicsBlendMode?(v22, v23);
  swift_bridgeObjectRelease();
  outlined consume of _ShapeStyle_Shape.Result(v33, v32);
  swift_release();
  swift_release();
  result = (uint64_t *)swift_release();
  *(_QWORD *)a5 = v30;
  *(_DWORD *)(a5 + 8) = v31;
  return result;
}

uint64_t ShapeStyle.resolveGradient(in:level:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(_QWORD *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  void (*v21)(_QWORD **__return_ptr, uint64_t);
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  float *v31;
  unint64_t v32;
  float v33;
  uint64_t v34;
  char v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  float v61;
  uint64_t v62;
  unsigned __int8 v63;
  _QWORD v64[3];
  char v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  char v73;
  __int16 v74;

  if (__OFADD__(a2, 1))
    goto LABEL_27;
  v5 = a2;
  if (a2 + 1 < a2)
    goto LABEL_28;
  v47 = a5;
  v16 = *a1;
  v15 = a1[1];
  v64[0] = 0;
  v64[1] = a2;
  v64[2] = a2 + 1;
  v65 = 1;
  v66 = 0;
  v67 = 5;
  v68 = v16;
  v69 = v15;
  v70 = 0u;
  v71 = 0u;
  v72 = 0;
  v73 = 1;
  v74 = 0;
  v17 = *(void (**)(_QWORD *, uint64_t, uint64_t))(a4 + 32);
  swift_retain();
  swift_retain();
  v17(v64, a3, a4);
  v18 = v66;
  v45 = v67;
  v46 = v66;
  if (v67 == 1)
    swift_bridgeObjectRetain();
  else
    v18 = MEMORY[0x24BEE4AF8];
  v49 = v18;
  v48 = 0;
  _ShapeStyle_Pack.subscript.getter(&v48, v5, (uint64_t)&v50);
  swift_bridgeObjectRelease();
  v6 = (unint64_t)v50;
  v9 = v53;
  v10 = v54;
  v8 = v58;
  v11 = v59;
  v19 = v62;
  v20 = v63;
  if (v60 != 1)
  {
    outlined consume of _ShapeStyle_Pack.Fill((unint64_t)v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60);
    v26 = v19;
    v27 = v20;
LABEL_16:
    outlined consume of GraphicsBlendMode?(v26, v27);
    swift_bridgeObjectRelease();
    v7 = 0;
    v28 = 0;
    goto LABEL_25;
  }
  v38 = v51;
  v39 = v52;
  v40 = v55;
  v41 = v56;
  v42 = v57;
  v43 = v62;
  v44 = v63;
  v12 = v61;
  v21 = *(void (**)(_QWORD **__return_ptr, uint64_t))(*v50 + 112);
  v22 = swift_retain();
  v21(&v50, v22);
  v7 = v50;
  v37 = v10;
  if (!v50)
  {
    outlined consume of _ShapeStyle_Pack.Fill(v6, v38, v39, v9, v10, v40, v41, v42, v8, v11, 1);
    outlined consume of _ShapeStyle_Pack.Fill(v6, v38, v39, v9, v10, v40, v41, v42, v8, v11, 1);
    v26 = v43;
    v27 = v44;
    goto LABEL_16;
  }
  v5 = v50[2];
  v36 = v51;
  if (v5)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_29;
    while (1)
    {
      v23 = v7[2];
      v24 = v5 - 1;
      if (v23 < v5 - 1)
        v24 = v7[2];
      if (v24 > 1)
      {
        v29 = v24 + 1;
        v30 = v29 & 1;
        if ((v29 & 1) == 0)
          v30 = 2;
        v25 = v29 - v30;
        v31 = (float *)v7 + 23;
        v32 = v25;
        do
        {
          v33 = v12 * *v31;
          *(v31 - 12) = v12 * *(v31 - 12);
          *v31 = v33;
          v31 += 24;
          v32 -= 2;
        }
        while (v32);
      }
      else
      {
        v25 = 0;
      }
      v34 = 48 * v25 + 44;
      while (v25 < v23)
      {
        ++v25;
        *(float *)((char *)v7 + v34) = v12 * *(float *)((char *)v7 + v34);
        v34 += 48;
        if (v5 == v25)
          goto LABEL_24;
      }
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      v7 = specialized _ArrayBuffer._consumeAndCreateNew()(v7);
    }
  }
LABEL_24:
  outlined consume of _ShapeStyle_Pack.Fill(v6, v38, v39, v9, v10, v40, v41, v42, v8, v11, 1);
  outlined consume of _ShapeStyle_Pack.Fill(v6, v38, v39, v9, v37, v40, v41, v42, v8, v11, 1);
  outlined consume of GraphicsBlendMode?(v43, v44);
  swift_bridgeObjectRelease();
  v28 = v36;
LABEL_25:
  *(_QWORD *)v47 = v7;
  *(_BYTE *)(v47 + 8) = v28;
  outlined consume of _ShapeStyle_Shape.Result(v46, v45);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t _ShapeStyle_Name.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

SwiftUI::_ShapeStyle_Name_optional __swiftcall _ShapeStyle_Name.init(rawValue:)(SwiftUI::_ShapeStyle_Name_optional rawValue)
{
  SwiftUI::_ShapeStyle_Name *v1;
  SwiftUI::_ShapeStyle_Name value;

  value = rawValue.value;
  if (rawValue.value >= SwiftUI__ShapeStyle_Name_unknownDefault)
    value = SwiftUI__ShapeStyle_Name_unknownDefault;
  *v1 = value;
  return rawValue;
}

SwiftUI::_ShapeStyle_Name_optional protocol witness for RawRepresentable.init(rawValue:) in conformance _ShapeStyle_Name(Swift::UInt8 *a1)
{
  return _ShapeStyle_Name.init(rawValue:)(*a1);
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance _ShapeStyle_Name(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance _ShapeStyle_Name(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance _ShapeStyle_Name(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance _ShapeStyle_Name(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

__n128 _ShapeStyle_Shape.operation.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unint64_t v2;
  unsigned __int8 v3;
  __n128 result;

  v2 = v1[1].n128_u64[0];
  v3 = v1[1].n128_u8[8];
  result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = v2;
  a1[1].n128_u8[8] = v3;
  return result;
}

__n128 _ShapeStyle_Shape.operation.setter(__n128 *a1)
{
  __n128 *v1;
  unint64_t v2;
  unsigned __int8 v3;
  __n128 result;

  v2 = a1[1].n128_u64[0];
  v3 = a1[1].n128_u8[8];
  result = *a1;
  *v1 = *a1;
  v1[1].n128_u64[0] = v2;
  v1[1].n128_u8[8] = v3;
  return result;
}

uint64_t (*_ShapeStyle_Shape.operation.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ShapeStyle_Shape.result.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)a1 = v2;
  v3 = *(_BYTE *)(v1 + 40);
  *(_BYTE *)(a1 + 8) = v3;
  return outlined copy of _ShapeStyle_Shape.Result(v2, v3);
}

uint64_t _ShapeStyle_Shape.result.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t result;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  result = outlined consume of _ShapeStyle_Shape.Result(*(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 40));
  *(_QWORD *)(v1 + 32) = v2;
  *(_BYTE *)(v1 + 40) = v3;
  return result;
}

uint64_t (*_ShapeStyle_Shape.result.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ShapeStyle_Shape.environment.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 56);
  *a1 = *(_QWORD *)(v1 + 48);
  a1[1] = v2;
  swift_retain();
  return swift_retain();
}

uint64_t _ShapeStyle_Shape.environment.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  swift_release();
  result = swift_release();
  *(_QWORD *)(v1 + 48) = v2;
  *(_QWORD *)(v1 + 56) = v3;
  return result;
}

uint64_t (*_ShapeStyle_Shape.environment.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ShapeStyle_Shape.foregroundStyle.getter()
{
  return swift_retain();
}

uint64_t _ShapeStyle_Shape.foregroundStyle.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v1 + 64) = a1;
  return result;
}

uint64_t (*_ShapeStyle_Shape.foregroundStyle.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

__n128 _ShapeStyle_Shape.bounds.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  __n128 result;
  __int128 v4;

  v2 = *(_BYTE *)(v1 + 104);
  result = *(__n128 *)(v1 + 72);
  v4 = *(_OWORD *)(v1 + 88);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v2;
  return result;
}

uint64_t _ShapeStyle_Shape.bounds.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined init with take of CGRect?(a1, v1 + 72);
}

uint64_t (*_ShapeStyle_Shape.bounds.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void _ShapeStyle_Shape.role.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 105);
}

_BYTE *_ShapeStyle_Shape.role.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 105) = *result;
  return result;
}

uint64_t (*_ShapeStyle_Shape.role.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ShapeStyle_Shape.RecursiveStyles.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t _ShapeStyle_Shape.RecursiveStyles.init(rawValue:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static _ShapeStyle_Shape.RecursiveStyles.content.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static _ShapeStyle_Shape.RecursiveStyles.foreground.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static _ShapeStyle_Shape.RecursiveStyles.background.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

void _ShapeStyle_Shape.activeRecursiveStyles.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 106);
}

_BYTE *_ShapeStyle_Shape.activeRecursiveStyles.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 106) = *result;
  return result;
}

uint64_t (*_ShapeStyle_Shape.activeRecursiveStyles.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t static _ShapeStyle_ShapeType.Operation.== infix(_:_:)()
{
  return 1;
}

void _ShapeStyle_ShapeType.Operation.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int _ShapeStyle_ShapeType.Operation.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t (*_ShapeStyle_ShapeType.operation.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void _ShapeStyle_ShapeType.result.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *_ShapeStyle_ShapeType.result.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*_ShapeStyle_ShapeType.result.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

_UNKNOWN **associated type witness table accessor for ShapeStyle.Resolved : ShapeStyle in Never()
{
  return &protocol witness table for Never;
}

unint64_t lazy protocol witness table accessor for type _ShapeStyle_Name and conformance _ShapeStyle_Name()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ShapeStyle_Name and conformance _ShapeStyle_Name;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_Name and conformance _ShapeStyle_Name)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ShapeStyle_Name, &type metadata for _ShapeStyle_Name);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_Name and conformance _ShapeStyle_Name);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ShapeStyle_Shape.RecursiveStyles and conformance _ShapeStyle_Shape.RecursiveStyles()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ShapeStyle_Shape.RecursiveStyles and conformance _ShapeStyle_Shape.RecursiveStyles;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_Shape.RecursiveStyles and conformance _ShapeStyle_Shape.RecursiveStyles)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ShapeStyle_Shape.RecursiveStyles, &type metadata for _ShapeStyle_Shape.RecursiveStyles);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_Shape.RecursiveStyles and conformance _ShapeStyle_Shape.RecursiveStyles);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ShapeStyle_Shape.RecursiveStyles and conformance _ShapeStyle_Shape.RecursiveStyles;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_Shape.RecursiveStyles and conformance _ShapeStyle_Shape.RecursiveStyles)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ShapeStyle_Shape.RecursiveStyles, &type metadata for _ShapeStyle_Shape.RecursiveStyles);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_Shape.RecursiveStyles and conformance _ShapeStyle_Shape.RecursiveStyles);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ShapeStyle_Shape.RecursiveStyles and conformance _ShapeStyle_Shape.RecursiveStyles;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_Shape.RecursiveStyles and conformance _ShapeStyle_Shape.RecursiveStyles)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ShapeStyle_Shape.RecursiveStyles, &type metadata for _ShapeStyle_Shape.RecursiveStyles);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_Shape.RecursiveStyles and conformance _ShapeStyle_Shape.RecursiveStyles);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ShapeStyle_Shape.RecursiveStyles and conformance _ShapeStyle_Shape.RecursiveStyles;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_Shape.RecursiveStyles and conformance _ShapeStyle_Shape.RecursiveStyles)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ShapeStyle_Shape.RecursiveStyles, &type metadata for _ShapeStyle_Shape.RecursiveStyles);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_Shape.RecursiveStyles and conformance _ShapeStyle_Shape.RecursiveStyles);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ShapeStyle_ShapeType.Operation and conformance _ShapeStyle_ShapeType.Operation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ShapeStyle_ShapeType.Operation and conformance _ShapeStyle_ShapeType.Operation;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_ShapeType.Operation and conformance _ShapeStyle_ShapeType.Operation)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ShapeStyle_ShapeType.Operation, &type metadata for _ShapeStyle_ShapeType.Operation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_ShapeType.Operation and conformance _ShapeStyle_ShapeType.Operation);
  }
  return result;
}

uint64_t dispatch thunk of static ShapeStyle._makeView<A>(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 24))();
}

uint64_t dispatch thunk of ShapeStyle._apply(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of static ShapeStyle._apply(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of ShapeStyle.resolve(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t storeEnumTagSinglePayload for _ShapeStyle_Name(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_234EBC04C + 4 * byte_2352ACE43[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_234EBC080 + 4 * byte_2352ACE3E[v4]))();
}

uint64_t sub_234EBC080(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234EBC088(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234EBC090);
  return result;
}

uint64_t sub_234EBC09C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234EBC0A4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_234EBC0A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234EBC0B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for _ShapeStyle_Name()
{
  return &type metadata for _ShapeStyle_Name;
}

uint64_t destroy for _ShapeStyle_Shape(uint64_t a1)
{
  outlined consume of _ShapeStyle_Shape.Result(*(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for _ShapeStyle_Shape(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_BYTE *)(a2 + 40);
  outlined copy of _ShapeStyle_Shape.Result(v4, v5);
  *(_QWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_WORD *)(a1 + 105) = *(_WORD *)(a2 + 105);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for _ShapeStyle_Shape(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  __int128 v10;

  v4 = *a2;
  *(_OWORD *)(a1 + 9) = *(__int128 *)((char *)a2 + 9);
  *(_OWORD *)a1 = v4;
  v5 = *((_QWORD *)a2 + 4);
  v6 = *((_BYTE *)a2 + 40);
  outlined copy of _ShapeStyle_Shape.Result(v5, v6);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  v8 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v6;
  outlined consume of _ShapeStyle_Shape.Result(v7, v8);
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  swift_retain();
  swift_release();
  v9 = *(__int128 *)((char *)a2 + 72);
  v10 = *(__int128 *)((char *)a2 + 88);
  *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
  *(_OWORD *)(a1 + 88) = v10;
  *(_OWORD *)(a1 + 72) = v9;
  *(_BYTE *)(a1 + 105) = *((_BYTE *)a2 + 105);
  *(_BYTE *)(a1 + 106) = *((_BYTE *)a2 + 106);
  return a1;
}

__n128 __swift_memcpy107_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_OWORD *)(a1 + 91) = *(__int128 *)((char *)a2 + 91);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for _ShapeStyle_Shape(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  char v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  v4 = *(_BYTE *)(a2 + 40);
  v5 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v4;
  outlined consume of _ShapeStyle_Shape.Result(v5, v6);
  swift_release();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_release();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_WORD *)(a1 + 105) = *(_WORD *)(a2 + 105);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ShapeStyle_Shape(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 107))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _ShapeStyle_Shape(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 106) = 0;
    *(_WORD *)(result + 104) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 107) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 107) = 0;
    if (a2)
      *(_QWORD *)(result + 48) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for _ShapeStyle_Shape()
{
  return &type metadata for _ShapeStyle_Shape;
}

uint64_t getEnumTagSinglePayload for _ShapeStyle_Shape.Operation(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFB && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 251);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 5)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _ShapeStyle_Shape.Operation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 251;
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for _ShapeStyle_Shape.Operation(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 24) <= 4u)
    return *(unsigned __int8 *)(a1 + 24);
  else
    return (*(_DWORD *)a1 + 5);
}

uint64_t destructiveInjectEnumTag for _ShapeStyle_Shape.Operation(uint64_t result, unsigned int a2)
{
  uint64_t v2;

  v2 = a2 - 5;
  if (a2 >= 5)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    LOBYTE(a2) = 5;
    *(_QWORD *)result = v2;
  }
  *(_BYTE *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for _ShapeStyle_Shape.Operation()
{
  return &type metadata for _ShapeStyle_Shape.Operation;
}

uint64_t initializeBufferWithCopyOfBuffer for _ShapeStyle_Shape.Result(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  outlined copy of _ShapeStyle_Shape.Result(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for _ShapeStyle_Shape.Result(uint64_t a1)
{
  return outlined consume of _ShapeStyle_Shape.Result(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t assignWithCopy for _ShapeStyle_Shape.Result(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  outlined copy of _ShapeStyle_Shape.Result(*(_QWORD *)a2, v4);
  v5 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v3;
  v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  outlined consume of _ShapeStyle_Shape.Result(v5, v6);
  return a1;
}

uint64_t assignWithTake for _ShapeStyle_Shape.Result(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  char v5;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  outlined consume of _ShapeStyle_Shape.Result(v4, v5);
  return a1;
}

uint64_t getEnumTag for _ShapeStyle_Shape.Result(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 4u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 5);
}

uint64_t destructiveInjectEnumTag for _ShapeStyle_Shape.Result(uint64_t result, unsigned int a2)
{
  if (a2 >= 5)
  {
    *(_QWORD *)result = a2 - 5;
    LOBYTE(a2) = 5;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for _ShapeStyle_Shape.Result()
{
  return &type metadata for _ShapeStyle_Shape.Result;
}

ValueMetadata *type metadata accessor for _ShapeStyle_Shape.PreparedTextResult()
{
  return &type metadata for _ShapeStyle_Shape.PreparedTextResult;
}

ValueMetadata *type metadata accessor for _ShapeStyle_Shape.RecursiveStyles()
{
  return &type metadata for _ShapeStyle_Shape.RecursiveStyles;
}

uint64_t getEnumTagSinglePayload for _ShapeStyle_ShapeType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  int v7;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  if (v6 >= 2)
    v7 = ((v6 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v7 = -2;
  if (v7 < 0)
    v7 = -1;
  return (v7 + 1);
}

uint64_t storeEnumTagSinglePayload for _ShapeStyle_ShapeType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_234EBC728 + 4 * byte_2352ACE4D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_234EBC75C + 4 * byte_2352ACE48[v4]))();
}

uint64_t sub_234EBC75C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234EBC764(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234EBC76CLL);
  return result;
}

uint64_t sub_234EBC778(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234EBC780);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_234EBC784(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234EBC78C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for _ShapeStyle_ShapeType()
{
  return &type metadata for _ShapeStyle_ShapeType;
}

uint64_t storeEnumTagSinglePayload for _ShapeStyle_ShapeType.Operation(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_234EBC7E8 + 4 * byte_2352ACE52[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_234EBC808 + 4 * byte_2352ACE57[v4]))();
}

_BYTE *sub_234EBC7E8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_234EBC808(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_234EBC810(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_234EBC818(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_234EBC820(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_234EBC828(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for _ShapeStyle_ShapeType.Operation()
{
  return &type metadata for _ShapeStyle_ShapeType.Operation;
}

uint64_t getEnumTagSinglePayload for _ShapeStyle_ShapeType.Result(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
  {
    v6 = *a1;
    v7 = v6 >= 2;
    v8 = (v6 + 2147483646) & 0x7FFFFFFF;
    if (!v7)
      v8 = -1;
    if (v8 + 1 >= 2)
      return v8;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 2;
    if (a2 + 2 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_234EBC894 + 4 * byte_2352ACE5C[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for _ShapeStyle_ShapeType.Result(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 2;
  if (a3 + 2 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFE)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_234EBC94C + 4 * byte_2352ACE66[v5]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_234EBC980 + 4 * byte_2352ACE61[v5]))();
}

uint64_t sub_234EBC980(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234EBC988(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234EBC990);
  return result;
}

uint64_t sub_234EBC99C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234EBC9A4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_234EBC9A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234EBC9B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for _ShapeStyle_ShapeType.Result()
{
  return &type metadata for _ShapeStyle_ShapeType.Result;
}

uint64_t ShapeStyle.offset(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v9 = *(_QWORD *)(a2 - 8);
  v10 = MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v12, v4, a2, v10);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v12, a2);
  result = type metadata accessor for OffsetShapeStyle(0, a2, a3, v13);
  *(_QWORD *)(a4 + *(int *)(result + 36)) = a1;
  return result;
}

void OffsetShapeStyle._apply(to:)(uint64_t a1)
{
  char *v1;

  v1 = (char *)&loc_234EBCAF4 + dword_234EBD0C4[*(unsigned __int8 *)(MEMORY[0x24BDAC7A8](a1) + 24)];
  __asm { BR              X13 }
}

void sub_234EBCB04(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v2 + *(int *)(v3 + 36));
  v6 = __OFADD__(v5, v4);
  v7 = v5 + v4;
  if (!v6)
  {
    *v1 = v7;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 0;
    __asm { BR              X3 }
  }
  __break(1u);
  JUMPOUT(0x234EBD03CLL);
}

void ShapeStylePair._apply(to:)(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_234EBD12C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  if (!v2)
    return (*(uint64_t (**)(uint64_t, _QWORD))(v1[4] + 32))(v0, v1[2]);
  *(_QWORD *)v0 = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_BYTE *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD))(v1[5] + 32))(v0, v1[3]);
}

uint64_t static ShapeStylePair._apply(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t protocol witness for static ShapeStyle._apply(to:) in conformance ShapeStylePair<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static ShapeStylePair._apply(to:)(a1, *(_QWORD *)(a2 + 16), a3, *(_QWORD *)(a2 + 32));
}

void ShapeStyleTriple._apply(to:)(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t static ShapeStyleTriple._apply(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

uint64_t protocol witness for static ShapeStyle._apply(to:) in conformance ShapeStyleTriple<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static ShapeStyleTriple._apply(to:)(a1, *(_QWORD *)(a2 + 16), a3, a4, *(_QWORD *)(a2 + 40));
}

uint64_t OffsetShapeStyle.base.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t OffsetShapeStyle.base.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*OffsetShapeStyle.base.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t OffsetShapeStyle.offset.getter(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 36));
}

uint64_t OffsetShapeStyle.offset.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + *(int *)(a2 + 36)) = result;
  return result;
}

uint64_t (*OffsetShapeStyle.offset.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t static OffsetShapeStyle._apply(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t partial apply for closure #1 in OffsetShapeStyle._apply(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = v3[2];
  v7 = v3[3];
  v8 = v3[4];
  v9 = *(_QWORD *)(v8 + *(int *)(type metadata accessor for OffsetShapeStyle(0, v6, v7, a2) + 36));
  *a3 = a1;
  a3[1] = v9;
  return swift_retain();
}

void type metadata accessor for OffsetShapeStyle<AnyShapeStyle>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for OffsetShapeStyle<AnyShapeStyle>)
  {
    v4 = type metadata accessor for OffsetShapeStyle(0, (uint64_t)&type metadata for AnyShapeStyle, (uint64_t)&protocol witness table for AnyShapeStyle, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for OffsetShapeStyle<AnyShapeStyle>);
  }
}

uint64_t type metadata accessor for OffsetShapeStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OffsetShapeStyle);
}

uint64_t protocol witness for static ShapeStyle._apply(to:) in conformance OffsetShapeStyle<A>(uint64_t a1, uint64_t a2)
{
  return static OffsetShapeStyle._apply(to:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t getEnumTagSinglePayload for OffsetShapeStyle(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(void))(v4 + 48))();
    return 0;
  }
  if (((((*(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
    v6 = 2;
  else
    v6 = a2 - v5 + 1;
  if (v6 >= 0x10000)
    v7 = 4;
  else
    v7 = 2;
  if (v6 < 0x100)
    v7 = 1;
  if (v6 >= 2)
    v8 = v7;
  else
    v8 = 0;
  return ((uint64_t (*)(void))((char *)&loc_234EBDBA4 + 4 * byte_2352AD2AA[v8]))();
}

void storeEnumTagSinglePayload for OffsetShapeStyle(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v11 = 0;
    if (a2 <= v7)
      goto LABEL_14;
  }
  else
  {
    v8 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v9 = v8 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_14:
      __asm { BR              X11 }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_234EBDCE4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_234EBDCEC(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x234EBDCF4);
}

void sub_234EBDD10()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_234EBDD18()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_234EBDD20(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v4 + v5) = 0;
  if (!a2)
    JUMPOUT(0x234EBDD28);
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

uint64_t getEnumTagSinglePayload for ShapeStyleTriple(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  char v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;

  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(a3[3] - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  v9 = a3[4];
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) > v8)
    v8 = *(_DWORD *)(v10 + 84);
  if (!a2)
    return 0;
  v11 = *(unsigned __int8 *)(v6 + 80);
  v12 = *(_QWORD *)(v4 + 64) + v11;
  v13 = *(_QWORD *)(v6 + 64);
  v14 = *(unsigned __int8 *)(v10 + 80);
  v15 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_25;
  v16 = ((v13 + v14 + (v12 & ~v11)) & ~v14) + *(_QWORD *)(v10 + 64);
  v17 = 8 * v16;
  if (v16 <= 3)
  {
    v19 = ((v15 + ~(-1 << v17)) >> v17) + 1;
    if (HIWORD(v19))
    {
      v18 = *(_DWORD *)(a1 + v16);
      if (!v18)
        goto LABEL_25;
      goto LABEL_16;
    }
    if (v19 > 0xFF)
    {
      v18 = *(unsigned __int16 *)(a1 + v16);
      if (!*(_WORD *)(a1 + v16))
        goto LABEL_25;
      goto LABEL_16;
    }
    if (v19 < 2)
    {
LABEL_25:
      if (v8)
      {
        if (v5 == v8)
          return (*(uint64_t (**)(void))(v4 + 48))();
        v22 = (v12 + a1) & ~v11;
        if (v7 == v8)
          return (*(uint64_t (**)(uint64_t))(v6 + 48))(v22);
        else
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v10 + 48))((v22 + v13 + v14) & ~v14, *(unsigned int *)(v10 + 84), v9);
      }
      return 0;
    }
  }
  v18 = *(unsigned __int8 *)(a1 + v16);
  if (!*(_BYTE *)(a1 + v16))
    goto LABEL_25;
LABEL_16:
  v20 = (v18 - 1) << v17;
  if (v16 > 3)
    v20 = 0;
  if ((_DWORD)v16)
  {
    if (v16 <= 3)
      v21 = ((v13 + v14 + (v12 & ~(_DWORD)v11)) & ~(_DWORD)v14) + *(_DWORD *)(v10 + 64);
    else
      v21 = 4;
    __asm { BR              X11 }
  }
  return v8 + v20 + 1;
}

void storeEnumTagSinglePayload for ShapeStyleTriple(_WORD *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(a4[2] - 8);
  v6 = *(_QWORD *)(a4[3] - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(a4[4] - 8);
  if (*(_DWORD *)(v8 + 84) > v7)
    v7 = *(_DWORD *)(v8 + 84);
  v9 = ((*(_QWORD *)(v6 + 64)
       + *(unsigned __int8 *)(v8 + 80)
       + ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
     + *(_QWORD *)(v8 + 64);
  if (a3 > v7)
  {
    if (v9 <= 3)
    {
      v12 = ((a3 - v7 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v12))
      {
        v10 = 4u;
      }
      else if (v12 >= 0x100)
      {
        v10 = 2;
      }
      else
      {
        v10 = v12 > 1;
      }
    }
    else
    {
      v10 = 1u;
    }
  }
  else
  {
    v10 = 0;
  }
  if (v7 < a2)
  {
    v11 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v13;
          *((_BYTE *)a1 + 2) = BYTE2(v13);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v13;
        }
        else
        {
          *(_BYTE *)a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X21 }
}

void type metadata accessor for ShapeStyleTriple()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t getEnumTagSinglePayload for ShapeStylePair(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_234EBE230 + 4 * byte_2352AD2C7[v17 - 1]))();
}

void storeEnumTagSinglePayload for ShapeStylePair(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

void type metadata accessor for ShapeStylePair()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t Shape.effectivePath(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, unint64_t a4@<D2>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void (*v13)(char *__return_ptr, uint64_t, uint64_t);
  char v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  int v26;
  char v27;
  _QWORD v28[4];
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  _BYTE v35[48];

  (*(void (**)(_QWORD *__return_ptr))(a2 + 24))(v28);
  v8 = v28[0];
  v9 = v28[1];
  v10 = v28[2];
  v11 = v28[3];
  v12 = v29;
  outlined init with take of Path.Storage((uint64_t)v28, (uint64_t)v35);
  v13 = *(void (**)(char *__return_ptr, uint64_t, uint64_t))(a2 + 40);
  outlined retain of Path.Storage((uint64_t)v35, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
  v13(&v27, a1, a2);
  v14 = v27;
  if (v27 != 2)
  {
    v15 = _threadGeometryProxyData();
    if (v15)
    {
      v16 = *(_DWORD *)(v15 + 48);
      v17 = *(_OWORD *)(v15 + 16);
      v23 = *(_OWORD *)v15;
      v24 = v17;
      v25 = *(_OWORD *)(v15 + 32);
      v26 = v16;
      GeometryProxy.environment.getter(&v30);
      v18 = v30;
      if (v31)
      {
        swift_retain_n();
        swift_retain_n();
        specialized PropertyList.Tracker.value<A>(_:for:)(v18, &v23);
        swift_release_n();
        swift_release_n();
        v19 = v23;
      }
      else
      {
        v20 = swift_retain_n();
        v21 = specialized find<A>(_:key:)(v20);
        if (v21)
          v19 = *(unsigned __int8 *)(v21 + 72);
        else
          v19 = 0;
        swift_release_n();
      }
      if (((v14 & 1) == 0) != v19)
      {
        v23 = 0xBFF0000000000000;
        *(_QWORD *)&v24 = 0;
        *((_QWORD *)&v24 + 1) = 0x3FF0000000000000;
        v25 = a4;
        Path.applying(_:)((double *)&v23, (uint64_t)&v30);
        v8 = v30;
        v9 = v31;
        v10 = v32;
        v11 = v33;
        v12 = v34;
        outlined retain of Path.Storage((uint64_t)v28, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
      }
    }
  }
  result = outlined retain of Path.Storage((uint64_t)v28, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  *(_QWORD *)a3 = v8;
  *(_QWORD *)(a3 + 8) = v9;
  *(_QWORD *)(a3 + 16) = v10;
  *(_QWORD *)(a3 + 24) = v11;
  *(_BYTE *)(a3 + 32) = v12;
  return result;
}

void static Shape.role.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

{
  static Shape.role.getter(a1);
}

uint64_t protocol witness for Shape.layoutDirectionBehavior.getter in conformance CombinedContentShape@<X0>(char *a1@<X8>)
{
  return specialized Shape.layoutDirectionBehavior.getter(a1);
}

uint64_t specialized Shape.layoutDirectionBehavior.getter@<X0>(char *a1@<X8>)
{
  unsigned int v2;
  uint64_t result;
  char v4;

  if (one-time initialization token for v5 != -1)
    swift_once();
  v2 = static Semantics.v5;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FABC & 1) != 0)
    result = dyld_program_minos_at_least();
  else
    result = dword_25426FAB8 >= v2;
  if ((_DWORD)result)
    v4 = 1;
  else
    v4 = 2;
  *a1 = v4;
  return result;
}

uint64_t Shape.layoutDirectionBehavior.getter@<X0>(char *a1@<X8>)
{
  unsigned int v2;
  uint64_t result;
  char v4;

  if (one-time initialization token for v5 != -1)
    swift_once();
  v2 = static Semantics.v5;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FABC & 1) != 0)
    result = dyld_program_minos_at_least();
  else
    result = dword_25426FAB8 >= v2;
  if ((_DWORD)result)
    v4 = 1;
  else
    v4 = 2;
  *a1 = v4;
  return result;
}

{
  return Shape.layoutDirectionBehavior.getter(a1);
}

double Shape.sizeThatFits(_:)(uint64_t a1, char a2)
{
  double result;

  result = *(double *)&a1;
  if ((a2 & 1) != 0)
    return 10.0;
  return result;
}

BOOL static ShapeRole.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void ShapeRole.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int ShapeRole.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Shape.layoutDirectionBehavior.getter in conformance Path@<X0>(char *a1@<X8>)
{
  return specialized Shape.layoutDirectionBehavior.getter(a1);
}

double protocol witness for Shape.sizeThatFits(_:) in conformance RoundedRectangle(uint64_t a1, char a2)
{
  double result;

  result = *(double *)&a1;
  if ((a2 & 1) != 0)
    return 10.0;
  return result;
}

uint64_t protocol witness for Shape.layoutDirectionBehavior.getter in conformance UnevenRoundedRectangle._Inset@<X0>(char *a1@<X8>)
{
  return specialized Shape.layoutDirectionBehavior.getter(a1);
}

uint64_t protocol witness for Shape.layoutDirectionBehavior.getter in conformance Rectangle.AsymmetricalInset@<X0>(char *a1@<X8>)
{
  return specialized Shape.layoutDirectionBehavior.getter(a1);
}

uint64_t protocol witness for Shape.layoutDirectionBehavior.getter in conformance ContainerRelativeShape._Inset@<X0>(char *a1@<X8>)
{
  return specialized Shape.layoutDirectionBehavior.getter(a1);
}

unint64_t lazy protocol witness table accessor for type ShapeRole and conformance ShapeRole()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShapeRole and conformance ShapeRole;
  if (!lazy protocol witness table cache variable for type ShapeRole and conformance ShapeRole)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShapeRole, &type metadata for ShapeRole);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeRole and conformance ShapeRole);
  }
  return result;
}

uint64_t dispatch thunk of Shape.path(in:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static Shape.role.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of Shape.layoutDirectionBehavior.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of Shape.sizeThatFits(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 48))();
}

uint64_t storeEnumTagSinglePayload for ShapeRole(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_234EBEA84 + 4 * byte_2352AD39D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_234EBEAB8 + 4 * byte_2352AD398[v4]))();
}

uint64_t sub_234EBEAB8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234EBEAC0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234EBEAC8);
  return result;
}

uint64_t sub_234EBEAD4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234EBEADCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_234EBEAE0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234EBEAE8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ShapeRole()
{
  return &type metadata for ShapeRole;
}

ValueMetadata *type metadata accessor for GradientForegroundTextEffect()
{
  return &type metadata for GradientForegroundTextEffect;
}

_UNKNOWN **associated type witness table accessor for Text.Effect.Base.Timing : Text.Effect.DurationProvider in GradientForegroundTextEffect()
{
  return &protocol witness table for Text.Effect.DefaultDurationProvider;
}

uint64_t protocol witness for Text.Effect.Filter.apply(to:fragment:timing:state:context:in:) in conformance GradientForegroundTextEffect(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  return specialized GradientForegroundTextEffect.apply(to:fragment:timing:state:context:in:)(a1, a4, a6);
}

unint64_t instantiation function for generic protocol witness table for GradientForegroundTextEffect(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type GradientForegroundTextEffect and conformance GradientForegroundTextEffect();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t specialized GradientForegroundTextEffect.apply(to:fragment:timing:state:context:in:)(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  CGFloat v34;
  CGFloat v35;
  CGFloat v36;
  CGFloat v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  double v42;
  double v43;
  double v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t j;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  float v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  double v71;
  double v72;
  double v73;
  double v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t k;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned __int8 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  CGFloat MinX;
  CGFloat MinY;
  CGFloat MaxX;
  CGFloat MaxY;
  double v103;
  double v104;
  uint64_t v105;
  uint64_t v106;
  _BYTE v107[48];
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  _QWORD v123[4];
  unsigned __int8 v124;
  _QWORD v125[8];
  CGRect v126;
  CGRect v127;
  CGRect v128;
  CGRect v129;
  CGRect v130;
  CGRect v131;
  CGRect v132;
  CGRect v133;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[3];
  v7 = a1[4];
  v8 = a1[5];
  v9 = a1[6];
  v10 = a1[7];
  v11 = *(double *)(a2 + 16);
  v12 = *(double *)(a2 + 24);
  v13 = *(double *)(a2 + 48);
  v14 = *(_BYTE *)(a2 + 56);
  v15 = *(_QWORD *)(a2 + 64);
  v16 = *(_QWORD *)(a2 + 80);
  v125[0] = a1[2];
  v125[1] = v6;
  v125[2] = v7;
  v125[3] = v8;
  v125[4] = v9;
  v125[5] = v10;
  x = *MEMORY[0x24BDBF070];
  y = *(double *)(MEMORY[0x24BDBF070] + 8);
  width = *(double *)(MEMORY[0x24BDBF070] + 16);
  height = *(double *)(MEMORY[0x24BDBF070] + 24);
  v21 = *(_QWORD *)(v5 + 16);
  if (v21)
  {
    v105 = v15;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v22 = v21 - 1;
    for (i = 32; ; i += 144)
    {
      v114 = *(_OWORD *)(v5 + i);
      v24 = *(_OWORD *)(v5 + i + 16);
      v25 = *(_OWORD *)(v5 + i + 32);
      v26 = *(_OWORD *)(v5 + i + 64);
      v117 = *(_OWORD *)(v5 + i + 48);
      v118 = v26;
      v115 = v24;
      v116 = v25;
      v27 = *(_OWORD *)(v5 + i + 80);
      v28 = *(_OWORD *)(v5 + i + 96);
      v29 = *(_OWORD *)(v5 + i + 128);
      v121 = *(_OWORD *)(v5 + i + 112);
      v122 = v29;
      v119 = v27;
      v120 = v28;
      v30 = *(_OWORD *)(v5 + i + 112);
      v111 = *(_OWORD *)(v5 + i + 96);
      v112 = v30;
      v113 = *(_OWORD *)(v5 + i + 128);
      v31 = *(_OWORD *)(v5 + i + 48);
      *(_OWORD *)&v107[32] = *(_OWORD *)(v5 + i + 32);
      v108 = v31;
      v32 = *(_OWORD *)(v5 + i + 80);
      v109 = *(_OWORD *)(v5 + i + 64);
      v110 = v32;
      v33 = *(_OWORD *)(v5 + i + 16);
      *(_OWORD *)v107 = *(_OWORD *)(v5 + i);
      *(_OWORD *)&v107[16] = v33;
      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v114, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
      Text.Effect.ResolvedDrawing.Operation.drawingBounds(context:)();
      v133.origin.x = v34;
      v133.origin.y = v35;
      v133.size.width = v36;
      v133.size.height = v37;
      v126.origin.x = x;
      v126.origin.y = y;
      v126.size.width = width;
      v126.size.height = height;
      v127 = CGRectUnion(v126, v133);
      x = v127.origin.x;
      y = v127.origin.y;
      width = v127.size.width;
      height = v127.size.height;
      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v114, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
      if (!v22)
        break;
      --v22;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v15 = v105;
  }
  if (v15
    && (type metadata accessor for Text.Effect.ConcretePhase<GradientForegroundTextEffect>(0),
        (v38 = swift_dynamicCastClass()) != 0))
  {
    v39 = *(unsigned __int8 *)(v38 + 16);
    if (!v16)
      goto LABEL_14;
  }
  else
  {
    v39 = 0;
    if (!v16)
      goto LABEL_14;
  }
  type metadata accessor for Text.Effect.ConcretePhase<GradientForegroundTextEffect>(0);
  v40 = swift_dynamicCastClass();
  if (v40)
  {
    v41 = *(unsigned __int8 *)(v40 + 16);
    if (v39 == v41)
      goto LABEL_22;
    goto LABEL_16;
  }
LABEL_14:
  if (v39)
  {
    LOBYTE(v41) = 0;
LABEL_16:
    if ((v14 & 0xFE) == 2)
    {
      if (v12 - v11 >= 0.0)
      {
        v103 = (v12 - v11) / v13;
        v43 = 0.0;
        if (v103 >= 0.0)
        {
          if (v103 <= 1.0)
            v43 = (v12 - v11) / v13;
          else
            v43 = 1.0;
        }
      }
      else
      {
        v42 = 0.0;
        v43 = 0.0 / v13;
        if (0.0 / v13 < 0.0 || (v42 = 1.0, v43 > 1.0))
        {
          v44 = 0.0;
          if ((v41 & 1) != 0)
          {
LABEL_57:
            v104 = v44 + v42 * 0.5 + v44 + v42 * 0.5 + -1.0;
            v45 = 1.0 - v104 * v104;
            v46 = *(_QWORD *)(v5 + 16);
            if (!v46)
              goto LABEL_29;
            goto LABEL_25;
          }
LABEL_56:
          v44 = 0.5;
          goto LABEL_57;
        }
      }
      v44 = 0.0;
      v42 = v43;
      if ((v41 & 1) != 0)
        goto LABEL_57;
      goto LABEL_56;
    }
LABEL_22:
    v45 = 1.0;
    if ((v41 & 1) != 0)
      goto LABEL_24;
  }
  v45 = 0.0;
LABEL_24:
  v46 = *(_QWORD *)(v5 + 16);
  if (!v46)
    goto LABEL_29;
LABEL_25:
  swift_bridgeObjectRetain();
  v47 = v46 - 1;
  for (j = 32; ; j += 144)
  {
    v114 = *(_OWORD *)(v5 + j);
    v49 = *(_OWORD *)(v5 + j + 16);
    v50 = *(_OWORD *)(v5 + j + 32);
    v51 = *(_OWORD *)(v5 + j + 64);
    v117 = *(_OWORD *)(v5 + j + 48);
    v118 = v51;
    v115 = v49;
    v116 = v50;
    v52 = *(_OWORD *)(v5 + j + 80);
    v53 = *(_OWORD *)(v5 + j + 96);
    v54 = *(_OWORD *)(v5 + j + 128);
    v121 = *(_OWORD *)(v5 + j + 112);
    v122 = v54;
    v119 = v52;
    v120 = v53;
    v55 = *(_OWORD *)(v5 + j + 112);
    v111 = *(_OWORD *)(v5 + j + 96);
    v112 = v55;
    v113 = *(_OWORD *)(v5 + j + 128);
    v56 = *(_OWORD *)(v5 + j + 48);
    *(_OWORD *)&v107[32] = *(_OWORD *)(v5 + j + 32);
    v108 = v56;
    v57 = *(_OWORD *)(v5 + j + 80);
    v109 = *(_OWORD *)(v5 + j + 64);
    v110 = v57;
    v58 = *(_OWORD *)(v5 + j + 16);
    *(_OWORD *)v107 = *(_OWORD *)(v5 + j);
    *(_OWORD *)&v107[16] = v58;
    v123[0] = v4;
    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v114, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
    Text.Effect.ResolvedDrawing.Operation.draw(at:context:options:in:)((uint64_t)v123, (uint64_t)v125, 0, 0, 1, (uint64_t)a3);
    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v114, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
    if (!v47)
      break;
    --v47;
  }
  swift_bridgeObjectRelease();
LABEL_29:
  v59 = *a3;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v60 = RBDrawingStateInit();
    type metadata accessor for GraphicsContext.Storage();
    swift_allocObject();
    v61 = swift_retain();
    v62 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v61, v60, 1, 0);
    swift_release();
    v59 = v62;
  }
  v63 = RBDrawingStateBeginLayer();
  type metadata accessor for GraphicsContext.Storage();
  swift_allocObject();
  v64 = swift_retain();
  v65 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v64, v63, 0, 1);
  v123[0] = v65;
  v66 = *(float *)(v65 + 32);
  swift_retain_n();
  if (v66 != v45)
  {
    v67 = v65;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v68 = RBDrawingStateInit();
      swift_allocObject();
      v69 = swift_retain();
      v67 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v69, v68, 1, 0);
      v123[0] = v67;
      swift_release();
    }
    *(float *)(v67 + 32) = v45;
  }
  v70 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EF08]), sel_init);
  LODWORD(v71) = *MEMORY[0x24BE7EF80];
  LODWORD(v72) = -1.0;
  LODWORD(v73) = -1.0;
  LODWORD(v74) = 0;
  objc_msgSend(v70, sel_addConditionWithFillColor_colorSpace_, 1, v72, v73, v74, v71);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v75 = RBDrawingStateInit();
    swift_allocObject();
    v76 = swift_retain();
    v123[0] = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v76, v75, 1, 0);
    swift_release();
  }
  RBDrawingStateAddPredicateStyle();
  if (v46)
  {
    swift_bridgeObjectRetain();
    v77 = v46 - 1;
    for (k = 32; ; k += 144)
    {
      v114 = *(_OWORD *)(v5 + k);
      v79 = *(_OWORD *)(v5 + k + 16);
      v80 = *(_OWORD *)(v5 + k + 32);
      v81 = *(_OWORD *)(v5 + k + 64);
      v117 = *(_OWORD *)(v5 + k + 48);
      v118 = v81;
      v115 = v79;
      v116 = v80;
      v82 = *(_OWORD *)(v5 + k + 80);
      v83 = *(_OWORD *)(v5 + k + 96);
      v84 = *(_OWORD *)(v5 + k + 128);
      v121 = *(_OWORD *)(v5 + k + 112);
      v122 = v84;
      v119 = v82;
      v120 = v83;
      v85 = *(_OWORD *)(v5 + k + 112);
      v111 = *(_OWORD *)(v5 + k + 96);
      v112 = v85;
      v113 = *(_OWORD *)(v5 + k + 128);
      v86 = *(_OWORD *)(v5 + k + 48);
      *(_OWORD *)&v107[32] = *(_OWORD *)(v5 + k + 32);
      v108 = v86;
      v87 = *(_OWORD *)(v5 + k + 80);
      v109 = *(_OWORD *)(v5 + k + 64);
      v110 = v87;
      v88 = *(_OWORD *)(v5 + k + 16);
      *(_OWORD *)v107 = *(_OWORD *)(v5 + k);
      *(_OWORD *)&v107[16] = v88;
      v106 = v4;
      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v114, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
      Text.Effect.ResolvedDrawing.Operation.draw(at:context:options:in:)((uint64_t)&v106, (uint64_t)v125, 0xBF800000BF800000, 0x3F80000000000000, 0, (uint64_t)v123);
      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v114, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
      if (!v77)
        break;
      --v77;
    }

    swift_bridgeObjectRelease();
  }
  else
  {

  }
  swift_release();
  swift_release();
  RBDrawingStateClipLayer();
  swift_release();
  swift_retain();
  v128.origin.x = x;
  v128.origin.y = y;
  v128.size.width = width;
  v128.size.height = height;
  if (CGRectIsNull(v128))
  {
    v89 = 0;
    v90 = 0;
    v91 = 0;
    v92 = 0;
    v93 = 6;
  }
  else
  {
    v93 = 0;
    v89 = *(_QWORD *)&x;
    v90 = *(_QWORD *)&y;
    v91 = *(_QWORD *)&width;
    v92 = *(_QWORD *)&height;
  }
  v123[0] = v89;
  v123[1] = v90;
  v123[2] = v91;
  v123[3] = v92;
  v124 = v93;
  type metadata accessor for _ContiguousArrayStorage<Color>();
  v94 = swift_allocObject();
  *(_OWORD *)(v94 + 16) = xmmword_2352828C0;
  if (one-time initialization token for red != -1)
    swift_once();
  *(_QWORD *)(v94 + 32) = static Color.red;
  v95 = one-time initialization token for green;
  swift_retain();
  if (v95 != -1)
    swift_once();
  *(_QWORD *)(v94 + 40) = static Color.green;
  *(_QWORD *)&v114 = v94;
  specialized Array._endMutation()();
  v96 = v114;
  swift_retain();
  v97 = specialized Gradient.init(colors:)(v96);
  v129.origin.x = x;
  v129.origin.y = y;
  v129.size.width = width;
  v129.size.height = height;
  MinX = CGRectGetMinX(v129);
  v130.origin.x = x;
  v130.origin.y = y;
  v130.size.width = width;
  v130.size.height = height;
  MinY = CGRectGetMinY(v130);
  v131.origin.x = x;
  v131.origin.y = y;
  v131.size.width = width;
  v131.size.height = height;
  MaxX = CGRectGetMaxX(v131);
  v132.origin.x = x;
  v132.origin.y = y;
  v132.size.width = width;
  v132.size.height = height;
  MaxY = CGRectGetMaxY(v132);
  v114 = (unint64_t)v97;
  *(CGFloat *)&v115 = MinX;
  *((CGFloat *)&v115 + 1) = MinY;
  *(CGFloat *)&v116 = MaxX;
  *((CGFloat *)&v116 + 1) = MaxY;
  *(_QWORD *)&v118 = 0;
  v117 = 0uLL;
  BYTE8(v118) = 5;
  *(_QWORD *)v107 = 256;
  memset(&v107[8], 0, 33);
  GraphicsContext.draw(_:with:style:)((uint64_t)v123, (unint64_t *)&v114, (uint64_t *)v107, v59);
  outlined consume of Path.Storage(v89, v90, v91, v92, v93);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

void type metadata accessor for _ContiguousArrayStorage<Color>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<Color>)
  {
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Color>);
  }
}

void type metadata accessor for Text.Effect.ConcretePhase<GradientForegroundTextEffect>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for Text.Effect.ConcretePhase<GradientForegroundTextEffect>)
  {
    v2 = lazy protocol witness table accessor for type GradientForegroundTextEffect and conformance GradientForegroundTextEffect();
    v4 = type metadata accessor for Text.Effect.ConcretePhase(a1, (uint64_t)&type metadata for GradientForegroundTextEffect, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for Text.Effect.ConcretePhase<GradientForegroundTextEffect>);
  }
}

uint64_t _StrokedShape.shape.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _StrokedShape.shape.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_StrokedShape.shape.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _StrokedShape.style.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = (_QWORD *)(v2 + *(int *)(a1 + 36));
  v5 = v3[1];
  v4 = v3[2];
  v6 = v3[3];
  v7 = v3[4];
  *a2 = *v3;
  a2[1] = v5;
  a2[2] = v4;
  a2[3] = v6;
  a2[4] = v7;
  return swift_bridgeObjectRetain();
}

__n128 _StrokedShape.style.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  __n128 result;
  __int128 v6;

  v4 = v2 + *(int *)(a2 + 36);
  swift_bridgeObjectRelease();
  result = *(__n128 *)a1;
  v6 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a1;
  *(_OWORD *)(v4 + 16) = v6;
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(a1 + 32);
  return result;
}

uint64_t (*_StrokedShape.style.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

__n128 _StrokedShape.init(shape:style:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  __n128 result;
  __int128 v12;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a5, a1);
  v10 = a5 + *(int *)(type metadata accessor for _StrokedShape(0, a3, a4, v9) + 36);
  result = *(__n128 *)a2;
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v10 = *(_OWORD *)a2;
  *(_OWORD *)(v10 + 16) = v12;
  *(_QWORD *)(v10 + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

uint64_t type metadata accessor for _StrokedShape(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _StrokedShape);
}

double _StrokedShape.path(in:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 *v5;
  __int128 v6;
  double result;
  __int128 v8;
  _QWORD v9[5];
  __int128 v10;
  __int128 v11;
  char v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  (*(void (**)(_QWORD *__return_ptr, _QWORD))(*(_QWORD *)(a1 + 24) + 24))(v9, *(_QWORD *)(a1 + 16));
  v5 = (__int128 *)(v2 + *(int *)(a1 + 36));
  v6 = v5[1];
  v13 = *v5;
  v14 = v6;
  v15 = *((_QWORD *)v5 + 4);
  Path.strokedPath(_:)();
  outlined release of Path((uint64_t)v9);
  result = *(double *)&v10;
  v8 = v11;
  *(_OWORD *)a2 = v10;
  *(_OWORD *)(a2 + 16) = v8;
  *(_BYTE *)(a2 + 32) = v12;
  return result;
}

void static _StrokedShape.role.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t _StrokedShape.layoutDirectionBehavior.getter(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 24) + 40))(*(_QWORD *)(a1 + 16));
}

void _StrokedShape.animatableData.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  double v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[4];

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (char *)v14 - v9;
  (*(void (**)(uint64_t, uint64_t, double))(v6 + 24))(v5, v6, v8);
  v11 = (_QWORD *)(v2 + *(int *)(a1 + 36));
  v12 = v11[2];
  v13 = v11[4];
  v14[1] = *v11;
  v14[2] = v12;
  v14[3] = v13;
  type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>(0);
  swift_getAssociatedConformanceWitness();
  _s7SwiftUI14AnimatablePairVyS2dGACyxq_GAA16VectorArithmeticAAWlTm_0(&lazy protocol witness table cache variable for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>);
  AnimatablePair.init(_:_:)((uint64_t)v10, AssociatedTypeWitness, a2);
}

void _StrokedShape.animatableData.setter(uint64_t a1)
{
  specialized _StrokedShape.animatableData.setter(a1);
}

void sub_234EBF820()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>(255);
  swift_getAssociatedConformanceWitness();
  _s7SwiftUI14AnimatablePairVyS2dGACyxq_GAA16VectorArithmeticAAWlTm_0(&lazy protocol witness table cache variable for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>);
  type metadata accessor for AnimatablePair();
}

uint64_t sub_234EBF8A8(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

void _StrokedShape.animatableData.modify(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;

  v5 = malloc(0x50uLL);
  *a1 = v5;
  v5[4] = a2;
  v5[5] = v2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>(255);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = _s7SwiftUI14AnimatablePairVyS2dGACyxq_GAA16VectorArithmeticAAWlTm_0(&lazy protocol witness table cache variable for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>);
  *v5 = AssociatedTypeWitness;
  v5[1] = v7;
  v5[2] = AssociatedConformanceWitness;
  v5[3] = v9;
  type metadata accessor for AnimatablePair();
}

void sub_234EBF998(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  size_t v4;
  void *v5;

  v2[6] = a1;
  v3 = *(_QWORD *)(a1 - 8);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 + 64);
  v2[8] = malloc(v4);
  v5 = malloc(v4);
  v2[9] = v5;
  _StrokedShape.animatableData.getter(v1, (uint64_t)v5);
}

void (*sub_234EBF9D0())(uint64_t a1, char a2)
{
  return _StrokedShape.animatableData.modify;
}

void _StrokedShape.animatableData.modify(uint64_t a1, char a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 56) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 64), *(_QWORD *)(*(_QWORD *)a1 + 72), *(_QWORD *)(*(_QWORD *)a1 + 48));
    specialized _StrokedShape.animatableData.setter(v2);
  }
  specialized _StrokedShape.animatableData.setter(*(_QWORD *)(*(_QWORD *)a1 + 72));
}

uint64_t _StrokedShape.sizeThatFits(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a5 + 24) + 48))();
}

double protocol witness for Shape.path(in:) in conformance _StrokedShape<A>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v4;
  _OWORD v5[2];
  char v6;

  _StrokedShape.path(in:)(a1, (uint64_t)v5);
  result = *(double *)v5;
  v4 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 32) = v6;
  return result;
}

uint64_t protocol witness for Shape.sizeThatFits(_:) in conformance _StrokedShape<A>(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5)
{
  return _StrokedShape.sizeThatFits(_:)(a1, a2 & 1, a3, a4 & 1, a5);
}

void protocol witness for Animatable.animatableData.setter in conformance _StrokedShape<A>(uint64_t a1)
{
  specialized _StrokedShape.animatableData.setter(a1);
}

void sub_234EBFB4C()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>(255);
  swift_getAssociatedConformanceWitness();
  _s7SwiftUI14AnimatablePairVyS2dGACyxq_GAA16VectorArithmeticAAWlTm_0(&lazy protocol witness table cache variable for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>);
  type metadata accessor for AnimatablePair();
}

uint64_t sub_234EBFBD4(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

void protocol witness for Animatable.animatableData.modify in conformance _StrokedShape<A>(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;

  v5 = malloc(0x50uLL);
  *a1 = v5;
  v5[4] = v2;
  v5[5] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>(255);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = _s7SwiftUI14AnimatablePairVyS2dGACyxq_GAA16VectorArithmeticAAWlTm_0(&lazy protocol witness table cache variable for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>);
  *v5 = AssociatedTypeWitness;
  v5[1] = v7;
  v5[2] = AssociatedConformanceWitness;
  v5[3] = v9;
  type metadata accessor for AnimatablePair();
}

void sub_234EBFCC4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  size_t v4;
  void *v5;

  v2[6] = a1;
  v3 = *(_QWORD *)(a1 - 8);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 + 64);
  v2[8] = malloc(v4);
  v5 = malloc(v4);
  v2[9] = v5;
  _StrokedShape.animatableData.getter(v1, (uint64_t)v5);
}

void (*sub_234EBFCFC())(uint64_t a1, char a2)
{
  return protocol witness for Animatable.animatableData.modify in conformance _StrokedShape<A>;
}

void protocol witness for Animatable.animatableData.modify in conformance _StrokedShape<A>(uint64_t a1, char a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 56) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 64), *(_QWORD *)(*(_QWORD *)a1 + 72), *(_QWORD *)(*(_QWORD *)a1 + 48));
    specialized _StrokedShape.animatableData.setter(v2);
  }
  specialized _StrokedShape.animatableData.setter(*(_QWORD *)(*(_QWORD *)a1 + 72));
}

uint64_t Shape.stroke(style:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v17;

  v9 = *(_QWORD *)(a2 - 8);
  v10 = MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v12, v4, a2, v10);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v12, a2);
  v14 = a4 + *(int *)(type metadata accessor for _StrokedShape(0, a2, a3, v13) + 36);
  v15 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v14 = *(_OWORD *)a1;
  *(_OWORD *)(v14 + 16) = v15;
  *(_QWORD *)(v14 + 32) = *(_QWORD *)(a1 + 32);
  return swift_bridgeObjectRetain();
}

uint64_t Shape.stroke(lineWidth:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  _QWORD v5[5];

  *(double *)v5 = a4;
  v5[1] = 0;
  v5[2] = 0x4024000000000000;
  v5[3] = MEMORY[0x24BEE4AF8];
  v5[4] = 0;
  return Shape.stroke(style:)((uint64_t)v5, a1, a2, a3);
}

void specialized _StrokedShape.animatableData.setter(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  _QWORD v9[4];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))((char *)v9 - v5, a1, AssociatedTypeWitness, v3);
  v6 = type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>(255);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v8 = _s7SwiftUI14AnimatablePairVyS2dGACyxq_GAA16VectorArithmeticAAWlTm_0(&lazy protocol witness table cache variable for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>);
  v9[0] = AssociatedTypeWitness;
  v9[1] = v6;
  v9[2] = AssociatedConformanceWitness;
  v9[3] = v8;
  type metadata accessor for AnimatablePair();
}

uint64_t sub_234EBFFC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _QWORD *v12;

  v7 = (uint64_t *)(v5 + *(int *)(a1 + 52));
  v8 = *v7;
  v9 = v7[1];
  v10 = v7[2];
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v6, v4, v3);
  v12 = (_QWORD *)(v2 + *(int *)(v1 + 36));
  *v12 = v8;
  v12[2] = v9;
  v12[4] = v10;
  return result;
}

uint64_t instantiation function for generic protocol witness table for _StrokedShape<A>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _StrokedShape<A>);
  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _StrokedShape<A>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

void sub_234EC006C(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;

  v5 = type metadata accessor for _StrokedShape(0, *(_QWORD *)(a2 + a1 - 16), *(_QWORD *)(a2 + a1 - 8), a3);
  _StrokedShape.animatableData.getter(v5, a4);
}

void sub_234EC00A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for _StrokedShape(0, *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8), a4);
  specialized _StrokedShape.animatableData.setter(a1);
}

uint64_t sub_234EC00E0()
{
  return 16;
}

__n128 sub_234EC00EC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata completion function for _StrokedShape()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _StrokedShape(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 40 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    *(_DWORD *)(v10 + 8) = *(_DWORD *)(v11 + 8);
    *(_DWORD *)(v10 + 12) = *(_DWORD *)(v11 + 12);
    *(_QWORD *)(v10 + 16) = *(_QWORD *)(v11 + 16);
    *(_QWORD *)(v10 + 24) = *(_QWORD *)(v11 + 24);
    *(_QWORD *)(v10 + 32) = *(_QWORD *)(v11 + 32);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for _StrokedShape(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _StrokedShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
  *(_DWORD *)(v7 + 12) = *(_DWORD *)(v8 + 12);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 + 16);
  *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 + 24);
  *(_QWORD *)(v7 + 32) = *(_QWORD *)(v8 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _StrokedShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
  *(_DWORD *)(v7 + 12) = *(_DWORD *)(v8 + 12);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 + 16);
  *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v7 + 32) = *(_QWORD *)(v8 + 32);
  return a1;
}

uint64_t initializeWithTake for _StrokedShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(v8 + 32);
  v10 = *(_OWORD *)(v8 + 16);
  *(_OWORD *)v7 = *(_OWORD *)v8;
  *(_OWORD *)(v7 + 16) = v10;
  *(_QWORD *)(v7 + 32) = v9;
  return a1;
}

uint64_t assignWithTake for _StrokedShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
  *(_DWORD *)(v7 + 12) = *(_DWORD *)(v8 + 12);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 + 16);
  *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v7 + 32) = *(_QWORD *)(v8 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for _StrokedShape(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 0x18);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 40) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_234EC0510 + 4 * byte_2352AD488[v10]))();
  }
}

void storeEnumTagSinglePayload for _StrokedShape(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFD8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFD8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 40);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_234EC0688()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x234EC070CLL);
}

void sub_234EC0690(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x234EC0698);
  JUMPOUT(0x234EC070CLL);
}

void sub_234EC06DC()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x234EC070CLL);
}

void sub_234EC06E4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x234EC070CLL);
}

uint64_t sub_234EC06EC(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFF)
  {
    if (a2 < 0)
      JUMPOUT(0x234EC06F8);
    *(_QWORD *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 24) = (a2 - 1);
LABEL_6:
    JUMPOUT(0x234EC070CLL);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

void sub_234EC0724(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for _StrokedShape(255, *a1, a1[1], a4);
  JUMPOUT(0x23B7C9C04);
}

uint64_t Location.update()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Location.update()(a1, a2, a3);
  return 1;
}

{
  (*(void (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3);
  return 1;
}

uint64_t AnyLocationBase.deinit()
{
  uint64_t v0;

  return v0;
}

void AnyLocation.wasRead.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyLocation.wasRead.setter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyLocation.wasRead.modify()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyLocation.get()()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyLocation.set(_:transaction:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyLocation.projecting<A>(_:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyLocation.update()()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

BOOL AnyLocation.isEqual(to:)(uint64_t a1)
{
  uint64_t v1;

  return v1 == a1;
}

uint64_t AnyLocation.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t AnyLocation.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t AnyLocation.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t AnyLocation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t static AnyLocation.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a2) & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnyLocation<A>(uint64_t *a1, uint64_t *a2)
{
  return static AnyLocation.== infix(_:_:)(*a1, *a2) & 1;
}

uint64_t LocationBox.location.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 184);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 168) - 8) + 16))(a1, v4);
}

uint64_t property wrapper backing initializer of LocationBox.cache@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = *a1;
  type metadata accessor for AtomicBuffer<LocationProjectionCache>(0, a2, a3, a4);
  result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = v6;
  *a5 = result;
  return result;
}

void type metadata accessor for AtomicBuffer<LocationProjectionCache>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for AtomicBuffer<LocationProjectionCache>)
  {
    v4 = type metadata accessor for AtomicBuffer(0, (uint64_t)&type metadata for LocationProjectionCache, a3, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<LocationProjectionCache>);
  }
}

unint64_t LocationProjectionCache.init()@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result;

  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *a1 = result;
  return result;
}

uint64_t LocationBox.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  LocationBox.init(_:)(a1);
  return v2;
}

uint64_t *LocationBox.init(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 192);
  swift_retain();
  v5 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v6 = *(_QWORD *)(v3 + 168);
  type metadata accessor for AtomicBuffer<LocationProjectionCache>(0, v7, v8, v9);
  v10 = swift_allocObject();
  *(_DWORD *)(v10 + 16) = 0;
  *(uint64_t *)((char *)v1 + v4) = v10;
  *(_QWORD *)(v10 + 24) = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))((uint64_t)v1 + *(_QWORD *)(*v1 + 184), a1, v6);
  swift_release();
  return v1;
}

uint64_t LocationBox.wasRead.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_beginAccess();
  LOBYTE(v1) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v1 + 176) + 24))(*(_QWORD *)(v1 + 168));
  swift_endAccess();
  return v1 & 1;
}

uint64_t LocationBox.wasRead.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  swift_beginAccess();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 + 176) + 32))(a1, *(_QWORD *)(v3 + 168));
  return swift_endAccess();
}

uint64_t (*LocationBox.wasRead.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = LocationBox.wasRead.getter() & 1;
  return LocationBox.wasRead.modify;
}

uint64_t LocationBox.wasRead.modify(uint64_t a1)
{
  return LocationBox.wasRead.setter(*(unsigned __int8 *)(a1 + 8));
}

uint64_t LocationBox.get()(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 168);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (uint64_t)v1 + *(_QWORD *)(v2 + 184);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, v3);
  (*(void (**)(uint64_t))(*(_QWORD *)(v2 + 176) + 48))(v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t LocationBox.set(_:transaction:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v5 = *v2;
  v6 = *(_QWORD *)(*v2 + 168);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (uint64_t)v2 + *(_QWORD *)(v5 + 184);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 + 176) + 56))(a1, a2, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

void LocationBox.projecting<A>(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  os_unfair_lock_s *v4;

  v3 = *v1;
  v4 = *(os_unfair_lock_s **)((char *)v1 + *(_QWORD *)(*v1 + 192));
  swift_retain();
  os_unfair_lock_lock(v4 + 4);
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for LocationBox<A>, v3);
  LocationProjectionCache.reference<A, B>(for:on:)(a1);
}

uint64_t sub_234EC0F3C(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  os_unfair_lock_s *v20;

  os_unfair_lock_unlock(v20);
  swift_release();
  return a1;
}

void LocationProjectionCache.reference<A, B>(for:on:)(uint64_t a1)
{
  uint64_t v1;

  MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v1);
  type metadata accessor for ProjectedLocation();
}

uint64_t sub_234EC1018(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  char v17;
  uint64_t Strong;
  uint64_t AssociatedTypeWitness;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  _BYTE v23[96];

  *(_QWORD *)(v9 - 160) = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v9 - 176) = &v23[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v11);
  v13 = &v23[-v12];
  *(_QWORD *)(v9 - 184) = *(_QWORD *)(v8 + 8);
  _convertToAnyHashable<A>(_:)();
  *(_QWORD *)(v9 - 152) = v2;
  v14 = *v2;
  if (*(_QWORD *)(v14 + 16) && (v15 = specialized __RawDictionaryStorage.find<A>(_:)(v9 - 120), (v16 & 1) != 0))
  {
    outlined init with copy of WeakBox<AnyLocationBase>(*(_QWORD *)(v14 + 56) + 8 * v15, v9 - 136);
    v17 = 0;
  }
  else
  {
    *(_QWORD *)(v9 - 136) = 0;
    v17 = 1;
  }
  *(_BYTE *)(v9 - 128) = v17;
  outlined destroy of AnyHashable(v9 - 120);
  if ((*(_BYTE *)(v9 - 128) & 1) != 0)
  {
    outlined destroy of WeakBox<AnyLocationBase>?(v9 - 136);
    goto LABEL_10;
  }
  Strong = swift_weakLoadStrong();
  outlined destroy of WeakBox<AnyLocationBase>?(v9 - 136);
  if (!Strong)
  {
LABEL_10:
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 16))(v1, *(_QWORD *)(v9 - 200), v6);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 168) + 16))(v7, v4, v3);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 32))(v13, v1, v6);
    *(_QWORD *)(v9 - 120) = v6;
    *(_QWORD *)(v9 - 112) = v3;
    *(_QWORD *)(v9 - 104) = *(_QWORD *)(v9 - 192);
    *(_QWORD *)(v9 - 96) = v8;
    type metadata accessor for ProjectedLocation();
  }
  *(_QWORD *)(v9 - 208) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for AnyLocation(0, AssociatedTypeWitness, v20, v21);
  result = swift_dynamicCastClass();
  if (!result)
  {
    swift_release();
    v4 = *(_QWORD *)(v9 - 208);
    goto LABEL_10;
  }
  return result;
}

uint64_t LocationBox.update()(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v2 = a1;
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 168);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (uint64_t)v1 + *(_QWORD *)(v3 + 184);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  LOBYTE(v2) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 + 176) + 64))(v2, v4);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v2 & 1;
}

uint64_t LocationBox.isEqual(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unsigned int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v19 - v8;
  if (one-time initialization token for v5 != -1)
    swift_once();
  v10 = static Semantics.v5;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FAB4 == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0)
    {
LABEL_7:
      v11 = a1 == v1;
      return v11 & 1;
    }
  }
  else if (static Semantics.forced < v10)
  {
    goto LABEL_7;
  }
  v12 = swift_dynamicCastClass();
  if (v12)
  {
    v13 = v12;
    v14 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 184);
    swift_beginAccess();
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    v15(v9, v14, v3);
    v16 = v13 + *(_QWORD *)(*(_QWORD *)v13 + 184);
    swift_beginAccess();
    v15(v6, v16, v3);
    v11 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v4 + 8);
    v17(v6, v3);
    v17(v9, v3);
  }
  else
  {
    v11 = 0;
  }
  return v11 & 1;
}

void LocationBox.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void LocationBox.init()()
{
  specialized LocationBox.init()();
}

uint64_t LocationBox.__ivar_destroyer()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 168) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 184));
  return swift_release();
}

uint64_t LocationBox.deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 168) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 184));
  swift_release();
  return v0;
}

uint64_t LocationBox.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 168) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 184));
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for Location.wasRead.getter in conformance LocationBox<A>()
{
  return LocationBox.wasRead.getter() & 1;
}

uint64_t protocol witness for Location.wasRead.setter in conformance LocationBox<A>(uint64_t a1)
{
  return LocationBox.wasRead.setter(a1);
}

uint64_t (*protocol witness for Location.wasRead.modify in conformance LocationBox<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = LocationBox.wasRead.modify((uint64_t)v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t protocol witness for Location.get() in conformance LocationBox<A>(uint64_t a1)
{
  return LocationBox.get()(a1);
}

uint64_t protocol witness for Location.set(_:transaction:) in conformance LocationBox<A>(uint64_t a1, uint64_t a2)
{
  return LocationBox.set(_:transaction:)(a1, a2);
}

uint64_t protocol witness for Location.update() in conformance LocationBox<A>(uint64_t a1)
{
  return LocationBox.update()(a1) & 1;
}

Swift::Void __swiftcall LocationProjectionCache.reset()()
{
  _QWORD *v0;

  swift_bridgeObjectRelease();
  *v0 = MEMORY[0x24BEE4B00];
}

uint64_t ProjectedLocation.wasRead.getter(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 32) + 24))(*(_QWORD *)(a1 + 16));
}

uint64_t ProjectedLocation.wasRead.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a2 + 32) + 32))(a1, *(_QWORD *)(a2 + 16));
}

uint64_t ProjectedLocation.get()(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v2 = a1[4];
  v3 = a1[2];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v8 = (char *)&v10 - v7;
  (*(void (**)(uint64_t, uint64_t, double))(v2 + 48))(v3, v2, v6);
  (*(void (**)(char *, _QWORD))(a1[5] + 32))(v8, a1[3]);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, AssociatedTypeWitness);
}

uint64_t ProjectedLocation.set(_:transaction:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v6 = a3[4];
  v7 = a3[2];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v12 = (char *)&v14 - v11;
  (*(void (**)(uint64_t, uint64_t, double))(v6 + 48))(v7, v6, v10);
  (*(void (**)(char *, uint64_t, _QWORD))(a3[5] + 40))(v12, a1, a3[3]);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v12, a2, v7, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, AssociatedTypeWitness);
}

uint64_t ProjectedLocation.update()(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v3 = a2[4];
  v4 = a2[2];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v9 = (char *)&v11 - v8;
  LOBYTE(v3) = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v3 + 64))((char *)&v11 - v8, v4, v3, v7);
  (*(void (**)(char *, _QWORD))(a2[5] + 32))(v9, a2[3]);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, AssociatedTypeWitness);
  return v3 & 1;
}

uint64_t static ProjectedLocation.== infix(_:_:)()
{
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
    type metadata accessor for ProjectedLocation();
  return 0;
}

uint64_t (*protocol witness for Location.wasRead.modify in conformance ProjectedLocation<A, B>(uint64_t a1, uint64_t a2))(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 16) = ProjectedLocation.wasRead.getter(a2) & 1;
  return protocol witness for Location.wasRead.modify in conformance ProjectedLocation<A, B>;
}

uint64_t protocol witness for Location.wasRead.modify in conformance ProjectedLocation<A, B>(uint64_t a1)
{
  return ProjectedLocation.wasRead.setter(*(unsigned __int8 *)(a1 + 16), *(_QWORD *)(a1 + 8));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ProjectedLocation<A, B>()
{
  return static ProjectedLocation.== infix(_:_:)();
}

uint64_t static FunctionalLocation.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v12;
  _QWORD v13[4];
  _QWORD v14[4];
  _BYTE v15[16];
  uint64_t v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14[0] = a1;
  v14[1] = a2;
  v14[2] = a3;
  v14[3] = a4;
  v13[0] = a5;
  v13[1] = a6;
  v13[2] = a7;
  v13[3] = a8;
  v9 = type metadata accessor for FunctionalLocation.Functions(0, a9, a3, a4);
  v16 = v9;
  v17 = v13;
  v18 = 3;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v14, (uint64_t)closure #1 in compareValues<A>(_:_:options:)partial apply, (uint64_t)v15, v9, MEMORY[0x24BEE4078], MEMORY[0x24BEE1328], MEMORY[0x24BEE40A8], v10);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v12;
}

uint64_t protocol witness for Location.wasRead.setter in conformance FunctionalLocation<A>(uint64_t a1, uint64_t a2)
{
  return _ViewInputs.base.modify(a2, a2);
}

uint64_t (*protocol witness for Location.wasRead.modify in conformance FunctionalLocation<A>(uint64_t a1, uint64_t a2))(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 16) = 1;
  return protocol witness for Location.wasRead.modify in conformance FunctionalLocation<A>;
}

uint64_t protocol witness for Location.wasRead.modify in conformance FunctionalLocation<A>(uint64_t a1, uint64_t a2)
{
  return _ViewInputs.base.modify(*(_QWORD *)(a1 + 8), a2);
}

uint64_t protocol witness for Location.get() in conformance FunctionalLocation<A>()
{
  uint64_t (**v0)(void);

  return thunk for @escaping @callee_guaranteed () -> (@out ())(*v0);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FunctionalLocation<A>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static FunctionalLocation.== infix(_:_:)(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3], *(_QWORD *)(a3 + 16)) & 1;
}

uint64_t ConstantLocation.get()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t ConstantLocation.init(value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ConstantLocation<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return static ConstantLocation.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), a4, a5, a6, a7, a8);
}

uint64_t static ConstantLocation.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD v9[4];
  int v10;
  unsigned __int8 v11;

  v9[2] = a3;
  v9[3] = a2;
  v10 = 3;
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in compareValues<A>(_:_:options:), (uint64_t)v9, a3, MEMORY[0x24BEE4078], MEMORY[0x24BEE1328], MEMORY[0x24BEE40A8], a8);
  return v11;
}

uint64_t ZipLocation.wasRead.getter(uint64_t a1, uint64_t a2)
{
  if (((*(uint64_t (**)(void))(*(_QWORD *)a1 + 96))() & 1) != 0)
    return 1;
  else
    return (*(uint64_t (**)(void))(*(_QWORD *)a2 + 96))() & 1;
}

uint64_t ZipLocation.wasRead.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[1];
  (*(void (**)(void))(*(_QWORD *)*v1 + 104))();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 104))(a1);
}

uint64_t ZipLocation.get()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 120))();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 120))(v5);
}

uint64_t ZipLocation.set(_:transaction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v21;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v15 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v16 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v18 = (char *)&v21 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, double))(*(_QWORD *)(a6 - 8) + 16))((char *)&v21 - v17, a1, a6, v16);
  v19 = &v18[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 16))(v19, a2, a7);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)a4 + 128))(v18, a3);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)a5 + 128))(v19, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, TupleTypeMetadata2);
}

uint64_t ZipLocation.update()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  void (*v31)(char *, char *);
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, char *, uint64_t);
  uint64_t v37;
  char *v38;
  char v39;
  uint64_t v40;
  char *v41;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;

  v45 = a5;
  v47 = a4;
  v49 = a1;
  v50 = a2;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v43 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v44 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v48 = (char *)&v43 - v11;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v43 - v13;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v43 - v16;
  v18 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v43 - v23;
  v26 = *(int *)(v25 + 48);
  v46 = (*(uint64_t (**)(char *, double))(*(_QWORD *)a3 + 144))((char *)&v43 - v23, v22);
  v27 = v46 & 1;
  v24[v26] = v46 & 1;
  v28 = *(int *)(TupleTypeMetadata2 + 48);
  LODWORD(v47) = (*(uint64_t (**)(char *))(*(_QWORD *)v47 + 144))(v17);
  v29 = v47 & 1;
  v17[v28] = v47 & 1;
  v30 = *(int *)(v18 + 48);
  v31 = *(void (**)(char *, char *))(*(_QWORD *)(v45 - 8) + 32);
  v32 = v24;
  v33 = v45;
  v31(v20, v32);
  v20[v30] = v27;
  ((void (*)(uint64_t, char *, uint64_t))v31)(v49, v20, v33);
  v34 = *(int *)(TupleTypeMetadata2 + 48);
  v35 = *(_QWORD *)(a6 - 8);
  (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v14, v17, a6);
  v14[v34] = v29;
  v36 = *(void (**)(uint64_t, char *, uint64_t))(v35 + 32);
  v36(v50, v14, a6);
  v37 = *(int *)(TupleTypeMetadata2 + 48);
  v38 = v48;
  v36((uint64_t)v48, v17, a6);
  v38[v37] = v29;
  if ((v46 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v43 + 8))(v38, TupleTypeMetadata2);
    v39 = 1;
  }
  else
  {
    v40 = *(int *)(TupleTypeMetadata2 + 48);
    v41 = v44;
    v36((uint64_t)v44, v38, a6);
    v41[v40] = v29;
    (*(void (**)(char *, uint64_t))(v35 + 8))(v41, a6);
    v39 = v47;
  }
  return v39 & 1;
}

uint64_t static ZipLocation.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = type metadata accessor for AnyLocation(0, a5, a3, a4);
  v10 = type metadata accessor for AnyLocation(0, a6, v8, v9);
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyLocation<A>, v7);
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyLocation<A>, v10);
  return == infix<A, B>(_:_:)() & 1;
}

uint64_t protocol witness for Location.wasRead.getter in conformance ZipLocation<A, B>()
{
  uint64_t *v0;

  return ZipLocation.wasRead.getter(*v0, v0[1]);
}

uint64_t (*protocol witness for Location.wasRead.modify in conformance ZipLocation<A, B>(uint64_t a1, uint64_t a2))(uint64_t a1)
{
  uint64_t *v2;

  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 16) = ZipLocation.wasRead.getter(*v2, v2[1]) & 1;
  return protocol witness for Location.wasRead.modify in conformance ZipLocation<A, B>;
}

uint64_t protocol witness for Location.wasRead.modify in conformance ZipLocation<A, B>(uint64_t a1)
{
  return ZipLocation.wasRead.setter(*(unsigned __int8 *)(a1 + 16));
}

uint64_t protocol witness for Location.get() in conformance ZipLocation<A, B>@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *v1;
  v3 = v1[1];
  v5 = a1 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  return ZipLocation.get()(a1, v5, v4, v3);
}

uint64_t protocol witness for Location.set(_:transaction:) in conformance ZipLocation<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(a3 + 24);
  v8 = a1 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  return ZipLocation.set(_:transaction:)(a1, v8, a2, *v3, v3[1], v6, v7);
}

uint64_t protocol witness for Location.update() in conformance ZipLocation<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *v2;
  v4 = v2[1];
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = a1 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  return ZipLocation.update()(a1, v8, v5, v4, v6, v7);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ZipLocation<A, B>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static ZipLocation.== infix(_:_:)(*a1, a1[1], *a2, a2[1], *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t FlattenedCollectionLocation.base.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2);
}

uint64_t FlattenedCollectionLocation.init(base:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];

  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[1] = v8;
  type metadata accessor for AnyLocation(255, v9, v10, v11);
  type metadata accessor for Array();
  swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a3, v7, a2);
}

uint64_t FlattenedCollectionLocation.primaryLocation.getter()
{
  uint64_t result;
  uint64_t v1;

  Collection.first.getter();
  result = v1;
  if (!v1)
    __break(1u);
  return result;
}

uint64_t FlattenedCollectionLocation.wasRead.getter()
{
  uint64_t v0;
  char v1;

  v0 = FlattenedCollectionLocation.primaryLocation.getter();
  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 96))(v0);
  swift_release();
  return v1 & 1;
}

void key path getter for FlattenedCollectionLocation.wasRead : <A, B>FlattenedCollectionLocation<A, B>()
{
  type metadata accessor for FlattenedCollectionLocation();
}

uint64_t sub_234EC25DC()
{
  _BYTE *v0;
  uint64_t result;

  result = FlattenedCollectionLocation.wasRead.getter();
  *v0 = result & 1;
  return result;
}

void key path setter for FlattenedCollectionLocation.wasRead : <A, B>FlattenedCollectionLocation<A, B>()
{
  type metadata accessor for FlattenedCollectionLocation();
}

uint64_t sub_234EC2628()
{
  uint64_t v0;

  return FlattenedCollectionLocation.wasRead.setter(v0);
}

uint64_t FlattenedCollectionLocation.wasRead.setter(uint64_t a1)
{
  uint64_t v2;

  v2 = FlattenedCollectionLocation.primaryLocation.getter();
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 104))(a1);
  return swift_release();
}

uint64_t (*FlattenedCollectionLocation.wasRead.modify(uint64_t a1, uint64_t a2))(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  char v5;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v2;
  v4 = FlattenedCollectionLocation.primaryLocation.getter();
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 96))(v4);
  swift_release();
  *(_BYTE *)(a1 + 16) = v5 & 1;
  return FlattenedCollectionLocation.wasRead.modify;
}

uint64_t FlattenedCollectionLocation.wasRead.modify(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(a1 + 16);
  v2 = FlattenedCollectionLocation.primaryLocation.getter();
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 104))(v1);
  return swift_release();
}

uint64_t FlattenedCollectionLocation.get()()
{
  uint64_t v0;

  v0 = FlattenedCollectionLocation.primaryLocation.getter();
  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 120))(v0);
  return swift_release();
}

uint64_t FlattenedCollectionLocation.set(_:transaction:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;

  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v14 = (char *)&v17 - v13;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v9, v3, v6, v12);
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()();
    if (!v18)
      break;
    v15 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 128);
    swift_retain();
    v15(a1, a2);
    swift_release_n();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, AssociatedTypeWitness);
}

uint64_t FlattenedCollectionLocation.update()(uint64_t a1)
{
  uint64_t v2;

  v2 = FlattenedCollectionLocation.primaryLocation.getter();
  LOBYTE(a1) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 144))(a1);
  swift_release();
  return a1 & 1;
}

uint64_t static FlattenedCollectionLocation.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t (*protocol witness for Location.wasRead.modify in conformance FlattenedCollectionLocation<A, B>(_QWORD *a1, uint64_t a2))()
{
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = FlattenedCollectionLocation.wasRead.modify((uint64_t)v4, a2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FlattenedCollectionLocation<A, B>()
{
  return static FlattenedCollectionLocation.== infix(_:_:)();
}

void type metadata accessor for ProjectedLocation()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t outlined destroy of WeakBox<AnyLocationBase>?(uint64_t a1)
{
  uint64_t v2;

  _s10Foundation4DateVSgMaTm_0(0, &lazy cache variable for type metadata for WeakBox<AnyLocationBase>?, 255, (uint64_t (*)(uint64_t))type metadata accessor for WeakBox<AnyLocationBase>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for AnyLocationBase()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for LocationBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LocationBox);
}

uint64_t type metadata accessor for AnyLocation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyLocation);
}

void specialized LocationBox.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t instantiation function for generic protocol witness table for LocationBox<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyLocation<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for FlattenedCollectionLocation<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for FlattenedCollectionLocation<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_234EC2AC8@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 96))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_234EC2AFC(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 104))(*a1);
}

uint64_t sub_234EC2B28()
{
  return 8;
}

_QWORD *sub_234EC2B34(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_234EC2B48()
{
  return 32;
}

__n128 sub_234EC2B54(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t dispatch thunk of Location.wasRead.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of Location.wasRead.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of Location.wasRead.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of Location.get()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of Location.set(_:transaction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t dispatch thunk of Location.update()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t method lookup function for AnyLocationBase()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata completion function for AnyLocation()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for AnyLocation()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AnyLocation.wasRead.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of AnyLocation.wasRead.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of AnyLocation.wasRead.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of AnyLocation.get()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of AnyLocation.set(_:transaction:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of AnyLocation.projecting<A>(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of AnyLocation.update()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of AnyLocation.isEqual(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of AnyLocation.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t type metadata completion function for LocationBox()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for LocationBox()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LocationBox.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 200))();
}

ValueMetadata *type metadata accessor for LocationProjectionCache()
{
  return &type metadata for LocationProjectionCache;
}

uint64_t getEnumTagSinglePayload for FlattenedCollectionLocation(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234EC2D94 + 4 * byte_2352AD540[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for FlattenedCollectionLocation(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

void type metadata accessor for FlattenedCollectionLocation()
{
  JUMPOUT(0x23B7C9B5CLL);
}

_QWORD *assignWithCopy for ZipLocation(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t type metadata accessor for ZipLocation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ZipLocation);
}

uint64_t getEnumTagSinglePayload for ConstantLocation(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234EC30B8 + 4 * byte_2352AD54E[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for ConstantLocation(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for ConstantLocation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ConstantLocation);
}

uint64_t type metadata accessor for FunctionalLocation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FunctionalLocation);
}

uint64_t getEnumTagSinglePayload for ProjectedLocation(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_234EC33BC + 4 * byte_2352AD55C[v17 - 1]))();
}

void storeEnumTagSinglePayload for ProjectedLocation(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t instantiation function for generic protocol witness table for ZipLocation<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ZipLocation<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for ConstantLocation<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ConstantLocation<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for FunctionalLocation<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for FunctionalLocation<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for ProjectedLocation<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ProjectedLocation<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for FunctionalLocation.Functions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FunctionalLocation.Functions);
}

uint64_t destroy for FunctionalLocation()
{
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for FunctionalLocation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for FunctionalLocation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for FunctionalLocation(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  return a1;
}

uint64_t closure #1 in compareValues<A>(_:_:options:)partial apply(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return partial apply for closure #1 in compareValues<A>(_:_:options:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

CGPoint __swiftcall UnitPoint.in(_:)(__C::CGRect a1)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGPoint result;

  v3 = a1.size.width * v1 + a1.origin.x;
  v4 = a1.size.height * v2 + a1.origin.y;
  result.y = v4;
  result.x = v3;
  return result;
}

double static UnitPoint.center.getter()
{
  return 0.5;
}

BOOL static UnitPoint.== infix(_:_:)(double a1, double a2, double a3, double a4)
{
  return a2 == a4 && a1 == a3;
}

double UnitPoint.animatableData.getter(double a1)
{
  return a1 * 128.0;
}

double UnitPoint.animatableData.setter(double a1, double a2)
{
  double *v2;
  double result;

  result = a1 * 0.0078125;
  *v2 = result;
  v2[1] = a2 * 0.0078125;
  return result;
}

double static UnitPoint.topLeading.getter()
{
  return static UnitPoint.topLeading.getter(&one-time initialization token for topLeading, (uint64_t)&static UnitPoint.topLeading);
}

CGPoint __swiftcall UnitPoint.in(_:)(CGSize a1)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGPoint result;

  v3 = a1.width * v1;
  v4 = a1.height * v2;
  result.y = v4;
  result.x = v3;
  return result;
}

void UnitPoint.x.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*UnitPoint.x.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double UnitPoint.y.getter(double a1, double a2)
{
  return a2;
}

void UnitPoint.y.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

uint64_t (*UnitPoint.y.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double UnitPoint.init()()
{
  return 0.0;
}

double UnitPoint.init(_:in:)(double a1, double a2, double a3, double a4, double a5)
{
  return (a1 - a3) / a5;
}

double UnitPoint.init(edge:)(char a1)
{
  return dbl_2352ADA38[a1];
}

double static UnitPoint.zero.getter()
{
  return static UnitPoint.topLeading.getter(&one-time initialization token for zero, (uint64_t)&static UnitPoint.zero);
}

double static UnitPoint.leading.getter()
{
  return 0.0;
}

double static UnitPoint.trailing.getter()
{
  return 1.0;
}

double static UnitPoint.top.getter()
{
  return 0.5;
}

double static UnitPoint.bottom.getter()
{
  return 0.5;
}

void one-time initialization function for topLeading()
{
  static UnitPoint.topLeading = 0uLL;
}

double static UnitPoint.topTrailing.getter()
{
  return 1.0;
}

double static UnitPoint.bottomLeading.getter()
{
  return 0.0;
}

double static UnitPoint.bottomTrailing.getter()
{
  return 1.0;
}

int64x2_t one-time initialization function for infinity()
{
  int64x2_t result;

  result = vdupq_n_s64(0x7FF0000000000000uLL);
  static UnitPoint.infinity = (__int128)result;
  return result;
}

double static UnitPoint.infinity.getter()
{
  return static UnitPoint.topLeading.getter(&one-time initialization token for infinity, (uint64_t)&static UnitPoint.infinity);
}

double static UnitPoint.topLeading.getter(_QWORD *a1, uint64_t a2)
{
  if (*a1 != -1)
    swift_once();
  return *(double *)a2;
}

void UnitPoint.hash(into:)(double a1, double a2)
{
  Swift::UInt64 v3;
  Swift::UInt64 v4;

  if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = *(_QWORD *)&a1;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = *(_QWORD *)&a2;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
}

Swift::Int UnitPoint.hashValue.getter(double a1, double a2)
{
  Swift::UInt64 v4;
  Swift::UInt64 v5;

  Hasher.init(_seed:)();
  if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = *(_QWORD *)&a1;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = *(_QWORD *)&a2;
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance UnitPoint()
{
  double *v0;
  double v1;
  double v2;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  UnitPoint.hash(into:)(v1, v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance UnitPoint()
{
  double *v0;

  UnitPoint.hash(into:)(*v0, v0[1]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance UnitPoint()
{
  double *v0;
  double v1;
  double v2;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  UnitPoint.hash(into:)(v1, v2);
  return Hasher._finalize()();
}

double UnitPoint.subscript.getter(char a1, double a2, double a3)
{
  double result;

  if ((a1 & 1) != 0)
    return a3;
  return result;
}

uint64_t UnitPoint.subscript.setter(uint64_t result, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 8 * (result & 1)) = a2;
  return result;
}

double (*UnitPoint.subscript.modify(uint64_t a1, char a2))(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = a2;
  v3 = v2 + 1;
  if ((a2 & 1) == 0)
    v3 = v2;
  *(_QWORD *)a1 = *v3;
  return CGPoint.subscript.modify;
}

double UnitPoint.init(_:in:by:)(char a1, double a2, double a3)
{
  if ((a1 & 1) != 0)
    return a3;
  return a2;
}

float64x2_t (*UnitPoint.animatableData.modify(uint64_t a1))(uint64_t a1)
{
  float64x2_t *v1;

  *(_QWORD *)(a1 + 16) = v1;
  *(float64x2_t *)a1 = vmulq_f64(*v1, (float64x2_t)vdupq_n_s64(0x4060000000000000uLL));
  return UnitPoint.animatableData.modify;
}

float64x2_t UnitPoint.animatableData.modify(uint64_t a1)
{
  float64x2_t result;

  result = vmulq_f64(*(float64x2_t *)a1, (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL));
  *(float64x2_t *)*(_QWORD *)(a1 + 16) = result;
  return result;
}

float64x2_t protocol witness for Animatable.animatableData.getter in conformance UnitPoint@<Q0>(float64x2_t *a1@<X8>)
{
  float64x2_t *v1;
  float64x2_t result;

  result = vmulq_f64(*v1, (float64x2_t)vdupq_n_s64(0x4060000000000000uLL));
  *a1 = result;
  return result;
}

float64x2_t protocol witness for Animatable.animatableData.setter in conformance UnitPoint(float64x2_t *a1)
{
  float64x2_t *v1;
  float64x2_t result;

  result = vmulq_f64(*a1, (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL));
  *v1 = result;
  return result;
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance UnitPoint(uint64_t a1))()
{
  float64x2_t *v1;

  *(_QWORD *)(a1 + 16) = v1;
  *(float64x2_t *)a1 = vmulq_f64(*v1, (float64x2_t)vdupq_n_s64(0x4060000000000000uLL));
  return protocol witness for Animatable.animatableData.modify in conformance UnitPoint;
}

void UnitPoint.codingProxy.getter(double *a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  *a1 = a2;
  a1[1] = a3;
}

void CodableUnitPoint.init(_:)(double *a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  *a1 = a2;
  a1[1] = a3;
}

double CodableUnitPoint.base.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void CodableUnitPoint.base.setter(double a1, double a2)
{
  double *v2;

  *v2 = a1;
  v2[1] = a2;
}

uint64_t (*CodableUnitPoint.base.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t CodableUnitPoint.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];
  uint64_t v7;
  uint64_t v8;

  v4 = *v1;
  v3 = v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  v8 = v4;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v6, v7);
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v2)
  {
    v8 = v3;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v6, v7);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
}

uint64_t CodableUnitPoint.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v7;
  _BYTE v8[24];
  uint64_t v9;
  uint64_t v10;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (!v2)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v8, v9);
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
    v5 = v10;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v8, v9);
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
    v7 = v10;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
    *a2 = v5;
    a2[1] = v7;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableUnitPoint@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return CodableUnitPoint.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableUnitPoint(_QWORD *a1)
{
  return CodableUnitPoint.encode(to:)(a1);
}

double *UnitPoint.encode(to:)(double *result, double a2, double a3)
{
  double *v4;
  double v5;
  double v6;
  Swift::UInt v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  Swift::UInt v11;
  uint64_t v12;
  uint64_t v13;

  v4 = result;
  if (a2 != 0.0)
  {
    v5 = a2;
    v6 = fabs(a2);
    if (v6 >= 65536.0)
      v7 = 9;
    else
      v7 = 13;
    ProtobufEncoder.encodeVarint(_:)(v7);
    if (v6 >= 65536.0)
    {
      v9 = *((_QWORD *)v4 + 1);
      result = (double *)(v9 + 8);
      if (__OFADD__(v9, 8))
      {
        __break(1u);
      }
      else if (*((_QWORD *)v4 + 2) >= (uint64_t)result)
      {
        *((_QWORD *)v4 + 1) = result;
        *(double *)(*(_QWORD *)v4 + v9) = v5;
        goto LABEL_12;
      }
      result = (double *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
      *result = v5;
    }
    else
    {
      v8 = *((_QWORD *)v4 + 1);
      result = (double *)(v8 + 4);
      if (__OFADD__(v8, 4))
      {
        __break(1u);
      }
      else
      {
        *(float *)&v5 = v5;
        if (*((_QWORD *)v4 + 2) >= (uint64_t)result)
        {
          *((_QWORD *)v4 + 1) = result;
          *(_DWORD *)(*(_QWORD *)v4 + v8) = LODWORD(v5);
          goto LABEL_12;
        }
      }
      result = (double *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
      *(_DWORD *)result = LODWORD(v5);
    }
  }
LABEL_12:
  if (a3 != 0.0)
  {
    v10 = fabs(a3);
    if (v10 >= 65536.0)
      v11 = 17;
    else
      v11 = 21;
    ProtobufEncoder.encodeVarint(_:)(v11);
    if (v10 < 65536.0)
    {
      v12 = *((_QWORD *)v4 + 1);
      result = (double *)(v12 + 4);
      if (!__OFADD__(v12, 4))
      {
        *(float *)&a3 = a3;
        if (*((_QWORD *)v4 + 2) >= (uint64_t)result)
        {
          *((_QWORD *)v4 + 1) = result;
          *(_DWORD *)(*(_QWORD *)v4 + v12) = LODWORD(a3);
          return result;
        }
        goto LABEL_30;
      }
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      result = (double *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
      *(_DWORD *)result = LODWORD(a3);
      return result;
    }
    v13 = *((_QWORD *)v4 + 1);
    result = (double *)(v13 + 8);
    if (__OFADD__(v13, 8))
      goto LABEL_29;
    if (*((_QWORD *)v4 + 2) < (uint64_t)result)
    {
      result = (double *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
      *result = a3;
    }
    else
    {
      *((_QWORD *)v4 + 1) = result;
      *(double *)(*(_QWORD *)v4 + v13) = a3;
    }
  }
  return result;
}

double UnitPoint.init(from:)(_QWORD *a1)
{
  return specialized UnitPoint.init(from:)(a1);
}

double *protocol witness for ProtobufEncodableMessage.encode(to:) in conformance UnitPoint(double *a1)
{
  double *v1;

  return UnitPoint.encode(to:)(a1, *v1, v1[1]);
}

void protocol witness for ProtobufDecodableMessage.init(from:) in conformance UnitPoint(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double v4;
  uint64_t v5;

  v4 = specialized UnitPoint.init(from:)(a1);
  if (!v2)
  {
    *(double *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v5;
  }
}

double specialized UnitPoint.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  double v3;
  unint64_t v4;
  unint64_t i;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  double *v9;
  unint64_t v10;
  uint64_t v11;
  float *v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (one-time initialization token for zero != -1)
    swift_once();
  v3 = *(double *)&static UnitPoint.zero;
  v4 = a1[1];
  for (i = a1[2]; v4 < i; i = a1[2])
  {
    v6 = a1[3];
    if (v6)
    {
      v7 = a1[4];
      if (v4 < v7)
        goto LABEL_15;
      if (v7 < v4)
        goto LABEL_49;
      a1[3] = 0;
    }
    v6 = ProtobufDecoder.decodeVarint()();
    if (v1)
      return v3;
    if (v6 <= 7)
    {
LABEL_49:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
      return v3;
    }
LABEL_15:
    if (v6 >> 3 == 2)
    {
      v10 = v6 & 7;
      if (v10 != 5)
      {
        if (v10 == 2)
        {
          v15 = ProtobufDecoder.decodeVarint()();
          if (v1)
            return v3;
          if (v15 < 0)
            goto LABEL_52;
          v11 = a1[1];
          if (i < v11 + v15)
            goto LABEL_49;
          a1[3] = 17;
          a1[4] = v11 + v15;
        }
        else
        {
          if (v10 != 1)
            goto LABEL_49;
          v11 = a1[1];
        }
        v4 = v11 + 8;
        if (i < v11 + 8)
          goto LABEL_49;
LABEL_7:
        a1[1] = v4;
        continue;
      }
      v4 = a1[1] + 4;
      if (i < v4)
        goto LABEL_49;
      a1[1] = v4;
    }
    else
    {
      if (v6 >> 3 != 1)
      {
        switch(v6 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (v1)
              return v3;
            v4 = a1[1];
            continue;
          case 1uLL:
            v4 = a1[1] + 8;
            goto LABEL_6;
          case 2uLL:
            v16 = ProtobufDecoder.decodeVarint()();
            if (v1)
              return v3;
            if (v16 < 0)
              goto LABEL_53;
            v4 = a1[1] + v16;
LABEL_6:
            if (i >= v4)
              goto LABEL_7;
            goto LABEL_49;
          case 5uLL:
            v4 = a1[1] + 4;
            goto LABEL_6;
          default:
            goto LABEL_49;
        }
      }
      v8 = v6 & 7;
      if (v8 != 5)
      {
        if (v8 == 2)
        {
          v14 = ProtobufDecoder.decodeVarint()();
          if (v1)
            return v3;
          if (v14 < 0)
          {
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
            JUMPOUT(0x234EC4380);
          }
          v9 = (double *)a1[1];
          if (i < (unint64_t)v9 + v14)
            goto LABEL_49;
          a1[3] = 9;
          a1[4] = (char *)v9 + v14;
        }
        else
        {
          if (v8 != 1)
            goto LABEL_49;
          v9 = (double *)a1[1];
        }
        v4 = (unint64_t)(v9 + 1);
        if (i < (unint64_t)(v9 + 1))
          goto LABEL_49;
        v3 = *v9;
        goto LABEL_7;
      }
      v12 = (float *)a1[1];
      v4 = (unint64_t)(v12 + 1);
      if (i < (unint64_t)(v12 + 1))
        goto LABEL_49;
      v13 = *v12;
      a1[1] = v4;
      v3 = v13;
    }
  }
  a1[3] = 0;
  return v3;
}

unint64_t lazy protocol witness table accessor for type CodableUnitPoint and conformance CodableUnitPoint()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableUnitPoint and conformance CodableUnitPoint;
  if (!lazy protocol witness table cache variable for type CodableUnitPoint and conformance CodableUnitPoint)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableUnitPoint, &type metadata for CodableUnitPoint);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableUnitPoint and conformance CodableUnitPoint);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableUnitPoint and conformance CodableUnitPoint;
  if (!lazy protocol witness table cache variable for type CodableUnitPoint and conformance CodableUnitPoint)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableUnitPoint, &type metadata for CodableUnitPoint);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableUnitPoint and conformance CodableUnitPoint);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for CodableUnitPoint(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type CodableUnitPoint and conformance CodableUnitPoint();
  result = lazy protocol witness table accessor for type CodableUnitPoint and conformance CodableUnitPoint();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

double sub_234EC449C@<D0>(double *a1@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  double *v3;
  double result;

  v3 = a1 + 1;
  if (!*a2)
    v3 = a1;
  result = *v3;
  *a3 = *(_QWORD *)v3;
  return result;
}

_QWORD *sub_234EC44B8(_QWORD *result, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;

  v3 = 8;
  if (!*a3)
    v3 = 0;
  *(_QWORD *)(a2 + v3) = *result;
  return result;
}

uint64_t sub_234EC44D4()
{
  return 0;
}

float64x2_t sub_234EC44E4@<Q0>(float64x2_t *a1@<X0>, float64x2_t *a2@<X8>)
{
  float64x2_t result;

  result = vmulq_f64(*a1, (float64x2_t)vdupq_n_s64(0x4060000000000000uLL));
  *a2 = result;
  return result;
}

float64x2_t sub_234EC44FC(float64x2_t *a1, float64x2_t *a2)
{
  float64x2_t result;

  result = vmulq_f64(*a1, (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL));
  *a2 = result;
  return result;
}

ValueMetadata *type metadata accessor for UnitPoint()
{
  return &type metadata for UnitPoint;
}

ValueMetadata *type metadata accessor for CodableUnitPoint()
{
  return &type metadata for CodableUnitPoint;
}

void PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *i;
  int v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t AssociatedTypeWitness;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t *v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  unsigned int v46;
  unint64_t v47;
  int v48;
  __int16 v49;
  int v50;
  int v51;
  uint64_t v52;

  v7 = v6;
  v52 = *MEMORY[0x24BDAC8D0];
  v11 = *(_DWORD *)(a1 + 8);
  v45 = *(_QWORD *)a1;
  v47 = v45;
  v44 = PreferenceKeys.contains<A>(_:)(a5, a5, a6, a4);
  if ((v44 & 1) != 0)
  {
    v12 = a3();
    v41 = v12;
    v13 = *(_DWORD *)(v6 + 8);
    v47 = *(_QWORD *)v6;
    v48 = v13;
    v15 = PreferencesOutputs.subscript.getter(a5, a5, a6, v14);
    v42 = &v40;
    v43 = v6;
    v16 = *MEMORY[0x24BE096C0];
    if ((v15 & 0x100000000) == 0)
      v16 = v15;
    v47 = __PAIR64__(v16, v12);
    MEMORY[0x24BDAC7A8](v15);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v38 = type metadata accessor for PreferenceTransform(0, a5, a6, v17);
    v39 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for PreferenceTransform<A>, v38);
    v18 = type metadata accessor for Attribute();
    v19 = v41;
    _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v47, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)&v36, v38, MEMORY[0x24BEE4078], v18, MEMORY[0x24BEE40A8], v20);
    v7 = v43;
    LOBYTE(v47) = 0;
    PreferencesOutputs.subscript.setter(v46, a5, a5, a6);
  }
  else
  {
    v19 = 0;
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t))(a6 + 40))(a5, a6) & 1) != 0)
  {
    type metadata accessor for _AnyPreferenceKey<HostPreferencesKey>(0, v21, v22, v23);
    v25 = *(_QWORD *)(v45 + 16);
    if (v25)
    {
      v26 = v24;
      for (i = (_QWORD *)(v45 + 32); *i != v24; i += 2)
      {
        if (!--v25)
          return;
      }
      if ((v44 & 1) == 0)
        v19 = a3();
      v28 = *(_DWORD *)(v7 + 8);
      v47 = *(_QWORD *)v7;
      v48 = v28;
      v29 = PreferencesOutputs.subscript.getter(v26);
      v30 = *MEMORY[0x24BE096C0];
      if ((v29 & 0x100000000) == 0)
        v30 = v29;
      ++static HostPreferencesKey.nodeId;
      v47 = __PAIR64__(v11, v19);
      v48 = v30;
      v49 = 0;
      v50 = 0;
      v51 = static HostPreferencesKey.nodeId;
      MEMORY[0x24BDAC7A8](v29);
      v32 = type metadata accessor for HostPreferencesTransform(0, a5, a6, v31);
      MEMORY[0x23B7C9C04](&protocol conformance descriptor for HostPreferencesTransform<A>, v32);
      type metadata accessor for Attribute<PreferenceList>();
      _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v47, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_6, (uint64_t)&AssociatedTypeWitness, v32, MEMORY[0x24BEE4078], v33, MEMORY[0x24BEE40A8], v34);
      LOBYTE(v47) = 0;
      PreferencesOutputs.subscript.setter(v46, v26, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v35);
    }
  }
}

uint64_t key path getter for _PreferenceTransformModifier.transform : <A>_PreferenceTransformModifier<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = a3 + a2;
  v7 = *a1;
  v6 = a1[1];
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(v5 - 16);
  *(_QWORD *)(v8 + 32) = v7;
  *(_QWORD *)(v8 + 40) = v6;
  *a4 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A?) -> (@out ());
  a4[1] = (uint64_t (*)())v8;
  return swift_retain();
}

uint64_t key path setter for _PreferenceTransformModifier.transform : <A>_PreferenceTransformModifier<A>(uint64_t *a1, uint64_t (**a2)(), uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v5 = a4 + a3;
  v7 = *a1;
  v6 = a1[1];
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(v5 - 16);
  *(_QWORD *)(v8 + 32) = v7;
  *(_QWORD *)(v8 + 40) = v6;
  swift_retain();
  result = swift_release();
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A?) -> (@out ());
  a2[1] = (uint64_t (*)())v8;
  return result;
}

uint64_t _PreferenceTransformModifier.transform.getter(uint64_t a1)
{
  swift_retain();
  return a1;
}

uint64_t _PreferenceTransformModifier.transform.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_release();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*_PreferenceTransformModifier.transform.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _PreferenceTransformModifier.init(key:transform:)(uint64_t a1, uint64_t a2)
{
  return a2;
}

double static _PreferenceTransformModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, double *a6@<X8>)
{
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  double result;
  int v17;
  _BYTE v18[16];
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  double v32;

  v9 = *a1;
  v10 = *((_DWORD *)a2 + 2);
  v11 = a2[2];
  v12 = a2[5];
  v13 = a2[6];
  v14 = *((_DWORD *)a2 + 20);
  v22 = *a2;
  v23 = v10;
  v24 = v11;
  v25 = *(_OWORD *)(a2 + 3);
  v26 = v12;
  v27 = v13;
  v28 = *(_OWORD *)(a2 + 7);
  v17 = v28;
  v29 = a2[9];
  v30 = v14;
  a3(&v31);
  v22 = v13;
  v23 = v17;
  v19 = a4;
  v20 = a5;
  v21 = v9;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)((uint64_t)&v22, v15, partial apply for implicit closure #1 in static _PreferenceTransformModifier._makeView(modifier:inputs:body:), (uint64_t)v18, a4, a5);
  swift_bridgeObjectRelease();
  *(_QWORD *)a6 = v31;
  result = v32;
  a6[1] = v32;
  return result;
}

uint64_t implicit closure #1 in static _PreferenceTransformModifier._makeView(modifier:inputs:body:)(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t KeyPath;
  _BYTE v11[16];
  uint64_t FunctionTypeMetadata;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v15 = a2;
  v16 = a3;
  v9 = a1;
  KeyPath = swift_getKeyPath();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  FunctionTypeMetadata = swift_getFunctionTypeMetadata();
  type metadata accessor for _PreferenceTransformModifier(255, a2, a3, v5);
  v13 = type metadata accessor for Focus();
  v14 = MEMORY[0x23B7C9C04](MEMORY[0x24BE09660], v13);
  v6 = type metadata accessor for Attribute();
  swift_retain();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v9, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v11, v13, MEMORY[0x24BEE4078], v6, MEMORY[0x24BEE40A8], v7);
  swift_release();
  swift_release();
  return AssociatedTypeWitness;
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _PreferenceTransformModifier<A>@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr)@<X2>, uint64_t a4@<X4>, double *a5@<X8>)
{
  return static _PreferenceTransformModifier._makeView(modifier:inputs:body:)(a1, a2, a3, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a5);
}

uint64_t View.transformPreference<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = a2;
  v11[1] = a3;
  v9 = type metadata accessor for _PreferenceTransformModifier(0, a5, a7, a4);
  return View.modifier<A>(_:)(v11, a4, v9, a6);
}

uint64_t PreferenceTransform.childValue.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  int v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t Value;

  v3 = HIDWORD(a1);
  v4 = *MEMORY[0x24BE096C0];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = AssociatedTypeWitness;
  if (v4 == (_DWORD)v3)
  {
    v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v8 = 1;
  }
  else
  {
    Value = AGGraphGetValue();
    v7 = *(_QWORD *)(v6 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a2, Value, v6);
    v8 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v8, 1, v6);
}

uint64_t PreferenceTransform.value.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t FunctionTypeMetadata;
  uint64_t v18;
  _QWORD v20[2];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v20 - v11;
  PreferenceTransform.childValue.getter(a1, (uint64_t)v20 - v11);
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
    v14 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  else
  {
    v14 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(a4, v12, AssociatedTypeWitness);
  }
  MEMORY[0x24BDAC7A8](v14);
  v20[-4] = a2;
  v20[-3] = a3;
  LODWORD(v20[-2]) = a1;
  HIDWORD(v20[-2]) = v15;
  v20[-1] = a4;
  v20[1] = AssociatedTypeWitness;
  v16 = MEMORY[0x24BEE4AE0] + 8;
  FunctionTypeMetadata = swift_getFunctionTypeMetadata();
  return Attribute.syncMainIfReferences<A>(do:)((void (*)(_QWORD))partial apply for closure #1 in PreferenceTransform.value.getter, (uint64_t)&v20[-6], FunctionTypeMetadata, v16, v18);
}

uint64_t closure #1 in PreferenceTransform.value.getter(uint64_t *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unsigned int CurrentAttribute;
  uint64_t v26;
  unint64_t StatusReg;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  void (*v32)(char *, char *, uint64_t);
  char *v33;
  char *v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  uint64_t AssociatedTypeWitness;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  void *v51;
  _QWORD *v52;
  void *v53;
  uint64_t v54;

  v53 = a3;
  v54 = *MEMORY[0x24BDAC8D0];
  v8 = type metadata accessor for ObservationTracking._AccessList();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v46 = (char *)&v45 - v13;
  MEMORY[0x24BDAC7A8](v14);
  v47 = (char *)&v45 - v15;
  type metadata accessor for ObservationTracking._AccessList?();
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v45 - v20;
  v22 = *a1;
  v23 = a1[1];
  v24 = (_QWORD *)swift_allocObject();
  v24[2] = a4;
  v24[3] = a5;
  v24[4] = v22;
  v24[5] = v23;
  CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v49 = CurrentAttribute;
    v50 = a4;
    v48 = a5;
    v26 = one-time initialization token for lastestAccessLists;
    swift_retain();
    if (v26 == -1)
      goto LABEL_3;
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  v51 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v21, 1, 1, v8);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v28 = *(_QWORD *)(StatusReg + 848);
  *(_QWORD *)(StatusReg + 848) = v21;
  v52 = v24;
  ((void (*)(void *))v24[4])(v53);
  *(_QWORD *)(StatusReg + 848) = v28;
  v29 = v9;
  outlined init with copy of ObservationTracking._AccessList?((uint64_t)v21, (uint64_t)v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v18, 1, v8) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v18);
  }
  else
  {
    v30 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v31 = v47;
    v32 = v30;
    v30(v47, v18, v8);
    v33 = v46;
    (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v46, v31, v8);
    swift_beginAccess();
    v34 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v34;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v34 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v34 + 2) + 1, 1, (unint64_t)v34);
      static ObservationRegistrar.lastestAccessLists = v34;
    }
    v37 = *((_QWORD *)v34 + 2);
    v36 = *((_QWORD *)v34 + 3);
    if (v37 >= v36 >> 1)
    {
      v34 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1, (unint64_t)v34);
      static ObservationRegistrar.lastestAccessLists = v34;
    }
    *((_QWORD *)v34 + 2) = v37 + 1;
    v32(&v34[((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80))+ *(_QWORD *)(v29 + 72) * v37], v33, v8);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v8);
  }
  outlined destroy of ObservationTracking._AccessList?((uint64_t)v21);
  v38 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v38)
  {
    v39 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80));
    v40 = *(_QWORD *)(v29 + 72);
    v41 = *(void (**)(char *, char *, uint64_t))(v29 + 16);
    v53 = static ObservationRegistrar.lastestAccessLists;
    swift_bridgeObjectRetain();
    v42 = v49;
    do
    {
      v41(v11, v39, v8);
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      installObservationSlow<A>(accessList:attribute:)((uint64_t)v11, v42, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v29 + 8))(v11, v8);
      v39 += v40;
      --v38;
    }
    while (v38);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v51;
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Rule.value.getter in conformance PreferenceTransform<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t *v2;

  return PreferenceTransform.value.getter(*v2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PreferenceTransform<A>()
{
  return specialized PreferenceTransform.description.getter();
}

uint64_t protocol witness for static _AttributeBody._updateDefault(_:) in conformance PreferenceTransform<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  double v15;
  uint64_t v16;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v17 - v7;
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v17 - v11;
  static PreferenceCombiner.initialValue.getter(v3, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, AssociatedTypeWitness) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v14 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(v12, v8, AssociatedTypeWitness);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17[-2] = a2;
  v17[-1] = MEMORY[0x23B7C9C04](&protocol conformance descriptor for PreferenceTransform<A>, a2, v15);
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v12, (uint64_t)_s14AttributeGraph4RulePAAE14_updateDefaultyySvFZySPy5ValueQzGXEfU_TA_0, (uint64_t)&v17[-4], AssociatedTypeWitness, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v16);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, AssociatedTypeWitness);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance PreferenceTransform<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for PreferenceTransform<A>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t HostPreferencesTransform.updateValue()(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  char v10;
  unint64_t *Value;
  uint64_t v12;
  BOOL v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t FunctionTypeMetadata;
  uint64_t v19;
  _QWORD v21[8];
  unint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(v1 + 4);
  v3 = *(_DWORD *)(v1 + 8);
  v4 = *(unsigned __int8 *)(v1 + 12);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  if (*MEMORY[0x24BE096C0] == v3)
  {
    v9 = 0;
    v8 = *(unsigned __int8 *)(v1 + 13) ^ 1;
    v10 = 1;
  }
  else
  {
    AGGraphGetValue();
    v8 = v7 & 1;
    v9 = swift_retain();
    v10 = 0;
  }
  v23 = v9;
  v24 = v8;
  *(_BYTE *)(v1 + 13) = v10;
  Value = (unint64_t *)AGGraphGetValue();
  v13 = v8 != 0;
  if ((v14 & 1) == 0 || (v22 = *Value, v15 = PreferenceKeys.contains<A>(_:)(v5, v5, v6, v12), v4 == (v15 & 1)))
  {
    if (!v4)
    {
      if (!v8)
        goto LABEL_15;
LABEL_16:
      v22 = v23;
      AGGraphSetOutputValue();
      return swift_release();
    }
  }
  else
  {
    *(_BYTE *)(v1 + 12) = v15 & 1;
    v13 = 1;
    v24 = 1;
    if ((v15 & 1) == 0)
      goto LABEL_16;
  }
  v22 = __PAIR64__(v3, v2);
  v16 = AGGraphAnyInputsChanged();
  if ((_DWORD)v16)
  {
    ++*(_DWORD *)(v1 + 16);
    v24 = 1;
  }
  else if (!v13)
  {
    goto LABEL_15;
  }
  MEMORY[0x24BDAC7A8](v16);
  v21[2] = v5;
  v21[3] = v6;
  v21[4] = &v23;
  v21[5] = v1;
  v21[7] = swift_getAssociatedTypeWitness();
  v17 = MEMORY[0x24BEE4AE0] + 8;
  FunctionTypeMetadata = swift_getFunctionTypeMetadata();
  Attribute.syncMainIfReferences<A>(do:)((void (*)(_QWORD))partial apply for closure #2 in HostPreferencesTransform.updateValue(), (uint64_t)v21, FunctionTypeMetadata, v17, v19);
  if ((v24 & 1) != 0)
    goto LABEL_16;
LABEL_15:
  if (!AGGraphGetOutputValue())
    goto LABEL_16;
  return swift_release();
}

uint64_t closure #2 in HostPreferencesTransform.updateValue()(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t FunctionTypeMetadata;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  _QWORD v14[2];
  int v15;

  v7 = a1[1];
  v10 = *a1;
  v11 = v7;
  v13 = merge32(_:_:)(*(unsigned int *)(a3 + 20), *(_DWORD *)(a3 + 16));
  v14[0] = swift_getAssociatedTypeWitness();
  FunctionTypeMetadata = swift_getFunctionTypeMetadata();
  PreferenceList.Value.init(value:seed:)((uint64_t)&v10, &v13, FunctionTypeMetadata, (uint64_t)v14);
  v10 = v14[0];
  v11 = v14[1];
  v12 = v15;
  swift_retain();
  PreferenceList.modifyValue<A>(for:transform:)(a4, (uint64_t)&v10, a4, a5);
  return swift_release();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance HostPreferencesTransform<A>()
{
  return specialized HostPreferencesTransform.description.getter();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance HostPreferencesTransform<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for HostPreferencesTransform<A>, a1);
  return static AsyncAttribute.flags.getter();
}

void type metadata accessor for _AnyPreferenceKey<HostPreferencesKey>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for _AnyPreferenceKey<HostPreferencesKey>)
  {
    v4 = type metadata accessor for _AnyPreferenceKey(0, (uint64_t)&type metadata for HostPreferencesKey, (uint64_t)&protocol witness table for HostPreferencesKey, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<HostPreferencesKey>);
  }
}

uint64_t closure #1 in static Rule._updateDefault(_:)()
{
  swift_getAssociatedTypeWitness();
  return AGGraphSetOutputValue();
}

uint64_t type metadata accessor for HostPreferencesTransform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HostPreferencesTransform);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_6@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

void type metadata accessor for Attribute<PreferenceList>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Attribute<PreferenceList>)
  {
    v0 = type metadata accessor for Attribute();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<PreferenceList>);
  }
}

uint64_t type metadata accessor for PreferenceTransform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PreferenceTransform);
}

uint64_t partial apply for implicit closure #1 in static _PreferenceTransformModifier._makeView(modifier:inputs:body:)()
{
  uint64_t v0;

  return implicit closure #1 in static _PreferenceTransformModifier._makeView(modifier:inputs:body:)(*(_DWORD *)(v0 + 32), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t type metadata accessor for _PreferenceTransformModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _PreferenceTransformModifier);
}

uint64_t sub_234EC5A14()
{
  return 16;
}

__n128 sub_234EC5A20(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_234EC5A2C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v4 = *a1;
  v5 = a1[2];
  v6 = type metadata accessor for _PreferenceTransformModifier(255, a1[1], a1[3], a4);
  v8 = type metadata accessor for ModifiedContent(255, v4, v6, v7);
  v10[0] = v5;
  v10[1] = &protocol witness table for _PreferenceTransformModifier<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v8, v10);
}

uint64_t getEnumTagSinglePayload for HostPreferencesTransform(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 12);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for HostPreferencesTransform(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_BYTE *)(result + 12) = a2 + 1;
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for HostPreferencesTransform<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for HostPreferencesTransform<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PreferenceTransform<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for PreferenceTransform<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in PreferenceTransform<A>()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for _AttributeBody in HostPreferencesTransform<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t partial apply for closure #1 in PreferenceTransform.value.getter(uint64_t *a1)
{
  uint64_t v1;

  return closure #1 in PreferenceTransform.value.getter(a1, *(_QWORD *)(v1 + 32), *(void **)(v1 + 40), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_234EC5BA8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in HostPreferencesTransform.updateValue()(uint64_t *a1)
{
  uint64_t *v1;

  return closure #2 in HostPreferencesTransform.updateValue()(a1, v1[4], v1[5], v1[2], v1[3]);
}

uint64_t specialized PreferenceTransform.description.getter()
{
  Swift::String v0;

  v0._countAndFlagsBits = static PreferenceKey.readableName.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0x726F66736E617254;
}

uint64_t _s14AttributeGraph4RulePAAE14_updateDefaultyySvFZySPy5ValueQzGXEfU_TA_0()
{
  swift_getAssociatedTypeWitness();
  return AGGraphSetOutputValue();
}

uint64_t specialized HostPreferencesTransform.description.getter()
{
  Swift::String v0;

  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = static PreferenceKey.readableName.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0x6E61725474736F48;
}

uint64_t sub_234EC5D1C()
{
  return 16;
}

__n128 sub_234EC5D28(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void Projection.composed<A>(with:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v22 = a5;
  v12 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v15 - 8);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v21 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v20, v6, a2, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a6, v20, a2);
  v23 = a2;
  v24 = a3;
  v25 = a4;
  v26 = v22;
  type metadata accessor for ComposedProjection();
}

uint64_t sub_234EC5E20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v2 + *(int *)(a1 + 52), v3, v1);
}

uint64_t ComposedProjection.get(base:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v4 = a2[4];
  v5 = a2[2];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (char *)&v12 - v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v4 + 32))(a1, v5, v4, v8);
  (*(void (**)(char *, _QWORD))(a2[5] + 32))(v10, a2[3]);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, AssociatedTypeWitness);
}

uint64_t ComposedProjection.set(base:newValue:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v6 = a3[4];
  v7 = a3[2];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v12 = (char *)&v14 - v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v6 + 32))(a1, v7, v6, v10);
  (*(void (**)(char *, uint64_t, _QWORD))(a3[5] + 40))(v12, a2, a3[3]);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v6 + 40))(a1, v12, v7, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, AssociatedTypeWitness);
}

uint64_t ComposedProjection.hash(into:)()
{
  dispatch thunk of Hashable.hash(into:)();
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t static ComposedProjection.== infix(_:_:)()
{
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
    type metadata accessor for ComposedProjection();
  return 0;
}

void type metadata accessor for ComposedProjection()
{
  JUMPOUT(0x23B7C9B5CLL);
}

Swift::Int ComposedProjection.hashValue.getter()
{
  Hasher.init(_seed:)();
  ComposedProjection.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ComposedProjection<A, B>()
{
  Hasher.init(_seed:)();
  ComposedProjection.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ComposedProjection<A, B>()
{
  return static ComposedProjection.== infix(_:_:)();
}

uint64_t WritableKeyPath.get(base:)()
{
  return swift_getAtKeyPath();
}

uint64_t WritableKeyPath.set(base:newValue:)(uint64_t a1)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, double))(v2 + 16))((char *)&v5 - v3, v1);
  return swift_setAtWritableKeyPath();
}

uint64_t instantiation function for generic protocol witness table for ComposedProjection<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ComposedProjection<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for Equatable in ComposedProjection<A, B>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t protocol witness for Projection.get(base:) in conformance WritableKeyPath<A, B>()
{
  return WritableKeyPath.get(base:)();
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance WritableKeyPath<A, B>(uint64_t a1)
{
  return WritableKeyPath.set(base:newValue:)(a1);
}

uint64_t dispatch thunk of Projection.get(base:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of Projection.set(base:newValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t getEnumTagSinglePayload for ComposedProjection(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_234EC63CC + 4 * byte_2352ADD80[v17 - 1]))();
}

void storeEnumTagSinglePayload for ComposedProjection(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

CGPoint __swiftcall Text.Effect.InteractionMetrics.displacedPoint(from:activeOrigin:)(CGPoint from, CGPoint activeOrigin)
{
  uint64_t *v2;
  CGFloat y;
  double x;
  uint64_t v5;
  uint64_t v6;
  CGFloat v7;
  double v8;
  CGFloat *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v16;
  double v17;
  CGPoint result;
  double v19;
  CGPoint v20;
  CGRect v21;
  CGRect v22;
  CGRect v23;

  y = from.y;
  x = from.x;
  v5 = *v2;
  v6 = *(_QWORD *)(*v2 + 16);
  if (v6)
  {
    v7 = activeOrigin.y;
    v8 = activeOrigin.x;
    swift_bridgeObjectRetain();
    v9 = (CGFloat *)(v5 + 120);
    while (1)
    {
      v10 = *v9;
      v11 = *(v9 - 9);
      v12 = *(v9 - 4);
      v13 = *(v9 - 2) + *(v9 - 3);
      v21.origin.x = v8;
      v21.origin.y = v7;
      v21.size.width = *v9;
      v21.size.height = v13;
      v20.x = x;
      v20.y = y;
      if (CGRectContainsPoint(v21, v20))
        break;
      v8 = v8 + v10;
      v9 += 12;
      if (!--v6)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    v22.origin.x = v8;
    v22.origin.y = v7;
    v22.size.width = v10;
    v22.size.height = v13;
    v19 = x - CGRectGetMinX(v22);
    v23.origin.x = v8;
    v23.origin.y = v7;
    v23.size.width = v10;
    v23.size.height = v13;
    v14 = v19 / CGRectGetWidth(v23);
    if (v14 < 0.0 || v14 > 1.0)
      specialized static Log.internalWarning(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 84);
    else
      x = v12 * v14 + x - v11 - v10 * v14;
  }
  else
  {
LABEL_6:
    specialized static Log.internalWarning(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 84);
  }
  v16 = x;
  v17 = y;
  result.y = v17;
  result.x = v16;
  return result;
}

uint64_t Text.Effect.InteractionMetrics.displacement(for:end:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  void (*v10)(_QWORD *, _QWORD);
  uint64_t *v11;
  uint64_t v12;
  void (*v13)(_QWORD *, _QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v19;
  uint64_t v20;
  id v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  int v43;
  void **v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD v48[4];

  v2 = v1;
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE4908]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v42 - v7;
  type metadata accessor for Text.Effect.InteractionMetrics();
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE4968]);
  result = RangeSet.isEmpty.getter();
  if ((result & 1) == 0)
  {
    RangeSet.ranges.getter();
    lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges((unint64_t *)&lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges, MEMORY[0x24BEE4930]);
    dispatch thunk of Collection.startIndex.getter();
    result = dispatch thunk of Collection.endIndex.getter();
    if (v46 == v48[0])
    {
      __break(1u);
      return result;
    }
    v10 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
    v12 = *v11;
    v10(v48, 0);
    if (v12 > a1)
      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    if ((dispatch thunk of Collection.isEmpty.getter() & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      dispatch thunk of Collection.endIndex.getter();
      lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges(&lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges, MEMORY[0x24BEE4920]);
      dispatch thunk of BidirectionalCollection.index(before:)();
      v13 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
      v15 = *(_QWORD *)(v14 + 8);
      v13(v48, 0);
      if (v15 <= a1)
        return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      v16 = *(_QWORD *)(*(_QWORD *)v2 + 16);
      if (v16)
      {
        v17 = *(_QWORD *)v2 + 88;
        while (*(_QWORD *)(v17 - 56) > a1 || *(_QWORD *)(v17 - 48) <= a1)
        {
          v17 += 96;
          if (!--v16)
            goto LABEL_14;
        }
        return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      }
LABEL_14:
      v44 = &v42;
      v43 = static os_log_type_t.fault.getter();
      if (one-time initialization token for internalErrorsLog == -1)
        goto LABEL_15;
    }
    swift_once();
LABEL_15:
    swift_beginAccess();
    v19 = (void *)static Log.internalErrorsLog;
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_235283260;
    v46 = 0;
    v47 = 0xE000000000000000;
    v21 = v19;
    _StringGuts.grow(_:)(19);
    v22._object = (void *)0x80000002352E4950;
    v42 = (void *)0x80000002352E4950;
    v22._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v22);
    v45 = a1;
    _print_unlocked<A, B>(_:_:)();
    v23._countAndFlagsBits = 0;
    v23._object = (void *)0xE000000000000000;
    String.append(_:)(v23);
    v24 = v46;
    v25 = v47;
    v26 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v20 + 56) = MEMORY[0x24BEE0D00];
    v27 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v20 + 64) = v27;
    *(_QWORD *)(v20 + 32) = v24;
    *(_QWORD *)(v20 + 40) = v25;
    v28 = StaticString.description.getter();
    *(_QWORD *)(v20 + 96) = v26;
    *(_QWORD *)(v20 + 104) = v27;
    *(_QWORD *)(v20 + 72) = v28;
    *(_QWORD *)(v20 + 80) = v29;
    v46 = 107;
    v30 = dispatch thunk of CustomStringConvertible.description.getter();
    *(_QWORD *)(v20 + 136) = v26;
    *(_QWORD *)(v20 + 144) = v27;
    *(_QWORD *)(v20 + 112) = v30;
    *(_QWORD *)(v20 + 120) = v31;
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
    type metadata accessor for _ContiguousArrayStorage<Any>();
    v32 = swift_allocObject();
    *(_OWORD *)(v32 + 16) = xmmword_23527E860;
    v46 = 0;
    v47 = 0xE000000000000000;
    _StringGuts.grow(_:)(38);
    v46 = 0;
    v47 = 0xE000000000000000;
    _StringGuts.grow(_:)(19);
    v33._countAndFlagsBits = 0xD000000000000011;
    v33._object = v42;
    String.append(_:)(v33);
    v45 = a1;
    _print_unlocked<A, B>(_:_:)();
    v34._countAndFlagsBits = 0;
    v34._object = (void *)0xE000000000000000;
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35._countAndFlagsBits = 2108704;
    v35._object = (void *)0xE300000000000000;
    String.append(_:)(v35);
    v36._countAndFlagsBits = StaticString.description.getter();
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    v37._countAndFlagsBits = 58;
    v37._object = (void *)0xE100000000000000;
    String.append(_:)(v37);
    v45 = 107;
    v38._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v38);
    swift_bridgeObjectRelease();
    v39._countAndFlagsBits = 0xD00000000000001CLL;
    v39._object = (void *)0x80000002352E0BF0;
    String.append(_:)(v39);
    v40 = v46;
    v41 = v47;
    *(_QWORD *)(v32 + 56) = v26;
    *(_QWORD *)(v32 + 32) = v40;
    *(_QWORD *)(v32 + 40) = v41;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return result;
}

uint64_t type metadata accessor for Text.Effect.InteractionMetrics()
{
  uint64_t result;

  result = type metadata singleton initialization cache for Text.Effect.InteractionMetrics;
  if (!type metadata singleton initialization cache for Text.Effect.InteractionMetrics)
    return swift_getSingletonMetadata();
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.InteractionMetrics.Element()
{
  return &type metadata for Text.Effect.InteractionMetrics.Element;
}

uint64_t *initializeBufferWithCopyOfBuffer for Text.Effect.InteractionMetrics(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE4968]);
    v12 = v11;
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v13(v9, v10, v12);
    v14 = a3[7];
    *(uint64_t *)((char *)v7 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    *(_OWORD *)((char *)v7 + v14) = *(_OWORD *)((char *)a2 + v14);
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t destroy for Text.Effect.InteractionMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE4968]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for Text.Effect.InteractionMetrics(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE4968]);
  v10 = v9;
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v7, v8, v10);
  v12 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)((char *)a2 + v12);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Text.Effect.InteractionMetrics(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE4968]);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = a3[7];
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  return a1;
}

_QWORD *initializeWithTake for Text.Effect.InteractionMetrics(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE4968]);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  return a1;
}

_QWORD *assignWithTake for Text.Effect.InteractionMetrics(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE4968]);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  swift_bridgeObjectRelease();
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.InteractionMetrics()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_234EC7158(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE4968]);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for Text.Effect.InteractionMetrics()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_234EC71F0(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE4968]);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

void type metadata completion function for Text.Effect.InteractionMetrics()
{
  unint64_t v0;

  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(319, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE4968]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

_QWORD *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  _QWORD *v4;

  v4 = specialized Sequence.compactMap<A>(_:)(a1, a2);

  swift_bridgeObjectRelease();
  return v4;
}

Swift::Int specialized MutableCollection<>.sort(by:)(_QWORD **a1)
{
  _QWORD *v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
  v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

BOOL _ViewInputs.isScrapeable.getter()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *i;

  v1 = *(_DWORD *)(v0 + 36);
  if ((v1 & 0x20) == 0)
    return 0;
  v2 = *(_QWORD *)(v0 + 48);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v4 = *(_QWORD *)(v2 + 16);
  if (!v4)
    return 0;
  for (i = (_QWORD *)(v2 + 32); *i != v3; i += 2)
  {
    if (!--v4)
      return 0;
  }
  return (v1 & 0x2000) == 0;
}

uint64_t ScrapeableID.init()@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = AGMakeUniqueID();
  *a1 = result;
  return result;
}

uint64_t _ViewInputs.scrapeableParentID.setter(int *a1)
{
  uint64_t *v1;
  int v2;
  uint64_t v4;

  v2 = *a1;
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v1, v2, (uint64_t)&v4);
  return swift_release();
}

uint64_t _ViewInputs.scrapeableParentID.getter@<X0>(_DWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v3 = *v1;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v4 = specialized find<A>(_:key:)(v3);
  if (v4)
    v5 = *(_DWORD *)(v4 + 72);
  else
    v5 = 0;
  *a1 = v5;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t ScrapeableContent.Item.init(_:ids:_:position:size:transform:)@<X0>(uint64_t *a1@<X0>, int *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t *Value;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;

  v5 = *a1;
  v6 = *a2;
  v7 = *a3;
  Value = (uint64_t *)AGGraphGetValue();
  v9 = *Value;
  v10 = Value[1];
  v11 = AGGraphGetValue();
  v12 = *(_QWORD *)v11;
  v13 = *(double *)(v11 + 8);
  v14 = *(double *)(v11 + 16);
  v15 = *(double *)(v11 + 24);
  v16 = *(double *)(v11 + 32);
  v17 = AGGraphGetValue();
  v18 = *(double *)v17;
  v19 = *(double *)(v17 + 8);
  v20 = v15 - (*(double *)v17 - v13);
  *(_DWORD *)a4 = v6;
  *(_DWORD *)(a4 + 4) = v7;
  *(_QWORD *)(a4 + 8) = v5;
  *(_QWORD *)(a4 + 16) = v9;
  *(_QWORD *)(a4 + 24) = v10;
  *(_QWORD *)(a4 + 32) = v12;
  *(double *)(a4 + 40) = v18;
  *(double *)(a4 + 48) = v19;
  *(double *)(a4 + 56) = v20;
  *(double *)(a4 + 64) = v16 - (v19 - v14);
  return swift_retain();
}

uint64_t _ViewInputs.isScrapeable.setter(uint64_t result)
{
  uint64_t v1;
  int v2;

  if ((result & 1) != 0)
    v2 = 0;
  else
    v2 = 0x2000;
  *(_DWORD *)(v1 + 36) = *(_DWORD *)(v1 + 36) & 0xFFFFDFFF | v2;
  return result;
}

void static ScrapeableID.none.getter(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

void ScrapeableID.hash(into:)()
{
  Swift::UInt32 *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static ScrapeableID.== infix(_:_:)(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

Swift::Int ScrapeableID.hashValue.getter()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL key path getter for _ViewInputs.isScrapeable : _ViewInputs@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = _ViewInputs.isScrapeable.getter();
  *a1 = result;
  return result;
}

_BYTE *(*_ViewInputs.isScrapeable.modify(_QWORD *a1))(_BYTE *result)
{
  uint64_t v1;
  _BYTE *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  *a1 = v1;
  v2 = a1 + 1;
  v3 = *(_DWORD *)(v1 + 36);
  if ((v3 & 0x20) != 0)
  {
    v5 = *(_QWORD *)(v1 + 48);
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
    v4 = *(_QWORD *)(v5 + 16);
    if (v4)
    {
      v7 = (_QWORD *)(v5 + 32);
      while (*v7 != v6)
      {
        v7 += 2;
        if (!--v4)
          goto LABEL_9;
      }
      LOBYTE(v4) = (v3 & 0x2000) == 0;
    }
  }
  else
  {
    LOBYTE(v4) = 0;
  }
LABEL_9:
  *v2 = v4;
  return _ViewInputs.isScrapeable.modify;
}

_BYTE *_ViewInputs.isScrapeable.modify(_BYTE *result)
{
  int v1;

  if (result[8])
    v1 = 0;
  else
    v1 = 0x2000;
  *(_DWORD *)(*(_QWORD *)result + 36) = *(_DWORD *)(*(_QWORD *)result + 36) & 0xFFFFDFFF | v1;
  return result;
}

uint64_t key path getter for _ViewInputs.scrapeableParentID : _ViewInputs@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  uint64_t result;
  int v6;
  _OWORD v7[5];
  int v8;

  v3 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v3;
  v7[4] = *(_OWORD *)(a1 + 64);
  v8 = *(_DWORD *)(a1 + 80);
  v4 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v4;
  outlined retain of _ViewInputs((uint64_t)v7);
  specialized _ViewInputs.subscript.getter(&v6);
  result = outlined release of _ViewInputs((uint64_t)v7);
  *a2 = v6;
  return result;
}

uint64_t key path setter for _ViewInputs.scrapeableParentID : _ViewInputs(int *a1, uint64_t *a2)
{
  int v3;
  uint64_t v5;

  v3 = *a1;
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3, (uint64_t)&v5);
  return swift_release();
}

uint64_t (*_ViewInputs.scrapeableParentID.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v2 = (_DWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v1;
  v3 = *v1;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v4 = specialized find<A>(_:key:)(v3);
  if (v4)
    v5 = *(_DWORD *)(v4 + 72);
  else
    v5 = 0;
  *v2 = v5;
  swift_release_n();
  swift_release_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  return _ViewInputs.scrapeableParentID.modify;
}

uint64_t _ViewInputs.scrapeableParentID.modify(uint64_t a1, char a2)
{
  int v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;

  v4 = *(_DWORD *)(a1 + 24);
  v5 = *(uint64_t **)(a1 + 16);
  swift_retain();
  if ((a2 & 1) != 0)
  {
    v6 = v5;
    v7 = v4;
    v8 = a1;
  }
  else
  {
    v8 = a1 + 8;
    v6 = v5;
    v7 = v4;
  }
  specialized closure #1 in PropertyList.subscript.setter(v6, v7, v8);
  return swift_release();
}

uint64_t View.scrapeableAttachment(_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *a1;
  return View.modifier<A>(_:)(&v4, a2, &type metadata for ScrapeableAttachmentViewModifier, a3);
}

uint64_t static ScrapeableAttachmentViewModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, unint64_t *))
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  BOOL v19;
  unsigned int OffsetAttribute2;
  uint64_t v21;
  unsigned int v22;
  Swift::UInt value;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  unint64_t v38;
  int v39;
  int v40;
  unint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  unsigned int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)a2;
  v4 = *(_DWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_DWORD *)(a2 + 24);
  v7 = *(_DWORD *)(a2 + 28);
  v8 = *(_DWORD *)(a2 + 32);
  v9 = *(_DWORD *)(a2 + 36);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  v12 = *(_DWORD *)(a2 + 56);
  v13 = *(_DWORD *)(a2 + 60);
  v15 = *(_DWORD *)(a2 + 64);
  v14 = *(_DWORD *)(a2 + 68);
  v17 = *(_DWORD *)(a2 + 72);
  v16 = *(_DWORD *)(a2 + 76);
  v18 = *(_DWORD *)(a2 + 80);
  v38 = *(_QWORD *)a2;
  v35 = v6;
  v36 = v4;
  v39 = v4;
  v41 = v5;
  v42 = v6;
  v43 = v7;
  v33 = v8;
  v34 = v7;
  v44 = v8;
  v45 = v9;
  v31 = v12;
  v32 = v9;
  v46 = v10;
  v47 = v11;
  v48 = v12;
  v49 = v13;
  v50 = v15;
  v51 = v14;
  v29 = v16;
  v30 = v14;
  v52 = v17;
  v53 = v16;
  v54 = v18;
  v19 = _ViewInputs.isScrapeable.getter();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v19)
  {
    v28 = AGMakeUniqueID();
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v21 = specialized find<A>(_:key:)(v3);
    if (v21)
      v22 = *(_DWORD *)(v21 + 72);
    else
      v22 = 0;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    v38 = __PAIR64__(v15, OffsetAttribute2);
    v39 = v17;
    v40 = v13;
    v41 = __PAIR64__(v22, v28);
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    lazy protocol witness table accessor for type ScrapeableAttachmentViewModifier.Attachment and conformance ScrapeableAttachmentViewModifier.Attachment();
    Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
    v24 = swift_retain();
    v25 = specialized find<A>(_:key:)(v24);
    if (!v25 || (value = v3, *(_DWORD *)(v25 + 72) != v28))
    {
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for TypedElement<_ViewInputs.ScrapeableParentID>, (uint64_t)&type metadata for _ViewInputs.ScrapeableParentID, (uint64_t)&protocol witness table for _ViewInputs.ScrapeableParentID, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TypedElement);
      *(_DWORD *)(swift_allocObject() + 72) = v28;
      value = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for _ViewInputs.ScrapeableParentID, 0, v3).value;
    }
    swift_release();
  }
  else
  {
    value = v3;
  }
  v38 = value;
  v39 = v36;
  v41 = v5;
  v42 = v35;
  v43 = v34;
  v44 = v33;
  v45 = v32;
  v46 = v10;
  v47 = v11;
  v48 = v31;
  v49 = v13;
  v50 = v15;
  v51 = v30;
  v52 = v17;
  v53 = v29;
  v54 = v18;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v26 = swift_bridgeObjectRetain();
  a3(v26, &v38);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t static ScrapeableAttachmentViewModifier.Attachment.scrapeContent(from:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *Value;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  int v12;
  int v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  __int128 v17;
  __int128 v18;

  AGGraphGetAttributeInfo();
  v3 = v2;
  type metadata accessor for ScrapeableContent.Content?();
  Value = (uint64_t *)AGGraphGetValue();
  v5 = *Value;
  if ((~*Value & 0xF000000000000007) != 0)
  {
    v14 = *Value;
    v8 = *(_DWORD *)(v3 + 16);
    v12 = *(_DWORD *)(v3 + 20);
    v13 = v8;
    ScrapeableContent.Item.init(_:ids:_:position:size:transform:)(&v14, &v13, &v12, (uint64_t)v15);
    v9 = v16;
    v6 = v17;
    v7 = v18;
    v10 = v15[1];
    *(_OWORD *)a1 = v15[0];
    *(_OWORD *)(a1 + 16) = v10;
    *(_QWORD *)(a1 + 32) = v9;
  }
  else
  {
    v6 = 0uLL;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_QWORD *)(a1 + 32) = 1;
    v7 = 0uLL;
  }
  *(_OWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 56) = v7;
  return outlined copy of ScrapeableContent.Content?(v5);
}

uint64_t ScrapeableContent.Item.content.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 8);
  return swift_retain();
}

uint64_t ScrapeableContent.Item.content.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_release();
  *(_QWORD *)(v1 + 8) = v2;
  return result;
}

uint64_t (*ScrapeableContent.Item.content.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double ScrapeableContent.Item.size.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void ScrapeableContent.Item.size.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 16) = a1;
  *(double *)(v2 + 24) = a2;
}

uint64_t (*ScrapeableContent.Item.size.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrapeableContent.Item.transform.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)a1 = *(_QWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 56);
  return swift_retain();
}

__n128 ScrapeableContent.Item.transform.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 result;
  __n128 v6;

  v2 = *a1;
  v6 = *(__n128 *)(a1 + 1);
  v3 = a1[3];
  v4 = a1[4];
  swift_release();
  *(_QWORD *)(v1 + 32) = v2;
  result = v6;
  *(__n128 *)(v1 + 40) = v6;
  *(_QWORD *)(v1 + 56) = v3;
  *(_QWORD *)(v1 + 64) = v4;
  return result;
}

uint64_t (*ScrapeableContent.Item.transform.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrapeableContent.Node.item.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 32);
  *(_QWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v1 + 56);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(v1 + 72);
  swift_retain();
  return swift_retain();
}

uint64_t ScrapeableContent.Node.children.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t ScrapeableContent.Node.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ScrapeableContent.Node.__deallocating_deinit()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t ScrapeableContent.nodes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ScrapeableContent.nodes.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*ScrapeableContent.nodes.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrapeableContent.children.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ScrapeableContent.children.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*ScrapeableContent.children.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

BOOL ScrapeableContent.isEmpty.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = v0[1];
  if (*v0 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v3)
      return 0;
  }
  else if (*(_QWORD *)((*v0 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return 0;
  }
  return *(_QWORD *)(v1 + 16) == 0;
}

void AGSubgraphRef.Map.addItem(_:for:)(uint64_t a1, void *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  id v23;
  uint64_t v24;
  _QWORD *v25;
  id v26[2];
  id v27;
  uint64_t v28;

  v3 = v2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)v26 = *(_OWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(a1 + 64);
  type metadata accessor for ScrapeableContent.Node();
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 88) = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(v12 + 96) = 0;
  *(_QWORD *)(v12 + 16) = *(_QWORD *)a1;
  *(_QWORD *)(v12 + 24) = v6;
  *(_QWORD *)(v12 + 32) = v7;
  *(_QWORD *)(v12 + 40) = v8;
  *(_QWORD *)(v12 + 48) = v9;
  *(_OWORD *)(v12 + 56) = *(_OWORD *)v26;
  *(_QWORD *)(v12 + 72) = v10;
  *(_QWORD *)(v12 + 80) = v11;
  swift_retain();
  v27 = a2;
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v14 = *v3;
  v28 = *v3;
  *v3 = 0x8000000000000000;
  v16 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)v27);
  v17 = *(_QWORD *)(v14 + 16);
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
LABEL_12:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_10:
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

    return;
  }
  v20 = v15;
  if (*(_QWORD *)(v14 + 24) >= v19)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      v14 = v28;
    }
LABEL_7:
    *v3 = v14;
    v23 = (id)swift_bridgeObjectRelease();
    v24 = *v3;
    if ((v20 & 1) == 0)
    {
      specialized _NativeDictionary._insert(at:key:value:)(v16, v27, MEMORY[0x24BEE4AF8], *v3);
      v23 = v27;
    }
    v25 = (_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * v16);
    MEMORY[0x23B7C61A8](v23);
    if (*(_QWORD *)((*v25 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(_QWORD *)((*v25 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_10;
    goto LABEL_12;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, isUniquelyReferenced_nonNull_native);
  v14 = v28;
  v21 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)v27);
  if ((v20 & 1) == (v22 & 1))
  {
    v16 = v21;
    goto LABEL_7;
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t AGSubgraphRef.Map.content(for:updated:)@<X0>(void *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t ChildCount;
  uint64_t v13;
  id v14;
  _QWORD *v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  __int128 v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;

  result = specialized Set._Variant.insert(_:)((uint64_t *)&v28, (uint64_t)a1);
  if ((result & 1) == 0)
  {
    *a4 = 0;
    a4[1] = 0;
    return result;
  }
  v9 = MEMORY[0x24BEE4AF8];
  if (*(_QWORD *)(a3 + 16)
    && (a2 = a3, v10 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)a1), (v11 & 1) != 0))
  {
    v28 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v10);
    swift_bridgeObjectRetain();
  }
  else
  {
    v28 = v9;
  }
  v27 = (_QWORD *)v9;
  ChildCount = AGSubgraphGetChildCount();
  if (ChildCount < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v13 = ChildCount;
  v14 = a1;
  swift_bridgeObjectRetain();
  v26 = specialized Sequence.compactMap<A>(_:)(0, v13, v14);
  if (v26[2])
  {
    specialized MutableCollection<>.sort(by:)(&v26);
    v15 = v26;
    v16 = v26[2];
    if (v16)
    {
      v25 = v9;
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16, 0);
      v17 = 4;
      do
      {
        v24 = *(_OWORD *)&v15[v17];
        v18 = *(_QWORD *)(v25 + 16);
        v19 = *(_QWORD *)(v25 + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v18 >= v19 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v18 + 1, 1);
        *(_QWORD *)(v25 + 16) = v18 + 1;
        *(_OWORD *)(v25 + 16 * v18 + 32) = v24;
        v17 += 3;
        --v16;
      }
      while (v16);
      swift_bridgeObjectRelease_n();
      v27 = (_QWORD *)v25;
    }
    else
    {
      swift_bridgeObjectRelease();
      v27 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  result = specialized static AGSubgraphRef.Map.resolveParents(nodes:children:)((uint64_t *)&v28, (unint64_t)&v27);
  a2 = v28;
  if (v28 >> 62)
  {
LABEL_23:
    swift_bridgeObjectRetain();
    v23 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    v20 = v27;
    if (v23)
      goto LABEL_24;
    goto LABEL_19;
  }
  v20 = v27;
  if (*(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_24:
    *a4 = a2;
    a4[1] = (unint64_t)v20;
    return result;
  }
LABEL_19:
  if (v20[2] != 1)
    goto LABEL_24;
  result = swift_bridgeObjectRelease();
  if (v20[2])
  {
    v21 = v20[4];
    v22 = v20[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRelease();
    *a4 = v21;
    a4[1] = v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unsigned int *ScrapeableContent.move(parentID:to:)(unsigned int *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  unint64_t v6;
  uint64_t i;
  unint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;

  v3 = v2;
  v5 = (_QWORD *)*result;
  v6 = *v2;
  if (v6 >> 62)
    goto LABEL_24;
  for (i = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10); i >= 1; result = (unsigned int *)swift_bridgeObjectRelease())
  {
    v8 = 0;
    while (1)
    {
      while (1)
      {
        v9 = *v3;
        if ((*v3 & 0xC000000000000001) == 0)
          break;
        v16 = *(_DWORD *)(MEMORY[0x23B7C6D9C](v8, *v3) + 20);
        result = (unsigned int *)swift_unknownObjectRelease();
        if (v16 == (_DWORD)v5)
        {
          v9 = *v3;
          goto LABEL_9;
        }
LABEL_4:
        if ((uint64_t)++v8 >= i)
          goto LABEL_25;
      }
      if ((v8 & 0x8000000000000000) != 0)
        break;
      if (v8 >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_22;
      if (*(_DWORD *)(*(_QWORD *)(v9 + 8 * v8 + 32) + 20) != (_DWORD)v5)
        goto LABEL_4;
LABEL_9:
      isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *v3 = v9;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v9 < 0 || (v9 & 0x4000000000000000) != 0)
        specialized _ArrayBuffer._consumeAndCreateNew()(v9);
      v11 = v9 & 0xFFFFFFFFFFFFFF8;
      v12 = *(_QWORD *)(v11 + 16);
      if (v8 >= v12)
        goto LABEL_23;
      v13 = v12 - 1;
      v14 = v12 - 1 - v8;
      if (v14 < 0)
      {
LABEL_47:
        result = (unsigned int *)_fatalErrorMessage(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
      memmove((void *)(v11 + 8 * v8 + 32), (const void *)(v11 + 8 * v8 + 40), 8 * v14);
      *(_QWORD *)(v11 + 16) = v13;
      v15 = specialized Array._endMutation()();
      MEMORY[0x23B7C61A8](v15);
      if (*(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      result = (unsigned int *)specialized Array._endMutation()();
      if ((uint64_t)v8 >= --i)
        goto LABEL_25;
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    swift_bridgeObjectRetain();
    i = _CocoaArrayWrapper.endIndex.getter();
  }
LABEL_25:
  v17 = (_QWORD *)v3[1];
  v18 = v17[2];
  if (!v18)
    return result;
  v29 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_46:
    v17 = specialized _ArrayBuffer._consumeAndCreateNew()(v17);
  v19 = 0;
  do
  {
    v30 = (int)v5;
    if (v19 >= v17[2])
    {
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    v20 = &v17[2 * v19 + 4];
    ScrapeableContent.move(parentID:to:)(&v30, a2);
    if (v19 >= v17[2])
      goto LABEL_44;
    v21 = v5;
    v5 = v20 + 1;
    v22 = v20[1];
    if (*v20 >> 62)
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      v28 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v28)
      {
LABEL_28:
        swift_bridgeObjectRelease();
        result = (unsigned int *)swift_bridgeObjectRelease();
LABEL_29:
        ++v19;
        goto LABEL_30;
      }
    }
    else
    {
      v23 = *(_QWORD *)((*v20 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v23)
        goto LABEL_28;
    }
    v24 = *(_QWORD *)(v22 + 16);
    swift_bridgeObjectRelease();
    result = (unsigned int *)swift_bridgeObjectRelease();
    if (v24)
      goto LABEL_29;
    v25 = v17[2];
    if (v19 >= v25)
      goto LABEL_45;
    v26 = v25 - 1;
    v27 = v25 - 1 - v19;
    if (v27 < 0)
      goto LABEL_47;
    memmove(v20, v20 + 2, 16 * v27);
    v17[2] = v26;
    swift_bridgeObjectRelease();
    result = (unsigned int *)swift_bridgeObjectRelease();
    --v18;
LABEL_30:
    v5 = v21;
  }
  while ((uint64_t)v19 < v18);
  v29[1] = v17;
  return result;
}

SwiftUI::ScrapeableContent __swiftcall AGSubgraphRef.scrapeContent()()
{
  unint64_t *v0;
  void *v1;
  void *v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void *v7;
  void *v8;
  SwiftUI::ScrapeableContent result;
  unint64_t v10[2];
  uint64_t v11;
  unint64_t v12;

  v2 = v1;
  v3 = v0;
  v12 = MEMORY[0x24BEE4B00];
  AGSubgraphApply();
  v11 = MEMORY[0x24BEE4B08];
  v4 = v12;
  swift_bridgeObjectRetain();
  AGSubgraphRef.Map.content(for:updated:)(v2, (unint64_t)&v11, v4, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = v10[0];
  if (v10[0])
  {
    v6 = v10[1];
    v7 = (void *)swift_bridgeObjectRelease();
  }
  else
  {
    v7 = (void *)swift_bridgeObjectRelease();
    v5 = MEMORY[0x24BEE4AF8];
    v6 = MEMORY[0x24BEE4AF8];
  }
  *v3 = v5;
  v3[1] = v6;
  result.children._rawValue = v8;
  result.nodes._rawValue = v7;
  return result;
}

_QWORD *closure #1 in AGSubgraphRef.scrapeContent()(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  _QWORD v12[4];
  uint64_t v13;

  v2 = *(_QWORD *)AGGraphGetAttributeInfo();
  result = (_QWORD *)swift_conformsToProtocol2();
  if (result)
    v4 = result;
  else
    v4 = 0;
  if (result)
    v5 = v2;
  else
    v5 = 0;
  if (v5)
  {
    result = ((_QWORD *(*)(_QWORD *__return_ptr, uint64_t))v4[2])(v12, a1);
    v6 = v13;
    if (v13 != 1)
    {
      v8 = v12[2];
      v7 = v12[3];
      v9 = v12[0];
      v10 = v12[1];
      v11 = (id)AGGraphGetAttributeSubgraph();
      AGSubgraphRef.Map.addItem(_:for:)((uint64_t)v12, v11);

      return (_QWORD *)outlined consume of ScrapeableContent.Item?(v9, v10, v8, v7, v6);
    }
  }
  return result;
}

SwiftUI::ScrapeableContent __swiftcall ViewGraph.scrapeContent()()
{
  uint64_t v0;
  id v1;
  void *v2;
  void *v3;
  SwiftUI::ScrapeableContent result;

  swift_beginAccess();
  v1 = *(id *)(v0 + 32);
  AGSubgraphRef.scrapeContent()();

  result.children._rawValue = v3;
  result.nodes._rawValue = v2;
  return result;
}

SwiftUI::ScrapeableContent __swiftcall ViewRendererHost.scrapeContent()()
{
  uint64_t v0;
  void *v1;
  void *v2;
  SwiftUI::ScrapeableContent result;

  v1 = (void *)(*(uint64_t (**)(void (*)(uint64_t), _QWORD, ValueMetadata *))(*(_QWORD *)(v0 + 8)
                                                                                                + 32))(closure #1 in ViewRendererHost.scrapeContent(), 0, &type metadata for ScrapeableContent);
  result.children._rawValue = v2;
  result.nodes._rawValue = v1;
  return result;
}

void closure #1 in ViewRendererHost.scrapeContent()(uint64_t a1)
{
  id v2;

  swift_beginAccess();
  v2 = *(id *)(a1 + 32);
  AGSubgraphRef.scrapeContent()();

}

void ScrapeableContent.description.getter()
{
  Swift::String v0;
  _QWORD v1[2];
  __int128 v2;
  unint64_t v3;

  v1[0] = 0xD000000000000013;
  v1[1] = 0x80000002352E4970;
  v2 = xmmword_235282660;
  v3 = 0xE200000000000000;
  ScrapeableContent.print(into:)(v1);
  if (!(_QWORD)v2)
    goto LABEL_4;
  if ((_QWORD)v2 != 0x8000000000000000)
  {
    specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
LABEL_4:
    v0._countAndFlagsBits = 41;
    v0._object = (void *)0xE100000000000000;
    String.append(_:)(v0);
    swift_bridgeObjectRelease();
    return;
  }
  __break(1u);
}

void ScrapeableContent.print(into:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  unint64_t v16;
  Swift::String v17;
  uint64_t j;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  Swift::String v22;

  v4 = *v1;
  v3 = v1[1];
  if ((unint64_t)*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    if (!v5)
      goto LABEL_10;
  }
  else
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v5)
      goto LABEL_10;
  }
  if (v5 < 1)
  {
    __break(1u);
    goto LABEL_23;
  }
  for (i = 0; i != v5; ++i)
  {
    if ((v4 & 0xC000000000000001) != 0)
      MEMORY[0x23B7C6D9C](i, v4);
    else
      swift_retain();
    ScrapeableContent.Node.print(into:)(a1);
    swift_release();
  }
LABEL_10:
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(v3 + 16);
  if (!v7)
    return;
  v8 = a1[2];
  if (!v8)
  {
    v17._countAndFlagsBits = 40;
    v17._object = (void *)0xE100000000000000;
    String.append(_:)(v17);
    v15 = 0x6E6572646C696863;
    v16 = 0xE800000000000000;
    goto LABEL_15;
  }
  v9._countAndFlagsBits = 10;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  v10 = a1[3];
  v11 = (void *)a1[4];
  swift_bridgeObjectRetain();
  v12._countAndFlagsBits = v10;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 40;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  v14._countAndFlagsBits = 0x6E6572646C696863;
  v14._object = (void *)0xE800000000000000;
  String.append(_:)(v14);
  if (__OFADD__(v8, 1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  a1[2] = v8 + 1;
  v15 = 8224;
  v16 = 0xE200000000000000;
LABEL_15:
  String.append(_:)(*(Swift::String *)&v15);
  swift_bridgeObjectRetain();
  for (j = 0; j != v7; ++j)
    ScrapeableContent.print(into:)(a1);
  swift_bridgeObjectRelease();
  v19 = a1[2];
  if (!v19)
    goto LABEL_20;
  v20 = __OFSUB__(v19, 1);
  v21 = v19 - 1;
  if (v20)
  {
LABEL_24:
    __break(1u);
    return;
  }
  a1[2] = v21;
  specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
LABEL_20:
  v22._countAndFlagsBits = 41;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
}

void ScrapeableContent.Node.print(into:)(_QWORD *a1)
{
  uint64_t v1;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  Swift::String v6;
  uint64_t v7;
  void *v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  unint64_t v13;
  Swift::String v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  Swift::String v22;

  ScrapeableContent.Item.print(into:)(a1);
  v3 = (unint64_t *)(v1 + 88);
  swift_beginAccess();
  v4 = *(_QWORD *)(v1 + 88);
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v18)
      return;
  }
  else if (!*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return;
  }
  v5 = a1[2];
  if (v5)
  {
    v6._countAndFlagsBits = 10;
    v6._object = (void *)0xE100000000000000;
    String.append(_:)(v6);
    v7 = a1[3];
    v8 = (void *)a1[4];
    swift_bridgeObjectRetain();
    v9._countAndFlagsBits = v7;
    v9._object = v8;
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 40;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    v11._countAndFlagsBits = 0x6E6572646C696863;
    v11._object = (void *)0xE800000000000000;
    String.append(_:)(v11);
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_24;
    }
    a1[2] = v5 + 1;
    v12 = 8224;
    v13 = 0xE200000000000000;
  }
  else
  {
    v14._countAndFlagsBits = 40;
    v14._object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    v12 = 0x6E6572646C696863;
    v13 = 0xE800000000000000;
  }
  String.append(_:)(*(Swift::String *)&v12);
  v15 = *v3;
  if (v15 >> 62)
  {
    swift_bridgeObjectRetain();
    v16 = _CocoaArrayWrapper.endIndex.getter();
    if (!v16)
      goto LABEL_18;
  }
  else
  {
    v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v16)
      goto LABEL_18;
  }
  if (v16 < 1)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  for (i = 0; i != v16; ++i)
  {
    if ((v15 & 0xC000000000000001) != 0)
      MEMORY[0x23B7C6D9C](i, v15);
    else
      swift_retain();
    ScrapeableContent.Node.print(into:)(a1);
    swift_release();
  }
LABEL_18:
  swift_bridgeObjectRelease();
  v19 = a1[2];
  if (v19)
  {
    v20 = __OFSUB__(v19, 1);
    v21 = v19 - 1;
    if (!v20)
    {
      a1[2] = v21;
      specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
      goto LABEL_21;
    }
LABEL_25:
    __break(1u);
    return;
  }
LABEL_21:
  v22._countAndFlagsBits = 41;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
}

void ScrapeableContent.Node.description.getter()
{
  Swift::String v0;
  _QWORD v1[2];
  __int128 v2;
  unint64_t v3;

  v1[0] = 0xD000000000000018;
  v1[1] = 0x80000002352E4990;
  v2 = xmmword_235282660;
  v3 = 0xE200000000000000;
  ScrapeableContent.Node.print(into:)(v1);
  if (!(_QWORD)v2)
    goto LABEL_4;
  if ((_QWORD)v2 != 0x8000000000000000)
  {
    specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
LABEL_4:
    v0._countAndFlagsBits = 41;
    v0._object = (void *)0xE100000000000000;
    String.append(_:)(v0);
    swift_bridgeObjectRelease();
    return;
  }
  __break(1u);
}

void ScrapeableContent.Item.print(into:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  double v4;
  double v5;
  uint64_t v6;
  Swift::String v7;
  uint64_t v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;

  v3 = *(_QWORD *)(v1 + 8);
  v5 = *(double *)(v1 + 16);
  v4 = *(double *)(v1 + 24);
  v6 = a1[2];
  if (v6)
  {
    v7._countAndFlagsBits = 10;
    v7._object = (void *)0xE100000000000000;
    String.append(_:)(v7);
    v8 = a1[3];
    v9 = (void *)a1[4];
    swift_bridgeObjectRetain();
    v10._countAndFlagsBits = v8;
    v10._object = v9;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._countAndFlagsBits = 40;
    v11._object = (void *)0xE100000000000000;
    String.append(_:)(v11);
    v12._countAndFlagsBits = 1835365481;
    v12._object = (void *)0xE400000000000000;
    String.append(_:)(v12);
    v13 = __OFADD__(v6, 1);
    v14 = v6 + 1;
    if (v13)
    {
      __break(1u);
      JUMPOUT(0x234EC98A8);
    }
    a1[2] = v14;
    v15 = 8224;
    v16 = 0xE200000000000000;
  }
  else
  {
    v17._countAndFlagsBits = 40;
    v17._object = (void *)0xE100000000000000;
    String.append(_:)(v17);
    v15 = 1835365481;
    v16 = 0xE400000000000000;
  }
  String.append(_:)(*(Swift::String *)&v15);
  if (v5 != 0.0 || v4 != 0.0)
  {
    v18._countAndFlagsBits = Double.description.getter();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 32;
    v19._object = (void *)0xE100000000000000;
    String.append(_:)(v19);
    v20._countAndFlagsBits = Double.description.getter();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._countAndFlagsBits = 41;
    v21._object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    v22._countAndFlagsBits = 32;
    v22._object = (void *)0xE100000000000000;
    String.append(_:)(v22);
    v23._countAndFlagsBits = 0x2820657A69733A23;
    v23._object = (void *)0xE800000000000000;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
  }
  __asm { BR              X10 }
}

void protocol witness for CustomStringConvertible.description.getter in conformance ScrapeableContent.Node()
{
  ScrapeableContent.Node.description.getter();
}

void ScrapeableContent.Item.description.getter()
{
  Swift::String v0;
  _QWORD v1[2];
  __int128 v2;
  unint64_t v3;

  v1[0] = 0xD000000000000018;
  v1[1] = 0x80000002352E49B0;
  v2 = xmmword_235282660;
  v3 = 0xE200000000000000;
  ScrapeableContent.Item.print(into:)(v1);
  if (!(_QWORD)v2)
    goto LABEL_4;
  if ((_QWORD)v2 != 0x8000000000000000)
  {
    specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
LABEL_4:
    v0._countAndFlagsBits = 41;
    v0._object = (void *)0xE100000000000000;
    String.append(_:)(v0);
    swift_bridgeObjectRelease();
    return;
  }
  __break(1u);
}

_QWORD *partial apply for closure #1 in AGSubgraphRef.scrapeContent()(uint64_t a1)
{
  return closure #1 in AGSubgraphRef.scrapeContent()(a1);
}

unint64_t lazy protocol witness table accessor for type ScrapeableID and conformance ScrapeableID()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrapeableID and conformance ScrapeableID;
  if (!lazy protocol witness table cache variable for type ScrapeableID and conformance ScrapeableID)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ScrapeableID, &type metadata for ScrapeableID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrapeableID and conformance ScrapeableID);
  }
  return result;
}

_BYTE *sub_234EC9A20(_BYTE *result, uint64_t a2)
{
  int v2;

  if (*result)
    v2 = 0;
  else
    v2 = 0x2000;
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a2 + 36) & 0xFFFFDFFF | v2;
  return result;
}

ValueMetadata *type metadata accessor for ScrapeableID()
{
  return &type metadata for ScrapeableID;
}

uint64_t dispatch thunk of static ScrapeableAttribute.scrapeContent(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

ValueMetadata *type metadata accessor for ScrapeableContent()
{
  return &type metadata for ScrapeableContent;
}

_QWORD *initializeBufferWithCopyOfBuffer for ScrapeableContent.Content(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t destroy for ScrapeableContent.Content()
{
  return swift_release();
}

_QWORD *assignWithCopy for ScrapeableContent.Content(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for ScrapeableContent.Content(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrapeableContent.Content(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x78 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 120);
  v3 = ((*(_QWORD *)a1 >> 60) & 0x8F | (16 * (*(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x77)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ScrapeableContent.Content(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x77)
  {
    *(_QWORD *)result = a2 - 120;
    if (a3 >= 0x78)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x78)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 4) & 7 | (8 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTag for ScrapeableContent.Content(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1 >> 60;
  if (v1 <= 7)
    return v1;
  else
    return (*a1 >> 3) + 8;
}

unint64_t *destructiveInjectEnumTag for ScrapeableContent.Content(unint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  if (a2 < 8)
  {
    v2 = *result & 0xFFFFFFFFFFFFFF8;
    v3 = a2 << 60;
  }
  else
  {
    v2 = 8 * (a2 - 8);
    v3 = 0x8000000000000000;
  }
  *result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for ScrapeableContent.Content()
{
  return &type metadata for ScrapeableContent.Content;
}

uint64_t destroy for ScrapeableContent.Item()
{
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for ScrapeableContent.Item(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ScrapeableContent.Item(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for ScrapeableContent.Item(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrapeableContent.Item(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 72))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrapeableContent.Item(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 72) = 0;
    if (a2)
      *(_QWORD *)(result + 32) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrapeableContent.Item()
{
  return &type metadata for ScrapeableContent.Item;
}

uint64_t type metadata accessor for ScrapeableContent.Node()
{
  return objc_opt_self();
}

uint64_t method lookup function for ScrapeableContent.Node()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_234EC9EB0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[1];
  v5 = type metadata accessor for ModifiedContent(255, *a1, (uint64_t)&type metadata for ScrapeableAttachmentViewModifier, a4);
  v7[0] = v4;
  v7[1] = &protocol witness table for ScrapeableAttachmentViewModifier;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v7);
}

_QWORD *initializeBufferWithCopyOfBuffer for ScrapeableAttachmentViewModifier(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  if ((~*a2 & 0xF000000000000007) != 0)
    swift_retain();
  *a1 = v3;
  return a1;
}

_QWORD *destroy for ScrapeableAttachmentViewModifier(_QWORD *result)
{
  if ((~*result & 0xF000000000000007) != 0)
    return (_QWORD *)swift_release();
  return result;
}

_QWORD *assignWithCopy for ScrapeableAttachmentViewModifier(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = *a2 & 0xF000000000000007;
  if ((~*a1 & 0xF000000000000007) != 0)
  {
    if (v4 != 0xF000000000000007)
    {
      *a1 = v3;
      swift_retain();
      swift_release();
      return a1;
    }
    outlined destroy of ScrapeableContent.Content((uint64_t)a1);
    v3 = *a2;
    goto LABEL_6;
  }
  if (v4 == 0xF000000000000007)
  {
LABEL_6:
    *a1 = v3;
    return a1;
  }
  *a1 = v3;
  swift_retain();
  return a1;
}

uint64_t outlined destroy of ScrapeableContent.Content(uint64_t a1)
{
  swift_release();
  return a1;
}

_QWORD *assignWithTake for ScrapeableAttachmentViewModifier(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  if ((~*a1 & 0xF000000000000007) != 0)
  {
    if ((~v3 & 0xF000000000000007) != 0)
    {
      *a1 = v3;
      swift_release();
      return a1;
    }
    outlined destroy of ScrapeableContent.Content((uint64_t)a1);
  }
  *a1 = v3;
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrapeableAttachmentViewModifier(uint64_t a1, unsigned int a2)
{
  int v3;
  unsigned int v4;
  int v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 >= 0x77 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 119);
  v3 = (*(_QWORD *)a1 >> 60) & 0x8F | (16 * (*(_QWORD *)a1 & 7));
  v4 = v3 ^ 0x7F;
  v5 = 126 - v3;
  if (v4 >= 0x77)
    v6 = -1;
  else
    v6 = v5;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrapeableAttachmentViewModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x76)
  {
    *(_QWORD *)result = a2 - 119;
    if (a3 >= 0x77)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x77)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = ((8 * (a2 ^ 0x7F)) | ((a2 ^ 0x7F) >> 4) | ((unint64_t)((8 * (a2 ^ 0x7F)) | ((a2 ^ 0x7F) >> 4)) << 57)) & 0xF000000000000007;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrapeableAttachmentViewModifier()
{
  return &type metadata for ScrapeableAttachmentViewModifier;
}

ValueMetadata *type metadata accessor for _ViewInputs.ScrapeableParentID()
{
  return &type metadata for _ViewInputs.ScrapeableParentID;
}

unint64_t lazy protocol witness table accessor for type ScrapeableAttachmentViewModifier.Attachment and conformance ScrapeableAttachmentViewModifier.Attachment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrapeableAttachmentViewModifier.Attachment and conformance ScrapeableAttachmentViewModifier.Attachment;
  if (!lazy protocol witness table cache variable for type ScrapeableAttachmentViewModifier.Attachment and conformance ScrapeableAttachmentViewModifier.Attachment)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ScrapeableAttachmentViewModifier.Attachment, &unk_250641BE0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrapeableAttachmentViewModifier.Attachment and conformance ScrapeableAttachmentViewModifier.Attachment);
  }
  return result;
}

uint64_t specialized static AGSubgraphRef.Map.resolveParents(nodes:children:)(uint64_t *a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD **v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD **v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;

  v3 = (unint64_t)a1;
  v4 = *a1;
  v25 = (unint64_t)*a1 >> 62;
  if (v25)
    goto LABEL_56;
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v5)
    return swift_bridgeObjectRelease();
LABEL_3:
  v22 = (_QWORD *)a2;
  v6 = *(_QWORD **)a2;
  v21 = (_QWORD *)v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew()(v6);
  v23 = 0;
  v3 = 0;
  v7 = v4 & 0xC000000000000001;
  v24 = v5;
  do
  {
    while (1)
    {
      if (v7)
      {
        v8 = MEMORY[0x23B7C6D9C](v3, v4);
        v9 = __OFADD__(v3++, 1);
        if (v9)
          goto LABEL_54;
      }
      else
      {
        if (v3 >= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_55;
        v8 = *(_QWORD *)(v4 + 32 + 8 * v3);
        swift_retain();
        v9 = __OFADD__(v3++, 1);
        if (v9)
          goto LABEL_54;
      }
      v10 = *(_DWORD *)(v8 + 16);
      if (v10)
        break;
      swift_release();
      if (v3 == v5)
        goto LABEL_38;
    }
    if (v25)
    {
      swift_bridgeObjectRetain();
      v11 = _CocoaArrayWrapper.endIndex.getter();
      v26 = v3;
      if (!v11)
        goto LABEL_32;
    }
    else
    {
      v11 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      v26 = v3;
      if (!v11)
        goto LABEL_32;
    }
    v12 = 0;
    v3 = v8 + 88;
    while (2)
    {
      a2 = (unint64_t)v12;
      while (1)
      {
        if (v7)
        {
          v13 = MEMORY[0x23B7C6D9C](a2, v4);
          v12 = (_QWORD **)(a2 + 1);
          if (__OFADD__(a2, 1))
            goto LABEL_51;
        }
        else
        {
          if (a2 >= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_53;
          v13 = *(_QWORD *)(v4 + 8 * a2 + 32);
          swift_retain();
          v12 = (_QWORD **)(a2 + 1);
          if (__OFADD__(a2, 1))
          {
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
LABEL_56:
            swift_bridgeObjectRetain();
            v5 = _CocoaArrayWrapper.endIndex.getter();
            if (!v5)
              return swift_bridgeObjectRelease();
            goto LABEL_3;
          }
        }
        if (v13 != v8 && *(_DWORD *)(v13 + 20) == v10)
          break;
        swift_release();
        ++a2;
        if (v12 == (_QWORD **)v11)
          goto LABEL_32;
      }
      *(_BYTE *)(v13 + 96) = 1;
      swift_beginAccess();
      v14 = swift_retain();
      MEMORY[0x23B7C61A8](v14);
      if (*(_QWORD *)((*(_QWORD *)v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)v3 & 0xFFFFFFFFFFFFFF8)
                                                                                  + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
      swift_release();
      v23 = 1;
      if (v12 != (_QWORD **)v11)
        continue;
      break;
    }
LABEL_32:
    swift_bridgeObjectRelease();
    a2 = v6[2];
    if (a2)
    {
      swift_beginAccess();
      v15 = 0;
      v3 = (unint64_t)(v6 + 4);
      do
      {
        v27 = v10;
        if ((unint64_t)v15 >= v6[2])
          goto LABEL_52;
        v15 = (_QWORD **)((char *)v15 + 1);
        ScrapeableContent.move(parentID:to:)(&v27, (_QWORD *)(v8 + 88));
        v3 += 16;
      }
      while ((_QWORD **)a2 != v15);
      swift_endAccess();
    }
    swift_release();
    v5 = v24;
    v3 = v26;
  }
  while (v26 != v24);
LABEL_38:
  result = swift_bridgeObjectRelease();
  *v22 = v6;
  if ((v23 & 1) == 0)
    return result;
  v28 = MEMORY[0x24BEE4AF8];
  if (v25)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v17 = result;
    if (!result)
      goto LABEL_59;
LABEL_41:
    if (v17 < 1)
    {
      __break(1u);
      return result;
    }
    v18 = 0;
    while (1)
    {
      if (v7)
      {
        if ((*(_BYTE *)(MEMORY[0x23B7C6D9C](v18, v4) + 96) & 1) != 0)
          goto LABEL_49;
      }
      else
      {
        v19 = *(_QWORD *)(v4 + 8 * v18 + 32);
        swift_retain();
        if ((*(_BYTE *)(v19 + 96) & 1) != 0)
        {
LABEL_49:
          swift_release();
          goto LABEL_44;
        }
      }
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
LABEL_44:
      if (v17 == ++v18)
      {
        swift_bridgeObjectRelease();
        v20 = v28;
        goto LABEL_60;
      }
    }
  }
  v17 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain();
  if (v17)
    goto LABEL_41;
LABEL_59:
  swift_bridgeObjectRelease();
  v20 = MEMORY[0x24BEE4AF8];
LABEL_60:
  result = swift_bridgeObjectRelease();
  *v21 = v20;
  return result;
}

void type metadata accessor for (ScrapeableContent, Int)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ScrapeableContent, Int))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ScrapeableContent, Int));
  }
}

_QWORD *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Index;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  if (a1 != a2)
  {
    v5 = a1;
    if (a2 < a1)
      goto LABEL_22;
    v2 = (_QWORD *)MEMORY[0x24BEE4AF8];
    while (1)
    {
      if (v5 >= a2)
      {
        __break(1u);
LABEL_22:
        __break(1u);
      }
      v6 = (id)AGSubgraphGetChild();
      AGSubgraphRef.Map.content(for:updated:)(v16);
      v7 = v16[0];
      if (v16[0])
      {
        v8 = v16[1];
        if ((unint64_t)v16[0] >> 62)
        {
          outlined copy of ScrapeableContent?(v16[0]);
          swift_bridgeObjectRetain();
          v10 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v10)
          {
LABEL_12:
            outlined consume of AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>?(v7);
LABEL_15:
            Index = AGSubgraphGetIndex();

            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1, 1, v2);
            v14 = v2[2];
            v13 = v2[3];
            if (v14 >= v13 >> 1)
              v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v2);
            v2[2] = v14 + 1;
            v15 = &v2[3 * v14];
            v15[4] = v7;
            v15[5] = v8;
            v15[6] = Index;
            goto LABEL_7;
          }
        }
        else
        {
          v9 = *(_QWORD *)((v16[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v9)
            goto LABEL_12;
        }
        v11 = *(_QWORD *)(v8 + 16);
        outlined consume of AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>?(v7);
        if (v11)
          goto LABEL_15;

        outlined consume of AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>?(v7);
      }
      else
      {

      }
LABEL_7:
      if (a2 == ++v5)
        return v2;
    }
  }
  return (_QWORD *)MEMORY[0x24BEE4AF8];
}

uint64_t outlined copy of ScrapeableContent?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of ScrapeableContent.Item?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  if (a5 != 1)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

ValueMetadata *type metadata accessor for AGSubgraphRef.Map.Key()
{
  return &type metadata for AGSubgraphRef.Map.Key;
}

void *type metadata accessor for ScrapeableAttachmentViewModifier.Attachment()
{
  return &unk_250641BE0;
}

unint64_t instantiation function for generic protocol witness table for ScrapeableAttachmentViewModifier.Attachment(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ScrapeableAttachmentViewModifier.Attachment and conformance ScrapeableAttachmentViewModifier.Attachment();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void type metadata accessor for ScrapeableContent.Content?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ScrapeableContent.Content?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ScrapeableContent.Content?);
  }
}

uint64_t outlined copy of ScrapeableContent.Content?(uint64_t result)
{
  if ((~result & 0xF000000000000007) != 0)
    return swift_retain();
  return result;
}

void *type metadata accessor for AGSubgraphRef.Map()
{
  return &unk_250650678;
}

void GesturePhase.unwrapped.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  double v7;
  char *v8;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v2);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - v4;
  v7 = MEMORY[0x24BDAC7A8](v6);
  (*(void (**)(char *, double))(v1 + 16))(v5, v7);
  v8 = (char *)sub_234ECB490 + 4 * byte_2352AE258[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_234ECB490()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  void (*v9)(uint64_t, uint64_t, uint64_t);

  v8(v5, v3, v1);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  v9(v4, v5, v2);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v3, v1);
  v9(v0, v4, v2);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v0, 0, 1, v2);
}

BOOL GesturePhase.isFailed.getter(uint64_t a1)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  char *v5;
  int EnumCaseMultiPayload;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 - 8);
  v3 = MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v2 + 16))(v5, v3);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 3)
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, a1);
  return EnumCaseMultiPayload == 3;
}

BOOL GesturePhase.isActive.getter(uint64_t a1)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  char *v5;
  _BOOL8 v6;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 - 8);
  v3 = MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v2 + 16))(v5, v3);
  v6 = swift_getEnumCaseMultiPayload() - 1 < 2;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, a1);
  return v6;
}

uint64_t GesturePhase.isTerminal.getter(uint64_t a1)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  char *v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 - 8);
  v3 = MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v2 + 16))(v5, v3);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v7 = 1;
  if (EnumCaseMultiPayload == 2)
    goto LABEL_4;
  if (EnumCaseMultiPayload != 3)
  {
    v7 = 0;
LABEL_4:
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, a1);
  }
  return v7;
}

uint64_t specialized GesturePhase.withValue<A>(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 a4@<W3>, _BYTE *a5@<X8>)
{
  if (a4 - 1 >= 2)
  {
    if (a4 || a3 != 1)
    {
      *a5 = 0;
    }
    else
    {
      result = outlined consume of GesturePhase<TappableEvent>(result, a2, 1, 0);
      *a5 = 1;
    }
  }
  a5[1] = a4;
  return result;
}

void GesturePhase.withValue<A>(_:)()
{
  GesturePhase.map<A>(_:)((uint64_t)partial apply for closure #1 in GesturePhase.withValue<A>(_:));
}

void static GesturePhase<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  void (*v27)(char *, uint64_t, uint64_t, double);
  char *v28;
  _QWORD v29[8];
  uint64_t TupleTypeMetadata2;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v31 = a4;
  v36 = a1;
  v37 = a2;
  v34 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v29[6] = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v29[5] = (char *)v29 - v7;
  MEMORY[0x24BDAC7A8](v8);
  v29[1] = (char *)v29 - v9;
  v10 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v29[3] = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v29[4] = (char *)v29 - v11;
  v32 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v29[2] = (char *)v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v29[7] = (char *)v29 - v15;
  v35 = a3;
  v18 = type metadata accessor for GesturePhase(0, a3, v16, v17);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  MEMORY[0x24BDAC7A8](v20);
  MEMORY[0x24BDAC7A8](v21);
  v22 = swift_getTupleTypeMetadata2();
  v23 = MEMORY[0x24BDAC7A8](v22);
  v26 = (char *)v29 + *(int *)(v25 + 48) - v24;
  v33 = v19;
  v27 = *(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16);
  v27((char *)v29 - v24, v36, v18, v23);
  ((void (*)(char *, uint64_t, uint64_t))v27)(v26, v37, v18);
  v28 = (char *)sub_234ECBA58 + 4 * byte_2352AE25C[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_234ECBA58()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD *v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(uint64_t, uint64_t, uint64_t);
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  void (*v25)(uint64_t, uint64_t);
  void (*v26)(uint64_t, uint64_t);

  v1(v5, v0, v4);
  if (!swift_getEnumCaseMultiPayload())
  {
    v11 = *(_QWORD **)(v8 - 128);
    v12 = (void (*)(uint64_t, uint64_t, uint64_t))v11[4];
    v13 = *(_QWORD *)(v8 - 152);
    v12(v13, v6, v3);
    v14 = *(_QWORD *)(v8 - 176);
    v15 = v14 + *(int *)(*(_QWORD *)(v8 - 144) + 48);
    v12(v14, v5, v3);
    v16 = (void (*)(uint64_t, uint64_t, uint64_t))v11[2];
    *(_QWORD *)(v8 - 88) = v15;
    v16(v15, v13, v3);
    v18 = *(_QWORD *)(v8 - 112);
    v17 = *(_QWORD *)(v8 - 104);
    v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
    if (v19(v14, 1, v17) == 1)
    {
      v20 = (void (*)(uint64_t, uint64_t))v11[1];
      v20(v13, v3);
      if (v19(*(_QWORD *)(v8 - 88), 1, v17) == 1)
      {
        v20(v14, v3);
        v9 = 1;
        v7 = *(_QWORD *)(v8 - 120);
        v2 = v4;
        goto LABEL_3;
      }
    }
    else
    {
      v21 = *(_QWORD *)(v8 - 192);
      v16(v21, v14, v3);
      v22 = *(_QWORD *)(v8 - 88);
      if (v19(v22, 1, v17) != 1)
      {
        v23 = *(_QWORD *)(v8 - 200);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(v23, v22, v17);
        v24 = dispatch thunk of static Equatable.== infix(_:_:)();
        v25 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
        v25(v23, v17);
        v26 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 128) + 8);
        v26(*(_QWORD *)(v8 - 152), v3);
        v25(v21, v17);
        v26(v14, v3);
        v7 = *(_QWORD *)(v8 - 120);
        if ((v24 & 1) != 0)
        {
          v9 = 1;
          v2 = v4;
          goto LABEL_3;
        }
        goto LABEL_10;
      }
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v8 - 128) + 8))(*(_QWORD *)(v8 - 152), v3);
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v21, v17);
    }
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v8 - 184) + 8))(v14, *(_QWORD *)(v8 - 144));
    v7 = *(_QWORD *)(v8 - 120);
LABEL_10:
    v9 = 0;
    v2 = v4;
    goto LABEL_3;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 128) + 8))(v5, v3);
  v9 = 0;
LABEL_3:
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0, v2);
  return v9 & 1;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance <A> GesturePhase<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  static GesturePhase<A>.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
}

void GesturePhase.map<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  MEMORY[0x24BDAC7A8](a1);
  v2 = MEMORY[0x24BDAC7A8](v1);
  (*(void (**)(char *, uint64_t, double))(v4 + 16))((char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v5, v2);
  v6 = (char *)sub_234ECBE74 + 4 * byte_2352AE260[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_234ECBE74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v5, 1, v2) == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v0, 1, 1, v1);
    type metadata accessor for GesturePhase(0, v1, v7, v8);
    swift_storeEnumTagMultiPayload();
    v9 = type metadata accessor for Optional();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v5, v9);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v4, v5, v2);
    v3(v4);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v2);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v0, 0, 1, v1);
    type metadata accessor for GesturePhase(0, v1, v11, v12);
    return swift_storeEnumTagMultiPayload();
  }
}

uint64_t partial apply for closure #1 in GesturePhase.withValue<A>(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t type metadata accessor for GesturePhase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GesturePhase);
}

BOOL GesturePhase.isPossible.getter(uint64_t a1)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  char *v5;
  _BOOL8 v6;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 - 8);
  v3 = MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v2 + 16))(v5, v3);
  v6 = swift_getEnumCaseMultiPayload() == 0;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, a1);
  return v6;
}

BOOL GesturePhase.isEnded.getter(uint64_t a1)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  char *v5;
  _BOOL8 v6;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 - 8);
  v3 = MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v2 + 16))(v5, v3);
  v6 = swift_getEnumCaseMultiPayload() == 2;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, a1);
  return v6;
}

uint64_t static GesturePhase.defaultValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for GesturePhase(0, a1, a3, a4);
  return swift_storeEnumTagMultiPayload();
}

uint64_t protocol witness for static Defaultable.defaultValue.getter in conformance GesturePhase<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static GesturePhase.defaultValue.getter(*(_QWORD *)(a1 + 16), a2, a3, a4);
}

void static GestureCategory.defaultValue.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t type metadata completion function for GesturePhase()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for GesturePhase(_QWORD *__dst, unsigned __int8 *__src, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  int v8;
  size_t v9;
  size_t v10;
  uint64_t v13;
  unsigned int v15;
  uint64_t v16;

  v4 = __dst;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_DWORD *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84))
    v9 = *(_QWORD *)(v6 + 64);
  else
    v9 = v7 + 1;
  if (v7 <= v9)
    v10 = v9;
  else
    v10 = *(_QWORD *)(v6 + 64);
  if (*(_DWORD *)(v6 + 80) > 7u || (v8 & 0x100000) != 0 || v10 + 1 > 0x18)
  {
    v13 = *(_QWORD *)__src;
    *v4 = *(_QWORD *)__src;
    v4 = (_QWORD *)(v13 + ((v8 + 16) & ~(unint64_t)v8));
    swift_retain();
  }
  else
  {
    v15 = __src[v10];
    if (v15 >= 3)
    {
      if (v10 <= 3)
        v16 = v10;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    if (v15 == 2)
    {
      (*(void (**)(_QWORD *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
      *((_BYTE *)v4 + v10) = 2;
    }
    else if (v15 == 1)
    {
      (*(void (**)(_QWORD *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
      *((_BYTE *)v4 + v10) = 1;
    }
    else
    {
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(__src, 1, v5))
      {
        memcpy(v4, __src, v9);
      }
      else
      {
        (*(void (**)(_QWORD *, unsigned __int8 *, uint64_t))(v6 + 16))(v4, __src, v5);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
      }
      *((_BYTE *)v4 + v10) = 0;
    }
  }
  return v4;
}

uint64_t destroy for GesturePhase(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;

  v2 = result;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  if (*(_DWORD *)(v4 + 84))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = v5 + 1;
  if (v5 > v6)
    v6 = *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(result + v6);
  if (v7 >= 3)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X13 }
  }
  if (v7 - 1 < 2)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  if (!*(_BYTE *)(result + v6))
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(result, 1, v3);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  }
  return result;
}

_BYTE *initializeWithCopy for GesturePhase(_BYTE *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  size_t v8;
  size_t v9;
  unsigned int v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  if (*(_DWORD *)(v6 + 84))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = v7 + 1;
  if (v7 <= v8)
    v9 = v8;
  else
    v9 = *(_QWORD *)(v6 + 64);
  v10 = __src[v9];
  if (v10 >= 3)
  {
    if (v9 <= 3)
      v11 = v9;
    else
      v11 = 4;
    __asm { BR              X12 }
  }
  if (v10 == 2)
  {
    (*(void (**)(_BYTE *, unsigned __int8 *, _QWORD))(v6 + 16))(__dst, __src, *(_QWORD *)(a3 + 16));
    __dst[v9] = 2;
  }
  else if (v10 == 1)
  {
    (*(void (**)(_BYTE *, unsigned __int8 *, _QWORD))(v6 + 16))(__dst, __src, *(_QWORD *)(a3 + 16));
    __dst[v9] = 1;
  }
  else
  {
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, _QWORD))(v6 + 48))(__src, 1, *(_QWORD *)(a3 + 16)))
    {
      memcpy(__dst, __src, v8);
    }
    else
    {
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v6 + 56))(__dst, 0, 1, v5);
    }
    __dst[v9] = 0;
  }
  return __dst;
}

unsigned __int8 *assignWithCopy for GesturePhase(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  size_t v8;
  size_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    if (*(_DWORD *)(v6 + 84))
      v8 = *(_QWORD *)(v6 + 64);
    else
      v8 = v7 + 1;
    if (v7 <= v8)
      v9 = v8;
    else
      v9 = *(_QWORD *)(v6 + 64);
    v10 = a1[v9];
    if (v10 >= 3)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 - 1 < 2
      || !a1[v9]
      && !(*(unsigned int (**)(unsigned __int8 *, uint64_t, _QWORD))(v6 + 48))(a1, 1, *(_QWORD *)(a3 + 16)))
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    v12 = a2[v9];
    if (v12 >= 3)
    {
      if (v9 <= 3)
        v13 = v9;
      else
        v13 = 4;
      __asm { BR              X12 }
    }
    if (v12 == 2)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      a1[v9] = 2;
    }
    else if (v12 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      a1[v9] = 1;
    }
    else
    {
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
      {
        memcpy(a1, a2, v8);
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
        (*(void (**)(unsigned __int8 *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      }
      a1[v9] = 0;
    }
  }
  return a1;
}

_BYTE *initializeWithTake for GesturePhase(_BYTE *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  size_t v8;
  size_t v9;
  unsigned int v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  if (*(_DWORD *)(v6 + 84))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = v7 + 1;
  if (v7 <= v8)
    v9 = v8;
  else
    v9 = *(_QWORD *)(v6 + 64);
  v10 = __src[v9];
  if (v10 >= 3)
  {
    if (v9 <= 3)
      v11 = v9;
    else
      v11 = 4;
    __asm { BR              X12 }
  }
  if (v10 == 2)
  {
    (*(void (**)(_BYTE *, unsigned __int8 *, _QWORD))(v6 + 32))(__dst, __src, *(_QWORD *)(a3 + 16));
    __dst[v9] = 2;
  }
  else if (v10 == 1)
  {
    (*(void (**)(_BYTE *, unsigned __int8 *, _QWORD))(v6 + 32))(__dst, __src, *(_QWORD *)(a3 + 16));
    __dst[v9] = 1;
  }
  else
  {
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, _QWORD))(v6 + 48))(__src, 1, *(_QWORD *)(a3 + 16)))
    {
      memcpy(__dst, __src, v8);
    }
    else
    {
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v6 + 56))(__dst, 0, 1, v5);
    }
    __dst[v9] = 0;
  }
  return __dst;
}

unsigned __int8 *assignWithTake for GesturePhase(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  size_t v8;
  size_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    if (*(_DWORD *)(v6 + 84))
      v8 = *(_QWORD *)(v6 + 64);
    else
      v8 = v7 + 1;
    if (v7 <= v8)
      v9 = v8;
    else
      v9 = *(_QWORD *)(v6 + 64);
    v10 = a1[v9];
    if (v10 >= 3)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 - 1 < 2
      || !a1[v9]
      && !(*(unsigned int (**)(unsigned __int8 *, uint64_t, _QWORD))(v6 + 48))(a1, 1, *(_QWORD *)(a3 + 16)))
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    v12 = a2[v9];
    if (v12 >= 3)
    {
      if (v9 <= 3)
        v13 = v9;
      else
        v13 = 4;
      __asm { BR              X12 }
    }
    if (v12 == 2)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      a1[v9] = 2;
    }
    else if (v12 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      a1[v9] = 1;
    }
    else
    {
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
      {
        memcpy(a1, a2, v8);
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
        (*(void (**)(unsigned __int8 *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      }
      a1[v9] = 0;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for GesturePhase(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v9;
  unsigned int v11;
  int v12;
  unsigned int v13;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(_DWORD *)(v3 + 84);
  v5 = *(_QWORD *)(v3 + 64);
  if (v4)
    v6 = v5;
  else
    v6 = v5 + 1;
  if (v5 > v6)
    v6 = v5;
  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_24;
  v7 = v6 + 1;
  v8 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    v11 = ((a2 + ~(-1 << v8) - 252) >> v8) + 1;
    if (HIWORD(v11))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_24;
      goto LABEL_17;
    }
    if (v11 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_24;
      goto LABEL_17;
    }
    if (v11 < 2)
    {
LABEL_24:
      v13 = *(unsigned __int8 *)(a1 + v6);
      if (v13 >= 4)
        return (v13 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_24;
LABEL_17:
  v12 = (v9 - 1) << v8;
  if (v7 > 3)
    v12 = 0;
  if (!(_DWORD)v7)
    return (v12 + 253);
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234ECCD50 + 4 * byte_2352AE28C[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for GesturePhase(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  if (v6)
    v8 = v7;
  else
    v8 = v7 + 1;
  if (v7 <= v8)
    v7 = v8;
  v9 = v7 + 1;
  if (a3 < 0xFD)
  {
    v10 = 0;
  }
  else if (v9 <= 3)
  {
    v12 = ((a3 + ~(-1 << (8 * v9)) - 252) >> (8 * v9)) + 1;
    if (HIWORD(v12))
    {
      v10 = 4u;
    }
    else if (v12 >= 0x100)
    {
      v10 = 2;
    }
    else
    {
      v10 = v12 > 1;
    }
  }
  else
  {
    v10 = 1u;
  }
  if (a2 <= 0xFC)
    __asm { BR              X11 }
  v11 = a2 - 253;
  if (v9 < 4)
  {
    if ((_DWORD)v7 != -1)
    {
      v13 = v11 & ~(-1 << (8 * v9));
      bzero(a1, v9);
      if ((_DWORD)v9 == 3)
      {
        *a1 = v13;
        *((_BYTE *)a1 + 2) = BYTE2(v13);
      }
      else if ((_DWORD)v9 == 2)
      {
        *a1 = v13;
      }
      else
      {
        *(_BYTE *)a1 = v13;
      }
    }
  }
  else
  {
    bzero(a1, v7 + 1);
    *(_DWORD *)a1 = v11;
  }
  __asm { BR              X10 }
}

uint64_t getEnumTag for GesturePhase(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_DWORD *)(v2 + 84);
  v4 = *(_QWORD *)(v2 + 64);
  if (v3)
    v5 = v4;
  else
    v5 = v4 + 1;
  if (v4 > v5)
    v5 = v4;
  if (*(unsigned __int8 *)(a1 + v5) < 3u)
    return *(unsigned __int8 *)(a1 + v5);
  if (v5 <= 3)
    v6 = v5;
  else
    v6 = 4;
  return ((uint64_t (*)(void))((char *)&loc_234ECCF9C + 4 * byte_2352AE29A[v6]))();
}

_BYTE *destructiveInjectEnumTag for GesturePhase(_BYTE *result, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  size_t v6;
  size_t v7;
  size_t v8;
  char v9;
  int v10;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(v4 + 64);
  if (v5)
    v7 = v6;
  else
    v7 = v6 + 1;
  if (v6 <= v7)
    v8 = v7;
  else
    v8 = v6;
  if (a2 > 2)
  {
    if (v8 <= 3)
      v9 = ((a2 - 3) >> (8 * v8)) + 3;
    else
      v9 = 3;
    result[v8] = v9;
    if (v8 >= 4)
      v10 = 4;
    else
      v10 = v8;
    bzero(result, v8);
    __asm { BR              X10 }
  }
  result[v8] = a2;
  return result;
}

unint64_t _ViewOutputs.layoutComputer.getter()
{
  uint64_t v0;
  uint64_t v1;
  BOOL v2;

  LODWORD(v1) = *(_DWORD *)(v0 + 12);
  v2 = (_DWORD)v1 == *MEMORY[0x24BE096C0];
  if ((_DWORD)v1 == *MEMORY[0x24BE096C0])
    v1 = 0;
  else
    v1 = v1;
  return v1 | ((unint64_t)v2 << 32);
}

uint64_t _ViewOutputs.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;

  v4 = PreferencesOutputs.subscript.getter(a1, a2, a3, a4);
  return v4 | ((HIDWORD(v4) & 1) << 32);
}

void _ViewOutputs.init()(uint64_t a1@<X8>)
{
  int v1;

  *(_QWORD *)a1 = MEMORY[0x24BEE4AF8];
  v1 = *MEMORY[0x24BE096C0];
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v1;
}

uint64_t _ViewOutputs.layoutComputer.setter(uint64_t result)
{
  uint64_t v1;
  int v2;
  int v3;

  v2 = *MEMORY[0x24BE096C0];
  if ((result & 0x100000000) == 0)
    v2 = result;
  *(_DWORD *)(v1 + 12) = v2;
  v3 = *(_DWORD *)(v1 + 8);
  if ((v3 & 0x80) == 0)
    *(_DWORD *)(v1 + 8) = v3 | 0x80;
  return result;
}

void _ViewOutputs.subscript.setter(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  PreferencesOutputs.subscript.setter(a1 | ((HIDWORD(a1) & 1) << 32), a2, a3, a4);
}

{
  PreferencesOutputs.subscript.setter(a1 | ((HIDWORD(a1) & 1) << 32), a2, a3, a4);
}

uint64_t _ViewOutputs.viewResponders()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  Swift::UInt v9;
  uint64_t v10;

  v5 = *v4;
  type metadata accessor for _AnyPreferenceKey<ViewRespondersKey>(0, a2, a3, a4);
  v7 = *(_QWORD *)(v5 + 16);
  if (v7)
  {
    v8 = (unsigned int *)(v5 + 48);
    while (*((_QWORD *)v8 - 2) != v6)
    {
      v8 += 6;
      if (!--v7)
        goto LABEL_5;
    }
    return *v8;
  }
  else
  {
LABEL_5:
    specialized static ViewGraph.current.getter();
    type metadata accessor for [ViewResponder](0);
    v10 = specialized GraphHost.intern<A>(_:for:id:)(MEMORY[0x24BEE4AF8], v9, 0);
    swift_release();
    return v10;
  }
}

uint64_t _ViewOutputs.forEachPreference(_:)(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, _QWORD);
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 16);
  if (v3)
  {
    v4 = (void (*)(uint64_t, uint64_t, _QWORD))result;
    swift_bridgeObjectRetain();
    v5 = (_DWORD *)(v2 + 48);
    do
    {
      v6 = *((_QWORD *)v5 - 2);
      v7 = *((_QWORD *)v5 - 1);
      v8 = *v5;
      v5 += 6;
      v4(v6, v7, v8);
      --v3;
    }
    while (v3);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _ViewOutputs.preferences.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;

  v2 = *(_DWORD *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_DWORD *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t _ViewOutputs.preferences.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t result;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)v1 = v2;
  *(_DWORD *)(v1 + 8) = v3;
  return result;
}

uint64_t (*_ViewOutputs.preferences.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t *(*_ViewOutputs.layoutComputer.modify(uint64_t a1))(uint64_t *result)
{
  uint64_t v1;
  int v2;
  int v3;
  BOOL v4;

  *(_QWORD *)a1 = v1;
  v2 = *(_DWORD *)(v1 + 12);
  v3 = *MEMORY[0x24BE096C0];
  *(_DWORD *)(a1 + 16) = *MEMORY[0x24BE096C0];
  v4 = v2 == v3;
  if (v4)
    v2 = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v2;
  return _ViewOutputs.layoutComputer.modify;
}

uint64_t *_ViewOutputs.layoutComputer.modify(uint64_t *result)
{
  _DWORD *v1;
  uint64_t v2;
  int v3;

  v1 = result + 1;
  v2 = *result;
  if (*((_BYTE *)result + 12))
    v1 = result + 2;
  *(_DWORD *)(v2 + 12) = *v1;
  v3 = *(_DWORD *)(v2 + 8);
  if ((v3 & 0x80) == 0)
    *(_DWORD *)(v2 + 8) = v3 | 0x80;
  return result;
}

unint64_t _ViewOutputs.subscript.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned __int8 v4;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  if (v2)
  {
    v3 = (unsigned int *)(*(_QWORD *)v1 + 48);
    while (*((_QWORD *)v3 - 2) != a1)
    {
      v3 += 6;
      if (!--v2)
        goto LABEL_5;
    }
    v4 = 0;
    v2 = *v3;
  }
  else
  {
LABEL_5:
    v4 = 1;
  }
  return v2 | ((unint64_t)v4 << 32);
}

void (*_ViewOutputs.subscript.modify(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  char v6;

  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)a1 = a2;
  v4 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  if (v4)
  {
    v5 = (_DWORD *)(*(_QWORD *)v3 + 48);
    while (*((_QWORD *)v5 - 2) != a2)
    {
      v5 += 6;
      if (!--v4)
        goto LABEL_5;
    }
    v6 = 0;
    LODWORD(v4) = *v5;
  }
  else
  {
LABEL_5:
    v6 = 1;
  }
  *(_DWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 28) = v6;
  return _ViewOutputs.subscript.modify;
}

void _ViewOutputs.subscript.modify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  PreferencesOutputs.subscript.setter(*(unsigned int *)(a1 + 24) | ((unint64_t)*(unsigned __int8 *)(a1 + 28) << 32), *(_QWORD *)a1, *(_QWORD *)(a1 + 8), a4);
}

void (*_ViewOutputs.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;

  v9 = malloc(0x28uLL);
  *a1 = v9;
  v9[2] = a4;
  v9[3] = v4;
  *v9 = a2;
  v9[1] = a3;
  v11 = PreferencesOutputs.subscript.getter(a2, a3, a4, v10);
  *((_DWORD *)v9 + 8) = v11;
  *((_BYTE *)v9 + 36) = BYTE4(v11) & 1;
  return _ViewOutputs.subscript.modify;
}

void _ViewOutputs.subscript.modify(uint64_t **a1)
{
  uint64_t *v1;

  v1 = *a1;
  PreferencesOutputs.subscript.setter(*((unsigned int *)*a1 + 8) | ((unint64_t)*((unsigned __int8 *)*a1 + 36) << 32), **a1, (*a1)[1], (*a1)[2]);
  free(v1);
}

uint64_t sub_234ECD548@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2;
  BOOL v3;

  v2 = *(_DWORD *)(result + 12);
  v3 = v2 == *MEMORY[0x24BE096C0];
  if (v2 == *MEMORY[0x24BE096C0])
    v2 = 0;
  *(_DWORD *)a2 = v2;
  *(_BYTE *)(a2 + 4) = v3;
  return result;
}

uint64_t sub_234ECD570(uint64_t result, uint64_t a2)
{
  _DWORD *v2;
  int v3;

  v2 = (_DWORD *)MEMORY[0x24BE096C0];
  if (!*(_BYTE *)(result + 4))
    v2 = (_DWORD *)result;
  *(_DWORD *)(a2 + 12) = *v2;
  v3 = *(_DWORD *)(a2 + 8);
  if ((v3 & 0x80) == 0)
    *(_DWORD *)(a2 + 8) = v3 | 0x80;
  return result;
}

ValueMetadata *type metadata accessor for _ViewOutputs()
{
  return &type metadata for _ViewOutputs;
}

uint64_t specialized defaultConvertEventLocations<A>(_:converter:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  double *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Swift::UInt v38;
  Swift::UInt v39;
  double v40;
  double v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  _BOOL8 v51;
  uint64_t v52;
  char v53;
  unint64_t v54;
  char v55;
  _QWORD *v56;
  Swift::UInt *v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t result;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  __int128 v68[2];
  uint64_t v69;
  __int128 v70[2];
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  _QWORD v75[2];
  __int128 v76;
  uint64_t v77;

  v2 = *a1;
  v63 = *a1 + 64;
  v3 = 1 << *(_BYTE *)(*a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(*a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  v7 = 0;
  v65 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v66 = (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    if (v5)
    {
      v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v9 = v8 | (v7 << 6);
LABEL_6:
      v10 = *(_QWORD *)(v2 + 56);
      v11 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v9);
      v13 = *v11;
      v12 = v11[1];
      *(_QWORD *)&v71 = v13;
      *((_QWORD *)&v71 + 1) = v12;
      outlined init with copy of AnyTrackedValue(v10 + 40 * v9, (uint64_t)&v72);
      goto LABEL_13;
    }
    v14 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    if (v14 >= v6)
    {
      v16 = v7;
    }
    else
    {
      v15 = *(_QWORD *)(v63 + 8 * v14);
      if (v15)
        goto LABEL_10;
      v16 = v7 + 1;
      if (v7 + 2 < v6)
      {
        v15 = *(_QWORD *)(v63 + 8 * (v7 + 2));
        if (v15)
        {
          v14 = v7 + 2;
LABEL_10:
          v5 = (v15 - 1) & v15;
          v9 = __clz(__rbit64(v15)) + (v14 << 6);
          v7 = v14;
          goto LABEL_6;
        }
        v16 = v7 + 2;
        if (v7 + 3 < v6)
        {
          v15 = *(_QWORD *)(v63 + 8 * (v7 + 3));
          if (v15)
          {
            v14 = v7 + 3;
            goto LABEL_10;
          }
          v14 = v7 + 4;
          v16 = v7 + 3;
          if (v7 + 4 < v6)
          {
            v15 = *(_QWORD *)(v63 + 8 * v14);
            if (v15)
              goto LABEL_10;
            while (v6 - 5 != v7)
            {
              v15 = *(_QWORD *)(v2 + 104 + 8 * v7++);
              if (v15)
              {
                v14 = v7 + 4;
                goto LABEL_10;
              }
            }
            v16 = v6 - 1;
          }
        }
      }
    }
    v5 = 0;
    v74 = 0;
    v72 = 0u;
    v73 = 0u;
    v7 = v16;
    v71 = 0u;
LABEL_13:
    outlined init with take of (key: EventID, value: EventType)?((uint64_t)&v71, (uint64_t)v75);
    v17 = v75[0];
    if (!v75[0])
      break;
    v18 = v75[1];
    outlined init with take of ScrollStateRequest(&v76, (uint64_t)v70);
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for EventType);
    type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for SpatialEventType);
    if ((swift_dynamicCast() & 1) != 0)
    {
      outlined init with take of ScrollStateRequest(v68, (uint64_t)&v71);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v66 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v66[2] + 1, 1, v66);
      v20 = v66[2];
      v19 = v66[3];
      v21 = v20 + 1;
      if (v20 >= v19 >> 1)
      {
        v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v19 > 1), v20 + 1, 1, v66);
        v21 = v20 + 1;
        v66 = v31;
      }
      v66[2] = v21;
      v22 = &v66[2 * v20];
      v22[4] = v17;
      v22[5] = v18;
      v23 = *((_QWORD *)&v72 + 1);
      v24 = v73;
      __swift_project_boxed_opaque_existential_1(&v71, *((uint64_t *)&v72 + 1));
      v25 = (*(double (**)(uint64_t, uint64_t))(v24 + 16))(v23, v24);
      v27 = v26;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v65[2] + 1, 1, v65);
      v29 = v65[2];
      v28 = v65[3];
      if (v29 >= v28 >> 1)
        v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v28 > 1), v29 + 1, 1, v65);
      v65[2] = v29 + 1;
      v30 = (double *)&v65[2 * v29];
      v30[4] = v25;
      *((_QWORD *)v30 + 5) = v27;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v71);
    }
    else
    {
      v69 = 0;
      memset(v68, 0, sizeof(v68));
      outlined destroy of SpatialEventType?((uint64_t)v68);
    }
  }
  swift_release();
  v32 = v65;
  v64 = v65[2];
  if (v64)
  {
    v33 = v66;
    v62 = v66[2];
    if (v62)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v34 = 0;
      v35 = 0;
      while (1)
      {
        if (v64 == v35)
        {
LABEL_57:
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        if (v35 >= v32[2])
          goto LABEL_61;
        v37 = *a1;
        if (!*(_QWORD *)(*a1 + 16))
          goto LABEL_62;
        v38 = v33[v34 + 4];
        v39 = v33[v34 + 5];
        v40 = *(double *)&v32[v34 + 4];
        v41 = *(double *)&v32[v34 + 5];
        v42 = specialized __RawDictionaryStorage.find<A>(_:)(v38, v39);
        if ((v43 & 1) == 0)
          goto LABEL_63;
        outlined init with copy of AnyTrackedValue(*(_QWORD *)(v37 + 56) + 40 * v42, (uint64_t)v70);
        outlined init with take of ScrollStateRequest(v70, (uint64_t)&v71);
        type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for EventType);
        type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for SpatialEventType);
        swift_dynamicCast();
        v44 = *((_QWORD *)&v76 + 1);
        v45 = v77;
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v75, *((uint64_t *)&v76 + 1));
        (*(void (**)(uint64_t, uint64_t, double, double))(v45 + 48))(v44, v45, v40, v41);
        outlined init with copy of AnyTrackedValue((uint64_t)v75, (uint64_t)v70);
        swift_dynamicCast();
        outlined init with take of ScrollStateRequest(&v71, (uint64_t)v68);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v47 = *a1;
        v67 = (_QWORD *)*a1;
        *a1 = 0x8000000000000000;
        v49 = specialized __RawDictionaryStorage.find<A>(_:)(v38, v39);
        v50 = *(_QWORD *)(v47 + 16);
        v51 = (v48 & 1) == 0;
        v52 = v50 + v51;
        if (__OFADD__(v50, v51))
          goto LABEL_64;
        v53 = v48;
        if (*(_QWORD *)(v47 + 24) >= v52)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            v56 = v67;
            if ((v48 & 1) == 0)
              goto LABEL_53;
          }
          else
          {
            specialized _NativeDictionary.copy()();
            v56 = v67;
            if ((v53 & 1) == 0)
              goto LABEL_53;
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v52, isUniquelyReferenced_nonNull_native);
          v54 = specialized __RawDictionaryStorage.find<A>(_:)(v38, v39);
          if ((v53 & 1) != (v55 & 1))
            goto LABEL_66;
          v49 = v54;
          v56 = v67;
          if ((v53 & 1) == 0)
          {
LABEL_53:
            v56[(v49 >> 6) + 8] |= 1 << v49;
            v57 = (Swift::UInt *)(v56[6] + 16 * v49);
            *v57 = v38;
            v57[1] = v39;
            outlined init with take of ScrollStateRequest(v68, v56[7] + 40 * v49);
            v58 = v56[2];
            v59 = __OFADD__(v58, 1);
            v60 = v58 + 1;
            if (v59)
              goto LABEL_65;
            v56[2] = v60;
            goto LABEL_41;
          }
        }
        v36 = v56[7] + 40 * v49;
        __swift_destroy_boxed_opaque_existential_1(v36);
        outlined init with take of ScrollStateRequest(v68, v36);
LABEL_41:
        ++v35;
        *a1 = (uint64_t)v56;
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v75);
        v34 += 2;
        v32 = v65;
        v33 = v66;
        if (v62 == v35)
          goto LABEL_57;
      }
    }
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t defaultConvertEventLocations<A>(_:converter:)(uint64_t *a1, void (*a2)(_QWORD **), uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t TupleTypeMetadata2;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t result;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  unint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  double *v57;
  _QWORD *v58;
  _QWORD *v59;
  void (*v60)(_QWORD);
  uint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  double v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  void (*v82)(_QWORD **);
  char *v83;
  char *v84;
  char *v85;
  uint64_t *v86;
  uint64_t v87;
  _QWORD *v88;
  int64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95[2];
  uint64_t v96;
  _QWORD v97[3];
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;

  v81 = a3;
  v82 = a2;
  v6 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v6);
  v84 = (char *)&v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v85 = (char *)&v77 - v9;
  v92 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v83 = (char *)&v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v77 - v13;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v16 = type metadata accessor for Optional();
  v90 = *(_QWORD *)(v16 - 8);
  v91 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v77 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v77 - v20;
  v86 = a1;
  v22 = *a1;
  v23 = a4;
  v24 = *(_QWORD *)(v22 + 64);
  v87 = v22 + 64;
  v88 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v100 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v25 = 1 << *(_BYTE *)(v22 + 32);
  v26 = -1;
  if (v25 < 64)
    v26 = ~(-1 << v25);
  v27 = v26 & v24;
  v28 = (unint64_t)(v25 + 63) >> 6;
  v78 = v28 - 1;
  result = swift_bridgeObjectRetain();
  v30 = 0;
  v89 = v28;
  v80 = v28 - 4;
  v79 = v22 + 96;
  while (1)
  {
    if (v27)
    {
      v31 = __clz(__rbit64(v27));
      v27 &= v27 - 1;
      v32 = v31 | (v30 << 6);
      goto LABEL_6;
    }
    v41 = v30 + 1;
    if (__OFADD__(v30, 1))
    {
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
      return result;
    }
    if (v41 >= v89)
    {
      v27 = 0;
      v37 = 1;
    }
    else
    {
      v42 = *(_QWORD *)(v87 + 8 * v41);
      if (v42)
        goto LABEL_13;
      if ((uint64_t)(v30 + 2) >= v89)
      {
        v27 = 0;
        v37 = 1;
        ++v30;
      }
      else
      {
        v42 = *(_QWORD *)(v87 + 8 * (v30 + 2));
        if (v42)
        {
          v41 = v30 + 2;
LABEL_13:
          v27 = (v42 - 1) & v42;
          v32 = __clz(__rbit64(v42)) + (v41 << 6);
          v30 = v41;
LABEL_6:
          v33 = *(_QWORD *)(v22 + 56);
          v34 = (uint64_t *)(*(_QWORD *)(v22 + 48) + 16 * v32);
          v36 = *v34;
          v35 = v34[1];
          *(_QWORD *)v18 = v36;
          *((_QWORD *)v18 + 1) = v35;
          (*(void (**)(char *, unint64_t, uint64_t))(v92 + 16))(&v18[*(int *)(TupleTypeMetadata2 + 48)], v33 + *(_QWORD *)(v92 + 72) * v32, v23);
          v37 = 0;
          goto LABEL_7;
        }
        v41 = v30 + 3;
        if ((uint64_t)(v30 + 3) >= v89)
        {
          v27 = 0;
          v37 = 1;
          v30 += 2;
        }
        else
        {
          v42 = *(_QWORD *)(v87 + 8 * v41);
          if (v42)
            goto LABEL_13;
          while (v80 != v30)
          {
            v42 = *(_QWORD *)(v79 + 8 * v30++);
            if (v42)
            {
              v41 = v30 + 3;
              goto LABEL_13;
            }
          }
          v27 = 0;
          v37 = 1;
          v30 = v78;
        }
      }
    }
LABEL_7:
    v38 = *(_QWORD *)(TupleTypeMetadata2 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56))(v18, v37, 1, TupleTypeMetadata2);
    (*(void (**)(char *, char *, uint64_t))(v90 + 32))(v21, v18, v91);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v21, 1, TupleTypeMetadata2) == 1)
      break;
    v40 = *(_QWORD *)v21;
    v39 = *((_QWORD *)v21 + 1);
    (*(void (**)(char *, char *, uint64_t))(v92 + 32))(v14, &v21[*(int *)(TupleTypeMetadata2 + 48)], v23);
    type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for SpatialEventType);
    if ((swift_dynamicCast() & 1) != 0)
    {
      outlined init with take of ScrollStateRequest(v95, (uint64_t)v97);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        v43 = v88;
      else
        v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v88[2] + 1, 1, v88);
      v45 = v43[2];
      v44 = v43[3];
      v46 = (_QWORD *)(v45 + 1);
      if (v45 >= v44 >> 1)
      {
        v88 = (_QWORD *)(v45 + 1);
        v77 = v45;
        v58 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v44 > 1), v45 + 1, 1, v43);
        v46 = v88;
        v45 = v77;
        v43 = v58;
      }
      v43[2] = v46;
      v88 = v43;
      v47 = &v43[2 * v45];
      v47[4] = v40;
      v47[5] = v39;
      v49 = v98;
      v48 = v99;
      __swift_project_boxed_opaque_existential_1(v97, v98);
      v50 = (*(double (**)(uint64_t, uint64_t))(v48 + 16))(v49, v48);
      v52 = v51;
      v53 = v100;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v53[2] + 1, 1, v53);
      v55 = v53[2];
      v54 = v53[3];
      v56 = v55 + 1;
      if (v55 >= v54 >> 1)
      {
        v77 = v55 + 1;
        v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v54 > 1), v55 + 1, 1, v53);
        v56 = v77;
        v53 = v59;
      }
      v53[2] = v56;
      v57 = (double *)&v53[2 * v55];
      v57[4] = v50;
      *((_QWORD *)v57 + 5) = v52;
      v100 = v53;
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v97);
    }
    else
    {
      v96 = 0;
      memset(v95, 0, sizeof(v95));
      result = outlined destroy of SpatialEventType?((uint64_t)v95);
    }
  }
  swift_release();
  if (v100[2])
  {
    v82(&v100);
    v90 = v88[2];
    if (v90)
    {
      v87 = v23;
      v60 = (void (*)(_QWORD))v100;
      v89 = v100[2];
      swift_bridgeObjectRetain();
      result = swift_bridgeObjectRetain();
      v61 = 0;
      v62 = 0;
      v63 = v86;
      v64 = v92;
      v82 = (void (*)(_QWORD **))v60;
      do
      {
        if (v89 == v62)
          break;
        if (v62 >= *((_QWORD *)v60 + 2))
          goto LABEL_46;
        v65 = v88[v61 + 5];
        v66 = *(double *)((char *)v60 + v61 * 8 + 32);
        v67 = *(double *)((char *)v60 + v61 * 8 + 40);
        v68 = *v63;
        v91 = v88[v61 + 4];
        v97[0] = v91;
        v97[1] = v65;
        v69 = lazy protocol witness table accessor for type EventID and conformance EventID();
        v70 = v85;
        v71 = v87;
        MEMORY[0x23B7C5A4C](v97, v68, &type metadata for EventID, v87, v69);
        result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v64 + 48))(v70, 1, v71);
        if ((_DWORD)result == 1)
          goto LABEL_47;
        ++v62;
        (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v83, v70, v71);
        type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for SpatialEventType);
        swift_dynamicCast();
        v72 = v98;
        v73 = v99;
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v97, v98);
        v74 = v72;
        v64 = v92;
        (*(void (**)(uint64_t, uint64_t, double, double))(v73 + 48))(v74, v73, v66, v67);
        outlined init with copy of AnyTrackedValue((uint64_t)v97, (uint64_t)v95);
        v75 = v84;
        swift_dynamicCast();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v75, 0, 1, v71);
        v93 = v91;
        v94 = v65;
        type metadata accessor for Dictionary();
        v76 = v86;
        Dictionary.subscript.setter();
        result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v97);
        v61 += 2;
        v63 = v76;
        v60 = (void (*)(_QWORD))v82;
      }
      while (v90 != v62);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void SpatialEventType.kind.getter(_BYTE *a1@<X8>)
{
  SpatialEventType.kind.getter(a1);
}

{
  *a1 = 3;
}

void SpatialEvent.Kind.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static SpatialEvent.Kind.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int SpatialEvent.Kind.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void SpatialEvent.phase.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *SpatialEvent.phase.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*SpatialEvent.phase.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double SpatialEvent.timestamp.getter@<D0>(double *a1@<X8>)
{
  uint64_t v1;
  double result;

  result = *(double *)(v1 + 8);
  *a1 = result;
  return result;
}

double SpatialEvent.timestamp.setter(double *a1)
{
  uint64_t v1;
  double result;

  result = *a1;
  *(double *)(v1 + 8) = *a1;
  return result;
}

uint64_t (*SpatialEvent.timestamp.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t SpatialEvent.binding.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
  return swift_retain();
}

uint64_t SpatialEvent.binding.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_release();
  *(_QWORD *)(v1 + 16) = v2;
  return result;
}

uint64_t (*SpatialEvent.binding.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void SpatialEvent.kind.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 24);
}

_BYTE *SpatialEvent.kind.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 24) = *result;
  return result;
}

uint64_t (*SpatialEvent.kind.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double SpatialEvent.globalLocation.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

void SpatialEvent.globalLocation.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 32) = a1;
  *(double *)(v2 + 40) = a2;
}

uint64_t (*SpatialEvent.globalLocation.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double SpatialEvent.location.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 48);
}

void SpatialEvent.location.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 48) = a1;
  *(double *)(v2 + 56) = a2;
}

uint64_t (*SpatialEvent.location.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double SpatialEvent.radius.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 64);
}

void SpatialEvent.radius.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 64) = a1;
}

uint64_t (*SpatialEvent.radius.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t SpatialEvent.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t result;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;

  v8 = *(_QWORD *)(a3 + 8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v8 + 8))(&v22, a2, v8);
  v9 = v22;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v8 + 16))(&v21, a2, v8);
  v10 = v21;
  v11 = (*(double (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  v13 = v12;
  v14 = (*(double (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
  v16 = v15;
  v17 = (*(double (**)(uint64_t, uint64_t))(a3 + 64))(a2, a3);
  (*(void (**)(char *__return_ptr, uint64_t, uint64_t))(a3 + 72))(&v20, a2, a3);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  v19 = v20;
  *(_BYTE *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v10;
  *(_QWORD *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 24) = v19;
  *(double *)(a4 + 32) = v11;
  *(_QWORD *)(a4 + 40) = v13;
  *(double *)(a4 + 48) = v14;
  *(_QWORD *)(a4 + 56) = v16;
  *(double *)(a4 + 64) = v17;
  return result;
}

uint64_t SpatialEvent.init(_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v27;
  uint64_t v28;
  uint64_t v29;

  v5 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)(v4 + 8) + 8))(&v29, v5);
  v6 = v29;
  v8 = a1[3];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)(v7 + 8) + 16))(&v28, v8);
  v9 = v28;
  v10 = a1[3];
  v11 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v10);
  v12 = (*(double (**)(uint64_t, uint64_t))(v11 + 16))(v10, v11);
  v14 = v13;
  v15 = a1[3];
  v16 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v15);
  v17 = (*(double (**)(uint64_t, uint64_t))(v16 + 40))(v15, v16);
  v19 = v18;
  v20 = a1[3];
  v21 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v20);
  v22 = (*(double (**)(uint64_t, uint64_t))(v21 + 64))(v20, v21);
  v23 = a1[3];
  v24 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v23);
  (*(void (**)(char *__return_ptr, uint64_t, uint64_t))(v24 + 72))(&v27, v23, v24);
  v25 = v27;
  *(_BYTE *)a2 = v6;
  *(_QWORD *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 24) = v25;
  *(double *)(a2 + 32) = v12;
  *(_QWORD *)(a2 + 40) = v14;
  *(double *)(a2 + 48) = v17;
  *(_QWORD *)(a2 + 56) = v19;
  *(double *)(a2 + 64) = v22;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t SpatialEvent.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _BYTE v11[8];
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18[2];
  uint64_t v19;
  _BYTE v20[40];

  outlined init with copy of AnyTrackedValue(a1, (uint64_t)v11);
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for EventType);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for SpatialEventType);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v20);
    outlined init with copy of AnyTrackedValue((uint64_t)v20, (uint64_t)v18);
    SpatialEvent.init(_:)(v18, (uint64_t)v11);
    __swift_destroy_boxed_opaque_existential_1(a1);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
    v6 = v12;
    v5 = v13;
    v7 = v14;
    v8 = v15;
    v9 = v16;
    v10 = v17;
    *(_QWORD *)a2 = v11[0];
    *(_QWORD *)(a2 + 8) = v6;
  }
  else
  {
    v19 = 0;
    memset(v18, 0, sizeof(v18));
    __swift_destroy_boxed_opaque_existential_1(a1);
    result = outlined destroy of SpatialEventType?((uint64_t)v18);
    v8 = 0uLL;
    v7 = 0;
    v10 = 0;
    *(_OWORD *)a2 = 0u;
    v5 = 1;
    v9 = 0uLL;
  }
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v7;
  *(_OWORD *)(a2 + 32) = v8;
  *(_OWORD *)(a2 + 48) = v9;
  *(_QWORD *)(a2 + 64) = v10;
  return result;
}

BOOL specialized static SpatialEvent.== infix(_:_:)(double *a1, double *a2)
{
  _BOOL8 result;
  uint64_t v4;
  int v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  int v12;

  result = 0;
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2 || a1[1] != a2[1])
    return result;
  v4 = *((_QWORD *)a1 + 2);
  v5 = *((unsigned __int8 *)a1 + 24);
  v7 = a1[4];
  v6 = a1[5];
  v9 = a1[6];
  v8 = a1[7];
  v10 = a1[8];
  v11 = *((_QWORD *)a2 + 2);
  v12 = *((unsigned __int8 *)a2 + 24);
  if (!v4)
  {
    if (!v11)
      goto LABEL_8;
LABEL_12:
    swift_release();
    return 0;
  }
  if (!v11)
  {
    swift_retain();
    goto LABEL_12;
  }
  if (v4 != v11)
    return 0;
LABEL_8:
  if (v5 == 3)
  {
    result = 0;
    if (v12 != 3)
      return result;
    goto LABEL_16;
  }
  if (v12 == 3)
    return 0;
  result = 0;
  if (v5 != v12)
    return result;
LABEL_16:
  if (v7 == a2[4] && v6 == a2[5] && v9 == a2[6] && v8 == a2[7])
    return v10 == a2[8];
  return result;
}

unint64_t lazy protocol witness table accessor for type SpatialEvent.Kind and conformance SpatialEvent.Kind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialEvent.Kind and conformance SpatialEvent.Kind;
  if (!lazy protocol witness table cache variable for type SpatialEvent.Kind and conformance SpatialEvent.Kind)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SpatialEvent.Kind, &type metadata for SpatialEvent.Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialEvent.Kind and conformance SpatialEvent.Kind);
  }
  return result;
}

uint64_t dispatch thunk of SpatialEventType.globalLocation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of SpatialEventType.globalLocation.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of SpatialEventType.globalLocation.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of SpatialEventType.location.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of SpatialEventType.location.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of SpatialEventType.location.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of SpatialEventType.radius.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of SpatialEventType.kind.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t initializeWithCopy for SpatialEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SpatialEvent(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for SpatialEvent(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for SpatialEvent(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 72))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SpatialEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 72) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SpatialEvent()
{
  return &type metadata for SpatialEvent;
}

uint64_t storeEnumTagSinglePayload for SpatialEvent.Kind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_234ECED18 + 4 * byte_2352AE355[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_234ECED4C + 4 * asc_2352AE350[v4]))();
}

uint64_t sub_234ECED4C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234ECED54(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234ECED5CLL);
  return result;
}

uint64_t sub_234ECED68(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234ECED70);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_234ECED74(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234ECED7C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SpatialEvent.Kind()
{
  return &type metadata for SpatialEvent.Kind;
}

uint64_t specialized defaultConvertEventLocations<A>(_:converter:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  double *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Swift::UInt v37;
  Swift::UInt v38;
  double v39;
  double v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v46;
  char v47;
  unint64_t v48;
  uint64_t v49;
  _BOOL8 v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  char v54;
  Swift::UInt *v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t result;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  __int128 v66[2];
  uint64_t v67;
  __int128 v68[2];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  _QWORD v73[2];
  __int128 v74;
  uint64_t v75;
  _QWORD *v76;

  v64 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v76 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v2 = *a1;
  v62 = *a1 + 64;
  v3 = 1 << *(_BYTE *)(*a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(*a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  v7 = 0;
  while (1)
  {
    if (v5)
    {
      v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v9 = v8 | (v7 << 6);
LABEL_6:
      v10 = *(_QWORD *)(v2 + 56);
      v11 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v9);
      v13 = *v11;
      v12 = v11[1];
      *(_QWORD *)&v69 = v13;
      *((_QWORD *)&v69 + 1) = v12;
      outlined init with copy of AnyTrackedValue(v10 + 40 * v9, (uint64_t)&v70);
      goto LABEL_13;
    }
    v14 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      outlined release of ViewTransform(a2);
      result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    if (v14 >= v6)
    {
      v16 = v7;
    }
    else
    {
      v15 = *(_QWORD *)(v62 + 8 * v14);
      if (v15)
        goto LABEL_10;
      v16 = v7 + 1;
      if (v7 + 2 < v6)
      {
        v15 = *(_QWORD *)(v62 + 8 * (v7 + 2));
        if (v15)
        {
          v14 = v7 + 2;
LABEL_10:
          v5 = (v15 - 1) & v15;
          v9 = __clz(__rbit64(v15)) + (v14 << 6);
          v7 = v14;
          goto LABEL_6;
        }
        v16 = v7 + 2;
        if (v7 + 3 < v6)
        {
          v15 = *(_QWORD *)(v62 + 8 * (v7 + 3));
          if (v15)
          {
            v14 = v7 + 3;
            goto LABEL_10;
          }
          v14 = v7 + 4;
          v16 = v7 + 3;
          if (v7 + 4 < v6)
          {
            v15 = *(_QWORD *)(v62 + 8 * v14);
            if (v15)
              goto LABEL_10;
            while (v6 - 5 != v7)
            {
              v15 = *(_QWORD *)(v2 + 104 + 8 * v7++);
              if (v15)
              {
                v14 = v7 + 4;
                goto LABEL_10;
              }
            }
            v16 = v6 - 1;
          }
        }
      }
    }
    v5 = 0;
    v72 = 0;
    v70 = 0u;
    v71 = 0u;
    v7 = v16;
    v69 = 0u;
LABEL_13:
    outlined init with take of (key: EventID, value: EventType)?((uint64_t)&v69, (uint64_t)v73);
    v17 = v73[0];
    if (!v73[0])
      break;
    v18 = v73[1];
    outlined init with take of ScrollStateRequest(&v74, (uint64_t)v68);
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for EventType);
    type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for SpatialEventType);
    if ((swift_dynamicCast() & 1) != 0)
    {
      outlined init with take of ScrollStateRequest(v66, (uint64_t)&v69);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        v19 = v64;
      else
        v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v64[2] + 1, 1, v64);
      v21 = v19[2];
      v20 = v19[3];
      if (v21 >= v20 >> 1)
        v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v21 + 1, 1, v19);
      v19[2] = v21 + 1;
      v64 = v19;
      v22 = &v19[2 * v21];
      v22[4] = v17;
      v22[5] = v18;
      v23 = *((_QWORD *)&v70 + 1);
      v24 = v71;
      __swift_project_boxed_opaque_existential_1(&v69, *((uint64_t *)&v70 + 1));
      v25 = (*(double (**)(uint64_t, uint64_t))(v24 + 16))(v23, v24);
      v27 = v26;
      v28 = v76;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
      v30 = v28[2];
      v29 = v28[3];
      if (v30 >= v29 >> 1)
        v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v29 > 1), v30 + 1, 1, v28);
      v28[2] = v30 + 1;
      v31 = (double *)&v28[2 * v30];
      v31[4] = v25;
      *((_QWORD *)v31 + 5) = v27;
      v76 = v28;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v69);
    }
    else
    {
      v67 = 0;
      memset(v66, 0, sizeof(v66));
      outlined destroy of SpatialEventType?((uint64_t)v66);
    }
  }
  swift_release();
  if (v76[2])
  {
    closure #2 in EventListenerPhase.updateValue()((uint64_t)&v76, a2);
    v63 = v64[2];
    if (v63)
    {
      v32 = v76;
      v61 = v76[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v33 = 0;
      v34 = 0;
      while (1)
      {
        if (v61 == v34)
        {
LABEL_58:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          break;
        }
        if (v34 >= v32[2])
          goto LABEL_61;
        v36 = *a1;
        if (!*(_QWORD *)(*a1 + 16))
          goto LABEL_62;
        v37 = v64[v33 + 4];
        v38 = v64[v33 + 5];
        v39 = *(double *)&v32[v33 + 4];
        v40 = *(double *)&v32[v33 + 5];
        v41 = specialized __RawDictionaryStorage.find<A>(_:)(v37, v38);
        if ((v42 & 1) == 0)
          goto LABEL_63;
        outlined init with copy of AnyTrackedValue(*(_QWORD *)(v36 + 56) + 40 * v41, (uint64_t)v68);
        outlined init with take of ScrollStateRequest(v68, (uint64_t)&v69);
        type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for EventType);
        type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for SpatialEventType);
        swift_dynamicCast();
        v43 = *((_QWORD *)&v74 + 1);
        v44 = v75;
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v73, *((uint64_t *)&v74 + 1));
        (*(void (**)(uint64_t, uint64_t, double, double))(v44 + 48))(v43, v44, v39, v40);
        outlined init with copy of AnyTrackedValue((uint64_t)v73, (uint64_t)v68);
        swift_dynamicCast();
        outlined init with take of ScrollStateRequest(&v69, (uint64_t)v66);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v46 = (_QWORD *)*a1;
        *a1 = 0x8000000000000000;
        v48 = specialized __RawDictionaryStorage.find<A>(_:)(v37, v38);
        v49 = v46[2];
        v50 = (v47 & 1) == 0;
        v51 = v49 + v50;
        if (__OFADD__(v49, v50))
          goto LABEL_64;
        v52 = v47;
        if (v46[3] >= v51)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            if ((v47 & 1) == 0)
              goto LABEL_54;
          }
          else
          {
            specialized _NativeDictionary.copy()();
            if ((v52 & 1) == 0)
              goto LABEL_54;
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v51, isUniquelyReferenced_nonNull_native);
          v53 = specialized __RawDictionaryStorage.find<A>(_:)(v37, v38);
          if ((v52 & 1) != (v54 & 1))
            goto LABEL_66;
          v48 = v53;
          if ((v52 & 1) == 0)
          {
LABEL_54:
            v46[(v48 >> 6) + 8] |= 1 << v48;
            v55 = (Swift::UInt *)(v46[6] + 16 * v48);
            *v55 = v37;
            v55[1] = v38;
            outlined init with take of ScrollStateRequest(v66, v46[7] + 40 * v48);
            v56 = v46[2];
            v57 = __OFADD__(v56, 1);
            v58 = v56 + 1;
            if (v57)
              goto LABEL_65;
            v46[2] = v58;
            goto LABEL_42;
          }
        }
        v35 = v46[7] + 40 * v48;
        __swift_destroy_boxed_opaque_existential_1(v35);
        outlined init with take of ScrollStateRequest(v66, v35);
LABEL_42:
        ++v34;
        *a1 = (uint64_t)v46;
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
        v33 += 2;
        if (v63 == v34)
          goto LABEL_58;
      }
    }
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unint64_t v10;
  char v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *i;
  int v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unint64_t v29;
  int v30;
  __int16 v31;
  int v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)a1;
  v27 = *(_DWORD *)(a1 + 8);
  v29 = v10;
  v11 = PreferenceKeys.contains<A>(_:)(a5, a5, a6, a4);
  if ((v11 & 1) != 0)
  {
    v12 = a3();
    LOBYTE(v29) = 0;
    PreferencesOutputs.subscript.setter(v12, a5, a5, a6);
  }
  else
  {
    v12 = 0;
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t))(a6 + 40))(a5, a6) & 1) != 0)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<HostPreferencesKey>, (uint64_t)&type metadata for HostPreferencesKey, (uint64_t)&protocol witness table for HostPreferencesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
    v14 = *(_QWORD *)(v10 + 16);
    if (v14)
    {
      v15 = v13;
      for (i = (_QWORD *)(v10 + 32); *i != v13; i += 2)
      {
        if (!--v14)
          return;
      }
      if ((v11 & 1) == 0)
        v12 = a3();
      v17 = *(_DWORD *)(v6 + 8);
      v29 = *(_QWORD *)v6;
      v30 = v17;
      v18 = PreferencesOutputs.subscript.getter(v15);
      v19 = *MEMORY[0x24BE096C0];
      if ((v18 & 0x100000000) == 0)
        v19 = v18;
      ++static HostPreferencesKey.nodeId;
      v29 = __PAIR64__(v27, v12);
      v30 = v19;
      v31 = 0;
      v32 = 0;
      v33 = static HostPreferencesKey.nodeId;
      MEMORY[0x24BDAC7A8](v18);
      v25 = type metadata accessor for HostPreferencesWriter(0, a5, a6, v20);
      v26 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for HostPreferencesWriter<A>, v25);
      type metadata accessor for Attribute<PreferenceList>();
      _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v29, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_6, (uint64_t)&v24, v25, MEMORY[0x24BEE4078], v21, MEMORY[0x24BEE40A8], v22);
      LOBYTE(v29) = 0;
      PreferencesOutputs.subscript.setter(v28, v15, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v23);
    }
  }
}

uint64_t _PreferenceWritingModifier.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, v1, AssociatedTypeWitness);
}

uint64_t _PreferenceWritingModifier.value.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 40))(v1, a1, AssociatedTypeWitness);
}

uint64_t (*_PreferenceWritingModifier.value.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _PreferenceWritingModifier.init(key:value:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a2, a1, AssociatedTypeWitness);
}

double static _PreferenceWritingModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, double *a6@<X8>)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double result;
  int v17;
  int v19;
  _BYTE v21[16];
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  int v44;

  v19 = *a1;
  v8 = *((_DWORD *)a2 + 2);
  v9 = a2[2];
  v11 = a2[5];
  v10 = a2[6];
  v12 = *((_DWORD *)a2 + 20);
  v36 = *a2;
  v37 = v8;
  v39 = *(_OWORD *)(a2 + 3);
  v38 = v9;
  v40 = v11;
  v41 = v10;
  v42 = *(_OWORD *)(a2 + 7);
  v17 = v42;
  v43 = a2[9];
  v44 = v12;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferencesInputs.remove<A>(_:)(a4, a4, a5, v13);
  v25 = v36;
  v26 = v37;
  v27 = v9;
  v28 = v39;
  v29 = v11;
  v30 = v10;
  v31 = v42;
  v32 = v43;
  v33 = v44;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v14 = swift_bridgeObjectRetain();
  a3(&v34, v14, &v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v25 = v10;
  v26 = v17;
  v22 = a4;
  v23 = a5;
  v24 = v19;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)((uint64_t)&v25, v15, partial apply for implicit closure #1 in static _PreferenceWritingModifier._makeView(modifier:inputs:body:), (uint64_t)v21, a4, a5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  *(_QWORD *)a6 = v34;
  result = v35;
  a6[1] = v35;
  return result;
}

uint64_t implicit closure #1 in static _PreferenceWritingModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  if (*(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64))
    closure #1 in implicit closure #1 in static _PreferenceWritingModifier._makeView(modifier:inputs:body:)(1, a2, a3, v5);
  return AGGraphCreateOffsetAttribute2();
}

uint64_t closure #1 in implicit closure #1 in static _PreferenceWritingModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  uint64_t AssociatedTypeWitness;
  uint64_t v10;

  v8[2] = type metadata accessor for _PreferenceWritingModifier(0, a2, a3, a4);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v8, AssociatedTypeWitness, MEMORY[0x24BEE4078], v5, MEMORY[0x24BEE40A8], v6);
  return v10;
}

uint64_t static _PreferenceWritingModifier._makeViewList(modifier:inputs:body:)(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char v28;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  char v43;
  int v44;

  v8 = *a1;
  v9 = *(_QWORD *)a2;
  v10 = *(_DWORD *)(a2 + 8);
  v11 = *(_QWORD *)(a2 + 16);
  v12 = *(_DWORD *)(a2 + 24);
  v21 = *(_DWORD *)(a2 + 28);
  v22 = *(_DWORD *)(a2 + 32);
  v23 = *(_DWORD *)(a2 + 36);
  v13 = *(_QWORD *)(a2 + 56);
  v24 = *(_QWORD *)(a2 + 40);
  v25 = *(_QWORD *)(a2 + 48);
  v26 = *(_DWORD *)(a2 + 64);
  v27 = *(_QWORD *)(a2 + 72);
  v28 = *(_BYTE *)(a2 + 80);
  if (one-time initialization token for introduced != -1)
    swift_once();
  v14 = static _SemanticFeature_v2_3.introduced;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FAB4 & 1) != 0)
    v16 = dyld_program_sdk_at_least();
  else
    v16 = static Semantics.forced >= v14;
  v17 = type metadata accessor for _PreferenceWritingModifier(0, a5, a6, v15);
  if (v16
    && (v13 & 0x400) != 0
    && (type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for _PreferenceWritingModifier<PreferredColorSchemeKey>, (uint64_t)&type metadata for PreferredColorSchemeKey, (uint64_t)&protocol witness table for PreferredColorSchemeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _PreferenceWritingModifier), swift_dynamicCastMetatype())&& (LODWORD(v31) = v8, type metadata accessor for _GraphValue(0, v17, v18, v19), type metadata accessor for _GraphValue<_PreferenceWritingModifier<PreferredColorSchemeKey>>(0), (swift_dynamicCast() & 1) != 0))
  {
    v31 = v9;
    v32 = v10;
    v33 = v11;
    v34 = v12;
    v35 = v21;
    v36 = v22;
    v37 = v23;
    v38 = v24;
    v39 = v25;
    v40 = v13;
    v41 = v26;
    v42 = v27;
    v43 = v28;
    return static _PreferenceWritingModifier<>.makePreviewColorSchemeList(modifier:inputs:body:)(&v44, &v31, a3);
  }
  else
  {
    v44 = v8;
    v31 = v9;
    v32 = v10;
    v33 = v11;
    v34 = v12;
    v35 = v21;
    v36 = v22;
    v37 = v23;
    v38 = v24;
    v39 = v25;
    v40 = v13;
    v41 = v26;
    v42 = v27;
    v43 = v28;
    return static ViewModifier.makeMultiViewList(modifier:inputs:body:)(&v44, (uint64_t)&v31, (void (*)(void))a3, a4, v17, (uint64_t)&protocol witness table for _PreferenceWritingModifier<A>);
  }
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _PreferenceWritingModifier<A>@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a4@<X4>, double *a5@<X8>)
{
  return static _PreferenceWritingModifier._makeView(modifier:inputs:body:)(a1, a2, a3, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a5);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _PreferenceWritingModifier<A>(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  return static _PreferenceWritingModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24));
}

uint64_t static _PreferenceWritingModifier<>.== infix(_:_:)()
{
  swift_getAssociatedTypeWitness();
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> _PreferenceWritingModifier<A>()
{
  return static _PreferenceWritingModifier<>.== infix(_:_:)();
}

uint64_t View.preference<A>(key:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v22;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v14 = (char *)&v22 - v13;
  v16 = type metadata accessor for _PreferenceWritingModifier(0, a4, a6, v15);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v22 - v19;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))(v14, a2, AssociatedTypeWitness, v18);
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v20, v14, AssociatedTypeWitness);
  View.modifier<A>(_:)(v20, a3, v16, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v20, v16);
}

uint64_t HostPreferencesWriter.updateValue()(uint64_t a1)
{
  int *v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  char v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t *Value;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t OutputValue;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;

  v2 = v1;
  v49 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = type metadata accessor for PreferenceList.Value(0, AssociatedTypeWitness, v6, v7);
  v42 = *(_QWORD *)(v8 - 8);
  v43 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v41 = (uint64_t)&v39 - v9;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v45 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v39 - v14;
  v44 = *v1;
  v16 = *((unsigned __int8 *)v1 + 12);
  if (*MEMORY[0x24BE096C0] == v1[2])
  {
    v19 = 0;
    v18 = *((_BYTE *)v1 + 13) ^ 1;
    v20 = 1;
  }
  else
  {
    AGGraphGetValue();
    v18 = v17 & 1;
    v19 = swift_retain();
    v20 = 0;
  }
  v47 = v19;
  v48 = v18;
  *((_BYTE *)v1 + 13) = v20;
  Value = (uint64_t *)AGGraphGetValue();
  if ((v23 & 1) == 0 || (v46 = *Value, v24 = PreferenceKeys.contains<A>(_:)(v4, v4, v3, v22), v16 == (v24 & 1)))
  {
    if (!v16)
      goto LABEL_15;
  }
  else
  {
    *((_BYTE *)v1 + 12) = v24 & 1;
    v48 = 1;
    if ((v24 & 1) == 0)
      goto LABEL_16;
  }
  v39 = v4;
  v40 = v3;
  v25 = *(int *)(TupleTypeMetadata2 + 48);
  v26 = AGGraphGetValue();
  v28 = v27;
  v29 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
  v30(v15, v26, AssociatedTypeWitness);
  v15[v25] = v28 & 1;
  v31 = *(int *)(TupleTypeMetadata2 + 48);
  v30(v12, (uint64_t)v15, AssociatedTypeWitness);
  v12[v31] = v28 & 1;
  (*(void (**)(char *, uint64_t))(v29 + 8))(v12, AssociatedTypeWitness);
  if ((v28 & 1) != 0)
  {
    ++v2[4];
    v48 = 1;
    v33 = v39;
    v32 = v40;
  }
  else
  {
    v33 = v39;
    v32 = v40;
    if (v48 != 1)
      goto LABEL_14;
  }
  v34 = merge32(_:_:)(v2[5], v2[4]);
  v30(v12, (uint64_t)v15, AssociatedTypeWitness);
  LODWORD(v46) = v34;
  v35 = v41;
  PreferenceList.Value.init(value:seed:)((uint64_t)v12, (int *)&v46, AssociatedTypeWitness, v41);
  specialized PreferenceList.subscript.setter(v35, v33, v33, v32);
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v35, v43);
LABEL_14:
  (*(void (**)(char *, uint64_t))(v45 + 8))(v15, TupleTypeMetadata2);
LABEL_15:
  if (v48 == 1)
  {
LABEL_16:
    v36 = v47;
LABEL_18:
    v46 = v36;
    AGGraphSetOutputValue();
    return swift_release();
  }
  OutputValue = AGGraphGetOutputValue();
  v36 = v47;
  if (!OutputValue)
    goto LABEL_18;
  return swift_release();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance HostPreferencesWriter<A>()
{
  return specialized HostPreferencesWriter.description.getter();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance HostPreferencesWriter<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for HostPreferencesWriter<A>, a1);
  return static AsyncAttribute.flags.getter();
}

double static TruePreferenceWritingModifier._makeView(modifier:inputs:body:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, _OWORD *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, double *a6@<X8>)
{
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  double result;
  _QWORD v15[4];
  uint64_t v16;
  int v17;
  _OWORD v18[5];
  int v19;
  uint64_t v20;
  double v21;
  _OWORD v22[2];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  int v26;

  v9 = *(_OWORD *)(a2 + 48);
  v10 = *(_OWORD *)(a2 + 16);
  v23 = *(_OWORD *)(a2 + 32);
  v24 = v9;
  v11 = *(_OWORD *)(a2 + 48);
  v25 = *(_OWORD *)(a2 + 64);
  v12 = *(_OWORD *)(a2 + 16);
  v22[0] = *(_OWORD *)a2;
  v22[1] = v12;
  v18[2] = v23;
  v18[3] = v11;
  v18[4] = *(_OWORD *)(a2 + 64);
  v26 = *(_DWORD *)(a2 + 80);
  v19 = *(_DWORD *)(a2 + 80);
  v18[0] = v22[0];
  v18[1] = v10;
  a3(&v20, a1, v18);
  *(_QWORD *)&v18[0] = v24;
  DWORD2(v18[0]) = DWORD2(v24);
  v16 = v24;
  v17 = DWORD2(v24);
  v15[2] = v22;
  outlined retain of LinearGradient((uint64_t)v18);
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)((uint64_t)&v16, v13, partial apply for implicit closure #1 in static TruePreferenceWritingGestureModifier._makeGesture(modifier:inputs:body:), (uint64_t)v15, a4, a5);
  swift_bridgeObjectRelease();
  *(_QWORD *)a6 = v20;
  result = v21;
  a6[1] = v21;
  return result;
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance TruePreferenceWritingModifier<A>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, _OWORD *)@<X2>, uint64_t a4@<X4>, double *a5@<X8>)
{
  return static TruePreferenceWritingModifier._makeView(modifier:inputs:body:)(a1, a2, a3, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a5);
}

uint64_t View.truePreference<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  v7 = type metadata accessor for TruePreferenceWritingModifier(0, a3, a5, a4);
  return View.modifier<A>(_:)(v7, a2, v7, a4);
}

double static TruePreferenceWritingGestureModifier._makeGesture(modifier:inputs:body:)@<D0>(_OWORD *a1@<X1>, void (*a2)(_QWORD *__return_ptr, _OWORD *)@<X2>, uint64_t a3@<X4>, uint64_t a4@<X6>, uint64_t a5@<X8>)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  double result;
  _QWORD v19[4];
  uint64_t v20;
  int v21;
  _OWORD v22[6];
  _OWORD v23[2];
  _QWORD v24[2];
  int v25;
  _OWORD v26[2];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _OWORD v31[2];

  v8 = a1[5];
  v9 = a1[3];
  v29 = a1[4];
  v30 = v8;
  v10 = a1[5];
  v31[0] = a1[6];
  *(_OWORD *)((char *)v31 + 12) = *(_OWORD *)((char *)a1 + 108);
  v11 = a1[1];
  v26[0] = *a1;
  v26[1] = v11;
  v12 = a1[3];
  v14 = *a1;
  v13 = a1[1];
  v27 = a1[2];
  v28 = v12;
  v22[4] = v29;
  v22[5] = v10;
  v23[0] = a1[6];
  *(_OWORD *)((char *)v23 + 12) = *(_OWORD *)((char *)a1 + 108);
  v22[0] = v14;
  v22[1] = v13;
  v22[2] = v27;
  v22[3] = v9;
  a2(v24, v22);
  *(_QWORD *)&v22[0] = *(_QWORD *)&v31[0];
  DWORD2(v22[0]) = DWORD2(v31[0]);
  v20 = *(_QWORD *)&v31[0];
  v21 = DWORD2(v31[0]);
  v19[2] = v26;
  outlined retain of LinearGradient((uint64_t)v22);
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)((uint64_t)&v20, v15, partial apply for implicit closure #1 in static TruePreferenceWritingGestureModifier._makeGesture(modifier:inputs:body:), (uint64_t)v19, a3, a4);
  swift_bridgeObjectRelease();
  v16 = v24[1];
  v17 = v25;
  result = *(double *)v24;
  *(_QWORD *)a5 = v24[0];
  *(_QWORD *)(a5 + 8) = v16;
  *(_DWORD *)(a5 + 16) = v17;
  return result;
}

double protocol witness for static GestureModifier._makeGesture(modifier:inputs:body:) in conformance TruePreferenceWritingGestureModifier<A, B>@<D0>(_OWORD *a1@<X1>, void (*a2)(_QWORD *__return_ptr, _OWORD *)@<X2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  return static TruePreferenceWritingGestureModifier._makeGesture(modifier:inputs:body:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 32), a4);
}

void Gesture.truePreference<A>(_:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = type metadata accessor for TruePreferenceWritingGestureModifier(0, a2, AssociatedTypeWitness, a4);
  v12 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TruePreferenceWritingGestureModifier<A, B>, v11);
  Gesture.modifier<A>(_:)(v12, a1, v11, a3, v12, a5);
}

uint64_t type metadata accessor for HostPreferencesWriter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HostPreferencesWriter);
}

uint64_t partial apply for implicit closure #1 in static _PreferenceWritingModifier._makeView(modifier:inputs:body:)()
{
  uint64_t v0;

  return implicit closure #1 in static _PreferenceWritingModifier._makeView(modifier:inputs:body:)(*(unsigned int *)(v0 + 32), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t type metadata accessor for _PreferenceWritingModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _PreferenceWritingModifier);
}

void type metadata accessor for _GraphValue<_PreferenceWritingModifier<PreferredColorSchemeKey>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for _GraphValue<_PreferenceWritingModifier<PreferredColorSchemeKey>>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<PreferredColorSchemeKey>, (uint64_t)&type metadata for PreferredColorSchemeKey, (uint64_t)&protocol witness table for PreferredColorSchemeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _PreferenceWritingModifier);
    v5 = type metadata accessor for _GraphValue(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<_PreferenceWritingModifier<PreferredColorSchemeKey>>);
  }
}

uint64_t type metadata accessor for TruePreferenceWritingModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TruePreferenceWritingModifier);
}

uint64_t type metadata accessor for TruePreferenceWritingGestureModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TruePreferenceWritingGestureModifier);
}

uint64_t type metadata completion function for _PreferenceWritingModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _PreferenceWritingModifier(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (v6 <= 7 && *(_QWORD *)(v5 + 64) <= 0x18uLL && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  }
  else
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~v6));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for _PreferenceWritingModifier(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

uint64_t initializeWithCopy for _PreferenceWritingModifier(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithCopy for _PreferenceWritingModifier(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 24))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t initializeWithTake for _PreferenceWritingModifier(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithTake for _PreferenceWritingModifier(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 40))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for _PreferenceWritingModifier(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (!a2)
    return 0;
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (a2 <= v6)
    goto LABEL_18;
  v7 = *(_QWORD *)(v5 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((a2 - v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if ((_DWORD)v6)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v6, AssociatedTypeWitness);
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if ((_DWORD)v7)
  {
    if (v7 > 3)
      LODWORD(v7) = 4;
    __asm { BR              X11 }
  }
  return (v6 + v11 + 1);
}

void storeEnumTagSinglePayload for _PreferenceWritingModifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  if (a3 <= v7)
  {
    v9 = 0;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t sub_234ED0C3C(uint64_t *a1)
{
  return get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA15ModifiedContentVyxAA16_OverlayModifierVyqd__GGAaBHPxAaBHD1__AgA0cG0HPyHCHCTm(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _PreferenceWritingModifier, (uint64_t)&protocol witness table for _PreferenceWritingModifier<A>);
}

uint64_t sub_234ED0C50(uint64_t *a1)
{
  return get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA15ModifiedContentVyxAA16_OverlayModifierVyqd__GGAaBHPxAaBHD1__AgA0cG0HPyHCHCTm(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TruePreferenceWritingModifier, (uint64_t)&protocol witness table for TruePreferenceWritingModifier<A>);
}

void sub_234ED0C64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = type metadata accessor for TruePreferenceWritingGestureModifier(255, v1, AssociatedTypeWitness, v2);
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for TruePreferenceWritingGestureModifier<A, B>, v4);
  type metadata accessor for ModifierGesture();
}

uint64_t sub_234ED0CDC(uint64_t a1)
{
  return MEMORY[0x23B7C9C04](&protocol conformance descriptor for ModifierGesture<A, B>, a1);
}

uint64_t instantiation function for generic protocol witness table for HostPreferencesWriter<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for HostPreferencesWriter<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in HostPreferencesWriter<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t partial apply for implicit closure #1 in static TruePreferenceWritingGestureModifier._makeGesture(modifier:inputs:body:)()
{
  return specialized _GraphInputs.intern<A>(_:id:)(1, 2);
}

uint64_t specialized HostPreferencesWriter.description.getter()
{
  Swift::String v0;
  _QWORD v2[2];

  strcpy((char *)v2, "Preference: ");
  v0._countAndFlagsBits = static PreferenceKey.readableName.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return v2[0];
}

uint64_t NSAttributedString.resolvableAttributeConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for ResolvableAttributeConfiguration?, type metadata accessor for ResolvableAttributeConfiguration, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v11 - v5;
  if ((uint64_t)objc_msgSend(v1, sel_length, v4) < 1)
    goto LABEL_8;
  if (one-time initialization token for updateSchedule != -1)
    swift_once();
  v7 = static NSAttributedStringKey.updateSchedule;
  objc_msgSend(v1, sel_length);
  if (!objc_msgSend(v1, sel_attribute_atIndex_effectiveRange_, v7, 0, 0))
  {
    v11 = 0u;
    v12 = 0u;
    outlined destroy of Any?((uint64_t)&v11);
LABEL_8:
    type metadata accessor for ResolvableAttributeConfiguration(0);
    return swift_storeEnumTagMultiPayload();
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined destroy of Any?((uint64_t)&v11);
  NSAttributedString.updateSchedule.getter(&v11);
  v8 = *((_QWORD *)&v12 + 1);
  __swift_project_boxed_opaque_existential_1(&v11, *((uint64_t *)&v12 + 1));
  TimelineSchedule.legacyInvalidationConfiguration.getter(v8, (uint64_t)v6);
  v9 = type metadata accessor for ResolvableAttributeConfiguration(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v6, 1, v9) == 1)
  {
    swift_storeEnumTagMultiPayload();
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for ResolvableAttributeConfiguration?, (uint64_t)type metadata accessor for ResolvableAttributeConfiguration, (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))type metadata accessor for [(_:)]);
  }
  else
  {
    outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v6, a1, type metadata accessor for ResolvableAttributeConfiguration);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
}

void ConfigurationBasedResolvableStringAttributeRepresentation.schedule.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  char *v7;

  v4 = type metadata accessor for ResolvableAttributeConfiguration.Schedule(0);
  MEMORY[0x24BDAC7A8](v4);
  v5 = type metadata accessor for ResolvableAttributeConfiguration(0);
  v6 = MEMORY[0x24BDAC7A8](v5);
  (*(void (**)(uint64_t, uint64_t, double))(a2 + 40))(a1, a2, v6);
  v7 = (char *)sub_234ED1078 + 4 * byte_2352AE6F0[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_234ED1078(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(v5 + 8) & 1) == 0)
  {
    *v4 = *(_QWORD *)v5;
    type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment(0);
    swift_storeEnumTagMultiPayload();
    outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v4, v2, type metadata accessor for ResolvableAttributeConfiguration.Schedule);
    a2 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v2, a2, 1, v3);
}

void ResolvableAttributeConfiguration.Schedule.init(config:)()
{
  uint64_t v0;
  char *v1;

  v0 = type metadata accessor for ResolvableAttributeConfiguration.Schedule(0);
  MEMORY[0x24BDAC7A8](v0);
  type metadata accessor for ResolvableAttributeConfiguration(0);
  v1 = (char *)sub_234ED11E0 + 4 * byte_2352AE6F5[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_234ED11E0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  if ((*(_BYTE *)(v3 + 8) & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v1, 1, 1, v0);
  *v2 = *(_QWORD *)v3;
  type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment(0);
  swift_storeEnumTagMultiPayload();
  outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v2, v1, type metadata accessor for ResolvableAttributeConfiguration.Schedule);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56))(v1, 0, 1, v0);
}

uint64_t type metadata accessor for ResolvableAttributeConfiguration.Schedule(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for ResolvableAttributeConfiguration.Schedule);
}

uint64_t type metadata accessor for ResolvableAttributeConfiguration(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, type metadata singleton initialization cache for ResolvableAttributeConfiguration);
}

uint64_t type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for ResolvableAttributeConfiguration.Schedule.Alignment);
}

void type metadata accessor for (interval: DateInterval, countdown: Bool)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (interval: DateInterval, countdown: Bool))
  {
    type metadata accessor for DateInterval();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (interval: DateInterval, countdown: Bool));
  }
}

void ResolvableAttributeConfiguration.isDynamic.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD);
  char *v4;
  uint64_t v5;

  v1 = type metadata accessor for ResolvableAttributeConfiguration(0);
  MEMORY[0x24BDAC7A8](v1);
  outlined init with copy of TypesettingLanguage(v0, (uint64_t)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  v4 = (char *)sub_234ED1414 + 4 * byte_2352AE6FA[swift_getEnumCaseMultiPayload()];
  __asm { BR              X11 }
}

uint64_t sub_234ED1414()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + 8) ^ 1) & 1;
}

uint64_t ResolvableAttributeConfiguration.reduce(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  uint64_t v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t (*v13)(_QWORD);
  double v14;
  char v15;
  char v16;
  double v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v3 = type metadata accessor for ResolvableAttributeConfiguration(0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (uint64_t *)((char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for (ResolvableAttributeConfiguration, ResolvableAttributeConfiguration)();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (double *)((char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = (uint64_t)v8 + *(int *)(v9 + 48);
  outlined init with copy of TypesettingLanguage(v1, (uint64_t)v8, type metadata accessor for ResolvableAttributeConfiguration);
  outlined init with copy of TypesettingLanguage(a1, v10, type metadata accessor for ResolvableAttributeConfiguration);
  if (!swift_getEnumCaseMultiPayload())
  {
    v14 = *v8;
    if (swift_getEnumCaseMultiPayload())
      goto LABEL_29;
    v15 = *((_BYTE *)v8 + 8);
    outlined destroy of TypesettingConfiguration(v1, type metadata accessor for ResolvableAttributeConfiguration);
    if ((v15 & 1) != 0)
    {
      if ((*(_BYTE *)(v10 + 8) & 1) != 0)
      {
        v16 = 1;
        v17 = 0.0;
LABEL_25:
        *(double *)v1 = v17;
        *(_BYTE *)(v1 + 8) = v16;
        return swift_storeEnumTagMultiPayload();
      }
      v17 = *(double *)v10;
      v14 = *(double *)v10;
    }
    else
    {
      v17 = *(double *)v10;
      if (*(_BYTE *)(v10 + 8))
        v17 = v14;
    }
    v16 = 0;
    if (v17 >= v14)
      v17 = v14;
    goto LABEL_25;
  }
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    outlined init with copy of TypesettingLanguage(v10, (uint64_t)v5, type metadata accessor for ResolvableAttributeConfiguration);
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      v18 = *v5;
      outlined destroy of TypesettingConfiguration(v1, type metadata accessor for ResolvableAttributeConfiguration);
      *(_QWORD *)v1 = NSCalendarUnitSmallestUnit(*(_QWORD *)v8 | v18);
      swift_storeEnumTagMultiPayload();
      v12 = v10;
      v13 = type metadata accessor for ResolvableAttributeConfiguration;
      return outlined destroy of TypesettingConfiguration(v12, v13);
    }
LABEL_12:
    v19 = swift_getEnumCaseMultiPayload();
    if (v19 != 3)
    {
      v20 = v19;
      v21 = swift_getEnumCaseMultiPayload();
      if (v21 == 3)
      {
        outlined destroy of TypesettingConfiguration(v1, type metadata accessor for ResolvableAttributeConfiguration);
        outlined init with copy of TypesettingLanguage(a1, v1, type metadata accessor for ResolvableAttributeConfiguration);
        v12 = (uint64_t)v8;
        v13 = type metadata accessor for ResolvableAttributeConfiguration;
        return outlined destroy of TypesettingConfiguration(v12, v13);
      }
      if (v20 == 2)
      {
        v22 = type metadata accessor for DateInterval();
LABEL_28:
        (*(void (**)(double *, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v8, v22);
        goto LABEL_29;
      }
      if (v21 == 2)
      {
        outlined destroy of TypesettingConfiguration(v1, type metadata accessor for ResolvableAttributeConfiguration);
        outlined init with copy of TypesettingLanguage(a1, v1, type metadata accessor for ResolvableAttributeConfiguration);
        v23 = type metadata accessor for DateInterval();
      }
      else
      {
        if (v20 == 1)
        {
          v22 = type metadata accessor for Date();
          goto LABEL_28;
        }
        if (v21 != 1)
        {
          v13 = (uint64_t (*)(_QWORD))type metadata accessor for (ResolvableAttributeConfiguration, ResolvableAttributeConfiguration);
          v12 = (uint64_t)v8;
          return outlined destroy of TypesettingConfiguration(v12, v13);
        }
        outlined destroy of TypesettingConfiguration(v1, type metadata accessor for ResolvableAttributeConfiguration);
        outlined init with copy of TypesettingLanguage(a1, v1, type metadata accessor for ResolvableAttributeConfiguration);
        v23 = type metadata accessor for Date();
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v10, v23);
      goto LABEL_5;
    }
LABEL_29:
    v13 = type metadata accessor for ResolvableAttributeConfiguration;
    v12 = v10;
    return outlined destroy of TypesettingConfiguration(v12, v13);
  }
  if (EnumCaseMultiPayload)
    goto LABEL_12;
  outlined destroy of TypesettingConfiguration(v1, type metadata accessor for ResolvableAttributeConfiguration);
  outlined init with copy of TypesettingLanguage(a1, v1, type metadata accessor for ResolvableAttributeConfiguration);
  outlined destroy of TypesettingConfiguration(v10, type metadata accessor for ResolvableAttributeConfiguration);
LABEL_5:
  v12 = (uint64_t)v8;
  v13 = type metadata accessor for ResolvableAttributeConfiguration;
  return outlined destroy of TypesettingConfiguration(v12, v13);
}

void ResolvableAttributeConfiguration.Schedule.entries(from:mode:)(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(_QWORD);
  char *v14;
  _QWORD v15[7];
  unsigned __int8 *v16;
  uint64_t v17;

  v16 = a2;
  v15[6] = a1;
  v2 = type metadata accessor for AlignedTimelineSchedule.Entries();
  MEMORY[0x24BDAC7A8](v2);
  v15[5] = (char *)v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = type metadata accessor for TimerIntervalTimelineSchedule(0);
  MEMORY[0x24BDAC7A8](v15[0]);
  v15[1] = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DateInterval();
  v15[3] = *(_QWORD *)(v5 - 8);
  v15[4] = v5;
  MEMORY[0x24BDAC7A8](v5);
  v15[2] = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TimerTimelineSchedule(0);
  MEMORY[0x24BDAC7A8](v7);
  v8 = type metadata accessor for Date();
  MEMORY[0x24BDAC7A8](v8);
  v9 = type metadata accessor for PeriodicTimelineSchedule(0);
  MEMORY[0x24BDAC7A8](v9);
  v10 = type metadata accessor for PeriodicTimelineSchedule.Entries(0);
  MEMORY[0x24BDAC7A8](v10);
  v11 = type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment(0);
  MEMORY[0x24BDAC7A8](v11);
  LODWORD(v16) = *v16;
  outlined init with copy of TypesettingLanguage(v17, (uint64_t)v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v13);
  v14 = (char *)sub_234ED1A08 + 4 * byte_2352AE6FF[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

_QWORD *sub_234ED1A08()
{
  uint64_t v0;
  double *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  long double v8;
  long double v9;
  _QWORD *v10;

  v8 = *v1;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v0, *(_QWORD *)(v7 - 128), v4);
  *(long double *)(v0 + *(int *)(v3 + 20)) = v8;
  Date.timeIntervalSince(_:)();
  fmod(v9, v8);
  static Date.+ infix(_:_:)();
  *(long double *)(v5 + *(int *)(v6 + 20)) = v8;
  outlined destroy of TypesettingConfiguration(v0, type metadata accessor for PeriodicTimelineSchedule);
  type metadata accessor for _SequenceBox<PeriodicTimelineSchedule.Entries>();
  v10 = (_QWORD *)swift_allocObject();
  outlined init with take of LocalizedStringKey.FormatArgument(v5, (uint64_t)v10 + *(_QWORD *)(*MEMORY[0x24BEE26A0] + *v10 + 16), type metadata accessor for PeriodicTimelineSchedule.Entries);
  return v10;
}

void protocol witness for TimelineSchedule.entries(from:mode:) in conformance ResolvableAttributeConfiguration.Schedule(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;

  ResolvableAttributeConfiguration.Schedule.entries(from:mode:)(a1, a2);
  *a3 = v4;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ResolvableAttributeConfiguration.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_234ED1CBC + 4 * byte_2352AE703[*v0]))(0x6C61767265746E69, 0xE800000000000000);
}

uint64_t sub_234ED1CBC()
{
  return 0x79616C6564;
}

uint64_t sub_234ED1CD0()
{
  return 0x636F6C436C6C6177;
}

uint64_t sub_234ED1CEC()
{
  return 0x6E656D6E67696C61;
}

uint64_t sub_234ED1D0C()
{
  return 0x72656D6974;
}

uint64_t sub_234ED1D20()
{
  return 0x776F64746E756F63;
}

uint64_t sub_234ED1D3C()
{
  return 0x746E4972656D6974;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ResolvableAttributeConfiguration.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized ResolvableAttributeConfiguration.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ResolvableAttributeConfiguration.CodingKeys()
{
  lazy protocol witness table accessor for type ResolvableAttributeConfiguration.CodingKeys and conformance ResolvableAttributeConfiguration.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ResolvableAttributeConfiguration.CodingKeys()
{
  lazy protocol witness table accessor for type ResolvableAttributeConfiguration.CodingKeys and conformance ResolvableAttributeConfiguration.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void ResolvableAttributeConfiguration.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(_QWORD);
  char *v11;
  _QWORD v12[7];

  v1 = type metadata accessor for DateInterval();
  v12[3] = *(_QWORD *)(v1 - 8);
  v12[4] = v1;
  MEMORY[0x24BDAC7A8](v1);
  v12[2] = (char *)v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Date();
  v12[0] = *(_QWORD *)(v3 - 8);
  v12[1] = v3;
  MEMORY[0x24BDAC7A8](v3);
  type metadata accessor for KeyedEncodingContainer<ResolvableAttributeConfiguration.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<ResolvableAttributeConfiguration.CodingKeys>, (uint64_t (*)(uint64_t, void *, unint64_t))MEMORY[0x24BEE3520]);
  v12[5] = *(_QWORD *)(v4 - 8);
  v12[6] = v4;
  MEMORY[0x24BDAC7A8](v4);
  MEMORY[0x24BDAC7A8](v5);
  MEMORY[0x24BDAC7A8](v6);
  MEMORY[0x24BDAC7A8](v7);
  v8 = type metadata accessor for ResolvableAttributeConfiguration(0);
  MEMORY[0x24BDAC7A8](v8);
  outlined init with copy of TypesettingLanguage(v0, (uint64_t)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  v11 = (char *)sub_234ED1F88 + 4 * byte_2352AE70A[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_234ED1F88()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v5 = *v1;
  v6 = *((_BYTE *)v1 + 8);
  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  lazy protocol witness table accessor for type ResolvableAttributeConfiguration.CodingKeys and conformance ResolvableAttributeConfiguration.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  *(_BYTE *)(v4 - 96) = 0;
  v7 = *(_QWORD *)(v4 - 112);
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    *(_QWORD *)(v4 - 96) = v5;
    *(_BYTE *)(v4 - 88) = v6;
    *(_BYTE *)(v4 - 65) = 1;
    type metadata accessor for GraphicsContext.ResolvedShading?(0, (unint64_t *)&lazy cache variable for type metadata for Double?);
    lazy protocol witness table accessor for type Double? and conformance <A> A?();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 120) + 8))(v3, v7);
}

uint64_t ResolvableAttributeConfiguration.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char *v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t, uint64_t);
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t *v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;

  v59 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for DateInterval?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v55 = (char *)&v51 - v5;
  v56 = type metadata accessor for DateInterval();
  v54 = *(_QWORD *)(v56 - 8);
  MEMORY[0x24BDAC7A8](v56);
  v53 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], v3);
  MEMORY[0x24BDAC7A8](v7);
  v60 = (char *)&v51 - v8;
  v9 = type metadata accessor for Date();
  v57 = *(_QWORD *)(v9 - 8);
  v58 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedEncodingContainer<ResolvableAttributeConfiguration.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<ResolvableAttributeConfiguration.CodingKeys>, (uint64_t (*)(uint64_t, void *, unint64_t))MEMORY[0x24BEE33E0]);
  v13 = v12;
  v14 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v51 - v15;
  v17 = type metadata accessor for ResolvableAttributeConfiguration(0);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (uint64_t *)((char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = a1[3];
  v61 = (uint64_t)a1;
  v21 = a1;
  v22 = v16;
  __swift_project_boxed_opaque_existential_1(v21, v20);
  lazy protocol witness table accessor for type ResolvableAttributeConfiguration.CodingKeys and conformance ResolvableAttributeConfiguration.CodingKeys();
  v23 = v62;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v23)
    goto LABEL_3;
  v52 = v11;
  v62 = v19;
  v24 = v58;
  v25 = v59;
  v69 = 0;
  v26 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  if ((v26 & 1) != 0)
  {
    v63 = 1;
    v32 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v33 = v22;
    v35 = v34;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v33, v13);
    v36 = (uint64_t)v62;
    *v62 = v32;
    *(_BYTE *)(v36 + 8) = v35 & 1;
    goto LABEL_10;
  }
  v68 = 2;
  if ((KeyedDecodingContainer.decodeIfPresent(_:forKey:)() & 1) == 0)
  {
    v67 = 4;
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE960]);
    v29 = v24;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v30 = v57;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v60, 1, v29) == 1)
    {
      outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)v60, (uint64_t)&lazy cache variable for type metadata for Date?, (uint64_t)MEMORY[0x24BDCE900], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))type metadata accessor for [(_:)]);
      v66 = 5;
      v31 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      v43 = v31;
      v60 = v16;
      if (v31 == 2)
      {
        (*(void (**)(char *, uint64_t))(v14 + 8))(v60, v13);
        v37 = v61;
        v36 = (uint64_t)v62;
        goto LABEL_11;
      }
      v65 = 6;
      lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type DateInterval and conformance DateInterval, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], MEMORY[0x24BDCB8A8]);
      v45 = (uint64_t)v55;
      v44 = v56;
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
      v46 = v54;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v45, 1, v44) == 1)
      {
        outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>(v45, (uint64_t)&lazy cache variable for type metadata for DateInterval?, (uint64_t)MEMORY[0x24BDCB878], (uint64_t)MEMORY[0x24BEE1C68], (uint64_t (*)(_QWORD))type metadata accessor for [(_:)]);
        lazy protocol witness table accessor for type ResolvableAttributeConfiguration.Errors and conformance ResolvableAttributeConfiguration.Errors();
        swift_allocError();
        swift_willThrow();
        (*(void (**)(char *, uint64_t))(v14 + 8))(v60, v13);
        goto LABEL_3;
      }
      LODWORD(v58) = v43 & 1;
      (*(void (**)(char *, uint64_t))(v14 + 8))(v60, v13);
      v47 = *(void (**)(char *, uint64_t, uint64_t))(v46 + 32);
      v48 = v53;
      v47(v53, v45, v44);
      type metadata accessor for (interval: DateInterval, countdown: Bool)();
      v50 = *(int *)(v49 + 48);
      v36 = (uint64_t)v62;
      v47((char *)v62, (uint64_t)v48, v44);
      *(_BYTE *)(v36 + v50) = v58;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      v41 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
      v42 = v52;
      v41(v52, v60, v29);
      v36 = (uint64_t)v62;
      v41((char *)v62, v42, v29);
    }
LABEL_10:
    v37 = v61;
LABEL_11:
    swift_storeEnumTagMultiPayload();
    outlined init with take of LocalizedStringKey.FormatArgument(v36, v25, type metadata accessor for ResolvableAttributeConfiguration);
    v27 = v37;
    return __swift_destroy_boxed_opaque_existential_1(v27);
  }
  v64 = 3;
  v38 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  if ((v39 & 1) == 0)
  {
    v40 = v38;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v22, v13);
    v36 = (uint64_t)v62;
    *v62 = v40;
    goto LABEL_10;
  }
  lazy protocol witness table accessor for type ResolvableAttributeConfiguration.Errors and conformance ResolvableAttributeConfiguration.Errors();
  swift_allocError();
  swift_willThrow();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
LABEL_3:
  v27 = v61;
  return __swift_destroy_boxed_opaque_existential_1(v27);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ResolvableAttributeConfiguration@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ResolvableAttributeConfiguration.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance ResolvableAttributeConfiguration()
{
  ResolvableAttributeConfiguration.encode(to:)();
}

uint64_t TimelineSchedule.legacyInvalidationConfiguration.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  __int128 v11[2];
  uint64_t v12;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  v3 = MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for InvalidationConfigurtaionProvider);
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(v11, (uint64_t)v13);
    v6 = v14;
    v7 = v15;
    __swift_project_boxed_opaque_existential_1(v13, v14);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
    v8 = type metadata accessor for ResolvableAttributeConfiguration(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a2, 0, 1, v8);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  else
  {
    v12 = 0;
    memset(v11, 0, sizeof(v11));
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for InvalidationConfigurtaionProvider?, (uint64_t)&lazy cache variable for type metadata for InvalidationConfigurtaionProvider, (uint64_t)&protocol descriptor for InvalidationConfigurtaionProvider, (uint64_t (*)(_QWORD))type metadata accessor for AnyTrackedValue?);
    v10 = type metadata accessor for ResolvableAttributeConfiguration(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a2, 1, 1, v10);
  }
}

void ResolvableAttributeConfiguration.Schedule.invalidationConfiguration.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD);
  char *v4;
  uint64_t v5;

  v1 = type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment(0);
  MEMORY[0x24BDAC7A8](v1);
  outlined init with copy of TypesettingLanguage(v0, (uint64_t)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  v4 = (char *)sub_234ED2B1C + 4 * byte_2352AE70F[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_234ED2B1C()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)v0 = *v1;
  *(_BYTE *)(v0 + 8) = 0;
  type metadata accessor for ResolvableAttributeConfiguration(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t TimeDataFormatting.Resolvable.invalidationConfiguration.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v4[2];
  uint64_t v5;
  uint64_t v6[5];
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  LOBYTE(v4[0]) = 1;
  TimeDataFormatting.Resolvable.representation(for:)((uint64_t)v4, a1, v6);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for ResolvableStringAttributeRepresentation);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for ConfigurationBasedResolvableStringAttributeRepresentation);
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(v4, (uint64_t)v7);
    v1 = v8;
    v2 = v9;
    __swift_project_boxed_opaque_existential_1(v7, v8);
    (*(void (**)(uint64_t, uint64_t))(v2 + 40))(v1, v2);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
  else
  {
    v5 = 0;
    memset(v4, 0, sizeof(v4));
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)v4, (uint64_t)&lazy cache variable for type metadata for ConfigurationBasedResolvableStringAttributeRepresentation?, (uint64_t)&lazy cache variable for type metadata for ConfigurationBasedResolvableStringAttributeRepresentation, (uint64_t)&protocol descriptor for ConfigurationBasedResolvableStringAttributeRepresentation, (uint64_t (*)(_QWORD))type metadata accessor for AnyTrackedValue?);
    type metadata accessor for ResolvableAttributeConfiguration(0);
    return swift_storeEnumTagMultiPayload();
  }
}

uint64_t ReducedTimelineSchedule<>.invalidationConfiguration.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v6 = type metadata accessor for ResolvableAttributeConfiguration(0);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(_QWORD, uint64_t, double))(a2 + 8))(*(_QWORD *)(a1 + 16), a2, v7);
  (*(void (**)(_QWORD, uint64_t))(a3 + 8))(*(_QWORD *)(a1 + 24), a3);
  ResolvableAttributeConfiguration.reduce(_:)((uint64_t)v9);
  return outlined destroy of TypesettingConfiguration((uint64_t)v9, type metadata accessor for ResolvableAttributeConfiguration);
}

uint64_t protocol witness for InvalidationConfigurtaionProvider.invalidationConfiguration.getter in conformance <> ReducedTimelineSchedule<A, B>(uint64_t a1, uint64_t a2)
{
  return ReducedTimelineSchedule<>.invalidationConfiguration.getter(a1, *(_QWORD *)(a2 - 8), *(_QWORD *)(a2 - 16));
}

uint64_t protocol witness for ResolvableStringAttribute.schedule.getter in conformance ResolvableProgress@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t, uint64_t, double);
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v5 = type metadata accessor for Date();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v24 - v10;
  type metadata accessor for (interval: DateInterval, countdown: Bool)();
  v13 = v12;
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16);
  v17(v11, v2, v5, v14);
  type metadata accessor for ClosedRange<Date>();
  ((void (*)(char *, uint64_t, uint64_t))v17)(v8, v2 + *(int *)(v18 + 36), v5);
  DateInterval.init(start:end:)();
  v19 = *(_BYTE *)(v2 + *(int *)(a1 + 20));
  v20 = *(int *)(v13 + 48);
  v21 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(a2, v16, v21);
  *(_BYTE *)(a2 + v20) = v19;
  type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment(0);
  swift_storeEnumTagMultiPayload();
  v22 = type metadata accessor for ResolvableAttributeConfiguration.Schedule(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(a2, 0, 1, v22);
}

void specialized static ResolvableAttributeConfiguration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  _QWORD v15[5];
  uint64_t v16;

  v16 = a2;
  v3 = type metadata accessor for DateInterval();
  v15[3] = *(_QWORD *)(v3 - 8);
  v15[4] = v3;
  MEMORY[0x24BDAC7A8](v3);
  v15[0] = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date();
  v15[1] = *(_QWORD *)(v5 - 8);
  v15[2] = v5;
  MEMORY[0x24BDAC7A8](v5);
  v6 = type metadata accessor for ResolvableAttributeConfiguration(0);
  MEMORY[0x24BDAC7A8](v6);
  MEMORY[0x24BDAC7A8](v7);
  MEMORY[0x24BDAC7A8](v8);
  MEMORY[0x24BDAC7A8](v9);
  type metadata accessor for (ResolvableAttributeConfiguration, ResolvableAttributeConfiguration)();
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v15 + *(int *)(v12 + 48) - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TypesettingLanguage(a1, (uint64_t)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ResolvableAttributeConfiguration);
  outlined init with copy of TypesettingLanguage(v16, (uint64_t)v13, type metadata accessor for ResolvableAttributeConfiguration);
  v14 = (char *)sub_234ED312C + 4 * byte_2352AE713[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_234ED312C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  double v3;
  char v4;
  char v5;
  uint64_t (*v6)(_QWORD);

  outlined init with copy of TypesettingLanguage(v0, v2, type metadata accessor for ResolvableAttributeConfiguration);
  v3 = *(double *)v2;
  if (swift_getEnumCaseMultiPayload())
  {
    v6 = (uint64_t (*)(_QWORD))type metadata accessor for (ResolvableAttributeConfiguration, ResolvableAttributeConfiguration);
LABEL_6:
    outlined destroy of TypesettingConfiguration(v0, v6);
    v5 = 0;
    return v5 & 1;
  }
  v4 = *(_BYTE *)(v1 + 8);
  if ((*(_BYTE *)(v2 + 8) & 1) == 0)
  {
    if (v3 != *(double *)v1)
      v4 = 1;
    if ((v4 & 1) == 0)
      goto LABEL_4;
    goto LABEL_11;
  }
  if (!*(_BYTE *)(v1 + 8))
  {
LABEL_11:
    v6 = type metadata accessor for ResolvableAttributeConfiguration;
    goto LABEL_6;
  }
LABEL_4:
  outlined destroy of TypesettingConfiguration(v0, type metadata accessor for ResolvableAttributeConfiguration);
  v5 = 1;
  return v5 & 1;
}

void type metadata accessor for _SequenceBox<AlignedTimelineSchedule.Entries>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _SequenceBox<AlignedTimelineSchedule.Entries>)
  {
    type metadata accessor for AlignedTimelineSchedule.Entries();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AlignedTimelineSchedule.Entries and conformance AlignedTimelineSchedule.Entries, (uint64_t (*)(uint64_t))type metadata accessor for AlignedTimelineSchedule.Entries, (uint64_t)&protocol conformance descriptor for AlignedTimelineSchedule.Entries);
    v0 = type metadata accessor for _SequenceBox();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _SequenceBox<AlignedTimelineSchedule.Entries>);
  }
}

void type metadata accessor for _SequenceBox<AnySequence<Date>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _SequenceBox<AnySequence<Date>>)
  {
    type metadata accessor for [(_:)](255, (unint64_t *)&lazy cache variable for type metadata for AnySequence<Date>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE2428]);
    lazy protocol witness table accessor for type AnySequence<Date> and conformance AnySequence<A>();
    v0 = type metadata accessor for _SequenceBox();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _SequenceBox<AnySequence<Date>>);
  }
}

void type metadata accessor for _SequenceBox<PeriodicTimelineSchedule.Entries>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _SequenceBox<PeriodicTimelineSchedule.Entries>)
  {
    type metadata accessor for PeriodicTimelineSchedule.Entries(255);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type PeriodicTimelineSchedule.Entries and conformance PeriodicTimelineSchedule.Entries, type metadata accessor for PeriodicTimelineSchedule.Entries, (uint64_t)&protocol conformance descriptor for PeriodicTimelineSchedule.Entries);
    v0 = type metadata accessor for _SequenceBox();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _SequenceBox<PeriodicTimelineSchedule.Entries>);
  }
}

unint64_t lazy protocol witness table accessor for type ResolvableAttributeConfiguration.CodingKeys and conformance ResolvableAttributeConfiguration.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableAttributeConfiguration.CodingKeys and conformance ResolvableAttributeConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableAttributeConfiguration.CodingKeys and conformance ResolvableAttributeConfiguration.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableAttributeConfiguration.CodingKeys, &unk_250641A98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableAttributeConfiguration.CodingKeys and conformance ResolvableAttributeConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableAttributeConfiguration.CodingKeys and conformance ResolvableAttributeConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableAttributeConfiguration.CodingKeys and conformance ResolvableAttributeConfiguration.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableAttributeConfiguration.CodingKeys, &unk_250641A98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableAttributeConfiguration.CodingKeys and conformance ResolvableAttributeConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableAttributeConfiguration.CodingKeys and conformance ResolvableAttributeConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableAttributeConfiguration.CodingKeys and conformance ResolvableAttributeConfiguration.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableAttributeConfiguration.CodingKeys, &unk_250641A98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableAttributeConfiguration.CodingKeys and conformance ResolvableAttributeConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableAttributeConfiguration.CodingKeys and conformance ResolvableAttributeConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableAttributeConfiguration.CodingKeys and conformance ResolvableAttributeConfiguration.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableAttributeConfiguration.CodingKeys, &unk_250641A98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableAttributeConfiguration.CodingKeys and conformance ResolvableAttributeConfiguration.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Double? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type Double? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type Double? and conformance <A> A?)
  {
    type metadata accessor for GraphicsContext.ResolvedShading?(255, (unint64_t *)&lazy cache variable for type metadata for Double?);
    v2 = MEMORY[0x24BEE13D8];
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE4AA8], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Double? and conformance <A> A?);
  }
  return result;
}

void type metadata accessor for KeyedEncodingContainer<ResolvableAttributeConfiguration.CodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = lazy protocol witness table accessor for type ResolvableAttributeConfiguration.CodingKeys and conformance ResolvableAttributeConfiguration.CodingKeys();
    v7 = a3(a1, &unk_250641A98, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t lazy protocol witness table accessor for type ResolvableAttributeConfiguration.Errors and conformance ResolvableAttributeConfiguration.Errors()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableAttributeConfiguration.Errors and conformance ResolvableAttributeConfiguration.Errors;
  if (!lazy protocol witness table cache variable for type ResolvableAttributeConfiguration.Errors and conformance ResolvableAttributeConfiguration.Errors)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableAttributeConfiguration.Errors, &type metadata for ResolvableAttributeConfiguration.Errors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableAttributeConfiguration.Errors and conformance ResolvableAttributeConfiguration.Errors);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvableAttributeConfiguration.Errors and conformance ResolvableAttributeConfiguration.Errors;
  if (!lazy protocol witness table cache variable for type ResolvableAttributeConfiguration.Errors and conformance ResolvableAttributeConfiguration.Errors)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ResolvableAttributeConfiguration.Errors, &type metadata for ResolvableAttributeConfiguration.Errors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableAttributeConfiguration.Errors and conformance ResolvableAttributeConfiguration.Errors);
  }
  return result;
}

uint64_t dispatch thunk of ConfigurationBasedResolvableStringAttributeRepresentation.invalidationConfiguration.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

_BYTE *assignWithCopy for ResolvableAttributeConfiguration(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  return assignWithCopy for ResolvableAttributeConfiguration(a1, a2, a3, type metadata accessor for ResolvableAttributeConfiguration);
}

_BYTE *assignWithTake for ResolvableAttributeConfiguration(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  return assignWithTake for ResolvableAttributeConfiguration(a1, a2, a3, type metadata accessor for ResolvableAttributeConfiguration);
}

uint64_t type metadata completion function for ResolvableAttributeConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for ResolvableAttributeConfiguration(a1, a2, a3, (uint64_t)"\t");
}

_QWORD *initializeBufferWithCopyOfBuffer for ResolvableAttributeConfiguration.Schedule(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment(0) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v9 = type metadata accessor for DateInterval();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      type metadata accessor for (interval: DateInterval, countdown: Bool)();
      *((_BYTE *)a1 + *(int *)(v10 + 48)) = *((_BYTE *)a2 + *(int *)(v10 + 48));
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v7 = type metadata accessor for Date();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(v4 + 64));
    }
  }
  return a1;
}

uint64_t destroy for ResolvableAttributeConfiguration.Schedule(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment(0);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
  {
    v3 = type metadata accessor for DateInterval();
  }
  else
  {
    if ((_DWORD)result != 1)
      return result;
    v3 = type metadata accessor for Date();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
}

_BYTE *initializeWithCopy for ResolvableAttributeConfiguration.Schedule(_BYTE *a1, _BYTE *a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v7 = type metadata accessor for DateInterval();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    type metadata accessor for (interval: DateInterval, countdown: Bool)();
    a1[*(int *)(v8 + 48)] = a2[*(int *)(v8 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v6 = type metadata accessor for Date();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  return a1;
}

_BYTE *assignWithCopy for ResolvableAttributeConfiguration.Schedule(_BYTE *a1, _BYTE *a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    outlined destroy of TypesettingConfiguration((uint64_t)a1, type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment);
    v4 = type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v7 = type metadata accessor for DateInterval();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      type metadata accessor for (interval: DateInterval, countdown: Bool)();
      a1[*(int *)(v8 + 48)] = a2[*(int *)(v8 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v6 = type metadata accessor for Date();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
  }
  return a1;
}

_BYTE *initializeWithTake for ResolvableAttributeConfiguration.Schedule(_BYTE *a1, _BYTE *a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v7 = type metadata accessor for DateInterval();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    type metadata accessor for (interval: DateInterval, countdown: Bool)();
    a1[*(int *)(v8 + 48)] = a2[*(int *)(v8 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v6 = type metadata accessor for Date();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  return a1;
}

_BYTE *assignWithTake for ResolvableAttributeConfiguration.Schedule(_BYTE *a1, _BYTE *a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    outlined destroy of TypesettingConfiguration((uint64_t)a1, type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment);
    v4 = type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v7 = type metadata accessor for DateInterval();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      type metadata accessor for (interval: DateInterval, countdown: Bool)();
      a1[*(int *)(v8 + 48)] = a2[*(int *)(v8 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v6 = type metadata accessor for Date();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvableAttributeConfiguration.Schedule()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_234ED3BA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ResolvableAttributeConfiguration.Schedule()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_234ED3BEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata completion function for ResolvableAttributeConfiguration.Schedule()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ResolvableAttributeConfiguration.Errors(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_234ED3CD4 + 4 * byte_2352AE718[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_234ED3CF4 + 4 * byte_2352AE71D[v4]))();
}

_BYTE *sub_234ED3CD4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_234ED3CF4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_234ED3CFC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_234ED3D04(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_234ED3D0C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_234ED3D14(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ResolvableAttributeConfiguration.Errors()
{
  return &type metadata for ResolvableAttributeConfiguration.Errors;
}

uint64_t storeEnumTagSinglePayload for ResolvableAttributeConfiguration.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_234ED3D7C + 4 * byte_2352AE727[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_234ED3DB0 + 4 * byte_2352AE722[v4]))();
}

uint64_t sub_234ED3DB0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234ED3DB8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234ED3DC0);
  return result;
}

uint64_t sub_234ED3DCC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234ED3DD4);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_234ED3DD8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234ED3DE0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ResolvableAttributeConfiguration.CodingKeys()
{
  return &unk_250641A98;
}

_QWORD *initializeBufferWithCopyOfBuffer for ResolvableAttributeConfiguration(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v10 = type metadata accessor for DateInterval();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      type metadata accessor for (interval: DateInterval, countdown: Bool)();
      *((_BYTE *)a1 + *(int *)(v11 + 48)) = *((_BYTE *)a2 + *(int *)(v11 + 48));
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v8 = type metadata accessor for Date();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
  }
  return a1;
}

uint64_t destroy for ResolvableAttributeConfiguration(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
  {
    v3 = type metadata accessor for DateInterval();
  }
  else
  {
    if ((_DWORD)result != 1)
      return result;
    v3 = type metadata accessor for Date();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
}

_BYTE *initializeWithCopy for ResolvableAttributeConfiguration(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v8 = type metadata accessor for DateInterval();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    type metadata accessor for (interval: DateInterval, countdown: Bool)();
    a1[*(int *)(v9 + 48)] = a2[*(int *)(v9 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v7 = type metadata accessor for Date();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_BYTE *assignWithCopy for ResolvableAttributeConfiguration.Schedule.Alignment(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  return assignWithCopy for ResolvableAttributeConfiguration(a1, a2, a3, type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment);
}

_BYTE *assignWithCopy for ResolvableAttributeConfiguration(_BYTE *a1, _BYTE *a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    outlined destroy of TypesettingConfiguration((uint64_t)a1, a4);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v9 = type metadata accessor for DateInterval();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      type metadata accessor for (interval: DateInterval, countdown: Bool)();
      a1[*(int *)(v10 + 48)] = a2[*(int *)(v10 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v8 = type metadata accessor for Date();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

_BYTE *initializeWithTake for ResolvableAttributeConfiguration(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v8 = type metadata accessor for DateInterval();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    type metadata accessor for (interval: DateInterval, countdown: Bool)();
    a1[*(int *)(v9 + 48)] = a2[*(int *)(v9 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v7 = type metadata accessor for Date();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_BYTE *assignWithTake for ResolvableAttributeConfiguration.Schedule.Alignment(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  return assignWithTake for ResolvableAttributeConfiguration(a1, a2, a3, type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment);
}

_BYTE *assignWithTake for ResolvableAttributeConfiguration(_BYTE *a1, _BYTE *a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    outlined destroy of TypesettingConfiguration((uint64_t)a1, a4);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v9 = type metadata accessor for DateInterval();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      type metadata accessor for (interval: DateInterval, countdown: Bool)();
      a1[*(int *)(v10 + 48)] = a2[*(int *)(v10 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v8 = type metadata accessor for Date();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for ResolvableAttributeConfiguration.Schedule.Alignment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for ResolvableAttributeConfiguration(a1, a2, a3, MEMORY[0x24BEE0178] + 64);
}

uint64_t type metadata completion function for ResolvableAttributeConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD v7[8];

  v7[4] = a4;
  result = type metadata accessor for Date();
  if (v5 <= 0x3F)
  {
    v7[5] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for DateInterval();
    if (v6 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      v7[6] = v7;
      v7[7] = MEMORY[0x24BEE0178] + 64;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t specialized ResolvableAttributeConfiguration.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6C61767265746E69 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x79616C6564 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x636F6C436C6C6177 && a2 == 0xE90000000000006BLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E656D6E67696C61 && a2 == 0xE900000000000074
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x72656D6974 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x776F64746E756F63 && a2 == 0xEA0000000000736ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x746E4972656D6974 && a2 == 0xED00006C61767265)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

void type metadata accessor for (ResolvableAttributeConfiguration, ResolvableAttributeConfiguration)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ResolvableAttributeConfiguration, ResolvableAttributeConfiguration))
  {
    type metadata accessor for ResolvableAttributeConfiguration(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ResolvableAttributeConfiguration, ResolvableAttributeConfiguration));
  }
}

void static PreviewColorSchemeTraitKey.defaultValue.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

ValueMetadata *type metadata accessor for PreviewColorSchemeTraitKey()
{
  return &type metadata for PreviewColorSchemeTraitKey;
}

unint64_t specialized static Dictionary<>.== infix(_:_:)(unint64_t result, uint64_t a2)
{
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;
  float64x2_t v21;
  int32x4_t v22;
  int32x4_t v23;
  float64x2_t v24;
  float64x2_t v25;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    v11 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v12 = v11 | (v4 << 6);
LABEL_27:
    v16 = *(_QWORD *)(v3 + 48) + 16 * v12;
    v17 = *(_QWORD *)(v3 + 56) + 40 * v12;
    v24 = *(float64x2_t *)(v17 + 16);
    v25 = *(float64x2_t *)v17;
    v18 = *(unsigned __int8 *)(v17 + 32);
    result = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)v16, *(_BYTE *)(v16 + 8));
    if ((v19 & 1) == 0)
      return 0;
    v20 = *(_QWORD *)(a2 + 56) + 40 * result;
    v21 = *(float64x2_t *)v20;
    if (*(_BYTE *)(v20 + 32))
    {
      v22 = (int32x4_t)vceqq_f64(v21, v25);
      v23 = (int32x4_t)vceqq_f64(*(float64x2_t *)(v20 + 16), v24);
      if (*(_BYTE *)(v20 + 32) == 1)
      {
        result = 0;
        if (v18 != 1)
          return result;
      }
      else
      {
        result = 0;
        if (v18 != 2)
          return result;
      }
      if ((~vaddv_s16((int16x4_t)vand_s8((int8x8_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32(v22, v23)), 0xFuLL)), (int8x8_t)0x8000400020001)) & 0xF) != 0)return result;
    }
    else
    {
      if (v18)
        v10 = 0;
      else
        v10 = v21.f64[0] == v25.f64[0];
      if (!v10)
        return 0;
    }
  }
  v13 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_39;
  }
  if (v13 >= v9)
    return 1;
  v14 = *(_QWORD *)(v5 + 8 * v13);
  ++v4;
  if (v14)
    goto LABEL_26;
  v4 = v13 + 1;
  if (v13 + 1 >= v9)
    return 1;
  v14 = *(_QWORD *)(v5 + 8 * v4);
  if (v14)
    goto LABEL_26;
  v4 = v13 + 2;
  if (v13 + 2 >= v9)
    return 1;
  v14 = *(_QWORD *)(v5 + 8 * v4);
  if (v14)
  {
LABEL_26:
    v8 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v4 << 6);
    goto LABEL_27;
  }
  v15 = v13 + 3;
  if (v15 >= v9)
    return 1;
  v14 = *(_QWORD *)(v5 + 8 * v15);
  if (v14)
  {
    v4 = v15;
    goto LABEL_26;
  }
  while (1)
  {
    v4 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v4 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    ++v15;
    if (v14)
      goto LABEL_26;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t specialized static Dictionary<>.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return 1;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
          break;
      }
    }
LABEL_21:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    v15 = 8 * v11;
    v16 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v15);
    result = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(*(_QWORD *)(v3 + 48) + v15));
    if ((v17 & 1) == 0 || *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * result) != v16)
      return 0;
  }
  v14 = v12 + 3;
  if (v14 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_21;
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  char v20;
  char v21;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return 1;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
          break;
      }
    }
LABEL_21:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    v15 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v11);
    v16 = *v15;
    v17 = v15[1];
    v18 = *(_DWORD *)(*(_QWORD *)(v3 + 56) + 4 * v11);
    swift_bridgeObjectRetain();
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17);
    v21 = v20;
    result = swift_bridgeObjectRelease();
    if ((v21 & 1) == 0 || *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * v19) != v18)
      return 0;
  }
  v14 = v12 + 3;
  if (v14 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_21;
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  char v15;
  int32x2_t v16;
  float64x2_t v17;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_24;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v12 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return 1;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
        {
          v4 = v12 + 3;
          if (v12 + 3 >= v9)
            return 1;
          v13 = *(_QWORD *)(v5 + 8 * v4);
          if (!v13)
            break;
        }
      }
    }
LABEL_23:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_24:
    v17 = *(float64x2_t *)(*(_QWORD *)(v3 + 56) + 16 * v11);
    result = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v11));
    if ((v15 & 1) != 0)
    {
      v16 = vmovn_s64(vceqq_f64(*(float64x2_t *)(*(_QWORD *)(a2 + 56) + 16 * result), v17));
      if ((v16.i32[0] & v16.i32[1] & 1) != 0)
        continue;
    }
    return 0;
  }
  v14 = v12 + 4;
  if (v14 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_23;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_23;
  }
LABEL_29:
  __break(1u);
  return result;
}

BOOL static ScrollAnchorStorage.Role.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void ScrollAnchorStorage.Role.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

void *static ScrollAnchorStorage.Role.allCases.getter()
{
  return &outlined read-only object #0 of static ScrollAnchorStorage.Role.allCases.getter;
}

Swift::Int ScrollAnchorStorage.Role.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for static CaseIterable.allCases.getter in conformance ScrollAnchorStorage.Role(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance ScrollAnchorStorage.Role;
}

uint64_t ScrollAnchorStorage.anchors.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ScrollAnchorStorage.anchors.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*ScrollAnchorStorage.anchors.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrollAnchorStorage.defaultValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t ScrollAnchorStorage.defaultValue.setter(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 8) = result;
  *(_QWORD *)(v3 + 16) = a2;
  *(_BYTE *)(v3 + 24) = a3 & 1;
  return result;
}

uint64_t (*ScrollAnchorStorage.defaultValue.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

unint64_t ScrollAnchorStorage.init()@<X0>(uint64_t a1@<X8>)
{
  unint64_t result;

  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 24) = 1;
  return result;
}

uint64_t ScrollAnchorStorage.isEmpty.getter()
{
  unsigned __int8 *v0;

  if (*(_QWORD *)(*(_QWORD *)v0 + 16))
    return 0;
  else
    return v0[24];
}

double ScrollAnchorStorage.initialOffset.getter()
{
  return ScrollAnchorStorage.initialOffset.getter(0);
}

uint64_t ScrollAnchorStorage.initialOffset.setter(double a1, double a2)
{
  return ScrollAnchorStorage.initialOffset.setter(0, a1, a2);
}

uint64_t (*ScrollAnchorStorage.initialOffset.modify(_QWORD *a1))(double *a1, uint64_t a2)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  char v9;
  __int128 *v10;
  uint64_t *v11;

  v2 = v1;
  a1[2] = v1;
  v4 = *v1;
  v5 = v2[1];
  v6 = v2[2];
  v7 = *((unsigned __int8 *)v2 + 24);
  if (*(_QWORD *)(v4 + 16))
  {
    v8 = specialized __RawDictionaryStorage.find<A>(_:)(0);
    if ((v9 & 1) != 0)
    {
      v10 = (__int128 *)(*(_QWORD *)(v4 + 56) + 16 * v8);
      v11 = (uint64_t *)v10 + 1;
LABEL_7:
      v5 = *(_QWORD *)v10;
      v6 = *v11;
      goto LABEL_8;
    }
  }
  if (v7)
  {
    v10 = &static UnitPoint.topLeading;
    v11 = (uint64_t *)&static UnitPoint.topLeading + 1;
    if (one-time initialization token for topLeading != -1)
      swift_once();
    goto LABEL_7;
  }
LABEL_8:
  *a1 = v5;
  a1[1] = v6;
  return ScrollAnchorStorage.initialOffset.modify;
}

uint64_t ScrollAnchorStorage.initialOffset.modify(double *a1, uint64_t a2)
{
  return ScrollAnchorStorage.initialOffset.modify(a1, a2, 0);
}

double ScrollAnchorStorage.sizeChanges.getter()
{
  return ScrollAnchorStorage.initialOffset.getter(1);
}

uint64_t ScrollAnchorStorage.sizeChanges.setter(double a1, double a2)
{
  return ScrollAnchorStorage.initialOffset.setter(1, a1, a2);
}

uint64_t (*ScrollAnchorStorage.sizeChanges.modify(_QWORD *a1))(double *a1, uint64_t a2)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  char v9;
  __int128 *v10;
  uint64_t *v11;

  v2 = v1;
  a1[2] = v1;
  v4 = *v1;
  v5 = v2[1];
  v6 = v2[2];
  v7 = *((unsigned __int8 *)v2 + 24);
  if (*(_QWORD *)(v4 + 16))
  {
    v8 = specialized __RawDictionaryStorage.find<A>(_:)(1);
    if ((v9 & 1) != 0)
    {
      v10 = (__int128 *)(*(_QWORD *)(v4 + 56) + 16 * v8);
      v11 = (uint64_t *)v10 + 1;
LABEL_7:
      v5 = *(_QWORD *)v10;
      v6 = *v11;
      goto LABEL_8;
    }
  }
  if (v7)
  {
    v10 = &static UnitPoint.topLeading;
    v11 = (uint64_t *)&static UnitPoint.topLeading + 1;
    if (one-time initialization token for topLeading != -1)
      swift_once();
    goto LABEL_7;
  }
LABEL_8:
  *a1 = v5;
  a1[1] = v6;
  return ScrollAnchorStorage.sizeChanges.modify;
}

uint64_t ScrollAnchorStorage.sizeChanges.modify(double *a1, uint64_t a2)
{
  return ScrollAnchorStorage.initialOffset.modify(a1, a2, 1);
}

double ScrollAnchorStorage.alignment.getter()
{
  return ScrollAnchorStorage.initialOffset.getter(2);
}

double ScrollAnchorStorage.initialOffset.getter(uint64_t a1)
{
  double *v1;
  double *v2;
  uint64_t v3;
  double v4;
  int v5;
  uint64_t v6;
  char v7;
  __int128 *v8;

  v2 = v1;
  v3 = *(_QWORD *)v1;
  v4 = v2[1];
  v5 = *((unsigned __int8 *)v2 + 24);
  if (*(_QWORD *)(v3 + 16))
  {
    v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v7 & 1) != 0)
    {
      v8 = (__int128 *)(*(_QWORD *)(v3 + 56) + 16 * v6);
      return *(double *)v8;
    }
  }
  if (v5)
  {
    v8 = &static UnitPoint.topLeading;
    if (one-time initialization token for topLeading != -1)
      swift_once();
    return *(double *)v8;
  }
  return v4;
}

uint64_t key path setter for ScrollAnchorStorage.initialOffset : ScrollAnchorStorage(double *a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  double v7;
  double v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;

  v7 = *a1;
  v8 = a1[1];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *a2;
  *a2 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a5, isUniquelyReferenced_nonNull_native, v7, v8);
  *a2 = v11;
  return swift_bridgeObjectRelease();
}

uint64_t ScrollAnchorStorage.alignment.setter(double a1, double a2)
{
  return ScrollAnchorStorage.initialOffset.setter(2, a1, a2);
}

uint64_t ScrollAnchorStorage.initialOffset.setter(char a1, double a2, double a3)
{
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *v3;
  *v3 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, isUniquelyReferenced_nonNull_native, a2, a3);
  *v3 = v9;
  return swift_bridgeObjectRelease();
}

uint64_t (*ScrollAnchorStorage.alignment.modify(_QWORD *a1))(double *a1, uint64_t a2)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  char v9;
  __int128 *v10;
  uint64_t *v11;

  v2 = v1;
  a1[2] = v1;
  v4 = *v1;
  v5 = v2[1];
  v6 = v2[2];
  v7 = *((unsigned __int8 *)v2 + 24);
  if (*(_QWORD *)(v4 + 16))
  {
    v8 = specialized __RawDictionaryStorage.find<A>(_:)(2);
    if ((v9 & 1) != 0)
    {
      v10 = (__int128 *)(*(_QWORD *)(v4 + 56) + 16 * v8);
      v11 = (uint64_t *)v10 + 1;
LABEL_7:
      v5 = *(_QWORD *)v10;
      v6 = *v11;
      goto LABEL_8;
    }
  }
  if (v7)
  {
    v10 = &static UnitPoint.topLeading;
    v11 = (uint64_t *)&static UnitPoint.topLeading + 1;
    if (one-time initialization token for topLeading != -1)
      swift_once();
    goto LABEL_7;
  }
LABEL_8:
  *a1 = v5;
  a1[1] = v6;
  return ScrollAnchorStorage.alignment.modify;
}

uint64_t ScrollAnchorStorage.alignment.modify(double *a1, uint64_t a2)
{
  return ScrollAnchorStorage.initialOffset.modify(a1, a2, 2);
}

uint64_t ScrollAnchorStorage.initialOffset.modify(double *a1, uint64_t a2, char a3)
{
  uint64_t *v4;
  double v5;
  double v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;

  v4 = (uint64_t *)*((_QWORD *)a1 + 2);
  v5 = *a1;
  v6 = a1[1];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *v4;
  *v4 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a3, isUniquelyReferenced_nonNull_native, v5, v6);
  *v4 = v9;
  return swift_bridgeObjectRelease();
}

uint64_t ScrollAnchorStorage.updateRole(_:anchor:)(_BYTE *a1, double a2, double a3)
{
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  double v7;
  double v8;
  char v9;
  uint64_t v11;

  if (*a1)
  {
    if (*a1 == 1)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v11 = *v3;
      *v3 = 0x8000000000000000;
      v7 = a2;
      v8 = a3;
      v9 = 1;
    }
    else
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v11 = *v3;
      *v3 = 0x8000000000000000;
      v7 = a2;
      v8 = a3;
      v9 = 2;
    }
  }
  else
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v3;
    *v3 = 0x8000000000000000;
    v7 = a2;
    v8 = a3;
    v9 = 0;
  }
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v9, isUniquelyReferenced_nonNull_native, v7, v8);
  *v3 = v11;
  return swift_bridgeObjectRelease();
}

double ScrollAnchorStorage.anchor(role:)(_BYTE *a1)
{
  double *v1;
  double v2;
  double v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  double v8;
  uint64_t v9;

  v2 = *v1;
  v3 = v1[1];
  v4 = *((_BYTE *)v1 + 24);
  if (*a1)
  {
    if (*a1 == 1)
    {
      if (!*(_QWORD *)(*(_QWORD *)&v2 + 16))
        goto LABEL_11;
      v5 = 1;
    }
    else
    {
      if (!*(_QWORD *)(*(_QWORD *)&v2 + 16))
        goto LABEL_11;
      v5 = 2;
    }
  }
  else
  {
    if (!*(_QWORD *)(*(_QWORD *)&v2 + 16))
      goto LABEL_11;
    v5 = 0;
  }
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
  if ((v7 & 1) != 0)
    return *(double *)(*(_QWORD *)(*(_QWORD *)&v2 + 56) + 16 * v6);
LABEL_11:
  if ((v4 & 1) == 0)
    return v3;
  v9 = one-time initialization token for topLeading;
  swift_bridgeObjectRetain();
  if (v9 != -1)
    swift_once();
  v8 = *(double *)&static UnitPoint.topLeading;
  swift_bridgeObjectRelease();
  return v8;
}

double ScrollAnchorStorage.adjustedAnchor(role:layoutDirection:)(char *a1, unsigned __int8 *a2)
{
  uint64_t *v2;
  char v3;
  int v4;
  char v5;
  double result;
  char v7;
  uint64_t v8;
  __int128 v9;
  char v10;

  v3 = *a1;
  v4 = *a2;
  v5 = *((_BYTE *)v2 + 24);
  v8 = *v2;
  v9 = *(_OWORD *)(v2 + 1);
  v10 = v5;
  v7 = v3;
  result = ScrollAnchorStorage.anchor(role:)(&v7);
  if (v4)
    return 1.0 - result;
  return result;
}

Swift::Void __swiftcall ScrollAnchorStorage.reset()()
{
  uint64_t v0;
  unint64_t v1;

  v1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)v0 = v1;
  *(_BYTE *)(v0 + 24) = 1;
}

BOOL static ScrollAnchorStorage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  char v4;
  double v5;
  double v6;
  char v7;

  v2 = *(double *)(a1 + 8);
  v3 = *(double *)(a1 + 16);
  v4 = *(_BYTE *)(a1 + 24);
  v5 = *(double *)(a2 + 8);
  v6 = *(double *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  if ((specialized static Dictionary<>.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)a2) & 1) == 0)
    return 0;
  if ((v4 & 1) == 0)
    return (v7 & 1) == 0 && v2 == v5 && v3 == v6;
  return (v7 & 1) != 0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ScrollAnchorStorage(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  char v4;
  double v5;
  double v6;
  int v7;

  v2 = *(double *)(a1 + 8);
  v3 = *(double *)(a1 + 16);
  v4 = *(_BYTE *)(a1 + 24);
  v5 = *(double *)(a2 + 8);
  v6 = *(double *)(a2 + 16);
  v7 = *(unsigned __int8 *)(a2 + 24);
  if ((specialized static Dictionary<>.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)a2) & 1) == 0)
    return 0;
  if ((v4 & 1) == 0)
    return (v7 & 1) == 0 && v2 == v5 && v3 == v6;
  return v7 != 0;
}

uint64_t EnvironmentValues.scrollAnchors.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

double key path getter for EnvironmentValues.scrollAnchors : EnvironmentValues@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  double result;
  uint64_t v7;
  __int128 v8;
  char v9;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, (uint64_t)&v7);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, (uint64_t)&v7);
  }
  swift_release_n();
  v5 = v9;
  *(_QWORD *)a2 = v7;
  result = *(double *)&v8;
  *(_OWORD *)(a2 + 8) = v8;
  *(_BYTE *)(a2 + 24) = v5;
  return result;
}

uint64_t key path setter for EnvironmentValues.scrollAnchors : EnvironmentValues(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 24);
  v4 = swift_bridgeObjectRetain();
  specialized EnvironmentValues.subscript.setter(v4, v1, v2, v3);
  return swift_bridgeObjectRelease();
}

uint64_t EnvironmentValues.scrollAnchors.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_BYTE *)(a1 + 24);
  v6 = *v1;
  swift_retain_n();
  swift_bridgeObjectRetain();
  specialized closure #1 in PropertyList.subscript.setter(v1, v3, v2, v4, v5);
  swift_bridgeObjectRelease();
  swift_release();
  if (v1[1])
  {
    v7 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v6, v7);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return swift_release();
}

void (*EnvironmentValues.scrollAnchors.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x48uLL);
  *a1 = v3;
  v3[7] = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v4, (uint64_t)v3);
    swift_release_n();
  }
  else
  {
    v5 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v5, (uint64_t)v3);
  }
  swift_release_n();
  v3[8] = 0;
  return EnvironmentValues.scrollAnchors.modify;
}

void EnvironmentValues.scrollAnchors.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *a1;
  v3 = **a1;
  v4 = (*a1)[1];
  v5 = (*a1)[2];
  v6 = *((_BYTE *)*a1 + 24);
  v7 = (uint64_t *)(*a1)[7];
  v8 = *v7;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter(v7, v3, v4, v5, v6);
    swift_release();
    swift_bridgeObjectRelease();
    if (v7[1])
    {
      v9 = *(_QWORD *)v2[7];
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v8, v9);
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain_n();
    swift_bridgeObjectRetain();
    specialized closure #1 in PropertyList.subscript.setter(v7, v3, v4, v5, v6);
    swift_release();
    swift_bridgeObjectRelease();
    if (v7[1])
    {
      v10 = *(_QWORD *)v2[7];
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v8, v10);
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    swift_release();
  }
  free(v2);
}

uint64_t EnvironmentValues.initialOffsetScrollAnchor.getter()
{
  return EnvironmentValues.initialOffsetScrollAnchor.getter(0);
}

uint64_t EnvironmentValues.sizeChangesScrollAnchor.getter()
{
  return EnvironmentValues.initialOffsetScrollAnchor.getter(1);
}

uint64_t EnvironmentValues.alignmentScrollAnchor.getter()
{
  return EnvironmentValues.initialOffsetScrollAnchor.getter(2);
}

uint64_t EnvironmentValues.initialOffsetScrollAnchor.getter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  char v9;
  __int128 *v10;
  _QWORD v12[2];
  unsigned __int8 v13;

  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, (uint64_t)v12);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, (uint64_t)v12);
  }
  swift_release_n();
  v5 = v12[0];
  v6 = v12[1];
  v7 = v13;
  if (*(_QWORD *)(v12[0] + 16))
  {
    v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v9 & 1) != 0)
    {
      v10 = (__int128 *)(*(_QWORD *)(v5 + 56) + 16 * v8);
LABEL_10:
      v6 = *(_QWORD *)v10;
      goto LABEL_11;
    }
  }
  if (v7)
  {
    v10 = &static UnitPoint.topLeading;
    if (one-time initialization token for topLeading != -1)
      swift_once();
    goto LABEL_10;
  }
LABEL_11:
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.ScrollAnchorsKey@<X0>(uint64_t a1@<X8>)
{
  char v2;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v2 = byte_2561AC2F0;
  *(_QWORD *)a1 = static EnvironmentValues.ScrollAnchorsKey.defaultValue;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)&qword_2561AC2E0;
  *(_BYTE *)(a1 + 24) = v2;
  return swift_bridgeObjectRetain();
}

unint64_t lazy protocol witness table accessor for type [ScrollAnchorStorage.Role] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [ScrollAnchorStorage.Role] and conformance [A];
  if (!lazy protocol witness table cache variable for type [ScrollAnchorStorage.Role] and conformance [A])
  {
    type metadata accessor for [ScrollAnchorStorage.Role]();
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [ScrollAnchorStorage.Role] and conformance [A]);
  }
  return result;
}

void type metadata accessor for [ScrollAnchorStorage.Role]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [ScrollAnchorStorage.Role])
  {
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [ScrollAnchorStorage.Role]);
  }
}

void sub_234ED5FE4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  keypath_getTm(a1, a2, a3, (double (*)(uint64_t, uint64_t, uint64_t, _QWORD))ScrollAnchorStorage.initialOffset.getter, a4);
}

uint64_t sub_234ED5FF0(double *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for ScrollAnchorStorage.initialOffset : ScrollAnchorStorage(a1, a2, a3, a4, 0);
}

void sub_234ED6008(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  keypath_getTm(a1, a2, a3, (double (*)(uint64_t, uint64_t, uint64_t, _QWORD))ScrollAnchorStorage.sizeChanges.getter, a4);
}

void keypath_getTm(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, double (*a4)(uint64_t, uint64_t, uint64_t, _QWORD)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;

  *(double *)a5 = a4(a1, a2, a3, a4);
  *(_QWORD *)(a5 + 8) = v6;
}

uint64_t sub_234ED605C(double *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for ScrollAnchorStorage.initialOffset : ScrollAnchorStorage(a1, a2, a3, a4, 1);
}

void sub_234ED6074(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  keypath_getTm(a1, a2, a3, (double (*)(uint64_t, uint64_t, uint64_t, _QWORD))ScrollAnchorStorage.alignment.getter, a4);
}

uint64_t sub_234ED6080(double *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for ScrollAnchorStorage.initialOffset : ScrollAnchorStorage(a1, a2, a3, a4, 2);
}

ValueMetadata *type metadata accessor for ScrollAnchorStorage()
{
  return &type metadata for ScrollAnchorStorage;
}

uint64_t storeEnumTagSinglePayload for ScrollAnchorStorage.Role(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_234ED60FC + 4 * byte_2352AEB55[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_234ED6130 + 4 * byte_2352AEB50[v4]))();
}

uint64_t sub_234ED6130(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234ED6138(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234ED6140);
  return result;
}

uint64_t sub_234ED614C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234ED6154);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_234ED6158(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234ED6160(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ScrollAnchorStorage.Role()
{
  return &type metadata for ScrollAnchorStorage.Role;
}

ValueMetadata *type metadata accessor for EnvironmentValues.ScrollAnchorsKey()
{
  return &type metadata for EnvironmentValues.ScrollAnchorsKey;
}

uint64_t dispatch thunk of InterfaceIdiomDependentFormatStyle.interfaceIdiom(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

BOOL CGAffineTransform.isRectilinear.getter()
{
  double *v0;

  if (v0[1] == 0.0 && v0[2] == 0.0)
    return 1;
  if (*v0 == 0.0)
    return v0[3] == 0.0;
  return 0;
}

BOOL CGAffineTransform.isTranslation.getter()
{
  double *v0;

  return *v0 == 1.0 && v0[1] == 0.0 && v0[2] == 0.0 && v0[3] == 1.0;
}

double CGAffineTransform.scale.getter()
{
  double *v0;
  double v1;
  double v2;
  BOOL v3;
  double result;

  v1 = *v0 * *v0 + v0[1] * v0[1];
  v2 = v0[2] * v0[2] + v0[3] * v0[3];
  v3 = v2 == 1.0 && v1 == 1.0;
  result = (sqrt(v1) + sqrt(v2)) * 0.5;
  if (v3)
    return 1.0;
  return result;
}

void __swiftcall CGAffineTransform.init(rotation:)(CGAffineTransform *__return_ptr retstr, SwiftUI::Angle rotation)
{
  __double2 v3;

  v3 = __sincos_stret(rotation.radians);
  retstr->a = v3.__cosval;
  retstr->b = v3.__sinval;
  retstr->c = -v3.__sinval;
  retstr->d = v3.__cosval;
  retstr->tx = 0.0;
  retstr->ty = 0.0;
}

BOOL CGAffineTransform.isUniform.getter()
{
  double *v0;
  double v1;
  double v2;
  double v3;

  v1 = v0[1];
  if (v1 == 0.0 && v0[2] == 0.0)
  {
    v2 = *v0;
    v3 = v0[3];
  }
  else
  {
    v2 = *v0;
    if (*v0 != 0.0)
      return 0;
    v3 = v0[3];
    if (v3 != 0.0)
      return 0;
  }
  if (v2 == v3)
    return v1 == v0[2];
  return 0;
}

void __swiftcall CGAffineTransform.rotated(by:)(CGAffineTransform *__return_ptr retstr, SwiftUI::Angle by)
{
  double *v2;
  CGFloat v4;
  CGFloat v5;
  __double2 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  CGAffineTransform v11;
  CGAffineTransform t2;
  CGAffineTransform t1;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v9 = *((_OWORD *)v2 + 1);
  v10 = *(_OWORD *)v2;
  v4 = v2[4];
  v5 = v2[5];
  v6 = __sincos_stret(by.radians);
  t1.a = v6.__cosval;
  t1.b = v6.__sinval;
  t1.c = -v6.__sinval;
  t1.d = v6.__cosval;
  t1.tx = 0.0;
  t1.ty = 0.0;
  *(_OWORD *)&t2.a = v10;
  *(_OWORD *)&t2.c = v9;
  t2.tx = v4;
  t2.ty = v5;
  CGAffineTransformConcat(&v11, &t1, &t2);
  v7 = *(_OWORD *)&v11.c;
  v8 = *(_OWORD *)&v11.tx;
  *(_OWORD *)&retstr->a = *(_OWORD *)&v11.a;
  *(_OWORD *)&retstr->c = v7;
  *(_OWORD *)&retstr->tx = v8;
}

double *CGAffineTransform.encode(to:)(_QWORD *a1)
{
  _OWORD *v1;
  __int128 v2;
  _OWORD v4[3];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v2 = v1[1];
  v4[0] = *v1;
  v4[1] = v2;
  v4[2] = v1[2];
  return closure #1 in CGAffineTransform.encode(to:)((double *)v4, a1);
}

double *closure #1 in CGAffineTransform.encode(to:)(double *result, _QWORD *a2)
{
  double *v3;
  uint64_t v4;
  float v5;
  double v6;
  double v8;
  double v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  char v17;
  double v18;

  v3 = result;
  v4 = 0;
  while (1)
  {
    v6 = v3[v4];
    if (v4 == 3 || v4 == 0)
      v8 = 1.0;
    else
      v8 = 0.0;
    if (v6 == v8)
      goto LABEL_4;
    v9 = fabs(v6);
    v10 = v4 * 8 + 5;
    if (v9 >= 65536.0)
      v10 = v4 * 8 + 1;
    v11 = v10 + 8;
    v12 = a2[1];
    v13 = a2[2];
    if (v12 >= v13)
    {
      result = (double *)(v12 + 1);
      if (__OFADD__(v12, 1))
        goto LABEL_32;
      if (v13 < (uint64_t)result)
      {
        v18 = v9;
        v17 = v11;
        v16 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
        v11 = v17;
        v9 = v18;
      }
      else
      {
        a2[1] = result;
        v16 = (_BYTE *)(*a2 + v12);
      }
      *v16 = v11 & 0x7D;
    }
    else
    {
      *(_BYTE *)(*a2 + v12) = v11;
      a2[1] = v12 + 1;
    }
    if (v9 < 65536.0)
      break;
    v15 = a2[1];
    result = (double *)(v15 + 8);
    if (__OFADD__(v15, 8))
      goto LABEL_31;
    if (a2[2] < (uint64_t)result)
    {
      result = (double *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
      *result = v6;
    }
    else
    {
      a2[1] = result;
      *(double *)(*a2 + v15) = v6;
    }
LABEL_4:
    if (++v4 == 6)
      return result;
  }
  v14 = a2[1];
  result = (double *)(v14 + 4);
  if (!__OFADD__(v14, 4))
  {
    if (a2[2] >= (uint64_t)result)
    {
      a2[1] = result;
      result = (double *)(*a2 + v14);
    }
    else
    {
      result = (double *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    }
    v5 = v6;
    *(float *)result = v5;
    goto LABEL_4;
  }
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

double CGAffineTransform.init(from:)@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v8 = 0x3FF0000000000000uLL;
  *(_QWORD *)&v9 = 0;
  *((_QWORD *)&v9 + 1) = 0x3FF0000000000000;
  v10 = 0uLL;
  closure #1 in CGAffineTransform.init(from:)((unint64_t)&v8, a1, &v7);
  if (!v2)
  {
    result = *(double *)&v8;
    v5 = v9;
    v6 = v10;
    *a2 = v8;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

unint64_t closure #1 in CGAffineTransform.init(from:)(unint64_t result, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  double *v14;
  unint64_t v15;
  float *v16;
  float v17;
  double v18;

  v4 = v3;
  v6 = a2[1];
  if (v6 >= a2[2])
  {
LABEL_38:
    a2[3] = 0;
    return result;
  }
  v8 = result;
  while (1)
  {
    v10 = a2[3];
    if (v10)
    {
      v11 = a2[4];
      if (v6 < v11)
        goto LABEL_12;
      if (v11 < v6)
        break;
      a2[3] = 0;
    }
    result = ProtobufDecoder.decodeVarint()();
    if (v3)
      goto LABEL_37;
    v10 = result;
    if (result <= 7)
      break;
LABEL_12:
    if (v10 <= 0x37)
    {
      v12 = (v10 >> 3) - 1;
      if (!(v10 >> 3))
      {
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        JUMPOUT(0x234ED685CLL);
      }
      if (v12 < 0)
        goto LABEL_40;
      v13 = v10 & 7;
      if (v13 == 5)
      {
        v16 = (float *)a2[1];
        if (a2[2] < (unint64_t)(v16 + 1))
          break;
        v17 = *v16;
        a2[1] = v16 + 1;
        v18 = v17;
      }
      else
      {
        if (v13 == 2)
        {
          result = ProtobufDecoder.decodeVarint()();
          if (v3)
            goto LABEL_37;
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_41;
          v14 = (double *)a2[1];
          v15 = a2[2];
          if (v15 < (unint64_t)v14 + result)
            break;
          a2[3] = v10 & 0xFFFFFFFFFFFFFFF8 | 1;
          a2[4] = (char *)v14 + result;
        }
        else
        {
          if (v13 != 1)
            break;
          v14 = (double *)a2[1];
          v15 = a2[2];
        }
        if (v15 < (unint64_t)(v14 + 1))
          break;
        v18 = *v14;
        a2[1] = v14 + 1;
      }
      *(double *)(v8 + 8 * v12) = v18;
    }
    else
    {
      switch(v10 & 7)
      {
        case 0uLL:
          result = ProtobufDecoder.decodeVarint()();
          if (v3)
            goto LABEL_37;
          break;
        case 1uLL:
          v9 = a2[1] + 8;
          if (a2[2] >= v9)
            goto LABEL_4;
          goto LABEL_36;
        case 2uLL:
          result = ProtobufDecoder.decodeVarint()();
          if (v3)
            goto LABEL_37;
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_42;
          v9 = a2[1] + result;
          if (a2[2] < v9)
            goto LABEL_36;
LABEL_4:
          a2[1] = v9;
          break;
        case 5uLL:
          v9 = a2[1] + 4;
          if (a2[2] < v9)
            goto LABEL_36;
          goto LABEL_4;
        default:
          goto LABEL_36;
      }
    }
    v6 = a2[1];
    if (v6 >= a2[2])
      goto LABEL_38;
  }
LABEL_36:
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  v4 = swift_allocError();
  result = swift_willThrow();
LABEL_37:
  *a3 = v4;
  return result;
}

double *protocol witness for ProtobufEncodableMessage.encode(to:) in conformance CGAffineTransform(_QWORD *a1)
{
  _OWORD *v1;
  __int128 v2;
  _OWORD v4[3];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v2 = v1[1];
  v4[0] = *v1;
  v4[1] = v2;
  v4[2] = v1[2];
  return closure #1 in CGAffineTransform.encode(to:)((double *)v4, a1);
}

double protocol witness for ProtobufDecodableMessage.init(from:) in conformance CGAffineTransform@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v8 = 0x3FF0000000000000uLL;
  *(_QWORD *)&v9 = 0;
  *((_QWORD *)&v9 + 1) = 0x3FF0000000000000;
  v10 = 0uLL;
  closure #1 in CGAffineTransform.init(from:)((unint64_t)&v8, a1, &v7);
  if (!v2)
  {
    result = *(double *)&v8;
    v5 = v9;
    v6 = v10;
    *a2 = v8;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

void specialized static _ShapeView._makeView(view:inputs:)(unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  int v25;
  _OWORD v26[5];
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a2 + 48);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v8 = *(_QWORD *)(v6 + 16);
  if (!v8)
  {
LABEL_8:
    *(_QWORD *)a3 = MEMORY[0x24BEE4AF8];
    v13 = *MEMORY[0x24BE096C0];
    *(_DWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 12) = v13;
    return;
  }
  v9 = (_QWORD *)(v6 + 32);
  v10 = v9;
  v11 = v8;
  while (*v10 != v7)
  {
    v10 += 2;
    if (!--v11)
    {
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
      while (*v9 != v12)
      {
        v9 += 2;
        if (!--v8)
          goto LABEL_8;
      }
      break;
    }
  }
  v14 = *(_OWORD *)(a2 + 48);
  v15 = *(_OWORD *)(a2 + 64);
  v16 = *(_OWORD *)(a2 + 16);
  v26[2] = *(_OWORD *)(a2 + 32);
  v26[3] = v14;
  v17 = *(_DWORD *)(a2 + 36);
  v26[4] = v15;
  v27 = *(_DWORD *)(a2 + 80);
  v26[0] = *(_OWORD *)a2;
  v26[1] = v16;
  LOBYTE(v22) = 0;
  swift_beginAccess();
  v18 = CachedEnvironment.resolvedShapeStyles(for:role:mode:)((uint64_t)v26, (unsigned __int8 *)&v22, 0x100000000);
  swift_endAccess();
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(a1, a2, v18, 0, &v23);
  if (one-time initialization token for v4 != -1)
    swift_once();
  v19 = static Semantics.v4;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FAB4 & 1) != 0)
  {
    if (!dyld_program_sdk_at_least())
      goto LABEL_19;
  }
  else if (static Semantics.forced < v19)
  {
LABEL_19:
    v21 = v24;
    v20 = v25;
    goto LABEL_20;
  }
  if ((v17 & 2) == 0)
    goto LABEL_19;
  v22 = a1;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for LeafLayoutComputer<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(0, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>);
  lazy protocol witness table accessor for type LeafLayoutComputer<_ShapeView<Rectangle, LinearGradient>> and conformance LeafLayoutComputer<A>(&lazy protocol witness table cache variable for type LeafLayoutComputer<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>> and conformance LeafLayoutComputer<A>, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>);
  v20 = Attribute.init<A>(body:value:flags:update:)();
  v21 = v24 | 0x80;
LABEL_20:
  *(_QWORD *)a3 = v23;
  *(_DWORD *)(a3 + 8) = v21;
  *(_DWORD *)(a3 + 12) = v20;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  int v25;
  _OWORD v26[5];
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a2 + 48);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v8 = *(_QWORD *)(v6 + 16);
  if (!v8)
  {
LABEL_8:
    *(_QWORD *)a3 = MEMORY[0x24BEE4AF8];
    v13 = *MEMORY[0x24BE096C0];
    *(_DWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 12) = v13;
    return;
  }
  v9 = (_QWORD *)(v6 + 32);
  v10 = v9;
  v11 = v8;
  while (*v10 != v7)
  {
    v10 += 2;
    if (!--v11)
    {
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
      while (*v9 != v12)
      {
        v9 += 2;
        if (!--v8)
          goto LABEL_8;
      }
      break;
    }
  }
  v14 = *(_OWORD *)(a2 + 48);
  v15 = *(_OWORD *)(a2 + 64);
  v16 = *(_OWORD *)(a2 + 16);
  v26[2] = *(_OWORD *)(a2 + 32);
  v26[3] = v14;
  v17 = *(_DWORD *)(a2 + 36);
  v26[4] = v15;
  v27 = *(_DWORD *)(a2 + 80);
  v26[0] = *(_OWORD *)a2;
  v26[1] = v16;
  LOBYTE(v22) = 0;
  swift_beginAccess();
  v18 = CachedEnvironment.resolvedShapeStyles(for:role:mode:)((uint64_t)v26, (unsigned __int8 *)&v22, 0x100000000);
  swift_endAccess();
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(a1, a2, v18, 0, &v23);
  if (one-time initialization token for v4 != -1)
    swift_once();
  v19 = static Semantics.v4;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FAB4 & 1) != 0)
  {
    if (!dyld_program_sdk_at_least())
      goto LABEL_19;
  }
  else if (static Semantics.forced < v19)
  {
LABEL_19:
    v21 = v24;
    v20 = v25;
    goto LABEL_20;
  }
  if ((v17 & 2) == 0)
    goto LABEL_19;
  v22 = a1;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for LeafLayoutComputer<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(0, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<CombinedContentShape, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<CombinedContentShape, ForegroundStyle>);
  lazy protocol witness table accessor for type LeafLayoutComputer<_ShapeView<Rectangle, LinearGradient>> and conformance LeafLayoutComputer<A>(&lazy protocol witness table cache variable for type LeafLayoutComputer<_ShapeView<CombinedContentShape, ForegroundStyle>> and conformance LeafLayoutComputer<A>, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<CombinedContentShape, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<CombinedContentShape, ForegroundStyle>);
  v20 = Attribute.init<A>(body:value:flags:update:)();
  v21 = v24 | 0x80;
LABEL_20:
  *(_QWORD *)a3 = v23;
  *(_DWORD *)(a3 + 8) = v21;
  *(_DWORD *)(a3 + 12) = v20;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  int v25;
  _OWORD v26[5];
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a2 + 48);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v8 = *(_QWORD *)(v6 + 16);
  if (!v8)
  {
LABEL_8:
    *(_QWORD *)a3 = MEMORY[0x24BEE4AF8];
    v13 = *MEMORY[0x24BE096C0];
    *(_DWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 12) = v13;
    return;
  }
  v9 = (_QWORD *)(v6 + 32);
  v10 = v9;
  v11 = v8;
  while (*v10 != v7)
  {
    v10 += 2;
    if (!--v11)
    {
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
      while (*v9 != v12)
      {
        v9 += 2;
        if (!--v8)
          goto LABEL_8;
      }
      break;
    }
  }
  v14 = *(_OWORD *)(a2 + 48);
  v15 = *(_OWORD *)(a2 + 64);
  v16 = *(_OWORD *)(a2 + 16);
  v26[2] = *(_OWORD *)(a2 + 32);
  v26[3] = v14;
  v17 = *(_DWORD *)(a2 + 36);
  v26[4] = v15;
  v27 = *(_DWORD *)(a2 + 80);
  v26[0] = *(_OWORD *)a2;
  v26[1] = v16;
  LOBYTE(v22) = 0;
  swift_beginAccess();
  v18 = CachedEnvironment.resolvedShapeStyles(for:role:mode:)((uint64_t)v26, (unsigned __int8 *)&v22, 0x100000000);
  swift_endAccess();
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(a1, a2, v18, 0, &v23);
  if (one-time initialization token for v4 != -1)
    swift_once();
  v19 = static Semantics.v4;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FAB4 & 1) != 0)
  {
    if (!dyld_program_sdk_at_least())
      goto LABEL_19;
  }
  else if (static Semantics.forced < v19)
  {
LABEL_19:
    v21 = v24;
    v20 = v25;
    goto LABEL_20;
  }
  if ((v17 & 2) == 0)
    goto LABEL_19;
  v22 = a1;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for LeafLayoutComputer<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(0, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<Rectangle, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, ForegroundStyle>);
  lazy protocol witness table accessor for type LeafLayoutComputer<_ShapeView<Rectangle, LinearGradient>> and conformance LeafLayoutComputer<A>(&lazy protocol witness table cache variable for type LeafLayoutComputer<_ShapeView<Rectangle, ForegroundStyle>> and conformance LeafLayoutComputer<A>, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<Rectangle, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, ForegroundStyle>);
  v20 = Attribute.init<A>(body:value:flags:update:)();
  v21 = v24 | 0x80;
LABEL_20:
  *(_QWORD *)a3 = v23;
  *(_DWORD *)(a3 + 8) = v21;
  *(_DWORD *)(a3 + 12) = v20;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  int v25;
  _OWORD v26[5];
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a2 + 48);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v8 = *(_QWORD *)(v6 + 16);
  if (!v8)
  {
LABEL_8:
    *(_QWORD *)a3 = MEMORY[0x24BEE4AF8];
    v13 = *MEMORY[0x24BE096C0];
    *(_DWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 12) = v13;
    return;
  }
  v9 = (_QWORD *)(v6 + 32);
  v10 = v9;
  v11 = v8;
  while (*v10 != v7)
  {
    v10 += 2;
    if (!--v11)
    {
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
      while (*v9 != v12)
      {
        v9 += 2;
        if (!--v8)
          goto LABEL_8;
      }
      break;
    }
  }
  v14 = *(_OWORD *)(a2 + 48);
  v15 = *(_OWORD *)(a2 + 64);
  v16 = *(_OWORD *)(a2 + 16);
  v26[2] = *(_OWORD *)(a2 + 32);
  v26[3] = v14;
  v17 = *(_DWORD *)(a2 + 36);
  v26[4] = v15;
  v27 = *(_DWORD *)(a2 + 80);
  v26[0] = *(_OWORD *)a2;
  v26[1] = v16;
  LOBYTE(v22) = 0;
  swift_beginAccess();
  v18 = CachedEnvironment.resolvedShapeStyles(for:role:mode:)((uint64_t)v26, (unsigned __int8 *)&v22, 0x100000000);
  swift_endAccess();
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(a1, a2, v18, 0, &v23);
  if (one-time initialization token for v4 != -1)
    swift_once();
  v19 = static Semantics.v4;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FAB4 & 1) != 0)
  {
    if (!dyld_program_sdk_at_least())
      goto LABEL_19;
  }
  else if (static Semantics.forced < v19)
  {
LABEL_19:
    v21 = v24;
    v20 = v25;
    goto LABEL_20;
  }
  if ((v17 & 2) == 0)
    goto LABEL_19;
  v22 = a1;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for LeafLayoutComputer<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(0, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<Ellipse, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Ellipse, ForegroundStyle>);
  lazy protocol witness table accessor for type LeafLayoutComputer<_ShapeView<Rectangle, LinearGradient>> and conformance LeafLayoutComputer<A>(&lazy protocol witness table cache variable for type LeafLayoutComputer<_ShapeView<Ellipse, ForegroundStyle>> and conformance LeafLayoutComputer<A>, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<Ellipse, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Ellipse, ForegroundStyle>);
  v20 = Attribute.init<A>(body:value:flags:update:)();
  v21 = v24 | 0x80;
LABEL_20:
  *(_QWORD *)a3 = v23;
  *(_DWORD *)(a3 + 8) = v21;
  *(_DWORD *)(a3 + 12) = v20;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  int v25;
  _OWORD v26[5];
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a2 + 48);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v8 = *(_QWORD *)(v6 + 16);
  if (!v8)
  {
LABEL_8:
    *(_QWORD *)a3 = MEMORY[0x24BEE4AF8];
    v13 = *MEMORY[0x24BE096C0];
    *(_DWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 12) = v13;
    return;
  }
  v9 = (_QWORD *)(v6 + 32);
  v10 = v9;
  v11 = v8;
  while (*v10 != v7)
  {
    v10 += 2;
    if (!--v11)
    {
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
      while (*v9 != v12)
      {
        v9 += 2;
        if (!--v8)
          goto LABEL_8;
      }
      break;
    }
  }
  v14 = *(_OWORD *)(a2 + 48);
  v15 = *(_OWORD *)(a2 + 64);
  v16 = *(_OWORD *)(a2 + 16);
  v26[2] = *(_OWORD *)(a2 + 32);
  v26[3] = v14;
  v17 = *(_DWORD *)(a2 + 36);
  v26[4] = v15;
  v27 = *(_DWORD *)(a2 + 80);
  v26[0] = *(_OWORD *)a2;
  v26[1] = v16;
  LOBYTE(v22) = 0;
  swift_beginAccess();
  v18 = CachedEnvironment.resolvedShapeStyles(for:role:mode:)((uint64_t)v26, (unsigned __int8 *)&v22, 0x100000000);
  swift_endAccess();
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(a1, a2, v18, 0, &v23);
  if (one-time initialization token for v4 != -1)
    swift_once();
  v19 = static Semantics.v4;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FAB4 & 1) != 0)
  {
    if (!dyld_program_sdk_at_least())
      goto LABEL_19;
  }
  else if (static Semantics.forced < v19)
  {
LABEL_19:
    v21 = v24;
    v20 = v25;
    goto LABEL_20;
  }
  if ((v17 & 2) == 0)
    goto LABEL_19;
  v22 = a1;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for LeafLayoutComputer<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(0, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<Capsule, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Capsule, ForegroundStyle>);
  lazy protocol witness table accessor for type LeafLayoutComputer<_ShapeView<Rectangle, LinearGradient>> and conformance LeafLayoutComputer<A>(&lazy protocol witness table cache variable for type LeafLayoutComputer<_ShapeView<Capsule, ForegroundStyle>> and conformance LeafLayoutComputer<A>, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<Capsule, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Capsule, ForegroundStyle>);
  v20 = Attribute.init<A>(body:value:flags:update:)();
  v21 = v24 | 0x80;
LABEL_20:
  *(_QWORD *)a3 = v23;
  *(_DWORD *)(a3 + 8) = v21;
  *(_DWORD *)(a3 + 12) = v20;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  int v25;
  _OWORD v26[5];
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a2 + 48);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v8 = *(_QWORD *)(v6 + 16);
  if (!v8)
  {
LABEL_8:
    *(_QWORD *)a3 = MEMORY[0x24BEE4AF8];
    v13 = *MEMORY[0x24BE096C0];
    *(_DWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 12) = v13;
    return;
  }
  v9 = (_QWORD *)(v6 + 32);
  v10 = v9;
  v11 = v8;
  while (*v10 != v7)
  {
    v10 += 2;
    if (!--v11)
    {
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
      while (*v9 != v12)
      {
        v9 += 2;
        if (!--v8)
          goto LABEL_8;
      }
      break;
    }
  }
  v14 = *(_OWORD *)(a2 + 48);
  v15 = *(_OWORD *)(a2 + 64);
  v16 = *(_OWORD *)(a2 + 16);
  v26[2] = *(_OWORD *)(a2 + 32);
  v26[3] = v14;
  v17 = *(_DWORD *)(a2 + 36);
  v26[4] = v15;
  v27 = *(_DWORD *)(a2 + 80);
  v26[0] = *(_OWORD *)a2;
  v26[1] = v16;
  LOBYTE(v22) = 0;
  swift_beginAccess();
  v18 = CachedEnvironment.resolvedShapeStyles(for:role:mode:)((uint64_t)v26, (unsigned __int8 *)&v22, 0x100000000);
  swift_endAccess();
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(a1, a2, v18, 0, &v23);
  if (one-time initialization token for v4 != -1)
    swift_once();
  v19 = static Semantics.v4;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FAB4 & 1) != 0)
  {
    if (!dyld_program_sdk_at_least())
      goto LABEL_19;
  }
  else if (static Semantics.forced < v19)
  {
LABEL_19:
    v21 = v24;
    v20 = v25;
    goto LABEL_20;
  }
  if ((v17 & 2) == 0)
    goto LABEL_19;
  v22 = a1;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for LeafLayoutComputer<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(0, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<Circle, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Circle, ForegroundStyle>);
  lazy protocol witness table accessor for type LeafLayoutComputer<_ShapeView<Rectangle, LinearGradient>> and conformance LeafLayoutComputer<A>(&lazy protocol witness table cache variable for type LeafLayoutComputer<_ShapeView<Circle, ForegroundStyle>> and conformance LeafLayoutComputer<A>, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<Circle, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Circle, ForegroundStyle>);
  v20 = Attribute.init<A>(body:value:flags:update:)();
  v21 = v24 | 0x80;
LABEL_20:
  *(_QWORD *)a3 = v23;
  *(_DWORD *)(a3 + 8) = v21;
  *(_DWORD *)(a3 + 12) = v20;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  int v25;
  _OWORD v26[5];
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a2 + 48);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v8 = *(_QWORD *)(v6 + 16);
  if (!v8)
  {
LABEL_8:
    *(_QWORD *)a3 = MEMORY[0x24BEE4AF8];
    v13 = *MEMORY[0x24BE096C0];
    *(_DWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 12) = v13;
    return;
  }
  v9 = (_QWORD *)(v6 + 32);
  v10 = v9;
  v11 = v8;
  while (*v10 != v7)
  {
    v10 += 2;
    if (!--v11)
    {
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
      while (*v9 != v12)
      {
        v9 += 2;
        if (!--v8)
          goto LABEL_8;
      }
      break;
    }
  }
  v14 = *(_OWORD *)(a2 + 48);
  v15 = *(_OWORD *)(a2 + 64);
  v16 = *(_OWORD *)(a2 + 16);
  v26[2] = *(_OWORD *)(a2 + 32);
  v26[3] = v14;
  v17 = *(_DWORD *)(a2 + 36);
  v26[4] = v15;
  v27 = *(_DWORD *)(a2 + 80);
  v26[0] = *(_OWORD *)a2;
  v26[1] = v16;
  LOBYTE(v22) = 0;
  swift_beginAccess();
  v18 = CachedEnvironment.resolvedShapeStyles(for:role:mode:)((uint64_t)v26, (unsigned __int8 *)&v22, 0x100000000);
  swift_endAccess();
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(a1, a2, v18, 0, &v23);
  if (one-time initialization token for v4 != -1)
    swift_once();
  v19 = static Semantics.v4;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FAB4 & 1) != 0)
  {
    if (!dyld_program_sdk_at_least())
      goto LABEL_19;
  }
  else if (static Semantics.forced < v19)
  {
LABEL_19:
    v21 = v24;
    v20 = v25;
    goto LABEL_20;
  }
  if ((v17 & 2) == 0)
    goto LABEL_19;
  v22 = a1;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for LeafLayoutComputer<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(0, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<Path, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Path, ForegroundStyle>);
  lazy protocol witness table accessor for type LeafLayoutComputer<_ShapeView<Rectangle, LinearGradient>> and conformance LeafLayoutComputer<A>(&lazy protocol witness table cache variable for type LeafLayoutComputer<_ShapeView<Path, ForegroundStyle>> and conformance LeafLayoutComputer<A>, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<Path, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Path, ForegroundStyle>);
  v20 = Attribute.init<A>(body:value:flags:update:)();
  v21 = v24 | 0x80;
LABEL_20:
  *(_QWORD *)a3 = v23;
  *(_DWORD *)(a3 + 8) = v21;
  *(_DWORD *)(a3 + 12) = v20;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  int v25;
  _OWORD v26[5];
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a2 + 48);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v8 = *(_QWORD *)(v6 + 16);
  if (!v8)
  {
LABEL_8:
    *(_QWORD *)a3 = MEMORY[0x24BEE4AF8];
    v13 = *MEMORY[0x24BE096C0];
    *(_DWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 12) = v13;
    return;
  }
  v9 = (_QWORD *)(v6 + 32);
  v10 = v9;
  v11 = v8;
  while (*v10 != v7)
  {
    v10 += 2;
    if (!--v11)
    {
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
      while (*v9 != v12)
      {
        v9 += 2;
        if (!--v8)
          goto LABEL_8;
      }
      break;
    }
  }
  v14 = *(_OWORD *)(a2 + 48);
  v15 = *(_OWORD *)(a2 + 64);
  v16 = *(_OWORD *)(a2 + 16);
  v26[2] = *(_OWORD *)(a2 + 32);
  v26[3] = v14;
  v17 = *(_DWORD *)(a2 + 36);
  v26[4] = v15;
  v27 = *(_DWORD *)(a2 + 80);
  v26[0] = *(_OWORD *)a2;
  v26[1] = v16;
  LOBYTE(v22) = 0;
  swift_beginAccess();
  v18 = CachedEnvironment.resolvedShapeStyles(for:role:mode:)((uint64_t)v26, (unsigned __int8 *)&v22, 0x100000000);
  swift_endAccess();
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(a1, a2, v18, 0, &v23);
  if (one-time initialization token for v4 != -1)
    swift_once();
  v19 = static Semantics.v4;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FAB4 & 1) != 0)
  {
    if (!dyld_program_sdk_at_least())
      goto LABEL_19;
  }
  else if (static Semantics.forced < v19)
  {
LABEL_19:
    v21 = v24;
    v20 = v25;
    goto LABEL_20;
  }
  if ((v17 & 2) == 0)
    goto LABEL_19;
  v22 = a1;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for LeafLayoutComputer<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(0, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<ContainerRelativeShape, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<ContainerRelativeShape, ForegroundStyle>);
  lazy protocol witness table accessor for type LeafLayoutComputer<_ShapeView<Rectangle, LinearGradient>> and conformance LeafLayoutComputer<A>(&lazy protocol witness table cache variable for type LeafLayoutComputer<_ShapeView<ContainerRelativeShape, ForegroundStyle>> and conformance LeafLayoutComputer<A>, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<ContainerRelativeShape, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<ContainerRelativeShape, ForegroundStyle>);
  v20 = Attribute.init<A>(body:value:flags:update:)();
  v21 = v24 | 0x80;
LABEL_20:
  *(_QWORD *)a3 = v23;
  *(_DWORD *)(a3 + 8) = v21;
  *(_DWORD *)(a3 + 12) = v20;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int OffsetAttribute2;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  char v36;
  char v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a2 + 48);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v8 = *(_QWORD *)(v6 + 16);
  if (!v8)
  {
LABEL_8:
    *(_QWORD *)a3 = MEMORY[0x24BEE4AF8];
    v13 = *MEMORY[0x24BE096C0];
    *(_DWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 12) = v13;
    return;
  }
  v9 = (_QWORD *)(v6 + 32);
  v10 = v9;
  v11 = v8;
  while (*v10 != v7)
  {
    v10 += 2;
    if (!--v11)
    {
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
      while (*v9 != v12)
      {
        v9 += 2;
        if (!--v8)
          goto LABEL_8;
      }
      break;
    }
  }
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v29 = *(_DWORD *)(a2 + 8);
  v15 = *(_QWORD *)(a2 + 16);
  v17 = *(_DWORD *)(a2 + 24);
  v16 = *(_DWORD *)(a2 + 28);
  v18 = *(_DWORD *)(a2 + 36);
  swift_beginAccess();
  v19 = *(_DWORD *)(v15 + 16);
  v20 = *MEMORY[0x24BE096C0];
  type metadata accessor for PropertyList.Tracker();
  v21 = swift_allocObject();
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AtomicBuffer);
  v22 = swift_allocObject();
  *(_DWORD *)(v22 + 16) = 0;
  v23 = MEMORY[0x24BEE4B00];
  v24 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v22 + 24) = 0;
  *(_QWORD *)(v22 + 32) = v23;
  *(_QWORD *)(v22 + 40) = v23;
  *(_QWORD *)(v22 + 48) = v24;
  *(_BYTE *)(v22 + 56) = 0;
  *(_QWORD *)(v21 + 16) = v22;
  v33 = OffsetAttribute2;
  v34 = v20;
  v35 = v19;
  v36 = 0;
  v37 = v18 & 1;
  v38 = v17;
  v39 = v29;
  v40 = v16;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44 = v21;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ShapeStyleResolver<EllipticalGradient>, (uint64_t)&type metadata for EllipticalGradient, (uint64_t)&protocol witness table for EllipticalGradient, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ShapeStyleResolver);
  lazy protocol witness table accessor for type ShapeStyleResolver<EllipticalGradient> and conformance ShapeStyleResolver<A>();
  v25 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  swift_bridgeObjectRelease();
  AGGraphSetFlags();
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(a1, a2, v25, 0, &v30);
  if (one-time initialization token for v4 != -1)
    swift_once();
  v26 = static Semantics.v4;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FAB4 & 1) != 0)
  {
    if (!dyld_program_sdk_at_least())
      goto LABEL_19;
  }
  else if (static Semantics.forced < v26)
  {
LABEL_19:
    v28 = v31;
    v27 = v32;
    goto LABEL_20;
  }
  if ((v18 & 2) == 0)
    goto LABEL_19;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for LeafLayoutComputer<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(0, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<Rectangle, EllipticalGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, EllipticalGradient>);
  lazy protocol witness table accessor for type LeafLayoutComputer<_ShapeView<Rectangle, LinearGradient>> and conformance LeafLayoutComputer<A>(&lazy protocol witness table cache variable for type LeafLayoutComputer<_ShapeView<Rectangle, EllipticalGradient>> and conformance LeafLayoutComputer<A>, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<Rectangle, EllipticalGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, EllipticalGradient>);
  v27 = Attribute.init<A>(body:value:flags:update:)();
  v28 = v31 | 0x80;
LABEL_20:
  *(_QWORD *)a3 = v30;
  *(_DWORD *)(a3 + 8) = v28;
  *(_DWORD *)(a3 + 12) = v27;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int OffsetAttribute2;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  char v36;
  char v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a2 + 48);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v8 = *(_QWORD *)(v6 + 16);
  if (!v8)
  {
LABEL_8:
    *(_QWORD *)a3 = MEMORY[0x24BEE4AF8];
    v13 = *MEMORY[0x24BE096C0];
    *(_DWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 12) = v13;
    return;
  }
  v9 = (_QWORD *)(v6 + 32);
  v10 = v9;
  v11 = v8;
  while (*v10 != v7)
  {
    v10 += 2;
    if (!--v11)
    {
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
      while (*v9 != v12)
      {
        v9 += 2;
        if (!--v8)
          goto LABEL_8;
      }
      break;
    }
  }
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v29 = *(_DWORD *)(a2 + 8);
  v15 = *(_QWORD *)(a2 + 16);
  v17 = *(_DWORD *)(a2 + 24);
  v16 = *(_DWORD *)(a2 + 28);
  v18 = *(_DWORD *)(a2 + 36);
  swift_beginAccess();
  v19 = *(_DWORD *)(v15 + 16);
  v20 = *MEMORY[0x24BE096C0];
  type metadata accessor for PropertyList.Tracker();
  v21 = swift_allocObject();
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AtomicBuffer);
  v22 = swift_allocObject();
  *(_DWORD *)(v22 + 16) = 0;
  v23 = MEMORY[0x24BEE4B00];
  v24 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v22 + 24) = 0;
  *(_QWORD *)(v22 + 32) = v23;
  *(_QWORD *)(v22 + 40) = v23;
  *(_QWORD *)(v22 + 48) = v24;
  *(_BYTE *)(v22 + 56) = 0;
  *(_QWORD *)(v21 + 16) = v22;
  v33 = OffsetAttribute2;
  v34 = v20;
  v35 = v19;
  v36 = 0;
  v37 = v18 & 1;
  v38 = v17;
  v39 = v29;
  v40 = v16;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44 = v21;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ShapeStyleResolver<AngularGradient>, (uint64_t)&type metadata for AngularGradient, (uint64_t)&protocol witness table for AngularGradient, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ShapeStyleResolver);
  lazy protocol witness table accessor for type ShapeStyleResolver<AngularGradient> and conformance ShapeStyleResolver<A>();
  v25 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  swift_bridgeObjectRelease();
  AGGraphSetFlags();
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(a1, a2, v25, 0, &v30);
  if (one-time initialization token for v4 != -1)
    swift_once();
  v26 = static Semantics.v4;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FAB4 & 1) != 0)
  {
    if (!dyld_program_sdk_at_least())
      goto LABEL_19;
  }
  else if (static Semantics.forced < v26)
  {
LABEL_19:
    v28 = v31;
    v27 = v32;
    goto LABEL_20;
  }
  if ((v18 & 2) == 0)
    goto LABEL_19;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for LeafLayoutComputer<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(0, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<Rectangle, AngularGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, AngularGradient>);
  lazy protocol witness table accessor for type LeafLayoutComputer<_ShapeView<Rectangle, LinearGradient>> and conformance LeafLayoutComputer<A>(&lazy protocol witness table cache variable for type LeafLayoutComputer<_ShapeView<Rectangle, AngularGradient>> and conformance LeafLayoutComputer<A>, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<Rectangle, AngularGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, AngularGradient>);
  v27 = Attribute.init<A>(body:value:flags:update:)();
  v28 = v31 | 0x80;
LABEL_20:
  *(_QWORD *)a3 = v30;
  *(_DWORD *)(a3 + 8) = v28;
  *(_DWORD *)(a3 + 12) = v27;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int OffsetAttribute2;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  char v36;
  char v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a2 + 48);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v8 = *(_QWORD *)(v6 + 16);
  if (!v8)
  {
LABEL_8:
    *(_QWORD *)a3 = MEMORY[0x24BEE4AF8];
    v13 = *MEMORY[0x24BE096C0];
    *(_DWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 12) = v13;
    return;
  }
  v9 = (_QWORD *)(v6 + 32);
  v10 = v9;
  v11 = v8;
  while (*v10 != v7)
  {
    v10 += 2;
    if (!--v11)
    {
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
      while (*v9 != v12)
      {
        v9 += 2;
        if (!--v8)
          goto LABEL_8;
      }
      break;
    }
  }
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v29 = *(_DWORD *)(a2 + 8);
  v15 = *(_QWORD *)(a2 + 16);
  v17 = *(_DWORD *)(a2 + 24);
  v16 = *(_DWORD *)(a2 + 28);
  v18 = *(_DWORD *)(a2 + 36);
  swift_beginAccess();
  v19 = *(_DWORD *)(v15 + 16);
  v20 = *MEMORY[0x24BE096C0];
  type metadata accessor for PropertyList.Tracker();
  v21 = swift_allocObject();
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AtomicBuffer);
  v22 = swift_allocObject();
  *(_DWORD *)(v22 + 16) = 0;
  v23 = MEMORY[0x24BEE4B00];
  v24 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v22 + 24) = 0;
  *(_QWORD *)(v22 + 32) = v23;
  *(_QWORD *)(v22 + 40) = v23;
  *(_QWORD *)(v22 + 48) = v24;
  *(_BYTE *)(v22 + 56) = 0;
  *(_QWORD *)(v21 + 16) = v22;
  v33 = OffsetAttribute2;
  v34 = v20;
  v35 = v19;
  v36 = 0;
  v37 = v18 & 1;
  v38 = v17;
  v39 = v29;
  v40 = v16;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44 = v21;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ShapeStyleResolver<RadialGradient>, (uint64_t)&type metadata for RadialGradient, (uint64_t)&protocol witness table for RadialGradient, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ShapeStyleResolver);
  lazy protocol witness table accessor for type ShapeStyleResolver<RadialGradient> and conformance ShapeStyleResolver<A>();
  v25 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  swift_bridgeObjectRelease();
  AGGraphSetFlags();
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(a1, a2, v25, 0, &v30);
  if (one-time initialization token for v4 != -1)
    swift_once();
  v26 = static Semantics.v4;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FAB4 & 1) != 0)
  {
    if (!dyld_program_sdk_at_least())
      goto LABEL_19;
  }
  else if (static Semantics.forced < v26)
  {
LABEL_19:
    v28 = v31;
    v27 = v32;
    goto LABEL_20;
  }
  if ((v18 & 2) == 0)
    goto LABEL_19;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for LeafLayoutComputer<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(0, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<Rectangle, RadialGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, RadialGradient>);
  lazy protocol witness table accessor for type LeafLayoutComputer<_ShapeView<Rectangle, LinearGradient>> and conformance LeafLayoutComputer<A>(&lazy protocol witness table cache variable for type LeafLayoutComputer<_ShapeView<Rectangle, RadialGradient>> and conformance LeafLayoutComputer<A>, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<Rectangle, RadialGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, RadialGradient>);
  v27 = Attribute.init<A>(body:value:flags:update:)();
  v28 = v31 | 0x80;
LABEL_20:
  *(_QWORD *)a3 = v30;
  *(_DWORD *)(a3 + 8) = v28;
  *(_DWORD *)(a3 + 12) = v27;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int OffsetAttribute2;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  char v36;
  char v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a2 + 48);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v8 = *(_QWORD *)(v6 + 16);
  if (!v8)
  {
LABEL_8:
    *(_QWORD *)a3 = MEMORY[0x24BEE4AF8];
    v13 = *MEMORY[0x24BE096C0];
    *(_DWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 12) = v13;
    return;
  }
  v9 = (_QWORD *)(v6 + 32);
  v10 = v9;
  v11 = v8;
  while (*v10 != v7)
  {
    v10 += 2;
    if (!--v11)
    {
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
      while (*v9 != v12)
      {
        v9 += 2;
        if (!--v8)
          goto LABEL_8;
      }
      break;
    }
  }
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v29 = *(_DWORD *)(a2 + 8);
  v15 = *(_QWORD *)(a2 + 16);
  v17 = *(_DWORD *)(a2 + 24);
  v16 = *(_DWORD *)(a2 + 28);
  v18 = *(_DWORD *)(a2 + 36);
  swift_beginAccess();
  v19 = *(_DWORD *)(v15 + 16);
  v20 = *MEMORY[0x24BE096C0];
  type metadata accessor for PropertyList.Tracker();
  v21 = swift_allocObject();
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AtomicBuffer);
  v22 = swift_allocObject();
  *(_DWORD *)(v22 + 16) = 0;
  v23 = MEMORY[0x24BEE4B00];
  v24 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v22 + 24) = 0;
  *(_QWORD *)(v22 + 32) = v23;
  *(_QWORD *)(v22 + 40) = v23;
  *(_QWORD *)(v22 + 48) = v24;
  *(_BYTE *)(v22 + 56) = 0;
  *(_QWORD *)(v21 + 16) = v22;
  v33 = OffsetAttribute2;
  v34 = v20;
  v35 = v19;
  v36 = 0;
  v37 = v18 & 1;
  v38 = v17;
  v39 = v29;
  v40 = v16;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44 = v21;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ShapeStyleResolver<LinearGradient>, (uint64_t)&type metadata for LinearGradient, (uint64_t)&protocol witness table for LinearGradient, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ShapeStyleResolver);
  lazy protocol witness table accessor for type ShapeStyleResolver<LinearGradient> and conformance ShapeStyleResolver<A>();
  v25 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  swift_bridgeObjectRelease();
  AGGraphSetFlags();
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(a1, a2, v25, 0, &v30);
  if (one-time initialization token for v4 != -1)
    swift_once();
  v26 = static Semantics.v4;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FAB4 & 1) != 0)
  {
    if (!dyld_program_sdk_at_least())
      goto LABEL_19;
  }
  else if (static Semantics.forced < v26)
  {
LABEL_19:
    v28 = v31;
    v27 = v32;
    goto LABEL_20;
  }
  if ((v18 & 2) == 0)
    goto LABEL_19;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for LeafLayoutComputer<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(0, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<Rectangle, LinearGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, LinearGradient>);
  lazy protocol witness table accessor for type LeafLayoutComputer<_ShapeView<Rectangle, LinearGradient>> and conformance LeafLayoutComputer<A>(&lazy protocol witness table cache variable for type LeafLayoutComputer<_ShapeView<Rectangle, LinearGradient>> and conformance LeafLayoutComputer<A>, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<Rectangle, LinearGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, LinearGradient>);
  v27 = Attribute.init<A>(body:value:flags:update:)();
  v28 = v31 | 0x80;
LABEL_20:
  *(_QWORD *)a3 = v30;
  *(_DWORD *)(a3 + 8) = v28;
  *(_DWORD *)(a3 + 12) = v27;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int OffsetAttribute2;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  char v36;
  char v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a2 + 48);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v8 = *(_QWORD *)(v6 + 16);
  if (!v8)
  {
LABEL_8:
    *(_QWORD *)a3 = MEMORY[0x24BEE4AF8];
    v13 = *MEMORY[0x24BE096C0];
    *(_DWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 12) = v13;
    return;
  }
  v9 = (_QWORD *)(v6 + 32);
  v10 = v9;
  v11 = v8;
  while (*v10 != v7)
  {
    v10 += 2;
    if (!--v11)
    {
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
      while (*v9 != v12)
      {
        v9 += 2;
        if (!--v8)
          goto LABEL_8;
      }
      break;
    }
  }
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v29 = *(_DWORD *)(a2 + 8);
  v15 = *(_QWORD *)(a2 + 16);
  v17 = *(_DWORD *)(a2 + 24);
  v16 = *(_DWORD *)(a2 + 28);
  v18 = *(_DWORD *)(a2 + 36);
  swift_beginAccess();
  v19 = *(_DWORD *)(v15 + 16);
  v20 = *MEMORY[0x24BE096C0];
  type metadata accessor for PropertyList.Tracker();
  v21 = swift_allocObject();
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AtomicBuffer);
  v22 = swift_allocObject();
  *(_DWORD *)(v22 + 16) = 0;
  v23 = MEMORY[0x24BEE4B00];
  v24 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v22 + 24) = 0;
  *(_QWORD *)(v22 + 32) = v23;
  *(_QWORD *)(v22 + 40) = v23;
  *(_QWORD *)(v22 + 48) = v24;
  *(_BYTE *)(v22 + 56) = 0;
  *(_QWORD *)(v21 + 16) = v22;
  v33 = OffsetAttribute2;
  v34 = v20;
  v35 = v19;
  v36 = 0;
  v37 = v18 & 1;
  v38 = v17;
  v39 = v29;
  v40 = v16;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44 = v21;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for ShapeStyleResolver<MeshGradient>, (uint64_t)&type metadata for MeshGradient, (uint64_t)&protocol witness table for MeshGradient, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ShapeStyleResolver);
  lazy protocol witness table accessor for type ShapeStyleResolver<MeshGradient> and conformance ShapeStyleResolver<A>();
  v25 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  swift_bridgeObjectRelease();
  AGGraphSetFlags();
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(a1, a2, v25, 0, &v30);
  if (one-time initialization token for v4 != -1)
    swift_once();
  v26 = static Semantics.v4;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FAB4 & 1) != 0)
  {
    if (!dyld_program_sdk_at_least())
      goto LABEL_19;
  }
  else if (static Semantics.forced < v26)
  {
LABEL_19:
    v28 = v31;
    v27 = v32;
    goto LABEL_20;
  }
  if ((v18 & 2) == 0)
    goto LABEL_19;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for LeafLayoutComputer<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(0, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<Rectangle, MeshGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, MeshGradient>);
  lazy protocol witness table accessor for type LeafLayoutComputer<_ShapeView<Rectangle, LinearGradient>> and conformance LeafLayoutComputer<A>(&lazy protocol witness table cache variable for type LeafLayoutComputer<_ShapeView<Rectangle, MeshGradient>> and conformance LeafLayoutComputer<A>, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<Rectangle, MeshGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, MeshGradient>);
  v27 = Attribute.init<A>(body:value:flags:update:)();
  v28 = v31 | 0x80;
LABEL_20:
  *(_QWORD *)a3 = v30;
  *(_DWORD *)(a3 + 8) = v28;
  *(_DWORD *)(a3 + 12) = v27;
}

void specialized static _ShapeView._makeView(view:inputs:)(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _DWORD *v19;
  unsigned int v20;
  unsigned int OffsetAttribute2;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  char v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 48);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v6 = *(_QWORD *)(v4 + 16);
  if (!v6)
  {
LABEL_8:
    *(_QWORD *)a2 = MEMORY[0x24BEE4AF8];
    v11 = *MEMORY[0x24BE096C0];
    *(_DWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 12) = v11;
    return;
  }
  v7 = (_QWORD *)(v4 + 32);
  v8 = v7;
  v9 = v6;
  while (*v8 != v5)
  {
    v8 += 2;
    if (!--v9)
    {
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
      while (*v7 != v10)
      {
        v7 += 2;
        if (!--v6)
          goto LABEL_8;
      }
      break;
    }
  }
  v28 = *(_DWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v14 = *(_DWORD *)(a1 + 24);
  v13 = *(_DWORD *)(a1 + 28);
  v15 = *(_DWORD *)(a1 + 36);
  v16 = *(_OWORD *)(a1 + 48);
  v17 = *(_OWORD *)(a1 + 64);
  v35 = *(_OWORD *)(a1 + 32);
  v36 = v16;
  v37 = v17;
  v38 = *(_DWORD *)(a1 + 80);
  v18 = *(_OWORD *)(a1 + 16);
  v33 = *(_OWORD *)a1;
  v34 = v18;
  v19 = (_DWORD *)(v12 + 16);
  LOBYTE(v29) = 0;
  swift_beginAccess();
  v20 = CachedEnvironment.resolvedShapeStyles(for:role:mode:)((uint64_t)&v33, (unsigned __int8 *)&v29, 0x100000000);
  swift_endAccess();
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v22 = OffsetAttribute2;
  if ((v15 & 1) == 0)
  {
    *(_QWORD *)&v33 = __PAIR64__(*v19, OffsetAttribute2);
    *((_QWORD *)&v33 + 1) = __PAIR64__(v28, v14);
    LODWORD(v34) = v13;
    *((_QWORD *)&v34 + 1) = 0;
    LOBYTE(v35) = 1;
    *((_QWORD *)&v35 + 1) = 0;
    LODWORD(v36) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<Rectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle._Inset and conformance Rectangle._Inset, (uint64_t)&type metadata for Rectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<Rectangle._Inset> and conformance AnimatableAttribute<A>();
    v22 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  *(_QWORD *)&v33 = __PAIR64__(AGGraphCreateOffsetAttribute2(), v22);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatedShape<Rectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle._Inset and conformance Rectangle._Inset, (uint64_t)&type metadata for Rectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatedShape<Rectangle._Inset>.Init, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle._Inset and conformance Rectangle._Inset, (uint64_t)&type metadata for Rectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape.Init);
  lazy protocol witness table accessor for type AnimatedShape<Rectangle._Inset>.Init and conformance AnimatedShape<A>.Init();
  v23 = Attribute.init<A>(body:value:flags:update:)();
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(v23, a1, v20, 0, &v30);
  if (one-time initialization token for v4 != -1)
    swift_once();
  v24 = static Semantics.v4;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FAB4 & 1) != 0)
  {
    v25 = dyld_program_sdk_at_least();
    if ((v15 & 2) == 0)
      goto LABEL_21;
  }
  else
  {
    v25 = static Semantics.forced >= v24;
    if ((v15 & 2) == 0)
    {
LABEL_21:
      v27 = v31;
      v26 = v32;
      goto LABEL_22;
    }
  }
  if ((v25 & 1) == 0)
    goto LABEL_21;
  v29 = v23;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for LeafLayoutComputer<AnimatedShape<AnyShape>>(0, &lazy cache variable for type metadata for LeafLayoutComputer<AnimatedShape<Rectangle._Inset>>, &lazy cache variable for type metadata for AnimatedShape<Rectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle._Inset and conformance Rectangle._Inset, (uint64_t)&type metadata for Rectangle._Inset);
  lazy protocol witness table accessor for type LeafLayoutComputer<AnimatedShape<Rectangle._Inset>> and conformance LeafLayoutComputer<A>();
  v26 = Attribute.init<A>(body:value:flags:update:)();
  v27 = v31 | 0x80;
LABEL_22:
  *(_QWORD *)a2 = v30;
  *(_DWORD *)(a2 + 8) = v27;
  *(_DWORD *)(a2 + 12) = v26;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _DWORD *v19;
  unsigned int v20;
  unsigned int OffsetAttribute2;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  char v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 48);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v6 = *(_QWORD *)(v4 + 16);
  if (!v6)
  {
LABEL_8:
    *(_QWORD *)a2 = MEMORY[0x24BEE4AF8];
    v11 = *MEMORY[0x24BE096C0];
    *(_DWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 12) = v11;
    return;
  }
  v7 = (_QWORD *)(v4 + 32);
  v8 = v7;
  v9 = v6;
  while (*v8 != v5)
  {
    v8 += 2;
    if (!--v9)
    {
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
      while (*v7 != v10)
      {
        v7 += 2;
        if (!--v6)
          goto LABEL_8;
      }
      break;
    }
  }
  v28 = *(_DWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v14 = *(_DWORD *)(a1 + 24);
  v13 = *(_DWORD *)(a1 + 28);
  v15 = *(_DWORD *)(a1 + 36);
  v16 = *(_OWORD *)(a1 + 48);
  v17 = *(_OWORD *)(a1 + 64);
  v35 = *(_OWORD *)(a1 + 32);
  v36 = v16;
  v37 = v17;
  v38 = *(_DWORD *)(a1 + 80);
  v18 = *(_OWORD *)(a1 + 16);
  v33 = *(_OWORD *)a1;
  v34 = v18;
  v19 = (_DWORD *)(v12 + 16);
  LOBYTE(v29) = 0;
  swift_beginAccess();
  v20 = CachedEnvironment.resolvedShapeStyles(for:role:mode:)((uint64_t)&v33, (unsigned __int8 *)&v29, 0x100000000);
  swift_endAccess();
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v22 = OffsetAttribute2;
  if ((v15 & 1) == 0)
  {
    *(_QWORD *)&v33 = __PAIR64__(*v19, OffsetAttribute2);
    *((_QWORD *)&v33 + 1) = __PAIR64__(v28, v14);
    LODWORD(v34) = v13;
    *((_QWORD *)&v34 + 1) = 0;
    LOBYTE(v35) = 1;
    *((_QWORD *)&v35 + 1) = 0;
    LODWORD(v36) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<Ellipse._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Ellipse._Inset and conformance Ellipse._Inset, (uint64_t)&type metadata for Ellipse._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<Ellipse._Inset> and conformance AnimatableAttribute<A>();
    v22 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  *(_QWORD *)&v33 = __PAIR64__(AGGraphCreateOffsetAttribute2(), v22);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatedShape<Ellipse._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Ellipse._Inset and conformance Ellipse._Inset, (uint64_t)&type metadata for Ellipse._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatedShape<Ellipse._Inset>.Init, (uint64_t (*)(void))lazy protocol witness table accessor for type Ellipse._Inset and conformance Ellipse._Inset, (uint64_t)&type metadata for Ellipse._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape.Init);
  lazy protocol witness table accessor for type AnimatedShape<Ellipse._Inset>.Init and conformance AnimatedShape<A>.Init();
  v23 = Attribute.init<A>(body:value:flags:update:)();
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(v23, a1, v20, 0, &v30);
  if (one-time initialization token for v4 != -1)
    swift_once();
  v24 = static Semantics.v4;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FAB4 & 1) != 0)
  {
    v25 = dyld_program_sdk_at_least();
    if ((v15 & 2) == 0)
      goto LABEL_21;
  }
  else
  {
    v25 = static Semantics.forced >= v24;
    if ((v15 & 2) == 0)
    {
LABEL_21:
      v27 = v31;
      v26 = v32;
      goto LABEL_22;
    }
  }
  if ((v25 & 1) == 0)
    goto LABEL_21;
  v29 = v23;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for LeafLayoutComputer<AnimatedShape<AnyShape>>(0, &lazy cache variable for type metadata for LeafLayoutComputer<AnimatedShape<Ellipse._Inset>>, &lazy cache variable for type metadata for AnimatedShape<Ellipse._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Ellipse._Inset and conformance Ellipse._Inset, (uint64_t)&type metadata for Ellipse._Inset);
  lazy protocol witness table accessor for type LeafLayoutComputer<AnimatedShape<Ellipse._Inset>> and conformance LeafLayoutComputer<A>();
  v26 = Attribute.init<A>(body:value:flags:update:)();
  v27 = v31 | 0x80;
LABEL_22:
  *(_QWORD *)a2 = v30;
  *(_DWORD *)(a2 + 8) = v27;
  *(_DWORD *)(a2 + 12) = v26;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _DWORD *v19;
  unsigned int v20;
  unsigned int OffsetAttribute2;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  char v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 48);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v6 = *(_QWORD *)(v4 + 16);
  if (!v6)
  {
LABEL_8:
    *(_QWORD *)a2 = MEMORY[0x24BEE4AF8];
    v11 = *MEMORY[0x24BE096C0];
    *(_DWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 12) = v11;
    return;
  }
  v7 = (_QWORD *)(v4 + 32);
  v8 = v7;
  v9 = v6;
  while (*v8 != v5)
  {
    v8 += 2;
    if (!--v9)
    {
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
      while (*v7 != v10)
      {
        v7 += 2;
        if (!--v6)
          goto LABEL_8;
      }
      break;
    }
  }
  v28 = *(_DWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v14 = *(_DWORD *)(a1 + 24);
  v13 = *(_DWORD *)(a1 + 28);
  v15 = *(_DWORD *)(a1 + 36);
  v16 = *(_OWORD *)(a1 + 48);
  v17 = *(_OWORD *)(a1 + 64);
  v35 = *(_OWORD *)(a1 + 32);
  v36 = v16;
  v37 = v17;
  v38 = *(_DWORD *)(a1 + 80);
  v18 = *(_OWORD *)(a1 + 16);
  v33 = *(_OWORD *)a1;
  v34 = v18;
  v19 = (_DWORD *)(v12 + 16);
  LOBYTE(v29) = 0;
  swift_beginAccess();
  v20 = CachedEnvironment.resolvedShapeStyles(for:role:mode:)((uint64_t)&v33, (unsigned __int8 *)&v29, 0x100000000);
  swift_endAccess();
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v22 = OffsetAttribute2;
  if ((v15 & 1) == 0)
  {
    *(_QWORD *)&v33 = __PAIR64__(*v19, OffsetAttribute2);
    *((_QWORD *)&v33 + 1) = __PAIR64__(v28, v14);
    LODWORD(v34) = v13;
    *((_QWORD *)&v34 + 1) = 0;
    LOBYTE(v35) = 1;
    *((_QWORD *)&v35 + 1) = 0;
    LODWORD(v36) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<Capsule._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Capsule._Inset and conformance Capsule._Inset, (uint64_t)&type metadata for Capsule._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<Capsule._Inset> and conformance AnimatableAttribute<A>();
    v22 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  *(_QWORD *)&v33 = __PAIR64__(AGGraphCreateOffsetAttribute2(), v22);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatedShape<Capsule._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Capsule._Inset and conformance Capsule._Inset, (uint64_t)&type metadata for Capsule._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatedShape<Capsule._Inset>.Init, (uint64_t (*)(void))lazy protocol witness table accessor for type Capsule._Inset and conformance Capsule._Inset, (uint64_t)&type metadata for Capsule._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape.Init);
  lazy protocol witness table accessor for type AnimatedShape<Capsule._Inset>.Init and conformance AnimatedShape<A>.Init();
  v23 = Attribute.init<A>(body:value:flags:update:)();
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(v23, a1, v20, 0, &v30);
  if (one-time initialization token for v4 != -1)
    swift_once();
  v24 = static Semantics.v4;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FAB4 & 1) != 0)
  {
    v25 = dyld_program_sdk_at_least();
    if ((v15 & 2) == 0)
      goto LABEL_21;
  }
  else
  {
    v25 = static Semantics.forced >= v24;
    if ((v15 & 2) == 0)
    {
LABEL_21:
      v27 = v31;
      v26 = v32;
      goto LABEL_22;
    }
  }
  if ((v25 & 1) == 0)
    goto LABEL_21;
  v29 = v23;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for LeafLayoutComputer<AnimatedShape<AnyShape>>(0, &lazy cache variable for type metadata for LeafLayoutComputer<AnimatedShape<Capsule._Inset>>, &lazy cache variable for type metadata for AnimatedShape<Capsule._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Capsule._Inset and conformance Capsule._Inset, (uint64_t)&type metadata for Capsule._Inset);
  lazy protocol witness table accessor for type LeafLayoutComputer<AnimatedShape<Capsule._Inset>> and conformance LeafLayoutComputer<A>();
  v26 = Attribute.init<A>(body:value:flags:update:)();
  v27 = v31 | 0x80;
LABEL_22:
  *(_QWORD *)a2 = v30;
  *(_DWORD *)(a2 + 8) = v27;
  *(_DWORD *)(a2 + 12) = v26;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _DWORD *v19;
  unsigned int v20;
  unsigned int OffsetAttribute2;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  char v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 48);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v6 = *(_QWORD *)(v4 + 16);
  if (!v6)
  {
LABEL_8:
    *(_QWORD *)a2 = MEMORY[0x24BEE4AF8];
    v11 = *MEMORY[0x24BE096C0];
    *(_DWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 12) = v11;
    return;
  }
  v7 = (_QWORD *)(v4 + 32);
  v8 = v7;
  v9 = v6;
  while (*v8 != v5)
  {
    v8 += 2;
    if (!--v9)
    {
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
      while (*v7 != v10)
      {
        v7 += 2;
        if (!--v6)
          goto LABEL_8;
      }
      break;
    }
  }
  v28 = *(_DWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v14 = *(_DWORD *)(a1 + 24);
  v13 = *(_DWORD *)(a1 + 28);
  v15 = *(_DWORD *)(a1 + 36);
  v16 = *(_OWORD *)(a1 + 48);
  v17 = *(_OWORD *)(a1 + 64);
  v35 = *(_OWORD *)(a1 + 32);
  v36 = v16;
  v37 = v17;
  v38 = *(_DWORD *)(a1 + 80);
  v18 = *(_OWORD *)(a1 + 16);
  v33 = *(_OWORD *)a1;
  v34 = v18;
  v19 = (_DWORD *)(v12 + 16);
  LOBYTE(v29) = 0;
  swift_beginAccess();
  v20 = CachedEnvironment.resolvedShapeStyles(for:role:mode:)((uint64_t)&v33, (unsigned __int8 *)&v29, 0x100000000);
  swift_endAccess();
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v22 = OffsetAttribute2;
  if ((v15 & 1) == 0)
  {
    *(_QWORD *)&v33 = __PAIR64__(*v19, OffsetAttribute2);
    *((_QWORD *)&v33 + 1) = __PAIR64__(v28, v14);
    LODWORD(v34) = v13;
    *((_QWORD *)&v34 + 1) = 0;
    LOBYTE(v35) = 1;
    *((_QWORD *)&v35 + 1) = 0;
    LODWORD(v36) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<Circle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset, (uint64_t)&type metadata for Circle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<Circle._Inset> and conformance AnimatableAttribute<A>();
    v22 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  *(_QWORD *)&v33 = __PAIR64__(AGGraphCreateOffsetAttribute2(), v22);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatedShape<Circle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset, (uint64_t)&type metadata for Circle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatedShape<Circle._Inset>.Init, (uint64_t (*)(void))lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset, (uint64_t)&type metadata for Circle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape.Init);
  lazy protocol witness table accessor for type AnimatedShape<Circle._Inset>.Init and conformance AnimatedShape<A>.Init();
  v23 = Attribute.init<A>(body:value:flags:update:)();
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(v23, a1, v20, 0, &v30);
  if (one-time initialization token for v4 != -1)
    swift_once();
  v24 = static Semantics.v4;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FAB4 & 1) != 0)
  {
    v25 = dyld_program_sdk_at_least();
    if ((v15 & 2) == 0)
      goto LABEL_21;
  }
  else
  {
    v25 = static Semantics.forced >= v24;
    if ((v15 & 2) == 0)
    {
LABEL_21:
      v27 = v31;
      v26 = v32;
      goto LABEL_22;
    }
  }
  if ((v25 & 1) == 0)
    goto LABEL_21;
  v29 = v23;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for LeafLayoutComputer<AnimatedShape<AnyShape>>(0, &lazy cache variable for type metadata for LeafLayoutComputer<AnimatedShape<Circle._Inset>>, &lazy cache variable for type metadata for AnimatedShape<Circle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset, (uint64_t)&type metadata for Circle._Inset);
  lazy protocol witness table accessor for type LeafLayoutComputer<AnimatedShape<Circle._Inset>> and conformance LeafLayoutComputer<A>();
  v26 = Attribute.init<A>(body:value:flags:update:)();
  v27 = v31 | 0x80;
LABEL_22:
  *(_QWORD *)a2 = v30;
  *(_DWORD *)(a2 + 8) = v27;
  *(_DWORD *)(a2 + 12) = v26;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _DWORD *v19;
  unsigned int v20;
  unsigned int OffsetAttribute2;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  char v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  __int128 v33;
  _BYTE v34[48];
  __int128 v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 48);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v6 = *(_QWORD *)(v4 + 16);
  if (!v6)
  {
LABEL_8:
    *(_QWORD *)a2 = MEMORY[0x24BEE4AF8];
    v11 = *MEMORY[0x24BE096C0];
    *(_DWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 12) = v11;
    return;
  }
  v7 = (_QWORD *)(v4 + 32);
  v8 = v7;
  v9 = v6;
  while (*v8 != v5)
  {
    v8 += 2;
    if (!--v9)
    {
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
      while (*v7 != v10)
      {
        v7 += 2;
        if (!--v6)
          goto LABEL_8;
      }
      break;
    }
  }
  v28 = *(_DWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v14 = *(_DWORD *)(a1 + 24);
  v13 = *(_DWORD *)(a1 + 28);
  v15 = *(_DWORD *)(a1 + 36);
  v16 = *(_OWORD *)(a1 + 48);
  v17 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)&v34[16] = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v34[32] = v16;
  v35 = v17;
  v36 = *(_DWORD *)(a1 + 80);
  v18 = *(_OWORD *)(a1 + 16);
  v33 = *(_OWORD *)a1;
  *(_OWORD *)v34 = v18;
  v19 = (_DWORD *)(v12 + 16);
  LOBYTE(v29) = 0;
  swift_beginAccess();
  v20 = CachedEnvironment.resolvedShapeStyles(for:role:mode:)((uint64_t)&v33, (unsigned __int8 *)&v29, 0x100000000);
  swift_endAccess();
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v22 = OffsetAttribute2;
  if ((v15 & 1) == 0)
  {
    *(_QWORD *)&v33 = __PAIR64__(*v19, OffsetAttribute2);
    *((_QWORD *)&v33 + 1) = __PAIR64__(v28, v14);
    *(_DWORD *)v34 = v13;
    memset(&v34[8], 0, 32);
    v34[40] = 1;
    *(_QWORD *)&v35 = 0;
    DWORD2(v35) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<UnevenRoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle, (uint64_t)&type metadata for UnevenRoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<UnevenRoundedRectangle> and conformance AnimatableAttribute<A>();
    v22 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  *(_QWORD *)&v33 = __PAIR64__(AGGraphCreateOffsetAttribute2(), v22);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle, (uint64_t)&type metadata for UnevenRoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle>.Init, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle, (uint64_t)&type metadata for UnevenRoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape.Init);
  lazy protocol witness table accessor for type AnimatedShape<UnevenRoundedRectangle>.Init and conformance AnimatedShape<A>.Init();
  v23 = Attribute.init<A>(body:value:flags:update:)();
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(v23, a1, v20, 0, &v30);
  if (one-time initialization token for v4 != -1)
    swift_once();
  v24 = static Semantics.v4;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FAB4 & 1) != 0)
  {
    v25 = dyld_program_sdk_at_least();
    if ((v15 & 2) == 0)
      goto LABEL_21;
  }
  else
  {
    v25 = static Semantics.forced >= v24;
    if ((v15 & 2) == 0)
    {
LABEL_21:
      v27 = v31;
      v26 = v32;
      goto LABEL_22;
    }
  }
  if ((v25 & 1) == 0)
    goto LABEL_21;
  v29 = v23;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for LeafLayoutComputer<AnimatedShape<AnyShape>>(0, &lazy cache variable for type metadata for LeafLayoutComputer<AnimatedShape<UnevenRoundedRectangle>>, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle, (uint64_t)&type metadata for UnevenRoundedRectangle);
  lazy protocol witness table accessor for type LeafLayoutComputer<AnimatedShape<UnevenRoundedRectangle>> and conformance LeafLayoutComputer<A>();
  v26 = Attribute.init<A>(body:value:flags:update:)();
  v27 = v31 | 0x80;
LABEL_22:
  *(_QWORD *)a2 = v30;
  *(_DWORD *)(a2 + 8) = v27;
  *(_DWORD *)(a2 + 12) = v26;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _DWORD *v19;
  unsigned int v20;
  unsigned int OffsetAttribute2;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  char v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  __int128 v33;
  _BYTE v34[48];
  __int128 v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 48);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v6 = *(_QWORD *)(v4 + 16);
  if (!v6)
  {
LABEL_8:
    *(_QWORD *)a2 = MEMORY[0x24BEE4AF8];
    v11 = *MEMORY[0x24BE096C0];
    *(_DWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 12) = v11;
    return;
  }
  v7 = (_QWORD *)(v4 + 32);
  v8 = v7;
  v9 = v6;
  while (*v8 != v5)
  {
    v8 += 2;
    if (!--v9)
    {
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
      while (*v7 != v10)
      {
        v7 += 2;
        if (!--v6)
          goto LABEL_8;
      }
      break;
    }
  }
  v28 = *(_DWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v14 = *(_DWORD *)(a1 + 24);
  v13 = *(_DWORD *)(a1 + 28);
  v15 = *(_DWORD *)(a1 + 36);
  v16 = *(_OWORD *)(a1 + 48);
  v17 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)&v34[16] = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v34[32] = v16;
  v35 = v17;
  v36 = *(_DWORD *)(a1 + 80);
  v18 = *(_OWORD *)(a1 + 16);
  v33 = *(_OWORD *)a1;
  *(_OWORD *)v34 = v18;
  v19 = (_DWORD *)(v12 + 16);
  LOBYTE(v29) = 0;
  swift_beginAccess();
  v20 = CachedEnvironment.resolvedShapeStyles(for:role:mode:)((uint64_t)&v33, (unsigned __int8 *)&v29, 0x100000000);
  swift_endAccess();
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v22 = OffsetAttribute2;
  if ((v15 & 1) == 0)
  {
    *(_QWORD *)&v33 = __PAIR64__(*v19, OffsetAttribute2);
    *((_QWORD *)&v33 + 1) = __PAIR64__(v28, v14);
    *(_DWORD *)v34 = v13;
    memset(&v34[8], 0, 40);
    LOBYTE(v35) = 1;
    *((_QWORD *)&v35 + 1) = 0;
    v36 = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<UnevenRoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset, (uint64_t)&type metadata for UnevenRoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<UnevenRoundedRectangle._Inset> and conformance AnimatableAttribute<A>();
    v22 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  *(_QWORD *)&v33 = __PAIR64__(AGGraphCreateOffsetAttribute2(), v22);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset, (uint64_t)&type metadata for UnevenRoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle._Inset>.Init, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset, (uint64_t)&type metadata for UnevenRoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape.Init);
  lazy protocol witness table accessor for type AnimatedShape<UnevenRoundedRectangle._Inset>.Init and conformance AnimatedShape<A>.Init();
  v23 = Attribute.init<A>(body:value:flags:update:)();
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(v23, a1, v20, 0, &v30);
  if (one-time initialization token for v4 != -1)
    swift_once();
  v24 = static Semantics.v4;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FAB4 & 1) != 0)
  {
    v25 = dyld_program_sdk_at_least();
    if ((v15 & 2) == 0)
      goto LABEL_21;
  }
  else
  {
    v25 = static Semantics.forced >= v24;
    if ((v15 & 2) == 0)
    {
LABEL_21:
      v27 = v31;
      v26 = v32;
      goto LABEL_22;
    }
  }
  if ((v25 & 1) == 0)
    goto LABEL_21;
  v29 = v23;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for LeafLayoutComputer<AnimatedShape<AnyShape>>(0, &lazy cache variable for type metadata for LeafLayoutComputer<AnimatedShape<UnevenRoundedRectangle._Inset>>, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset, (uint64_t)&type metadata for UnevenRoundedRectangle._Inset);
  lazy protocol witness table accessor for type LeafLayoutComputer<AnimatedShape<UnevenRoundedRectangle._Inset>> and conformance LeafLayoutComputer<A>();
  v26 = Attribute.init<A>(body:value:flags:update:)();
  v27 = v31 | 0x80;
LABEL_22:
  *(_QWORD *)a2 = v30;
  *(_DWORD *)(a2 + 8) = v27;
  *(_DWORD *)(a2 + 12) = v26;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _DWORD *v19;
  unsigned int v20;
  unsigned int OffsetAttribute2;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  char v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 48);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v6 = *(_QWORD *)(v4 + 16);
  if (!v6)
  {
LABEL_8:
    *(_QWORD *)a2 = MEMORY[0x24BEE4AF8];
    v11 = *MEMORY[0x24BE096C0];
    *(_DWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 12) = v11;
    return;
  }
  v7 = (_QWORD *)(v4 + 32);
  v8 = v7;
  v9 = v6;
  while (*v8 != v5)
  {
    v8 += 2;
    if (!--v9)
    {
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
      while (*v7 != v10)
      {
        v7 += 2;
        if (!--v6)
          goto LABEL_8;
      }
      break;
    }
  }
  v28 = *(_DWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v14 = *(_DWORD *)(a1 + 24);
  v13 = *(_DWORD *)(a1 + 28);
  v15 = *(_DWORD *)(a1 + 36);
  v16 = *(_OWORD *)(a1 + 48);
  v17 = *(_OWORD *)(a1 + 64);
  v35 = *(_OWORD *)(a1 + 32);
  v36 = v16;
  v37 = v17;
  v38 = *(_DWORD *)(a1 + 80);
  v18 = *(_OWORD *)(a1 + 16);
  v33 = *(_OWORD *)a1;
  v34 = v18;
  v19 = (_DWORD *)(v12 + 16);
  LOBYTE(v29) = 0;
  swift_beginAccess();
  v20 = CachedEnvironment.resolvedShapeStyles(for:role:mode:)((uint64_t)&v33, (unsigned __int8 *)&v29, 0x100000000);
  swift_endAccess();
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v22 = OffsetAttribute2;
  if ((v15 & 1) == 0)
  {
    *(_QWORD *)&v33 = __PAIR64__(*v19, OffsetAttribute2);
    *((_QWORD *)&v33 + 1) = __PAIR64__(v28, v14);
    LODWORD(v34) = v13;
    *((_QWORD *)&v34 + 1) = 0;
    LOBYTE(v35) = 1;
    *((_QWORD *)&v35 + 1) = 0;
    LODWORD(v36) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<ContainerRelativeShape._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset, (uint64_t)&type metadata for ContainerRelativeShape._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<ContainerRelativeShape._Inset> and conformance AnimatableAttribute<A>();
    v22 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  *(_QWORD *)&v33 = __PAIR64__(AGGraphCreateOffsetAttribute2(), v22);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatedShape<ContainerRelativeShape._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset, (uint64_t)&type metadata for ContainerRelativeShape._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatedShape<ContainerRelativeShape._Inset>.Init, (uint64_t (*)(void))lazy protocol witness table accessor for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset, (uint64_t)&type metadata for ContainerRelativeShape._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape.Init);
  lazy protocol witness table accessor for type AnimatedShape<ContainerRelativeShape._Inset>.Init and conformance AnimatedShape<A>.Init();
  v23 = Attribute.init<A>(body:value:flags:update:)();
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(v23, a1, v20, 0, &v30);
  if (one-time initialization token for v4 != -1)
    swift_once();
  v24 = static Semantics.v4;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FAB4 & 1) != 0)
  {
    v25 = dyld_program_sdk_at_least();
    if ((v15 & 2) == 0)
      goto LABEL_21;
  }
  else
  {
    v25 = static Semantics.forced >= v24;
    if ((v15 & 2) == 0)
    {
LABEL_21:
      v27 = v31;
      v26 = v32;
      goto LABEL_22;
    }
  }
  if ((v25 & 1) == 0)
    goto LABEL_21;
  v29 = v23;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for LeafLayoutComputer<AnimatedShape<AnyShape>>(0, &lazy cache variable for type metadata for LeafLayoutComputer<AnimatedShape<ContainerRelativeShape._Inset>>, &lazy cache variable for type metadata for AnimatedShape<ContainerRelativeShape._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset, (uint64_t)&type metadata for ContainerRelativeShape._Inset);
  lazy protocol witness table accessor for type LeafLayoutComputer<AnimatedShape<ContainerRelativeShape._Inset>> and conformance LeafLayoutComputer<A>();
  v26 = Attribute.init<A>(body:value:flags:update:)();
  v27 = v31 | 0x80;
LABEL_22:
  *(_QWORD *)a2 = v30;
  *(_DWORD *)(a2 + 8) = v27;
  *(_DWORD *)(a2 + 12) = v26;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _DWORD *v19;
  unsigned int v20;
  unsigned int OffsetAttribute2;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  char v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 48);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v6 = *(_QWORD *)(v4 + 16);
  if (!v6)
  {
LABEL_8:
    *(_QWORD *)a2 = MEMORY[0x24BEE4AF8];
    v11 = *MEMORY[0x24BE096C0];
    *(_DWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 12) = v11;
    return;
  }
  v7 = (_QWORD *)(v4 + 32);
  v8 = v7;
  v9 = v6;
  while (*v8 != v5)
  {
    v8 += 2;
    if (!--v9)
    {
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
      while (*v7 != v10)
      {
        v7 += 2;
        if (!--v6)
          goto LABEL_8;
      }
      break;
    }
  }
  v28 = *(_DWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v14 = *(_DWORD *)(a1 + 24);
  v13 = *(_DWORD *)(a1 + 28);
  v15 = *(_DWORD *)(a1 + 36);
  v16 = *(_OWORD *)(a1 + 48);
  v17 = *(_OWORD *)(a1 + 64);
  v35 = *(_OWORD *)(a1 + 32);
  v36 = v16;
  v37 = v17;
  v38 = *(_DWORD *)(a1 + 80);
  v18 = *(_OWORD *)(a1 + 16);
  v33 = *(_OWORD *)a1;
  v34 = v18;
  v19 = (_DWORD *)(v12 + 16);
  LOBYTE(v29) = 0;
  swift_beginAccess();
  v20 = CachedEnvironment.resolvedShapeStyles(for:role:mode:)((uint64_t)&v33, (unsigned __int8 *)&v29, 0x100000000);
  swift_endAccess();
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v22 = OffsetAttribute2;
  if ((v15 & 1) == 0)
  {
    *(_QWORD *)&v33 = __PAIR64__(*v19, OffsetAttribute2);
    *((_QWORD *)&v33 + 1) = __PAIR64__(v28, v14);
    LODWORD(v34) = v13;
    *((_QWORD *)&v34 + 1) = 0;
    *(_QWORD *)&v35 = 0;
    BYTE8(v35) = 1;
    *(_QWORD *)&v36 = 0;
    DWORD2(v36) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<RoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle, (uint64_t)&type metadata for RoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<RoundedRectangle> and conformance AnimatableAttribute<A>();
    v22 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  *(_QWORD *)&v33 = __PAIR64__(AGGraphCreateOffsetAttribute2(), v22);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle, (uint64_t)&type metadata for RoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle>.Init, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle, (uint64_t)&type metadata for RoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape.Init);
  lazy protocol witness table accessor for type AnimatedShape<RoundedRectangle>.Init and conformance AnimatedShape<A>.Init();
  v23 = Attribute.init<A>(body:value:flags:update:)();
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(v23, a1, v20, 0, &v30);
  if (one-time initialization token for v4 != -1)
    swift_once();
  v24 = static Semantics.v4;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FAB4 & 1) != 0)
  {
    v25 = dyld_program_sdk_at_least();
    if ((v15 & 2) == 0)
      goto LABEL_21;
  }
  else
  {
    v25 = static Semantics.forced >= v24;
    if ((v15 & 2) == 0)
    {
LABEL_21:
      v27 = v31;
      v26 = v32;
      goto LABEL_22;
    }
  }
  if ((v25 & 1) == 0)
    goto LABEL_21;
  v29 = v23;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for LeafLayoutComputer<AnimatedShape<AnyShape>>(0, &lazy cache variable for type metadata for LeafLayoutComputer<AnimatedShape<RoundedRectangle>>, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle, (uint64_t)&type metadata for RoundedRectangle);
  lazy protocol witness table accessor for type LeafLayoutComputer<AnimatedShape<RoundedRectangle>> and conformance LeafLayoutComputer<A>();
  v26 = Attribute.init<A>(body:value:flags:update:)();
  v27 = v31 | 0x80;
LABEL_22:
  *(_QWORD *)a2 = v30;
  *(_DWORD *)(a2 + 8) = v27;
  *(_DWORD *)(a2 + 12) = v26;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _DWORD *v19;
  unsigned int v20;
  unsigned int OffsetAttribute2;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  char v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 48);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v6 = *(_QWORD *)(v4 + 16);
  if (!v6)
  {
LABEL_8:
    *(_QWORD *)a2 = MEMORY[0x24BEE4AF8];
    v11 = *MEMORY[0x24BE096C0];
    *(_DWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 12) = v11;
    return;
  }
  v7 = (_QWORD *)(v4 + 32);
  v8 = v7;
  v9 = v6;
  while (*v8 != v5)
  {
    v8 += 2;
    if (!--v9)
    {
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
      while (*v7 != v10)
      {
        v7 += 2;
        if (!--v6)
          goto LABEL_8;
      }
      break;
    }
  }
  v28 = *(_DWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v14 = *(_DWORD *)(a1 + 24);
  v13 = *(_DWORD *)(a1 + 28);
  v15 = *(_DWORD *)(a1 + 36);
  v16 = *(_OWORD *)(a1 + 48);
  v17 = *(_OWORD *)(a1 + 64);
  v35 = *(_OWORD *)(a1 + 32);
  v36 = v16;
  v37 = v17;
  v38 = *(_DWORD *)(a1 + 80);
  v18 = *(_OWORD *)(a1 + 16);
  v33 = *(_OWORD *)a1;
  v34 = v18;
  v19 = (_DWORD *)(v12 + 16);
  LOBYTE(v29) = 0;
  swift_beginAccess();
  v20 = CachedEnvironment.resolvedShapeStyles(for:role:mode:)((uint64_t)&v33, (unsigned __int8 *)&v29, 0x100000000);
  swift_endAccess();
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v22 = OffsetAttribute2;
  if ((v15 & 1) == 0)
  {
    *(_QWORD *)&v33 = __PAIR64__(*v19, OffsetAttribute2);
    *((_QWORD *)&v33 + 1) = __PAIR64__(v28, v14);
    LODWORD(v34) = v13;
    v35 = 0uLL;
    *((_QWORD *)&v34 + 1) = 0;
    LOBYTE(v36) = 1;
    *((_QWORD *)&v36 + 1) = 0;
    LODWORD(v37) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatableAttribute<RoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset, (uint64_t)&type metadata for RoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<RoundedRectangle._Inset> and conformance AnimatableAttribute<A>();
    v22 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  *(_QWORD *)&v33 = __PAIR64__(AGGraphCreateOffsetAttribute2(), v22);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset, (uint64_t)&type metadata for RoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle._Inset>.Init, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset, (uint64_t)&type metadata for RoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape.Init);
  lazy protocol witness table accessor for type AnimatedShape<RoundedRectangle._Inset>.Init and conformance AnimatedShape<A>.Init();
  v23 = Attribute.init<A>(body:value:flags:update:)();
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(v23, a1, v20, 0, &v30);
  if (one-time initialization token for v4 != -1)
    swift_once();
  v24 = static Semantics.v4;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FAB4 & 1) != 0)
  {
    v25 = dyld_program_sdk_at_least();
    if ((v15 & 2) == 0)
      goto LABEL_21;
  }
  else
  {
    v25 = static Semantics.forced >= v24;
    if ((v15 & 2) == 0)
    {
LABEL_21:
      v27 = v31;
      v26 = v32;
      goto LABEL_22;
    }
  }
  if ((v25 & 1) == 0)
    goto LABEL_21;
  v29 = v23;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for LeafLayoutComputer<AnimatedShape<AnyShape>>(0, &lazy cache variable for type metadata for LeafLayoutComputer<AnimatedShape<RoundedRectangle._Inset>>, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset, (uint64_t)&type metadata for RoundedRectangle._Inset);
  lazy protocol witness table accessor for type LeafLayoutComputer<AnimatedShape<RoundedRectangle._Inset>> and conformance LeafLayoutComputer<A>();
  v26 = Attribute.init<A>(body:value:flags:update:)();
  v27 = v31 | 0x80;
LABEL_22:
  *(_QWORD *)a2 = v30;
  *(_DWORD *)(a2 + 8) = v27;
  *(_DWORD *)(a2 + 12) = v26;
}

double specialized static _ShapeView._makeView(view:inputs:)@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  unsigned int v17;
  uint64_t OffsetAttribute2;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  double v24;
  _OWORD v25[5];
  int v26;
  _OWORD v27[2];
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 48);
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<DisplayList.Key>, (uint64_t)&type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
  v7 = *(_QWORD *)(v4 + 16);
  if (!v7)
  {
LABEL_8:
    *(_QWORD *)a2 = MEMORY[0x24BEE4AF8];
    v12 = *MEMORY[0x24BE096C0];
    *(_DWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 12) = v12;
    return result;
  }
  v8 = (_QWORD *)(v4 + 32);
  v9 = v8;
  v10 = v7;
  while (*v9 != v5)
  {
    v9 += 2;
    if (!--v10)
    {
      type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, (uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _AnyPreferenceKey);
      while (*v8 != v11)
      {
        v8 += 2;
        if (!--v7)
          goto LABEL_8;
      }
      break;
    }
  }
  v13 = *(_OWORD *)(a1 + 16);
  v27[0] = *(_OWORD *)a1;
  v27[1] = v13;
  v14 = *(_OWORD *)(a1 + 48);
  v16 = *(_OWORD *)a1;
  v15 = *(_OWORD *)(a1 + 16);
  v28 = *(_OWORD *)(a1 + 32);
  v25[2] = *(_OWORD *)(a1 + 32);
  v25[3] = v14;
  v25[4] = *(_OWORD *)(a1 + 64);
  v26 = *(_DWORD *)(a1 + 80);
  v25[0] = v16;
  v25[1] = v15;
  LOBYTE(v22) = 0;
  swift_beginAccess();
  v17 = CachedEnvironment.resolvedShapeStyles(for:role:mode:)((uint64_t)v25, (unsigned __int8 *)&v22, 0x100000000);
  swift_endAccess();
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v19 = specialized static Animatable.makeAnimatable(value:inputs:)(OffsetAttribute2, (uint64_t)v27);
  *(_QWORD *)&v25[0] = __PAIR64__(AGGraphCreateOffsetAttribute2(), v19);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatedShape<AnyShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyShape and conformance AnyShape, (uint64_t)&type metadata for AnyShape, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnimatedShape<AnyShape>.Init, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyShape and conformance AnyShape, (uint64_t)&type metadata for AnyShape, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape.Init);
  lazy protocol witness table accessor for type AnimatedShape<AnyShape>.Init and conformance AnimatedShape<A>.Init();
  v20 = Attribute.init<A>(body:value:flags:update:)();
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(v20, a1, v17, 0, &v23);
  if (one-time initialization token for v4 != -1)
    swift_once();
  v21 = static Semantics.v4;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FAB4 == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0)
      goto LABEL_20;
LABEL_17:
    if ((BYTE4(v28) & 2) != 0)
    {
      v22 = v20;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for LeafLayoutComputer<AnimatedShape<AnyShape>>(0, &lazy cache variable for type metadata for LeafLayoutComputer<AnimatedShape<AnyShape>>, &lazy cache variable for type metadata for AnimatedShape<AnyShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyShape and conformance AnyShape, (uint64_t)&type metadata for AnyShape);
      lazy protocol witness table accessor for type LeafLayoutComputer<AnimatedShape<AnyShape>> and conformance LeafLayoutComputer<A>();
      HIDWORD(v24) = Attribute.init<A>(body:value:flags:update:)();
      if ((LOBYTE(v24) & 0x80) == 0)
        LODWORD(v24) |= 0x80u;
    }
    goto LABEL_20;
  }
  if (static Semantics.forced >= v21)
    goto LABEL_17;
LABEL_20:
  *(_QWORD *)a2 = v23;
  result = v24;
  *(double *)(a2 + 8) = v24;
  return result;
}

uint64_t specialized static View.makeView(view:inputs:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int ShouldRecordTree;
  int v33;
  unint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;

  v4 = v3;
  v73 = *MEMORY[0x24BDAC8D0];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v57);
  v7 = v57;
  v8 = v58;
  v9 = v59;
  v10 = HIDWORD(v59);
  v11 = *(_OWORD *)(a2 + 32);
  v12 = *(_OWORD *)(a2 + 64);
  v54 = *(_OWORD *)(a2 + 48);
  v55 = v12;
  v56 = *(_DWORD *)(a2 + 80);
  v13 = *(_OWORD *)(a2 + 16);
  v51 = *(_OWORD *)a2;
  v52 = v13;
  v53 = v11;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v57) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v35, (uint64_t)&v57, a1, (uint64_t)&v51, v7, v8, v9 | ((unint64_t)v10 << 32));
  v14 = v35;
  if ((v59 & 1) == 0)
  {
    v15 = v57;
    LOBYTE(v57) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v15, v58);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  v16 = v51;
  v17 = DWORD2(v51);
  v18 = v52;
  v19 = DWORD2(v52);
  v20 = HIDWORD(v52);
  v21 = DWORD1(v53);
  v33 = v53;
  v22 = *((_QWORD *)&v53 + 1);
  v23 = v54;
  v24 = HIDWORD(v54);
  v30 = v55;
  v31 = DWORD2(v54);
  v28 = DWORD2(v55);
  v29 = DWORD1(v55);
  v26 = v56;
  v27 = HIDWORD(v55);
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
  {
    type metadata accessor for _ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    AGSubgraphBeginTreeElement();
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v35 = v16;
  v36 = v17;
  v37 = v18;
  v38 = v19;
  v39 = v20;
  v41 = v21;
  v42 = v22;
  v43 = v23;
  v44 = v31;
  v45 = v24;
  v46 = v30;
  v47 = v29;
  v48 = v28;
  v49 = v27;
  v50 = v26;
  v57 = v16;
  LODWORD(v58) = v17;
  v59 = v18;
  v60 = v19;
  v61 = v20;
  v62 = 0;
  v63 = v21;
  v64 = v22;
  v65 = v23;
  v66 = v31;
  v67 = v24;
  v68 = v30;
  v69 = v29;
  v70 = v28;
  v71 = v27;
  v72 = v26;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  specialized static _ShapeView._makeView(view:inputs:)(v14, (uint64_t)&v57, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v40 = v33;
  if ((ShouldRecordTree & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a3, &v35);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return swift_release_n();
  }
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int ShouldRecordTree;
  int v33;
  unint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;

  v4 = v3;
  v73 = *MEMORY[0x24BDAC8D0];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v57);
  v7 = v57;
  v8 = v58;
  v9 = v59;
  v10 = HIDWORD(v59);
  v11 = *(_OWORD *)(a2 + 32);
  v12 = *(_OWORD *)(a2 + 64);
  v54 = *(_OWORD *)(a2 + 48);
  v55 = v12;
  v56 = *(_DWORD *)(a2 + 80);
  v13 = *(_OWORD *)(a2 + 16);
  v51 = *(_OWORD *)a2;
  v52 = v13;
  v53 = v11;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v57) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v35, (uint64_t)&v57, a1, (uint64_t)&v51, v7, v8, v9 | ((unint64_t)v10 << 32));
  v14 = v35;
  if ((v59 & 1) == 0)
  {
    v15 = v57;
    LOBYTE(v57) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v15, v58);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  v16 = v51;
  v17 = DWORD2(v51);
  v18 = v52;
  v19 = DWORD2(v52);
  v20 = HIDWORD(v52);
  v21 = DWORD1(v53);
  v33 = v53;
  v22 = *((_QWORD *)&v53 + 1);
  v23 = v54;
  v24 = HIDWORD(v54);
  v30 = v55;
  v31 = DWORD2(v54);
  v28 = DWORD2(v55);
  v29 = DWORD1(v55);
  v26 = v56;
  v27 = HIDWORD(v55);
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
  {
    type metadata accessor for _ShapeView<CombinedContentShape, ForegroundStyle>();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    AGSubgraphBeginTreeElement();
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v35 = v16;
  v36 = v17;
  v37 = v18;
  v38 = v19;
  v39 = v20;
  v41 = v21;
  v42 = v22;
  v43 = v23;
  v44 = v31;
  v45 = v24;
  v46 = v30;
  v47 = v29;
  v48 = v28;
  v49 = v27;
  v50 = v26;
  v57 = v16;
  LODWORD(v58) = v17;
  v59 = v18;
  v60 = v19;
  v61 = v20;
  v62 = 0;
  v63 = v21;
  v64 = v22;
  v65 = v23;
  v66 = v31;
  v67 = v24;
  v68 = v30;
  v69 = v29;
  v70 = v28;
  v71 = v27;
  v72 = v26;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  specialized static _ShapeView._makeView(view:inputs:)(v14, (uint64_t)&v57, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v40 = v33;
  if ((ShouldRecordTree & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a3, &v35);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return swift_release_n();
  }
}

uint64_t specialized static View.makeView(view:inputs:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  unsigned int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int ShouldRecordTree;
  int v30;
  unint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  static DynamicPropertyCache.fields(of:)((uint64_t)&type metadata for SummarySymbol, (uint64_t)&v54);
  v5 = v54;
  v6 = v55;
  v7 = v56;
  v8 = HIDWORD(v56);
  v9 = *(_OWORD *)(a2 + 32);
  v10 = *(_OWORD *)(a2 + 64);
  v51 = *(_OWORD *)(a2 + 48);
  v52 = v10;
  v53 = *(_DWORD *)(a2 + 80);
  v11 = *(_OWORD *)(a2 + 16);
  v48 = *(_OWORD *)a2;
  v49 = v11;
  v50 = v9;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v54) = v7;
  specialized static View.makeBody(view:inputs:fields:)(&v32, (uint64_t)&v54, a1, (uint64_t)&v48, v5, v6, v7 | ((unint64_t)v8 << 32));
  if ((v56 & 1) == 0)
  {
    v12 = v54;
    LOBYTE(v54) = v7;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v5, v6, v7, v12, v55);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  v13 = v48;
  v14 = DWORD2(v48);
  v15 = v49;
  v16 = DWORD2(v49);
  v17 = HIDWORD(v49);
  v18 = DWORD1(v50);
  v30 = v50;
  v19 = *((_QWORD *)&v50 + 1);
  v20 = v51;
  v21 = HIDWORD(v51);
  v27 = v52;
  v28 = DWORD2(v51);
  v25 = DWORD2(v52);
  v26 = DWORD1(v52);
  v23 = v53;
  v24 = HIDWORD(v52);
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
  {
    type metadata accessor for ModifiedContent<Image, _ForegroundStyleModifier2<AngularGradient, Color>>(0);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    AGSubgraphBeginTreeElement();
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v32 = v13;
  v33 = v14;
  v34 = v15;
  v35 = v16;
  v36 = v17;
  v38 = v18;
  v39 = v19;
  v40 = v20;
  v41 = v28;
  v42 = v21;
  v43 = v27;
  v44 = v26;
  v45 = v25;
  v46 = v24;
  v47 = v23;
  v54 = v13;
  LODWORD(v55) = v14;
  v56 = v15;
  v57 = v16;
  v58 = v17;
  v59 = 0;
  v60 = v18;
  v61 = v19;
  v62 = v20;
  v63 = v28;
  v64 = v21;
  v65 = v27;
  v66 = v26;
  v67 = v25;
  v68 = v24;
  v69 = v23;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  specialized static ModifiedContent<>._makeView(view:inputs:)((uint64_t)&v54, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v37 = v30;
  if ((ShouldRecordTree & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a3, &v32);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return swift_release_n();
  }
}

void specialized static View.makeView(view:inputs:)(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  static DynamicPropertyCache.fields(of:)(MEMORY[0x24BEE4078], (uint64_t)&v4);
  v3 = v5;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v4) = v3;
  specialized static View.makeBody(view:inputs:fields:)();
}

{
  uint64_t v2;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  static DynamicPropertyCache.fields(of:)(v2, (uint64_t)&v5);
  v4 = v6;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v5) = v4;
  specialized static View.makeBody(view:inputs:fields:)();
}

void sub_234EDC8CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,unint64_t a32,uint64_t a33,uint64_t a34,int a35,int a36,uint64_t a37,uint64_t a38,__int128 a39,uint64_t a40,int a41)
{
  uint64_t v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  int ShouldRecordTree;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  int v56;

  if ((a33 & 1) == 0)
  {
    v46 = a31;
    LOBYTE(a31) = v45;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v43, v42, v44, v45, v46, a32);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  outlined retain of _ViewInputs(v41);
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v48 = *(_DWORD *)(v41 + 8);
  v49 = *(_QWORD *)(v41 + 16);
  v50 = *(_DWORD *)(v41 + 36);
  v51 = *(_QWORD *)(v41 + 40);
  v52 = *(_QWORD *)(v41 + 48);
  v53 = *(_QWORD *)(v41 + 24);
  v54 = *(_OWORD *)(v41 + 56);
  v55 = *(_QWORD *)(v41 + 72);
  v56 = *(_DWORD *)(v41 + 80);
  a31 = *(_QWORD *)v41;
  LODWORD(a32) = v48;
  a33 = v49;
  a34 = v53;
  a35 = 0;
  a36 = v50;
  a37 = v51;
  a38 = v52;
  a39 = v54;
  a40 = v55;
  a41 = v56;
  outlined retain of _ViewInputs(v41);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static View.makeView(view:inputs:)(a9, (uint64_t)&a31);
}

uint64_t sub_234EDC9D0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  int v3;
  uint64_t v5;
  int v6;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v6 = v3;
  if ((v2 & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(v1, &v5);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    outlined release of _ViewInputs(v0);
    return outlined release of _ViewInputs(v0);
  }
  else
  {
    outlined release of _ViewInputs(v0);
    outlined release of _ViewInputs(v0);
    return outlined release of _ViewInputs(v0);
  }
}

void sub_234EDCB54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned int a11)
{
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int ShouldRecordTree;
  int v20;
  uint64_t v21;
  int v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  int v27;

  if ((*(_BYTE *)(v16 - 160) & 1) == 0)
  {
    v17 = *(_QWORD *)(v16 - 176);
    v18 = *(_QWORD *)(v16 - 168);
    *(_BYTE *)(v16 - 176) = v14;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v15, v12, v13, v14, v17, v18);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  outlined retain of _ViewInputs(v11);
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v20 = *(_DWORD *)(v11 + 8);
  v21 = *(_QWORD *)(v11 + 16);
  v22 = *(_DWORD *)(v11 + 36);
  v23 = *(_OWORD *)(v11 + 40);
  v24 = *(_QWORD *)(v11 + 24);
  v25 = *(_OWORD *)(v11 + 56);
  v26 = *(_QWORD *)(v11 + 72);
  v27 = *(_DWORD *)(v11 + 80);
  *(_QWORD *)(v16 - 176) = *(_QWORD *)v11;
  *(_DWORD *)(v16 - 168) = v20;
  *(_QWORD *)(v16 - 160) = v21;
  *(_QWORD *)(v16 - 152) = v24;
  *(_DWORD *)(v16 - 144) = 0;
  *(_DWORD *)(v16 - 140) = v22;
  *(_OWORD *)(v16 - 136) = v23;
  *(_OWORD *)(v16 - 120) = v25;
  *(_QWORD *)(v16 - 104) = v26;
  *(_DWORD *)(v16 - 96) = v27;
  outlined retain of _ViewInputs(v11);
  specialized static View.makeView(view:inputs:)(a11, v16 - 176);
}

uint64_t sub_234EDCC38()
{
  _QWORD *v0;
  uint64_t v1;
  char v2;
  int v3;
  uint64_t result;
  _QWORD v5[2];
  uint64_t v6;
  int v7;

  v7 = v3;
  if ((v2 & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(v5, &v6);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    outlined release of _ViewInputs(v1);
  }
  outlined release of _ViewInputs(v1);
  result = outlined release of _ViewInputs(v1);
  *v0 = v5[0];
  v0[1] = v5[1];
  return result;
}

double specialized static View.makeView(view:inputs:)@<D0>(int a1@<W0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  double result;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int ShouldRecordTree;
  int v32;
  uint64_t v34;
  double v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;

  v4 = v3;
  v74 = *MEMORY[0x24BDAC8D0];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v58);
  v7 = v58;
  v8 = v59;
  v9 = v60;
  v10 = HIDWORD(v60);
  v11 = *(_OWORD *)(a2 + 48);
  v54 = *(_OWORD *)(a2 + 32);
  v55 = v11;
  v56 = *(_OWORD *)(a2 + 64);
  v57 = *(_DWORD *)(a2 + 80);
  v12 = *(_OWORD *)(a2 + 16);
  v52 = *(_OWORD *)a2;
  v53 = v12;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v58) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v36, (uint64_t)&v58, a1, (uint64_t)&v52, v7, v8, v9 | ((unint64_t)v10 << 32));
  v13 = v36;
  if ((v60 & 1) == 0)
  {
    v14 = v58;
    LOBYTE(v58) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v14, v59);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  type metadata accessor for _ShapeView<Rectangle, ForegroundStyle>();
  v15 = v52;
  v16 = DWORD2(v52);
  v17 = v53;
  v18 = DWORD2(v53);
  v19 = HIDWORD(v53);
  v20 = DWORD1(v54);
  v32 = v54;
  v21 = *((_QWORD *)&v54 + 1);
  v22 = v55;
  v23 = HIDWORD(v55);
  v29 = v56;
  v30 = DWORD2(v55);
  v27 = DWORD2(v56);
  v28 = DWORD1(v56);
  v25 = v57;
  v26 = HIDWORD(v56);
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v36 = v15;
  v37 = v16;
  v38 = v17;
  v39 = v18;
  v40 = v19;
  v42 = v20;
  v43 = v21;
  v44 = v22;
  v45 = v30;
  v46 = v23;
  v47 = v29;
  v48 = v28;
  v49 = v27;
  v50 = v26;
  v51 = v25;
  v58 = v15;
  LODWORD(v59) = v16;
  v60 = v17;
  v61 = v18;
  v62 = v19;
  v63 = 0;
  v64 = v20;
  v65 = v21;
  v66 = v22;
  v67 = v30;
  v68 = v23;
  v69 = v29;
  v70 = v28;
  v71 = v27;
  v72 = v26;
  v73 = v25;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static _ShapeView._makeView(view:inputs:)(v13, (uint64_t)&v58, (uint64_t)&v34);
  v41 = v32;
  if ((ShouldRecordTree & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v34, &v36);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(_QWORD *)a3 = v34;
  result = v35;
  a3[1] = v35;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  double result;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int ShouldRecordTree;
  int v31;
  uint64_t v33;
  double v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;

  v4 = v3;
  v73 = *MEMORY[0x24BDAC8D0];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v57);
  v7 = v57;
  v8 = v58;
  v9 = v59;
  v10 = HIDWORD(v59);
  v11 = *(_OWORD *)(a2 + 48);
  v53 = *(_OWORD *)(a2 + 32);
  v54 = v11;
  v55 = *(_OWORD *)(a2 + 64);
  v56 = *(_DWORD *)(a2 + 80);
  v12 = *(_OWORD *)(a2 + 16);
  v51 = *(_OWORD *)a2;
  v52 = v12;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v57) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v35, (uint64_t)&v57, a1, (uint64_t)&v51, v7, v8, v9 | ((unint64_t)v10 << 32));
  if ((v59 & 1) == 0)
  {
    v13 = v57;
    LOBYTE(v57) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v13, v58);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  type metadata accessor for _ShapeView<Rectangle._Inset, ForegroundStyle>();
  v14 = v51;
  v15 = DWORD2(v51);
  v16 = v52;
  v17 = DWORD2(v52);
  v18 = HIDWORD(v52);
  v19 = DWORD1(v53);
  v31 = v53;
  v20 = *((_QWORD *)&v53 + 1);
  v21 = v54;
  v22 = HIDWORD(v54);
  v28 = v55;
  v29 = DWORD2(v54);
  v26 = DWORD2(v55);
  v27 = DWORD1(v55);
  v24 = v56;
  v25 = HIDWORD(v55);
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v35 = v14;
  v36 = v15;
  v37 = v16;
  v38 = v17;
  v39 = v18;
  v41 = v19;
  v42 = v20;
  v43 = v21;
  v44 = v29;
  v45 = v22;
  v46 = v28;
  v47 = v27;
  v48 = v26;
  v49 = v25;
  v50 = v24;
  v57 = v14;
  LODWORD(v58) = v15;
  v59 = v16;
  v60 = v17;
  v61 = v18;
  v62 = 0;
  v63 = v19;
  v64 = v20;
  v65 = v21;
  v66 = v29;
  v67 = v22;
  v68 = v28;
  v69 = v27;
  v70 = v26;
  v71 = v25;
  v72 = v24;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static _ShapeView._makeView(view:inputs:)((uint64_t)&v57, (uint64_t)&v33);
  v40 = v31;
  if ((ShouldRecordTree & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v33, &v35);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(_QWORD *)a3 = v33;
  result = v34;
  a3[1] = v34;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int ShouldRecordTree;
  double result;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  int v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;

  v4 = v3;
  v72 = *MEMORY[0x24BDAC8D0];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v57);
  v7 = v57;
  v8 = v58;
  v9 = v59;
  v10 = HIDWORD(v59);
  v11 = *(_OWORD *)(a2 + 48);
  v53 = *(_OWORD *)(a2 + 32);
  v54 = v11;
  v55 = *(_OWORD *)(a2 + 64);
  v56 = *(_DWORD *)(a2 + 80);
  v12 = *(_OWORD *)(a2 + 16);
  v51 = *(_OWORD *)a2;
  v52 = v12;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v57) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v35, (uint64_t)&v57, a1, (uint64_t)&v51, v7, v8, v9 | ((unint64_t)v10 << 32));
  v32 = v35;
  if ((v59 & 1) == 0)
  {
    v13 = v57;
    LOBYTE(v57) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v13, v58);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  v14 = v51;
  v15 = v52;
  v28 = HIDWORD(v52);
  v29 = DWORD2(v52);
  v16 = v53;
  v30 = DWORD2(v51);
  v17 = *((_QWORD *)&v53 + 1);
  v18 = v54;
  v19 = HIDWORD(v54);
  v20 = DWORD1(v55);
  v26 = v55;
  v27 = DWORD2(v54);
  v21 = DWORD2(v55);
  v25 = HIDWORD(v55);
  v22 = v56;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v35 = v14;
  v36 = v30;
  v37 = v15;
  v38 = v29;
  v39 = v28;
  v41 = HIDWORD(v16);
  v42 = v17;
  v43 = v18;
  v44 = v27;
  v45 = v19;
  v46 = v26;
  v47 = v20;
  v48 = v21;
  v49 = v25;
  v50 = v22;
  v57 = v14;
  LODWORD(v58) = v30;
  v59 = v15;
  v60 = v29;
  v61 = v28;
  v62 = HIDWORD(v16);
  v63 = v17;
  v64 = v18;
  v65 = v27;
  v66 = v19;
  v67 = v26;
  v68 = v20;
  v69 = v21;
  v70 = v25;
  v71 = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static DynamicView.makeDynamicView(metadata:view:inputs:)(v32, (uint64_t)&v57, (uint64_t)&v33);
  v40 = v16;
  if ((ShouldRecordTree & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v33, &v35);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(_QWORD *)a3 = v33;
  result = v34;
  a3[1] = v34;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  double result;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int ShouldRecordTree;
  int v31;
  uint64_t v33;
  double v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;

  v4 = v3;
  v73 = *MEMORY[0x24BDAC8D0];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v57);
  v7 = v57;
  v8 = v58;
  v9 = v59;
  v10 = HIDWORD(v59);
  v11 = *(_OWORD *)(a2 + 48);
  v53 = *(_OWORD *)(a2 + 32);
  v54 = v11;
  v55 = *(_OWORD *)(a2 + 64);
  v56 = *(_DWORD *)(a2 + 80);
  v12 = *(_OWORD *)(a2 + 16);
  v51 = *(_OWORD *)a2;
  v52 = v12;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v57) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v35, (uint64_t)&v57, a1, (uint64_t)&v51, v7, v8, v9 | ((unint64_t)v10 << 32));
  if ((v59 & 1) == 0)
  {
    v13 = v57;
    LOBYTE(v57) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v13, v58);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  type metadata accessor for _ShapeView<AnyShape, ForegroundStyle>();
  v14 = v51;
  v15 = DWORD2(v51);
  v16 = v52;
  v17 = DWORD2(v52);
  v18 = HIDWORD(v52);
  v19 = DWORD1(v53);
  v31 = v53;
  v20 = *((_QWORD *)&v53 + 1);
  v21 = v54;
  v22 = HIDWORD(v54);
  v28 = v55;
  v29 = DWORD2(v54);
  v26 = DWORD2(v55);
  v27 = DWORD1(v55);
  v24 = v56;
  v25 = HIDWORD(v55);
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v35 = v14;
  v36 = v15;
  v37 = v16;
  v38 = v17;
  v39 = v18;
  v41 = v19;
  v42 = v20;
  v43 = v21;
  v44 = v29;
  v45 = v22;
  v46 = v28;
  v47 = v27;
  v48 = v26;
  v49 = v25;
  v50 = v24;
  v57 = v14;
  LODWORD(v58) = v15;
  v59 = v16;
  v60 = v17;
  v61 = v18;
  v62 = 0;
  v63 = v19;
  v64 = v20;
  v65 = v21;
  v66 = v29;
  v67 = v22;
  v68 = v28;
  v69 = v27;
  v70 = v26;
  v71 = v25;
  v72 = v24;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static _ShapeView._makeView(view:inputs:)((uint64_t)&v57, (uint64_t)&v33);
  v40 = v31;
  if ((ShouldRecordTree & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v33, &v35);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(_QWORD *)a3 = v33;
  result = v34;
  a3[1] = v34;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  double result;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int ShouldRecordTree;
  int v32;
  uint64_t v34;
  double v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;

  v4 = v3;
  v74 = *MEMORY[0x24BDAC8D0];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v58);
  v7 = v58;
  v8 = v59;
  v9 = v60;
  v10 = HIDWORD(v60);
  v11 = *(_OWORD *)(a2 + 48);
  v54 = *(_OWORD *)(a2 + 32);
  v55 = v11;
  v56 = *(_OWORD *)(a2 + 64);
  v57 = *(_DWORD *)(a2 + 80);
  v12 = *(_OWORD *)(a2 + 16);
  v52 = *(_OWORD *)a2;
  v53 = v12;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v58) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v36, (uint64_t)&v58, a1, (uint64_t)&v52, v7, v8, v9 | ((unint64_t)v10 << 32));
  v13 = v36;
  if ((v60 & 1) == 0)
  {
    v14 = v58;
    LOBYTE(v58) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v14, v59);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  type metadata accessor for _ShapeView<Ellipse, ForegroundStyle>();
  v15 = v52;
  v16 = DWORD2(v52);
  v17 = v53;
  v18 = DWORD2(v53);
  v19 = HIDWORD(v53);
  v20 = DWORD1(v54);
  v32 = v54;
  v21 = *((_QWORD *)&v54 + 1);
  v22 = v55;
  v23 = HIDWORD(v55);
  v29 = v56;
  v30 = DWORD2(v55);
  v27 = DWORD2(v56);
  v28 = DWORD1(v56);
  v25 = v57;
  v26 = HIDWORD(v56);
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v36 = v15;
  v37 = v16;
  v38 = v17;
  v39 = v18;
  v40 = v19;
  v42 = v20;
  v43 = v21;
  v44 = v22;
  v45 = v30;
  v46 = v23;
  v47 = v29;
  v48 = v28;
  v49 = v27;
  v50 = v26;
  v51 = v25;
  v58 = v15;
  LODWORD(v59) = v16;
  v60 = v17;
  v61 = v18;
  v62 = v19;
  v63 = 0;
  v64 = v20;
  v65 = v21;
  v66 = v22;
  v67 = v30;
  v68 = v23;
  v69 = v29;
  v70 = v28;
  v71 = v27;
  v72 = v26;
  v73 = v25;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static _ShapeView._makeView(view:inputs:)(v13, (uint64_t)&v58, (uint64_t)&v34);
  v41 = v32;
  if ((ShouldRecordTree & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v34, &v36);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(_QWORD *)a3 = v34;
  result = v35;
  a3[1] = v35;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  double result;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int ShouldRecordTree;
  int v31;
  uint64_t v33;
  double v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;

  v4 = v3;
  v73 = *MEMORY[0x24BDAC8D0];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v57);
  v7 = v57;
  v8 = v58;
  v9 = v59;
  v10 = HIDWORD(v59);
  v11 = *(_OWORD *)(a2 + 48);
  v53 = *(_OWORD *)(a2 + 32);
  v54 = v11;
  v55 = *(_OWORD *)(a2 + 64);
  v56 = *(_DWORD *)(a2 + 80);
  v12 = *(_OWORD *)(a2 + 16);
  v51 = *(_OWORD *)a2;
  v52 = v12;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v57) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v35, (uint64_t)&v57, a1, (uint64_t)&v51, v7, v8, v9 | ((unint64_t)v10 << 32));
  if ((v59 & 1) == 0)
  {
    v13 = v57;
    LOBYTE(v57) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v13, v58);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  type metadata accessor for _ShapeView<Ellipse._Inset, ForegroundStyle>();
  v14 = v51;
  v15 = DWORD2(v51);
  v16 = v52;
  v17 = DWORD2(v52);
  v18 = HIDWORD(v52);
  v19 = DWORD1(v53);
  v31 = v53;
  v20 = *((_QWORD *)&v53 + 1);
  v21 = v54;
  v22 = HIDWORD(v54);
  v28 = v55;
  v29 = DWORD2(v54);
  v26 = DWORD2(v55);
  v27 = DWORD1(v55);
  v24 = v56;
  v25 = HIDWORD(v55);
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v35 = v14;
  v36 = v15;
  v37 = v16;
  v38 = v17;
  v39 = v18;
  v41 = v19;
  v42 = v20;
  v43 = v21;
  v44 = v29;
  v45 = v22;
  v46 = v28;
  v47 = v27;
  v48 = v26;
  v49 = v25;
  v50 = v24;
  v57 = v14;
  LODWORD(v58) = v15;
  v59 = v16;
  v60 = v17;
  v61 = v18;
  v62 = 0;
  v63 = v19;
  v64 = v20;
  v65 = v21;
  v66 = v29;
  v67 = v22;
  v68 = v28;
  v69 = v27;
  v70 = v26;
  v71 = v25;
  v72 = v24;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static _ShapeView._makeView(view:inputs:)((uint64_t)&v57, (uint64_t)&v33);
  v40 = v31;
  if ((ShouldRecordTree & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v33, &v35);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(_QWORD *)a3 = v33;
  result = v34;
  a3[1] = v34;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  double result;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int ShouldRecordTree;
  int v32;
  uint64_t v34;
  double v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;

  v4 = v3;
  v74 = *MEMORY[0x24BDAC8D0];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v58);
  v7 = v58;
  v8 = v59;
  v9 = v60;
  v10 = HIDWORD(v60);
  v11 = *(_OWORD *)(a2 + 48);
  v54 = *(_OWORD *)(a2 + 32);
  v55 = v11;
  v56 = *(_OWORD *)(a2 + 64);
  v57 = *(_DWORD *)(a2 + 80);
  v12 = *(_OWORD *)(a2 + 16);
  v52 = *(_OWORD *)a2;
  v53 = v12;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v58) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v36, (uint64_t)&v58, a1, (uint64_t)&v52, v7, v8, v9 | ((unint64_t)v10 << 32));
  v13 = v36;
  if ((v60 & 1) == 0)
  {
    v14 = v58;
    LOBYTE(v58) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v14, v59);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  type metadata accessor for _ShapeView<Capsule, ForegroundStyle>();
  v15 = v52;
  v16 = DWORD2(v52);
  v17 = v53;
  v18 = DWORD2(v53);
  v19 = HIDWORD(v53);
  v20 = DWORD1(v54);
  v32 = v54;
  v21 = *((_QWORD *)&v54 + 1);
  v22 = v55;
  v23 = HIDWORD(v55);
  v29 = v56;
  v30 = DWORD2(v55);
  v27 = DWORD2(v56);
  v28 = DWORD1(v56);
  v25 = v57;
  v26 = HIDWORD(v56);
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v36 = v15;
  v37 = v16;
  v38 = v17;
  v39 = v18;
  v40 = v19;
  v42 = v20;
  v43 = v21;
  v44 = v22;
  v45 = v30;
  v46 = v23;
  v47 = v29;
  v48 = v28;
  v49 = v27;
  v50 = v26;
  v51 = v25;
  v58 = v15;
  LODWORD(v59) = v16;
  v60 = v17;
  v61 = v18;
  v62 = v19;
  v63 = 0;
  v64 = v20;
  v65 = v21;
  v66 = v22;
  v67 = v30;
  v68 = v23;
  v69 = v29;
  v70 = v28;
  v71 = v27;
  v72 = v26;
  v73 = v25;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static _ShapeView._makeView(view:inputs:)(v13, (uint64_t)&v58, (uint64_t)&v34);
  v41 = v32;
  if ((ShouldRecordTree & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v34, &v36);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(_QWORD *)a3 = v34;
  result = v35;
  a3[1] = v35;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  double result;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int ShouldRecordTree;
  int v31;
  uint64_t v33;
  double v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;

  v4 = v3;
  v73 = *MEMORY[0x24BDAC8D0];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v57);
  v7 = v57;
  v8 = v58;
  v9 = v59;
  v10 = HIDWORD(v59);
  v11 = *(_OWORD *)(a2 + 48);
  v53 = *(_OWORD *)(a2 + 32);
  v54 = v11;
  v55 = *(_OWORD *)(a2 + 64);
  v56 = *(_DWORD *)(a2 + 80);
  v12 = *(_OWORD *)(a2 + 16);
  v51 = *(_OWORD *)a2;
  v52 = v12;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v57) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v35, (uint64_t)&v57, a1, (uint64_t)&v51, v7, v8, v9 | ((unint64_t)v10 << 32));
  if ((v59 & 1) == 0)
  {
    v13 = v57;
    LOBYTE(v57) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v13, v58);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  type metadata accessor for _ShapeView<Capsule._Inset, ForegroundStyle>();
  v14 = v51;
  v15 = DWORD2(v51);
  v16 = v52;
  v17 = DWORD2(v52);
  v18 = HIDWORD(v52);
  v19 = DWORD1(v53);
  v31 = v53;
  v20 = *((_QWORD *)&v53 + 1);
  v21 = v54;
  v22 = HIDWORD(v54);
  v28 = v55;
  v29 = DWORD2(v54);
  v26 = DWORD2(v55);
  v27 = DWORD1(v55);
  v24 = v56;
  v25 = HIDWORD(v55);
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v35 = v14;
  v36 = v15;
  v37 = v16;
  v38 = v17;
  v39 = v18;
  v41 = v19;
  v42 = v20;
  v43 = v21;
  v44 = v29;
  v45 = v22;
  v46 = v28;
  v47 = v27;
  v48 = v26;
  v49 = v25;
  v50 = v24;
  v57 = v14;
  LODWORD(v58) = v15;
  v59 = v16;
  v60 = v17;
  v61 = v18;
  v62 = 0;
  v63 = v19;
  v64 = v20;
  v65 = v21;
  v66 = v29;
  v67 = v22;
  v68 = v28;
  v69 = v27;
  v70 = v26;
  v71 = v25;
  v72 = v24;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static _ShapeView._makeView(view:inputs:)((uint64_t)&v57, (uint64_t)&v33);
  v40 = v31;
  if ((ShouldRecordTree & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v33, &v35);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(_QWORD *)a3 = v33;
  result = v34;
  a3[1] = v34;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  double result;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int ShouldRecordTree;
  int v32;
  uint64_t v34;
  double v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;

  v4 = v3;
  v74 = *MEMORY[0x24BDAC8D0];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v58);
  v7 = v58;
  v8 = v59;
  v9 = v60;
  v10 = HIDWORD(v60);
  v11 = *(_OWORD *)(a2 + 48);
  v54 = *(_OWORD *)(a2 + 32);
  v55 = v11;
  v56 = *(_OWORD *)(a2 + 64);
  v57 = *(_DWORD *)(a2 + 80);
  v12 = *(_OWORD *)(a2 + 16);
  v52 = *(_OWORD *)a2;
  v53 = v12;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v58) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v36, (uint64_t)&v58, a1, (uint64_t)&v52, v7, v8, v9 | ((unint64_t)v10 << 32));
  v13 = v36;
  if ((v60 & 1) == 0)
  {
    v14 = v58;
    LOBYTE(v58) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v14, v59);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  type metadata accessor for _ShapeView<Circle, ForegroundStyle>();
  v15 = v52;
  v16 = DWORD2(v52);
  v17 = v53;
  v18 = DWORD2(v53);
  v19 = HIDWORD(v53);
  v20 = DWORD1(v54);
  v32 = v54;
  v21 = *((_QWORD *)&v54 + 1);
  v22 = v55;
  v23 = HIDWORD(v55);
  v29 = v56;
  v30 = DWORD2(v55);
  v27 = DWORD2(v56);
  v28 = DWORD1(v56);
  v25 = v57;
  v26 = HIDWORD(v56);
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v36 = v15;
  v37 = v16;
  v38 = v17;
  v39 = v18;
  v40 = v19;
  v42 = v20;
  v43 = v21;
  v44 = v22;
  v45 = v30;
  v46 = v23;
  v47 = v29;
  v48 = v28;
  v49 = v27;
  v50 = v26;
  v51 = v25;
  v58 = v15;
  LODWORD(v59) = v16;
  v60 = v17;
  v61 = v18;
  v62 = v19;
  v63 = 0;
  v64 = v20;
  v65 = v21;
  v66 = v22;
  v67 = v30;
  v68 = v23;
  v69 = v29;
  v70 = v28;
  v71 = v27;
  v72 = v26;
  v73 = v25;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static _ShapeView._makeView(view:inputs:)(v13, (uint64_t)&v58, (uint64_t)&v34);
  v41 = v32;
  if ((ShouldRecordTree & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v34, &v36);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(_QWORD *)a3 = v34;
  result = v35;
  a3[1] = v35;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  double result;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int ShouldRecordTree;
  int v31;
  uint64_t v33;
  double v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;

  v4 = v3;
  v73 = *MEMORY[0x24BDAC8D0];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v57);
  v7 = v57;
  v8 = v58;
  v9 = v59;
  v10 = HIDWORD(v59);
  v11 = *(_OWORD *)(a2 + 48);
  v53 = *(_OWORD *)(a2 + 32);
  v54 = v11;
  v55 = *(_OWORD *)(a2 + 64);
  v56 = *(_DWORD *)(a2 + 80);
  v12 = *(_OWORD *)(a2 + 16);
  v51 = *(_OWORD *)a2;
  v52 = v12;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v57) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v35, (uint64_t)&v57, a1, (uint64_t)&v51, v7, v8, v9 | ((unint64_t)v10 << 32));
  if ((v59 & 1) == 0)
  {
    v13 = v57;
    LOBYTE(v57) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v13, v58);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  type metadata accessor for _ShapeView<Circle._Inset, ForegroundStyle>();
  v14 = v51;
  v15 = DWORD2(v51);
  v16 = v52;
  v17 = DWORD2(v52);
  v18 = HIDWORD(v52);
  v19 = DWORD1(v53);
  v31 = v53;
  v20 = *((_QWORD *)&v53 + 1);
  v21 = v54;
  v22 = HIDWORD(v54);
  v28 = v55;
  v29 = DWORD2(v54);
  v26 = DWORD2(v55);
  v27 = DWORD1(v55);
  v24 = v56;
  v25 = HIDWORD(v55);
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v35 = v14;
  v36 = v15;
  v37 = v16;
  v38 = v17;
  v39 = v18;
  v41 = v19;
  v42 = v20;
  v43 = v21;
  v44 = v29;
  v45 = v22;
  v46 = v28;
  v47 = v27;
  v48 = v26;
  v49 = v25;
  v50 = v24;
  v57 = v14;
  LODWORD(v58) = v15;
  v59 = v16;
  v60 = v17;
  v61 = v18;
  v62 = 0;
  v63 = v19;
  v64 = v20;
  v65 = v21;
  v66 = v29;
  v67 = v22;
  v68 = v28;
  v69 = v27;
  v70 = v26;
  v71 = v25;
  v72 = v24;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static _ShapeView._makeView(view:inputs:)((uint64_t)&v57, (uint64_t)&v33);
  v40 = v31;
  if ((ShouldRecordTree & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v33, &v35);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(_QWORD *)a3 = v33;
  result = v34;
  a3[1] = v34;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  double result;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int ShouldRecordTree;
  int v32;
  uint64_t v34;
  double v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;

  v4 = v3;
  v74 = *MEMORY[0x24BDAC8D0];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v58);
  v7 = v58;
  v8 = v59;
  v9 = v60;
  v10 = HIDWORD(v60);
  v11 = *(_OWORD *)(a2 + 48);
  v54 = *(_OWORD *)(a2 + 32);
  v55 = v11;
  v56 = *(_OWORD *)(a2 + 64);
  v57 = *(_DWORD *)(a2 + 80);
  v12 = *(_OWORD *)(a2 + 16);
  v52 = *(_OWORD *)a2;
  v53 = v12;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v58) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v36, (uint64_t)&v58, a1, (uint64_t)&v52, v7, v8, v9 | ((unint64_t)v10 << 32));
  v13 = v36;
  if ((v60 & 1) == 0)
  {
    v14 = v58;
    LOBYTE(v58) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v14, v59);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  type metadata accessor for _ShapeView<Path, ForegroundStyle>();
  v15 = v52;
  v16 = DWORD2(v52);
  v17 = v53;
  v18 = DWORD2(v53);
  v19 = HIDWORD(v53);
  v20 = DWORD1(v54);
  v32 = v54;
  v21 = *((_QWORD *)&v54 + 1);
  v22 = v55;
  v23 = HIDWORD(v55);
  v29 = v56;
  v30 = DWORD2(v55);
  v27 = DWORD2(v56);
  v28 = DWORD1(v56);
  v25 = v57;
  v26 = HIDWORD(v56);
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v36 = v15;
  v37 = v16;
  v38 = v17;
  v39 = v18;
  v40 = v19;
  v42 = v20;
  v43 = v21;
  v44 = v22;
  v45 = v30;
  v46 = v23;
  v47 = v29;
  v48 = v28;
  v49 = v27;
  v50 = v26;
  v51 = v25;
  v58 = v15;
  LODWORD(v59) = v16;
  v60 = v17;
  v61 = v18;
  v62 = v19;
  v63 = 0;
  v64 = v20;
  v65 = v21;
  v66 = v22;
  v67 = v30;
  v68 = v23;
  v69 = v29;
  v70 = v28;
  v71 = v27;
  v72 = v26;
  v73 = v25;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static _ShapeView._makeView(view:inputs:)(v13, (uint64_t)&v58, (uint64_t)&v34);
  v41 = v32;
  if ((ShouldRecordTree & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v34, &v36);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(_QWORD *)a3 = v34;
  result = v35;
  a3[1] = v35;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  double result;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int ShouldRecordTree;
  int v31;
  uint64_t v33;
  double v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;

  v4 = v3;
  v73 = *MEMORY[0x24BDAC8D0];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v57);
  v7 = v57;
  v8 = v58;
  v9 = v59;
  v10 = HIDWORD(v59);
  v11 = *(_OWORD *)(a2 + 48);
  v53 = *(_OWORD *)(a2 + 32);
  v54 = v11;
  v55 = *(_OWORD *)(a2 + 64);
  v56 = *(_DWORD *)(a2 + 80);
  v12 = *(_OWORD *)(a2 + 16);
  v51 = *(_OWORD *)a2;
  v52 = v12;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v57) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v35, (uint64_t)&v57, a1, (uint64_t)&v51, v7, v8, v9 | ((unint64_t)v10 << 32));
  if ((v59 & 1) == 0)
  {
    v13 = v57;
    LOBYTE(v57) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v13, v58);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  type metadata accessor for _ShapeView<UnevenRoundedRectangle, ForegroundStyle>();
  v14 = v51;
  v15 = DWORD2(v51);
  v16 = v52;
  v17 = DWORD2(v52);
  v18 = HIDWORD(v52);
  v19 = DWORD1(v53);
  v31 = v53;
  v20 = *((_QWORD *)&v53 + 1);
  v21 = v54;
  v22 = HIDWORD(v54);
  v28 = v55;
  v29 = DWORD2(v54);
  v26 = DWORD2(v55);
  v27 = DWORD1(v55);
  v24 = v56;
  v25 = HIDWORD(v55);
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v35 = v14;
  v36 = v15;
  v37 = v16;
  v38 = v17;
  v39 = v18;
  v41 = v19;
  v42 = v20;
  v43 = v21;
  v44 = v29;
  v45 = v22;
  v46 = v28;
  v47 = v27;
  v48 = v26;
  v49 = v25;
  v50 = v24;
  v57 = v14;
  LODWORD(v58) = v15;
  v59 = v16;
  v60 = v17;
  v61 = v18;
  v62 = 0;
  v63 = v19;
  v64 = v20;
  v65 = v21;
  v66 = v29;
  v67 = v22;
  v68 = v28;
  v69 = v27;
  v70 = v26;
  v71 = v25;
  v72 = v24;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static _ShapeView._makeView(view:inputs:)((uint64_t)&v57, (uint64_t)&v33);
  v40 = v31;
  if ((ShouldRecordTree & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v33, &v35);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(_QWORD *)a3 = v33;
  result = v34;
  a3[1] = v34;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  double result;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int ShouldRecordTree;
  int v31;
  uint64_t v33;
  double v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;

  v4 = v3;
  v73 = *MEMORY[0x24BDAC8D0];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v57);
  v7 = v57;
  v8 = v58;
  v9 = v59;
  v10 = HIDWORD(v59);
  v11 = *(_OWORD *)(a2 + 48);
  v53 = *(_OWORD *)(a2 + 32);
  v54 = v11;
  v55 = *(_OWORD *)(a2 + 64);
  v56 = *(_DWORD *)(a2 + 80);
  v12 = *(_OWORD *)(a2 + 16);
  v51 = *(_OWORD *)a2;
  v52 = v12;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v57) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v35, (uint64_t)&v57, a1, (uint64_t)&v51, v7, v8, v9 | ((unint64_t)v10 << 32));
  if ((v59 & 1) == 0)
  {
    v13 = v57;
    LOBYTE(v57) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v13, v58);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  type metadata accessor for _ShapeView<UnevenRoundedRectangle._Inset, ForegroundStyle>();
  v14 = v51;
  v15 = DWORD2(v51);
  v16 = v52;
  v17 = DWORD2(v52);
  v18 = HIDWORD(v52);
  v19 = DWORD1(v53);
  v31 = v53;
  v20 = *((_QWORD *)&v53 + 1);
  v21 = v54;
  v22 = HIDWORD(v54);
  v28 = v55;
  v29 = DWORD2(v54);
  v26 = DWORD2(v55);
  v27 = DWORD1(v55);
  v24 = v56;
  v25 = HIDWORD(v55);
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v35 = v14;
  v36 = v15;
  v37 = v16;
  v38 = v17;
  v39 = v18;
  v41 = v19;
  v42 = v20;
  v43 = v21;
  v44 = v29;
  v45 = v22;
  v46 = v28;
  v47 = v27;
  v48 = v26;
  v49 = v25;
  v50 = v24;
  v57 = v14;
  LODWORD(v58) = v15;
  v59 = v16;
  v60 = v17;
  v61 = v18;
  v62 = 0;
  v63 = v19;
  v64 = v20;
  v65 = v21;
  v66 = v29;
  v67 = v22;
  v68 = v28;
  v69 = v27;
  v70 = v26;
  v71 = v25;
  v72 = v24;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static _ShapeView._makeView(view:inputs:)((uint64_t)&v57, (uint64_t)&v33);
  v40 = v31;
  if ((ShouldRecordTree & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v33, &v35);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(_QWORD *)a3 = v33;
  result = v34;
  a3[1] = v34;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  double result;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int ShouldRecordTree;
  int v32;
  uint64_t v34;
  double v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;

  v4 = v3;
  v74 = *MEMORY[0x24BDAC8D0];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v58);
  v7 = v58;
  v8 = v59;
  v9 = v60;
  v10 = HIDWORD(v60);
  v11 = *(_OWORD *)(a2 + 48);
  v54 = *(_OWORD *)(a2 + 32);
  v55 = v11;
  v56 = *(_OWORD *)(a2 + 64);
  v57 = *(_DWORD *)(a2 + 80);
  v12 = *(_OWORD *)(a2 + 16);
  v52 = *(_OWORD *)a2;
  v53 = v12;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v58) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v36, (uint64_t)&v58, a1, (uint64_t)&v52, v7, v8, v9 | ((unint64_t)v10 << 32));
  v13 = v36;
  if ((v60 & 1) == 0)
  {
    v14 = v58;
    LOBYTE(v58) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v14, v59);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  type metadata accessor for _ShapeView<ContainerRelativeShape, ForegroundStyle>();
  v15 = v52;
  v16 = DWORD2(v52);
  v17 = v53;
  v18 = DWORD2(v53);
  v19 = HIDWORD(v53);
  v20 = DWORD1(v54);
  v32 = v54;
  v21 = *((_QWORD *)&v54 + 1);
  v22 = v55;
  v23 = HIDWORD(v55);
  v29 = v56;
  v30 = DWORD2(v55);
  v27 = DWORD2(v56);
  v28 = DWORD1(v56);
  v25 = v57;
  v26 = HIDWORD(v56);
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v36 = v15;
  v37 = v16;
  v38 = v17;
  v39 = v18;
  v40 = v19;
  v42 = v20;
  v43 = v21;
  v44 = v22;
  v45 = v30;
  v46 = v23;
  v47 = v29;
  v48 = v28;
  v49 = v27;
  v50 = v26;
  v51 = v25;
  v58 = v15;
  LODWORD(v59) = v16;
  v60 = v17;
  v61 = v18;
  v62 = v19;
  v63 = 0;
  v64 = v20;
  v65 = v21;
  v66 = v22;
  v67 = v30;
  v68 = v23;
  v69 = v29;
  v70 = v28;
  v71 = v27;
  v72 = v26;
  v73 = v25;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static _ShapeView._makeView(view:inputs:)(v13, (uint64_t)&v58, (uint64_t)&v34);
  v41 = v32;
  if ((ShouldRecordTree & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v34, &v36);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(_QWORD *)a3 = v34;
  result = v35;
  a3[1] = v35;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  double result;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int ShouldRecordTree;
  int v31;
  uint64_t v33;
  double v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;

  v4 = v3;
  v73 = *MEMORY[0x24BDAC8D0];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v57);
  v7 = v57;
  v8 = v58;
  v9 = v59;
  v10 = HIDWORD(v59);
  v11 = *(_OWORD *)(a2 + 48);
  v53 = *(_OWORD *)(a2 + 32);
  v54 = v11;
  v55 = *(_OWORD *)(a2 + 64);
  v56 = *(_DWORD *)(a2 + 80);
  v12 = *(_OWORD *)(a2 + 16);
  v51 = *(_OWORD *)a2;
  v52 = v12;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v57) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v35, (uint64_t)&v57, a1, (uint64_t)&v51, v7, v8, v9 | ((unint64_t)v10 << 32));
  if ((v59 & 1) == 0)
  {
    v13 = v57;
    LOBYTE(v57) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v13, v58);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  type metadata accessor for _ShapeView<ContainerRelativeShape._Inset, ForegroundStyle>();
  v14 = v51;
  v15 = DWORD2(v51);
  v16 = v52;
  v17 = DWORD2(v52);
  v18 = HIDWORD(v52);
  v19 = DWORD1(v53);
  v31 = v53;
  v20 = *((_QWORD *)&v53 + 1);
  v21 = v54;
  v22 = HIDWORD(v54);
  v28 = v55;
  v29 = DWORD2(v54);
  v26 = DWORD2(v55);
  v27 = DWORD1(v55);
  v24 = v56;
  v25 = HIDWORD(v55);
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v35 = v14;
  v36 = v15;
  v37 = v16;
  v38 = v17;
  v39 = v18;
  v41 = v19;
  v42 = v20;
  v43 = v21;
  v44 = v29;
  v45 = v22;
  v46 = v28;
  v47 = v27;
  v48 = v26;
  v49 = v25;
  v50 = v24;
  v57 = v14;
  LODWORD(v58) = v15;
  v59 = v16;
  v60 = v17;
  v61 = v18;
  v62 = 0;
  v63 = v19;
  v64 = v20;
  v65 = v21;
  v66 = v29;
  v67 = v22;
  v68 = v28;
  v69 = v27;
  v70 = v26;
  v71 = v25;
  v72 = v24;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static _ShapeView._makeView(view:inputs:)((uint64_t)&v57, (uint64_t)&v33);
  v40 = v31;
  if ((ShouldRecordTree & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v33, &v35);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(_QWORD *)a3 = v33;
  result = v34;
  a3[1] = v34;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  double result;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int ShouldRecordTree;
  int v31;
  uint64_t v33;
  double v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;

  v4 = v3;
  v73 = *MEMORY[0x24BDAC8D0];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v57);
  v7 = v57;
  v8 = v58;
  v9 = v59;
  v10 = HIDWORD(v59);
  v11 = *(_OWORD *)(a2 + 48);
  v53 = *(_OWORD *)(a2 + 32);
  v54 = v11;
  v55 = *(_OWORD *)(a2 + 64);
  v56 = *(_DWORD *)(a2 + 80);
  v12 = *(_OWORD *)(a2 + 16);
  v51 = *(_OWORD *)a2;
  v52 = v12;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v57) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v35, (uint64_t)&v57, a1, (uint64_t)&v51, v7, v8, v9 | ((unint64_t)v10 << 32));
  if ((v59 & 1) == 0)
  {
    v13 = v57;
    LOBYTE(v57) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v13, v58);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  type metadata accessor for ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Bool>>, _EnvironmentKeyWritingModifier<Font?>>(0);
  v14 = v51;
  v15 = DWORD2(v51);
  v16 = v52;
  v17 = DWORD2(v52);
  v18 = HIDWORD(v52);
  v19 = DWORD1(v53);
  v31 = v53;
  v20 = *((_QWORD *)&v53 + 1);
  v21 = v54;
  v22 = HIDWORD(v54);
  v28 = v55;
  v29 = DWORD2(v54);
  v26 = DWORD2(v55);
  v27 = DWORD1(v55);
  v24 = v56;
  v25 = HIDWORD(v55);
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v35 = v14;
  v36 = v15;
  v37 = v16;
  v38 = v17;
  v39 = v18;
  v41 = v19;
  v42 = v20;
  v43 = v21;
  v44 = v29;
  v45 = v22;
  v46 = v28;
  v47 = v27;
  v48 = v26;
  v49 = v25;
  v50 = v24;
  v57 = v14;
  LODWORD(v58) = v15;
  v59 = v16;
  v60 = v17;
  v61 = v18;
  v62 = 0;
  v63 = v19;
  v64 = v20;
  v65 = v21;
  v66 = v29;
  v67 = v22;
  v68 = v28;
  v69 = v27;
  v70 = v26;
  v71 = v25;
  v72 = v24;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static ModifiedContent<>._makeView(view:inputs:)((uint64_t)&v57, (double *)&v33);
  v40 = v31;
  if ((ShouldRecordTree & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v33, &v35);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(_QWORD *)a3 = v33;
  result = v34;
  a3[1] = v34;
  return result;
}

{
  uint64_t v3;
  __int128 v6;
  unsigned __int8 v7;
  unsigned int v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int OffsetAttribute2;
  double result;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  int ShouldRecordTree;
  uint64_t v32;
  double v33;
  _OWORD v34[2];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  int v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  int v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v61);
  v6 = v61;
  v7 = v62;
  v8 = DWORD1(v62);
  v9 = *(_OWORD *)(a2 + 48);
  v57 = *(_OWORD *)(a2 + 32);
  v58 = v9;
  v59 = *(_OWORD *)(a2 + 64);
  v60 = *(_DWORD *)(a2 + 80);
  v10 = *(_OWORD *)(a2 + 16);
  v55 = *(_OWORD *)a2;
  v56 = v10;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v61) = v7;
  specialized static View.makeBody(view:inputs:fields:)(&v39, (uint64_t)&v61, a1, (uint64_t)&v55, v6, *((uint64_t *)&v6 + 1), v7 | ((unint64_t)v8 << 32));
  if ((v62 & 1) == 0)
  {
    v11 = v61;
    LOBYTE(v61) = v7;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v6, *((uint64_t *)&v6 + 1), v7, v11, *((uint64_t *)&v61 + 1));
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  type metadata accessor for ModifiedContent<Text, _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>>(0);
  v12 = v55;
  v13 = DWORD2(v55);
  v14 = v56;
  v15 = DWORD2(v56);
  v16 = HIDWORD(v56);
  v17 = *((_QWORD *)&v57 + 1);
  v18 = v58;
  v19 = DWORD2(v58);
  v20 = HIDWORD(v58);
  v28 = v59;
  v29 = DWORD1(v57);
  v26 = DWORD2(v59);
  v27 = DWORD1(v59);
  v25 = HIDWORD(v59);
  v23 = v57;
  v24 = v60;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v39 = v12;
  v40 = v13;
  v41 = v14;
  v42 = v15;
  v43 = v16;
  v46 = v17;
  v47 = v18;
  v48 = v19;
  v49 = v20;
  v50 = v28;
  v51 = v27;
  v52 = v26;
  v53 = v25;
  v54 = v24;
  v44 = 0;
  v45 = v29;
  *(_QWORD *)&v61 = v12;
  DWORD2(v61) = v13;
  *(_QWORD *)&v62 = v14;
  *((_QWORD *)&v62 + 1) = __PAIR64__(v16, v15);
  LODWORD(v63) = 0;
  DWORD1(v63) = v29;
  *((_QWORD *)&v63 + 1) = v17;
  *(_QWORD *)&v64 = v18;
  *((_QWORD *)&v64 + 1) = __PAIR64__(v20, v19);
  *(_QWORD *)&v65 = __PAIR64__(v27, v28);
  *((_QWORD *)&v65 + 1) = __PAIR64__(v25, v26);
  v66 = v24;
  type metadata accessor for _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v35 = v63;
  v36 = v64;
  v37 = v65;
  v38 = v66;
  v34[0] = v61;
  v34[1] = v62;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  specialized makeSecondaryPreferenceView<A, B>(modifier:inputs:body:flipOrder:)(OffsetAttribute2, (uint64_t)&v61, 0, (uint64_t)&v32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  LODWORD(v35) = 0;
  if ((ShouldRecordTree & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v32, v34);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v44 = v23;
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v32, &v39);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(_QWORD *)a3 = v32;
  result = v33;
  a3[1] = v33;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  double result;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int ShouldRecordTree;
  int v32;
  uint64_t v34;
  double v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;

  v4 = v3;
  v74 = *MEMORY[0x24BDAC8D0];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v58);
  v7 = v58;
  v8 = v59;
  v9 = v60;
  v10 = HIDWORD(v60);
  v11 = *(_OWORD *)(a2 + 48);
  v54 = *(_OWORD *)(a2 + 32);
  v55 = v11;
  v56 = *(_OWORD *)(a2 + 64);
  v57 = *(_DWORD *)(a2 + 80);
  v12 = *(_OWORD *)(a2 + 16);
  v52 = *(_OWORD *)a2;
  v53 = v12;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v58) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v36, (uint64_t)&v58, a1, (uint64_t)&v52, v7, v8, v9 | ((unint64_t)v10 << 32));
  v13 = v36;
  if ((v60 & 1) == 0)
  {
    v14 = v58;
    LOBYTE(v58) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v14, v59);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  type metadata accessor for _ShapeView<Rectangle, EllipticalGradient>();
  v15 = v52;
  v16 = DWORD2(v52);
  v17 = v53;
  v18 = DWORD2(v53);
  v19 = HIDWORD(v53);
  v20 = DWORD1(v54);
  v32 = v54;
  v21 = *((_QWORD *)&v54 + 1);
  v22 = v55;
  v23 = HIDWORD(v55);
  v29 = v56;
  v30 = DWORD2(v55);
  v27 = DWORD2(v56);
  v28 = DWORD1(v56);
  v25 = v57;
  v26 = HIDWORD(v56);
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v36 = v15;
  v37 = v16;
  v38 = v17;
  v39 = v18;
  v40 = v19;
  v42 = v20;
  v43 = v21;
  v44 = v22;
  v45 = v30;
  v46 = v23;
  v47 = v29;
  v48 = v28;
  v49 = v27;
  v50 = v26;
  v51 = v25;
  v58 = v15;
  LODWORD(v59) = v16;
  v60 = v17;
  v61 = v18;
  v62 = v19;
  v63 = 0;
  v64 = v20;
  v65 = v21;
  v66 = v22;
  v67 = v30;
  v68 = v23;
  v69 = v29;
  v70 = v28;
  v71 = v27;
  v72 = v26;
  v73 = v25;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static _ShapeView._makeView(view:inputs:)(v13, (uint64_t)&v58, (uint64_t)&v34);
  v41 = v32;
  if ((ShouldRecordTree & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v34, &v36);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(_QWORD *)a3 = v34;
  result = v35;
  a3[1] = v35;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  double result;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int ShouldRecordTree;
  int v31;
  uint64_t v33;
  double v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;

  v4 = v3;
  v73 = *MEMORY[0x24BDAC8D0];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v57);
  v7 = v57;
  v8 = v58;
  v9 = v59;
  v10 = HIDWORD(v59);
  v11 = *(_OWORD *)(a2 + 48);
  v53 = *(_OWORD *)(a2 + 32);
  v54 = v11;
  v55 = *(_OWORD *)(a2 + 64);
  v56 = *(_DWORD *)(a2 + 80);
  v12 = *(_OWORD *)(a2 + 16);
  v51 = *(_OWORD *)a2;
  v52 = v12;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v57) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v35, (uint64_t)&v57, a1, (uint64_t)&v51, v7, v8, v9 | ((unint64_t)v10 << 32));
  if ((v59 & 1) == 0)
  {
    v13 = v57;
    LOBYTE(v57) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v13, v58);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  type metadata accessor for _ShapeView<RoundedRectangle, ForegroundStyle>();
  v14 = v51;
  v15 = DWORD2(v51);
  v16 = v52;
  v17 = DWORD2(v52);
  v18 = HIDWORD(v52);
  v19 = DWORD1(v53);
  v31 = v53;
  v20 = *((_QWORD *)&v53 + 1);
  v21 = v54;
  v22 = HIDWORD(v54);
  v28 = v55;
  v29 = DWORD2(v54);
  v26 = DWORD2(v55);
  v27 = DWORD1(v55);
  v24 = v56;
  v25 = HIDWORD(v55);
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v35 = v14;
  v36 = v15;
  v37 = v16;
  v38 = v17;
  v39 = v18;
  v41 = v19;
  v42 = v20;
  v43 = v21;
  v44 = v29;
  v45 = v22;
  v46 = v28;
  v47 = v27;
  v48 = v26;
  v49 = v25;
  v50 = v24;
  v57 = v14;
  LODWORD(v58) = v15;
  v59 = v16;
  v60 = v17;
  v61 = v18;
  v62 = 0;
  v63 = v19;
  v64 = v20;
  v65 = v21;
  v66 = v29;
  v67 = v22;
  v68 = v28;
  v69 = v27;
  v70 = v26;
  v71 = v25;
  v72 = v24;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static _ShapeView._makeView(view:inputs:)((uint64_t)&v57, (uint64_t)&v33);
  v40 = v31;
  if ((ShouldRecordTree & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v33, &v35);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(_QWORD *)a3 = v33;
  result = v34;
  a3[1] = v34;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  double result;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int ShouldRecordTree;
  int v31;
  uint64_t v33;
  double v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;

  v4 = v3;
  v73 = *MEMORY[0x24BDAC8D0];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v57);
  v7 = v57;
  v8 = v58;
  v9 = v59;
  v10 = HIDWORD(v59);
  v11 = *(_OWORD *)(a2 + 48);
  v53 = *(_OWORD *)(a2 + 32);
  v54 = v11;
  v55 = *(_OWORD *)(a2 + 64);
  v56 = *(_DWORD *)(a2 + 80);
  v12 = *(_OWORD *)(a2 + 16);
  v51 = *(_OWORD *)a2;
  v52 = v12;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v57) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v35, (uint64_t)&v57, a1, (uint64_t)&v51, v7, v8, v9 | ((unint64_t)v10 << 32));
  if ((v59 & 1) == 0)
  {
    v13 = v57;
    LOBYTE(v57) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v13, v58);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  type metadata accessor for _ShapeView<RoundedRectangle._Inset, ForegroundStyle>();
  v14 = v51;
  v15 = DWORD2(v51);
  v16 = v52;
  v17 = DWORD2(v52);
  v18 = HIDWORD(v52);
  v19 = DWORD1(v53);
  v31 = v53;
  v20 = *((_QWORD *)&v53 + 1);
  v21 = v54;
  v22 = HIDWORD(v54);
  v28 = v55;
  v29 = DWORD2(v54);
  v26 = DWORD2(v55);
  v27 = DWORD1(v55);
  v24 = v56;
  v25 = HIDWORD(v55);
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v35 = v14;
  v36 = v15;
  v37 = v16;
  v38 = v17;
  v39 = v18;
  v41 = v19;
  v42 = v20;
  v43 = v21;
  v44 = v29;
  v45 = v22;
  v46 = v28;
  v47 = v27;
  v48 = v26;
  v49 = v25;
  v50 = v24;
  v57 = v14;
  LODWORD(v58) = v15;
  v59 = v16;
  v60 = v17;
  v61 = v18;
  v62 = 0;
  v63 = v19;
  v64 = v20;
  v65 = v21;
  v66 = v29;
  v67 = v22;
  v68 = v28;
  v69 = v27;
  v70 = v26;
  v71 = v25;
  v72 = v24;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static _ShapeView._makeView(view:inputs:)((uint64_t)&v57, (uint64_t)&v33);
  v40 = v31;
  if ((ShouldRecordTree & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v33, &v35);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(_QWORD *)a3 = v33;
  result = v34;
  a3[1] = v34;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  double result;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int ShouldRecordTree;
  int v32;
  uint64_t v34;
  double v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;

  v4 = v3;
  v74 = *MEMORY[0x24BDAC8D0];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v58);
  v7 = v58;
  v8 = v59;
  v9 = v60;
  v10 = HIDWORD(v60);
  v11 = *(_OWORD *)(a2 + 48);
  v54 = *(_OWORD *)(a2 + 32);
  v55 = v11;
  v56 = *(_OWORD *)(a2 + 64);
  v57 = *(_DWORD *)(a2 + 80);
  v12 = *(_OWORD *)(a2 + 16);
  v52 = *(_OWORD *)a2;
  v53 = v12;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v58) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v36, (uint64_t)&v58, a1, (uint64_t)&v52, v7, v8, v9 | ((unint64_t)v10 << 32));
  v13 = v36;
  if ((v60 & 1) == 0)
  {
    v14 = v58;
    LOBYTE(v58) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v14, v59);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  type metadata accessor for _ShapeView<Rectangle, AngularGradient>();
  v15 = v52;
  v16 = DWORD2(v52);
  v17 = v53;
  v18 = DWORD2(v53);
  v19 = HIDWORD(v53);
  v20 = DWORD1(v54);
  v32 = v54;
  v21 = *((_QWORD *)&v54 + 1);
  v22 = v55;
  v23 = HIDWORD(v55);
  v29 = v56;
  v30 = DWORD2(v55);
  v27 = DWORD2(v56);
  v28 = DWORD1(v56);
  v25 = v57;
  v26 = HIDWORD(v56);
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v36 = v15;
  v37 = v16;
  v38 = v17;
  v39 = v18;
  v40 = v19;
  v42 = v20;
  v43 = v21;
  v44 = v22;
  v45 = v30;
  v46 = v23;
  v47 = v29;
  v48 = v28;
  v49 = v27;
  v50 = v26;
  v51 = v25;
  v58 = v15;
  LODWORD(v59) = v16;
  v60 = v17;
  v61 = v18;
  v62 = v19;
  v63 = 0;
  v64 = v20;
  v65 = v21;
  v66 = v22;
  v67 = v30;
  v68 = v23;
  v69 = v29;
  v70 = v28;
  v71 = v27;
  v72 = v26;
  v73 = v25;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static _ShapeView._makeView(view:inputs:)(v13, (uint64_t)&v58, (uint64_t)&v34);
  v41 = v32;
  if ((ShouldRecordTree & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v34, &v36);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(_QWORD *)a3 = v34;
  result = v35;
  a3[1] = v35;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  double result;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int ShouldRecordTree;
  int v32;
  uint64_t v34;
  double v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;

  v4 = v3;
  v74 = *MEMORY[0x24BDAC8D0];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v58);
  v7 = v58;
  v8 = v59;
  v9 = v60;
  v10 = HIDWORD(v60);
  v11 = *(_OWORD *)(a2 + 48);
  v54 = *(_OWORD *)(a2 + 32);
  v55 = v11;
  v56 = *(_OWORD *)(a2 + 64);
  v57 = *(_DWORD *)(a2 + 80);
  v12 = *(_OWORD *)(a2 + 16);
  v52 = *(_OWORD *)a2;
  v53 = v12;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v58) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v36, (uint64_t)&v58, a1, (uint64_t)&v52, v7, v8, v9 | ((unint64_t)v10 << 32));
  v13 = v36;
  if ((v60 & 1) == 0)
  {
    v14 = v58;
    LOBYTE(v58) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v14, v59);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  type metadata accessor for _ShapeView<Rectangle, RadialGradient>();
  v15 = v52;
  v16 = DWORD2(v52);
  v17 = v53;
  v18 = DWORD2(v53);
  v19 = HIDWORD(v53);
  v20 = DWORD1(v54);
  v32 = v54;
  v21 = *((_QWORD *)&v54 + 1);
  v22 = v55;
  v23 = HIDWORD(v55);
  v29 = v56;
  v30 = DWORD2(v55);
  v27 = DWORD2(v56);
  v28 = DWORD1(v56);
  v25 = v57;
  v26 = HIDWORD(v56);
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v36 = v15;
  v37 = v16;
  v38 = v17;
  v39 = v18;
  v40 = v19;
  v42 = v20;
  v43 = v21;
  v44 = v22;
  v45 = v30;
  v46 = v23;
  v47 = v29;
  v48 = v28;
  v49 = v27;
  v50 = v26;
  v51 = v25;
  v58 = v15;
  LODWORD(v59) = v16;
  v60 = v17;
  v61 = v18;
  v62 = v19;
  v63 = 0;
  v64 = v20;
  v65 = v21;
  v66 = v22;
  v67 = v30;
  v68 = v23;
  v69 = v29;
  v70 = v28;
  v71 = v27;
  v72 = v26;
  v73 = v25;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static _ShapeView._makeView(view:inputs:)(v13, (uint64_t)&v58, (uint64_t)&v34);
  v41 = v32;
  if ((ShouldRecordTree & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v34, &v36);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(_QWORD *)a3 = v34;
  result = v35;
  a3[1] = v35;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  double result;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int ShouldRecordTree;
  int v32;
  uint64_t v34;
  double v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;

  v4 = v3;
  v74 = *MEMORY[0x24BDAC8D0];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v58);
  v7 = v58;
  v8 = v59;
  v9 = v60;
  v10 = HIDWORD(v60);
  v11 = *(_OWORD *)(a2 + 48);
  v54 = *(_OWORD *)(a2 + 32);
  v55 = v11;
  v56 = *(_OWORD *)(a2 + 64);
  v57 = *(_DWORD *)(a2 + 80);
  v12 = *(_OWORD *)(a2 + 16);
  v52 = *(_OWORD *)a2;
  v53 = v12;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v58) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v36, (uint64_t)&v58, a1, (uint64_t)&v52, v7, v8, v9 | ((unint64_t)v10 << 32));
  v13 = v36;
  if ((v60 & 1) == 0)
  {
    v14 = v58;
    LOBYTE(v58) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v14, v59);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  type metadata accessor for _ShapeView<Rectangle, LinearGradient>();
  v15 = v52;
  v16 = DWORD2(v52);
  v17 = v53;
  v18 = DWORD2(v53);
  v19 = HIDWORD(v53);
  v20 = DWORD1(v54);
  v32 = v54;
  v21 = *((_QWORD *)&v54 + 1);
  v22 = v55;
  v23 = HIDWORD(v55);
  v29 = v56;
  v30 = DWORD2(v55);
  v27 = DWORD2(v56);
  v28 = DWORD1(v56);
  v25 = v57;
  v26 = HIDWORD(v56);
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v36 = v15;
  v37 = v16;
  v38 = v17;
  v39 = v18;
  v40 = v19;
  v42 = v20;
  v43 = v21;
  v44 = v22;
  v45 = v30;
  v46 = v23;
  v47 = v29;
  v48 = v28;
  v49 = v27;
  v50 = v26;
  v51 = v25;
  v58 = v15;
  LODWORD(v59) = v16;
  v60 = v17;
  v61 = v18;
  v62 = v19;
  v63 = 0;
  v64 = v20;
  v65 = v21;
  v66 = v22;
  v67 = v30;
  v68 = v23;
  v69 = v29;
  v70 = v28;
  v71 = v27;
  v72 = v26;
  v73 = v25;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static _ShapeView._makeView(view:inputs:)(v13, (uint64_t)&v58, (uint64_t)&v34);
  v41 = v32;
  if ((ShouldRecordTree & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v34, &v36);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(_QWORD *)a3 = v34;
  result = v35;
  a3[1] = v35;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  double result;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int ShouldRecordTree;
  int v32;
  uint64_t v34;
  double v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;

  v4 = v3;
  v74 = *MEMORY[0x24BDAC8D0];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v58);
  v7 = v58;
  v8 = v59;
  v9 = v60;
  v10 = HIDWORD(v60);
  v11 = *(_OWORD *)(a2 + 48);
  v54 = *(_OWORD *)(a2 + 32);
  v55 = v11;
  v56 = *(_OWORD *)(a2 + 64);
  v57 = *(_DWORD *)(a2 + 80);
  v12 = *(_OWORD *)(a2 + 16);
  v52 = *(_OWORD *)a2;
  v53 = v12;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v58) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v36, (uint64_t)&v58, a1, (uint64_t)&v52, v7, v8, v9 | ((unint64_t)v10 << 32));
  v13 = v36;
  if ((v60 & 1) == 0)
  {
    v14 = v58;
    LOBYTE(v58) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v14, v59);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  type metadata accessor for _ShapeView<Rectangle, MeshGradient>();
  v15 = v52;
  v16 = DWORD2(v52);
  v17 = v53;
  v18 = DWORD2(v53);
  v19 = HIDWORD(v53);
  v20 = DWORD1(v54);
  v32 = v54;
  v21 = *((_QWORD *)&v54 + 1);
  v22 = v55;
  v23 = HIDWORD(v55);
  v29 = v56;
  v30 = DWORD2(v55);
  v27 = DWORD2(v56);
  v28 = DWORD1(v56);
  v25 = v57;
  v26 = HIDWORD(v56);
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v36 = v15;
  v37 = v16;
  v38 = v17;
  v39 = v18;
  v40 = v19;
  v42 = v20;
  v43 = v21;
  v44 = v22;
  v45 = v30;
  v46 = v23;
  v47 = v29;
  v48 = v28;
  v49 = v27;
  v50 = v26;
  v51 = v25;
  v58 = v15;
  LODWORD(v59) = v16;
  v60 = v17;
  v61 = v18;
  v62 = v19;
  v63 = 0;
  v64 = v20;
  v65 = v21;
  v66 = v22;
  v67 = v30;
  v68 = v23;
  v69 = v29;
  v70 = v28;
  v71 = v27;
  v72 = v26;
  v73 = v25;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static _ShapeView._makeView(view:inputs:)(v13, (uint64_t)&v58, (uint64_t)&v34);
  v41 = v32;
  if ((ShouldRecordTree & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v34, &v36);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(_QWORD *)a3 = v34;
  result = v35;
  a3[1] = v35;
  return result;
}

uint64_t _IntelligenceSupportMakeSummarySymbol(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v6)(_QWORD, uint64_t, uint64_t);
  void *v7;
  uint64_t v8;

  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v6 = *(uint64_t (**)(_QWORD, uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue2.shared)
                                                          + 0xA0);
  v7 = static CoreGlue2.shared;
  v8 = v6(a1 & 1, a2, a3);

  return v8;
}

uint64_t _IntelligenceSupport.AnimatingText.Context.summarySymbol(isOn:foregroundColor:)(int a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  unint64_t v17;
  unint64_t v18;
  Swift::String v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;

  v43 = a2;
  v42 = a1;
  v3 = type metadata accessor for LocalizedStringKey.FormatArgument(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v40 - v9;
  v41 = *v2;
  v50 = 0;
  v51 = 0xE000000000000000;
  v53 = 0;
  MEMORY[0x23B7C5E90](2, v8);
  v11 = MEMORY[0x24BEE4AF8];
  v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 0, MEMORY[0x24BEE4AF8]);
  v52 = v12;
  v48 = 0;
  v49 = 0xE000000000000000;
  v46 = 37;
  v47 = 0xE100000000000000;
  v44 = 9509;
  v45 = 0xE200000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  v13._countAndFlagsBits = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  if (one-time initialization token for symbolImage != -1)
    swift_once();
  v14 = static SummarySymbol.symbolImage;
  type metadata accessor for AttachmentTextStorage();
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = v14;
  v53 = 1;
  *(_QWORD *)v10 = v15;
  *((_QWORD *)v10 + 1) = 0;
  v10[16] = 1;
  *((_QWORD *)v10 + 3) = v11;
  *((_QWORD *)v10 + 4) = 0;
  type metadata accessor for LocalizedStringKey.FormatArgument.Storage(0);
  swift_storeEnumTagMultiPayload();
  swift_retain();
  swift_retain();
  v16._countAndFlagsBits = 16421;
  v16._object = (void *)0xE200000000000000;
  String.append(_:)(v16);
  outlined init with copy of LocalizedStringKey.FormatArgument((uint64_t)v10, (uint64_t)v6);
  v18 = *(_QWORD *)(v12 + 16);
  v17 = *(_QWORD *)(v12 + 24);
  if (v18 >= v17 >> 1)
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1, v12);
  *(_QWORD *)(v12 + 16) = v18 + 1;
  outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v6, v12+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v18);
  v52 = v12;
  outlined destroy of LocalizedStringKey.FormatArgument((uint64_t)v10);
  swift_release();
  v48 = 0;
  v49 = 0xE000000000000000;
  v46 = 37;
  v47 = 0xE100000000000000;
  v44 = 9509;
  v45 = 0xE200000000000000;
  v19._countAndFlagsBits = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20 = v50;
  v21 = v51;
  v22 = v52;
  type metadata accessor for LocalizedTextStorage();
  v23 = swift_allocObject();
  v24 = v23;
  *(_QWORD *)(v23 + 16) = v20;
  *(_QWORD *)(v23 + 24) = v21;
  *(_BYTE *)(v23 + 32) = 1;
  if ((v42 & 1) != 0)
    v25 = 1.0;
  else
    v25 = 0.0;
  *(_QWORD *)(v23 + 40) = v22;
  *(_QWORD *)(v23 + 48) = 0;
  v26 = v43;
  *(_QWORD *)(v23 + 56) = 0;
  *(_QWORD *)(v23 + 64) = 0;
  if (!v26)
  {
    v26 = v41;
    swift_retain();
  }
  swift_retain();
  v27 = specialized Text.customAttribute<A>(_:)(v26, v24, 0, 1, MEMORY[0x24BEE4AF8], v25);
  v29 = v28;
  v31 = v30;
  v33 = v32;
  swift_release();
  swift_release();
  if (one-time initialization token for clear != -1)
    swift_once();
  v34 = static Color.clear;
  swift_retain_n();
  outlined copy of Text.Storage(v27, v29, v31 & 1);
  swift_bridgeObjectRetain();
  v35 = v33;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33[2] + 1, 1, v33);
  v37 = v35[2];
  v36 = v35[3];
  if (v37 >= v36 >> 1)
    v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v36 > 1), v37 + 1, 1, v35);
  v35[2] = v37 + 1;
  v38 = &v35[2 * v37];
  v38[4] = v34;
  *((_BYTE *)v38 + 40) = 0;
  outlined consume of Text.Storage(v27, v29, v31 & 1);
  swift_release();
  swift_bridgeObjectRelease();
  return v27;
}

uint64_t specialized Text.customAttribute<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5, double a6)
{
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for TextAttributeModifier<SummaryAttribute>, (uint64_t (*)(void))lazy protocol witness table accessor for type SummaryAttribute and conformance SummaryAttribute, (uint64_t)&unk_250622D88, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextAttributeModifier);
  v12 = swift_allocObject();
  *(double *)(v12 + 16) = a6;
  *(_QWORD *)(v12 + 24) = a1;
  swift_retain();
  outlined copy of Text.Storage(a2, a3, a4 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a5[2] + 1, 1, a5);
  v14 = a5[2];
  v13 = a5[3];
  if (v14 >= v13 >> 1)
    a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, a5);
  a5[2] = v14 + 1;
  v15 = &a5[2 * v14];
  v15[4] = v12;
  *((_BYTE *)v15 + 40) = -64;
  swift_release();
  return a2;
}

uint64_t _IntelligenceSupport.AnimatingText.init(foregroundColor:body:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t *)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v12 = a1;
  v4 = a2(&v12);
  v6 = v5;
  v8 = v7;
  v10 = v9;
  result = swift_release();
  *(_QWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = v8 & 1;
  *(_QWORD *)(a3 + 24) = v10;
  return result;
}

double _IntelligenceSupport.AnimatingText.body.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  v4 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v5 = *(_BYTE *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  outlined copy of Text.Storage(*(_QWORD *)v1, v3, v5);
  v7 = one-time initialization token for topLeading;
  swift_bridgeObjectRetain();
  if (v7 != -1)
    swift_once();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = closure #1 in _IntelligenceSupport.AnimatingText.body.getter;
  *(_QWORD *)(a1 + 40) = 0;
  result = *(double *)&static Alignment.topLeading;
  *(_OWORD *)(a1 + 48) = static Alignment.topLeading;
  return result;
}

uint64_t closure #1 in _IntelligenceSupport.AnimatingText.body.getter@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t result;

  v3 = Array<A>.summaryPlacements.getter(*a1);
  v4 = v3[2];
  KeyPath = swift_getKeyPath();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v3;
  v7 = one-time initialization token for v6;
  swift_retain();
  if (v7 != -1)
    swift_once();
  v8 = static Semantics.v6;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FAB4 != 1)
  {
    if (static Semantics.forced < v8)
      goto LABEL_7;
LABEL_9:
    v9 = 0;
    goto LABEL_10;
  }
  if ((dyld_program_sdk_at_least() & 1) != 0)
    goto LABEL_9;
LABEL_7:
  v9 = AGMakeUniqueID();
LABEL_10:
  result = swift_release();
  *a2 = 0;
  a2[1] = v4;
  a2[2] = partial apply for closure #1 in closure #1 in _IntelligenceSupport.AnimatingText.body.getter;
  a2[3] = v6;
  a2[4] = KeyPath;
  a2[5] = 0;
  a2[6] = v9;
  return result;
}

_QWORD *Array<A>.summaryPlacements.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  char v13;
  const __CFArray *v14;
  const __CTLine *v15;
  const __CFArray *RunCount;
  _QWORD *v17;
  const __CTLine *v18;
  const __CFArray *v19;
  const __CTLine *v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  const __CFDictionary *v26;
  CFIndex v27;
  CGFloat x;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const __CTLine *v38;
  void *v39;
  double v40;
  double y;
  double v42;
  double v43;
  double TypographicBounds;
  CGFloat v45;
  double v46;
  CGFloat v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  double *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  unint64_t v58;
  double v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  CFIndex v64;
  char v65;
  CGFloat leading;
  CGFloat descent;
  CGFloat ascent;
  CGPoint originsBuffer;
  __int128 v70;
  CGPoint buffer;
  uint64_t v72;
  uint64_t v73;
  CFRange v74;
  CFRange v75;
  CFRange v76;

  v73 = *MEMORY[0x24BDAC8D0];
  v54 = *(_QWORD *)(a1 + 16);
  if (!v54)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  v1 = a1 + 32;
  swift_bridgeObjectRetain();
  v2 = 0;
  v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v4 = &lazy protocol witness table cache variable for type Image.CGImageProvider and conformance Image.CGImageProvider;
  v53 = v1;
  while (1)
  {
    v6 = (uint64_t *)(v1 + 32 * v2);
    v7 = v6[1];
    v8 = *(_QWORD *)(v7 + 16);
    if (v8)
      break;
LABEL_6:
    ++v2;
    v1 = v53;
    if (v2 == v54)
      goto LABEL_61;
  }
  v52 = v2;
  v56 = v7 + 32;
  v62 = *v6;
  swift_retain();
  swift_bridgeObjectRetain_n();
  v9 = 0;
  v55 = v7;
LABEL_10:
  if (v9 >= v8)
  {
    __break(1u);
LABEL_63:
    __break(1u);
  }
  v63 = v3;
  v10 = v56 + 48 * v9;
  v11 = *(void **)v10;
  v12 = *(_QWORD *)(v10 + 8);
  v13 = *(_BYTE *)(v10 + 16);
  v59 = *(double *)(v10 + 32);
  v60 = *(double *)(v10 + 24);
  v58 = v9 + 1;
  v65 = v13;
  outlined copy of Text.Layout.Line.Line(*(void **)v10, v12, v13);
  outlined copy of Text.Layout.Line.Line(v11, v12, v13);
  v14 = 0;
  v57 = v13;
  while (1)
  {
    v64 = (CFIndex)v14;
    if ((v13 & 1) != 0)
    {
      v15 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v11);
      if (!v15)
      {
        if (!v14)
        {
          v13 = 1;
LABEL_9:
          outlined consume of Text.Layout.Line.Line(v11, v12, v13 & 1);
          outlined consume of Text.Layout.Line.Line(v11, v12, v57);
          v8 = *(_QWORD *)(v55 + 16);
          v9 = v58;
          v3 = v63;
          if (v58 == v8)
          {
            swift_release();
            swift_bridgeObjectRelease_n();
            v2 = v52;
            goto LABEL_6;
          }
          goto LABEL_10;
        }
        goto LABEL_22;
      }
    }
    else
    {
      outlined copy of Text.Layout.Line.Line(v11, v12, 0);
      swift_release();
      v15 = (const __CTLine *)v11;
    }
    RunCount = _CTLineGetRunCount(v15);

    if (v14 == RunCount)
      goto LABEL_9;
    if ((v13 & 1) == 0)
    {
      outlined copy of Text.Layout.Line.Line(v11, v12, 0);
      swift_release();
      outlined copy of Text.Layout.Line.Line(v11, v12, 0);

      outlined copy of Text.Layout.Line.Line(v11, v12, 0);
      outlined copy of Text.Layout.Line.Line(v11, v12, 0);
      swift_release();
      v20 = (const __CTLine *)v11;
      v3 = v11;
      goto LABEL_26;
    }
LABEL_22:
    v17 = (id)_NSTextLineFragmentGetCTLine(v11);
    if (!v17)
      goto LABEL_63;
    v3 = v17;
    outlined copy of Text.Layout.Line.Line(v11, v12, 1);
    v18 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v11);
    v19 = 0;
    if (v18)
    {
      v20 = v18;
LABEL_26:
      v19 = _CTLineGetRunCount(v20);

      goto LABEL_28;
    }
    v13 = 1;
LABEL_28:
    outlined consume of Text.Layout.Line.Line(v11, v12, v13 & 1);
    if (v64 >= (uint64_t)v19)
      goto LABEL_60;
    v21 = v4[284];
    v22 = v3;
    swift_retain();
    if (v21 != -1)
      swift_once();
    v3 = v22;
    swift_retain();
    v23 = (id)_CTLineGetRunAtIndex((const __CTLine *)v3, v64);
    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v25 = (void *)MEMORY[0x23B7C5DAC](v24);
    swift_bridgeObjectRelease();
    v26 = _CTRunGetAttributeValueForKey((const __CTRun *)v23, v25);

    if (v26)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      originsBuffer = (CGPoint)0;
      v70 = 0u;
    }
    outlined init with take of Any?((uint64_t)&originsBuffer, (uint64_t)&buffer);
    swift_release();

    v27 = v64;
    if (!v72)
    {
      outlined destroy of Any?((uint64_t)&buffer);
LABEL_13:
      swift_release_n();

      goto LABEL_14;
    }
    if ((swift_dynamicCast() & 1) == 0)
      goto LABEL_13;
    x = originsBuffer.x;
    if (*(_QWORD *)&originsBuffer.x >> 62)
    {
      swift_bridgeObjectRetain();
      v29 = _CocoaArrayWrapper.endIndex.getter();
      if (!v29)
      {
LABEL_48:
        swift_bridgeObjectRelease_n();
        swift_release_n();

        v4 = &lazy protocol witness table cache variable for type Image.CGImageProvider and conformance Image.CGImageProvider;
        v27 = v64;
        goto LABEL_14;
      }
    }
    else
    {
      v29 = *(_QWORD *)((*(_QWORD *)&originsBuffer.x & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v29)
        goto LABEL_48;
    }
    if ((*(_QWORD *)&x & 0xC000000000000001) != 0)
      break;
    v33 = 0;
    while (1)
    {
      v34 = v33 + 1;
      if (__OFADD__(v33, 1))
        goto LABEL_59;
      type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for TextAttributeModifier<SummaryAttribute>, (uint64_t (*)(void))lazy protocol witness table accessor for type SummaryAttribute and conformance SummaryAttribute, (uint64_t)&unk_250622D88, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextAttributeModifier);
      v35 = swift_dynamicCastClass();
      if (v35)
        break;
      ++v33;
      if (v34 == v29)
        goto LABEL_48;
    }
    v36 = v35;
    swift_retain();
LABEL_51:
    swift_bridgeObjectRelease();
    v61 = *(_QWORD *)(v36 + 16);
    v37 = *(_QWORD *)(v36 + 24);
    swift_retain();
    swift_release();

    swift_bridgeObjectRelease();
    swift_release();
    v38 = v3;
    swift_retain();
    swift_retain();
    v39 = (id)_CTLineGetRunAtIndex(v38, v64);
    buffer.x = 0.0;
    buffer.y = 0.0;
    descent = 0.0;
    ascent = 0.0;
    leading = 0.0;
    originsBuffer.x = 0.0;
    originsBuffer.y = 0.0;
    v74.location = 0;
    v74.length = 1;
    CTRunGetPositions((CTRunRef)v39, v74, &buffer);
    v75.location = 0;
    v75.length = 1;
    CTRunGetBaseAdvancesAndOrigins((CTRunRef)v39, v75, 0, &originsBuffer);
    v40 = originsBuffer.x;
    y = originsBuffer.y;
    v42 = buffer.x;
    v43 = buffer.y;
    v76.location = 0;
    v76.length = 0;
    TypographicBounds = CTRunGetTypographicBounds((CTRunRef)v39, v76, &ascent, &descent, &leading);
    swift_release();

    v46 = descent;
    v45 = ascent;
    v47 = leading;
    swift_retain();
    v48 = v63;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v63[2] + 1, 1, v63);
    v50 = v48[2];
    v49 = v48[3];
    if (v50 >= v49 >> 1)
      v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v49 > 1), v50 + 1, 1, v48);
    v48[2] = v50 + 1;
    v63 = v48;
    v51 = (double *)&v48[9 * v50];
    *((_QWORD *)v51 + 4) = v62;
    v51[5] = v60 + v42 - v40;
    v51[6] = v59 - (v43 - y);
    v51[7] = TypographicBounds;
    v51[8] = v45;
    v51[9] = fabs(v46);
    v51[10] = v47;
    *((_QWORD *)v51 + 11) = v61;
    *((_QWORD *)v51 + 12) = v37;
    swift_release();
    swift_release();

    v4 = &lazy protocol witness table cache variable for type Image.CGImageProvider and conformance Image.CGImageProvider;
    v27 = v64;
LABEL_14:
    v14 = (const __CFArray *)(v27 + 1);
    v13 = v65;
  }
  v30 = 0;
  while (1)
  {
    MEMORY[0x23B7C6D9C](v30, *(_QWORD *)&x);
    v31 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for TextAttributeModifier<SummaryAttribute>, (uint64_t (*)(void))lazy protocol witness table accessor for type SummaryAttribute and conformance SummaryAttribute, (uint64_t)&unk_250622D88, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextAttributeModifier);
    v32 = swift_dynamicCastClass();
    if (v32)
    {
      v36 = v32;
      goto LABEL_51;
    }
    swift_unknownObjectRelease();
    ++v30;
    if (v31 == v29)
      goto LABEL_48;
  }
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  swift_bridgeObjectRelease();
  return v3;
}

unint64_t *closure #1 in closure #1 in _IntelligenceSupport.AnimatingText.body.getter@<X0>(unint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;

  v3 = *result;
  if ((*result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v3 < *(_QWORD *)(a2 + 16))
  {
    v4 = a2 + 72 * v3;
    v5 = *(_QWORD *)(v4 + 40);
    v6 = *(_QWORD *)(v4 + 88);
    v7 = *(_QWORD *)(v4 + 96);
    v8 = *(double *)(v4 + 48) - *(double *)(v4 + 64);
    *(_QWORD *)a3 = v6;
    *(_QWORD *)(a3 + 8) = v7;
    *(_QWORD *)(a3 + 16) = v6;
    *(_QWORD *)(a3 + 24) = closure #1 in _IntelligenceSupport.AnimatingSummarySymbol.body.getter;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = v5;
    *(double *)(a3 + 48) = v8;
    return (unint64_t *)swift_retain();
  }
  __break(1u);
  return result;
}

double protocol witness for View.body.getter in conformance _IntelligenceSupport.AnimatingText@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  v4 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v5 = *(_BYTE *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  outlined copy of Text.Storage(*(_QWORD *)v1, v3, v5);
  v7 = one-time initialization token for topLeading;
  swift_bridgeObjectRetain();
  if (v7 != -1)
    swift_once();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = closure #1 in _IntelligenceSupport.AnimatingText.body.getter;
  *(_QWORD *)(a1 + 40) = 0;
  result = *(double *)&static Alignment.topLeading;
  *(_OWORD *)(a1 + 48) = static Alignment.topLeading;
  return result;
}

uint64_t _IntelligenceSupport.AnimatingSummarySymbol.isOn.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t _IntelligenceSupport.AnimatingSummarySymbol.isOn.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*_IntelligenceSupport.AnimatingSummarySymbol.isOn.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

id _IntelligenceSupport.AnimatingSummarySymbol.font.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 8);
}

void _IntelligenceSupport.AnimatingSummarySymbol.font.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = a1;
}

uint64_t (*_IntelligenceSupport.AnimatingSummarySymbol.font.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

id _IntelligenceSupport.AnimatingSummarySymbol.color.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

void _IntelligenceSupport.AnimatingSummarySymbol.color.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
}

uint64_t (*_IntelligenceSupport.AnimatingSummarySymbol.color.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _IntelligenceSupport.AnimatingSummarySymbol.init(isOn:font:foregroundColor:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(_BYTE *)a4 = result;
  *(_QWORD *)(a4 + 8) = a2;
  *(_QWORD *)(a4 + 16) = a3;
  return result;
}

id _IntelligenceSupport.AnimatingSummarySymbol.body.getter@<X0>(uint64_t a1@<X8>)
{
  char *v1;
  char v3;
  void *v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  id v9;
  id v11;

  v3 = *v1;
  v4 = (void *)*((_QWORD *)v1 + 2);
  v11 = (id)*((_QWORD *)v1 + 1);
  if (*v1)
    v5 = 1.0;
  else
    v5 = 0.0;
  type metadata accessor for ColorBox<CGColorRef>(0);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v4;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for FontBox<Font.PlatformFontProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.PlatformFontProvider and conformance Font.PlatformFontProvider, (uint64_t)&type metadata for Font.PlatformFontProvider, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FontBox);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = v11;
  KeyPath = swift_getKeyPath();
  *(double *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = closure #1 in _IntelligenceSupport.AnimatingSummarySymbol.body.getter;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = KeyPath;
  *(_QWORD *)(a1 + 48) = v7;
  v9 = v4;
  return v11;
}

id protocol witness for View.body.getter in conformance _IntelligenceSupport.AnimatingSummarySymbol@<X0>(uint64_t a1@<X8>)
{
  char *v1;
  char v3;
  void *v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  id v9;
  id v11;

  v3 = *v1;
  v4 = (void *)*((_QWORD *)v1 + 2);
  v11 = (id)*((_QWORD *)v1 + 1);
  if (*v1)
    v5 = 1.0;
  else
    v5 = 0.0;
  type metadata accessor for ColorBox<CGColorRef>(0);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v4;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for FontBox<Font.PlatformFontProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.PlatformFontProvider and conformance Font.PlatformFontProvider, (uint64_t)&type metadata for Font.PlatformFontProvider, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FontBox);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = v11;
  KeyPath = swift_getKeyPath();
  *(double *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = closure #1 in _IntelligenceSupport.AnimatingSummarySymbol.body.getter;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = KeyPath;
  *(_QWORD *)(a1 + 48) = v7;
  v9 = v4;
  return v11;
}

uint64_t closure #1 in _IntelligenceSupport.AnimatingSummarySymbol.body.getter(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v2 = swift_retain();
  v3 = specialized find<A>(_:key:)(v2);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 72);
    result = swift_release();
    if (v4)
      return result;
  }
  else
  {
    swift_release();
  }
  v6 = swift_retain();
  v7 = specialized closure #1 in PropertyList.subscript.getter(v6);
  result = swift_release();
  if ((v7 & 1) == 0)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(0, (unint64_t *)&lazy cache variable for type metadata for InternalAnimationBox<BezierAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type BezierAnimation and conformance BezierAnimation, (uint64_t)&type metadata for BezierAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for InternalAnimationBox);
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_2352AECE0;
    *(_OWORD *)(v8 + 32) = xmmword_2352AECF0;
    *(_OWORD *)(v8 + 48) = xmmword_235285B40;
    *(_QWORD *)(v8 + 64) = 0;
    swift_retain();
    swift_retain();
    specialized closure #1 in PropertyList.subscript.setter(a1, v8);
    swift_release_n();
    return swift_release();
  }
  return result;
}

Swift::Int SummaryAttribute.hashValue.getter(uint64_t a1, double a2)
{
  Swift::UInt64 v4;
  void (*v5)(_BYTE *);
  _BYTE v7[72];

  Hasher.init(_seed:)();
  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = *(_QWORD *)&a2;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  v5 = *(void (**)(_BYTE *))(*(_QWORD *)a1 + 136);
  swift_retain();
  v5(v7);
  swift_release();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SummaryAttribute()
{
  uint64_t v0;

  return SummaryAttribute.hashValue.getter(*(_QWORD *)(v0 + 8), *(double *)v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SummaryAttribute(uint64_t a1)
{
  Swift::UInt64 *v1;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  void (*v5)(uint64_t);

  v3 = v1[1];
  if ((*v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = *v1;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  v5 = *(void (**)(uint64_t))(*(_QWORD *)v3 + 136);
  swift_retain();
  v5(a1);
  return swift_release();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SummaryAttribute()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  void (*v4)(char *);
  char v6[72];

  v2 = *v0;
  v1 = v0[1];
  Hasher.init(_seed:)();
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = v2;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  v4 = *(void (**)(char *))(*(_QWORD *)v1 + 136);
  swift_retain();
  v4(v6);
  swift_release();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SummaryAttribute(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(double *)a1 != *(double *)a2)
    return 0;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 == *(_QWORD *)(a2 + 8))
    return 1;
  else
    return (*(uint64_t (**)(double))(*(_QWORD *)v2 + 88))(*(double *)a1) & 1;
}

double one-time initialization function for symbolImage()
{
  uint64_t v0;
  double result;

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, (uint64_t)&type metadata for Image.NamedImageProvider, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ImageProviderBox);
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0xD000000000000013;
  *(_QWORD *)(v0 + 24) = 0x80000002352E4A90;
  *(_DWORD *)(v0 + 32) = 0;
  *(_BYTE *)(v0 + 36) = 1;
  *(_OWORD *)(v0 + 40) = xmmword_235260EF0;
  *(_QWORD *)(v0 + 56) = 0xD000000000000013;
  *(_QWORD *)(v0 + 64) = 0x80000002352E4A90;
  result = -0.0;
  *(_OWORD *)(v0 + 72) = xmmword_235260F00;
  *(_BYTE *)(v0 + 88) = 0;
  static SummarySymbol.symbolImage = v0;
  return result;
}

double SummarySymbol.gradient.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t inited;
  uint64_t v7;
  double result;
  uint64_t v9;

  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Color>, (uint64_t)&type metadata for Color, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_235283240;
  *(_QWORD *)(inited + 32) = a1;
  LOBYTE(v9) = 0;
  *(_QWORD *)(inited + 40) = specialized Color.init(_:red:green:blue:opacity:)(&v9, 1.0, 0.576470588, 0.0, 1.0);
  LOBYTE(v9) = 0;
  *(_QWORD *)(inited + 48) = specialized Color.init(_:red:green:blue:opacity:)(&v9, 1.0, 0.325490196, 0.207843137, 1.0);
  LOBYTE(v9) = 0;
  *(_QWORD *)(inited + 56) = specialized Color.init(_:red:green:blue:opacity:)(&v9, 0.733333333, 0.392156863, 1.0, 1.0);
  LOBYTE(v9) = 0;
  *(_QWORD *)(inited + 64) = specialized Color.init(_:red:green:blue:opacity:)(&v9, 0.356862745, 0.494117647, 1.0, 1.0);
  *(_QWORD *)(inited + 72) = a1;
  v9 = inited;
  specialized Array._endMutation()();
  v7 = v9;
  swift_retain_n();
  *(_QWORD *)a2 = specialized Gradient.init(colors:)(v7);
  result = 1.0;
  *(_OWORD *)(a2 + 8) = xmmword_235281560;
  *(double *)(a2 + 24) = (a3 * -1.1 * 180.0 + 180.0) * 0.0174532925;
  *(double *)(a2 + 32) = (270.0 - a3 * 180.0) * 0.0174532925;
  return result;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance SummarySymbol@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[2];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;
  _OWORD v13[3];
  _OWORD v14[3];

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v9 = *(_OWORD *)(a2 + 32);
  v10 = v5;
  v11 = *(_OWORD *)(a2 + 64);
  v12 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  v14[0] = v8[0];
  v14[1] = v6;
  v14[2] = v9;
  v13[1] = v6;
  v13[2] = v9;
  v13[0] = v8[0];
  outlined retain of _GraphInputs((uint64_t)v14);
  LODWORD(v4) = specialized static Animatable.makeAnimatable(value:inputs:)(v4, (uint64_t)v13);
  outlined release of _GraphInputs((uint64_t)v14);
  return specialized static View.makeView(view:inputs:)(v4, (uint64_t)v8, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance SummarySymbol@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[2];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char v12;
  _OWORD v13[3];
  _OWORD v14[3];

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v9 = *(_OWORD *)(a2 + 32);
  v10 = v5;
  v11 = *(_OWORD *)(a2 + 64);
  v12 = *(_BYTE *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  v14[0] = v8[0];
  v14[1] = v6;
  v14[2] = v9;
  v13[1] = v6;
  v13[2] = v9;
  v13[0] = v8[0];
  outlined retain of _GraphInputs((uint64_t)v14);
  LODWORD(v4) = specialized static Animatable.makeAnimatable(value:inputs:)(v4, (uint64_t)v13);
  outlined release of _GraphInputs((uint64_t)v14);
  return specialized static View.makeViewList(view:inputs:)(v4, (uint64_t)v8, a3);
}

uint64_t protocol witness for View.body.getter in conformance SummarySymbol@<X0>(uint64_t a1@<X8>)
{
  double *v1;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  v3 = *v1;
  v4 = *((_QWORD *)v1 + 1);
  if (one-time initialization token for symbolImage != -1)
    swift_once();
  v5 = static SummarySymbol.symbolImage;
  swift_retain();
  SummarySymbol.gradient.getter(v4, (uint64_t)&v9, v3);
  v6 = v9;
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = v11;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 48) = v4;
  return swift_retain();
}

double (*protocol witness for Animatable.animatableData.modify in conformance SummarySymbol(_QWORD *a1))(uint64_t a1)
{
  _QWORD *v1;

  a1[1] = v1;
  *a1 = *v1;
  return ViewOrigin.x.modify;
}

uint64_t specialized static ModifiedContent<>._makeView(view:inputs:)@<X0>(uint64_t a1@<X1>, double *a2@<X8>)
{
  unsigned int OffsetAttribute2;
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int ShouldRecordTree;
  int v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  unint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  _OWORD v64[2];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  int v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
  {
    type metadata accessor for _ForegroundStyleModifier2<AngularGradient, Color>(0, (unint64_t *)&lazy cache variable for type metadata for _ForegroundStyleModifier2<AngularGradient, Color>, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for _ForegroundStyleModifier2);
    AGSubgraphBeginTreeElement();
  }
  v4 = *(_DWORD *)(a1 + 80);
  v27 = *(_DWORD *)(a1 + 72);
  v28 = *(_DWORD *)(a1 + 76);
  v26 = *(_DWORD *)(a1 + 68);
  v24 = *(_DWORD *)(a1 + 60);
  v25 = *(_DWORD *)(a1 + 64);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 16);
  v20 = *(_DWORD *)(a1 + 24);
  v21 = *(_DWORD *)(a1 + 8);
  v19 = *(_DWORD *)(a1 + 28);
  v18 = *(_DWORD *)(a1 + 32);
  v22 = *(_DWORD *)(a1 + 36);
  v23 = *(_DWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_OWORD *)(a1 + 16);
  v64[0] = *(_OWORD *)a1;
  v64[1] = v9;
  v10 = *(_OWORD *)(a1 + 32);
  v11 = *(_OWORD *)(a1 + 64);
  v66 = *(_OWORD *)(a1 + 48);
  v67 = v11;
  v65 = v10;
  v68 = v4;
  LODWORD(v65) = 0;
  swift_beginAccess();
  v48 = __PAIR64__(*(_DWORD *)(v6 + 16), OffsetAttribute2);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  outlined retain of _ViewInputs(a1);
  type metadata accessor for _ForegroundStyleModifier2<AngularGradient, Color>(0, &lazy cache variable for type metadata for _ForegroundStyleModifier2<AngularGradient, Color>.ForegroundStyleEnvironment, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for _ForegroundStyleModifier2.ForegroundStyleEnvironment);
  lazy protocol witness table accessor for type _ForegroundStyleModifier2<AngularGradient, Color>.ForegroundStyleEnvironment and conformance _ForegroundStyleModifier2<A, B>.ForegroundStyleEnvironment();
  v12 = Attribute.init<A>(body:value:flags:update:)();
  v13 = MEMORY[0x24BEE4AF8];
  v14 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
  v15 = swift_allocObject();
  *(_DWORD *)(v15 + 16) = v12;
  *(_QWORD *)(v15 + 24) = v13;
  *(_OWORD *)(v15 + 32) = 0u;
  *(_OWORD *)(v15 + 48) = 0u;
  *(_OWORD *)(v15 + 64) = 0u;
  *(_WORD *)(v15 + 80) = 256;
  *(_QWORD *)(v15 + 88) = v14;
  swift_release();
  v16 = AGGraphCreateOffsetAttribute2();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v48 = v5;
  v49 = v21;
  v50 = v15;
  v51 = v20;
  v52 = v19;
  v55 = v7;
  v56 = v8;
  v54 = v22;
  v57 = v23;
  v58 = v24;
  v59 = v25;
  v60 = v26;
  v61 = v27;
  v62 = v28;
  v63 = v4;
  v31 = v16;
  v32 = v5;
  v33 = v21;
  v34 = v15;
  v35 = v20;
  v36 = v19;
  v37 = 0;
  v38 = v22;
  v39 = v7;
  v40 = v8;
  v41 = v23;
  v42 = v24;
  v43 = v25;
  v44 = v26;
  v45 = v27;
  v46 = v28;
  v47 = v4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static Image._makeView(view:inputs:)(&v31, (uint64_t)&v32, a2);
  v53 = 32;
  if ((ShouldRecordTree & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a2, &v48);
    AGSubgraphEndTreeElement();
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    LODWORD(v65) = v18;
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a2, v64);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    return outlined release of _ViewInputs(a1);
  }
}

{
  unsigned int OffsetAttribute2;
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int ShouldRecordTree;
  unint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  _OWORD v47[2];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  int v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for ChildEnvironment<Font?>(0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier);
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v4 = *(_DWORD *)(a1 + 80);
  v27 = *(_DWORD *)(a1 + 72);
  v28 = *(_DWORD *)(a1 + 76);
  v26 = *(_DWORD *)(a1 + 68);
  v24 = *(_DWORD *)(a1 + 60);
  v25 = *(_DWORD *)(a1 + 64);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 16);
  v20 = *(_DWORD *)(a1 + 24);
  v21 = *(_DWORD *)(a1 + 8);
  v19 = *(_DWORD *)(a1 + 28);
  v18 = *(_DWORD *)(a1 + 32);
  v22 = *(_DWORD *)(a1 + 36);
  v23 = *(_DWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_OWORD *)(a1 + 16);
  v47[0] = *(_OWORD *)a1;
  v47[1] = v9;
  v10 = *(_OWORD *)(a1 + 32);
  v11 = *(_OWORD *)(a1 + 48);
  v12 = *(_OWORD *)(a1 + 64);
  v51 = v4;
  v49 = v11;
  v50 = v12;
  v48 = v10;
  LODWORD(v48) = 0;
  swift_beginAccess();
  v52 = __PAIR64__(*(_DWORD *)(v6 + 16), OffsetAttribute2);
  v53 = 0;
  v54 = 0;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  outlined retain of _ViewInputs(a1);
  type metadata accessor for ChildEnvironment<Font?>(0, &lazy cache variable for type metadata for ChildEnvironment<Font?>, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for ChildEnvironment);
  lazy protocol witness table accessor for type ChildEnvironment<Font?> and conformance ChildEnvironment<A>();
  v13 = Attribute.init<A>(body:value:flags:update:)();
  v14 = MEMORY[0x24BEE4AF8];
  v15 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
  v16 = swift_allocObject();
  *(_DWORD *)(v16 + 16) = v13;
  *(_QWORD *)(v16 + 24) = v14;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_OWORD *)(v16 + 48) = 0u;
  *(_OWORD *)(v16 + 64) = 0u;
  *(_WORD *)(v16 + 80) = 256;
  *(_QWORD *)(v16 + 88) = v15;
  swift_release();
  type metadata accessor for ModifiedContent<SummarySymbol, _ValueTransactionModifier<Bool>>(0, &lazy cache variable for type metadata for ModifiedContent<SummarySymbol, _ValueTransactionModifier<Bool>>, &lazy cache variable for type metadata for _ValueTransactionModifier<Bool>, MEMORY[0x24BEE1328], MEMORY[0x24BEE1340]);
  AGGraphCreateOffsetAttribute2();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v31 = v5;
  v32 = v21;
  v33 = v16;
  v34 = v20;
  v35 = v19;
  v37 = v22;
  v38 = v7;
  v39 = v8;
  v40 = v23;
  v41 = v24;
  v42 = v25;
  v43 = v26;
  v44 = v27;
  v45 = v28;
  v46 = v4;
  v52 = v5;
  LODWORD(v53) = v21;
  v54 = v16;
  v55 = v20;
  v56 = v19;
  v57 = v22;
  v58 = v7;
  v59 = v8;
  v60 = v23;
  v61 = v24;
  v62 = v25;
  v63 = v26;
  v64 = v27;
  v65 = v28;
  v66 = v4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static ModifiedContent<>._makeView(view:inputs:)((uint64_t)&v52, a2);
  v36 = 32;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a2, &v31);
    AGSubgraphEndTreeElement();
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    LODWORD(v48) = v18;
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a2, v47);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    return outlined release of _ViewInputs(a1);
  }
}

{
  uint64_t OffsetAttribute2;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int ShouldRecordTree;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  int v62;
  _OWORD v63[2];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, &lazy cache variable for type metadata for _ValueTransactionModifier<Bool>, MEMORY[0x24BEE1328], MEMORY[0x24BEE1340], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _ValueTransactionModifier);
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v4 = *(_DWORD *)(a1 + 80);
  v5 = *(_QWORD *)a1;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v27 = *(_DWORD *)(a1 + 32);
  v8 = *(_DWORD *)(a1 + 36);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_OWORD *)(a1 + 56);
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(_OWORD *)(a1 + 48);
  v64 = *(_OWORD *)(a1 + 32);
  v65 = v14;
  v66 = *(_OWORD *)(a1 + 64);
  v67 = v4;
  v15 = *(_OWORD *)(a1 + 16);
  v63[0] = *(_OWORD *)a1;
  v63[1] = v15;
  LODWORD(v64) = 0;
  v52 = v5;
  v53 = v6;
  v54 = v7;
  v55 = v11;
  v56 = 0;
  v57 = v8;
  v58 = v9;
  v59 = v10;
  v60 = v12;
  v61 = v13;
  v62 = v4;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  outlined retain of _ViewInputs(a1);
  specialized static _ValueTransactionModifier._makeInputs(modifier:inputs:)(OffsetAttribute2, (uint64_t)&v52);
  v31 = v52;
  v16 = v54;
  v28 = v55;
  v29 = v53;
  v30 = v56;
  v17 = v57;
  v34 = v59;
  v35 = v58;
  v18 = v60;
  v19 = DWORD1(v60);
  v20 = DWORD2(v60);
  v21 = HIDWORD(v60);
  v22 = v61;
  v23 = HIDWORD(v61);
  v24 = v62;
  v33 = AGGraphCreateOffsetAttribute2();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v37 = v31;
  v38 = v29;
  v39 = v16;
  v40 = v28;
  v43 = v35;
  v44 = v34;
  v45 = v18;
  v46 = v19;
  v47 = v20;
  v48 = v21;
  v49 = v22;
  v50 = v23;
  v51 = v24;
  v41 = 0;
  v42 = v17;
  v68 = v31;
  v69 = v29;
  v70 = v16;
  v71 = v28;
  v72 = HIDWORD(v28);
  v73 = v17;
  v74 = v35;
  v75 = v34;
  v76 = v18;
  v77 = v19;
  v78 = v20;
  v79 = v21;
  v80 = v22;
  v81 = v23;
  v82 = v24;
  if ((v17 & 1) != 0)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v25 = v33;
  }
  else
  {
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, (unint64_t *)&lazy cache variable for type metadata for AnimatableAttribute<SummarySymbol>, (uint64_t)&type metadata for SummarySymbol, (uint64_t)&protocol witness table for SummarySymbol, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<SummarySymbol> and conformance AnimatableAttribute<A>();
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v25 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  specialized static View.makeView(view:inputs:)(v25, (uint64_t)&v68, a2);
  v41 = v30;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a2, &v37);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    LODWORD(v64) = v27;
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a2, v63);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    return outlined release of _ViewInputs(a1);
  }
}

uint64_t key path getter for EnvironmentValues.font : EnvironmentValues, serialized@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
  }
  else
  {
    v5 = swift_retain_n();
    v4 = specialized closure #1 in PropertyList.subscript.getter(v5, (uint64_t)&v7);
  }
  result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t key path setter for EnvironmentValues.font : EnvironmentValues, serialized()
{
  uint64_t v0;

  v0 = swift_retain();
  specialized EnvironmentValues.subscript.setter(v0);
  return swift_release();
}

uint64_t sub_234EE42C0()
{
  uint64_t v0;

  v0 = swift_retain();
  specialized EnvironmentValues.subscript.setter(v0);
  return swift_release();
}

uint64_t associated type witness table accessor for View.Body : View in _IntelligenceSupport.AnimatingText()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in _IntelligenceSupport.AnimatingSummarySymbol()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for _IntelligenceSupport()
{
  return &type metadata for _IntelligenceSupport;
}

uint64_t initializeWithCopy for _IntelligenceSupport.AnimatingText(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  outlined copy of Text.Storage(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _IntelligenceSupport.AnimatingText(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  outlined copy of Text.Storage(*(_QWORD *)a2, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  outlined consume of Text.Storage(v7, v8, v9);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for _IntelligenceSupport.AnimatingText(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  outlined consume of Text.Storage(v5, v6, v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for _IntelligenceSupport.AnimatingText()
{
  return &type metadata for _IntelligenceSupport.AnimatingText;
}

ValueMetadata *type metadata accessor for _IntelligenceSupport.AnimatingText.Context()
{
  return &type metadata for _IntelligenceSupport.AnimatingText.Context;
}

uint64_t initializeBufferWithCopyOfBuffer for _IntelligenceSupport.AnimatingSummarySymbol(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(void **)(a2 + 8);
  v4 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  v5 = v3;
  v6 = v4;
  return a1;
}

void destroy for _IntelligenceSupport.AnimatingSummarySymbol(uint64_t a1)
{

}

uint64_t assignWithCopy for _IntelligenceSupport.AnimatingSummarySymbol(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v6 = v4;

  v7 = *(void **)(a2 + 16);
  v8 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  v9 = v7;

  return a1;
}

uint64_t assignWithTake for _IntelligenceSupport.AnimatingSummarySymbol(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;

  v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  return a1;
}

ValueMetadata *type metadata accessor for _IntelligenceSupport.AnimatingSummarySymbol()
{
  return &type metadata for _IntelligenceSupport.AnimatingSummarySymbol;
}

uint64_t sub_234EE457C()
{
  return lazy protocol witness table accessor for type ModifiedContent<Text, _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<Text, _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<Text, _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>>, (uint64_t)&protocol witness table for Text, (uint64_t)&protocol witness table for _OverlayPreferenceModifier<A, B>);
}

void type metadata accessor for ModifiedContent<SummarySymbol, _ValueTransactionModifier<Bool>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _ValueTransactionModifier);
    v9 = type metadata accessor for ModifiedContent(a1, (uint64_t)&type metadata for SummarySymbol, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_234EE461C()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Bool>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Bool>>, _EnvironmentKeyWritingModifier<Font?>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<SummarySymbol, _ValueTransactionModifier<Bool>> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for _EnvironmentKeyWritingModifier<A>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<SummarySymbol, _ValueTransactionModifier<Bool>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<SummarySymbol, _ValueTransactionModifier<Bool>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<SummarySymbol, _ValueTransactionModifier<Bool>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<SummarySymbol, _ValueTransactionModifier<Bool>>(255, &lazy cache variable for type metadata for ModifiedContent<SummarySymbol, _ValueTransactionModifier<Bool>>, &lazy cache variable for type metadata for _ValueTransactionModifier<Bool>, MEMORY[0x24BEE1328], MEMORY[0x24BEE1340]);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type SummarySymbol and conformance SummarySymbol();
    v3[1] = &protocol witness table for _ValueTransactionModifier<A>;
    result = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<SummarySymbol, _ValueTransactionModifier<Bool>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

ValueMetadata *type metadata accessor for SummarySymbol()
{
  return &type metadata for SummarySymbol;
}

uint64_t associated type witness table accessor for View.Body : View in SummarySymbol()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t lazy protocol witness table accessor for type LeafLayoutComputer<_ShapeView<Rectangle, LinearGradient>> and conformance LeafLayoutComputer<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for LeafLayoutComputer<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(255, a2, a3);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LeafLayoutComputer<A>, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShapeStyleResolver<MeshGradient> and conformance ShapeStyleResolver<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ShapeStyleResolver<MeshGradient> and conformance ShapeStyleResolver<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyleResolver<MeshGradient> and conformance ShapeStyleResolver<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ShapeStyleResolver<MeshGradient>, (uint64_t)&type metadata for MeshGradient, (uint64_t)&protocol witness table for MeshGradient, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ShapeStyleResolver);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShapeStyleResolver<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyleResolver<MeshGradient> and conformance ShapeStyleResolver<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatedShape<ContainerRelativeShape._Inset>.Init and conformance AnimatedShape<A>.Init()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatedShape<ContainerRelativeShape._Inset>.Init and conformance AnimatedShape<A>.Init;
  if (!lazy protocol witness table cache variable for type AnimatedShape<ContainerRelativeShape._Inset>.Init and conformance AnimatedShape<A>.Init)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<ContainerRelativeShape._Inset>.Init, (uint64_t (*)(void))lazy protocol witness table accessor for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset, (uint64_t)&type metadata for ContainerRelativeShape._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape.Init);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatedShape<A>.Init, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatedShape<ContainerRelativeShape._Inset>.Init and conformance AnimatedShape<A>.Init);
  }
  return result;
}

void type metadata accessor for LeafLayoutComputer<AnimatedShape<AnyShape>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(void), uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    v9 = type metadata accessor for LeafLayoutComputer(a1, v7, (uint64_t)&protocol witness table for AnimatedShape<A>, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t lazy protocol witness table accessor for type LeafLayoutComputer<AnimatedShape<ContainerRelativeShape._Inset>> and conformance LeafLayoutComputer<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<ContainerRelativeShape._Inset>> and conformance LeafLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<ContainerRelativeShape._Inset>> and conformance LeafLayoutComputer<A>)
  {
    type metadata accessor for LeafLayoutComputer<AnimatedShape<AnyShape>>(255, &lazy cache variable for type metadata for LeafLayoutComputer<AnimatedShape<ContainerRelativeShape._Inset>>, &lazy cache variable for type metadata for AnimatedShape<ContainerRelativeShape._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset, (uint64_t)&type metadata for ContainerRelativeShape._Inset);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LeafLayoutComputer<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<ContainerRelativeShape._Inset>> and conformance LeafLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatedShape<Circle._Inset>.Init and conformance AnimatedShape<A>.Init()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatedShape<Circle._Inset>.Init and conformance AnimatedShape<A>.Init;
  if (!lazy protocol witness table cache variable for type AnimatedShape<Circle._Inset>.Init and conformance AnimatedShape<A>.Init)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<Circle._Inset>.Init, (uint64_t (*)(void))lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset, (uint64_t)&type metadata for Circle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape.Init);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatedShape<A>.Init, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatedShape<Circle._Inset>.Init and conformance AnimatedShape<A>.Init);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LeafLayoutComputer<AnimatedShape<Circle._Inset>> and conformance LeafLayoutComputer<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<Circle._Inset>> and conformance LeafLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<Circle._Inset>> and conformance LeafLayoutComputer<A>)
  {
    type metadata accessor for LeafLayoutComputer<AnimatedShape<AnyShape>>(255, &lazy cache variable for type metadata for LeafLayoutComputer<AnimatedShape<Circle._Inset>>, &lazy cache variable for type metadata for AnimatedShape<Circle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset, (uint64_t)&type metadata for Circle._Inset);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LeafLayoutComputer<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<Circle._Inset>> and conformance LeafLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatedShape<Ellipse._Inset>.Init and conformance AnimatedShape<A>.Init()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatedShape<Ellipse._Inset>.Init and conformance AnimatedShape<A>.Init;
  if (!lazy protocol witness table cache variable for type AnimatedShape<Ellipse._Inset>.Init and conformance AnimatedShape<A>.Init)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<Ellipse._Inset>.Init, (uint64_t (*)(void))lazy protocol witness table accessor for type Ellipse._Inset and conformance Ellipse._Inset, (uint64_t)&type metadata for Ellipse._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape.Init);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatedShape<A>.Init, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatedShape<Ellipse._Inset>.Init and conformance AnimatedShape<A>.Init);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LeafLayoutComputer<AnimatedShape<Ellipse._Inset>> and conformance LeafLayoutComputer<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<Ellipse._Inset>> and conformance LeafLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<Ellipse._Inset>> and conformance LeafLayoutComputer<A>)
  {
    type metadata accessor for LeafLayoutComputer<AnimatedShape<AnyShape>>(255, &lazy cache variable for type metadata for LeafLayoutComputer<AnimatedShape<Ellipse._Inset>>, &lazy cache variable for type metadata for AnimatedShape<Ellipse._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Ellipse._Inset and conformance Ellipse._Inset, (uint64_t)&type metadata for Ellipse._Inset);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LeafLayoutComputer<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<Ellipse._Inset>> and conformance LeafLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatedShape<Capsule._Inset>.Init and conformance AnimatedShape<A>.Init()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatedShape<Capsule._Inset>.Init and conformance AnimatedShape<A>.Init;
  if (!lazy protocol witness table cache variable for type AnimatedShape<Capsule._Inset>.Init and conformance AnimatedShape<A>.Init)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<Capsule._Inset>.Init, (uint64_t (*)(void))lazy protocol witness table accessor for type Capsule._Inset and conformance Capsule._Inset, (uint64_t)&type metadata for Capsule._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape.Init);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatedShape<A>.Init, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatedShape<Capsule._Inset>.Init and conformance AnimatedShape<A>.Init);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LeafLayoutComputer<AnimatedShape<Capsule._Inset>> and conformance LeafLayoutComputer<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<Capsule._Inset>> and conformance LeafLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<Capsule._Inset>> and conformance LeafLayoutComputer<A>)
  {
    type metadata accessor for LeafLayoutComputer<AnimatedShape<AnyShape>>(255, &lazy cache variable for type metadata for LeafLayoutComputer<AnimatedShape<Capsule._Inset>>, &lazy cache variable for type metadata for AnimatedShape<Capsule._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Capsule._Inset and conformance Capsule._Inset, (uint64_t)&type metadata for Capsule._Inset);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LeafLayoutComputer<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<Capsule._Inset>> and conformance LeafLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatedShape<UnevenRoundedRectangle._Inset>.Init and conformance AnimatedShape<A>.Init()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatedShape<UnevenRoundedRectangle._Inset>.Init and conformance AnimatedShape<A>.Init;
  if (!lazy protocol witness table cache variable for type AnimatedShape<UnevenRoundedRectangle._Inset>.Init and conformance AnimatedShape<A>.Init)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle._Inset>.Init, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset, (uint64_t)&type metadata for UnevenRoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape.Init);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatedShape<A>.Init, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatedShape<UnevenRoundedRectangle._Inset>.Init and conformance AnimatedShape<A>.Init);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LeafLayoutComputer<AnimatedShape<UnevenRoundedRectangle._Inset>> and conformance LeafLayoutComputer<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<UnevenRoundedRectangle._Inset>> and conformance LeafLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<UnevenRoundedRectangle._Inset>> and conformance LeafLayoutComputer<A>)
  {
    type metadata accessor for LeafLayoutComputer<AnimatedShape<AnyShape>>(255, &lazy cache variable for type metadata for LeafLayoutComputer<AnimatedShape<UnevenRoundedRectangle._Inset>>, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset, (uint64_t)&type metadata for UnevenRoundedRectangle._Inset);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LeafLayoutComputer<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<UnevenRoundedRectangle._Inset>> and conformance LeafLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatedShape<RoundedRectangle._Inset>.Init and conformance AnimatedShape<A>.Init()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatedShape<RoundedRectangle._Inset>.Init and conformance AnimatedShape<A>.Init;
  if (!lazy protocol witness table cache variable for type AnimatedShape<RoundedRectangle._Inset>.Init and conformance AnimatedShape<A>.Init)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle._Inset>.Init, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset, (uint64_t)&type metadata for RoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape.Init);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatedShape<A>.Init, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatedShape<RoundedRectangle._Inset>.Init and conformance AnimatedShape<A>.Init);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LeafLayoutComputer<AnimatedShape<RoundedRectangle._Inset>> and conformance LeafLayoutComputer<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<RoundedRectangle._Inset>> and conformance LeafLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<RoundedRectangle._Inset>> and conformance LeafLayoutComputer<A>)
  {
    type metadata accessor for LeafLayoutComputer<AnimatedShape<AnyShape>>(255, &lazy cache variable for type metadata for LeafLayoutComputer<AnimatedShape<RoundedRectangle._Inset>>, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset, (uint64_t)&type metadata for RoundedRectangle._Inset);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LeafLayoutComputer<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<RoundedRectangle._Inset>> and conformance LeafLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatedShape<Rectangle._Inset>.Init and conformance AnimatedShape<A>.Init()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatedShape<Rectangle._Inset>.Init and conformance AnimatedShape<A>.Init;
  if (!lazy protocol witness table cache variable for type AnimatedShape<Rectangle._Inset>.Init and conformance AnimatedShape<A>.Init)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<Rectangle._Inset>.Init, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle._Inset and conformance Rectangle._Inset, (uint64_t)&type metadata for Rectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape.Init);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatedShape<A>.Init, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatedShape<Rectangle._Inset>.Init and conformance AnimatedShape<A>.Init);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LeafLayoutComputer<AnimatedShape<Rectangle._Inset>> and conformance LeafLayoutComputer<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<Rectangle._Inset>> and conformance LeafLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<Rectangle._Inset>> and conformance LeafLayoutComputer<A>)
  {
    type metadata accessor for LeafLayoutComputer<AnimatedShape<AnyShape>>(255, &lazy cache variable for type metadata for LeafLayoutComputer<AnimatedShape<Rectangle._Inset>>, &lazy cache variable for type metadata for AnimatedShape<Rectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle._Inset and conformance Rectangle._Inset, (uint64_t)&type metadata for Rectangle._Inset);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LeafLayoutComputer<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<Rectangle._Inset>> and conformance LeafLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatedShape<UnevenRoundedRectangle>.Init and conformance AnimatedShape<A>.Init()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatedShape<UnevenRoundedRectangle>.Init and conformance AnimatedShape<A>.Init;
  if (!lazy protocol witness table cache variable for type AnimatedShape<UnevenRoundedRectangle>.Init and conformance AnimatedShape<A>.Init)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle>.Init, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle, (uint64_t)&type metadata for UnevenRoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape.Init);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatedShape<A>.Init, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatedShape<UnevenRoundedRectangle>.Init and conformance AnimatedShape<A>.Init);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LeafLayoutComputer<AnimatedShape<UnevenRoundedRectangle>> and conformance LeafLayoutComputer<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<UnevenRoundedRectangle>> and conformance LeafLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<UnevenRoundedRectangle>> and conformance LeafLayoutComputer<A>)
  {
    type metadata accessor for LeafLayoutComputer<AnimatedShape<AnyShape>>(255, &lazy cache variable for type metadata for LeafLayoutComputer<AnimatedShape<UnevenRoundedRectangle>>, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle, (uint64_t)&type metadata for UnevenRoundedRectangle);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LeafLayoutComputer<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<UnevenRoundedRectangle>> and conformance LeafLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatedShape<RoundedRectangle>.Init and conformance AnimatedShape<A>.Init()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatedShape<RoundedRectangle>.Init and conformance AnimatedShape<A>.Init;
  if (!lazy protocol witness table cache variable for type AnimatedShape<RoundedRectangle>.Init and conformance AnimatedShape<A>.Init)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle>.Init, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle, (uint64_t)&type metadata for RoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape.Init);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatedShape<A>.Init, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatedShape<RoundedRectangle>.Init and conformance AnimatedShape<A>.Init);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LeafLayoutComputer<AnimatedShape<RoundedRectangle>> and conformance LeafLayoutComputer<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<RoundedRectangle>> and conformance LeafLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<RoundedRectangle>> and conformance LeafLayoutComputer<A>)
  {
    type metadata accessor for LeafLayoutComputer<AnimatedShape<AnyShape>>(255, &lazy cache variable for type metadata for LeafLayoutComputer<AnimatedShape<RoundedRectangle>>, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle, (uint64_t)&type metadata for RoundedRectangle);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LeafLayoutComputer<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<RoundedRectangle>> and conformance LeafLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatedShape<AnyShape>.Init and conformance AnimatedShape<A>.Init()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimatedShape<AnyShape>.Init and conformance AnimatedShape<A>.Init;
  if (!lazy protocol witness table cache variable for type AnimatedShape<AnyShape>.Init and conformance AnimatedShape<A>.Init)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for AnimatedShape<AnyShape>.Init, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyShape and conformance AnyShape, (uint64_t)&type metadata for AnyShape, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape.Init);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatedShape<A>.Init, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatedShape<AnyShape>.Init and conformance AnimatedShape<A>.Init);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LeafLayoutComputer<AnimatedShape<AnyShape>> and conformance LeafLayoutComputer<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<AnyShape>> and conformance LeafLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<AnyShape>> and conformance LeafLayoutComputer<A>)
  {
    type metadata accessor for LeafLayoutComputer<AnimatedShape<AnyShape>>(255, &lazy cache variable for type metadata for LeafLayoutComputer<AnimatedShape<AnyShape>>, &lazy cache variable for type metadata for AnimatedShape<AnyShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyShape and conformance AnyShape, (uint64_t)&type metadata for AnyShape);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LeafLayoutComputer<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<AnyShape>> and conformance LeafLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShapeStyleResolver<AngularGradient> and conformance ShapeStyleResolver<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ShapeStyleResolver<AngularGradient> and conformance ShapeStyleResolver<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyleResolver<AngularGradient> and conformance ShapeStyleResolver<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ShapeStyleResolver<AngularGradient>, (uint64_t)&type metadata for AngularGradient, (uint64_t)&protocol witness table for AngularGradient, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ShapeStyleResolver);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShapeStyleResolver<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyleResolver<AngularGradient> and conformance ShapeStyleResolver<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShapeStyleResolver<EllipticalGradient> and conformance ShapeStyleResolver<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ShapeStyleResolver<EllipticalGradient> and conformance ShapeStyleResolver<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyleResolver<EllipticalGradient> and conformance ShapeStyleResolver<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ShapeStyleResolver<EllipticalGradient>, (uint64_t)&type metadata for EllipticalGradient, (uint64_t)&protocol witness table for EllipticalGradient, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ShapeStyleResolver);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShapeStyleResolver<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyleResolver<EllipticalGradient> and conformance ShapeStyleResolver<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShapeStyleResolver<RadialGradient> and conformance ShapeStyleResolver<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ShapeStyleResolver<RadialGradient> and conformance ShapeStyleResolver<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyleResolver<RadialGradient> and conformance ShapeStyleResolver<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ShapeStyleResolver<RadialGradient>, (uint64_t)&type metadata for RadialGradient, (uint64_t)&protocol witness table for RadialGradient, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ShapeStyleResolver);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShapeStyleResolver<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyleResolver<RadialGradient> and conformance ShapeStyleResolver<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShapeStyleResolver<LinearGradient> and conformance ShapeStyleResolver<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ShapeStyleResolver<LinearGradient> and conformance ShapeStyleResolver<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyleResolver<LinearGradient> and conformance ShapeStyleResolver<A>)
  {
    type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(255, &lazy cache variable for type metadata for ShapeStyleResolver<LinearGradient>, (uint64_t)&type metadata for LinearGradient, (uint64_t)&protocol witness table for LinearGradient, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ShapeStyleResolver);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ShapeStyleResolver<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyleResolver<LinearGradient> and conformance ShapeStyleResolver<A>);
  }
  return result;
}

void type metadata accessor for LeafLayoutComputer<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v5 = a3(255);
    v7 = type metadata accessor for LeafLayoutComputer(a1, v5, (uint64_t)&protocol witness table for _ShapeView<A, B>, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_234EE5224()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t *partial apply for closure #1 in closure #1 in _IntelligenceSupport.AnimatingText.body.getter@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in closure #1 in _IntelligenceSupport.AnimatingText.body.getter(a1, *(_QWORD *)(v2 + 16), a2);
}

unint64_t lazy protocol witness table accessor for type SummaryAttribute and conformance SummaryAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SummaryAttribute and conformance SummaryAttribute;
  if (!lazy protocol witness table cache variable for type SummaryAttribute and conformance SummaryAttribute)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SummaryAttribute, &unk_250622D88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SummaryAttribute and conformance SummaryAttribute);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SummaryAttribute and conformance SummaryAttribute;
  if (!lazy protocol witness table cache variable for type SummaryAttribute and conformance SummaryAttribute)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SummaryAttribute, &unk_250622D88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SummaryAttribute and conformance SummaryAttribute);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SummaryAttribute and conformance SummaryAttribute;
  if (!lazy protocol witness table cache variable for type SummaryAttribute and conformance SummaryAttribute)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SummaryAttribute, &unk_250622D88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SummaryAttribute and conformance SummaryAttribute);
  }
  return result;
}

uint64_t destroy for SummaryPlacement()
{
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for SummaryPlacement(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v3 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for SummaryPlacement(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SummaryPlacement(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SummaryPlacement(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SummaryPlacement(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SummaryPlacement()
{
  return &type metadata for SummaryPlacement;
}

_QWORD *assignWithCopy for SummarySymbol(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

void *type metadata accessor for SummaryAttribute()
{
  return &unk_250622D88;
}

uint64_t sub_234EE5500()
{
  return lazy protocol witness table accessor for type ModifiedContent<Text, _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<Image, _ForegroundStyleModifier2<AngularGradient, Color>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<Image, _ForegroundStyleModifier2<AngularGradient, Color>>, (uint64_t)&protocol witness table for Image, (uint64_t)&protocol witness table for _ForegroundStyleModifier2<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<Text, _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = a2(255);
    v9[0] = a3;
    v9[1] = a4;
    result = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for SummaryAttribute(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type SummaryAttribute and conformance SummaryAttribute();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

double _LuminanceToAlphaEffect.effectValue(size:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = 1;
  result = 0.0;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 116) = 0u;
  *(_BYTE *)(v2 + 132) = 16;
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 9;
  return result;
}

uint64_t sub_234EE56C0()
{
  uint64_t v0;

  outlined consume of GraphicsFilter(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(id *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_DWORD *)(v0 + 128), BYTE2(*(_DWORD *)(v0 + 128)));
  return swift_deallocObject();
}

uint64_t static _LuminanceToAlphaEffect.== infix(_:_:)()
{
  return 1;
}

double protocol witness for _RendererEffect.effectValue(size:) in conformance _LuminanceToAlphaEffect@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = 1;
  result = 0.0;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 116) = 0u;
  *(_BYTE *)(v2 + 132) = 16;
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 9;
  return result;
}

uint64_t View.luminanceToAlpha()(uint64_t a1, uint64_t a2)
{
  return View.modifier<A>(_:)(a1, a1, &type metadata for _LuminanceToAlphaEffect, a2);
}

unint64_t instantiation function for generic protocol witness table for _LuminanceToAlphaEffect(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _LuminanceToAlphaEffect and conformance _LuminanceToAlphaEffect();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _LuminanceToAlphaEffect and conformance _LuminanceToAlphaEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _LuminanceToAlphaEffect and conformance _LuminanceToAlphaEffect;
  if (!lazy protocol witness table cache variable for type _LuminanceToAlphaEffect and conformance _LuminanceToAlphaEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _LuminanceToAlphaEffect, &type metadata for _LuminanceToAlphaEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LuminanceToAlphaEffect and conformance _LuminanceToAlphaEffect);
  }
  return result;
}

ValueMetadata *type metadata accessor for _LuminanceToAlphaEffect()
{
  return &type metadata for _LuminanceToAlphaEffect;
}

uint64_t sub_234EE581C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[1];
  v5 = type metadata accessor for ModifiedContent(255, *a1, (uint64_t)&type metadata for _LuminanceToAlphaEffect, a4);
  v7[0] = v4;
  v7[1] = &protocol witness table for _LuminanceToAlphaEffect;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v7);
}

uint64_t static CoreTesting.isRunning.getter()
{
  swift_beginAccess();
  return static CoreTesting.isRunning;
}

uint64_t static CoreTesting.isRunning.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  static CoreTesting.isRunning = a1;
  return result;
}

uint64_t (*static CoreTesting.isRunning.modify())()
{
  swift_beginAccess();
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t static CoreTesting.needsRender.getter()
{
  swift_beginAccess();
  return static CoreTesting.needsRender;
}

uint64_t static CoreTesting.needsRender.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  static CoreTesting.needsRender = a1;
  return result;
}

uint64_t (*static CoreTesting.needsRender.modify())()
{
  swift_beginAccess();
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

ValueMetadata *type metadata accessor for CoreTesting()
{
  return &type metadata for CoreTesting;
}

unint64_t specialized Dictionary.optimisticFilter(_:)(uint64_t (*a1)(__int128 *, _BYTE *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::UInt *v19;
  Swift::UInt v20;
  Swift::UInt v21;
  uint64_t v22;
  unint64_t result;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _OWORD *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  int64_t v38;
  Swift::UInt v39;
  Swift::UInt v40;
  _OWORD *v41;
  char isUniquelyReferenced_nonNull_native;
  char v43;
  unint64_t v44;
  uint64_t v45;
  _BOOL8 v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  char v50;
  Swift::UInt *v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  char v55;
  char v56;
  int64_t v57;
  int64_t v58;
  uint64_t v59;
  int64_t v61;
  unint64_t v62;
  __int128 v63;
  _BYTE v64[40];
  __int128 v65;
  _OWORD v66[2];
  uint64_t v67;
  Swift::UInt v68;
  Swift::UInt v69;
  __int128 v70[3];

  v3 = a3;
  if (*(_QWORD *)(a3 + 16) <= 0x40uLL)
  {
    v59 = a3 + 64;
    v7 = 1 << *(_BYTE *)(a3 + 32);
    v8 = -1;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    v9 = v8 & *(_QWORD *)(a3 + 64);
    v57 = (unint64_t)(v7 + 63) >> 6;
    swift_bridgeObjectRetain();
    v10 = 0;
    v11 = 0;
    v62 = 0;
    v56 = 1;
    v55 = 1;
    while (1)
    {
      if (v9)
      {
        v12 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v13 = v12 | (v11 << 6);
      }
      else
      {
        v14 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
          __break(1u);
LABEL_77:
          __break(1u);
LABEL_78:
          __break(1u);
LABEL_79:
          __break(1u);
LABEL_80:
          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
LABEL_83:
          result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return result;
        }
        if (v14 >= v57)
          goto LABEL_30;
        v15 = *(_QWORD *)(v59 + 8 * v14);
        ++v11;
        if (!v15)
        {
          v11 = v14 + 1;
          if (v14 + 1 >= v57)
            goto LABEL_30;
          v15 = *(_QWORD *)(v59 + 8 * v11);
          if (!v15)
          {
            v11 = v14 + 2;
            if (v14 + 2 >= v57)
              goto LABEL_30;
            v15 = *(_QWORD *)(v59 + 8 * v11);
            if (!v15)
            {
              v16 = v14 + 3;
              if (v16 >= v57)
              {
LABEL_30:
                swift_release();
                if ((v56 & 1) != 0)
                  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
                if ((v55 & 1) != 0)
                {
                  swift_bridgeObjectRetain();
                  return v3;
                }
                v24 = 1 << *(_BYTE *)(v3 + 32);
                v25 = -1;
                if (v24 < 64)
                  v25 = ~(-1 << v24);
                v26 = v25 & *(_QWORD *)(v3 + 64);
                v27 = v66;
                v58 = (unint64_t)(v24 + 63) >> 6;
                swift_bridgeObjectRetain();
                v28 = 0;
                v61 = 0;
                v6 = (_QWORD *)MEMORY[0x24BEE4B00];
                while (2)
                {
                  if (v26)
                  {
                    v30 = __clz(__rbit64(v26));
                    v26 &= v26 - 1;
                    v31 = v30 | (v61 << 6);
                    goto LABEL_43;
                  }
                  v36 = v61 + 1;
                  if (__OFADD__(v61, 1))
                    goto LABEL_78;
                  if (v36 < v58)
                  {
                    v37 = *(_QWORD *)(v59 + 8 * v36);
                    if (v37)
                    {
LABEL_47:
                      v26 = (v37 - 1) & v37;
                      v31 = __clz(__rbit64(v37)) + (v36 << 6);
                      v61 = v36;
LABEL_43:
                      v32 = *(_QWORD *)(v3 + 56);
                      v33 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v31);
                      v35 = *v33;
                      v34 = v33[1];
                      *(_QWORD *)&v65 = v35;
                      *((_QWORD *)&v65 + 1) = v34;
                      outlined init with copy of AnyTrackedValue(v32 + 40 * v31, (uint64_t)v27);
LABEL_62:
                      outlined init with take of (key: EventID, value: EventType)?((uint64_t)&v65, (uint64_t)&v68);
                      v39 = v68;
                      if (!v68)
                      {
                        swift_release();
                        return (unint64_t)v6;
                      }
                      v40 = v69;
                      outlined init with take of ScrollStateRequest(v70, (uint64_t)&v65);
                      if (v28 == 0x8000000000000000)
                        goto LABEL_82;
                      if (v28 <= 0x3F && ((v62 >> v28) & 1) != 0)
                      {
                        v41 = v27;
                        outlined init with copy of AnyTrackedValue((uint64_t)&v65, (uint64_t)&v63);
                        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                        v44 = specialized __RawDictionaryStorage.find<A>(_:)(v39, v40);
                        v45 = v6[2];
                        v46 = (v43 & 1) == 0;
                        v47 = v45 + v46;
                        if (__OFADD__(v45, v46))
                          goto LABEL_79;
                        v48 = v43;
                        if (v6[3] >= v47)
                        {
                          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                            specialized _NativeDictionary.copy()();
                        }
                        else
                        {
                          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v47, isUniquelyReferenced_nonNull_native);
                          v49 = specialized __RawDictionaryStorage.find<A>(_:)(v39, v40);
                          if ((v48 & 1) != (v50 & 1))
                            goto LABEL_83;
                          v44 = v49;
                        }
                        if ((v48 & 1) != 0)
                        {
                          v29 = v6[7] + 40 * v44;
                          __swift_destroy_boxed_opaque_existential_1(v29);
                          outlined init with take of ScrollStateRequest(&v63, v29);
                        }
                        else
                        {
                          v6[(v44 >> 6) + 8] |= 1 << v44;
                          v51 = (Swift::UInt *)(v6[6] + 16 * v44);
                          *v51 = v39;
                          v51[1] = v40;
                          outlined init with take of ScrollStateRequest(&v63, v6[7] + 40 * v44);
                          v52 = v6[2];
                          v53 = __OFADD__(v52, 1);
                          v54 = v52 + 1;
                          if (v53)
                            goto LABEL_80;
                          v6[2] = v54;
                        }
                        swift_bridgeObjectRelease();
                        v27 = v41;
                      }
                      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v65);
                      ++v28;
                      continue;
                    }
                    v38 = v61 + 2;
                    ++v61;
                    if (v36 + 1 < v58)
                    {
                      v37 = *(_QWORD *)(v59 + 8 * v38);
                      if (v37)
                      {
LABEL_50:
                        v36 = v38;
                        goto LABEL_47;
                      }
                      v61 = v36 + 1;
                      if (v36 + 2 < v58)
                      {
                        v37 = *(_QWORD *)(v59 + 8 * (v36 + 2));
                        if (v37)
                        {
                          v36 += 2;
                          goto LABEL_47;
                        }
                        v38 = v36 + 3;
                        v61 = v36 + 2;
                        if (v36 + 3 < v58)
                        {
                          v37 = *(_QWORD *)(v59 + 8 * v38);
                          if (!v37)
                          {
                            while (1)
                            {
                              v36 = v38 + 1;
                              if (__OFADD__(v38, 1))
                                goto LABEL_81;
                              if (v36 >= v58)
                              {
                                v61 = v58 - 1;
                                goto LABEL_61;
                              }
                              v37 = *(_QWORD *)(v59 + 8 * v36);
                              ++v38;
                              if (v37)
                                goto LABEL_47;
                            }
                          }
                          goto LABEL_50;
                        }
                      }
                    }
                  }
                  break;
                }
LABEL_61:
                v26 = 0;
                v67 = 0;
                memset(v66, 0, sizeof(v66));
                v65 = 0u;
                goto LABEL_62;
              }
              v15 = *(_QWORD *)(v59 + 8 * v16);
              if (!v15)
              {
                while (1)
                {
                  v11 = v16 + 1;
                  if (__OFADD__(v16, 1))
                    goto LABEL_77;
                  if (v11 >= v57)
                    goto LABEL_30;
                  v15 = *(_QWORD *)(v59 + 8 * v11);
                  ++v16;
                  if (v15)
                    goto LABEL_24;
                }
              }
              v11 = v16;
            }
          }
        }
LABEL_24:
        v9 = (v15 - 1) & v15;
        v13 = __clz(__rbit64(v15)) + (v11 << 6);
      }
      v17 = *(_QWORD *)(v3 + 56);
      v18 = v3;
      v19 = (Swift::UInt *)(*(_QWORD *)(v3 + 48) + 16 * v13);
      v20 = v19[1];
      v68 = *v19;
      v21 = v68;
      v69 = v20;
      outlined init with copy of AnyTrackedValue(v17 + 40 * v13, (uint64_t)v70);
      *(_QWORD *)&v65 = v21;
      *((_QWORD *)&v65 + 1) = v20;
      outlined init with take of ScrollStateRequest(v70, (uint64_t)v66);
      *(_QWORD *)&v63 = v21;
      *((_QWORD *)&v63 + 1) = v20;
      outlined init with copy of AnyTrackedValue((uint64_t)v66, (uint64_t)v64);
      LOBYTE(v21) = a1(&v63, v64);
      outlined destroy of (key: EventID, value: EventType)((uint64_t)&v65);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v64);
      if ((v21 & 1) != 0)
      {
        if ((v10 & 0x8000000000000000) != 0)
          goto LABEL_82;
        v56 = 0;
        v22 = 1 << v10;
        if (v10 >= 0x40)
          v22 = 0;
        v62 |= v22;
      }
      else
      {
        v55 = 0;
      }
      v3 = v18;
      ++v10;
    }
  }
  swift_bridgeObjectRetain();
  v6 = (_QWORD *)specialized _NativeDictionary.filter(_:)((uint64_t)a1, a2, v3);
  swift_bridgeObjectRelease();
  return (unint64_t)v6;
}

uint64_t key path setter for EventFilter.predicate : <A>EventFilter<A>(uint64_t *a1, uint64_t (**a2)())
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain();
  result = swift_release();
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed EventType) -> (@out Bool);
  a2[1] = (uint64_t (*)())v5;
  return result;
}

uint64_t EventFilter.predicate.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_retain();
  return v1;
}

uint64_t EventFilter.predicate.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_release();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*EventFilter.predicate.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t EventFilter.init(predicate:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t static EventFilter._makeGesture(modifier:inputs:body:)@<X0>(unsigned int *a1@<X0>, __int128 *a2@<X1>, void (*a3)(_QWORD *__return_ptr, __int128 *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t result;
  int v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  int OffsetAttribute2;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  _DWORD v59[2];
  _QWORD v60[2];
  int v61;
  _BYTE v62[16];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE v66[16];
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  _BYTE v75[28];
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  _BYTE v82[28];
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  _BYTE v89[28];
  uint64_t v90;

  v90 = *MEMORY[0x24BDAC8D0];
  v6 = a2[6];
  v7 = *(__int128 *)((char *)a2 + 108);
  v74 = a2[5];
  *(_OWORD *)v75 = v6;
  *(_OWORD *)&v75[12] = v7;
  v8 = a2[1];
  v69 = *a2;
  v9 = a2[2];
  v11 = a2[3];
  v10 = a2[4];
  v70 = v8;
  v71 = v9;
  v12 = *a1;
  v72 = v11;
  v73 = v10;
  *(_QWORD *)&v83 = __PAIR64__(*(unsigned int *)&v75[12], v12);
  v67 = type metadata accessor for EventFilterEvents(0, a5, (uint64_t)a3, a4);
  v68 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EventFilterEvents<A>, v67);
  type metadata accessor for Attribute<FilteredEvents>();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v83, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_10, (uint64_t)v66, v67, MEMORY[0x24BEE4078], v13, MEMORY[0x24BEE40A8], v14);
  v47 = v76;
  v15 = v69;
  v16 = DWORD2(v69);
  v17 = v70;
  v58 = DWORD2(v70);
  v18 = HIDWORD(v70);
  v41 = HIDWORD(v70);
  v42 = DWORD2(v69);
  v38 = DWORD1(v71);
  v39 = v71;
  v20 = *((_QWORD *)&v71 + 1);
  v19 = v72;
  v37 = DWORD2(v72);
  v55 = v73;
  v56 = HIDWORD(v72);
  v53 = DWORD2(v73);
  v54 = DWORD1(v73);
  v51 = v74;
  v52 = HIDWORD(v73);
  v21 = (void *)*((_QWORD *)&v74 + 1);
  v22 = *(_QWORD *)v75;
  v49 = *(_DWORD *)&v75[8];
  v50 = *(_DWORD *)&v75[16];
  v57 = *(_DWORD *)&v75[20];
  v48 = *(_DWORD *)&v75[24];
  outlined retain of _GestureInputs((uint64_t)&v69);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v23 = v21;
  swift_bridgeObjectRetain();
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v40 = v20;
  *(_QWORD *)&v76 = v15;
  DWORD2(v76) = v16;
  *(_QWORD *)&v77 = v17;
  *((_QWORD *)&v77 + 1) = __PAIR64__(v18, v58);
  *(_QWORD *)&v78 = __PAIR64__(v38, v39);
  *((_QWORD *)&v78 + 1) = v20;
  *(_QWORD *)&v79 = v19;
  *((_QWORD *)&v79 + 1) = __PAIR64__(v56, v37);
  *(_QWORD *)&v80 = __PAIR64__(v54, v55);
  *((_QWORD *)&v80 + 1) = __PAIR64__(v52, v53);
  LODWORD(v81) = v51;
  *((_QWORD *)&v81 + 1) = v23;
  *(_QWORD *)v82 = v22;
  *(_DWORD *)&v82[8] = v49;
  *(_DWORD *)&v82[12] = OffsetAttribute2;
  *(_DWORD *)&v82[16] = v50;
  *(_DWORD *)&v82[20] = v57;
  *(_DWORD *)&v82[24] = v48;
  outlined retain of _GestureInputs((uint64_t)&v76);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v24 = v22;
  swift_bridgeObjectRelease();
  v87 = v80;
  v88 = v81;
  *(_OWORD *)v89 = *(_OWORD *)v82;
  *(_OWORD *)&v89[12] = *(_OWORD *)&v82[12];
  v83 = v76;
  v84 = v77;
  v85 = v78;
  v86 = v79;
  a3(v60, &v83);
  outlined release of _GestureInputs((uint64_t)&v76);
  v59[0] = v60[0];
  v59[1] = v47;
  v63 = type metadata accessor for GesturePhase(0, a5, v25, v26);
  v29 = type metadata accessor for EventFilterPhase(0, a5, v27, v28);
  v64 = v29;
  v65 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EventFilterPhase<A>, v29);
  v30 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v59, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v62, v29, MEMORY[0x24BEE4078], v30, MEMORY[0x24BEE40A8], v31);
  v32 = v83;
  *(_QWORD *)&v83 = v15;
  DWORD2(v83) = v42;
  *(_QWORD *)&v84 = v17;
  *((_QWORD *)&v84 + 1) = __PAIR64__(v41, v58);
  *(_QWORD *)&v85 = __PAIR64__(v38, v39);
  *((_QWORD *)&v85 + 1) = v40;
  *(_QWORD *)&v86 = v19;
  *((_QWORD *)&v86 + 1) = __PAIR64__(v56, v37);
  *(_QWORD *)&v87 = __PAIR64__(v54, v55);
  *((_QWORD *)&v87 + 1) = __PAIR64__(v52, v53);
  LODWORD(v88) = v51;
  *((_QWORD *)&v88 + 1) = v23;
  *(_QWORD *)v89 = v24;
  *(_DWORD *)&v89[8] = v49;
  *(_DWORD *)&v89[12] = OffsetAttribute2;
  *(_DWORD *)&v89[16] = v50;
  *(_DWORD *)&v89[20] = v57;
  *(_DWORD *)&v89[24] = v48;
  result = outlined release of _GestureInputs((uint64_t)&v83);
  v34 = HIDWORD(v60[0]);
  v35 = v60[1];
  v36 = v61;
  *(_DWORD *)a6 = v32;
  *(_DWORD *)(a6 + 4) = v34;
  *(_QWORD *)(a6 + 8) = v35;
  *(_DWORD *)(a6 + 16) = v36;
  return result;
}

uint64_t protocol witness for static GestureModifier._makeGesture(modifier:inputs:body:) in conformance EventFilter<A>@<X0>(unsigned int *a1@<X0>, __int128 *a2@<X1>, void (*a3)(_QWORD *__return_ptr, __int128 *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return static EventFilter._makeGesture(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), a6);
}

void Gesture.eventFilter(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15[0] = a1;
  v15[1] = a2;
  v13 = type metadata accessor for EventFilter(0, AssociatedTypeWitness, v11, v12);
  v14 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EventFilter<A>, v13);
  Gesture.modifier<A>(_:)((uint64_t)v15, a3, v13, a4, v14, a5);
}

void Gesture.eventFilter(allowedTypes:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;

  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  swift_bridgeObjectRetain();
  Gesture.eventFilter(_:)((uint64_t)partial apply for closure #1 in Gesture.eventFilter(allowedTypes:), v8, a2, a3, a4);
}

uint64_t sub_234EE6640()
{
  return swift_release();
}

uint64_t closure #1 in Gesture.eventFilter(allowedTypes:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(_BYTE *, uint64_t, uint64_t, double);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  _BYTE v19[40];
  _OWORD v20[3];

  v17 = a1;
  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  swift_bridgeObjectRetain();
  v4 = 0;
  while (1)
  {
    v18 = *(_OWORD *)(a2 + 16 * v4 + 32);
    outlined init with copy of AnyTrackedValue(v17, (uint64_t)v19);
    v5 = *((_QWORD *)&v18 + 1);
    v6 = *(void (**)(_BYTE *, uint64_t, uint64_t, double))(*((_QWORD *)&v18 + 1) + 48);
    v7 = v18;
    v8 = type metadata accessor for Optional();
    v9 = *(_QWORD *)(v8 - 8);
    v10 = MEMORY[0x24BDAC7A8](v8);
    v12 = (char *)&v16 - v11;
    v6(v19, v7, v5, v10);
    v13 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v7) != 1)
      break;
    ++v4;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    memset(v20, 0, 40);
    outlined destroy of EventType?((uint64_t)v20);
    if (v2 == v4)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  *(_OWORD *)((char *)&v20[1] + 8) = v18;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v20);
  (*(void (**)(uint64_t *, char *, uint64_t))(v13 + 32))(boxed_opaque_existential_1, v12, v7);
  swift_bridgeObjectRelease();
  outlined destroy of EventType?((uint64_t)v20);
  return 1;
}

void Gesture.eventFilter(allowedType:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  Gesture.eventFilter(allowedType:)(a1, a2, a3, a4, (uint64_t)partial apply for closure #1 in Gesture.eventFilter(allowedType:), a5);
}

BOOL closure #1 in Gesture.eventFilter(allowedType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v5)(_BYTE *, uint64_t, uint64_t, double);
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int v12;
  uint64_t *boxed_opaque_existential_1;
  _BYTE v16[40];
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  outlined init with copy of AnyTrackedValue(a1, (uint64_t)v16);
  v5 = *(void (**)(_BYTE *, uint64_t, uint64_t, double))(a3 + 48);
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = &v16[-v9 - 8];
  v5(v16, a2, a3, v8);
  v11 = *(_QWORD *)(a2 - 8);
  v12 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v10, 1, a2);
  if (v12 == 1)
  {
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
    v17 = 0u;
    v18 = 0u;
    v19 = 0;
  }
  else
  {
    *((_QWORD *)&v18 + 1) = a2;
    v19 = a3;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v17);
    (*(void (**)(uint64_t *, _BYTE *, uint64_t))(v11 + 32))(boxed_opaque_existential_1, v10, a2);
  }
  outlined destroy of EventType?((uint64_t)&v17);
  return v12 != 1;
}

void Gesture.eventFilter(excludedType:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  Gesture.eventFilter(allowedType:)(a1, a2, a3, a4, (uint64_t)partial apply for closure #1 in Gesture.eventFilter(excludedType:), a5);
}

void Gesture.eventFilter(allowedType:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v12;

  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = a1;
  *(_QWORD *)(v12 + 24) = a2;
  Gesture.eventFilter(_:)(a5, v12, a3, a4, a6);
}

uint64_t sub_234EE6960()
{
  return swift_release();
}

BOOL closure #1 in Gesture.eventFilter(excludedType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v5)(_BYTE *, uint64_t, uint64_t, double);
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int v12;
  uint64_t *boxed_opaque_existential_1;
  _BYTE v16[40];
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  outlined init with copy of AnyTrackedValue(a1, (uint64_t)v16);
  v5 = *(void (**)(_BYTE *, uint64_t, uint64_t, double))(a3 + 48);
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = &v16[-v9 - 8];
  v5(v16, a2, a3, v8);
  v11 = *(_QWORD *)(a2 - 8);
  v12 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v10, 1, a2);
  if (v12 == 1)
  {
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
    v17 = 0u;
    v18 = 0u;
    v19 = 0;
  }
  else
  {
    *((_QWORD *)&v18 + 1) = a2;
    v19 = a3;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v17);
    (*(void (**)(uint64_t *, _BYTE *, uint64_t))(v11 + 32))(boxed_opaque_existential_1, v10, a2);
  }
  outlined destroy of EventType?((uint64_t)&v17);
  return v12 == 1;
}

void Gesture.eventFilter<A>(_:allowOtherTypes:_:)(char a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v16;

  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a4;
  *(_QWORD *)(v16 + 24) = a5;
  *(_QWORD *)(v16 + 32) = a6;
  *(_QWORD *)(v16 + 40) = a7;
  *(_BYTE *)(v16 + 48) = a1;
  *(_QWORD *)(v16 + 56) = a2;
  *(_QWORD *)(v16 + 64) = a3;
  swift_retain();
  Gesture.eventFilter(_:)((uint64_t)partial apply for closure #1 in Gesture.eventFilter<A>(_:allowOtherTypes:_:), v16, a4, a6, a8);
}

uint64_t sub_234EE6B10()
{
  return swift_release();
}

uint64_t closure #1 in Gesture.eventFilter<A>(_:allowOtherTypes:_:)(uint64_t a1, char a2, uint64_t (*a3)(_BYTE *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t (*v21)(_BYTE *);
  _BYTE v22[40];

  v21 = a3;
  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = &v22[-v14 - 8];
  v16 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v19 = &v22[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  outlined init with copy of AnyTrackedValue(a1, (uint64_t)v22);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(a8 + 48))(v22, a6, a8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v16 + 48))(v15, 1, a6) == 1)
  {
    (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v15, v12);
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v16 + 32))(v19, v15, a6);
    a2 = v21(v19);
    (*(void (**)(_BYTE *, uint64_t))(v16 + 8))(v19, a6);
  }
  return a2 & 1;
}

void Gesture.eventFilter<A>(forType:_:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  Gesture.eventFilter<A>(_:allowOtherTypes:_:)(1, a1, a2, a3, a4, a5, a6, a7);
}

void Gesture.eventFilter<A>(allowedType:_:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  Gesture.eventFilter<A>(_:allowOtherTypes:_:)(0, a1, a2, a3, a4, a5, a6, a7);
}

uint64_t EventFilterEvents.modifier.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t *Value;
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for EventFilter(0, a1, a2, a3);
  Value = (uint64_t *)AGGraphGetValue();
  v7 = *Value;
  v6 = Value[1];
  *a4 = v7;
  a4[1] = v6;
  return swift_retain();
}

unint64_t EventFilterEvents.value.getter(unint64_t a1, uint64_t a2)
{
  int v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[3];
  int v9;
  int v10;

  v3 = a1;
  v4 = HIDWORD(a1);
  type metadata accessor for _DictionaryStorage<EventID, EventType>(0, (unint64_t *)&lazy cache variable for type metadata for [EventID : EventType], (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, unint64_t))MEMORY[0x24BEE0460]);
  v5 = *(_QWORD *)AGGraphGetValue();
  v8[2] = a2;
  v9 = v3;
  v10 = v4;
  swift_bridgeObjectRetain();
  v6 = specialized Dictionary.optimisticFilter(_:)((uint64_t (*)(__int128 *, _BYTE *))partial apply for closure #1 in EventFilterEvents.value.getter, (uint64_t)v8, v5);
  swift_bridgeObjectRelease();
  AGGraphGetValue();
  return v6;
}

uint64_t closure #1 in EventFilterEvents.value.getter(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v9)(_BYTE *);
  _QWORD v10[2];
  _BYTE v11[40];

  v5 = a1[1];
  v10[0] = *a1;
  v10[1] = v5;
  outlined init with copy of AnyTrackedValue(a2, (uint64_t)v11);
  EventFilterEvents.modifier.getter(a4, v6, v7, &v9);
  LOBYTE(a4) = v9(v11);
  swift_release();
  outlined destroy of (key: EventID, value: EventType)((uint64_t)v10);
  return a4 & 1;
}

unint64_t protocol witness for Rule.value.getter in conformance EventFilterEvents<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t *v2;
  unint64_t result;
  char v5;

  result = EventFilterEvents.value.getter(*v2, *(_QWORD *)(a1 + 16));
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v5 & 1;
  return result;
}

uint64_t EventFilterPhase.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t Value;

  if (*(_BYTE *)(AGGraphGetValue() + 8) == 1)
  {
    type metadata accessor for GesturePhase(0, a1, v4, v5);
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    v7 = type metadata accessor for GesturePhase(0, a1, v4, v5);
    Value = AGGraphGetValue();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, Value, v7);
  }
}

uint64_t protocol witness for Rule.value.getter in conformance EventFilterPhase<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return EventFilterPhase.value.getter(*(_QWORD *)(a1 + 16), a2);
}

uint64_t type metadata accessor for EventFilterEvents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EventFilterEvents);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_10@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

void type metadata accessor for Attribute<FilteredEvents>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Attribute<FilteredEvents>)
  {
    v0 = type metadata accessor for Attribute();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<FilteredEvents>);
  }
}

uint64_t type metadata accessor for EventFilterPhase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EventFilterPhase);
}

uint64_t type metadata accessor for EventFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EventFilter);
}

uint64_t sub_234EE6FCC()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Gesture.eventFilter(allowedTypes:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in Gesture.eventFilter(allowedTypes:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_234EE6FF8()
{
  return swift_deallocObject();
}

BOOL partial apply for closure #1 in Gesture.eventFilter(allowedType:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in Gesture.eventFilter(allowedType:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_234EE7010()
{
  return swift_deallocObject();
}

BOOL partial apply for closure #1 in Gesture.eventFilter(excludedType:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in Gesture.eventFilter(excludedType:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_234EE7028@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed EventType) -> (@unowned Bool);
  a2[1] = v5;
  return swift_retain();
}

uint64_t sub_234EE707C()
{
  return 8;
}

_QWORD *sub_234EE7088(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

ValueMetadata *type metadata accessor for FilteredEvents()
{
  return &type metadata for FilteredEvents;
}

void base witness table accessor for _AttributeBody in EventFilterPhase<A>()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for _AttributeBody in EventFilterEvents<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t (*v6)(_QWORD *, _BYTE *);
  char v7;
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  void *v11;
  _QWORD v13[2];

  v6 = (uint64_t (*)(_QWORD *, _BYTE *))isStackAllocationSafe;
  v13[1] = *MEMORY[0x24BDAC8D0];
  v7 = *(_BYTE *)(a3 + 32);
  v8 = (unint64_t)((1 << v7) + 63) >> 6;
  v9 = 8 * v8;
  if ((v7 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    bzero((char *)v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    v10 = specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v8, a3, v6);
    if (v3)
      swift_willThrow();
    else
      return v10;
  }
  else
  {
    v11 = (void *)swift_slowAlloc();
    bzero(v11, v9);
    a2 = specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v11, v8, a3, v6);
    MEMORY[0x23B7C9D54](v11, -1, -1);
  }
  return a2;
}

uint64_t specialized closure #1 in _NativeDictionary.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, _BYTE *))
{
  uint64_t v4;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t *v23;
  uint64_t v24;
  _BYTE v25[40];
  _QWORD v26[2];
  int64_t v27;

  v23 = (unint64_t *)result;
  v24 = 0;
  v7 = 0;
  v8 = a3 + 64;
  v9 = 1 << *(_BYTE *)(a3 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a3 + 64);
  v27 = (unint64_t)(v9 + 63) >> 6;
  while (v11)
  {
    v12 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    v13 = v12 | (v7 << 6);
LABEL_17:
    v17 = *(_QWORD *)(a3 + 56);
    v18 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 16 * v13);
    v20 = *v18;
    v19 = v18[1];
    v26[0] = v20;
    v26[1] = v19;
    outlined init with copy of AnyTrackedValue(v17 + 40 * v13, (uint64_t)v25);
    v21 = a4(v26, v25);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    if (v4)
      return result;
    if ((v21 & 1) != 0)
    {
      *(unint64_t *)((char *)v23 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = __OFADD__(v24++, 1);
      if (v14)
        goto LABEL_30;
    }
  }
  v14 = __OFADD__(v7++, 1);
  if (v14)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v7 >= v27)
    return specialized _NativeDictionary.extractDictionary(using:count:)(v23, a2, v24, a3);
  v15 = *(_QWORD *)(v8 + 8 * v7);
  if (v15)
  {
LABEL_16:
    v11 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v7 << 6);
    goto LABEL_17;
  }
  v16 = v7 + 1;
  if (v7 + 1 >= v27)
    return specialized _NativeDictionary.extractDictionary(using:count:)(v23, a2, v24, a3);
  v15 = *(_QWORD *)(v8 + 8 * v16);
  if (v15)
    goto LABEL_15;
  v16 = v7 + 2;
  if (v7 + 2 >= v27)
    return specialized _NativeDictionary.extractDictionary(using:count:)(v23, a2, v24, a3);
  v15 = *(_QWORD *)(v8 + 8 * v16);
  if (v15)
    goto LABEL_15;
  v16 = v7 + 3;
  if (v7 + 3 >= v27)
    return specialized _NativeDictionary.extractDictionary(using:count:)(v23, a2, v24, a3);
  v15 = *(_QWORD *)(v8 + 8 * v16);
  if (v15)
  {
LABEL_15:
    v7 = v16;
    goto LABEL_16;
  }
  while (1)
  {
    v7 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v7 >= v27)
      return specialized _NativeDictionary.extractDictionary(using:count:)(v23, a2, v24, a3);
    v15 = *(_QWORD *)(v8 + 8 * v7);
    ++v16;
    if (v15)
      goto LABEL_16;
  }
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.extractDictionary(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _OWORD v34[2];
  uint64_t v35;

  if (!a3)
    return MEMORY[0x24BEE4B00];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  type metadata accessor for _DictionaryStorage<Int, LocalizedStringKey.FormatArgument>(0, &lazy cache variable for type metadata for _DictionaryStorage<AnyHashable, ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item>, (void (*)(uint64_t))type metadata accessor for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item);
  result = static _DictionaryStorage.allocate(capacity:)();
  v9 = result;
  v30 = a2;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
    }
    else
    {
      v15 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_38;
      if (v15 >= v30)
        return v9;
      v16 = a1[v15];
      ++v11;
      if (!v16)
      {
        v11 = v15 + 1;
        if (v15 + 1 >= v30)
          return v9;
        v16 = a1[v11];
        if (!v16)
        {
          v17 = v15 + 2;
          if (v17 >= v30)
            return v9;
          v16 = a1[v17];
          if (!v16)
          {
            while (1)
            {
              v11 = v17 + 1;
              if (__OFADD__(v17, 1))
                goto LABEL_39;
              if (v11 >= v30)
                return v9;
              v16 = a1[v11];
              ++v17;
              if (v16)
                goto LABEL_22;
            }
          }
          v11 = v17;
        }
      }
LABEL_22:
      v10 = (v16 - 1) & v16;
      v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    outlined init with copy of AnyHashable(*(_QWORD *)(v4 + 48) + 40 * v14, (uint64_t)v34);
    v18 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v14);
    v31 = v34[0];
    v32 = v34[1];
    v33 = v35;
    v19 = *(_QWORD *)(v9 + 40);
    swift_retain();
    result = AnyHashable._rawHashValue(seed:)(v19);
    v20 = -1 << *(_BYTE *)(v9 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v12 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v12 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_37;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v12 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v12 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = *(_QWORD *)(v9 + 48) + 40 * v23;
    *(_OWORD *)v28 = v31;
    *(_OWORD *)(v28 + 16) = v32;
    *(_QWORD *)(v28 + 32) = v33;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v23) = v18;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    if (!v5)
      return v9;
  }
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  Swift::Int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  unint64_t *v30;
  uint64_t v31;
  _OWORD v32[2];
  _OWORD v33[2];

  if (!a3)
    return MEMORY[0x24BEE4B00];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  type metadata accessor for _DictionaryStorage<NSAttributedStringKey, Any>(0);
  result = static _DictionaryStorage.allocate(capacity:)();
  v9 = result;
  v30 = a1;
  v31 = a2;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
    }
    else
    {
      v15 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_40;
      if (v15 >= v31)
        return v9;
      v16 = v30[v15];
      ++v11;
      if (!v16)
      {
        v11 = v15 + 1;
        if (v15 + 1 >= v31)
          return v9;
        v16 = v30[v11];
        if (!v16)
        {
          v11 = v15 + 2;
          if (v15 + 2 >= v31)
            return v9;
          v16 = v30[v11];
          if (!v16)
          {
            v17 = v15 + 3;
            if (v17 >= v31)
              return v9;
            v16 = v30[v17];
            if (!v16)
            {
              while (1)
              {
                v11 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_41;
                if (v11 >= v31)
                  return v9;
                v16 = v30[v11];
                ++v17;
                if (v16)
                  goto LABEL_24;
              }
            }
            v11 = v17;
          }
        }
      }
LABEL_24:
      v10 = (v16 - 1) & v16;
      v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    v18 = *(void **)(*(_QWORD *)(v4 + 48) + 8 * v14);
    outlined init with copy of Any(*(_QWORD *)(v4 + 56) + 32 * v14, (uint64_t)v33);
    outlined init with take of Any(v33, v32);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    v19 = v18;
    String.hash(into:)();
    v20 = Hasher._finalize()();
    result = swift_bridgeObjectRelease();
    v21 = -1 << *(_BYTE *)(v9 + 32);
    v22 = v20 & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v12 + 8 * (v22 >> 6))) != 0)
    {
      v24 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v12 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v27 = v23 == v26;
        if (v23 == v26)
          v23 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v12 + 8 * v23);
      }
      while (v28 == -1);
      v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(_QWORD *)(v12 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v24) = v19;
    result = (uint64_t)outlined init with take of Any(v32, (_OWORD *)(*(_QWORD *)(v9 + 56) + 32 * v24));
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    if (!v5)
      return v9;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::UInt v18;
  Swift::UInt8 v19;
  _BYTE v21[40];

  if (!a3)
    return MEMORY[0x24BEE4B00];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Spacing.Key, Spacing.Value>, (void (*)(void))lazy protocol witness table accessor for type Spacing.Key and conformance Spacing.Key);
  result = static _DictionaryStorage.allocate(capacity:)();
  v9 = (_QWORD *)result;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  while (1)
  {
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v11 << 6);
    }
    else
    {
      v14 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_30;
      if (v14 >= a2)
        return (uint64_t)v9;
      v15 = a1[v14];
      ++v11;
      if (!v15)
      {
        v11 = v14 + 1;
        if (v14 + 1 >= a2)
          return (uint64_t)v9;
        v15 = a1[v11];
        if (!v15)
        {
          v11 = v14 + 2;
          if (v14 + 2 >= a2)
            return (uint64_t)v9;
          v15 = a1[v11];
          if (!v15)
          {
            v16 = v14 + 3;
            if (v16 >= a2)
              return (uint64_t)v9;
            v15 = a1[v16];
            if (!v15)
            {
              while (1)
              {
                v11 = v16 + 1;
                if (__OFADD__(v16, 1))
                  goto LABEL_31;
                if (v11 >= a2)
                  return (uint64_t)v9;
                v15 = a1[v11];
                ++v16;
                if (v15)
                  goto LABEL_24;
              }
            }
            v11 = v16;
          }
        }
      }
LABEL_24:
      v10 = (v15 - 1) & v15;
      v13 = __clz(__rbit64(v15)) + (v11 << 6);
    }
    v17 = *(_QWORD *)(v4 + 48) + 16 * v13;
    v18 = *(_QWORD *)v17;
    v19 = *(_BYTE *)(v17 + 8);
    outlined init with take of Spacing.Value(*(_QWORD *)(v4 + 56) + 40 * v13, (uint64_t)v21);
    result = specialized _NativeDictionary._unsafeInsertNew(key:value:)(v18, v19, (uint64_t)v21, v9);
    if (__OFSUB__(v5--, 1))
      break;
    if (!v5)
      return (uint64_t)v9;
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  Swift::UInt *v18;
  Swift::UInt v19;
  Swift::UInt v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  Swift::UInt *v29;
  uint64_t v31;
  __int128 v32[2];
  __int128 v33[3];

  if (!a3)
    return MEMORY[0x24BEE4B00];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  type metadata accessor for _DictionaryStorage<EventID, EventType>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<EventID, EventType>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, unint64_t))MEMORY[0x24BEE30A0]);
  result = static _DictionaryStorage.allocate(capacity:)();
  v9 = result;
  v31 = a2;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
    }
    else
    {
      v15 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_40;
      if (v15 >= v31)
        return v9;
      v16 = a1[v15];
      ++v11;
      if (!v16)
      {
        v11 = v15 + 1;
        if (v15 + 1 >= v31)
          return v9;
        v16 = a1[v11];
        if (!v16)
        {
          v11 = v15 + 2;
          if (v15 + 2 >= v31)
            return v9;
          v16 = a1[v11];
          if (!v16)
          {
            v17 = v15 + 3;
            if (v17 >= v31)
              return v9;
            v16 = a1[v17];
            if (!v16)
            {
              while (1)
              {
                v11 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_41;
                if (v11 >= v31)
                  return v9;
                v16 = a1[v11];
                ++v17;
                if (v16)
                  goto LABEL_24;
              }
            }
            v11 = v17;
          }
        }
      }
LABEL_24:
      v10 = (v16 - 1) & v16;
      v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    v18 = (Swift::UInt *)(*(_QWORD *)(v4 + 48) + 16 * v14);
    v20 = *v18;
    v19 = v18[1];
    outlined init with copy of AnyTrackedValue(*(_QWORD *)(v4 + 56) + 40 * v14, (uint64_t)v33);
    outlined init with take of ScrollStateRequest(v33, (uint64_t)v32);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v20);
    Hasher._combine(_:)(v19);
    result = Hasher._finalize()();
    v21 = -1 << *(_BYTE *)(v9 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v12 + 8 * (v22 >> 6))) != 0)
    {
      v24 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v12 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v27 = v23 == v26;
        if (v23 == v26)
          v23 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v12 + 8 * v23);
      }
      while (v28 == -1);
      v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(_QWORD *)(v12 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    v29 = (Swift::UInt *)(*(_QWORD *)(v9 + 48) + 16 * v24);
    *v29 = v20;
    v29[1] = v19;
    result = outlined init with take of ScrollStateRequest(v32, *(_QWORD *)(v9 + 56) + 40 * v24);
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    if (!v5)
      return v9;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::UInt32 v20;
  Swift::UInt32 v21;
  Swift::UInt32 v22;
  Swift::UInt32 v23;
  Swift::UInt8 v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  _OWORD v44[3];
  uint64_t v45;

  if (!a3)
    return MEMORY[0x24BEE4B00];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<DisplayList.ViewUpdater.ViewCache.Key, DisplayList.ViewUpdater.ViewCache.AnimatorInfo>, (void (*)(void))lazy protocol witness table accessor for type DisplayList.ViewUpdater.ViewCache.Key and conformance DisplayList.ViewUpdater.ViewCache.Key);
  result = static _DictionaryStorage.allocate(capacity:)();
  v8 = result;
  v36 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 64;
  v38 = v4;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v39 = v10;
      v13 = v12 | (v10 << 6);
    }
    else
    {
      v14 = v10 + 1;
      if (__OFADD__(v10, 1))
        goto LABEL_40;
      if (v14 >= v36)
        return v8;
      v15 = a1[v14];
      v16 = v10 + 1;
      if (!v15)
      {
        v16 = v10 + 2;
        if (v10 + 2 >= v36)
          return v8;
        v15 = a1[v16];
        if (!v15)
        {
          v16 = v10 + 3;
          if (v10 + 3 >= v36)
            return v8;
          v15 = a1[v16];
          if (!v15)
          {
            v17 = v10 + 4;
            if (v10 + 4 >= v36)
              return v8;
            v15 = a1[v17];
            if (!v15)
            {
              while (1)
              {
                v16 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_41;
                if (v16 >= v36)
                  return v8;
                v15 = a1[v16];
                ++v17;
                if (v15)
                  goto LABEL_24;
              }
            }
            v16 = v10 + 4;
          }
        }
      }
LABEL_24:
      v9 = (v15 - 1) & v15;
      v39 = v16;
      v13 = __clz(__rbit64(v15)) + (v16 << 6);
    }
    v18 = *(_QWORD *)(v4 + 56);
    v19 = *(_QWORD *)(v4 + 48) + 20 * v13;
    v20 = *(_DWORD *)v19;
    v21 = *(_DWORD *)(v19 + 4);
    v23 = *(_DWORD *)(v19 + 8);
    v22 = *(_DWORD *)(v19 + 12);
    v24 = *(_BYTE *)(v19 + 16);
    outlined init with copy of DisplayList.ViewUpdater.ViewCache.AnimatorInfo(v18 + 56 * v13, (uint64_t)v44);
    v40 = v44[0];
    v41 = v44[1];
    v42 = v44[2];
    v43 = v45;
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v20);
    Hasher._combine(_:)(v21);
    Hasher._combine(_:)(v23);
    Hasher._combine(_:)(v22);
    Hasher._combine(_:)(v24);
    result = Hasher._finalize()();
    v25 = -1 << *(_BYTE *)(v8 + 32);
    v26 = result & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
    {
      v28 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v31 = v27 == v30;
        if (v27 == v30)
          v27 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v11 + 8 * v27);
      }
      while (v32 == -1);
      v28 = __clz(__rbit64(~v32)) + (v27 << 6);
    }
    *(_QWORD *)(v11 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
    v33 = *(_QWORD *)(v8 + 48) + 20 * v28;
    *(_DWORD *)v33 = v20;
    *(_DWORD *)(v33 + 4) = v21;
    *(_DWORD *)(v33 + 8) = v23;
    *(_DWORD *)(v33 + 12) = v22;
    *(_BYTE *)(v33 + 16) = v24;
    v34 = *(_QWORD *)(v8 + 56) + 56 * v28;
    *(_OWORD *)v34 = v40;
    *(_OWORD *)(v34 + 16) = v41;
    *(_OWORD *)(v34 + 32) = v42;
    *(_QWORD *)(v34 + 48) = v43;
    ++*(_QWORD *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    v4 = v38;
    v10 = v39;
    if (!v5)
      return v8;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *);
  uint64_t v27;
  void *v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  __int128 v51;
  char v52[80];

  if (!a3)
    return MEMORY[0x24BEE4B00];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<_ViewList_ID.Canonical, CanvasSymbols.Child>, (void (*)(void))lazy protocol witness table accessor for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical);
  result = static _DictionaryStorage.allocate(capacity:)();
  v8 = result;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 64;
  v45 = result;
  while (1)
  {
    if (v9)
    {
      v46 = (v9 - 1) & v9;
      v47 = v10;
      v12 = __clz(__rbit64(v9)) | (v10 << 6);
    }
    else
    {
      v13 = v10 + 1;
      if (__OFADD__(v10, 1))
        goto LABEL_43;
      if (v13 >= a2)
        return v8;
      v14 = a1[v13];
      v15 = v10 + 1;
      if (!v14)
      {
        v15 = v10 + 2;
        if (v10 + 2 >= a2)
          return v8;
        v14 = a1[v15];
        if (!v14)
        {
          v15 = v10 + 3;
          if (v10 + 3 >= a2)
            return v8;
          v14 = a1[v15];
          if (!v14)
          {
            v16 = v10 + 4;
            if (v10 + 4 >= a2)
              return v8;
            v14 = a1[v16];
            if (!v14)
            {
              while (1)
              {
                v15 = v16 + 1;
                if (__OFADD__(v16, 1))
                  goto LABEL_44;
                if (v15 >= a2)
                  return v8;
                v14 = a1[v15];
                ++v16;
                if (v14)
                  goto LABEL_24;
              }
            }
            v15 = v10 + 4;
          }
        }
      }
LABEL_24:
      v46 = (v14 - 1) & v14;
      v47 = v15;
      v12 = __clz(__rbit64(v14)) + (v15 << 6);
    }
    v48 = v5;
    v17 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *(_QWORD *)&v7 = *v17;
    v51 = v7;
    v18 = v17[1];
    v19 = *(_QWORD *)(v4 + 56) + 48 * v12;
    v20 = *(void **)v19;
    v21 = *(_QWORD *)(v19 + 8);
    v49 = *(_DWORD *)(v19 + 16);
    v22 = *(_QWORD *)(v19 + 24);
    v23 = *(_QWORD *)(v19 + 32);
    v24 = *(_QWORD *)(v19 + 40);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v51);
    Hasher._combine(_:)(DWORD1(v51));
    v50 = v21;
    if (v18)
    {
      Hasher._combine(_:)(1u);
      v25 = v4;
      v26 = *(void (**)(char *))(*(_QWORD *)v18 + 112);
      swift_retain();
      v27 = v22;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain_n();
      v28 = v20;
      v29 = v20;
      v26(v52);
      v4 = v25;
      swift_release();
    }
    else
    {
      Hasher._combine(_:)(0);
      swift_retain();
      v27 = v22;
      swift_bridgeObjectRetain();
      swift_retain();
      v28 = v20;
      v30 = v20;
    }
    v31 = v24;
    result = Hasher._finalize()();
    v8 = v45;
    v32 = -1 << *(_BYTE *)(v45 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v11 + 8 * (v33 >> 6))) != 0)
    {
      v35 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v11 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
      v36 = v50;
    }
    else
    {
      v37 = 0;
      v38 = (unint64_t)(63 - v32) >> 6;
      v36 = v50;
      do
      {
        if (++v34 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v39 = v34 == v38;
        if (v34 == v38)
          v34 = 0;
        v37 |= v39;
        v40 = *(_QWORD *)(v11 + 8 * v34);
      }
      while (v40 == -1);
      v35 = __clz(__rbit64(~v40)) + (v34 << 6);
    }
    *(_QWORD *)(v11 + ((v35 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v35;
    v41 = (_QWORD *)(*(_QWORD *)(v45 + 48) + 16 * v35);
    *((_QWORD *)&v7 + 1) = *((_QWORD *)&v51 + 1);
    *v41 = v51;
    v41[1] = v18;
    v42 = *(_QWORD *)(v45 + 56) + 48 * v35;
    *(_QWORD *)v42 = v28;
    *(_QWORD *)(v42 + 8) = v36;
    *(_DWORD *)(v42 + 16) = v49;
    *(_QWORD *)(v42 + 24) = v27;
    *(_QWORD *)(v42 + 32) = v23;
    *(_QWORD *)(v42 + 40) = v31;
    ++*(_QWORD *)(v45 + 16);
    v5 = v48 - 1;
    if (__OFSUB__(v48, 1))
      break;
    v9 = v46;
    v10 = v47;
    if (v48 == 1)
      return v8;
  }
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v31;

  if (!a3)
    return MEMORY[0x24BEE4B00];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  type metadata accessor for _DictionaryStorage<Int, LocalizedStringKey.FormatArgument>(0, &lazy cache variable for type metadata for _DictionaryStorage<Int, ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Item>, (void (*)(uint64_t))type metadata accessor for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Item);
  result = static _DictionaryStorage.allocate(capacity:)();
  v9 = result;
  v31 = a1;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
    }
    else
    {
      v15 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_38;
      if (v15 >= a2)
        return v9;
      v16 = v31[v15];
      ++v11;
      if (!v16)
      {
        v11 = v15 + 1;
        if (v15 + 1 >= a2)
          return v9;
        v16 = v31[v11];
        if (!v16)
        {
          v17 = v15 + 2;
          if (v17 >= a2)
            return v9;
          v16 = v31[v17];
          if (!v16)
          {
            while (1)
            {
              v11 = v17 + 1;
              if (__OFADD__(v17, 1))
                goto LABEL_39;
              if (v11 >= a2)
                return v9;
              v16 = v31[v11];
              ++v17;
              if (v16)
                goto LABEL_22;
            }
          }
          v11 = v17;
        }
      }
LABEL_22:
      v10 = (v16 - 1) & v16;
      v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    v18 = 8 * v14;
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + v18);
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + v18);
    result = static Hasher._hash(seed:_:)();
    v21 = -1 << *(_BYTE *)(v9 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v12 + 8 * (v22 >> 6))) != 0)
    {
      v24 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v12 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_37;
        }
        v27 = v23 == v26;
        if (v23 == v26)
          v23 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v12 + 8 * v23);
      }
      while (v28 == -1);
      v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(_QWORD *)(v12 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    v29 = 8 * v24;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + v29) = v19;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + v29) = v20;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    result = swift_retain();
    if (!v5)
      return v9;
  }
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.extractDictionary(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  char *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v37;
  unint64_t *v38;
  _QWORD *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45[8];
  char v46[8];

  v38 = a1;
  v44 = type metadata accessor for URL();
  v42 = *(_QWORD *)(v44 - 8);
  MEMORY[0x24BDAC7A8](v44);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v41 = (char *)&v37 - v10;
  if (!a3)
    return MEMORY[0x24BEE4B00];
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }
  type metadata accessor for _DictionaryStorage<URL, NamedImage.Cache.WeakCatalog>();
  result = static _DictionaryStorage.allocate(capacity:)();
  v12 = result;
  v37 = a2;
  if (a2 < 1)
    v13 = 0;
  else
    v13 = *v38;
  v14 = 0;
  v15 = result + 64;
  v39 = a4;
  v40 = v8;
  v16 = v41;
  v17 = v44;
  while (1)
  {
    if (v13)
    {
      v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v43 = v14;
      v19 = v18 | (v14 << 6);
    }
    else
    {
      v20 = v14 + 1;
      if (__OFADD__(v14, 1))
        goto LABEL_40;
      if (v20 >= v37)
        return v12;
      v21 = v38[v20];
      v22 = v14 + 1;
      if (!v21)
      {
        v22 = v14 + 2;
        if (v14 + 2 >= v37)
          return v12;
        v21 = v38[v22];
        if (!v21)
        {
          v22 = v14 + 3;
          if (v14 + 3 >= v37)
            return v12;
          v21 = v38[v22];
          if (!v21)
          {
            v23 = v14 + 4;
            if (v14 + 4 >= v37)
              return v12;
            v21 = v38[v23];
            if (!v21)
            {
              while (1)
              {
                v22 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_41;
                if (v22 >= v37)
                  return v12;
                v21 = v38[v22];
                ++v23;
                if (v21)
                  goto LABEL_24;
              }
            }
            v22 = v14 + 4;
          }
        }
      }
LABEL_24:
      v13 = (v21 - 1) & v21;
      v43 = v22;
      v19 = __clz(__rbit64(v21)) + (v22 << 6);
    }
    v24 = v42;
    v25 = *(_QWORD *)(v42 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v42 + 16))(v16, a4[6] + v25 * v19, v17);
    outlined init with copy of NamedImage.Cache.WeakCatalog(a4[7] + 8 * v19, (uint64_t)v46);
    v26 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
    v27 = v40;
    v26(v40, v16, v17);
    outlined init with take of NamedImage.Cache.WeakCatalog((uint64_t)v46, (uint64_t)v45);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v28 = -1 << *(_BYTE *)(v12 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v15 + 8 * (v29 >> 6))) != 0)
    {
      v31 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v15 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v34 = v30 == v33;
        if (v30 == v33)
          v30 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v15 + 8 * v30);
      }
      while (v35 == -1);
      v31 = __clz(__rbit64(~v35)) + (v30 << 6);
    }
    *(_QWORD *)(v15 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v31;
    v26((char *)(*(_QWORD *)(v12 + 48) + v31 * v25), v27, v44);
    result = outlined init with take of NamedImage.Cache.WeakCatalog((uint64_t)v45, *(_QWORD *)(v12 + 56) + 8 * v31);
    ++*(_QWORD *)(v12 + 16);
    if (__OFSUB__(a3--, 1))
      break;
    a4 = v39;
    v14 = v43;
    if (!a3)
      return v12;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in EventFilterEvents.value.getter(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in EventFilterEvents.value.getter(a1, a2, *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 16));
}

uint64_t outlined destroy of (key: EventID, value: EventType)(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for (key: EventID, value: EventType)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for _DictionaryStorage<EventID, EventType>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v6 = type metadata accessor for EventType();
    v7 = lazy protocol witness table accessor for type EventID and conformance EventID();
    v8 = a3(a1, &type metadata for EventID, v6, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed EventType) -> (@out Bool)()
{
  uint64_t v0;
  uint64_t v2;

  (*(void (**)(uint64_t *__return_ptr))(v0 + 16))(&v2);
  return v2;
}

uint64_t sub_234EE8C28()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed EventType) -> (@unowned Bool)@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result & 1;
  return result;
}

uint64_t sub_234EE8C78()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Gesture.eventFilter<A>(_:allowOtherTypes:_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in Gesture.eventFilter<A>(_:allowOtherTypes:_:)(a1, *(_BYTE *)(v1 + 48), *(uint64_t (**)(_BYTE *))(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

Swift::Void __swiftcall DisplayList.ViewUpdater.ViewInfo.Seeds.invalidate()()
{
  _WORD *v0;

  if (*v0)
    *v0 = ~*v0 | 1;
  if (v0[1])
    v0[1] = ~v0[1] | 1;
  if (v0[2])
    v0[2] = ~v0[2] | 1;
  if (v0[3])
    v0[3] = ~v0[3] | 1;
  if (v0[4])
    v0[4] = ~v0[4] | 1;
  if (v0[5])
    v0[5] = ~v0[5] | 1;
  if (v0[6])
    v0[6] = ~v0[6] | 1;
  if (v0[7])
    v0[7] = ~v0[7] | 1;
  if (v0[8])
    v0[8] = ~v0[8] | 1;
}

uint64_t DisplayList.ViewUpdater.ViewInfo.init(view:layer:container:state:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int16x8_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  __int8 v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;

  v9 = *(_QWORD *)a4;
  v10 = *(_QWORD *)(a4 + 8);
  v11 = *(_QWORD *)(a4 + 16);
  v12 = *(_QWORD *)(a4 + 24);
  v13 = *(unsigned __int8 *)(a4 + 32);
  v14 = *(_BYTE *)(a4 + 33);
  result = AGMakeUniqueID();
  v16 = result;
  if (one-time initialization token for infinity != -1)
    result = swift_once();
  v17 = static Time.infinity;
  a5->i64[0] = a1;
  a5->i64[1] = a2;
  a5[1].i64[0] = a3;
  a5[1].i64[1] = v9;
  a5[2].i64[0] = v10;
  a5[2].i64[1] = v11;
  a5[3].i64[0] = v12;
  a5[3].i8[8] = v13;
  a5[3].i8[9] = v14;
  a5[4].i64[0] = v16;
  a5[4].i64[1] = -1;
  a5[5] = vdupq_n_s16(2 * ((v13 - 13) < 2));
  a5[6].i16[0] = 0;
  a5[6].i32[1] = 0;
  a5[6].i16[4] = 0;
  a5[7].i64[0] = v17;
  return result;
}

uint64_t DisplayList.ViewUpdater.render(rootView:from:time:version:maxVersion:environment:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, double *a3@<X2>, unint64_t *a4@<X3>, uint64_t *a5@<X4>, _QWORD *a6@<X5>, double *a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v11;
  int v12;
  int v13;
  double v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  id v19;
  int v20;
  Swift::Bool value;
  char *v22;
  int v23;
  uint64_t v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v8 = v7;
  v9 = (void *)result;
  v34 = *MEMORY[0x24BDAC8D0];
  v11 = *(_QWORD *)a2;
  v12 = *(unsigned __int16 *)(a2 + 8);
  v13 = *(unsigned __int8 *)(a2 + 10);
  v14 = *a3;
  v15 = *a4;
  v16 = *a5;
  if (*(double *)a6 != *(double *)(v7 + 152))
  {
    *(_QWORD *)(v7 + 152) = *a6;
    *(_BYTE *)(v7 + 184) = 0;
    swift_beginAccess();
    specialized _NativeDictionary.mapValues<A>(_:)(*(_QWORD *)(v7 + 40));
    *(_QWORD *)(v7 + 40) = v17;
    swift_endAccess();
    result = swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 140) = 0;
  }
  if (*(_BYTE *)(v7 + 184) != 1)
  {
LABEL_9:
    if (*(double *)(v7 + 176) == 0.0)
    {
      swift_beginAccess();
      v19 = (id)CoreViewLayer(*(_DWORD *)(v7 + 32) & 3, v9);
      objc_msgSend(v19, sel_setAllowsGroupOpacity_, 0);
      objc_msgSend(v19, sel_setAllowsGroupBlending_, 0);

    }
    v20 = (2 * ((33 * (v15 >> 16)) ^ v15)) | 1;
    if (!v15)
      LOWORD(v20) = 0;
    *(_WORD *)(v8 + 140) = v20;
    *(_WORD *)(v8 + 142) = v20;
    *(_BYTE *)(v8 + 185) = *(_BYTE *)(v8 + 184);
    *(_BYTE *)(v8 + 184) = 1;
    *(_QWORD *)(v8 + 160) = v11;
    *(_WORD *)(v8 + 168) = v12;
    *(_BYTE *)(v8 + 170) = v13;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(double *)(v8 + 176) = v14;
    swift_beginAccess();
    value = printTree.value;
    if (printTree.value == 2)
    {
      v22 = getenv("SWIFTUI_PRINT_TREE");
      if (!v22)
      {
        printTree.value = 0;
        swift_endAccess();
        goto LABEL_20;
      }
      v23 = atoi(v22);
      printTree.value = v23 != 0;
      swift_endAccess();
      if (!v23)
        goto LABEL_20;
    }
    else
    {
      swift_endAccess();
      if (!value)
      {
LABEL_20:
        v29 = *(_QWORD *)(v8 + 152);
        v30 = v8;
        v31 = *(_QWORD *)&v14;
        v32 = v16;
        v33 = v29;
        swift_retain();
        closure #1 in DisplayList.ViewUpdater.render(rootView:from:time:version:maxVersion:environment:)((uint64_t)&v30, v8, v11, v12 | (v13 << 16), v9, a7, v14);
        return swift_release();
      }
    }
    type metadata accessor for _ContiguousArrayStorage<Any>();
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_23527E860;
    v30 = 0;
    v31 = 0xE000000000000000;
    _StringGuts.grow(_:)(17);
    v25._countAndFlagsBits = 0x2077656956;
    v25._object = (void *)0xE500000000000000;
    String.append(_:)(v25);
    _print_unlocked<A, B>(_:_:)();
    v26._countAndFlagsBits = 544497952;
    v26._object = (void *)0xE400000000000000;
    String.append(_:)(v26);
    _print_unlocked<A, B>(_:_:)();
    v27._countAndFlagsBits = 2618;
    v27._object = (void *)0xE200000000000000;
    String.append(_:)(v27);
    v28._countAndFlagsBits = DisplayList.description.getter();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v24 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v24 + 32) = 0;
    *(_QWORD *)(v24 + 40) = 0xE000000000000000;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  if (v15)
  {
    if (*(unsigned __int16 *)(v7 + 140) != ((unsigned __int16)(2 * ((33 * WORD1(v15)) ^ v15)) | 1))
      goto LABEL_9;
  }
  else if (*(_WORD *)(v7 + 140))
  {
    goto LABEL_9;
  }
  v18 = *(double *)(v7 + 144);
  if (v18 < v14)
    goto LABEL_9;
  *a7 = v18;
  return result;
}

uint64_t closure #1 in DisplayList.ViewUpdater.render(rootView:from:time:version:maxVersion:environment:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, void *a5@<X4>, double *a6@<X8>, double a7@<D0>)
{
  uint64_t v12;
  char v13;
  id v14;
  id v15;
  unint64_t v16;
  uint64_t v17;
  double v18;
  SwiftUI::Time v19;
  int v20;
  uint64_t v21;
  uint64_t ObjectType;
  double v23;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[64];
  _OWORD v44[11];
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  if (one-time initialization token for normal != -1)
    swift_once();
  v12 = static GraphicsBlendMode.normal;
  v13 = byte_254266040;
  *(_QWORD *)&v36 = a1;
  DWORD2(v36) = 1065353216;
  *(_QWORD *)&v37 = static GraphicsBlendMode.normal;
  BYTE8(v37) = byte_254266040;
  v38 = 0x3FF0000000000000uLL;
  *(_QWORD *)&v39 = 0;
  *((_QWORD *)&v39 + 1) = 0x3FF0000000000000;
  v40 = 0uLL;
  *(_QWORD *)&v41 = MEMORY[0x24BEE4AF8];
  *((_QWORD *)&v41 + 1) = MEMORY[0x24BEE4AF8];
  HIDWORD(v42) = 0;
  *(_QWORD *)&v42 = 0;
  *(_DWORD *)((char *)&v42 + 7) = 0;
  memset(&v43[8], 0, 56);
  *(_QWORD *)v43 = MEMORY[0x24BEE4AF8];
  swift_beginAccess();
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_BYTE *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = a3;
  *(_WORD *)(a2 + 136) = a4;
  *(_BYTE *)(a2 + 138) = BYTE2(a4);
  outlined copy of GraphicsBlendMode(v12, v13);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  DisplayList.ViewUpdater.ViewCache.clearAsyncValues()();
  swift_endAccess();
  v14 = (id)CoreViewLayer(*(_DWORD *)(a2 + 32) & 3, a5);
  v15 = objc_msgSend(v14, sel_needsLayoutOnGeometryChange);
  objc_msgSend(v14, sel_setNeedsLayoutOnGeometryChange_, 0);
  v16 = *(_QWORD *)(a2 + 32);
  v17 = one-time initialization token for infinity;
  swift_unknownObjectRetain();
  if (v17 != -1)
    swift_once();
  v27 = (uint64_t)a5;
  v28 = v16;
  v29 = static Time.infinity;
  v30 = 0;
  v32 = a3;
  LOWORD(v33) = a4;
  BYTE2(v33) = BYTE2(a4);
  DisplayList.ViewUpdater.update(container:from:parentState:)((unint64_t)&v27, &v32, &v36);
  v44[8] = *(_OWORD *)&v43[16];
  v44[9] = *(_OWORD *)&v43[32];
  v44[10] = *(_OWORD *)&v43[48];
  v44[4] = v40;
  v44[5] = v41;
  v44[6] = v42;
  v44[7] = *(_OWORD *)v43;
  v44[0] = v36;
  v44[1] = v37;
  v44[2] = v38;
  v44[3] = v39;
  v18 = *(double *)&v29;
  v32 = v27;
  v33 = v28;
  v34 = v29;
  v35 = v30;
  swift_beginAccess();
  swift_unknownObjectRetain();
  DisplayList.ViewUpdater.Container.removeRemaining(viewCache:)(a2 + 32);
  swift_endAccess();
  swift_unknownObjectRelease();
  v31 = a7;
  swift_beginAccess();
  DisplayList.ViewUpdater.ViewCache.reclaim(time:)(v19);
  *(_QWORD *)(a2 + 128) = MEMORY[0x24BEE4AF8];
  *(_WORD *)(a2 + 136) = 0;
  *(_BYTE *)(a2 + 138) = 0;
  swift_endAccess();
  swift_bridgeObjectRelease();
  v20 = *(unsigned __int8 *)(a2 + 184);
  if (MEMORY[0x23B7C9E44](a2 + 16))
  {
    v21 = *(_QWORD *)(a2 + 24);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v21 + 224))(ObjectType, v21);
    swift_unknownObjectRelease();
  }
  swift_unknownObjectRelease();
  if (v20)
    v23 = v18;
  else
    v23 = a7;
  *(double *)(a2 + 144) = v23;
  *a6 = v23;
  objc_msgSend(v14, sel_setNeedsLayoutOnGeometryChange_, v15);

  return outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)v44);
}

uint64_t DisplayList.ViewUpdater.update(container:from:parentState:)(unint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  __int16 v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  double v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  int v25;
  int v26;
  char v27;
  uint64_t v28;
  _OWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  __int16 v34;
  char v35;
  int v36;
  double v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  __int16 v44;
  char v45;
  int v46;

  result = *a2;
  v5 = *(_QWORD *)(*a2 + 16);
  if (v5)
  {
    v6 = v3;
    v7 = (_DWORD *)(swift_bridgeObjectRetain() + 100);
    do
    {
      v8 = *(_QWORD *)(v7 - 9);
      v9 = *(_QWORD *)(v7 - 7);
      v10 = *(_QWORD *)(v7 - 5);
      v11 = *(_QWORD *)(v7 - 3);
      v12 = *((_BYTE *)v7 - 2);
      v13 = *((_WORD *)v7 - 2);
      v14 = *v7;
      v15 = *(_OWORD *)(v7 - 13);
      v38 = *(_OWORD *)(v7 - 17);
      v39 = v15;
      v40 = v8;
      v41 = v9;
      v42 = v10;
      v43 = v11;
      v45 = v12;
      v44 = v13;
      v46 = v14;
      swift_beginAccess();
      v28 = v5;
      if (v14)
      {
        v25 = *(_DWORD *)(v6 + 108);
        v26 = *(_DWORD *)(v6 + 104);
        v16 = *(_QWORD *)(v6 + 112);
        v27 = *(_BYTE *)(v6 + 120);
        v17 = 1;
        *(_DWORD *)(v6 + 104) = v14;
        *(_DWORD *)(v6 + 108) = 0;
      }
      else
      {
        v17 = 0;
        v25 = *(_DWORD *)(v6 + 108) + 1;
        v26 = *(_DWORD *)(v6 + 104);
        *(_DWORD *)(v6 + 108) = v25;
        v16 = *(_QWORD *)(v6 + 112);
        v27 = *(_BYTE *)(v6 + 120);
      }
      *(_BYTE *)(v6 + 120) = v17;
      outlined copy of DisplayList.Item.Value(v9, v10);
      outlined copy of DisplayList.Item.Value(v9, v10);
      DisplayList.ViewUpdater.ViewCache.prepare(item:parentState:)((uint64_t)&v38, (uint64_t)a3, (uint64_t *)&v37);
      swift_endAccess();
      v18 = v37;
      if (v37 >= *(double *)(a1 + 24))
        v18 = *(double *)(a1 + 24);
      *(double *)(a1 + 24) = v18;
      v19 = v41;
      v20 = v42;
      v29[0] = v38;
      v29[1] = v39;
      v30 = v40;
      v31 = v41;
      v32 = v42;
      v33 = v43;
      v35 = v45;
      v34 = v44;
      v36 = v46;
      outlined copy of DisplayList.Item.Value(v41, v42);
      DisplayList.ViewUpdater.updateInheritedView(container:from:parentState:)(a1, (uint64_t)v29, a3);
      outlined consume of DisplayList.Item.Value(v9, v10);
      outlined consume of DisplayList.Item.Value(v19, v20);
      outlined consume of DisplayList.Item.Value(v19, v20);
      v21 = *(_BYTE *)(v6 + 120);
      if ((v21 & 0xC) != 0)
      {
        v22 = *(_QWORD *)(v6 + 104);
        if ((*(_BYTE *)(v6 + 120) & 4) != 0)
          *(_QWORD *)(v6 + 104) = *(_QWORD *)(v6 + 112);
        if ((v21 & 8) != 0)
          *(_QWORD *)(v6 + 112) = v22;
      }
      if ((v21 & 1) != 0)
      {
        *(_DWORD *)(v6 + 104) = v26;
        *(_DWORD *)(v6 + 108) = v25;
      }
      if ((v21 & 2) != 0)
        *(_QWORD *)(v6 + 112) = v16;
      v7 += 18;
      *(_BYTE *)(v6 + 120) = v27;
      --v5;
    }
    while (v28 != 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void DisplayList.ViewUpdater.Container.removeRemaining(viewCache:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  char *v5;
  id v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int v22;
  __int16 v23;
  __int16 v24;
  void *v25;
  uint64_t v26;
  __int128 v27;
  id v28;
  char isUniquelyReferenced_nonNull_native;
  id v30;
  int v31;
  id v32;
  uint64_t v33[3];
  _QWORD v34[3];
  __int128 v35;
  __int128 v36;
  __int16 v37;
  __int128 v38;
  __int128 v39;
  __int16 v40;
  int v41;
  char v42;
  char v43;
  uint64_t v44;

  v3 = *(_QWORD *)(v1 + 32);
  v31 = *(_DWORD *)(v1 + 8) & 3;
  v32 = (id)CoreViewSubviews(v31, *(void **)v1);
  v4 = (char *)objc_msgSend(v32, sel_count);
  if (v3 >= (uint64_t)v4)
  {
LABEL_12:

  }
  else
  {
    v5 = v4;
    while (v3 < (uint64_t)v5)
    {
      v6 = objc_msgSend(v32, sel_objectAtIndexedSubscript_, --v5);
      v7 = v6;
      v8 = *(_QWORD *)(a1 + 16);
      if (*(_QWORD *)(v8 + 16))
      {
        v9 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)v6);
        if ((v10 & 1) != 0)
        {
          v11 = *(_QWORD *)(a1 + 8);
          if (!*(_QWORD *)(v11 + 16))
            goto LABEL_14;
          v12 = *(_QWORD *)(v8 + 56) + 20 * v9;
          v13 = *(_BYTE *)(v12 + 16);
          v14 = *(_QWORD *)v12;
          v15 = *(_QWORD *)(v12 + 8);
          v16 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)v12, v15, v13);
          if ((v17 & 1) == 0)
            goto LABEL_15;
          v18 = *(_QWORD *)(v11 + 56);
          if ((*(_BYTE *)(v18 + 120 * v16 + 104) & 1) == 0)
          {
            v19 = v18 + 120 * v16;
            v20 = *(_QWORD *)(v19 + 112);
            v21 = *(_BYTE *)(v19 + 105);
            v22 = *(_DWORD *)(v19 + 100);
            v23 = *(_WORD *)(v19 + 96);
            v24 = *(_WORD *)(v19 + 56);
            v25 = *(void **)(v19 + 8);
            v26 = *(_QWORD *)(v19 + 16);
            v34[0] = *(_QWORD *)v19;
            v34[1] = v25;
            v34[2] = v26;
            v35 = *(_OWORD *)(v19 + 24);
            v36 = *(_OWORD *)(v19 + 40);
            v37 = v24;
            v27 = *(_OWORD *)(v19 + 80);
            v38 = *(_OWORD *)(v19 + 64);
            v39 = v27;
            v40 = v23;
            v41 = v22;
            v42 = 1;
            v43 = v21;
            v44 = v20;
            swift_unknownObjectRetain_n();
            v28 = v25;
            swift_unknownObjectRetain_n();
            v30 = v28;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v33[0] = *(_QWORD *)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0x8000000000000000;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v34, v14, v15, v13, isUniquelyReferenced_nonNull_native);
            *(_QWORD *)(a1 + 8) = v33[0];
            swift_bridgeObjectRelease();
            specialized Set._Variant.insert(_:)((uint64_t)v33, v14, v15, v13);
            swift_unknownObjectRelease();

            swift_unknownObjectRelease();
          }
          CoreViewRemoveFromSuperview(v31, v7);
        }
      }
      swift_unknownObjectRelease();
      if ((char *)v3 == v5)
        goto LABEL_12;
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
  }
}

uint64_t DisplayList.ViewUpdater.renderAsync(to:time:targetTimestamp:version:maxVersion:)@<X0>(uint64_t result@<X0>, double *a2@<X1>, _QWORD *a3@<X3>, uint64_t *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  int v10;
  double v11;
  uint64_t v12;
  double v13;
  Swift::Bool value;
  char *v15;
  int v16;
  uint64_t v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = v5;
  v31 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)result;
  v9 = *(unsigned __int16 *)(result + 8);
  v10 = *(unsigned __int8 *)(result + 10);
  v11 = *a2;
  v12 = *a4;
  if (*(_BYTE *)(v5 + 184) != 1)
  {
LABEL_7:
    swift_beginAccess();
    value = printTree.value;
    if (printTree.value == 2)
    {
      v15 = getenv("SWIFTUI_PRINT_TREE");
      if (!v15)
      {
        printTree.value = 0;
        swift_endAccess();
        goto LABEL_14;
      }
      v16 = atoi(v15);
      printTree.value = v16 != 0;
      swift_endAccess();
      if (!v16)
        goto LABEL_14;
    }
    else
    {
      swift_endAccess();
      if (!value)
      {
LABEL_14:
        v21 = *(_QWORD *)(v6 + 176);
        v22 = *(_QWORD *)(v6 + 152);
        v27 = v6;
        v28 = v21;
        v29 = v12;
        v30 = v22;
        v23 = v6;
        v24 = v11;
        v25 = v12;
        v26 = v22;
        swift_retain_n();
        closure #1 in closure #1 in DisplayList.ViewUpdater.renderAsync(to:time:targetTimestamp:version:maxVersion:)((uint64_t)&v23, (uint64_t)&v27, v6, v8, v9 | (v10 << 16), a5, v11);
        swift_release();
        return swift_release();
      }
    }
    type metadata accessor for _ContiguousArrayStorage<Any>();
    v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_23527E860;
    v27 = 0;
    v28 = 0xE000000000000000;
    _StringGuts.grow(_:)(20);
    v18._countAndFlagsBits = 0x697620636E797341;
    v18._object = (void *)0xEE00207461207765;
    String.append(_:)(v18);
    _print_unlocked<A, B>(_:_:)();
    v19._countAndFlagsBits = 2618;
    v19._object = (void *)0xE200000000000000;
    String.append(_:)(v19);
    v23 = v8;
    LOWORD(v24) = v9;
    BYTE2(v24) = v10;
    v20._countAndFlagsBits = DisplayList.description.getter();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v17 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v17 + 32) = 0;
    *(_QWORD *)(v17 + 40) = 0xE000000000000000;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  if (*a3)
  {
    if (*(unsigned __int16 *)(v5 + 142) != ((unsigned __int16)(2 * ((33 * WORD1(*a3)) ^ *a3)) | 1))
      goto LABEL_7;
  }
  else if (*(_WORD *)(v5 + 142))
  {
    goto LABEL_7;
  }
  v13 = *(double *)(v5 + 144);
  if (v13 < v11)
    goto LABEL_7;
  *(double *)a5 = v13;
  *(_BYTE *)(a5 + 8) = 0;
  return result;
}

uint64_t closure #1 in closure #1 in DisplayList.ViewUpdater.renderAsync(to:time:targetTimestamp:version:maxVersion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X8>, double a7@<D0>)
{
  uint64_t v12;
  char v13;
  uint64_t v14;
  __int16 v15;
  char v16;
  unsigned int v17;
  uint64_t v18;
  char v19;
  uint64_t *v20;
  uint64_t result;
  __int16 v22;
  uint64_t v25;
  __int16 v26;
  char v27;
  uint64_t v28;
  __int16 v29;
  char v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[64];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _BYTE v48[64];
  _OWORD v49[11];
  _OWORD v50[11];
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  if (one-time initialization token for normal != -1)
    swift_once();
  v12 = static GraphicsBlendMode.normal;
  v13 = byte_254266040;
  *(_QWORD *)&v41 = a2;
  DWORD2(v41) = 1065353216;
  *(_QWORD *)&v42 = static GraphicsBlendMode.normal;
  BYTE8(v42) = byte_254266040;
  v43 = 0x3FF0000000000000uLL;
  *(_QWORD *)&v44 = 0;
  *((_QWORD *)&v44 + 1) = 0x3FF0000000000000;
  v45 = 0uLL;
  v14 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&v46 = MEMORY[0x24BEE4AF8];
  *((_QWORD *)&v46 + 1) = MEMORY[0x24BEE4AF8];
  HIDWORD(v47) = 0;
  *(_QWORD *)&v47 = 0;
  *(_DWORD *)((char *)&v47 + 7) = 0;
  memset(&v48[8], 0, 56);
  *(_QWORD *)v48 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&v33 = a1;
  DWORD2(v33) = 1065353216;
  *(_QWORD *)&v34 = static GraphicsBlendMode.normal;
  BYTE8(v34) = byte_254266040;
  v35 = 0x3FF0000000000000uLL;
  *(_QWORD *)&v36 = 0;
  *((_QWORD *)&v36 + 1) = 0x3FF0000000000000;
  v37 = 0uLL;
  *(_QWORD *)&v38 = MEMORY[0x24BEE4AF8];
  *((_QWORD *)&v38 + 1) = MEMORY[0x24BEE4AF8];
  HIDWORD(v39) = 0;
  *(_QWORD *)&v39 = 0;
  *(_DWORD *)((char *)&v39 + 7) = 0;
  memset(&v40[8], 0, 56);
  *(_QWORD *)v40 = MEMORY[0x24BEE4AF8];
  swift_beginAccess();
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 112) = 0;
  *(_BYTE *)(a3 + 120) = 0;
  *(_BYTE *)(a3 + 185) = *(_BYTE *)(a3 + 184);
  *(_BYTE *)(a3 + 184) = 1;
  v15 = *(_WORD *)(a3 + 168);
  v16 = *(_BYTE *)(a3 + 170);
  v25 = *(_QWORD *)(a3 + 160);
  v26 = v15;
  v27 = v16;
  v28 = a4;
  v22 = a5;
  v29 = a5;
  v17 = HIWORD(a5);
  v30 = v17;
  outlined copy of GraphicsBlendMode(v12, v13);
  outlined copy of GraphicsBlendMode(v12, v13);
  swift_bridgeObjectRetain();
  DisplayList.ViewUpdater.updateAsync(oldList:oldParentState:newList:newParentState:)(&v25, &v41, &v28, &v33, (uint64_t)&v31);
  swift_bridgeObjectRelease();
  v49[8] = *(_OWORD *)&v40[16];
  v49[9] = *(_OWORD *)&v40[32];
  v49[10] = *(_OWORD *)&v40[48];
  v49[4] = v37;
  v49[5] = v38;
  v49[6] = v39;
  v49[7] = *(_OWORD *)v40;
  v49[0] = v33;
  v49[1] = v34;
  v49[2] = v35;
  v49[3] = v36;
  v50[8] = *(_OWORD *)&v48[16];
  v50[9] = *(_OWORD *)&v48[32];
  v50[10] = *(_OWORD *)&v48[48];
  v50[4] = v45;
  v50[5] = v46;
  v50[6] = v47;
  v50[7] = *(_OWORD *)v48;
  v50[0] = v41;
  v50[1] = v42;
  v50[2] = v43;
  v50[3] = v44;
  v18 = v31;
  v19 = v32;
  if ((v32 & 1) != 0)
  {
    *(_QWORD *)(a3 + 80) = MEMORY[0x24BEE4B00];
    *(_QWORD *)(a3 + 96) = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_BYTE *)(a3 + 184) = *(_BYTE *)(a3 + 185);
  }
  else
  {
    swift_beginAccess();
    v20 = &v28;
    DisplayList.ViewUpdater.ViewCache.commitAsyncValues(targetTimestamp:)(*(SwiftUI::Time_optional *)(&v20 - 1));
    swift_endAccess();
    *(_QWORD *)(a3 + 160) = a4;
    *(_WORD *)(a3 + 168) = v22;
    *(_BYTE *)(a3 + 170) = v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(double *)(a3 + 176) = a7;
    *(_WORD *)(a3 + 142) = *(_WORD *)(a3 + 140);
    *(_QWORD *)(a3 + 144) = v18;
  }
  outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)v49);
  result = outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)v50);
  *(_QWORD *)a6 = v18;
  *(_BYTE *)(a6 + 8) = v19;
  return result;
}

void DisplayList.ViewUpdater.updateAsync(oldList:oldParentState:newList:newParentState:)(uint64_t *a1@<X0>, _OWORD *a2@<X1>, uint64_t *a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  double v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  unsigned int v32;
  char v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  double v39;
  double v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  double v45;
  double v46;
  char v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  char v59;
  unint64_t v60;
  uint64_t v61;
  double v63;
  char v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  __int16 v71;
  char v72;
  unsigned int v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  __int16 v80;
  char v81;
  unsigned int v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  __int16 v89;
  char v90;
  unsigned int v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  __int16 v98;
  char v99;
  unsigned int v100;

  v7 = *a3;
  v54 = *a1;
  v58 = *(_QWORD *)(*a1 + 16);
  if (v58 == *(_QWORD *)(*a3 + 16))
  {
    if (one-time initialization token for infinity != -1)
      goto LABEL_35;
    while (1)
    {
      v8 = *(double *)&static Time.infinity;
      if (!v58)
        break;
      v9 = 0;
      v10 = 0;
      v49 = (uint64_t *)(v5 + 104);
      v50 = v7;
      v51 = v5;
      v52 = a5;
      while (1)
      {
        v11 = *(_QWORD *)(v54 + v9 + 32);
        v12 = *(_QWORD *)(v54 + v9 + 40);
        v13 = *(_QWORD *)(v54 + v9 + 48);
        v14 = *(_QWORD *)(v54 + v9 + 56);
        v15 = *(_QWORD *)(v54 + v9 + 64);
        v16 = *(_QWORD *)(v54 + v9 + 72);
        v17 = *(_QWORD *)(v54 + v9 + 80);
        v18 = *(_QWORD *)(v54 + v9 + 88);
        v19 = *(unsigned __int8 *)(v54 + v9 + 98);
        v20 = *(unsigned __int16 *)(v54 + v9 + 96);
        v21 = *(_DWORD *)(v54 + v9 + 100);
        *(_QWORD *)&v92 = v11;
        *((_QWORD *)&v92 + 1) = v12;
        *(_QWORD *)&v93 = v13;
        *((_QWORD *)&v93 + 1) = v14;
        v94 = v15;
        v95 = v16;
        v96 = v17;
        v97 = v18;
        v99 = v19;
        v98 = v20;
        v100 = v21;
        if (v10 >= *(_QWORD *)(v7 + 16))
          break;
        v22 = *(_QWORD *)(v7 + v9 + 32);
        v23 = *(_QWORD *)(v7 + v9 + 40);
        v24 = *(_QWORD *)(v7 + v9 + 48);
        v25 = *(_QWORD *)(v7 + v9 + 56);
        v26 = *(_QWORD *)(v7 + v9 + 64);
        v27 = *(_QWORD *)(v7 + v9 + 72);
        v28 = *(_QWORD *)(v7 + v9 + 80);
        v29 = *(_QWORD *)(v7 + v9 + 88);
        v30 = *(unsigned __int8 *)(v7 + v9 + 98);
        v31 = *(unsigned __int16 *)(v7 + v9 + 96);
        v32 = *(_DWORD *)(v7 + v9 + 100);
        *(_QWORD *)&v83 = v22;
        *((_QWORD *)&v83 + 1) = v23;
        *(_QWORD *)&v84 = v24;
        *((_QWORD *)&v84 + 1) = v25;
        v85 = v26;
        v86 = v27;
        v87 = v28;
        v88 = v29;
        v90 = v30;
        v89 = v31;
        v91 = v32;
        if (v32 != v21)
          goto LABEL_30;
        v60 = v10;
        v61 = v9;
        *(_QWORD *)&v74 = v22;
        *((_QWORD *)&v74 + 1) = v23;
        *(_QWORD *)&v75 = v24;
        *((_QWORD *)&v75 + 1) = v25;
        v76 = v26;
        v77 = v27;
        v78 = v28;
        v79 = v29;
        v80 = v31;
        v81 = (v31 | (v30 << 16)) >> 16;
        v82 = v21;
        *(_QWORD *)&v65 = v11;
        *((_QWORD *)&v65 + 1) = v12;
        *(_QWORD *)&v66 = v13;
        *((_QWORD *)&v66 + 1) = v14;
        v67 = v15;
        v68 = v16;
        v69 = v17;
        v70 = v18;
        v72 = (v20 | (v19 << 16)) >> 16;
        v71 = v20;
        v73 = v21;
        outlined copy of DisplayList.Item.Value(v16, v17);
        outlined copy of DisplayList.Item.Value(v27, v28);
        DisplayList.Item.matchesTopLevelStructure(of:)();
        if ((v33 & 1) == 0)
        {
          outlined consume of DisplayList.Item.Value(v27, v28);
          outlined consume of DisplayList.Item.Value(v16, v17);
          *(_QWORD *)v52 = 0;
          *(_BYTE *)(v52 + 8) = 1;
          return;
        }
        swift_beginAccess();
        if (v21)
        {
          v34 = 0;
          v35 = v51;
          v36 = *(_DWORD *)(v51 + 112);
          v55 = *(_DWORD *)(v51 + 108);
          v56 = *(_DWORD *)(v51 + 104);
          v37 = *(_DWORD *)(v51 + 116);
          v59 = *(_BYTE *)(v51 + 120);
          v38 = 1;
          *(_DWORD *)(v51 + 104) = v21;
          *(_DWORD *)(v51 + 108) = 0;
        }
        else
        {
          v38 = 0;
          v35 = v51;
          v21 = *(_DWORD *)(v51 + 104);
          v34 = *(_DWORD *)(v51 + 108) + 1;
          *(_DWORD *)(v51 + 108) = v34;
          v36 = *(_DWORD *)(v51 + 112);
          v37 = *(_DWORD *)(v51 + 116);
          v59 = *(_BYTE *)(v51 + 120);
          v55 = v34;
          v56 = v21;
        }
        *(_BYTE *)(v35 + 120) = v38;
        DisplayList.ViewUpdater.ViewCache.prepare(item:parentState:)((uint64_t)&v92, (uint64_t)a2, (uint64_t *)&v65);
        v39 = *(double *)&v65;
        *(_DWORD *)(v35 + 104) = v21;
        *(_DWORD *)(v35 + 108) = v34;
        v57 = v37;
        *(_DWORD *)(v35 + 112) = v36;
        *(_DWORD *)(v35 + 116) = v37;
        *(_BYTE *)(v35 + 120) = v38;
        DisplayList.ViewUpdater.ViewCache.prepare(item:parentState:)((uint64_t)&v83, (uint64_t)a4, (uint64_t *)&v65);
        swift_endAccess();
        v40 = *(double *)&v65;
        v41 = v95;
        v42 = v96;
        v74 = v92;
        v75 = v93;
        v76 = v94;
        v77 = v95;
        v78 = v96;
        v79 = v97;
        v81 = v99;
        v80 = v98;
        v82 = v100;
        v5 = v35;
        v43 = v86;
        v44 = v87;
        v65 = v83;
        v66 = v84;
        v67 = v85;
        v68 = v86;
        v69 = v87;
        v70 = v88;
        v72 = v90;
        v71 = v89;
        v73 = v91;
        outlined copy of DisplayList.Item.Value(v95, v96);
        outlined copy of DisplayList.Item.Value(v43, v44);
        DisplayList.ViewUpdater.updateInheritedViewAsync(oldItem:oldParentState:newItem:newParentState:)(&v74, a2, &v65, a4, &v63);
        outlined consume of DisplayList.Item.Value(v43, v44);
        outlined consume of DisplayList.Item.Value(v41, v42);
        outlined consume of DisplayList.Item.Value(v43, v44);
        outlined consume of DisplayList.Item.Value(v41, v42);
        if ((v64 & 1) != 0)
        {
          *(double *)v52 = v63;
          *(_BYTE *)(v52 + 8) = 1;
          *(_QWORD *)&v74 = __PAIR64__(v55, v56);
          *((_QWORD *)&v74 + 1) = __PAIR64__(v57, v36);
          LOBYTE(v75) = v59;
          DisplayList.Index.leave(index:)((uint64_t)&v74, v45);
          return;
        }
        if (v39 >= v8)
          v46 = v8;
        else
          v46 = v39;
        if (v40 < v46)
          v46 = v40;
        if (v46 <= v63)
          v8 = v46;
        else
          v8 = v63;
        v47 = *(_BYTE *)(v5 + 120);
        a5 = v52;
        v7 = v50;
        if ((v47 & 0xC) != 0)
        {
          v48 = *v49;
          if ((*(_BYTE *)(v5 + 120) & 4) != 0)
            *(_QWORD *)(v5 + 104) = *(_QWORD *)(v5 + 112);
          if ((v47 & 8) != 0)
            *(_QWORD *)(v5 + 112) = v48;
        }
        if ((v47 & 1) != 0)
        {
          *(_DWORD *)(v5 + 104) = v56;
          *(_DWORD *)(v5 + 108) = v55;
        }
        if ((v47 & 2) != 0)
        {
          *(_DWORD *)(v5 + 112) = v36;
          *(_DWORD *)(v5 + 116) = v57;
        }
        v10 = v60 + 1;
        *(_BYTE *)(v5 + 120) = v59;
        v9 = v61 + 72;
        if (v58 == v60 + 1)
          goto LABEL_31;
      }
      __break(1u);
LABEL_35:
      swift_once();
      v58 = *(_QWORD *)(v54 + 16);
    }
LABEL_31:
    *(double *)a5 = v8;
    *(_BYTE *)(a5 + 8) = 0;
  }
  else
  {
LABEL_30:
    *(_QWORD *)a5 = 0;
    *(_BYTE *)(a5 + 8) = 1;
  }
}

uint64_t DisplayList.ViewUpdater.updateInheritedView(container:from:parentState:)(unint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int16 v24;
  int v25;
  char v26;
  __int128 v27;
  char v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;
  char v52;
  uint64_t v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char v66;
  __int16 v67;
  int v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  char v73;
  int v74;
  unint64_t v75;
  double v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  double v87;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  Swift::Bool v92;
  uint64_t v93;
  uint64_t *v94;
  int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  double v102;
  void *v103;
  __int128 v104;
  double v105;
  uint64_t v106;
  void *v107[5];
  char v108;
  char v109;
  double v110;
  _OWORD v111[4];
  __int16 v112;
  char v113;
  int v114;
  __int128 v115[2];
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  unsigned __int16 v140;
  unsigned __int8 v141;
  int v142;
  _OWORD v143[2];
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  uint64_t v153;

  v100 = a1;
  v153 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for DisplayList.ArchiveIDs?();
  MEMORY[0x24BDAC7A8](v6);
  v98 = (uint64_t)&v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_OWORD *)a2;
  v137 = *(_OWORD *)(a2 + 16);
  v9 = a3[1];
  v143[0] = *a3;
  v143[1] = v9;
  v10 = a3[3];
  v11 = a3[5];
  v146 = a3[4];
  v147 = v11;
  v12 = a3[3];
  v13 = *a3;
  v14 = a3[1];
  v144 = a3[2];
  v145 = v12;
  v15 = a3[9];
  v152 = a3[10];
  v16 = a3[7];
  v17 = a3[9];
  v150 = a3[8];
  v151 = v17;
  v18 = a3[5];
  v19 = a3[7];
  v148 = a3[6];
  v149 = v19;
  v133 = v150;
  v134 = v15;
  v135 = a3[10];
  v136 = v8;
  v129 = v146;
  v130 = v18;
  v131 = v148;
  v132 = v16;
  v20 = *(_QWORD *)(a2 + 40);
  v21 = *(_QWORD *)(a2 + 48);
  v22 = *(_QWORD *)(a2 + 56);
  v23 = *(_BYTE *)(a2 + 66);
  v24 = *(_WORD *)(a2 + 64);
  v25 = *(_DWORD *)(a2 + 68);
  *(_QWORD *)&v138 = *(_QWORD *)(a2 + 32);
  *((_QWORD *)&v138 + 1) = v20;
  *(_QWORD *)&v139 = v21;
  *((_QWORD *)&v139 + 1) = v22;
  v141 = v23;
  v140 = v24;
  v142 = v25;
  v125 = v13;
  v126 = v14;
  v127 = v144;
  v128 = v10;
  v99 = (uint64_t *)(v3 + 32);
  swift_beginAccess();
  v26 = *(_BYTE *)(v3 + 120);
  v101 = v3;
  v27 = *(_OWORD *)(v3 + 104);
  v94 = (uint64_t *)(v3 + 104);
  v115[0] = v27;
  LOBYTE(v115[1]) = v26;
  outlined copy of DisplayList.Item.Value(v20, v21);
  outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)v143);
  specialized static DisplayList.ViewUpdater.Model.merge(item:index:into:)((uint64_t)&v136, (uint64_t)v115, (uint64_t)&v125);
  v29 = v28;
  if ((v28 & 4) == 0)
  {
    v30 = *((_QWORD *)&v138 + 1);
    v32 = *((_QWORD *)&v139 + 1);
    v31 = v139;
    v33 = v141;
    v34 = v140;
    v115[0] = v136;
    v115[1] = v137;
    v116 = v138;
    v117 = v139;
    BYTE2(v118) = v141;
    LOWORD(v118) = v140;
    DWORD1(v118) = v142;
    DisplayList.Item.features.getter();
    if ((v111[0] & 1) == 0)
    {
      v35 = v34 | (v33 << 16);
      if (v31 >> 62 == 1)
      {
        outlined copy of DisplayList.Item.Value(v30, v31);
        outlined consume of DisplayList.Effect(v30, v31, SBYTE4(v31));
        *(_QWORD *)&v111[0] = v32;
        WORD4(v111[0]) = v35;
        BYTE10(v111[0]) = BYTE2(v35);
        DisplayList.Index.skip(list:)((uint64_t *)v111);
        v122 = v133;
        v123 = v134;
        v124 = v135;
        v118 = v129;
        v119 = v130;
        v120 = v131;
        v121 = v132;
        v115[0] = v125;
        v115[1] = v126;
        v116 = v127;
        v117 = v128;
        outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)v115);
        swift_bridgeObjectRelease();
      }
      else
      {
        v122 = v133;
        v123 = v134;
        v124 = v135;
        v118 = v129;
        v119 = v130;
        v120 = v131;
        v121 = v132;
        v115[0] = v125;
        v115[1] = v126;
        v116 = v127;
        v117 = v128;
        outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)v115);
      }
      v83 = v30;
      v84 = v31;
      return outlined consume of DisplayList.Item.Value(v83, v84);
    }
  }
  if ((v29 & 2) != 0)
  {
    v40 = *((_QWORD *)&v138 + 1);
    v41 = v139;
    v97 = v140 | (v141 << 16);
    v115[0] = v136;
    v115[1] = v137;
    v116 = v138;
    v117 = v139;
    BYTE2(v118) = v141;
    LOWORD(v118) = v140;
    DWORD1(v118) = v142;
    v42 = v100;
    v96 = *(_QWORD *)(v100 + 16);
    v43 = *(_QWORD *)(v101 + 32);
    *(_QWORD *)(swift_allocObject() + 16) = v43;
    *(_QWORD *)(swift_allocObject() + 16) = v43;
    v44 = v99;
    swift_beginAccess();
    outlined copy of DisplayList.Item.Value(v40, v41);
    DisplayList.ViewUpdater.ViewCache.update(item:state:tag:in:makeView:updateView:)((uint64_t *)v115, (uint64_t)a3, 1, v96, (void (*)(__int128 *__return_ptr, id *, __int128 *, uint64_t))partial apply for implicit closure #3 in implicit closure #2 in DisplayList.ViewUpdater.updateInheritedView(container:from:parentState:), (void (*)(id *, __int128 *, __int128 *, uint64_t))partial apply for implicit closure #5 in implicit closure #4 in DisplayList.ViewUpdater.updateInheritedView(container:from:parentState:), (uint64_t)v107);
    swift_endAccess();
    outlined consume of DisplayList.Item.Value(*((uint64_t *)&v116 + 1), v117);
    v45 = v101;
    swift_release();
    swift_release();
    *(_BYTE *)(v45 + 184) &= v109 & 1;
    v46 = v110;
    v47 = *(_QWORD *)(v42 + 32);
    CoreViewAddSubview(*(_DWORD *)(v42 + 8) & 3, *(void **)v42, v107[0], v47);
    *(_QWORD *)(v42 + 32) = v47 + 1;
    v48 = *(double *)(v42 + 24);
    if (v46 < v48)
      v48 = v46;
    *(double *)(v42 + 24) = v48;
    if ((v108 & 1) != 0 || (*(_BYTE *)(v45 + 185) & 1) == 0)
    {
      v53 = *v44;
      v54 = v107[1];
      v55 = v107[2];
      v56 = one-time initialization token for infinity;
      swift_unknownObjectRetain();
      if (v56 != -1)
        swift_once();
      v103 = v54;
      *(_QWORD *)&v104 = v53;
      *((_QWORD *)&v104 + 1) = v55;
      v105 = *(double *)&static Time.infinity;
      v106 = 0;
      if ((v29 & 1) != 0)
      {
        swift_beginAccess();
        v85 = *((_QWORD *)&v138 + 1);
        v86 = v139;
        v115[0] = v136;
        v115[1] = v137;
        v116 = v138;
        v117 = v139;
        BYTE2(v118) = v141;
        LOWORD(v118) = v140;
        DWORD1(v118) = v142;
        outlined copy of DisplayList.Item.Value(*((uint64_t *)&v138 + 1), v139);
        DisplayList.ViewUpdater.updateItemView(container:from:localState:)((uint64_t)&v103, v115, (uint64_t)&v125);
        v44 = v99;
        outlined consume of DisplayList.Item.Value(v85, v86);
      }
      else
      {
        swift_beginAccess();
        v57 = v139;
        if ((unint64_t)v139 >> 62 == 1)
        {
          v58 = *((_QWORD *)&v139 + 1);
          v59 = *((_QWORD *)&v138 + 1);
          outlined copy of DisplayList.Effect(*((uint64_t *)&v138 + 1), v139, SBYTE4(v139));
          swift_bridgeObjectRetain();
          outlined consume of DisplayList.Effect(v59, v57, SBYTE4(v57));
          v60 = *(_QWORD *)(v58 + 16);
          if (v60)
          {
            swift_bridgeObjectRetain();
            v93 = v58;
            v61 = (_DWORD *)(v58 + 100);
            do
            {
              v62 = *(_QWORD *)(v61 - 9);
              v63 = *(_QWORD *)(v61 - 7);
              v64 = *(_QWORD *)(v61 - 5);
              v65 = *(_QWORD *)(v61 - 3);
              v66 = *((_BYTE *)v61 - 2);
              v67 = *((_WORD *)v61 - 2);
              v68 = *v61;
              v115[0] = *(_OWORD *)(v61 - 17);
              v115[1] = *(_OWORD *)(v61 - 13);
              *(_QWORD *)&v116 = v62;
              *((_QWORD *)&v116 + 1) = v63;
              v100 = v64;
              *(_QWORD *)&v117 = v64;
              *((_QWORD *)&v117 + 1) = v65;
              BYTE2(v118) = v66;
              LOWORD(v118) = v67;
              DWORD1(v118) = v68;
              swift_beginAccess();
              if (v68)
              {
                v69 = 0;
                v70 = v101;
                v71 = *(_DWORD *)(v101 + 104);
                v95 = *(_DWORD *)(v101 + 108);
                LODWORD(v96) = v71;
                v72 = *(_QWORD *)(v101 + 112);
                v97 = *(unsigned __int8 *)(v101 + 120);
                v73 = 1;
                *(_DWORD *)(v101 + 104) = v68;
              }
              else
              {
                v73 = 0;
                v70 = v101;
                v74 = *(_DWORD *)(v101 + 108);
                LODWORD(v96) = *(_DWORD *)(v101 + 104);
                v69 = v74 + 1;
                v72 = *(_QWORD *)(v101 + 112);
                v97 = *(unsigned __int8 *)(v101 + 120);
                v95 = v69;
              }
              *(_DWORD *)(v70 + 108) = v69;
              *(_BYTE *)(v70 + 120) = v73;
              v75 = v100;
              outlined copy of DisplayList.Item.Value(v63, v100);
              v98 = v63;
              outlined copy of DisplayList.Item.Value(v63, v75);
              DisplayList.ViewUpdater.ViewCache.prepare(item:parentState:)((uint64_t)v115, (uint64_t)&v125, (uint64_t *)&v102);
              swift_endAccess();
              v76 = v102;
              if (v102 >= v105)
                v76 = v105;
              v105 = v76;
              v77 = *((_QWORD *)&v116 + 1);
              v78 = v117;
              v111[0] = v115[0];
              v111[1] = v115[1];
              v111[2] = v116;
              v111[3] = v117;
              v113 = BYTE2(v118);
              v112 = v118;
              v114 = DWORD1(v118);
              outlined copy of DisplayList.Item.Value(*((uint64_t *)&v116 + 1), v117);
              DisplayList.ViewUpdater.updateInheritedView(container:from:parentState:)(&v103, v111, &v125);
              outlined consume of DisplayList.Item.Value(v77, v78);
              v79 = v101;
              v80 = *(_BYTE *)(v101 + 120);
              if ((v80 & 0xC) != 0)
              {
                v81 = *v94;
                if ((*(_BYTE *)(v101 + 120) & 4) != 0)
                  *(_QWORD *)(v101 + 104) = *(_QWORD *)(v101 + 112);
                if ((v80 & 8) != 0)
                  *(_QWORD *)(v79 + 112) = v81;
              }
              if ((v80 & 1) != 0)
              {
                v82 = v95;
                *(_DWORD *)(v79 + 104) = v96;
                *(_DWORD *)(v79 + 108) = v82;
              }
              if ((v80 & 2) != 0)
                *(_QWORD *)(v79 + 112) = v72;
              v61 += 18;
              *(_BYTE *)(v79 + 120) = v97;
              outlined consume of DisplayList.Item.Value(v98, v100);
              outlined consume of DisplayList.Item.Value(v77, v78);
              --v60;
              v44 = v99;
            }
            while (v60);
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
        }
      }
      v87 = v105;
      *(_QWORD *)&v115[0] = v103;
      *(__int128 *)((char *)v115 + 8) = v104;
      *((double *)&v115[1] + 1) = v105;
      *(_QWORD *)&v116 = v106;
      swift_beginAccess();
      swift_unknownObjectRetain();
      DisplayList.ViewUpdater.Container.removeRemaining(viewCache:)((uint64_t)v44);
      swift_endAccess();
      swift_unknownObjectRelease();
      *(double *)v111 = v87;
      swift_beginAccess();
      DisplayList.ViewUpdater.ViewCache.setNextUpdate(_:in:)((unint64_t)v111, (uint64_t)v107);
      swift_endAccess();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v122 = v133;
      v123 = v134;
      v124 = v135;
      v118 = v129;
      v119 = v130;
      v120 = v131;
      v121 = v132;
      v115[0] = v125;
      v115[1] = v126;
      v116 = v127;
      v117 = v128;
    }
    else
    {
      v49 = v139;
      if ((unint64_t)v139 >> 62 == 1)
      {
        v50 = *((_QWORD *)&v138 + 1);
        *(_QWORD *)&v115[0] = *((_QWORD *)&v139 + 1);
        WORD4(v115[0]) = v140;
        BYTE10(v115[0]) = v141;
        outlined copy of DisplayList.Effect(*((uint64_t *)&v138 + 1), v139, SBYTE4(v139));
        swift_bridgeObjectRetain();
        DisplayList.Index.skip(list:)((uint64_t *)v115);
        swift_bridgeObjectRelease();
        swift_beginAccess();
        if (BYTE4(v49) == 1)
        {
          v89 = swift_projectBox();
          v90 = v98;
          outlined init with copy of DisplayList.ArchiveIDs?(v89, v98);
          v91 = type metadata accessor for DisplayList.ArchiveIDs();
          v92 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v91 - 8) + 48))(v90, 1, v91) != 1;
          DisplayList.Index.updateArchive(entering:)(v92);
          outlined destroy of DisplayList.ArchiveIDs?(v90);
        }
        else if (BYTE4(v49) == 7)
        {
          v51 = *(_WORD *)(v50 + 24);
          v52 = *(_BYTE *)(v50 + 26);
          *(_QWORD *)&v111[0] = *(_QWORD *)(v50 + 16);
          WORD4(v111[0]) = v51;
          BYTE10(v111[0]) = v52;
          DisplayList.Index.skip(list:)((uint64_t *)v111);
        }
        swift_endAccess();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v122 = v133;
        v123 = v134;
        v124 = v135;
        v118 = v129;
        v119 = v130;
        v120 = v131;
        v121 = v132;
        v115[0] = v125;
        v115[1] = v126;
        v116 = v127;
        v117 = v128;
        outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)v115);
        outlined consume of DisplayList.Effect(v50, v49, SBYTE4(v49));
        goto LABEL_48;
      }
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v122 = v133;
      v123 = v134;
      v124 = v135;
      v118 = v129;
      v119 = v130;
      v120 = v131;
      v121 = v132;
      v115[0] = v125;
      v115[1] = v126;
      v116 = v127;
      v117 = v128;
    }
    outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)v115);
LABEL_48:
    v83 = *((_QWORD *)&v138 + 1);
    v84 = v139;
    return outlined consume of DisplayList.Item.Value(v83, v84);
  }
  if ((v29 & 1) != 0)
  {
    swift_beginAccess();
    v36 = *((_QWORD *)&v138 + 1);
    v37 = v139;
    v115[0] = v136;
    v115[1] = v137;
    v116 = v138;
    v117 = v139;
    BYTE2(v118) = v141;
    LOWORD(v118) = v140;
    DWORD1(v118) = v142;
    outlined copy of DisplayList.Item.Value(*((uint64_t *)&v138 + 1), v139);
    DisplayList.ViewUpdater.updateItemView(container:from:localState:)(v100, v115, (uint64_t)&v125);
    outlined consume of DisplayList.Item.Value(v36, v37);
  }
  else
  {
    swift_beginAccess();
    v36 = *((_QWORD *)&v138 + 1);
    v38 = *((_QWORD *)&v139 + 1);
    v37 = v139;
    v39 = v140 | (v141 << 16);
    if ((unint64_t)v139 >> 62 == 1)
    {
      outlined copy of DisplayList.Effect(*((uint64_t *)&v138 + 1), v139, SBYTE4(v139));
      swift_bridgeObjectRetain();
      outlined consume of DisplayList.Effect(v36, v37, SBYTE4(v37));
      *(_QWORD *)&v115[0] = v38;
      WORD4(v115[0]) = v39;
      BYTE10(v115[0]) = BYTE2(v39);
      DisplayList.ViewUpdater.update(container:from:parentState:)(v100, v115, &v125);
      swift_bridgeObjectRelease();
    }
  }
  v122 = v133;
  v123 = v134;
  v124 = v135;
  v118 = v129;
  v119 = v130;
  v120 = v131;
  v121 = v132;
  v115[0] = v125;
  v115[1] = v126;
  v116 = v127;
  v117 = v128;
  outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)v115);
  v83 = v36;
  v84 = v37;
  return outlined consume of DisplayList.Item.Value(v83, v84);
}

uint64_t DisplayList.ViewUpdater.updateInheritedViewAsync(oldItem:oldParentState:newItem:newParentState:)@<X0>(__int128 *a1@<X0>, _OWORD *a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned __int8 v29;
  unsigned __int16 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  int v38;
  int v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  char v50;
  unsigned __int8 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  int v56;
  int v57;
  int v58;
  int v59;
  unint64_t v60;
  int v61;
  _QWORD *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  __int16 v66;
  char v67;
  _QWORD *v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  __int16 v89;
  uint64_t result;
  _QWORD *v91;
  uint64_t v92;
  __int128 v93;
  int v94;
  uint64_t v95;
  unint64_t v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char v106;
  unsigned int v107;
  __int16 v108;
  unsigned int v109;
  int v110;
  __int16 v111;
  char v112;
  _QWORD *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  Swift::Bool v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  Swift::Bool v136;
  uint64_t v137;
  int v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  _QWORD *v144;
  unint64_t v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  __int16 v158;
  char v159;
  uint64_t v160;
  _QWORD v161[3];
  __int16 v162;
  char v163;
  uint64_t v164;
  uint64_t v165[3];
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  unsigned __int16 v203;
  unsigned __int8 v204;
  int v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  unsigned __int16 v221;
  unsigned __int8 v222;
  int v223;
  _OWORD v224[2];
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  uint64_t v245;

  v144 = a5;
  v245 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for DisplayList.ArchiveIDs?();
  MEMORY[0x24BDAC7A8](v9);
  v142 = (uint64_t)&v137 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v141 = (uint64_t)&v137 - v12;
  v13 = *a1;
  v218 = a1[1];
  v14 = a2[1];
  v224[0] = *a2;
  v224[1] = v14;
  v15 = a2[3];
  v16 = a2[5];
  v227 = a2[4];
  v228 = v16;
  v17 = a2[3];
  v18 = *a2;
  v19 = a2[1];
  v225 = a2[2];
  v226 = v17;
  v20 = a2[9];
  v233 = a2[10];
  v21 = a2[7];
  v22 = a2[9];
  v231 = a2[8];
  v232 = v22;
  v23 = a2[5];
  v24 = a2[7];
  v229 = a2[6];
  v230 = v24;
  v214 = v231;
  v215 = v20;
  v216 = a2[10];
  v217 = v13;
  v25 = *((_QWORD *)a1 + 4);
  v26 = *((_QWORD *)a1 + 5);
  v28 = *((_QWORD *)a1 + 6);
  v27 = *((_QWORD *)a1 + 7);
  v29 = *((_BYTE *)a1 + 66);
  v30 = *((_WORD *)a1 + 32);
  v31 = *((_DWORD *)a1 + 17);
  v210 = v227;
  v211 = v23;
  v146 = *a3;
  v212 = v229;
  v213 = v21;
  v32 = *((_QWORD *)a3 + 2);
  v33 = *((_QWORD *)a3 + 3);
  v34 = *((_QWORD *)a3 + 4);
  v151 = *((_QWORD *)a3 + 5);
  v152 = v34;
  v35 = *((_QWORD *)a3 + 6);
  v149 = *((_QWORD *)a3 + 7);
  v150 = v35;
  LODWORD(v145) = *((unsigned __int8 *)a3 + 66);
  LODWORD(v147) = *((unsigned __int16 *)a3 + 32);
  LODWORD(v153) = v147 | ((_DWORD)v145 << 16);
  LODWORD(v148) = *((_DWORD *)a3 + 17);
  *(_QWORD *)&v219 = v25;
  *((_QWORD *)&v219 + 1) = v26;
  *(_QWORD *)&v220 = v28;
  *((_QWORD *)&v220 + 1) = v27;
  v222 = v29;
  v221 = v30;
  v223 = v31;
  v206 = v18;
  v207 = v19;
  v36 = v154;
  v208 = v225;
  v209 = v15;
  v143 = (_QWORD *)(v154 + 32);
  swift_beginAccess();
  v37 = *(_BYTE *)(v36 + 120);
  v234 = *(_OWORD *)(v36 + 104);
  LOBYTE(v235) = v37;
  outlined copy of DisplayList.Item.Value(v26, v28);
  outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)v224);
  specialized static DisplayList.ViewUpdater.Model.merge(item:index:into:)((uint64_t)&v217, (uint64_t)&v234, (uint64_t)&v206);
  v39 = v38;
  *(_QWORD *)&v200 = v32;
  *((_QWORD *)&v200 + 1) = v33;
  v40 = a4[6];
  v241 = a4[7];
  v41 = a4[7];
  v242 = a4[8];
  v42 = a4[8];
  v243 = a4[9];
  v43 = a4[9];
  v244 = a4[10];
  v44 = a4[2];
  v237 = a4[3];
  v45 = a4[3];
  v238 = a4[4];
  v46 = a4[4];
  v239 = a4[5];
  v47 = a4[5];
  v240 = a4[6];
  v48 = a4[1];
  v234 = *a4;
  v49 = *a4;
  v235 = a4[1];
  v236 = a4[2];
  v196 = v42;
  v197 = v43;
  v198 = a4[10];
  v199 = v146;
  v192 = v46;
  v193 = v47;
  v194 = v40;
  v195 = v41;
  LODWORD(v26) = v38;
  *(_QWORD *)&v201 = v152;
  *((_QWORD *)&v201 + 1) = v151;
  *(_QWORD *)&v202 = v150;
  *((_QWORD *)&v202 + 1) = v149;
  v204 = v145;
  v203 = v147;
  v205 = v148;
  v188 = v49;
  v189 = v48;
  v190 = v44;
  v191 = v45;
  v50 = *(_BYTE *)(v36 + 120);
  v152 = v36 + 104;
  v177 = *(_OWORD *)(v36 + 104);
  LOBYTE(v178) = v50;
  outlined copy of DisplayList.Item.Value(v151, v150);
  outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)&v234);
  specialized static DisplayList.ViewUpdater.Model.merge(item:index:into:)((uint64_t)&v199, (uint64_t)&v177, (uint64_t)&v188);
  if ((_DWORD)v26 != v51)
  {
    v174 = v196;
    v175 = v197;
    v176 = v198;
    v170 = v192;
    v171 = v193;
    v172 = v194;
    v173 = v195;
    v166 = v188;
    v167 = v189;
    v168 = v190;
    v169 = v191;
    outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)&v166);
    v185 = v214;
    v186 = v215;
    v187 = v216;
    v181 = v210;
    v182 = v211;
    v183 = v212;
    v184 = v213;
    v177 = v206;
    v178 = v207;
    v179 = v208;
    v180 = v209;
    outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)&v177);
    v68 = v144;
    *v144 = 0;
    *((_BYTE *)v68 + 8) = 1;
LABEL_54:
    outlined consume of DisplayList.Item.Value(*((uint64_t *)&v201 + 1), v202);
    v127 = *((_QWORD *)&v219 + 1);
    v128 = v220;
    return outlined consume of DisplayList.Item.Value(v127, v128);
  }
  if ((v39 & 2) == 0)
  {
    if ((v39 & 4) != 0)
      goto LABEL_13;
    swift_beginAccess();
    v52 = v199;
    v53 = v200;
    v54 = v201;
    v55 = v202;
    v56 = v204;
    v57 = v203;
    v58 = v205;
    v177 = v199;
    v178 = v200;
    v179 = v201;
    v180 = v202;
    BYTE2(v181) = v204;
    LOWORD(v181) = v203;
    DWORD1(v181) = v205;
    DisplayList.Item.features.getter();
    if ((v166 & 1) != 0)
    {
LABEL_13:
      if ((v39 & 1) != 0)
      {
        swift_beginAccess();
        v102 = *((_QWORD *)&v219 + 1);
        v103 = v220;
        LODWORD(v153) = v221 | (v222 << 16);
        v177 = v217;
        v178 = v218;
        v179 = v219;
        v180 = v220;
        BYTE2(v181) = v222;
        LOWORD(v181) = v221;
        DWORD1(v181) = v223;
        swift_beginAccess();
        v104 = *((_QWORD *)&v201 + 1);
        v105 = v202;
        v166 = v199;
        v167 = v200;
        v168 = v201;
        v169 = v202;
        BYTE2(v170) = v204;
        LOWORD(v170) = v203;
        DWORD1(v170) = v205;
        outlined copy of DisplayList.Item.Value(v102, v103);
        outlined copy of DisplayList.Item.Value(v104, v105);
        DisplayList.ViewUpdater.updateItemViewAsync(oldItem:oldState:newItem:newState:)((uint64_t)&v177, (uint64_t)&v206, (uint64_t)&v166, (uint64_t)&v188, (uint64_t)v144);
        outlined consume of DisplayList.Item.Value(v104, v105);
        outlined consume of DisplayList.Item.Value(v102, v103);
      }
      else
      {
        swift_beginAccess();
        v92 = *((_QWORD *)&v219 + 1);
        v93 = v220;
        v94 = v221 | (v222 << 16);
        swift_beginAccess();
        v95 = *((_QWORD *)&v201 + 1);
        v96 = v202;
        if ((unint64_t)v93 >> 62 == 1 && (v202 & 0xC000000000000000) == 0x4000000000000000)
        {
          *(_QWORD *)&v177 = *((_QWORD *)&v93 + 1);
          WORD4(v177) = v94;
          BYTE10(v177) = BYTE2(v94);
          *(_QWORD *)&v166 = *((_QWORD *)&v202 + 1);
          WORD4(v166) = v203;
          BYTE10(v166) = v204;
          outlined copy of DisplayList.Item.Value(v92, v93);
          outlined copy of DisplayList.Item.Value(v95, v96);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v153 = v95;
          DisplayList.ViewUpdater.updateAsync(oldList:oldParentState:newList:newParentState:)(v144, &v177, &v206, &v166, &v188);
          outlined consume of DisplayList.Item.Value(v92, v93);
          outlined consume of DisplayList.Item.Value(v153, v96);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          outlined copy of DisplayList.Item.Value(v92, v93);
          outlined copy of DisplayList.Item.Value(v95, v96);
          outlined consume of DisplayList.Item.Value(v92, v93);
          outlined consume of DisplayList.Item.Value(v95, v96);
          if (one-time initialization token for infinity != -1)
            swift_once();
          v113 = v144;
          *v144 = static Time.infinity;
          *((_BYTE *)v113 + 8) = 0;
        }
      }
    }
    else
    {
      v59 = v57 | (v56 << 16);
      swift_beginAccess();
      v60 = v220;
      v177 = v217;
      v178 = v218;
      v179 = v219;
      v153 = *((_QWORD *)&v220 + 1);
      v154 = *((_QWORD *)&v219 + 1);
      v180 = v220;
      LODWORD(v151) = v222;
      BYTE2(v181) = v222;
      LODWORD(v150) = v221;
      LOWORD(v181) = v221;
      DWORD1(v181) = v223;
      DisplayList.Item.features.getter();
      v61 = (unsigned __int16)v166;
      v177 = v52;
      v178 = v53;
      v179 = v54;
      v180 = v55;
      BYTE2(v181) = BYTE2(v59);
      LOWORD(v181) = v59;
      DWORD1(v181) = v58;
      DisplayList.Item.features.getter();
      if (v61 == LOWORD(v165[0]))
      {
        v62 = v144;
        if (v60 >> 62 == 1)
        {
          v63 = v60;
          v64 = HIDWORD(v60);
          v65 = v154;
          *(_QWORD *)&v177 = v153;
          WORD4(v177) = v150;
          BYTE10(v177) = (v150 | ((_DWORD)v151 << 16)) >> 16;
          outlined copy of DisplayList.Effect(v154, v63, v64);
          swift_bridgeObjectRetain();
          DisplayList.Index.skip(list:)((uint64_t *)&v177);
          swift_bridgeObjectRelease();
          swift_beginAccess();
          if (BYTE4(v63) == 1)
          {
            v129 = swift_projectBox();
            v130 = v142;
            outlined init with copy of DisplayList.ArchiveIDs?(v129, v142);
            v131 = type metadata accessor for DisplayList.ArchiveIDs();
            v132 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v131 - 8) + 48))(v130, 1, v131) != 1;
            DisplayList.Index.updateArchive(entering:)(v132);
            outlined destroy of DisplayList.ArchiveIDs?(v130);
          }
          else if (BYTE4(v63) == 7)
          {
            v66 = *(_WORD *)(v65 + 24);
            v67 = *(_BYTE *)(v65 + 26);
            *(_QWORD *)&v166 = *(_QWORD *)(v65 + 16);
            WORD4(v166) = v66;
            BYTE10(v166) = v67;
            DisplayList.Index.skip(list:)((uint64_t *)&v166);
          }
          swift_endAccess();
          outlined consume of DisplayList.Effect(v65, v63, v64);
        }
        if (one-time initialization token for infinity != -1)
          swift_once();
        *v62 = static Time.infinity;
        *((_BYTE *)v62 + 8) = 0;
      }
      else
      {
        v118 = v144;
        *v144 = 0;
        *((_BYTE *)v118 + 8) = 1;
      }
    }
    v174 = v196;
    v175 = v197;
    v176 = v198;
    v170 = v192;
    v171 = v193;
    v172 = v194;
    v173 = v195;
    v166 = v188;
    v167 = v189;
    v168 = v190;
    v169 = v191;
    outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)&v166);
    v185 = v214;
    v186 = v215;
    v187 = v216;
    v181 = v210;
    v182 = v211;
    v183 = v212;
    v184 = v213;
    v177 = v206;
    v178 = v207;
    v179 = v208;
    v180 = v209;
    outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)&v177);
    goto LABEL_54;
  }
  v139 = v39;
  v69 = v217;
  v70 = v218;
  v71 = *((_QWORD *)&v219 + 1);
  v147 = *((_QWORD *)&v220 + 1);
  v72 = v220;
  v148 = *((_QWORD *)&v219 + 1);
  LODWORD(v150) = v221 | (v222 << 16);
  v177 = v217;
  v178 = v218;
  v137 = v219;
  v179 = v219;
  v180 = v220;
  v145 = v220;
  BYTE2(v181) = v222;
  LOWORD(v181) = v221;
  v138 = v223;
  DWORD1(v181) = v223;
  v73 = v199;
  v74 = v200;
  v75 = *((_QWORD *)&v201 + 1);
  v76 = v202;
  LODWORD(v153) = v203 | (v204 << 16);
  v166 = v199;
  v167 = v200;
  v140 = v201;
  v168 = v201;
  v151 = *((_QWORD *)&v201 + 1);
  v169 = v202;
  BYTE2(v170) = v204;
  LOWORD(v170) = v203;
  LODWORD(v142) = v205;
  DWORD1(v170) = v205;
  v77 = v143;
  *(_QWORD *)&v146 = *v143;
  swift_beginAccess();
  v78 = v71;
  v79 = v72;
  v80 = v147;
  v81 = v150;
  outlined copy of DisplayList.Item.Value(v78, v79);
  outlined copy of DisplayList.Item.Value(v75, v76);
  v82 = (uint64_t)a2;
  v83 = v80;
  v84 = (uint64_t)a4;
  v85 = (uint64_t)v77;
  v86 = v148;
  v87 = v145;
  v88 = v151;
  specialized DisplayList.ViewUpdater.ViewCache.updateAsync(oldItem:oldState:newItem:newState:tag:updateView:)((unint64_t)&v177, v82, (uint64_t)&v166, v84, 1, v85, v146, &v155);
  swift_endAccess();
  v149 = v76;
  outlined consume of DisplayList.Item.Value(v88, v76);
  outlined consume of DisplayList.Item.Value(v86, v87);
  v89 = v158;
  if (v158 == 2)
  {
    v174 = v196;
    v175 = v197;
    v176 = v198;
    v170 = v192;
    v171 = v193;
    v172 = v194;
    v173 = v195;
    v166 = v188;
    v167 = v189;
    v168 = v190;
    v169 = v191;
    outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)&v166);
    v185 = v214;
    v186 = v215;
    v187 = v216;
    v181 = v210;
    v182 = v211;
    v183 = v212;
    v184 = v213;
    v177 = v206;
    v178 = v207;
    v179 = v208;
    v180 = v209;
    outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)&v177);
    outlined consume of DisplayList.Item.Value(v88, v149);
    result = outlined consume of DisplayList.Item.Value(v86, v87);
    v91 = v144;
    *v144 = 0;
    *((_BYTE *)v91 + 8) = 1;
    return result;
  }
  *(_QWORD *)&v146 = *((_QWORD *)&v76 + 1);
  v97 = v81;
  v98 = v160;
  v99 = v87;
  v100 = v87 >> 62;
  v161[0] = v155;
  v161[1] = v156;
  v161[2] = v157;
  v162 = v158 & 0x101;
  v163 = v159 & 1;
  v164 = v160;
  *(_BYTE *)(v154 + 184) &= v159 & 1;
  if ((v89 & 0x100) == 0)
  {
    v101 = v98;
    if ((_DWORD)v100 == 1)
    {
      outlined copy of DisplayList.Effect(v86, v87, SBYTE4(v87));
      swift_bridgeObjectRetain();
      outlined consume of DisplayList.Effect(v86, v87, SBYTE4(v87));
      v155 = v83;
      LOWORD(v156) = v97;
      BYTE2(v156) = BYTE2(v97);
      DisplayList.Index.skip(list:)(&v155);
      v174 = v196;
      v175 = v197;
      v176 = v198;
      v170 = v192;
      v171 = v193;
      v172 = v194;
      v173 = v195;
      v166 = v188;
      v167 = v189;
      v168 = v190;
      v169 = v191;
      outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)&v166);
      v185 = v214;
      v186 = v215;
      v187 = v216;
      v181 = v210;
      v182 = v211;
      v183 = v212;
      v184 = v213;
      v177 = v206;
      v178 = v207;
      v179 = v208;
      v180 = v209;
      outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)&v177);
      swift_bridgeObjectRelease();
    }
    else
    {
      v174 = v196;
      v175 = v197;
      v176 = v198;
      v170 = v192;
      v171 = v193;
      v172 = v194;
      v173 = v195;
      v166 = v188;
      v167 = v189;
      v168 = v190;
      v169 = v191;
      outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)&v166);
      v185 = v214;
      v186 = v215;
      v187 = v216;
      v181 = v210;
      v182 = v211;
      v183 = v212;
      v184 = v213;
      v177 = v206;
      v178 = v207;
      v179 = v208;
      v180 = v209;
      outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)&v177);
    }
    v119 = v144;
    goto LABEL_46;
  }
  v106 = v139;
  if ((v139 & 4) != 0)
    goto LABEL_31;
  v177 = v73;
  v178 = v74;
  *(_QWORD *)&v179 = v140;
  *((_QWORD *)&v179 + 1) = v151;
  *(_QWORD *)&v180 = v149;
  *((_QWORD *)&v180 + 1) = v146;
  v107 = WORD1(v153);
  BYTE2(v181) = BYTE2(v153);
  LOWORD(v181) = v153;
  DWORD1(v181) = v142;
  DisplayList.Item.features.getter();
  if ((v166 & 1) != 0)
  {
LABEL_31:
    if ((v106 & 1) != 0)
    {
      v177 = v69;
      v178 = v70;
      *(_QWORD *)&v179 = v137;
      *((_QWORD *)&v179 + 1) = v86;
      *(_QWORD *)&v180 = v87;
      *((_QWORD *)&v180 + 1) = v83;
      LOWORD(v181) = v97;
      BYTE2(v181) = BYTE2(v97);
      DWORD1(v181) = v138;
      v166 = v73;
      v167 = v74;
      v120 = v86;
      v121 = v151;
      *(_QWORD *)&v168 = v140;
      *((_QWORD *)&v168 + 1) = v151;
      v114 = v149;
      *(_QWORD *)&v169 = v149;
      *((_QWORD *)&v169 + 1) = v146;
      BYTE2(v170) = BYTE2(v153);
      LOWORD(v170) = v153;
      DWORD1(v170) = v142;
      outlined copy of DisplayList.Item.Value(v120, v87);
      outlined copy of DisplayList.Item.Value(v121, v114);
      DisplayList.ViewUpdater.updateItemViewAsync(oldItem:oldState:newItem:newState:)((uint64_t)&v177, (uint64_t)&v206, (uint64_t)&v166, (uint64_t)&v188, (uint64_t)&v155);
      v122 = v121;
      v86 = v148;
      outlined consume of DisplayList.Item.Value(v122, v114);
      outlined consume of DisplayList.Item.Value(v86, v87);
    }
    else
    {
      v114 = v149;
      if ((_DWORD)v100 != 1 || (v149 & 0xC000000000000000) != 0x4000000000000000)
      {
        outlined copy of DisplayList.Item.Value(v86, v87);
        v123 = v151;
        outlined copy of DisplayList.Item.Value(v151, v114);
        outlined consume of DisplayList.Item.Value(v86, v87);
        outlined consume of DisplayList.Item.Value(v123, v114);
        v119 = v144;
        if (one-time initialization token for infinity == -1)
        {
LABEL_41:
          v155 = static Time.infinity;
          LOBYTE(v156) = 0;
          goto LABEL_43;
        }
LABEL_59:
        swift_once();
        goto LABEL_41;
      }
      *(_QWORD *)&v177 = v83;
      WORD4(v177) = v97;
      BYTE10(v177) = BYTE2(v97);
      *(_QWORD *)&v166 = v146;
      WORD4(v166) = v153;
      BYTE10(v166) = BYTE2(v153);
      v115 = v86;
      outlined copy of DisplayList.Item.Value(v86, v87);
      v116 = v151;
      outlined copy of DisplayList.Item.Value(v151, v149);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      DisplayList.ViewUpdater.updateAsync(oldList:oldParentState:newList:newParentState:)(&v155, &v177, &v206, &v166, &v188);
      outlined consume of DisplayList.Item.Value(v115, v87);
      v117 = v116;
      v86 = v115;
      v114 = v149;
      outlined consume of DisplayList.Item.Value(v117, v149);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v119 = v144;
    goto LABEL_43;
  }
  v177 = v69;
  v178 = v70;
  *(_QWORD *)&v179 = v137;
  *((_QWORD *)&v179 + 1) = v86;
  *(_QWORD *)&v180 = v87;
  *((_QWORD *)&v180 + 1) = v83;
  v108 = v97;
  v109 = HIWORD(v97);
  BYTE2(v181) = v109;
  LOWORD(v181) = v108;
  DWORD1(v181) = v138;
  DisplayList.Item.features.getter();
  v110 = (unsigned __int16)v166;
  v177 = v73;
  v178 = v74;
  *(_QWORD *)&v179 = v140;
  *((_QWORD *)&v179 + 1) = v151;
  *(_QWORD *)&v180 = v149;
  *((_QWORD *)&v180 + 1) = v146;
  BYTE2(v181) = v107;
  LOWORD(v181) = v153;
  DWORD1(v181) = v142;
  DisplayList.Item.features.getter();
  if (v110 == LOWORD(v165[0]))
  {
    if ((_DWORD)v100 == 1)
    {
      *(_QWORD *)&v177 = v83;
      WORD4(v177) = v150;
      BYTE10(v177) = v109;
      outlined copy of DisplayList.Effect(v86, v87, SBYTE4(v87));
      swift_bridgeObjectRetain();
      DisplayList.Index.skip(list:)((uint64_t *)&v177);
      swift_bridgeObjectRelease();
      swift_beginAccess();
      if (BYTE4(v87) == 1)
      {
        v133 = swift_projectBox();
        v134 = v141;
        outlined init with copy of DisplayList.ArchiveIDs?(v133, v141);
        v135 = type metadata accessor for DisplayList.ArchiveIDs();
        v136 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v135 - 8) + 48))(v134, 1, v135) != 1;
        DisplayList.Index.updateArchive(entering:)(v136);
        outlined destroy of DisplayList.ArchiveIDs?(v134);
      }
      else if (BYTE4(v87) == 7)
      {
        v111 = *(_WORD *)(v86 + 24);
        v112 = *(_BYTE *)(v86 + 26);
        *(_QWORD *)&v166 = *(_QWORD *)(v86 + 16);
        WORD4(v166) = v111;
        BYTE10(v166) = v112;
        DisplayList.Index.skip(list:)((uint64_t *)&v166);
      }
      swift_endAccess();
      outlined consume of DisplayList.Effect(v86, v87, SBYTE4(v87));
    }
    v119 = v144;
    v114 = v149;
    if (one-time initialization token for infinity == -1)
      goto LABEL_41;
    goto LABEL_59;
  }
  v155 = 0;
  LOBYTE(v156) = 1;
  v119 = v144;
  v114 = v149;
LABEL_43:
  v124 = v155;
  if ((v156 & 1) == 0)
  {
    v165[0] = v155;
    swift_beginAccess();
    DisplayList.ViewUpdater.ViewCache.setNextUpdate(_:in:)((unint64_t)v165, (uint64_t)v161);
    swift_endAccess();
    v174 = v196;
    v175 = v197;
    v176 = v198;
    v170 = v192;
    v171 = v193;
    v172 = v194;
    v173 = v195;
    v166 = v188;
    v167 = v189;
    v168 = v190;
    v169 = v191;
    outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)&v166);
    v185 = v214;
    v186 = v215;
    v187 = v216;
    v181 = v210;
    v182 = v211;
    v183 = v212;
    v184 = v213;
    v177 = v206;
    v178 = v207;
    v179 = v208;
    v180 = v209;
    outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)&v177);
    v101 = v164;
LABEL_46:
    *v119 = v101;
    *((_BYTE *)v119 + 8) = 0;
    v125 = v151;
    v126 = v149;
    goto LABEL_47;
  }
  v174 = v196;
  v175 = v197;
  v176 = v198;
  v170 = v192;
  v171 = v193;
  v172 = v194;
  v173 = v195;
  v166 = v188;
  v167 = v189;
  v168 = v190;
  v169 = v191;
  outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)&v166);
  v185 = v214;
  v186 = v215;
  v187 = v216;
  v181 = v210;
  v182 = v211;
  v183 = v212;
  v184 = v213;
  v177 = v206;
  v178 = v207;
  v179 = v208;
  v180 = v209;
  outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)&v177);
  *v119 = v124;
  *((_BYTE *)v119 + 8) = 1;
  v125 = v151;
  v126 = v114;
LABEL_47:
  outlined consume of DisplayList.Item.Value(v125, v126);
  v127 = v86;
  v128 = v99;
  return outlined consume of DisplayList.Item.Value(v127, v128);
}

uint64_t DisplayList.ViewUpdater.updateItemView(container:from:localState:)(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  int v13;
  __int128 v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  double v20;
  uint64_t v21;
  double v22;
  __int16 v23;
  char v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  double v29;
  void *v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  __int16 v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  double v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  id v52;
  double v53;
  uint64_t v54;
  double v55;
  void *v56;
  uint64_t v57;
  _DWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char v63;
  __int16 v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  double v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  uint64_t v73;
  double v74;
  void *v76;
  void *v77;
  unint64_t v78;
  char v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  int v88;
  char v89;
  char v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  double v96;
  uint64_t v97;
  void *v98;
  double v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  __int16 v107;
  char v108;
  int v109;
  void *v110;
  uint64_t v111;
  void *v112;
  double v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  __int16 v121;
  char v122;
  int v123;
  void *v124[5];
  char v125;
  char v126;
  double v127;

  v4 = v3;
  v7 = *((_QWORD *)a2 + 4);
  v8 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)a2 + 6);
  v9 = *((_QWORD *)a2 + 7);
  v11 = *((unsigned __int8 *)a2 + 66);
  v12 = *((unsigned __int16 *)a2 + 32);
  v13 = *((_DWORD *)a2 + 17);
  v14 = a2[1];
  v115 = *a2;
  v116 = v14;
  v117 = v7;
  v118 = v8;
  v81 = v9;
  v82 = v8;
  v119 = v10;
  v120 = v9;
  v92 = v11;
  v122 = v11;
  v121 = v12;
  v123 = v13;
  v15 = (_QWORD *)(v3 + 32);
  v16 = *(_QWORD *)(a1 + 16);
  swift_beginAccess();
  v17 = *(_QWORD *)(v3 + 32);
  *(_QWORD *)(swift_allocObject() + 16) = v17;
  *(_QWORD *)(swift_allocObject() + 16) = v17;
  swift_beginAccess();
  v84 = a3;
  DisplayList.ViewUpdater.ViewCache.update(item:state:tag:in:makeView:updateView:)((uint64_t *)&v115, a3, 0, v16, (void (*)(__int128 *__return_ptr, id *, __int128 *, uint64_t))partial apply for implicit closure #2 in implicit closure #1 in DisplayList.ViewUpdater.updateItemView(container:from:localState:), (void (*)(id *, __int128 *, __int128 *, uint64_t))partial apply for implicit closure #4 in implicit closure #3 in DisplayList.ViewUpdater.updateItemView(container:from:localState:), (uint64_t)v124);
  swift_endAccess();
  swift_release();
  v18 = v10;
  swift_release();
  v94 = v4;
  *(_BYTE *)(v4 + 184) &= v126 & 1;
  v19 = v124[0];
  v20 = v127;
  v21 = *(_QWORD *)(a1 + 32);
  CoreViewAddSubview(*(_DWORD *)(a1 + 8) & 3, *(void **)a1, v124[0], v21);
  *(_QWORD *)(a1 + 32) = v21 + 1;
  v22 = *(double *)(a1 + 24);
  if (v20 < v22)
    v22 = v20;
  *(double *)(a1 + 24) = v22;
  if (v18 >> 62 != 1)
    goto LABEL_52;
  if ((v125 & 1) == 0 && (*(_BYTE *)(v4 + 185) & 1) != 0)
  {
    *(_QWORD *)&v115 = v81;
    WORD4(v115) = v12;
    BYTE10(v115) = (v12 | (v92 << 16)) >> 16;
    outlined copy of DisplayList.Item.Value(v82, v18);
    DisplayList.Index.skip(list:)((uint64_t *)&v115);
    swift_bridgeObjectRelease();
    if (BYTE4(v18) == 7)
    {
      v23 = *(_WORD *)(v82 + 24);
      v24 = *(_BYTE *)(v82 + 26);
      *(_QWORD *)&v115 = *(_QWORD *)(v82 + 16);
      WORD4(v115) = v23;
      BYTE10(v115) = v24;
      swift_bridgeObjectRetain();
      DisplayList.Index.skip(list:)((uint64_t *)&v115);
      outlined consume of DisplayList.Effect(v82, v18, 7);
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined consume of DisplayList.Effect(v82, v18, SBYTE4(v18));
    }
LABEL_52:
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  outlined copy of DisplayList.Item.Value(v82, v18);
  DisplayList.ViewUpdater.Model.State.reset()();
  v25 = *v15;
  v27 = v124[1];
  v26 = v124[2];
  v28 = one-time initialization token for infinity;
  swift_unknownObjectRetain();
  if (v28 != -1)
    swift_once();
  v80 = HIDWORD(v18);
  v29 = *(double *)&static Time.infinity;
  v110 = v27;
  v111 = v25;
  v112 = v26;
  v113 = *(double *)&static Time.infinity;
  v114 = 0;
  v30 = v26;
  v31 = *(_QWORD *)(v81 + 16);
  v83 = v15;
  v77 = v30;
  if (v31)
  {
    v76 = v19;
    v78 = v18;
    v32 = (_DWORD *)(swift_bridgeObjectRetain() + 100);
    do
    {
      v33 = *(_QWORD *)(v32 - 9);
      v34 = *(_QWORD *)(v32 - 7);
      v35 = *(_QWORD *)(v32 - 5);
      v36 = *(_QWORD *)(v32 - 3);
      v37 = *((_BYTE *)v32 - 2);
      v38 = *((_WORD *)v32 - 2);
      v39 = *v32;
      v115 = *(_OWORD *)(v32 - 17);
      v116 = *(_OWORD *)(v32 - 13);
      v117 = v33;
      v118 = v34;
      v119 = v35;
      v120 = v36;
      v122 = v37;
      v121 = v38;
      v123 = v39;
      swift_beginAccess();
      if (v39)
      {
        v40 = v94;
        v85 = *(_DWORD *)(v94 + 108);
        v87 = *(_DWORD *)(v94 + 104);
        v41 = *(_QWORD *)(v94 + 112);
        v89 = *(_BYTE *)(v94 + 120);
        v42 = 1;
        *(_DWORD *)(v94 + 104) = v39;
        *(_DWORD *)(v94 + 108) = 0;
      }
      else
      {
        v42 = 0;
        v40 = v94;
        v85 = *(_DWORD *)(v94 + 108) + 1;
        v87 = *(_DWORD *)(v94 + 104);
        *(_DWORD *)(v94 + 108) = v85;
        v41 = *(_QWORD *)(v94 + 112);
        v89 = *(_BYTE *)(v94 + 120);
      }
      *(_BYTE *)(v40 + 120) = v42;
      outlined copy of DisplayList.Item.Value(v34, v35);
      outlined copy of DisplayList.Item.Value(v34, v35);
      DisplayList.ViewUpdater.ViewCache.prepare(item:parentState:)((uint64_t)&v115, v84, (uint64_t *)&v96);
      swift_endAccess();
      v43 = v96;
      if (v96 >= v113)
        v43 = v113;
      v113 = v43;
      v44 = v118;
      v45 = v119;
      v101 = v115;
      v102 = v116;
      v103 = v117;
      v104 = v118;
      v105 = v119;
      v106 = v120;
      v108 = v122;
      v107 = v121;
      v109 = v123;
      outlined copy of DisplayList.Item.Value(v118, v119);
      DisplayList.ViewUpdater.updateInheritedView(container:from:parentState:)(&v110, &v101, v84);
      outlined consume of DisplayList.Item.Value(v44, v45);
      v46 = *(_BYTE *)(v94 + 120);
      if ((v46 & 0xC) != 0)
      {
        v47 = *(_QWORD *)(v94 + 104);
        if ((*(_BYTE *)(v94 + 120) & 4) != 0)
          *(_QWORD *)(v94 + 104) = *(_QWORD *)(v94 + 112);
        if ((v46 & 8) != 0)
          *(_QWORD *)(v94 + 112) = v47;
      }
      if ((v46 & 1) != 0)
      {
        *(_DWORD *)(v94 + 104) = v87;
        *(_DWORD *)(v94 + 108) = v85;
      }
      if ((v46 & 2) != 0)
        *(_QWORD *)(v94 + 112) = v41;
      v32 += 18;
      *(_BYTE *)(v94 + 120) = v89;
      outlined consume of DisplayList.Item.Value(v34, v35);
      outlined consume of DisplayList.Item.Value(v44, v45);
      --v31;
      v15 = v83;
    }
    while (v31);
    swift_bridgeObjectRelease();
    v27 = v110;
    v25 = v111;
    v30 = v112;
    v29 = v113;
    v48 = v114;
    v18 = v78;
    v19 = v76;
  }
  else
  {
    v48 = 0;
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)&v115 = v27;
  *((_QWORD *)&v115 + 1) = v25;
  *(_QWORD *)&v116 = v30;
  *((double *)&v116 + 1) = v29;
  v117 = v48;
  swift_beginAccess();
  swift_unknownObjectRetain();
  DisplayList.ViewUpdater.Container.removeRemaining(viewCache:)((uint64_t)v15);
  swift_endAccess();
  swift_unknownObjectRelease();
  if (BYTE4(v18) == 7)
  {
    v49 = v82;
    v50 = *(_QWORD *)(v82 + 16);
    v51 = *(_DWORD *)v15;
    swift_bridgeObjectRetain();
    v52 = (id)CoreViewMaskView(v51 & 3, v19);
    if (*(double *)&v52 == 0.0)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v53 = *(double *)&v52;
      v54 = *v15;
      v55 = *(double *)&static Time.infinity;
      v96 = *(double *)&v52;
      v97 = v54;
      v56 = v77;
      v98 = v77;
      v99 = *(double *)&static Time.infinity;
      v100 = 0;
      v57 = *(_QWORD *)(v50 + 16);
      if (v57)
      {
        v79 = v18;
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        v58 = (_DWORD *)(v50 + 100);
        do
        {
          v59 = *(_QWORD *)(v58 - 9);
          v60 = *(_QWORD *)(v58 - 7);
          v61 = *(_QWORD *)(v58 - 5);
          v62 = *(_QWORD *)(v58 - 3);
          v63 = *((_BYTE *)v58 - 2);
          v64 = *((_WORD *)v58 - 2);
          v65 = *v58;
          v115 = *(_OWORD *)(v58 - 17);
          v116 = *(_OWORD *)(v58 - 13);
          v117 = v59;
          v118 = v60;
          v119 = v61;
          v120 = v62;
          v122 = v63;
          v121 = v64;
          v123 = v65;
          swift_beginAccess();
          v93 = v57;
          if (v65)
          {
            v66 = v94;
            v86 = *(_DWORD *)(v94 + 108);
            v88 = *(_DWORD *)(v94 + 104);
            v67 = *(_QWORD *)(v94 + 112);
            v90 = *(_BYTE *)(v94 + 120);
            v68 = 1;
            *(_DWORD *)(v94 + 104) = v65;
            *(_DWORD *)(v94 + 108) = 0;
          }
          else
          {
            v68 = 0;
            v66 = v94;
            v86 = *(_DWORD *)(v94 + 108) + 1;
            v88 = *(_DWORD *)(v94 + 104);
            *(_DWORD *)(v94 + 108) = v86;
            v67 = *(_QWORD *)(v94 + 112);
            v90 = *(_BYTE *)(v94 + 120);
          }
          *(_BYTE *)(v66 + 120) = v68;
          outlined copy of DisplayList.Item.Value(v60, v61);
          v91 = v60;
          outlined copy of DisplayList.Item.Value(v60, v61);
          DisplayList.ViewUpdater.ViewCache.prepare(item:parentState:)((uint64_t)&v115, v84, (uint64_t *)&v95);
          swift_endAccess();
          v69 = v95;
          if (v95 >= v99)
            v69 = v99;
          v99 = v69;
          v70 = v118;
          v71 = v119;
          v101 = v115;
          v102 = v116;
          v103 = v117;
          v104 = v118;
          v105 = v119;
          v106 = v120;
          v108 = v122;
          v107 = v121;
          v109 = v123;
          outlined copy of DisplayList.Item.Value(v118, v119);
          DisplayList.ViewUpdater.updateInheritedView(container:from:parentState:)(&v96, &v101, v84);
          outlined consume of DisplayList.Item.Value(v70, v71);
          v72 = *(_BYTE *)(v94 + 120);
          if ((v72 & 0xC) != 0)
          {
            v73 = *(_QWORD *)(v94 + 104);
            if ((*(_BYTE *)(v94 + 120) & 4) != 0)
              *(_QWORD *)(v94 + 104) = *(_QWORD *)(v94 + 112);
            if ((v72 & 8) != 0)
              *(_QWORD *)(v94 + 112) = v73;
          }
          if ((v72 & 1) != 0)
          {
            *(_DWORD *)(v94 + 104) = v88;
            *(_DWORD *)(v94 + 108) = v86;
          }
          if ((v72 & 2) != 0)
            *(_QWORD *)(v94 + 112) = v67;
          v58 += 18;
          *(_BYTE *)(v94 + 120) = v90;
          outlined consume of DisplayList.Item.Value(v91, v61);
          outlined consume of DisplayList.Item.Value(v70, v71);
          --v57;
          v15 = v83;
        }
        while (v93 != 1);
        swift_bridgeObjectRelease();
        v74 = v96;
        v54 = v97;
        v56 = v98;
        v55 = v99;
        v57 = v100;
        LOBYTE(v18) = v79;
        v49 = v82;
      }
      else
      {
        swift_unknownObjectRetain();
        v74 = v53;
      }
      swift_bridgeObjectRelease();
      *(double *)&v115 = v74;
      *((_QWORD *)&v115 + 1) = v54;
      *(_QWORD *)&v116 = v56;
      *((double *)&v116 + 1) = v55;
      v117 = v57;
      swift_beginAccess();
      swift_unknownObjectRetain();
      DisplayList.ViewUpdater.Container.removeRemaining(viewCache:)((uint64_t)v15);
      swift_endAccess();
      swift_unknownObjectRelease_n();
      swift_unknownObjectRelease();
      if (v55 < v29)
        v29 = v55;
    }
  }
  else
  {
    v49 = v82;
  }
  *(double *)&v101 = v29;
  swift_beginAccess();
  DisplayList.ViewUpdater.ViewCache.setNextUpdate(_:in:)((unint64_t)&v101, (uint64_t)v124);
  swift_endAccess();
  outlined consume of DisplayList.Effect(v49, v18, v80);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

void implicit closure #3 in implicit closure #2 in DisplayList.ViewUpdater.updateInheritedView(container:from:parentState:)(double *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  double v7;
  uint64_t v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  char v14;
  int v15;
  __int128 v16;
  __int128 v17;
  double v18;
  double v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  char v24;
  int v25;
  uint64_t v26;

  v7 = *a1;
  v8 = *((_QWORD *)a1 + 1);
  v9 = a1[2];
  v10 = a1[3];
  v16 = *((_OWORD *)a1 + 2);
  v11 = *((_QWORD *)a1 + 6);
  v12 = *((_QWORD *)a1 + 7);
  v13 = *((_WORD *)a1 + 32);
  v14 = *((_BYTE *)a1 + 66);
  v15 = *((_DWORD *)a1 + 17);
  *(_QWORD *)&v17 = a3;
  LOBYTE(v26) = 0;
  DisplayList.ViewUpdater.ViewInfo.init(platform:kind:)((uint64_t *)&v17, (__int8 *)&v26, a4);
  v26 = a3;
  *(double *)&v17 = v7;
  *((_QWORD *)&v17 + 1) = v8;
  v18 = v9;
  v19 = v10;
  v20 = v16;
  v21 = v11;
  v22 = v12;
  v24 = v14;
  v23 = v13;
  v25 = v15;
  DisplayList.ViewUpdater.Platform.updateState(_:item:size:state:)(a4, &v17, a2, v9, v10);
}

void implicit closure #5 in implicit closure #4 in DisplayList.ViewUpdater.updateInheritedView(container:from:parentState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double v5;
  double v6;
  __int16 v7;
  char v8;
  int v9;
  __int128 v10;
  __int128 v11;
  double v12;
  double v13;
  __int128 v14;
  __int128 v15;
  __int16 v16;
  char v17;
  int v18;
  uint64_t v19;

  v5 = *(double *)(a3 + 16);
  v6 = *(double *)(a3 + 24);
  v7 = *(_WORD *)(a3 + 64);
  v8 = *(_BYTE *)(a3 + 66);
  v9 = *(_DWORD *)(a3 + 68);
  v19 = a5;
  v11 = *(_OWORD *)a3;
  v12 = v5;
  v13 = v6;
  v10 = *(_OWORD *)(a3 + 48);
  v14 = *(_OWORD *)(a3 + 32);
  v15 = v10;
  v17 = v8;
  v16 = v7;
  v18 = v9;
  DisplayList.ViewUpdater.Platform.updateState(_:item:size:state:)(a1, &v11, a4, v5, v6);
}

uint64_t DisplayList.ViewUpdater.updateItemViewAsync(oldItem:oldState:newItem:newState:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  __int16 v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  double v43;
  char v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  char v48;
  double v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  char v54;
  int v55;
  int v56;
  unint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  unint64_t v63;
  uint64_t v64;
  _OWORD v66[2];
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  __int16 v71;
  char v72;
  int v73;
  _OWORD v74[2];
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  __int16 v79;
  char v80;
  int v81;
  double v82;
  uint64_t v83;
  uint64_t v84;
  __int16 v85;
  char v86;
  uint64_t v87;
  _QWORD v88[3];
  __int16 v89;
  char v90;
  uint64_t v91;

  v6 = v5;
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(unsigned __int8 *)(a1 + 66);
  v14 = *(unsigned __int16 *)(a1 + 64);
  v15 = *(_DWORD *)(a1 + 68);
  v16 = *(_QWORD *)(a3 + 32);
  v17 = *(_QWORD *)(a3 + 40);
  v18 = *(_QWORD *)(a3 + 48);
  v19 = *(_QWORD *)(a3 + 56);
  v20 = *(unsigned __int8 *)(a3 + 66);
  v21 = *(unsigned __int16 *)(a3 + 64);
  v22 = *(_DWORD *)(a3 + 68);
  v23 = *(_OWORD *)(a1 + 16);
  v74[0] = *(_OWORD *)a1;
  v74[1] = v23;
  v75 = v9;
  v76 = v10;
  v63 = v11;
  v64 = v10;
  v77 = v11;
  v78 = v12;
  v61 = v13;
  v80 = v13;
  v58 = v14;
  v79 = v14;
  v81 = v15;
  v24 = *(_OWORD *)(a3 + 16);
  v66[0] = *(_OWORD *)a3;
  v66[1] = v24;
  v67 = v16;
  v68 = v17;
  v69 = v18;
  v70 = v19;
  v56 = v20;
  v72 = v20;
  v55 = v21;
  v71 = v21;
  v25 = v5 + 32;
  v73 = v22;
  swift_beginAccess();
  v26 = *(_QWORD *)(v5 + 32);
  swift_beginAccess();
  specialized DisplayList.ViewUpdater.ViewCache.updateAsync(oldItem:oldState:newItem:newState:tag:updateView:)((unint64_t)v74, a2, (uint64_t)v66, a4, 0, v25, v26, &v82);
  result = swift_endAccess();
  v28 = v85;
  if (v85 == 2)
  {
    *(_QWORD *)a5 = 0;
    *(_BYTE *)(a5 + 8) = 1;
    return result;
  }
  v29 = v17;
  v30 = v87;
  v31 = v58 | (v61 << 16);
  *(double *)v88 = v82;
  v88[1] = v83;
  v88[2] = v84;
  v89 = v85 & 0x101;
  v90 = v86 & 1;
  v32 = v86 & 1 & *(_BYTE *)(v6 + 184);
  v91 = v87;
  *(_BYTE *)(v6 + 184) = v32;
  if (v63 >> 62 != 1)
  {
    v60 = v30;
    outlined copy of DisplayList.Item.Value(v64, v63);
    outlined copy of DisplayList.Item.Value(v17, v18);
    outlined consume of DisplayList.Item.Value(v64, v63);
    result = outlined consume of DisplayList.Item.Value(v17, v18);
    v39 = v60;
LABEL_11:
    v41 = a5;
LABEL_12:
    *(_QWORD *)v41 = v39;
    *(_BYTE *)(v41 + 8) = 0;
    return result;
  }
  v33 = v6;
  v62 = v55 | (v56 << 16);
  v34 = v18;
  if (v18 >> 62 != 1)
  {
    v40 = v30;
    outlined copy of DisplayList.Item.Value(v64, v63);
    outlined copy of DisplayList.Item.Value(v17, v18);
    outlined consume of DisplayList.Item.Value(v64, v63);
    result = outlined consume of DisplayList.Item.Value(v17, v18);
    v39 = v40;
    goto LABEL_11;
  }
  v57 = HIDWORD(v18);
  if ((v28 & 0x100) == 0 && (*(_BYTE *)(v33 + 185) & 1) != 0)
  {
    v59 = v30;
    if (BYTE4(v63) == 7)
    {
      v35 = *(_WORD *)(v64 + 24);
      v36 = *(_BYTE *)(v64 + 26);
      *(_QWORD *)&v74[0] = *(_QWORD *)(v64 + 16);
      WORD4(v74[0]) = v35;
      BYTE10(v74[0]) = v36;
      v37 = v12;
      outlined copy of DisplayList.Item.Value(v64, v63);
      v38 = v17;
      outlined copy of DisplayList.Item.Value(v17, v34);
      outlined copy of DisplayList.Effect(v64, v63, 7);
      outlined copy of DisplayList.Effect(v17, v34, v57);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      DisplayList.Index.skip(list:)((uint64_t *)v74);
      swift_bridgeObjectRelease();
    }
    else
    {
      v37 = v12;
      outlined copy of DisplayList.Item.Value(v64, v63);
      v38 = v17;
      outlined copy of DisplayList.Item.Value(v17, v34);
      outlined copy of DisplayList.Effect(v64, v63, SBYTE4(v63));
      outlined copy of DisplayList.Effect(v17, v34, v57);
      swift_bridgeObjectRetain();
    }
    v41 = a5;
    *(_QWORD *)&v74[0] = v37;
    WORD4(v74[0]) = v31;
    BYTE10(v74[0]) = BYTE2(v31);
    DisplayList.Index.skip(list:)((uint64_t *)v74);
    outlined consume of DisplayList.Effect(v64, v63, SBYTE4(v63));
    outlined consume of DisplayList.Effect(v38, v34, v57);
    outlined consume of DisplayList.Item.Value(v64, v63);
    outlined consume of DisplayList.Item.Value(v38, v34);
    result = swift_bridgeObjectRelease();
    v39 = v59;
    goto LABEL_12;
  }
  outlined copy of DisplayList.Item.Value(v64, v63);
  outlined copy of DisplayList.Item.Value(v17, v18);
  outlined copy of DisplayList.Effect(v64, v63, SBYTE4(v63));
  outlined copy of DisplayList.Effect(v17, v18, SBYTE4(v18));
  swift_bridgeObjectRetain();
  DisplayList.ViewUpdater.Model.State.reset()();
  DisplayList.ViewUpdater.Model.State.reset()();
  *(_QWORD *)&v74[0] = v12;
  WORD4(v74[0]) = v31;
  BYTE10(v74[0]) = BYTE2(v31);
  *(_QWORD *)&v66[0] = v19;
  WORD4(v66[0]) = v62;
  BYTE10(v66[0]) = BYTE2(v62);
  DisplayList.ViewUpdater.updateAsync(oldList:oldParentState:newList:newParentState:)(&v82, v74, a2, v66, a4);
  swift_bridgeObjectRelease();
  v42 = v82;
  if ((v83 & 1) == 0)
  {
    v43 = v82;
    if (BYTE4(v63) == 7)
    {
      if (BYTE4(v18) == 7)
      {
        v44 = *(_BYTE *)(v64 + 26);
        v45 = *(_WORD *)(v64 + 24);
        v46 = *(_QWORD *)(v17 + 16);
        v47 = *(_WORD *)(v17 + 24);
        v48 = *(_BYTE *)(v17 + 26);
        *(_QWORD *)&v74[0] = *(_QWORD *)(v64 + 16);
        WORD4(v74[0]) = v45;
        BYTE10(v74[0]) = v44;
        *(_QWORD *)&v66[0] = v46;
        WORD4(v66[0]) = v47;
        BYTE10(v66[0]) = v48;
        outlined copy of DisplayList.Effect(v64, v63, 7);
        outlined copy of DisplayList.Effect(v17, v18, 7);
        DisplayList.ViewUpdater.updateAsync(oldList:oldParentState:newList:newParentState:)(&v82, v74, a2, v66, a4);
        v49 = v82;
        v41 = a5;
        if ((v83 & 1) != 0)
        {
          outlined consume of DisplayList.Effect(v64, v63, 7);
          outlined consume of DisplayList.Effect(v29, v18, 7);
          outlined consume of DisplayList.Item.Value(v64, v63);
          outlined consume of DisplayList.Item.Value(v29, v18);
          outlined consume of DisplayList.Effect(v64, v63, 7);
          result = outlined consume of DisplayList.Effect(v29, v18, 7);
          *(double *)a5 = v49;
          goto LABEL_15;
        }
        outlined consume of DisplayList.Effect(v64, v63, 7);
        outlined consume of DisplayList.Effect(v29, v18, 7);
        if (v49 < v43)
          v43 = v49;
        v50 = v64;
        v51 = BYTE4(v18);
        goto LABEL_25;
      }
      v50 = v64;
      outlined copy of DisplayList.Effect(v64, v63, 7);
      v51 = BYTE4(v18);
      outlined copy of DisplayList.Effect(v17, v18, SBYTE4(v18));
      v52 = v64;
      v53 = v63;
      v54 = 7;
    }
    else
    {
      v50 = v64;
      outlined copy of DisplayList.Effect(v64, v63, SBYTE4(v63));
      v51 = BYTE4(v18);
      outlined copy of DisplayList.Effect(v17, v18, SBYTE4(v18));
      v52 = v64;
      v53 = v63;
      v54 = BYTE4(v63);
    }
    outlined consume of DisplayList.Effect(v52, v53, v54);
    outlined consume of DisplayList.Effect(v17, v18, v51);
    v41 = a5;
LABEL_25:
    *(double *)v66 = v43;
    swift_beginAccess();
    DisplayList.ViewUpdater.ViewCache.setNextUpdate(_:in:)((unint64_t)v66, (uint64_t)v88);
    swift_endAccess();
    outlined consume of DisplayList.Effect(v50, v63, SBYTE4(v63));
    outlined consume of DisplayList.Effect(v29, v18, v51);
    outlined consume of DisplayList.Item.Value(v50, v63);
    result = outlined consume of DisplayList.Item.Value(v29, v18);
    v39 = v91;
    goto LABEL_12;
  }
  outlined consume of DisplayList.Effect(v64, v63, SBYTE4(v63));
  outlined consume of DisplayList.Effect(v17, v18, SBYTE4(v18));
  outlined consume of DisplayList.Item.Value(v64, v63);
  result = outlined consume of DisplayList.Item.Value(v17, v18);
  v41 = a5;
  *(double *)a5 = v42;
LABEL_15:
  *(_BYTE *)(v41 + 8) = 1;
  return result;
}

void implicit closure #2 in implicit closure #1 in DisplayList.ViewUpdater.updateItemView(container:from:localState:)(uint64_t *a1@<X1>, __int128 *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  char v14;
  int v15;
  _QWORD v18[4];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  char v28;
  int v29;

  v18[0] = a3;
  v6 = a1[1];
  v7 = a1[2];
  v8 = a1[3];
  v9 = a1[4];
  v10 = a1[5];
  v11 = a1[6];
  v12 = a1[7];
  v13 = *((_WORD *)a1 + 32);
  v14 = *((_BYTE *)a1 + 66);
  v15 = *((_DWORD *)a1 + 17);
  v19 = *a1;
  v5 = v19;
  v20 = v6;
  v21 = v7;
  v22 = v8;
  v23 = v9;
  v24 = v10;
  v25 = v11;
  v26 = v12;
  v28 = v14;
  v27 = v13;
  v29 = v15;
  DisplayList.ViewUpdater.Platform._makeItemView(item:state:)((uint64_t)&v19);
  v18[3] = a3;
  v19 = v5;
  v20 = v6;
  v21 = v7;
  v22 = v8;
  v23 = v9;
  v24 = v10;
  v25 = v11;
  v26 = v12;
  v28 = v14;
  v27 = v13;
  v29 = v15;
  DisplayList.ViewUpdater.Platform.updateItemView(_:index:item:state:)(a4, (uint64_t)v18, (double *)&v19, a2);
}

void implicit closure #4 in implicit closure #3 in DisplayList.ViewUpdater.updateItemView(container:from:localState:)(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5)
{
  __int16 v5;
  char v6;
  int v7;
  __int128 v8;
  __int128 v9;
  _OWORD v10[4];
  __int16 v11;
  char v12;
  int v13;
  _BYTE v14[20];
  uint64_t v15;

  v5 = *(_WORD *)(a3 + 64);
  v6 = *(_BYTE *)(a3 + 66);
  v7 = *(_DWORD *)(a3 + 68);
  v15 = a5;
  v8 = *(_OWORD *)(a3 + 16);
  v10[0] = *(_OWORD *)a3;
  v10[1] = v8;
  v9 = *(_OWORD *)(a3 + 48);
  v10[2] = *(_OWORD *)(a3 + 32);
  v10[3] = v9;
  v12 = v6;
  v11 = v5;
  v13 = v7;
  DisplayList.ViewUpdater.Platform.updateItemView(_:index:item:state:)(a1, (uint64_t)v14, (double *)v10, a4);
}

uint64_t DisplayList.ViewUpdater.deinit()
{
  uint64_t v0;
  void *v1;

  outlined destroy of weak GestureGraphDelegate?(v0 + 16);
  v1 = *(void **)(v0 + 88);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t DisplayList.ViewUpdater.__deallocating_deinit()
{
  uint64_t v0;
  void *v1;

  outlined destroy of weak GestureGraphDelegate?(v0 + 16);
  v1 = *(void **)(v0 + 88);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for ViewRendererBase.destroy(rootView:) in conformance DisplayList.ViewUpdater()
{
  uint64_t v0;
  uint64_t v1;
  SwiftUI::Time v2;

  swift_beginAccess();
  v1 = one-time initialization token for infinity;
  swift_unknownObjectRetain();
  if (v1 != -1)
    swift_once();
  swift_beginAccess();
  DisplayList.ViewUpdater.Container.removeRemaining(viewCache:)(v0 + 32);
  DisplayList.ViewUpdater.ViewCache.reclaim(time:)(v2);
  swift_endAccess();
  return swift_unknownObjectRelease();
}

BOOL protocol witness for ViewRendererBase.viewCacheIsEmpty.getter in conformance DisplayList.ViewUpdater()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(*(_QWORD *)(v0 + 40) + 16) == 0;
}

uint64_t type metadata accessor for DisplayList.ViewUpdater()
{
  return objc_opt_self();
}

uint64_t method lookup function for DisplayList.ViewUpdater()
{
  return swift_lookUpClassMethod();
}

uint64_t outlined release of DisplayList.ViewUpdater.Model.State(uint64_t a1)
{
  outlined consume of GraphicsBlendMode(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

void specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  void *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  id v26;
  int64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int16 v36;
  __int128 v37;
  __int128 v38;
  __int16 v39;
  int v40;
  char v41;
  char v42;
  uint64_t v43;
  int64_t v44;

  type metadata accessor for _DictionaryStorage<DisplayList.ViewUpdater.ViewCache.Key, DisplayList.ViewUpdater.ViewInfo>();
  v2 = static _DictionaryStorage.copy(original:)();
  v3 = 0;
  v29 = (_QWORD *)v2;
  v30 = a1;
  v6 = *(_QWORD *)(a1 + 64);
  v5 = a1 + 64;
  v4 = v6;
  v7 = 1 << *(_BYTE *)(v5 - 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & v4;
  v27 = (unint64_t)(v7 + 63) >> 6;
  v28 = v2 + 64;
  if (!v9)
    goto LABEL_5;
LABEL_4:
  v31 = (v9 - 1) & v9;
  v44 = v3;
  for (i = __clz(__rbit64(v9)) | (v3 << 6); ; i = __clz(__rbit64(v12)) + (v13 << 6))
  {
    v15 = *(_QWORD *)(v30 + 48) + 20 * i;
    v16 = *(_BYTE *)(v15 + 16);
    v17 = *(_QWORD *)(v30 + 56) + 120 * i;
    v18 = *(void **)(v17 + 8);
    *(_QWORD *)&v32 = *(_QWORD *)v17;
    *((_QWORD *)&v32 + 1) = v18;
    v33 = *(_QWORD *)(v17 + 16);
    v34 = *(_OWORD *)(v17 + 24);
    v35 = *(_OWORD *)(v17 + 40);
    v36 = *(_WORD *)(v17 + 56);
    v37 = *(_OWORD *)(v17 + 64);
    v38 = *(_OWORD *)(v17 + 80);
    v39 = *(_WORD *)(v17 + 96);
    v40 = *(_DWORD *)(v17 + 100);
    v41 = *(_BYTE *)(v17 + 104);
    v42 = *(_BYTE *)(v17 + 105);
    v43 = *(_QWORD *)(v17 + 112);
    DisplayList.ViewUpdater.ViewInfo.Seeds.invalidate()();
    v19 = *(_OWORD *)v15;
    v20 = v29[6];
    *(_QWORD *)(v28 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v21 = v20 + 20 * i;
    *(_OWORD *)v21 = v19;
    *(_BYTE *)(v21 + 16) = v16;
    v22 = v29[7] + 120 * i;
    *(_OWORD *)v22 = v32;
    *(_QWORD *)(v22 + 16) = v33;
    *(_OWORD *)(v22 + 24) = v34;
    *(_OWORD *)(v22 + 40) = v35;
    *(_WORD *)(v22 + 56) = v36;
    *(_OWORD *)(v22 + 64) = v37;
    *(_OWORD *)(v22 + 80) = v38;
    *(_WORD *)(v22 + 96) = v39;
    *(_DWORD *)(v22 + 100) = v40;
    *(_BYTE *)(v22 + 104) = v41;
    *(_BYTE *)(v22 + 105) = v42;
    *(_QWORD *)(v22 + 112) = v43;
    v23 = v29[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v29[2] = v25;
    swift_unknownObjectRetain();
    v26 = v18;
    swift_unknownObjectRetain();
    v3 = v44;
    v9 = v31;
    if (v31)
      goto LABEL_4;
LABEL_5:
    v11 = v3 + 1;
    if (__OFADD__(v3, 1))
      goto LABEL_24;
    if (v11 >= v27)
      return;
    v12 = *(_QWORD *)(v5 + 8 * v11);
    v13 = v3 + 1;
    if (!v12)
    {
      v13 = v3 + 2;
      if (v3 + 2 >= v27)
        return;
      v12 = *(_QWORD *)(v5 + 8 * v13);
      if (!v12)
      {
        v13 = v3 + 3;
        if (v3 + 3 >= v27)
          return;
        v12 = *(_QWORD *)(v5 + 8 * v13);
        if (!v12)
          break;
      }
    }
LABEL_18:
    v31 = (v12 - 1) & v12;
    v44 = v13;
  }
  v14 = v3 + 4;
  if (v3 + 4 >= v27)
    return;
  v12 = *(_QWORD *)(v5 + 8 * v14);
  if (v12)
  {
    v13 = v3 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    v13 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v13 >= v27)
      return;
    v12 = *(_QWORD *)(v5 + 8 * v13);
    ++v14;
    if (v12)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
}

uint64_t outlined retain of DisplayList.ViewUpdater.Model.State(uint64_t a1)
{
  outlined copy of GraphicsBlendMode(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined destroy of DisplayList.ArchiveIDs?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for DisplayList.ArchiveIDs?();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_234EEDF30()
{
  return swift_deallocObject();
}

void partial apply for implicit closure #3 in implicit closure #2 in DisplayList.ViewUpdater.updateInheritedView(container:from:parentState:)(double *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;

  implicit closure #3 in implicit closure #2 in DisplayList.ViewUpdater.updateInheritedView(container:from:parentState:)(a1, a2, *(_QWORD *)(v3 + 16), a3);
}

uint64_t sub_234EEDF48()
{
  return swift_deallocObject();
}

void partial apply for implicit closure #5 in implicit closure #4 in DisplayList.ViewUpdater.updateInheritedView(container:from:parentState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  implicit closure #5 in implicit closure #4 in DisplayList.ViewUpdater.updateInheritedView(container:from:parentState:)(a1, a2, a3, a4, *(_QWORD *)(v4 + 16));
}

uint64_t sub_234EEDF60()
{
  return swift_deallocObject();
}

void partial apply for implicit closure #2 in implicit closure #1 in DisplayList.ViewUpdater.updateItemView(container:from:localState:)(uint64_t *a1@<X1>, __int128 *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;

  implicit closure #2 in implicit closure #1 in DisplayList.ViewUpdater.updateItemView(container:from:localState:)(a1, a2, *(_QWORD *)(v3 + 16), a3);
}

uint64_t sub_234EEDF78()
{
  return swift_deallocObject();
}

void partial apply for implicit closure #4 in implicit closure #3 in DisplayList.ViewUpdater.updateItemView(container:from:localState:)(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  uint64_t v4;

  implicit closure #4 in implicit closure #3 in DisplayList.ViewUpdater.updateItemView(container:from:localState:)(a1, a2, a3, a4, *(_QWORD *)(v4 + 16));
}

void type metadata accessor for _DictionaryStorage<DisplayList.ViewUpdater.ViewCache.Key, DisplayList.ViewUpdater.ViewInfo>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _DictionaryStorage<DisplayList.ViewUpdater.ViewCache.Key, DisplayList.ViewUpdater.ViewInfo>)
  {
    lazy protocol witness table accessor for type DisplayList.ViewUpdater.ViewCache.Key and conformance DisplayList.ViewUpdater.ViewCache.Key();
    v0 = type metadata accessor for _DictionaryStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<DisplayList.ViewUpdater.ViewCache.Key, DisplayList.ViewUpdater.ViewInfo>);
  }
}

uint64_t destroy for DisplayList.ViewUpdater.ViewInfo(uint64_t a1)
{
  swift_unknownObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for DisplayList.ViewUpdater.ViewInfo(uint64_t a1, uint64_t a2)
{
  void *v3;
  __int128 v4;
  id v5;

  v3 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_unknownObjectRetain();
  v5 = v3;
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DisplayList.ViewUpdater.ViewInfo(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v4 = *(void **)(a2 + 8);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v6 = v4;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_WORD *)(a1 + 82) = *(_WORD *)(a2 + 82);
  *(_WORD *)(a1 + 84) = *(_WORD *)(a2 + 84);
  *(_WORD *)(a1 + 86) = *(_WORD *)(a2 + 86);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  *(_WORD *)(a1 + 90) = *(_WORD *)(a2 + 90);
  *(_WORD *)(a1 + 92) = *(_WORD *)(a2 + 92);
  *(_WORD *)(a1 + 94) = *(_WORD *)(a2 + 94);
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_BYTE *)(a1 + 105) = *(_BYTE *)(a2 + 105);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  return a1;
}

uint64_t assignWithTake for DisplayList.ViewUpdater.ViewInfo(uint64_t a1, uint64_t a2)
{
  void *v4;
  __int128 v5;

  swift_unknownObjectRelease();
  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_BYTE *)(a1 + 105) = *(_BYTE *)(a2 + 105);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayList.ViewUpdater.ViewInfo(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 120))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DisplayList.ViewUpdater.ViewInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 120) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.ViewUpdater.ViewInfo()
{
  return &type metadata for DisplayList.ViewUpdater.ViewInfo;
}

__n128 __swift_memcpy18_2(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for DisplayList.ViewUpdater.ViewInfo.Seeds(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 18))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DisplayList.ViewUpdater.ViewInfo.Seeds(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_WORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 18) = v3;
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.ViewUpdater.ViewInfo.Seeds()
{
  return &type metadata for DisplayList.ViewUpdater.ViewInfo.Seeds;
}

ValueMetadata *type metadata accessor for DisplayList.ViewUpdater.ViewInfo.ID()
{
  return &type metadata for DisplayList.ViewUpdater.ViewInfo.ID;
}

double AnyViewFactory.encoding()@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

{
  return AnyViewFactory.encoding()(a1);
}

uint64_t PlatformLayerFactory.renderPlatformLayer(in:size:renderer:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  return specialized PlatformLayerFactory.renderPlatformLayer(in:size:renderer:)(a3, a4, a1, a2);
}

uint64_t PlatformViewFactory.renderPlatformView(in:size:renderer:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  return specialized PlatformLayerFactory.renderPlatformLayer(in:size:renderer:)(a3, a4, a1, a2);
}

void PlatformViewFactory.features.getter(_WORD *a1@<X8>)
{
  PlatformViewFactory.features.getter(a1);
}

{
  *a1 = 1;
}

uint64_t RendererLeafView<>.content()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t result;

  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 40) = a1;
  *(_QWORD *)(v7 + 48) = a2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v7 + 16));
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(boxed_opaque_existential_1, v3, a1);
  *a3 = v7 | 0x6000000000000000;
  return result;
}

uint64_t PlatformGroupFactory.renderPlatformGroup(_:in:size:renderer:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int16 v3;
  char v4;
  uint64_t v6;
  __int16 v7;
  char v8;
  uint64_t v9;

  v2 = *(_QWORD *)a1;
  v3 = *(_WORD *)(a1 + 8);
  v4 = *(_BYTE *)(a1 + 10);
  v9 = a2;
  v6 = v2;
  v7 = v3;
  v8 = v4;
  swift_retain();
  DisplayList.GraphicsRenderer.render(list:in:)(&v6, &v9);
  return swift_release();
}

{
  uint64_t v2;
  __int16 v3;
  char v4;
  uint64_t v6;
  __int16 v7;
  char v8;
  uint64_t v9;

  v2 = *(_QWORD *)a1;
  v3 = *(_WORD *)(a1 + 8);
  v4 = *(_BYTE *)(a1 + 10);
  v9 = a2;
  v6 = v2;
  v7 = v3;
  v8 = v4;
  swift_retain();
  DisplayList.GraphicsRenderer.render(list:in:)(&v6, &v9);
  return swift_release();
}

void _DisplayList_ViewFactory.identity.getter(_DWORD *a1@<X8>)
{
  _DisplayList_ViewFactory.identity.getter(a1);
}

{
  *a1 = 0;
}

uint64_t RendererLeafView<>.content()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, unint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t result;

  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 40) = a1;
  *(_QWORD *)(v7 + 48) = a2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v7 + 16));
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(boxed_opaque_existential_1, v3, a1);
  *a3 = v7 | 0xB000000000000000;
  return result;
}

uint64_t one-time initialization function for _shared(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  type metadata accessor for AtomicBuffer<ViewDecoders>(0, a2, a3, a4);
  result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = MEMORY[0x24BEE4B00];
  *(_BYTE *)(result + 32) = 0;
  static ViewDecoders._shared = (_UNKNOWN *)result;
  return result;
}

uint64_t static ViewDecoders.registerDecodableFactoryType<A, B>(_:forType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v9 = _typeName(_:qualified:)();
  static ViewDecoders.registerDecodableFactoryType<A>(_:forID:)(a1, v9, v10, v11, a5, a6);
  return swift_bridgeObjectRelease();
}

uint64_t static ViewDecoders.registerDecodableFactoryType<A>(_:forID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  _QWORD *v12;
  os_unfair_lock_s *v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;

  v11 = one-time initialization token for _shared;
  swift_bridgeObjectRetain();
  if (v11 != -1)
    swift_once();
  v12 = static ViewDecoders._shared;
  v13 = (os_unfair_lock_s *)((char *)static ViewDecoders._shared + 16);
  swift_retain();
  os_unfair_lock_lock(v13);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v16 = v12[3];
  v12[3] = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a5, a6, a2, a3, isUniquelyReferenced_nonNull_native);
  v12[3] = v16;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v13);
  return swift_release();
}

uint64_t static ViewDecoders.registerStandard(_:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t CodableViewFactory.encode(to:)(__int128 *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  v4 = v1[3];
  v5 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v4);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v5 + 16))(&v23, v4, v5);
  if (*((_QWORD *)&v23 + 1))
  {
    v26 = v23;
    outlined init with take of Decodable & Encodable((__int128 *)&v24, &v27);
    v6 = v26;
    outlined init with take of Decodable & Encodable((__int128 *)&v27, &v29);
    if (v6 == __PAIR128__(0xE000000000000000, 0) || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      ProtobufEncoder.stringFieldAlways(_:_:)(1);
      swift_bridgeObjectRelease();
      if (v2)
      {
LABEL_12:
        v13 = &v29;
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
      }
    }
    v15 = v30;
    v16 = v31;
    v17 = __swift_project_boxed_opaque_existential_1(&v29, v30);
    v18 = *((_QWORD *)a1 + 2);
    v26 = *a1;
    v27 = v18;
    v28 = *(__int128 *)((char *)a1 + 24);
    v19 = ProtobufEncoder.binaryPlistData<A>(for:)((uint64_t)v17, v15, v16);
    if (!v2)
    {
      v21 = v19;
      v22 = v20;
      ProtobufEncoder.encodeVarint(_:)(0x12uLL);
      specialized ProtobufEncoder.encodeMessage<A>(_:)(v21, v22);
      outlined consume of Data._Representation(v21, v22);
    }
    goto LABEL_12;
  }
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)&v23, &lazy cache variable for type metadata for (id: String, data: Decodable & Encodable)?, (void (*)(uint64_t))type metadata accessor for (id: String, data: Decodable & Encodable));
  v7 = *((_QWORD *)a1 + 2);
  v23 = *a1;
  v24 = v7;
  v25 = *(__int128 *)((char *)a1 + 24);
  ProtobufEncoder.archiveHost.getter((uint64_t)&v26);
  v8 = v28;
  if (!(_QWORD)v28)
    return outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)&v26, (unint64_t *)&lazy cache variable for type metadata for AnyArchivedViewHost?, (void (*)(uint64_t))type metadata accessor for AnyArchivedViewHost);
  v9 = *((_QWORD *)&v28 + 1);
  __swift_project_boxed_opaque_existential_1(&v26, v28);
  v10 = v1[3];
  v11 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v10);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v10, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 8))(v12, v8, v9);
  v13 = &v26;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
}

uint64_t CodableViewFactory.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  os_unfair_lock_s *v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  __int128 v56[2];
  __int128 v57;
  uint64_t v58;

  v3 = v2;
  v6 = type metadata accessor for String.Encoding();
  MEMORY[0x24BDAC7A8](v6);
  v57 = xmmword_23527E880;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  if (v7 >= v8)
  {
    v9 = 0;
    *(_QWORD *)(a1 + 24) = 0;
    v12 = 0xC000000000000000;
LABEL_4:
    result = outlined consume of Data._Representation(v9, v12);
    *(_QWORD *)(a2 + 24) = &type metadata for EmptyViewFactory;
    *(_QWORD *)(a2 + 32) = &protocol witness table for EmptyViewFactory;
    return result;
  }
  v58 = a2;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0xC000000000000000;
  do
  {
    v15 = *(_QWORD *)(a1 + 24);
    if (v15)
    {
      v16 = *(_QWORD *)(a1 + 32);
      if (v7 < v16)
        goto LABEL_14;
      if (v16 < v7)
        goto LABEL_50;
      *(_QWORD *)(a1 + 24) = 0;
    }
    v17 = ProtobufDecoder.decodeVarint()();
    if (v2)
      goto LABEL_51;
    v15 = v17;
    if (v17 < 8)
      goto LABEL_50;
LABEL_14:
    if (v15 >> 3 == 2)
    {
      if ((v15 & 7) != 2)
        goto LABEL_59;
      v27 = *(_QWORD **)(a1 + 40);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27[2] + 1, 1, v27);
      v29 = v27[2];
      v28 = v27[3];
      if (v29 >= v28 >> 1)
        v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v28 > 1), v29 + 1, 1, v27);
      v27[2] = v29 + 1;
      v27[v29 + 4] = v8;
      *(_QWORD *)(a1 + 40) = v27;
      v30 = ProtobufDecoder.decodeVarint()();
      if (v2)
        goto LABEL_62;
      if (v30 < 0)
        goto LABEL_69;
      v31 = *(_QWORD *)(a1 + 8) + v30;
      if (v8 < v31)
      {
LABEL_59:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
LABEL_62:
        v42 = *((_QWORD *)&v57 + 1);
        v41 = v57;
LABEL_63:
        outlined consume of Data._Representation(v41, v42);
        return swift_bridgeObjectRelease();
      }
      *(_QWORD *)(a1 + 16) = v31;
      v32 = Data.init(from:)(a1);
      v34 = *(_QWORD **)(a1 + 40);
      if (!v34[2])
        goto LABEL_70;
      v9 = v32;
      v12 = v33;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v35 = v34[2];
        if (!v35)
          goto LABEL_49;
      }
      else
      {
        v34 = specialized _ArrayBuffer._consumeAndCreateNew()(v34);
        v35 = v34[2];
        if (!v35)
        {
LABEL_49:
          __break(1u);
LABEL_50:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
LABEL_51:
          v41 = v9;
          v42 = v12;
          goto LABEL_63;
        }
      }
      v36 = v35 - 1;
      v37 = v34[v36 + 4];
      v34[2] = v36;
      *(_QWORD *)(a1 + 40) = v34;
      *(_QWORD *)(a1 + 16) = v37;
      outlined consume of Data._Representation(v57, *((unint64_t *)&v57 + 1));
      *(_QWORD *)&v57 = v9;
      *((_QWORD *)&v57 + 1) = v12;
    }
    else if (v15 >> 3 == 1)
    {
      swift_bridgeObjectRelease();
      if ((v15 & 7) != 2)
        goto LABEL_58;
      v18 = ProtobufDecoder.decodeVarint()();
      if (v2)
        goto LABEL_65;
      v19 = v18;
      if (v18 < 0)
      {
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
        goto LABEL_74;
      }
      v11 = *(_QWORD *)(a1 + 8);
      if (v8 < v11 + v18)
      {
LABEL_58:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        goto LABEL_65;
      }
      *(_QWORD *)(a1 + 8) = v11 + v18;
      if (v18)
      {
        v20 = v11 - (_QWORD)objc_msgSend(objc_retainAutorelease(*(id *)a1), sel_bytes);
        v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        v10 = v22;
        if (__OFADD__(v20, v19))
          goto LABEL_71;
        if (v20 + v19 < v20)
          goto LABEL_72;
        v23 = v21;
        v24 = Data._Representation.subscript.getter();
        v26 = v25;
        outlined consume of Data._Representation(v23, v10);
      }
      else
      {
        v24 = 0;
        v26 = 0xC000000000000000;
      }
      static String.Encoding.utf8.getter();
      v38 = String.init(data:encoding:)();
      if (!v39)
      {
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        outlined consume of Data._Representation(v24, v26);
LABEL_65:
        v54 = v9;
        v55 = v12;
        return outlined consume of Data._Representation(v54, v55);
      }
      v10 = v38;
      v11 = v39;
      outlined consume of Data._Representation(v24, v26);
    }
    else
    {
      switch(v15 & 7)
      {
        case 0uLL:
          ProtobufDecoder.decodeVarint()();
          if (v2)
            goto LABEL_51;
          break;
        case 1uLL:
          v14 = *(_QWORD *)(a1 + 8) + 8;
          if (v8 < v14)
            goto LABEL_50;
          goto LABEL_6;
        case 2uLL:
          v40 = ProtobufDecoder.decodeVarint()();
          if (v2)
            goto LABEL_51;
          if (v40 < 0)
            goto LABEL_73;
          v14 = *(_QWORD *)(a1 + 8) + v40;
          if (v8 < v14)
            goto LABEL_50;
LABEL_6:
          *(_QWORD *)(a1 + 8) = v14;
          break;
        case 5uLL:
          v14 = *(_QWORD *)(a1 + 8) + 4;
          if (v8 < v14)
            goto LABEL_50;
          goto LABEL_6;
        default:
          goto LABEL_50;
      }
    }
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
  }
  while (v7 < v8);
  *(_QWORD *)(a1 + 24) = 0;
  if (!v11)
  {
    a2 = v58;
    goto LABEL_4;
  }
  v43 = one-time initialization token for _shared;
  swift_bridgeObjectRetain();
  if (v43 != -1)
LABEL_74:
    swift_once();
  v44 = static ViewDecoders._shared;
  v45 = (os_unfair_lock_s *)((char *)static ViewDecoders._shared + 16);
  swift_retain();
  os_unfair_lock_lock(v45);
  v46 = v44[3];
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v45);
  swift_release();
  if (!*(_QWORD *)(v46 + 16) || (v47 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11), (v48 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type CodableViewFactory.Error and conformance CodableViewFactory.Error();
    swift_allocError();
    *v53 = v10;
    v53[1] = v11;
    swift_willThrow();
    v55 = *((_QWORD *)&v57 + 1);
    v54 = v57;
    return outlined consume of Data._Representation(v54, v55);
  }
  v49 = (uint64_t *)(*(_QWORD *)(v46 + 56) + 24 * v47);
  v50 = *v49;
  v51 = v49[1];
  v52 = v49[2];
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  specialized project #1 <A>(type:) in CodableViewFactory.init(from:)((__int128 *)a1, (uint64_t *)&v57, v50, v51, v52, (uint64_t *)v56);
  result = outlined consume of Data._Representation(v57, *((unint64_t *)&v57 + 1));
  if (!v3)
    return outlined init with take of ScrollStateRequest(v56, v58);
  return result;
}

uint64_t specialized project #1 <A>(type:) in CodableViewFactory.init(from:)@<X0>(__int128 *a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t *boxed_opaque_existential_1;
  id v13;
  uint64_t result;
  __int128 v15;
  uint64_t v17;

  v15 = *a1;
  swift_beginAccess();
  v10 = *a2;
  v11 = a2[1];
  a6[3] = a3;
  a6[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a6);
  v13 = (id)v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v10, v11);
  ProtobufDecoder.value<A>(fromBinaryPlist:type:)(v11, a3, a4, (uint64_t)boxed_opaque_existential_1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  result = outlined consume of Data._Representation(v10, v11);
  if (v17)
    return __swift_deallocate_boxed_opaque_existential_1((uint64_t)a6);
  return result;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance CodableViewFactory(__int128 *a1)
{
  return CodableViewFactory.encode(to:)(a1);
}

uint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance CodableViewFactory@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return CodableViewFactory.init(from:)(a1, a2);
}

ValueMetadata *EmptyViewFactory.viewType.getter()
{
  return &type metadata for EmptyView;
}

uint64_t EmptyViewFactory.MissingLayer.draw(in:)(CGContext *a1)
{
  void *v1;
  uint64_t v3;
  id v4;
  void (*v5)(uint64_t *);
  void *v6;
  uint64_t v8[2];
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  v3 = one-time initialization token for shared;
  v4 = v1;
  if (v3 != -1)
    swift_once();
  swift_beginAccess();
  v5 = *(void (**)(uint64_t *))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue2.shared) + 0x68);
  v6 = static CoreGlue2.shared;
  v5(&v9);

  v8[0] = v9;
  v8[1] = v10;
  specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(a1, v8, 0, 1, v4);

  swift_release();
  return swift_release();
}

uint64_t EmptyViewFactory.platformLayerType.getter()
{
  return type metadata accessor for EmptyViewFactory.MissingLayer();
}

uint64_t protocol witness for PlatformLayerFactory.platformLayerType.getter in conformance EmptyViewFactory()
{
  return type metadata accessor for EmptyViewFactory.MissingLayer();
}

uint64_t EmptyViewFactory.makePlatformView()()
{
  return 0;
}

void EmptyViewFactory.features.getter(_WORD *a1@<X8>)
{
  *a1 = 1;
}

uint64_t EmptyViewFactory.renderPlatformLayer(in:size:renderer:)(double a1, double a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = RBDrawingStateBeginLayer();
  type metadata accessor for GraphicsContext.Storage();
  swift_allocObject();
  v5 = swift_retain();
  GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v5, v4, 0, 1);
  GraphicsContext.renderMissingPlatformView(size:)((CGSize)__PAIR128__(*(unint64_t *)&a2, *(unint64_t *)&a1));
  RBDrawingStateDrawLayer();
  return swift_release();
}

void protocol witness for PlatformViewFactory.features.getter in conformance EmptyViewFactory(_WORD *a1@<X8>)
{
  *a1 = 1;
}

uint64_t EmptyViewFactory.makePlatformGroup()()
{
  return 0;
}

uint64_t EmptyViewFactory.needsUpdateFor(newValue:)()
{
  return 0;
}

uint64_t EmptyViewFactory.renderPlatformGroup(_:in:size:renderer:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v7;
  __int16 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  __int16 v14;
  char v15;
  uint64_t v16;

  v7 = *(_QWORD *)a1;
  v8 = *(_WORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 10);
  v10 = RBDrawingStateBeginLayer();
  type metadata accessor for GraphicsContext.Storage();
  swift_allocObject();
  v11 = swift_retain();
  GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v11, v10, 0, 1);
  GraphicsContext.renderMissingPlatformView(size:)((CGSize)__PAIR128__(*(unint64_t *)&a4, *(unint64_t *)&a3));
  RBDrawingStateDrawLayer();
  swift_release();
  v16 = a2;
  v13 = v7;
  v14 = v8;
  v15 = v9;
  swift_retain();
  DisplayList.GraphicsRenderer.render(list:in:)(&v13, &v16);
  return swift_release();
}

uint64_t protocol witness for PlatformGroupFactory.renderPlatformGroup(_:in:size:renderer:) in conformance EmptyViewFactory(uint64_t a1, uint64_t a2, double a3, double a4)
{
  return EmptyViewFactory.renderPlatformGroup(_:in:size:renderer:)(a1, a2, a3, a4);
}

uint64_t EmptyViewFactory.makeView()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for AnyViewStorage<EmptyView>(0, a2, a3, a4);
  return swift_allocObject();
}

uint64_t protocol witness for _DisplayList_ViewFactory.makeView() in conformance EmptyViewFactory(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for AnyViewStorage<EmptyView>(0, a2, a3, a4);
  return swift_allocObject();
}

uint64_t specialized PlatformLayerFactory.renderPlatformLayer(in:size:renderer:)(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;

  result = swift_beginAccess();
  if (*(_BYTE *)(a4 + 112) != 2)
  {
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    v8._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = 46;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    specialized static Log.externalWarning(_:)(0xD000000000000026, 0x80000002352DF040);
    swift_bridgeObjectRelease();
    v10 = RBDrawingStateBeginLayer();
    type metadata accessor for GraphicsContext.Storage();
    swift_allocObject();
    v11 = swift_retain();
    GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v11, v10, 0, 1);
    GraphicsContext.renderMissingPlatformView(size:)((CGSize)__PAIR128__(*(unint64_t *)&a2, *(unint64_t *)&a1));
    RBDrawingStateDrawLayer();
    return swift_release();
  }
  return result;
}

uint64_t sub_234EEF770()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t type metadata accessor for EmptyViewFactory.MissingLayer()
{
  return objc_opt_self();
}

void type metadata accessor for AnyViewStorage<EmptyView>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for AnyViewStorage<EmptyView>)
  {
    v4 = type metadata accessor for AnyViewStorage(0, (uint64_t)&type metadata for EmptyView, (uint64_t)&protocol witness table for EmptyView, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for AnyViewStorage<EmptyView>);
  }
}

uint64_t dispatch thunk of AnyViewFactory.viewType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AnyViewFactory.encoding()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of PlatformLayerFactory.updatePlatformLayer(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of PlatformViewFactory.makePlatformView()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of PlatformViewFactory.updatePlatformView(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of PlatformViewFactory.renderPlatformView(in:size:renderer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of PlatformViewFactory.features.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of PlatformGroupFactory.needsUpdateFor(newValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of PlatformGroupFactory.updatePlatformGroup(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of PlatformGroupFactory.platformGroupContainer(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of PlatformGroupFactory.renderPlatformGroup(_:in:size:renderer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 48))();
}

uint64_t dispatch thunk of PlatformGroupFactory.features.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of _DisplayList_ViewFactory.identity.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

ValueMetadata *type metadata accessor for ViewDecoders()
{
  return &type metadata for ViewDecoders;
}

ValueMetadata *type metadata accessor for EmptyViewFactory()
{
  return &type metadata for EmptyViewFactory;
}

uint64_t getEnumTagSinglePayload for CodableViewFactory.Error(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CodableViewFactory.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

_QWORD *destructiveInjectEnumTag for CodableViewFactory.Error(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for CodableViewFactory.Error()
{
  return &type metadata for CodableViewFactory.Error;
}

ValueMetadata *type metadata accessor for CodableViewFactory()
{
  return &type metadata for CodableViewFactory;
}

void type metadata accessor for AtomicBuffer<ViewDecoders>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for AtomicBuffer<ViewDecoders>)
  {
    v4 = type metadata accessor for AtomicBuffer(0, (uint64_t)&type metadata for ViewDecoders, a3, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<ViewDecoders>);
  }
}

void type metadata accessor for (id: String, data: Decodable & Encodable)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (id: String, data: Decodable & Encodable))
  {
    type metadata accessor for Decodable & Encodable();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (id: String, data: Decodable & Encodable));
  }
}

uint64_t AnyShape.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  type metadata accessor for _AnyShapeBox(0, a2, a3, a4);
  v5 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 136) - 8) + 32))(v5 + *(_QWORD *)(*(_QWORD *)v5 + 152), a1);
  return v5;
}

uint64_t type metadata accessor for _AnyShapeBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _AnyShapeBox);
}

uint64_t _AnyShapeBox.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 136) - 8) + 32))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 152), a1);
  return v2;
}

double AnyShape.path(in:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v4;
  _OWORD v5[2];
  char v6;

  (*(void (**)(_OWORD *__return_ptr))(*(_QWORD *)a1 + 80))(v5);
  result = *(double *)v5;
  v4 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 32) = v6;
  return result;
}

uint64_t AnyShape.sizeThatFits(_:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a5 + 88))(a1, a2 & 1);
}

uint64_t AnyShape.animatableData.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a1 + 96))();
}

uint64_t key path setter for AnyShape.animatableData : AnyShape(_QWORD *a1, uint64_t *a2)
{
  int isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[5];
  _QWORD v8[5];

  outlined init with copy of _AnyAnimatableData(a1, v8);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4 = *a2;
  if (isUniquelyReferenced_nonNull_native)
  {
    outlined init with copy of _AnyAnimatableData(v8, v7);
    (*(void (**)(_QWORD *))(*(_QWORD *)v4 + 104))(v7);
    return outlined destroy of _AnyAnimatableData((uint64_t)v8);
  }
  else
  {
    v6 = (*(uint64_t (**)(_QWORD *))(*(_QWORD *)v4 + 120))(v8);
    outlined destroy of _AnyAnimatableData((uint64_t)v8);
    *a2 = v6;
    return swift_release();
  }
}

uint64_t AnyShape.animatableData.setter(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[5];

  v2 = v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v5 = *v1;
  if (isUniquelyReferenced_nonNull_native)
  {
    outlined init with copy of _AnyAnimatableData(a1, v8);
    (*(void (**)(_QWORD *))(*(_QWORD *)v5 + 104))(v8);
    return outlined destroy of _AnyAnimatableData((uint64_t)a1);
  }
  else
  {
    v7 = (*(uint64_t (**)(_QWORD *))(*(_QWORD *)v5 + 120))(a1);
    outlined destroy of _AnyAnimatableData((uint64_t)a1);
    *v2 = v7;
    return swift_release();
  }
}

void (*AnyShape.animatableData.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x80uLL);
  *a1 = v3;
  v3[15] = v1;
  (*(void (**)(void))(**(_QWORD **)v1 + 96))();
  return AnyShape.animatableData.modify;
}

void AnyShape.animatableData.modify(_QWORD **a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t *v4;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v2 = *a1;
  v3 = *a1 + 5;
  v4 = (uint64_t *)(*a1)[15];
  if ((a2 & 1) != 0)
  {
    outlined init with copy of _AnyAnimatableData(*a1, v3);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v6 = *v4;
    if (isUniquelyReferenced_nonNull_native)
    {
      outlined init with copy of _AnyAnimatableData(v3, v2 + 10);
      (*(void (**)(_QWORD *))(*(_QWORD *)v6 + 104))(v2 + 10);
      outlined destroy of _AnyAnimatableData((uint64_t)v3);
    }
    else
    {
      v9 = (uint64_t *)v2[15];
      v10 = (*(uint64_t (**)(_QWORD *))(*(_QWORD *)v6 + 120))(v3);
      outlined destroy of _AnyAnimatableData((uint64_t)v3);
      *v9 = v10;
      swift_release();
    }
  }
  else
  {
    v7 = swift_isUniquelyReferenced_nonNull_native();
    v8 = *v4;
    if (!v7)
    {
      v11 = (uint64_t *)v2[15];
      v12 = (*(uint64_t (**)(_QWORD *))(*(_QWORD *)v8 + 120))(v2);
      outlined destroy of _AnyAnimatableData((uint64_t)v2);
      *v11 = v12;
      swift_release();
      goto LABEL_9;
    }
    outlined init with copy of _AnyAnimatableData(v2, v3);
    (*(void (**)(_QWORD *))(*(_QWORD *)v8 + 104))(v3);
  }
  outlined destroy of _AnyAnimatableData((uint64_t)v2);
LABEL_9:
  free(v2);
}

double protocol witness for Shape.path(in:) in conformance AnyShape@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;
  __int128 v4;
  _OWORD v5[2];
  char v6;

  (*(void (**)(_OWORD *__return_ptr))(**(_QWORD **)v1 + 80))(v5);
  result = *(double *)v5;
  v4 = v5[1];
  *(_OWORD *)a1 = v5[0];
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v6;
  return result;
}

uint64_t protocol witness for Shape.sizeThatFits(_:) in conformance AnyShape(uint64_t a1, char a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(**(_QWORD **)v2 + 88))(a1, a2 & 1);
}

uint64_t protocol witness for Animatable.animatableData.getter in conformance AnyShape()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 96))();
}

uint64_t protocol witness for Animatable.animatableData.setter in conformance AnyShape(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[5];

  v2 = v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v5 = *v1;
  if (isUniquelyReferenced_nonNull_native)
  {
    outlined init with copy of _AnyAnimatableData(a1, v8);
    (*(void (**)(_QWORD *))(*(_QWORD *)v5 + 104))(v8);
    return outlined destroy of _AnyAnimatableData((uint64_t)a1);
  }
  else
  {
    v7 = (*(uint64_t (**)(_QWORD *))(*(_QWORD *)v5 + 120))(a1);
    outlined destroy of _AnyAnimatableData((uint64_t)a1);
    *v2 = v7;
    return swift_release();
  }
}

void (*protocol witness for Animatable.animatableData.modify in conformance AnyShape(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x80uLL);
  *a1 = v3;
  v3[15] = v1;
  (*(void (**)(void))(**(_QWORD **)v1 + 96))();
  return AnyShape.animatableData.modify;
}

void AnyShapeBox.path(in:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyShapeBox.sizeThatFits(_:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyShapeBox.animatableData.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyShapeBox.animatableData.setter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyShapeBox.withAnimatableData(_:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t AnyShapeBox.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t AnyShapeBox.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

unint64_t instantiation function for generic protocol witness table for AnyShape(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AnyShape and conformance AnyShape();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_234EF01D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 96))();
}

ValueMetadata *type metadata accessor for AnyShape()
{
  return &type metadata for AnyShape;
}

uint64_t type metadata accessor for AnyShapeBox()
{
  return objc_opt_self();
}

uint64_t method lookup function for AnyShapeBox()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata completion function for _AnyShapeBox()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

double _AnyShapeBox.path(in:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t *v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  double result;
  __int128 v19;
  _BYTE v20[24];
  _OWORD v21[2];
  char v22;

  v12 = *v6;
  v13 = *(_QWORD *)(*v6 + 136);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v16 = &v20[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = (uint64_t)v6 + *(_QWORD *)(v12 + 152);
  swift_beginAccess();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v14 + 16))(v16, v17, v13);
  (*(void (**)(_OWORD *__return_ptr, uint64_t, double, double, double, double))(*(_QWORD *)(v12 + 144) + 24))(v21, v13, a3, a4, a5, a6);
  (*(void (**)(_BYTE *, uint64_t))(v14 + 8))(v16, v13);
  result = *(double *)v21;
  v19 = v21[1];
  *(_OWORD *)a2 = v21[0];
  *(_OWORD *)(a2 + 16) = v19;
  *(_BYTE *)(a2 + 32) = v22;
  return result;
}

double _AnyShapeBox.sizeThatFits(_:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  double (*v14)(uint64_t);
  double v15;
  _BYTE v17[24];

  v8 = *v4;
  v9 = *(_QWORD *)(*v4 + 136);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = (uint64_t)v4 + *(_QWORD *)(v8 + 152);
  swift_beginAccess();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16))(v12, v13, v9);
  v14 = *(double (**)(uint64_t))(*(_QWORD *)(v8 + 144) + 48);
  v17[16] = a2 & 1;
  v17[8] = a4 & 1;
  v15 = v14(a1);
  (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
  return v15;
}

_OWORD *_AnyShapeBox.animatableData.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 136);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (uint64_t)v2 + *(_QWORD *)(v4 + 152);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  return _AnyAnimatableData.init<A>(_:)((uint64_t)v8, v5, *(_QWORD *)(*(_QWORD *)(v4 + 144) + 8), v10, a2);
}

uint64_t _AnyShapeBox.animatableData.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 152);
  swift_beginAccess();
  _AnyAnimatableData.update<A>(_:)(v4, *(_QWORD *)(v3 + 136), *(_QWORD *)(*(_QWORD *)(v3 + 144) + 8));
  swift_endAccess();
  return outlined destroy of _AnyAnimatableData(a1);
}

uint64_t _AnyShapeBox.withAnimatableData(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 136);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (uint64_t)v1 + *(_QWORD *)(v2 + 152);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, v3);
  _AnyAnimatableData.update<A>(_:)((uint64_t)v6, v3, *(_QWORD *)(*(_QWORD *)(v2 + 144) + 8));
  v8 = swift_allocObject();
  (*(void (**)(uint64_t, char *))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v8 + 136) - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)v8 + 152), v6);
  return v8;
}

uint64_t _AnyShapeBox.__ivar_destroyer()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 136) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 152));
}

uint64_t _AnyShapeBox.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 136) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 152));
  return swift_deallocClassInstance();
}

void Gesture.map<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for MapGesture(255, AssociatedTypeWitness, a4, v6);
  MEMORY[0x23B7C9C04]("ɜ;\x1B\b}\n", v7);
  type metadata accessor for ModifierGesture();
}

void sub_234EF07B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;

  MEMORY[0x24BDAC7A8](a1);
  v19 = (char *)&a9 - v18;
  v20 = (_QWORD *)swift_allocObject();
  v20[2] = v15;
  v20[3] = v11;
  v20[4] = v10;
  v20[5] = v13;
  swift_retain();
  *(_QWORD *)(v17 - 112) = partial apply for closure #1 in MapGesture.init(_:);
  *(_QWORD *)(v17 - 104) = v20;
  Gesture.modifier<A>(_:)(v17 - 112, v12, v14, v9, v16, (uint64_t)v19);
}

void sub_234EF0830()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  _MapGesture.init(_body:)(v2, v1, v0);
}

uint64_t type metadata accessor for MapGesture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MapGesture);
}

uint64_t MapGesture.body.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_retain();
  return v1;
}

uint64_t MapGesture.body.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_release();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*MapGesture.body.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t MapGesture.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

void (*MapGesture.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (**a5)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)@<X8>))(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*result)(uint64_t, uint64_t, uint64_t, uint64_t);

  result = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))swift_allocObject();
  *((_QWORD *)result + 2) = a3;
  *((_QWORD *)result + 3) = a4;
  *((_QWORD *)result + 4) = a1;
  *((_QWORD *)result + 5) = a2;
  *a5 = partial apply for closure #1 in MapGesture.init(_:);
  a5[1] = result;
  return result;
}

uint64_t static MapGesture._makeGesture(modifier:inputs:body:)@<X0>(unsigned int *a1@<X0>, __int128 *a2@<X1>, void (*a3)(_QWORD *__return_ptr, __int128 *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  unsigned int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  _QWORD v28[2];
  int v29;
  _BYTE v30[16];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v9 = *a1;
  v10 = a2[5];
  v38 = a2[4];
  v39 = v10;
  v40 = a2[6];
  v11 = a2[1];
  v34 = *a2;
  v35 = v11;
  v12 = a2[3];
  v36 = a2[2];
  v37 = v12;
  v14 = *(_QWORD *)((char *)a2 + 116);
  v41 = *((_DWORD *)a2 + 28);
  v13 = v41;
  v42 = v14;
  a3(v28, &v34);
  v15 = v28[1];
  v16 = v29;
  v19 = type metadata accessor for GesturePhase(0, a5, v17, v18);
  v21 = type metadata accessor for MapPhase(0, a4, a5, v20);
  v27 = v28[0];
  *(_QWORD *)&v34 = __PAIR64__(v28[0], v9);
  *((_QWORD *)&v34 + 1) = v13;
  v31 = v19;
  v32 = v21;
  v33 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for MapPhase<A, B>, v21);
  v22 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v34, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v30, v21, MEMORY[0x24BEE4078], v22, MEMORY[0x24BEE40A8], v23);
  LODWORD(v21) = v28[0];
  *(_QWORD *)&v34 = v27;
  *((_QWORD *)&v34 + 1) = v15;
  LODWORD(v35) = v16;
  type metadata accessor for _GestureOutputs(0, a4, v24, v25);
  _GestureOutputs.withPhase<A>(_:)(v21, a6);
  return swift_bridgeObjectRelease();
}

uint64_t MapPhase.modifier.getter@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, _QWORD *a3@<X8>)
{
  uint64_t *Value;
  uint64_t v5;
  uint64_t v6;

  type metadata accessor for MapGesture(0, a1, a2, a2);
  Value = (uint64_t *)AGGraphGetValue();
  v6 = *Value;
  v5 = Value[1];
  *a3 = v6;
  a3[1] = v5;
  return swift_retain();
}

uint64_t MapPhase.resetSeed.getter()
{
  return *(unsigned int *)AGGraphGetValue();
}

uint64_t protocol witness for static GestureModifier._makeGesture(modifier:inputs:body:) in conformance MapGesture<A, B>@<X0>(unsigned int *a1@<X0>, __int128 *a2@<X1>, void (*a3)(_QWORD *__return_ptr, __int128 *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return static MapGesture._makeGesture(modifier:inputs:body:)(a1, a2, a3, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a5);
}

uint64_t MapPhase.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  void (*v19)(char *);
  uint64_t Value;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];

  v26[2] = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = type metadata accessor for GesturePhase(0, v5, a3, a4);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v24 - v8;
  v10 = *(_QWORD *)(a1 + 24);
  v13 = type metadata accessor for GesturePhase(0, v10, v11, v12);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v24 - v16;
  MEMORY[0x23B7C9C04]("ћ;\x1B8|\n", a1, v15);
  result = ResettableGestureRule.resetIfNeeded()();
  if ((result & 1) != 0)
  {
    v25 = v14;
    MapPhase.modifier.getter(v5, v10, v26);
    v19 = (void (*)(char *))v26[0];
    Value = AGGraphGetValue();
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, Value, v6);
    v19(v9);
    swift_release();
    v21 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v22 = MEMORY[0x24BDAC7A8](v21);
    *(&v24 - 2) = a1;
    *(&v24 - 1) = MEMORY[0x23B7C9C04](&protocol conformance descriptor for MapPhase<A, B>, a1, v22);
    _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v17, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)(&v24 - 4), v13, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v23);
    return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v17, v13);
  }
  return result;
}

uint64_t protocol witness for ResettableGestureRule.resetSeed.getter in conformance MapPhase<A, B>()
{
  return MapPhase.resetSeed.getter();
}

uint64_t protocol witness for ResettableGestureRule.lastResetSeed.getter in conformance MapPhase<A, B>()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 12);
}

uint64_t protocol witness for ResettableGestureRule.lastResetSeed.setter in conformance MapPhase<A, B>(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 12) = result;
  return result;
}

uint64_t (*protocol witness for ResettableGestureRule.lastResetSeed.modify in conformance MapPhase<A, B>())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MapPhase<A, B>()
{
  return specialized MapPhase.description.getter();
}

void Gesture.mapPhase<A>(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16[0] = a1;
  v16[1] = a2;
  v14 = type metadata accessor for MapGesture(0, AssociatedTypeWitness, a4, v13);
  v15 = MEMORY[0x23B7C9C04]("ɜ;\x1B\b}\n", v14);
  Gesture.modifier<A>(_:)((uint64_t)v16, a3, v14, a5, v15, a6);
}

void _MapGesture.init(_body:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = type metadata accessor for MapGesture(255, AssociatedTypeWitness, a3, v5);
  MEMORY[0x23B7C9C04]("ɜ;\x1B\b}\n", v6);
  type metadata accessor for ModifierGesture();
}

uint64_t sub_234EF0ED8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v2, v1, a1);
}

uint64_t sub_234EF0F08()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in MapGesture.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(v4 + 32);
  type metadata accessor for GesturePhase(0, *(_QWORD *)(v4 + 16), a3, a4);
  GesturePhase.map<A>(_:)(v5);
}

void Gesture.discrete(_:)(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t AssociatedTypeWitness;

  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  *(_BYTE *)(v8 + 32) = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  Gesture.mapPhase<A>(_:)((uint64_t)partial apply for closure #1 in Gesture.discrete(_:), v8, a2, AssociatedTypeWitness, a3, a4);
}

uint64_t sub_234EF100C()
{
  return swift_release();
}

uint64_t closure #1 in Gesture.discrete(_:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, char *a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, uint64_t, uint64_t, double);
  void (*v19)(char *, char *, uint64_t);
  uint64_t v21;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = type metadata accessor for GesturePhase(0, AssociatedTypeWitness, v7, v8);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v21 - v11;
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v15.n128_f64[0] = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v21 - v16;
  v18 = *(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16);
  if ((a2 & 1) != 0)
  {
    v18(v12, a1, v9, v15.n128_f64[0]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v19 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
      v19(v17, v12, AssociatedTypeWitness);
      v19(a3, v17, AssociatedTypeWitness);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(a3, 0, 1, AssociatedTypeWitness);
      return swift_storeEnumTagMultiPayload();
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  return ((uint64_t (*)(char *, uint64_t, uint64_t, __n128))v18)(a3, a1, v9, v15);
}

void static _MapGesture._makeGesture(gesture:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for MapGesture(255, AssociatedTypeWitness, a4, v6);
  MEMORY[0x23B7C9C04]("ɜ;\x1B\b}\n", v7);
  type metadata accessor for ModifierGesture();
}

void sub_234EF1244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, uint64_t a17, uint64_t a18, __int128 a19, __int128 a20,__int128 a21,__int128 a22,__int128 a23,__int128 a24,__int128 a25,uint64_t a26,int a27)
{
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  LODWORD(a19) = v27;
  v34 = type metadata accessor for _MapGesture(255, v30, v28, v29);
  type metadata accessor for _GraphValue(0, v34, v35, v36);
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static _MapGesture._makeGesture(gesture:inputs:), a1, &a16);
  v37 = *(_OWORD *)(v32 - 128);
  a23 = *(_OWORD *)(v32 - 144);
  a24 = v37;
  a25 = *(_OWORD *)(v32 - 112);
  a26 = *(_QWORD *)(v32 - 96);
  v38 = *(_OWORD *)(v32 - 192);
  a19 = *(_OWORD *)(v32 - 208);
  a20 = v38;
  v39 = *(_OWORD *)(v32 - 160);
  a21 = *(_OWORD *)(v32 - 176);
  a22 = v39;
  a27 = v31;
  static ModifierGesture._makeGesture(gesture:inputs:)();
}

double sub_234EF12E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  double result;
  char v17;
  _OWORD v18[7];
  uint64_t v19;
  int v20;
  double v21;
  uint64_t v22;
  int v23;

  if ((v3 & 8) != 0 && !(swift_conformsToProtocol2() ? v2 : 0))
  {
    _gestureModifierProtocolDescriptor();
    if (swift_conformsToProtocol())
      v8 = 2;
    else
      v8 = 1;
    v17 = v8;
    v9 = *(_OWORD *)(v4 - 128);
    v18[4] = *(_OWORD *)(v4 - 144);
    v18[5] = v9;
    v18[6] = *(_OWORD *)(v4 - 112);
    v19 = *(_QWORD *)(v4 - 96);
    v10 = *(_OWORD *)(v4 - 192);
    v18[0] = *(_OWORD *)(v4 - 208);
    v18[1] = v10;
    v11 = *(_OWORD *)(v4 - 160);
    v18[2] = *(_OWORD *)(v4 - 176);
    v18[3] = v11;
    v20 = v3;
    v12 = type metadata accessor for _GestureOutputs(0, v1, v6, v7);
    v13 = _GestureOutputs.debugData.getter();
    _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v2, &v17, 0x100000000, v18, v13 | ((HIDWORD(v13) & 1) << 32), 0x100000000, v12);
  }
  v14 = v22;
  v15 = v23;
  result = v21;
  *(double *)v0 = v21;
  *(_QWORD *)(v0 + 8) = v14;
  *(_DWORD *)(v0 + 16) = v15;
  return result;
}

void closure #1 in static _MapGesture._makeGesture(gesture:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for _MapGesture(0, a2, a3, a4);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for MapGesture(255, AssociatedTypeWitness, a3, v6);
  MEMORY[0x23B7C9C04]("ɜ;\x1B\b}\n", v7);
  type metadata accessor for ModifierGesture();
}

uint64_t sub_234EF1484(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[18];

  v6[3] = a1;
  v3 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v6, a1, MEMORY[0x24BEE4078], v3, MEMORY[0x24BEE40A8], v4);
  return v6[6];
}

void protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance _MapGesture<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  static _MapGesture._makeGesture(gesture:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t type metadata accessor for MapPhase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MapPhase);
}

uint64_t sub_234EF1508()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Gesture.discrete(_:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in Gesture.discrete(_:)(a1, *(_BYTE *)(v2 + 32), a2);
}

void partial apply for closure #1 in static _MapGesture._makeGesture(gesture:inputs:)(uint64_t a1)
{
  uint64_t *v1;

  closure #1 in static _MapGesture._makeGesture(gesture:inputs:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t type metadata accessor for _MapGesture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _MapGesture);
}

uint64_t instantiation function for generic protocol witness table for _MapGesture<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _MapGesture<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_234EF1568@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = a1[1];
  *a2 = v2;
  a2[1] = v3;
  return swift_retain();
}

uint64_t sub_234EF1574(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  swift_retain();
  result = swift_release();
  *a2 = v4;
  a2[1] = v3;
  return result;
}

uint64_t sub_234EF15B4()
{
  return 16;
}

__n128 sub_234EF15C0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void type metadata completion function for _MapGesture(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = type metadata accessor for MapGesture(255, AssociatedTypeWitness, *(_QWORD *)(a1 + 24), v3);
  MEMORY[0x23B7C9C04]("ɜ;\x1B\b}\n", v4);
  type metadata accessor for ModifierGesture();
}

uint64_t getEnumTagSinglePayload for _MapGesture(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_234EF1710 + 4 * byte_2352AF500[v10]))();
  }
}

void storeEnumTagSinglePayload for _MapGesture(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_234EF1888()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x234EF1900);
}

void sub_234EF1890(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x234EF1898);
  JUMPOUT(0x234EF1900);
}

void sub_234EF18D8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x234EF1900);
}

void sub_234EF18E0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x234EF1900);
}

uint64_t sub_234EF18E8(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x234EF1900);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x234EF18FCLL);
    JUMPOUT(0x234EF18F4);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t instantiation function for generic protocol witness table for MapPhase<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for MapPhase<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in MapPhase<A, B>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t specialized MapPhase.description.getter()
{
  Swift::String v0;

  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0x209286E22070614DLL;
}

ValueMetadata *type metadata accessor for Text.Effect.Drawable()
{
  return &type metadata for Text.Effect.Drawable;
}

uint64_t type metadata accessor for Text.Effect.Configuration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Text.Effect.Configuration);
}

uint64_t Text.Effect.Configuration.StyleModifier.updateContent(_:for:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11 = (char *)&v30 - v10;
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v15, v4, a3, v13);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for ()();
    v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))&v15[*(int *)(swift_getTupleTypeMetadata2() + 48)];
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v15, AssociatedTypeWitness);
    swift_getAssociatedConformanceWitness();
    if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
    {
      v18 = (void *)*a1;
      v19 = v17(*a1, a1[1], a1[2]);
      v21 = v20;
      v31 = v22;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_release();
      result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v31;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
      return swift_release();
    }
  }
  else
  {
    v24 = (void *)*a1;
    v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))v15)(a2, *a1, a1[1], a1[2]);
    v27 = v26;
    v29 = v28;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    result = swift_release();
    *a1 = v25;
    a1[1] = v27;
    a1[2] = v29;
  }
  return result;
}

uint64_t Text.Effect.Configuration.updateContent(_:for:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  Swift::Bool IsNativeType;
  uint64_t v21;
  uint64_t v22;

  v9 = type metadata accessor for Text.Effect.Configuration.StyleModifier(0, a5, a6, a4);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v21 - v12;
  v21 = a3;
  v14 = type metadata accessor for Array();
  swift_bridgeObjectRetain();
  MEMORY[0x23B7C9C04](MEMORY[0x24BEE12B0], v14);
  BidirectionalCollection.reversed()();
  v15 = v22;
  v16 = swift_bridgeObjectRetain();
  v17 = MEMORY[0x23B7C6298](v16, v9);
  result = swift_bridgeObjectRelease();
  if (!v17)
    return swift_bridgeObjectRelease();
  while (!__OFSUB__(v17--, 1))
  {
    IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)();
    if (IsNativeType)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v13, v15+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v17, v9);
    }
    else
    {
      result = _ArrayBuffer._getElementSlowPath(_:)();
      if (v11 != 8)
        goto LABEL_11;
      v22 = result;
      (*(void (**)(char *, uint64_t *, uint64_t))(v10 + 16))(v13, &v22, v9);
      swift_unknownObjectRelease();
    }
    Text.Effect.Configuration.StyleModifier.updateContent(_:for:)(a1, a2, v9);
    result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    if (!v17)
      return swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t Text.Effect.Configuration.drawable(for:timing:quantization:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t FunctionTypeMetadata3;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void (*v16)(uint64_t *__return_ptr, uint64_t, _OWORD *, _OWORD *);
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  int64_t v22;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  _OWORD v36[2];
  uint64_t v37;
  _OWORD v38[3];
  uint64_t v39;

  v9 = *(_QWORD *)(a7 + 16);
  swift_getAssociatedTypeWitness();
  type metadata accessor for Text.Effect.DrawableFragment(255, a6, v9, v10);
  FunctionTypeMetadata3 = swift_getFunctionTypeMetadata3();
  v12 = swift_bridgeObjectRetain();
  if (!MEMORY[0x23B7C6298](v12, FunctionTypeMetadata3))
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  v13 = 0;
  v14 = a5 + 40;
  v15 = (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    Array._checkSubscript(_:wasNativeTypeChecked:)();
    if (__OFADD__(v13, 1))
      break;
    v34 = v13 + 1;
    v16 = *(void (**)(uint64_t *__return_ptr, uint64_t, _OWORD *, _OWORD *))(v14 - 8);
    v17 = *(_OWORD *)(a1 + 16);
    v38[0] = *(_OWORD *)a1;
    v38[1] = v17;
    v38[2] = *(_OWORD *)(a1 + 32);
    v39 = *(_QWORD *)(a1 + 48);
    v18 = *(_OWORD *)(a3 + 16);
    v36[0] = *(_OWORD *)a3;
    v36[1] = v18;
    v37 = *(_QWORD *)(a3 + 32);
    swift_retain();
    v16(&v35, a2, v38, v36);
    v19 = v35;
    v20 = *(_QWORD *)(v35 + 16);
    v21 = v15[2];
    v22 = v21 + v20;
    if (__OFADD__(v21, v20))
      goto LABEL_25;
    isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
    if ((_DWORD)isUniquelyReferenced_nonNull_native && v22 <= v15[3] >> 1)
    {
      if (*(_QWORD *)(v19 + 16))
        goto LABEL_15;
    }
    else
    {
      if (v21 <= v22)
        v24 = v21 + v20;
      else
        v24 = v21;
      v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v24, 1, v15);
      if (*(_QWORD *)(v19 + 16))
      {
LABEL_15:
        v25 = v15[2];
        if ((v15[3] >> 1) - v25 < v20)
          goto LABEL_27;
        v26 = (unint64_t)&v15[2 * v25 + 4];
        if (v19 + 32 < v26 + 16 * v20 && v26 < v19 + 32 + 16 * v20)
          goto LABEL_29;
        swift_arrayInitWithCopy();
        if (v20)
        {
          v27 = v15[2];
          v28 = __OFADD__(v27, v20);
          v29 = v27 + v20;
          if (v28)
            goto LABEL_28;
          v15[2] = v29;
        }
        goto LABEL_4;
      }
    }
    if (v20)
      goto LABEL_26;
LABEL_4:
    swift_bridgeObjectRelease();
    swift_release();
    v14 += 16;
    ++v13;
    if (v34 == MEMORY[0x23B7C6298](a5, FunctionTypeMetadata3))
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v15;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for Text.Effect.Configuration.StyleModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Text.Effect.Configuration.StyleModifier);
}

ValueMetadata *type metadata accessor for Text.Effect.Drawable.Fragment()
{
  return &type metadata for Text.Effect.Drawable.Fragment;
}

uint64_t type metadata completion function for Text.Effect.Configuration.StyleModifier()
{
  uint64_t result;
  unint64_t v1;
  _QWORD v2[6];

  v2[4] = MEMORY[0x24BEE4AF0] + 64;
  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v2[5] = v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Text.Effect.Configuration.StyleModifier(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (((v6 + 7) & 0xFFFFFFFFFFFFFFF8) != 0 && ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFFFFFFFF0)
    v7 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  else
    v7 = 16;
  v8 = *(_DWORD *)(v5 + 80);
  if ((v8 & 0x1000F8) != 0 || (v7 | 1) > 0x18)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((unsigned __int16)((v8 & 0xF8) + 23) & (unsigned __int16)~(v8 & 0xF8) & 0x1F8));
  }
  else
  {
    v11 = *((unsigned __int8 *)a2 + v7);
    if (v11 >= 2)
      v11 = *(_DWORD *)a2 + 2;
    if (v11 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      v12 = (_QWORD *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      v13 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      v14 = v13[1];
      *v12 = *v13;
      v12[1] = v14;
      *((_BYTE *)a1 + v7) = 1;
    }
    else
    {
      v15 = a2[1];
      *a1 = *a2;
      a1[1] = v15;
      *((_BYTE *)a1 + v7) = 0;
    }
  }
  swift_retain();
  return a1;
}

uint64_t destroy for Text.Effect.Configuration.StyleModifier(_DWORD *a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = 16;
  if (((v4 + 7) & 0xFFFFFFFFFFFFFFF8) != 0 && ((v4 + 7) & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFFFFFFFF0)
    v5 = ((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  v6 = *((unsigned __int8 *)a1 + v5);
  v7 = v5 & 0xFFFFFFF8;
  if (v6 >= 2 && v7 != 0)
    v6 = *a1 + 2;
  if (v6 == 1)
    (*(void (**)(_DWORD *, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
  return swift_release();
}

_QWORD *initializeWithCopy for Text.Effect.Configuration.StyleModifier(_QWORD *a1, unint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  _QWORD *v10;
  char v11;
  uint64_t v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (((v6 + 7) & 0xFFFFFFFFFFFFFFF8) != 0 && ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFFFFFFFF0)
    v7 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  else
    v7 = 16;
  v8 = *(unsigned __int8 *)(a2 + v7);
  if (v8 >= 2 && (v7 & 0xFFFFFFF8) != 0)
    v8 = *(_DWORD *)a2 + 2;
  if (v8 == 1)
  {
    (*(void (**)(_QWORD *, unint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    v10 = (_QWORD *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    a2 = (a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = 1;
  }
  else
  {
    v11 = 0;
    v10 = a1;
  }
  v12 = *(_QWORD *)(a2 + 8);
  *v10 = *(_QWORD *)a2;
  v10[1] = v12;
  swift_retain();
  *((_BYTE *)a1 + v7) = v11;
  return a1;
}

_DWORD *assignWithCopy for Text.Effect.Configuration.StyleModifier(_DWORD *a1, _DWORD *a2)
{
  unint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v10;
  _QWORD *v12;
  char v13;
  uint64_t v14;

  if (a1 != a2)
  {
    v3 = (unint64_t)a2;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v6 = *(_QWORD *)(v5 + 64);
    if (((v6 + 7) & 0xFFFFFFFFFFFFFFF8) != 0 && ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFFFFFFFF0)
      v7 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    else
      v7 = 16;
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2 && (v7 & 0xFFFFFFF8) != 0)
      v8 = *a1 + 2;
    if (v8 == 1)
      (*(void (**)(_DWORD *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    swift_release();
    v10 = *(unsigned __int8 *)(v3 + v7);
    if ((v7 & 0xFFFFFFF8) != 0 && v10 >= 2)
      v10 = *(_DWORD *)v3 + 2;
    if (v10 == 1)
    {
      (*(void (**)(_DWORD *, unint64_t, uint64_t))(v5 + 16))(a1, v3, AssociatedTypeWitness);
      v12 = (_QWORD *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      v3 = (v3 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
      v13 = 1;
    }
    else
    {
      v13 = 0;
      v12 = a1;
    }
    v14 = *(_QWORD *)(v3 + 8);
    *v12 = *(_QWORD *)v3;
    v12[1] = v14;
    *((_BYTE *)a1 + v7) = v13;
    swift_retain();
  }
  return a1;
}

_OWORD *initializeWithTake for Text.Effect.Configuration.StyleModifier(_OWORD *a1, _DWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  _OWORD *v10;
  char v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (((v6 + 7) & 0xFFFFFFFFFFFFFFF8) != 0 && ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFFFFFFFF0)
    v7 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  else
    v7 = 16;
  v8 = *((unsigned __int8 *)a2 + v7);
  if (v8 >= 2 && (v7 & 0xFFFFFFF8) != 0)
    v8 = *a2 + 2;
  if (v8 == 1)
  {
    (*(void (**)(_OWORD *, _DWORD *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    v10 = (_OWORD *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    a2 = (_DWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = 1;
  }
  else
  {
    v11 = 0;
    v10 = a1;
  }
  *v10 = *(_OWORD *)a2;
  *((_BYTE *)a1 + v7) = v11;
  return a1;
}

_DWORD *assignWithTake for Text.Effect.Configuration.StyleModifier(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v10;
  _OWORD *v12;
  char v13;

  if (a1 != a2)
  {
    v3 = a2;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v6 = *(_QWORD *)(v5 + 64);
    if (((v6 + 7) & 0xFFFFFFFFFFFFFFF8) != 0 && ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFFFFFFFF0)
      v7 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    else
      v7 = 16;
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2 && (v7 & 0xFFFFFFF8) != 0)
      v8 = *a1 + 2;
    if (v8 == 1)
      (*(void (**)(_DWORD *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    swift_release();
    v10 = *((unsigned __int8 *)v3 + v7);
    if ((v7 & 0xFFFFFFF8) != 0 && v10 >= 2)
      v10 = *v3 + 2;
    if (v10 == 1)
    {
      (*(void (**)(_DWORD *, _DWORD *, uint64_t))(v5 + 32))(a1, v3, AssociatedTypeWitness);
      v12 = (_OWORD *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      v3 = (_DWORD *)(((unint64_t)v3 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      v13 = 1;
    }
    else
    {
      v13 = 0;
      v12 = a1;
    }
    *v12 = *(_OWORD *)v3;
    *((_BYTE *)a1 + v7) = v13;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.Configuration.StyleModifier(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  unint64_t v5;
  uint64_t v6;
  char v7;
  unsigned int v8;
  int v9;
  int v11;
  int v12;
  unsigned int v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = ((*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v5 == 16
    || ((*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFFFFFFFF0)
  {
    v5 = 16;
  }
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_20;
  v6 = v5 | 1;
  v7 = 8 * (v5 | 1);
  if ((v5 | 1) <= 3)
  {
    v8 = (a2 + ~(-1 << v7) - 254) >> v7;
    if (v8 > 0xFFFE)
    {
      v9 = *(_DWORD *)&a1[v6];
      if (!v9)
        goto LABEL_20;
      goto LABEL_13;
    }
    if (v8 > 0xFE)
    {
      v9 = *(unsigned __int16 *)&a1[v6];
      if (!*(_WORD *)&a1[v6])
        goto LABEL_20;
      goto LABEL_13;
    }
    if (!v8)
      goto LABEL_20;
  }
  v9 = a1[v6];
  if (!a1[v6])
  {
LABEL_20:
    v13 = a1[v5];
    if (v13 >= 2)
      return (v13 ^ 0xFF) + 1;
    else
      return 0;
  }
LABEL_13:
  v11 = (v9 - 1) << v7;
  if (v6 >= 4)
    v11 = 0;
  if ((_DWORD)v6 == 1)
    v12 = *a1;
  else
    v12 = *(_DWORD *)a1;
  return (v12 | v11) + 255;
}

void storeEnumTagSinglePayload for Text.Effect.Configuration.StyleModifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t AssociatedTypeWitness;
  unint64_t v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = ((*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v7 == 16
    || ((*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFFFFFFFF0)
  {
    v7 = 16;
  }
  v8 = v7 | 1;
  if (a3 < 0xFF)
  {
    v9 = 0;
  }
  else if (v8 <= 3)
  {
    v11 = (a3 + ~(-1 << (8 * v8)) - 254) >> (8 * v8);
    if (v11 > 0xFFFE)
    {
      v9 = 4u;
    }
    else if (v11 >= 0xFF)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 != 0;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v10 = a2 - 255;
  if (v8 < 4)
  {
    v10 &= ~(-1 << (8 * v8));
    bzero(a1, v8);
    if ((_DWORD)v8 == 1)
    {
      *a1 = v10;
      goto LABEL_18;
    }
  }
  else
  {
    bzero(a1, v7 | 1);
  }
  *(_DWORD *)a1 = v10;
LABEL_18:
  __asm { BR              X10 }
}

uint64_t getEnumTag for Text.Effect.Configuration.StyleModifier(_DWORD *a1)
{
  uint64_t AssociatedTypeWitness;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = ((*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v3 == 16
    || ((*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFFFFFFFF0)
  {
    v3 = 16;
  }
  result = *((unsigned __int8 *)a1 + v3);
  v5 = v3 & 0xFFFFFFF8;
  if (result >= 2 && v5 != 0)
    return (*a1 + 2);
  return result;
}

void destructiveInjectEnumTag for Text.Effect.Configuration.StyleModifier(unsigned int *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  size_t v5;
  char v6;
  unsigned int v7;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (((*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) != 0
    && ((*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFFFFFFFF0)
  {
    v5 = ((*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    v5 = 16;
  }
  if (a2 > 1)
  {
    if ((_DWORD)v5)
      v6 = 2;
    else
      v6 = a2;
    if ((_DWORD)v5)
      v7 = a2 - 2;
    else
      v7 = 0;
    *((_BYTE *)a1 + v5) = v6;
    bzero(a1, v5);
    *a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + v5) = a2;
  }
}

void Gesture.repeatCount(_:maximumDelay:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];
  _QWORD v16[2];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  RepeatGesture.init(count:maximumDelay:)(a1, (uint64_t)v16, a5);
  v15[0] = v16[0];
  v15[1] = v16[1];
  v13 = type metadata accessor for RepeatGesture(0, AssociatedTypeWitness, v11, v12);
  v14 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for RepeatGesture<A>, v13);
  Gesture.modifier<A>(_:)((uint64_t)v15, a2, v13, a3, v14, a4);
}

uint64_t RepeatGesture.init(count:maximumDelay:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  if (result <= 0 || a3 < 0.0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *(_QWORD *)a2 = result;
    *(double *)(a2 + 8) = a3;
  }
  return result;
}

uint64_t type metadata accessor for RepeatGesture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RepeatGesture);
}

uint64_t RepeatGesture.count.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t RepeatGesture.count.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*RepeatGesture.count.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double RepeatGesture.maximumDelay.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void RepeatGesture.maximumDelay.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

uint64_t (*RepeatGesture.maximumDelay.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t static RepeatGesture._makeGesture(modifier:inputs:body:)@<X0>(int *a1@<X0>, __int128 *a2@<X1>, void (*a3)(_QWORD *__return_ptr, __int128 *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t result;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  int v35;
  unsigned int v39;
  unsigned int v40;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  _QWORD v51[2];
  int v52;
  _BYTE v53[16];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD v57[5];
  BOOL v58;
  uint64_t v59;
  char v60;
  int v61;
  int v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _BYTE v69[28];
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  _BYTE v76[28];
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  _BYTE v83[28];
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  v35 = *a1;
  v5 = a2[5];
  v67 = a2[4];
  v68 = v5;
  *(_OWORD *)v69 = a2[6];
  *(_OWORD *)&v69[12] = *(__int128 *)((char *)a2 + 108);
  v6 = a2[1];
  v63 = *a2;
  v64 = v6;
  v7 = a2[3];
  v65 = a2[2];
  v66 = v7;
  type metadata accessor for External<UInt32>();
  lazy protocol witness table accessor for type External<UInt32> and conformance External<A>();
  v8 = v63;
  v9 = v64;
  v10 = DWORD2(v64);
  v32 = Attribute.init<A>(body:value:flags:update:)();
  v33 = DWORD2(v64);
  v28 = DWORD2(v63);
  v29 = DWORD1(v65);
  v11 = *((_QWORD *)&v65 + 1);
  v12 = v66;
  v39 = v65;
  v40 = DWORD2(v66);
  v49 = v67;
  v50 = HIDWORD(v66);
  v47 = DWORD2(v67);
  v48 = DWORD1(v67);
  v46 = HIDWORD(v67);
  v44 = HIDWORD(v64);
  v45 = v68;
  v14 = (void *)*((_QWORD *)&v68 + 1);
  v13 = *(_QWORD *)v69;
  v42 = *(_DWORD *)&v69[12];
  v43 = *(_DWORD *)&v69[8];
  v30 = *(_DWORD *)&v69[24];
  v41 = *(_DWORD *)&v69[20];
  v31 = *(_DWORD *)&v69[16];
  *(_QWORD *)&v77 = __PAIR64__(v32, *(unsigned int *)&v69[16]);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  outlined retain of _GestureInputs((uint64_t)&v63);
  lazy protocol witness table accessor for type RepeatResetSeed and conformance RepeatResetSeed();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15 = v14;
  swift_bridgeObjectRetain();
  v34 = Attribute.init<A>(body:value:flags:update:)();
  *(_QWORD *)&v70 = v8;
  DWORD2(v70) = v28;
  *(_QWORD *)&v71 = v9;
  *((_QWORD *)&v71 + 1) = __PAIR64__(v44, v10);
  *(_QWORD *)&v72 = __PAIR64__(v29, v39);
  *((_QWORD *)&v72 + 1) = v11;
  *(_QWORD *)&v73 = v12;
  *((_QWORD *)&v73 + 1) = __PAIR64__(v50, v40);
  *(_QWORD *)&v74 = __PAIR64__(v48, v49);
  *((_QWORD *)&v74 + 1) = __PAIR64__(v46, v47);
  LODWORD(v75) = v45;
  *((_QWORD *)&v75 + 1) = v15;
  *(_QWORD *)v76 = v13;
  *(_DWORD *)&v76[8] = v43;
  *(_DWORD *)&v76[12] = v42;
  *(_DWORD *)&v76[16] = v34;
  *(_DWORD *)&v76[20] = v41;
  *(_DWORD *)&v76[24] = v30;
  outlined retain of _GestureInputs((uint64_t)&v70);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  v81 = v74;
  v82 = v75;
  *(_OWORD *)v83 = *(_OWORD *)v76;
  *(_OWORD *)&v83[12] = *(_OWORD *)&v76[12];
  v77 = v70;
  v78 = v71;
  v79 = v72;
  v80 = v73;
  a3(v51, &v77);
  outlined release of _GestureInputs((uint64_t)&v70);
  v57[0] = v35;
  v57[1] = v51[0];
  v57[2] = v28;
  v57[3] = v31;
  v57[4] = v32;
  v58 = (v30 & 0x10) != 0;
  v59 = 0;
  v60 = 1;
  v61 = 0;
  v62 = 0;
  v54 = type metadata accessor for GesturePhase(0, a4, v16, v17);
  v20 = type metadata accessor for RepeatPhase(0, a4, v18, v19);
  v55 = v20;
  v56 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for RepeatPhase<A>, v20);
  v21 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v57, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v53, v20, MEMORY[0x24BEE4078], v21, MEMORY[0x24BEE40A8], v22);
  v23 = v77;
  *(_QWORD *)&v77 = v8;
  DWORD2(v77) = v28;
  *(_QWORD *)&v78 = v9;
  *((_QWORD *)&v78 + 1) = __PAIR64__(v44, v33);
  *(_QWORD *)&v79 = __PAIR64__(v29, v39);
  *((_QWORD *)&v79 + 1) = v11;
  *(_QWORD *)&v80 = v12;
  *((_QWORD *)&v80 + 1) = __PAIR64__(v50, v40);
  *(_QWORD *)&v81 = __PAIR64__(v48, v49);
  *((_QWORD *)&v81 + 1) = __PAIR64__(v46, v47);
  LODWORD(v82) = v45;
  *((_QWORD *)&v82 + 1) = v15;
  *(_QWORD *)v83 = v13;
  *(_DWORD *)&v83[8] = v43;
  *(_DWORD *)&v83[12] = v42;
  *(_DWORD *)&v83[16] = v34;
  *(_DWORD *)&v83[20] = v41;
  *(_DWORD *)&v83[24] = v30;
  result = outlined release of _GestureInputs((uint64_t)&v77);
  v25 = HIDWORD(v51[0]);
  v26 = v51[1];
  v27 = v52;
  *(_DWORD *)a5 = v23;
  *(_DWORD *)(a5 + 4) = v25;
  *(_QWORD *)(a5 + 8) = v26;
  *(_DWORD *)(a5 + 16) = v27;
  return result;
}

uint64_t protocol witness for static GestureModifier._makeGesture(modifier:inputs:body:) in conformance RepeatGesture<A>@<X0>(int *a1@<X0>, __int128 *a2@<X1>, void (*a3)(_QWORD *__return_ptr, __int128 *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return static RepeatGesture._makeGesture(modifier:inputs:body:)(a1, a2, a3, *(_QWORD *)(a4 + 16), a5);
}

_DWORD *protocol witness for Rule.value.getter in conformance RepeatResetSeed@<X0>(_DWORD *a1@<X8>)
{
  int v2;
  _DWORD *result;

  v2 = *(_DWORD *)AGGraphGetValue();
  result = (_DWORD *)AGGraphGetValue();
  *a1 = *result + v2;
  return result;
}

void RepeatPhase.resetPhase()()
{
  uint64_t v0;

  *(_DWORD *)(v0 + 36) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_BYTE *)(v0 + 32) = 1;
}

uint64_t RepeatPhase.updateValue()(uint64_t a1)
{
  double *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  double v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  char v55;
  double v56;
  char v57;
  int v58;
  int v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v49 = (char *)v38 - v8;
  v11 = type metadata accessor for GesturePhase(0, v3, v9, v10);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)v38 - v17;
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for RepeatPhase<A>, a1, v16);
  result = ResettableGestureRule.resetIfNeeded()();
  if ((result & 1) != 0)
  {
    v44 = v6;
    v45 = v4;
    v48 = v18;
    v22 = v1[3];
    v23 = *((unsigned __int8 *)v1 + 32);
    if (v23 == 1)
    {
      v24 = *((_DWORD *)v1 + 2);
      goto LABEL_6;
    }
    v24 = *((_DWORD *)v1 + 2);
    type metadata accessor for RepeatPhase(0, v3, v20, v21);
    if (*(double *)AGGraphGetValue() <= v22)
    {
LABEL_6:
      v46 = v12;
      v38[1] = v3;
      v29 = *((_DWORD *)v1 + 1);
      v31 = *((_DWORD *)v1 + 3);
      v30 = *((_DWORD *)v1 + 4);
      v32 = *((unsigned __int8 *)v1 + 20);
      v34 = *((_DWORD *)v1 + 9);
      v33 = *((_DWORD *)v1 + 10);
      v50 = *(_DWORD *)v1;
      v51 = v29;
      v39 = v29;
      v40 = v31;
      v52 = v24;
      v53 = v31;
      v41 = v30;
      v42 = v32;
      v54 = v30;
      v55 = v32;
      v56 = v22;
      v57 = v23;
      v58 = v34;
      v59 = v33;
      v43 = v33;
      DelayedPhase.childPhase.getter(a1, v20, v21, (uint64_t)v14);
      v47 = v11;
      v35 = (char *)&loc_234EF3408 + dword_234EF3BD4[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    v25 = (uint64_t)v48;
    v26 = swift_storeEnumTagMultiPayload();
    v27 = MEMORY[0x24BDAC7A8](v26);
    v36 = a1;
    v37 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for RepeatPhase<A>, a1, v27);
    _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v25, (uint64_t)closure #1 in StatefulRule.value.setterpartial apply, (uint64_t)&v38[-4], v11, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v28);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v25, v11);
  }
  return result;
}

uint64_t closure #2 in RepeatPhase.updateValue()()
{
  return AGGraphSetValue();
}

void type metadata accessor for External<UInt32>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for External<UInt32>)
  {
    v0 = type metadata accessor for External();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for External<UInt32>);
  }
}

unint64_t lazy protocol witness table accessor for type RepeatResetSeed and conformance RepeatResetSeed()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RepeatResetSeed and conformance RepeatResetSeed;
  if (!lazy protocol witness table cache variable for type RepeatResetSeed and conformance RepeatResetSeed)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for RepeatResetSeed, &type metadata for RepeatResetSeed);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RepeatResetSeed and conformance RepeatResetSeed);
  }
  return result;
}

uint64_t type metadata accessor for RepeatPhase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RepeatPhase);
}

uint64_t getEnumTagSinglePayload for RepeatPhase(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 44))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 20);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for RepeatPhase(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 44) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 44) = 0;
    if (a2)
      *(_BYTE *)(result + 20) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for RepeatResetSeed()
{
  return &type metadata for RepeatResetSeed;
}

uint64_t instantiation function for generic protocol witness table for RepeatPhase<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for RepeatPhase<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in RepeatPhase<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t sub_234EF3DDC()
{
  return swift_deallocObject();
}

uint64_t _s7SwiftUI11RepeatPhase33_BECD07FC80B4CA0BF429B041392E806ALLV11updateValueyyFyycfU0_TA_0()
{
  return AGGraphSetValue();
}

uint64_t static EmptyGesture._makeGesture(gesture:inputs:)@<X0>(__int128 *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v15;
  char v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD v23[2];

  v6 = type metadata accessor for GesturePhase(0, a2, a2, a3);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v15 - v8;
  v10 = a1[5];
  v21 = a1[4];
  v22 = v10;
  v23[0] = a1[6];
  *(_OWORD *)((char *)v23 + 12) = *(__int128 *)((char *)a1 + 108);
  v11 = a1[1];
  v17 = *a1;
  v18 = v11;
  v12 = a1[3];
  v19 = a1[2];
  v20 = v12;
  swift_storeEnumTagMultiPayload();
  v16 = 4;
  v13 = _GestureInputs.intern<A>(_:id:)((uint64_t)v9, &v16, v6);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return _GestureOutputs.init(phase:)(v13, a4);
}

uint64_t instantiation function for generic protocol witness table for EmptyGesture<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EmptyGesture<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance EmptyGesture<A>@<X0>(__int128 *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return static EmptyGesture._makeGesture(gesture:inputs:)(a1, *(_QWORD *)(a2 + 16), a3, a4);
}

uint64_t type metadata accessor for EmptyGesture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EmptyGesture);
}

uint64_t FormatStyle.exactSizeVariant(_:)(char *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t TupleTypeMetadata2;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, double);
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char *v25;
  uint64_t (*v26)(char *, uint64_t *, uint64_t, uint64_t, double);
  char v27;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  _QWORD v35[2];
  char *v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  _QWORD v42[3];
  uint64_t v43;
  uint64_t v44;

  v36 = a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v8 = (char *)v35 - v7;
  v9 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = swift_getTupleTypeMetadata2();
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v35 - v15;
  v17 = *a2;
  v18 = *(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16);
  v18(v12, v3, a3, v14);
  type metadata accessor for SizeAdaptiveFormatStyle();
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(&v38, (uint64_t)v42);
    v19 = v43;
    v20 = v44;
    v21 = __swift_project_boxed_opaque_existential_1(v42, v43);
    v35[0] = TupleTypeMetadata2;
    v35[1] = v35;
    v37 = v17;
    v22 = *(_QWORD *)(v19 - 8);
    v23 = MEMORY[0x24BDAC7A8](v21);
    v25 = (char *)v35 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
    v27 = v26(v25, &v37, v19, v20, v23);
    *((_QWORD *)&v39 + 1) = v19;
    v40 = v20;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v38);
    (*(void (**)(uint64_t *, char *, uint64_t))(v22 + 32))(boxed_opaque_existential_1, v25, v19);
    v41 = v27 & 1;
    type metadata accessor for (style: SizeAdaptiveFormatStyle, exact: Bool)();
    v29 = v35[0];
    swift_dynamicCast();
    LOBYTE(v29) = v8[*(int *)(v29 + 48)];
    v30 = *(int *)(v13 + 48);
    v31 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v31(v16, v8, a3);
    v16[v30] = v29;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
  }
  else
  {
    v40 = 0;
    v38 = 0u;
    v39 = 0u;
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)&v38, &lazy cache variable for type metadata for SizeAdaptiveFormatStyle?, (void (*)(uint64_t))type metadata accessor for SizeAdaptiveFormatStyle);
    v32 = *(int *)(v13 + 48);
    ((void (*)(char *, uint64_t, uint64_t))v18)(v16, v3, a3);
    v16[v32] = v17 == 0;
    v31 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  }
  v33 = v16[*(int *)(v13 + 48)];
  v31(v36, v16, a3);
  return v33;
}

unint64_t type metadata accessor for SizeAdaptiveFormatStyle()
{
  unint64_t result;

  result = lazy cache variable for type metadata for SizeAdaptiveFormatStyle;
  if (!lazy cache variable for type metadata for SizeAdaptiveFormatStyle)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SizeAdaptiveFormatStyle);
  }
  return result;
}

void type metadata accessor for (style: SizeAdaptiveFormatStyle, exact: Bool)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (style: SizeAdaptiveFormatStyle, exact: Bool))
  {
    type metadata accessor for SizeAdaptiveFormatStyle();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (style: SizeAdaptiveFormatStyle, exact: Bool));
  }
}

uint64_t FormatStyle.sizeVariant(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v4;

  v4 = *a1;
  return FormatStyle.exactSizeVariant(_:)(a3, &v4, a2);
}

Swift::Bool __swiftcall TextSizeVariant.adjust()()
{
  uint64_t *v0;
  uint64_t v1;
  BOOL v2;
  Swift::Bool result;

  v1 = *v0;
  if (*v0 && (v2 = __OFSUB__(v1, 1), --v1, v2))
  {
    __break(1u);
  }
  else
  {
    *v0 = v1;
    return v1 == 0;
  }
  return result;
}

uint64_t specialized static Date.FormatStyle.adapt<A>(_:to:fieldRemovals:addEra:removeEra:addYear:removeYear:)(char *a1, char *a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), uint64_t a6, void (*a7)(uint64_t), uint64_t a8, void (*a9)(char *), uint64_t a10, void (*a11)(_QWORD), uint64_t a12, uint64_t (*a13)(uint64_t), unint64_t *a14, uint64_t a15)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t, double);
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  void (*v51)(char *);
  void (*v52)(char *, char *, uint64_t);
  uint64_t result;
  uint64_t (*v54)(uint64_t);
  char *v55;
  void (*v56)(_QWORD);
  void (*v57)(uint64_t, char *, uint64_t);
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t);
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char v64;
  char *v65;
  char *v66;
  char v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  void (*v72)(char *, char *, uint64_t);
  char *v73;
  char *v74;
  void (*v75)(char *);
  void (*v76)(char *, char *, uint64_t);
  char *v77;
  char *v78;
  char v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  void (*v87)(uint64_t);
  char *v88;
  unint64_t *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  void (*v93)(_QWORD);
  uint64_t v94;
  uint64_t v95;
  char *v96;
  void (*v97)(_QWORD);
  uint64_t v98;
  uint64_t (*v99)(uint64_t);
  void (*v100)(uint64_t, char *, uint64_t);
  char *v101;
  char *v102;
  char *v103;

  v93 = a5;
  v94 = a8;
  v92 = a6;
  v99 = a13;
  v19 = a13(0);
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v83 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v101 = (char *)&v83 - v24;
  MEMORY[0x24BDAC7A8](v25);
  v96 = (char *)&v83 - v26;
  MEMORY[0x24BDAC7A8](v27);
  v29 = (char *)&v83 - v28;
  MEMORY[0x24BDAC7A8](v30);
  MEMORY[0x24BDAC7A8](v31);
  v33 = (char *)&v83 - v32;
  MEMORY[0x24BDAC7A8](v34);
  MEMORY[0x24BDAC7A8](v35);
  v97 = (void (*)(_QWORD))((char *)&v83 - v36);
  MEMORY[0x24BDAC7A8](v37);
  v39 = (char *)&v83 - v38;
  v44 = MEMORY[0x24BDAC7A8](v40);
  v102 = (char *)&v83 - v45;
  v46 = *(void (**)(uint64_t, uint64_t, uint64_t, double))(v20 + 16);
  if (!v41)
  {
    v46((uint64_t)a1, (uint64_t)a2, v19, v44);
    return 1;
  }
  v86 = v42;
  v87 = a7;
  v98 = v41;
  v88 = a1;
  v47 = a15;
  v89 = a14;
  v90 = v43;
  v103 = a2;
  v100 = (void (*)(uint64_t, char *, uint64_t))v46;
  v46((uint64_t)v39, (uint64_t)a2, v19, v44);
  v48 = *(char **)(a4 + 16);
  v95 = a4;
  v91 = v29;
  if (v48)
  {
    v84 = a15;
    v85 = v22;
    swift_bridgeObjectRetain();
    v49 = a4 + 40;
    v50 = v48;
    do
    {
      v51 = *(void (**)(char *))(v49 - 8);
      swift_retain();
      v51(v39);
      swift_release();
      (*(void (**)(char *, uint64_t))(v20 + 8))(v39, v19);
      v52 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
      v52(v39, v33, v19);
      v49 += 16;
      --v50;
    }
    while (v50);
    swift_bridgeObjectRelease();
    v47 = v84;
    v22 = v85;
  }
  else
  {
    v52 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
  }
  v52(v102, v39, v19);
  v54 = (uint64_t (*)(uint64_t))lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(v89, v99, v47);
  v55 = v103;
  LODWORD(v89) = dispatch thunk of static Equatable.== infix(_:_:)();
  v56 = v97;
  v57 = v100;
  v100((uint64_t)v97, v55, v19);
  v58 = v90;
  v57(v90, v102, v19);
  v99 = v54;
  if ((v89 & 1) != 0)
  {
    v59 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    v59(v58, v19);
    v59((uint64_t)v56, v19);
    v60 = v91;
    v61 = v103;
    v57((uint64_t)v91, v103, v19);
    v62 = v96;
    v57((uint64_t)v96, v102, v19);
  }
  else
  {
    v63 = v86;
    v93(v56);
    v87(v63);
    v59 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    v59(v63, v19);
    v64 = dispatch thunk of static Equatable.== infix(_:_:)();
    v59((uint64_t)v33, v19);
    v59(v58, v19);
    v59((uint64_t)v97, v19);
    v65 = v91;
    v57((uint64_t)v91, v103, v19);
    v57((uint64_t)v96, v102, v19);
    if ((v64 & 1) != 0)
    {
      v97 = a11;
      a9(v65);
      v57 = v100;
      v97(v63);
      v59(v63, v19);
      v66 = v96;
      v67 = dispatch thunk of static Equatable.== infix(_:_:)();
      v59((uint64_t)v33, v19);
      v59((uint64_t)v66, v19);
      v59((uint64_t)v65, v19);
      v68 = v101;
      v57((uint64_t)v101, v103, v19);
      if ((v67 & 1) != 0)
      {
        v87((uint64_t)v68);
        v59((uint64_t)v68, v19);
        v52(v68, v33, v19);
      }
      v69 = v102;
      v70 = v68;
      goto LABEL_17;
    }
    v60 = v65;
    v62 = v96;
    v61 = v103;
  }
  v59((uint64_t)v62, v19);
  v59((uint64_t)v60, v19);
  v70 = v101;
  v57((uint64_t)v101, v61, v19);
  v69 = v102;
LABEL_17:
  v57((uint64_t)v22, v70, v19);
  if (v48)
  {
    v97 = (void (*)(_QWORD))v33;
    v71 = swift_bridgeObjectRetain() + 40;
    while (1)
    {
      v103 = v48;
      v74 = v22;
      v75 = *(void (**)(char *))(v71 - 8);
      swift_retain();
      v76 = v52;
      v77 = (char *)v97;
      v75(v70);
      v59((uint64_t)v70, v19);
      v78 = v77;
      v52 = v76;
      v76(v70, v78, v19);
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_release();
        v59((uint64_t)v70, v19);
        v59((uint64_t)v102, v19);
        v81 = v88;
        v82 = v74;
        goto LABEL_29;
      }
      v22 = v74;
      v79 = dispatch thunk of static Equatable.== infix(_:_:)();
      swift_release();
      result = ((uint64_t (*)(char *, uint64_t))v59)(v74, v19);
      if ((v79 & 1) != 0)
      {
        v72 = (void (*)(char *, char *, uint64_t))v100;
        v73 = v103;
      }
      else
      {
        v80 = v98 - 1;
        v72 = (void (*)(char *, char *, uint64_t))v100;
        v73 = v103;
        if (__OFSUB__(v98, 1))
        {
          __break(1u);
          return result;
        }
        --v98;
        if (!v80)
        {
          swift_bridgeObjectRelease();
          v59((uint64_t)v102, v19);
          v76(v88, v101, v19);
          return 1;
        }
      }
      v70 = v101;
      v72(v74, v101, v19);
      v71 += 16;
      v48 = v73 - 1;
      if (!v48)
      {
        swift_bridgeObjectRelease();
        v69 = v102;
        break;
      }
    }
  }
  v59((uint64_t)v22, v19);
  v59((uint64_t)v69, v19);
  v81 = v88;
  v82 = v70;
LABEL_29:
  v52(v81, v82, v19);
  return 0;
}

uint64_t closure #1 in Date.FormatStyle.withSizeVariant(_:)(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BDCE090], (void (*)(uint64_t))MEMORY[0x24BDCE080], MEMORY[0x24BDCE018]);
}

uint64_t closure #2 in Date.FormatStyle.withSizeVariant(_:)(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BDCE090], (void (*)(uint64_t))MEMORY[0x24BDCE088], MEMORY[0x24BDCE018]);
}

uint64_t closure #3 in Date.FormatStyle.withSizeVariant(_:)(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BDCE130], (void (*)(uint64_t))MEMORY[0x24BDCE110], (void (*)(char *))MEMORY[0x24BDCE038]);
}

uint64_t closure #4 in Date.FormatStyle.withSizeVariant(_:)(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BDCE130], (void (*)(uint64_t))MEMORY[0x24BDCE120], (void (*)(char *))MEMORY[0x24BDCE038]);
}

uint64_t protocol witness for SizeAdaptiveFormatStyle.withSizeVariant(_:) in conformance Date.FormatStyle(char *a1, uint64_t *a2)
{
  char *v2;
  uint64_t v4;

  v4 = *a2;
  if (one-time initialization token for dateFormatStyleFieldRemovals != -1)
    swift_once();
  return specialized static Date.FormatStyle.adapt<A>(_:to:fieldRemovals:addEra:removeEra:addYear:removeYear:)(a1, v2, v4, (uint64_t)dateFormatStyleFieldRemovals._rawValue, (void (*)(_QWORD))closure #1 in Date.FormatStyle.withSizeVariant(_:), 0, (void (*)(uint64_t))closure #2 in Date.FormatStyle.withSizeVariant(_:), 0, (void (*)(char *))closure #3 in Date.FormatStyle.withSizeVariant(_:), 0, (void (*)(_QWORD))closure #4 in Date.FormatStyle.withSizeVariant(_:), 0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE2A0], &lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle, MEMORY[0x24BDCE2B8]) & 1;
}

uint64_t instantiation function for generic protocol witness table for Date.FormatStyle(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE2A0], MEMORY[0x24BDCE290]);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  result = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE2A0], MEMORY[0x24BDCE288]);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void one-time initialization function for dateFormatStyleFieldRemovals()
{
  dateFormatStyleFieldRemovals._rawValue = &outlined read-only object #0 of one-time initialization function for dateFormatStyleFieldRemovals;
}

uint64_t closure #2 in variable initialization expression of dateFormatStyleFieldRemovals(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BDCE1A0], (void (*)(uint64_t))MEMORY[0x24BDCE198], MEMORY[0x24BDCE240]);
}

uint64_t closure #3 in variable initialization expression of dateFormatStyleFieldRemovals(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BDCE108], (void (*)(uint64_t))MEMORY[0x24BDCE0F8], (void (*)(char *))MEMORY[0x24BDCE030]);
}

uint64_t closure #4 in variable initialization expression of dateFormatStyleFieldRemovals(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BDCE208], (void (*)(uint64_t))MEMORY[0x24BDCE200], MEMORY[0x24BDCE280]);
}

uint64_t closure #5 in variable initialization expression of dateFormatStyleFieldRemovals(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BDCE058], (void (*)(uint64_t))MEMORY[0x24BDCE050], MEMORY[0x24BDCDFF8]);
}

uint64_t closure #6 in variable initialization expression of dateFormatStyleFieldRemovals(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BDCE1E0], (void (*)(uint64_t))MEMORY[0x24BDCE1D0], (void (*)(char *))MEMORY[0x24BDCE250]);
}

uint64_t closure #7 in variable initialization expression of dateFormatStyleFieldRemovals(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BDCE1F0], (void (*)(uint64_t))MEMORY[0x24BDCE1E8], MEMORY[0x24BDCE278]);
}

uint64_t closure #8 in variable initialization expression of dateFormatStyleFieldRemovals(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BDCE190], (void (*)(uint64_t))MEMORY[0x24BDCE188], (void (*)(char *))MEMORY[0x24BDCE238]);
}

uint64_t closure #9 in variable initialization expression of dateFormatStyleFieldRemovals(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BDCE178], (void (*)(uint64_t))MEMORY[0x24BDCE170], (void (*)(char *))MEMORY[0x24BDCE230]);
}

uint64_t closure #10 in variable initialization expression of dateFormatStyleFieldRemovals(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BDCE0E0], (void (*)(uint64_t))MEMORY[0x24BDCE0A8], (void (*)(char *))MEMORY[0x24BDCE028]);
}

uint64_t closure #11 in variable initialization expression of dateFormatStyleFieldRemovals(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BDCE078], (void (*)(uint64_t))MEMORY[0x24BDCE068], (void (*)(char *))MEMORY[0x24BDCE010]);
}

uint64_t closure #12 in variable initialization expression of dateFormatStyleFieldRemovals(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BDCE160], (void (*)(uint64_t))MEMORY[0x24BDCE158], (void (*)(char *))MEMORY[0x24BDCE040]);
}

uint64_t closure #1 in Date.FormatStyle.Attributed.withSizeVariant(_:)(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BDCE090], (void (*)(uint64_t))MEMORY[0x24BDCE080], (void (*)(char *))MEMORY[0x24BDCDF68]);
}

uint64_t closure #2 in Date.FormatStyle.Attributed.withSizeVariant(_:)(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BDCE090], (void (*)(uint64_t))MEMORY[0x24BDCE088], (void (*)(char *))MEMORY[0x24BDCDF68]);
}

uint64_t closure #3 in Date.FormatStyle.Attributed.withSizeVariant(_:)(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BDCE130], (void (*)(uint64_t))MEMORY[0x24BDCE110], (void (*)(char *))MEMORY[0x24BDCDF80]);
}

uint64_t closure #4 in Date.FormatStyle.Attributed.withSizeVariant(_:)(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BDCE130], (void (*)(uint64_t))MEMORY[0x24BDCE120], (void (*)(char *))MEMORY[0x24BDCDF80]);
}

uint64_t protocol witness for SizeAdaptiveFormatStyle.withSizeVariant(_:) in conformance Date.FormatStyle.Attributed(char *a1, uint64_t *a2)
{
  char *v2;
  uint64_t v4;

  v4 = *a2;
  if (one-time initialization token for attributedDateFormatStyleFieldRemovals != -1)
    swift_once();
  return specialized static Date.FormatStyle.adapt<A>(_:to:fieldRemovals:addEra:removeEra:addYear:removeYear:)(a1, v2, v4, (uint64_t)attributedDateFormatStyleFieldRemovals._rawValue, (void (*)(_QWORD))closure #1 in Date.FormatStyle.Attributed.withSizeVariant(_:), 0, (void (*)(uint64_t))closure #2 in Date.FormatStyle.Attributed.withSizeVariant(_:), 0, (void (*)(char *))closure #3 in Date.FormatStyle.Attributed.withSizeVariant(_:), 0, (void (*)(_QWORD))closure #4 in Date.FormatStyle.Attributed.withSizeVariant(_:), 0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDFD8], &lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed, MEMORY[0x24BDCDFE8]) & 1;
}

uint64_t instantiation function for generic protocol witness table for Date.FormatStyle.Attributed(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDFD8], MEMORY[0x24BDCDFD0]);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  result = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDFD8], MEMORY[0x24BDCDFC8]);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t WhitespaceRemovingFormatStyle<>.withSizeVariant(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;
  uint64_t v14;
  uint64_t v15;

  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v10;
  v12 = (*(uint64_t (**)(char *, uint64_t *, uint64_t))(v11 + 16))(v9, &v15, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a1, v3, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 40))(a1, v9, v6);
  return v12 & 1;
}

uint64_t protocol witness for SizeAdaptiveFormatStyle.withSizeVariant(_:) in conformance <> WhitespaceRemovingFormatStyle<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WhitespaceRemovingFormatStyle<>.withSizeVariant(_:)(a1, a2, a3);
}

uint64_t instantiation function for generic protocol witness table for <> WhitespaceRemovingFormatStyle<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for WhitespaceRemovingFormatStyle<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void one-time initialization function for attributedDateFormatStyleFieldRemovals()
{
  attributedDateFormatStyleFieldRemovals._rawValue = &outlined read-only object #0 of one-time initialization function for attributedDateFormatStyleFieldRemovals;
}

uint64_t closure #2 in variable initialization expression of attributedDateFormatStyleFieldRemovals(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BDCE1A0], (void (*)(uint64_t))MEMORY[0x24BDCE198], (void (*)(char *))MEMORY[0x24BDCDFA8]);
}

uint64_t closure #3 in variable initialization expression of attributedDateFormatStyleFieldRemovals(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BDCE108], (void (*)(uint64_t))MEMORY[0x24BDCE0F8], (void (*)(char *))MEMORY[0x24BDCDF78]);
}

uint64_t closure #4 in variable initialization expression of attributedDateFormatStyleFieldRemovals(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BDCE208], (void (*)(uint64_t))MEMORY[0x24BDCE200], (void (*)(char *))MEMORY[0x24BDCDFC0]);
}

uint64_t closure #5 in variable initialization expression of attributedDateFormatStyleFieldRemovals(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BDCE058], (void (*)(uint64_t))MEMORY[0x24BDCE050], (void (*)(char *))MEMORY[0x24BDCDF50]);
}

uint64_t closure #6 in variable initialization expression of attributedDateFormatStyleFieldRemovals(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BDCE1E0], (void (*)(uint64_t))MEMORY[0x24BDCE1D0], (void (*)(char *))MEMORY[0x24BDCDFB0]);
}

uint64_t closure #7 in variable initialization expression of attributedDateFormatStyleFieldRemovals(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BDCE1F0], (void (*)(uint64_t))MEMORY[0x24BDCE1E8], (void (*)(char *))MEMORY[0x24BDCDFB8]);
}

uint64_t closure #8 in variable initialization expression of attributedDateFormatStyleFieldRemovals(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BDCE190], (void (*)(uint64_t))MEMORY[0x24BDCE188], (void (*)(char *))MEMORY[0x24BDCDFA0]);
}

uint64_t closure #9 in variable initialization expression of attributedDateFormatStyleFieldRemovals(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BDCE178], (void (*)(uint64_t))MEMORY[0x24BDCE170], (void (*)(char *))MEMORY[0x24BDCDF98]);
}

uint64_t closure #10 in variable initialization expression of attributedDateFormatStyleFieldRemovals(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BDCE0E0], (void (*)(uint64_t))MEMORY[0x24BDCE0A8], (void (*)(char *))MEMORY[0x24BDCDF70]);
}

uint64_t closure #11 in variable initialization expression of attributedDateFormatStyleFieldRemovals(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BDCE078], (void (*)(uint64_t))MEMORY[0x24BDCE068], (void (*)(char *))MEMORY[0x24BDCDF60]);
}

uint64_t closure #12 in variable initialization expression of attributedDateFormatStyleFieldRemovals(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BDCE160], (void (*)(uint64_t))MEMORY[0x24BDCE158], (void (*)(char *))MEMORY[0x24BDCDF88]);
}

uint64_t closure #1 in Date.FormatStyle.withSizeVariant(_:)(uint64_t a1, uint64_t (*a2)(_QWORD), void (*a3)(uint64_t), void (*a4)(char *))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v6 = a2(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v12 - v9;
  a3(v8);
  a4(v10);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t Date.ISO8601FormatStyle.withSizeVariant(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  double v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, double);
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void (*v35)(uint64_t, char *, uint64_t);
  char *v36;
  char *v37;
  char v38;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;

  v48 = a1;
  v3 = type metadata accessor for Date.ISO8601FormatStyle.TimeZoneSeparator();
  v46 = *(_QWORD *)(v3 - 8);
  v47 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v45 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date.ISO8601FormatStyle.TimeSeparator();
  v43 = *(_QWORD *)(v5 - 8);
  v44 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date.ISO8601FormatStyle.DateSeparator();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Date.ISO8601FormatStyle();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  MEMORY[0x24BDAC7A8](v14);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v40 - v16;
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v40 - v19;
  v24 = MEMORY[0x24BDAC7A8](v21);
  v26 = (char *)&v40 - v25;
  if (*a2)
  {
    v42 = *a2;
    v27 = *MEMORY[0x24BDCE370];
    v28 = *(void (**)(char *, uint64_t, uint64_t, double))(v9 + 104);
    v40 = v23;
    v41 = v22;
    v28(v11, v27, v8, v24);
    Date.ISO8601FormatStyle.dateSeparator(_:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v30 = v43;
    v29 = v44;
    (*(void (**)(char *, _QWORD, uint64_t))(v43 + 104))(v7, *MEMORY[0x24BDCE398], v44);
    Date.ISO8601FormatStyle.timeSeparator(_:)();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v29);
    v31 = *(void (**)(char *, uint64_t))(v13 + 8);
    v31(v17, v12);
    v33 = v45;
    v32 = v46;
    v34 = v47;
    (*(void (**)(char *, _QWORD, uint64_t))(v46 + 104))(v45, *MEMORY[0x24BDCE3D0], v47);
    Date.ISO8601FormatStyle.timeZoneSeparator(_:)();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v33, v34);
    v31(v20, v12);
    v35 = *(void (**)(uint64_t, char *, uint64_t))(v13 + 16);
    v35(v48, v26, v12);
    v36 = v40;
    v35((uint64_t)v40, v26, v12);
    v37 = v41;
    v35((uint64_t)v41, v49, v12);
    if (v42 == 1)
    {
      lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE448], MEMORY[0x24BDCE460]);
      v38 = dispatch thunk of static Equatable.== infix(_:_:)() ^ 1;
    }
    else
    {
      v38 = 0;
    }
    v31(v37, v12);
    v31(v36, v12);
    v31(v26, v12);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t, double))(v13 + 16))(v48, v49, v12, v24);
    v38 = 1;
  }
  return v38 & 1;
}

uint64_t instantiation function for generic protocol witness table for Date.ISO8601FormatStyle(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE448], MEMORY[0x24BDCE430]);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t Date.ComponentsFormatStyle.withSizeVariant(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, double);
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  type metadata accessor for Date?(0, &lazy cache variable for type metadata for Date.ComponentsFormatStyle.Style?, (void (*)(uint64_t))MEMORY[0x24BDCE658]);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v29 - v5;
  v7 = type metadata accessor for Date.ComponentsFormatStyle.Style();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v29 - v12;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v29 - v15;
  v17 = type metadata accessor for Date.ComponentsFormatStyle();
  v20 = MEMORY[0x24BDAC7A8](v17);
  v22 = (char *)&v29 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *a2;
  v24 = *(void (**)(char *, uint64_t, double))(v19 + 16);
  if (*a2)
  {
    v30 = v19;
    v31 = a1;
    v25 = v32;
    v32 = v18;
    v24(v22, v25, v20);
    while (1)
    {
      Date.ComponentsFormatStyle.style.getter();
      Date.ComponentsFormatStyle.Style.nextSmaller.getter((uint64_t)v6);
      v26 = *(void (**)(char *, uint64_t))(v8 + 8);
      v26(v13, v7);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
      {
        outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v6, &lazy cache variable for type metadata for Date.ComponentsFormatStyle.Style?, (void (*)(uint64_t))MEMORY[0x24BDCE658]);
        (*(void (**)(uint64_t, char *, uint64_t))(v30 + 32))(v31, v22, v32);
        return 0;
      }
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v16, v6, v7);
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v16, v7);
      Date.ComponentsFormatStyle.style.setter();
      result = ((uint64_t (*)(char *, uint64_t))v26)(v16, v7);
      if (__OFSUB__(v23--, 1))
        break;
      if (!v23)
      {
        (*(void (**)(uint64_t, char *, uint64_t))(v30 + 32))(v31, v22, v32);
        return 1;
      }
    }
    __break(1u);
  }
  else
  {
    ((void (*)(uint64_t, uint64_t, uint64_t))v24)(a1, v32, v18);
    return 1;
  }
  return result;
}

uint64_t Date.ComponentsFormatStyle.Style.nextSmaller.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t);
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  uint64_t v19;

  v2 = v1;
  v4 = type metadata accessor for Date.ComponentsFormatStyle.Style();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE658];
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v19 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))((char *)&v19 - v11, v2, v4, v10);
  static Date.ComponentsFormatStyle.Style.spellOut.getter();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style and conformance Date.ComponentsFormatStyle.Style, v5, MEMORY[0x24BDCE660]);
  LOBYTE(v5) = dispatch thunk of static Equatable.== infix(_:_:)();
  v13 = *(void (**)(char *, uint64_t))(v6 + 8);
  v13(v8, v4);
  if ((v5 & 1) != 0)
  {
    v13(v12, v4);
    static Date.ComponentsFormatStyle.Style.wide.getter();
    v14 = 0;
  }
  else
  {
    static Date.ComponentsFormatStyle.Style.wide.getter();
    v15 = dispatch thunk of static Equatable.== infix(_:_:)();
    v13(v8, v4);
    if ((v15 & 1) != 0)
    {
      v13(v12, v4);
      static Date.ComponentsFormatStyle.Style.condensedAbbreviated.getter();
      v14 = 0;
    }
    else
    {
      static Date.ComponentsFormatStyle.Style.condensedAbbreviated.getter();
      v16 = dispatch thunk of static Equatable.== infix(_:_:)();
      v13(v8, v4);
      if ((v16 & 1) != 0
        || (static Date.ComponentsFormatStyle.Style.abbreviated.getter(),
            v17 = dispatch thunk of static Equatable.== infix(_:_:)(),
            v13(v8, v4),
            (v17 & 1) != 0))
      {
        v13(v12, v4);
        static Date.ComponentsFormatStyle.Style.narrow.getter();
        v14 = 0;
      }
      else
      {
        static Date.ComponentsFormatStyle.Style.narrow.getter();
        dispatch thunk of static Equatable.== infix(_:_:)();
        v13(v8, v4);
        v13(v12, v4);
        v14 = 1;
      }
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a1, v14, 1, v4);
}

uint64_t instantiation function for generic protocol witness table for Date.ComponentsFormatStyle(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE760], MEMORY[0x24BDCE758]);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  result = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE760], MEMORY[0x24BDCE750]);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t Duration.UnitsFormatStyle.withSizeVariant(_:)(uint64_t a1, uint64_t *a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void (*v29)(uint64_t, char *, uint64_t, __n128);
  char *v30;
  void (*v31)(char *, char *, uint64_t);
  char v32;
  void (*v33)(char *, uint64_t);
  char v34;
  char v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t result;
  __n128 v40;
  BOOL v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t (*v47)(char *, _QWORD);
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  char v64[32];

  v3 = v2;
  v6 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy();
  v59 = *(_QWORD *)(v6 - 8);
  v60 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v58 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for Duration.UnitsFormatStyle.UnitWidth?, (void (*)(uint64_t))MEMORY[0x24BDD0AB8]);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v54 - v9;
  v11 = type metadata accessor for Duration.UnitsFormatStyle.UnitWidth();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v54 - v16;
  MEMORY[0x24BDAC7A8](v18);
  v63 = (char *)&v54 - v19;
  MEMORY[0x24BDAC7A8](v20);
  v62 = (char *)&v54 - v21;
  v22 = type metadata accessor for Duration.UnitsFormatStyle();
  v25.n128_f64[0] = MEMORY[0x24BDAC7A8](v22);
  v27 = (char *)&v54 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = *a2;
  v29 = *(void (**)(uint64_t, char *, uint64_t, __n128))(v24 + 16);
  if (!*a2)
  {
    v42 = a1;
    v43 = v3;
LABEL_30:
    v29(v42, v43, v23, v25);
    return 1;
  }
  v55 = v24;
  v56 = v23;
  v57 = a1;
  ((void (*)(char *, char *, double))v29)(v27, v3, v25.n128_f64[0]);
  v61 = v27;
  while (1)
  {
    v30 = v63;
    Duration.UnitsFormatStyle.unitWidth.getter();
    v31 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    v31(v17, v30, v11);
    static Duration.UnitsFormatStyle.UnitWidth.wide.getter();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth and conformance Duration.UnitsFormatStyle.UnitWidth, (uint64_t (*)(uint64_t))MEMORY[0x24BDD0AB8], MEMORY[0x24BDD0AC8]);
    v32 = dispatch thunk of static Equatable.== infix(_:_:)();
    v33 = *(void (**)(char *, uint64_t))(v12 + 8);
    v33(v14, v11);
    if ((v32 & 1) != 0)
    {
      v33(v17, v11);
      static Duration.UnitsFormatStyle.UnitWidth.condensedAbbreviated.getter();
LABEL_8:
      v36 = 0;
      goto LABEL_9;
    }
    static Duration.UnitsFormatStyle.UnitWidth.abbreviated.getter();
    v34 = dispatch thunk of static Equatable.== infix(_:_:)();
    v33(v14, v11);
    if ((v34 & 1) != 0
      || (static Duration.UnitsFormatStyle.UnitWidth.condensedAbbreviated.getter(),
          v35 = dispatch thunk of static Equatable.== infix(_:_:)(),
          v33(v14, v11),
          (v35 & 1) != 0))
    {
      v33(v17, v11);
      static Duration.UnitsFormatStyle.UnitWidth.narrow.getter();
      goto LABEL_8;
    }
    static Duration.UnitsFormatStyle.UnitWidth.narrow.getter();
    dispatch thunk of static Equatable.== infix(_:_:)();
    v33(v14, v11);
    v33(v17, v11);
    v36 = 1;
LABEL_9:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, v36, 1, v11);
    v33(v63, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
    {
      outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v10, &lazy cache variable for type metadata for Duration.UnitsFormatStyle.UnitWidth?, (void (*)(uint64_t))MEMORY[0x24BDD0AB8]);
      v44 = v58;
      v45 = v61;
      Duration.UnitsFormatStyle.fractionalPartDisplay.getter();
      v46 = Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.maximumLength.getter();
      (*(void (**)(char *, uint64_t))(v59 + 8))(v44, v60);
      if (v46 < 1)
        goto LABEL_18;
      v47 = (uint64_t (*)(char *, _QWORD))Duration.UnitsFormatStyle.fractionalPartDisplay.modify();
      Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.maximumLength.setter();
      result = v47(v64, 0);
      v41 = __OFSUB__(v28--, 1);
      if (v41)
        goto LABEL_34;
      if (v28)
      {
LABEL_18:
        v48 = Duration.UnitsFormatStyle.maximumUnitCount.getter();
        if ((v49 & 1) != 0)
          v50 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v50 = v48;
        v51 = *(_QWORD *)(Duration.UnitsFormatStyle.allowedUnits.getter() + 16);
        swift_bridgeObjectRelease();
        if (v51 >= v50)
          v52 = v50;
        else
          v52 = v51;
        if (v28 >= v52)
        {
          Duration.UnitsFormatStyle.maximumUnitCount.setter();
          (*(void (**)(uint64_t, char *, uint64_t))(v55 + 32))(v57, v45, v56);
          return 0;
        }
        result = v52 - v28;
        v53 = v57;
        if (__OFSUB__(v52, v28))
          goto LABEL_35;
        Duration.UnitsFormatStyle.maximumUnitCount.setter();
        v29 = *(void (**)(uint64_t, char *, uint64_t, __n128))(v55 + 32);
        v42 = v53;
      }
      else
      {
        v29 = *(void (**)(uint64_t, char *, uint64_t, __n128))(v55 + 32);
        v42 = v57;
      }
      v43 = v45;
      v23 = v56;
      goto LABEL_30;
    }
    v37 = v62;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v62, v10, v11);
    v31(v14, v37, v11);
    v38 = v61;
    Duration.UnitsFormatStyle.unitWidth.setter();
    result = ((uint64_t (*)(char *, uint64_t))v33)(v37, v11);
    v41 = __OFSUB__(v28--, 1);
    if (v41)
      break;
    if (!v28)
    {
      (*(void (**)(uint64_t, char *, uint64_t, __n128))(v55 + 32))(v57, v38, v56, v40);
      return 1;
    }
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

uint64_t instantiation function for generic protocol witness table for Duration.UnitsFormatStyle(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle and conformance Duration.UnitsFormatStyle, (uint64_t (*)(uint64_t))MEMORY[0x24BDD0AF0], MEMORY[0x24BDD0AE8]);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  result = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle and conformance Duration.UnitsFormatStyle, (uint64_t (*)(uint64_t))MEMORY[0x24BDD0AF0], MEMORY[0x24BDD0AE0]);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t Duration.UnitsFormatStyle.Attributed.withSizeVariant(_:)(uint64_t a1, uint64_t *a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void (*v29)(uint64_t, char *, uint64_t, __n128);
  char *v30;
  void (*v31)(char *, char *, uint64_t);
  char v32;
  void (*v33)(char *, uint64_t);
  char v34;
  char v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t result;
  BOOL v40;
  char *v41;
  char *v42;
  uint64_t v43;
  void (*v44)(uint64_t *, _QWORD);
  __n128 v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char v62;

  v3 = v2;
  v6 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy();
  v56 = *(_QWORD *)(v6 - 8);
  v57 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v55 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Date?(0, &lazy cache variable for type metadata for Duration.UnitsFormatStyle.UnitWidth?, (void (*)(uint64_t))MEMORY[0x24BDD0AB8]);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v51 - v9;
  v11 = type metadata accessor for Duration.UnitsFormatStyle.UnitWidth();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v51 - v16;
  MEMORY[0x24BDAC7A8](v18);
  v60 = (char *)&v51 - v19;
  MEMORY[0x24BDAC7A8](v20);
  v58 = (char *)&v51 - v21;
  v22 = type metadata accessor for Duration.UnitsFormatStyle.Attributed();
  v25.n128_f64[0] = MEMORY[0x24BDAC7A8](v22);
  v27 = (char *)&v51 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = *a2;
  v29 = *(void (**)(uint64_t, char *, uint64_t, __n128))(v24 + 16);
  if (!v28)
  {
    v50 = a1;
    v41 = v3;
LABEL_27:
    v29(v50, v41, v23, v25);
    return 1;
  }
  v52 = v24;
  v53 = v23;
  v54 = a1;
  ((void (*)(char *, char *, double))v29)(v27, v3, v25.n128_f64[0]);
  v59 = v27;
  while (1)
  {
    swift_getKeyPath();
    v30 = v60;
    Duration.UnitsFormatStyle.Attributed.subscript.getter();
    swift_release();
    v31 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    v31(v17, v30, v11);
    static Duration.UnitsFormatStyle.UnitWidth.wide.getter();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth and conformance Duration.UnitsFormatStyle.UnitWidth, (uint64_t (*)(uint64_t))MEMORY[0x24BDD0AB8], MEMORY[0x24BDD0AC8]);
    v32 = dispatch thunk of static Equatable.== infix(_:_:)();
    v33 = *(void (**)(char *, uint64_t))(v12 + 8);
    v33(v14, v11);
    if ((v32 & 1) != 0)
    {
      v33(v17, v11);
      static Duration.UnitsFormatStyle.UnitWidth.condensedAbbreviated.getter();
LABEL_8:
      v36 = 0;
      goto LABEL_9;
    }
    static Duration.UnitsFormatStyle.UnitWidth.abbreviated.getter();
    v34 = dispatch thunk of static Equatable.== infix(_:_:)();
    v33(v14, v11);
    if ((v34 & 1) != 0
      || (static Duration.UnitsFormatStyle.UnitWidth.condensedAbbreviated.getter(),
          v35 = dispatch thunk of static Equatable.== infix(_:_:)(),
          v33(v14, v11),
          (v35 & 1) != 0))
    {
      v33(v17, v11);
      static Duration.UnitsFormatStyle.UnitWidth.narrow.getter();
      goto LABEL_8;
    }
    static Duration.UnitsFormatStyle.UnitWidth.narrow.getter();
    dispatch thunk of static Equatable.== infix(_:_:)();
    v33(v14, v11);
    v33(v17, v11);
    v36 = 1;
LABEL_9:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, v36, 1, v11);
    v33(v60, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
      break;
    v37 = v58;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v58, v10, v11);
    swift_getKeyPath();
    v31(v14, v37, v11);
    v38 = v59;
    Duration.UnitsFormatStyle.Attributed.subscript.setter();
    result = ((uint64_t (*)(char *, uint64_t))v33)(v37, v11);
    v40 = __OFSUB__(v28--, 1);
    if (v40)
    {
      __break(1u);
      goto LABEL_33;
    }
    if (!v28)
    {
      v29 = *(void (**)(uint64_t, char *, uint64_t, __n128))(v52 + 32);
      v50 = v54;
LABEL_26:
      v41 = v38;
      v23 = v53;
      goto LABEL_27;
    }
  }
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v10, &lazy cache variable for type metadata for Duration.UnitsFormatStyle.UnitWidth?, (void (*)(uint64_t))MEMORY[0x24BDD0AB8]);
  swift_getKeyPath();
  v42 = v55;
  Duration.UnitsFormatStyle.Attributed.subscript.getter();
  swift_release();
  v43 = Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.maximumLength.getter();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v42, v57);
  if (v43 >= 1)
  {
    swift_getKeyPath();
    v44 = (void (*)(uint64_t *, _QWORD))Duration.UnitsFormatStyle.Attributed.subscript.modify();
    Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.maximumLength.setter();
    v44(&v61, 0);
    result = swift_release();
    v40 = __OFSUB__(v28--, 1);
    if (v40)
    {
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    if (!v28)
    {
      (*(void (**)(uint64_t, char *, uint64_t, __n128))(v52 + 32))(v54, v59, v53, v45);
      return 1;
    }
  }
  swift_getKeyPath();
  v46 = v59;
  Duration.UnitsFormatStyle.Attributed.subscript.getter();
  swift_release();
  if (v62)
    v47 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v47 = v61;
  swift_getKeyPath();
  Duration.UnitsFormatStyle.Attributed.subscript.getter();
  swift_release();
  v48 = *(_QWORD *)(v61 + 16);
  swift_bridgeObjectRelease();
  if (v48 < v47)
    v47 = v48;
  result = swift_getKeyPath();
  if (v28 >= v47)
  {
    v61 = 1;
    v62 = 0;
    Duration.UnitsFormatStyle.Attributed.subscript.setter();
    (*(void (**)(uint64_t, char *, uint64_t))(v52 + 32))(v54, v46, v53);
    return 0;
  }
  v49 = v54;
  if (!__OFSUB__(v47, v28))
  {
    v61 = v47 - v28;
    v62 = 0;
    v38 = v59;
    Duration.UnitsFormatStyle.Attributed.subscript.setter();
    v29 = *(void (**)(uint64_t, char *, uint64_t, __n128))(v52 + 32);
    v50 = v49;
    goto LABEL_26;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t key path setter for Duration.UnitsFormatStyle.fractionalPartDisplay : Duration.UnitsFormatStyle(uint64_t a1)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy();
  v3 = MEMORY[0x24BDAC7A8](v2);
  (*(void (**)(char *, uint64_t, double))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  return Duration.UnitsFormatStyle.fractionalPartDisplay.setter();
}

uint64_t instantiation function for generic protocol witness table for Duration.UnitsFormatStyle.Attributed(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed and conformance Duration.UnitsFormatStyle.Attributed, (uint64_t (*)(uint64_t))MEMORY[0x24BDD0960], MEMORY[0x24BDD0958]);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  result = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed and conformance Duration.UnitsFormatStyle.Attributed, (uint64_t (*)(uint64_t))MEMORY[0x24BDD0960], MEMORY[0x24BDD0950]);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t Date.AnchoredRelativeFormatStyle.withSizeVariant(_:)(uint64_t a1, uint64_t *a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, double);
  char *v27;
  void (*v28)(char *, char *, uint64_t);
  char v29;
  void (*v30)(char *, uint64_t);
  char v31;
  char v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t result;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;

  type metadata accessor for Date?(0, &lazy cache variable for type metadata for Date.RelativeFormatStyle.UnitsStyle?, (void (*)(uint64_t))MEMORY[0x24BDCE4E0]);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v40 - v6;
  v8 = type metadata accessor for Date.RelativeFormatStyle.UnitsStyle();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v40 - v13;
  MEMORY[0x24BDAC7A8](v15);
  v45 = (char *)&v40 - v16;
  MEMORY[0x24BDAC7A8](v17);
  v44 = (char *)&v40 - v18;
  v19 = type metadata accessor for Date.AnchoredRelativeFormatStyle();
  v22.n128_f64[0] = MEMORY[0x24BDAC7A8](v19);
  v24 = (char *)&v40 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *a2;
  v26 = *(void (**)(char *, char *, double))(v21 + 16);
  if (*a2)
  {
    v40 = v21;
    v41 = v20;
    v42 = a1;
    v26(v24, v2, v22.n128_f64[0]);
    v43 = v24;
    while (1)
    {
      v27 = v45;
      Date.AnchoredRelativeFormatStyle.unitsStyle.getter();
      v28 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
      v28(v14, v27, v8);
      static Date.RelativeFormatStyle.UnitsStyle.spellOut.getter();
      lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle and conformance Date.RelativeFormatStyle.UnitsStyle, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE4E0], MEMORY[0x24BDCE4E8]);
      v29 = dispatch thunk of static Equatable.== infix(_:_:)();
      v30 = *(void (**)(char *, uint64_t))(v9 + 8);
      v30(v11, v8);
      if ((v29 & 1) != 0)
        break;
      static Date.RelativeFormatStyle.UnitsStyle.wide.getter();
      v31 = dispatch thunk of static Equatable.== infix(_:_:)();
      v30(v11, v8);
      if ((v31 & 1) != 0)
      {
        v30(v14, v8);
        static Date.RelativeFormatStyle.UnitsStyle.abbreviated.getter();
        goto LABEL_9;
      }
      static Date.RelativeFormatStyle.UnitsStyle.abbreviated.getter();
      v32 = dispatch thunk of static Equatable.== infix(_:_:)();
      v30(v11, v8);
      if ((v32 & 1) != 0)
      {
        v30(v14, v8);
        static Date.RelativeFormatStyle.UnitsStyle.narrow.getter();
        goto LABEL_9;
      }
      static Date.RelativeFormatStyle.UnitsStyle.narrow.getter();
      dispatch thunk of static Equatable.== infix(_:_:)();
      v30(v11, v8);
      v30(v14, v8);
      v33 = 1;
LABEL_10:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, v33, 1, v8);
      v30(v45, v8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
      {
        outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v7, &lazy cache variable for type metadata for Date.RelativeFormatStyle.UnitsStyle?, (void (*)(uint64_t))MEMORY[0x24BDCE4E0]);
        (*(void (**)(uint64_t, char *, uint64_t))(v40 + 32))(v42, v43, v41);
        return 0;
      }
      v34 = v44;
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v44, v7, v8);
      v28(v11, v34, v8);
      v35 = v43;
      Date.AnchoredRelativeFormatStyle.unitsStyle.setter();
      result = ((uint64_t (*)(char *, uint64_t))v30)(v34, v8);
      if (__OFSUB__(v25--, 1))
      {
        __break(1u);
        return result;
      }
      if (!v25)
      {
        v20 = v41;
        v26 = *(void (**)(char *, char *, double))(v40 + 32);
        v38 = v42;
        v39 = v35;
        goto LABEL_17;
      }
    }
    v30(v14, v8);
    static Date.RelativeFormatStyle.UnitsStyle.wide.getter();
LABEL_9:
    v33 = 0;
    goto LABEL_10;
  }
  v38 = a1;
  v39 = v2;
LABEL_17:
  ((void (*)(uint64_t, char *, uint64_t, __n128))v26)(v38, v39, v20, v22);
  return 1;
}

uint64_t instantiation function for generic protocol witness table for Date.AnchoredRelativeFormatStyle(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE828], MEMORY[0x24BDCE820]);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  result = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE828], MEMORY[0x24BDCE818]);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t SystemFormatStyle.Timer.withSizeVariant(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(_QWORD);
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = v2;
  v6 = type metadata accessor for SystemFormatStyle.Timer();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a2;
  result = outlined init with copy of TypesettingLanguage(v3, a1, v10);
  v12 = *(int *)(v6 + 44);
  v13 = *(_QWORD *)(a1 + v12);
  v14 = v13 + v9;
  if (__OFADD__(v13, v9))
  {
    __break(1u);
    goto LABEL_22;
  }
  *(_QWORD *)(a1 + v12) = v14;
  v15 = *(_QWORD *)(v3 + *(int *)(v6 + 44));
  v16 = __OFSUB__(v15, 2);
  v17 = v15 - 2;
  if (v16)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v18 = v17 & ~(v17 >> 63);
  v16 = __OFSUB__(v9, v18);
  v19 = v9 - v18;
  if (v16)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  result = outlined init with copy of TypesettingLanguage(v3, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.Timer);
  if (v14 > 2)
  {
    v20 = *(_QWORD *)&v8[*(int *)(v6 + 44)];
    v21 = *(_QWORD *)&v8[*(int *)(v6 + 32)];
    if (v20 >= 3)
    {
      v22 = v21 + 2;
      if (__OFADD__(v21, 2))
      {
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
      v16 = __OFSUB__(v22, v20);
      v23 = v22 - v20;
      if (v16)
      {
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      if (v23 <= 1)
        v21 = 1;
      else
        v21 = v23;
    }
    result = outlined destroy of TypesettingConfiguration((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.Timer);
    v24 = *(_QWORD *)(a1 + v12);
    v25 = *(_QWORD *)(a1 + *(int *)(v6 + 32));
    if (v24 >= 3)
    {
      v16 = __OFADD__(v25, 2);
      v26 = v25 + 2;
      if (v16)
      {
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
      v16 = __OFSUB__(v26, v24);
      v27 = v26 - v24;
      if (v16)
      {
LABEL_28:
        __break(1u);
        return result;
      }
      if (v27 <= 1)
        v25 = 1;
      else
        v25 = v27;
    }
    if (!__OFSUB__(v21, v25))
      return v21 - v25 == v19;
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  outlined destroy of TypesettingConfiguration((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.Timer);
  return 1;
}

uint64_t protocol witness for SizeAdaptiveFormatStyle.withSizeVariant(_:) in conformance SystemFormatStyle.Stopwatch(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  uint64_t v14;
  uint64_t v15;

  v5 = type metadata accessor for SystemFormatStyle.Timer();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *a2;
  outlined init with copy of TypesettingLanguage(v2, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.Stopwatch);
  v15 = v11;
  v12 = SystemFormatStyle.Timer.withSizeVariant(_:)((uint64_t)v7, &v15);
  outlined assign with take of SystemFormatStyle.Timer((uint64_t)v7, (uint64_t)v10);
  outlined init with copy of TypesettingLanguage((uint64_t)v10, a1, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.Stopwatch);
  outlined destroy of TypesettingConfiguration((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.Stopwatch);
  return v12 & 1;
}

uint64_t instantiation function for generic protocol witness table for SystemFormatStyle.Stopwatch(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type SystemFormatStyle.Stopwatch and conformance SystemFormatStyle.Stopwatch, (uint64_t (*)(uint64_t))type metadata accessor for SystemFormatStyle.Stopwatch, (uint64_t)&protocol conformance descriptor for SystemFormatStyle.Stopwatch);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  result = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type SystemFormatStyle.Stopwatch and conformance SystemFormatStyle.Stopwatch, (uint64_t (*)(uint64_t))type metadata accessor for SystemFormatStyle.Stopwatch, (uint64_t)&protocol conformance descriptor for SystemFormatStyle.Stopwatch);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  result = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type SystemFormatStyle.Stopwatch and conformance SystemFormatStyle.Stopwatch, (uint64_t (*)(uint64_t))type metadata accessor for SystemFormatStyle.Stopwatch, (uint64_t)&protocol conformance descriptor for SystemFormatStyle.Stopwatch);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for SystemFormatStyle.Timer(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type SystemFormatStyle.Timer and conformance SystemFormatStyle.Timer, (uint64_t (*)(uint64_t))type metadata accessor for SystemFormatStyle.Timer, (uint64_t)&protocol conformance descriptor for SystemFormatStyle.Timer);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  result = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type SystemFormatStyle.Timer and conformance SystemFormatStyle.Timer, (uint64_t (*)(uint64_t))type metadata accessor for SystemFormatStyle.Timer, (uint64_t)&protocol conformance descriptor for SystemFormatStyle.Timer);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  result = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type SystemFormatStyle.Timer and conformance SystemFormatStyle.Timer, (uint64_t (*)(uint64_t))type metadata accessor for SystemFormatStyle.Timer, (uint64_t)&protocol conformance descriptor for SystemFormatStyle.Timer);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t SystemFormatStyle.DateOffset.withSizeVariant(_:)(uint64_t a1, uint64_t *a2)
{
  return SystemFormatStyle.DateOffset.withSizeVariant(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset);
}

uint64_t protocol witness for SizeAdaptiveFormatStyle.withSizeVariant(_:) in conformance SystemFormatStyle.DateOffset(uint64_t a1, uint64_t *a2)
{
  return SystemFormatStyle.DateOffset.withSizeVariant(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset) & 1;
}

uint64_t SystemFormatStyle.DateOffset.withSizeVariant(_:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v5 = v3;
  v8 = a3(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v29 - v9;
  v11 = *a2;
  result = outlined init with copy of TypesettingLanguage(v5, a1, a3);
  v13 = *(int *)(v8 + 32);
  v14 = *(_QWORD *)(a1 + v13);
  v15 = v14 + v11;
  if (__OFADD__(v14, v11))
  {
    __break(1u);
    goto LABEL_22;
  }
  *(_QWORD *)(a1 + v13) = v15;
  v16 = *(_QWORD *)(v5 + *(int *)(v8 + 32));
  v17 = __OFSUB__(v16, 2);
  v18 = v16 - 2;
  if (v17)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v19 = v18 & ~(v18 >> 63);
  v17 = __OFSUB__(v11, v19);
  v20 = v11 - v19;
  if (v17)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  result = outlined init with copy of TypesettingLanguage(v5, (uint64_t)v10, a3);
  if (v15 > 2)
  {
    v21 = *(_QWORD *)&v10[*(int *)(v8 + 32)];
    v22 = *(_QWORD *)&v10[*(int *)(v8 + 24)];
    if (v21 >= 3)
    {
      v23 = v22 + 2;
      if (__OFADD__(v22, 2))
      {
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
      v17 = __OFSUB__(v23, v21);
      v24 = v23 - v21;
      if (v17)
      {
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      if (v24 <= 1)
        v22 = 1;
      else
        v22 = v24;
    }
    result = outlined destroy of TypesettingConfiguration((uint64_t)v10, a3);
    v25 = *(_QWORD *)(a1 + v13);
    v26 = *(_QWORD *)(a1 + *(int *)(v8 + 24));
    if (v25 >= 3)
    {
      v17 = __OFADD__(v26, 2);
      v27 = v26 + 2;
      if (v17)
      {
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
      v17 = __OFSUB__(v27, v25);
      v28 = v27 - v25;
      if (v17)
      {
LABEL_28:
        __break(1u);
        return result;
      }
      if (v28 <= 1)
        v26 = 1;
      else
        v26 = v28;
    }
    if (!__OFSUB__(v22, v26))
      return v22 - v26 == v20;
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  outlined destroy of TypesettingConfiguration((uint64_t)v10, a3);
  return 1;
}

uint64_t protocol witness for SizeAdaptiveFormatStyle.withSizeVariant(_:) in conformance SystemFormatStyle.DateReference(uint64_t a1, uint64_t *a2)
{
  return SystemFormatStyle.DateOffset.withSizeVariant(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateReference) & 1;
}

uint64_t outlined assign with take of SystemFormatStyle.Timer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SystemFormatStyle.Timer();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_234EF6E08()
{
  return Duration.UnitsFormatStyle.fractionalPartDisplay.getter();
}

uint64_t sub_234EF6E2C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = Duration.UnitsFormatStyle.maximumUnitCount.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_234EF6E5C()
{
  return Duration.UnitsFormatStyle.maximumUnitCount.setter();
}

uint64_t static AnyGesture._makeGesture(gesture:inputs:)@<X0>(int *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  __int128 v29;
  int v30;
  _BYTE v31[16];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _OWORD v45[2];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _OWORD v52[2];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _BYTE v59[32];
  __int128 v60;
  __int128 v61;
  _OWORD v62[2];
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  v7 = a2[5];
  v8 = a2[3];
  v50 = a2[4];
  v51 = v7;
  v9 = a2[5];
  v52[0] = a2[6];
  *(_OWORD *)((char *)v52 + 12) = *(__int128 *)((char *)a2 + 108);
  v10 = a2[1];
  v46 = *a2;
  v47 = v10;
  v11 = a2[3];
  v13 = *a2;
  v12 = a2[1];
  v48 = a2[2];
  v49 = v11;
  v57 = v50;
  v58 = v9;
  *(_OWORD *)v59 = a2[6];
  *(_OWORD *)&v59[12] = *(__int128 *)((char *)a2 + 108);
  v53 = v13;
  v54 = v12;
  v14 = *a1;
  v55 = v48;
  v56 = v8;
  _GestureInputs.makeIndirectOutputs<A>()(a3, a3, a4, (uint64_t)&v35);
  v16 = v35;
  v15 = DWORD1(v35);
  v17 = *((_QWORD *)&v35 + 1);
  v18 = v36;
  v57 = v50;
  v58 = v51;
  *(_OWORD *)v59 = v52[0];
  *(_OWORD *)&v59[12] = *(_OWORD *)((char *)v52 + 12);
  v53 = v46;
  v54 = v47;
  v55 = v48;
  v56 = v49;
  v29 = v35;
  v30 = v36;
  outlined retain of _GestureInputs((uint64_t)&v46);
  swift_bridgeObjectRetain();
  AnyGestureInfo.init(gesture:inputs:outputs:oldInfo:)(v14, &v53, (uint64_t)&v29, 0, 0, 0, (uint64_t)&v35);
  v32 = type metadata accessor for AnyGestureInfo.Value(0, a3, v19, v20);
  v23 = type metadata accessor for AnyGestureInfo(0, a3, v21, v22);
  v33 = v23;
  v34 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyGestureInfo<A>, v23);
  v24 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v35, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v31, v23, MEMORY[0x24BEE4078], v24, MEMORY[0x24BEE40A8], v25);
  v60 = v43;
  v61 = v44;
  v62[0] = v45[0];
  *(_OWORD *)((char *)v62 + 12) = *(_OWORD *)((char *)v45 + 12);
  v57 = v39;
  v58 = v40;
  *(_OWORD *)v59 = v41;
  *(_OWORD *)&v59[16] = v42;
  v53 = v35;
  v54 = v36;
  v55 = v37;
  v56 = v38;
  outlined release of AnyGestureInfo<A>((uint64_t)&v53);
  AGGraphGetFlags();
  AGGraphSetFlags();
  *(_QWORD *)&v35 = __PAIR64__(v15, v16);
  *((_QWORD *)&v35 + 1) = v17;
  LODWORD(v36) = v18;
  type metadata accessor for _GestureOutputs(0, a3, v26, v27);
  LOBYTE(v29) = 0;
  result = _GestureOutputs.setIndirectDependency(_:)();
  *(_DWORD *)a5 = v16;
  *(_DWORD *)(a5 + 4) = v15;
  *(_QWORD *)(a5 + 8) = v17;
  *(_DWORD *)(a5 + 16) = v18;
  return result;
}

uint64_t AnyGesture.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  type metadata accessor for AnyGestureStorage(0, a3, a4, a4);
  v5 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 120) - 8) + 32))(v5 + *(_QWORD *)(*(_QWORD *)v5 + 136), a1);
  return v5;
}

void AnyGestureInfo.init(gesture:inputs:outputs:oldInfo:)(int a1@<W0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, int a6@<W5>, uint64_t a7@<X8>)
{
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  id v16;

  v11 = a2[5];
  *(_OWORD *)(a7 + 72) = a2[4];
  *(_OWORD *)(a7 + 88) = v11;
  *(_OWORD *)(a7 + 104) = a2[6];
  *(_OWORD *)(a7 + 116) = *(_OWORD *)((char *)a2 + 108);
  v12 = a2[1];
  *(_OWORD *)(a7 + 8) = *a2;
  *(_OWORD *)(a7 + 24) = v12;
  v13 = a2[3];
  *(_OWORD *)(a7 + 40) = a2[2];
  *(_OWORD *)(a7 + 56) = v13;
  v14 = *(_QWORD *)(a3 + 8);
  v15 = *(_DWORD *)(a3 + 16);
  *(_DWORD *)a7 = a1;
  *(_QWORD *)(a7 + 136) = *(_QWORD *)a3;
  *(_QWORD *)(a7 + 144) = v14;
  *(_DWORD *)(a7 + 152) = v15;
  v16 = (id)AGSubgraphGetCurrent();
  if (v16)
  {
    *(_QWORD *)(a7 + 160) = v16;
    *(_QWORD *)(a7 + 168) = a4;
    *(_QWORD *)(a7 + 176) = a5;
    *(_DWORD *)(a7 + 184) = a6;
  }
  else
  {
    outlined consume of AnyGestureInfo<()>.Value?(a4, a5);
    __break(1u);
  }
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance AnyGesture<A>@<X0>(int *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static AnyGesture._makeGesture(gesture:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), a4, a5);
}

void AnyGestureStorageBase.matches(_:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyGestureStorageBase.makeChild(uniqueId:container:inputs:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyGestureStorageBase.updateChild(context:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t AnyGestureStorageBase.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t AnyGestureStorageBase.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

BOOL AnyGestureStorage.matches(_:)()
{
  return swift_dynamicCastClass() != 0;
}

double AnyGestureStorage.makeChild(uniqueId:container:inputs:)@<D0>(unsigned int a1@<W0>, unsigned int a2@<W1>, __int128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  uint64_t AssociatedTypeWitness;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  double result;
  _QWORD v26[2];
  int v27;
  char v28;
  double v29;
  uint64_t v30;
  int v31;
  _BYTE v32[16];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  int v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v7 = *v5;
  v8 = a3[5];
  v49 = a3[4];
  v50 = v8;
  v51 = a3[6];
  v52 = *((_QWORD *)a3 + 14);
  v9 = a3[1];
  v45 = *a3;
  v46 = v9;
  v10 = a3[3];
  v47 = a3[2];
  v48 = v10;
  v11 = *((_DWORD *)a3 + 30);
  v12 = *(_QWORD *)(v7 + 120);
  v13 = *(_QWORD *)(v7 + 128);
  *(_QWORD *)&v36 = __PAIR64__(a1, a2);
  v33 = v12;
  v34 = type metadata accessor for AnyGestureChild(0, v12, v13, a4);
  v35 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyGestureChild<A>, v34);
  v14 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v36, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v32, v34, MEMORY[0x24BEE4078], v14, MEMORY[0x24BEE40A8], v15);
  _GraphValue.init(_:)(LODWORD(v29), v26);
  v40 = v49;
  v41 = v50;
  v42 = v51;
  v43 = v52;
  v36 = v45;
  v37 = v46;
  v38 = v47;
  v39 = v48;
  v44 = v11;
  (*(void (**)(double *__return_ptr, _QWORD *, __int128 *, uint64_t, uint64_t))(v13 + 32))(&v29, v26, &v36, v12, v13);
  if ((v11 & 8) != 0 && !(swift_conformsToProtocol2() ? v12 : 0))
  {
    _gestureModifierProtocolDescriptor();
    if (swift_conformsToProtocol())
      v17 = 2;
    else
      v17 = 1;
    v28 = v17;
    v40 = v49;
    v41 = v50;
    v42 = v51;
    v43 = v52;
    v36 = v45;
    v37 = v46;
    v38 = v47;
    v39 = v48;
    v44 = v11;
    *(double *)v26 = v29;
    v26[1] = v30;
    v27 = v31;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v21 = type metadata accessor for _GestureOutputs(0, AssociatedTypeWitness, v19, v20);
    v22 = _GestureOutputs.debugData.getter();
    LOBYTE(v26[0]) = 1;
    _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v12, &v28, 0x100000000, &v36, v22 | ((HIDWORD(v22) & 1) << 32), 0x100000000, v21);
  }
  v23 = v30;
  v24 = v31;
  result = v29;
  *(double *)a5 = v29;
  *(_QWORD *)(a5 + 8) = v23;
  *(_DWORD *)(a5 + 16) = v24;
  return result;
}

uint64_t AnyGestureStorage.updateChild(context:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v11[16];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](a1);
  v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))(v6, v1 + *(_QWORD *)(v7 + 136), v2, v4);
  v12 = v2;
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v6, (uint64_t)partial apply for closure #1 in RuleContext.value.setter, (uint64_t)v11, v2, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v8);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

void AnyGestureInfo.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *Value;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  void *v15;
  int v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  _QWORD v24[6];
  uint64_t v25;
  id v26;
  int v27;
  uint64_t v28;

  v5 = v4;
  v28 = *MEMORY[0x24BDAC8D0];
  v7 = *(void **)(v4 + 168);
  if (!v7)
  {
    v10 = *(_QWORD *)(a1 + 16);
    type metadata accessor for AnyGesture(0, v10, a3, a4);
    v13 = 0;
LABEL_6:
    AGGraphGetValue();
    v14 = (uint64_t *)swift_retain();
    v12 = AnyGestureInfo.makeItem(_:uniqueId:)(v14, v13);
    v8 = v15;
    LODWORD(v9) = v16;
    goto LABEL_7;
  }
  v8 = *(void **)(v4 + 176);
  v9 = *(unsigned int *)(v4 + 184);
  v10 = *(_QWORD *)(a1 + 16);
  type metadata accessor for AnyGesture(0, v10, a3, a4);
  Value = (_QWORD *)AGGraphGetValue();
  if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v7 + 88))(*Value) & 1) == 0)
  {
    swift_retain();
    AnyGestureInfo.eraseItem(info:)((uint64_t)v7, (uint64_t)v8, v9, a1);
    outlined consume of AnyGestureInfo<()>.Value?((uint64_t)v7, v8);
    v13 = v9 + 1;
    goto LABEL_6;
  }
  v12 = *(_QWORD *)AGGraphGetValue();
  outlined copy of AnyGestureInfo<()>.Value?(v7, v8);
  swift_retain();
LABEL_7:
  v17 = swift_release();
  v25 = v12;
  v26 = v8;
  v27 = v9;
  v18 = MEMORY[0x24BDAC7A8](v17);
  v24[2] = a1;
  v24[3] = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyGestureInfo<A>, a1, v18);
  v21 = type metadata accessor for AnyGestureInfo.Value(0, v10, v19, v20);
  swift_retain();
  v22 = v8;
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v25, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)v24, v21, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v23);
  swift_release();

  outlined consume of AnyGestureInfo<()>.Value?(*(_QWORD *)(v5 + 168), *(void **)(v5 + 176));
  *(_QWORD *)(v5 + 168) = v12;
  *(_QWORD *)(v5 + 176) = v22;
  *(_DWORD *)(v5 + 184) = v9;
}

uint64_t AnyGestureInfo.eraseItem(info:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for _GestureOutputs(0, *(_QWORD *)(a4 + 16), a3, a4);
  _GestureOutputs.detachIndirectOutputs()();
  AGSubgraphApply();
  return AGSubgraphInvalidate();
}

uint64_t AnyGestureInfo.makeItem(_:uniqueId:)(uint64_t *a1, unsigned int a2)
{
  uint64_t v2;
  id v5;
  void *v6;
  uint64_t result;
  unsigned int v8;
  id v9;
  uint64_t v10;

  v5 = (id)AGSubgraphGetGraph();
  v6 = (void *)AGSubgraphCreate();

  AGSubgraphAddChild();
  result = AGGraphGetCurrentAttribute();
  if ((_DWORD)result == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v8 = result;
    AGGraphClearUpdate();
    v9 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    closure #1 in AnyGestureInfo.makeItem(_:uniqueId:)(v2, v8, a1, a2, v6, (uint64_t)&v10);
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
    return v10;
  }
  return result;
}

id closure #1 in AnyGestureInfo.makeItem(_:uniqueId:)@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X2>, unsigned int a4@<W3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t *__return_ptr, _QWORD, _QWORD, __int128 *);
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v38;
  __int128 v39;
  int v40;
  uint64_t v41;
  __int128 v42;
  int v43;
  uint64_t v48;
  _BYTE v49[16];
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _OWORD v58[2];
  __int128 v59;
  __int128 v60;
  _BYTE v61[48];
  _BYTE v62[44];
  __int128 v63;
  __int128 v64;
  _BYTE v65[48];
  _BYTE v66[44];
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v36 = *a3;
  v7 = *(_OWORD *)(a1 + 24);
  v59 = *(_OWORD *)(a1 + 8);
  v60 = v7;
  v8 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)&v61[32] = *(_OWORD *)(a1 + 72);
  *(_OWORD *)v62 = v8;
  *(_OWORD *)&v62[16] = *(_OWORD *)(a1 + 104);
  *(_OWORD *)&v62[28] = *(_OWORD *)(a1 + 116);
  v9 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)v61 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)&v61[16] = v9;
  v41 = v59;
  v40 = DWORD2(v59);
  v43 = v8;
  v42 = *(_OWORD *)&v62[8];
  v10 = *((_QWORD *)&v60 + 1);
  v11 = *(_QWORD *)v61;
  v38 = *(_OWORD *)&v61[24];
  v39 = *(_OWORD *)&v61[8];
  v12 = *(_QWORD *)&v61[40];
  v13 = *(_QWORD *)&v62[24];
  v14 = *(_QWORD *)&v62[36];
  swift_beginAccess();
  v15 = *(_DWORD *)(v60 + 16);
  v16 = *(_QWORD *)(v60 + 24);
  v34 = *(_OWORD *)(v60 + 48);
  v35 = *(_OWORD *)(v60 + 32);
  v18 = *(_QWORD *)(v60 + 64);
  v17 = *(_QWORD *)(v60 + 72);
  v19 = *(_BYTE *)(v60 + 80);
  v33 = *(_BYTE *)(v60 + 81);
  v20 = *(_QWORD *)(v60 + 88);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
  v21 = swift_allocObject();
  *(_DWORD *)(v21 + 16) = v15;
  *(_QWORD *)(v21 + 24) = v16;
  *(_OWORD *)(v21 + 32) = v35;
  *(_OWORD *)(v21 + 48) = v34;
  *(_QWORD *)(v21 + 64) = v18;
  *(_QWORD *)(v21 + 72) = v17;
  *(_BYTE *)(v21 + 80) = v19;
  *(_BYTE *)(v21 + 81) = v33;
  *(_QWORD *)(v21 + 88) = v20;
  outlined retain of _GestureInputs((uint64_t)&v59);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  v22 = *(_QWORD *)(v36 + 80);
  LODWORD(v52) = *(_DWORD *)(a1 + 120);
  DWORD1(v52) = a2;
  v50 = type metadata accessor for AnyResetSeed(0, v22, v23, v24);
  v51 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyResetSeed<A>, v50);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<UInt32>, MEMORY[0x24BEE44F0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE095F0]);
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v52, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_11, (uint64_t)v49, v50, MEMORY[0x24BEE4078], v25, MEMORY[0x24BEE40A8], v26);
  *(_QWORD *)&v63 = v41;
  DWORD2(v63) = v40;
  *(_QWORD *)&v64 = v21;
  *((_QWORD *)&v64 + 1) = v10;
  *(_QWORD *)v65 = v11;
  *(_OWORD *)&v65[8] = v39;
  *(_OWORD *)&v65[24] = v38;
  *(_QWORD *)&v65[40] = v12;
  *(_DWORD *)v66 = v43;
  *(_OWORD *)&v66[8] = v42;
  *(_QWORD *)&v66[24] = v13;
  *(_QWORD *)&v66[36] = v14;
  v56 = *(_OWORD *)&v65[32];
  v57 = *(_OWORD *)v66;
  v58[0] = *(_OWORD *)&v66[16];
  *(_OWORD *)((char *)v58 + 12) = *(_OWORD *)&v66[28];
  v52 = v63;
  v53 = v64;
  v54 = *(_OWORD *)v65;
  v55 = *(_OWORD *)&v65[16];
  v27 = *(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD, __int128 *))(*a3 + 96);
  outlined retain of _GestureInputs((uint64_t)&v63);
  v27(&v48, a4, a2, &v52);
  outlined release of _GestureInputs((uint64_t)&v63);
  v28 = *(_QWORD *)(a1 + 144);
  v29 = *(_DWORD *)(a1 + 152);
  *(_QWORD *)&v52 = *(_QWORD *)(a1 + 136);
  *((_QWORD *)&v52 + 1) = v28;
  LODWORD(v53) = v29;
  type metadata accessor for _GestureOutputs(0, v22, v30, v31);
  _GestureOutputs.attachIndirectOutputs(_:)((uint64_t)&v48);
  outlined release of _GestureInputs((uint64_t)&v63);
  swift_bridgeObjectRelease();
  *(_QWORD *)a6 = a3;
  *(_QWORD *)(a6 + 8) = a5;
  *(_DWORD *)(a6 + 16) = a4;
  swift_retain();
  return a5;
}

uint64_t AnyResetSeed.info.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *Value;
  uint64_t v5;
  void *v6;
  id v7;

  type metadata accessor for AnyGestureInfo.Value(0, a2, a3, a4);
  Value = (uint64_t *)AGGraphGetValue();
  v5 = *Value;
  v6 = (void *)Value[1];
  swift_retain();
  v7 = v6;
  return v5;
}

void protocol witness for static StatefulRule.initialValue.getter in conformance AnyGestureInfo<A>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
}

uint64_t AnyResetSeed.value.getter(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  int v9;

  v4 = *(_DWORD *)AGGraphGetValue();
  AnyResetSeed.info.getter(a1, a2, v5, v6);
  v8 = v7;
  LODWORD(a1) = v9;
  swift_release();

  return (a1 + v4);
}

uint64_t AnyGestureChild.info.getter()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t v2;
  uint64_t *Value;
  uint64_t v4;
  void *v5;
  id v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for AnyGestureInfo.Value(0, AssociatedTypeWitness, v1, v2);
  Value = (uint64_t *)AGGraphGetValue();
  v4 = *Value;
  v5 = (void *)Value[1];
  swift_retain();
  v6 = v5;
  return v4;
}

uint64_t protocol witness for Rule.value.getter in conformance AnyResetSeed<A>@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;

  result = AnyResetSeed.value.getter(*v2, *(_QWORD *)(a1 + 16));
  *a2 = result;
  return result;
}

void AnyGestureChild.updateValue()()
{
  uint64_t v0;
  int v1;
  void *v2;
  void *v3;
  int v4;
  int v5;
  uint64_t v6;
  id v7;

  v1 = *(_DWORD *)(v0 + 4);
  AnyGestureChild.info.getter();
  v3 = v2;
  v5 = v4;
  swift_release();

  if (v1 == v5)
  {
    v6 = AnyGestureChild.info.getter();

    if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
    {
      __break(1u);
    }
    else
    {
      (*(void (**)(void))(*(_QWORD *)v6 + 104))();
      swift_release();
    }
  }
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance AnyGestureChild<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 56))(a2, 1, 1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnyGestureChild<A>()
{
  return specialized AnyGestureChild.description.getter();
}

uint64_t type metadata accessor for AnyGestureInfo.Value(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyGestureInfo.Value);
}

uint64_t type metadata accessor for AnyGestureInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyGestureInfo);
}

uint64_t outlined release of AnyGestureInfo<A>(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *(void **)(a1 + 96);
  v3 = *(_QWORD *)(a1 + 168);
  v4 = *(void **)(a1 + 176);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined consume of AnyGestureInfo<()>.Value?(v3, v4);
  return a1;
}

uint64_t type metadata accessor for AnyGestureStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyGestureStorage);
}

uint64_t instantiation function for generic protocol witness table for AnyGesture<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyGesture<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for AnyGesture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyGesture);
}

uint64_t type metadata accessor for AnyGestureStorageBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyGestureStorageBase);
}

uint64_t method lookup function for AnyGestureStorageBase()
{
  return swift_lookUpClassMethod();
}

void destroy for AnyGestureInfo(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if (*(_QWORD *)(a1 + 168))
  {
    swift_release();

  }
}

uint64_t initializeWithCopy for AnyGestureInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v14;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  v5 = a2 + 168;
  v14 = *(_QWORD *)(a2 + 168);
  v7 = *(void **)(a2 + 96);
  v6 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v7;
  *(_QWORD *)(a1 + 104) = v6;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  v8 = *(void **)(a2 + 160);
  *(_QWORD *)(a1 + 160) = v8;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10 = v8;
  if (v14)
  {
    v11 = *(void **)(a2 + 176);
    *(_QWORD *)(a1 + 168) = v14;
    *(_QWORD *)(a1 + 176) = v11;
    *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
    swift_retain();
    v12 = v11;
  }
  else
  {
    *(_OWORD *)(a1 + 168) = *(_OWORD *)v5;
    *(_DWORD *)(a1 + 184) = *(_DWORD *)(v5 + 16);
  }
  return a1;
}

uint64_t assignWithCopy for AnyGestureInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  __int128 v21;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  v6 = *(void **)(a2 + 96);
  v7 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v6;
  v8 = v6;

  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  v9 = *(void **)(a2 + 160);
  v10 = *(void **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v9;
  v11 = v9;

  v14 = *(_QWORD *)(a2 + 168);
  if (!*(_QWORD *)(a1 + 168))
  {
    if (v14)
    {
      *(_QWORD *)(a1 + 168) = v14;
      v18 = *(void **)(a2 + 176);
      *(_QWORD *)(a1 + 176) = v18;
      *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
      swift_retain();
      v19 = v18;
      return a1;
    }
LABEL_7:
    v21 = *(_OWORD *)(a2 + 168);
    *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = v21;
    return a1;
  }
  if (!v14)
  {
    v20 = type metadata accessor for AnyGestureInfo.Value(0, *(_QWORD *)(a3 + 16), v12, v13);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(a1 + 168, v20);
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + 168) = v14;
  swift_retain();
  swift_release();
  v15 = *(void **)(a2 + 176);
  v16 = *(void **)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v15;
  v17 = v15;

  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  return a1;
}

__n128 __swift_memcpy188_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[10];
  *(_OWORD *)(a1 + 172) = *(__int128 *)((char *)a2 + 172);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t assignWithTake for AnyGestureInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  v6 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);

  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  v7 = *(void **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);

  v10 = *(_QWORD *)(a2 + 168);
  if (!*(_QWORD *)(a1 + 168))
    goto LABEL_5;
  if (!v10)
  {
    v12 = type metadata accessor for AnyGestureInfo.Value(0, *(_QWORD *)(a3 + 16), v8, v9);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a1 + 168, v12);
LABEL_5:
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
    return a1;
  }
  *(_QWORD *)(a1 + 168) = v10;
  swift_release();
  v11 = *(void **)(a1 + 176);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);

  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyGestureInfo(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 188))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyGestureInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 184) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 188) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 188) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void destroy for AnyGestureInfo.Value(uint64_t a1)
{
  swift_release();

}

uint64_t initializeBufferWithCopyOfBuffer for AnyGestureInfo.Value(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_retain();
  v4 = v3;
  return a1;
}

uint64_t assignWithCopy for AnyGestureInfo.Value(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  v4 = *(void **)(a2 + 8);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v6 = v4;

  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for AnyGestureInfo.Value(uint64_t a1, uint64_t a2)
{
  void *v4;

  swift_release();
  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

void base witness table accessor for _AttributeBody in AnyGestureInfo<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t specialized AnyGestureChild.description.getter()
{
  return _typeName(_:qualified:)();
}

uint64_t type metadata accessor for AnyResetSeed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyResetSeed);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_11@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t partial apply for closure #1 in RuleContext.value.setter()
{
  return AGGraphSetOutputValue();
}

uint64_t type metadata accessor for AnyGestureChild(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyGestureChild);
}

void base witness table accessor for _AttributeBody in AnyGestureChild<A>()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for _AttributeBody in AnyResetSeed<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t SubscriptionLifetime.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = swift_allocObject();
  SubscriptionLifetime.init()(v0, v1, v2, v3);
  return v0;
}

BOOL SubscriptionLifetime.isUninitialized.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v13;

  v5 = *v4;
  v6 = type metadata accessor for SubscriptionLifetime.StateType(0, *(_QWORD *)(*v4 + 80), *(_QWORD *)(*v4 + 88), a4);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v13 - v8;
  v10 = (uint64_t)v4 + *(_QWORD *)(v5 + 104);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
  v11 = swift_getEnumCaseMultiPayload() == 2;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return v11;
}

void SubscriptionLifetime.subscribe<A>(subscriber:to:)(uint64_t a1)
{
  MEMORY[0x24BDAC7A8](a1);
  type metadata accessor for SubscriptionLifetime.Connection();
}

uint64_t sub_234EF8AF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(_BYTE *, uint64_t, uint64_t);
  uint64_t EnumCaseMultiPayload;
  __int128 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v29)(_BYTE *);
  void (*v30)(_BYTE *, uint64_t);
  _BYTE v31[96];

  *(_QWORD *)(v6 - 232) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v6 - 224) = a1;
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v6 - 216) = &v31[-v7];
  v9 = type metadata accessor for SubscriptionLifetime.StateType(0, v2, v4, v8);
  MEMORY[0x24BDAC7A8](v9);
  *(_QWORD *)(v6 - 264) = &v31[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v11);
  v13 = &v31[-v12];
  v14 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = &v31[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = *(_QWORD *)(v1 + 104);
  v20 = v19;
  v21 = v3 + v18;
  swift_beginAccess();
  v22 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v20 + 16);
  *(_QWORD *)(v6 - 288) = v21;
  v22(v13, v21, v9);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  *(_QWORD *)(v6 - 256) = v20;
  if ((_DWORD)EnumCaseMultiPayload != 1)
  {
    *(_QWORD *)(v6 - 312) = v14;
    *(_QWORD *)(v6 - 304) = v4;
    v29 = *(void (**)(_BYTE *))(v20 + 8);
    *(_QWORD *)(v6 - 320) = v9;
    v29(v13);
    goto LABEL_6;
  }
  MEMORY[0x24BDAC7A8](EnumCaseMultiPayload);
  strcpy(&v31[-48], "to subscriber subscription subscriptionID ");
  *(_QWORD *)(v6 - 192) = v2;
  *(_QWORD *)(v6 - 184) = type metadata accessor for AnyCancellable();
  *(_QWORD *)(v6 - 176) = type metadata accessor for Subscription();
  *(_QWORD *)(v6 - 168) = MEMORY[0x24BEE1768];
  v24 = (__int128 *)&v13[*(int *)(swift_getTupleTypeMetadata() + 64)];
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v14 + 32))(v17, v13, v2);
  v25 = outlined init with take of ScrollStateRequest(v24, v6 - 136);
  MEMORY[0x24BDAC7A8](v25);
  v26 = *(_QWORD *)(v6 - 208);
  *(_QWORD *)&v31[-32] = v2;
  *(_QWORD *)&v31[-24] = v26;
  *(_DWORD *)&v31[-16] = 3;
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v17, (uint64_t)partial apply for closure #1 in compareValues<A>(_:_:options:), (uint64_t)&v31[-48], v2, MEMORY[0x24BEE4078], MEMORY[0x24BEE1328], MEMORY[0x24BEE40A8], v27);
  if (*(_BYTE *)(v6 - 192) != 1)
  {
    *(_QWORD *)(v6 - 304) = v4;
    AnyCancellable.cancel()();
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v6 - 136), *(_QWORD *)(v6 - 112));
    dispatch thunk of Cancellable.cancel()();
    swift_release();
    *(_QWORD *)(v6 - 312) = v14;
    v30 = *(void (**)(_BYTE *, uint64_t))(v14 + 8);
    *(_QWORD *)(v6 - 320) = v9;
    v30(v17, v2);
    __swift_destroy_boxed_opaque_existential_1(v6 - 136);
LABEL_6:
    ++*(_QWORD *)(v3 + 16);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v6 - 296) + 16))(v5, *(_QWORD *)(v6 - 248), *(_QWORD *)(v6 - 280));
    swift_retain();
    SubscriptionLifetime.Connection.init(parent:downstream:subscriptionID:)();
  }
  (*(void (**)(_BYTE *, uint64_t))(v14 + 8))(v17, v2);
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1(v6 - 136);
}

uint64_t *SubscriptionLifetime.init()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;

  v5 = *v4;
  v4[2] = 0;
  type metadata accessor for SubscriptionLifetime.StateType(0, *(_QWORD *)(v5 + 80), *(_QWORD *)(v5 + 88), a4);
  swift_storeEnumTagMultiPayload();
  return v4;
}

uint64_t type metadata accessor for SubscriptionLifetime.StateType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SubscriptionLifetime.StateType);
}

void type metadata accessor for SubscriptionLifetime.Connection()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t *SubscriptionLifetime.deinit()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *v0;
  SubscriptionLifetime.cancel()();
  v2 = (uint64_t)v0 + *(_QWORD *)(*v0 + 104);
  v4 = type metadata accessor for SubscriptionLifetime.StateType(0, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), v3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v2, v4);
  return v0;
}

Swift::Void __swiftcall SubscriptionLifetime.cancel()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t EnumCaseMultiPayload;
  uint64_t TupleTypeMetadata;
  uint64_t v14;
  _QWORD v15[3];
  uint64_t v16;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 80);
  v4 = type metadata accessor for SubscriptionLifetime.StateType(0, v3, *(_QWORD *)(*v1 + 88), v0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0) + 40;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v15 - v9 + 40;
  v11 = (uint64_t)v1 + *(_QWORD *)(v2 + 104);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v10, v11, v4);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    MEMORY[0x24BDAC7A8](EnumCaseMultiPayload);
    strcpy((char *)&v14 - 48, "to subscriber subscription subscriptionID ");
    v15[0] = v3;
    v15[1] = type metadata accessor for AnyCancellable();
    v15[2] = type metadata accessor for Subscription();
    v16 = MEMORY[0x24BEE1768];
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    outlined init with take of ScrollStateRequest((__int128 *)&v10[*(int *)(TupleTypeMetadata + 64)], (uint64_t)v15);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v10, v3);
    AnyCancellable.cancel()();
    __swift_project_boxed_opaque_existential_1(v15, v16);
    dispatch thunk of Cancellable.cancel()();
    swift_release();
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 40))(v11, v7, v4);
    swift_endAccess();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }
}

uint64_t SubscriptionLifetime.__deallocating_deinit()
{
  SubscriptionLifetime.deinit();
  return swift_deallocClassInstance();
}

void SubscriptionLifetime.Connection.init(parent:downstream:subscriptionID:)()
{
  CombineIdentifier.init()();
  type metadata accessor for SubscriptionLifetime.Connection();
}

uint64_t sub_234EF933C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  swift_weakInit();
  swift_weakAssign();
  swift_release();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v4 + *(int *)(a1 + 56), v3, v1);
  *(_QWORD *)(v4 + *(int *)(a1 + 60)) = v2;
  return result;
}

unint64_t type metadata accessor for Subscription()
{
  unint64_t result;

  result = lazy cache variable for type metadata for Subscription;
  if (!lazy cache variable for type metadata for Subscription)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Subscription);
  }
  return result;
}

uint64_t SubscriptionLifetime.shouldAcceptSubscription(_:for:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t TupleTypeMetadata3;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *TupleTypeMetadata;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;

  v34 = a2;
  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 80);
  v8 = type metadata accessor for SubscriptionLifetime.StateType(0, v7, *(_QWORD *)(*v4 + 88), a4);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v30 - v13;
  v15 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (uint64_t)v4 + *(_QWORD *)(v6 + 104);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v14, v19, v8);
  if (swift_getEnumCaseMultiPayload())
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    dispatch thunk of Cancellable.cancel()();
    return 0;
  }
  v31 = type metadata accessor for AnyCancellable();
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v21 = *(_QWORD *)&v14[*(int *)(TupleTypeMetadata3 + 48)];
  v22 = *(_QWORD *)&v14[*(int *)(TupleTypeMetadata3 + 64)];
  v32 = *(uint64_t (**)(char *, char *, uint64_t))(v15 + 32);
  v33 = v21;
  v23 = v32(v18, v14, v7);
  if (v22 != v34)
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    dispatch thunk of Cancellable.cancel()();
    swift_release();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v7);
    return 0;
  }
  MEMORY[0x24BDAC7A8](v23);
  strcpy((char *)&v30 - 48, "to subscriber subscription subscriptionID ");
  v35 = v7;
  v36 = v31;
  v37 = type metadata accessor for Subscription();
  v38 = MEMORY[0x24BEE1768];
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  v25 = TupleTypeMetadata[12];
  v26 = (uint64_t)&v11[TupleTypeMetadata[16]];
  v27 = TupleTypeMetadata[20];
  v32(v11, v18, v7);
  *(_QWORD *)&v11[v25] = v33;
  outlined init with copy of AnyTrackedValue((uint64_t)a1, v26);
  *(_QWORD *)&v11[v27] = v34;
  v28 = 1;
  swift_storeEnumTagMultiPayload();
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 40))(v19, v11, v8);
  swift_endAccess();
  return v28;
}

uint64_t SubscriptionLifetime.shouldAcceptValue(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t EnumCaseMultiPayload;
  uint64_t TupleTypeMetadata;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[5];

  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 80);
  v8 = type metadata accessor for SubscriptionLifetime.StateType(0, v7, *(_QWORD *)(*v4 + 88), a4);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v18 - v10;
  v12 = (uint64_t)v4 + *(_QWORD *)(v6 + 104);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    MEMORY[0x24BDAC7A8](EnumCaseMultiPayload);
    strcpy((char *)&v18[-6], "to subscriber subscription subscriptionID ");
    v18[1] = v7;
    v18[2] = type metadata accessor for AnyCancellable();
    v18[3] = type metadata accessor for Subscription();
    v18[4] = MEMORY[0x24BEE1768];
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    swift_release();
    v15 = (uint64_t)&v11[*(int *)(TupleTypeMetadata + 64)];
    v16 = *(_QWORD *)&v11[*(int *)(TupleTypeMetadata + 80)];
    __swift_destroy_boxed_opaque_existential_1(v15);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v11, v7);
    if (v16 == a1)
      return 1;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  return 0;
}

uint64_t SubscriptionLifetime.shouldAcceptCompletion(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t EnumCaseMultiPayload;
  uint64_t TupleTypeMetadata;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  _QWORD v21[5];

  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 80);
  v8 = type metadata accessor for SubscriptionLifetime.StateType(0, v7, *(_QWORD *)(*v4 + 88), a4);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v21 - v13;
  v15 = (uint64_t)v4 + *(_QWORD *)(v6 + 104);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v14, v15, v8);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    MEMORY[0x24BDAC7A8](EnumCaseMultiPayload);
    strcpy((char *)&v21[-6], "to subscriber subscription subscriptionID ");
    v21[1] = v7;
    v21[2] = type metadata accessor for AnyCancellable();
    v21[3] = type metadata accessor for Subscription();
    v21[4] = MEMORY[0x24BEE1768];
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    swift_release();
    v18 = (uint64_t)&v14[*(int *)(TupleTypeMetadata + 64)];
    v19 = *(_QWORD *)&v14[*(int *)(TupleTypeMetadata + 80)];
    __swift_destroy_boxed_opaque_existential_1(v18);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v14, v7);
    result = 0;
    if (v19 == a1)
    {
      swift_storeEnumTagMultiPayload();
      swift_beginAccess();
      (*(void (**)(uint64_t, char *, uint64_t))(v9 + 40))(v15, v11, v8);
      swift_endAccess();
      return 1;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    return 0;
  }
  return result;
}

uint64_t SubscriptionLifetime.Connection.receive(subscription:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = swift_weakLoadStrong();
  if (result)
  {
    if ((SubscriptionLifetime.shouldAcceptSubscription(_:for:)(a1, *(_QWORD *)(v2 + *(int *)(a2 + 60)), v6, v7) & 1) != 0)
    {
      dispatch thunk of Subscriber.receive(subscription:)();
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      static Subscribers.Demand.unlimited.getter();
      dispatch thunk of Subscription.request(_:)();
    }
    return swift_release();
  }
  return result;
}

uint64_t SubscriptionLifetime.Connection.receive(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (swift_weakLoadStrong())
  {
    if ((SubscriptionLifetime.shouldAcceptValue(for:)(*(_QWORD *)(v2 + *(int *)(a2 + 60)), v4, v5, v6) & 1) != 0)
      dispatch thunk of Subscriber.receive(_:)();
    swift_release();
  }
  return static Subscribers.Demand.none.getter();
}

uint64_t SubscriptionLifetime.Connection.receive(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = swift_weakLoadStrong();
  if (result)
  {
    if ((SubscriptionLifetime.shouldAcceptCompletion(for:)(*(_QWORD *)(v2 + *(int *)(a2 + 60)), v5, v6, v7) & 1) != 0)
      dispatch thunk of Subscriber.receive(completion:)();
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance SubscriptionLifetime<A>.Connection<A1>@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for CombineIdentifier();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

void protocol witness for Cancellable.cancel() in conformance SubscriptionLifetime<A>()
{
  SubscriptionLifetime.cancel()();
}

uint64_t type metadata completion function for SubscriptionLifetime(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for SubscriptionLifetime.StateType(319, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), a4);
  if (v5 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for SubscriptionLifetime(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SubscriptionLifetime);
}

uint64_t method lookup function for SubscriptionLifetime()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SubscriptionLifetime.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t type metadata completion function for SubscriptionLifetime.Connection()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for CombineIdentifier();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SubscriptionLifetime.Connection(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for CombineIdentifier();
  v7 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 80);
  v8 = *(_DWORD *)(*(_QWORD *)(v6 - 8) + 80);
  v9 = *a2;
  *a1 = *a2;
  v10 = (v8 | v7) & 0xF8 | 7u;
  v11 = v9 + ((v10 + 16) & ~v10);
  swift_retain();
  return v11;
}

uint64_t destroy for SubscriptionLifetime.Connection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v4 = type metadata accessor for CombineIdentifier();
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v6 = (a1 + *(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_weakDestroy();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((v6 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
}

uint64_t initializeWithCopy for SubscriptionLifetime.Connection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for CombineIdentifier();
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, v6);
  v8 = (*(_QWORD *)(v7 + 64) + 7 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = swift_weakCopyInit();
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v11 + 8 + v9) & ~v11;
  v13 = (v11 + 8 + v8) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v10 + 16))(v12, v13);
  *(_QWORD *)((*(_QWORD *)(v10 + 64) + 7 + v12) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v10 + 64) + 7 + v13) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithCopy for SubscriptionLifetime.Connection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for CombineIdentifier();
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(a1, a2, v6);
  v8 = (*(_QWORD *)(v7 + 64) + 7 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = swift_weakCopyAssign();
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v11 + 8 + v9) & ~v11;
  v13 = (v11 + 8 + v8) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v10 + 24))(v12, v13);
  *(_QWORD *)((*(_QWORD *)(v10 + 64) + 7 + v12) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v10 + 64) + 7 + v13) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for SubscriptionLifetime.Connection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for CombineIdentifier();
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, v6);
  v8 = (*(_QWORD *)(v7 + 64) + 7 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = swift_weakTakeInit();
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v11 + 8 + v9) & ~v11;
  v13 = (v11 + 8 + v8) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v10 + 32))(v12, v13);
  *(_QWORD *)((*(_QWORD *)(v10 + 64) + 7 + v12) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v10 + 64) + 7 + v13) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for SubscriptionLifetime.Connection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for CombineIdentifier();
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40))(a1, a2, v6);
  v8 = (*(_QWORD *)(v7 + 64) + 7 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = swift_weakTakeAssign();
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v11 + 8 + v9) & ~v11;
  v13 = (v11 + 8 + v8) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v10 + 40))(v12, v13);
  *(_QWORD *)((*(_QWORD *)(v10 + 64) + 7 + v12) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v10 + 64) + 7 + v13) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for SubscriptionLifetime.Connection(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;

  v6 = type metadata accessor for CombineIdentifier();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(a3 + 24);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int *)(v10 + 84);
  if (v11 <= v8)
    v12 = *(_DWORD *)(v7 + 84);
  else
    v12 = *(_DWORD *)(v10 + 84);
  if (!a2)
    return 0;
  v13 = *(_QWORD *)(v7 + 64);
  v14 = *(unsigned __int8 *)(v10 + 80);
  if (v12 < a2)
  {
    if (((((*(_QWORD *)(v10 + 64) + ((v14 + ((v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v14) + 7) & 0xFFFFFFFFFFFFFFF8)
         + 8) & 0xFFFFFFF8) != 0)
      v15 = 2;
    else
      v15 = a2 - v12 + 1;
    if (v15 >= 0x10000)
      v16 = 4;
    else
      v16 = 2;
    if (v15 < 0x100)
      v16 = 1;
    if (v15 >= 2)
      v17 = v16;
    else
      v17 = 0;
    __asm { BR              X3 }
  }
  if (!v12)
    return 0;
  if (v8 >= v11)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(a1, *(unsigned int *)(v7 + 84), v6);
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v10 + 48))((((a1 + v13 + 7) & 0xFFFFFFFFFFFFFFF8) + v14 + 8) & ~v14, v11, v9);
}

void storeEnumTagSinglePayload for SubscriptionLifetime.Connection(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;

  v8 = *(_QWORD *)(type metadata accessor for CombineIdentifier() - 8);
  v9 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v9 + 84) <= *(_DWORD *)(v8 + 84))
    v10 = *(_DWORD *)(v8 + 84);
  else
    v10 = *(_DWORD *)(v9 + 84);
  v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 >= a3)
  {
    v14 = 0;
    if (a2 <= v10)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v9 + 64) + (((_DWORD)v11 + ((*(_DWORD *)(v8 + 64) + 7) & 0xFFFFFFF8) + 8) & ~(_DWORD)v11) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v12 = a3 - v10 + 1;
    else
      v12 = 2;
    if (v12 >= 0x10000)
      v13 = 4;
    else
      v13 = 2;
    if (v12 < 0x100)
      v13 = 1;
    if (v12 >= 2)
      v14 = v13;
    else
      v14 = 0;
    if (a2 <= v10)
LABEL_17:
      __asm { BR              X17 }
  }
  if (((*(_DWORD *)(v9 + 64) + (((_DWORD)v11 + ((*(_DWORD *)(v8 + 64) + 7) & 0xFFFFFFF8) + 8) & ~(_DWORD)v11) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v15 = ~v10 + a2;
    bzero(a1, ((*(_QWORD *)(v9 + 64) + ((v11 + ((*(_QWORD *)(v8 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v11) + 7) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *a1 = v15;
  }
  __asm { BR              X10 }
}

void sub_234EFA500()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_234EFA508()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x234EFA510);
}

void sub_234EFA564()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_234EFA56C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_234EFA574(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_WORD *)(v10 + v12) = 0;
  if (!(_DWORD)v11)
    JUMPOUT(0x234EFA57CLL);
  if (v4 >= a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 56))(v10, v11, v4);
  else
    return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 56))((((v10 + v8 + 7) & 0xFFFFFFFFFFFFFFF8) + v7 + 8) & v9, v11, a3);
}

uint64_t type metadata completion function for SubscriptionLifetime.StateType()
{
  uint64_t result;
  unint64_t v1;
  char v2;
  char v3;
  char *v4;
  char *v5;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout3();
    v4 = &v3;
    swift_getTupleTypeLayout();
    v5 = &v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for SubscriptionLifetime.StateType(_QWORD *__dst, unsigned __int8 *__src, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v13;
  unsigned int v14;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(unint64_t, unint64_t, uint64_t);

  v4 = __dst;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = (((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = v7 + 8;
  v9 = ((v7 + 47) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v9 <= v8)
    v10 = v8;
  else
    v10 = v9;
  v11 = *(_DWORD *)(v5 + 80);
  if ((v11 & 0x1000F8) != 0 || (v10 | 1) > 0x18)
  {
    v13 = *(_QWORD *)__src;
    *v4 = *(_QWORD *)__src;
    v4 = (_QWORD *)(v13 + ((unsigned __int16)((v11 & 0xF8) + 23) & (unsigned __int16)~(v11 & 0xF8) & 0x1F8));
  }
  else
  {
    v14 = __src[v10];
    if ((v10 & 0xFFFFFFF8) != 0 && v14 >= 2)
      v14 = *(_DWORD *)__src + 2;
    if (v14 == 1)
    {
      (*(void (**)(_QWORD *, unsigned __int8 *))(v5 + 16))(__dst, __src);
      v18 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8);
      v19 = (_QWORD *)((unint64_t)&__src[v6 + 7] & 0xFFFFFFFFFFFFF8);
      *v18 = *v19;
      v20 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
      v21 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
      v22 = *(_QWORD *)(v21 + 24);
      *(_QWORD *)(v20 + 24) = v22;
      *(_QWORD *)(v20 + 32) = *(_QWORD *)(v21 + 32);
      v23 = **(void (***)(unint64_t, unint64_t, uint64_t))(v22 - 8);
      swift_retain();
      v23(v20, v21, v22);
      *(_QWORD *)((v20 + 47) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v21 + 47) & 0xFFFFFFFFFFFFF8);
      *((_BYTE *)v4 + v10) = 1;
      return v4;
    }
    if (v14)
    {
      memcpy(__dst, __src, v10 | 1);
      return v4;
    }
    (*(void (**)(_QWORD *, unsigned __int8 *))(v5 + 16))(__dst, __src);
    v16 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    v17 = (_QWORD *)((unint64_t)&__src[v6 + 7] & 0xFFFFFFFFFFFFF8);
    *v16 = *v17;
    *(_QWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFF8);
    *((_BYTE *)v4 + v10) = 0;
  }
  swift_retain();
  return v4;
}

_DWORD *destroy for SubscriptionLifetime.StateType(_DWORD *result, uint64_t a2)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;

  v2 = result;
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = (((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v6 = v5 + 8;
  v7 = ((v5 + 47) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v7 <= v6)
    v7 = v6;
  v8 = v7 & 0xFFFFFFF8;
  v9 = *((unsigned __int8 *)result + v7);
  if (v9 >= 2 && v8 != 0)
    v9 = *result + 2;
  if (v9 == 1)
  {
    (*(void (**)(_DWORD *))(v3 + 8))(result);
    swift_release();
    return (_DWORD *)__swift_destroy_boxed_opaque_existential_1(((((unint64_t)v2 + v4 + 7) & 0xFFFFFFFFFFFFF8)
                                                               + 15) & 0xFFFFFFFFFFFFFFF8);
  }
  else if (!v9)
  {
    (*(void (**)(_DWORD *))(v3 + 8))(result);
    return (_DWORD *)swift_release();
  }
  return result;
}

_BYTE *initializeWithCopy for SubscriptionLifetime.StateType(_BYTE *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void (*v20)(unint64_t, unint64_t, uint64_t);

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = (((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = v7 + 8;
  v9 = ((v7 + 47) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v9 <= v8)
    v10 = v8;
  else
    v10 = v9;
  v11 = __src[v10];
  if (v11 >= 2 && (v10 & 0xFFFFFFF8) != 0)
    v11 = *(_DWORD *)__src + 2;
  if (v11 == 1)
  {
    (*(void (**)(_BYTE *, unsigned __int8 *))(v5 + 16))(__dst, __src);
    v15 = (_QWORD *)((unint64_t)&__dst[v6 + 7] & 0xFFFFFFFFFFFFF8);
    v16 = (_QWORD *)((unint64_t)&__src[v6 + 7] & 0xFFFFFFFFFFFFF8);
    *v15 = *v16;
    v17 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
    v18 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
    v19 = *(_QWORD *)(v18 + 24);
    *(_QWORD *)(v17 + 24) = v19;
    *(_QWORD *)(v17 + 32) = *(_QWORD *)(v18 + 32);
    v20 = **(void (***)(unint64_t, unint64_t, uint64_t))(v19 - 8);
    swift_retain();
    v20(v17, v18, v19);
    *(_QWORD *)((v17 + 47) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v18 + 47) & 0xFFFFFFFFFFFFF8);
    __dst[v10] = 1;
  }
  else if (v11)
  {
    memcpy(__dst, __src, v10 | 1);
  }
  else
  {
    (*(void (**)(_BYTE *, unsigned __int8 *))(v5 + 16))(__dst, __src);
    v13 = (_QWORD *)((unint64_t)&__dst[v6 + 7] & 0xFFFFFFFFFFFFF8);
    v14 = (_QWORD *)((unint64_t)&__src[v6 + 7] & 0xFFFFFFFFFFFFF8);
    *v13 = *v14;
    *(_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFF8);
    __dst[v10] = 0;
    swift_retain();
  }
  return __dst;
}

unsigned __int8 *assignWithCopy for SubscriptionLifetime.StateType(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v14;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(unint64_t, unint64_t, uint64_t);

  if (__dst != __src)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    v8 = (((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
    v9 = v8 + 8;
    v10 = ((v8 + 47) & 0xFFFFFFFFFFFFFFF8) + 8;
    if (v10 <= v9)
      v11 = v9;
    else
      v11 = v10;
    v12 = __dst[v11];
    if (v12 >= 2 && (v11 & 0xFFFFFFF8) != 0)
      v12 = *(_DWORD *)__dst + 2;
    if (v12 == 1)
    {
      (*(void (**)(unsigned __int8 *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((((unint64_t)&__dst[v7 + 7] & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
    }
    else if (!v12)
    {
      (*(void (**)(unsigned __int8 *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
      swift_release();
    }
    v14 = __src[v11];
    if ((v11 & 0xFFFFFFF8) != 0 && v14 >= 2)
      v14 = *(_DWORD *)__src + 2;
    if (v14 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
      v18 = (_QWORD *)((unint64_t)&__dst[v7 + 7] & 0xFFFFFFFFFFFFF8);
      v19 = (_QWORD *)((unint64_t)&__src[v7 + 7] & 0xFFFFFFFFFFFFF8);
      *v18 = *v19;
      v20 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
      v21 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
      v22 = *(_QWORD *)(v21 + 24);
      *(_QWORD *)(v20 + 24) = v22;
      *(_QWORD *)(v20 + 32) = *(_QWORD *)(v21 + 32);
      v23 = **(void (***)(unint64_t, unint64_t, uint64_t))(v22 - 8);
      swift_retain();
      v23(v20, v21, v22);
      *(_QWORD *)((v20 + 47) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v21 + 47) & 0xFFFFFFFFFFFFF8);
      __dst[v11] = 1;
    }
    else if (v14)
    {
      memcpy(__dst, __src, v11 | 1);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
      v16 = (_QWORD *)((unint64_t)&__dst[v7 + 7] & 0xFFFFFFFFFFFFF8);
      v17 = (_QWORD *)((unint64_t)&__src[v7 + 7] & 0xFFFFFFFFFFFFF8);
      *v16 = *v17;
      *(_QWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFF8);
      __dst[v11] = 0;
      swift_retain();
    }
  }
  return __dst;
}

_BYTE *initializeWithTake for SubscriptionLifetime.StateType(_BYTE *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = (((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = v7 + 8;
  v9 = ((v7 + 47) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v9 <= v8)
    v10 = v8;
  else
    v10 = v9;
  v11 = __src[v10];
  if (v11 >= 2 && (v10 & 0xFFFFFFF8) != 0)
    v11 = *(_DWORD *)__src + 2;
  if (v11 == 1)
  {
    (*(void (**)(_BYTE *, unsigned __int8 *))(v5 + 32))(__dst, __src);
    v15 = (_QWORD *)((unint64_t)&__dst[v6 + 7] & 0xFFFFFFFFFFFFF8);
    v16 = (_QWORD *)((unint64_t)&__src[v6 + 7] & 0xFFFFFFFFFFFFF8);
    *v15 = *v16;
    v17 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
    v18 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
    v20 = *(_OWORD *)v18;
    v19 = *(_OWORD *)(v18 + 16);
    *(_QWORD *)(v17 + 32) = *(_QWORD *)(v18 + 32);
    *(_OWORD *)v17 = v20;
    *(_OWORD *)(v17 + 16) = v19;
    *(_QWORD *)((v17 + 47) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v18 + 47) & 0xFFFFFFFFFFFFF8);
    __dst[v10] = 1;
  }
  else if (v11)
  {
    memcpy(__dst, __src, v10 | 1);
  }
  else
  {
    (*(void (**)(_BYTE *, unsigned __int8 *))(v5 + 32))(__dst, __src);
    v13 = (_QWORD *)((unint64_t)&__dst[v6 + 7] & 0xFFFFFFFFFFFFF8);
    v14 = (_QWORD *)((unint64_t)&__src[v6 + 7] & 0xFFFFFFFFFFFFF8);
    *v13 = *v14;
    *(_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFF8);
    __dst[v10] = 0;
  }
  return __dst;
}

unsigned __int8 *assignWithTake for SubscriptionLifetime.StateType(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v14;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;

  if (__dst != __src)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    v8 = (((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
    v9 = v8 + 8;
    v10 = ((v8 + 47) & 0xFFFFFFFFFFFFFFF8) + 8;
    if (v10 <= v9)
      v11 = v9;
    else
      v11 = v10;
    v12 = __dst[v11];
    if (v12 >= 2 && (v11 & 0xFFFFFFF8) != 0)
      v12 = *(_DWORD *)__dst + 2;
    if (v12 == 1)
    {
      (*(void (**)(unsigned __int8 *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((((unint64_t)&__dst[v7 + 7] & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
    }
    else if (!v12)
    {
      (*(void (**)(unsigned __int8 *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
      swift_release();
    }
    v14 = __src[v11];
    if ((v11 & 0xFFFFFFF8) != 0 && v14 >= 2)
      v14 = *(_DWORD *)__src + 2;
    if (v14 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
      v18 = (_QWORD *)((unint64_t)&__dst[v7 + 7] & 0xFFFFFFFFFFFFF8);
      v19 = (_QWORD *)((unint64_t)&__src[v7 + 7] & 0xFFFFFFFFFFFFF8);
      *v18 = *v19;
      v20 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
      v21 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
      v23 = *(_OWORD *)v21;
      v22 = *(_OWORD *)(v21 + 16);
      *(_QWORD *)(v20 + 32) = *(_QWORD *)(v21 + 32);
      *(_OWORD *)v20 = v23;
      *(_OWORD *)(v20 + 16) = v22;
      *(_QWORD *)((v20 + 47) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v21 + 47) & 0xFFFFFFFFFFFFF8);
      __dst[v11] = 1;
    }
    else if (v14)
    {
      memcpy(__dst, __src, v11 | 1);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
      v16 = (_QWORD *)((unint64_t)&__dst[v7 + 7] & 0xFFFFFFFFFFFFF8);
      v17 = (_QWORD *)((unint64_t)&__src[v7 + 7] & 0xFFFFFFFFFFFFF8);
      *v16 = *v17;
      *(_QWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFF8);
      __dst[v11] = 0;
    }
  }
  return __dst;
}

uint64_t getEnumTagSinglePayload for SubscriptionLifetime.StateType(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  unsigned int v8;
  int v9;
  int v11;
  int v12;
  unsigned int v13;

  v3 = (((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v4 = v3 + 8;
  v5 = ((v3 + 47) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v5 <= v4)
    v5 = v4;
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_20;
  v6 = v5 | 1;
  v7 = 8 * (v5 | 1);
  if ((v5 | 1) <= 3)
  {
    v8 = (a2 + ~(-1 << v7) - 253) >> v7;
    if (v8 > 0xFFFE)
    {
      v9 = *(_DWORD *)&a1[v6];
      if (!v9)
        goto LABEL_20;
      goto LABEL_13;
    }
    if (v8 > 0xFE)
    {
      v9 = *(unsigned __int16 *)&a1[v6];
      if (!*(_WORD *)&a1[v6])
        goto LABEL_20;
      goto LABEL_13;
    }
    if (!v8)
      goto LABEL_20;
  }
  v9 = a1[v6];
  if (!a1[v6])
  {
LABEL_20:
    v13 = a1[v5];
    if (v13 >= 3)
      return (v13 ^ 0xFF) + 1;
    else
      return 0;
  }
LABEL_13:
  v11 = (v9 - 1) << v7;
  if (v6 >= 4)
    v11 = 0;
  if ((_DWORD)v6 == 1)
    v12 = *a1;
  else
    v12 = *(_DWORD *)a1;
  return (v12 | v11) + 254;
}

void storeEnumTagSinglePayload for SubscriptionLifetime.StateType(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  v5 = (((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v6 = v5 + 8;
  v7 = ((v5 + 47) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v7 <= v6)
    v7 = v6;
  v8 = v7 | 1;
  if (a3 < 0xFE)
  {
    v9 = 0;
  }
  else if (v8 <= 3)
  {
    v11 = (a3 + ~(-1 << (8 * v8)) - 253) >> (8 * v8);
    if (v11 > 0xFFFE)
    {
      v9 = 4u;
    }
    else if (v11 >= 0xFF)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 != 0;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v10 = a2 - 254;
  if (v8 < 4)
  {
    v10 &= ~(-1 << (8 * v8));
    bzero(a1, v8);
    if ((_DWORD)v8 == 1)
    {
      *a1 = v10;
      goto LABEL_18;
    }
  }
  else
  {
    bzero(a1, v7 | 1);
  }
  *(_DWORD *)a1 = v10;
LABEL_18:
  __asm { BR              X10 }
}

uint64_t getEnumTag for SubscriptionLifetime.StateType(_DWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v3 = v2 + 8;
  v4 = ((v2 + 47) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v4 <= v3)
    v4 = v3;
  v5 = v4 & 0xFFFFFFF8;
  v6 = *((unsigned __int8 *)a1 + v4);
  if (v6 >= 2 && v5 != 0)
    return (*a1 + 2);
  return v6;
}

void destructiveInjectEnumTag for SubscriptionLifetime.StateType(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4;
  size_t v5;
  size_t v6;
  char v7;
  unsigned int v8;

  v4 = (((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v5 = v4 + 8;
  v6 = ((v4 + 47) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v6 <= v5)
    v6 = v5;
  if (a2 > 1)
  {
    if ((_DWORD)v6)
      v7 = 2;
    else
      v7 = a2;
    if ((_DWORD)v6)
      v8 = a2 - 2;
    else
      v8 = 0;
    a1[v6] = v7;
    bzero(a1, v6);
    *(_DWORD *)a1 = v8;
  }
  else
  {
    a1[v6] = a2;
  }
}

void base witness table accessor for CustomCombineIdentifierConvertible in SubscriptionLifetime<A>.Connection<A1>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in SubscriptionLifetime<A>.Connection<A1>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t specialized static Map2Gesture._makeGesture(modifier:inputs:body:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int OffsetAttribute2;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  unsigned int v24;
  unsigned int v25;
  int v26;
  int v27;
  int v28;
  unint64_t v29;
  int v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  ValueMetadata *v40;
  uint64_t v41;
  ValueMetadata *v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  AGGraphCreateOffsetAttribute2();
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  specialized static Map2Gesture._makeGesture(modifier:inputs:body:)(OffsetAttribute2, a2, (uint64_t)&v34);
  v6 = v34;
  v25 = HIDWORD(v34);
  v29 = v35;
  v28 = v36;
  AGGraphCreateOffsetAttribute2();
  specialized static ModifierGesture._makeGesture(gesture:inputs:)(a2, (uint64_t)&v34);
  v7 = v34;
  v24 = HIDWORD(v34);
  v8 = v35;
  v26 = *(_DWORD *)(a2 + 120);
  v27 = v36;
  v40 = &type metadata for TappableEvent;
  v41 = type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>();
  v42 = &type metadata for TappableEvent;
  v43 = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, (uint64_t)&protocol conformance descriptor for ModifierGesture<A, B>);
  KeyPath = swift_getKeyPath();
  LODWORD(v34) = a1;
  v35 = KeyPath;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  v10 = MEMORY[0x24BEE50B0];
  type metadata accessor for (_:_:)(0, &lazy cache variable for type metadata for (_:_:), &lazy cache variable for type metadata for GesturePhase<CGFloat>, MEMORY[0x24BEE50B0]);
  type metadata accessor for Focus<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, (_:_:)>();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Focus<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, (_:_:)> and conformance Focus<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for Focus<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, (_:_:)>, MEMORY[0x24BE09658]);
  v11 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  v12 = *(_DWORD *)(a2 + 112);
  v34 = __PAIR64__(v6, v11);
  v35 = __PAIR64__(v12, v7);
  LODWORD(v36) = 0;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for GesturePhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
  type metadata accessor for Map2Phase<TappableEvent, CGFloat, TappableEvent>(0, &lazy cache variable for type metadata for Map2Phase<TappableEvent, CGFloat, TappableEvent>, v10);
  lazy protocol witness table accessor for type Map2Phase<TappableEvent, Double, TappableEvent> and conformance Map2Phase<A, B, C>(&lazy protocol witness table cache variable for type Map2Phase<TappableEvent, CGFloat, TappableEvent> and conformance Map2Phase<A, B, C>, &lazy cache variable for type metadata for Map2Phase<TappableEvent, CGFloat, TappableEvent>, v10);
  v13 = Attribute.init<A>(body:value:flags:update:)();
  v14 = *MEMORY[0x24BE096C0];
  v15 = MEMORY[0x24BEE4AF8];
  v31 = *MEMORY[0x24BE096C0];
  if ((v26 & 8) != 0)
  {
    v16 = v25 == v14;
    if (v25 == v14)
      v17 = 0;
    else
      v17 = v25;
    v18 = v24 == v14;
    if (v18)
      v19 = 0;
    else
      v19 = v24;
    LOBYTE(v34) = v18;
    specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(4, 0x100000000, a2, v17 | ((unint64_t)v16 << 32), v19 | ((unint64_t)v18 << 32));
  }
  v38 = v15;
  v39 = 0;
  v34 = v29;
  LODWORD(v35) = v28;
  v36 = v8;
  v37 = v27;
  v20 = *(_QWORD *)(a2 + 96);
  v32 = v20;
  v33 = *(_DWORD *)(a2 + 104);
  v21 = *(_QWORD *)(v20 + 16);
  if (v21)
  {
    outlined retain of LinearGradient((uint64_t)&v32);
    v22 = v20 + 40;
    do
    {
      (*(void (**)(unint64_t *, ValueMetadata *, _UNKNOWN **))(*(_QWORD *)v22 + 16))(&v34, &type metadata for PairwisePreferenceCombinerVisitor, &protocol witness table for PairwisePreferenceCombinerVisitor);
      v22 += 16;
      --v21;
    }
    while (v21);
    outlined release of LinearGradient((uint64_t)&v32);
    v15 = v38;
    LODWORD(v21) = v39;
  }
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_DWORD *)a3 = v13;
  *(_DWORD *)(a3 + 4) = v31;
  *(_QWORD *)(a3 + 8) = v15;
  *(_DWORD *)(a3 + 16) = v21;
  return result;
}

{
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  unint64_t v28;
  int v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  ValueMetadata *v39;
  uint64_t v40;
  ValueMetadata *v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  AGGraphCreateOffsetAttribute2();
  specialized static ModifierGesture._makeGesture(gesture:inputs:)(a2, (uint64_t)&v33);
  v5 = v33;
  v24 = HIDWORD(v33);
  v28 = v34;
  v27 = v35;
  AGGraphCreateOffsetAttribute2();
  specialized static ModifierGesture._makeGesture(gesture:inputs:)((_DWORD *)a2, (uint64_t)&v33);
  v6 = v33;
  v23 = HIDWORD(v33);
  v7 = v34;
  v25 = *(_DWORD *)(a2 + 120);
  v26 = v35;
  v39 = &type metadata for TappableEvent;
  v40 = type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>();
  v41 = &type metadata for TappableEvent;
  v42 = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, (uint64_t)&protocol conformance descriptor for ModifierGesture<A, B>);
  KeyPath = swift_getKeyPath();
  LODWORD(v33) = a1;
  v34 = KeyPath;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  v9 = MEMORY[0x24BEE13C8];
  type metadata accessor for (_:_:)(0, &lazy cache variable for type metadata for (_:_:), (unint64_t *)&lazy cache variable for type metadata for GesturePhase<Double>, MEMORY[0x24BEE13C8]);
  type metadata accessor for Focus<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, (_:_:)>();
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Focus<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, (_:_:)> and conformance Focus<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for Focus<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, (_:_:)>, MEMORY[0x24BE09658]);
  v10 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  v11 = *(_DWORD *)(a2 + 112);
  v33 = __PAIR64__(v5, v10);
  v34 = __PAIR64__(v11, v6);
  LODWORD(v35) = 0;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for GesturePhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
  type metadata accessor for Map2Phase<TappableEvent, CGFloat, TappableEvent>(0, &lazy cache variable for type metadata for Map2Phase<TappableEvent, Double, TappableEvent>, v9);
  lazy protocol witness table accessor for type Map2Phase<TappableEvent, Double, TappableEvent> and conformance Map2Phase<A, B, C>(&lazy protocol witness table cache variable for type Map2Phase<TappableEvent, Double, TappableEvent> and conformance Map2Phase<A, B, C>, &lazy cache variable for type metadata for Map2Phase<TappableEvent, Double, TappableEvent>, v9);
  v12 = Attribute.init<A>(body:value:flags:update:)();
  v13 = *MEMORY[0x24BE096C0];
  v14 = MEMORY[0x24BEE4AF8];
  v30 = *MEMORY[0x24BE096C0];
  if ((v25 & 8) != 0)
  {
    v15 = v24 == v13;
    if (v24 == v13)
      v16 = 0;
    else
      v16 = v24;
    v17 = v23 == v13;
    if (v17)
      v18 = 0;
    else
      v18 = v23;
    LOBYTE(v33) = v17;
    specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(4, 0x100000000, a2, v16 | ((unint64_t)v15 << 32), v18 | ((unint64_t)v17 << 32));
  }
  v37 = v14;
  v38 = 0;
  v33 = v28;
  LODWORD(v34) = v27;
  v35 = v7;
  v36 = v26;
  v19 = *(_QWORD *)(a2 + 96);
  v31 = v19;
  v32 = *(_DWORD *)(a2 + 104);
  v20 = *(_QWORD *)(v19 + 16);
  if (v20)
  {
    outlined retain of LinearGradient((uint64_t)&v31);
    v21 = v19 + 40;
    do
    {
      (*(void (**)(unint64_t *, ValueMetadata *, _UNKNOWN **))(*(_QWORD *)v21 + 16))(&v33, &type metadata for PairwisePreferenceCombinerVisitor, &protocol witness table for PairwisePreferenceCombinerVisitor);
      v21 += 16;
      --v20;
    }
    while (v20);
    outlined release of LinearGradient((uint64_t)&v31);
    v14 = v37;
    LODWORD(v20) = v38;
  }
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_DWORD *)a3 = v12;
  *(_DWORD *)(a3 + 4) = v30;
  *(_QWORD *)(a3 + 8) = v14;
  *(_DWORD *)(a3 + 16) = v20;
  return result;
}

void static Map2Gesture._makeGesture(modifier:inputs:body:)(int *a1, __int128 *a2, void (*a3)(_QWORD *__return_ptr, __int128 *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v22;
  _QWORD v24[9];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v9 = a2[3];
  v10 = a2[1];
  v39 = a2[2];
  v40 = v9;
  v11 = a2[3];
  v12 = a2[5];
  v41 = a2[4];
  v42 = v12;
  v13 = a2[1];
  v37 = *a2;
  v38 = v13;
  v28 = v11;
  v29 = v41;
  v30 = a2[5];
  v25 = v37;
  v14 = *a1;
  v15 = *((_QWORD *)a2 + 12);
  v17 = *((_DWORD *)a2 + 26);
  v16 = *((_DWORD *)a2 + 27);
  v18 = *((_DWORD *)a2 + 28);
  v22 = *((_DWORD *)a2 + 29);
  v19 = *((_DWORD *)a2 + 30);
  v26 = v10;
  v27 = v39;
  v31 = v15;
  v32 = v17;
  v33 = v16;
  v34 = v18;
  v35 = v22;
  v36 = v19;
  a3(v24, &v25);
  v24[5] = a5;
  v24[6] = a6;
  v24[7] = a7;
  v24[8] = a8;
  LODWORD(v24[0]) = v14;
  *(_QWORD *)&v25 = a5;
  *((_QWORD *)&v25 + 1) = a6;
  *(_QWORD *)&v26 = a7;
  *((_QWORD *)&v26 + 1) = a8;
  type metadata accessor for Map2Gesture();
}

void closure #1 in static Map2Gesture._makeGesture(modifier:inputs:body:)()
{
  type metadata accessor for Map2Gesture();
}

uint64_t sub_234EFC0F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v6[2] = a1;
  v7 = v1;
  v3 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v2, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v6, v1, MEMORY[0x24BEE4078], v3, MEMORY[0x24BEE40A8], v4);
  return v8;
}

void key path getter for Map2Gesture.body : <A, B, C>Map2Gesture<A, B, C>()
{
  type metadata accessor for Map2Gesture();
}

uint64_t sub_234EFC180(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(v1 + *(int *)(a1 + 52));
  v4 = v3[1];
  *v2 = *v3;
  v2[1] = v4;
  return swift_retain();
}

void key path setter for Map2Gesture.body : <A, B, C>Map2Gesture<A, B, C>()
{
  type metadata accessor for Map2Gesture();
}

uint64_t sub_234EFC1D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  v4 = (_QWORD *)(v1 + *(int *)(a1 + 52));
  swift_retain();
  result = swift_release();
  *v4 = v3;
  v4[1] = v2;
  return result;
}

uint64_t Map2Phase.resetSeed.getter()
{
  return *(unsigned int *)AGGraphGetValue();
}

void protocol witness for static GestureModifier._makeGesture(modifier:inputs:body:) in conformance Map2Gesture<A, B, C>(int *a1, __int128 *a2, void (*a3)(_QWORD *__return_ptr, __int128 *), uint64_t a4, uint64_t *a5)
{
  static Map2Gesture._makeGesture(modifier:inputs:body:)(a1, a2, a3, a4, a5[2], a5[3], a5[4], a5[5]);
}

uint64_t Map2Phase.updateValue()(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t result;
  void (*v23)(char *, char *);
  uint64_t Value;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v35 = a1[3];
  v6 = type metadata accessor for GesturePhase(0, v35, a3, a4);
  v37 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v33 - v7;
  v9 = a1[2];
  v12 = type metadata accessor for GesturePhase(0, v9, v10, v11);
  v36 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v33 - v13;
  v15 = a1[4];
  v18 = type metadata accessor for GesturePhase(0, v15, v16, v17);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v38 = (char *)&v33 - v21;
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for Map2Phase<A, B, C>, a1, v20);
  result = ResettableGestureRule.resetIfNeeded()();
  if ((result & 1) != 0)
  {
    v33 = v18;
    v34 = v19;
    v23 = (void (*)(char *, char *))specialized Map2Phase.body.getter(*v4 | ((unint64_t)v4[1] << 32), *((_QWORD *)v4 + 1), v4[4], v9, v35, v15);
    Value = AGGraphGetValue();
    v25 = v36;
    (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v14, Value, v12);
    v26 = AGGraphGetValue();
    v27 = v37;
    (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v8, v26, v6);
    swift_retain();
    v28 = (uint64_t)v38;
    v23(v14, v8);
    swift_release();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v8, v6);
    v29 = (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v14, v12);
    v30 = MEMORY[0x24BDAC7A8](v29);
    *(&v33 - 2) = (uint64_t)a1;
    *(&v33 - 1) = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Map2Phase<A, B, C>, a1, v30);
    v31 = v33;
    _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v28, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)(&v33 - 4), v33, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v32);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 8))(v28, v31);
  }
  return result;
}

uint64_t protocol witness for ResettableGestureRule.resetSeed.getter in conformance Map2Phase<A, B, C>()
{
  return Map2Phase.resetSeed.getter();
}

uint64_t protocol witness for ResettableGestureRule.lastResetSeed.setter in conformance Map2Phase<A, B, C>(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 16) = result;
  return result;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance Map2Phase<A, B, C>()
{
  return specialized Map2Phase.description.getter();
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance Map2Phase<A, B, C>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;

  v5 = type metadata accessor for GesturePhase(0, *(_QWORD *)(a1 + 32), a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a4, 1, 1, v5);
}

void Gesture.combined<A, B>(with:body:)(uint64_t a1)
{
  MEMORY[0x24BDAC7A8](a1);
  swift_getAssociatedTypeWitness();
  type metadata accessor for Map2Gesture();
}

void sub_234EFC5FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;

  v17 = MEMORY[0x24BDAC7A8](a1);
  v19 = (char *)&a9 - v18;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v10 + 16))(v9, v11, v15, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v19, v9, v15);
  *(_QWORD *)(v16 - 112) = v12;
  *(_QWORD *)(v16 - 104) = v15;
  *(_QWORD *)(v16 - 96) = v14;
  *(_QWORD *)(v16 - 88) = v13;
  type metadata accessor for Map2Gesture();
}

void sub_234EFC664(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (_QWORD *)(v1 + *(int *)(a1 + 52));
  v5 = *(_QWORD *)(v3 - 136);
  *v4 = *(_QWORD *)(v3 - 144);
  v4[1] = v5;
  v6 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Map2Gesture<A, B, C>, v2);
  Gesture.modifier<A>(_:)(v1, *(_QWORD *)(v3 - 160), v2, *(_QWORD *)(v3 - 152), v6, *(_QWORD *)(v3 - 128));
}

uint64_t sub_234EFC69C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);

  v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8);
  swift_retain();
  return v3(v0, v2);
}

void type metadata accessor for Map2Gesture()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void Gesture.zip<A>(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;

  v10 = (_QWORD *)swift_allocObject();
  v10[2] = a2;
  v10[3] = a3;
  v10[4] = a4;
  v10[5] = a5;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  Gesture.combined<A, B>(with:body:)(a1);
}

uint64_t sub_234EFC7C8()
{
  return swift_release();
}

uint64_t closure #1 in Gesture.zip<A>(with:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for GesturePhase(0, AssociatedTypeWitness, v5, v6);
  v8 = swift_getAssociatedTypeWitness();
  return GesturePhase.and<A>(_:)(a1, v7, v8, a2);
}

uint64_t sub_234EFC894()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Gesture.zip<A>(with:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return closure #1 in Gesture.zip<A>(with:)(a1, a2);
}

uint64_t GesturePhase.and<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t TupleTypeMetadata2;
  _QWORD v10[4];

  v10[2] = *(_QWORD *)(a2 + 16);
  v10[3] = a3;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return GesturePhase.and<A, B>(_:value:)(a1, (void (*)(char *, char *))partial apply for closure #1 in GesturePhase.and<A>(_:), (uint64_t)v10, a2, a3, TupleTypeMetadata2, a4);
}

{
  _QWORD v5[4];

  v5[2] = *(_QWORD *)(a2 + 16);
  v5[3] = a3;
  return GesturePhase.and<A, B>(_:value:)(a1, (void (*)(char *, char *))_ViewInputs.base.modify, (uint64_t)v5, a2, a3, MEMORY[0x24BEE4AE0] + 8, a4);
}

void Gesture.gated<A>(by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Gesture.gated<A>(by:)(a1, a2, a3, a4, a5);
}

{
  _QWORD *v10;

  v10 = (_QWORD *)swift_allocObject();
  v10[2] = a2;
  v10[3] = a3;
  v10[4] = a4;
  v10[5] = a5;
  swift_getAssociatedTypeWitness();
  Gesture.combined<A, B>(with:body:)(a1);
}

uint64_t closure #1 in Gesture.gated<A>(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = type metadata accessor for GesturePhase(0, AssociatedTypeWitness, v7, v8);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v19 - v12;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))((char *)&v19 - v12, a2, v9, v11);
  LODWORD(a2) = swift_getEnumCaseMultiPayload();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  v14 = swift_getAssociatedTypeWitness();
  v17 = type metadata accessor for GesturePhase(0, v14, v15, v16);
  if ((_DWORD)a2 == 3)
    return swift_storeEnumTagMultiPayload();
  else
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(a3, a1);
}

void Gesture.enabled<A>(by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Gesture.gated<A>(by:)(a1, a2, a3, a4, a5);
}

uint64_t closure #1 in Gesture.enabled<A>(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  int EnumCaseMultiPayload;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = type metadata accessor for GesturePhase(0, AssociatedTypeWitness, v7, v8);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v27 - v12;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))((char *)&v27 - v12, a2, v9, v11);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((EnumCaseMultiPayload - 1) >= 2)
  {
    if (EnumCaseMultiPayload)
    {
      v24 = swift_getAssociatedTypeWitness();
      type metadata accessor for GesturePhase(0, v24, v25, v26);
      return swift_storeEnumTagMultiPayload();
    }
    else
    {
      v20 = swift_getAssociatedTypeWitness();
      v23 = type metadata accessor for GesturePhase(0, v20, v21, v22);
      GesturePhase.unwrapped.getter(v23);
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    v15 = swift_getAssociatedTypeWitness();
    v18 = type metadata accessor for GesturePhase(0, v15, v16, v17);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(a3, a1, v18);
  }
}

void Gesture.ended<A>(by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Gesture.gated<A>(by:)(a1, a2, a3, a4, a5);
}

uint64_t sub_234EFCCF4()
{
  return swift_release();
}

uint64_t closure #1 in Gesture.ended<A>(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  int EnumCaseMultiPayload;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;

  v25 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = type metadata accessor for GesturePhase(0, AssociatedTypeWitness, v6, v7);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v25 - v10;
  v12 = swift_getAssociatedTypeWitness();
  v15 = type metadata accessor for GesturePhase(0, v12, v13, v14);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v25 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))((char *)&v25 - v18, a2, v15, v17);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((EnumCaseMultiPayload - 1) >= 2)
  {
    v22 = v11;
    v23 = v25;
    if (EnumCaseMultiPayload)
    {
      return swift_storeEnumTagMultiPayload();
    }
    else
    {
      swift_beginAccess();
      if ((static CoreTesting.isRunning & 1) != 0
        || (specialized static GestureContainerFeature.isEnabled.getter() & 1) != 0)
      {
        GesturePhase.paused()(v8, a3);
      }
      else
      {
        v24 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
        v24(v22, v23, v8);
        if (swift_getEnumCaseMultiPayload() == 2)
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a3, v22, AssociatedTypeWitness);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          v24(a3, v23, v8);
          (*(void (**)(char *, uint64_t))(v9 + 8))(v22, v8);
        }
      }
      return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v15);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(a3, v25, v8);
  }
}

uint64_t GesturePhase.and<A, B>(_:value:)@<X0>(uint64_t a1@<X0>, void (*a2)(char *, char *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t TupleTypeMetadata2;
  uint64_t v24;
  double v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t, double);
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  int EnumCaseMultiPayload;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[2];
  void (*v53)(char *, char *);
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  char v63;

  v8 = v7;
  v52[1] = a3;
  v53 = a2;
  v60 = a7;
  v13 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v13);
  v14 = *(_QWORD *)(a4 + 16);
  v57 = (char *)v52 - v15;
  v58 = v14;
  v16 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v16);
  v56 = (char *)v52 - v17;
  v61 = a6;
  v59 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v54 = (char *)v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for GesturePhase(255, a5, v20, v21);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v24 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v25 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v27 = (char *)v52 - v26;
  v29 = (char *)v52 + *(int *)(v28 + 48) - v26;
  v30 = *(_QWORD *)(a4 - 8);
  v31 = *(void (**)(char *, uint64_t, uint64_t, double))(v30 + 16);
  v55 = v8;
  v31(v27, v8, a4, v25);
  v32 = *(_QWORD *)(v22 - 8);
  v33 = *(void (**)(char *, uint64_t, uint64_t))(v32 + 16);
  v52[0] = a1;
  v33(v29, a1, v22);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v29, v22);
LABEL_5:
    type metadata accessor for GesturePhase(0, v61, v35, v36);
    return swift_storeEnumTagMultiPayload();
  }
  v37 = EnumCaseMultiPayload;
  v38 = swift_getEnumCaseMultiPayload();
  if (v38 == 3)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v27, a4);
    goto LABEL_5;
  }
  if (!v37)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v27, a4);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v29, v22);
    goto LABEL_13;
  }
  if (v38 != 2)
  {
    if (!v38)
    {
      (*(void (**)(char *, uint64_t))(v32 + 8))(v29, v22);
      (*(void (**)(char *, uint64_t))(v30 + 8))(v27, a4);
LABEL_13:
      v40 = v61;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v59 + 56))(v60, 1, 1, v61);
      type metadata accessor for GesturePhase(0, v40, v41, v42);
      return swift_storeEnumTagMultiPayload();
    }
    goto LABEL_16;
  }
  if (v37 != 2)
  {
LABEL_16:
    (*(void (**)(char *, uint64_t))(v24 + 8))(v27, TupleTypeMetadata2);
    v43 = 1;
    goto LABEL_17;
  }
  (*(void (**)(char *, uint64_t))(v30 + 8))(v27, a4);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v29, v22);
  v43 = 2;
LABEL_17:
  v45 = v56;
  v44 = v57;
  GesturePhase.unwrapped.getter(a4);
  v46 = v58;
  v47 = *(_QWORD *)(v58 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v58);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    GesturePhase.unwrapped.getter(v22);
    v48 = *(_QWORD *)(a5 - 8);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v48 + 48))(v44, 1, a5);
    if ((_DWORD)result != 1)
    {
      v49 = v54;
      v53(v45, v44);
      (*(void (**)(char *, uint64_t))(v48 + 8))(v44, a5);
      v50 = (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v45, v46);
      v62 = 0;
      v63 = v43;
      MEMORY[0x24BDAC7A8](v50);
      v52[-4] = v46;
      v52[-3] = a5;
      v51 = v61;
      v52[-2] = v61;
      v52[-1] = v49;
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for GesturePhase);
      GesturePhase.withValue<A>(_:)();
      return (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v49, v51);
    }
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in GesturePhase.and<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v9 = a3 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a3, a1, v8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v9, a2, v7);
}

uint64_t sub_234EFD3E0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Gesture.gated<A>(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return closure #1 in Gesture.gated<A>(by:)(a1, a2, a3);
}

uint64_t sub_234EFD3FC()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Gesture.enabled<A>(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return closure #1 in Gesture.enabled<A>(by:)(a1, a2, a3);
}

uint64_t sub_234EFD418()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Gesture.ended<A>(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  return closure #1 in Gesture.ended<A>(by:)(a1, a2, a3);
}

uint64_t partial apply for implicit closure #1 in GesturePhase.and<A, B>(_:value:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(v1 + 32) - 8) + 16))(a1, *(_QWORD *)(v1 + 40));
}

void sub_234EFD48C()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for Map2Gesture();
}

void sub_234EFD4E8(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for Map2Gesture<A, B, C>, a1);
  type metadata accessor for ModifierGesture();
}

uint64_t sub_234EFD510(uint64_t a1)
{
  return MEMORY[0x23B7C9C04](&protocol conformance descriptor for ModifierGesture<A, B>, a1);
}

void sub_234EFD534()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  type metadata accessor for Map2Gesture();
}

void sub_234EFD5C8(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for Map2Gesture<A, B, C>, a1);
  type metadata accessor for ModifierGesture();
}

uint64_t sub_234EFD5F0(uint64_t a1)
{
  return MEMORY[0x23B7C9C04](&protocol conformance descriptor for ModifierGesture<A, B>, a1);
}

void sub_234EFD61C()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for Map2Gesture();
}

void sub_234EFD66C(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for Map2Gesture<A, B, C>, a1);
  type metadata accessor for ModifierGesture();
}

uint64_t sub_234EFD694(uint64_t a1)
{
  return MEMORY[0x23B7C9C04](&protocol conformance descriptor for ModifierGesture<A, B>, a1);
}

uint64_t type metadata completion function for Map2Gesture()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Map2Gesture(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = v10[1];
    v12 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v12 = *v10;
    v12[1] = v11;
  }
  swift_retain();
  return v4;
}

uint64_t destroy for Map2Gesture(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))();
  return swift_release();
}

uint64_t initializeWithCopy for Map2Gesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Map2Gesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for Map2Gesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for Map2Gesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Map2Gesture(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_234EFDA28 + 4 * byte_2352B0080[v10]))();
  }
}

void storeEnumTagSinglePayload for Map2Gesture(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_234EFDBA0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x234EFDC18);
}

void sub_234EFDBA8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x234EFDBB0);
  JUMPOUT(0x234EFDC18);
}

void sub_234EFDBF0()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x234EFDC18);
}

void sub_234EFDBF8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x234EFDC18);
}

uint64_t sub_234EFDC00(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x234EFDC18);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x234EFDC14);
    JUMPOUT(0x234EFDC0CLL);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

void partial apply for closure #1 in static Map2Gesture._makeGesture(modifier:inputs:body:)()
{
  closure #1 in static Map2Gesture._makeGesture(modifier:inputs:body:)();
}

uint64_t sub_234EFDC44()
{
  return 32;
}

__n128 sub_234EFDC50(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t type metadata accessor for Map2Phase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Map2Phase);
}

void type metadata accessor for Focus<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, (_:_:)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Focus<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, (_:_:)>)
  {
    _s7SwiftUI11Map2GestureVyAA13TappableEventVAA08ModifierD0VyAA015CoordinateSpaceD0Vy12CoreGraphics7CGFloatVGAA08DistanceD0VGAEGMaTm_1(255, &lazy cache variable for type metadata for Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, &lazy protocol witness table cache variable for type ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture> and conformance ModifierGesture<A, B>);
    type metadata accessor for (_:_:)(255, &lazy cache variable for type metadata for (_:_:), &lazy cache variable for type metadata for GesturePhase<CGFloat>, MEMORY[0x24BEE50B0]);
    v0 = type metadata accessor for Focus();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Focus<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, (_:_:)>);
  }
}

uint64_t lazy protocol witness table accessor for type Map2Phase<TappableEvent, Double, TappableEvent> and conformance Map2Phase<A, B, C>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for Map2Phase<TappableEvent, CGFloat, TappableEvent>(255, a2, a3);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Map2Phase<A, B, C>, v5);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for Focus<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, (_:_:)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Focus<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, (_:_:)>)
  {
    _s7SwiftUI11Map2GestureVyAA13TappableEventVAA08ModifierD0VyAA015CoordinateSpaceD0Vy12CoreGraphics7CGFloatVGAA08DistanceD0VGAEGMaTm_1(255, &lazy cache variable for type metadata for Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, &lazy protocol witness table cache variable for type ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>> and conformance ModifierGesture<A, B>);
    type metadata accessor for (_:_:)(255, &lazy cache variable for type metadata for (_:_:), (unint64_t *)&lazy cache variable for type metadata for GesturePhase<Double>, MEMORY[0x24BEE13C8]);
    v0 = type metadata accessor for Focus();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Focus<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, (_:_:)>);
  }
}

uint64_t _s7SwiftUI11Map2GestureVyAA13TappableEventVAA08ModifierD0VyAA015CoordinateSpaceD0Vy12CoreGraphics7CGFloatVGAA08DistanceD0VGAEGMaTm_1(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    a3(255);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(a4, a3, (uint64_t)&protocol conformance descriptor for ModifierGesture<A, B>);
    type metadata accessor for Map2Gesture();
  }
  return result;
}

void type metadata accessor for Map2Phase<TappableEvent, CGFloat, TappableEvent>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = type metadata accessor for Map2Phase(0, (uint64_t)&type metadata for TappableEvent, a3, (uint64_t)&type metadata for TappableEvent);
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t instantiation function for generic protocol witness table for Map2Phase<A, B, C>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Map2Phase<A, B, C>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in Map2Phase<A, B, C>()
{
  JUMPOUT(0x23B7C9C04);
}

unint64_t specialized Map2Phase.description.getter()
{
  Swift::String v0;

  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0x9286E2203270614DLL;
}

uint64_t specialized Map2Phase.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  type metadata accessor for GesturePhase(255, a6, a3, a4);
  type metadata accessor for GesturePhase(255, a4, v8, v9);
  type metadata accessor for GesturePhase(255, a5, v10, v11);
  swift_getFunctionTypeMetadata2();
  return *(_QWORD *)AGGraphGetValue();
}

void Gesture.duration(minimum:maximum:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];
  char v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *(double *)v15 = a4;
  *(double *)&v15[1] = a5;
  v16 = 0;
  v13 = type metadata accessor for DurationGesture(0, AssociatedTypeWitness, v11, v12);
  v14 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DurationGesture<A>, v13);
  Gesture.modifier<A>(_:)((uint64_t)v15, a1, v13, a2, v14, a3);
}

uint64_t DurationGesture.init(minimumDuration:maximumDuration:trackFromEventStart:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  *(double *)a2 = a3;
  *(double *)(a2 + 8) = a4;
  *(_BYTE *)(a2 + 16) = result;
  return result;
}

uint64_t type metadata accessor for DurationGesture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DurationGesture);
}

double DurationGesture.minimumDuration.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void DurationGesture.minimumDuration.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*DurationGesture.minimumDuration.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double DurationGesture.maximumDuration.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void DurationGesture.maximumDuration.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

uint64_t (*DurationGesture.maximumDuration.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t DurationGesture.trackFromEventStart.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t DurationGesture.trackFromEventStart.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = result;
  return result;
}

uint64_t (*DurationGesture.trackFromEventStart.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t static DurationGesture._makeGesture(modifier:inputs:body:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr, unint64_t *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int32x2_t v12;
  __int128 v13;
  int32x2_t v14;
  int32x2_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v29;
  _QWORD v30[2];
  int v31;
  _BYTE v32[16];
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int32x2_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  int v42;
  _BYTE v43[28];
  int32x2_t v44;
  int v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v7 = *a1;
  v8 = *(_QWORD *)a2;
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)v43 = *(_OWORD *)(a2 + 84);
  *(_OWORD *)&v43[12] = *(_OWORD *)(a2 + 96);
  v11 = *(_DWORD *)(a2 + 120);
  v35 = v8;
  v36 = *(int32x2_t *)(a2 + 8);
  v12 = v36;
  v37 = v9;
  v13 = *(_OWORD *)(a2 + 40);
  v38 = *(_OWORD *)(a2 + 24);
  v39 = v13;
  v40 = *(_OWORD *)(a2 + 56);
  v41 = *(_QWORD *)(a2 + 72);
  v42 = v10;
  v44 = *(int32x2_t *)(a2 + 112);
  v14 = v44;
  v45 = v11;
  a3(v30, &v35);
  v15 = (int32x2_t)v30[1];
  v16 = v31;
  v19 = type metadata accessor for DurationPhase(0, a4, v17, v18);
  v29 = v30[0];
  v35 = __PAIR64__(v30[0], v7);
  v36 = vzip1_s32(v12, v14);
  LOBYTE(v37) = (v11 & 0x10) != 0;
  *(_QWORD *)&v38 = 0;
  BYTE8(v38) = 1;
  HIDWORD(v38) = 0;
  v33 = v19;
  v34 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DurationPhase<A>, v19);
  type metadata accessor for Attribute<GesturePhase<Double>>(0, v20, v21, v22);
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v35, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_7, (uint64_t)v32, v19, MEMORY[0x24BEE4078], v23, MEMORY[0x24BEE40A8], v24);
  v25 = v30[0];
  v35 = v29;
  v36 = v15;
  LODWORD(v37) = v16;
  type metadata accessor for _GestureOutputs(0, a4, v26, v27);
  _GestureOutputs.withPhase<A>(_:)(v25, a5);
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for static GestureModifier._makeGesture(modifier:inputs:body:) in conformance DurationGesture<A>@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr, unint64_t *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return static DurationGesture._makeGesture(modifier:inputs:body:)(a1, a2, a3, *(_QWORD *)(a4 + 16), a5);
}

BOOL DurationPhase.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  _BOOL8 result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t *Value;
  uint64_t v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  char v37;
  uint64_t v38;
  char v39;
  int v40;
  uint64_t v41;

  v5 = v4;
  v41 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a1 + 16);
  v8 = type metadata accessor for GesturePhase(0, v7, a3, a4);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v35 - v14;
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for DurationPhase<A>, a1, v13);
  result = ResettableGestureRule.resetIfNeeded()();
  if (result)
  {
    v19 = *((_QWORD *)v4 + 3);
    if ((v4[2] & 1) != 0)
    {
      v20 = *((_BYTE *)v4 + 16);
      v21 = *((_DWORD *)v4 + 9);
      v36 = *v4;
      v37 = v20;
      v38 = v19;
      v39 = 1;
      v40 = v21;
      DelayedPhase.childPhase.getter(a1, v17, v18, (uint64_t)v15);
      v22 = GesturePhase.isActive.getter(v8);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
      v25 = *((_BYTE *)v5 + 16);
      v26 = *((_DWORD *)v5 + 9);
      v35 = *v5;
      if (v22
        || (v19 = *((_QWORD *)v5 + 3),
            v27 = *((_BYTE *)v5 + 32),
            type metadata accessor for DurationGesture(0, v7, v23, v24),
            v28 = AGGraphGetValue(),
            v31 = v35,
            *(_BYTE *)(v28 + 16) == 1))
      {
        Value = (uint64_t *)AGGraphGetValue();
        v31 = v35;
        v27 = 0;
        v33 = *Value;
        *((_QWORD *)v5 + 3) = *Value;
        v19 = v33;
        *((_BYTE *)v5 + 32) = 0;
      }
    }
    else
    {
      v35 = *v4;
      v25 = *((_BYTE *)v4 + 16);
      v26 = *((_DWORD *)v4 + 9);
      AGGraphGetValue();
      v27 = 0;
      v31 = v35;
    }
    v35 = v31;
    v36 = v31;
    v37 = v25;
    v38 = v19;
    v39 = v27;
    v40 = v26;
    DelayedPhase.childPhase.getter(a1, v29, v30, (uint64_t)v11);
    v34 = (char *)&loc_234EFE4F0 + *((int *)qword_234EFE728 + swift_getEnumCaseMultiPayload());
    __asm { BR              X10 }
  }
  return result;
}

void protocol witness for static StatefulRule.initialValue.getter in conformance DurationPhase<A>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = -256;
}

uint64_t type metadata accessor for DurationPhase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DurationPhase);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_7@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _DWORD *a4@<X8>)
{
  type metadata accessor for GesturePhase<Double>(0, a1, a2, a3);
  return closure #1 in Attribute.init<A>(_:)(a4);
}

void type metadata accessor for GesturePhase<Double>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for GesturePhase<Double>)
  {
    v4 = type metadata accessor for GesturePhase(0, MEMORY[0x24BEE13C8], a3, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<Double>);
  }
}

void type metadata accessor for Attribute<GesturePhase<Double>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for Attribute<GesturePhase<Double>>)
  {
    type metadata accessor for GesturePhase<Double>(255, a2, a3, a4);
    v4 = type metadata accessor for Attribute();
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for Attribute<GesturePhase<Double>>);
  }
}

uint64_t getEnumTagSinglePayload for DurationGesture(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t instantiation function for generic protocol witness table for DurationPhase<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DurationPhase<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in DurationPhase<A>()
{
  JUMPOUT(0x23B7C9C04);
}

void Gesture.category(_:includeChildren:)(uint64_t *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v9 = *a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = v9;
  v16 = a2;
  v13 = type metadata accessor for CategoryGesture(0, AssociatedTypeWitness, v11, v12);
  v14 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CategoryGesture<A>, v13);
  Gesture.modifier<A>(_:)((uint64_t)&v15, a3, v13, a4, v14, a5);
}

uint64_t type metadata accessor for CategoryGesture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CategoryGesture);
}

void Gesture.categoryReader(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15[0] = a1;
  v15[1] = a2;
  v13 = type metadata accessor for GestureCategoryReader(0, AssociatedTypeWitness, v11, v12);
  v14 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GestureCategoryReader<A>, v13);
  Gesture.modifier<A>(_:)((uint64_t)v15, a3, v13, a4, v14, a5);
}

uint64_t GestureCategoryReader.init(callback:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t type metadata accessor for GestureCategoryReader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GestureCategoryReader);
}

void CategoryGesture.category.getter(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

_QWORD *CategoryGesture.category.setter(_QWORD *result)
{
  _QWORD *v1;

  *v1 = *result;
  return result;
}

uint64_t (*CategoryGesture.category.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t CategoryGesture.includeChildren.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t CategoryGesture.includeChildren.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = result;
  return result;
}

uint64_t (*CategoryGesture.includeChildren.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double static CategoryGesture._makeGesture(modifier:inputs:body:)@<D0>(unsigned int *a1@<X0>, __int128 *a2@<X1>, void (*a3)(__int128 *__return_ptr, __int128 *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return static CategoryGesture._makeGesture(modifier:inputs:body:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t, double))type metadata accessor for CategoryGesture.Combiner, (uint64_t)&protocol conformance descriptor for CategoryGesture<A>.Combiner<A1>, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_12, a5);
}

uint64_t CategoryGesture.Combiner.value.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  type metadata accessor for CategoryGesture(0, a2, a2, a3);
  result = AGGraphGetValue();
  v7 = *(_QWORD *)result;
  if (*(_BYTE *)(result + 8) == 1)
  {
    result = HIDWORD(a1);
    if (*MEMORY[0x24BE096C0] == HIDWORD(a1))
    {
      v8 = 0;
    }
    else
    {
      result = AGGraphGetValue();
      v8 = *(_QWORD *)result;
    }
    v7 |= v8;
  }
  *a4 = v7;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance CategoryGesture<A>.Combiner<A1>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, _QWORD *a3@<X8>)
{
  unint64_t *v3;

  return CategoryGesture.Combiner.value.getter(*v3, *(_QWORD *)(a1 + 24), a2, a3);
}

double protocol witness for static GestureModifier._makeGesture(modifier:inputs:body:) in conformance CategoryGesture<A>@<D0>(unsigned int *a1@<X0>, __int128 *a2@<X1>, void (*a3)(__int128 *__return_ptr, __int128 *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return static CategoryGesture._makeGesture(modifier:inputs:body:)(a1, a2, a3, *(_QWORD *)(a4 + 16), a5);
}

uint64_t key path setter for GestureCategoryReader.callback : <A>GestureCategoryReader<A>(uint64_t *a1, uint64_t (**a2)())
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain();
  result = swift_release();
  *a2 = partial apply for thunk for @callee_guaranteed (@guaranteed RBDisplayList) -> ();
  a2[1] = (uint64_t (*)())v5;
  return result;
}

uint64_t GestureCategoryReader.callback.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_retain();
  return v1;
}

uint64_t GestureCategoryReader.callback.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_release();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*GestureCategoryReader.callback.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double static GestureCategoryReader._makeGesture(modifier:inputs:body:)@<D0>(unsigned int *a1@<X0>, __int128 *a2@<X1>, void (*a3)(__int128 *__return_ptr, __int128 *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return static CategoryGesture._makeGesture(modifier:inputs:body:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t, double))type metadata accessor for GestureCategoryReader.Reader, (uint64_t)&protocol conformance descriptor for GestureCategoryReader<A>.Reader<A1>, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, a5);
}

double static CategoryGesture._makeGesture(modifier:inputs:body:)@<D0>(unsigned int *a1@<X0>, __int128 *a2@<X1>, void (*a3)(__int128 *__return_ptr, __int128 *)@<X2>, uint64_t a4@<X4>, uint64_t (*a5)(_QWORD, uint64_t, uint64_t, double)@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  double result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[2];
  uint64_t v42;
  unsigned int v43;
  __int128 v44;
  int v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  int v53;
  __int128 v54;
  uint64_t v55;

  v42 = a7;
  v55 = *MEMORY[0x24BDAC8D0];
  v12 = *a1;
  v13 = a2[3];
  v48 = a2[2];
  v49 = v13;
  v14 = a2[5];
  v50 = a2[4];
  v51 = v14;
  v15 = a2[1];
  v46 = *a2;
  v47 = v15;
  v16 = *((_QWORD *)a2 + 12);
  v17 = *((_DWORD *)a2 + 26);
  v54 = *(__int128 *)((char *)a2 + 108);
  v52 = v16;
  v53 = v17;
  a3(&v44, &v46);
  v46 = v44;
  LODWORD(v47) = v45;
  v20 = type metadata accessor for _GestureOutputs(0, a4, v18, v19);
  v21 = _GestureOutputs.subscript.getter((uint64_t)&type metadata for GestureCategory.Key, v20, (uint64_t)&type metadata for GestureCategory.Key, (uint64_t)&protocol witness table for GestureCategory.Key);
  type metadata accessor for _AnyPreferenceKey<GestureCategory.Key>(0, v22, v23, v24);
  v26 = *(_QWORD *)(v16 + 16);
  if (v26)
  {
    v27 = v25;
    v28 = 32;
    while (*(_QWORD *)(v16 + v28) != v25)
    {
      v28 += 16;
      if (!--v26)
        goto LABEL_9;
    }
    v41[1] = v41;
    v29 = *MEMORY[0x24BE096C0];
    if ((v21 & 0x100000000) == 0)
      v29 = v21;
    *(_QWORD *)&v46 = __PAIR64__(v29, v12);
    v30 = MEMORY[0x24BDAC7A8](v25);
    v39 = a5(0, a4, a4, v30);
    v40 = MEMORY[0x23B7C9C04](a6, v39);
    type metadata accessor for Attribute<GestureCategory>();
    v32 = v31;
    swift_bridgeObjectRetain();
    _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v46, v42, (uint64_t)&v38, v39, MEMORY[0x24BEE4078], v32, MEMORY[0x24BEE40A8], v33);
    LOBYTE(v46) = 0;
    PreferencesOutputs.subscript.setter(v43, v27, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v34);
    swift_bridgeObjectRelease();
  }
LABEL_9:
  v35 = *((_QWORD *)&v44 + 1);
  v36 = v45;
  result = *(double *)&v44;
  *(_QWORD *)a8 = v44;
  *(_QWORD *)(a8 + 8) = v35;
  *(_DWORD *)(a8 + 16) = v36;
  return result;
}

uint64_t GestureCategoryReader.Reader.modifier.getter@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, _QWORD *a3@<X8>)
{
  uint64_t *Value;
  uint64_t v5;
  uint64_t v6;

  type metadata accessor for GestureCategoryReader(0, a1, a1, a2);
  Value = (uint64_t *)AGGraphGetValue();
  v6 = *Value;
  v5 = Value[1];
  *a3 = v6;
  a3[1] = v5;
  return swift_retain();
}

uint64_t *GestureCategoryReader.Reader.value.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  int v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t *result;
  uint64_t v17;

  v6 = a1;
  v8 = HIDWORD(a1);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a2;
  *(_QWORD *)(v9 + 24) = a3;
  *(_DWORD *)(v9 + 32) = v6;
  *(_DWORD *)(v9 + 36) = v8;
  specialized static Update.begin()();
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = partial apply for closure #1 in GestureCategoryReader.Reader.value.getter;
  *(_QWORD *)(v10 + 24) = v9;
  v11 = one-time initialization token for actions;
  swift_retain();
  if (v11 != -1)
    swift_once();
  v12 = static Update.actions;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
  v14 = v12[2];
  v13 = v12[3];
  if (v14 >= v13 >> 1)
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v12);
  v12[2] = v14 + 1;
  v15 = &v12[2 * v14];
  v15[4] = partial apply for thunk for @escaping @callee_guaranteed () -> ();
  v15[5] = v10;
  static Update.actions = v12;
  swift_bridgeObjectRelease();
  static Update.end()();
  result = (uint64_t *)swift_release();
  if (*MEMORY[0x24BE096C0] == (_DWORD)v8)
  {
    v17 = 0;
  }
  else
  {
    result = (uint64_t *)AGGraphGetValue();
    v17 = *result;
  }
  *a4 = v17;
  return result;
}

uint64_t closure #1 in GestureCategoryReader.Reader.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  void (*v5)(uint64_t *);
  uint64_t v6;
  uint64_t v8;
  void (*v9)(uint64_t *);

  v4 = HIDWORD(a1);
  GestureCategoryReader.Reader.modifier.getter(a3, a4, &v9);
  v5 = v9;
  if (*MEMORY[0x24BE096C0] == v4)
    v6 = 0;
  else
    v6 = *(_QWORD *)AGGraphGetValue();
  v8 = v6;
  v5(&v8);
  return swift_release();
}

uint64_t *protocol witness for Rule.value.getter in conformance GestureCategoryReader<A>.Reader<A1>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t *v2;

  return GestureCategoryReader.Reader.value.getter(*v2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

double protocol witness for static GestureModifier._makeGesture(modifier:inputs:body:) in conformance GestureCategoryReader<A>@<D0>(unsigned int *a1@<X0>, __int128 *a2@<X1>, void (*a3)(__int128 *__return_ptr, __int128 *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return static GestureCategoryReader._makeGesture(modifier:inputs:body:)(a1, a2, a3, *(_QWORD *)(a4 + 16), a5);
}

void type metadata accessor for _AnyPreferenceKey<GestureCategory.Key>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for _AnyPreferenceKey<GestureCategory.Key>)
  {
    v4 = type metadata accessor for _AnyPreferenceKey(0, (uint64_t)&type metadata for GestureCategory.Key, (uint64_t)&protocol witness table for GestureCategory.Key, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<GestureCategory.Key>);
  }
}

uint64_t type metadata accessor for CategoryGesture.Combiner(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CategoryGesture.Combiner);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_12@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

void type metadata accessor for Attribute<GestureCategory>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Attribute<GestureCategory>)
  {
    v0 = type metadata accessor for Attribute();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<GestureCategory>);
  }
}

uint64_t type metadata accessor for GestureCategoryReader.Reader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GestureCategoryReader.Reader);
}

uint64_t sub_234EFF268@<X0>(uint64_t *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *a2 = partial apply for thunk for @callee_guaranteed (@guaranteed RBDisplayList) -> ();
  a2[1] = (uint64_t (*)())v5;
  return swift_retain();
}

uint64_t sub_234EFF2BC()
{
  return 8;
}

_QWORD *sub_234EFF2C8(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

void base witness table accessor for _AttributeBody in GestureCategoryReader<A>.Reader<A1>()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for _AttributeBody in CategoryGesture<A>.Combiner<A1>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t sub_234EFF2F4()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in GestureCategoryReader.Reader.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return closure #1 in GestureCategoryReader.Reader.value.getter(v4[4], v4[2], v4[3], a4);
}

uint64_t sub_234EFF310()
{
  swift_release();
  return swift_deallocObject();
}

void Path.isEmpty.getter()
{
  __asm { BR              X13 }
}

BOOL sub_234EFF38C@<W0>(CGFloat a1@<X8>)
{
  CGFloat v1;
  CGFloat v2;
  CGFloat v3;
  CGRect v5;

  v5.origin.x = v3;
  v5.origin.y = a1;
  v5.size.width = v1;
  v5.size.height = v2;
  return CGRectIsNull(v5);
}

void sub_234EFF46C()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x234EFF4B4);
}

BOOL Path.init(_:)@<W0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  _BOOL8 result;
  double v11;
  double v12;
  double v13;
  double v14;
  char v15;

  result = CGRectIsNull(*(CGRect *)&a2);
  v11 = 0.0;
  if (result)
    v12 = 0.0;
  else
    v12 = a2;
  if (result)
    v13 = 0.0;
  else
    v13 = a3;
  if (result)
    v14 = 0.0;
  else
    v14 = a4;
  if (!result)
    v11 = a5;
  *(double *)a1 = v12;
  *(double *)(a1 + 8) = v13;
  if (result)
    v15 = 6;
  else
    v15 = 0;
  *(double *)(a1 + 16) = v14;
  *(double *)(a1 + 24) = v11;
  *(_BYTE *)(a1 + 32) = v15;
  return result;
}

uint64_t Path.offsetBy(dx:dy:)@<X0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>)
{
  uint64_t v3;
  char v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v11[2];
  char v12;
  CGAffineTransform v13;

  if (a2 == 0.0 && a3 == 0.0)
  {
    v9 = *(_OWORD *)(v3 + 16);
    v10 = *(_OWORD *)v3;
    v5 = *(_BYTE *)(v3 + 32);
    outlined init with take of Path.Storage(v3, (uint64_t)&v13);
    result = outlined retain of Path.Storage((uint64_t)&v13, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
    v8 = v9;
    v7 = v10;
  }
  else
  {
    CGAffineTransformMakeTranslation(&v13, a2, a3);
    result = Path.applying(_:)(&v13.a, (uint64_t)v11);
    v7 = v11[0];
    v8 = v11[1];
    v5 = v12;
  }
  *(_OWORD *)a1 = v7;
  *(_OWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 32) = v5;
  return result;
}

uint64_t static Path.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v5;
  _BYTE v6[40];

  outlined init with take of Path.Storage(a1, (uint64_t)v6);
  outlined init with take of Path.Storage(a2, (uint64_t)&v5);
  specialized static Path.Storage.== infix(_:_:)((uint64_t)v6);
  return v3 & 1;
}

void Path.boundingRect.getter()
{
  __asm { BR              X13 }
}

double sub_234EFF668()
{
  double v0;

  return v0;
}

void sub_234EFF764()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x234EFF7ACLL);
}

Swift::Void __swiftcall Path.addEllipse(in:transform:)(__C::CGRect in, CGAffineTransform *transform)
{
  Path.addEllipse(in:transform:)(&transform->a, 1, 7u, in.origin.x, in.origin.y, in.size.width, in.size.height);
}

Swift::Void __swiftcall Path.move(to:)(CGPoint to)
{
  uint64_t v1;

  specialized Path.withMutableBuffer(do:)(v1, 0, to.x, to.y);
}

Swift::Void __swiftcall Path.addLine(to:)(CGPoint to)
{
  uint64_t v1;

  specialized Path.withMutableBuffer(do:)(v1, 1u, to.x, to.y);
}

double Path.init(_:)@<D0>(void (*a1)(__int128 *)@<X0>, uint64_t a2@<X8>)
{
  char v3;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  char v8;

  v6 = 0u;
  v7 = 0u;
  v8 = 6;
  a1(&v6);
  v3 = v8;
  result = *(double *)&v6;
  v5 = v7;
  *(_OWORD *)a2 = v6;
  *(_OWORD *)(a2 + 16) = v5;
  *(_BYTE *)(a2 + 32) = v3;
  return result;
}

void Path.contains(points:eoFill:origin:)()
{
  __asm { BR              X13 }
}

void sub_234EFF8D0(CGFloat a1@<X8>, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  double v23;
  double v24;
  _QWORD *v25;
  uint64_t v26;
  double v27;
  double v28;
  uint64_t v29;
  CGFloat v30;
  CGFloat v31;
  CGFloat v33;
  double v34;
  double v35;
  unint64_t v36;
  uint64_t v37;
  double *v38;
  uint64_t v39;
  _BOOL4 v40;
  uint64_t v41;
  double v42;
  CGPoint v43;
  CGRect v44;

  v29 = *(_QWORD *)(v26 + 16);
  if (v29)
  {
    v30 = v24;
    v31 = v23;
    v33 = v27;
    v34 = *(double *)(v26 + 32);
    v35 = *(double *)(v26 + 40);
    swift_bridgeObjectRetain();
    v36 = 0;
    v37 = 0;
    v38 = (double *)(v26 + 56);
    v39 = v29 - 1;
    while (1)
    {
      v43.y = v35 - v42;
      v43.x = v34 - v28;
      v44.origin.x = v33;
      v44.origin.y = a1;
      v44.size.width = v31;
      v44.size.height = v30;
      v40 = CGRectContainsPoint(v44, v43);
      if (v36 < 0x40)
      {
        v41 = 1 << v36;
        if (v40)
        {
LABEL_5:
          v37 |= v41;
          if (v39 == v36)
            goto LABEL_10;
          goto LABEL_9;
        }
      }
      else
      {
        v41 = 0;
        if (v40)
          goto LABEL_5;
      }
      v37 &= ~v41;
      if (v39 == v36)
      {
LABEL_10:
        swift_bridgeObjectRelease();
        *v25 = v37;
        return;
      }
LABEL_9:
      v34 = *(v38 - 1);
      v35 = *v38;
      ++v36;
      v38 += 2;
    }
  }
  *v25 = 0;
}

void sub_234EFFCA0()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x234EFFCE8);
}

double Path.init()@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = 6;
  return result;
}

void Path.formTrivialUnion(_:)(uint64_t a1)
{
  __asm { BR              X9 }
}

void sub_234EFFD78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, SwiftUI::FixedRoundedRect *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  uint64_t v40;
  uint64_t v41;
  CGFloat v42;
  double v43;
  int v44;
  uint64_t v45;
  double v46;
  int v47;
  SwiftUI::RoundedCornerStyle v48;
  CGFloat v49;
  CGFloat v50;
  CGFloat v51;
  double v52;
  double v53;
  double v54;
  SwiftUI::RoundedCornerStyle v55;
  CGFloat v56;
  CGFloat v57;
  CGFloat v58;
  double v59;
  double v60;
  CGFloat v61;
  CGFloat v62;
  SwiftUI::RoundedCornerStyle v63;
  __int128 v64;
  double v65;
  double v66;
  CGFloat v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  CGFloat v72;
  double v73;
  SwiftUI::FixedRoundedRect v74;
  CGFloat v75;
  CGFloat v76;
  CGFloat v77;
  uint64_t v78;
  double v79;
  double v80;
  SwiftUI::RoundedCornerStyle v81;
  CGRect v82;

  v82.origin.x = v42;
  v82.origin.y = v72;
  v82.size.width = v73;
  v82.size.height = v43;
  if (!CGRectIsNull(v82))
  {
    v45 = *(_QWORD *)v40;
    v46 = *(double *)(v40 + 16);
    v47 = *(unsigned __int8 *)(v40 + 32);
    if (v47 == 2)
    {
      v49 = *(double *)(v45 + 16);
      v50 = *(double *)(v45 + 24);
      v51 = *(double *)(v45 + 32);
      v54 = *(double *)(v45 + 40);
      v52 = *(double *)(v45 + 48);
      v53 = *(double *)(v45 + 56);
      v48 = *(_BYTE *)(v45 + 64);
    }
    else if (v47 == 1)
    {
      v51 = *(double *)(v40 + 16);
      v54 = *(double *)(v40 + 24);
      if (v46 != v54)
        goto LABEL_19;
      v48 = SwiftUI_RoundedCornerStyle_circular;
      v50 = *(double *)(v40 + 8);
      v49 = *(double *)v40;
      v52 = v46 * 0.5;
      v53 = v46 * 0.5;
    }
    else
    {
      if (*(_BYTE *)(v40 + 32))
        goto LABEL_19;
      v48 = SwiftUI_RoundedCornerStyle_circular;
      v49 = *(double *)v40;
      v50 = *(double *)(v40 + 8);
      v51 = *(double *)(v40 + 16);
      v52 = 0.0;
      v53 = 0.0;
      v54 = *(double *)(v40 + 24);
    }
    switch(v44)
    {
      case 2:
        v69 = *(_QWORD *)(v40 + 24);
        v70 = *(_QWORD *)(v40 + 16);
        v71 = *(_QWORD *)(v40 + 8);
        v56 = *(double *)(*(_QWORD *)&v42 + 16);
        v58 = *(double *)(*(_QWORD *)&v42 + 24);
        v57 = *(double *)(*(_QWORD *)&v42 + 32);
        v61 = *(double *)(*(_QWORD *)&v42 + 40);
        v59 = *(double *)(*(_QWORD *)&v42 + 48);
        v60 = *(double *)(*(_QWORD *)&v42 + 56);
        v55 = *(_BYTE *)(*(_QWORD *)&v42 + 64);
        break;
      case 1:
        v57 = v73;
        v61 = v43;
        if (v73 != v43)
          goto LABEL_19;
        v69 = *(_QWORD *)(v40 + 24);
        v70 = *(_QWORD *)(v40 + 16);
        v71 = *(_QWORD *)(v40 + 8);
        v55 = SwiftUI_RoundedCornerStyle_circular;
        v58 = v72;
        v56 = v42;
        v59 = v73 * 0.5;
        v60 = v73 * 0.5;
        break;
      case 0:
        v69 = *(_QWORD *)(v40 + 24);
        v70 = *(_QWORD *)(v40 + 16);
        v71 = *(_QWORD *)(v40 + 8);
        v55 = SwiftUI_RoundedCornerStyle_circular;
        v56 = v42;
        v58 = v72;
        v57 = v73;
        v59 = 0.0;
        v60 = 0.0;
        v61 = v43;
        break;
      default:
LABEL_19:
        v75 = 1.0;
        v76 = 0.0;
        v77 = 0.0;
        v78 = 0x3FF0000000000000;
        v79 = 0.0;
        v80 = 0.0;
        Path.addPath(_:transform:)(v41, &v75);
        return;
    }
    v75 = v49;
    v76 = v50;
    v77 = v51;
    v78 = *(_QWORD *)&v54;
    v79 = v52;
    v80 = v53;
    v81 = v48;
    v67 = v57;
    v68 = v56;
    v74.rect.origin.x = v56;
    v74.rect.origin.y = v58;
    v62 = v58;
    v74.rect.size.width = v57;
    v74.rect.size.height = v61;
    v65 = v60;
    v66 = v59;
    v74.cornerSize.width = v59;
    v74.cornerSize.height = v60;
    v63 = v55;
    v74.style = v55;
    if (FixedRoundedRect.contains(_:)(&v74))
      return;
    v75 = v68;
    v76 = v62;
    v77 = v67;
    v78 = *(_QWORD *)&v61;
    v79 = v66;
    v80 = v65;
    v81 = v63;
    v74.rect.origin.x = v49;
    v74.rect.origin.y = v50;
    v74.rect.size.width = v51;
    v74.rect.size.height = v54;
    v74.cornerSize.width = v52;
    v74.cornerSize.height = v53;
    v74.style = v48;
    if (FixedRoundedRect.contains(_:)(&v74))
    {
      outlined consume of Path.Storage(v45, v71, v70, v69, v47);
      v64 = *(_OWORD *)(v41 + 16);
      *(_OWORD *)v40 = *(_OWORD *)v41;
      *(_OWORD *)(v40 + 16) = v64;
      *(_BYTE *)(v40 + 32) = *(_BYTE *)(v41 + 32);
      outlined copy of Path.Storage(*(uint64_t *)&v42, *(uint64_t *)&v72, *(uint64_t *)&v73, *(uint64_t *)&v43, v44);
      return;
    }
    goto LABEL_19;
  }
}

void sub_234F00070()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x234F000B8);
}

double Path.init(_:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v2 = RBPathRetain();
  v4 = v3;
  type metadata accessor for Path.PathBox();
  v5 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 104) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_BYTE *)(v5 + 16) = 1;
  *(_QWORD *)(v5 + 24) = v2;
  *(_QWORD *)(v5 + 32) = v4;
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 5;
  return result;
}

uint64_t Path.init(roundedRect:cornerRadius:style:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>, double a7@<D4>)
{
  char v13;
  uint64_t result;
  char v15;
  CGRect v16;

  v13 = *a1;
  if (CGRectIsNull(*(CGRect *)&a3))
  {
    result = 0;
    v15 = 6;
    a4 = 0.0;
    a5 = 0.0;
    a6 = 0.0;
  }
  else if (a7 == 0.0
         || (v16.origin.x = a3, v16.origin.y = a4, v16.size.width = a5, v16.size.height = a6, CGRectIsInfinite(v16)))
  {
    v15 = 0;
    result = *(_QWORD *)&a3;
  }
  else
  {
    result = swift_allocObject();
    *(CGFloat *)(result + 16) = a3;
    *(CGFloat *)(result + 24) = a4;
    *(CGFloat *)(result + 32) = a5;
    *(CGFloat *)(result + 40) = a6;
    v15 = 2;
    a4 = 0.0;
    *(double *)(result + 48) = a7;
    *(double *)(result + 56) = a7;
    a5 = 0.0;
    a6 = 0.0;
    *(_BYTE *)(result + 64) = v13;
  }
  *(_QWORD *)a2 = result;
  *(CGFloat *)(a2 + 8) = a4;
  *(CGFloat *)(a2 + 16) = a5;
  *(CGFloat *)(a2 + 24) = a6;
  *(_BYTE *)(a2 + 32) = v15;
  return result;
}

void Path.strokedPath(_:)()
{
  __asm { BR              X13 }
}

uint64_t sub_234F00274()
{
  CGFloat v0;
  CGFloat v1;
  CGFloat v2;
  uint64_t v3;
  _QWORD *v4;
  CGFloat v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  CGRect v9;

  v9.origin.x = v5;
  v9.origin.y = v0;
  v9.size.width = v1;
  v9.size.height = v2;
  result = CGRectIsNull(v9);
  if ((result & 1) != 0)
  {
    v7 = 0;
    v8 = 6;
  }
  else
  {
    Path.retainRBPath()();
    type metadata accessor for Path.PathBox();
    v7 = swift_allocObject();
    *(_OWORD *)(v7 + 104) = 0u;
    *(_OWORD *)(v7 + 88) = 0u;
    *(_OWORD *)(v7 + 72) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 24) = 0u;
    *(_BYTE *)(v7 + 16) = 2;
    RBPathStorageInit();
    closure #1 in Path.strokedPath(_:)(v7 + 24, v4);
    result = RBPathRelease();
    v8 = 5;
  }
  *(_QWORD *)v3 = v7;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_BYTE *)(v3 + 32) = v8;
  return result;
}

void sub_234F00348()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char IsEmpty;

  if (*(_BYTE *)(v1 + 16))
  {
    if (*(_BYTE *)(v1 + 16) != 1)
    {
      v2 = one-time initialization token for bufferCallbacks;
      swift_retain();
      if (v2 != -1)
        swift_once();
      goto LABEL_8;
    }
  }
  else if (!*(_QWORD *)(v1 + 24))
  {
    __break(1u);
    goto LABEL_13;
  }
  swift_retain();
LABEL_8:
  IsEmpty = RBPathIsEmpty();
  outlined retain of Path.Storage(v0, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  if ((IsEmpty & 1) == 0)
    JUMPOUT(0x234F002A8);
LABEL_13:
  JUMPOUT(0x234F0028CLL);
}

void sub_234F003F0()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x234F00438);
}

void Path.cgPath.getter()
{
  __asm { BR              X13 }
}

CGPathRef sub_234F0048C@<X0>(CGFloat a1@<X8>)
{
  CGFloat v1;
  CGFloat v2;
  CGFloat v3;
  CGRect v5;

  v5.origin.x = v3;
  v5.origin.y = a1;
  v5.size.width = v1;
  v5.size.height = v2;
  return CGPathCreateWithRect(v5, 0);
}

void sub_234F005C8()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x234F00610);
}

void Path.trimmedPath(from:to:)()
{
  __asm { BR              X11 }
}

uint64_t sub_234F006A0()
{
  uint64_t v0;
  unsigned __int8 v1;
  CGFloat v2;
  CGFloat v3;
  CGFloat v4;
  CGFloat v5;
  double v6;
  double v7;
  uint64_t result;
  uint64_t v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  _QWORD v13[17];
  CGRect v14;

  v14.origin.x = v2;
  v14.origin.y = v3;
  v14.size.width = v4;
  v14.size.height = v5;
  result = CGRectIsNull(v14);
  if ((result & 1) != 0)
    goto LABEL_7;
  if (v7 > 0.0 || v6 < 1.0)
  {
    if (v6 - v7 > 0.0)
    {
      Path.retainRBPath()();
      type metadata accessor for Path.PathBox();
      v9 = swift_allocObject();
      *(_OWORD *)(v9 + 104) = 0u;
      *(_OWORD *)(v9 + 88) = 0u;
      *(_OWORD *)(v9 + 72) = 0u;
      *(_OWORD *)(v9 + 56) = 0u;
      *(_OWORD *)(v9 + 40) = 0u;
      *(_OWORD *)(v9 + 24) = 0u;
      *(_BYTE *)(v9 + 16) = 2;
      RBPathStorageInit();
      *(double *)v13 = v7;
      *(double *)&v13[1] = v6;
      MEMORY[0x23B7C9088](v9 + 24, 18, v13, 0);
      Path.append(to:)();
      MEMORY[0x23B7C9088](v9 + 24, 16, 0, 0);
      result = RBPathRelease();
      v10 = 0.0;
      v11 = 0.0;
      v12 = 0.0;
      v1 = 5;
      goto LABEL_8;
    }
LABEL_7:
    v9 = 0;
    v10 = 0.0;
    v11 = 0.0;
    v12 = 0.0;
    v1 = 6;
    goto LABEL_8;
  }
  result = outlined copy of Path.Storage(*(uint64_t *)&v2, *(uint64_t *)&v3, *(uint64_t *)&v4, *(uint64_t *)&v5, v1);
  v9 = *(_QWORD *)&v2;
  v10 = v3;
  v11 = v4;
  v12 = v5;
LABEL_8:
  *(_QWORD *)v0 = v9;
  *(CGFloat *)(v0 + 8) = v10;
  *(CGFloat *)(v0 + 16) = v11;
  *(CGFloat *)(v0 + 24) = v12;
  *(_BYTE *)(v0 + 32) = v1;
  return result;
}

void sub_234F008C8()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x234F00910);
}

void __swiftcall Path.rect()(__C::CGRect_optional *__return_ptr retstr)
{
  uint64_t v1;
  int8x16_t v3;
  int8x16_t v4;
  int8x16_t v5;
  CGSize v6;
  Swift::Bool v7;
  _BYTE v8[40];
  int8x16_t v9[2];
  unsigned __int8 v10;

  outlined init with take of Path.Storage(v1, (uint64_t)v8);
  outlined init with take of Path.Storage((uint64_t)v8, (uint64_t)v9);
  v3.i32[0] = 0;
  v4.i32[0] = v10;
  v5 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vmvnq_s8(vceqq_s8(v4, v3)), 0);
  v6 = (CGSize)vbicq_s8(v9[1], v5);
  v7 = v10 != 0;
  retstr->value.origin = (CGPoint)vbicq_s8(v9[0], v5);
  retstr->value.size = v6;
  retstr->is_nil = v7;
}

void Path.retainRBPath()()
{
  __asm { BR              X13 }
}

uint64_t sub_234F009D4()
{
  return RBPathMakeRect();
}

void sub_234F00B00()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x234F00B48);
}

uint64_t Path.applying(_:)@<X0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  char v9;
  double v10;
  double v11;
  double v12;
  double v13;
  CGFloat v14;
  CGFloat v15;
  uint64_t result;
  int8x16_t v17;
  CGRect v18;
  CGFloat x;
  CGRect v20;
  CGFloat v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  uint64_t v30;
  CGFloat v31;
  int8x16_t v32;
  int8x16_t v33;
  CGSize v34;
  float64x2_t v35;
  int8x16_t v36;
  int8x16_t v37;
  __int128 v38;
  CGFloat v39;
  int8x16_t v40;
  CGSize size;
  CGFloat v42;
  CGAffineTransform v43;
  _BYTE v44[40];
  int8x16_t v45;
  int8x16_t v46;
  char v47;
  uint64_t v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;

  v48 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)v2;
  y = *(double *)(v2 + 8);
  width = *(double *)(v2 + 16);
  height = *(double *)(v2 + 24);
  v9 = *(_BYTE *)(v2 + 32);
  v11 = *a1;
  v10 = a1[1];
  v13 = a1[2];
  v12 = a1[3];
  v15 = a1[4];
  v14 = a1[5];
  v43.a = *a1;
  v43.b = v10;
  v43.c = v13;
  v43.d = v12;
  v43.tx = v15;
  v43.ty = v14;
  v42 = v14;
  if (CGAffineTransformIsIdentity(&v43))
  {
    outlined init with take of Path.Storage(v2, (uint64_t)&v43);
    result = outlined retain of Path.Storage((uint64_t)&v43, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
  }
  else
  {
    outlined init with take of Path.Storage(v2, (uint64_t)v44);
    result = outlined init with take of Path.Storage((uint64_t)v44, (uint64_t)&v45);
    switch(v47)
    {
      case 0:
        v18.origin = (CGPoint)v45;
        v18.size = (CGSize)v46;
        if ((v10 != 0.0 || v13 != 0.0) && (v11 != 0.0 || v12 != 0.0))
          goto LABEL_25;
        v43.a = v11;
        v43.b = v10;
        v43.c = v13;
        v43.d = v12;
        v43.tx = v15;
        v43.ty = v42;
        v49 = CGRectApplyAffineTransform(v18, &v43);
        x = v49.origin.x;
        y = v49.origin.y;
        width = v49.size.width;
        height = v49.size.height;
        result = CGRectIsNull(v49);
        if ((result & 1) != 0)
          goto LABEL_15;
        v9 = 0;
        v5 = *(_QWORD *)&x;
        break;
      case 1:
        v20.origin = (CGPoint)v45;
        v20.size = (CGSize)v46;
        if ((v10 != 0.0 || v13 != 0.0) && (v11 != 0.0 || v12 != 0.0))
          goto LABEL_25;
        v43.a = v11;
        v43.b = v10;
        v43.c = v13;
        v43.d = v12;
        v43.tx = v15;
        v43.ty = v42;
        v50 = CGRectApplyAffineTransform(v20, &v43);
        v21 = v50.origin.x;
        y = v50.origin.y;
        width = v50.size.width;
        height = v50.size.height;
        result = CGRectIsNull(v50);
        if ((result & 1) != 0)
        {
LABEL_15:
          v5 = 0;
          v9 = 6;
          goto LABEL_26;
        }
        v52.origin.x = v21;
        v52.origin.y = y;
        v52.size.width = width;
        v52.size.height = height;
        result = CGRectIsInfinite(v52);
        v5 = *(_QWORD *)&v21;
        v9 = result ^ 1;
        break;
      case 2:
        v22 = *(_QWORD *)(v45.i64[0] + 16);
        v23 = *(_QWORD *)(v45.i64[0] + 24);
        v24 = *(_QWORD *)(v45.i64[0] + 32);
        v25 = *(_QWORD *)(v45.i64[0] + 40);
        v17.i64[0] = *(_QWORD *)(v45.i64[0] + 48);
        size = (CGSize)v17;
        v26 = *(_BYTE *)(v45.i64[0] + 64);
        if ((v10 != 0.0 || v13 != 0.0) && (v11 != 0.0 || v12 != 0.0))
          goto LABEL_25;
        v17.i64[0] = *(_QWORD *)(v45.i64[0] + 56);
        v40 = v17;
        v43.a = v11;
        v43.b = v10;
        v43.c = v13;
        v43.d = v12;
        v43.tx = v15;
        v43.ty = v42;
        v51 = CGRectApplyAffineTransform(*(CGRect *)&v22, &v43);
        v27 = v51.origin.x;
        v39 = v51.size.height;
        v28 = v51.size.width;
        v29 = v51.origin.y;
        if ((~*(_QWORD *)&size.width & 0x7FF0000000000000) != 0)
        {
          v30 = v40.i64[0];
          if ((~v40.i64[0] & 0x7FF0000000000000) != 0)
          {
            v43.a = v11;
            v43.b = v10;
            v43.c = v13;
            v43.d = v12;
            v43.tx = v15;
            v43.ty = v42;
            v31 = size.width;
            v34 = CGSizeApplyAffineTransform(*(CGSize *)(&v30 - 1), &v43);
            *(CGFloat *)v33.i64 = v34.height;
            *(CGFloat *)v32.i64 = v34.width;
            v35.f64[0] = NAN;
            v35.f64[1] = NAN;
            v36 = (int8x16_t)vnegq_f64(v35);
            v40.i64[0] = vbslq_s8(v36, v33, v40).u64[0];
            *(_QWORD *)&size.width = vbslq_s8(v36, v32, (int8x16_t)size).u64[0];
          }
        }
        result = swift_allocObject();
        v5 = result;
        *(CGFloat *)(result + 16) = v27;
        *(CGFloat *)(result + 24) = v29;
        *(CGFloat *)(result + 32) = v28;
        *(CGFloat *)(result + 40) = v39;
        v9 = 2;
        y = 0.0;
        *(CGFloat *)(result + 48) = size.width;
        *(_QWORD *)(result + 56) = v40.i64[0];
        width = 0.0;
        height = 0.0;
        *(_BYTE *)(result + 64) = v26;
        break;
      case 6:
        v37 = vorrq_s8(v45, v46);
        if (vorr_s8(*(int8x8_t *)v37.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL)))
          goto LABEL_25;
        break;
      default:
LABEL_25:
        type metadata accessor for Path.PathBox();
        v5 = swift_allocObject();
        *(_OWORD *)(v5 + 104) = 0u;
        *(_OWORD *)(v5 + 88) = 0u;
        *(_OWORD *)(v5 + 72) = 0u;
        *(_OWORD *)(v5 + 56) = 0u;
        *(_OWORD *)(v5 + 40) = 0u;
        *(_OWORD *)(v5 + 24) = 0u;
        *(_BYTE *)(v5 + 16) = 2;
        RBPathStorageInit();
        v38 = *((_OWORD *)a1 + 1);
        *(_OWORD *)&v43.a = *(_OWORD *)a1;
        *(_OWORD *)&v43.c = v38;
        *(_OWORD *)&v43.tx = *((_OWORD *)a1 + 2);
        MEMORY[0x23B7C9088](v5 + 24, 17, 0, &v43);
        Path.append(to:)();
        result = MEMORY[0x23B7C9088](v5 + 24, 16, 0, 0);
        v9 = 5;
LABEL_26:
        y = 0.0;
        width = 0.0;
        height = 0.0;
        break;
    }
  }
  *(_QWORD *)a2 = v5;
  *(CGFloat *)(a2 + 8) = y;
  *(CGFloat *)(a2 + 16) = width;
  *(CGFloat *)(a2 + 24) = height;
  *(_BYTE *)(a2 + 32) = v9;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Path.PathBox.Kind()
{
  char *v0;
  char v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Path.PathBox.Kind()
{
  _BYTE *v0;

  Hasher._combine(_:)(*v0 + 1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Path.PathBox.Kind()
{
  char *v0;
  char v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

unsigned __int8 *protocol witness for RawRepresentable.init(rawValue:) in conformance Path.PathBox.Kind@<X0>(unsigned __int8 *result@<X0>, char *a2@<X8>)
{
  unsigned int v2;
  char v3;

  v2 = *result;
  if (v2 <= 3)
    v3 = 0x2010003u >> (8 * v2);
  else
    v3 = 3;
  *a2 = v3;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Path.PathBox.Kind(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1 + 1;
}

double Path.PathBox.__allocating_init(takingPath:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;

  v4 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_BYTE *)(v4 + 16) = 1;
  *(_QWORD *)(v4 + 24) = a1;
  *(_QWORD *)(v4 + 32) = a2;
  return result;
}

uint64_t Path.PathBox.init(takingPath:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_BYTE *)(v2 + 16) = 1;
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return v2;
}

uint64_t Path.PathBox.deinit()
{
  uint64_t v0;
  void *v1;
  uint64_t result;

  if (*(_BYTE *)(v0 + 16))
  {
    if (*(_BYTE *)(v0 + 16) == 1)
      RBPathRelease();
    else
      MEMORY[0x23B7C90AC](v0 + 24);
    return v0;
  }
  v1 = *(void **)(v0 + 24);
  if (v1)
  {

    return v0;
  }
  __break(1u);
  return result;
}

uint64_t Path.PathBox.__deallocating_deinit()
{
  uint64_t v0;
  void *v1;
  uint64_t result;

  if (*(_BYTE *)(v0 + 16))
  {
    if (*(_BYTE *)(v0 + 16) == 1)
      RBPathRelease();
    else
      MEMORY[0x23B7C90AC](v0 + 24);
    return swift_deallocClassInstance();
  }
  v1 = *(void **)(v0 + 24);
  if (v1)
  {

    return swift_deallocClassInstance();
  }
  __break(1u);
  return result;
}

uint64_t Path.PathBox.prepareBuffer()()
{
  uint64_t v0;
  void *v1;
  uint64_t result;

  if (*(_BYTE *)(v0 + 16))
  {
    if (*(_BYTE *)(v0 + 16) == 1)
      goto LABEL_6;
  }
  else
  {
    v1 = *(void **)(v0 + 24);
    if (v1)
    {
      RBPathMakeWithCGPath();

LABEL_6:
      RBPathStorageInit();
      RBPathStorageAppendPath();
      *(_BYTE *)(v0 + 16) = 2;
      return RBPathRelease();
    }
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Path.PathBox(uint64_t *a1, uint64_t *a2)
{
  return specialized static Path.PathBox.== infix(_:_:)(*a1, *a2);
}

uint64_t static StrokedPath.== infix(_:_:)()
{
  return 1;
}

uint64_t static TrimmedPath.== infix(_:_:)()
{
  return 1;
}

uint64_t Path.storage.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Path.Storage(v1, a1);
}

__n128 Path.storage.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  __n128 result;
  __n128 v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  outlined init with take of Path.Storage(a1, (uint64_t)&v7);
  v6 = v7;
  v2 = v8;
  v3 = v9;
  v4 = v10;
  outlined consume of Path.Storage(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32));
  result = v6;
  *(__n128 *)v1 = v6;
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)(v1 + 24) = v3;
  *(_BYTE *)(v1 + 32) = v4;
  return result;
}

uint64_t (*Path.storage.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double Path.init(storage:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v3;
  double result;
  __int128 v5;
  _OWORD v6[2];
  char v7;

  outlined init with take of Path.Storage(a1, (uint64_t)v6);
  v3 = v7;
  result = *(double *)v6;
  v5 = v6[1];
  *(_OWORD *)a2 = v6[0];
  *(_OWORD *)(a2 + 16) = v5;
  *(_BYTE *)(a2 + 32) = v3;
  return result;
}

uint64_t Path.init(box:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 5;
  return result;
}

uint64_t Path.init(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v5;

  if (CGPathIsEmpty((CGPathRef)a1))
  {

    result = 0;
    v5 = 6;
  }
  else
  {
    type metadata accessor for Path.PathBox();
    result = swift_allocObject();
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_BYTE *)(result + 16) = 0;
    v5 = 5;
    *(_QWORD *)(result + 24) = a1;
  }
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = v5;
  return result;
}

{
  uint64_t result;
  char v5;
  uint64_t v6;

  if (CGPathIsEmpty((CGPathRef)a1))
  {

    result = 0;
    v5 = 6;
LABEL_5:
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_BYTE *)(a2 + 32) = v5;
    return result;
  }
  result = (uint64_t)CGPathCreateMutableCopy((CGPathRef)a1);
  if (result)
  {
    v6 = result;

    type metadata accessor for Path.PathBox();
    result = swift_allocObject();
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_BYTE *)(result + 16) = 0;
    v5 = 5;
    *(_QWORD *)(result + 24) = v6;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t Path.init(roundedRect:cornerSize:style:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>, double a7@<D4>, double a8@<D5>)
{
  char v15;
  uint64_t result;
  char v17;
  CGRect v18;

  v15 = *a1;
  if (CGRectIsNull(*(CGRect *)&a3))
  {
    result = 0;
    v17 = 6;
    a4 = 0.0;
    a5 = 0.0;
    a6 = 0.0;
  }
  else if (a7 == 0.0 && a8 == 0.0
         || (v18.origin.x = a3, v18.origin.y = a4, v18.size.width = a5, v18.size.height = a6, CGRectIsInfinite(v18)))
  {
    v17 = 0;
    result = *(_QWORD *)&a3;
  }
  else
  {
    result = swift_allocObject();
    *(CGFloat *)(result + 16) = a3;
    *(CGFloat *)(result + 24) = a4;
    *(CGFloat *)(result + 32) = a5;
    *(CGFloat *)(result + 40) = a6;
    v17 = 2;
    a4 = 0.0;
    *(double *)(result + 48) = a7;
    *(double *)(result + 56) = a8;
    a5 = 0.0;
    a6 = 0.0;
    *(_BYTE *)(result + 64) = v15;
  }
  *(_QWORD *)a2 = result;
  *(CGFloat *)(a2 + 8) = a4;
  *(CGFloat *)(a2 + 16) = a5;
  *(CGFloat *)(a2 + 24) = a6;
  *(_BYTE *)(a2 + 32) = v17;
  return result;
}

_QWORD *Path.init(roundedRect:cornerRadii:style:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>, double a7@<D4>, double a8@<D5>, double a9@<D6>, double a10@<D7>)
{
  char v19;
  char v20;
  _QWORD *result;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;

  v19 = *a1;
  v24 = 0u;
  v25 = 0u;
  v20 = 6;
  v26 = 6;
  v27 = 0x3FF0000000000000;
  v28 = 0u;
  v29 = 0x3FF0000000000000;
  v30 = 0u;
  result = (_QWORD *)CGRectIsNull(*(CGRect *)&a3);
  v22 = 0uLL;
  v23 = 0uLL;
  if ((result & 1) == 0)
  {
    result = specialized Path.withMutableBuffer(do:)((uint64_t)&v24, &v27, v19, a3, a4, a5, a6, a7, a8, a9, a10);
    v22 = v24;
    v23 = v25;
    v20 = v26;
  }
  *(_OWORD *)a2 = v22;
  *(_OWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 32) = v20;
  return result;
}

_QWORD *Path.addRoundedRect(in:cornerRadii:style:transform:)(char *a1, _OWORD *a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  uint64_t v10;
  char v20;
  _QWORD *result;

  v20 = *a1;
  result = (_QWORD *)CGRectIsNull(*(CGRect *)&a3);
  if ((result & 1) == 0)
    return specialized Path.withMutableBuffer(do:)(v10, a2, v20, a3, a4, a5, a6, a7, a8, a9, a10);
  return result;
}

BOOL Path.init(ellipseIn:)@<W0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  CGFloat v8;
  _BOOL8 result;
  char v11;
  CGRect v12;

  v8 = a2;
  result = CGRectIsNull(*(CGRect *)&a2);
  if (result)
  {
    v11 = 6;
    v8 = 0.0;
    a3 = 0.0;
    a4 = 0.0;
    a5 = 0.0;
  }
  else
  {
    v12.origin.x = v8;
    v12.origin.y = a3;
    v12.size.width = a4;
    v12.size.height = a5;
    result = CGRectIsInfinite(v12);
    v11 = !result;
  }
  *(CGFloat *)a1 = v8;
  *(CGFloat *)(a1 + 8) = a3;
  *(CGFloat *)(a1 + 16) = a4;
  *(CGFloat *)(a1 + 24) = a5;
  *(_BYTE *)(a1 + 32) = v11;
  return result;
}

uint64_t Path.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v5[40];

  specialized Path.init(_:)(a1, a2, (uint64_t)v5);
  return outlined init with take of Path?((uint64_t)v5, a3);
}

uint64_t Path.description.getter()
{
  const CGPath *v0;
  const CGPath *v1;
  void *v2;
  uint64_t v3;

  Path.cgPath.getter();
  v1 = v0;
  v2 = (void *)_CGPathCopyDescription(v0, 0.0);

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v3;
}

void Path.append(to:)()
{
  __asm { BR              X13 }
}

uint64_t sub_234F017E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;

  v6[0] = v4;
  v6[1] = a1;
  v7 = v1;
  v8 = v2;
  return MEMORY[0x23B7C9088](v3, 5, v6, 0);
}

void sub_234F01918()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x234F01960);
}

_QWORD *specialized Path.withMutableBuffer(do:)(uint64_t a1, double a2, double a3)
{
  return specialized Path.withMutableBuffer(do:)(a1, 0, a2, a3);
}

{
  return specialized Path.withMutableBuffer(do:)(a1, 1u, a2, a3);
}

_QWORD *specialized Path.withMutableBuffer(do:)(uint64_t a1, unsigned __int8 a2, double a3, double a4)
{
  unsigned __int8 v4;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _QWORD *result;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  _QWORD v28[6];
  char v29;
  uint64_t v30;

  v4 = a2;
  v30 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)a1;
  v9 = (_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(unsigned __int8 *)(a1 + 32);
  if (v11 != 5)
  {
    v16 = *(_QWORD *)(a1 + 16);
    v17 = *(_QWORD *)(a1 + 24);
    type metadata accessor for Path.PathBox();
    v18 = swift_allocObject();
    *(_OWORD *)(v18 + 24) = 0u;
    *(_OWORD *)(v18 + 104) = 0u;
    *(_OWORD *)(v18 + 88) = 0u;
    *(_OWORD *)(v18 + 72) = 0u;
    *(_OWORD *)(v18 + 56) = 0u;
    *(_OWORD *)(v18 + 40) = 0u;
    *(_BYTE *)(v18 + 16) = 2;
    RBPathStorageInit();
    v19 = *(unsigned __int8 *)(v18 + 16);
    swift_retain();
    if (v19 != 2)
      Path.PathBox.prepareBuffer()();
    v28[2] = v8;
    v28[3] = v10;
    v28[4] = v16;
    v28[5] = v17;
    v29 = v11;
    outlined copy of Path.Storage(v8, v10, v16, v17, v11);
    Path.append(to:)();
    outlined consume of Path.Storage(v8, v10, v16, v17, v11);
    v12 = v18;
    v4 = a2;
LABEL_12:
    swift_release();
    goto LABEL_13;
  }
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = 6;
  v12 = v8;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Path.PathBox();
    v12 = swift_allocObject();
    *(_OWORD *)(v12 + 24) = 0u;
    result = (_QWORD *)(v12 + 24);
    *(_OWORD *)(v12 + 104) = 0u;
    *(_OWORD *)(v12 + 88) = 0u;
    *(_OWORD *)(v12 + 72) = 0u;
    *(_OWORD *)(v12 + 56) = 0u;
    *(_OWORD *)(v12 + 40) = 0u;
    v14 = *(unsigned __int8 *)(v8 + 16);
    *(_BYTE *)(v12 + 16) = v14;
    if (v14)
    {
      if (v14 == 1)
      {
        swift_retain();
        *(_QWORD *)(v12 + 24) = RBPathRetain();
        *(_QWORD *)(v12 + 32) = v15;
        swift_release();
      }
      else
      {
        RBPathStorageInit();
      }
    }
    else
    {
      v20 = *(void **)(v8 + 24);
      if (!v20)
      {
        __break(1u);
        return result;
      }
      *result = v20;
      v21 = v20;
    }
    goto LABEL_12;
  }
LABEL_13:
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD *)(a1 + 8);
  v24 = *(_QWORD *)(a1 + 16);
  v25 = *(_QWORD *)(a1 + 24);
  v26 = *(_BYTE *)(a1 + 32);
  swift_retain();
  outlined consume of Path.Storage(v22, v23, v24, v25, v26);
  *(_QWORD *)a1 = v12;
  v9[1] = 0;
  v9[2] = 0;
  *v9 = 0;
  *(_BYTE *)(a1 + 32) = 5;
  if (*(_BYTE *)(v12 + 16) != 2)
    Path.PathBox.prepareBuffer()();
  *(double *)v28 = a3;
  *(double *)&v28[1] = a4;
  MEMORY[0x23B7C9088](v12 + 24, v4, v28, 0);
  return (_QWORD *)swift_release();
}

_QWORD *specialized Path.withMutableBuffer(do:)(uint64_t a1, _OWORD *a2, char a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  char v11;
  _OWORD *v20;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  _QWORD *result;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  __int128 v41;
  _QWORD v44[8];
  _OWORD v45[3];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;

  v11 = a3;
  v20 = a2;
  v51 = *MEMORY[0x24BDAC8D0];
  v22 = *(_QWORD *)a1;
  v23 = (_QWORD *)(a1 + 8);
  v24 = *(_QWORD *)(a1 + 8);
  v25 = *(unsigned __int8 *)(a1 + 32);
  if (v25 != 5)
  {
    v30 = *(_QWORD *)(a1 + 16);
    v31 = *(_QWORD *)(a1 + 24);
    type metadata accessor for Path.PathBox();
    v32 = swift_allocObject();
    *(_OWORD *)(v32 + 24) = 0u;
    *(_OWORD *)(v32 + 104) = 0u;
    *(_OWORD *)(v32 + 88) = 0u;
    *(_OWORD *)(v32 + 72) = 0u;
    *(_OWORD *)(v32 + 56) = 0u;
    *(_OWORD *)(v32 + 40) = 0u;
    *(_BYTE *)(v32 + 16) = 2;
    RBPathStorageInit();
    v33 = *(unsigned __int8 *)(v32 + 16);
    swift_retain();
    if (v33 != 2)
      Path.PathBox.prepareBuffer()();
    v46 = v22;
    v47 = v24;
    v48 = v30;
    v49 = v31;
    v50 = v25;
    outlined copy of Path.Storage(v22, v24, v30, v31, v25);
    Path.append(to:)();
    outlined consume of Path.Storage(v22, v24, v30, v31, v25);
    v26 = v32;
    v11 = a3;
    v20 = a2;
LABEL_12:
    swift_release();
    goto LABEL_13;
  }
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = 6;
  v26 = v22;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Path.PathBox();
    v26 = swift_allocObject();
    *(_OWORD *)(v26 + 24) = 0u;
    result = (_QWORD *)(v26 + 24);
    *(_OWORD *)(v26 + 104) = 0u;
    *(_OWORD *)(v26 + 88) = 0u;
    *(_OWORD *)(v26 + 72) = 0u;
    *(_OWORD *)(v26 + 56) = 0u;
    *(_OWORD *)(v26 + 40) = 0u;
    v28 = *(unsigned __int8 *)(v22 + 16);
    *(_BYTE *)(v26 + 16) = v28;
    if (v28)
    {
      if (v28 == 1)
      {
        swift_retain();
        *(_QWORD *)(v26 + 24) = RBPathRetain();
        *(_QWORD *)(v26 + 32) = v29;
        swift_release();
      }
      else
      {
        RBPathStorageInit();
      }
    }
    else
    {
      v34 = *(void **)(v22 + 24);
      if (!v34)
      {
        __break(1u);
        return result;
      }
      *result = v34;
      v35 = v34;
    }
    goto LABEL_12;
  }
LABEL_13:
  v36 = *(_QWORD *)a1;
  v37 = *(_QWORD *)(a1 + 8);
  v38 = *(_QWORD *)(a1 + 16);
  v39 = *(_QWORD *)(a1 + 24);
  v40 = *(_BYTE *)(a1 + 32);
  swift_retain();
  outlined consume of Path.Storage(v36, v37, v38, v39, v40);
  *(_QWORD *)a1 = v26;
  v23[1] = 0;
  v23[2] = 0;
  *v23 = 0;
  *(_BYTE *)(a1 + 32) = 5;
  if (*(_BYTE *)(v26 + 16) != 2)
    Path.PathBox.prepareBuffer()();
  v41 = v20[1];
  v45[0] = *v20;
  v45[1] = v41;
  v45[2] = v20[2];
  *(double *)v44 = a4;
  *(double *)&v44[1] = a5;
  *(double *)&v44[2] = a6;
  *(double *)&v44[3] = a7;
  *(double *)&v44[4] = a8;
  *(double *)&v44[5] = a9;
  *(double *)&v44[6] = a10;
  *(double *)&v44[7] = a11;
  MEMORY[0x23B7C9088](v26 + 24, v11 & 1 | 0xAu, v44, v45);
  return (_QWORD *)swift_release();
}

_QWORD *specialized Path.withMutableBuffer(do:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  _QWORD *result;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;

  v2 = *(_QWORD *)a1;
  v4 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 8);
  v5 = *(unsigned __int8 *)(a1 + 32);
  if (v5 != 5)
  {
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(_QWORD *)(a1 + 24);
    type metadata accessor for Path.PathBox();
    v12 = swift_allocObject();
    *(_OWORD *)(v12 + 24) = 0u;
    *(_OWORD *)(v12 + 104) = 0u;
    *(_OWORD *)(v12 + 88) = 0u;
    *(_OWORD *)(v12 + 72) = 0u;
    *(_OWORD *)(v12 + 56) = 0u;
    *(_OWORD *)(v12 + 40) = 0u;
    *(_BYTE *)(v12 + 16) = 2;
    RBPathStorageInit();
    v13 = *(unsigned __int8 *)(v12 + 16);
    swift_retain();
    if (v13 != 2)
      Path.PathBox.prepareBuffer()();
    outlined copy of Path.Storage(v2, v3, v10, v11, v5);
    Path.append(to:)();
    outlined consume of Path.Storage(v2, v3, v10, v11, v5);
    v6 = v12;
LABEL_12:
    swift_release();
    goto LABEL_13;
  }
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = 6;
  v6 = v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Path.PathBox();
    v6 = swift_allocObject();
    *(_OWORD *)(v6 + 24) = 0u;
    result = (_QWORD *)(v6 + 24);
    *(_OWORD *)(v6 + 104) = 0u;
    *(_OWORD *)(v6 + 88) = 0u;
    *(_OWORD *)(v6 + 72) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *(_OWORD *)(v6 + 40) = 0u;
    v8 = *(unsigned __int8 *)(v2 + 16);
    *(_BYTE *)(v6 + 16) = v8;
    if (v8)
    {
      if (v8 == 1)
      {
        swift_retain();
        *(_QWORD *)(v6 + 24) = RBPathRetain();
        *(_QWORD *)(v6 + 32) = v9;
        swift_release();
      }
      else
      {
        RBPathStorageInit();
      }
    }
    else
    {
      v14 = *(void **)(v2 + 24);
      if (!v14)
      {
        __break(1u);
        return result;
      }
      *result = v14;
      v15 = v14;
    }
    goto LABEL_12;
  }
LABEL_13:
  v16 = *(_QWORD *)a1;
  v17 = *(_QWORD *)(a1 + 8);
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *(_QWORD *)(a1 + 24);
  v20 = *(_BYTE *)(a1 + 32);
  swift_retain();
  outlined consume of Path.Storage(v16, v17, v18, v19, v20);
  *(_QWORD *)a1 = v6;
  v4[1] = 0;
  v4[2] = 0;
  *v4 = 0;
  *(_BYTE *)(a1 + 32) = 5;
  if (*(_BYTE *)(v6 + 16) != 2)
    Path.PathBox.prepareBuffer()();
  MEMORY[0x23B7C9088](v6 + 24, 4, 0, 0);
  return (_QWORD *)swift_release();
}

_QWORD *specialized Path.withMutableBuffer(do:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  _QWORD *result;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  _QWORD v29[8];
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)a1;
  v12 = (_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 8);
  v13 = *(unsigned __int8 *)(a1 + 32);
  if (v13 != 5)
  {
    v18 = *(_QWORD *)(a1 + 16);
    v19 = *(_QWORD *)(a1 + 24);
    type metadata accessor for Path.PathBox();
    v20 = swift_allocObject();
    *(_OWORD *)(v20 + 24) = 0u;
    *(_OWORD *)(v20 + 104) = 0u;
    *(_OWORD *)(v20 + 88) = 0u;
    *(_OWORD *)(v20 + 72) = 0u;
    *(_OWORD *)(v20 + 56) = 0u;
    *(_OWORD *)(v20 + 40) = 0u;
    *(_BYTE *)(v20 + 16) = 2;
    RBPathStorageInit();
    v21 = *(unsigned __int8 *)(v20 + 16);
    swift_retain();
    if (v21 != 2)
      Path.PathBox.prepareBuffer()();
    v29[4] = v10;
    v29[5] = v11;
    v29[6] = v18;
    v29[7] = v19;
    v30 = v13;
    outlined copy of Path.Storage(v10, v11, v18, v19, v13);
    Path.append(to:)();
    outlined consume of Path.Storage(v10, v11, v18, v19, v13);
    v14 = v20;
LABEL_12:
    swift_release();
    goto LABEL_13;
  }
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = 6;
  v14 = v10;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Path.PathBox();
    v14 = swift_allocObject();
    *(_OWORD *)(v14 + 24) = 0u;
    result = (_QWORD *)(v14 + 24);
    *(_OWORD *)(v14 + 104) = 0u;
    *(_OWORD *)(v14 + 88) = 0u;
    *(_OWORD *)(v14 + 72) = 0u;
    *(_OWORD *)(v14 + 56) = 0u;
    *(_OWORD *)(v14 + 40) = 0u;
    v16 = *(unsigned __int8 *)(v10 + 16);
    *(_BYTE *)(v14 + 16) = v16;
    if (v16)
    {
      if (v16 == 1)
      {
        swift_retain();
        *(_QWORD *)(v14 + 24) = RBPathRetain();
        *(_QWORD *)(v14 + 32) = v17;
        swift_release();
      }
      else
      {
        RBPathStorageInit();
      }
    }
    else
    {
      v22 = *(void **)(v10 + 24);
      if (!v22)
      {
        __break(1u);
        return result;
      }
      *result = v22;
      v23 = v22;
    }
    goto LABEL_12;
  }
LABEL_13:
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD *)(a1 + 8);
  v26 = *(_QWORD *)(a1 + 16);
  v27 = *(_QWORD *)(a1 + 24);
  v28 = *(_BYTE *)(a1 + 32);
  swift_retain();
  outlined consume of Path.Storage(v24, v25, v26, v27, v28);
  *(_QWORD *)a1 = v14;
  v12[1] = 0;
  v12[2] = 0;
  *v12 = 0;
  *(_BYTE *)(a1 + 32) = 5;
  if (*(_BYTE *)(v14 + 16) != 2)
    Path.PathBox.prepareBuffer()();
  *(double *)v29 = a2;
  *(double *)&v29[1] = a3;
  *(double *)&v29[2] = a4;
  *(double *)&v29[3] = a5;
  MEMORY[0x23B7C9088](v14 + 24, 2, v29, 0);
  return (_QWORD *)swift_release();
}

_QWORD *specialized Path.withMutableBuffer(do:)(uint64_t a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  _QWORD *result;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  _QWORD v33[10];
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)a1;
  v16 = (_QWORD *)(a1 + 8);
  v15 = *(_QWORD *)(a1 + 8);
  v17 = *(unsigned __int8 *)(a1 + 32);
  if (v17 != 5)
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_QWORD *)(a1 + 24);
    type metadata accessor for Path.PathBox();
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 24) = 0u;
    *(_OWORD *)(v24 + 104) = 0u;
    *(_OWORD *)(v24 + 88) = 0u;
    *(_OWORD *)(v24 + 72) = 0u;
    *(_OWORD *)(v24 + 56) = 0u;
    *(_OWORD *)(v24 + 40) = 0u;
    *(_BYTE *)(v24 + 16) = 2;
    RBPathStorageInit();
    v25 = *(unsigned __int8 *)(v24 + 16);
    swift_retain();
    if (v25 != 2)
      Path.PathBox.prepareBuffer()();
    v33[6] = v14;
    v33[7] = v15;
    v33[8] = v22;
    v33[9] = v23;
    v34 = v17;
    outlined copy of Path.Storage(v14, v15, v22, v23, v17);
    Path.append(to:)();
    outlined consume of Path.Storage(v14, v15, v22, v23, v17);
    v18 = v24;
LABEL_12:
    swift_release();
    goto LABEL_13;
  }
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = 6;
  v18 = v14;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Path.PathBox();
    v18 = swift_allocObject();
    *(_OWORD *)(v18 + 24) = 0u;
    result = (_QWORD *)(v18 + 24);
    *(_OWORD *)(v18 + 104) = 0u;
    *(_OWORD *)(v18 + 88) = 0u;
    *(_OWORD *)(v18 + 72) = 0u;
    *(_OWORD *)(v18 + 56) = 0u;
    *(_OWORD *)(v18 + 40) = 0u;
    v20 = *(unsigned __int8 *)(v14 + 16);
    *(_BYTE *)(v18 + 16) = v20;
    if (v20)
    {
      if (v20 == 1)
      {
        swift_retain();
        *(_QWORD *)(v18 + 24) = RBPathRetain();
        *(_QWORD *)(v18 + 32) = v21;
        swift_release();
      }
      else
      {
        RBPathStorageInit();
      }
    }
    else
    {
      v26 = *(void **)(v14 + 24);
      if (!v26)
      {
        __break(1u);
        return result;
      }
      *result = v26;
      v27 = v26;
    }
    goto LABEL_12;
  }
LABEL_13:
  v28 = *(_QWORD *)a1;
  v29 = *(_QWORD *)(a1 + 8);
  v30 = *(_QWORD *)(a1 + 16);
  v31 = *(_QWORD *)(a1 + 24);
  v32 = *(_BYTE *)(a1 + 32);
  swift_retain();
  outlined consume of Path.Storage(v28, v29, v30, v31, v32);
  *(_QWORD *)a1 = v18;
  v16[1] = 0;
  v16[2] = 0;
  *v16 = 0;
  *(_BYTE *)(a1 + 32) = 5;
  if (*(_BYTE *)(v18 + 16) != 2)
    Path.PathBox.prepareBuffer()();
  *(double *)v33 = a2;
  *(double *)&v33[1] = a3;
  *(double *)&v33[2] = a4;
  *(double *)&v33[3] = a5;
  *(double *)&v33[4] = a6;
  *(double *)&v33[5] = a7;
  MEMORY[0x23B7C9088](v18 + 24, 3, v33, 0);
  return (_QWORD *)swift_release();
}

_QWORD *specialized Path.withMutableBuffer(do:)(uint64_t a1, _OWORD *a2, unsigned __int8 a3, double a4, double a5, double a6, double a7)
{
  unsigned __int8 v7;
  _OWORD *v12;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _QWORD *result;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  __int128 v33;
  _QWORD v36[4];
  _OWORD v37[3];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;

  v7 = a3;
  v12 = a2;
  v43 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)a1;
  v15 = (_QWORD *)(a1 + 8);
  v16 = *(_QWORD *)(a1 + 8);
  v17 = *(unsigned __int8 *)(a1 + 32);
  if (v17 != 5)
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_QWORD *)(a1 + 24);
    type metadata accessor for Path.PathBox();
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 24) = 0u;
    *(_OWORD *)(v24 + 104) = 0u;
    *(_OWORD *)(v24 + 88) = 0u;
    *(_OWORD *)(v24 + 72) = 0u;
    *(_OWORD *)(v24 + 56) = 0u;
    *(_OWORD *)(v24 + 40) = 0u;
    *(_BYTE *)(v24 + 16) = 2;
    RBPathStorageInit();
    v25 = *(unsigned __int8 *)(v24 + 16);
    swift_retain();
    if (v25 != 2)
      Path.PathBox.prepareBuffer()();
    v38 = v14;
    v39 = v16;
    v40 = v22;
    v41 = v23;
    v42 = v17;
    outlined copy of Path.Storage(v14, v16, v22, v23, v17);
    Path.append(to:)();
    outlined consume of Path.Storage(v14, v16, v22, v23, v17);
    v18 = v24;
    v7 = a3;
    v12 = a2;
LABEL_12:
    swift_release();
    goto LABEL_13;
  }
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = 6;
  v18 = v14;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Path.PathBox();
    v18 = swift_allocObject();
    *(_OWORD *)(v18 + 24) = 0u;
    result = (_QWORD *)(v18 + 24);
    *(_OWORD *)(v18 + 104) = 0u;
    *(_OWORD *)(v18 + 88) = 0u;
    *(_OWORD *)(v18 + 72) = 0u;
    *(_OWORD *)(v18 + 56) = 0u;
    *(_OWORD *)(v18 + 40) = 0u;
    v20 = *(unsigned __int8 *)(v14 + 16);
    *(_BYTE *)(v18 + 16) = v20;
    if (v20)
    {
      if (v20 == 1)
      {
        swift_retain();
        *(_QWORD *)(v18 + 24) = RBPathRetain();
        *(_QWORD *)(v18 + 32) = v21;
        swift_release();
      }
      else
      {
        RBPathStorageInit();
      }
    }
    else
    {
      v26 = *(void **)(v14 + 24);
      if (!v26)
      {
        __break(1u);
        return result;
      }
      *result = v26;
      v27 = v26;
    }
    goto LABEL_12;
  }
LABEL_13:
  v28 = *(_QWORD *)a1;
  v29 = *(_QWORD *)(a1 + 8);
  v30 = *(_QWORD *)(a1 + 16);
  v31 = *(_QWORD *)(a1 + 24);
  v32 = *(_BYTE *)(a1 + 32);
  swift_retain();
  outlined consume of Path.Storage(v28, v29, v30, v31, v32);
  *(_QWORD *)a1 = v18;
  v15[1] = 0;
  v15[2] = 0;
  *v15 = 0;
  *(_BYTE *)(a1 + 32) = 5;
  if (*(_BYTE *)(v18 + 16) != 2)
    Path.PathBox.prepareBuffer()();
  v33 = v12[1];
  v37[0] = *v12;
  v37[1] = v33;
  v37[2] = v12[2];
  *(double *)v36 = a4;
  *(double *)&v36[1] = a5;
  *(double *)&v36[2] = a6;
  *(double *)&v36[3] = a7;
  MEMORY[0x23B7C9088](v18 + 24, v7, v36, v37);
  return (_QWORD *)swift_release();
}

_QWORD *specialized Path.withMutableBuffer(do:)(uint64_t a1, _OWORD *a2, char a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  char v9;
  _OWORD *v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _QWORD *result;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 v36;
  __int128 v37;
  _QWORD v40[6];
  _OWORD v41[3];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;

  v9 = a3;
  v16 = a2;
  v47 = *MEMORY[0x24BDAC8D0];
  v18 = *(_QWORD *)a1;
  v19 = (_QWORD *)(a1 + 8);
  v20 = *(_QWORD *)(a1 + 8);
  v21 = *(unsigned __int8 *)(a1 + 32);
  if (v21 != 5)
  {
    v26 = *(_QWORD *)(a1 + 16);
    v27 = *(_QWORD *)(a1 + 24);
    type metadata accessor for Path.PathBox();
    v28 = swift_allocObject();
    *(_OWORD *)(v28 + 24) = 0u;
    *(_OWORD *)(v28 + 104) = 0u;
    *(_OWORD *)(v28 + 88) = 0u;
    *(_OWORD *)(v28 + 72) = 0u;
    *(_OWORD *)(v28 + 56) = 0u;
    *(_OWORD *)(v28 + 40) = 0u;
    *(_BYTE *)(v28 + 16) = 2;
    RBPathStorageInit();
    v29 = *(unsigned __int8 *)(v28 + 16);
    swift_retain();
    if (v29 != 2)
      Path.PathBox.prepareBuffer()();
    v42 = v18;
    v43 = v20;
    v44 = v26;
    v45 = v27;
    v46 = v21;
    outlined copy of Path.Storage(v18, v20, v26, v27, v21);
    Path.append(to:)();
    outlined consume of Path.Storage(v18, v20, v26, v27, v21);
    v22 = v28;
    v9 = a3;
    v16 = a2;
LABEL_12:
    swift_release();
    goto LABEL_13;
  }
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = 6;
  v22 = v18;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Path.PathBox();
    v22 = swift_allocObject();
    *(_OWORD *)(v22 + 24) = 0u;
    result = (_QWORD *)(v22 + 24);
    *(_OWORD *)(v22 + 104) = 0u;
    *(_OWORD *)(v22 + 88) = 0u;
    *(_OWORD *)(v22 + 72) = 0u;
    *(_OWORD *)(v22 + 56) = 0u;
    *(_OWORD *)(v22 + 40) = 0u;
    v24 = *(unsigned __int8 *)(v18 + 16);
    *(_BYTE *)(v22 + 16) = v24;
    if (v24)
    {
      if (v24 == 1)
      {
        swift_retain();
        *(_QWORD *)(v22 + 24) = RBPathRetain();
        *(_QWORD *)(v22 + 32) = v25;
        swift_release();
      }
      else
      {
        RBPathStorageInit();
      }
    }
    else
    {
      v30 = *(void **)(v18 + 24);
      if (!v30)
      {
        __break(1u);
        return result;
      }
      *result = v30;
      v31 = v30;
    }
    goto LABEL_12;
  }
LABEL_13:
  v32 = *(_QWORD *)a1;
  v33 = *(_QWORD *)(a1 + 8);
  v34 = *(_QWORD *)(a1 + 16);
  v35 = *(_QWORD *)(a1 + 24);
  v36 = *(_BYTE *)(a1 + 32);
  swift_retain();
  outlined consume of Path.Storage(v32, v33, v34, v35, v36);
  *(_QWORD *)a1 = v22;
  v19[1] = 0;
  v19[2] = 0;
  *v19 = 0;
  *(_BYTE *)(a1 + 32) = 5;
  if (*(_BYTE *)(v22 + 16) != 2)
    Path.PathBox.prepareBuffer()();
  v37 = v16[1];
  v41[0] = *v16;
  v41[1] = v37;
  v41[2] = v16[2];
  *(double *)v40 = a4;
  *(double *)&v40[1] = a5;
  *(double *)&v40[2] = a6;
  *(double *)&v40[3] = a7;
  *(double *)&v40[4] = a8;
  *(double *)&v40[5] = a9;
  MEMORY[0x23B7C9088](v22 + 24, v9 & 1 | 8u, v40, v41);
  return (_QWORD *)swift_release();
}

_QWORD *specialized Path.withMutableBuffer(do:)(uint64_t a1, _OWORD *a2, double a3, double a4, double a5, double a6, double a7)
{
  _OWORD *v7;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _QWORD *result;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  __int128 v33;
  _OWORD v35[3];
  _QWORD v36[9];
  char v37;
  uint64_t v38;

  v7 = a2;
  v38 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)a1;
  v15 = (_QWORD *)(a1 + 8);
  v16 = *(_QWORD *)(a1 + 8);
  v17 = *(unsigned __int8 *)(a1 + 32);
  if (v17 != 5)
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_QWORD *)(a1 + 24);
    type metadata accessor for Path.PathBox();
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 24) = 0u;
    *(_OWORD *)(v24 + 104) = 0u;
    *(_OWORD *)(v24 + 88) = 0u;
    *(_OWORD *)(v24 + 72) = 0u;
    *(_OWORD *)(v24 + 56) = 0u;
    *(_OWORD *)(v24 + 40) = 0u;
    *(_BYTE *)(v24 + 16) = 2;
    RBPathStorageInit();
    v25 = *(unsigned __int8 *)(v24 + 16);
    swift_retain();
    if (v25 != 2)
      Path.PathBox.prepareBuffer()();
    v36[5] = v14;
    v36[6] = v16;
    v36[7] = v22;
    v36[8] = v23;
    v37 = v17;
    outlined copy of Path.Storage(v14, v16, v22, v23, v17);
    Path.append(to:)();
    outlined consume of Path.Storage(v14, v16, v22, v23, v17);
    v18 = v24;
    v7 = a2;
LABEL_12:
    swift_release();
    goto LABEL_13;
  }
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = 6;
  v18 = v14;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Path.PathBox();
    v18 = swift_allocObject();
    *(_OWORD *)(v18 + 24) = 0u;
    result = (_QWORD *)(v18 + 24);
    *(_OWORD *)(v18 + 104) = 0u;
    *(_OWORD *)(v18 + 88) = 0u;
    *(_OWORD *)(v18 + 72) = 0u;
    *(_OWORD *)(v18 + 56) = 0u;
    *(_OWORD *)(v18 + 40) = 0u;
    v20 = *(unsigned __int8 *)(v14 + 16);
    *(_BYTE *)(v18 + 16) = v20;
    if (v20)
    {
      if (v20 == 1)
      {
        swift_retain();
        *(_QWORD *)(v18 + 24) = RBPathRetain();
        *(_QWORD *)(v18 + 32) = v21;
        swift_release();
      }
      else
      {
        RBPathStorageInit();
      }
    }
    else
    {
      v26 = *(void **)(v14 + 24);
      if (!v26)
      {
        __break(1u);
        return result;
      }
      *result = v26;
      v27 = v26;
    }
    goto LABEL_12;
  }
LABEL_13:
  v28 = *(_QWORD *)a1;
  v29 = *(_QWORD *)(a1 + 8);
  v30 = *(_QWORD *)(a1 + 16);
  v31 = *(_QWORD *)(a1 + 24);
  v32 = *(_BYTE *)(a1 + 32);
  swift_retain();
  outlined consume of Path.Storage(v28, v29, v30, v31, v32);
  *(_QWORD *)a1 = v18;
  v15[1] = 0;
  v15[2] = 0;
  *v15 = 0;
  *(_BYTE *)(a1 + 32) = 5;
  if (*(_BYTE *)(v18 + 16) != 2)
    Path.PathBox.prepareBuffer()();
  *(double *)v36 = a3;
  *(double *)&v36[1] = a4;
  *(double *)&v36[2] = a5;
  *(double *)&v36[3] = a6;
  *(double *)&v36[4] = a7;
  v33 = v7[1];
  v35[0] = *v7;
  v35[1] = v33;
  v35[2] = v7[2];
  MEMORY[0x23B7C9088](v18 + 24, 12, v36, v35);
  return (_QWORD *)swift_release();
}

{
  _OWORD *v7;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _QWORD *result;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  __int128 v33;
  _OWORD v35[3];
  _QWORD v36[9];
  char v37;
  uint64_t v38;

  v7 = a2;
  v38 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)a1;
  v15 = (_QWORD *)(a1 + 8);
  v16 = *(_QWORD *)(a1 + 8);
  v17 = *(unsigned __int8 *)(a1 + 32);
  if (v17 != 5)
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_QWORD *)(a1 + 24);
    type metadata accessor for Path.PathBox();
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 24) = 0u;
    *(_OWORD *)(v24 + 104) = 0u;
    *(_OWORD *)(v24 + 88) = 0u;
    *(_OWORD *)(v24 + 72) = 0u;
    *(_OWORD *)(v24 + 56) = 0u;
    *(_OWORD *)(v24 + 40) = 0u;
    *(_BYTE *)(v24 + 16) = 2;
    RBPathStorageInit();
    v25 = *(unsigned __int8 *)(v24 + 16);
    swift_retain();
    if (v25 != 2)
      Path.PathBox.prepareBuffer()();
    v36[5] = v14;
    v36[6] = v16;
    v36[7] = v22;
    v36[8] = v23;
    v37 = v17;
    outlined copy of Path.Storage(v14, v16, v22, v23, v17);
    Path.append(to:)();
    outlined consume of Path.Storage(v14, v16, v22, v23, v17);
    v18 = v24;
    v7 = a2;
LABEL_12:
    swift_release();
    goto LABEL_13;
  }
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = 6;
  v18 = v14;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Path.PathBox();
    v18 = swift_allocObject();
    *(_OWORD *)(v18 + 24) = 0u;
    result = (_QWORD *)(v18 + 24);
    *(_OWORD *)(v18 + 104) = 0u;
    *(_OWORD *)(v18 + 88) = 0u;
    *(_OWORD *)(v18 + 72) = 0u;
    *(_OWORD *)(v18 + 56) = 0u;
    *(_OWORD *)(v18 + 40) = 0u;
    v20 = *(unsigned __int8 *)(v14 + 16);
    *(_BYTE *)(v18 + 16) = v20;
    if (v20)
    {
      if (v20 == 1)
      {
        swift_retain();
        *(_QWORD *)(v18 + 24) = RBPathRetain();
        *(_QWORD *)(v18 + 32) = v21;
        swift_release();
      }
      else
      {
        RBPathStorageInit();
      }
    }
    else
    {
      v26 = *(void **)(v14 + 24);
      if (!v26)
      {
        __break(1u);
        return result;
      }
      *result = v26;
      v27 = v26;
    }
    goto LABEL_12;
  }
LABEL_13:
  v28 = *(_QWORD *)a1;
  v29 = *(_QWORD *)(a1 + 8);
  v30 = *(_QWORD *)(a1 + 16);
  v31 = *(_QWORD *)(a1 + 24);
  v32 = *(_BYTE *)(a1 + 32);
  swift_retain();
  outlined consume of Path.Storage(v28, v29, v30, v31, v32);
  *(_QWORD *)a1 = v18;
  v15[1] = 0;
  v15[2] = 0;
  *v15 = 0;
  *(_BYTE *)(a1 + 32) = 5;
  if (*(_BYTE *)(v18 + 16) != 2)
    Path.PathBox.prepareBuffer()();
  *(double *)v36 = a3;
  *(double *)&v36[1] = a4;
  *(double *)&v36[2] = a5;
  *(double *)&v36[3] = a6;
  *(double *)&v36[4] = a7;
  v33 = v7[1];
  v35[0] = *v7;
  v35[1] = v33;
  v35[2] = v7[2];
  MEMORY[0x23B7C9088](v18 + 24, 15, v36, v35);
  return (_QWORD *)swift_release();
}

_QWORD *specialized Path.withMutableBuffer(do:)(uint64_t a1, _OWORD *a2, char a3, double a4, double a5, double a6, double a7, double a8)
{
  char v8;
  _OWORD *v9;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _QWORD *result;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v39[3];
  _QWORD v40[9];
  char v41;
  uint64_t v42;

  v8 = a3;
  v9 = a2;
  v42 = *MEMORY[0x24BDAC8D0];
  v16 = *(_QWORD *)a1;
  v17 = (_QWORD *)(a1 + 8);
  v18 = *(_QWORD *)(a1 + 8);
  v19 = *(unsigned __int8 *)(a1 + 32);
  if (v19 != 5)
  {
    v24 = *(_QWORD *)(a1 + 16);
    v25 = *(_QWORD *)(a1 + 24);
    type metadata accessor for Path.PathBox();
    v26 = swift_allocObject();
    *(_OWORD *)(v26 + 24) = 0u;
    *(_OWORD *)(v26 + 104) = 0u;
    *(_OWORD *)(v26 + 88) = 0u;
    *(_OWORD *)(v26 + 72) = 0u;
    *(_OWORD *)(v26 + 56) = 0u;
    *(_OWORD *)(v26 + 40) = 0u;
    *(_BYTE *)(v26 + 16) = 2;
    RBPathStorageInit();
    v27 = *(unsigned __int8 *)(v26 + 16);
    swift_retain();
    if (v27 != 2)
      Path.PathBox.prepareBuffer()();
    v40[5] = v16;
    v40[6] = v18;
    v40[7] = v24;
    v40[8] = v25;
    v41 = v19;
    outlined copy of Path.Storage(v16, v18, v24, v25, v19);
    Path.append(to:)();
    outlined consume of Path.Storage(v16, v18, v24, v25, v19);
    v20 = v26;
    v8 = a3;
    v9 = a2;
LABEL_12:
    swift_release();
    goto LABEL_13;
  }
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = 6;
  v20 = v16;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Path.PathBox();
    v20 = swift_allocObject();
    *(_OWORD *)(v20 + 24) = 0u;
    result = (_QWORD *)(v20 + 24);
    *(_OWORD *)(v20 + 104) = 0u;
    *(_OWORD *)(v20 + 88) = 0u;
    *(_OWORD *)(v20 + 72) = 0u;
    *(_OWORD *)(v20 + 56) = 0u;
    *(_OWORD *)(v20 + 40) = 0u;
    v22 = *(unsigned __int8 *)(v16 + 16);
    *(_BYTE *)(v20 + 16) = v22;
    if (v22)
    {
      if (v22 == 1)
      {
        swift_retain();
        *(_QWORD *)(v20 + 24) = RBPathRetain();
        *(_QWORD *)(v20 + 32) = v23;
        swift_release();
      }
      else
      {
        RBPathStorageInit();
      }
    }
    else
    {
      v28 = *(void **)(v16 + 24);
      if (!v28)
      {
        __break(1u);
        return result;
      }
      *result = v28;
      v29 = v28;
    }
    goto LABEL_12;
  }
LABEL_13:
  v30 = *(_QWORD *)a1;
  v31 = *(_QWORD *)(a1 + 8);
  v32 = *(_QWORD *)(a1 + 16);
  v33 = *(_QWORD *)(a1 + 24);
  v34 = *(_BYTE *)(a1 + 32);
  swift_retain();
  outlined consume of Path.Storage(v30, v31, v32, v33, v34);
  *(_QWORD *)a1 = v20;
  v17[1] = 0;
  v17[2] = 0;
  *v17 = 0;
  *(_BYTE *)(a1 + 32) = 5;
  if (*(_BYTE *)(v20 + 16) != 2)
    Path.PathBox.prepareBuffer()();
  *(double *)v40 = a4;
  *(double *)&v40[1] = a5;
  *(double *)&v40[2] = a6;
  *(double *)&v40[3] = a7;
  *(double *)&v40[4] = a8;
  v35 = v9[1];
  v39[0] = *v9;
  v39[1] = v35;
  if ((v8 & 1) != 0)
    v36 = 13;
  else
    v36 = 14;
  v39[2] = v9[2];
  MEMORY[0x23B7C9088](v20 + 24, v36, v40, v39);
  return (_QWORD *)swift_release();
}

_QWORD *Path.withMutableBuffer(do:)(void (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  void *v21;
  id v22;

  v2 = v1;
  v3 = a1;
  v4 = *(_QWORD *)v1;
  v5 = (_QWORD *)(v1 + 8);
  v6 = *(_QWORD *)(v1 + 8);
  v7 = *(unsigned __int8 *)(v1 + 32);
  if (v7 != 5)
  {
    v12 = *(_QWORD *)(v1 + 16);
    v13 = *(_QWORD *)(v1 + 24);
    type metadata accessor for Path.PathBox();
    v14 = swift_allocObject();
    *(_OWORD *)(v14 + 24) = 0u;
    *(_OWORD *)(v14 + 104) = 0u;
    *(_OWORD *)(v14 + 88) = 0u;
    *(_OWORD *)(v14 + 72) = 0u;
    *(_OWORD *)(v14 + 56) = 0u;
    *(_OWORD *)(v14 + 40) = 0u;
    *(_BYTE *)(v14 + 16) = 2;
    RBPathStorageInit();
    v15 = *(unsigned __int8 *)(v14 + 16);
    swift_retain();
    if (v15 != 2)
      Path.PathBox.prepareBuffer()();
    outlined copy of Path.Storage(v4, v6, v12, v13, v7);
    Path.append(to:)();
    outlined consume of Path.Storage(v4, v6, v12, v13, v7);
    v8 = v14;
    v3 = a1;
LABEL_9:
    swift_release();
    goto LABEL_10;
  }
  *(_OWORD *)v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_BYTE *)(v1 + 32) = 6;
  v8 = v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Path.PathBox();
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 24) = 0u;
    result = (_QWORD *)(v8 + 24);
    *(_OWORD *)(v8 + 104) = 0u;
    *(_OWORD *)(v8 + 88) = 0u;
    *(_OWORD *)(v8 + 72) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    *(_OWORD *)(v8 + 40) = 0u;
    v10 = *(unsigned __int8 *)(v4 + 16);
    *(_BYTE *)(v8 + 16) = v10;
    if (v10)
    {
      if (v10 == 1)
      {
        swift_retain();
        *(_QWORD *)(v8 + 24) = RBPathRetain();
        *(_QWORD *)(v8 + 32) = v11;
        swift_release();
      }
      else
      {
        RBPathStorageInit();
      }
    }
    else
    {
      v21 = *(void **)(v4 + 24);
      if (!v21)
      {
        __break(1u);
        return result;
      }
      *result = v21;
      v22 = v21;
    }
    goto LABEL_9;
  }
LABEL_10:
  v16 = *(_QWORD *)v2;
  v17 = *(_QWORD *)(v2 + 8);
  v18 = *(_QWORD *)(v2 + 16);
  v19 = *(_QWORD *)(v2 + 24);
  v20 = *(_BYTE *)(v2 + 32);
  swift_retain();
  outlined consume of Path.Storage(v16, v17, v18, v19, v20);
  *(_QWORD *)v2 = v8;
  v5[1] = 0;
  v5[2] = 0;
  *v5 = 0;
  *(_BYTE *)(v2 + 32) = 5;
  if (*(_BYTE *)(v8 + 16) != 2)
    Path.PathBox.prepareBuffer()();
  v3(v8 + 24);
  return (_QWORD *)swift_release();
}

Swift::Bool __swiftcall Path.contains(_:eoFill:)(CGPoint _, Swift::Bool eoFill)
{
  Swift::Bool result;

  __asm { BR              X13 }
  return result;
}

BOOL sub_234F0378C@<W0>(CGFloat a1@<X8>)
{
  CGFloat v1;
  CGFloat v2;
  CGFloat v3;
  CGFloat v4;
  CGFloat v5;
  CGPoint v7;
  CGRect v8;

  v8.origin.x = v3;
  v8.origin.y = a1;
  v8.size.width = v1;
  v8.size.height = v2;
  v7.x = v5;
  v7.y = v4;
  return CGRectContainsPoint(v8, v7);
}

void sub_234F039C0()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x234F03A10);
}

BOOL ellipseContains(in:contains:)(double a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5, double a6)
{
  double v11;
  double Width;
  double Height;
  double v14;
  double v15;
  double v16;
  CGFloat v17;
  CGRect v19;
  CGRect v20;
  CGRect v21;
  CGRect v22;
  CGRect v23;
  CGRect v24;

  v11 = a1;
  Width = CGRectGetWidth(*(CGRect *)&a1);
  v19.origin.x = v11;
  v19.origin.y = a2;
  v19.size.width = a3;
  v19.size.height = a4;
  if (Width != CGRectGetHeight(v19))
  {
    v20.origin.x = v11;
    v20.origin.y = a2;
    v20.size.width = a3;
    v20.size.height = a4;
    Height = CGRectGetHeight(v20);
    v21.origin.x = v11;
    v21.origin.y = a2;
    v21.size.width = a3;
    v21.size.height = a4;
    v14 = Height / CGRectGetWidth(v21);
    v11 = v14 * v11;
    a3 = v14 * a3;
    a5 = v14 * a5;
  }
  v22.origin.x = v11;
  v22.origin.y = a2;
  v22.size.width = a3;
  v22.size.height = a4;
  v15 = v11 + CGRectGetWidth(v22) * 0.5;
  v23.origin.x = v11;
  v23.origin.y = a2;
  v23.size.width = a3;
  v23.size.height = a4;
  v16 = a6 - (CGRectGetHeight(v23) * 0.5 + a2);
  v24.origin.x = v11;
  v24.origin.y = a2;
  v24.size.width = a3;
  v24.size.height = a4;
  v17 = CGRectGetWidth(v24);
  return (a5 - v15) * (a5 - v15) + v16 * v16 < v17 * 0.5 * (v17 * 0.5);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Path.Element(__int128 *a1, __int128 *a2)
{
  char v3;
  __int128 v5[3];
  _BYTE v6[56];

  outlined init with take of GraphicsContext.GradientGeometry(a1, (uint64_t)v5);
  outlined init with take of GraphicsContext.GradientGeometry(a2, (uint64_t)v6);
  specialized static Path.Element.== infix(_:_:)(v5);
  return v3 & 1;
}

uint64_t Path.forEach(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  Path.retainRBPath()();
  swift_retain();
  RBPathApply();
  swift_release();
  RBPathRelease();
  LOBYTE(a2) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((a2 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in Path.forEach(_:)(void (**a1)(__int128 *), uint64_t a2)
{
  void (*v2)(__int128 *);
  char v3;
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char v13;

  switch(*(_DWORD *)a2)
  {
    case 0:
      v2 = *a1;
      v10 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v11 = 0u;
      v12 = 0u;
      v13 = 0;
      goto LABEL_8;
    case 1:
      v2 = *a1;
      v10 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v11 = 0u;
      v12 = 0u;
      v3 = 1;
      goto LABEL_7;
    case 2:
      v2 = *a1;
      v4 = *(__int128 **)(a2 + 8);
      v5 = *v4;
      v10 = v4[1];
      v11 = v5;
      v12 = 0uLL;
      v3 = 2;
      goto LABEL_7;
    case 3:
      v2 = *a1;
      v6 = *(__int128 **)(a2 + 8);
      v7 = v6[1];
      v8 = *v6;
      v10 = v6[2];
      v11 = v8;
      v12 = v7;
      v3 = 3;
      goto LABEL_7;
    case 4:
      v2 = *a1;
      v10 = 0u;
      v11 = 0u;
      v12 = 0u;
      v3 = 4;
LABEL_7:
      v13 = v3;
LABEL_8:
      swift_retain();
      v2(&v10);
      swift_release();
      break;
    default:
      return 1;
  }
  return 1;
}

uint64_t @objc closure #1 in closure #1 in closure #1 in Path.forEach(_:)(void (**a1)(__int128 *), uint64_t a2)
{
  return closure #1 in closure #1 in closure #1 in Path.forEach(_:)(a1, a2) & 1;
}

uint64_t closure #1 in Path.strokedPath(_:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  _QWORD v8[4];

  v8[3] = *MEMORY[0x24BDAC8D0];
  v4 = a2[1];
  v3 = a2[2];
  v7[0] = *a2;
  v7[1] = v3;
  v7[2] = a2[4];
  v8[0] = v4;
  v5 = a2[3];
  v8[1] = *(_QWORD *)(v5 + 16);
  v8[2] = v5 + 32;
  MEMORY[0x23B7C9088](a1, 19, v7, v8);
  Path.append(to:)();
  return MEMORY[0x23B7C9088](a1, 16, 0, 0);
}

uint64_t Path.mix(with:by:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  Path.retainRBPath()();
  Path.retainRBPath()();
  v2 = RBPathCopyInterpolatedPath();
  v4 = v3;
  if (RBPathIsNull(v2, v3))
  {
    v5 = 0;
    v6 = -1;
  }
  else
  {
    type metadata accessor for Path.PathBox();
    v5 = swift_allocObject();
    *(_OWORD *)(v5 + 24) = 0u;
    *(_OWORD *)(v5 + 104) = 0u;
    *(_OWORD *)(v5 + 88) = 0u;
    *(_OWORD *)(v5 + 72) = 0u;
    *(_OWORD *)(v5 + 56) = 0u;
    *(_OWORD *)(v5 + 40) = 0u;
    *(_BYTE *)(v5 + 16) = 1;
    v6 = 5;
    *(_QWORD *)(v5 + 24) = v2;
    *(_QWORD *)(v5 + 32) = v4;
  }
  RBPathRelease();
  result = RBPathRelease();
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = v6;
  return result;
}

void __swiftcall Path.roundedRect()(SwiftUI::FixedRoundedRect_optional *__return_ptr retstr)
{
  uint64_t v1;
  CGSize v3;
  CGSize *v4;
  SwiftUI::RoundedCornerStyle v5;
  CGSize v6;
  CGSize v7;
  _BYTE v8[40];
  CGPoint v9;
  CGSize v10;
  char v11;

  outlined init with take of Path.Storage(v1, (uint64_t)v8);
  outlined init with take of Path.Storage((uint64_t)v8, (uint64_t)&v9);
  switch(v11)
  {
    case 2:
      v4 = *(CGSize **)&v9.x;
      v5 = *(_BYTE *)(*(_QWORD *)&v9.x + 64);
      v6 = *(CGSize *)(*(_QWORD *)&v9.x + 32);
      retstr->value.rect.origin = *(CGPoint *)(*(_QWORD *)&v9.x + 16);
      retstr->value.rect.size = v6;
      retstr->value.cornerSize = v4[3];
      retstr->value.style = v5;
      return;
    case 1:
      v7 = v10;
      if (v10.width == v10.height)
      {
        retstr->value.rect.origin = v9;
        retstr->value.rect.size = v7;
        retstr->value.cornerSize.width = v7.width * 0.5;
        retstr->value.cornerSize.height = v7.width * 0.5;
        retstr->value.style = SwiftUI_RoundedCornerStyle_circular;
        return;
      }
      break;
    case 0:
      v3 = v10;
      retstr->value.rect.origin = v9;
      retstr->value.rect.size = v3;
      retstr->value.cornerSize.width = 0.0;
      retstr->value.cornerSize.height = 0.0;
      retstr->value.style = SwiftUI_RoundedCornerStyle_circular;
      return;
  }
  retstr->value.rect.size = 0u;
  retstr->value.cornerSize = 0u;
  retstr->value.rect.origin = 0u;
  retstr->value.style = SwiftUI_RoundedCornerStyle_unknownDefault;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Path.Storage(uint64_t a1, uint64_t a2)
{
  char v3;
  _BYTE v5[40];
  _BYTE v6[40];

  outlined init with take of Path.Storage(a1, (uint64_t)v5);
  outlined init with take of Path.Storage(a2, (uint64_t)v6);
  specialized static Path.Storage.== infix(_:_:)((uint64_t)v5);
  return v3 & 1;
}

uint64_t protocol witness for LosslessStringConvertible.init(_:) in conformance Path@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v5[40];

  specialized Path.init(_:)(a1, a2, (uint64_t)v5);
  return outlined init with take of Path?((uint64_t)v5, a3);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Path()
{
  const CGPath *v0;
  const CGPath *v1;
  void *v2;
  uint64_t v3;

  Path.cgPath.getter();
  v1 = v0;
  v2 = (void *)_CGPathCopyDescription(v0, 0.0);

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v3;
}

double one-time initialization function for bufferCallbacks()
{
  uint64_t v0;
  double result;

  v0 = swift_slowAlloc();
  result = 0.0;
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_QWORD *)(v0 + 80) = 0;
  *(_QWORD *)(v0 + 8) = @objc closure #1 in closure #1 in variable initialization expression of static Path.PathBox.bufferCallbacks;
  *(_QWORD *)(v0 + 16) = @objc closure #2 in closure #1 in variable initialization expression of static Path.PathBox.bufferCallbacks;
  *(_QWORD *)(v0 + 24) = @objc closure #3 in closure #1 in variable initialization expression of static Path.PathBox.bufferCallbacks;
  *(_QWORD *)(v0 + 32) = @objc closure #4 in closure #1 in variable initialization expression of static Path.PathBox.bufferCallbacks;
  *(_QWORD *)(v0 + 40) = @objc closure #5 in closure #1 in variable initialization expression of static Path.PathBox.bufferCallbacks;
  *(_QWORD *)(v0 + 48) = @objc closure #6 in closure #1 in variable initialization expression of static Path.PathBox.bufferCallbacks;
  *(_QWORD *)(v0 + 56) = @objc closure #7 in closure #1 in variable initialization expression of static Path.PathBox.bufferCallbacks;
  *(_QWORD *)(v0 + 64) = @objc closure #8 in closure #1 in variable initialization expression of static Path.PathBox.bufferCallbacks;
  static Path.PathBox.bufferCallbacks = v0;
  return result;
}

uint64_t @objc closure #3 in closure #1 in variable initialization expression of static Path.PathBox.bufferCallbacks(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + 24;
  swift_retain();
  v6 = MEMORY[0x23B7C90A0](v5, a2, a3);
  swift_release();
  return v6;
}

uint64_t @objc closure #4 in closure #1 in variable initialization expression of static Path.PathBox.bufferCallbacks(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1 + 24;
  v3 = a2 + 24;
  swift_retain();
  swift_retain();
  v4 = MEMORY[0x23B7C90B8](v2, v3);
  swift_release();
  swift_release();
  return v4;
}

uint64_t @objc closure #5 in closure #1 in variable initialization expression of static Path.PathBox.bufferCallbacks(uint64_t a1)
{
  return @objc closure #5 in closure #1 in variable initialization expression of static Path.PathBox.bufferCallbacks(a1, (uint64_t (*)(uint64_t))MEMORY[0x24BE7F2F0]);
}

uint64_t @objc closure #6 in closure #1 in variable initialization expression of static Path.PathBox.bufferCallbacks(uint64_t a1)
{
  return @objc closure #5 in closure #1 in variable initialization expression of static Path.PathBox.bufferCallbacks(a1, (uint64_t (*)(uint64_t))MEMORY[0x24BE7F2F8]);
}

uint64_t @objc closure #5 in closure #1 in variable initialization expression of static Path.PathBox.bufferCallbacks(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1 + 24;
  swift_retain();
  v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t @objc closure #7 in closure #1 in variable initialization expression of static Path.PathBox.bufferCallbacks()
{
  uint64_t BezierOrder;

  swift_retain();
  BezierOrder = RBPathStorageGetBezierOrder();
  swift_release();
  return BezierOrder;
}

double @objc closure #8 in closure #1 in variable initialization expression of static Path.PathBox.bufferCallbacks(uint64_t a1)
{
  uint64_t v1;
  double v2;

  v1 = a1 + 24;
  swift_retain();
  v2 = MEMORY[0x23B7C90D0](v1);
  swift_release();
  return v2;
}

__n128 Path.path(in:)@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v4;
  _BYTE v5[40];

  outlined init with take of Path.Storage(v1, (uint64_t)v5);
  outlined retain of Path.Storage((uint64_t)v5, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
  result = *(__n128 *)v1;
  v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(v1 + 32);
  return result;
}

uint64_t protocol witness for Shape.path(in:) in conformance Path@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t result;

  v3 = *(_QWORD *)v1;
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = *(_BYTE *)(v1 + 32);
  result = outlined copy of Path.Storage(v3, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return result;
}

void Path.encode(to:)()
{
  uint64_t v0;
  _BYTE v1[96];
  _BYTE v2[40];

  outlined init with take of Path.Storage(v0, (uint64_t)v1);
  outlined init with take of Path.Storage((uint64_t)v1, (uint64_t)v2);
  __asm { BR              X10 }
}

uint64_t sub_234F0444C()
{
  double v1;
  double v2;
  double v3;
  double v4;

  ProtobufEncoder.encodeVarint(_:)(0xAuLL);
  return specialized ProtobufEncoder.encodeMessage<A>(_:)(v1, v2, v3, v4);
}

void sub_234F04548()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

double Path.init(from:)@<D0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  char v7;

  specialized Path.init(from:)(a1, (uint64_t)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_BYTE *)(a2 + 32) = v7;
  }
  return result;
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance Path()
{
  Path.encode(to:)();
}

double protocol witness for ProtobufDecodableMessage.init(from:) in conformance Path@<D0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  char v7;

  specialized Path.init(from:)(a1, (uint64_t)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_BYTE *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t StrokedPath.init(path:style:)(uint64_t a1, uint64_t a2)
{
  outlined release of StrokeStyle(a2);
  return outlined retain of Path.Storage(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
}

Swift::Void __swiftcall Path.addQuadCurve(to:control:)(CGPoint to, CGPoint control)
{
  uint64_t v2;

  specialized Path.withMutableBuffer(do:)(v2, control.x, control.y, to.x, to.y);
}

Swift::Void __swiftcall Path.addCurve(to:control1:control2:)(CGPoint to, CGPoint control1, CGPoint control2)
{
  uint64_t v3;

  specialized Path.withMutableBuffer(do:)(v3, control1.x, control1.y, control2.x, control2.y, to.x, to.y);
}

Swift::Void __swiftcall Path.closeSubpath()()
{
  uint64_t v0;

  specialized Path.withMutableBuffer(do:)(v0);
}

Swift::Void __swiftcall Path.addRect(_:transform:)(__C::CGRect _, CGAffineTransform *transform)
{
  Path.addEllipse(in:transform:)(&transform->a, 0, 5u, _.origin.x, _.origin.y, _.size.width, _.size.height);
}

void Path.addEllipse(in:transform:)(double *a1, __int8 a2, unsigned __int8 a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  int8x16_t *v7;
  double v15;
  double v16;
  CGFloat v17;
  CGFloat v18;
  int8x16_t v19;
  double v20;
  double v21;
  CGAffineTransform v22;
  CGRect v23;

  v15 = a1[2];
  v20 = a1[1];
  v21 = *a1;
  v16 = a1[3];
  v17 = a1[4];
  v18 = a1[5];
  if (!CGRectIsNull(*(CGRect *)&a4))
  {
    if (v7[2].i8[0] == 6
      && (v19 = vorrq_s8(*v7, v7[1]),
          !*(_QWORD *)&vorr_s8(*(int8x8_t *)v19.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL)))
      && (v20 == 0.0 && v15 == 0.0 || v21 == 0.0 && v16 == 0.0))
    {
      v22.a = v21;
      v22.b = v20;
      v22.c = v15;
      v22.d = v16;
      v22.tx = v17;
      v22.ty = v18;
      v23.origin.x = a4;
      v23.origin.y = a5;
      v23.size.width = a6;
      v23.size.height = a7;
      *(CGRect *)v7->i8 = CGRectApplyAffineTransform(v23, &v22);
      v7[2].i8[0] = a2;
    }
    else
    {
      specialized Path.withMutableBuffer(do:)((uint64_t)v7, a1, a3, a4, a5, a6, a7);
    }
  }
}

Swift::Void __swiftcall Path.addRoundedRect(in:cornerSize:style:transform:)(__C::CGRect in, CGSize cornerSize, SwiftUI::RoundedCornerStyle style, CGAffineTransform *transform)
{
  int8x16_t *v4;
  unint64_t v6;
  unint64_t v7;
  double height;
  double width;
  double y;
  double x;
  double c;
  double d;
  CGFloat tx;
  CGFloat ty;
  char v16;
  int8x16_t v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  uint64_t v23;
  int8x16_t v24;
  int8x16_t v25;
  CGSize v26;
  float64x2_t v27;
  int8x16_t v28;
  uint64_t v29;
  CGFloat v30;
  double b;
  double a;
  int8x16_t size;
  CGSize v34;
  CGAffineTransform v35;
  CGRect v36;
  CGRect v37;

  size = (int8x16_t)__PAIR128__(v7, *(unint64_t *)&cornerSize.height);
  v34 = (CGSize)__PAIR128__(v6, *(unint64_t *)&cornerSize.width);
  height = in.size.height;
  width = in.size.width;
  y = in.origin.y;
  x = in.origin.x;
  c = transform->c;
  b = transform->b;
  a = transform->a;
  d = transform->d;
  tx = transform->tx;
  ty = transform->ty;
  v16 = *(_BYTE *)style;
  if (!CGRectIsNull((CGRect)in))
  {
    v30 = ty;
    if (v4[2].i8[0] == 6
      && (v17 = vorrq_s8(*v4, v4[1]),
          !*(_QWORD *)&vorr_s8(*(int8x8_t *)v17.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)))
      && (b == 0.0 && c == 0.0 || a == 0.0 && d == 0.0))
    {
      v35.a = a;
      v35.b = b;
      v35.c = c;
      v35.d = d;
      v35.tx = tx;
      v35.ty = ty;
      v36.origin.x = x;
      v36.origin.y = y;
      v36.size.width = width;
      v36.size.height = height;
      v37 = CGRectApplyAffineTransform(v36, &v35);
      v18 = v37.origin.x;
      v19 = v37.origin.y;
      v20 = v37.size.width;
      v21 = v37.size.height;
      v22 = v34.width;
      if ((~*(_QWORD *)&v34.width & 0x7FF0000000000000) != 0)
      {
        v23 = size.i64[0];
        if ((~size.i64[0] & 0x7FF0000000000000) != 0)
        {
          v35.a = a;
          v35.b = b;
          v35.c = c;
          v35.d = d;
          v35.tx = tx;
          v35.ty = v30;
          v26 = CGSizeApplyAffineTransform(*(CGSize *)&v22, &v35);
          *(CGFloat *)v25.i64 = v26.height;
          *(CGFloat *)v24.i64 = v26.width;
          v27.f64[0] = NAN;
          v27.f64[1] = NAN;
          v28 = (int8x16_t)vnegq_f64(v27);
          size.i64[0] = vbslq_s8(v28, v25, size).u64[0];
          *(_QWORD *)&v34.width = vbslq_s8(v28, v24, (int8x16_t)v34).u64[0];
        }
      }
      v29 = swift_allocObject();
      *(CGFloat *)(v29 + 16) = v18;
      *(CGFloat *)(v29 + 24) = v19;
      *(CGFloat *)(v29 + 32) = v20;
      *(CGFloat *)(v29 + 40) = v21;
      *(CGFloat *)(v29 + 48) = v34.width;
      *(_QWORD *)(v29 + 56) = size.i64[0];
      *(_BYTE *)(v29 + 64) = v16;
      v4->i64[0] = v29;
      v4[1].i64[0] = 0;
      v4[1].i64[1] = 0;
      v4->i64[1] = 0;
      v4[2].i8[0] = 2;
    }
    else
    {
      specialized Path.withMutableBuffer(do:)((uint64_t)v4, transform, v16, x, y, width, height, v34.width, *(double *)size.i64);
    }
  }
}

Swift::Void __swiftcall Path.addRects(_:transform:)(Swift::OpaquePointer _, CGAffineTransform *transform)
{
  int8x16_t *v2;
  uint64_t v3;
  double a;
  double b;
  double c;
  CGFloat ty;
  double v10;
  double v11;
  double v12;
  double v13;
  int8x16_t v14;
  _BOOL4 v15;
  BOOL v16;
  __int128 v18;
  CGAffineTransform v19;
  CGRect v20;
  CGRect v21;

  v3 = *((_QWORD *)_._rawValue + 2);
  if (v3)
  {
    if (v3 == 1)
    {
      a = transform->a;
      b = transform->b;
      c = transform->c;
      v18 = *(_OWORD *)&transform->d;
      ty = transform->ty;
      v11 = *((double *)_._rawValue + 4);
      v10 = *((double *)_._rawValue + 5);
      v13 = *((double *)_._rawValue + 6);
      v12 = *((double *)_._rawValue + 7);
      v20.origin.x = v11;
      v20.origin.y = v10;
      v20.size.width = v13;
      v20.size.height = v12;
      if (!CGRectIsNull(v20))
      {
        if (v2[2].i8[0] != 6)
          goto LABEL_17;
        v14 = vorrq_s8(*v2, v2[1]);
        if (vorr_s8(*(int8x8_t *)v14.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)))
          goto LABEL_17;
        v15 = a == 0.0;
        if (*(double *)&v18 != 0.0)
          v15 = 0;
        v16 = c == 0.0 && b == 0.0;
        if (!v16 && !v15)
        {
LABEL_17:
          specialized Path.withMutableBuffer(do:)((uint64_t)v2, transform, 5u, v11, v10, v13, v12);
        }
        else
        {
          v19.a = a;
          v19.b = b;
          v19.c = c;
          *(_OWORD *)&v19.d = v18;
          v19.ty = ty;
          v21.origin.x = v11;
          v21.origin.y = v10;
          v21.size.width = v13;
          v21.size.height = v12;
          *(CGRect *)v2->i8 = CGRectApplyAffineTransform(v21, &v19);
          v2[2].i8[0] = 0;
        }
      }
    }
    else
    {
      swift_bridgeObjectRetain();
      specialized Path.withMutableBuffer(do:)((uint64_t)v2, (uint64_t)_._rawValue, transform);
      swift_bridgeObjectRelease();
    }
  }
}

Swift::Void __swiftcall Path.addLines(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;

  if (*((_QWORD *)a1._rawValue + 2))
  {
    swift_bridgeObjectRetain();
    specialized Path.withMutableBuffer(do:)(v1, (uint64_t)a1._rawValue);
    swift_bridgeObjectRelease();
  }
}

uint64_t closure #1 in Path.addLines(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;
  __int128 *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    __break(1u);
  v10 = *(_OWORD *)(a2 + 32);
  result = MEMORY[0x23B7C9088](a1, 0, &v10, 0);
  v6 = v2 - 1;
  if (v6)
  {
    v7 = (__int128 *)(a2 + 48);
    do
    {
      v8 = *v7++;
      v9 = v8;
      result = MEMORY[0x23B7C9088](a1, 1, &v9, 0);
      --v6;
    }
    while (v6);
  }
  return result;
}

_QWORD *Path.addRelativeArc(center:radius:startAngle:delta:transform:)(_OWORD *a1, double a2, double a3, double a4, double a5, double a6)
{
  uint64_t v6;

  return specialized Path.withMutableBuffer(do:)(v6, a1, a2, a3, a4, a5, a6);
}

_QWORD *Path.addArc(center:radius:startAngle:endAngle:clockwise:transform:)(char a1, _OWORD *a2, double a3, double a4, double a5, double a6, double a7)
{
  uint64_t v7;

  return specialized Path.withMutableBuffer(do:)(v7, a2, a1, a3, a4, a5, a6, a7);
}

_QWORD *Path.addArc(tangent1End:tangent2End:radius:transform:)(_OWORD *a1, double a2, double a3, double a4, double a5, double a6)
{
  uint64_t v6;

  return specialized Path.withMutableBuffer(do:)(v6, a1, a2, a3, a4, a5, a6);
}

double Path.addPath(_:transform:)(uint64_t a1, double *a2)
{
  int8x16_t *v2;
  int8x16_t v3;
  double result;
  int8x16_t v5;
  _OWORD v6[2];
  __int8 v7;

  if (v2[2].i8[0] != 6
    || (v3 = vorrq_s8(*v2, v2[1]), *(_QWORD *)&vorr_s8(*(int8x8_t *)v3.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL))))
  {
    __asm { BR              X13 }
  }
  Path.applying(_:)(a2, (uint64_t)v6);
  result = *(double *)v6;
  v5 = (int8x16_t)v6[1];
  *v2 = (int8x16_t)v6[0];
  v2[1] = v5;
  v2[2].i8[0] = v7;
  return result;
}

void sub_234F04DA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char IsEmpty;

  if (*(_BYTE *)(v1 + 16))
  {
    if (*(_BYTE *)(v1 + 16) != 1)
    {
      v2 = one-time initialization token for bufferCallbacks;
      swift_retain();
      if (v2 != -1)
        swift_once();
      goto LABEL_8;
    }
  }
  else if (!*(_QWORD *)(v1 + 24))
  {
    __break(1u);
    goto LABEL_13;
  }
  swift_retain();
LABEL_8:
  IsEmpty = RBPathIsEmpty();
  outlined retain of Path.Storage(v0, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  if ((IsEmpty & 1) != 0)
    JUMPOUT(0x234F04D88);
LABEL_13:
  JUMPOUT(0x234F04D58);
}

void sub_234F04E48()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x234F04E90);
}

uint64_t Path.currentPoint.getter()
{
  uint64_t v0;
  int8x16_t v1;
  const CGPath *v2;
  const CGPath *v3;
  uint64_t v5;
  _BYTE v6[40];
  int8x16_t v7[2];
  char v8;

  outlined init with take of Path.Storage(v0, (uint64_t)v6);
  outlined init with take of Path.Storage((uint64_t)v6, (uint64_t)v7);
  if (!v8)
    return v7[0].i64[0];
  if (v8 == 6)
  {
    v1 = vorrq_s8(v7[0], v7[1]);
    if (!*(_QWORD *)&vorr_s8(*(int8x8_t *)v1.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1, v1, 8uLL)))
      return 0;
  }
  Path.cgPath.getter();
  v3 = v2;
  if (CGPathIsEmpty(v2))
  {

    return 0;
  }
  v5 = *(_OWORD *)&CGPathGetCurrentPoint(v3);

  return v5;
}

uint64_t Path.dilatedGlyphPath(with:)@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  uint64_t v3;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD v13[6];

  v13[5] = *MEMORY[0x24BDAC8D0];
  if (a2 == 0.0 && a3 == 0.0)
  {
    v7 = *(_BYTE *)(v3 + 32);
    v9 = *(_QWORD *)(v3 + 16);
    v8 = *(_QWORD *)(v3 + 24);
    v10 = *(_QWORD *)v3;
    v11 = *(_QWORD *)(v3 + 8);
    outlined init with take of Path.Storage(v3, (uint64_t)v13);
    result = outlined retain of Path.Storage((uint64_t)v13, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
  }
  else
  {
    type metadata accessor for Path.PathBox();
    v10 = swift_allocObject();
    *(_OWORD *)(v10 + 104) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 24) = 0u;
    *(_BYTE *)(v10 + 16) = 2;
    RBPathStorageInit();
    *(double *)v13 = a2;
    *(double *)&v13[1] = a3;
    MEMORY[0x23B7C9088](v10 + 24, 22, v13, 0);
    Path.append(to:)();
    result = MEMORY[0x23B7C9088](v10 + 24, 16, 0, 0);
    v11 = 0;
    v9 = 0;
    v8 = 0;
    v7 = 5;
  }
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v11;
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v8;
  *(_BYTE *)(a1 + 32) = v7;
  return result;
}

uint64_t Path.normalized(eoFill:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  _BYTE v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for Path.PathBox();
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_BYTE *)(v4 + 16) = 2;
  RBPathStorageInit();
  v6[0] = 0;
  v6[1] = a1;
  MEMORY[0x23B7C9088](v4 + 24, 20, 0, v6);
  Path.append(to:)();
  result = MEMORY[0x23B7C9088](v4 + 24, 16, 0, 0);
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 5;
  return result;
}

uint64_t Path.intersection(_:eoFill:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t result;
  _BYTE v8[2];
  _BYTE v9[40];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for Path.PathBox();
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_BYTE *)(v6 + 16) = 2;
  RBPathStorageInit();
  v8[0] = 1;
  v8[1] = a2;
  MEMORY[0x23B7C9088](v6 + 24, 20, 0, v8);
  Path.append(to:)();
  outlined init with take of Path.Storage(a1, (uint64_t)v9);
  outlined retain of Path.Storage((uint64_t)v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
  MEMORY[0x23B7C9088](v6 + 24, 21, 0, 0);
  Path.append(to:)();
  outlined retain of Path.Storage(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  result = MEMORY[0x23B7C9088](v6 + 24, 16, 0, 0);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_BYTE *)(a3 + 32) = 5;
  return result;
}

uint64_t Path.union(_:eoFill:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t result;
  _BYTE v8[2];
  _BYTE v9[40];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for Path.PathBox();
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_BYTE *)(v6 + 16) = 2;
  RBPathStorageInit();
  v8[0] = 2;
  v8[1] = a2;
  MEMORY[0x23B7C9088](v6 + 24, 20, 0, v8);
  Path.append(to:)();
  outlined init with take of Path.Storage(a1, (uint64_t)v9);
  outlined retain of Path.Storage((uint64_t)v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
  MEMORY[0x23B7C9088](v6 + 24, 21, 0, 0);
  Path.append(to:)();
  outlined retain of Path.Storage(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  result = MEMORY[0x23B7C9088](v6 + 24, 16, 0, 0);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_BYTE *)(a3 + 32) = 5;
  return result;
}

uint64_t Path.subtracting(_:eoFill:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t result;
  _BYTE v8[2];
  _BYTE v9[40];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for Path.PathBox();
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_BYTE *)(v6 + 16) = 2;
  RBPathStorageInit();
  v8[0] = 3;
  v8[1] = a2;
  MEMORY[0x23B7C9088](v6 + 24, 20, 0, v8);
  Path.append(to:)();
  outlined init with take of Path.Storage(a1, (uint64_t)v9);
  outlined retain of Path.Storage((uint64_t)v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
  MEMORY[0x23B7C9088](v6 + 24, 21, 0, 0);
  Path.append(to:)();
  outlined retain of Path.Storage(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  result = MEMORY[0x23B7C9088](v6 + 24, 16, 0, 0);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_BYTE *)(a3 + 32) = 5;
  return result;
}

uint64_t Path.symmetricDifference(_:eoFill:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t result;
  _BYTE v8[2];
  _BYTE v9[40];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for Path.PathBox();
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_BYTE *)(v6 + 16) = 2;
  RBPathStorageInit();
  v8[0] = 4;
  v8[1] = a2;
  MEMORY[0x23B7C9088](v6 + 24, 20, 0, v8);
  Path.append(to:)();
  outlined init with take of Path.Storage(a1, (uint64_t)v9);
  outlined retain of Path.Storage((uint64_t)v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
  MEMORY[0x23B7C9088](v6 + 24, 21, 0, 0);
  Path.append(to:)();
  outlined retain of Path.Storage(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  result = MEMORY[0x23B7C9088](v6 + 24, 16, 0, 0);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_BYTE *)(a3 + 32) = 5;
  return result;
}

uint64_t Path.lineIntersection(_:eoFill:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t result;
  _BYTE v8[2];
  _BYTE v9[40];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for Path.PathBox();
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_BYTE *)(v6 + 16) = 2;
  RBPathStorageInit();
  v8[0] = 5;
  v8[1] = a2;
  MEMORY[0x23B7C9088](v6 + 24, 20, 0, v8);
  Path.append(to:)();
  outlined init with take of Path.Storage(a1, (uint64_t)v9);
  outlined retain of Path.Storage((uint64_t)v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
  MEMORY[0x23B7C9088](v6 + 24, 21, 0, 0);
  Path.append(to:)();
  outlined retain of Path.Storage(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  result = MEMORY[0x23B7C9088](v6 + 24, 16, 0, 0);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_BYTE *)(a3 + 32) = 5;
  return result;
}

uint64_t Path.lineSubtraction(_:eoFill:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t result;
  _BYTE v8[2];
  _BYTE v9[40];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for Path.PathBox();
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_BYTE *)(v6 + 16) = 2;
  RBPathStorageInit();
  v8[0] = 6;
  v8[1] = a2;
  MEMORY[0x23B7C9088](v6 + 24, 20, 0, v8);
  Path.append(to:)();
  outlined init with take of Path.Storage(a1, (uint64_t)v9);
  outlined retain of Path.Storage((uint64_t)v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
  MEMORY[0x23B7C9088](v6 + 24, 21, 0, 0);
  Path.append(to:)();
  outlined retain of Path.Storage(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  result = MEMORY[0x23B7C9088](v6 + 24, 16, 0, 0);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_BYTE *)(a3 + 32) = 5;
  return result;
}

uint64_t Path.mapPoints(_:)@<X0>(void (*a1)(_QWORD **)@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  char v10;
  uint64_t result;
  int8x16_t v12;
  int8x16_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  CGPoint v21;
  CGSize v22;
  uint64_t v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  char v33;
  uint64_t v34;
  CGFloat v35;
  CGFloat v36;
  CGFloat v37;
  double v38;
  double v39;
  uint64_t v40;
  int8x16_t v41;
  uint64_t v42;
  char isEscapingClosureAtFileLocation;
  CGMutablePathRef Mutable;
  uint64_t v45;
  uint64_t v46;
  char v47;
  CGPath *v48;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  BOOL IsNull;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  void *v59;
  id v60;
  __int128 v61;
  __int128 v62;
  unsigned __int8 v63;
  uint64_t v64;
  _QWORD v65[2];
  __int128 *v66;
  uint64_t v67;
  CGFloat v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  _QWORD *v72;
  __int128 v73;
  __int128 v74;
  char v75;
  _BYTE v76[40];
  CGRect v77;
  char v78;
  _BYTE v79[40];
  int8x16_t v80;
  int8x16_t v81;
  char v82;
  uint64_t v83;
  CGRect v84;
  CGRect v85;
  CGRect v86;
  CGRect v87;
  CGRect v88;
  CGRect v89;
  CGRect v90;
  CGRect v91;

  v3 = (uint64_t)v2;
  v83 = *MEMORY[0x24BDAC8D0];
  v6 = *v2;
  v8 = *(double *)(v3 + 8);
  v7 = *(double *)(v3 + 16);
  v9 = *(double *)(v3 + 24);
  v10 = *(_BYTE *)(v3 + 32);
  outlined init with take of Path.Storage(v3, (uint64_t)v79);
  result = outlined init with take of Path.Storage((uint64_t)v79, (uint64_t)&v80);
  switch(v82)
  {
    case 0:
      v12 = v80;
      v13 = v81;
      type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CGPoint>, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_23528B7A0;
      *(int8x16_t *)(v14 + 32) = v12;
      *(double *)(v14 + 48) = *(double *)v12.i64 + *(double *)v13.i64;
      *(_QWORD *)(v14 + 56) = v12.i64[1];
      *(double *)(v14 + 64) = *(double *)v12.i64 + *(double *)v13.i64;
      *(double *)(v14 + 72) = *(double *)&v12.i64[1] + *(double *)&v13.i64[1];
      *(_QWORD *)(v14 + 80) = v12.i64[0];
      *(double *)(v14 + 88) = *(double *)&v12.i64[1] + *(double *)&v13.i64[1];
      v72 = (_QWORD *)v14;
      a1(&v72);
      v15 = v72;
      v16 = swift_bridgeObjectRetain();
      specialized CGRect.init(exactCornerPoints:)(v16, (uint64_t)v76);
      outlined init with take of CGRect?((uint64_t)v76, (uint64_t)&v77);
      if ((v78 & 1) != 0)
      {
        if (!v15[2])
          goto LABEL_47;
        v17 = v15[4];
        v18 = v15[5];
        v69 = type metadata accessor for Path.PathBox();
        v19 = swift_allocObject();
        *(_OWORD *)(v19 + 24) = 0u;
        *(_OWORD *)(v19 + 104) = 0u;
        *(_OWORD *)(v19 + 88) = 0u;
        *(_OWORD *)(v19 + 72) = 0u;
        *(_OWORD *)(v19 + 56) = 0u;
        *(_OWORD *)(v19 + 40) = 0u;
        *(_BYTE *)(v19 + 16) = 2;
        RBPathStorageInit();
        v20 = *(_BYTE *)(v19 + 16) == 2;
        v67 = a2;
        if (v20)
        {
          v73 = (unint64_t)v19;
          v74 = 0uLL;
          v75 = 5;
        }
        else
        {
          swift_retain();
          Path.PathBox.prepareBuffer()();
          swift_release();
          if (*(_BYTE *)(v19 + 16) != 2)
          {
            swift_retain();
            Path.PathBox.prepareBuffer()();
LABEL_30:
            *(_QWORD *)&v71 = v17;
            *((_QWORD *)&v71 + 1) = v18;
            MEMORY[0x23B7C9088](v19 + 24, 0, &v71, 0);
            swift_release();
            v54 = 3;
            v55 = 0uLL;
            while ((unint64_t)(v54 - 2) < v72[2])
            {
              v70 = *(_OWORD *)&v72[2 * v54];
              v73 = v55;
              v74 = v55;
              v75 = 6;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                v56 = swift_allocObject();
                *(_OWORD *)(v56 + 24) = 0u;
                *(_OWORD *)(v56 + 104) = 0u;
                *(_OWORD *)(v56 + 88) = 0u;
                *(_OWORD *)(v56 + 72) = 0u;
                *(_OWORD *)(v56 + 56) = 0u;
                *(_OWORD *)(v56 + 40) = 0u;
                v57 = *(unsigned __int8 *)(v19 + 16);
                *(_BYTE *)(v56 + 16) = v57;
                if (v57)
                {
                  if (v57 == 1)
                  {
                    swift_retain();
                    *(_QWORD *)(v56 + 24) = RBPathRetain();
                    *(_QWORD *)(v56 + 32) = v58;
                    swift_release();
                  }
                  else
                  {
                    RBPathStorageInit();
                  }
                }
                else
                {
                  v59 = *(void **)(v19 + 24);
                  if (!v59)
                  {
                    __break(1u);
                    JUMPOUT(0x234F0640CLL);
                  }
                  *(_QWORD *)(v56 + 24) = v59;
                  v60 = v59;
                }
                swift_release();
                v19 = v56;
              }
              v61 = v73;
              v62 = v74;
              v63 = v75;
              swift_retain();
              outlined consume of Path.Storage(v61, *((uint64_t *)&v61 + 1), v62, *((uint64_t *)&v62 + 1), v63);
              v73 = (unint64_t)v19;
              v74 = 0uLL;
              v75 = 5;
              if (*(_BYTE *)(v19 + 16) != 2)
                Path.PathBox.prepareBuffer()();
              v71 = v70;
              MEMORY[0x23B7C9088](v19 + 24, 1, &v71, 0);
              swift_release();
              ++v54;
              v55 = 0uLL;
              if (v54 == 6)
              {
                specialized Path.withMutableBuffer(do:)((uint64_t)&v73);
                v8 = *((double *)&v73 + 1);
                v6 = v73;
                v9 = *((double *)&v74 + 1);
                v7 = *(double *)&v74;
                v10 = v75;
                result = swift_bridgeObjectRelease();
                a2 = v67;
                goto LABEL_23;
              }
            }
            __break(1u);
LABEL_45:
            __break(1u);
LABEL_46:
            __break(1u);
LABEL_47:
            __break(1u);
          }
        }
        swift_retain();
        goto LABEL_30;
      }
      x = v77.origin.x;
      y = v77.origin.y;
      width = v77.size.width;
      height = v77.size.height;
      IsNull = CGRectIsNull(v77);
      result = swift_bridgeObjectRelease();
      if (IsNull)
      {
LABEL_25:
        v6 = 0;
        v8 = 0.0;
        v7 = 0.0;
        v9 = 0.0;
        v10 = 6;
      }
      else
      {
        v10 = 0;
        v6 = *(_QWORD *)&x;
        v8 = y;
        v7 = width;
        v9 = height;
      }
LABEL_23:
      *(_QWORD *)a2 = v6;
      *(CGFloat *)(a2 + 8) = v8;
      *(CGFloat *)(a2 + 16) = v7;
      *(CGFloat *)(a2 + 24) = v9;
      *(_BYTE *)(a2 + 32) = v10;
      return result;
    case 1:
      v21 = (CGPoint)v80;
      v22 = (CGSize)v81;
      type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CGPoint>, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v23 = swift_allocObject();
      *(_OWORD *)(v23 + 16) = xmmword_23528B7A0;
      *(CGPoint *)(v23 + 32) = v21;
      *(double *)(v23 + 48) = v21.x + v22.width;
      *(CGFloat *)(v23 + 56) = v21.y;
      *(double *)(v23 + 64) = v21.x + v22.width;
      *(double *)(v23 + 72) = v21.y + v22.height;
      *(CGFloat *)(v23 + 80) = v21.x;
      *(double *)(v23 + 88) = v21.y + v22.height;
      *(_QWORD *)&v73 = v23;
      a1((_QWORD **)&v73);
      specialized CGRect.init(exactCornerPoints:)(v73, (uint64_t)v76);
      result = outlined init with take of CGRect?((uint64_t)v76, (uint64_t)&v77);
      if ((v78 & 1) != 0)
        goto LABEL_17;
      v24 = v77.origin.x;
      v25 = v77.origin.y;
      v26 = v77.size.width;
      *(CGFloat *)&v70 = v77.size.height;
      v27 = CGRectGetWidth(v77);
      v84.origin = v21;
      v84.size = v22;
      if (v27 != CGRectGetWidth(v84))
        goto LABEL_17;
      v85.origin.x = v24;
      v85.origin.y = v25;
      v85.size.width = v26;
      *(_QWORD *)&v85.size.height = v70;
      v28 = CGRectGetHeight(v85);
      v86.origin = v21;
      v86.size = v22;
      if (v28 != CGRectGetHeight(v86))
        goto LABEL_17;
      v87.origin.x = v24;
      v87.origin.y = v25;
      v87.size.width = v26;
      *(_QWORD *)&v87.size.height = v70;
      result = CGRectIsNull(v87);
      if ((result & 1) != 0)
        goto LABEL_25;
      v88.origin.x = v24;
      v88.origin.y = v25;
      v88.size.width = v26;
      *(_QWORD *)&v88.size.height = v70;
      result = CGRectIsInfinite(v88);
      v6 = *(_QWORD *)&v24;
      v8 = v25;
      v7 = v26;
      v9 = *(double *)&v70;
      v10 = result ^ 1;
      goto LABEL_23;
    case 2:
      v29 = *(double *)(v80.i64[0] + 16);
      v30 = *(double *)(v80.i64[0] + 24);
      v31 = *(double *)(v80.i64[0] + 32);
      v32 = *(double *)(v80.i64[0] + 40);
      *(_QWORD *)&v70 = *(_QWORD *)(v80.i64[0] + 48);
      v69 = *(_QWORD *)(v80.i64[0] + 56);
      v33 = *(_BYTE *)(v80.i64[0] + 64);
      type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CGPoint>, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v34 = swift_allocObject();
      *(_OWORD *)(v34 + 16) = xmmword_23528B7A0;
      *(double *)(v34 + 32) = v29;
      *(double *)(v34 + 40) = v30;
      *(double *)(v34 + 48) = v29 + v31;
      *(double *)(v34 + 56) = v30;
      *(double *)(v34 + 64) = v29 + v31;
      *(double *)(v34 + 72) = v30 + v32;
      *(double *)(v34 + 80) = v29;
      *(double *)(v34 + 88) = v30 + v32;
      *(_QWORD *)&v73 = v34;
      a1((_QWORD **)&v73);
      specialized CGRect.init(exactCornerPoints:)(v73, (uint64_t)v76);
      result = outlined init with take of CGRect?((uint64_t)v76, (uint64_t)&v77);
      if ((v78 & 1) != 0)
        goto LABEL_17;
      v35 = v77.origin.y;
      v36 = v77.size.width;
      v37 = v77.size.height;
      v68 = v77.origin.x;
      v38 = CGRectGetWidth(v77);
      v89.origin.x = v29;
      v89.origin.y = v30;
      v89.size.width = v31;
      v89.size.height = v32;
      if (v38 != CGRectGetWidth(v89))
        goto LABEL_17;
      v90.origin.x = v68;
      v90.origin.y = v35;
      v90.size.width = v36;
      v90.size.height = v37;
      v39 = CGRectGetHeight(v90);
      v91.origin.x = v29;
      v91.origin.y = v30;
      v91.size.width = v31;
      v91.size.height = v32;
      if (v39 != CGRectGetHeight(v91))
        goto LABEL_17;
      result = swift_allocObject();
      v6 = result;
      v8 = 0.0;
      v7 = 0.0;
      v9 = 0.0;
      *(CGFloat *)(result + 16) = v68;
      *(CGFloat *)(result + 24) = v35;
      *(CGFloat *)(result + 32) = v36;
      *(CGFloat *)(result + 40) = v37;
      v40 = v69;
      *(_QWORD *)(result + 48) = v70;
      *(_QWORD *)(result + 56) = v40;
      v10 = 2;
      *(_BYTE *)(result + 64) = v33;
      goto LABEL_23;
    case 6:
      v41 = vorrq_s8(v80, v81);
      if (vorr_s8(*(int8x8_t *)v41.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL)))
        goto LABEL_17;
      goto LABEL_23;
    default:
LABEL_17:
      *(_QWORD *)&v71 = MEMORY[0x24BEE4AF8];
      MEMORY[0x24BDAC7A8](result);
      v66 = &v71;
      v42 = swift_allocObject();
      *(_QWORD *)(v42 + 16) = partial apply for closure #1 in Path.mapPoints(_:);
      *(_QWORD *)(v42 + 24) = v65;
      Path.retainRBPath()();
      *(_QWORD *)&v73 = thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
      *((_QWORD *)&v73 + 1) = v42;
      swift_retain();
      RBPathApply();
      swift_release();
      RBPathRelease();
      isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((isEscapingClosureAtFileLocation & 1) != 0)
        goto LABEL_45;
      a1((_QWORD **)&v71);
      Mutable = CGPathCreateMutable();
      v72 = 0;
      MEMORY[0x24BDAC7A8](Mutable);
      v65[0] = v45;
      v65[1] = &v71;
      v66 = (__int128 *)&v72;
      v46 = swift_allocObject();
      *(_QWORD *)(v46 + 16) = partial apply for closure #2 in Path.mapPoints(_:);
      *(_QWORD *)(v46 + 24) = &v64;
      Path.retainRBPath()();
      *(_QWORD *)&v73 = thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
      *((_QWORD *)&v73 + 1) = v46;
      swift_retain();
      RBPathApply();
      swift_release();
      RBPathRelease();
      v47 = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((v47 & 1) != 0)
        goto LABEL_46;
      v48 = Mutable;
      if (CGPathIsEmpty(v48))
      {

        v6 = 0;
        v10 = 6;
      }
      else
      {
        type metadata accessor for Path.PathBox();
        v6 = swift_allocObject();
        *(_OWORD *)(v6 + 24) = 0u;
        *(_OWORD *)(v6 + 104) = 0u;
        *(_OWORD *)(v6 + 88) = 0u;
        *(_OWORD *)(v6 + 72) = 0u;
        *(_OWORD *)(v6 + 56) = 0u;
        *(_OWORD *)(v6 + 40) = 0u;
        *(_BYTE *)(v6 + 16) = 0;
        *(_QWORD *)(v6 + 24) = v48;

        v10 = 5;
      }
      result = swift_bridgeObjectRelease();
      v8 = 0.0;
      v7 = 0.0;
      v9 = 0.0;
      goto LABEL_23;
  }
}

void closure #1 in Path.mapPoints(_:)(__int128 *a1)
{
  _BYTE v1[64];

  outlined init with take of GraphicsContext.GradientGeometry(a1, (uint64_t)v1);
  __asm { BR              X10 }
}

__n128 sub_234F06468()
{
  _QWORD **v0;
  _QWORD *v1;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v3;
  unint64_t v4;
  __n128 result;
  __n128 v6;

  v1 = *v0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v0 = v1;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1[2] + 1, 1, v1);
    *v0 = v1;
  }
  v4 = v1[2];
  v3 = v1[3];
  if (v4 >= v3 >> 1)
    v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v3 > 1), v4 + 1, 1, v1);
  v1[2] = v4 + 1;
  result = v6;
  *(__n128 *)&v1[2 * v4 + 4] = v6;
  *v0 = v1;
  return result;
}

void closure #2 in Path.mapPoints(_:)(__int128 *a1)
{
  _BYTE v1[104];

  outlined init with take of GraphicsContext.GradientGeometry(a1, (uint64_t)v1);
  __asm { BR              X10 }
}

void sub_234F066C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, CGAffineTransform *transform, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  unint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  CGAffineTransform v21;

  v17 = *v15;
  if ((*v15 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (v17 >= *(_QWORD *)(*(_QWORD *)v16 + 16))
  {
LABEL_5:
    __break(1u);
    JUMPOUT(0x234F06844);
  }
  v18 = *(_QWORD *)v16 + 16 * v17;
  v19 = *(_QWORD *)(v18 + 32);
  v20 = *(_QWORD *)(v18 + 40);
  v21.a = 1.0;
  v21.b = 0.0;
  v21.c = 0.0;
  v21.d = 1.0;
  v21.tx = 0.0;
  v21.ty = 0.0;
  CGMutablePathRef.move(to:transform:)((CGPoint)__PAIR128__(v20, v19), &v21);
  ++*v15;
}

uint64_t static RBPath.withTemporaryPath<A>(do:builder:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  closure #1 in static RBPath.withTemporaryPath<A>(do:builder:)((uint64_t)v13, 128, 128, v8, v9, v10);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a3, v7, a2);
}

uint64_t closure #1 in static RBPath.withTemporaryPath<A>(do:builder:)(uint64_t result, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, void (*a6)(uint64_t, uint64_t))
{
  uint64_t v8;

  if (result)
  {
    v8 = result;
    RBPathStorageInit();
    a4(v8);
    if (one-time initialization token for temporaryPathCallbacks != -1)
      swift_once();
    a6(v8, temporaryPathCallbacks);
    return MEMORY[0x23B7C90AC](v8);
  }
  else
  {
    __break(1u);
  }
  return result;
}

double one-time initialization function for temporaryPathCallbacks()
{
  uint64_t v0;
  double result;

  v0 = swift_slowAlloc();
  result = 0.0;
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_QWORD *)(v0 + 80) = 0;
  *(_QWORD *)(v0 + 8) = @objc closure #1 in closure #1 in variable initialization expression of temporaryPathCallbacks;
  *(_QWORD *)(v0 + 16) = @objc closure #2 in closure #1 in variable initialization expression of temporaryPathCallbacks;
  *(_QWORD *)(v0 + 24) = @objc closure #3 in closure #1 in variable initialization expression of temporaryPathCallbacks;
  *(_QWORD *)(v0 + 32) = @objc closure #4 in closure #1 in variable initialization expression of temporaryPathCallbacks;
  *(_QWORD *)(v0 + 40) = @objc closure #5 in closure #1 in variable initialization expression of temporaryPathCallbacks;
  *(_QWORD *)(v0 + 48) = @objc closure #6 in closure #1 in variable initialization expression of temporaryPathCallbacks;
  *(_QWORD *)(v0 + 64) = @objc closure #7 in closure #1 in variable initialization expression of temporaryPathCallbacks;
  *(_QWORD *)(v0 + 72) = @objc closure #8 in closure #1 in variable initialization expression of temporaryPathCallbacks;
  temporaryPathCallbacks = v0;
  return result;
}

void @objc closure #1 in closure #1 in variable initialization expression of temporaryPathCallbacks()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void @objc closure #2 in closure #1 in variable initialization expression of temporaryPathCallbacks()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id @objc closure #8 in closure #1 in variable initialization expression of temporaryPathCallbacks()
{
  id v0;
  id v1;

  v0 = (id)MEMORY[0x23B7C90DC]();
  v1 = v0;
  if (v0)

  return v1;
}

uint64_t specialized static Path.PathBox.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  int v3;

  if (*(_BYTE *)(result + 16))
  {
    if (*(_BYTE *)(result + 16) == 1)
    {
      v3 = *(unsigned __int8 *)(a2 + 16);
      if (!*(_BYTE *)(a2 + 16))
        goto LABEL_7;
LABEL_12:
      if (v3 != 1 && one-time initialization token for bufferCallbacks != -1)
        swift_once();
      return RBPathEqualToPath();
    }
    if (one-time initialization token for bufferCallbacks != -1)
      result = swift_once();
    v3 = *(unsigned __int8 *)(a2 + 16);
    if (*(_BYTE *)(a2 + 16))
      goto LABEL_12;
  }
  else
  {
    if (!*(_QWORD *)(result + 24))
    {
      __break(1u);
      goto LABEL_17;
    }
    v3 = *(unsigned __int8 *)(a2 + 16);
    if (*(_BYTE *)(a2 + 16))
      goto LABEL_12;
  }
LABEL_7:
  if (*(_QWORD *)(a2 + 24))
    return RBPathEqualToPath();
LABEL_17:
  __break(1u);
  return result;
}

void specialized static Path.Storage.== infix(_:_:)(uint64_t a1)
{
  _BYTE v1[40];

  outlined init with take of Path.Storage(a1, (uint64_t)v1);
  __asm { BR              X10 }
}

BOOL sub_234F06CC4()
{
  uint64_t v0;
  CGFloat v1;
  CGFloat v2;
  CGFloat v3;
  CGFloat v4;
  CGRect v7;
  char v8;
  double v9;
  double v10;
  double v11;
  double v12;
  CGRect v13;

  v1 = v9;
  v2 = v10;
  v3 = v11;
  v4 = v12;
  outlined init with take of Path.Storage(v0, (uint64_t)&v7);
  if (v8)
  {
    return 0;
  }
  else
  {
    v13.origin.x = v1;
    v13.origin.y = v2;
    v13.size.width = v3;
    v13.size.height = v4;
    return CGRectEqualToRect(v13, v7);
  }
}

uint64_t type metadata accessor for Path.PathBox()
{
  return objc_opt_self();
}

uint64_t sub_234F06ED0()
{
  return swift_deallocObject();
}

uint64_t outlined init with copy of Path.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;

  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_BYTE *)(a1 + 32);
  outlined copy of Path.Storage(*(_QWORD *)a1, v4, v5, v6, v7);
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v6;
  *(_BYTE *)(a2 + 32) = v7;
  return a2;
}

void specialized static Path.Element.== infix(_:_:)(__int128 *a1)
{
  _BYTE v1[56];

  outlined init with take of GraphicsContext.GradientGeometry(a1, (uint64_t)v1);
  __asm { BR              X10 }
}

BOOL sub_234F06F80()
{
  __int128 *v0;
  double v1;
  double v2;
  double v4[6];
  char v5;
  double v6;
  double v7;

  v2 = v6;
  v1 = v7;
  outlined init with take of GraphicsContext.GradientGeometry(v0, (uint64_t)v4);
  if (v5)
    return 0;
  if (v1 == v4[1])
    return v2 == v4[0];
  return 0;
}

unint64_t specialized Path.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  id *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  Class isa;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  void *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;

  v3 = (id *)result;
  v73 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(result + 8);
  v5 = *(_QWORD *)(result + 16);
  if (v4 >= v5)
    goto LABEL_75;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v69 = 6;
  while (2)
  {
    v10 = (unint64_t)v3[3];
    if (!v10)
      goto LABEL_9;
    v11 = v3[4];
    if (v4 >= (unint64_t)v11)
    {
      if ((unint64_t)v11 < v4)
        goto LABEL_77;
      v3[3] = 0;
LABEL_9:
      result = ProtobufDecoder.decodeVarint()();
      if (v2)
        goto LABEL_78;
      v10 = result;
      if (result < 8)
      {
LABEL_77:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
LABEL_78:
        v49 = v6;
        v50 = v7;
        v51 = (uint64_t)v8;
        v52 = v9;
        return outlined consume of Path.Storage(v49, v50, v51, v52, v69);
      }
    }
    switch(v10 >> 3)
    {
      case 1uLL:
        if ((v10 & 7) != 2)
          goto LABEL_77;
        v68 = v9;
        v12 = v7;
        v7 = (uint64_t)v8;
        v8 = (char *)v3[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v8 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
        v14 = *((_QWORD *)v8 + 2);
        v13 = *((_QWORD *)v8 + 3);
        v10 = v14 + 1;
        if (v14 >= v13 >> 1)
          v8 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v8);
        *((_QWORD *)v8 + 2) = v10;
        *(_QWORD *)&v8[8 * v14 + 32] = v5;
        v3[5] = v8;
        v15 = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_79;
        if (v15 < 0)
        {
          __break(1u);
LABEL_94:
          __break(1u);
LABEL_95:
          __break(1u);
LABEL_96:
          __break(1u);
        }
        else
        {
          v8 = (char *)v7;
          v16 = (unint64_t)v3[1] + v15;
          if (v5 < v16)
            goto LABEL_80;
          v3[2] = (id)v16;
          v71 = 0u;
          v72 = 0u;
          closure #1 in CGRect.init(from:)((unint64_t)&v71, v3, &v70);
          v7 = v12;
          v10 = (unint64_t)v3[5];
          if (*(_QWORD *)(v10 + 16))
          {
            v17 = (uint64_t)v8;
            v5 = *((_QWORD *)&v71 + 1);
            v65 = v71;
            v67 = *((_QWORD *)&v72 + 1);
            v8 = (char *)v72;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
              v18 = *(_QWORD *)(v10 + 16);
              if (!v18)
                goto LABEL_100;
              goto LABEL_23;
            }
            v10 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v10);
            v18 = *(_QWORD *)(v10 + 16);
            if (v18)
            {
LABEL_23:
              v19 = v18 - 1;
              v20 = *(void **)(v10 + 8 * v19 + 32);
              *(_QWORD *)(v10 + 16) = v19;
              result = outlined consume of Path.Storage(v6, v12, v17, v68, v69);
              v69 = 0;
              v3[5] = (id)v10;
              v3[2] = v20;
              goto LABEL_3;
            }
LABEL_100:
            __break(1u);
LABEL_101:
            __break(1u);
LABEL_102:
            __break(1u);
LABEL_103:
            __break(1u);
LABEL_104:
            __break(1u);
            __break(1u);
            v57 = specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v10);
            v58 = v57[2];
            if (v58)
              goto LABEL_90;
            __break(1u);
            v57 = v3[5];
            v5 = v68;
            if (v57[2])
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
              {
                v58 = v57[2];
                if (v58)
                {
LABEL_90:
                  v59 = v58 - 1;
                  v60 = (void *)v57[v59 + 4];
                  v57[2] = v59;
                  result = outlined consume of Path.Storage(v6, v7, (uint64_t)v8, v5, v69);
                  v3[5] = v57;
                  v3[2] = v60;
                  return result;
                }
LABEL_108:
                __break(1u);
                __break(1u);
                v63 = specialized _ArrayBuffer._consumeAndCreateNew()(v57);
                v64 = v63[2];
                if (!v64)
                  __break(1u);
                v61 = v64 - 1;
                v62 = (void *)v63[v61 + 4];
                v63[2] = v61;
                outlined consume of Path.Storage(v68, v6, v67, v7, v69);
                v3[5] = v63;
                v3[2] = v62;
                return swift_deallocUninitializedObject();
              }
            }
            else
            {
              __break(1u);
            }
            v57 = specialized _ArrayBuffer._consumeAndCreateNew()(v57);
            v58 = v57[2];
            if (v58)
              goto LABEL_90;
            goto LABEL_108;
          }
        }
        __break(1u);
LABEL_98:
        __break(1u);
LABEL_99:
        __break(1u);
        goto LABEL_100;
      case 2uLL:
        if ((v10 & 7) != 2)
          goto LABEL_77;
        v68 = v9;
        v12 = v7;
        v7 = (uint64_t)v8;
        v8 = (char *)v3[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v8 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
        v22 = *((_QWORD *)v8 + 2);
        v21 = *((_QWORD *)v8 + 3);
        v10 = v22 + 1;
        if (v22 >= v21 >> 1)
          v8 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v22 + 1, 1, v8);
        *((_QWORD *)v8 + 2) = v10;
        *(_QWORD *)&v8[8 * v22 + 32] = v5;
        v3[5] = v8;
        v23 = ProtobufDecoder.decodeVarint()();
        if (v2)
        {
LABEL_79:
          v49 = v6;
          v50 = v12;
          v51 = v7;
          goto LABEL_81;
        }
        if (v23 < 0)
          goto LABEL_94;
        v8 = (char *)v7;
        v24 = (unint64_t)v3[1] + v23;
        if (v5 < v24)
        {
LABEL_80:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          v49 = v6;
          v50 = v12;
          v51 = (uint64_t)v8;
LABEL_81:
          v52 = v68;
          return outlined consume of Path.Storage(v49, v50, v51, v52, v69);
        }
        v3[2] = (id)v24;
        v71 = 0u;
        v72 = 0u;
        closure #1 in CGRect.init(from:)((unint64_t)&v71, v3, &v70);
        v7 = v12;
        v10 = (unint64_t)v3[5];
        if (!*(_QWORD *)(v10 + 16))
          goto LABEL_98;
        v25 = (uint64_t)v8;
        v5 = *((_QWORD *)&v71 + 1);
        v65 = v71;
        v67 = *((_QWORD *)&v72 + 1);
        v8 = (char *)v72;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v26 = *(_QWORD *)(v10 + 16);
          if (!v26)
            goto LABEL_101;
        }
        else
        {
          v10 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v10);
          v26 = *(_QWORD *)(v10 + 16);
          if (!v26)
            goto LABEL_101;
        }
        v27 = v26 - 1;
        v28 = *(void **)(v10 + 8 * v27 + 32);
        *(_QWORD *)(v10 + 16) = v27;
        result = outlined consume of Path.Storage(v6, v12, v25, v68, v69);
        v3[5] = (id)v10;
        v3[2] = v28;
        v69 = 1;
LABEL_3:
        v6 = v65;
        v7 = v5;
        v9 = v67;
LABEL_4:
        v4 = (unint64_t)v3[1];
        v5 = (unint64_t)v3[2];
        if (v4 >= v5)
          goto LABEL_76;
        continue;
      case 3uLL:
        v67 = (uint64_t)v8;
        v8 = (char *)swift_allocObject();
        if ((v10 & 7) != 2)
        {
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          v53 = v6;
          v54 = v7;
          v55 = v67;
          v56 = v9;
          goto LABEL_86;
        }
        v68 = v6;
        v6 = v7;
        v10 = (unint64_t)v3[5];
        v7 = v9;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v10 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v10 + 16) + 1, 1, (_QWORD *)v10);
        v30 = *(_QWORD *)(v10 + 16);
        v29 = *(_QWORD *)(v10 + 24);
        if (v30 >= v29 >> 1)
          v10 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v29 > 1), v30 + 1, 1, (_QWORD *)v10);
        *(_QWORD *)(v10 + 16) = v30 + 1;
        *(_QWORD *)(v10 + 8 * v30 + 32) = v5;
        v3[5] = (id)v10;
        v31 = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_85;
        if (v31 < 0)
          goto LABEL_95;
        v32 = (unint64_t)v3[1] + v31;
        if (v5 >= v32)
        {
          v3[2] = (id)v32;
          FixedRoundedRect.init(from:)((unint64_t)v3, (uint64_t)(v8 + 16));
          v10 = (unint64_t)v3[5];
          if (!*(_QWORD *)(v10 + 16))
            goto LABEL_99;
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) != 0)
          {
            v33 = *(_QWORD *)(v10 + 16);
            if (!v33)
              goto LABEL_74;
            goto LABEL_50;
          }
          result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v10);
          v10 = result;
          v33 = *(_QWORD *)(result + 16);
          if (v33)
          {
LABEL_50:
            v34 = v33 - 1;
            v35 = *(void **)(v10 + 8 * v34 + 32);
            *(_QWORD *)(v10 + 16) = v34;
            result = outlined consume of Path.Storage(v68, v6, v67, v7, v69);
            v7 = 0;
            v9 = 0;
            v3[5] = (id)v10;
            v3[2] = v35;
            v69 = 2;
            v6 = (uint64_t)v8;
            v8 = 0;
            goto LABEL_4;
          }
LABEL_74:
          __break(1u);
LABEL_75:
          v6 = 0;
          v7 = 0;
          v8 = 0;
          v9 = 0;
          v69 = 6;
LABEL_76:
          v3[3] = 0;
          *(_QWORD *)a2 = v6;
          *(_QWORD *)(a2 + 8) = v7;
          *(_QWORD *)(a2 + 16) = v8;
          *(_QWORD *)(a2 + 24) = v9;
          *(_BYTE *)(a2 + 32) = v69;
          return result;
        }
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
LABEL_85:
        v55 = v67;
        v53 = v68;
        v54 = v6;
        v56 = v7;
LABEL_86:
        outlined consume of Path.Storage(v53, v54, v55, v56, v69);
        return swift_deallocUninitializedObject();
      case 4uLL:
        if ((v10 & 7) != 2)
          goto LABEL_77;
        v36 = ProtobufDecoder.decodeVarint()();
        if (v2)
          goto LABEL_78;
        v10 = v36;
        if (v36 < 0)
          goto LABEL_96;
        v37 = v3[1];
        if (v5 < (unint64_t)&v37[v36])
          goto LABEL_77;
        v67 = (uint64_t)v8;
        v68 = v9;
        v3[1] = &v37[v36];
        if (v36)
        {
          v8 = (char *)(v37 - (_BYTE *)objc_msgSend(objc_retainAutorelease(*v3), sel_bytes));
          v38 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          v40 = v39;
          if (__OFADD__(v8, v10))
            goto LABEL_102;
          if ((uint64_t)&v8[v10] < (uint64_t)v8)
            goto LABEL_103;
          v41 = v38;
          v10 = Data._Representation.subscript.getter();
          v43 = v42;
          outlined consume of Data._Representation(v41, v40);
        }
        else
        {
          v43 = 0xC000000000000000;
        }
        isa = Data._bridgeToObjectiveC()().super.isa;
        v45 = RBPathMakeWithData();
        v47 = v46;
        outlined consume of Data._Representation(v10, v43);
        outlined consume of Path.Storage(v6, v7, v67, v68, v69);

        type metadata accessor for Path.PathBox();
        result = swift_allocObject();
        v6 = result;
        v7 = 0;
        v8 = 0;
        *(_OWORD *)(result + 24) = 0u;
        *(_OWORD *)(result + 104) = 0u;
        *(_OWORD *)(result + 88) = 0u;
        *(_OWORD *)(result + 72) = 0u;
        *(_OWORD *)(result + 56) = 0u;
        *(_OWORD *)(result + 40) = 0u;
        *(_BYTE *)(result + 16) = 1;
        v69 = 5;
        *(_QWORD *)(result + 24) = v45;
        *(_QWORD *)(result + 32) = v47;
        v9 = 0;
        goto LABEL_4;
      default:
        switch(v10 & 7)
        {
          case 0uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              goto LABEL_78;
            goto LABEL_4;
          case 1uLL:
            v48 = (unint64_t)v3[1] + 8;
            if (v5 < v48)
              goto LABEL_77;
            goto LABEL_68;
          case 2uLL:
            result = ProtobufDecoder.decodeVarint()();
            if (v2)
              goto LABEL_78;
            if ((result & 0x8000000000000000) != 0)
              goto LABEL_104;
            v48 = (unint64_t)v3[1] + result;
            if (v5 < v48)
              goto LABEL_77;
LABEL_68:
            v3[1] = (id)v48;
            break;
          case 5uLL:
            v48 = (unint64_t)v3[1] + 4;
            if (v5 < v48)
              goto LABEL_77;
            goto LABEL_68;
          default:
            goto LABEL_77;
        }
        goto LABEL_4;
    }
  }
}

_QWORD *specialized Path.withMutableBuffer(do:)(uint64_t a1, _OWORD *a2)
{
  _OWORD *v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  __int128 v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  CGAffineTransform v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;

  v2 = a2;
  v34 = *MEMORY[0x24BDAC8D0];
  v26 = a2[1];
  v27 = *a2;
  v25 = a2[2];
  v4 = *(_QWORD *)a1;
  v5 = (_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(unsigned __int8 *)(a1 + 32);
  if (v7 != 5)
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_QWORD *)(a1 + 24);
    type metadata accessor for Path.PathBox();
    v14 = swift_allocObject();
    *(_OWORD *)(v14 + 24) = 0u;
    *(_OWORD *)(v14 + 104) = 0u;
    *(_OWORD *)(v14 + 88) = 0u;
    *(_OWORD *)(v14 + 72) = 0u;
    *(_OWORD *)(v14 + 56) = 0u;
    *(_OWORD *)(v14 + 40) = 0u;
    *(_BYTE *)(v14 + 16) = 2;
    RBPathStorageInit();
    v15 = *(unsigned __int8 *)(v14 + 16);
    swift_retain();
    if (v15 != 2)
      Path.PathBox.prepareBuffer()();
    v29 = v4;
    v30 = v6;
    v31 = v12;
    v32 = v13;
    v33 = v7;
    outlined copy of Path.Storage(v4, v6, v12, v13, v7);
    Path.append(to:)();
    outlined consume of Path.Storage(v4, v6, v12, v13, v7);
    v8 = v14;
    v2 = a2;
LABEL_12:
    swift_release();
    goto LABEL_13;
  }
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = 6;
  v8 = v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Path.PathBox();
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 24) = 0u;
    result = (_QWORD *)(v8 + 24);
    *(_OWORD *)(v8 + 104) = 0u;
    *(_OWORD *)(v8 + 88) = 0u;
    *(_OWORD *)(v8 + 72) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    *(_OWORD *)(v8 + 40) = 0u;
    v10 = *(unsigned __int8 *)(v4 + 16);
    *(_BYTE *)(v8 + 16) = v10;
    if (v10)
    {
      if (v10 == 1)
      {
        swift_retain();
        *(_QWORD *)(v8 + 24) = RBPathRetain();
        *(_QWORD *)(v8 + 32) = v11;
        swift_release();
      }
      else
      {
        RBPathStorageInit();
      }
    }
    else
    {
      v16 = *(void **)(v4 + 24);
      if (!v16)
      {
        __break(1u);
        return result;
      }
      *result = v16;
      v17 = v16;
    }
    goto LABEL_12;
  }
LABEL_13:
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD *)(a1 + 8);
  v20 = *(_QWORD *)(a1 + 16);
  v21 = *(_QWORD *)(a1 + 24);
  v22 = *(_BYTE *)(a1 + 32);
  swift_retain();
  outlined consume of Path.Storage(v18, v19, v20, v21, v22);
  *(_QWORD *)a1 = v8;
  v5[1] = 0;
  v5[2] = 0;
  *v5 = 0;
  *(_BYTE *)(a1 + 32) = 5;
  if (*(_BYTE *)(v8 + 16) != 2)
    Path.PathBox.prepareBuffer()();
  *(_OWORD *)&v28.a = v27;
  *(_OWORD *)&v28.c = v26;
  *(_OWORD *)&v28.tx = v25;
  if (CGAffineTransformIsIdentity(&v28))
  {
    Path.append(to:)();
  }
  else
  {
    v23 = v2[1];
    *(_OWORD *)&v28.a = *v2;
    *(_OWORD *)&v28.c = v23;
    *(_OWORD *)&v28.tx = v2[2];
    MEMORY[0x23B7C9088](v8 + 24, 17, 0, &v28);
    Path.append(to:)();
    MEMORY[0x23B7C9088](v8 + 24, 16, 0, 0);
  }
  return (_QWORD *)swift_release();
}

uint64_t specialized Path.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  CGMutablePathRef Mutable;
  void *v7;
  char *v8;
  id v9;
  uint64_t result;
  char v11;

  Mutable = CGPathCreateMutable();
  v7 = (void *)MEMORY[0x23B7C5DAC](a1, a2);
  swift_bridgeObjectRelease();
  v8 = (char *)objc_msgSend(v7, sel_UTF8String);
  v9 = v7;
  if (v8 && (_CGPathParseString(Mutable, v8) & 1) != 0)
  {
    type metadata accessor for Path.PathBox();
    result = swift_allocObject();
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_BYTE *)(result + 16) = 0;
    v11 = 5;
    *(_QWORD *)(result + 24) = Mutable;
  }
  else
  {

    result = 0;
    v11 = -1;
  }
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_BYTE *)(a3 + 32) = v11;
  return result;
}

uint64_t outlined init with take of Path?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Path?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for Path?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Path?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Path?);
  }
}

uint64_t sub_234F07F24()
{
  return swift_deallocObject();
}

_QWORD *specialized Path.withMutableBuffer(do:)(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *result;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  __int128 *v25;
  __int128 v26;
  __int128 v27;
  _QWORD *v29;
  _OWORD v30[3];
  _OWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;

  v4 = a2;
  v37 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v29 = (_QWORD *)(a1 + 8);
  v8 = *(unsigned __int8 *)(a1 + 32);
  if (v8 != 5)
  {
    v14 = *(_QWORD *)(a1 + 16);
    v13 = *(_QWORD *)(a1 + 24);
    type metadata accessor for Path.PathBox();
    v15 = swift_allocObject();
    *(_OWORD *)(v15 + 24) = 0u;
    *(_OWORD *)(v15 + 104) = 0u;
    *(_OWORD *)(v15 + 88) = 0u;
    *(_OWORD *)(v15 + 72) = 0u;
    *(_OWORD *)(v15 + 56) = 0u;
    *(_OWORD *)(v15 + 40) = 0u;
    *(_BYTE *)(v15 + 16) = 2;
    RBPathStorageInit();
    v16 = *(unsigned __int8 *)(v15 + 16);
    swift_retain();
    if (v16 != 2)
      Path.PathBox.prepareBuffer()();
    v32 = v6;
    v33 = v7;
    v34 = v14;
    v35 = v13;
    v36 = v8;
    outlined copy of Path.Storage(v6, v7, v14, v13, v8);
    Path.append(to:)();
    outlined consume of Path.Storage(v6, v7, v14, v13, v8);
    v9 = v15;
    v4 = a2;
LABEL_12:
    swift_release();
    goto LABEL_13;
  }
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = 6;
  v9 = v6;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Path.PathBox();
    v9 = swift_allocObject();
    *(_OWORD *)(v9 + 24) = 0u;
    result = (_QWORD *)(v9 + 24);
    *(_OWORD *)(v9 + 104) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 40) = 0u;
    v11 = *(unsigned __int8 *)(v6 + 16);
    *(_BYTE *)(v9 + 16) = v11;
    if (v11)
    {
      if (v11 == 1)
      {
        swift_retain();
        *(_QWORD *)(v9 + 24) = RBPathRetain();
        *(_QWORD *)(v9 + 32) = v12;
        swift_release();
      }
      else
      {
        RBPathStorageInit();
      }
    }
    else
    {
      v17 = *(void **)(v6 + 24);
      if (!v17)
      {
        __break(1u);
        return result;
      }
      *result = v17;
      v18 = v17;
    }
    goto LABEL_12;
  }
LABEL_13:
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD *)(a1 + 8);
  v21 = *(_QWORD *)(a1 + 16);
  v22 = *(_QWORD *)(a1 + 24);
  v23 = *(_BYTE *)(a1 + 32);
  swift_retain();
  outlined consume of Path.Storage(v19, v20, v21, v22, v23);
  *(_QWORD *)a1 = v9;
  v29[1] = 0;
  v29[2] = 0;
  *v29 = 0;
  *(_BYTE *)(a1 + 32) = 5;
  if (*(_BYTE *)(v9 + 16) != 2)
    Path.PathBox.prepareBuffer()();
  v24 = *(_QWORD *)(v4 + 16);
  if (!v24)
    return (_QWORD *)swift_release();
  swift_bridgeObjectRetain();
  v25 = (__int128 *)(v4 + 48);
  do
  {
    v26 = *v25;
    v31[0] = *(v25 - 1);
    v31[1] = v26;
    v27 = a3[1];
    v30[0] = *a3;
    v30[1] = v27;
    v30[2] = a3[2];
    MEMORY[0x23B7C9088](v9 + 24, 5, v31, v30);
    v25 += 2;
    --v24;
  }
  while (v24);
  swift_release();
  return (_QWORD *)swift_bridgeObjectRelease();
}

_QWORD *specialized Path.withMutableBuffer(do:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;

  v2 = a2;
  v4 = *(_QWORD *)a1;
  v5 = (_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(unsigned __int8 *)(a1 + 32);
  if (v7 != 5)
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_QWORD *)(a1 + 24);
    type metadata accessor for Path.PathBox();
    v14 = swift_allocObject();
    *(_OWORD *)(v14 + 24) = 0u;
    *(_OWORD *)(v14 + 104) = 0u;
    *(_OWORD *)(v14 + 88) = 0u;
    *(_OWORD *)(v14 + 72) = 0u;
    *(_OWORD *)(v14 + 56) = 0u;
    *(_OWORD *)(v14 + 40) = 0u;
    *(_BYTE *)(v14 + 16) = 2;
    RBPathStorageInit();
    v15 = *(unsigned __int8 *)(v14 + 16);
    swift_retain();
    if (v15 != 2)
      Path.PathBox.prepareBuffer()();
    outlined copy of Path.Storage(v4, v6, v12, v13, v7);
    Path.append(to:)();
    outlined consume of Path.Storage(v4, v6, v12, v13, v7);
    v8 = v14;
    v2 = a2;
LABEL_12:
    swift_release();
    goto LABEL_13;
  }
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = 6;
  v8 = v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Path.PathBox();
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 24) = 0u;
    result = (_QWORD *)(v8 + 24);
    *(_OWORD *)(v8 + 104) = 0u;
    *(_OWORD *)(v8 + 88) = 0u;
    *(_OWORD *)(v8 + 72) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    *(_OWORD *)(v8 + 40) = 0u;
    v10 = *(unsigned __int8 *)(v4 + 16);
    *(_BYTE *)(v8 + 16) = v10;
    if (v10)
    {
      if (v10 == 1)
      {
        swift_retain();
        *(_QWORD *)(v8 + 24) = RBPathRetain();
        *(_QWORD *)(v8 + 32) = v11;
        swift_release();
      }
      else
      {
        RBPathStorageInit();
      }
    }
    else
    {
      v16 = *(void **)(v4 + 24);
      if (!v16)
      {
        __break(1u);
        return result;
      }
      *result = v16;
      v17 = v16;
    }
    goto LABEL_12;
  }
LABEL_13:
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD *)(a1 + 8);
  v20 = *(_QWORD *)(a1 + 16);
  v21 = *(_QWORD *)(a1 + 24);
  v22 = *(_BYTE *)(a1 + 32);
  swift_retain();
  outlined consume of Path.Storage(v18, v19, v20, v21, v22);
  *(_QWORD *)a1 = v8;
  v5[1] = 0;
  v5[2] = 0;
  *v5 = 0;
  *(_BYTE *)(a1 + 32) = 5;
  if (*(_BYTE *)(v8 + 16) != 2)
    Path.PathBox.prepareBuffer()();
  closure #1 in Path.addLines(_:)(v8 + 24, v2);
  return (_QWORD *)swift_release();
}

unint64_t instantiation function for generic protocol witness table for Path(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Path and conformance Path();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for Path()
{
  return &type metadata for Path;
}

uint64_t method lookup function for Path.PathBox()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Path.PathBox.__allocating_init(takingPath:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t destroy for Path(uint64_t a1)
{
  return outlined consume of Path.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for Path(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  outlined copy of Path.Storage(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for Path(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  outlined copy of Path.Storage(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  outlined consume of Path.Storage(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for Path(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unsigned __int8 v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  outlined consume of Path.Storage(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for Path(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFA && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 250);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 6)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Path(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 250;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for Path.Storage(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 32) <= 5u)
    return *(unsigned __int8 *)(a1 + 32);
  else
    return (*(_DWORD *)a1 + 6);
}

uint64_t destructiveInjectEnumTag for Path.Storage(uint64_t result, unsigned int a2)
{
  if (a2 >= 6)
  {
    *(_QWORD *)result = a2 - 6;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 6;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
  }
  *(_BYTE *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Path.Storage()
{
  return &type metadata for Path.Storage;
}

uint64_t getEnumTag for Path.Element(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 48) <= 3u)
    return *(unsigned __int8 *)(a1 + 48);
  else
    return (*(_DWORD *)a1 + 4);
}

uint64_t destructiveInjectEnumTag for Path.Element(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(_QWORD *)result = a2 - 4;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)(result + 40) = 0;
    LOBYTE(a2) = 4;
  }
  *(_BYTE *)(result + 48) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Path.Element()
{
  return &type metadata for Path.Element;
}

ValueMetadata *type metadata accessor for StrokedPath()
{
  return &type metadata for StrokedPath;
}

ValueMetadata *type metadata accessor for TrimmedPath()
{
  return &type metadata for TrimmedPath;
}

uint64_t storeEnumTagSinglePayload for Path.PathBox.Kind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_234F08820 + 4 * byte_2352B05C1[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_234F08854 + 4 * byte_2352B05BC[v4]))();
}

uint64_t sub_234F08854(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F0885C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234F08864);
  return result;
}

uint64_t sub_234F08870(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234F08878);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_234F0887C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F08884(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Path.PathBox.Kind()
{
  return &unk_250645450;
}

unint64_t lazy protocol witness table accessor for type Path.PathBox.Kind and conformance Path.PathBox.Kind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Path.PathBox.Kind and conformance Path.PathBox.Kind;
  if (!lazy protocol witness table cache variable for type Path.PathBox.Kind and conformance Path.PathBox.Kind)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Path.PathBox.Kind, &unk_250645450);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Path.PathBox.Kind and conformance Path.PathBox.Kind);
  }
  return result;
}

void partial apply for closure #1 in Path.mapPoints(_:)(__int128 *a1)
{
  closure #1 in Path.mapPoints(_:)(a1);
}

uint64_t sub_234F088F0()
{
  return swift_deallocObject();
}

void partial apply for closure #2 in Path.mapPoints(_:)(__int128 *a1)
{
  closure #2 in Path.mapPoints(_:)(a1);
}

uint64_t sub_234F0890C()
{
  return swift_deallocObject();
}

BOOL Rectangle.path(in:)@<W0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  _BOOL8 result;
  double v11;
  double v12;
  double v13;
  double v14;
  char v15;

  result = CGRectIsNull(*(CGRect *)&a2);
  v11 = 0.0;
  if (result)
    v12 = 0.0;
  else
    v12 = a2;
  if (result)
    v13 = 0.0;
  else
    v13 = a3;
  if (result)
    v14 = 0.0;
  else
    v14 = a4;
  if (!result)
    v11 = a5;
  *(double *)a1 = v12;
  *(double *)(a1 + 8) = v13;
  if (result)
    v15 = 6;
  else
    v15 = 0;
  *(double *)(a1 + 16) = v14;
  *(double *)(a1 + 24) = v11;
  *(_BYTE *)(a1 + 32) = v15;
  return result;
}

BOOL protocol witness for Shape.path(in:) in conformance Rectangle@<W0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  _BOOL8 result;
  double v11;
  double v12;
  double v13;
  double v14;
  char v15;

  result = CGRectIsNull(*(CGRect *)&a2);
  v11 = 0.0;
  if (result)
    v12 = 0.0;
  else
    v12 = a2;
  if (result)
    v13 = 0.0;
  else
    v13 = a3;
  if (result)
    v14 = 0.0;
  else
    v14 = a4;
  if (!result)
    v11 = a5;
  *(double *)a1 = v12;
  *(double *)(a1 + 8) = v13;
  if (result)
    v15 = 6;
  else
    v15 = 0;
  *(double *)(a1 + 16) = v14;
  *(double *)(a1 + 24) = v11;
  *(_BYTE *)(a1 + 32) = v15;
  return result;
}

SwiftUI::RoundedRectangle __swiftcall RoundedRectangle.init(cornerSize:style:)(CGSize cornerSize, SwiftUI::RoundedCornerStyle style)
{
  uint64_t v2;
  SwiftUI::RoundedRectangle result;

  *(CGFloat *)v2 = cornerSize.width;
  *(CGFloat *)(v2 + 8) = cornerSize.height;
  *(_BYTE *)(v2 + 16) = *(_BYTE *)style;
  result.cornerSize.height = cornerSize.height;
  result.cornerSize.width = cornerSize.width;
  result.style = style;
  return result;
}

_BYTE *RoundedRectangle.init(cornerRadius:style:)@<X0>(_BYTE *result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  *(double *)a2 = a3;
  *(double *)(a2 + 8) = a3;
  *(_BYTE *)(a2 + 16) = *result;
  return result;
}

double RoundedRectangle.cornerSize.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void RoundedRectangle.cornerSize.setter(double a1, double a2)
{
  double *v2;

  *v2 = a1;
  v2[1] = a2;
}

uint64_t (*RoundedRectangle.cornerSize.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void RoundedRectangle.style.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

_BYTE *RoundedRectangle.style.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = *result;
  return result;
}

uint64_t (*RoundedRectangle.style.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t RoundedRectangle.path(in:)@<X0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  uint64_t v5;
  double v11;
  double v12;
  char v13;
  uint64_t result;
  char v15;
  CGRect v16;

  v11 = *(double *)v5;
  v12 = *(double *)(v5 + 8);
  v13 = *(_BYTE *)(v5 + 16);
  if (CGRectIsNull(*(CGRect *)&a2))
  {
    result = 0;
    v15 = 6;
    a3 = 0.0;
    a4 = 0.0;
    a5 = 0.0;
  }
  else if (v11 == 0.0 && v12 == 0.0
         || (v16.origin.x = a2, v16.origin.y = a3, v16.size.width = a4, v16.size.height = a5, CGRectIsInfinite(v16)))
  {
    v15 = 0;
    result = *(_QWORD *)&a2;
  }
  else
  {
    result = swift_allocObject();
    *(CGFloat *)(result + 16) = a2;
    *(CGFloat *)(result + 24) = a3;
    *(CGFloat *)(result + 32) = a4;
    *(CGFloat *)(result + 40) = a5;
    v15 = 2;
    a3 = 0.0;
    *(double *)(result + 48) = v11;
    *(double *)(result + 56) = v12;
    a4 = 0.0;
    a5 = 0.0;
    *(_BYTE *)(result + 64) = v13;
  }
  *(_QWORD *)a1 = result;
  *(CGFloat *)(a1 + 8) = a3;
  *(CGFloat *)(a1 + 16) = a4;
  *(CGFloat *)(a1 + 24) = a5;
  *(_BYTE *)(a1 + 32) = v15;
  return result;
}

uint64_t sub_234F08B44()
{
  return swift_deallocObject();
}

void RoundedRectangle.layoutDirectionBehavior.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void RoundedRectangle.animatableData.setter(double a1, double a2)
{
  double *v2;

  *v2 = a1;
  v2[1] = a2;
}

__n128 (*RoundedRectangle.animatableData.modify(uint64_t a1))(__n128 *a1)
{
  _OWORD *v1;

  *(_QWORD *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *v1;
  return protocol witness for Animatable.animatableData.modify in conformance CGPoint;
}

double protocol witness for Shape.path(in:) in conformance RoundedRectangle@<D0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  double result;
  __int128 v7;
  _OWORD v8[2];
  char v9;

  RoundedRectangle.path(in:)((uint64_t)v8, a2, a3, a4, a5);
  result = *(double *)v8;
  v7 = v8[1];
  *(_OWORD *)a1 = v8[0];
  *(_OWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 32) = v9;
  return result;
}

_BYTE *UnevenRoundedRectangle.init(cornerRadii:style:)@<X0>(_BYTE *result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  *(double *)a2 = a3;
  *(double *)(a2 + 8) = a4;
  *(double *)(a2 + 16) = a5;
  *(double *)(a2 + 24) = a6;
  *(_BYTE *)(a2 + 32) = *result;
  return result;
}

double UnevenRoundedRectangle.cornerRadii.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void UnevenRoundedRectangle.cornerRadii.setter(double a1, double a2, double a3, double a4)
{
  double *v4;

  *v4 = a1;
  v4[1] = a2;
  v4[2] = a3;
  v4[3] = a4;
}

uint64_t (*UnevenRoundedRectangle.cornerRadii.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void UnevenRoundedRectangle.style.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 32);
}

_BYTE *UnevenRoundedRectangle.style.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 32) = *result;
  return result;
}

uint64_t (*UnevenRoundedRectangle.style.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

_QWORD *UnevenRoundedRectangle.path(in:)@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  uint64_t v5;
  double v11;
  double v12;
  double v13;
  double v14;
  char v15;
  char v16;
  _QWORD *result;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;

  v11 = *(double *)v5;
  v12 = *(double *)(v5 + 8);
  v14 = *(double *)(v5 + 16);
  v13 = *(double *)(v5 + 24);
  v15 = *(_BYTE *)(v5 + 32);
  v20 = 0u;
  v21 = 0u;
  v16 = 6;
  v22 = 6;
  v23 = 0x3FF0000000000000;
  v24 = 0u;
  v25 = 0x3FF0000000000000;
  v26 = 0u;
  result = (_QWORD *)CGRectIsNull(*(CGRect *)&a2);
  v18 = 0uLL;
  v19 = 0uLL;
  if ((result & 1) == 0)
  {
    result = specialized Path.withMutableBuffer(do:)((uint64_t)&v20, &v23, v15, a2, a3, a4, a5, v11, v12, v14, v13);
    v18 = v20;
    v19 = v21;
    v16 = v22;
  }
  *(_OWORD *)a1 = v18;
  *(_OWORD *)(a1 + 16) = v19;
  *(_BYTE *)(a1 + 32) = v16;
  return result;
}

void UnevenRoundedRectangle.animatableData.setter(double a1, double a2, double a3, double a4)
{
  double *v4;

  *v4 = a1;
  v4[1] = a2;
  v4[2] = a3;
  v4[3] = a4;
}

uint64_t (*UnevenRoundedRectangle.animatableData.modify(_QWORD *a1))()
{
  _OWORD *v1;
  _QWORD *v3;
  __int128 v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = v1[1];
  *(_OWORD *)v3 = *v1;
  *((_OWORD *)v3 + 1) = v4;
  return UnevenRoundedRectangle.animatableData.modify;
}

_QWORD *protocol witness for Shape.path(in:) in conformance UnevenRoundedRectangle@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  uint64_t v5;
  double v11;
  double v12;
  double v13;
  double v14;
  char v15;
  char v16;
  _QWORD *result;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;

  v11 = *(double *)v5;
  v12 = *(double *)(v5 + 8);
  v14 = *(double *)(v5 + 16);
  v13 = *(double *)(v5 + 24);
  v15 = *(_BYTE *)(v5 + 32);
  v20 = 0u;
  v21 = 0u;
  v16 = 6;
  v22 = 6;
  v23 = 0x3FF0000000000000;
  v24 = 0u;
  v25 = 0x3FF0000000000000;
  v26 = 0u;
  result = (_QWORD *)CGRectIsNull(*(CGRect *)&a2);
  v18 = 0uLL;
  v19 = 0uLL;
  if ((result & 1) == 0)
  {
    result = specialized Path.withMutableBuffer(do:)((uint64_t)&v20, &v23, v15, a2, a3, a4, a5, v11, v12, v14, v13);
    v18 = v20;
    v19 = v21;
    v16 = v22;
  }
  *(_OWORD *)a1 = v18;
  *(_OWORD *)(a1 + 16) = v19;
  *(_BYTE *)(a1 + 32) = v16;
  return result;
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance UnevenRoundedRectangle(_QWORD *a1))()
{
  _OWORD *v1;
  _QWORD *v3;
  __int128 v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = v1[1];
  *(_OWORD *)v3 = *v1;
  *((_OWORD *)v3 + 1) = v4;
  return UnevenRoundedRectangle.animatableData.modify;
}

SwiftUI::Capsule __swiftcall Capsule.init(style:)(SwiftUI::Capsule style)
{
  _BYTE *v1;

  *v1 = *(_BYTE *)style.style;
  return style;
}

void Capsule.style.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *Capsule.style.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*Capsule.style.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t Capsule.path(in:)@<X0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  char *v5;
  char v11;
  double Width;
  double Height;
  uint64_t result;
  char v15;
  double v16;
  CGRect v17;
  CGRect v18;
  CGRect v19;

  v11 = *v5;
  Width = CGRectGetWidth(*(CGRect *)&a2);
  v17.origin.x = a2;
  v17.origin.y = a3;
  v17.size.width = a4;
  v17.size.height = a5;
  Height = CGRectGetHeight(v17);
  if (Height < Width)
    Width = Height;
  v18.origin.x = a2;
  v18.origin.y = a3;
  v18.size.width = a4;
  v18.size.height = a5;
  if (CGRectIsNull(v18))
  {
    result = 0;
    v15 = 6;
    a3 = 0.0;
    a4 = 0.0;
    a5 = 0.0;
  }
  else
  {
    v16 = Width * 0.5;
    if (v16 == 0.0
      || (v19.origin.x = a2, v19.origin.y = a3, v19.size.width = a4, v19.size.height = a5, CGRectIsInfinite(v19)))
    {
      v15 = 0;
      result = *(_QWORD *)&a2;
    }
    else
    {
      result = swift_allocObject();
      *(CGFloat *)(result + 16) = a2;
      *(CGFloat *)(result + 24) = a3;
      *(CGFloat *)(result + 32) = a4;
      *(CGFloat *)(result + 40) = a5;
      v15 = 2;
      a3 = 0.0;
      *(double *)(result + 48) = v16;
      *(double *)(result + 56) = v16;
      a4 = 0.0;
      a5 = 0.0;
      *(_BYTE *)(result + 64) = v11;
    }
  }
  *(_QWORD *)a1 = result;
  *(CGFloat *)(a1 + 8) = a3;
  *(CGFloat *)(a1 + 16) = a4;
  *(CGFloat *)(a1 + 24) = a5;
  *(_BYTE *)(a1 + 32) = v15;
  return result;
}

void Capsule.layoutDirectionBehavior.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

double protocol witness for Shape.path(in:) in conformance Capsule@<D0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  double result;
  __int128 v7;
  _OWORD v8[2];
  char v9;

  Capsule.path(in:)((uint64_t)v8, a2, a3, a4, a5);
  result = *(double *)v8;
  v7 = v8[1];
  *(_OWORD *)a1 = v8[0];
  *(_OWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 32) = v9;
  return result;
}

BOOL Ellipse.path(in:)@<W0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  CGFloat v8;
  _BOOL8 result;
  char v11;
  CGRect v12;

  v8 = a2;
  result = CGRectIsNull(*(CGRect *)&a2);
  if (result)
  {
    v11 = 6;
    v8 = 0.0;
    a3 = 0.0;
    a4 = 0.0;
    a5 = 0.0;
  }
  else
  {
    v12.origin.x = v8;
    v12.origin.y = a3;
    v12.size.width = a4;
    v12.size.height = a5;
    result = CGRectIsInfinite(v12);
    v11 = !result;
  }
  *(CGFloat *)a1 = v8;
  *(CGFloat *)(a1 + 8) = a3;
  *(CGFloat *)(a1 + 16) = a4;
  *(CGFloat *)(a1 + 24) = a5;
  *(_BYTE *)(a1 + 32) = v11;
  return result;
}

BOOL protocol witness for Shape.path(in:) in conformance Ellipse@<W0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  CGFloat v8;
  _BOOL8 result;
  char v11;
  CGRect v12;

  v8 = a2;
  result = CGRectIsNull(*(CGRect *)&a2);
  if (result)
  {
    v11 = 6;
    v8 = 0.0;
    a3 = 0.0;
    a4 = 0.0;
    a5 = 0.0;
  }
  else
  {
    v12.origin.x = v8;
    v12.origin.y = a3;
    v12.size.width = a4;
    v12.size.height = a5;
    result = CGRectIsInfinite(v12);
    v11 = !result;
  }
  *(CGFloat *)a1 = v8;
  *(CGFloat *)(a1 + 8) = a3;
  *(CGFloat *)(a1 + 16) = a4;
  *(CGFloat *)(a1 + 24) = a5;
  *(_BYTE *)(a1 + 32) = v11;
  return result;
}

double Circle.path(in:)@<D0>(uint64_t a1@<X8>, double a2@<D0>, CGFloat a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  double result;
  __int128 v7;
  _OWORD v8[2];
  char v9;

  specialized Circle.path(in:)((uint64_t)v8, a2, a3, a4, a5);
  result = *(double *)v8;
  v7 = v8[1];
  *(_OWORD *)a1 = v8[0];
  *(_OWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 32) = v9;
  return result;
}

void Circle.layoutDirectionBehavior.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

double protocol witness for Shape.path(in:) in conformance Circle@<D0>(uint64_t a1@<X8>, double a2@<D0>, CGFloat a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  double result;
  __int128 v7;
  _OWORD v8[2];
  char v9;

  specialized Circle.path(in:)((uint64_t)v8, a2, a3, a4, a5);
  result = *(double *)v8;
  v7 = v8[1];
  *(_OWORD *)a1 = v8[0];
  *(_OWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 32) = v9;
  return result;
}

double protocol witness for Shape.sizeThatFits(_:) in conformance Circle(uint64_t a1, char a2, uint64_t a3, char a4)
{
  double result;
  double v5;

  result = *(double *)&a3;
  v5 = 10.0;
  if ((a4 & 1) == 0)
    v5 = *(double *)&a3;
  if (*(double *)&a3 >= *(double *)&a1)
    result = *(double *)&a1;
  if ((a4 & 1) != 0)
    result = *(double *)&a1;
  if ((a2 & 1) != 0)
    return v5;
  return result;
}

double Circle.sizeThatFits(_:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  double result;
  double v5;

  result = *(double *)&a3;
  v5 = 10.0;
  if ((a4 & 1) == 0)
    v5 = *(double *)&a3;
  if (*(double *)&a3 >= *(double *)&a1)
    result = *(double *)&a1;
  if ((a4 & 1) != 0)
    result = *(double *)&a1;
  if ((a2 & 1) != 0)
    return v5;
  return result;
}

BOOL specialized Circle.path(in:)@<W0>(uint64_t a1@<X8>, double a2@<D0>, CGFloat a3@<D1>, double Height@<D2>, double a5@<D3>)
{
  double v8;
  _BOOL8 result;
  char v11;
  double Width;
  double v13;
  CGRect v14;
  CGRect v15;
  CGRect v16;
  CGRect v17;
  CGRect v18;
  CGRect v19;
  CGRect v20;
  CGRect v21;

  v8 = a2;
  if (CGRectIsNull(*(CGRect *)&a2)
    || (v14.origin.x = v8, v14.origin.y = a3, v14.size.width = Height, v14.size.height = a5, CGRectIsInfinite(v14)))
  {
    v15.origin.x = v8;
    v15.origin.y = a3;
    v15.size.width = Height;
    v15.size.height = a5;
    result = CGRectIsNull(v15);
    if (result)
    {
      v8 = 0.0;
      a3 = 0.0;
      Height = 0.0;
      a5 = 0.0;
      v11 = 6;
    }
    else
    {
      v11 = 0;
    }
  }
  else
  {
    v16.origin.x = v8;
    v16.origin.y = a3;
    v16.size.width = Height;
    v16.size.height = a5;
    Width = CGRectGetWidth(v16);
    v17.origin.x = v8;
    v17.origin.y = a3;
    v17.size.width = Height;
    v17.size.height = a5;
    v13 = Width - CGRectGetHeight(v17);
    if (v13 <= 0.0)
    {
      if (v13 < 0.0)
      {
        a3 = a3 + v13 * -0.5;
        v19.origin.x = v8;
        v19.origin.y = a3;
        v19.size.width = Height;
        v19.size.height = a5;
        a5 = CGRectGetWidth(v19);
      }
    }
    else
    {
      v8 = v13 * 0.5 + v8;
      v18.origin.x = v8;
      v18.origin.y = a3;
      v18.size.width = Height;
      v18.size.height = a5;
      Height = CGRectGetHeight(v18);
    }
    v20.origin.x = v8;
    v20.origin.y = a3;
    v20.size.width = Height;
    v20.size.height = a5;
    result = CGRectIsNull(v20);
    if (result)
    {
      v11 = 6;
      v8 = 0.0;
      a3 = 0.0;
      Height = 0.0;
      a5 = 0.0;
    }
    else
    {
      v21.origin.x = v8;
      v21.origin.y = a3;
      v21.size.width = Height;
      v21.size.height = a5;
      result = CGRectIsInfinite(v21);
      v11 = !result;
    }
  }
  *(double *)a1 = v8;
  *(CGFloat *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = Height;
  *(double *)(a1 + 24) = a5;
  *(_BYTE *)(a1 + 32) = v11;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Rectangle(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for RoundedRectangle(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for UnevenRoundedRectangle(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Capsule(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Capsule and conformance Capsule();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type Capsule and conformance Capsule();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Ellipse(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Circle(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Circle and conformance Circle();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type Circle and conformance Circle();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

__n128 sub_234F09568@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

__n128 sub_234F09574(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

__n128 sub_234F09580@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

__n128 sub_234F0958C(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

ValueMetadata *type metadata accessor for Rectangle()
{
  return &type metadata for Rectangle;
}

ValueMetadata *type metadata accessor for RoundedRectangle()
{
  return &type metadata for RoundedRectangle;
}

ValueMetadata *type metadata accessor for UnevenRoundedRectangle()
{
  return &type metadata for UnevenRoundedRectangle;
}

uint64_t storeEnumTagSinglePayload for Capsule(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_234F09614 + 4 * byte_2352B0885[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_234F09648 + 4 * byte_2352B0880[v4]))();
}

uint64_t sub_234F09648(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F09650(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234F09658);
  return result;
}

uint64_t sub_234F09664(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234F0966CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_234F09670(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F09678(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Capsule()
{
  return &type metadata for Capsule;
}

ValueMetadata *type metadata accessor for Ellipse()
{
  return &type metadata for Ellipse;
}

ValueMetadata *type metadata accessor for Circle()
{
  return &type metadata for Circle;
}

uint64_t DisplayList.ViewRenderer.__allocating_init(platform:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = swift_allocObject();
  v3 = *a1;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  swift_unknownObjectWeakInit();
  *(_BYTE *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = 0;
  *(_BYTE *)(v2 + 80) = 1;
  *(_QWORD *)(v2 + 16) = v3;
  return v2;
}

uint64_t DisplayList.ViewRenderer.host.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  swift_beginAccess();
  *(_QWORD *)(v2 + 48) = a2;
  swift_unknownObjectWeakAssign();
  result = swift_unknownObjectRelease();
  *(_BYTE *)(v2 + 80) = 1;
  return result;
}

uint64_t DisplayList.ViewRenderer.renderAsync(to:time:nextTime:targetTimestamp:version:maxVersion:)@<X0>(uint64_t result@<X0>, double *a2@<X1>, double *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  __int16 v9;
  char v10;
  double v11;
  double v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(double *__return_ptr, uint64_t *, double *, uint64_t *, uint64_t *, uint64_t *, uint64_t, uint64_t);
  double v19;
  char v20;
  double v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t ObjectType;
  uint64_t v27;
  __int16 v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  double v34;
  double v35;
  char v36;

  if ((*(_BYTE *)(v7 + 80) & 1) != 0 || !*(_QWORD *)(v7 + 64))
  {
    *(_QWORD *)a7 = 0;
    goto LABEL_6;
  }
  v25 = *(_QWORD *)result;
  v9 = *(_WORD *)(result + 8);
  v10 = *(_BYTE *)(result + 10);
  v11 = *a2;
  v12 = *a3;
  v13 = *a4;
  v14 = *((_BYTE *)a4 + 8);
  v15 = *a5;
  v16 = *a6;
  v17 = *(_QWORD *)(v7 + 72);
  ObjectType = swift_getObjectType();
  v27 = v25;
  v28 = v9;
  v29 = v10;
  v34 = v11;
  v31 = v15;
  v32 = v13;
  v33 = v14;
  v30 = v16;
  v18 = *(void (**)(double *__return_ptr, uint64_t *, double *, uint64_t *, uint64_t *, uint64_t *, uint64_t, uint64_t))(v17 + 32);
  swift_unknownObjectRetain();
  v18(&v35, &v27, &v34, &v32, &v31, &v30, ObjectType, v17);
  v19 = v35;
  if ((v36 & 1) != 0)
  {
    result = swift_unknownObjectRelease();
    *(double *)a7 = v19;
LABEL_6:
    v20 = 1;
    goto LABEL_7;
  }
  v21 = v35;
  if (v12 < v35)
    v21 = v12;
  v22 = v21 - v11;
  swift_beginAccess();
  v23 = *(double *)(v7 + 32);
  result = swift_unknownObjectRelease();
  v20 = 0;
  if (v23 > v22)
    v24 = v23;
  else
    v24 = v22;
  *(double *)a7 = v11 + v24;
LABEL_7:
  *(_BYTE *)(a7 + 8) = v20;
  return result;
}

void DisplayList.ViewRenderer.Environment.init(contentsScale:)(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
}

double DisplayList.ViewRenderer.render(rootView:from:time:nextTime:version:maxVersion:environment:)@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, double *a3@<X2>, double *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X6>, double *a8@<X8>)
{
  uint64_t v8;
  uint64_t v10;
  __int16 v11;
  char v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t ObjectType;
  void (*v21)(double *__return_ptr, uint64_t, uint64_t *, double *, uint64_t *, uint64_t *, uint64_t *, uint64_t, uint64_t);
  double v22;
  double v23;
  double v24;
  double v25;
  double result;
  uint64_t v28;
  __int16 v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  double v35;

  v10 = *a2;
  v11 = *((_WORD *)a2 + 4);
  v12 = *((_BYTE *)a2 + 10);
  v13 = *a3;
  v14 = *a4;
  v15 = *a5;
  v16 = *a6;
  v17 = *a7;
  specialized DisplayList.ViewRenderer.updateRenderer(rootView:)(a1);
  v19 = v18;
  ObjectType = swift_getObjectType();
  v28 = v10;
  v29 = v11;
  v30 = v12;
  v34 = v13;
  v32 = v16;
  v33 = v15;
  v31 = v17;
  v21 = *(void (**)(double *__return_ptr, uint64_t, uint64_t *, double *, uint64_t *, uint64_t *, uint64_t *, uint64_t, uint64_t))(v19 + 24);
  swift_unknownObjectRetain();
  v21(&v35, a1, &v28, &v34, &v33, &v32, &v31, ObjectType, v19);
  v22 = v35;
  if (v14 < v35)
    v22 = v14;
  v23 = v22 - v13;
  swift_beginAccess();
  v24 = *(double *)(v8 + 32);
  swift_unknownObjectRelease();
  if (v24 > v23)
    v25 = v24;
  else
    v25 = v23;
  result = v13 + v25;
  *a8 = result;
  return result;
}

uint64_t DisplayList.ViewRenderer.viewCacheIsEmpty.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t (*v3)(uint64_t, uint64_t);
  char v4;

  if (!*(_QWORD *)(v0 + 64))
    return 1;
  v1 = *(_QWORD *)(v0 + 72);
  ObjectType = swift_getObjectType();
  v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 48);
  swift_unknownObjectRetain();
  v4 = v3(ObjectType, v1);
  swift_unknownObjectRelease();
  return v4 & 1;
}

double DisplayList.ViewRenderer.Environment.contentsScale.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void DisplayList.ViewRenderer.Environment.contentsScale.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*DisplayList.ViewRenderer.Environment.contentsScale.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void one-time initialization function for invalid()
{
  static DisplayList.ViewRenderer.Environment.invalid = 0;
}

double static DisplayList.ViewRenderer.Environment.invalid.getter@<D0>(_QWORD *a1@<X8>)
{
  double result;

  if (one-time initialization token for invalid != -1)
    swift_once();
  result = *(double *)&static DisplayList.ViewRenderer.Environment.invalid;
  *a1 = static DisplayList.ViewRenderer.Environment.invalid;
  return result;
}

BOOL static DisplayList.ViewRenderer.Environment.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t DisplayList.ViewRenderer.configuration.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 32);
  *a1 = *(_QWORD *)(v1 + 24);
  a1[1] = v3;
  return swift_retain();
}

uint64_t key path setter for DisplayList.ViewRenderer.configuration : DisplayList.ViewRenderer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v4 + 24) = v2;
  *(_QWORD *)(v4 + 32) = v3;
  swift_retain();
  result = swift_release();
  *(_BYTE *)(v4 + 80) = 1;
  return result;
}

uint64_t DisplayList.ViewRenderer.configuration.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  swift_beginAccess();
  *(_QWORD *)(v1 + 24) = v2;
  *(_QWORD *)(v1 + 32) = v3;
  result = swift_release();
  *(_BYTE *)(v1 + 80) = 1;
  return result;
}

uint64_t (*DisplayList.ViewRenderer.configuration.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return DisplayList.ViewRenderer.configuration.modify;
}

uint64_t DisplayList.ViewRenderer.configuration.modify(uint64_t a1, char a2)
{
  uint64_t result;

  result = swift_endAccess();
  if ((a2 & 1) == 0)
    *(_BYTE *)(*(_QWORD *)(a1 + 24) + 80) = 1;
  return result;
}

uint64_t DisplayList.ViewRenderer.host.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return MEMORY[0x23B7C9E44](v0 + 40);
}

void (*DisplayList.ViewRenderer.host.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  v4 = MEMORY[0x23B7C9E44](v1 + 40);
  v5 = *(_QWORD *)(v1 + 48);
  v3[3] = v4;
  v3[4] = v5;
  return DisplayList.ViewRenderer.host.modify;
}

void DisplayList.ViewRenderer.host.modify(uint64_t a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)a1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + 48) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    v4 = v3[5];
    swift_endAccess();
    swift_unknownObjectRelease();
    *(_BYTE *)(v4 + 80) = 1;
  }
  free(v3);
}

uint64_t DisplayList.ViewRenderer.init(platform:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *a1;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  swift_unknownObjectWeakInit();
  *(_BYTE *)(v1 + 56) = 0;
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  *(_BYTE *)(v1 + 80) = 1;
  *(_QWORD *)(v1 + 16) = v2;
  return v1;
}

uint64_t DisplayList.ViewRenderer.exportedObject(rootView:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;

  specialized DisplayList.ViewRenderer.updateRenderer(rootView:)(a1);
  v2 = v1;
  ObjectType = swift_getObjectType();
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16);
  swift_unknownObjectRetain();
  v5 = v4(ObjectType, v2);
  swift_unknownObjectRelease();
  return v5;
}

uint64_t DisplayList.ViewRenderer.deinit()
{
  uint64_t v0;

  swift_release();
  outlined destroy of weak GestureGraphDelegate?(v0 + 40);
  swift_unknownObjectRelease();
  return v0;
}

uint64_t DisplayList.ViewRenderer.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  outlined destroy of weak GestureGraphDelegate?(v0 + 40);
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t DisplayList.ViewRasterizer.init(platform:host:rootView:options:)(uint64_t *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  char v8;
  int v9;
  char v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  char v14;
  int v15;
  uint64_t v16;
  uint64_t result;
  void *v18;
  uint64_t v19;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  char v25[4];
  int v26;
  char v27;
  int v28;
  char v29;

  v7 = *a1;
  v24 = *a1;
  v8 = *(_BYTE *)a5;
  v9 = *(_DWORD *)(a5 + 4);
  v10 = *(_BYTE *)(a5 + 8);
  v23 = *(unsigned __int8 *)(a5 + 9);
  v11 = *(unsigned __int8 *)(a5 + 11);
  v21 = *(unsigned __int8 *)(a5 + 10);
  v22 = *(unsigned __int8 *)(a5 + 12);
  v12 = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(v5 + 32) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v5 + 40) = 0;
  v13 = (uint64_t *)(v5 + 40);
  *(_WORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 88) = 0;
  *(_QWORD *)(v5 + 16) = v7;
  v19 = v5;
  *(_QWORD *)(v5 + 32) = a3;
  swift_unknownObjectWeakAssign();
  *(_BYTE *)(v5 + 48) = v8;
  *(_DWORD *)(v5 + 52) = v9;
  *(_BYTE *)(v5 + 56) = v10;
  *(_BYTE *)(v5 + 57) = v23;
  *(_BYTE *)(v5 + 58) = v21;
  *(_BYTE *)(v5 + 59) = v11;
  *(_BYTE *)(v5 + 60) = v22;
  *(_QWORD *)(v5 + 64) = v12;
  if (v11)
    v14 = 1;
  else
    v14 = 3;
  v25[0] = v14;
  type metadata accessor for DisplayList.GraphicsRenderer();
  swift_allocObject();
  *(_QWORD *)(v5 + 72) = DisplayList.GraphicsRenderer.init(platformViewMode:)(v25);
  if (v21)
    v15 = 163;
  else
    v15 = 161;
  if (v23)
    v15 |= 4u;
  if (v22)
    v15 |= 8u;
  v25[0] = v8;
  v26 = v9;
  v27 = v10;
  v28 = v15;
  v29 = v12;
  v16 = (*(uint64_t (**)(char *))((v24 & 0xFFFFFFFFFFFFFFFCLL) + 112))(v25);
  swift_beginAccess();
  *v13 = v16;
  result = swift_unknownObjectRelease();
  v18 = (void *)*v13;
  if (*v13)
  {
    swift_unknownObjectRetain();
    CoreViewAddSubview(v24 & 3, a4, v18, 0);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return v19;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t DisplayList.ViewRasterizer.exportedObject.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 16);
  result = swift_beginAccess();
  if (*(_QWORD *)(v0 + 40))
  {
    v3 = *(uint64_t (**)(uint64_t))((v1 & 0xFFFFFFFFFFFFFFFCLL) + 136);
    v4 = swift_unknownObjectRetain();
    v5 = v3(v4);
    swift_unknownObjectRelease();
    return v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t DisplayList.ViewRasterizer.render(rootView:from:time:version:maxVersion:environment:)@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, double *a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X5>, double *a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  void **v12;
  double v13;
  uint64_t result;
  void *v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  double v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  uint64_t v28;
  double v29;
  int v30;
  char v31;
  uint64_t v32;
  int v33;
  int v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t ObjectType;
  uint64_t (*v42)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  char v45;
  _QWORD v47[5];
  char v48;
  char v49[4];
  int v50;
  char v51;
  int v52;
  char v53;
  uint64_t v54;
  CGRect v55;
  CGRect v56;

  v7 = v6;
  if (*(double *)a5 != *(double *)(v7 + 88))
  {
    *(_QWORD *)(v7 + 88) = *a5;
    *(_WORD *)(v7 + 80) = 0;
  }
  v9 = *a4;
  v10 = *a2;
  v11 = *((_WORD *)a2 + 4);
  v45 = *((_BYTE *)a2 + 10);
  v12 = (void **)(v7 + 40);
  v13 = *a3;
  result = swift_beginAccess();
  v15 = *(void **)(v7 + 40);
  if (!v15)
  {
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if ((objc_msgSend(*(id *)(v7 + 40), sel_respondsToSelector_, sel_frame) & 1) != 0)
  {
    objc_msgSend(v15, sel_frame);
    v17 = v16;
    v19 = v18;
    v21 = v20;
    v23 = v22;
    if ((objc_msgSend(a1, sel_respondsToSelector_, sel_bounds) & 1) != 0)
    {
      objc_msgSend(a1, sel_bounds);
      v56.origin.x = v24;
      v56.origin.y = v25;
      v56.size.width = v26;
      v56.size.height = v27;
      v55.origin.x = v17;
      v55.origin.y = v19;
      v55.size.width = v21;
      v55.size.height = v23;
      result = CGRectEqualToRect(v55, v56);
      if ((result & 1) != 0)
      {
LABEL_13:
        if (v9)
        {
          if (*(unsigned __int16 *)(v7 + 80) != ((unsigned __int16)(2 * ((33 * WORD1(v9)) ^ v9)) | 1))
          {
LABEL_18:
            v54 = *(_QWORD *)(v7 + 16);
            v30 = *(_DWORD *)(v7 + 52);
            v31 = *(_BYTE *)(v7 + 56);
            v32 = *(_QWORD *)(v7 + 64);
            if (*(_BYTE *)(v7 + 58))
              v33 = 163;
            else
              v33 = 161;
            if (*(_BYTE *)(v7 + 57))
              v34 = v33 | 4;
            else
              v34 = v33;
            if (*(_BYTE *)(v7 + 60))
              v34 |= 8u;
            v49[0] = *(_BYTE *)(v7 + 48);
            v50 = v30;
            v51 = v31;
            v52 = v34;
            v53 = v32;
            v35 = *(double *)(v7 + 88);
            result = swift_beginAccess();
            if (*(_QWORD *)(v7 + 40))
            {
              specialized DisplayList.ViewUpdater.Platform.updateDrawingView(_:options:contentsScale:)((uint64_t *)(v7 + 40), v49, v35);
              v37 = v36;
              swift_endAccess();
              v38 = *(_QWORD *)(v7 + 72);
              v39 = swift_allocObject();
              MEMORY[0x23B7C9E44](v7 + 24);
              *(_QWORD *)(v39 + 24) = *(_QWORD *)(v7 + 32);
              swift_unknownObjectWeakInit();
              swift_unknownObjectRetain();
              swift_retain();
              swift_unknownObjectRelease();
              v40 = swift_allocObject();
              *(_QWORD *)(v40 + 16) = v7;
              *(double *)(v40 + 24) = v13;
              *(_QWORD *)(v40 + 32) = v10;
              *(_WORD *)(v40 + 40) = v11;
              *(_BYTE *)(v40 + 42) = v45;
              *(_QWORD *)(v40 + 48) = v38;
              *(_QWORD *)(v40 + 56) = v39;
              ObjectType = swift_getObjectType();
              v47[0] = partial apply for closure #1 in DisplayList.ViewRasterizer.drawingContent(list:time:);
              v47[1] = v40;
              memset(&v47[2], 0, 24);
              v48 = 0;
              v42 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v37 + 40);
              swift_bridgeObjectRetain();
              if ((v42(v47, 0, ObjectType, v37) & 1) != 0)
              {
                if (one-time initialization token for infinity != -1)
                  swift_once();
                v13 = *(double *)&static Time.infinity;
              }
              if (MEMORY[0x23B7C9E44](v7 + 24))
              {
                v43 = *(_QWORD *)(v7 + 32);
                v44 = swift_getObjectType();
                (*(void (**)(uint64_t, uint64_t))(v43 + 224))(v44, v43);
                swift_unknownObjectRelease();
              }
              swift_unknownObjectRelease();
              result = swift_release();
              v29 = v13;
              goto LABEL_34;
            }
            goto LABEL_36;
          }
        }
        else if (*(_WORD *)(v7 + 80))
        {
          goto LABEL_18;
        }
        v29 = *(double *)(*(_QWORD *)(v7 + 72) + 80);
        if (v29 >= v13)
        {
LABEL_34:
          *a6 = v29;
          return result;
        }
        goto LABEL_18;
      }
    }
  }
  else
  {
    result = (uint64_t)objc_msgSend(a1, sel_respondsToSelector_, sel_bounds);
    if ((result & 1) == 0)
      goto LABEL_13;
    objc_msgSend(a1, sel_bounds);
  }
  v28 = *(_QWORD *)(v7 + 16);
  result = (uint64_t)objc_msgSend(a1, sel_respondsToSelector_, sel_bounds);
  if ((result & 1) == 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  result = (uint64_t)objc_msgSend(a1, sel_bounds);
  if (*v12)
  {
    result = CoreViewSetFrame(v28 & 3, *v12);
    *(_WORD *)(v7 + 80) = 0;
    goto LABEL_13;
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t closure #1 in DisplayList.ViewRasterizer.drawingContent(list:time:)(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, __n128 *a5, uint64_t a6, double a7, double a8, double a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::Bool value;
  char *v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t result;
  double v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  _BYTE *v39;
  _BYTE v40[4];
  unsigned int v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t *v44;
  unsigned int v45;
  double aBlock;
  unint64_t v47;
  uint64_t (*v48)(uint64_t);
  void *v49;
  uint64_t (*v50)();
  uint64_t v51;
  double v52;
  __int16 v53;
  char v54;

  v45 = a4;
  v44 = a1;
  v14 = type metadata accessor for DispatchWorkItemFlags();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = &v40[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = type metadata accessor for DispatchQoS();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v43 = &v40[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  value = printTree.value;
  if (printTree.value != 2)
  {
    swift_endAccess();
    if (!value)
      goto LABEL_8;
    goto LABEL_6;
  }
  v22 = getenv("SWIFTUI_PRINT_TREE");
  if (!v22)
  {
    printTree.value = 0;
    swift_endAccess();
    goto LABEL_8;
  }
  v23 = atoi(v22);
  printTree.value = v23 != 0;
  swift_endAccess();
  if (v23)
  {
LABEL_6:
    v41 = HIWORD(v45);
    type metadata accessor for _ContiguousArrayStorage<Any>();
    v24 = swift_allocObject();
    v42 = a6;
    v25 = (_QWORD *)v24;
    *(_OWORD *)(v24 + 16) = xmmword_23527E860;
    aBlock = 0.0;
    v47 = 0xE000000000000000;
    _StringGuts.grow(_:)(17);
    v26._countAndFlagsBits = 0x2077656956;
    v26._object = (void *)0xE500000000000000;
    String.append(_:)(v26);
    v52 = *(double *)&a2;
    _print_unlocked<A, B>(_:_:)();
    v27._countAndFlagsBits = 544497952;
    v27._object = (void *)0xE400000000000000;
    String.append(_:)(v27);
    v52 = a9;
    _print_unlocked<A, B>(_:_:)();
    v28._countAndFlagsBits = 2618;
    v28._object = (void *)0xE200000000000000;
    String.append(_:)(v28);
    v52 = *(double *)&a3;
    v53 = v45;
    v54 = v41;
    v29._countAndFlagsBits = DisplayList.description.getter();
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    v30 = *(_QWORD *)&aBlock;
    v31 = v47;
    v25[7] = MEMORY[0x24BEE0D00];
    v25[4] = v30;
    v25[5] = v31;
    print(_:separator:terminator:)();
    a6 = v42;
    swift_bridgeObjectRelease();
  }
LABEL_8:
  aBlock = a9;
  v32 = v45 & 0xFFFFFF;
  swift_retain();
  swift_bridgeObjectRetain();
  specialized DisplayList.GraphicsRenderer.render(at:do:)((unint64_t *)&aBlock, a5, (uint64_t)a5, a3, v32, v44);
  swift_release();
  result = swift_bridgeObjectRelease();
  v34 = fmax(a5[5].n128_f64[0] - a9, 0.000001);
  if (v34 < INFINITY)
  {
    type metadata accessor for OS_dispatch_queue();
    v35 = (void *)static OS_dispatch_queue.main.getter();
    v36 = swift_allocObject();
    swift_beginAccess();
    MEMORY[0x23B7C9E44](a6 + 16);
    *(_QWORD *)(v36 + 24) = *(_QWORD *)(a6 + 24);
    swift_unknownObjectWeakInit();
    swift_unknownObjectRelease();
    v37 = swift_allocObject();
    *(_QWORD *)(v37 + 16) = v36;
    *(double *)(v37 + 24) = v34;
    v50 = partial apply for closure #1 in closure #1 in DisplayList.ViewRasterizer.drawingContent(list:time:);
    v51 = v37;
    aBlock = MEMORY[0x24BDAC760];
    v47 = 1107296256;
    v48 = thunk for @escaping @callee_guaranteed () -> ();
    v49 = &block_descriptor_23;
    v38 = _Block_copy(&aBlock);
    swift_release();
    v39 = v43;
    static DispatchQoS.unspecified.getter();
    aBlock = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
    type metadata accessor for [DispatchWorkItemFlags]();
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t (*)(uint64_t))type metadata accessor for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x23B7C6820](0, v39, v17, v38);
    _Block_release(v38);

    (*(void (**)(_BYTE *, uint64_t))(v15 + 8))(v17, v14);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v19 + 8))(v39, v18);
  }
  return result;
}

uint64_t closure #1 in closure #1 in DisplayList.ViewRasterizer.drawingContent(list:time:)(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t ObjectType;

  v4 = a1 + 16;
  swift_beginAccess();
  result = MEMORY[0x23B7C9E44](v4);
  if (result)
  {
    v6 = *(_QWORD *)(a1 + 24);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, double))(*(_QWORD *)(v6 + 8) + 40))(ObjectType, a2);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t DisplayList.ViewRasterizer.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of weak GestureGraphDelegate?(v0 + 24);
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for ViewRendererBase.destroy(rootView:) in conformance DisplayList.ViewRasterizer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  void *v3;

  v1 = *(_QWORD *)(v0 + 16);
  result = swift_beginAccess();
  v3 = *(void **)(v0 + 40);
  if (v3)
    return CoreViewRemoveFromSuperview(v1 & 3, v3);
  __break(1u);
  return result;
}

uint64_t specialized DisplayList.ViewRenderer.updateRenderer(rootView:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  void *v9;
  uint64_t v10;
  char v11;
  char v12;
  int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t result;
  char v19;
  int v20;
  char v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  _BYTE v32[4];
  int v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;

  v5 = v1;
  if (*(_BYTE *)(v1 + 80) == 1)
  {
    v2 = a1;
    *(_BYTE *)(v1 + 80) = 0;
    swift_beginAccess();
    v6 = 1;
    if (*(_QWORD *)(v1 + 24))
      v6 = 2;
    if (v6 != *(unsigned __int8 *)(v1 + 56))
    {
      v4 = v1 + 64;
      if (*(_QWORD *)(v1 + 64))
      {
        v7 = *(_QWORD *)(v1 + 72);
        ObjectType = swift_getObjectType();
        v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
        swift_unknownObjectRetain();
        v8(v2, ObjectType, v7);
        swift_unknownObjectRelease();
      }
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v1 + 72) = 0;
      swift_unknownObjectRelease();
      *(_BYTE *)(v1 + 56) = 0;
    }
    v9 = *(void **)(v1 + 64);
    v10 = *(_QWORD *)(v5 + 24);
    if (v9)
    {
      if (v10)
      {
        v30 = *(_BYTE *)(v10 + 16);
        ObjectType = *(unsigned int *)(v10 + 20);
        v4 = *(unsigned __int8 *)(v10 + 24);
        v11 = *(_BYTE *)(v10 + 25);
        v12 = *(_BYTE *)(v10 + 26);
        v13 = *(unsigned __int8 *)(v10 + 27);
        v14 = *(_BYTE *)(v10 + 28);
        v15 = *(_QWORD *)(v10 + 32);
        if (object_getClass(v9) == (Class)_TtCE7SwiftUIVS_11DisplayListP33_21FFA3C7D88AC65BB559906758271BFC14ViewRasterizer)
          v2 = (uint64_t)v9;
        else
          v2 = 0;
        *(_BYTE *)(v2 + 48) = v30;
        *(_DWORD *)(v2 + 52) = ObjectType;
        *(_BYTE *)(v2 + 56) = v4;
        *(_BYTE *)(v2 + 57) = v11;
        *(_BYTE *)(v2 + 58) = v12;
        *(_BYTE *)(v2 + 59) = v13;
        *(_BYTE *)(v2 + 60) = v14;
        *(_QWORD *)(v2 + 64) = v15;
        v16 = *(_QWORD *)(v2 + 72);
        if (v13)
          v17 = 1;
        else
          v17 = 3;
        swift_beginAccess();
        *(_BYTE *)(v16 + 112) = v17;
        swift_beginAccess();
        MEMORY[0x23B7C9E44](v5 + 40);
        *(_QWORD *)(v2 + 32) = *(_QWORD *)(v5 + 48);
        swift_unknownObjectWeakAssign();
        swift_unknownObjectRelease();
        result = *(_QWORD *)(v5 + 64);
        if (result)
          return result;
        goto LABEL_24;
      }
    }
    else
    {
      if (!v10)
      {
        ObjectType = *(_QWORD *)(v5 + 16);
        swift_beginAccess();
        MEMORY[0x23B7C9E44](v5 + 40);
        v4 = *(_QWORD *)(v5 + 48);
        type metadata accessor for DisplayList.ViewUpdater();
        v2 = swift_allocObject();
        *(_QWORD *)(v2 + 24) = 0;
        swift_unknownObjectWeakInit();
        *(_DWORD *)(v2 + 140) = 0;
        *(_QWORD *)(v2 + 144) = 0;
        if (one-time initialization token for invalid != -1)
          goto LABEL_25;
        goto LABEL_23;
      }
      v19 = *(_BYTE *)(v10 + 16);
      v20 = *(_DWORD *)(v10 + 20);
      v21 = *(_BYTE *)(v10 + 24);
      v22 = *(_BYTE *)(v10 + 25);
      v23 = *(_BYTE *)(v10 + 26);
      ObjectType = *(unsigned __int8 *)(v10 + 27);
      v29 = *(_BYTE *)(v10 + 28);
      v28 = *(_QWORD *)(v10 + 32);
      v40 = *(_QWORD *)(v5 + 16);
      swift_beginAccess();
      v31 = MEMORY[0x23B7C9E44](v5 + 40);
      v24 = *(_QWORD *)(v5 + 48);
      v32[0] = v19;
      v33 = v20;
      v34 = v21;
      v35 = v22;
      v36 = v23;
      v37 = ObjectType;
      v38 = v29;
      v39 = v28;
      type metadata accessor for DisplayList.ViewRasterizer();
      v4 = swift_allocObject();
      swift_retain();
      swift_unknownObjectRetain();
      *(_QWORD *)(v5 + 64) = DisplayList.ViewRasterizer.init(platform:host:rootView:options:)(&v40, v31, v24, (void *)v2, (uint64_t)v32);
      *(_QWORD *)(v5 + 72) = &protocol witness table for DisplayList.ViewRasterizer;
      swift_unknownObjectRelease();
      *(_BYTE *)(v5 + 56) = 2;
      swift_release();
    }
  }
  result = *(_QWORD *)(v5 + 64);
  if (result)
    return result;
  do
  {
LABEL_24:
    __break(1u);
LABEL_25:
    swift_once();
LABEL_23:
    *(_QWORD *)(v2 + 152) = static DisplayList.ViewRenderer.Environment.invalid;
    v25 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v2 + 160) = MEMORY[0x24BEE4AF8];
    *(_WORD *)(v2 + 168) = 0;
    *(_BYTE *)(v2 + 170) = 0;
    *(_QWORD *)(v2 + 176) = 0;
    *(_WORD *)(v2 + 184) = 257;
    *(_QWORD *)(v2 + 24) = v4;
    swift_unknownObjectWeakAssign();
    v26 = MEMORY[0x24BEE4B00];
    *(_QWORD *)(v2 + 32) = ObjectType;
    *(_QWORD *)(v2 + 40) = v26;
    v27 = MEMORY[0x24BEE4B08];
    *(_QWORD *)(v2 + 48) = v26;
    *(_QWORD *)(v2 + 56) = v27;
    *(_QWORD *)(v2 + 64) = v26;
    *(_QWORD *)(v2 + 72) = v26;
    *(_QWORD *)(v2 + 80) = v26;
    *(_QWORD *)(v2 + 88) = 0;
    *(_DWORD *)(v2 + 124) = 0;
    *(_QWORD *)(v2 + 104) = 0;
    *(_QWORD *)(v2 + 112) = 0;
    *(_QWORD *)(v2 + 96) = v25;
    *(_BYTE *)(v2 + 120) = 0;
    *(_QWORD *)(v2 + 128) = v25;
    *(_WORD *)(v2 + 136) = 0;
    *(_BYTE *)(v2 + 138) = 0;
    swift_unknownObjectRelease();
    *(_QWORD *)(v5 + 64) = v2;
    *(_QWORD *)(v5 + 72) = &protocol witness table for DisplayList.ViewUpdater;
    swift_unknownObjectRelease();
    *(_BYTE *)(v5 + 56) = 1;
    result = *(_QWORD *)(v5 + 64);
  }
  while (!result);
  return result;
}

uint64_t sub_234F0AE94@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 32);
  *a2 = *(_QWORD *)(v3 + 24);
  a2[1] = v4;
  return swift_retain();
}

uint64_t sub_234F0AEE8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = *a1;
  v4 = *a1 + 40;
  swift_beginAccess();
  result = MEMORY[0x23B7C9E44](v4);
  v6 = *(_QWORD *)(v3 + 48);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_234F0AF40(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v3 + 48) = v2;
  result = swift_unknownObjectWeakAssign();
  *(_BYTE *)(v3 + 80) = 1;
  return result;
}

uint64_t type metadata accessor for DisplayList.ViewRenderer()
{
  return objc_opt_self();
}

uint64_t method lookup function for DisplayList.ViewRenderer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DisplayList.ViewRenderer.__allocating_init(platform:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

ValueMetadata *type metadata accessor for DisplayList.ViewRenderer.Environment()
{
  return &type metadata for DisplayList.ViewRenderer.Environment;
}

uint64_t type metadata accessor for DisplayList.ViewRasterizer()
{
  return objc_opt_self();
}

uint64_t storeEnumTagSinglePayload for DisplayList.ViewRenderer.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_234F0B058 + 4 * byte_2352B0AC5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_234F0B08C + 4 * asc_2352B0AC0[v4]))();
}

uint64_t sub_234F0B08C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F0B094(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234F0B09CLL);
  return result;
}

uint64_t sub_234F0B0A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234F0B0B0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_234F0B0B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F0B0BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for DisplayList.ViewRenderer.State()
{
  return &unk_250610AF8;
}

unint64_t lazy protocol witness table accessor for type DisplayList.ViewRenderer.State and conformance DisplayList.ViewRenderer.State()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayList.ViewRenderer.State and conformance DisplayList.ViewRenderer.State;
  if (!lazy protocol witness table cache variable for type DisplayList.ViewRenderer.State and conformance DisplayList.ViewRenderer.State)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DisplayList.ViewRenderer.State, &unk_250610AF8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.ViewRenderer.State and conformance DisplayList.ViewRenderer.State);
  }
  return result;
}

uint64_t sub_234F0B120()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_234F0B144()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DisplayList.ViewRasterizer.drawingContent(list:time:)(uint64_t *a1, double a2, double a3)
{
  uint64_t v3;

  return closure #1 in DisplayList.ViewRasterizer.drawingContent(list:time:)(a1, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 32), *(unsigned __int16 *)(v3 + 40) | (*(unsigned __int8 *)(v3 + 42) << 16), *(__n128 **)(v3 + 48), *(_QWORD *)(v3 + 56), a2, a3, *(double *)(v3 + 24));
}

uint64_t sub_234F0B198()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in DisplayList.ViewRasterizer.drawingContent(list:time:)()
{
  uint64_t v0;

  return closure #1 in closure #1 in DisplayList.ViewRasterizer.drawingContent(list:time:)(*(_QWORD *)(v0 + 16), *(double *)(v0 + 24));
}

uint64_t block_copy_helper_23(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_23()
{
  return swift_release();
}

void InsettableShape.strokeBorder<A>(_:lineWidth:antialiased:)(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, double a8@<D0>)
{
  double v8[5];

  v8[0] = a8;
  v8[1] = 0.0;
  v8[2] = 10.0;
  *(_QWORD *)&v8[3] = MEMORY[0x24BEE4AF8];
  v8[4] = 0.0;
  InsettableShape.strokeBorder<A>(_:style:antialiased:)(a1, v8, a2, a3, a4, a5, a6, a7);
}

void InsettableShape.strokeBorder<A>(_:style:antialiased:)(uint64_t a1@<X0>, double *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v23 = a5;
  v24 = a7;
  v20 = a3;
  v21 = a8;
  v22 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v19 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v13 = (char *)&v19 - v12;
  v14 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  v16 = type metadata accessor for _StrokedShape(0, AssociatedTypeWitness, v14, v15);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v19 - v17;
  (*(void (**)(uint64_t, uint64_t, double))(a6 + 32))(a4, a6, *a2 * 0.5);
  Shape.stroke(style:)((uint64_t)a2, AssociatedTypeWitness, v14, (uint64_t)v18);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v13, AssociatedTypeWitness);
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for _StrokedShape<A>, v16);
  Shape.fill<A>(_:style:)(v22, v16, v23, v24, v21);
}

uint64_t sub_234F0B394()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void InsettableShape.strokeBorder(style:antialiased:)(double *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;

  v19 = a2;
  v20 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v18 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (char *)&v17 - v9;
  v11 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  v13 = type metadata accessor for _StrokedShape(0, AssociatedTypeWitness, v11, v12);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v17 - v14;
  (*(void (**)(uint64_t, uint64_t, double))(a4 + 32))(a3, a4, *a1 * 0.5);
  Shape.stroke(style:)((uint64_t)a1, AssociatedTypeWitness, v11, (uint64_t)v15);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v10, AssociatedTypeWitness);
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for _StrokedShape<A>, v13);
  if ((v19 & 1) != 0)
    v16 = 256;
  else
    v16 = 0;
  Shape.fill(style:)(v16, v13, v20);
}

uint64_t sub_234F0B51C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

void InsettableShape.strokeBorder(lineWidth:antialiased:)(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  double v5[5];

  v5[0] = a5;
  v5[1] = 0.0;
  v5[2] = 10.0;
  *(_QWORD *)&v5[3] = MEMORY[0x24BEE4AF8];
  v5[4] = 0.0;
  InsettableShape.strokeBorder(style:antialiased:)(v5, a1, a2, a3, a4);
}

void Rectangle._Inset.amount.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*Rectangle._Inset.amount.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

BOOL Rectangle._Inset.path(in:)@<W0>(uint64_t a1@<X8>, double a2@<D0>, CGFloat a3@<D4>)
{
  double x;
  double y;
  double width;
  double height;
  _BOOL8 result;
  double v12;
  double v13;
  double v14;
  double v15;
  char v16;
  CGRect v17;

  v17 = CGRectInset(*(CGRect *)&a2, a3, a3);
  x = v17.origin.x;
  y = v17.origin.y;
  width = v17.size.width;
  height = v17.size.height;
  result = CGRectIsNull(v17);
  v12 = 0.0;
  if (result)
    v13 = 0.0;
  else
    v13 = x;
  if (result)
    v14 = 0.0;
  else
    v14 = y;
  if (result)
    v15 = 0.0;
  else
    v15 = width;
  if (!result)
    v12 = height;
  *(double *)a1 = v13;
  *(double *)(a1 + 8) = v14;
  if (result)
    v16 = 6;
  else
    v16 = 0;
  *(double *)(a1 + 16) = v15;
  *(double *)(a1 + 24) = v12;
  *(_BYTE *)(a1 + 32) = v16;
  return result;
}

uint64_t (*Rectangle._Inset.animatableData.modify(_QWORD *a1))()
{
  _QWORD *v1;

  a1[1] = v1;
  *a1 = *v1;
  return ViewSize.width.modify;
}

BOOL protocol witness for Shape.path(in:) in conformance Rectangle._Inset@<W0>(uint64_t a1@<X8>, double a2@<D0>)
{
  CGFloat *v5;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  _BOOL8 result;
  char v12;
  CGRect v13;

  v13 = CGRectInset(*(CGRect *)&a2, *v5, *v5);
  x = v13.origin.x;
  y = v13.origin.y;
  width = v13.size.width;
  height = v13.size.height;
  result = CGRectIsNull(v13);
  if (result)
  {
    v12 = 6;
    x = 0.0;
    y = 0.0;
    width = 0.0;
    height = 0.0;
  }
  else
  {
    v12 = 0;
  }
  *(CGFloat *)a1 = x;
  *(CGFloat *)(a1 + 8) = y;
  *(CGFloat *)(a1 + 16) = width;
  *(CGFloat *)(a1 + 24) = height;
  *(_BYTE *)(a1 + 32) = v12;
  return result;
}

void RoundedRectangle.inset(by:)(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v2;
  char v3;

  v3 = *(_BYTE *)(v2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  *(_BYTE *)(a1 + 16) = v3;
  *(double *)(a1 + 24) = a2;
}

uint64_t RoundedRectangle._Inset.init(base:amount:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  char v3;

  v3 = *(_BYTE *)(result + 16);
  *(_OWORD *)a2 = *(_OWORD *)result;
  *(_BYTE *)(a2 + 16) = v3;
  *(double *)(a2 + 24) = a3;
  return result;
}

__n128 RoundedRectangle._Inset.base.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unsigned __int8 v2;
  __n128 result;

  v2 = v1[1].n128_u8[0];
  result = *v1;
  *a1 = *v1;
  a1[1].n128_u8[0] = v2;
  return result;
}

__n128 RoundedRectangle._Inset.base.setter(__n128 *a1)
{
  __n128 *v1;
  unsigned __int8 v2;
  __n128 result;

  v2 = a1[1].n128_u8[0];
  result = *a1;
  *v1 = *a1;
  v1[1].n128_u8[0] = v2;
  return result;
}

uint64_t (*RoundedRectangle._Inset.base.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double RoundedRectangle._Inset.amount.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

void RoundedRectangle._Inset.amount.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 24) = a1;
}

uint64_t (*RoundedRectangle._Inset.amount.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t RoundedRectangle._Inset.path(in:)@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v5;
  double v7;
  double v8;
  char v9;
  double v10;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double v15;
  double v16;
  uint64_t result;
  char v18;
  CGRect v19;
  CGRect v20;

  v7 = *(double *)v5;
  v8 = *(double *)(v5 + 8);
  v9 = *(_BYTE *)(v5 + 16);
  v10 = *(double *)(v5 + 24);
  v19 = CGRectInset(*(CGRect *)&a2, v10, v10);
  x = v19.origin.x;
  y = v19.origin.y;
  width = v19.size.width;
  height = v19.size.height;
  if (v7 - v10 > 0.0)
    v15 = v7 - v10;
  else
    v15 = 0.0;
  if (v8 - v10 > 0.0)
    v16 = v8 - v10;
  else
    v16 = 0.0;
  if (CGRectIsNull(v19))
  {
    result = 0;
    v18 = 6;
    y = 0.0;
    width = 0.0;
    height = 0.0;
  }
  else if (v15 == 0.0 && v16 == 0.0
         || (v20.origin.x = x, v20.origin.y = y, v20.size.width = width, v20.size.height = height, CGRectIsInfinite(v20)))
  {
    v18 = 0;
    result = *(_QWORD *)&x;
  }
  else
  {
    result = swift_allocObject();
    *(CGFloat *)(result + 16) = x;
    *(CGFloat *)(result + 24) = y;
    *(CGFloat *)(result + 32) = width;
    *(CGFloat *)(result + 40) = height;
    v18 = 2;
    y = 0.0;
    *(double *)(result + 48) = v15;
    *(double *)(result + 56) = v16;
    width = 0.0;
    height = 0.0;
    *(_BYTE *)(result + 64) = v9;
  }
  *(_QWORD *)a1 = result;
  *(CGFloat *)(a1 + 8) = y;
  *(CGFloat *)(a1 + 16) = width;
  *(CGFloat *)(a1 + 24) = height;
  *(_BYTE *)(a1 + 32) = v18;
  return result;
}

uint64_t sub_234F0B86C()
{
  return swift_deallocObject();
}

void RoundedRectangle._Inset.layoutDirectionBehavior.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

double RoundedRectangle._Inset.animatableData.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void RoundedRectangle._Inset.animatableData.setter(double a1, double a2, double a3)
{
  double *v3;

  *v3 = a1;
  v3[1] = a2;
  v3[3] = a3;
}

uint64_t (*RoundedRectangle._Inset.animatableData.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(a1 + 24) = v1;
  v2 = *(_QWORD *)(v1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_QWORD *)(a1 + 16) = v2;
  return RoundedRectangle._Inset.animatableData.modify;
}

double RoundedRectangle._Inset.inset(by:)@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v2;
  char v3;
  double v4;
  double result;

  v3 = *(_BYTE *)(v2 + 16);
  v4 = *(double *)(v2 + 24);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  *(_BYTE *)(a1 + 16) = v3;
  result = v4 + a2;
  *(double *)(a1 + 24) = result;
  return result;
}

double protocol witness for InsettableShape.inset(by:) in conformance RoundedRectangle._Inset@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v2;
  char v3;
  double v4;
  double result;

  v3 = *(_BYTE *)(v2 + 16);
  v4 = *(double *)(v2 + 24);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  *(_BYTE *)(a1 + 16) = v3;
  result = v4 + a2;
  *(double *)(a1 + 24) = result;
  return result;
}

double protocol witness for Shape.path(in:) in conformance RoundedRectangle._Inset@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  double result;
  __int128 v4;
  _OWORD v5[2];
  char v6;

  RoundedRectangle._Inset.path(in:)((uint64_t)v5, a2);
  result = *(double *)v5;
  v4 = v5[1];
  *(_OWORD *)a1 = v5[0];
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v6;
  return result;
}

double protocol witness for Animatable.animatableData.getter in conformance RoundedRectangle._Inset@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  result = *(double *)(v1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(double *)(a1 + 16) = result;
  return result;
}

double protocol witness for Animatable.animatableData.setter in conformance RoundedRectangle._Inset(uint64_t a1)
{
  uint64_t v1;
  double result;

  result = *(double *)(a1 + 16);
  *(_OWORD *)v1 = *(_OWORD *)a1;
  *(double *)(v1 + 24) = result;
  return result;
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance RoundedRectangle._Inset(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(a1 + 24) = v1;
  v2 = *(_QWORD *)(v1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_QWORD *)(a1 + 16) = v2;
  return RoundedRectangle._Inset.animatableData.modify;
}

double RoundedRectangle._Inset.animatableData.modify(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(a1 + 24);
  result = *(double *)(a1 + 16);
  *(_OWORD *)v1 = *(_OWORD *)a1;
  *(double *)(v1 + 24) = result;
  return result;
}

void protocol witness for InsettableShape.inset(by:) in conformance RoundedRectangle(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v2;
  char v3;

  v3 = *(_BYTE *)(v2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  *(_BYTE *)(a1 + 16) = v3;
  *(double *)(a1 + 24) = a2;
}

void UnevenRoundedRectangle.inset(by:)(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v2;
  char v3;
  __int128 v4;

  v3 = *(_BYTE *)(v2 + 32);
  v4 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v3;
  *(double *)(a1 + 40) = a2;
}

uint64_t UnevenRoundedRectangle._Inset.init(base:amount:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  char v3;
  __int128 v4;

  v3 = *(_BYTE *)(result + 32);
  v4 = *(_OWORD *)(result + 16);
  *(_OWORD *)a2 = *(_OWORD *)result;
  *(_OWORD *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 32) = v3;
  *(double *)(a2 + 40) = a3;
  return result;
}

__n128 UnevenRoundedRectangle._Inset.base.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  __n128 result;
  __int128 v4;

  v2 = *(_BYTE *)(v1 + 32);
  result = *(__n128 *)v1;
  v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v2;
  return result;
}

__n128 UnevenRoundedRectangle._Inset.base.setter(uint64_t a1)
{
  uint64_t v1;
  char v2;
  __n128 result;
  __int128 v4;

  v2 = *(_BYTE *)(a1 + 32);
  result = *(__n128 *)a1;
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v1 = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 16) = v4;
  *(_BYTE *)(v1 + 32) = v2;
  return result;
}

uint64_t (*UnevenRoundedRectangle._Inset.base.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double UnevenRoundedRectangle._Inset.amount.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 40);
}

void UnevenRoundedRectangle._Inset.amount.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 40) = a1;
}

uint64_t (*UnevenRoundedRectangle._Inset.amount.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

_QWORD *UnevenRoundedRectangle._Inset.path(in:)@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v5;
  double v7;
  double v8;
  double v9;
  char v10;
  double v11;
  double x;
  double y;
  double width;
  double height;
  char v16;
  _QWORD *result;
  __int128 v18;
  __int128 v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  __int128 v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  CGRect v32;

  v7 = *(double *)(v5 + 8);
  v24 = *(double *)v5;
  v9 = *(double *)(v5 + 16);
  v8 = *(double *)(v5 + 24);
  v10 = *(_BYTE *)(v5 + 32);
  v11 = *(double *)(v5 + 40);
  v32 = CGRectInset(*(CGRect *)&a2, v11, v11);
  x = v32.origin.x;
  y = v32.origin.y;
  width = v32.size.width;
  height = v32.size.height;
  v25 = 0u;
  v26 = 0u;
  v16 = 6;
  v27 = 6;
  v28 = 0x3FF0000000000000;
  v29 = 0u;
  v30 = 0x3FF0000000000000;
  v31 = 0u;
  result = (_QWORD *)CGRectIsNull(v32);
  v18 = 0uLL;
  v19 = 0uLL;
  if ((result & 1) == 0)
  {
    if (v8 - v11 > 0.0)
      v20 = v8 - v11;
    else
      v20 = 0.0;
    if (v9 - v11 > 0.0)
      v21 = v9 - v11;
    else
      v21 = 0.0;
    if (v7 - v11 > 0.0)
      v22 = v7 - v11;
    else
      v22 = 0.0;
    if (v24 - v11 > 0.0)
      v23 = v24 - v11;
    else
      v23 = 0.0;
    result = specialized Path.withMutableBuffer(do:)((uint64_t)&v25, &v28, v10, x, y, width, height, v23, v22, v21, v20);
    v18 = v25;
    v19 = v26;
    v16 = v27;
  }
  *(_OWORD *)a1 = v18;
  *(_OWORD *)(a1 + 16) = v19;
  *(_BYTE *)(a1 + 32) = v16;
  return result;
}

double UnevenRoundedRectangle._Inset.animatableData.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;
  __int128 v3;

  result = *(double *)(v1 + 40);
  v3 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v3;
  *(double *)(a1 + 32) = result;
  return result;
}

double UnevenRoundedRectangle._Inset.animatableData.setter(uint64_t a1)
{
  uint64_t v1;
  double result;
  __int128 v3;

  result = *(double *)(a1 + 32);
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v1 = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 16) = v3;
  *(double *)(v1 + 40) = result;
  return result;
}

uint64_t (*UnevenRoundedRectangle._Inset.animatableData.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  v4 = *(_QWORD *)(v1 + 40);
  v5 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)v3 = *(_OWORD *)v1;
  *((_OWORD *)v3 + 1) = v5;
  v3[4] = v4;
  return UnevenRoundedRectangle._Inset.animatableData.modify;
}

double UnevenRoundedRectangle._Inset.inset(by:)@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v2;
  char v3;
  double v4;
  __int128 v5;
  double result;

  v3 = *(_BYTE *)(v2 + 32);
  v4 = *(double *)(v2 + 40);
  v5 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  *(_OWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 32) = v3;
  result = v4 + a2;
  *(double *)(a1 + 40) = result;
  return result;
}

double protocol witness for InsettableShape.inset(by:) in conformance UnevenRoundedRectangle._Inset@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v2;
  char v3;
  double v4;
  __int128 v5;
  double result;

  v3 = *(_BYTE *)(v2 + 32);
  v4 = *(double *)(v2 + 40);
  v5 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  *(_OWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 32) = v3;
  result = v4 + a2;
  *(double *)(a1 + 40) = result;
  return result;
}

double protocol witness for Shape.path(in:) in conformance UnevenRoundedRectangle._Inset@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  double result;
  __int128 v4;
  _OWORD v5[2];
  char v6;

  UnevenRoundedRectangle._Inset.path(in:)((uint64_t)v5, a2);
  result = *(double *)v5;
  v4 = v5[1];
  *(_OWORD *)a1 = v5[0];
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v6;
  return result;
}

double protocol witness for Animatable.animatableData.getter in conformance UnevenRoundedRectangle._Inset@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;
  __int128 v3;

  result = *(double *)(v1 + 40);
  v3 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v3;
  *(double *)(a1 + 32) = result;
  return result;
}

double protocol witness for Animatable.animatableData.setter in conformance UnevenRoundedRectangle._Inset(uint64_t a1)
{
  uint64_t v1;
  double result;
  __int128 v3;

  result = *(double *)(a1 + 32);
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v1 = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 16) = v3;
  *(double *)(v1 + 40) = result;
  return result;
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance UnevenRoundedRectangle._Inset(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  v4 = *(_QWORD *)(v1 + 40);
  v5 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)v3 = *(_OWORD *)v1;
  *((_OWORD *)v3 + 1) = v5;
  v3[4] = v4;
  return UnevenRoundedRectangle._Inset.animatableData.modify;
}

double UnevenRoundedRectangle._Inset.animatableData.modify(void **a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  double result;

  v1 = *a1;
  v2 = v1[5];
  v3 = v1[4];
  v4 = *((_OWORD *)v1 + 1);
  *(_OWORD *)v2 = *(_OWORD *)v1;
  *(_OWORD *)(v2 + 16) = v4;
  *(_QWORD *)(v2 + 40) = v3;
  free(v1);
  return result;
}

void protocol witness for InsettableShape.inset(by:) in conformance UnevenRoundedRectangle(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v2;
  char v3;
  __int128 v4;

  v3 = *(_BYTE *)(v2 + 32);
  v4 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v3;
  *(double *)(a1 + 40) = a2;
}

void Capsule.inset(by:)(unint64_t *a1@<X8>, double a2@<D0>)
{
  unsigned __int8 *v2;

  *a1 = *(_QWORD *)&a2 & 0xFFFFFFFFFFFFFFFELL | *v2;
}

void Capsule._Inset.amount.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*Capsule._Inset.amount.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t Capsule._Inset.path(in:)@<X0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>, CGFloat a6@<D4>)
{
  unsigned int v12;
  char v13;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double v18;
  double v19;
  uint64_t result;
  char v21;
  double v22;
  CGRect v23;
  CGRect v24;
  CGRect v25;
  CGRect v26;
  CGRect v27;

  if (one-time initialization token for v5 != -1)
    swift_once();
  v12 = static Semantics.v5;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FAB4 == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0)
    {
LABEL_7:
      v13 = 0;
      goto LABEL_10;
    }
  }
  else if (static Semantics.forced < v12)
  {
    goto LABEL_7;
  }
  v13 = LOBYTE(a6) & 1;
  *(_QWORD *)&a6 &= ~1uLL;
LABEL_10:
  v23.origin.x = a2;
  v23.origin.y = a3;
  v23.size.width = a4;
  v23.size.height = a5;
  v24 = CGRectInset(v23, a6, a6);
  x = v24.origin.x;
  y = v24.origin.y;
  width = v24.size.width;
  height = v24.size.height;
  v18 = CGRectGetWidth(v24);
  v25.origin.x = x;
  v25.origin.y = y;
  v25.size.width = width;
  v25.size.height = height;
  v19 = CGRectGetHeight(v25);
  if (v19 < v18)
    v18 = v19;
  v26.origin.x = x;
  v26.origin.y = y;
  v26.size.width = width;
  v26.size.height = height;
  if (CGRectIsNull(v26))
  {
    result = 0;
    v21 = 6;
    y = 0.0;
    width = 0.0;
    height = 0.0;
  }
  else
  {
    v22 = v18 * 0.5;
    if (v22 == 0.0
      || (v27.origin.x = x, v27.origin.y = y, v27.size.width = width, v27.size.height = height, CGRectIsInfinite(v27)))
    {
      v21 = 0;
      result = *(_QWORD *)&x;
    }
    else
    {
      result = swift_allocObject();
      *(CGFloat *)(result + 16) = x;
      *(CGFloat *)(result + 24) = y;
      *(CGFloat *)(result + 32) = width;
      *(CGFloat *)(result + 40) = height;
      v21 = 2;
      y = 0.0;
      *(double *)(result + 48) = v22;
      *(double *)(result + 56) = v22;
      width = 0.0;
      height = 0.0;
      *(_BYTE *)(result + 64) = v13;
    }
  }
  *(_QWORD *)a1 = result;
  *(CGFloat *)(a1 + 8) = y;
  *(CGFloat *)(a1 + 16) = width;
  *(CGFloat *)(a1 + 24) = height;
  *(_BYTE *)(a1 + 32) = v21;
  return result;
}

double Capsule._Inset.animatableData.getter(double a1)
{
  double result;

  *(_QWORD *)&result = *(_QWORD *)&a1 & 0xFFFFFFFFFFFFFFFELL;
  return result;
}

void Capsule._Inset.animatableData.setter(double a1)
{
  unint64_t *v1;

  *v1 = *(_QWORD *)&a1 & 0xFFFFFFFFFFFFFFFELL | *v1 & 1;
}

uint64_t (*Capsule._Inset.animatableData.modify(unint64_t *a1))()
{
  _QWORD *v1;

  *a1 = *v1 & 0xFFFFFFFFFFFFFFFELL;
  a1[1] = (unint64_t)v1;
  return Capsule._Inset.animatableData.modify;
}

double Capsule._Inset.inset(by:)(double a1, double a2)
{
  double result;

  *(_QWORD *)&result = COERCE_UNSIGNED_INT64(COERCE_DOUBLE(*(_QWORD *)&a2 & 0xFFFFFFFFFFFFFFFELL) + a1) & 0xFFFFFFFFFFFFFFFELL | LOBYTE(a2) & 1;
  return result;
}

double protocol witness for InsettableShape.inset(by:) in conformance Capsule._Inset@<D0>(unint64_t *a1@<X8>, double a2@<D0>)
{
  _QWORD *v2;
  double result;

  result = COERCE_DOUBLE(*v2 & 0xFFFFFFFFFFFFFFFELL) + a2;
  *a1 = *(_QWORD *)&result & 0xFFFFFFFFFFFFFFFELL | *v2 & 1;
  return result;
}

double protocol witness for Shape.path(in:) in conformance Capsule._Inset@<D0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  CGFloat *v5;
  double result;
  __int128 v8;
  _OWORD v9[2];
  char v10;

  Capsule._Inset.path(in:)((uint64_t)v9, a2, a3, a4, a5, *v5);
  result = *(double *)v9;
  v8 = v9[1];
  *(_OWORD *)a1 = v9[0];
  *(_OWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 32) = v10;
  return result;
}

void protocol witness for Animatable.animatableData.getter in conformance Capsule._Inset(unint64_t *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1 & 0xFFFFFFFFFFFFFFFELL;
}

_QWORD *protocol witness for Animatable.animatableData.setter in conformance Capsule._Inset(_QWORD *result)
{
  unint64_t *v1;

  *v1 = *result & 0xFFFFFFFFFFFFFFFELL | *v1 & 1;
  return result;
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance Capsule._Inset(unint64_t *a1))()
{
  _QWORD *v1;

  *a1 = *v1 & 0xFFFFFFFFFFFFFFFELL;
  a1[1] = (unint64_t)v1;
  return Capsule._Inset.animatableData.modify;
}

uint64_t Capsule._Inset.animatableData.modify(uint64_t result)
{
  **(_QWORD **)(result + 8) = *(_QWORD *)result & 0xFFFFFFFFFFFFFFFELL | **(_QWORD **)(result + 8) & 1;
  return result;
}

void protocol witness for InsettableShape.inset(by:) in conformance Capsule(unint64_t *a1@<X8>, double a2@<D0>)
{
  unsigned __int8 *v2;

  *a1 = *(_QWORD *)&a2 & 0xFFFFFFFFFFFFFFFELL | *v2;
}

void Ellipse._Inset.amount.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*Ellipse._Inset.amount.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

BOOL Ellipse._Inset.path(in:)@<W0>(uint64_t a1@<X8>, double a2@<D0>, CGFloat a3@<D4>)
{
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  _BOOL8 result;
  char v12;
  CGRect v13;
  CGRect v14;

  v13 = CGRectInset(*(CGRect *)&a2, a3, a3);
  x = v13.origin.x;
  y = v13.origin.y;
  width = v13.size.width;
  height = v13.size.height;
  result = CGRectIsNull(v13);
  if (result)
  {
    v12 = 6;
    x = 0.0;
    y = 0.0;
    width = 0.0;
    height = 0.0;
  }
  else
  {
    v14.origin.x = x;
    v14.origin.y = y;
    v14.size.width = width;
    v14.size.height = height;
    result = CGRectIsInfinite(v14);
    v12 = !result;
  }
  *(CGFloat *)a1 = x;
  *(CGFloat *)(a1 + 8) = y;
  *(CGFloat *)(a1 + 16) = width;
  *(CGFloat *)(a1 + 24) = height;
  *(_BYTE *)(a1 + 32) = v12;
  return result;
}

uint64_t (*Ellipse._Inset.animatableData.modify(_QWORD *a1))()
{
  _QWORD *v1;

  a1[1] = v1;
  *a1 = *v1;
  return ViewSize.width.modify;
}

BOOL protocol witness for Shape.path(in:) in conformance Ellipse._Inset@<W0>(uint64_t a1@<X8>, double a2@<D0>)
{
  CGFloat *v5;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  _BOOL8 result;
  char v12;
  CGRect v13;
  CGRect v14;

  v13 = CGRectInset(*(CGRect *)&a2, *v5, *v5);
  x = v13.origin.x;
  y = v13.origin.y;
  width = v13.size.width;
  height = v13.size.height;
  result = CGRectIsNull(v13);
  if (result)
  {
    v12 = 6;
    x = 0.0;
    y = 0.0;
    width = 0.0;
    height = 0.0;
  }
  else
  {
    v14.origin.x = x;
    v14.origin.y = y;
    v14.size.width = width;
    v14.size.height = height;
    result = CGRectIsInfinite(v14);
    v12 = !result;
  }
  *(CGFloat *)a1 = x;
  *(CGFloat *)(a1 + 8) = y;
  *(CGFloat *)(a1 + 16) = width;
  *(CGFloat *)(a1 + 24) = height;
  *(_BYTE *)(a1 + 32) = v12;
  return result;
}

void Circle.inset(by:)(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
}

void Circle._Inset.amount.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*Circle._Inset.amount.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double Circle._Inset.path(in:)@<D0>(uint64_t a1@<X8>, double a2@<D0>, CGFloat a3@<D4>)
{
  double result;
  __int128 v8;
  _OWORD v9[2];
  char v10;
  CGRect v11;

  v11 = CGRectInset(*(CGRect *)&a2, a3, a3);
  specialized Circle.path(in:)((uint64_t)v9, v11.origin.x, v11.origin.y, v11.size.width, v11.size.height);
  result = *(double *)v9;
  v8 = v9[1];
  *(_OWORD *)a1 = v9[0];
  *(_OWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 32) = v10;
  return result;
}

void Circle._Inset.layoutDirectionBehavior.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void Circle._Inset.animatableData.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

double (*Circle._Inset.animatableData.modify(_QWORD *a1))(uint64_t a1)
{
  _QWORD *v1;

  a1[1] = v1;
  *a1 = *v1;
  return ViewOrigin.x.modify;
}

double Circle._Inset.inset(by:)(double a1, double a2)
{
  return a1 + a2;
}

double protocol witness for InsettableShape.inset(by:) in conformance Circle._Inset@<D0>(double *a1@<X8>, double a2@<D0>)
{
  double *v2;
  double result;

  result = *v2 + a2;
  *a1 = result;
  return result;
}

double protocol witness for Shape.path(in:) in conformance Circle._Inset@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  CGFloat *v5;
  double result;
  __int128 v8;
  _OWORD v9[2];
  char v10;
  CGRect v11;

  v11 = CGRectInset(*(CGRect *)&a2, *v5, *v5);
  specialized Circle.path(in:)((uint64_t)v9, v11.origin.x, v11.origin.y, v11.size.width, v11.size.height);
  result = *(double *)v9;
  v8 = v9[1];
  *(_OWORD *)a1 = v9[0];
  *(_OWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 32) = v10;
  return result;
}

void protocol witness for InsettableShape.inset(by:) in conformance Circle(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
}

double Rectangle.outset(by:)@<D0>(double *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  double result;

  *a1 = -a2;
  a1[1] = -a3;
  result = -a5;
  a1[2] = -a4;
  a1[3] = -a5;
  return result;
}

BOOL protocol witness for Shape.path(in:) in conformance Rectangle.AsymmetricalInset@<W0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  double *v5;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  _BOOL8 result;
  char v12;
  CGRect v13;

  v13.origin.x = specialized CGRect.inset(by:layoutDirection:)(*v5, v5[1], v5[2], v5[3], a2, a3, a4, a5);
  x = v13.origin.x;
  y = v13.origin.y;
  width = v13.size.width;
  height = v13.size.height;
  result = CGRectIsNull(v13);
  if (result)
  {
    v12 = 6;
    x = 0.0;
    y = 0.0;
    width = 0.0;
    height = 0.0;
  }
  else
  {
    v12 = 0;
  }
  *(CGFloat *)a1 = x;
  *(CGFloat *)(a1 + 8) = y;
  *(CGFloat *)(a1 + 16) = width;
  *(CGFloat *)(a1 + 24) = height;
  *(_BYTE *)(a1 + 32) = v12;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Rectangle._Inset(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Rectangle._Inset and conformance Rectangle._Inset();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type Rectangle._Inset and conformance Rectangle._Inset();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for InsettableShape.InsetShape : InsettableShape in Rectangle()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t instantiation function for generic protocol witness table for RoundedRectangle._Inset(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in RoundedRectangle._Inset()
{
  return lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat> and conformance AnimatablePair<A, B>((unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat> and conformance AnimatablePair<A, B>, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>);
}

uint64_t associated type witness table accessor for InsettableShape.InsetShape : InsettableShape in RoundedRectangle()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t instantiation function for generic protocol witness table for UnevenRoundedRectangle._Inset(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in UnevenRoundedRectangle._Inset()
{
  return lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat> and conformance AnimatablePair<A, B>((unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat> and conformance AnimatablePair<A, B>, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, (void (*)(void))lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>);
}

uint64_t lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat> and conformance AnimatablePair<A, B>(unint64_t *a1, uint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>(255, a2, a3, a4);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnimatablePair<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    a3(255);
    a4();
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    type metadata accessor for AnimatablePair();
  }
  return result;
}

uint64_t associated type witness table accessor for InsettableShape.InsetShape : InsettableShape in UnevenRoundedRectangle()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t instantiation function for generic protocol witness table for Capsule._Inset(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Capsule._Inset and conformance Capsule._Inset();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type Capsule._Inset and conformance Capsule._Inset();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for InsettableShape.InsetShape : InsettableShape in Capsule()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t instantiation function for generic protocol witness table for Ellipse._Inset(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Ellipse._Inset and conformance Ellipse._Inset();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type Ellipse._Inset and conformance Ellipse._Inset();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for InsettableShape.InsetShape : InsettableShape in Ellipse()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t instantiation function for generic protocol witness table for Circle._Inset(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for InsettableShape.InsetShape : InsettableShape in Circle()
{
  return swift_getOpaqueTypeConformance2();
}

double sub_234F0C934@<D0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

double sub_234F0C940(double *a1, _QWORD *a2)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

double sub_234F0C94C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 24);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(double *)(a2 + 16) = result;
  return result;
}

double sub_234F0C960(uint64_t a1, uint64_t a2)
{
  double result;

  result = *(double *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(double *)(a2 + 24) = result;
  return result;
}

double sub_234F0C974@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v3;

  result = *(double *)(a1 + 40);
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v3;
  *(double *)(a2 + 32) = result;
  return result;
}

double sub_234F0C988(uint64_t a1, uint64_t a2)
{
  double result;
  __int128 v3;

  result = *(double *)(a1 + 32);
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v3;
  *(double *)(a2 + 40) = result;
  return result;
}

_QWORD *sub_234F0C99C@<X0>(_QWORD *result@<X0>, unint64_t *a2@<X8>)
{
  *a2 = *result & 0xFFFFFFFFFFFFFFFELL;
  return result;
}

_QWORD *sub_234F0C9AC(_QWORD *result, unint64_t *a2)
{
  *a2 = *result & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  return result;
}

uint64_t dispatch thunk of InsettableShape.inset(by:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

ValueMetadata *type metadata accessor for Rectangle._Inset()
{
  return &type metadata for Rectangle._Inset;
}

uint64_t getEnumTagSinglePayload for RoundedRectangle._Inset(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for RoundedRectangle._Inset(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for RoundedRectangle._Inset()
{
  return &type metadata for RoundedRectangle._Inset;
}

uint64_t getEnumTagSinglePayload for UnevenRoundedRectangle._Inset(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 32);
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for UnevenRoundedRectangle._Inset(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for UnevenRoundedRectangle._Inset()
{
  return &type metadata for UnevenRoundedRectangle._Inset;
}

ValueMetadata *type metadata accessor for Capsule._Inset()
{
  return &type metadata for Capsule._Inset;
}

ValueMetadata *type metadata accessor for Ellipse._Inset()
{
  return &type metadata for Ellipse._Inset;
}

ValueMetadata *type metadata accessor for Circle._Inset()
{
  return &type metadata for Circle._Inset;
}

_UNKNOWN **sub_234F0CB44()
{
  return &protocol witness table for _ShapeView<A, B>;
}

_UNKNOWN **sub_234F0CB50()
{
  return &protocol witness table for _ShapeView<A, B>;
}

ValueMetadata *type metadata accessor for Rectangle.AsymmetricalInset()
{
  return &type metadata for Rectangle.AsymmetricalInset;
}

unint64_t instantiation function for generic protocol witness table for Rectangle.AsymmetricalInset(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Rectangle.AsymmetricalInset and conformance Rectangle.AsymmetricalInset();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

BOOL static _VAlignment.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

double _VAlignment.value.getter(char a1)
{
  return dbl_2352B1138[a1];
}

void _VAlignment.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int _VAlignment.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t _AlignmentLayout.horizontal.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*_AlignmentLayout.horizontal.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _AlignmentLayout.vertical.getter(__int16 a1)
{
  return HIBYTE(a1);
}

uint64_t _AlignmentLayout.vertical.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result;
  return result;
}

uint64_t (*_AlignmentLayout.vertical.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

SwiftUI::_AlignmentLayout __swiftcall _AlignmentLayout.init(horizontal:vertical:)(SwiftUI::TextAlignment_optional horizontal, SwiftUI::_VAlignment_optional vertical)
{
  return (SwiftUI::_AlignmentLayout)(horizontal.value | (*(_WORD *)&vertical << 8));
}

double _AlignmentLayout.placement(of:in:)@<D0>(uint64_t a1@<X1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  char v3;
  double v5;
  unsigned int v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  double v12;
  double v13;
  double *InputValue;
  double v15;
  double v16;
  double result;
  __int128 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;

  v3 = a2;
  v5 = *(double *)(a1 + 16);
  v6 = a2 >> 8;
  v7 = *(_BYTE *)(a1 + 48);
  v18 = *(_OWORD *)(a1 + 24);
  PlacementContext.proposedSize.getter((uint64_t)&v19);
  v8 = v19;
  v9 = v20;
  v10 = v21;
  v11 = v22;
  v12 = dbl_2352B1150[v3];
  v13 = dbl_2352B1150[(char)v6];
  if ((v7 & 1) != 0)
  {
    InputValue = (double *)AGGraphGetInputValue();
    v15 = *InputValue;
    v16 = InputValue[1];
  }
  else
  {
    v15 = v5;
    v16 = *(double *)&v18;
  }
  result = v12 * v15;
  *(_QWORD *)a3 = v8;
  *(_BYTE *)(a3 + 8) = v9;
  *(_QWORD *)(a3 + 16) = v10;
  *(_BYTE *)(a3 + 24) = v11;
  *(double *)(a3 + 32) = v12;
  *(double *)(a3 + 40) = v13;
  *(double *)(a3 + 48) = result;
  *(double *)(a3 + 56) = v13 * v16;
  return result;
}

double _AlignmentLayout.sizeThatFits(in:context:child:)(uint64_t a1, uint64_t a2, uint64_t *a3, __int16 a4)
{
  int v4;
  double v5;
  int v6;
  uint64_t v7;
  char v8;
  double result;
  int v10;
  int v11;
  double v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  int v17;

  v4 = a4;
  v5 = *(double *)a1;
  v6 = *(unsigned __int8 *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_BYTE *)(a1 + 24);
  if (a4 != 3 && (a4 & 0xFF00) != 0x300 && (v6 & 1) == 0 && (*(_BYTE *)(a1 + 24) & 1) == 0)
    return *(double *)a1;
  v10 = *((_DWORD *)a3 + 2);
  v16 = *a3;
  v17 = v10;
  v12 = v5;
  v13 = v6;
  v14 = v7;
  v15 = v8;
  LayoutProxy.size(in:)((uint64_t *)&v12);
  if (v4 == 3)
    v11 = 1;
  else
    v11 = v6;
  if (!v11)
    return v5;
  return result;
}

uint64_t _AlignmentLayout.spacing(in:child:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  Swift::UInt32 v4;
  int v5;
  unsigned int v6;
  __int128 *InputValue;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23[72];
  uint64_t v24;
  Swift::UInt32 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a2 + 4);
  if (one-time initialization token for introduced != -1)
    swift_once();
  v6 = static _SemanticFeature_v3.introduced;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FAB4 == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0)
      goto LABEL_7;
  }
  else if (static Semantics.forced < v6)
  {
LABEL_7:
    if (v5 == *MEMORY[0x24BE096C0])
    {
      if (one-time initialization token for defaultValue != -1)
        swift_once();
      InputValue = &static LayoutComputer.defaultValue;
    }
    else
    {
      InputValue = (__int128 *)AGGraphGetInputValue();
    }
    v9 = *(_QWORD *)InputValue;
    v10 = one-time initialization token for lockAssertionsAreEnabled;
    swift_retain();
    if (v10 != -1)
      swift_once();
    if (!lockAssertionsAreEnabled)
      goto LABEL_23;
    if (one-time initialization token for _lock != -1)
      swift_once();
    if (_MovableLockIsOwner(static Update._lock))
    {
LABEL_23:
      (*(void (**)(void))(*(_QWORD *)v9 + 112))();
      return swift_release();
    }
    goto LABEL_32;
  }
  if (v5 == *MEMORY[0x24BE096C0])
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    v8 = &static LayoutComputer.defaultValue;
  }
  else
  {
    v8 = (__int128 *)AGGraphGetInputValue();
  }
  v12 = *(_QWORD *)v8;
  v13 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v13 != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_31;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_31:
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v12 + 112))(&v24);
    swift_release();
    KeyPath = swift_getKeyPath();
    v25 = v4;
    v26 = KeyPath;
    type metadata accessor for EnvironmentFetch<LayoutDirection>(0, v15, v16, v17);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v4);
    type metadata accessor for KeyPath<EnvironmentValues, LayoutDirection>();
    swift_retain();
    dispatch thunk of Hashable.hash(into:)();
    Hasher._finalize()();
    _s7SwiftUI16EnvironmentFetch33_BA60BF7120E939C5C25B2A488163D4ACLLVyAA15LayoutDirectionOGADyxG14AttributeGraph4RuleAAWlTm_0(&lazy protocol witness table cache variable for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>, (uint64_t)&protocol conformance descriptor for EnvironmentFetch<A>, v18, v19);
    v23[0] = 0;
    _s7SwiftUI16EnvironmentFetch33_BA60BF7120E939C5C25B2A488163D4ACLLVyAA15LayoutDirectionOGADyxG14AttributeGraph4RuleAAWlTm_0(&lazy protocol witness table cache variable for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>, (uint64_t)&protocol conformance descriptor for EnvironmentFetch<A>, v20, v21);
    v22 = *(_BYTE *)static Rule<>._cachedValue(options:owner:hashValue:bodyPtr:update:)();
    swift_release_n();
    v23[0] = v22;
    AbsoluteEdge.Set.init(_:layoutDirection:)(v23, &v25);
    result = (uint64_t)Spacing.reset(_:)(&v25);
    *a3 = v24;
    return result;
  }
LABEL_32:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for UnaryLayout.spacing(in:child:) in conformance _AlignmentLayout@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return _AlignmentLayout.spacing(in:child:)(a1, a2, a3);
}

double protocol witness for UnaryLayout.placement(of:in:) in conformance _AlignmentLayout@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  unsigned __int16 *v2;

  return _AlignmentLayout.placement(of:in:)(a1, *v2, a2);
}

double protocol witness for UnaryLayout.sizeThatFits(in:context:child:) in conformance _AlignmentLayout(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __int16 *v3;

  return _AlignmentLayout.sizeThatFits(in:context:child:)(a1, a2, a3, *v3);
}

void type metadata accessor for EnvironmentFetch<LayoutDirection>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for EnvironmentFetch<LayoutDirection>)
  {
    v4 = type metadata accessor for EnvironmentFetch(0, (uint64_t)&type metadata for LayoutDirection, a3, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for EnvironmentFetch<LayoutDirection>);
  }
}

void type metadata accessor for KeyPath<EnvironmentValues, LayoutDirection>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for KeyPath<EnvironmentValues, LayoutDirection>)
  {
    v0 = type metadata accessor for KeyPath();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyPath<EnvironmentValues, LayoutDirection>);
  }
}

uint64_t _s7SwiftUI16EnvironmentFetch33_BA60BF7120E939C5C25B2A488163D4ACLLVyAA15LayoutDirectionOGADyxG14AttributeGraph4RuleAAWlTm_0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for EnvironmentFetch<LayoutDirection>(255, a2, a3, a4);
    result = MEMORY[0x23B7C9C04](a2, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _VAlignment and conformance _VAlignment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _VAlignment and conformance _VAlignment;
  if (!lazy protocol witness table cache variable for type _VAlignment and conformance _VAlignment)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _VAlignment, &type metadata for _VAlignment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _VAlignment and conformance _VAlignment);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for _AlignmentLayout(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _AlignmentLayout and conformance _AlignmentLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t storeEnumTagSinglePayload for _VAlignment(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_234F0D578 + 4 * byte_2352B0FF5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_234F0D5AC + 4 * byte_2352B0FF0[v4]))();
}

uint64_t sub_234F0D5AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F0D5B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234F0D5BCLL);
  return result;
}

uint64_t sub_234F0D5C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234F0D5D0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_234F0D5D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F0D5DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for _VAlignment()
{
  return &type metadata for _VAlignment;
}

uint64_t getEnumTagSinglePayload for _AlignmentLayout(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v6;
  int v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 65283 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65283 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65283;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65283;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65283;
  }
LABEL_17:
  if (*(unsigned __int8 *)a1 <= 3u)
    v6 = 3;
  else
    v6 = *(unsigned __int8 *)a1;
  v7 = v6 - 4;
  if (*(unsigned __int8 *)a1 < 3u)
    v8 = -1;
  else
    v8 = v7;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for _AlignmentLayout(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65283 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65283 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_234F0D6E8 + 4 * byte_2352B0FFF[v4]))();
  *a1 = a2 - 253;
  return ((uint64_t (*)(void))((char *)sub_234F0D71C + 4 * byte_2352B0FFA[v4]))();
}

uint64_t sub_234F0D71C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_234F0D724(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x234F0D72CLL);
  return result;
}

uint64_t sub_234F0D738(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x234F0D740);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_234F0D744(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_234F0D74C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for _AlignmentLayout()
{
  return &type metadata for _AlignmentLayout;
}

uint64_t StateOrBinding.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  State.init(wrappedValue:)(a1, a2, a3, a4, a5);
  type metadata accessor for StateOrBinding(0, a2, v6, v7);
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata accessor for StateOrBinding(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StateOrBinding);
}

uint64_t StateOrBinding.wrappedValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return StateOrBinding.wrappedValue.getter(a1, (void (*)(uint64_t))State.wrappedValue.getter, (uint64_t)Binding.wrappedValue.getter, a4);
}

uint64_t key path setter for StateOrBinding.wrappedValue : <A>StateOrBinding<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v4 = *(_QWORD *)(a4 + a3 - 8);
  v5 = MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v15 - v6;
  (*(void (**)(char *, double))(v8 + 16))((char *)&v15 - v6, v5);
  v11 = type metadata accessor for StateOrBinding(0, v4, v9, v10);
  return StateOrBinding.wrappedValue.setter((uint64_t)v7, v11, v12, v13);
}

uint64_t StateOrBinding.wrappedValue.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v5 = v4;
  v27 = a1;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = type metadata accessor for Binding(0, v7, a3, a4);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v26 - v10;
  v14 = type metadata accessor for State(0, v7, v12, v13);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v26 - v16;
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v26 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v22 + 16))(v21, v5, a2, v19);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v21, v8);
    v23 = v27;
    specialized Binding.wrappedValue.setter(v27);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v23, v7);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v21, v14);
    v25 = v27;
    specialized State.wrappedValue.setter(v27, v14);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v25, v7);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
}

void (*StateOrBinding.wrappedValue.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = malloc(0x30uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(a2 + 16);
  v5[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[4] = malloc(v8);
  v5[5] = malloc(v8);
  StateOrBinding.wrappedValue.getter(a2, v9, v10, v11);
  return StateOrBinding.wrappedValue.modify;
}

void StateOrBinding.wrappedValue.modify(uint64_t **a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a1;
  v5 = (void *)(*a1)[4];
  v6 = (void *)(*a1)[5];
  if ((a2 & 1) != 0)
  {
    v7 = v4[2];
    v8 = v4[3];
    v9 = *v4;
    (*(void (**)(uint64_t, void *, uint64_t))(v8 + 16))((*a1)[4], v6, v7);
    StateOrBinding.wrappedValue.setter((uint64_t)v5, v9, v10, v11);
    (*(void (**)(void *, uint64_t))(v8 + 8))(v6, v7);
  }
  else
  {
    StateOrBinding.wrappedValue.setter((*a1)[5], *v4, a3, a4);
  }
  free(v6);
  free(v5);
  free(v4);
}

uint64_t StateOrBinding.projectedValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return StateOrBinding.wrappedValue.getter(a1, (void (*)(uint64_t))State.projectedValue.getter, (uint64_t)Binding.projectedValue.getter, a4);
}

uint64_t StateOrBinding.wrappedValue.getter(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v24)(uint64_t);
  void (*v25)(uint64_t);

  v24 = a2;
  v25 = (void (*)(uint64_t))a3;
  v5 = v4;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = type metadata accessor for Binding(0, v7, a3, a4);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v24 - v10;
  v14 = type metadata accessor for State(0, v7, v12, v13);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v24 - v16;
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v24 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v22 + 16))(v21, v5, a1, v19);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v21, v8);
    v25(v8);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v21, v14);
    v24(v14);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
}

uint64_t sub_234F0DCA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for StateOrBinding(0, *(_QWORD *)(a3 + a2 - 8), a3, a4);
  return StateOrBinding.wrappedValue.getter(v4, v5, v6, v7);
}

uint64_t sub_234F0DCE0()
{
  return 8;
}

_QWORD *sub_234F0DCEC(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t type metadata completion function for StateOrBinding(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)(a1 + 16);
  result = type metadata accessor for State(319, v4, a3, a4);
  if (v8 <= 0x3F)
  {
    result = type metadata accessor for Binding(319, v4, v6, v7);
    if (v9 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for StateOrBinding(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_DWORD *)(v6 + 80);
  v9 = v8;
  if (((v9 + 16) & (unint64_t)~v9) + v7 <= ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8)
    v10 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  else
    v10 = ((v8 + 16) & ~(unint64_t)v8) + v7;
  v11 = v8 & 0x100000;
  if (v9 > 7 || v11 != 0 || v10 + 1 > 0x18)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + ((v9 & 0xF8 ^ 0x1F8) & (v9 + 16)));
LABEL_21:
    swift_retain();
    return v4;
  }
  v15 = *((unsigned __int8 *)a2 + v10);
  if (v15 >= 2)
  {
    if (v10 <= 3)
      v16 = v10;
    else
      v16 = 4;
    __asm { BR              X14 }
  }
  if (v15 != 1)
  {
    (*(void (**)(uint64_t *, uint64_t *, _QWORD))(v6 + 16))(a1, a2, *(_QWORD *)(a3 + 16));
    *(_QWORD *)(((unint64_t)v4 + v7 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFF8);
    *((_BYTE *)v4 + v10) = 0;
    goto LABEL_21;
  }
  *a1 = *a2;
  v17 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v18 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v17 = *v18;
  v19 = ((unint64_t)v17 + v9 + 8) & ~v9;
  v20 = ((unint64_t)v18 + v9 + 8) & ~v9;
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_retain();
  swift_retain();
  v21(v19, v20, v5);
  *((_BYTE *)v4 + v10) = 1;
  return v4;
}

uint64_t destroy for StateOrBinding(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (((v7 + 16) & (unint64_t)~v7) + v5 > v6)
    v6 = ((v7 + 16) & ~v7) + v5;
  v8 = *(unsigned __int8 *)(a1 + v6);
  if (v8 >= 2)
  {
    if (v6 <= 3)
      v9 = v6;
    else
      v9 = 4;
    __asm { BR              X13 }
  }
  if (v8 == 1)
  {
    swift_release();
    swift_release();
    return (*(uint64_t (**)(unint64_t, uint64_t))(v4 + 8))((((a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v7 + 8) & ~v7, v3);
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD))(v4 + 8))(a1, *(_QWORD *)(a2 + 16));
    return swift_release();
  }
}

_QWORD *initializeWithCopy for StateOrBinding(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  char v17;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(v6 + 80);
  if (((v8 + 16) & (unint64_t)~v8) + v7 <= ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8)
    v9 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  else
    v9 = ((v8 + 16) & ~v8) + v7;
  v10 = *((unsigned __int8 *)a2 + v9);
  if (v10 >= 2)
  {
    if (v9 <= 3)
      v11 = v9;
    else
      v11 = 4;
    __asm { BR              X14 }
  }
  if (v10 == 1)
  {
    *a1 = *a2;
    v12 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    v13 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v12 = *v13;
    v14 = ((unint64_t)v12 + v8 + 8) & ~v8;
    v15 = ((unint64_t)v13 + v8 + 8) & ~v8;
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v16(v14, v15, v5);
    v17 = 1;
  }
  else
  {
    (*(void (**)(_QWORD *, _QWORD *, _QWORD))(v6 + 16))(a1, a2, *(_QWORD *)(a3 + 16));
    *(_QWORD *)(((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFF8);
    swift_retain();
    v17 = 0;
  }
  *((_BYTE *)a1 + v9) = v17;
  return a1;
}

_QWORD *assignWithCopy for StateOrBinding(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    v8 = *(unsigned __int8 *)(v6 + 80);
    if (((v8 + 16) & (unint64_t)~v8) + v7 <= ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8)
      v9 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    else
      v9 = ((v8 + 16) & ~v8) + v7;
    v10 = *((unsigned __int8 *)a1 + v9);
    if (v10 >= 2)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    v12 = ~v8;
    if (v10 == 1)
    {
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))(((((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v8 + 8) & v12, v5);
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
      swift_release();
    }
    v13 = *((unsigned __int8 *)a2 + v9);
    if (v13 >= 2)
    {
      if (v9 <= 3)
        v14 = v9;
      else
        v14 = 4;
      __asm { BR              X12 }
    }
    if (v13 == 1)
    {
      *a1 = *a2;
      v15 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      v16 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v15 = *v16;
      v17 = ((unint64_t)v15 + v8 + 8) & v12;
      v18 = ((unint64_t)v16 + v8 + 8) & v12;
      v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
      swift_retain();
      swift_retain();
      v19(v17, v18, v5);
      *((_BYTE *)a1 + v9) = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v5);
      *(_QWORD *)(((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      *((_BYTE *)a1 + v9) = 0;
      swift_retain();
    }
  }
  return a1;
}

_QWORD *initializeWithTake for StateOrBinding(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  char v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (((v7 + 16) & (unint64_t)~v7) + v6 <= ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8)
    v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  else
    v8 = ((v7 + 16) & ~v7) + v6;
  v9 = *((unsigned __int8 *)a2 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X14 }
  }
  if (v9 == 1)
  {
    *a1 = *a2;
    v11 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    v12 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v11 = *v12;
    (*(void (**)(unint64_t, unint64_t))(v5 + 32))(((unint64_t)v11 + v7 + 8) & ~v7, ((unint64_t)v12 + v7 + 8) & ~v7);
    v13 = 1;
  }
  else
  {
    (*(void (**)(_QWORD *, _QWORD *))(v5 + 32))(a1, a2);
    v13 = 0;
    *(_QWORD *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
  }
  *((_BYTE *)a1 + v8) = v13;
  return a1;
}

uint64_t *assignWithTake for StateOrBinding(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char v18;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    v8 = *(unsigned __int8 *)(v6 + 80);
    if (((v8 + 16) & (unint64_t)~v8) + v7 <= ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8)
      v9 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    else
      v9 = ((v8 + 16) & ~v8) + v7;
    v10 = *((unsigned __int8 *)a1 + v9);
    if (v10 >= 2)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    v12 = ~v8;
    if (v10 == 1)
    {
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))(((((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v8 + 8) & v12, v5);
    }
    else
    {
      (*(void (**)(uint64_t *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
      swift_release();
    }
    v13 = *((unsigned __int8 *)a2 + v9);
    if (v13 >= 2)
    {
      if (v9 <= 3)
        v14 = v9;
      else
        v14 = 4;
      __asm { BR              X12 }
    }
    if (v13 == 1)
    {
      v16 = *a2;
      v15 = (unint64_t)a2 + 15;
      *a1 = v16;
      v17 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v17 = *(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF8);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(((unint64_t)v17 + v8 + 8) & v12, ((v15 & 0xFFFFFFFFFFFFFFF8) + v8 + 8) & v12, v5);
      v18 = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 32))(a1, a2, v5);
      v18 = 0;
      *(_QWORD *)(((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFF8);
    }
    *((_BYTE *)a1 + v9) = v18;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for StateOrBinding(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v9;
  unsigned int v11;
  int v12;
  unsigned int v13;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)) + v4;
  if (v5 <= ((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8)
    v6 = ((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  else
    v6 = v5;
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_22;
  v7 = v6 + 1;
  v8 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    v11 = ((a2 + ~(-1 << v8) - 254) >> v8) + 1;
    if (HIWORD(v11))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v11 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v11 < 2)
    {
LABEL_22:
      v13 = *(unsigned __int8 *)(a1 + v6);
      if (v13 >= 2)
        return (v13 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_22;
LABEL_15:
  v12 = (v9 - 1) << v8;
  if (v7 > 3)
    v12 = 0;
  if (!(_DWORD)v7)
    return (v12 + 255);
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234F0E940 + 4 * byte_2352B1198[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for StateOrBinding(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + v6;
  if (v7 <= ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8)
    v7 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v8 = v7 + 1;
  if (a3 < 0xFF)
  {
    v9 = 0;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 + ~(-1 << (8 * v8)) - 254) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v10 = a2 - 255;
  if (v8 < 4)
  {
    if ((_DWORD)v7 != -1)
    {
      v12 = v10 & ~(-1 << (8 * v8));
      bzero(a1, v8);
      if ((_DWORD)v8 == 3)
      {
        *a1 = v12;
        *((_BYTE *)a1 + 2) = BYTE2(v12);
      }
      else if ((_DWORD)v8 == 2)
      {
        *a1 = v12;
      }
      else
      {
        *(_BYTE *)a1 = v12;
      }
    }
  }
  else
  {
    bzero(a1, v7 + 1);
    *(_DWORD *)a1 = v10;
  }
  __asm { BR              X10 }
}

uint64_t getEnumTag for StateOrBinding(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  v4 = ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)) + v3;
  if (v4 <= ((v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8)
    v5 = ((v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  else
    v5 = v4;
  if (*(unsigned __int8 *)(a1 + v5) < 2u)
    return *(unsigned __int8 *)(a1 + v5);
  if (v5 <= 3)
    v6 = v5;
  else
    v6 = 4;
  return ((uint64_t (*)(void))((char *)&loc_234F0EBAC + 4 * byte_2352B11A6[v6]))();
}

void destructiveInjectEnumTag for StateOrBinding(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (a2 > 1)
  {
    v9 = *(_QWORD *)(v4 + 64);
    v10 = ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + v9;
    if (v10 <= ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8)
      v11 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    else
      v11 = v10;
    v12 = a2 - 2;
    if (v11 < 4)
    {
      v13 = v12 >> (8 * v11);
      v14 = v12 & ~(-1 << (8 * v11));
      a1[v11] = v13 + 2;
      bzero(a1, v11);
      if ((_DWORD)v11 == 3)
      {
        *(_WORD *)a1 = v14;
        a1[2] = BYTE2(v14);
      }
      else if ((_DWORD)v11 == 2)
      {
        *(_WORD *)a1 = v14;
      }
      else
      {
        *a1 = v14;
      }
    }
    else
    {
      a1[v11] = 2;
      bzero(a1, v11);
      *(_DWORD *)a1 = v12;
    }
  }
  else
  {
    v5 = *(unsigned __int8 *)(v4 + 80);
    v6 = *(_QWORD *)(v4 + 64);
    v7 = ((v5 + 16) & ~v5) + v6;
    v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    if (v7 > v8)
      v8 = v7;
    a1[v8] = a2;
  }
}

uint64_t specialized Collection.isEmpty.getter()
{
  uint64_t *v0;
  Swift::UInt64 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t result;

  v2 = *v0;
  v1 = v0[1];
  v3 = v0[2];
  v4 = *v0 + 48;
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v2 + 48) + 16)
    && (specialized __RawDictionaryStorage.find<A>(_:)(v1, v3), (v5 & 1) != 0))
  {
    swift_endAccess();
    swift_beginAccess();
    v6 = *(_QWORD *)v4;
    if (*(_QWORD *)(*(_QWORD *)v4 + 16))
    {
      v7 = specialized __RawDictionaryStorage.find<A>(_:)(v1, v3);
      if ((v8 & 1) != 0)
      {
        v9 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 16 * v7);
        swift_endAccess();
        return *(_QWORD *)(v9 + 16) == 0;
      }
    }
  }
  else
  {
    swift_endAccess();
    __break(1u);
  }
  result = swift_endAccess();
  __break(1u);
  return result;
}

uint64_t specialized Collection.first.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
    return String.subscript.getter();
  else
    return 0;
}

unint64_t specialized Collection.first.getter(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unsigned int v5;

  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    _StringGuts.validateScalarIndex(_:)(0xFuLL, a1, a2);
    if ((a2 & 0x1000000000000000) != 0)
    {
      v5 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0)
        _StringObject.sharedUTF8.getter();
      v5 = _decodeScalar(_:startingAt:)();
    }
  }
  else
  {
    v5 = 0;
  }
  return v5 | ((unint64_t)(v2 == 0) << 32);
}

void specialized BidirectionalCollection.last.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  const __CTLine *v3;
  uint64_t v4;
  char v5;
  const __CTLine *v6;
  const __CFArray *RunCount;
  const __CTLine *v8;
  uint64_t v9;
  const __CFArray *v10;
  const __CTLine *v11;
  const __CFArray *v12;
  const __CTLine *v13;
  int v14;

  v3 = *(const __CTLine **)v1;
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_BYTE *)(v1 + 16);
  if ((v5 & 1) != 0)
  {
    v6 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(*(void **)v1);
    if (!v6)
      goto LABEL_9;
  }
  else
  {
    outlined retain of Text.Layout.Line(v1);
    swift_release();
    v6 = v3;
  }
  RunCount = _CTLineGetRunCount(v6);

  if (!RunCount)
  {
LABEL_9:
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    return;
  }
  if ((v5 & 1) != 0)
  {
    v8 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v3);
    if (!v8)
    {
      v9 = -1;
      goto LABEL_13;
    }
  }
  else
  {
    outlined retain of Text.Layout.Line(v1);
    swift_release();
    v8 = v3;
  }
  v10 = _CTLineGetRunCount(v8);

  v9 = (uint64_t)v10 - 1;
  if (__OFSUB__(v10, 1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if ((v5 & 1) == 0)
  {
    outlined retain of Text.Layout.Line(v1);
    swift_release();
    v11 = v3;
    goto LABEL_16;
  }
LABEL_13:
  v11 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v3);
  if (!v11)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
LABEL_16:
  v12 = _CTLineGetRunCount(v11);

  if (v9 < 0 || v9 >= (uint64_t)v12)
    goto LABEL_23;
  if ((v5 & 1) == 0)
  {
    outlined retain of Text.Layout.Line(v1);
    swift_release();
    outlined retain of Text.Layout.Line(v1);

    goto LABEL_22;
  }
  v13 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v3);
  if (v13)
  {
    v3 = v13;
    v4 = 0;
LABEL_22:
    v14 = *(_DWORD *)(v1 + 40);
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = v9;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 24);
    *(_DWORD *)(a1 + 32) = v14;
    *(_QWORD *)(a1 + 40) = v4;
    return;
  }
LABEL_25:
  __break(1u);
}

uint64_t specialized BidirectionalCollection.last.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t result;
  uint64_t v4;
  Swift::UInt64 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  _OWORD v13[3];
  uint64_t v14;

  result = specialized Collection.isEmpty.getter();
  if ((result & 1) != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  else
  {
    v4 = *v1;
    v5 = v1[1];
    v6 = v1[2];
    swift_beginAccess();
    v7 = *(_QWORD *)(v4 + 48);
    if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6), (v9 & 1) != 0))
    {
      v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v8);
      swift_endAccess();
      v11 = specialized RandomAccessCollection<>.index(before:)(*(_QWORD *)(v10 + 16));
      swift_retain();
      swift_retain();
      result = specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v4, v5, v6, v11, v13);
      v12 = v13[1];
      *(_OWORD *)a1 = v13[0];
      *(_OWORD *)(a1 + 16) = v12;
      *(_OWORD *)(a1 + 32) = v13[2];
      *(_QWORD *)(a1 + 48) = v14;
    }
    else
    {
      result = swift_endAccess();
      __break(1u);
    }
  }
  return result;
}

uint64_t specialized BidirectionalCollection.last.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return 0;
  String.index(before:)();
  return String.subscript.getter();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySsG_SSs5NeverOTg5012_sSsSSIeggo_f4SSs5D132OIegnrzr_TR073_sSS7SwiftUIE14tupleOfDoublesSaySS5label_Sd5valuetGSgyF14decomposeTupleL_H32SSG6labels_AH6valuestyFSSSshcfu_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v16 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v16;
    v4 = (uint64_t *)(a1 + 56);
    do
    {
      v5 = *(v4 - 3);
      v6 = *(v4 - 2);
      v7 = *(v4 - 1);
      v8 = *v4;
      swift_bridgeObjectRetain();
      v9 = MEMORY[0x23B7C5E78](v5, v6, v7, v8);
      v11 = v10;
      swift_bridgeObjectRelease();
      v13 = *(_QWORD *)(v16 + 16);
      v12 = *(_QWORD *)(v16 + 24);
      if (v13 >= v12 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
      *(_QWORD *)(v16 + 16) = v13 + 1;
      v14 = v16 + 16 * v13;
      *(_QWORD *)(v14 + 32) = v9;
      *(_QWORD *)(v14 + 40) = v11;
      v4 += 4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS_SdtG_SS5label_Sd5valuets5NeverOTg506_sSSSdh33Iggyod_SS_SdtSS5label_Sd5valuets5f45OIegnrzr_TR76_sSS7SwiftUIE14tupleOfDoublesSayl25_Sd5valuetGSgyFSSAC_SdADtj1_K15XEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v12 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v12;
    v4 = (uint64_t *)(a1 + 48);
    do
    {
      v6 = *(v4 - 2);
      v5 = *(v4 - 1);
      v7 = *v4;
      v9 = *(_QWORD *)(v12 + 16);
      v8 = *(_QWORD *)(v12 + 24);
      swift_bridgeObjectRetain();
      if (v9 >= v8 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      *(_QWORD *)(v12 + 16) = v9 + 1;
      v10 = (_QWORD *)(v12 + 24 * v9);
      v10[4] = v6;
      v10[5] = v5;
      v10[6] = v7;
      v4 += 3;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS_SStG_SS4name_SS5valuets5NeverOTg5037_sS4SIgggoo_SS_SStSS4name_SS5valuets5f44OIegnrzr_TR083_sST7SwiftUISS4name_SS5valuet7b49RtzrlE17roundedAttributesSaySSAB_SSACtGyFSSAB_O12j1_K16XEfU2_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v13;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v13 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v13;
    v4 = (uint64_t *)(a1 + 56);
    do
    {
      v5 = *(v4 - 3);
      v6 = *(v4 - 2);
      v8 = *(v4 - 1);
      v7 = *v4;
      v9 = *(_QWORD *)(v13 + 16);
      v10 = *(_QWORD *)(v13 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v9 >= v10 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v9 + 1, 1);
      v4 += 4;
      *(_QWORD *)(v13 + 16) = v9 + 1;
      v11 = (_QWORD *)(v13 + 32 * v9);
      v11[4] = v5;
      v11[5] = v6;
      v11[6] = v8;
      v11[7] = v7;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS4name_SS5valuetG_SSs5NeverOTg5032_sS3SIgggo_SS4name_SS5valuetSSs5F131OIegnrzr_TR107_s7SwiftUI32CustomRecursiveStringConvertiblePAAE21_recursiveDescription6indent7roundedSSSi_SbtFS2S_SStXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD v27[2];
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;

  v3 = type metadata accessor for CharacterSet();
  v29 = *(_QWORD *)(v3 - 8);
  v30 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v28 = (char *)v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v27[1] = v1;
    v36 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    v6 = v36;
    v7 = a1 + 56;
    do
    {
      v8 = *(_QWORD *)(v7 - 24);
      v9 = *(_QWORD *)(v7 - 16);
      v31 = *(_QWORD *)(v7 - 8);
      v32 = v8;
      v34 = 0;
      v35 = 0xE000000000000000;
      v33 = v9;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v10 = v28;
      static CharacterSet.whitespacesAndNewlines.getter();
      lazy protocol witness table accessor for type String and conformance String();
      v11 = MEMORY[0x24BEE0D00];
      v12 = StringProtocol.components(separatedBy:)();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v10, v30);
      v32 = v12;
      v13 = v11;
      v14 = MEMORY[0x24BEE1250];
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for [String], v13, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
      lazy protocol witness table accessor for type Repeated<String> and conformance Repeated<A>((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], (unint64_t *)&lazy cache variable for type metadata for [String], (uint64_t (*)(_QWORD, uint64_t))v14, MEMORY[0x24BEE12B0]);
      BidirectionalCollection<>.joined(separator:)();
      swift_bridgeObjectRelease();
      v15 = String.escapeXML()();
      v17 = v16;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v34 = v15;
      v35 = v17;
      v18._countAndFlagsBits = 8765;
      v18._object = (void *)0xE200000000000000;
      String.append(_:)(v18);
      v19._countAndFlagsBits = String.escapeXML()();
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      v20._countAndFlagsBits = 34;
      v20._object = (void *)0xE100000000000000;
      String.append(_:)(v20);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v21 = v34;
      v22 = v35;
      v36 = v6;
      v24 = *(_QWORD *)(v6 + 16);
      v23 = *(_QWORD *)(v6 + 24);
      if (v24 >= v23 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
        v6 = v36;
      }
      v7 += 32;
      *(_QWORD *)(v6 + 16) = v24 + 1;
      v25 = v6 + 16 * v24;
      *(_QWORD *)(v25 + 32) = v21;
      *(_QWORD *)(v25 + 40) = v22;
      --v5;
    }
    while (v5);
  }
  return v6;
}

uint64_t specialized Collection.dropFirst(_:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (result < 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v2 = result;
  v3 = *(uint64_t (**)(void))(*(_QWORD *)v1 + 88);
  v4 = v3();
  v5 = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(0, v2, v4);
  if ((v6 & 1) != 0)
  {
    v8 = swift_retain();
    v7 = ((uint64_t (*)(uint64_t))v3)(v8);
    swift_release();
  }
  else
  {
    v7 = v5;
  }
  result = v3();
  if (result < v7)
    goto LABEL_11;
  v9 = result;
  result = v3();
  if (result < 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v7 < 0)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (result >= v9)
    return v7;
LABEL_14:
  __break(1u);
  return result;
}

uint64_t specialized RandomAccessCollection<>.index(before:)(uint64_t a1)
{
  uint64_t *v1;
  unint64_t v2;
  Swift::UInt64 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t result;

  v2 = a1 - 1;
  if (__OFSUB__(a1, 1))
  {
    __break(1u);
  }
  else
  {
    v4 = *v1;
    v3 = v1[1];
    v5 = v1[2];
    v6 = *v1 + 48;
    swift_beginAccess();
    if (!*(_QWORD *)(*(_QWORD *)(v4 + 48) + 16))
      goto LABEL_10;
    specialized __RawDictionaryStorage.find<A>(_:)(v3, v5);
    if ((v7 & 1) == 0)
      goto LABEL_10;
    swift_endAccess();
    swift_beginAccess();
    v8 = *(_QWORD *)v6;
    if (!*(_QWORD *)(*(_QWORD *)v6 + 16))
      goto LABEL_11;
    v9 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v5);
    if ((v10 & 1) == 0)
      goto LABEL_11;
    v11 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 16 * v9);
    swift_endAccess();
    if (v2 < *(_QWORD *)(v11 + 16))
      return v2;
  }
  __break(1u);
LABEL_10:
  swift_endAccess();
  __break(1u);
LABEL_11:
  result = swift_endAccess();
  __break(1u);
  return result;
}

void specialized RandomAccessCollection<>.index(before:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  const __CFArray *RunCount;

  v2 = a1 - 1;
  if (__OFSUB__(a1, 1))
  {
    __break(1u);
LABEL_11:
    __break(1u);
    return;
  }
  v3 = *(id *)v1;
  if ((*(_BYTE *)(v1 + 16) & 1) == 0)
  {
    outlined copy of Text.Layout.Line.Line(v3, *(_QWORD *)(v1 + 8), 0);
    swift_release();
    goto LABEL_6;
  }
  v3 = (id)_NSTextLineFragmentGetCTLine(*(void **)v1);
  if (v3)
  {
LABEL_6:
    RunCount = _CTLineGetRunCount((const __CTLine *)v3);

    goto LABEL_7;
  }
  RunCount = 0;
LABEL_7:
  if (v2 < 0 || v2 >= (uint64_t)RunCount)
    goto LABEL_11;
}

uint64_t recursiveDescriptionName(_:)()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  char v16;
  uint64_t result;
  unint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v0 = _typeName(_:qualified:)();
  v2 = v1;
  swift_bridgeObjectRetain();
  v3 = specialized Collection.first.getter(v0, v2);
  v5 = v4;
  swift_bridgeObjectRelease();
  if (v5)
  {
    if (v3 == 40 && v5 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v6 & 1) == 0)
        goto LABEL_10;
    }
    v7 = specialized Collection.dropFirst(_:)(1uLL, v0, v2);
    v9 = v8;
    v11 = v10;
    v13 = v12;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v14 = specialized Collection<>.firstIndex(of:)(32, 0xE100000000000000, v7, v9);
    v16 = v15;
    result = swift_bridgeObjectRelease();
    if ((v16 & 1) == 0)
    {
      if (v9 >> 14 < v14 >> 14)
      {
        __break(1u);
        return result;
      }
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for EmptyCollection<Character>, MEMORY[0x24BEE0718], MEMORY[0x24BEE2A90]);
      lazy protocol witness table accessor for type EmptyCollection<Character> and conformance EmptyCollection<A>();
      MEMORY[0x23B7C69DC](v14, v9);
    }
    v0 = MEMORY[0x23B7C5E78](v7, v9, v11, v13);
    v2 = v18;
    swift_bridgeObjectRelease();
  }
LABEL_10:
  swift_bridgeObjectRetain();
  specialized Collection<>.firstIndex(of:)(60, 0xE100000000000000, v0, v2);
  v20 = v19;
  swift_bridgeObjectRelease();
  if ((v20 & 1) == 0)
  {
    v21 = String.subscript.getter();
    v23 = v22;
    v25 = v24;
    v27 = v26;
    swift_bridgeObjectRelease();
    v0 = MEMORY[0x23B7C5E78](v21, v23, v25, v27);
    swift_bridgeObjectRelease();
  }
  return v0;
}

uint64_t protocol witness for CustomRecursiveStringConvertible.descriptionAttributes.getter in conformance ViewResponder()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t CustomRecursiveStringConvertible.descriptionAttributes.getter()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t CustomRecursiveStringConvertible.hideFromDescription.getter()
{
  return 0;
}

uint64_t CustomRecursiveStringConvertible.descriptionName.getter()
{
  swift_getDynamicType();
  return recursiveDescriptionName(_:)();
}

uint64_t CustomRecursiveStringConvertible.descriptionChildren.getter()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t CustomRecursiveStringConvertible.recursiveDescription.getter()
{
  return CustomRecursiveStringConvertible._recursiveDescription(indent:rounded:)(0, 0)._countAndFlagsBits;
}

Swift::String __swiftcall CustomRecursiveStringConvertible._recursiveDescription(indent:rounded:)(Swift::Int indent, Swift::Bool rounded)
{
  uint64_t v2;
  uint64_t (**v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t (**v6)(uint64_t, uint64_t);
  uint64_t v7;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t (*v14)(_QWORD, uint64_t);
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t countAndFlagsBits;
  uint64_t v22;
  uint64_t (*v23)(void);
  uint64_t v24;
  void *v25;
  void *v26;
  Swift::String v27;
  void *object;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(void);
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  uint64_t (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  Swift::String v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  Swift::Int v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  Swift::String v51;
  Swift::String v52;
  Swift::String v53;
  Swift::String v54;
  uint64_t v55;
  void *v56;
  Swift::String result;
  uint64_t v58;
  Swift::Int v59;
  uint64_t v60;
  uint64_t v61;
  Swift::String v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  Swift::String v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  Swift::String v70;

  v5 = v4;
  v6 = v3;
  v7 = v2;
  v10 = (void *)type metadata accessor for CharacterSet();
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (indent < 0)
  {
LABEL_25:
    __break(1u);
    swift_release();
    v55 = swift_release();
    __break(1u);
  }
  else
  {
    v62._countAndFlagsBits = v11;
    v66._countAndFlagsBits = indent;
    v66._object = (void *)538976288;
    v67 = 0xE400000000000000;
    v14 = (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE4998];
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Repeated<String>, MEMORY[0x24BEE0D00], MEMORY[0x24BEE4998]);
    lazy protocol witness table accessor for type Repeated<String> and conformance Repeated<A>(&lazy protocol witness table cache variable for type Repeated<String> and conformance Repeated<A>, &lazy cache variable for type metadata for Repeated<String>, v14, MEMORY[0x24BEE49A8]);
    v15 = BidirectionalCollection<>.joined(separator:)();
    v64 = v16;
    v65 = v15;
    v17 = v6[2](v7, (uint64_t)v6);
    v18 = v17;
    if (rounded)
    {
      v19 = specialized Sequence<>.roundedAttributes()(v17);
      swift_bridgeObjectRelease();
      v18 = v19;
    }
    if (indent)
      v20 = (_QWORD *)MEMORY[0x24BEE4AF8];
    else
      v20 = specialized CustomRecursiveStringConvertible.topLevelAttributes.getter();
    v66._countAndFlagsBits = v18;
    specialized Array.append<A>(contentsOf:)((uint64_t)v20);
    countAndFlagsBits = v66._countAndFlagsBits;
    swift_getKeyPath();
    v66._countAndFlagsBits = countAndFlagsBits;
    swift_retain();
    swift_bridgeObjectRetain();
    specialized MutableCollection<>.sort(by:)(&v66);
    v62._object = v10;
    v63 = v7;
    v59 = indent;
    swift_bridgeObjectRelease();
    swift_release_n();
    if (*(_QWORD *)(v66._countAndFlagsBits + 16))
    {
      v22 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS4name_SS5valuetG_SSs5NeverOTg5032_sS3SIgggo_SS4name_SS5valuetSSs5F131OIegnrzr_TR107_s7SwiftUI32CustomRecursiveStringConvertiblePAAE21_recursiveDescription6indent7roundedSSSi_SbtFS2S_SStXEfU_Tf3nnnpf_nTf1cn_n(v66._countAndFlagsBits);
      swift_release();
      v66._countAndFlagsBits = v22;
      v23 = MEMORY[0x24BEE1250];
      type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
      lazy protocol witness table accessor for type Repeated<String> and conformance Repeated<A>((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], (unint64_t *)&lazy cache variable for type metadata for [String], (uint64_t (*)(_QWORD, uint64_t))v23, MEMORY[0x24BEE12B0]);
      v24 = BidirectionalCollection<>.joined(separator:)();
      v26 = v25;
      swift_bridgeObjectRelease();
      v66._countAndFlagsBits = 32;
      v66._object = (void *)0xE100000000000000;
      v27._countAndFlagsBits = v24;
      v27._object = v26;
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
      object = v66._object;
      v60 = v66._countAndFlagsBits;
    }
    else
    {
      swift_release();
      v60 = 0;
      object = (void *)0xE000000000000000;
    }
    v61 = v5;
    v29 = v63;
    v66._countAndFlagsBits = v6[1](v63, (uint64_t)v6);
    v66._object = v30;
    static CharacterSet.whitespacesAndNewlines.getter();
    lazy protocol witness table accessor for type String and conformance String();
    v31 = MEMORY[0x24BEE0D00];
    v32 = StringProtocol.components(separatedBy:)();
    (*(void (**)(char *, void *))(v62._countAndFlagsBits + 8))(v13, v62._object);
    v66._countAndFlagsBits = v32;
    v33 = MEMORY[0x24BEE1250];
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for [String], v31, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    lazy protocol witness table accessor for type Repeated<String> and conformance Repeated<A>((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], (unint64_t *)&lazy cache variable for type metadata for [String], (uint64_t (*)(_QWORD, uint64_t))v33, MEMORY[0x24BEE12B0]);
    BidirectionalCollection<>.joined(separator:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v34 = String.escapeXML()();
    v36 = v35;
    swift_bridgeObjectRelease();
    v37 = v64;
    v66._countAndFlagsBits = v65;
    v66._object = v64;
    swift_bridgeObjectRetain();
    v38._countAndFlagsBits = 60;
    v38._object = (void *)0xE100000000000000;
    String.append(_:)(v38);
    swift_bridgeObjectRetain();
    v62._countAndFlagsBits = v34;
    v62._object = v36;
    v39._countAndFlagsBits = v34;
    v39._object = v36;
    String.append(_:)(v39);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v40._countAndFlagsBits = v60;
    v40._object = object;
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v70 = v66;
    v41 = v6[4];
    v42 = *(_QWORD *)(v41(v29, (uint64_t)v6) + 16);
    swift_bridgeObjectRelease();
    if (v42)
    {
      v43._countAndFlagsBits = 2622;
      v43._object = (void *)0xE200000000000000;
      String.append(_:)(v43);
      v44 = v41(v29, (uint64_t)v6);
      v45 = *(_QWORD *)(v44 + 16);
      if (v45)
      {
        v46 = v44 + 32;
        v47 = v59 + 1;
        v48 = __OFADD__(v59, 1);
        while (1)
        {
          outlined init with copy of AnyTrackedValue(v46, (uint64_t)&v66);
          v49 = v68;
          v50 = v69;
          __swift_project_boxed_opaque_existential_1(&v66, v68);
          if (((*(uint64_t (**)(uint64_t, uint64_t))(v50 + 40))(v49, v50) & 1) == 0)
          {
            __swift_project_boxed_opaque_existential_1(&v66, v68);
            if (v48)
            {
              __break(1u);
              goto LABEL_25;
            }
            v51 = CustomRecursiveStringConvertible._recursiveDescription(indent:rounded:)(v47, rounded);
            String.append(_:)(v51);
            swift_bridgeObjectRelease();
          }
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v66);
          v46 += 40;
          if (!--v45)
          {
            swift_bridgeObjectRelease();
            v37 = v64;
            goto LABEL_22;
          }
        }
      }
      swift_bridgeObjectRelease();
LABEL_22:
      v53._countAndFlagsBits = v65;
      v53._object = v37;
      String.append(_:)(v53);
      swift_bridgeObjectRelease();
      v66._countAndFlagsBits = 12092;
      v66._object = (void *)0xE200000000000000;
      String.append(_:)(v62);
      swift_bridgeObjectRelease();
      v54._countAndFlagsBits = 2622;
      v54._object = (void *)0xE200000000000000;
      String.append(_:)(v54);
      String.append(_:)(v66);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v52._countAndFlagsBits = 171847456;
      v52._object = (void *)0xE400000000000000;
      String.append(_:)(v52);
    }
    v55 = v70._countAndFlagsBits;
    v56 = v70._object;
  }
  result._object = v56;
  result._countAndFlagsBits = v55;
  return result;
}

uint64_t CustomRecursiveStringConvertible.roundedRecursiveDescription.getter()
{
  return CustomRecursiveStringConvertible._recursiveDescription(indent:rounded:)(0, 1)._countAndFlagsBits;
}

uint64_t specialized Sequence<>.roundedAttributes()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  BOOL v24;
  BOOL v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  double *v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  double v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  float v49;
  double v50;
  float v51;
  double v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  float v57;
  double v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  int64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  Swift::String v75;
  Swift::String v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t (*v82)(void);
  uint64_t v83;
  void *v84;
  void *v85;
  Swift::String v86;
  Swift::String v87;
  uint64_t v88;
  _QWORD *v89;
  unint64_t v90;
  unint64_t v91;
  _QWORD *v92;
  _BYTE *v93;
  _BYTE *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  BOOL v111;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Locale?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v2);
  v101 = (char *)&v99 - v3;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v99 = a1;
    v100 = 0;
    v6 = a1 + 32;
    isUniquelyReferenced_nonNull_native = swift_bridgeObjectRetain();
    v8 = 0;
    v9 = v5;
    v102 = v4;
    v103 = a1 + 32;
    while (1)
    {
      v106 = v9;
      v107 = 0;
      v19 = (uint64_t *)(v6 + 32 * v8);
      v20 = *v19;
      v21 = v19[1];
      v104 = v8;
      v105 = v20;
      v22 = v19[2];
      v12 = v19[3];
      MEMORY[0x24BDAC7A8](isUniquelyReferenced_nonNull_native);
      if ((v12 & 0x1000000000000000) != 0 || !(v12 & 0x2000000000000000 | v22 & 0x1000000000000000))
        break;
      if ((v12 & 0x2000000000000000) == 0)
      {
        if ((v22 & 0x1000000000000000) != 0)
          v23 = (_BYTE *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 32);
        else
          v23 = (_BYTE *)_StringObject.sharedUTF8.getter();
        switch(*v23)
        {
          case 0:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
          case 0xD:
          case 0x20:
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            goto LABEL_17;
          default:
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            v93 = (_BYTE *)_swift_stdlib_strtod_clocale();
            if (v93)
              v24 = *v93 == 0;
            else
LABEL_17:
              v24 = 0;
            v111 = v24;
            break;
        }
        goto LABEL_19;
      }
      v109 = v22;
      v110 = v12 & 0xFFFFFFFFFFFFFFLL;
      switch((char)v22)
      {
        case 0:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 32:
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          goto LABEL_22;
        default:
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          v94 = (_BYTE *)_swift_stdlib_strtod_clocale();
          if (v94)
            v25 = *v94 == 0;
          else
LABEL_22:
            v25 = 0;
          v111 = v25;
          swift_bridgeObjectRelease();
          break;
      }
LABEL_24:
      v26 = v21;
      if (v111)
      {
        swift_bridgeObjectRelease();
        v10 = Double.description.getter();
        v12 = v11;
        v9 = v106;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
          v9 = (_QWORD *)isUniquelyReferenced_nonNull_native;
        }
      }
      else
      {
        v27 = (unint64_t)String.tupleOfDoubles()();
        v9 = v106;
        if (!v27)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
            v9 = (_QWORD *)isUniquelyReferenced_nonNull_native;
          }
          v67 = v9[2];
          v66 = v9[3];
          if (v67 >= v66 >> 1)
          {
            isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v66 > 1), v67 + 1, 1, v9);
            v9 = (_QWORD *)isUniquelyReferenced_nonNull_native;
          }
          v9[2] = v67 + 1;
          v68 = &v9[4 * v67];
          v68[6] = v22;
          v17 = v68 + 6;
          v13 = v104;
          v18 = v105;
          goto LABEL_8;
        }
        v28 = v27;
        swift_bridgeObjectRelease();
        v29 = *(_QWORD *)(v28 + 16);
        if (v29)
        {
          v109 = (uint64_t)v5;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 0);
          v30 = v109;
          v31 = (double *)(v28 + 48);
          do
          {
            v33 = *((_QWORD *)v31 - 2);
            v32 = *((_QWORD *)v31 - 1);
            v34 = *v31;
            v109 = v30;
            v36 = *(_QWORD *)(v30 + 16);
            v35 = *(_QWORD *)(v30 + 24);
            swift_bridgeObjectRetain();
            if (v36 >= v35 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
              v30 = v109;
            }
            *(_QWORD *)(v30 + 16) = v36 + 1;
            v37 = v30 + 24 * v36;
            *(_QWORD *)(v37 + 32) = v33;
            *(_QWORD *)(v37 + 40) = v32;
            *(double *)(v37 + 48) = round(v34 * 256.0) * 0.00390625;
            v31 += 3;
            --v29;
          }
          while (v29);
          swift_bridgeObjectRelease();
          v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
          v9 = v106;
          v21 = v26;
          v38 = *(_QWORD *)(v30 + 16);
          if (!v38)
          {
LABEL_65:
            swift_bridgeObjectRelease();
            v70 = (uint64_t)v5;
            goto LABEL_66;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          v30 = (uint64_t)v5;
          v38 = v5[2];
          if (!v38)
            goto LABEL_65;
        }
        if (v38 != 4)
          goto LABEL_53;
        v109 = v105;
        v110 = v21;
        v107 = 0x726F6C6F63;
        v108 = 0xE500000000000000;
        v39 = type metadata accessor for Locale();
        v40 = (uint64_t)v101;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v101, 1, 1, v39);
        lazy protocol witness table accessor for type String and conformance String();
        StringProtocol.range<A>(of:options:range:locale:)();
        v42 = v41;
        outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?(v40, &lazy cache variable for type metadata for Locale?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8]);
        swift_bridgeObjectRelease();
        if ((v42 & 1) != 0)
        {
LABEL_53:
          v69 = v38;
LABEL_54:
          v107 = (uint64_t)v5;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v69, 0);
          v70 = v107;
          v71 = v30 + 48;
          do
          {
            v73 = *(_QWORD *)(v71 - 16);
            v72 = *(_QWORD *)(v71 - 8);
            v74 = HIBYTE(v72) & 0xF;
            if ((v72 & 0x2000000000000000) == 0)
              v74 = v73 & 0xFFFFFFFFFFFFLL;
            v109 = 0;
            v110 = 0xE000000000000000;
            if (v74)
            {
              swift_bridgeObjectRetain();
              v75._countAndFlagsBits = v73;
              v75._object = (void *)v72;
              String.append(_:)(v75);
              v76._countAndFlagsBits = 8250;
              v76._object = (void *)0xE200000000000000;
              String.append(_:)(v76);
              Double.write<A>(to:)();
              swift_bridgeObjectRelease();
            }
            else
            {
              Double.write<A>(to:)();
            }
            v77 = v109;
            v78 = v110;
            v107 = v70;
            v80 = *(_QWORD *)(v70 + 16);
            v79 = *(_QWORD *)(v70 + 24);
            if (v80 >= v79 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v79 > 1, v80 + 1, 1);
              v70 = v107;
            }
            *(_QWORD *)(v70 + 16) = v80 + 1;
            v81 = v70 + 16 * v80;
            *(_QWORD *)(v81 + 32) = v77;
            *(_QWORD *)(v81 + 40) = v78;
            v71 += 24;
            --v38;
          }
          while (v38);
          swift_bridgeObjectRelease();
          v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_66:
          v109 = v70;
          v82 = MEMORY[0x24BEE1250];
          type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
          lazy protocol witness table accessor for type Repeated<String> and conformance Repeated<A>((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], (unint64_t *)&lazy cache variable for type metadata for [String], (uint64_t (*)(_QWORD, uint64_t))v82, MEMORY[0x24BEE12B0]);
          v83 = BidirectionalCollection<>.joined(separator:)();
          v85 = v84;
          swift_bridgeObjectRelease();
          v109 = 40;
          v110 = 0xE100000000000000;
          v86._countAndFlagsBits = v83;
          v86._object = v85;
          String.append(_:)(v86);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v87._countAndFlagsBits = 41;
          v87._object = (void *)0xE100000000000000;
          String.append(_:)(v87);
          swift_bridgeObjectRelease();
          v88 = v109;
          v12 = v110;
          v9 = v106;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v4 = v102;
          v13 = v104;
          v89 = v5;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
            v9 = (_QWORD *)isUniquelyReferenced_nonNull_native;
          }
          v6 = v103;
          v91 = v9[2];
          v90 = v9[3];
          if (v91 >= v90 >> 1)
          {
            isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v90 > 1), v91 + 1, 1, v9);
            v9 = (_QWORD *)isUniquelyReferenced_nonNull_native;
          }
          v9[2] = v91 + 1;
          v92 = &v9[4 * v91];
          v92[6] = v88;
          v17 = v92 + 6;
          *(v17 - 2) = v105;
          *(v17 - 1) = v26;
          v5 = v89;
          goto LABEL_9;
        }
        v109 = (uint64_t)v5;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 4, 0);
        v43 = v109;
        v44 = *(double *)(v30 + 48);
        v46 = *(_QWORD *)(v109 + 16);
        v45 = *(_QWORD *)(v109 + 24);
        v47 = v45 >> 1;
        v48 = v46 + 1;
        if (v45 >> 1 <= v46)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v45 > 1, v46 + 1, 1);
          v43 = v109;
          v45 = *(_QWORD *)(v109 + 24);
          v47 = v45 >> 1;
        }
        v49 = v44;
        *(_QWORD *)(v43 + 16) = v48;
        *(float *)(v43 + 4 * v46 + 32) = v49;
        v50 = *(double *)(v30 + 72);
        v109 = v43;
        if (v47 <= v48)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v45 > 1, v46 + 2, 1);
          v43 = v109;
        }
        v51 = v50;
        *(_QWORD *)(v43 + 16) = v46 + 2;
        *(float *)(v43 + 4 * v48 + 32) = v51;
        v52 = *(double *)(v30 + 96);
        v109 = v43;
        v54 = *(_QWORD *)(v43 + 16);
        v53 = *(_QWORD *)(v43 + 24);
        v55 = v53 >> 1;
        v56 = v54 + 1;
        if (v53 >> 1 <= v54)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1, v54 + 1, 1);
          v43 = v109;
          v53 = *(_QWORD *)(v109 + 24);
          v55 = v53 >> 1;
        }
        v57 = v52;
        *(_QWORD *)(v43 + 16) = v56;
        *(float *)(v43 + 4 * v54 + 32) = v57;
        v58 = *(double *)(v30 + 120);
        v109 = v43;
        if (v55 <= v56)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1, v54 + 2, 1);
          v43 = v109;
        }
        v59 = v58;
        *(_QWORD *)(v43 + 16) = v54 + 2;
        *(float *)(v43 + 32 + 4 * v56) = v59;
        if (!v54)
        {
          __break(1u);
LABEL_81:
          __break(1u);
          JUMPOUT(0x234F10BBCLL);
        }
        if (v54 == 1)
          goto LABEL_81;
        v60 = *(float *)(v43 + 32);
        v61 = *(float *)(v43 + 36);
        v62 = *(float *)(v43 + 40);
        v63 = *(float *)(v43 + 44);
        swift_bridgeObjectRelease();
        v64 = colorNameForColorComponents(_:)(v60, v61, v62, v63);
        if (!v65)
        {
          v69 = 4;
          goto LABEL_54;
        }
        v10 = v64;
        v12 = v65;
        swift_bridgeObjectRelease();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
          v9 = (_QWORD *)isUniquelyReferenced_nonNull_native;
        }
        v4 = v102;
        v6 = v103;
      }
      v13 = v104;
      v15 = v9[2];
      v14 = v9[3];
      if (v15 >= v14 >> 1)
      {
        isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v9);
        v9 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v9[2] = v15 + 1;
      v16 = &v9[4 * v15];
      v16[6] = v10;
      v17 = v16 + 6;
      v18 = v105;
LABEL_8:
      *(v17 - 2) = v18;
      *(v17 - 1) = v26;
LABEL_9:
      v8 = v13 + 1;
      v17[1] = v12;
      if (v8 == v4)
      {
        swift_bridgeObjectRelease();
        goto LABEL_79;
      }
    }
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v95 = v100;
    _StringGuts._slowWithCString<A>(_:)();
    v100 = v95;
    v6 = v103;
LABEL_19:
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
LABEL_79:
  v96 = swift_bridgeObjectRetain();
  v97 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS_SStG_SS4name_SS5valuets5NeverOTg5037_sS4SIgggoo_SS_SStSS4name_SS5valuets5f44OIegnrzr_TR083_sST7SwiftUISS4name_SS5valuet7b49RtzrlE17roundedAttributesSaySSAB_SSACtGyFSSAB_O12j1_K16XEfU2_Tf3nnnpf_nTf1cn_n(v96);
  swift_bridgeObjectRelease_n();
  return v97;
}

uint64_t Sequence<>.roundedAttributes()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t AssociatedTypeWitness;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _BYTE *v26;
  BOOL v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  double *v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  double v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  float v57;
  double v58;
  int64_t v59;
  float v60;
  double v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  float v66;
  double v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  int64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  Swift::String v85;
  Swift::String v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t (*v92)(void);
  uint64_t v93;
  void *v94;
  void *v95;
  Swift::String v96;
  Swift::String v97;
  uint64_t v98;
  _QWORD *v99;
  unint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  _BYTE *v103;
  _BYTE *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  _QWORD v114[2];
  BOOL v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *vars0;
  _QWORD *vars8;

  v107 = 0;
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Locale?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v108 = (char *)&v106 - v4;
  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v106 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v106 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v12 = (char *)&v106 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v8, v1, a1, v10);
  dispatch thunk of Sequence.makeIterator()();
  v13 = AssociatedTypeWitness;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v15 = dispatch thunk of IteratorProtocol.next()();
  v16 = MEMORY[0x24BEE4AF8];
  v112 = v117;
  if (v117)
  {
    v110 = AssociatedConformanceWitness;
    v111 = v116;
    v18 = v118;
    v17 = v119;
    v113 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v109 = v12;
    while (1)
    {
      v114[0] = 0;
      MEMORY[0x24BDAC7A8](v15);
      vars0 = v114;
      if ((v17 & 0x1000000000000000) != 0 || !(v17 & 0x2000000000000000 | v18 & 0x1000000000000000))
        break;
      if ((v17 & 0x2000000000000000) == 0)
      {
        if ((v18 & 0x1000000000000000) != 0)
          v26 = (_BYTE *)((v17 & 0xFFFFFFFFFFFFFFFLL) + 32);
        else
          v26 = (_BYTE *)_StringObject.sharedUTF8.getter();
        switch(*v26)
        {
          case 0:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
          case 0xD:
          case 0x20:
            swift_bridgeObjectRetain();
            goto LABEL_15;
          default:
            swift_bridgeObjectRetain();
            v103 = (_BYTE *)_swift_stdlib_strtod_clocale();
            if (v103)
              v27 = *v103 == 0;
            else
LABEL_15:
              v27 = 0;
            v115 = v27;
            break;
        }
        goto LABEL_17;
      }
      v116 = v18;
      v117 = v17 & 0xFFFFFFFFFFFFFFLL;
      switch((char)v18)
      {
        case 0:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 32:
          swift_bridgeObjectRetain();
          goto LABEL_20;
        default:
          swift_bridgeObjectRetain();
          v104 = (_BYTE *)_swift_stdlib_strtod_clocale();
          if (v104)
            v28 = *v104 == 0;
          else
LABEL_20:
            v28 = 0;
          v115 = v28;
          swift_bridgeObjectRelease();
          break;
      }
LABEL_22:
      if (v115)
      {
        swift_bridgeObjectRelease();
        v29 = Double.description.getter();
        v17 = v30;
        v22 = v113;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
        v32 = v22[2];
        v31 = v22[3];
        v33 = v32 + 1;
        if (v32 < v31 >> 1)
          goto LABEL_6;
LABEL_5:
        v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v31 > 1), v33, 1, v22);
        goto LABEL_6;
      }
      v34 = (unint64_t)String.tupleOfDoubles()();
      if (!v34)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v113 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v113[2] + 1, 1, v113);
        v76 = v113[2];
        v75 = v113[3];
        if (v76 >= v75 >> 1)
          v113 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v75 > 1), v76 + 1, 1, v113);
        v77 = v113;
        v113[2] = v76 + 1;
        v78 = &v77[4 * v76];
        v78[6] = v18;
        v24 = v78 + 6;
        goto LABEL_7;
      }
      v35 = v34;
      v36 = v13;
      swift_bridgeObjectRelease();
      v37 = *(_QWORD *)(v35 + 16);
      if (v37)
      {
        v116 = v16;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v37, 0);
        v38 = v116;
        v39 = (double *)(v35 + 48);
        do
        {
          v41 = *((_QWORD *)v39 - 2);
          v40 = *((_QWORD *)v39 - 1);
          v42 = *v39;
          v116 = v38;
          v44 = *(_QWORD *)(v38 + 16);
          v43 = *(_QWORD *)(v38 + 24);
          swift_bridgeObjectRetain();
          if (v44 >= v43 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1, v44 + 1, 1);
            v38 = v116;
          }
          *(_QWORD *)(v38 + 16) = v44 + 1;
          v45 = v38 + 24 * v44;
          *(_QWORD *)(v45 + 32) = v41;
          *(_QWORD *)(v45 + 40) = v40;
          *(double *)(v45 + 48) = round(v42 * 256.0) * 0.00390625;
          v39 += 3;
          --v37;
        }
        while (v37);
        swift_bridgeObjectRelease();
        v16 = MEMORY[0x24BEE4AF8];
        v46 = *(_QWORD *)(v38 + 16);
        if (!v46)
        {
LABEL_68:
          swift_bridgeObjectRelease();
          goto LABEL_69;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        v38 = v16;
        v46 = *(_QWORD *)(v16 + 16);
        if (!v46)
          goto LABEL_68;
      }
      if (v46 != 4)
        goto LABEL_56;
      v116 = v111;
      v117 = v112;
      v114[0] = 0x726F6C6F63;
      v114[1] = 0xE500000000000000;
      v47 = type metadata accessor for Locale();
      v48 = (uint64_t)v108;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v108, 1, 1, v47);
      vars0 = (_QWORD *)lazy protocol witness table accessor for type String and conformance String();
      vars8 = vars0;
      StringProtocol.range<A>(of:options:range:locale:)();
      v50 = v49;
      outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?(v48, &lazy cache variable for type metadata for Locale?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8]);
      swift_bridgeObjectRelease();
      if ((v50 & 1) != 0)
      {
LABEL_56:
        v79 = v46;
LABEL_57:
        v114[0] = v16;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v79, 0);
        v80 = v114[0];
        v81 = v38 + 48;
        do
        {
          v83 = *(_QWORD *)(v81 - 16);
          v82 = *(_QWORD *)(v81 - 8);
          v84 = HIBYTE(v82) & 0xF;
          if ((v82 & 0x2000000000000000) == 0)
            v84 = v83 & 0xFFFFFFFFFFFFLL;
          v116 = 0;
          v117 = 0xE000000000000000;
          if (v84)
          {
            swift_bridgeObjectRetain();
            v85._countAndFlagsBits = v83;
            v85._object = (void *)v82;
            String.append(_:)(v85);
            v86._countAndFlagsBits = 8250;
            v86._object = (void *)0xE200000000000000;
            String.append(_:)(v86);
            Double.write<A>(to:)();
            swift_bridgeObjectRelease();
          }
          else
          {
            Double.write<A>(to:)();
          }
          v87 = v116;
          v88 = v117;
          v114[0] = v80;
          v90 = *(_QWORD *)(v80 + 16);
          v89 = *(_QWORD *)(v80 + 24);
          if (v90 >= v89 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v89 > 1, v90 + 1, 1);
            v80 = v114[0];
          }
          *(_QWORD *)(v80 + 16) = v90 + 1;
          v91 = v80 + 16 * v90;
          *(_QWORD *)(v91 + 32) = v87;
          *(_QWORD *)(v91 + 40) = v88;
          v81 += 24;
          --v46;
        }
        while (v46);
        swift_bridgeObjectRelease();
        v16 = MEMORY[0x24BEE4AF8];
LABEL_69:
        v92 = MEMORY[0x24BEE1250];
        type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
        lazy protocol witness table accessor for type Repeated<String> and conformance Repeated<A>((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], (unint64_t *)&lazy cache variable for type metadata for [String], (uint64_t (*)(_QWORD, uint64_t))v92, MEMORY[0x24BEE12B0]);
        v93 = BidirectionalCollection<>.joined(separator:)();
        v95 = v94;
        swift_bridgeObjectRelease();
        v116 = 40;
        v117 = 0xE100000000000000;
        v96._countAndFlagsBits = v93;
        v96._object = v95;
        String.append(_:)(v96);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v97._countAndFlagsBits = 41;
        v97._object = (void *)0xE100000000000000;
        String.append(_:)(v97);
        swift_bridgeObjectRelease();
        v98 = v116;
        v17 = v117;
        v99 = v113;
        v13 = v36;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v99 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v99[2] + 1, 1, v99);
        v12 = v109;
        v101 = v99[2];
        v100 = v99[3];
        if (v101 >= v100 >> 1)
          v99 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v100 > 1), v101 + 1, 1, v99);
        v99[2] = v101 + 1;
        v113 = v99;
        v102 = &v99[4 * v101];
        v102[6] = v98;
        v24 = v102 + 6;
        goto LABEL_7;
      }
      v116 = v16;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 4, 0);
      v51 = v116;
      v52 = *(double *)(v38 + 48);
      v54 = *(_QWORD *)(v116 + 16);
      v53 = *(_QWORD *)(v116 + 24);
      v55 = v53 >> 1;
      v56 = v54 + 1;
      if (v53 >> 1 <= v54)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1, v54 + 1, 1);
        v51 = v116;
        v53 = *(_QWORD *)(v116 + 24);
        v55 = v53 >> 1;
      }
      v57 = v52;
      *(_QWORD *)(v51 + 16) = v56;
      *(float *)(v51 + 4 * v54 + 32) = v57;
      v58 = *(double *)(v38 + 72);
      v116 = v51;
      v59 = v54 + 2;
      if (v55 <= v56)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1, v59, 1);
        v51 = v116;
      }
      v60 = v58;
      *(_QWORD *)(v51 + 16) = v59;
      *(float *)(v51 + 4 * v56 + 32) = v60;
      v61 = *(double *)(v38 + 96);
      v116 = v51;
      v63 = *(_QWORD *)(v51 + 16);
      v62 = *(_QWORD *)(v51 + 24);
      v64 = v62 >> 1;
      v65 = v63 + 1;
      if (v62 >> 1 <= v63)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v62 > 1, v63 + 1, 1);
        v51 = v116;
        v62 = *(_QWORD *)(v116 + 24);
        v64 = v62 >> 1;
      }
      v66 = v61;
      *(_QWORD *)(v51 + 16) = v65;
      *(float *)(v51 + 4 * v63 + 32) = v66;
      v67 = *(double *)(v38 + 120);
      v116 = v51;
      if (v64 <= v65)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v62 > 1, v63 + 2, 1);
        v51 = v116;
      }
      v68 = v67;
      *(_QWORD *)(v51 + 16) = v63 + 2;
      *(float *)(v51 + 32 + 4 * v65) = v68;
      if (!v63)
      {
        __break(1u);
LABEL_82:
        __break(1u);
        JUMPOUT(0x234F1178CLL);
      }
      if (v63 == 1)
        goto LABEL_82;
      v69 = *(float *)(v51 + 32);
      v70 = *(float *)(v51 + 36);
      v71 = *(float *)(v51 + 40);
      v72 = *(float *)(v51 + 44);
      swift_bridgeObjectRelease();
      v73 = colorNameForColorComponents(_:)(v69, v70, v71, v72);
      if (!v74)
      {
        v79 = 4;
        goto LABEL_57;
      }
      v29 = v73;
      v17 = v74;
      swift_bridgeObjectRelease();
      v22 = v113;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
      v13 = v36;
      v32 = v22[2];
      v31 = v22[3];
      v33 = v32 + 1;
      v12 = v109;
      if (v32 >= v31 >> 1)
        goto LABEL_5;
LABEL_6:
      v22[2] = v33;
      v113 = v22;
      v23 = &v22[4 * v32];
      v23[6] = v29;
      v24 = v23 + 6;
LABEL_7:
      v25 = v112;
      *(v24 - 2) = v111;
      *(v24 - 1) = v25;
      v24[1] = v17;
      v15 = dispatch thunk of IteratorProtocol.next()();
      v18 = v118;
      v17 = v119;
      v111 = v116;
      v112 = v117;
      if (!v117)
        goto LABEL_4;
    }
    swift_bridgeObjectRetain();
    v105 = v107;
    _StringGuts._slowWithCString<A>(_:)();
    v107 = v105;
    v12 = v109;
LABEL_17:
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  v113 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_4:
  (*(void (**)(char *, uint64_t))(v106 + 8))(v12, v13);
  v19 = swift_bridgeObjectRetain();
  v20 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS_SStG_SS4name_SS5valuets5NeverOTg5037_sS4SIgggoo_SS_SStSS4name_SS5valuets5f44OIegnrzr_TR083_sST7SwiftUISS4name_SS5valuet7b49RtzrlE17roundedAttributesSaySSAB_SSACtGyFSSAB_O12j1_K16XEfU2_Tf3nnnpf_nTf1cn_n(v19);
  swift_bridgeObjectRelease_n();
  return v20;
}

uint64_t String.escapeXML()()
{
  uint64_t v0;
  Swift::String_optional v1;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v4;
  unint64_t v5;
  Swift::String_optional v6;

  v0 = String.count.getter();
  MEMORY[0x23B7C5E90](v0);
  swift_bridgeObjectRetain();
  v1 = String.Iterator.next()();
  if (v1.value._object)
  {
    countAndFlagsBits = v1.value._countAndFlagsBits;
    object = v1.value._object;
    while ((countAndFlagsBits != 34 || object != (void *)0xE100000000000000)
         && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      if (countAndFlagsBits == 38 && object == (void *)0xE100000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v4 = 0x3B706D6126;
        v5 = 0xE500000000000000;
        goto LABEL_8;
      }
      if (countAndFlagsBits == 39 && object == (void *)0xE100000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v4 = 0x3B736F706126;
        goto LABEL_7;
      }
      if (countAndFlagsBits == 60 && object == (void *)0xE100000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v4 = 997485606;
LABEL_23:
        v5 = 0xE400000000000000;
        goto LABEL_8;
      }
      if (countAndFlagsBits == 62 && object == (void *)0xE100000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v4 = 997484326;
        goto LABEL_23;
      }
      if (countAndFlagsBits == 10 && object == (void *)0xE100000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v4 = 28252;
      }
      else
      {
        if ((countAndFlagsBits != 13 || object != (void *)0xE100000000000000)
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          MEMORY[0x23B7C5F14](countAndFlagsBits, object);
          swift_bridgeObjectRelease();
          goto LABEL_9;
        }
        swift_bridgeObjectRelease();
        v4 = 29276;
      }
      v5 = 0xE200000000000000;
LABEL_8:
      String.append(_:)(*(Swift::String *)&v4);
LABEL_9:
      v6 = String.Iterator.next()();
      countAndFlagsBits = v6.value._countAndFlagsBits;
      object = v6.value._object;
      if (!v6.value._object)
        goto LABEL_38;
    }
    swift_bridgeObjectRelease();
    v4 = 0x3B746F757126;
LABEL_7:
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
LABEL_38:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t BridgeStringConvertible.bridgeDescriptionChildren.getter()
{
  return MEMORY[0x24BEE4AF8];
}

Swift::OpaquePointer_optional __swiftcall String.tupleOfDoubles()()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Bool v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  _QWORD *v30;
  BOOL v31;
  Swift::OpaquePointer_optional result;

  v2 = v1;
  v3 = v0;
  swift_bridgeObjectRetain();
  v4 = specialized Collection.first.getter(v3, v2);
  v6 = v5;
  swift_bridgeObjectRelease();
  if (!v6)
    goto LABEL_37;
  if (v4 == 40 && v6 == 0xE100000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v8 & 1) == 0)
      goto LABEL_37;
  }
  swift_bridgeObjectRetain();
  v9 = specialized BidirectionalCollection.last.getter(v3, v2);
  v11 = v10;
  swift_bridgeObjectRelease();
  if (!v11)
    goto LABEL_37;
  if (v9 == 41 && v11 == 0xE100000000000000)
  {
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v12 & 1) == 0)
  {
LABEL_37:
    v28 = 0;
    goto LABEL_38;
  }
LABEL_11:
  v13 = decomposeTuple #1 () in String.tupleOfDoubles()(v3, v2);
  v14 = (_QWORD *)v13;
  v16 = v15;
  v17 = *(_QWORD *)(v15 + 16);
  if (v17)
  {
    v30 = (_QWORD *)v13;
    isUniquelyReferenced_nonNull_native = swift_bridgeObjectRetain();
    v19 = (uint64_t *)(v16 + 40);
    v20 = (_QWORD *)MEMORY[0x24BEE4AF8];
    while (1)
    {
      v22 = *(v19 - 1);
      v21 = *v19;
      MEMORY[0x24BDAC7A8](isUniquelyReferenced_nonNull_native);
      if ((v21 & 0x1000000000000000) == 0)
      {
        if ((v21 & 0x2000000000000000) != 0)
        {
          switch((char)v22)
          {
            case 0:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 32:
LABEL_22:
              swift_bridgeObjectRetain();
              goto LABEL_23;
            default:
              swift_bridgeObjectRetain();
              v23 = (_BYTE *)_swift_stdlib_strtod_clocale();
              if (v23)
LABEL_30:
                v31 = *v23 == 0;
              else
LABEL_23:
                v31 = 0;
              break;
          }
          goto LABEL_24;
        }
        if ((v22 & 0x1000000000000000) != 0)
        {
          switch(*(_BYTE *)(v21 + 32))
          {
            case 0:
            case 9:
            case 0xA:
            case 0xB:
            case 0xC:
            case 0xD:
            case 0x20:
              goto LABEL_22;
            default:
              swift_bridgeObjectRetain();
              v23 = (_BYTE *)_swift_stdlib_strtod_clocale();
              if (!v23)
                goto LABEL_23;
              goto LABEL_30;
          }
        }
      }
      swift_bridgeObjectRetain();
      _StringGuts._slowWithCString<A>(_:)();
LABEL_24:
      isUniquelyReferenced_nonNull_native = swift_bridgeObjectRelease();
      if (v31)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
          v20 = (_QWORD *)isUniquelyReferenced_nonNull_native;
        }
        v25 = v20[2];
        v24 = v20[3];
        if (v25 >= v24 >> 1)
        {
          isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v24 > 1), v25 + 1, 1, v20);
          v20 = (_QWORD *)isUniquelyReferenced_nonNull_native;
        }
        v20[2] = v25 + 1;
        v20[v25 + 4] = 0;
      }
      v19 += 2;
      if (!--v17)
      {
        swift_bridgeObjectRelease();
        v26 = *(_QWORD *)(v16 + 16);
        v14 = v30;
        goto LABEL_34;
      }
    }
  }
  v26 = 0;
  v20 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_34:
  swift_bridgeObjectRelease();
  if (v26 != v20[2])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_37;
  }
  v27 = specialized _copySequenceToContiguousArray<A>(_:)(v14, (uint64_t)v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v28 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS_SdtG_SS5label_Sd5valuets5NeverOTg506_sSSSdh33Iggyod_SS_SdtSS5label_Sd5valuets5f45OIegnrzr_TR76_sSS7SwiftUIE14tupleOfDoublesSayl25_Sd5valuetGSgyFSSAC_SdADtj1_K15XEfU_Tf3nnnpf_nTf1cn_n(v27);
  swift_release();
LABEL_38:
  v29 = (void *)v28;
  result.value._rawValue = v29;
  result.is_nil = v7;
  return result;
}

uint64_t decomposeTuple #1 () in String.tupleOfDoubles()(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;
  char v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  int64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  int64_t v63;
  unint64_t *v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;

  v4 = type metadata accessor for CharacterSet();
  v76 = *(_QWORD *)(v4 - 8);
  v77 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v75 = (char *)&v74 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  v6 = specialized Collection.dropFirst(_:)(1uLL, a1, a2);
  v8 = v7;
  swift_bridgeObjectRelease();
  result = Substring.distance(from:to:)();
  if (__OFSUB__(result, 1))
  {
    __break(1u);
  }
  else
  {
    result = Substring.index(_:offsetBy:limitedBy:)();
    if ((v10 & 1) != 0)
      v11 = v8;
    else
      v11 = result;
    if (v11 >> 14 >= v6 >> 14)
    {
      v12 = Substring.subscript.getter();
      v14 = v13;
      v15 = swift_bridgeObjectRelease();
      v80 = 44;
      v81 = 0xE100000000000000;
      MEMORY[0x24BDAC7A8](v15);
      *(&v74 - 2) = (uint64_t)&v80;
      swift_bridgeObjectRetain();
      v16 = specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(0x7FFFFFFFFFFFFFFFLL, 1, partial apply for specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:), (uint64_t)(&v74 - 4), v12, v14);
      swift_bridgeObjectRelease();
      v17 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySsG_SSs5NeverOTg5012_sSsSSIeggo_f4SSs5D132OIegnrzr_TR073_sSS7SwiftUIE14tupleOfDoublesSaySS5label_Sd5valuetGSgyF14decomposeTupleL_H32SSG6labels_AH6valuestyFSSSshcfu_Tf3nnnpf_nTf1cn_n(v16);
      swift_bridgeObjectRelease();
      v18 = *(_QWORD *)(v17 + 16);
      v74 = v17;
      if (v18)
      {
        v19 = (unint64_t *)(v17 + 40);
        v20 = (_QWORD *)MEMORY[0x24BEE4AF8];
        v21 = (_QWORD *)MEMORY[0x24BEE4AF8];
        do
        {
          v78 = v20;
          v22 = v21;
          v24 = *(v19 - 1);
          v23 = *v19;
          swift_bridgeObjectRetain();
          specialized Collection<>.firstIndex(of:)(58, 0xE100000000000000, v24, v23);
          if ((v25 & 1) != 0)
          {
            v33 = 0;
            v35 = 0xE000000000000000;
          }
          else
          {
            swift_bridgeObjectRetain();
            v26 = String.subscript.getter();
            v28 = v27;
            v30 = v29;
            v32 = v31;
            swift_bridgeObjectRelease();
            v33 = MEMORY[0x23B7C5E78](v26, v28, v30, v32);
            v35 = v34;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            v36 = String.index(after:)();
            swift_bridgeObjectRelease();
            v37 = specialized Collection.suffix(from:)(v36, v24, v23);
            v39 = v38;
            v41 = v40;
            v43 = v42;
            swift_bridgeObjectRelease();
            v24 = MEMORY[0x23B7C5E78](v37, v39, v41, v43);
            v23 = v44;
            swift_bridgeObjectRelease();
          }
          v21 = v22;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
          v46 = v21[2];
          v45 = v21[3];
          if (v46 >= v45 >> 1)
            v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v45 > 1), v46 + 1, 1, v21);
          v21[2] = v46 + 1;
          v47 = &v21[2 * v46];
          v47[4] = v33;
          v47[5] = v35;
          v20 = v78;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
          v49 = v20[2];
          v48 = v20[3];
          if (v49 >= v48 >> 1)
            v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v48 > 1), v49 + 1, 1, v20);
          v19 += 2;
          v20[2] = v49 + 1;
          v50 = &v20[2 * v49];
          v50[4] = v24;
          v50[5] = v23;
          --v18;
        }
        while (v18);
      }
      else
      {
        v20 = (_QWORD *)MEMORY[0x24BEE4AF8];
        v21 = (_QWORD *)MEMORY[0x24BEE4AF8];
      }
      swift_bridgeObjectRelease();
      v51 = v21[2];
      v52 = MEMORY[0x24BEE4AF8];
      v78 = v20;
      if (v51)
      {
        v79 = MEMORY[0x24BEE4AF8];
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v51, 0);
        v53 = v21 + 5;
        do
        {
          v54 = *v53;
          v80 = *(v53 - 1);
          v81 = v54;
          swift_bridgeObjectRetain();
          v55 = v75;
          static CharacterSet.whitespaces.getter();
          lazy protocol witness table accessor for type String and conformance String();
          v56 = StringProtocol.trimmingCharacters(in:)();
          v58 = v57;
          (*(void (**)(char *, uint64_t))(v76 + 8))(v55, v77);
          swift_bridgeObjectRelease();
          v59 = v79;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v59 + 16) + 1, 1);
            v59 = v79;
          }
          v61 = *(_QWORD *)(v59 + 16);
          v60 = *(_QWORD *)(v59 + 24);
          if (v61 >= v60 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v60 > 1, v61 + 1, 1);
            v59 = v79;
          }
          v53 += 2;
          *(_QWORD *)(v59 + 16) = v61 + 1;
          v62 = v59 + 16 * v61;
          *(_QWORD *)(v62 + 32) = v56;
          *(_QWORD *)(v62 + 40) = v58;
          --v51;
        }
        while (v51);
        swift_bridgeObjectRelease();
        v20 = v78;
        v52 = MEMORY[0x24BEE4AF8];
        v63 = v78[2];
        if (v63)
          goto LABEL_30;
      }
      else
      {
        v59 = MEMORY[0x24BEE4AF8];
        v63 = v20[2];
        if (v63)
        {
LABEL_30:
          v79 = v52;
          swift_bridgeObjectRetain();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v63, 0);
          v64 = v20 + 5;
          do
          {
            v65 = *v64;
            v80 = *(v64 - 1);
            v81 = v65;
            swift_bridgeObjectRetain();
            v66 = v75;
            static CharacterSet.whitespaces.getter();
            lazy protocol witness table accessor for type String and conformance String();
            v67 = StringProtocol.trimmingCharacters(in:)();
            v69 = v68;
            (*(void (**)(char *, uint64_t))(v76 + 8))(v66, v77);
            swift_bridgeObjectRelease();
            v70 = v79;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v70 + 16) + 1, 1);
              v70 = v79;
            }
            v72 = *(_QWORD *)(v70 + 16);
            v71 = *(_QWORD *)(v70 + 24);
            if (v72 >= v71 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v71 > 1, v72 + 1, 1);
              v70 = v79;
            }
            v64 += 2;
            *(_QWORD *)(v70 + 16) = v72 + 1;
            v73 = v70 + 16 * v72;
            *(_QWORD *)(v73 + 32) = v67;
            *(_QWORD *)(v73 + 40) = v69;
            --v63;
          }
          while (v63);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          return v59;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v59;
    }
  }
  __break(1u);
  return result;
}

uint64_t colorNameForColorComponents(_:)(float a1, float a2, float a3, float a4)
{
  uint64_t result;
  _BOOL4 v5;
  BOOL v9;

  if (a1 == 0.0 && a2 == 0.0 && a3 == 0.0)
  {
    if (a4 == 0.0)
      return 0x7261656C63;
    if (a4 == 1.0)
      return 0x6B63616C62;
  }
  v5 = a1 == 1.0;
  if (a2 != 1.0)
    v5 = 0;
  if (v5 && a3 == 1.0 && a4 == 1.0)
    return 0x6574696877;
  if (a1 == 0.03125 && a2 == 0.03125 && a3 == 0.03125 && a4 == 1.0)
    return 2036429415;
  if (a1 != 1.0)
    goto LABEL_41;
  if (a2 == 0.0 && a3 == 0.0 && a4 == 1.0)
    return 6579570;
  result = 0x722D6D6574737973;
  if ((a2 != 0.042969 || a3 != 0.03125 || a4 != 1.0) && (a2 != 0.058594 || a3 != 0.042969 || a4 != 1.0))
  {
    if (a1 != 0.0)
      goto LABEL_43;
LABEL_41:
    if (a2 == 1.0 && a3 == 0.0 && a4 == 1.0)
      return 0x6E65657267;
    if (a2 == 0.0 && a3 == 1.0 && a4 == 1.0)
    {
      return 1702194274;
    }
    else
    {
LABEL_43:
      if (a3 != 0.0)
        v5 = 0;
      if (v5 && a4 == 1.0)
      {
        return 0x776F6C6C6579;
      }
      else
      {
        result = 0x656C70727570;
        if ((a1 != 0.214 || a2 != 0.0 || a3 != 0.214 || a4 != 1.0)
          && (a1 != 0.21484 || a2 != 0.0 || a3 != 0.21484 || a4 != 1.0))
        {
          if (a1 == 1.0 && a2 == 0.21484 && a3 == 0.0 && a4 == 1.0)
          {
            return 0x65676E61726FLL;
          }
          else if (a1 == 0.0 && a2 == 1.0 && a3 == 1.0 && a4 == 1.0)
          {
            return 1818322292;
          }
          else if (a1 == 0.21484 && a2 == 0.21484 && a3 == 1.0 && a4 == 1.0)
          {
            return 0x6F6769646E69;
          }
          else if (a1 == 1.0 && a2 == 0.0 && a3 == 0.21484 && a4 == 1.0)
          {
            return 1802398064;
          }
          else
          {
            v9 = a1 == 0.046875;
            if (a2 != 0.046875)
              v9 = 0;
            if (a3 != 0.054688)
              v9 = 0;
            if (v9 && a4 == 0.29688)
              return 0xD000000000000010;
            else
              return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t Color.Resolved.name.getter(float a1, float a2, float a3, float a4)
{
  return colorNameForColorComponents(_:)(roundf(a1 * 256.0) * 0.0039062, roundf(a2 * 256.0) * 0.0039062, roundf(a3 * 256.0) * 0.0039062, roundf(a4 * 256.0) * 0.0039062);
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  const void *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = *(_QWORD *)(result + 16);
  v2 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v3 = result + 32;
    result = swift_bridgeObjectRetain();
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = v2 + 4;
    v29 = v1;
    while (1)
    {
      v8 = v3 + 24 * v4;
      v9 = *(_QWORD *)v8;
      v10 = *(_QWORD *)(v8 + 8);
      v11 = *(unsigned __int8 *)(v8 + 16);
      if (v11)
      {
        if (v11 != 1)
        {
          ++v4;
          v13 = v9;
LABEL_18:
          if (v6)
            goto LABEL_31;
          goto LABEL_19;
        }
        v12 = v10 - 1;
        if (__OFSUB__(v10, 1))
          goto LABEL_41;
        v13 = v12 - v5;
        if (__OFSUB__(v12, v5))
          goto LABEL_42;
        v14 = __OFADD__(v5++, 1);
        if (v14)
          goto LABEL_43;
        v14 = __OFSUB__(v10, v9);
        v15 = v10 - v9;
        if (v14)
          goto LABEL_44;
      }
      else
      {
        v13 = v9 + v5;
        if (__OFADD__(v9, v5))
          goto LABEL_45;
        v14 = __OFADD__(v5++, 1);
        if (v14)
          goto LABEL_46;
        v14 = __OFSUB__(v10, v9);
        v15 = v10 - v9;
        if (v14)
          goto LABEL_47;
      }
      if (v5 < v15)
        goto LABEL_18;
      v5 = 0;
      ++v4;
      if (v6)
        goto LABEL_31;
LABEL_19:
      v16 = v2[3];
      if ((uint64_t)((v16 >> 1) + 0x4000000000000000) < 0)
        goto LABEL_40;
      v17 = v16 & 0xFFFFFFFFFFFFFFFELL;
      if (v17 <= 1)
        v18 = 1;
      else
        v18 = v17;
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Int>, MEMORY[0x24BEE1768], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v19 = (_QWORD *)swift_allocObject();
      v20 = _swift_stdlib_malloc_size(v19);
      v21 = v20 - 32;
      if (v20 < 32)
        v21 = v20 - 25;
      v22 = v21 >> 3;
      v19[2] = v18;
      v19[3] = 2 * (v21 >> 3);
      v23 = (unint64_t)(v19 + 4);
      v24 = v2[3] >> 1;
      if (v2[2])
      {
        v25 = v2 + 4;
        if (v19 != v2 || v23 >= (unint64_t)v25 + 8 * v24)
          memmove(v19 + 4, v25, 8 * v24);
        v2[2] = 0;
      }
      v7 = (_QWORD *)(v23 + 8 * v24);
      v6 = (v22 & 0x7FFFFFFFFFFFFFFFLL) - v24;
      result = swift_release();
      v2 = v19;
      v1 = v29;
LABEL_31:
      v14 = __OFSUB__(v6--, 1);
      if (v14)
      {
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
        return result;
      }
      *v7++ = v13;
      if (v4 >= v1)
      {
        result = swift_bridgeObjectRelease();
        goto LABEL_35;
      }
    }
  }
  v6 = 0;
LABEL_35:
  v26 = v2[3];
  if (v26 >= 2)
  {
    v27 = v26 >> 1;
    v14 = __OFSUB__(v27, v6);
    v28 = v27 - v6;
    if (v14)
      goto LABEL_48;
    v2[2] = v28;
  }
  return (uint64_t)v2;
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  unsigned __int8 v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  unsigned __int8 v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v1 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (*(_QWORD *)(result + 16))
  {
    v2 = *(_QWORD *)(result + 16);
    result = swift_bridgeObjectRetain();
    v3 = v2;
    v4 = 0;
    v5 = 0;
    v31 = v1;
    v6 = (uint64_t)(v1 + 4);
    v27 = v2;
    v7 = result + 72;
    while (1)
    {
      v8 = *(void **)(v7 - 40);
      v9 = *(_QWORD *)(v7 - 32);
      v10 = *(_QWORD *)(v7 + 16);
      v11 = *(_DWORD *)(v7 + 44);
      v12 = *(_QWORD *)(v7 + 48);
      v13 = *(_BYTE *)(v7 + 56);
      v38 = *(void **)(v7 - 16);
      v39 = *(void **)(v7 - 24);
      v36 = *(_QWORD *)v7;
      v37 = *(_QWORD *)(v7 - 8);
      v42 = *(_QWORD *)(v7 + 24);
      v35 = *(_QWORD *)(v7 + 32);
      v34 = *(_BYTE *)(v7 + 40);
      v40 = *(_QWORD *)(v7 + 64);
      v41 = v12;
      v32 = v10;
      v33 = *(_QWORD *)(v7 + 8);
      if (v4)
      {
        v14 = v3;
        outlined copy of _ShapeStyle_Pack.Fill(v8, v9, *(void **)(v7 - 24), *(void **)(v7 - 16), *(_QWORD *)(v7 - 8), *(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 24), *(_QWORD *)(v7 + 32), *(_BYTE *)(v7 + 40));
        outlined copy of GraphicsBlendMode?(v12, v13);
        result = swift_bridgeObjectRetain();
        v3 = v14;
        v15 = v13;
        goto LABEL_20;
      }
      v30 = *(_BYTE *)(v7 + 56);
      v16 = v31[3];
      if ((uint64_t)((v16 >> 1) + 0x4000000000000000) < 0)
        goto LABEL_29;
      v28 = *(_QWORD *)(v7 - 32);
      v29 = *(void **)(v7 - 40);
      v17 = v16 & 0xFFFFFFFFFFFFFFFELL;
      if (v17 <= 1)
        v18 = 1;
      else
        v18 = v17;
      type metadata accessor for _ContiguousArrayStorage<(offset: Int, element: _ShapeStyle_Pack.Style)>();
      v19 = (_QWORD *)swift_allocObject();
      v20 = (uint64_t)(_swift_stdlib_malloc_size(v19) - 32) / 120;
      v19[2] = v18;
      v19[3] = 2 * v20;
      v21 = v31[3] >> 1;
      v6 = (uint64_t)&v19[15 * v21 + 4];
      v4 = (v20 & 0x7FFFFFFFFFFFFFFFLL) - v21;
      if (!v31[2])
      {
        v8 = v29;
        outlined copy of _ShapeStyle_Pack.Fill(v29, v28, v39, v38, v37, v36, v33, v10, v42, v35, v34);
        v15 = v30;
        outlined copy of GraphicsBlendMode?(v41, v30);
        swift_bridgeObjectRetain();
        v9 = v28;
        result = swift_release();
        v31 = v19;
        v3 = v27;
        goto LABEL_20;
      }
      if (v19 < v31 || v19 + 4 >= &v31[15 * v21 + 4])
      {
        v9 = v28;
        outlined copy of _ShapeStyle_Pack.Fill(v29, v28, v39, v38, v37, v36, v33, v10, v42, v35, v34);
        outlined copy of GraphicsBlendMode?(v41, v30);
      }
      else
      {
        outlined copy of _ShapeStyle_Pack.Fill(v29, v28, v39, v38, v37, v36, v33, v10, v42, v35, v34);
        outlined copy of GraphicsBlendMode?(v41, v30);
        v9 = v28;
        if (v19 == v31)
          goto LABEL_19;
      }
      memmove(v19 + 4, v31 + 4, 120 * v21);
LABEL_19:
      swift_bridgeObjectRetain();
      v31[2] = 0;
      result = swift_release();
      v31 = v19;
      v3 = v27;
      v8 = v29;
      v15 = v30;
LABEL_20:
      v23 = __OFSUB__(v4--, 1);
      if (v23)
      {
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        return result;
      }
      *(_QWORD *)v6 = v5;
      *(_QWORD *)(v6 + 8) = v8;
      *(_QWORD *)(v6 + 16) = v9;
      *(_QWORD *)(v6 + 24) = v39;
      *(_QWORD *)(v6 + 32) = v38;
      *(_QWORD *)(v6 + 40) = v37;
      *(_QWORD *)(v6 + 48) = v36;
      *(_QWORD *)(v6 + 56) = v33;
      *(_QWORD *)(v6 + 64) = v32;
      *(_QWORD *)(v6 + 72) = v42;
      *(_QWORD *)(v6 + 80) = v35;
      *(_BYTE *)(v6 + 88) = v34;
      *(_DWORD *)(v6 + 92) = v11;
      *(_QWORD *)(v6 + 96) = v41;
      *(_BYTE *)(v6 + 104) = v15;
      *(_QWORD *)(v6 + 112) = v40;
      v6 += 120;
      v7 += 112;
      if (v3 == ++v5)
      {
        result = swift_bridgeObjectRelease();
        v1 = v31;
        goto LABEL_24;
      }
    }
  }
  v4 = 0;
LABEL_24:
  v24 = v1[3];
  if (v24 >= 2)
  {
    v25 = v24 >> 1;
    v23 = __OFSUB__(v25, v4);
    v26 = v25 - v4;
    if (v23)
      goto LABEL_30;
    v1[2] = v26;
  }
  return (uint64_t)v1;
}

void specialized _copySequenceToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  char *v27;
  void (*v28)(char *, uint64_t);
  void (**v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  int64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  const void *v56;
  char *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;

  type metadata accessor for RangeSet<Int>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Int>.Ranges, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4908]);
  v64 = v2;
  v70 = *(char **)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v69 = (char *)&v61 - v3;
  type metadata accessor for RangeSet<Int><>.IndexSequence(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t))type metadata accessor for RangeSet<>.IndexSequence);
  MEMORY[0x24BDAC7A8](v4);
  v68 = (char *)&v61 - v5;
  type metadata accessor for RangeSet<Int><>.IndexSequence(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t))type metadata accessor for RangeSet<>.IndexSequence.Iterator);
  v67 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v65 = (char *)&v61 - v7;
  type metadata accessor for RangeSet<Int>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>, (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4968]);
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v61 - v14;
  v66 = type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns.Iterator(0);
  MEMORY[0x24BDAC7A8](v66);
  v17 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(void **)a1;
  v19 = *(_QWORD *)(a1 + 8);
  v20 = *(_BYTE *)(a1 + 16);
  v21 = *(_QWORD *)(a1 + 24);
  v22 = *(_QWORD *)(a1 + 32);
  v23 = *(_DWORD *)(a1 + 40);
  v24 = a1 + *(int *)(type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0) + 24);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v25(v15, v24, v9);
  *(_QWORD *)v17 = v18;
  *((_QWORD *)v17 + 1) = v19;
  v17[16] = v20;
  *((_QWORD *)v17 + 3) = v21;
  *((_QWORD *)v17 + 4) = v22;
  *((_DWORD *)v17 + 10) = v23;
  v26 = v64;
  v25(v12, (uint64_t)v15, v9);
  outlined copy of Text.Layout.Line.Line(v18, v19, v20);
  v27 = v69;
  RangeSet.ranges.getter();
  v28 = *(void (**)(char *, uint64_t))(v10 + 8);
  v28(v12, v9);
  v29 = (void (**)(char *, uint64_t, uint64_t))v70;
  v30 = (uint64_t)v68;
  (*((void (**)(char *, char *, uint64_t))v70 + 4))(v68, v27, v26);
  v31 = v65;
  v29[2](&v65[*(int *)(v67 + 48)], v30, v26);
  *v31 = 0;
  v31[1] = 0;
  v28(v15, v9);
  outlined destroy of RangeSet<Int><>.IndexSequence(v30);
  v32 = (uint64_t *)&v17[*(int *)(v66 + 20)];
  outlined init with take of RangeSet<Int><>.IndexSequence.Iterator((uint64_t)v31, (uint64_t)v32);
  v33 = *v32;
  v34 = RangeSet.Ranges.count.getter();
  v35 = (char *)MEMORY[0x24BEE4AF8];
  if (v33 < v34)
  {
    v65 = (char *)MEMORY[0x24BEE4AF8];
    v35 = (char *)v32[1];
    v36 = *(char **)v17;
    v67 = *((_QWORD *)v17 + 1);
    LODWORD(v68) = v17[16];
    v37 = *((_QWORD *)v17 + 3);
    v38 = *((_QWORD *)v17 + 4);
    v62 = v17;
    LODWORD(v66) = *((_DWORD *)v17 + 10);
    RangeSet.Ranges.subscript.getter();
    v17 = &v35[v71];
    if (!__OFADD__(v71, v35))
    {
      v39 = 0;
      v40 = MEMORY[0x24BEE4AF8] + 32;
      v69 = v36;
      v63 = v32;
      do
      {
        v41 = __OFADD__(v35++, 1);
        if (v41)
        {
          __break(1u);
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return;
        }
        RangeSet.Ranges.subscript.getter();
        if (__OFSUB__(v72, v71))
          goto LABEL_36;
        if ((uint64_t)v35 >= v72 - v71)
        {
          v35 = 0;
          *v32 = ++v33;
        }
        v70 = v17;
        if ((v68 & 1) != 0)
        {
          v42 = v33;
          v43 = v67;
          outlined copy of Text.Layout.Line.Line(v36, v67, 1);
          v44 = (char *)(id)_NSTextLineFragmentGetCTLine(v36);
          if (!v44)
            goto LABEL_40;
          v45 = v44;
          outlined consume of Text.Layout.Line.Line(v36, v43, 1);
          v46 = 0;
          if (v39)
            goto LABEL_24;
        }
        else
        {
          v42 = v33;
          v47 = v67;
          outlined copy of Text.Layout.Line.Line(v36, v67, 0);
          outlined copy of Text.Layout.Line.Line(v36, v47, 0);

          swift_release();
          v45 = v36;
          v46 = v47;
          if (v39)
          {
            v45 = v69;
            v46 = v47;
            goto LABEL_24;
          }
        }
        v48 = v65;
        v49 = *((_QWORD *)v65 + 3);
        if ((uint64_t)((v49 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_38;
        v50 = v49 & 0xFFFFFFFFFFFFFFFELL;
        if (v50 <= 1)
          v51 = 1;
        else
          v51 = v50;
        type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Layout.Run>, (uint64_t)&type metadata for Text.Layout.Run, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
        v52 = (_QWORD *)swift_allocObject();
        v53 = (uint64_t)(_swift_stdlib_malloc_size(v52) - 32) / 48;
        v52[2] = v51;
        v52[3] = 2 * v53;
        v54 = (unint64_t)(v52 + 4);
        v55 = v48[3] >> 1;
        if (v48[2])
        {
          v56 = v48 + 4;
          if (v52 != v48 || v54 >= (unint64_t)v56 + 48 * v55)
            memmove(v52 + 4, v56, 48 * v55);
          v48[2] = 0;
        }
        v40 = v54 + 48 * v55;
        v39 = (v53 & 0x7FFFFFFFFFFFFFFFLL) - v55;
        swift_release();
        v65 = (char *)v52;
        v32 = v63;
LABEL_24:
        v41 = __OFSUB__(v39--, 1);
        if (v41)
          goto LABEL_37;
        v57 = v70;
        *(_QWORD *)v40 = v45;
        *(_QWORD *)(v40 + 8) = v57;
        *(_QWORD *)(v40 + 16) = v37;
        *(_QWORD *)(v40 + 24) = v38;
        *(_DWORD *)(v40 + 32) = v66;
        *(_QWORD *)(v40 + 40) = v46;
        if (v42 >= RangeSet.Ranges.count.getter())
        {
          v32[1] = (uint64_t)v35;
          v17 = v62;
          v35 = v65;
          goto LABEL_31;
        }
        v33 = v42;
        v40 += 48;
        RangeSet.Ranges.subscript.getter();
        v17 = &v35[v71];
        v36 = v69;
      }
      while (!__OFADD__(v71, v35));
    }
    __break(1u);
  }
  v39 = 0;
LABEL_31:
  outlined destroy of TypesettingConfiguration((uint64_t)v17, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns.Iterator);
  v58 = *((_QWORD *)v35 + 3);
  if (v58 >= 2)
  {
    v59 = v58 >> 1;
    v41 = __OFSUB__(v59, v39);
    v60 = v59 - v39;
    if (v41)
      goto LABEL_39;
    *((_QWORD *)v35 + 2) = v60;
  }
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t (*v13)(_QWORD);
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, char *, uint64_t);
  _QWORD *v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  char *v27;
  int v28;
  char *v29;
  void (*v30)(uint64_t, char *, uint64_t);
  unint64_t v31;
  char *v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  _QWORD v45[2];
  uint64_t (*v46)(char *, uint64_t, uint64_t);
  char *v47;
  uint64_t v48;
  char *v49;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v45 - v3;
  v5 = type metadata accessor for Date();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(unsigned __int8 *)(v6 + 80);
  outlined init with copy of TypesettingLanguage(a1, (uint64_t)v11, v13);
  v47 = v11;
  TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries.next()(v4);
  v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  v14 = v46(v4, 1, v5);
  v15 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (v14 != 1)
  {
    v16 = 0;
    v48 = (v12 + 32) & ~v12;
    v49 = v4;
    v23 = MEMORY[0x24BEE4AF8] + v48;
    v24 = *(void (**)(uint64_t, char *, uint64_t))(v6 + 32);
    v45[0] = v6;
    v45[1] = v12 | 7;
    v25 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v26 = v46;
    v17 = (uint64_t)v47;
    while (1)
    {
      v29 = v4;
      v30 = v24;
      result = ((uint64_t (*)(char *, char *, uint64_t))v24)(v8, v29, v5);
      if (v16)
      {
        v15 = v25;
        v21 = __OFSUB__(v16--, 1);
        if (v21)
          goto LABEL_32;
      }
      else
      {
        v31 = v25[3];
        if ((uint64_t)((v31 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_33;
        v32 = v8;
        v33 = v31 & 0xFFFFFFFFFFFFFFFELL;
        if (v33 <= 1)
          v34 = 1;
        else
          v34 = v33;
        type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Date>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
        v35 = *(_QWORD *)(v6 + 72);
        v36 = v48;
        v15 = (_QWORD *)swift_allocObject();
        result = _swift_stdlib_malloc_size(v15);
        if (!v35)
          goto LABEL_34;
        v37 = result - v36;
        if (result - v36 == 0x8000000000000000 && v35 == -1)
          goto LABEL_35;
        v39 = v37 / v35;
        v15[2] = v34;
        v15[3] = 2 * (v37 / v35);
        v40 = (char *)v15 + v36;
        v41 = v25[3] >> 1;
        v42 = v41 * v35;
        v8 = v32;
        if (v25[2])
        {
          if (v15 < v25 || v40 >= (char *)v25 + v48 + v42)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v15 != v25)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          v25[2] = 0;
        }
        v23 = (uint64_t)&v40[v42];
        v44 = (v39 & 0x7FFFFFFFFFFFFFFFLL) - v41;
        result = swift_release();
        v6 = v45[0];
        v26 = v46;
        v17 = (uint64_t)v47;
        v21 = __OFSUB__(v44, 1);
        v16 = v44 - 1;
        if (v21)
        {
LABEL_32:
          __break(1u);
LABEL_33:
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
          return result;
        }
      }
      v30(v23, v8, v5);
      v23 += *(_QWORD *)(v6 + 72);
      v27 = v49;
      TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries.next()(v49);
      v28 = v26(v27, 1, v5);
      v24 = v30;
      v4 = v27;
      v25 = v15;
      if (v28 == 1)
        goto LABEL_3;
    }
  }
  v16 = 0;
  v17 = (uint64_t)v47;
LABEL_3:
  outlined destroy of TypesettingConfiguration(v17, type metadata accessor for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries);
  result = outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v4, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
  v19 = v15[3];
  if (v19 >= 2)
  {
    v20 = v19 >> 1;
    v21 = __OFSUB__(v20, v16);
    v22 = v20 - v16;
    if (v21)
      goto LABEL_36;
    v15[2] = v22;
  }
  return (uint64_t)v15;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t (*v18)(_QWORD);
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  char *v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  BOOL v37;
  unint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  unsigned int v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD v57[2];
  uint64_t v58;
  unsigned int (*v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  _QWORD *v67;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v2);
  v63 = (uint64_t)v57 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v57 - v5;
  MEMORY[0x24BDAC7A8](v7);
  v64 = (uint64_t)v57 - v8;
  v9 = type metadata accessor for Date();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v62 = (char *)v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v66 = (char *)v57 - v13;
  v14 = type metadata accessor for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries(0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(unsigned __int8 *)(v10 + 80);
  outlined init with copy of TypesettingLanguage(a1, (uint64_t)v16, v18);
  v19 = *(int *)(v14 + 24);
  v65 = v16;
  v20 = (uint64_t)&v16[v19];
  outlined init with copy of Date?(v20, (uint64_t)v6);
  v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v22 = v6;
  v23 = v21(v6, 1, v9);
  v24 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (v23 != 1)
  {
    v25 = 0;
    v27 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v21;
    v58 = (v17 + 32) & ~v17;
    v59 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v21;
    v28 = MEMORY[0x24BEE4AF8] + v58;
    v29 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 32);
    v57[0] = v22;
    v57[1] = v17 | 7;
    v30 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v26 = (uint64_t)v22;
    v60 = v20;
    v61 = v9;
    while (1)
    {
      v67 = v30;
      v31 = (uint64_t)v62;
      v32 = v26;
      v29(v62, v26, v9);
      v33 = v63;
      outlined init with copy of Date?(v20, v63);
      TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries.makeNext(current:)(v31);
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v31, v9);
      v34 = v33;
      v35 = v64;
      outlined init with take of Date?(v34, v64);
      if (v27(v35, 1, v9) == 1)
      {
        v53 = v67;
        goto LABEL_33;
      }
      result = ((uint64_t (*)(char *, uint64_t, uint64_t))v29)(v66, v35, v9);
      if (v25)
      {
        v24 = v67;
        v20 = v60;
        v9 = v61;
        v26 = v32;
        v37 = __OFSUB__(v25--, 1);
        if (v37)
          goto LABEL_37;
        goto LABEL_30;
      }
      v38 = v67[3];
      if ((uint64_t)((v38 >> 1) + 0x4000000000000000) < 0)
        goto LABEL_38;
      v39 = v38 & 0xFFFFFFFFFFFFFFFELL;
      if (v39 <= 1)
        v40 = 1;
      else
        v40 = v39;
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Date>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v41 = *(_QWORD *)(v10 + 72);
      v42 = v58;
      v24 = (_QWORD *)swift_allocObject();
      result = _swift_stdlib_malloc_size(v24);
      if (!v41)
        goto LABEL_39;
      v43 = result - v42;
      if (result - v42 == 0x8000000000000000 && v41 == -1)
        goto LABEL_40;
      v45 = v43 / v41;
      v24[2] = v40;
      v24[3] = 2 * (v43 / v41);
      v46 = (char *)v24 + v42;
      v47 = v67;
      v48 = v67[3] >> 1;
      v49 = v48 * v41;
      v20 = v60;
      v9 = v61;
      if (v67[2])
        break;
LABEL_29:
      v28 = (uint64_t)&v46[v49];
      v51 = (v45 & 0x7FFFFFFFFFFFFFFFLL) - v48;
      result = swift_release();
      v26 = v57[0];
      v37 = __OFSUB__(v51, 1);
      v25 = v51 - 1;
      if (v37)
      {
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        return result;
      }
LABEL_30:
      v29((char *)v28, (uint64_t)v66, v9);
      v28 += *(_QWORD *)(v10 + 72);
      outlined init with copy of Date?(v20, v26);
      v27 = v59;
      v52 = v59(v26, 1, v9);
      v30 = v24;
      if (v52 == 1)
        goto LABEL_31;
    }
    if (v24 < v67 || v46 >= (char *)v67 + v58 + v49)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else
    {
      if (v24 == v67)
      {
LABEL_28:
        v47[2] = 0;
        goto LABEL_29;
      }
      swift_arrayInitWithTakeBackToFront();
    }
    v47 = v67;
    goto LABEL_28;
  }
  v25 = 0;
  v26 = (uint64_t)v6;
LABEL_31:
  outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?(v26, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
  v35 = v64;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v64, 1, 1, v9);
  v53 = v24;
LABEL_33:
  outlined destroy of TypesettingConfiguration((uint64_t)v65, type metadata accessor for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries);
  outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?(v35, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
  v54 = v53[3];
  result = (uint64_t)v53;
  if (v54 >= 2)
  {
    v55 = v54 >> 1;
    v37 = __OFSUB__(v55, v25);
    v56 = v55 - v25;
    if (v37)
      goto LABEL_41;
    v53[2] = v56;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t (*v29)(_QWORD);
  unsigned int (*v30)(char *, uint64_t, uint64_t);
  unsigned int v31;
  _QWORD *v32;
  void (*v33)(char *, char *, uint64_t);
  void (*v34)(char *, char *, uint64_t);
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  unsigned int (*v46)(char *, uint64_t, uint64_t);
  uint64_t (*v47)(uint64_t);
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v50)(uint64_t, char *, uint64_t);
  char *v51;
  uint64_t v52;
  uint64_t result;
  uint64_t v54;
  unint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unint64_t v70;
  unint64_t v71;
  BOOL v72;
  uint64_t v73;
  _QWORD v74[2];
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  void (*v95)(uint64_t, char *, uint64_t);
  unsigned int (*v96)(char *, uint64_t, uint64_t);
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  _QWORD *v104;

  v87 = type metadata accessor for Calendar.SearchDirection();
  v85 = *(_QWORD *)(v87 - 8);
  MEMORY[0x24BDAC7A8](v87);
  v84 = (char *)v74 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Calendar.RepeatedTimePolicy();
  v92 = *(_QWORD *)(v3 - 8);
  v93 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v91 = (char *)v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = type metadata accessor for Calendar.MatchingPolicy();
  v101 = *(_QWORD *)(v90 - 8);
  MEMORY[0x24BDAC7A8](v90);
  v89 = (char *)v74 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = type metadata accessor for Calendar();
  v86 = *(_QWORD *)(v88 - 8);
  MEMORY[0x24BDAC7A8](v88);
  v7 = (char *)v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v74 - v12;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v74 - v15;
  v17 = type metadata accessor for Date();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v75 = (char *)v74 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)v74 - v21;
  MEMORY[0x24BDAC7A8](v23);
  v99 = (char *)v74 - v24;
  v25 = type metadata accessor for EveryMinuteTimelineSchedule.Entries(0);
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)v74 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = *(unsigned __int8 *)(v18 + 80);
  outlined init with copy of TypesettingLanguage(a1, (uint64_t)v27, v29);
  v102 = v27;
  outlined init with copy of Date?((uint64_t)v27, (uint64_t)v13);
  v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v31 = v30(v13, 1, v17);
  v32 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (v31 != 1)
  {
    v100 = 0;
    v76 = (v28 + 32) & ~v28;
    v103 = MEMORY[0x24BEE4AF8] + v76;
    v33 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
    v81 = *MEMORY[0x24BDCF020];
    v80 = *MEMORY[0x24BDCF0B0];
    v79 = *MEMORY[0x24BDCF068];
    v74[1] = v28 | 7;
    v34 = v33;
    v35 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v83 = v16;
    v77 = v13;
    v82 = v18;
    v96 = v30;
    v97 = v22;
    v94 = v7;
    v95 = (void (*)(uint64_t, char *, uint64_t))v33;
    v78 = v17;
    while (1)
    {
      v104 = v35;
      v34(v22, v13, v17);
      static Calendar.current.getter();
      if (one-time initialization token for zeroSecondComponents != -1)
        swift_once();
      v36 = type metadata accessor for DateComponents();
      v98 = __swift_project_value_buffer(v36, (uint64_t)static EveryMinuteTimelineSchedule.Entries.zeroSecondComponents);
      v38 = v89;
      v37 = v90;
      (*(void (**)(char *, _QWORD, uint64_t))(v101 + 104))(v89, v81, v90);
      v40 = v91;
      v39 = v92;
      v41 = v93;
      (*(void (**)(char *, _QWORD, uint64_t))(v92 + 104))(v91, v80, v93);
      v42 = v84;
      v43 = v85;
      v44 = v87;
      (*(void (**)(char *, _QWORD, uint64_t))(v85 + 104))(v84, v79, v87);
      v45 = v94;
      Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v42, v44);
      (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v41);
      (*(void (**)(char *, uint64_t))(v101 + 8))(v38, v37);
      (*(void (**)(char *, uint64_t))(v86 + 8))(v45, v88);
      v17 = v78;
      v46 = v96;
      if (v96(v10, 1, v78) == 1)
      {
        v47 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
        outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v10, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
        v48 = (uint64_t)v102;
        outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v102, &lazy cache variable for type metadata for Date?, v47);
        v18 = v82;
        v49 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v82 + 56);
        v49(v48, 1, 1, v17);
        v16 = v83;
        v50 = v95;
      }
      else
      {
        v51 = v75;
        v50 = v95;
        v95((uint64_t)v75, v10, v17);
        v52 = (uint64_t)v102;
        outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v102, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
        v50(v52, v51, v17);
        v18 = v82;
        v49 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v82 + 56);
        v49(v52, 0, 1, v17);
        v16 = v83;
      }
      v22 = v97;
      v50((uint64_t)v16, v97, v17);
      v49((uint64_t)v16, 0, 1, v17);
      if (v46(v16, 1, v17) == 1)
      {
        v32 = v104;
        goto LABEL_34;
      }
      v34 = (void (*)(char *, char *, uint64_t))v50;
      result = ((uint64_t (*)(char *, char *, uint64_t))v50)(v99, v16, v17);
      if (v100)
      {
        v32 = v104;
        v54 = v100 - 1;
        if (__OFSUB__(v100, 1))
          goto LABEL_38;
        goto LABEL_31;
      }
      v55 = v104[3];
      if ((uint64_t)((v55 >> 1) + 0x4000000000000000) < 0)
        goto LABEL_39;
      v56 = v55 & 0xFFFFFFFFFFFFFFFELL;
      if (v56 <= 1)
        v57 = 1;
      else
        v57 = v56;
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Date>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v58 = *(_QWORD *)(v18 + 72);
      v59 = v76;
      v32 = (_QWORD *)swift_allocObject();
      result = _swift_stdlib_malloc_size(v32);
      if (!v58)
        goto LABEL_40;
      v60 = result - v59;
      if (result - v59 == 0x8000000000000000 && v58 == -1)
        goto LABEL_41;
      v61 = v60 / v58;
      v32[2] = v57;
      v32[3] = 2 * (v60 / v58);
      v62 = (char *)v32 + v59;
      v63 = v104;
      v64 = v104[3] >> 1;
      v65 = v64 * v58;
      v22 = v97;
      if (v104[2])
        break;
LABEL_30:
      v103 = (uint64_t)&v62[v65];
      v67 = (v61 & 0x7FFFFFFFFFFFFFFFLL) - v64;
      result = swift_release();
      v34 = (void (*)(char *, char *, uint64_t))v95;
      v46 = v96;
      v54 = v67 - 1;
      if (__OFSUB__(v67, 1))
      {
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return result;
      }
LABEL_31:
      v100 = v54;
      v68 = v103;
      v34((char *)v103, v99, v17);
      v103 = v68 + *(_QWORD *)(v18 + 72);
      v13 = v77;
      outlined init with copy of Date?((uint64_t)v102, (uint64_t)v77);
      v69 = v46(v13, 1, v17);
      v35 = v32;
      if (v69 == 1)
        goto LABEL_3;
    }
    if (v32 < v104 || v62 >= (char *)v104 + v76 + v65)
    {
      v66 = v61;
      swift_arrayInitWithTakeFrontToBack();
    }
    else
    {
      if (v32 == v104)
      {
LABEL_29:
        v63[2] = 0;
        goto LABEL_30;
      }
      v66 = v61;
      swift_arrayInitWithTakeBackToFront();
    }
    v61 = v66;
    v63 = v104;
    goto LABEL_29;
  }
  v100 = 0;
LABEL_3:
  outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v13, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v16, 1, 1, v17);
LABEL_34:
  outlined destroy of TypesettingConfiguration((uint64_t)v102, type metadata accessor for EveryMinuteTimelineSchedule.Entries);
  outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v16, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
  v70 = v32[3];
  result = (uint64_t)v32;
  if (v70 >= 2)
  {
    v71 = v70 >> 1;
    v72 = __OFSUB__(v71, v100);
    v73 = v71 - v100;
    if (v72)
      goto LABEL_42;
    v32[2] = v73;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t (*v15)(_QWORD);
  uint64_t v16;
  uint64_t (*v17)(char *, char *, uint64_t);
  uint64_t result;
  _QWORD *v19;
  BOOL v20;
  unint64_t v21;
  char *v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v39 - v3;
  v5 = type metadata accessor for Date();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PeriodicTimelineSchedule.Entries(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(unsigned __int8 *)(v6 + 80);
  v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v43 = (v12 + 32) & ~v12;
  v14 = MEMORY[0x24BEE4AF8] + v43;
  outlined init with copy of TypesettingLanguage(a1, (uint64_t)v11, v15);
  v16 = 0;
  v44 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v41 = v4;
  v42 = v12 | 7;
  v40 = v8;
  while (1)
  {
    v44(v4, v11, v5);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
    static Date.+= infix(_:_:)();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    {
      outlined destroy of TypesettingConfiguration((uint64_t)v11, type metadata accessor for PeriodicTimelineSchedule.Entries);
      result = outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v4, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
      v36 = v13[3];
      if (v36 >= 2)
      {
        v37 = v36 >> 1;
        v20 = __OFSUB__(v37, v16);
        v38 = v37 - v16;
        if (v20)
          goto LABEL_37;
        v13[2] = v38;
      }
      return (uint64_t)v13;
    }
    v17 = *(uint64_t (**)(char *, char *, uint64_t))(v6 + 32);
    result = v17(v8, v4, v5);
    if (!v16)
      break;
    v19 = v13;
    v20 = __OFSUB__(v16--, 1);
    if (v20)
      goto LABEL_33;
LABEL_28:
    v17((char *)v14, v8, v5);
    v14 += *(_QWORD *)(v6 + 72);
    v13 = v19;
  }
  v21 = v13[3];
  if ((uint64_t)((v21 >> 1) + 0x4000000000000000) < 0)
    goto LABEL_34;
  v22 = v11;
  v23 = v21 & 0xFFFFFFFFFFFFFFFELL;
  if (v23 <= 1)
    v24 = 1;
  else
    v24 = v23;
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Date>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v25 = *(_QWORD *)(v6 + 72);
  v26 = v43;
  v19 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v19);
  if (!v25)
    goto LABEL_35;
  v27 = result - v26;
  if (result - v26 == 0x8000000000000000 && v25 == -1)
    goto LABEL_36;
  v29 = v27 / v25;
  v19[2] = v24;
  v19[3] = 2 * (v27 / v25);
  v30 = (char *)v19 + v26;
  v31 = v13[3] >> 1;
  v32 = v31 * v25;
  v11 = v22;
  if (v13[2])
  {
    if (v19 < v13 || v30 >= (char *)v13 + v43 + v32)
    {
      v34 = v29;
      swift_arrayInitWithTakeFrontToBack();
    }
    else
    {
      if (v19 == v13)
      {
LABEL_26:
        v13[2] = 0;
        goto LABEL_27;
      }
      v34 = v29;
      swift_arrayInitWithTakeBackToFront();
    }
    v29 = v34;
    goto LABEL_26;
  }
LABEL_27:
  v14 = (uint64_t)&v30[v32];
  v35 = (v29 & 0x7FFFFFFFFFFFFFFFLL) - v31;
  result = swift_release();
  v8 = v40;
  v4 = v41;
  v20 = __OFSUB__(v35, 1);
  v16 = v35 - 1;
  if (!v20)
    goto LABEL_28;
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t (*v26)(_QWORD);
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  unsigned int v28;
  _QWORD *v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  _QWORD *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  unsigned int (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t (*v45)(uint64_t);
  void (*v46)(char *, uint64_t, uint64_t, uint64_t);
  char *v47;
  void (*v48)(char *, char *, uint64_t);
  unsigned int v49;
  uint64_t result;
  BOOL v51;
  unint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  int64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  void (*v76)(char *, char *, uint64_t);
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int (*v93)(uint64_t, uint64_t, uint64_t);
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  char *v102;

  v87 = type metadata accessor for Calendar.SearchDirection();
  v85 = *(_QWORD *)(v87 - 8);
  MEMORY[0x24BDAC7A8](v87);
  v83 = (char *)&v71 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Calendar.RepeatedTimePolicy();
  v91 = *(_QWORD *)(v3 - 8);
  v92 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v90 = (char *)&v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Calendar.MatchingPolicy();
  v98 = *(_QWORD *)(v5 - 8);
  v99 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v89 = (char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = type metadata accessor for Calendar();
  v86 = *(_QWORD *)(v88 - 8);
  MEMORY[0x24BDAC7A8](v88);
  v84 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v8);
  v102 = (char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v71 - v11;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v71 - v14;
  v16 = type metadata accessor for Date();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v72 = (char *)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v97 = (char *)&v71 - v20;
  MEMORY[0x24BDAC7A8](v21);
  v96 = (char *)&v71 - v22;
  v82 = type metadata accessor for AlignedTimelineSchedule.Entries();
  MEMORY[0x24BDAC7A8](v82);
  v24 = (char *)&v71 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *(unsigned __int8 *)(v17 + 80);
  outlined init with copy of TypesettingLanguage(a1, (uint64_t)v24, v26);
  outlined init with copy of Date?((uint64_t)v24, (uint64_t)v12);
  v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
  v28 = v27(v12, 1, v16);
  v29 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (v28 != 1)
  {
    v30 = 0;
    v73 = (v25 + 32) & ~v25;
    v100 = MEMORY[0x24BEE4AF8] + v73;
    v31 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    v79 = *MEMORY[0x24BDCF020];
    v78 = *MEMORY[0x24BDCF0B0];
    v77 = *MEMORY[0x24BDCF068];
    v71 = v25 | 7;
    v32 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v81 = v15;
    v74 = v12;
    v80 = v17;
    v93 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v27;
    v76 = v31;
    v75 = v24;
    while (1)
    {
      v101 = v32;
      v95 = v30;
      v31(v97, v12, v16);
      v33 = v84;
      static Calendar.current.getter();
      v94 = &v24[*(int *)(v82 + 24)];
      v34 = v89;
      (*(void (**)(char *, _QWORD, uint64_t))(v98 + 104))(v89, v79, v99);
      v36 = v90;
      v35 = v91;
      v37 = v92;
      (*(void (**)(char *, _QWORD, uint64_t))(v91 + 104))(v90, v78, v92);
      v38 = v85;
      v39 = v83;
      v40 = v16;
      v41 = v87;
      (*(void (**)(char *, _QWORD, uint64_t))(v85 + 104))(v83, v77, v87);
      Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)();
      v42 = v39;
      v43 = v93;
      v44 = v41;
      v16 = v40;
      (*(void (**)(char *, uint64_t))(v38 + 8))(v42, v44);
      (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v37);
      (*(void (**)(char *, uint64_t))(v98 + 8))(v34, v99);
      (*(void (**)(char *, uint64_t))(v86 + 8))(v33, v88);
      if (v43((uint64_t)v102, 1, v40) == 1)
      {
        v45 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
        outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v102, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
        v24 = v75;
        outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v75, &lazy cache variable for type metadata for Date?, v45);
        v17 = v80;
        v46 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v80 + 56);
        v46(v24, 1, 1, v16);
        v15 = v81;
        v31 = v76;
        v76(v81, v97, v16);
      }
      else
      {
        v47 = v72;
        v48 = v76;
        v76(v72, v102, v40);
        v24 = v75;
        outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v75, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
        v48(v24, v47, v16);
        v17 = v80;
        v46 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v80 + 56);
        v46(v24, 0, 1, v16);
        v15 = v81;
        v31 = v48;
        v48(v81, v97, v16);
      }
      v46(v15, 0, 1, v16);
      v49 = v43((uint64_t)v15, 1, v16);
      v30 = v95;
      if (v49 == 1)
      {
        v29 = v101;
        goto LABEL_31;
      }
      result = ((uint64_t (*)(char *, char *, uint64_t))v31)(v96, v15, v16);
      if (v30)
      {
        v29 = v101;
        v12 = v74;
        v51 = __OFSUB__(v30--, 1);
        if (v51)
          goto LABEL_35;
        goto LABEL_28;
      }
      v52 = v101[3];
      if ((uint64_t)((v52 >> 1) + 0x4000000000000000) < 0)
        goto LABEL_36;
      v53 = v31;
      v54 = v52 & 0xFFFFFFFFFFFFFFFELL;
      if (v54 <= 1)
        v55 = 1;
      else
        v55 = v54;
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Date>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v56 = *(_QWORD *)(v17 + 72);
      v57 = v73;
      v29 = (_QWORD *)swift_allocObject();
      result = _swift_stdlib_malloc_size(v29);
      if (!v56)
        goto LABEL_37;
      v58 = result - v57;
      if (result - v57 == 0x8000000000000000 && v56 == -1)
        goto LABEL_38;
      v59 = v58 / v56;
      v29[2] = v55;
      v29[3] = 2 * (v58 / v56);
      v60 = (char *)v29 + v57;
      v61 = v101;
      v62 = v101[3] >> 1;
      v63 = v62 * v56;
      v31 = v53;
      if (v101[2])
        break;
LABEL_27:
      v100 = (uint64_t)&v60[v63];
      v65 = (v59 & 0x7FFFFFFFFFFFFFFFLL) - v62;
      result = swift_release();
      v12 = v74;
      v43 = v93;
      v51 = __OFSUB__(v65, 1);
      v30 = v65 - 1;
      if (v51)
      {
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
LABEL_28:
      v66 = v100;
      v31((char *)v100, v96, v16);
      v100 = v66 + *(_QWORD *)(v17 + 72);
      outlined init with copy of Date?((uint64_t)v24, (uint64_t)v12);
      v67 = v43((uint64_t)v12, 1, v16);
      v32 = v29;
      if (v67 == 1)
        goto LABEL_29;
    }
    if (v29 < v101 || v60 >= (char *)v101 + v73 + v63)
    {
      v64 = v59;
      swift_arrayInitWithTakeFrontToBack();
    }
    else
    {
      if (v29 == v101)
      {
LABEL_26:
        v61[2] = 0;
        goto LABEL_27;
      }
      v64 = v59;
      swift_arrayInitWithTakeBackToFront();
    }
    v59 = v64;
    v61 = v101;
    goto LABEL_26;
  }
  v30 = 0;
LABEL_29:
  outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v12, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1, 1, v16);
LABEL_31:
  outlined destroy of TypesettingConfiguration((uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for AlignedTimelineSchedule.Entries);
  result = outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v15, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
  v68 = v29[3];
  if (v68 >= 2)
  {
    v69 = v68 >> 1;
    v51 = __OFSUB__(v69, v30);
    v70 = v69 - v30;
    if (v51)
      goto LABEL_39;
    v29[2] = v70;
  }
  return (uint64_t)v29;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t (*v24)(_QWORD);
  unsigned int (*v25)(char *, uint64_t, uint64_t);
  unsigned int v26;
  _QWORD *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  _QWORD *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  unsigned int (*v45)(char *, uint64_t, uint64_t);
  uint64_t result;
  char *v47;
  unint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  unsigned int v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD v68[2];
  uint64_t v69;
  char *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int (*v74)(char *, uint64_t, uint64_t);
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;

  v2 = type metadata accessor for Calendar.SearchDirection();
  v83 = *(_QWORD *)(v2 - 8);
  v84 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v80 = (char *)v68 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Calendar.RepeatedTimePolicy();
  v87 = *(_QWORD *)(v4 - 8);
  v88 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v86 = (char *)v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Calendar.MatchingPolicy();
  v94 = *(_QWORD *)(v6 - 8);
  v95 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v85 = (char *)v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Calendar();
  v81 = *(_QWORD *)(v8 - 8);
  v82 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v79 = (char *)v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v10);
  v93 = (uint64_t)v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v68 - v13;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)v68 - v16;
  v18 = type metadata accessor for Date();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v92 = (char *)v68 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = type metadata accessor for TimerTimelineSchedule.ReducedFrequencyEntries(0);
  MEMORY[0x24BDAC7A8](v78);
  v22 = (char *)v68 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(unsigned __int8 *)(v19 + 80);
  outlined init with copy of TypesettingLanguage(a1, (uint64_t)v22, v24);
  outlined init with copy of Date?((uint64_t)v22, (uint64_t)v14);
  v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  v26 = v25(v14, 1, v18);
  v27 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (v26 != 1)
  {
    v28 = 0;
    v69 = (v23 + 32) & ~v23;
    v89 = MEMORY[0x24BEE4AF8] + v69;
    v29 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
    v73 = *MEMORY[0x24BDCF020];
    v72 = *MEMORY[0x24BDCF0B0];
    v71 = *MEMORY[0x24BDCF068];
    v68[1] = v23 | 7;
    v30 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v70 = v14;
    v76 = v19;
    v77 = v18;
    v75 = v22;
    v74 = v25;
    v68[0] = v29;
    while (1)
    {
      v96 = v30;
      v90 = v28;
      v29(v17, v14, v18);
      v31 = v79;
      static Calendar.current.getter();
      v91 = &v22[*(int *)(v78 + 20)];
      v32 = v85;
      (*(void (**)(char *, _QWORD, uint64_t))(v94 + 104))(v85, v73, v95);
      v33 = v87;
      v34 = v88;
      v35 = v17;
      v36 = v86;
      (*(void (**)(char *, _QWORD, uint64_t))(v87 + 104))(v86, v72, v88);
      v37 = (uint64_t (*)(char *, char *, uint64_t))v29;
      v38 = v83;
      v39 = v84;
      v40 = v80;
      (*(void (**)(char *, _QWORD, uint64_t))(v83 + 104))(v80, v71, v84);
      Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)();
      v41 = v40;
      v18 = v77;
      v42 = v39;
      v22 = v75;
      (*(void (**)(char *, uint64_t))(v38 + 8))(v41, v42);
      v43 = v36;
      v17 = v35;
      (*(void (**)(char *, uint64_t))(v33 + 8))(v43, v34);
      v44 = v32;
      v45 = v74;
      (*(void (**)(char *, uint64_t))(v94 + 8))(v44, v95);
      (*(void (**)(char *, uint64_t))(v81 + 8))(v31, v82);
      v19 = v76;
      outlined assign with take of Date?(v93, (uint64_t)v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v17, 0, 1, v18);
      if (v45(v17, 1, v18) == 1)
      {
        v28 = v90;
        v27 = v96;
        goto LABEL_30;
      }
      result = v37(v92, v17, v18);
      v29 = (void (*)(char *, char *, uint64_t))v37;
      if (v90)
      {
        v27 = v96;
        v14 = v70;
        v47 = (char *)v89;
        v28 = v90 - 1;
        if (__OFSUB__(v90, 1))
          goto LABEL_34;
        goto LABEL_27;
      }
      v48 = v96[3];
      if ((uint64_t)((v48 >> 1) + 0x4000000000000000) < 0)
        goto LABEL_35;
      v49 = v48 & 0xFFFFFFFFFFFFFFFELL;
      if (v49 <= 1)
        v50 = 1;
      else
        v50 = v49;
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Date>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v51 = *(_QWORD *)(v19 + 72);
      v52 = v69;
      v27 = (_QWORD *)swift_allocObject();
      result = _swift_stdlib_malloc_size(v27);
      if (!v51)
        goto LABEL_36;
      v53 = result - v52;
      if (result - v52 == 0x8000000000000000 && v51 == -1)
        goto LABEL_37;
      v55 = v52;
      v56 = v53 / v51;
      v27[2] = v50;
      v27[3] = 2 * (v53 / v51);
      v57 = (char *)v27 + v52;
      v58 = v96;
      v59 = v96[3] >> 1;
      v60 = v59 * v51;
      if (v96[2])
        break;
LABEL_26:
      v47 = &v57[v60];
      v62 = (v56 & 0x7FFFFFFFFFFFFFFFLL) - v59;
      result = swift_release();
      v14 = v70;
      v29 = (void (*)(char *, char *, uint64_t))v68[0];
      v63 = __OFSUB__(v62, 1);
      v28 = v62 - 1;
      if (v63)
      {
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
        return result;
      }
LABEL_27:
      v29(v47, v92, v18);
      v89 = (uint64_t)&v47[*(_QWORD *)(v19 + 72)];
      outlined init with copy of Date?((uint64_t)v22, (uint64_t)v14);
      v64 = v45(v14, 1, v18);
      v30 = v27;
      if (v64 == 1)
        goto LABEL_28;
    }
    if (v27 < v96 || v57 >= (char *)v96 + v55 + v60)
    {
      v61 = v53 / v51;
      swift_arrayInitWithTakeFrontToBack();
    }
    else
    {
      if (v27 == v96)
      {
LABEL_25:
        v58[2] = 0;
        goto LABEL_26;
      }
      v61 = v53 / v51;
      swift_arrayInitWithTakeBackToFront();
    }
    v56 = v61;
    v58 = v96;
    goto LABEL_25;
  }
  v28 = 0;
LABEL_28:
  outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v14, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v17, 1, 1, v18);
LABEL_30:
  outlined destroy of TypesettingConfiguration((uint64_t)v22, type metadata accessor for TimerTimelineSchedule.ReducedFrequencyEntries);
  result = outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v17, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
  v65 = v27[3];
  if (v65 >= 2)
  {
    v66 = v65 >> 1;
    v63 = __OFSUB__(v66, v28);
    v67 = v66 - v28;
    if (v63)
      goto LABEL_38;
    v27[2] = v67;
  }
  return (uint64_t)v27;
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  Swift::UInt64 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v50;
  unint64_t v51;
  int64_t v52;
  uint64_t v53;
  size_t v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  const void *v59;
  uint64_t v60;
  Swift::UInt64 v61;
  uint64_t result;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  char *v70;
  char *v71;
  char *v72;
  Swift::UInt64 v73;
  _QWORD *v74;

  v2 = type metadata accessor for FragmentRangeSequence(0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v66 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (int *)type metadata accessor for FragmentRangeSequence.Iterator(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (uint64_t *)((char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v66 - v9;
  outlined init with copy of TypesettingLanguage(a1, (uint64_t)v4, type metadata accessor for FragmentRangeSequence);
  outlined init with copy of TypesettingLanguage((uint64_t)v4, (uint64_t)v10, type metadata accessor for Text.Effect.BaseContent);
  v11 = *(int *)(v2 + 24);
  v12 = &v4[*(int *)(v2 + 20)];
  v14 = *(_QWORD *)v12;
  v13 = *((_QWORD *)v12 + 1);
  v15 = &v10[v5[5]];
  *(_QWORD *)v15 = v14;
  *((_QWORD *)v15 + 1) = v13;
  v16 = &v10[v5[6]];
  *(_OWORD *)v16 = *(_OWORD *)&v4[v11];
  v17 = v5[7];
  v70 = v10;
  v18 = &v10[v17];
  *(_QWORD *)v18 = v14;
  *((_QWORD *)v18 + 1) = v13;
  outlined destroy of TypesettingConfiguration((uint64_t)v4, type metadata accessor for FragmentRangeSequence);
  v19 = v18;
  v20 = v16;
  v21 = 0;
  v22 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v23 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
  v69 = v7;
  v71 = v18;
  v72 = v16;
  while (1)
  {
    v74 = v22;
    v24 = *(_QWORD *)v19;
    v25 = *(_QWORD *)v20;
    if (*(_QWORD *)v19 >= *(_QWORD *)v20)
    {
      if (__OFSUB__(v25, v24))
        goto LABEL_59;
      if (v25 != v24 || *((_QWORD *)v19 + 1) >= *((_QWORD *)v20 + 1))
      {
        outlined destroy of TypesettingConfiguration((uint64_t)v70, type metadata accessor for FragmentRangeSequence.Iterator);
        result = (uint64_t)v74;
        v63 = v74[3];
        if (v63 < 2)
          return result;
        v64 = v63 >> 1;
        v48 = __OFSUB__(v64, v21);
        v65 = v64 - v21;
        if (!v48)
        {
          v74[2] = v65;
          return result;
        }
        goto LABEL_64;
      }
    }
    outlined init with copy of TypesettingLanguage((uint64_t)v70, (uint64_t)v7, type metadata accessor for FragmentRangeSequence.Iterator);
    v27 = *v7;
    v26 = v7[1];
    v28 = v7[2];
    swift_beginAccess();
    v29 = *(_QWORD *)(v27 + 48);
    if (!*(_QWORD *)(v29 + 16))
      goto LABEL_65;
    swift_retain_n();
    swift_retain();
    v30 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v28);
    if ((v31 & 1) == 0)
      break;
    v32 = *(_QWORD *)(*(_QWORD *)(v29 + 56) + 16 * v30);
    swift_endAccess();
    swift_bridgeObjectRetain();
    swift_release();
    if ((v24 & 0x8000000000000000) != 0)
      goto LABEL_52;
    v33 = *(_QWORD *)(v32 + 16);
    if (v24 >= v33)
      goto LABEL_53;
    v73 = v26;
    v34 = v32 + 32;
    v35 = 0;
    if (v24)
    {
      v36 = v24;
      while (1)
      {
        v37 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v34 + 96) + 16);
        v48 = __OFADD__(v35, v37);
        v35 += v37;
        if (v48)
          break;
        v34 += 8;
        if (!--v36)
          goto LABEL_14;
      }
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      swift_retain();
      swift_retain();
      goto LABEL_67;
    }
LABEL_14:
    v38 = *(_QWORD *)(v32 + 32 + 8 * v24);
    swift_retain();
    swift_bridgeObjectRelease();
    outlined destroy of TypesettingConfiguration((uint64_t)v7, type metadata accessor for Text.Effect.BaseContent);
    v19 = v71;
    v20 = v72;
    v39 = *(_QWORD *)v71;
    if (__OFSUB__(*(_QWORD *)v72, *(_QWORD *)v71))
      goto LABEL_54;
    if (*(_QWORD *)v72 == *(_QWORD *)v71)
    {
      v40 = v33;
      v41 = *((_QWORD *)v71 + 1);
      v42 = *((_QWORD *)v72 + 1);
      if (v42 < v41)
        goto LABEL_60;
      v43 = v38;
      v44 = *(_QWORD *)(*(_QWORD *)(v38 + 96) + 16);
      v48 = __OFADD__(v35, v44);
      v45 = v35 + v44;
      v46 = v48;
    }
    else
    {
      v47 = *(_QWORD *)(*(_QWORD *)(v38 + 96) + 16);
      v48 = __OFADD__(v35, v47);
      v45 = v35 + v47;
      v46 = v48;
      if (v48)
        goto LABEL_61;
      v40 = v33;
      v41 = *((_QWORD *)v71 + 1);
      if (v45 < v35 || v45 < v41)
        goto LABEL_62;
      v43 = v38;
      v42 = v45;
    }
    if ((v46 & 1) != 0)
      goto LABEL_55;
    if (v45 < v35)
      goto LABEL_56;
    *((_QWORD *)v71 + 1) = v45;
    v48 = __OFADD__(v39, 1);
    v50 = v39 + 1;
    if (v48)
      goto LABEL_57;
    *(_QWORD *)v19 = v50;
    if (v21)
    {
      v22 = v74;
      v48 = __OFSUB__(v21--, 1);
      if (v48)
        goto LABEL_58;
    }
    else
    {
      v51 = v74[3];
      if ((uint64_t)((v51 >> 1) + 0x4000000000000000) < 0)
        goto LABEL_63;
      v68 = v42;
      v52 = v51 & 0xFFFFFFFFFFFFFFFELL;
      if (v52 <= 1)
        v53 = 1;
      else
        v53 = v52;
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(fragment: Text.Effect.BaseFragment, range: Range<Text.Effect.ClusterIndex>)>, (uint64_t (*)(uint64_t))type metadata accessor for (fragment: Text.Effect.BaseFragment, range: Range<Text.Effect.ClusterIndex>), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v22 = (_QWORD *)swift_allocObject();
      v54 = _swift_stdlib_malloc_size(v22);
      v55 = v74;
      v56 = (uint64_t)(v54 - 32) / 72;
      v22[2] = v53;
      v22[3] = 2 * v56;
      v57 = (unint64_t)(v22 + 4);
      v58 = v55[3] >> 1;
      if (v55[2])
      {
        v59 = v55 + 4;
        if (v22 != v55 || v57 >= (unint64_t)v59 + 72 * v58)
        {
          v67 = (uint64_t)(v54 - 32) / 72;
          memmove(v22 + 4, v59, 72 * v58);
          v56 = v67;
          v55 = v74;
        }
        v55[2] = 0;
      }
      v23 = (_QWORD *)(v57 + 72 * v58);
      v60 = (v56 & 0x7FFFFFFFFFFFFFFFLL) - v58;
      swift_release();
      v19 = v71;
      v20 = v72;
      v43 = v38;
      v42 = v68;
      v48 = __OFSUB__(v60, 1);
      v21 = v60 - 1;
      if (v48)
        goto LABEL_58;
    }
    v61 = v73;
    *v23 = v27;
    v23[1] = v61;
    v23[2] = v28;
    v23[3] = v43;
    v23[4] = v24;
    v23[5] = v40;
    v23[6] = v35;
    v23[7] = v41;
    v23[8] = v42;
    v23 += 9;
    v7 = v69;
  }
  swift_release();
LABEL_67:
  swift_endAccess();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  Swift::UInt64 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  BOOL v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int64_t v45;
  uint64_t v46;
  int64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  Swift::UInt64 v56;
  unint64_t v57;
  uint64_t result;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  unint64_t v66;
  Swift::UInt64 v67;
  _QWORD *v68;

  v2 = type metadata accessor for ClusterIndexSequence(0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v62 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (int *)type metadata accessor for ClusterIndexSequence.Iterator(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (uint64_t *)((char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v62 - v9;
  outlined init with copy of TypesettingLanguage(a1, (uint64_t)v4, type metadata accessor for ClusterIndexSequence);
  outlined init with copy of TypesettingLanguage((uint64_t)v4, (uint64_t)v10, type metadata accessor for Text.Effect.BaseContent);
  v11 = *(int *)(v2 + 24);
  v12 = &v4[*(int *)(v2 + 20)];
  v14 = *(_QWORD *)v12;
  v13 = *((_QWORD *)v12 + 1);
  v15 = &v10[v5[5]];
  *(_QWORD *)v15 = v14;
  *((_QWORD *)v15 + 1) = v13;
  v16 = *(_OWORD *)&v4[v11];
  v65 = &v10[v5[6]];
  *(_OWORD *)v65 = v16;
  v17 = v5[7];
  v63 = v10;
  v18 = &v10[v17];
  *(_QWORD *)v18 = v14;
  *((_QWORD *)v18 + 1) = v13;
  outlined destroy of TypesettingConfiguration((uint64_t)v4, type metadata accessor for ClusterIndexSequence);
  v19 = v18;
  v20 = 0;
  v21 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v22 = (char *)(MEMORY[0x24BEE4AF8] + 32);
  v64 = v18;
  while (1)
  {
    v68 = v21;
    v23 = *(_QWORD *)v19;
    v24 = *(_QWORD *)v65;
    if (*(_QWORD *)v19 >= *(_QWORD *)v65)
    {
      if (__OFSUB__(v24, v23))
        goto LABEL_48;
      if (v24 != v23 || *((_QWORD *)v19 + 1) >= *((_QWORD *)v65 + 1))
      {
        outlined destroy of TypesettingConfiguration((uint64_t)v63, type metadata accessor for ClusterIndexSequence.Iterator);
        result = (uint64_t)v68;
        v59 = v68[3];
        if (v59 < 2)
          return result;
        v60 = v59 >> 1;
        v38 = __OFSUB__(v60, v20);
        v61 = v60 - v20;
        if (!v38)
        {
          v68[2] = v61;
          return result;
        }
        goto LABEL_51;
      }
    }
    outlined init with copy of TypesettingLanguage((uint64_t)v63, (uint64_t)v7, type metadata accessor for ClusterIndexSequence.Iterator);
    v26 = *v7;
    v25 = v7[1];
    v27 = v7[2];
    swift_beginAccess();
    v28 = *(_QWORD *)(v26 + 48);
    if (!*(_QWORD *)(v28 + 16))
      goto LABEL_52;
    swift_retain_n();
    swift_retain();
    v29 = specialized __RawDictionaryStorage.find<A>(_:)(v25, v27);
    if ((v30 & 1) == 0)
      break;
    v31 = *(_QWORD *)(*(_QWORD *)(v28 + 56) + 16 * v29);
    swift_endAccess();
    swift_bridgeObjectRetain();
    swift_release();
    if ((v23 & 0x8000000000000000) != 0)
      goto LABEL_41;
    v32 = *(_QWORD *)(v31 + 16);
    if (v23 >= v32)
      goto LABEL_42;
    v67 = v25;
    v33 = v31 + 32;
    v34 = *(_QWORD *)(v31 + 32 + 8 * v23);
    v35 = 0;
    if (v23)
    {
      v36 = v23;
      while (1)
      {
        v37 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v33 + 96) + 16);
        v38 = __OFADD__(v35, v37);
        v35 += v37;
        if (v38)
          break;
        v33 += 8;
        if (!--v36)
          goto LABEL_14;
      }
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      swift_retain();
      swift_retain();
      goto LABEL_54;
    }
LABEL_14:
    v66 = v32;
    swift_retain();
    swift_bridgeObjectRelease();
    v39 = v7;
    outlined destroy of TypesettingConfiguration((uint64_t)v7, type metadata accessor for Text.Effect.BaseContent);
    v19 = v64;
    v40 = *((_QWORD *)v64 + 1);
    v41 = v40 + 1;
    if (__OFADD__(v40, 1))
      goto LABEL_43;
    *((_QWORD *)v64 + 1) = v41;
    v42 = *(_QWORD *)(*(_QWORD *)(v34 + 96) + 16);
    v38 = __OFADD__(v35, v42);
    v43 = v35 + v42;
    if (v38)
      goto LABEL_44;
    if (v43 < v35)
      goto LABEL_45;
    if (__OFSUB__(v43, v41))
      goto LABEL_46;
    v21 = v68;
    if (v43 == v41)
    {
      if (__OFADD__(*(_QWORD *)v19, 1))
        goto LABEL_49;
      ++*(_QWORD *)v19;
    }
    if (!v20)
    {
      v44 = v21[3];
      if ((uint64_t)((v44 >> 1) + 0x4000000000000000) < 0)
        goto LABEL_50;
      v62 = v34;
      v45 = v44 & 0xFFFFFFFFFFFFFFFELL;
      if (v45 <= 1)
        v46 = 1;
      else
        v46 = v45;
      type metadata accessor for _ContiguousArrayStorage<(fragment: Text.Effect.BaseFragment, cluster: Text.Effect.ClusterIndex)>();
      v21 = (_QWORD *)swift_allocObject();
      v47 = _swift_stdlib_malloc_size(v21);
      v49 = v47 - 32;
      v48 = v47 < 32;
      v50 = v47 + 31;
      v51 = v68;
      if (v48)
        v49 = v50;
      v52 = v49 >> 6;
      v21[2] = v46;
      v21[3] = 2 * (v49 >> 6);
      v53 = (char *)(v21 + 4);
      v54 = v51[3] >> 1;
      if (v51[2])
      {
        v55 = (char *)(v51 + 4);
        if (v21 != v51 || v53 >= &v55[64 * v54])
        {
          memmove(v21 + 4, v55, v54 << 6);
          v51 = v68;
        }
        v51[2] = 0;
      }
      v22 = &v53[64 * v54];
      v20 = (v52 & 0x7FFFFFFFFFFFFFFFLL) - v54;
      swift_release();
      v19 = v64;
      v34 = v62;
    }
    v38 = __OFSUB__(v20--, 1);
    if (v38)
      goto LABEL_47;
    v56 = v67;
    *(_QWORD *)v22 = v26;
    *((_QWORD *)v22 + 1) = v56;
    *((_QWORD *)v22 + 2) = v27;
    *((_QWORD *)v22 + 3) = v34;
    v57 = v66;
    *((_QWORD *)v22 + 4) = v23;
    *((_QWORD *)v22 + 5) = v57;
    *((_QWORD *)v22 + 6) = v35;
    *((_QWORD *)v22 + 7) = v40;
    v22 += 64;
    v7 = v39;
  }
  swift_release();
LABEL_54:
  swift_endAccess();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t (*v21)(_QWORD);
  unsigned int (*v22)(uint64_t, uint64_t, uint64_t);
  unsigned int v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(_QWORD);
  _QWORD *v29;
  char *v30;
  unsigned int (*v31)(uint64_t, uint64_t, uint64_t);
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char v36;
  uint64_t v37;
  char *v38;
  void (*v39)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t result;
  BOOL v45;
  unint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int (*v68)(uint64_t, uint64_t, uint64_t);
  char *v69;
  void (*v70)(_QWORD);
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v2);
  v65 = (char *)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v67 = (uint64_t)&v61 - v5;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v61 - v7;
  MEMORY[0x24BDAC7A8](v9);
  v72 = (uint64_t)&v61 - v10;
  v11 = type metadata accessor for Date();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v63 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v69 = (char *)&v61 - v15;
  MEMORY[0x24BDAC7A8](v16);
  v71 = (char *)&v61 - v17;
  v66 = type metadata accessor for EverySecondEntries(0);
  MEMORY[0x24BDAC7A8](v66);
  v19 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(unsigned __int8 *)(v12 + 80);
  outlined init with copy of TypesettingLanguage(a1, (uint64_t)v19, v21);
  v74 = v19;
  outlined init with copy of Date?((uint64_t)v19, (uint64_t)v8);
  v22 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  v62 = v8;
  v68 = v22;
  v23 = v22((uint64_t)v8, 1, v11);
  v24 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v73 = v12;
  v25 = 0;
  if (v23 != 1)
  {
    v64 = (v20 + 32) & ~v20;
    v27 = MEMORY[0x24BEE4AF8] + v64;
    v28 = *(void (**)(_QWORD))(v12 + 32);
    v61 = v20 | 7;
    v29 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v26 = (uint64_t)v62;
    v31 = v68;
    v30 = v69;
    v70 = v28;
    while (1)
    {
      v32 = v30;
      v28(v30);
      v33 = v67;
      outlined init with copy of Date?((uint64_t)&v74[*(int *)(v66 + 20)], v67);
      if (v31(v33, 1, v11) == 1)
        break;
      v35 = v63;
      ((void (*)(char *, uint64_t, uint64_t))v28)(v63, v33, v11);
      lazy protocol witness table accessor for type Date and conformance Date();
      v36 = dispatch thunk of static Comparable.< infix(_:_:)();
      v34 = v73;
      v32 = v69;
      (*(void (**)(char *, uint64_t))(v73 + 8))(v35, v11);
      if ((v36 & 1) != 0)
        goto LABEL_7;
      v40 = (uint64_t)v74;
      outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?((uint64_t)v74, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
      v39 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56);
      v39(v40, 1, 1, v11);
      v38 = v32;
LABEL_9:
      v41 = v72;
      v42 = v38;
      v28 = v70;
      ((void (*)(uint64_t, char *, uint64_t))v70)(v72, v38, v11);
      v39(v41, 0, 1, v11);
      v43 = v41;
      v31 = v68;
      if (v68(v43, 1, v11) == 1)
        goto LABEL_34;
      result = ((uint64_t (*)(char *, uint64_t, uint64_t))v28)(v71, v72, v11);
      if (v25)
      {
        v24 = v29;
        v45 = __OFSUB__(v25--, 1);
        if (v45)
          goto LABEL_38;
      }
      else
      {
        v46 = v29[3];
        if ((uint64_t)((v46 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_39;
        v47 = v46 & 0xFFFFFFFFFFFFFFFELL;
        if (v47 <= 1)
          v48 = 1;
        else
          v48 = v47;
        type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Date>, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
        v49 = *(_QWORD *)(v73 + 72);
        v50 = v64;
        v24 = (_QWORD *)swift_allocObject();
        result = _swift_stdlib_malloc_size(v24);
        if (!v49)
          goto LABEL_40;
        v51 = result - v50;
        v52 = result - v50 == 0x8000000000000000 && v49 == -1;
        if (v52)
          goto LABEL_41;
        v53 = v51 / v49;
        v24[2] = v48;
        v24[3] = 2 * (v51 / v49);
        v54 = (char *)v24 + v50;
        v55 = v29[3] >> 1;
        v56 = v55 * v49;
        if (v29[2])
        {
          if (v24 < v29 || v54 >= (char *)v29 + v64 + v56)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v24 != v29)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          v29[2] = 0;
        }
        v27 = (uint64_t)&v54[v56];
        v57 = (v53 & 0x7FFFFFFFFFFFFFFFLL) - v55;
        result = swift_release();
        v26 = (uint64_t)v62;
        v28 = v70;
        v45 = __OFSUB__(v57, 1);
        v25 = v57 - 1;
        if (v45)
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
      }
      ((void (*)(uint64_t, char *, uint64_t))v28)(v27, v71, v11);
      v27 += *(_QWORD *)(v73 + 72);
      outlined init with copy of Date?((uint64_t)v74, v26);
      v29 = v24;
      v52 = v31(v26, 1, v11) == 1;
      v30 = v42;
      if (v52)
        goto LABEL_33;
    }
    outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?(v33, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
    v34 = v73;
LABEL_7:
    v37 = (uint64_t)v65;
    v38 = v32;
    Date.addingTimeInterval(_:)();
    v39 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56);
    v39(v37, 0, 1, v11);
    outlined assign with take of Date?(v37, (uint64_t)v74);
    goto LABEL_9;
  }
  v26 = (uint64_t)v62;
LABEL_33:
  outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?(v26, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v73 + 56))(v72, 1, 1, v11);
  v29 = v24;
LABEL_34:
  outlined destroy of TypesettingConfiguration((uint64_t)v74, type metadata accessor for EverySecondEntries);
  result = outlined destroy of (style: Duration.TimeFormatStyle.Attributed, smallestField: Date.ComponentsFormatStyle.Field)?(v72, &lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
  v58 = v29[3];
  if (v58 >= 2)
  {
    v59 = v58 >> 1;
    v45 = __OFSUB__(v59, v25);
    v60 = v59 - v25;
    if (v45)
      goto LABEL_42;
    v29[2] = v60;
  }
  return (uint64_t)v29;
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  uint64_t result;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;

  v3 = a1[2];
  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= v3)
    v5 = a1[2];
  else
    v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(String, Double)>, (uint64_t (*)(uint64_t))type metadata accessor for (String, Double), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v8 = (_QWORD *)swift_allocObject();
    v9 = (uint64_t)(_swift_stdlib_malloc_size(v8) - 32) / 24;
    v8[2] = v5;
    v8[3] = 2 * v9;
    v10 = a1[5];
    v11 = *(_QWORD *)(a2 + 32);
    v8[4] = a1[4];
    v8[5] = v10;
    v8[6] = v11;
    if (v5 == 1)
    {
      v12 = (v9 & 0x7FFFFFFFFFFFFFFFLL) - 1;
      swift_bridgeObjectRetain();
      if (v3 == 1)
        goto LABEL_26;
    }
    else
    {
      v34 = v8;
      v31 = v9 & 0x7FFFFFFFFFFFFFFFLL;
      v32 = v4;
      v13 = v4 - 1;
      if (v4 <= 1)
        v14 = 1;
      else
        v14 = v4;
      v15 = v3 - 1;
      v33 = v3;
      if (v3 <= 1)
        v16 = 1;
      else
        v16 = v3;
      if (v3 != 1)
      {
        v2 = 0;
        v17 = a2 + 40;
        v18 = a1 + 7;
        v19 = v16 - 1;
        v20 = v14 - 1;
        v21 = v5 - 2;
        v22 = 7;
        while (v19 != v2)
        {
          if (v13 == v2)
            goto LABEL_34;
          if (v20 == v2)
            goto LABEL_31;
          v23 = &v34[v22];
          v24 = *v18;
          v25 = *(_QWORD *)(v17 + 8 * v2);
          *v23 = *(v18 - 1);
          v23[1] = v24;
          v23[2] = v25;
          if (v21 == v2)
            goto LABEL_24;
          swift_bridgeObjectRetain();
          ++v2;
          v18 += 2;
          v22 += 3;
          if (v15 == v2)
            goto LABEL_23;
        }
        __break(1u);
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
LABEL_23:
      __break(1u);
LABEL_24:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v4 = v32;
      v12 = v31 - v2 - 2;
      v3 = v33;
      v8 = v34;
      if (v33 <= v32)
        goto LABEL_26;
    }
  }
  else
  {
    v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 24) >> 1;
    if (!v3)
      goto LABEL_26;
  }
  if (v3 <= v4)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
LABEL_26:
  v26 = v8[3];
  if (v26 < 2)
    return (uint64_t)v8;
  v27 = v26 >> 1;
  v28 = __OFSUB__(v27, v12);
  v29 = v27 - v12;
  if (!v28)
  {
    v8[2] = v29;
    return (uint64_t)v8;
  }
LABEL_33:
  __break(1u);
LABEL_34:
  result = swift_bridgeObjectRetain();
  __break(1u);
  return result;
}

unint64_t _StringGuts.validateScalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5)
    goto LABEL_9;
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 <= result >> 16)
  {
    __break(1u);
LABEL_9:
    result = _StringGuts.validateSubscalarIndex(_:)(result, a2, a3);
    if ((result & 1) == 0)
      return result & 0xC | _StringGuts.scalarAlignSlow(_:)(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
  }
  return result;
}

unint64_t _StringGuts.validateSubscalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 0xC) == 4 << v5)
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a2, a3);
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 <= result >> 16)
    __break(1u);
  return result;
}

unint64_t specialized Collection.dropFirst(_:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v3 = HIBYTE(a3) & 0xF;
    else
      v3 = a2 & 0xFFFFFFFFFFFFLL;
    v4 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v4 = 11;
    v5 = v4 | (v3 << 16);
    result = String.index(_:offsetBy:limitedBy:)();
    if ((v6 & 1) != 0)
      result = v5;
    if (4 * v3 >= result >> 14)
      return String.subscript.getter();
  }
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type EmptyCollection<Character> and conformance EmptyCollection<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EmptyCollection<Character> and conformance EmptyCollection<A>;
  if (!lazy protocol witness table cache variable for type EmptyCollection<Character> and conformance EmptyCollection<A>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for EmptyCollection<Character>, MEMORY[0x24BEE0718], MEMORY[0x24BEE2A90]);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE2AB0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyCollection<Character> and conformance EmptyCollection<A>);
  }
  return result;
}

unint64_t specialized Collection.suffix(from:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;

  v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v3 = a2 & 0xFFFFFFFFFFFFLL;
  if (4 * v3 >= result >> 14)
    return String.subscript.getter();
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *a1, char *__src, unint64_t a3, char *__dst)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  uint64_t result;
  char *v25;
  char v27;
  char *v28;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;

  v5 = __src;
  v6 = __src - a1;
  v7 = __src - a1 + 31;
  if (__src - a1 >= 0)
    v7 = __src - a1;
  v8 = v7 >> 5;
  v9 = a3 - (_QWORD)__src;
  v10 = a3 - (_QWORD)__src + 31;
  if ((uint64_t)(a3 - (_QWORD)__src) >= 0)
    v10 = a3 - (_QWORD)__src;
  v11 = v10 >> 5;
  v38 = a1;
  v37 = __dst;
  if (v8 >= v10 >> 5)
  {
    if (v9 >= -31)
    {
      if (__dst != __src || &__src[32 * v11] <= __dst)
        memmove(__dst, __src, 32 * v11);
      v25 = __dst;
      v18 = &__dst[32 * v11];
      v36 = v18;
      v38 = v5;
      if (a1 < v5 && v9 >= 32)
      {
        v19 = (char *)(a3 - 32);
        v20 = v5;
        do
        {
          v30 = v18;
          v18 -= 32;
          v20 -= 32;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_getAtKeyPath();
          swift_getAtKeyPath();
          v31 = v5;
          if (v34 == v32 && v35 == v33)
            v27 = 0;
          else
            v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
          v21 = v19 + 32;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v27 & 1) != 0)
          {
            v18 = v30;
            if (v21 != v31 || v19 >= v31)
            {
              v22 = *((_OWORD *)v20 + 1);
              *(_OWORD *)v19 = *(_OWORD *)v20;
              *((_OWORD *)v19 + 1) = v22;
            }
            v38 = v20;
          }
          else
          {
            v36 = v18;
            if (v21 < v30 || v19 >= v30 || v21 != v30)
            {
              v23 = *((_OWORD *)v18 + 1);
              *(_OWORD *)v19 = *(_OWORD *)v18;
              *((_OWORD *)v19 + 1) = v23;
            }
            v20 = v31;
          }
          if (v20 <= a1)
            break;
          v19 -= 32;
          v5 = v20;
        }
        while (v18 > v25);
      }
LABEL_50:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v38, (const void **)&v37, &v36);
      return 1;
    }
  }
  else if (v6 >= -31)
  {
    if (__dst != a1 || &a1[32 * v8] <= __dst)
      memmove(__dst, a1, 32 * v8);
    v28 = &__dst[32 * v8];
    v36 = v28;
    if ((unint64_t)v5 < a3 && v6 >= 32)
    {
      v12 = __dst;
      v13 = a1;
      while (1)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_getAtKeyPath();
        swift_getAtKeyPath();
        if (v34 == v32 && v35 == v33)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
        }
        else
        {
          v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v14 & 1) != 0)
          {
            v15 = v5 + 32;
            if (v13 < v5 || v13 >= v15 || v13 != v5)
            {
              v16 = *((_OWORD *)v5 + 1);
              *(_OWORD *)v13 = *(_OWORD *)v5;
              *((_OWORD *)v13 + 1) = v16;
            }
            goto LABEL_24;
          }
        }
        v15 = v5;
        if (v13 != v12)
        {
          v17 = *((_OWORD *)v12 + 1);
          *(_OWORD *)v13 = *(_OWORD *)v12;
          *((_OWORD *)v13 + 1) = v17;
        }
        v12 += 32;
        v37 = v12;
LABEL_24:
        v13 += 32;
        if (v12 < v28)
        {
          v5 = v15;
          if ((unint64_t)v15 < a3)
            continue;
        }
        v38 = v13;
        goto LABEL_50;
      }
    }
    goto LABEL_50;
  }
  swift_release();
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v14 = result;
  if (a3 != a2)
  {
    v16 = *a4;
    v4 = (_QWORD *)(*a4 + 32 * a3 + 24);
LABEL_6:
    v6 = v14;
    v15 = v4;
    v17 = a3;
    while (1)
    {
      v7 = (__int128 *)(v4 - 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_getAtKeyPath();
      swift_getAtKeyPath();
      if (v20 == v18 && v21 == v19)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease_n();
        v5 = v17;
LABEL_5:
        a3 = v5 + 1;
        v4 = v15 + 4;
        if (a3 == a2)
          return result;
        goto LABEL_6;
      }
      v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v5 = v17;
      if ((v22 & 1) == 0)
        goto LABEL_5;
      if (!v16)
        break;
      v9 = *v7;
      v8 = *(_OWORD *)(v4 - 5);
      *(v4 - 4) = *v4;
      v4 -= 4;
      v10 = v4[1];
      v11 = v4[2];
      v12 = v4[3];
      v7[2] = v9;
      v7[3] = v8;
      *(v4 - 3) = v10;
      *(v4 - 2) = v11;
      *(v4 - 1) = v12;
      if (v17 == ++v6)
        goto LABEL_5;
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  Swift::Int v9;
  Swift::Int v10;
  unint64_t v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v14;
  Swift::Int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  Swift::Int v20;
  _OWORD *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  Swift::Int v27;
  _QWORD *v28;
  Swift::Int v29;
  _QWORD *v30;
  __int128 *v31;
  char v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  char v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  unint64_t v100;
  char *v101;
  unint64_t v102;
  uint64_t result;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  Swift::Int v108;
  char *v109;
  Swift::Int v110;
  Swift::Int v111;
  Swift::Int v112;
  char *__dst;
  _QWORD *v114;
  uint64_t v115;
  Swift::Int v116;
  Swift::Int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  unint64_t v124;
  uint64_t v125;

  v3 = a1[1];
  swift_retain_n();
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if (v3 < 0)
      goto LABEL_148;
    if (v3)
    {
      swift_retain();
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
    }
    swift_release_n();
    return swift_release();
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_156;
  v112 = v3;
  v108 = v4;
  v115 = v1;
  v105 = a1;
  if (v3 < 2)
  {
    v8 = (char *)MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    v107 = MEMORY[0x24BEE4AF8];
    if (v3 == 1)
      goto LABEL_13;
    v11 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_112:
    if (v11 >= 2)
    {
      v92 = *v105;
      v125 = *v105;
      do
      {
        v93 = v11 - 2;
        if (v11 < 2)
          goto LABEL_143;
        if (!v92)
          goto LABEL_155;
        v94 = v8;
        v95 = v8 + 32;
        v96 = *(_QWORD *)&v8[16 * v93 + 32];
        v97 = *(_QWORD *)&v95[16 * v11 - 8];
        v98 = (char *)(v92 + 32 * v96);
        v99 = (char *)(v92 + 32 * *(_QWORD *)&v95[16 * v11 - 16]);
        v100 = v92 + 32 * v97;
        swift_retain();
        specialized _merge<A>(low:mid:high:buffer:by:)(v98, v99, v100, __dst);
        if (v115)
          goto LABEL_109;
        swift_release();
        if (v97 < v96)
          goto LABEL_144;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v94 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v94);
        if (v93 >= *((_QWORD *)v94 + 2))
          goto LABEL_145;
        v101 = &v94[16 * v93 + 32];
        *(_QWORD *)v101 = v96;
        *((_QWORD *)v101 + 1) = v97;
        v102 = *((_QWORD *)v94 + 2);
        if (v11 > v102)
          goto LABEL_146;
        v8 = v94;
        memmove(&v94[16 * v11 + 16], &v94[16 * v11 + 32], 16 * (v102 - v11));
        *((_QWORD *)v94 + 2) = v102 - 1;
        v11 = v102 - 1;
        v92 = v125;
      }
      while (v102 > 2);
    }
    swift_bridgeObjectRelease();
LABEL_124:
    *(_QWORD *)(v107 + 16) = 0;
    swift_release_n();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  v6 = v5 >> 1;
  type metadata accessor for (proposal: _ProposedSize, value: TextSizeVariant)(0, (unint64_t *)&lazy cache variable for type metadata for (name: String, value: String));
  v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v7 + 16) = v6;
  v107 = v7;
  __dst = (char *)(v7 + 32);
LABEL_13:
  v9 = 0;
  v106 = *a1 + 48;
  v104 = *a1 + 24;
  v8 = (char *)MEMORY[0x24BEE4AF8];
  v10 = v112;
  v118 = *a1;
  while (1)
  {
    v12 = v9;
    v13 = v9 + 1;
    v111 = v9;
    if (v9 + 1 < v10)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_getAtKeyPath();
      swift_getAtKeyPath();
      if (v121 == v119 && v122 == v120)
        v123 = 0;
      else
        v123 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v13 = v12 + 2;
      v10 = v112;
      if (v12 + 2 < v112)
      {
        v14 = v106 + 32 * v12;
        while (1)
        {
          v15 = v13;
          v14 += 32;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_getAtKeyPath();
          swift_getAtKeyPath();
          if (v121 != v119)
            goto LABEL_26;
          if (v122 == v120)
            v16 = 0;
          else
LABEL_26:
            v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (((v123 ^ v16) & 1) != 0)
            break;
          ++v13;
          v10 = v112;
          if (v112 == v15 + 1)
          {
            v13 = v112;
            goto LABEL_31;
          }
        }
        v10 = v112;
LABEL_31:
        v12 = v111;
      }
      if ((v123 & 1) != 0)
      {
        if (v13 < v12)
          goto LABEL_149;
        if (v12 < v13)
        {
          v17 = 32 * v13;
          v18 = 32 * v12;
          v19 = v13;
          v20 = v12;
          do
          {
            if (v20 != --v19)
            {
              if (!v118)
                goto LABEL_154;
              v21 = (_OWORD *)(v118 + v18);
              v22 = v118 + v17;
              v23 = *(_OWORD *)(v118 + v18);
              v24 = *(_QWORD *)(v118 + v18 + 16);
              v25 = *(_QWORD *)(v118 + v18 + 24);
              v26 = *(_OWORD *)(v118 + v17 - 16);
              *v21 = *(_OWORD *)(v118 + v17 - 32);
              v21[1] = v26;
              *(_OWORD *)(v22 - 32) = v23;
              *(_QWORD *)(v22 - 16) = v24;
              *(_QWORD *)(v22 - 8) = v25;
            }
            ++v20;
            v17 -= 32;
            v18 += 32;
          }
          while (v20 < v19);
        }
      }
    }
    if (v13 < v10)
    {
      if (__OFSUB__(v13, v12))
        goto LABEL_147;
      if (v13 - v12 < v108)
        break;
    }
LABEL_61:
    if (v13 < v12)
      goto LABEL_142;
    v117 = v13;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
    v39 = *((_QWORD *)v8 + 2);
    v38 = *((_QWORD *)v8 + 3);
    v11 = v39 + 1;
    v40 = v118;
    if (v39 >= v38 >> 1)
    {
      v91 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v38 > 1), v39 + 1, 1, v8);
      v40 = v118;
      v8 = v91;
    }
    *((_QWORD *)v8 + 2) = v11;
    v41 = &v8[16 * v39 + 32];
    *(_QWORD *)v41 = v12;
    *((_QWORD *)v41 + 1) = v13;
    if (v39)
    {
      v42 = v8 + 32;
      while (1)
      {
        v43 = v11 - 1;
        if (v11 >= 4)
        {
          v48 = &v42[16 * v11];
          v49 = *((_QWORD *)v48 - 8);
          v50 = *((_QWORD *)v48 - 7);
          v54 = __OFSUB__(v50, v49);
          v51 = v50 - v49;
          if (v54)
            goto LABEL_131;
          v53 = *((_QWORD *)v48 - 6);
          v52 = *((_QWORD *)v48 - 5);
          v54 = __OFSUB__(v52, v53);
          v46 = v52 - v53;
          v47 = v54;
          if (v54)
            goto LABEL_132;
          v55 = v11 - 2;
          v56 = &v42[16 * v11 - 32];
          v58 = *(_QWORD *)v56;
          v57 = *((_QWORD *)v56 + 1);
          v54 = __OFSUB__(v57, v58);
          v59 = v57 - v58;
          if (v54)
            goto LABEL_134;
          v54 = __OFADD__(v46, v59);
          v60 = v46 + v59;
          if (v54)
            goto LABEL_137;
          if (v60 >= v51)
          {
            v78 = &v42[16 * v43];
            v80 = *(_QWORD *)v78;
            v79 = *((_QWORD *)v78 + 1);
            v54 = __OFSUB__(v79, v80);
            v81 = v79 - v80;
            if (v54)
              goto LABEL_141;
            v71 = v46 < v81;
            goto LABEL_99;
          }
        }
        else
        {
          if (v11 != 3)
          {
            v72 = *((_QWORD *)v8 + 4);
            v73 = *((_QWORD *)v8 + 5);
            v54 = __OFSUB__(v73, v72);
            v65 = v73 - v72;
            v66 = v54;
            goto LABEL_93;
          }
          v45 = *((_QWORD *)v8 + 4);
          v44 = *((_QWORD *)v8 + 5);
          v54 = __OFSUB__(v44, v45);
          v46 = v44 - v45;
          v47 = v54;
        }
        if ((v47 & 1) != 0)
          goto LABEL_133;
        v55 = v11 - 2;
        v61 = &v42[16 * v11 - 32];
        v63 = *(_QWORD *)v61;
        v62 = *((_QWORD *)v61 + 1);
        v64 = __OFSUB__(v62, v63);
        v65 = v62 - v63;
        v66 = v64;
        if (v64)
          goto LABEL_136;
        v67 = &v42[16 * v43];
        v69 = *(_QWORD *)v67;
        v68 = *((_QWORD *)v67 + 1);
        v54 = __OFSUB__(v68, v69);
        v70 = v68 - v69;
        if (v54)
          goto LABEL_139;
        if (__OFADD__(v65, v70))
          goto LABEL_140;
        if (v65 + v70 >= v46)
        {
          v71 = v46 < v70;
LABEL_99:
          if (v71)
            v43 = v55;
          goto LABEL_101;
        }
LABEL_93:
        if ((v66 & 1) != 0)
          goto LABEL_135;
        v74 = &v42[16 * v43];
        v76 = *(_QWORD *)v74;
        v75 = *((_QWORD *)v74 + 1);
        v54 = __OFSUB__(v75, v76);
        v77 = v75 - v76;
        if (v54)
          goto LABEL_138;
        if (v77 < v65)
          goto LABEL_15;
LABEL_101:
        v82 = v43 - 1;
        if (v43 - 1 >= v11)
        {
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
          goto LABEL_151;
        }
        if (!v40)
          goto LABEL_153;
        v83 = &v42[16 * v82];
        v84 = *(_QWORD *)v83;
        v85 = v43;
        v86 = &v42[16 * v43];
        v87 = *((_QWORD *)v86 + 1);
        v88 = (char *)(v40 + 32 * *(_QWORD *)v83);
        v89 = (char *)(v40 + 32 * *(_QWORD *)v86);
        v124 = v40 + 32 * v87;
        swift_retain();
        specialized _merge<A>(low:mid:high:buffer:by:)(v88, v89, v124, __dst);
        if (v115)
        {
LABEL_109:
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_124;
        }
        swift_release();
        if (v87 < v84)
          goto LABEL_128;
        if (v85 > *((_QWORD *)v8 + 2))
          goto LABEL_129;
        *(_QWORD *)v83 = v84;
        v42 = v8 + 32;
        *(_QWORD *)&v8[16 * v82 + 40] = v87;
        v90 = *((_QWORD *)v8 + 2);
        if (v85 >= v90)
          goto LABEL_130;
        v11 = v90 - 1;
        memmove(v86, v86 + 16, 16 * (v90 - 1 - v85));
        *((_QWORD *)v8 + 2) = v90 - 1;
        v40 = v118;
        if (v90 <= 2)
          goto LABEL_15;
      }
    }
    v11 = 1;
LABEL_15:
    v10 = v112;
    v9 = v117;
    if (v117 >= v112)
      goto LABEL_112;
  }
  if (__OFADD__(v12, v108))
    goto LABEL_150;
  if (v12 + v108 >= v10)
    v27 = v10;
  else
    v27 = v12 + v108;
  if (v27 >= v12)
  {
    if (v13 != v27)
    {
      v109 = v8;
      v110 = v27;
      v28 = (_QWORD *)(v104 + 32 * v13);
      do
      {
        v116 = v13;
        v29 = v12;
        v114 = v28;
        v30 = v28;
        while (1)
        {
          v31 = (__int128 *)(v30 - 7);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_getAtKeyPath();
          swift_getAtKeyPath();
          if (v121 == v119 && v122 == v120)
            break;
          v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v32 & 1) == 0)
            goto LABEL_52;
          if (!v118)
            goto LABEL_152;
          v34 = *v31;
          v33 = *(_OWORD *)(v30 - 5);
          *(v30 - 4) = *v30;
          v30 -= 4;
          v35 = v30[1];
          v36 = v30[2];
          v37 = v30[3];
          v31[2] = v34;
          v31[3] = v33;
          *(v30 - 3) = v35;
          *(v30 - 2) = v36;
          *(v30 - 1) = v37;
          if (v116 == ++v29)
            goto LABEL_52;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
LABEL_52:
        v13 = v116 + 1;
        v28 = v114 + 4;
        v12 = v111;
      }
      while (v116 + 1 != v110);
      v13 = v110;
      v8 = v109;
    }
    goto LABEL_61;
  }
LABEL_151:
  __break(1u);
LABEL_152:
  swift_release_n();
  __break(1u);
LABEL_153:
  swift_release_n();
  __break(1u);
LABEL_154:
  swift_release_n();
  __break(1u);
LABEL_155:
  swift_release_n();
  __break(1u);
LABEL_156:
  swift_release_n();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

