uint64_t specialized MutableCollection<>.sort(by:)(_QWORD **a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5[2];

  v2 = *a1;
  swift_retain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = (_QWORD *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  swift_retain();
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  swift_release();
  *a1 = v2;
  return swift_release_n();
}

uint64_t lazy protocol witness table accessor for type Repeated<String> and conformance Repeated<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(_QWORD, uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, a2, MEMORY[0x24BEE0D00], a3);
    result = MEMORY[0x23B7C9C04](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

_QWORD *specialized CustomRecursiveStringConvertible.topLevelAttributes.getter()
{
  uint64_t (*v0)(void);
  void *v1;
  char v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;

  if ((byte_2561BC349 & 8) == 0)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v0 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue2.shared) + 0x58);
  v1 = static CoreGlue2.shared;
  v2 = v0();

  if (v2 == 2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  if ((v2 & 1) != 0)
    v4 = 0x6E6564646968;
  else
    v4 = 0x656C6269736976;
  if ((v2 & 1) != 0)
    v5 = 0xE600000000000000;
  else
    v5 = 0xE700000000000000;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v6 = v3[2];
  v7 = v3[3];
  v8 = v6 + 1;
  if (v6 >= v7 >> 1)
  {
    v13 = v3[2];
    v14 = v5;
    v11 = v6 + 1;
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v7 > 1), v6 + 1, 1, v3);
    v8 = v11;
    v6 = v13;
    v5 = v14;
    v3 = v12;
  }
  v3[2] = v8;
  v9 = &v3[4 * v6];
  v9[4] = 0x6142737574617473;
  v9[5] = 0xE900000000000072;
  v9[6] = v4;
  v9[7] = v5;
  return v3;
}

_BYTE *partial apply for closure #1 in closure #1 in Double.init<A>(_:)@<X0>(_BYTE *a1@<X0>, BOOL *a2@<X8>)
{
  return partial apply for closure #1 in closure #1 in Double.init<A>(_:)(a1, a2);
}

uint64_t dispatch thunk of CustomRecursiveStringConvertible.descriptionName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CustomRecursiveStringConvertible.descriptionAttributes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CustomRecursiveStringConvertible.defaultDescriptionAttributes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of CustomRecursiveStringConvertible.descriptionChildren.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of CustomRecursiveStringConvertible.hideFromDescription.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of BridgeStringConvertible.bridgeDescriptionChildren.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

void type metadata accessor for (String, Double)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (String, Double))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (String, Double));
  }
}

uint64_t partial apply for specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
}

_BYTE *partial apply for closure #1 in closure #1 in Double.init<A>(_:)@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v3 = *result;
  v4 = v3 > 0x20;
  v5 = (1 << v3) & 0x100003E01;
  v6 = v4 || v5 == 0;
  v7 = v6 && (result = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<(fragment: Text.Effect.BaseFragment, cluster: Text.Effect.ClusterIndex)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(fragment: Text.Effect.BaseFragment, cluster: Text.Effect.ClusterIndex)>)
  {
    type metadata accessor for (proposal: _ProposedSize, value: TextSizeVariant)(255, (unint64_t *)&lazy cache variable for type metadata for (fragment: Text.Effect.BaseFragment, cluster: Text.Effect.ClusterIndex));
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(fragment: Text.Effect.BaseFragment, cluster: Text.Effect.ClusterIndex)>);
  }
}

void type metadata accessor for (fragment: Text.Effect.BaseFragment, range: Range<Text.Effect.ClusterIndex>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (fragment: Text.Effect.BaseFragment, range: Range<Text.Effect.ClusterIndex>))
  {
    type metadata accessor for Range<Text.Effect.ClusterIndex>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (fragment: Text.Effect.BaseFragment, range: Range<Text.Effect.ClusterIndex>));
  }
}

void type metadata accessor for Range<Text.Effect.ClusterIndex>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Range<Text.Effect.ClusterIndex>)
  {
    lazy protocol witness table accessor for type Text.Effect.ClusterIndex and conformance Text.Effect.ClusterIndex();
    v0 = type metadata accessor for Range();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Range<Text.Effect.ClusterIndex>);
  }
}

uint64_t _ViewInputs.makeEventBindingBridge(bindingManager:responder:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;

  return specialized _ViewInputs.makeEventBindingBridge(bindingManager:responder:)(a1, (uint64_t)a2, v3, *a2, a3);
}

uint64_t EventBindingSource.as<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return EventBindingSource.as<A>(_:)(a1, a2);
}

uint64_t EventBindingSource.as<A>(_:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 1, 1, a1);
}

uint64_t static EventBindingBridgeFactoryInput.defaultValue.getter()
{
  return 0;
}

uint64_t specialized _ViewInputs.makeEventBindingBridge(bindingManager:responder:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = *a3;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v9 = specialized closure #1 in PropertyList.subscript.getter(v8);
  v11 = v10;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  if (v9)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 8))(a1, a2, a5, v9, v11);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t dispatch thunk of EventBindingSource.attach(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of EventBindingSource.as<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of EventBindingSource.didUpdate(phase:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of EventBindingSource.didUpdate(gestureCategory:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of EventBindingSource.didBind(to:id:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

uint64_t dispatch thunk of static EventBindingBridgeFactory.makeEventBindingBridge(bindingManager:responder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

ValueMetadata *type metadata accessor for EventBindingBridgeFactoryInput()
{
  return &type metadata for EventBindingBridgeFactoryInput;
}

uint64_t FormatStyle.calendar(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  double v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t, double);
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;

  v4 = v3;
  v8 = MEMORY[0x24BDAC7A8](a1);
  v11 = *(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16);
  v11((char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v4, a2, v8);
  type metadata accessor for CalendarDependentFormatStyle();
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(&v16, (uint64_t)v19);
    v12 = v20;
    v13 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
    *((_QWORD *)&v17 + 1) = v12;
    v18 = v13;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v16);
    v14(a1, v12, v13);
    swift_dynamicCast();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    v18 = 0;
    v16 = 0u;
    v17 = 0u;
    outlined destroy of CalendarDependentFormatStyle?((uint64_t)&v16);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v11)(a3, v4, a2);
  }
}

unint64_t type metadata accessor for CalendarDependentFormatStyle()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CalendarDependentFormatStyle;
  if (!lazy cache variable for type metadata for CalendarDependentFormatStyle)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CalendarDependentFormatStyle);
  }
  return result;
}

uint64_t outlined destroy of CalendarDependentFormatStyle?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for CalendarDependentFormatStyle?();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for CalendarDependentFormatStyle?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CalendarDependentFormatStyle?)
  {
    type metadata accessor for CalendarDependentFormatStyle();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CalendarDependentFormatStyle?);
  }
}

uint64_t protocol witness for CalendarDependentFormatStyle.withCalendar(_:) in conformance Date.FormatStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return protocol witness for CalendarDependentFormatStyle.withCalendar(_:) in conformance Date.FormatStyle(a1, a2, MEMORY[0x24BDCE260], a3);
}

uint64_t protocol witness for CalendarDependentFormatStyle.withCalendar(_:) in conformance Date.VerbatimFormatStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return protocol witness for CalendarDependentFormatStyle.withCalendar(_:) in conformance Date.FormatStyle(a1, a2, MEMORY[0x24BDCE598], a3);
}

uint64_t instantiation function for generic protocol witness table for Date.VerbatimFormatStyle(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE5C0], MEMORY[0x24BDCE5B8]);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  result = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE5C0], MEMORY[0x24BDCE5B0]);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t protocol witness for CalendarDependentFormatStyle.withCalendar(_:) in conformance Date.FormatStyle.Attributed@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return protocol witness for CalendarDependentFormatStyle.withCalendar(_:) in conformance Date.FormatStyle.Attributed(a1, a2, (uint64_t (*)(char *, uint64_t))MEMORY[0x24BDCDF48], a3);
}

uint64_t WhitespaceRemovingFormatStyle<>.withCalendar(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a4, v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a1, v8, a3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 40))(a4, v11, v8);
}

uint64_t protocol witness for CalendarDependentFormatStyle.withCalendar(_:) in conformance <> WhitespaceRemovingFormatStyle<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return WhitespaceRemovingFormatStyle<>.withCalendar(_:)(a1, a2, *(_QWORD *)(a3 - 8), a4);
}

uint64_t protocol witness for CalendarDependentFormatStyle.withCalendar(_:) in conformance Date.VerbatimFormatStyle.Attributed@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return protocol witness for CalendarDependentFormatStyle.withCalendar(_:) in conformance Date.FormatStyle.Attributed(a1, a2, MEMORY[0x24BDCE550], a3);
}

uint64_t protocol witness for CalendarDependentFormatStyle.withCalendar(_:) in conformance Date.FormatStyle.Attributed@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(char *, uint64_t)@<X4>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t KeyPath;
  uint64_t v16;

  v9 = type metadata accessor for Calendar();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)(a2 - 8) + 16))(a4, v4, a2, v11);
  KeyPath = swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a1, v9);
  return a3(v13, KeyPath);
}

uint64_t instantiation function for generic protocol witness table for Date.VerbatimFormatStyle.Attributed(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE568], MEMORY[0x24BDCE560]);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  result = lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE568], MEMORY[0x24BDCE558]);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t protocol witness for CalendarDependentFormatStyle.withCalendar(_:) in conformance Date.AnchoredRelativeFormatStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return protocol witness for CalendarDependentFormatStyle.withCalendar(_:) in conformance Date.FormatStyle(a1, a2, MEMORY[0x24BDCE810], a3);
}

uint64_t protocol witness for CalendarDependentFormatStyle.withCalendar(_:) in conformance Date.FormatStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(char *)@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;

  v9 = type metadata accessor for Calendar();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)(a2 - 8) + 16))(a4, v4, a2, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a1, v9);
  return a3(v13);
}

uint64_t protocol witness for CalendarDependentFormatStyle.withCalendar(_:) in conformance SystemFormatStyle.DateOffset@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return protocol witness for CalendarDependentFormatStyle.withCalendar(_:) in conformance SystemFormatStyle.DateOffset(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateOffset, a3);
}

uint64_t protocol witness for CalendarDependentFormatStyle.withCalendar(_:) in conformance SystemFormatStyle.DateReference@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return protocol witness for CalendarDependentFormatStyle.withCalendar(_:) in conformance SystemFormatStyle.DateOffset(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for SystemFormatStyle.DateReference, a3);
}

uint64_t protocol witness for CalendarDependentFormatStyle.withCalendar(_:) in conformance SystemFormatStyle.DateOffset@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(_QWORD)@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;

  outlined init with copy of TypesettingLanguage(v4, a4, a3);
  v8 = a4 + *(int *)(a2 + 40);
  v9 = type metadata accessor for Calendar();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v8, a1, v9);
}

double CATransform3D.init(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  double result;
  __int128 v7;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  v5 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a2 + 16) = 0;
  *(_OWORD *)(a2 + 24) = v4;
  *(_QWORD *)(a2 + 40) = v2;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = v3;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  result = 1.0;
  v7 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 80) = xmmword_235281560;
  *(_OWORD *)(a2 + 96) = v7;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = v5;
  return result;
}

__n128 ProjectionTransform.init(_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_QWORD *)(a2 + 16) = 0;
  *(_OWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 40) = 0;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 48) = result;
  *(_QWORD *)(a2 + 64) = 0x3FF0000000000000;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __n128 result;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 120);
  v5 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 32) = v2;
  *(_QWORD *)(a2 + 40) = v3;
  result = *(__n128 *)(a1 + 96);
  *(__n128 *)(a2 + 48) = result;
  *(_QWORD *)(a2 + 64) = v4;
  return result;
}

BOOL ProjectionTransform.isInvertible.getter()
{
  double *v0;
  double v1;
  double v2;
  double v3;

  v1 = v0[2];
  v2 = v0[5];
  if (v1 == 0.0 && v2 == 0.0 && v0[8] == 1.0)
    v3 = *v0 * v0[4] - v0[1] * v0[3];
  else
    v3 = v1 * (v0[7] * v0[3] - v0[4] * v0[6])
       + (v0[4] * v0[8] - v2 * v0[7]) * *v0
       - v0[1] * (v0[8] * v0[3] - v2 * v0[6]);
  return v3 != 0.0;
}

BOOL ProjectionTransform.isAffine.getter()
{
  double *v0;

  return v0[2] == 0.0 && v0[5] == 0.0 && v0[8] == 1.0;
}

__n128 CGAffineTransform.init(_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  result = *(__n128 *)(a1 + 48);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void ProjectionTransform.init()(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0x3FF0000000000000;
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0x3FF0000000000000;
}

double ProjectionTransform.concatenating(_:)@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double result;

  v3 = v2[1];
  v4 = a1[1];
  v6 = a1[2];
  v5 = a1[3];
  v7 = a1[6];
  v8 = a1[7];
  v9 = v2[2];
  v10 = v2[3];
  v11 = *v2 * *a1 + v3 * v5 + v9 * v7;
  v12 = a1[4];
  v13 = a1[5];
  v14 = *v2 * v4 + v3 * v12 + v9 * v8;
  v15 = a1[8];
  v16 = *v2 * v6 + v3 * v13 + v9 * v15;
  v17 = v2[4];
  v18 = v2[5];
  v19 = *a1 * v10 + v5 * v17 + v7 * v18;
  v20 = v4 * v10 + v12 * v17 + v8 * v18;
  v21 = v6 * v10 + v13 * v17 + v15 * v18;
  v22 = v2[6];
  v23 = v2[7];
  v24 = v2[8];
  v25 = *a1 * v22 + v5 * v23 + v7 * v24;
  *a2 = v11;
  a2[1] = v14;
  a2[2] = v16;
  a2[3] = v19;
  a2[4] = v20;
  a2[5] = v21;
  a2[6] = v25;
  result = v6 * v22 + v13 * v23 + v15 * v24;
  a2[7] = v4 * v22 + v12 * v23 + v8 * v24;
  a2[8] = result;
  return result;
}

double ProjectionTransform.m11.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void ProjectionTransform.m11.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*ProjectionTransform.m11.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double ProjectionTransform.m12.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void ProjectionTransform.m12.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

uint64_t (*ProjectionTransform.m12.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double ProjectionTransform.m13.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void ProjectionTransform.m13.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
}

uint64_t (*ProjectionTransform.m13.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double ProjectionTransform.m21.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

void ProjectionTransform.m21.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 24) = a1;
}

uint64_t (*ProjectionTransform.m21.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double ProjectionTransform.m22.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

void ProjectionTransform.m22.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 32) = a1;
}

uint64_t (*ProjectionTransform.m22.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double ProjectionTransform.m23.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 40);
}

void ProjectionTransform.m23.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 40) = a1;
}

uint64_t (*ProjectionTransform.m23.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double ProjectionTransform.m31.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 48);
}

void ProjectionTransform.m31.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 48) = a1;
}

uint64_t (*ProjectionTransform.m31.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double ProjectionTransform.m32.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 56);
}

void ProjectionTransform.m32.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 56) = a1;
}

uint64_t (*ProjectionTransform.m32.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double ProjectionTransform.m33.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 64);
}

void ProjectionTransform.m33.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 64) = a1;
}

uint64_t (*ProjectionTransform.m33.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

BOOL ProjectionTransform.isIdentity.getter()
{
  double *v0;

  return *v0 == 1.0
      && v0[1] == 0.0
      && v0[2] == 0.0
      && v0[3] == 0.0
      && v0[4] == 1.0
      && v0[5] == 0.0
      && v0[6] == 0.0
      && v0[7] == 0.0
      && v0[8] == 1.0;
}

double ProjectionTransform.determinant.getter()
{
  double *v0;
  double v1;
  double v2;

  v1 = v0[2];
  v2 = v0[5];
  if (v1 == 0.0 && v2 == 0.0 && v0[8] == 1.0)
    return *v0 * v0[4] - v0[1] * v0[3];
  else
    return v1 * (v0[7] * v0[3] - v0[4] * v0[6])
         + (v0[4] * v0[8] - v2 * v0[7]) * *v0
         - v0[1] * (v0[8] * v0[3] - v2 * v0[6]);
}

Swift::Bool __swiftcall ProjectionTransform.invert()()
{
  double *v0;
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;

  v1 = v0[4];
  v2 = v0[5];
  v4 = v0[7];
  v3 = v0[8];
  v5 = v0[6];
  v6 = v1 * v3 - v2 * v4;
  v7 = v0[2];
  v8 = v0[3];
  v9 = v3 * v8 - v2 * v5;
  v10 = v4 * v8 - v1 * v5;
  v12 = *v0;
  v11 = v0[1];
  v13 = v7 * v10 + v6 * *v0 - v11 * v9;
  if (v13 != 0.0)
  {
    *v0 = v6 * (1.0 / v13);
    v0[1] = -(1.0 / v13 * (v3 * v11 - v4 * v7));
    v0[2] = (v2 * v11 - v1 * v7) * (1.0 / v13);
    v0[3] = -(1.0 / v13 * v9);
    v0[4] = (v3 * v12 - v5 * v7) * (1.0 / v13);
    v0[5] = -(1.0 / v13 * (v2 * v12 - v8 * v7));
    v0[6] = v10 * (1.0 / v13);
    v0[7] = -(1.0 / v13 * (v4 * v12 - v5 * v11));
    v0[8] = (v1 * v12 - v8 * v11) * (1.0 / v13);
  }
  return v13 != 0.0;
}

double ProjectionTransform.inverted()@<D0>(uint64_t a1@<X8>)
{
  double *v1;
  double result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  double v8;

  v6 = *((_OWORD *)v1 + 2);
  v7 = *((_OWORD *)v1 + 3);
  v8 = v1[8];
  v4 = *(_OWORD *)v1;
  v5 = *((_OWORD *)v1 + 1);
  if (!ProjectionTransform.invert()())
  {
    static os_log_type_t.fault.getter();
    if (one-time initialization token for runtimeIssuesLog != -1)
      swift_once();
    os_log(_:dso:log:_:_:)();
  }
  result = v8;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = v7;
  *(double *)(a1 + 64) = v8;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ProjectionTransform(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[4];
  uint64_t v8;
  _OWORD v9[4];
  uint64_t v10;

  v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  v8 = *(_QWORD *)(a1 + 64);
  v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  v10 = *(_QWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return specialized static ProjectionTransform.== infix(_:_:)((double *)v7, (double *)v9);
}

double ProjectionTransform.dot(_:_:)(double a1, double a2, double a3, double a4, double a5, double a6)
{
  return a1 * a4 + a2 * a5 + a3 * a6;
}

double CGPoint.applying(_:)(uint64_t a1, double a2, double a3)
{
  double v3;
  double v4;
  double result;

  v3 = *(double *)(a1 + 64) + *(double *)(a1 + 16) * a2 + *(double *)(a1 + 40) * a3;
  v4 = 1.0;
  if (v3 != 1.0)
  {
    if (v3 <= 0.0)
      v4 = INFINITY;
    else
      v4 = 1.0 / v3;
  }
  *(_QWORD *)&result = *(_OWORD *)&vmulq_n_f64(vaddq_f64(*(float64x2_t *)(a1 + 48), vaddq_f64(vmulq_n_f64(*(float64x2_t *)a1, a2), vmulq_n_f64(*(float64x2_t *)(a1 + 24), a3))), v4);
  return result;
}

double CGPoint.unapplying(_:)(double *a1, double result, double a3)
{
  double v3;
  double v4;
  double v5;
  double v6;

  v3 = a1[3];
  v5 = a1[4];
  v4 = a1[5];
  v6 = *a1 * v5 + v3 * (a1[2] * a3 - a1[1]) - *a1 * v4 * a3 + (a1[1] * v4 - a1[2] * v5) * result;
  if (v6 != 0.0)
    return ((v4 * a3 - v5) * a1[6] + v3 * a1[7] + (v5 * a1[8] - v4 * a1[7]) * result - v3 * a1[8] * a3) / v6;
  return result;
}

double *ProjectionTransform.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  _OWORD v5[4];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = *(_OWORD *)(v1 + 48);
  v5[2] = *(_OWORD *)(v1 + 32);
  v5[3] = v2;
  v6 = *(_QWORD *)(v1 + 64);
  v3 = *(_OWORD *)(v1 + 16);
  v5[0] = *(_OWORD *)v1;
  v5[1] = v3;
  return closure #1 in ProjectionTransform.encode(to:)((double *)v5, a1);
}

double *closure #1 in ProjectionTransform.encode(to:)(double *result, _QWORD *a2)
{
  double *v3;
  unint64_t v4;
  char i;
  float v6;
  double v7;
  double v8;
  double v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  double v16;

  v3 = result;
  v4 = 0;
  for (i = 8; ; i += 8)
  {
    if (v4 > 8 || (v7 = 1.0, ((1 << v4) & 0x111) == 0))
      v7 = 0.0;
    v8 = v3[v4];
    if (v8 == v7)
      goto LABEL_4;
    v9 = fabs(v8);
    v10 = v9 >= 65536.0 ? i + 1 : i + 5;
    v11 = a2[1];
    v12 = a2[2];
    if (v11 >= v12)
    {
      result = (double *)(v11 + 1);
      if (__OFADD__(v11, 1))
        goto LABEL_30;
      if (v12 < (uint64_t)result)
      {
        v16 = v9;
        v15 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
        v9 = v16;
      }
      else
      {
        a2[1] = result;
        v15 = (_BYTE *)(*a2 + v11);
      }
      *v15 = v10 & 0x7D;
    }
    else
    {
      *(_BYTE *)(*a2 + v11) = v10;
      a2[1] = v11 + 1;
    }
    if (v9 < 65536.0)
      break;
    v14 = a2[1];
    result = (double *)(v14 + 8);
    if (__OFADD__(v14, 8))
      goto LABEL_29;
    if (a2[2] < (uint64_t)result)
    {
      result = (double *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
      *result = v8;
    }
    else
    {
      a2[1] = result;
      *(double *)(*a2 + v14) = v8;
    }
LABEL_4:
    if (++v4 == 9)
      return result;
  }
  v13 = a2[1];
  result = (double *)(v13 + 4);
  if (!__OFADD__(v13, 4))
  {
    if (a2[2] >= (uint64_t)result)
    {
      a2[1] = result;
      result = (double *)(*a2 + v13);
    }
    else
    {
      result = (double *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    }
    v6 = v8;
    *(float *)result = v6;
    goto LABEL_4;
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

double ProjectionTransform.init(from:)@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  double v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v9 = 0x3FF0000000000000uLL;
  v10 = 0uLL;
  v11 = 0x3FF0000000000000uLL;
  v12 = 0uLL;
  v13 = 1.0;
  closure #1 in ProjectionTransform.init(from:)((unint64_t)&v9, a1, &v8);
  if (!v2)
  {
    result = v13;
    v5 = v10;
    v6 = v11;
    v7 = v12;
    *(_OWORD *)a2 = v9;
    *(_OWORD *)(a2 + 16) = v5;
    *(_OWORD *)(a2 + 32) = v6;
    *(_OWORD *)(a2 + 48) = v7;
    *(double *)(a2 + 64) = result;
  }
  return result;
}

unint64_t closure #1 in ProjectionTransform.init(from:)(unint64_t result, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  double *v14;
  unint64_t v15;
  float *v16;
  float v17;
  double v18;

  v4 = v3;
  v6 = a2[1];
  if (v6 >= a2[2])
  {
LABEL_38:
    a2[3] = 0;
    return result;
  }
  v8 = result;
  while (1)
  {
    v10 = a2[3];
    if (v10)
    {
      v11 = a2[4];
      if (v6 < v11)
        goto LABEL_12;
      if (v11 < v6)
        break;
      a2[3] = 0;
    }
    result = ProtobufDecoder.decodeVarint()();
    if (v3)
      goto LABEL_37;
    v10 = result;
    if (result <= 7)
      break;
LABEL_12:
    if (v10 <= 0x4F)
    {
      v12 = (v10 >> 3) - 1;
      if (!(v10 >> 3))
      {
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        JUMPOUT(0x234F1947CLL);
      }
      if (v12 < 0)
        goto LABEL_40;
      v13 = v10 & 7;
      if (v13 == 5)
      {
        v16 = (float *)a2[1];
        if (a2[2] < (unint64_t)(v16 + 1))
          break;
        v17 = *v16;
        a2[1] = v16 + 1;
        v18 = v17;
      }
      else
      {
        if (v13 == 2)
        {
          result = ProtobufDecoder.decodeVarint()();
          if (v3)
            goto LABEL_37;
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_41;
          v14 = (double *)a2[1];
          v15 = a2[2];
          if (v15 < (unint64_t)v14 + result)
            break;
          a2[3] = v10 & 0xFFFFFFFFFFFFFFF8 | 1;
          a2[4] = (char *)v14 + result;
        }
        else
        {
          if (v13 != 1)
            break;
          v14 = (double *)a2[1];
          v15 = a2[2];
        }
        if (v15 < (unint64_t)(v14 + 1))
          break;
        v18 = *v14;
        a2[1] = v14 + 1;
      }
      *(double *)(v8 + 8 * v12) = v18;
    }
    else
    {
      switch(v10 & 7)
      {
        case 0uLL:
          result = ProtobufDecoder.decodeVarint()();
          if (v3)
            goto LABEL_37;
          break;
        case 1uLL:
          v9 = a2[1] + 8;
          if (a2[2] >= v9)
            goto LABEL_4;
          goto LABEL_36;
        case 2uLL:
          result = ProtobufDecoder.decodeVarint()();
          if (v3)
            goto LABEL_37;
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_42;
          v9 = a2[1] + result;
          if (a2[2] < v9)
            goto LABEL_36;
LABEL_4:
          a2[1] = v9;
          break;
        case 5uLL:
          v9 = a2[1] + 4;
          if (a2[2] < v9)
            goto LABEL_36;
          goto LABEL_4;
        default:
          goto LABEL_36;
      }
    }
    v6 = a2[1];
    if (v6 >= a2[2])
      goto LABEL_38;
  }
LABEL_36:
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  v4 = swift_allocError();
  result = swift_willThrow();
LABEL_37:
  *a3 = v4;
  return result;
}

double *protocol witness for ProtobufEncodableMessage.encode(to:) in conformance ProjectionTransform(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[4];
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(v1 + 64);
  v3 = *(_OWORD *)(v1 + 16);
  v6[0] = *(_OWORD *)v1;
  v6[1] = v3;
  v4 = *(_OWORD *)(v1 + 48);
  v6[2] = *(_OWORD *)(v1 + 32);
  v6[3] = v4;
  v7 = v2;
  return closure #1 in ProjectionTransform.encode(to:)((double *)v6, a1);
}

double protocol witness for ProtobufDecodableMessage.init(from:) in conformance ProjectionTransform@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  double v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v9 = 0x3FF0000000000000uLL;
  v10 = 0uLL;
  v11 = 0x3FF0000000000000uLL;
  v12 = 0uLL;
  v13 = 1.0;
  closure #1 in ProjectionTransform.init(from:)((unint64_t)&v9, a1, &v8);
  if (!v2)
  {
    result = v13;
    v5 = v10;
    v6 = v11;
    v7 = v12;
    *(_OWORD *)a2 = v9;
    *(_OWORD *)(a2 + 16) = v5;
    *(_OWORD *)(a2 + 32) = v6;
    *(_OWORD *)(a2 + 48) = v7;
    *(double *)(a2 + 64) = result;
  }
  return result;
}

BOOL specialized static ProjectionTransform.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2
      && a1[1] == a2[1]
      && a1[2] == a2[2]
      && a1[3] == a2[3]
      && a1[4] == a2[4]
      && a1[5] == a2[5]
      && a1[6] == a2[6]
      && a1[7] == a2[7]
      && a1[8] == a2[8];
}

ValueMetadata *type metadata accessor for ProjectionTransform()
{
  return &type metadata for ProjectionTransform;
}

SwiftUI::LuminanceCurveEffect::Curve __swiftcall LuminanceCurveEffect.Curve.init(_:)(SwiftUI::LuminanceCurveEffect::Curve result)
{
  SwiftUI::LuminanceCurveEffect::Curve *v1;

  *v1 = result;
  return result;
}

BOOL static LuminanceCurveEffect.Curve.== infix(_:_:)(float *a1, float *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

__n128 LuminanceCurveEffect.curve.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  return result;
}

__n128 LuminanceCurveEffect.curve.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  result = *a1;
  *v1 = *a1;
  return result;
}

uint64_t (*LuminanceCurveEffect.curve.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

float LuminanceCurveEffect.amount.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 16);
}

void LuminanceCurveEffect.amount.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 16) = a1;
}

uint64_t (*LuminanceCurveEffect.amount.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void __swiftcall LuminanceCurveEffect.init(curve:amount:)(SwiftUI::LuminanceCurveEffect *__return_ptr retstr, SwiftUI::LuminanceCurveEffect::Curve curve, Swift::Float amount)
{
  SwiftUI::LuminanceCurveEffect::Curve *v3;

  retstr->curve = *v3;
  retstr->amount = curve.values._0;
}

double LuminanceCurveEffect.effectValue(size:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  v3 = *v1;
  v4 = v1[1];
  v5 = *((unsigned int *)v1 + 4);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v3;
  *(_QWORD *)(v6 + 24) = v4;
  *(_QWORD *)(v6 + 32) = v5;
  result = 0.0;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 116) = 0u;
  *(_BYTE *)(v6 + 132) = 13;
  *(_QWORD *)a1 = v6;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 9;
  return result;
}

uint64_t sub_234F19760()
{
  uint64_t v0;

  outlined consume of GraphicsFilter(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(id *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_DWORD *)(v0 + 128), BYTE2(*(_DWORD *)(v0 + 128)));
  return swift_deallocObject();
}

double protocol witness for _RendererEffect.effectValue(size:) in conformance LuminanceCurveEffect@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  v3 = *v1;
  v4 = v1[1];
  v5 = *((unsigned int *)v1 + 4);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v3;
  *(_QWORD *)(v6 + 24) = v4;
  *(_QWORD *)(v6 + 32) = v5;
  result = 0.0;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 116) = 0u;
  *(_BYTE *)(v6 + 132) = 13;
  *(_QWORD *)a1 = v6;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 9;
  return result;
}

uint64_t View.luminanceCurve(_:amount:)(uint64_t a1, uint64_t a2, float a3, float a4, float a5, float a6, float a7)
{
  _DWORD v8[5];

  *(float *)v8 = a3;
  *(float *)&v8[1] = a4;
  *(float *)&v8[2] = a5;
  *(float *)&v8[3] = a6;
  *(float *)&v8[4] = a7;
  return View.modifier<A>(_:)(v8, a1, &type metadata for LuminanceCurveEffect, a2);
}

unint64_t instantiation function for generic protocol witness table for LuminanceCurveEffect(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type LuminanceCurveEffect and conformance LuminanceCurveEffect();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type LuminanceCurveEffect and conformance LuminanceCurveEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LuminanceCurveEffect and conformance LuminanceCurveEffect;
  if (!lazy protocol witness table cache variable for type LuminanceCurveEffect and conformance LuminanceCurveEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for LuminanceCurveEffect, &type metadata for LuminanceCurveEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LuminanceCurveEffect and conformance LuminanceCurveEffect);
  }
  return result;
}

ValueMetadata *type metadata accessor for LuminanceCurveEffect()
{
  return &type metadata for LuminanceCurveEffect;
}

ValueMetadata *type metadata accessor for LuminanceCurveEffect.Curve()
{
  return &type metadata for LuminanceCurveEffect.Curve;
}

uint64_t sub_234F198F8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[1];
  v5 = type metadata accessor for ModifiedContent(255, *a1, (uint64_t)&type metadata for LuminanceCurveEffect, a4);
  v7[0] = v4;
  v7[1] = &protocol witness table for LuminanceCurveEffect;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v7);
}

double SpringAnimation.mass.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void SpringAnimation.mass.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*SpringAnimation.mass.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double SpringAnimation.stiffness.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void SpringAnimation.stiffness.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

uint64_t (*SpringAnimation.stiffness.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double SpringAnimation.damping.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void SpringAnimation.damping.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
}

uint64_t (*SpringAnimation.damping.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double SpringAnimation.initialVelocity.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

void SpringAnimation.initialVelocity.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 24) = a1;
}

uint64_t (*SpringAnimation.initialVelocity.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void SpringAnimation.init(mass:stiffness:damping:initialVelocity:)(double *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
}

void SpringAnimation.init(mass:stiffness:damping:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>)
{
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = 0;
}

void specialized SpringAnimation.animate<A>(value:time:context:)(uint64_t a1@<X0>, uint64_t a2@<X8>, float64_t a3@<D0>, float64_t a4@<D1>, float64_t a5@<D2>, float64_t a6@<D3>, double a7@<D4>, double a8@<D6>)
{
  float64x2_t v12;
  double v13;
  double v14;
  char v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;

  SpringModel.duration(epsilon:)(0.001);
  v12 = 0uLL;
  if (v13 <= a7)
  {
    v15 = 1;
    v16 = 0uLL;
    goto LABEL_11;
  }
  v14 = SpringModel.sample(at:)(a7);
  if ((~*(_QWORD *)&v14 & 0x7FF0000000000000) != 0)
  {
    v17.f64[0] = a5;
    if ((~*(_QWORD *)&a8 & 0x7FF0000000000000) != 0)
    {
      if (6.28318531 / sqrt(a8) > a7)
      {
LABEL_10:
        v15 = 0;
        v18.f64[0] = a3;
        v18.f64[1] = a4;
        v12 = vmulq_n_f64(v18, v14);
        v17.f64[1] = a6;
        v16 = vmulq_n_f64(v17, v14);
        goto LABEL_11;
      }
    }
    else if (a7 < 0.0)
    {
      goto LABEL_10;
    }
    *(_BYTE *)(a1 + 17) = 1;
    goto LABEL_10;
  }
  v15 = 1;
  v16 = 0uLL;
  v12 = 0uLL;
LABEL_11:
  *(float64x2_t *)a2 = v12;
  *(float64x2_t *)(a2 + 16) = v16;
  *(_BYTE *)(a2 + 32) = v15;
}

uint64_t specialized SpringAnimation.animate<A>(value:time:context:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  double v9;
  double v10;
  uint64_t result;

  SpringModel.duration(epsilon:)(0.001);
  if (v9 <= a3 || (v10 = SpringModel.sample(at:)(a3), (~*(_QWORD *)&v10 & 0x7FF0000000000000) == 0))
  {
    *(double *)&result = 0.0;
    return result;
  }
  if ((~*(_QWORD *)&a5 & 0x7FF0000000000000) == 0)
  {
    if (a3 < 0.0)
      goto LABEL_9;
    goto LABEL_8;
  }
  if (6.28318531 / sqrt(a5) <= a3)
LABEL_8:
    *(_BYTE *)(a1 + 17) = 1;
LABEL_9:
  *(double *)&result = v10 * a2;
  return result;
}

uint64_t SpringAnimation.animate<A>(value:time:context:)@<X0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  double *v6;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  uint64_t result;
  char v25;
  double v26;
  double v27;
  _QWORD v29[5];

  v13 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v15 = (char *)&v29[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v16 == MEMORY[0x24BEE13C8])
  {
    result = specialized SpringAnimation.animate<A>(value:time:context:)(a2, *a1, a6, *v6, v6[1]);
    *(_QWORD *)a5 = result;
    *(_BYTE *)(a5 + 8) = v25 & 1;
    return result;
  }
  if (type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>() == a3)
  {
    specialized SpringAnimation.animate<A>(value:time:context:)(a2, (uint64_t)v29, *a1, a1[1], a1[2], a1[3], a6, v6[1]);
    return outlined init with take of AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>?((uint64_t)v29, a5);
  }
  v17 = v6[1];
  v18 = v6[3];
  v19 = sqrt(v17 / *v6);
  v20 = sqrt(*v6 * v17);
  v21 = v6[2] / (v20 + v20);
  if (v21 >= 1.0)
  {
    v23 = v19 - v18;
    v22 = 0.0;
  }
  else
  {
    v22 = v19 * sqrt(1.0 - v21 * v21);
    v23 = (v19 * v21 - v18) / v22;
  }
  *(double *)v29 = v19;
  *(double *)&v29[1] = v21;
  *(double *)&v29[2] = v22;
  v29[3] = 0x3FF0000000000000;
  *(double *)&v29[4] = v23;
  SpringModel.duration(epsilon:)(0.001);
  if (v26 <= a6)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(a5, 1, 1, a3);
  v27 = SpringModel.sample(at:)(a6);
  if ((~*(_QWORD *)&v27 & 0x7FF0000000000000) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(a5, 1, 1, a3);
  if ((~*(_QWORD *)&v17 & 0x7FF0000000000000) == 0)
  {
    if (a6 < 0.0)
      goto LABEL_16;
    goto LABEL_15;
  }
  if (6.28318531 / sqrt(v17) <= a6)
LABEL_15:
    *(_BYTE *)(a2 + 17) = 1;
LABEL_16:
  (*(void (**)(char *, double *, uint64_t))(v13 + 16))(v15, a1, a3);
  (*(void (**)(uint64_t, uint64_t, double))(a4 + 16))(a3, a4, v27);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a5, v15, a3);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(a5, 0, 1, a3);
}

void SpringModel.duration(epsilon:)(double a1)
{
  double *v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  __double2 v13;
  double v14;
  double v15;
  double v16;
  double v17;

  v2 = v1[1];
  v3 = 0.000001;
  if (a1 > 0.000001)
  {
    if (v2 == 0.0)
      return;
    v3 = a1;
    if (v2 >= 1.0)
      goto LABEL_4;
LABEL_20:
    fmax(-log(v3 / (fabs(v1[3]) + fabs(v1[4]))) / (v2 * *v1), 0.0);
    return;
  }
  if (v2 == 0.0)
    return;
  if (v2 < 1.0)
    goto LABEL_20;
LABEL_4:
  v4 = -1.0;
  v5 = 0.0;
  v6 = INFINITY;
  v7 = 1024;
  v8 = 1.0;
  v9 = -1.0;
  do
  {
    if (v2 >= v8)
    {
      v16 = v1[3] + v5 * v1[4];
      v15 = v16 * exp(-(v5 * *v1));
    }
    else
    {
      v10 = v5 * v1[2];
      v11 = exp(v5 * (*v1 * -v2));
      v12 = v1[3];
      v13 = __sincos_stret(v10);
      v14 = v12 * v13.__cosval;
      v8 = 1.0;
      v15 = v11 * (v14 + v13.__sinval * v1[4]);
      v4 = -1.0;
    }
    v17 = fabs(v15 + v4 + v8);
    if ((~*(_QWORD *)&v17 & 0x7FF0000000000000) == 0)
      break;
    if (v6 >= v3)
    {
      if (v17 < v6)
      {
        v6 = v17;
        v9 = v5;
      }
    }
    else if (v17 >= v3)
    {
      v6 = INFINITY;
    }
    else if (v5 - v9 > v8)
    {
      return;
    }
    v5 = v5 + 0.1;
    --v7;
  }
  while (v7);
}

double SpringModel.sample(at:)(double a1)
{
  double *v1;
  double v2;
  double v3;
  double v4;
  double v5;
  __double2 v6;
  double v7;
  double v8;

  v2 = v1[1];
  if (v2 >= 1.0)
  {
    v8 = v1[3] + v1[4] * a1;
    v7 = v8 * exp(-(a1 * *v1));
  }
  else
  {
    v3 = v1[2] * a1;
    v4 = exp(-(v2 * *v1) * a1);
    v5 = v1[3];
    v6 = __sincos_stret(v3);
    v7 = v4 * (v5 * v6.__cosval + v6.__sinval * v1[4]);
  }
  return 1.0 - v7;
}

uint64_t outlined init with take of AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>?)
  {
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>?);
  }
}

void SpringAnimation.function.getter(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  v6 = v1[3];
  SpringModel.duration(epsilon:)(0.001);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 40) = 5;
}

void SpringAnimation.hash(into:)()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;

  v1 = v0[1];
  v2 = v0[2];
  v3 = v0[3];
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = *v0;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = v1;
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v6 = v2;
  else
    v6 = 0;
  Hasher._combine(_:)(v6);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v7 = v3;
  else
    v7 = 0;
  Hasher._combine(_:)(v7);
}

Swift::Int SpringAnimation.hashValue.getter()
{
  Hasher.init(_seed:)();
  SpringAnimation.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SpringAnimation()
{
  Hasher.init(_seed:)();
  SpringAnimation.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SpringAnimation()
{
  Hasher.init(_seed:)();
  SpringAnimation.hash(into:)();
  return Hasher._finalize()();
}

double *static Animation.interpolatingSpring(mass:stiffness:damping:initialVelocity:)(double a1, double a2, double a3, double a4)
{
  double *result;

  type metadata accessor for InternalAnimationBox<SpringAnimation>(0);
  result = (double *)swift_allocObject();
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  result[5] = a4;
  return result;
}

_QWORD *SpringAnimation.encode(to:)(_QWORD *result)
{
  double *v1;
  double *v2;
  _QWORD *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = v1;
  v3 = result;
  v5 = *v2;
  v4 = v2[1];
  v7 = v2[2];
  v6 = v2[3];
  if (*v2 != 1.0)
  {
    ProtobufEncoder.encodeVarint(_:)(9uLL);
    v8 = v3[1];
    result = (_QWORD *)(v8 + 8);
    if (__OFADD__(v8, 8))
    {
      __break(1u);
    }
    else if (v3[2] >= (uint64_t)result)
    {
      v3[1] = result;
      *(double *)(*v3 + v8) = v5;
      goto LABEL_5;
    }
    result = (_QWORD *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    *(double *)result = v5;
  }
LABEL_5:
  if (v4 == 100.0)
    goto LABEL_9;
  ProtobufEncoder.encodeVarint(_:)(0x11uLL);
  v9 = v3[1];
  result = (_QWORD *)(v9 + 8);
  if (__OFADD__(v9, 8))
  {
    __break(1u);
  }
  else if (v3[2] >= (uint64_t)result)
  {
    v3[1] = result;
    *(double *)(*v3 + v9) = v4;
    goto LABEL_9;
  }
  result = (_QWORD *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
  *(double *)result = v4;
LABEL_9:
  if (v7 == 20.0)
    goto LABEL_13;
  ProtobufEncoder.encodeVarint(_:)(0x19uLL);
  v10 = v3[1];
  result = (_QWORD *)(v10 + 8);
  if (__OFADD__(v10, 8))
  {
    __break(1u);
  }
  else if (v3[2] >= (uint64_t)result)
  {
    v3[1] = result;
    *(double *)(*v3 + v10) = v7;
LABEL_13:
    if (v6 == 0.0)
      return result;
LABEL_14:
    ProtobufEncoder.encodeVarint(_:)(0x21uLL);
    v11 = v3[1];
    result = (_QWORD *)(v11 + 8);
    if (__OFADD__(v11, 8))
    {
      __break(1u);
    }
    else if (v3[2] >= (uint64_t)result)
    {
      v3[1] = result;
      *(double *)(*v3 + v11) = v6;
      return result;
    }
    result = (_QWORD *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    *(double *)result = v6;
    return result;
  }
  result = (_QWORD *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
  *(double *)result = v7;
  if (v6 != 0.0)
    goto LABEL_14;
  return result;
}

unint64_t SpringAnimation.init(from:)@<X0>(unint64_t result@<X0>, double *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v5;
  unint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  unint64_t v11;
  unint64_t v12;
  double *v13;
  unint64_t v14;
  double *v15;
  unint64_t v16;
  double *v17;
  unint64_t v18;
  double *v19;
  float *v20;
  float v21;
  float *v22;
  float v23;
  float *v24;
  float v25;
  float *v26;
  float v27;

  v3 = (_QWORD *)result;
  v5 = *(_QWORD *)(result + 8);
  v6 = *(_QWORD *)(result + 16);
  if (v5 < v6)
  {
    v7 = 100.0;
    v8 = 1.0;
    v9 = 20.0;
    v10 = 0.0;
    while (1)
    {
      result = v3[3];
      if (result)
      {
        v11 = v3[4];
        if (v5 < v11)
          goto LABEL_15;
        if (v11 < v5)
          goto LABEL_71;
        v3[3] = 0;
      }
      result = ProtobufDecoder.decodeVarint()();
      if (v2)
        return result;
      if (result <= 7)
      {
LABEL_71:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        return swift_willThrow();
      }
LABEL_15:
      switch(result >> 3)
      {
        case 1uLL:
          v12 = result & 7;
          switch(v12)
          {
            case 5uLL:
              v20 = (float *)v3[1];
              v5 = (unint64_t)(v20 + 1);
              if (v6 < (unint64_t)(v20 + 1))
                goto LABEL_71;
              v21 = *v20;
              v3[1] = v5;
              v8 = v21;
              goto LABEL_8;
            case 2uLL:
              result = ProtobufDecoder.decodeVarint()();
              if (v2)
                return result;
              if ((result & 0x8000000000000000) != 0)
              {
                __break(1u);
LABEL_74:
                __break(1u);
LABEL_75:
                __break(1u);
LABEL_76:
                __break(1u);
LABEL_77:
                __break(1u);
                JUMPOUT(0x234F1A970);
              }
              v13 = (double *)v3[1];
              if (v6 < (unint64_t)v13 + result)
                goto LABEL_71;
              v3[3] = 9;
              v3[4] = (char *)v13 + result;
              break;
            case 1uLL:
              v13 = (double *)v3[1];
              break;
            default:
              goto LABEL_71;
          }
          v5 = (unint64_t)(v13 + 1);
          if (v6 < (unint64_t)(v13 + 1))
            goto LABEL_71;
          v8 = *v13;
          goto LABEL_7;
        case 2uLL:
          v14 = result & 7;
          switch(v14)
          {
            case 5uLL:
              v22 = (float *)v3[1];
              v5 = (unint64_t)(v22 + 1);
              if (v6 < (unint64_t)(v22 + 1))
                goto LABEL_71;
              v23 = *v22;
              v3[1] = v5;
              v7 = v23;
              goto LABEL_8;
            case 2uLL:
              result = ProtobufDecoder.decodeVarint()();
              if (v2)
                return result;
              if ((result & 0x8000000000000000) != 0)
                goto LABEL_74;
              v15 = (double *)v3[1];
              if (v6 < (unint64_t)v15 + result)
                goto LABEL_71;
              v3[3] = 17;
              v3[4] = (char *)v15 + result;
              break;
            case 1uLL:
              v15 = (double *)v3[1];
              break;
            default:
              goto LABEL_71;
          }
          v5 = (unint64_t)(v15 + 1);
          if (v6 < (unint64_t)(v15 + 1))
            goto LABEL_71;
          v7 = *v15;
          goto LABEL_7;
        case 3uLL:
          v16 = result & 7;
          switch(v16)
          {
            case 5uLL:
              v24 = (float *)v3[1];
              v5 = (unint64_t)(v24 + 1);
              if (v6 < (unint64_t)(v24 + 1))
                goto LABEL_71;
              v25 = *v24;
              v3[1] = v5;
              v9 = v25;
              goto LABEL_8;
            case 2uLL:
              result = ProtobufDecoder.decodeVarint()();
              if (v2)
                return result;
              if ((result & 0x8000000000000000) != 0)
                goto LABEL_75;
              v17 = (double *)v3[1];
              if (v6 < (unint64_t)v17 + result)
                goto LABEL_71;
              v3[3] = 25;
              v3[4] = (char *)v17 + result;
              break;
            case 1uLL:
              v17 = (double *)v3[1];
              break;
            default:
              goto LABEL_71;
          }
          v5 = (unint64_t)(v17 + 1);
          if (v6 < (unint64_t)(v17 + 1))
            goto LABEL_71;
          v9 = *v17;
          goto LABEL_7;
        case 4uLL:
          v18 = result & 7;
          if (v18 == 5)
          {
            v26 = (float *)v3[1];
            v5 = (unint64_t)(v26 + 1);
            if (v6 < (unint64_t)(v26 + 1))
              goto LABEL_71;
            v27 = *v26;
            v3[1] = v5;
            v10 = v27;
          }
          else
          {
            if (v18 == 2)
            {
              result = ProtobufDecoder.decodeVarint()();
              if (v2)
                return result;
              if ((result & 0x8000000000000000) != 0)
                goto LABEL_76;
              v19 = (double *)v3[1];
              if (v6 < (unint64_t)v19 + result)
                goto LABEL_71;
              v3[3] = 33;
              v3[4] = (char *)v19 + result;
            }
            else
            {
              if (v18 != 1)
                goto LABEL_71;
              v19 = (double *)v3[1];
            }
            v5 = (unint64_t)(v19 + 1);
            if (v6 < (unint64_t)(v19 + 1))
              goto LABEL_71;
            v10 = *v19;
LABEL_7:
            v3[1] = v5;
          }
LABEL_8:
          v6 = v3[2];
          if (v5 >= v6)
            goto LABEL_4;
          break;
        default:
          switch(result & 7)
          {
            case 0uLL:
              result = ProtobufDecoder.decodeVarint()();
              if (v2)
                return result;
              v5 = v3[1];
              goto LABEL_8;
            case 1uLL:
              v5 = v3[1] + 8;
              goto LABEL_6;
            case 2uLL:
              result = ProtobufDecoder.decodeVarint()();
              if (v2)
                return result;
              if ((result & 0x8000000000000000) != 0)
                goto LABEL_77;
              v5 = v3[1] + result;
LABEL_6:
              if (v6 >= v5)
                goto LABEL_7;
              goto LABEL_71;
            case 5uLL:
              v5 = v3[1] + 4;
              goto LABEL_6;
            default:
              goto LABEL_71;
          }
      }
    }
  }
  v8 = 1.0;
  v9 = 20.0;
  v10 = 0.0;
  v7 = 100.0;
LABEL_4:
  v3[3] = 0;
  *a2 = v8;
  a2[1] = v7;
  a2[2] = v9;
  a2[3] = v10;
  return result;
}

_QWORD *protocol witness for ProtobufEncodableMessage.encode(to:) in conformance SpringAnimation(_QWORD *a1)
{
  return SpringAnimation.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance SpringAnimation@<X0>(unint64_t a1@<X0>, double *a2@<X8>)
{
  return SpringAnimation.init(from:)(a1, a2);
}

uint64_t protocol witness for static EncodableAnimation.leafProtobufTag.getter in conformance SpringAnimation()
{
  return 2;
}

void type metadata accessor for InternalAnimationBox<SpringAnimation>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for InternalAnimationBox<SpringAnimation>)
  {
    v2 = lazy protocol witness table accessor for type SpringAnimation and conformance SpringAnimation();
    v4 = type metadata accessor for InternalAnimationBox(a1, (uint64_t)&type metadata for SpringAnimation, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for InternalAnimationBox<SpringAnimation>);
  }
}

unint64_t lazy protocol witness table accessor for type SpringAnimation and conformance SpringAnimation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpringAnimation and conformance SpringAnimation;
  if (!lazy protocol witness table cache variable for type SpringAnimation and conformance SpringAnimation)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SpringAnimation, &type metadata for SpringAnimation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpringAnimation and conformance SpringAnimation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpringAnimation and conformance SpringAnimation;
  if (!lazy protocol witness table cache variable for type SpringAnimation and conformance SpringAnimation)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SpringAnimation, &type metadata for SpringAnimation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpringAnimation and conformance SpringAnimation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpringAnimation and conformance SpringAnimation;
  if (!lazy protocol witness table cache variable for type SpringAnimation and conformance SpringAnimation)
  {
    result = MEMORY[0x23B7C9C04]("ͅ;\x1B o\n", &type metadata for SpringAnimation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpringAnimation and conformance SpringAnimation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpringAnimation and conformance SpringAnimation;
  if (!lazy protocol witness table cache variable for type SpringAnimation and conformance SpringAnimation)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for SpringAnimation, &type metadata for SpringAnimation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpringAnimation and conformance SpringAnimation);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for SpringAnimation(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type SpringAnimation and conformance SpringAnimation();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type SpringAnimation and conformance SpringAnimation();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for SpringAnimation()
{
  return &type metadata for SpringAnimation;
}

uint64_t specialized static Animation.interpolatingSpring(duration:bounce:initialVelocity:)(double a1, double a2, double a3)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t result;

  if (a1 <= 0.0)
    v4 = INFINITY;
  else
    v4 = 6.28318531 / a1 * (6.28318531 / a1);
  v5 = INFINITY;
  v6 = 1.0;
  v7 = 1.0 - a2;
  if (a2 > 1.0)
    v7 = 0.0;
  if (a2 != 0.0)
    v6 = v7;
  if (a2 < 0.0)
    v6 = 1.0 / (a2 + 1.0);
  if (a2 > -1.0)
    v5 = v6;
  v8 = sqrt(v4);
  v9 = (v8 + v8) * v5;
  type metadata accessor for InternalAnimationBox<SpringAnimation>(0);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0x3FF0000000000000;
  *(double *)(result + 24) = v4;
  *(double *)(result + 32) = v9;
  *(double *)(result + 40) = a3;
  return result;
}

double CGRect.inset(by:)(double a1, double a2, double a3, double a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  double v11;
  double v16;
  double v17;
  double v18;
  double v19;
  CGRect v21;
  CGRect v22;
  CGRect v23;
  CGRect v24;
  CGRect v25;

  v11 = a5;
  v21.origin.x = a5;
  v21.origin.y = a6;
  v21.size.width = a7;
  v21.size.height = a8;
  if (!CGRectIsNull(v21))
  {
    v22.origin.x = v11;
    v22.origin.y = a6;
    v22.size.width = a7;
    v22.size.height = a8;
    v23 = CGRectStandardize(v22);
    if (a2 == a4)
      v16 = a4;
    else
      v16 = a2;
    v11 = v16 + v23.origin.x;
    v17 = v23.origin.y + a1;
    v18 = v23.size.width - (a2 + a4);
    v19 = v23.size.height - (a1 + a3);
    v24.origin.x = v16 + v23.origin.x;
    v24.origin.y = v23.origin.y + a1;
    v24.size.width = v18;
    v24.size.height = v19;
    if (CGRectGetWidth(v24) < 0.0)
      return *MEMORY[0x24BDBF070];
    v25.origin.x = v11;
    v25.origin.y = v17;
    v25.size.width = v18;
    v25.size.height = v19;
    if (CGRectGetHeight(v25) < 0.0)
      return *MEMORY[0x24BDBF070];
  }
  return v11;
}

double EdgeInsets.originOffset.getter(double a1, double a2)
{
  return a2;
}

double EdgeInsets.negatedInsets.getter(double a1)
{
  return -a1;
}

uint64_t EdgeInsets.subscript.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(void))((char *)sub_234F1AD78 + 4 * byte_2352B1710[a1]))();
}

double sub_234F1AD84(double a1, double a2, double a3)
{
  return a3;
}

double sub_234F1AD8C(double a1, double a2, double a3, double a4)
{
  return a4;
}

BOOL static EdgeInsets.== infix(_:_:)(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  _BOOL4 v8;

  v8 = a1 == a5;
  if (a2 != a6)
    v8 = 0;
  if (a3 != a7)
    v8 = 0;
  return a4 == a8 && v8;
}

double static EdgeInsets.zero.getter()
{
  return 0.0;
}

double CGRect.outset(by:)(double a1, double a2, double a3, double a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  double v11;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  CGRect v22;
  CGRect v23;
  CGRect v24;
  CGRect v25;
  CGRect v26;

  v11 = a5;
  v22.origin.x = a5;
  v22.origin.y = a6;
  v22.size.width = a7;
  v22.size.height = a8;
  if (!CGRectIsNull(v22))
  {
    v16 = -a3;
    v23.origin.x = v11;
    v23.origin.y = a6;
    v23.size.width = a7;
    v23.size.height = a8;
    v24 = CGRectStandardize(v23);
    if (a2 == a4)
      v17 = a4;
    else
      v17 = a2;
    v11 = v24.origin.x - v17;
    v18 = v24.origin.y - a1;
    v19 = v24.size.width - (-a4 - a2);
    v20 = v24.size.height - (v16 - a1);
    v25.origin.x = v24.origin.x - v17;
    v25.origin.y = v24.origin.y - a1;
    v25.size.width = v19;
    v25.size.height = v20;
    if (CGRectGetWidth(v25) < 0.0)
      return *MEMORY[0x24BDBF070];
    v26.origin.x = v11;
    v26.origin.y = v18;
    v26.size.width = v19;
    v26.size.height = v20;
    if (CGRectGetHeight(v26) < 0.0)
      return *MEMORY[0x24BDBF070];
  }
  return v11;
}

double EdgeInsets.init()()
{
  return 0.0;
}

double EdgeInsets.horizontal.getter(double a1, double a2, double a3, double a4)
{
  return a2 + a4;
}

double EdgeInsets.vertical.getter(double a1, double a2, double a3)
{
  return a1 + a3;
}

double CGSize.inset(by:)(double a1, double a2, double a3, double a4, double a5)
{
  double v5;

  v5 = a5 - (a2 + a4);
  if (v5 < 0.0)
    return 0.0;
  else
    return v5;
}

double EdgeInsets.in(_:)(double a1)
{
  if (!Edge.Set.contains(_:)(SwiftUI_Edge_top))
    a1 = 0.0;
  Edge.Set.contains(_:)(SwiftUI_Edge_leading);
  Edge.Set.contains(_:)(SwiftUI_Edge_bottom);
  Edge.Set.contains(_:)(SwiftUI_Edge_trailing);
  return a1;
}

float64x2_t EdgeInsets.formPointwiseMin(_:)(float64x2_t a1, float64_t a2, float64x2_t a3, float64_t a4)
{
  float64x2_t *v4;
  float64x2_t result;
  int8x16_t v6;

  a1.f64[1] = a2;
  result = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(*v4, a1), (int8x16_t)a1, *(int8x16_t *)v4);
  a3.f64[1] = a4;
  v6 = vbslq_s8((int8x16_t)vcgtq_f64(v4[1], a3), (int8x16_t)a3, (int8x16_t)v4[1]);
  *v4 = result;
  v4[1] = (float64x2_t)v6;
  return result;
}

double EdgeInsets.subtracting(_:)(double a1, double a2, double a3, double a4, double a5)
{
  return a5 - a1;
}

BOOL EdgeInsets.isEmpty.getter(double a1, double a2, double a3, double a4)
{
  _BOOL4 v4;

  v4 = a1 == 0.0;
  if (a2 != 0.0)
    v4 = 0;
  if (a3 != 0.0)
    v4 = 0;
  return a4 == 0.0 && v4;
}

double EdgeInsets.init(_:edges:)(double a1)
{
  double v2;

  if (Edge.Set.contains(_:)(SwiftUI_Edge_top))
    v2 = a1;
  else
    v2 = 0.0;
  Edge.Set.contains(_:)(SwiftUI_Edge_leading);
  Edge.Set.contains(_:)(SwiftUI_Edge_bottom);
  Edge.Set.contains(_:)(SwiftUI_Edge_trailing);
  return v2;
}

double EdgeInsets.adding(_:)(double a1, double a2, double a3, double a4, double a5)
{
  return a1 + a5;
}

void EdgeInsets.top.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*EdgeInsets.top.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double EdgeInsets.leading.getter(double a1, double a2)
{
  return a2;
}

void EdgeInsets.leading.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

uint64_t (*EdgeInsets.leading.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double EdgeInsets.bottom.getter(double a1, double a2, double a3)
{
  return a3;
}

void EdgeInsets.bottom.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
}

uint64_t (*EdgeInsets.bottom.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double EdgeInsets.trailing.getter(double a1, double a2, double a3, double a4)
{
  return a4;
}

void EdgeInsets.trailing.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 24) = a1;
}

uint64_t (*EdgeInsets.trailing.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void static OptionalEdgeInsets.none.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 1;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 1;
}

void OptionalEdgeInsets.init()(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 1;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 1;
}

BOOL static OptionalEdgeInsets.zero.getter@<W0>(uint64_t a1@<X8>)
{
  Swift::Bool v2;
  Swift::Bool v3;
  Swift::Bool v4;
  _BOOL8 result;

  v2 = Edge.Set.contains(_:)(SwiftUI_Edge_top);
  v3 = Edge.Set.contains(_:)(SwiftUI_Edge_leading);
  v4 = Edge.Set.contains(_:)(SwiftUI_Edge_bottom);
  result = Edge.Set.contains(_:)(SwiftUI_Edge_trailing);
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = !v2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = !v3;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = !v4;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = !result;
  return result;
}

BOOL OptionalEdgeInsets.init(_:edges:)@<W0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  char v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  char v14;
  _BOOL8 result;
  uint64_t v16;

  v6 = Edge.Set.contains(_:)(SwiftUI_Edge_top);
  if ((v6 & 1) != 0)
    v7 = a1;
  else
    v7 = 0;
  v8 = a2 | ~v6;
  v9 = Edge.Set.contains(_:)(SwiftUI_Edge_leading);
  if ((v9 & 1) != 0)
    v10 = a1;
  else
    v10 = 0;
  v11 = a2 | ~v9;
  v12 = Edge.Set.contains(_:)(SwiftUI_Edge_bottom);
  if ((v12 & 1) != 0)
    v13 = a1;
  else
    v13 = 0;
  v14 = a2 | ~v12;
  result = Edge.Set.contains(_:)(SwiftUI_Edge_trailing);
  *(_QWORD *)a3 = v7;
  *(_BYTE *)(a3 + 8) = v8 & 1;
  if (result)
    v16 = a1;
  else
    v16 = 0;
  *(_QWORD *)(a3 + 16) = v10;
  *(_BYTE *)(a3 + 24) = v11 & 1;
  *(_QWORD *)(a3 + 32) = v13;
  *(_BYTE *)(a3 + 40) = v14 & 1;
  *(_QWORD *)(a3 + 48) = v16;
  *(_BYTE *)(a3 + 56) = a2 & 1 | !result;
  return result;
}

uint64_t OptionalEdgeInsets.top.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t OptionalEdgeInsets.top.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)v2 = result;
  *(_BYTE *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*OptionalEdgeInsets.top.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t OptionalEdgeInsets.leading.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t OptionalEdgeInsets.leading.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = result;
  *(_BYTE *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*OptionalEdgeInsets.leading.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t OptionalEdgeInsets.bottom.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t OptionalEdgeInsets.bottom.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = result;
  *(_BYTE *)(v2 + 40) = a2 & 1;
  return result;
}

uint64_t (*OptionalEdgeInsets.bottom.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t OptionalEdgeInsets.trailing.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t OptionalEdgeInsets.trailing.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 48) = result;
  *(_BYTE *)(v2 + 56) = a2 & 1;
  return result;
}

uint64_t (*OptionalEdgeInsets.trailing.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t OptionalEdgeInsets.init(top:leading:bottom:trailing:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>)
{
  *(_QWORD *)a9 = result;
  *(_BYTE *)(a9 + 8) = a2 & 1;
  *(_QWORD *)(a9 + 16) = a3;
  *(_BYTE *)(a9 + 24) = a4 & 1;
  *(_QWORD *)(a9 + 32) = a5;
  *(_BYTE *)(a9 + 40) = a6 & 1;
  *(_QWORD *)(a9 + 48) = a7;
  *(_BYTE *)(a9 + 56) = a8 & 1;
  return result;
}

BOOL OptionalEdgeInsets.init(_:edges:)@<W0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  Swift::Bool v10;
  double v11;
  Swift::Bool v12;
  double v13;
  Swift::Bool v14;
  double v15;
  _BOOL8 result;
  double v17;

  v10 = Edge.Set.contains(_:)(SwiftUI_Edge_top);
  if (v10)
    v11 = a2;
  else
    v11 = 0.0;
  v12 = Edge.Set.contains(_:)(SwiftUI_Edge_leading);
  if (v12)
    v13 = a3;
  else
    v13 = 0.0;
  v14 = Edge.Set.contains(_:)(SwiftUI_Edge_bottom);
  if (v14)
    v15 = a4;
  else
    v15 = 0.0;
  result = Edge.Set.contains(_:)(SwiftUI_Edge_trailing);
  *(double *)a1 = v11;
  v17 = a5;
  *(_BYTE *)(a1 + 8) = !v10;
  if (!result)
    v17 = 0.0;
  *(double *)(a1 + 16) = v13;
  *(_BYTE *)(a1 + 24) = !v12;
  *(double *)(a1 + 32) = v15;
  *(_BYTE *)(a1 + 40) = !v14;
  *(double *)(a1 + 48) = v17;
  *(_BYTE *)(a1 + 56) = !result;
  return result;
}

void OptionalEdgeInsets.subscript.getter(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_234F1B530()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

void OptionalEdgeInsets.subscript.setter(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }
}

uint64_t sub_234F1B580(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)v2 = result;
  *(_BYTE *)(v2 + 8) = a2 & 1;
  return result;
}

void OptionalEdgeInsets.subscript.modify(uint64_t a1, char a2)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 16) = v2;
  *(_BYTE *)(a1 + 9) = a2;
  __asm { BR              X12 }
}

uint64_t (*sub_234F1B5E8@<X0>(uint64_t a1@<X8>))(uint64_t a1, char a2)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 16);
  *(_BYTE *)(a1 + 8) = v2;
  return OptionalEdgeInsets.subscript.modify;
}

uint64_t OptionalEdgeInsets.subscript.modify(uint64_t a1, char a2)
{
  uint64_t v2;

  v2 = *(unsigned __int8 *)(a1 + 9);
  if ((a2 & 1) != 0)
    return ((uint64_t (*)(void))((char *)sub_234F1B66C + 4 * byte_2352B1724[v2]))();
  else
    return ((uint64_t (*)(void))((char *)sub_234F1B66C + 4 * byte_2352B1720[v2]))();
}

uint64_t sub_234F1B66C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2;
  uint64_t v3;

  v3 = *(_QWORD *)(result + 16);
  *(_QWORD *)v3 = a2;
  *(_BYTE *)(v3 + 8) = v2;
  return result;
}

uint64_t OptionalEdgeInsets.adding(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  double v4;
  int v5;
  double v6;
  int v7;
  double v8;
  char v9;
  double v10;
  char v11;
  double v12;
  double v13;
  uint64_t result;
  char v15;
  double v16;
  double v17;
  double v18;
  char v19;
  double v20;
  double v21;
  double v22;
  char v23;
  double v24;

  v3 = *(unsigned __int8 *)(a1 + 24);
  v4 = *(double *)(a1 + 32);
  v5 = *(unsigned __int8 *)(a1 + 40);
  v6 = *(double *)(a1 + 48);
  v7 = *(unsigned __int8 *)(a1 + 56);
  v8 = *(double *)v2;
  v9 = *(_BYTE *)(v2 + 8);
  v10 = *(double *)(v2 + 48);
  v11 = *(_BYTE *)(v2 + 56);
  if ((*(_BYTE *)(a1 + 8) & 1) == 0)
  {
    if (*(_BYTE *)(v2 + 8))
      v8 = -0.0;
    v8 = *(double *)a1 + v8;
    v9 = 0;
  }
  v12 = *(double *)(v2 + 16);
  if (*(_BYTE *)(v2 + 24))
    v12 = -0.0;
  v13 = *(double *)(a1 + 16) + v12;
  *(double *)&result = v13;
  v15 = v3 & *(_BYTE *)(v2 + 24);
  if (v3)
    v16 = *(double *)(v2 + 16);
  else
    v16 = v13;
  v17 = *(double *)(v2 + 32);
  if (*(_BYTE *)(v2 + 40))
    v17 = -0.0;
  v18 = v4 + v17;
  v19 = v5 & *(_BYTE *)(v2 + 40);
  if (v5)
    v20 = *(double *)(v2 + 32);
  else
    v20 = v18;
  v21 = *(double *)(v2 + 48);
  if (*(_BYTE *)(v2 + 56))
    v21 = -0.0;
  *(double *)a2 = v8;
  *(_BYTE *)(a2 + 8) = v9;
  v22 = v6 + v21;
  v23 = v7 & v11;
  *(double *)(a2 + 16) = v16;
  *(_BYTE *)(a2 + 24) = v15;
  *(double *)(a2 + 32) = v20;
  *(_BYTE *)(a2 + 40) = v19;
  if (v7)
    v24 = v10;
  else
    v24 = v22;
  *(double *)(a2 + 48) = v24;
  *(_BYTE *)(a2 + 56) = v23;
  return result;
}

BOOL OptionalEdgeInsets.in(axes:)@<W0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  _BOOL8 result;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v3 = *v1;
  v4 = *((_BYTE *)v1 + 8);
  v5 = v1[2];
  v6 = *((_BYTE *)v1 + 24);
  v7 = v1[4];
  v8 = *((_BYTE *)v1 + 40);
  v9 = v1[6];
  v10 = *((_BYTE *)v1 + 56);
  if (!Axis.Set.contains(_:)(SwiftUI_Axis_vertical))
  {
    v8 = 1;
    v4 = 1;
    v7 = 0;
    v3 = 0;
  }
  result = Axis.Set.contains(_:)(SwiftUI_Axis_horizontal);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  if (result)
    v12 = v10;
  else
    v12 = 1;
  if (result)
    v13 = v5;
  else
    v13 = 0;
  *(_QWORD *)(a1 + 16) = v13;
  if (result)
    v14 = v6;
  else
    v14 = 1;
  if (result)
    v15 = v9;
  else
    v15 = 0;
  *(_BYTE *)(a1 + 24) = v14;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v15;
  *(_BYTE *)(a1 + 56) = v12;
  return result;
}

uint64_t OptionalEdgeInsets.in(edges:)@<X0>(unsigned __int8 a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  int v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t result;

  v3 = a1;
  v4 = v2[2];
  v5 = *((_BYTE *)v2 + 24);
  v6 = v2[4];
  v7 = *((_BYTE *)v2 + 40);
  v8 = v2[6];
  v9 = *((_BYTE *)v2 + 56);
  v10 = 0;
  if ((a1 & 1) != 0)
  {
    result = *((unsigned __int8 *)v2 + 8);
    v10 = *v2;
  }
  else
  {
    result = 1;
  }
  if ((~v3 & 2) != 0)
  {
    v4 = 0;
    v5 = 1;
  }
  if ((~v3 & 4) != 0)
  {
    v6 = 0;
    v7 = 1;
  }
  if ((~v3 & 8) != 0)
  {
    v8 = 0;
    v9 = 1;
  }
  *(_QWORD *)a2 = v10;
  *(_BYTE *)(a2 + 8) = result;
  *(_QWORD *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 24) = v5;
  *(_QWORD *)(a2 + 32) = v6;
  *(_BYTE *)(a2 + 40) = v7;
  *(_QWORD *)(a2 + 48) = v8;
  *(_BYTE *)(a2 + 56) = v9;
  return result;
}

double OptionalEdgeInsets.in(axes:)()
{
  uint64_t v0;
  double v1;
  int v2;
  Swift::Bool v3;
  double v4;
  double v5;

  v1 = *(double *)v0;
  v2 = *(unsigned __int8 *)(v0 + 8);
  v3 = Axis.Set.contains(_:)(SwiftUI_Axis_vertical);
  if (v2)
    v4 = 0.0;
  else
    v4 = v1;
  if (v3)
    v5 = v4;
  else
    v5 = 0.0;
  Axis.Set.contains(_:)(SwiftUI_Axis_horizontal);
  return v5;
}

uint64_t OptionalEdgeInsets.in(edges:)(unsigned __int8 a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5)
{
  int v5;
  uint64_t result;

  v5 = a1;
  a5.n128_u64[0] = 0;
  a4.n128_u64[0] = 0;
  a3.n128_u64[0] = 0;
  a2.n128_u64[0] = 0;
  if ((a1 & 1) != 0)
    return ((uint64_t (*)(__n128, __n128, __n128, __n128))((char *)&loc_234F1BC10 + 4 * unk_2352B1738))(a2, a3, a4, a5);
  if ((~a1 & 2) == 0)
    return ((uint64_t (*)(__n128, __n128, __n128, __n128))((char *)&loc_234F1BCB8 + 4 * unk_2352B173D))(a2, a3, a4, a5);
  if ((~a1 & 4) == 0)
    return ((uint64_t (*)(__n128, __n128, __n128, __n128))((char *)&loc_234F1BD48 + 4 * unk_2352B1742))(a2, a3, a4, a5);
  result = 8;
  if ((~v5 & 8) == 0)
    return ((uint64_t (*)(__n128, __n128, __n128, __n128))((char *)&loc_234F1BDD8 + 4 * unk_2352B1747))(a2, a3, a4, a5);
  return result;
}

void EdgeInsets.subscript.setter(char a1)
{
  __asm { BR              X10 }
}

void sub_234F1BE48(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

void OptionalEdgeInsets.hash(into:)()
{
  uint64_t v0;
  Swift::UInt64 v1;
  int v2;
  Swift::UInt64 v3;
  int v4;
  Swift::UInt64 v5;
  int v6;
  Swift::UInt64 v7;
  Swift::UInt64 v8;
  Swift::UInt64 v9;
  Swift::UInt64 v10;
  Swift::UInt64 v11;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(unsigned __int8 *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(unsigned __int8 *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 48);
  v6 = *(unsigned __int8 *)(v0 + 56);
  if (*(_BYTE *)(v0 + 8) == 1)
  {
    Hasher._combine(_:)(0);
    if (!v2)
      goto LABEL_3;
LABEL_19:
    Hasher._combine(_:)(0);
    if (!v4)
      goto LABEL_7;
    goto LABEL_20;
  }
  v10 = *(_QWORD *)v0;
  Hasher._combine(_:)(1u);
  if ((v10 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v11 = v10;
  else
    v11 = 0;
  Hasher._combine(_:)(v11);
  if (v2)
    goto LABEL_19;
LABEL_3:
  Hasher._combine(_:)(1u);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v7 = v1;
  else
    v7 = 0;
  Hasher._combine(_:)(v7);
  if (!v4)
  {
LABEL_7:
    Hasher._combine(_:)(1u);
    if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v8 = v3;
    else
      v8 = 0;
    Hasher._combine(_:)(v8);
    if (!v6)
      goto LABEL_11;
LABEL_21:
    Hasher._combine(_:)(0);
    return;
  }
LABEL_20:
  Hasher._combine(_:)(0);
  if (v6)
    goto LABEL_21;
LABEL_11:
  Hasher._combine(_:)(1u);
  if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v9 = v5;
  else
    v9 = 0;
  Hasher._combine(_:)(v9);
}

Swift::Int OptionalEdgeInsets.hashValue.getter()
{
  Hasher.init(_seed:)();
  OptionalEdgeInsets.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance OptionalEdgeInsets()
{
  Hasher.init(_seed:)();
  OptionalEdgeInsets.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance OptionalEdgeInsets()
{
  Hasher.init(_seed:)();
  OptionalEdgeInsets.hash(into:)();
  return Hasher._finalize()();
}

double EdgeInsets.init(horizontal:vertical:)(double a1, double a2)
{
  return a2;
}

uint64_t EdgeInsets.subscript.modify(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = a2;
  return ((uint64_t (*)(void))((char *)sub_234F1C0D8 + 4 * byte_2352B174C[a2]))();
}

uint64_t (*sub_234F1C0D8@<X0>(_QWORD *a1@<X8>))(uint64_t a1, char a2)
{
  _QWORD *v1;

  *a1 = *v1;
  return EdgeInsets.subscript.modify;
}

uint64_t EdgeInsets.subscript.modify(uint64_t a1, char a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)a1;
  v3 = *(unsigned __int8 *)(a1 + 16);
  if ((a2 & 1) != 0)
    return ((uint64_t (*)(double))((char *)sub_234F1C140 + 4 * byte_2352B1754[v3]))(v2);
  else
    return ((uint64_t (*)(double))((char *)sub_234F1C140 + 4 * byte_2352B1750[v3]))(v2);
}

uint64_t sub_234F1C140(uint64_t result, double a2)
{
  **(double **)(result + 8) = a2;
  return result;
}

uint64_t sub_234F1C14C(uint64_t result, double a2)
{
  *(double *)(*(_QWORD *)(result + 8) + 16) = a2;
  return result;
}

uint64_t sub_234F1C158(uint64_t result, double a2)
{
  *(double *)(*(_QWORD *)(result + 8) + 24) = a2;
  return result;
}

uint64_t sub_234F1C164(uint64_t result, double a2)
{
  *(double *)(*(_QWORD *)(result + 8) + 8) = a2;
  return result;
}

double EdgeInsets.scaled(by:)(double a1, double a2)
{
  return a1 * a2;
}

double EdgeInsets.merge(_:)(_BYTE *a1)
{
  double result;

  if (!a1[8])
    return *(double *)a1;
  return result;
}

float64x2_t EdgeInsets.formPointwiseMax(_:)(float64x2_t a1, float64_t a2, float64x2_t a3, float64_t a4)
{
  float64x2_t *v4;
  float64x2_t result;
  int8x16_t v6;

  a1.f64[1] = a2;
  result = (float64x2_t)vbslq_s8((int8x16_t)vcgeq_f64(a1, *v4), (int8x16_t)a1, *(int8x16_t *)v4);
  a3.f64[1] = a4;
  v6 = vbslq_s8((int8x16_t)vcgeq_f64(a3, v4[1]), (int8x16_t)a3, (int8x16_t)v4[1]);
  *v4 = result;
  v4[1] = (float64x2_t)v6;
  return result;
}

_QWORD *EdgeInsets.xFlipIfRightToLeft(layoutDirection:)(_QWORD *result)
{
  uint64_t v1;
  double v2;
  double v3;
  uint64_t v4;

  v2 = *(double *)(v1 + 8);
  v3 = *(double *)(v1 + 24);
  if (v2 != v3)
  {
    result = ((_QWORD *(*)(uint64_t *__return_ptr))result)(&v4);
    if (v4 == 1)
    {
      *(double *)(v1 + 8) = v3;
      *(double *)(v1 + 24) = v2;
    }
  }
  return result;
}

void EdgeInsets.hash(into:)(double a1, double a2, double a3, double a4)
{
  Swift::UInt64 v7;
  Swift::UInt64 v8;
  Swift::UInt64 v9;
  Swift::UInt64 v10;

  if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v7 = *(_QWORD *)&a1;
  else
    v7 = 0;
  Hasher._combine(_:)(v7);
  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v8 = *(_QWORD *)&a2;
  else
    v8 = 0;
  Hasher._combine(_:)(v8);
  if ((*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v9 = *(_QWORD *)&a3;
  else
    v9 = 0;
  Hasher._combine(_:)(v9);
  if ((*(_QWORD *)&a4 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v10 = *(_QWORD *)&a4;
  else
    v10 = 0;
  Hasher._combine(_:)(v10);
}

double specialized CGRect.inset(by:layoutDirection:)(double a1, double a2, double a3, double a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  double v11;
  double v16;
  double v17;
  double v18;
  double v19;
  CGRect v21;
  CGRect v22;
  CGRect v23;
  CGRect v24;
  CGRect v25;

  v11 = a5;
  v21.origin.x = a5;
  v21.origin.y = a6;
  v21.size.width = a7;
  v21.size.height = a8;
  if (!CGRectIsNull(v21))
  {
    v22.origin.x = v11;
    v22.origin.y = a6;
    v22.size.width = a7;
    v22.size.height = a8;
    v23 = CGRectStandardize(v22);
    if (a2 == a4)
      v16 = a4;
    else
      v16 = a2;
    v11 = v16 + v23.origin.x;
    v17 = v23.origin.y + a1;
    v18 = v23.size.width - (a2 + a4);
    v19 = v23.size.height - (a1 + a3);
    v24.origin.x = v16 + v23.origin.x;
    v24.origin.y = v23.origin.y + a1;
    v24.size.width = v18;
    v24.size.height = v19;
    if (CGRectGetWidth(v24) < 0.0)
      return *MEMORY[0x24BDBF070];
    v25.origin.x = v11;
    v25.origin.y = v17;
    v25.size.width = v18;
    v25.size.height = v19;
    if (CGRectGetHeight(v25) < 0.0)
      return *MEMORY[0x24BDBF070];
  }
  return v11;
}

double CGRect.inset(by:layoutDirection:)(void (*a1)(uint64_t *__return_ptr, double), double a2, double a3, double a4, double a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  double v12;
  double x;
  double y;
  double width;
  double height;
  double v22;
  double v23;
  double v24;
  double v26;
  uint64_t v27;
  CGRect v28;
  CGRect v29;
  CGRect v30;
  CGRect v31;
  CGRect v32;

  v12 = a6;
  v28.origin.x = a6;
  v28.origin.y = a7;
  v28.size.width = a8;
  v28.size.height = a9;
  if (!CGRectIsNull(v28))
  {
    v26 = a4;
    v29.origin.x = v12;
    v29.origin.y = a7;
    v29.size.width = a8;
    v29.size.height = a9;
    v30 = CGRectStandardize(v29);
    x = v30.origin.x;
    y = v30.origin.y;
    width = v30.size.width;
    height = v30.size.height;
    v22 = a5;
    if (a3 != a5)
    {
      a1(&v27, a5);
      if ((_BYTE)v27)
        v22 = a5;
      else
        v22 = a3;
    }
    v12 = x + v22;
    v23 = width - (a3 + a5);
    v24 = height - (a2 + v26);
    v31.origin.x = x + v22;
    v31.origin.y = y + a2;
    v31.size.width = v23;
    v31.size.height = v24;
    if (CGRectGetWidth(v31) < 0.0)
      return *MEMORY[0x24BDBF070];
    v32.origin.x = v12;
    v32.origin.y = y + a2;
    v32.size.width = v23;
    v32.size.height = v24;
    if (CGRectGetHeight(v32) < 0.0)
      return *MEMORY[0x24BDBF070];
  }
  return v12;
}

double CGRect.outset(by:layoutDirection:)(void (*a1)(uint64_t *__return_ptr, double), double a2, double a3, double a4, double a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  double v12;
  double x;
  double y;
  double width;
  double v21;
  CGFloat height;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v28;
  CGRect v29;
  CGRect v30;
  CGRect v31;
  CGRect v32;
  CGRect v33;

  v12 = a6;
  v29.origin.x = a6;
  v29.origin.y = a7;
  v29.size.width = a8;
  v29.size.height = a9;
  if (!CGRectIsNull(v29))
  {
    v30.origin.x = v12;
    v30.origin.y = a7;
    v30.size.width = a8;
    v30.size.height = a9;
    v31 = CGRectStandardize(v30);
    x = v31.origin.x;
    y = v31.origin.y;
    width = v31.size.width;
    v21 = -a5;
    if (a3 != a5)
    {
      height = v31.size.height;
      a1(&v28, v21);
      v31.size.height = height;
      if ((_BYTE)v28)
        v23 = a5;
      else
        v23 = a3;
      v21 = -v23;
    }
    v12 = x + v21;
    v24 = y - a2;
    v25 = width - (-a5 - a3);
    v26 = v31.size.height - (-a4 - a2);
    v32.origin.x = v12;
    v32.origin.y = v24;
    v32.size.width = v25;
    v32.size.height = v26;
    if (CGRectGetWidth(v32) < 0.0)
      return *MEMORY[0x24BDBF070];
    v33.origin.x = v12;
    v33.origin.y = v24;
    v33.size.width = v25;
    v33.size.height = v26;
    if (CGRectGetHeight(v33) < 0.0)
      return *MEMORY[0x24BDBF070];
  }
  return v12;
}

double CGSize.outset(by:)(double a1, double a2, double a3, double a4, double a5)
{
  double v5;

  v5 = a5 - (-a4 - a2);
  if (v5 < 0.0)
    return 0.0;
  else
    return v5;
}

double CGPoint.offset(by:)(double a1, double a2, double a3, double a4, double a5)
{
  return a2 + a5;
}

void EdgeInsets.animatableData.setter(double a1, double a2, double a3, double a4)
{
  double *v4;

  *v4 = a1;
  v4[1] = a2;
  v4[2] = a3;
  v4[3] = a4;
}

uint64_t (*EdgeInsets.animatableData.modify(_QWORD *a1))()
{
  _OWORD *v1;
  _QWORD *v3;
  __int128 v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = v1[1];
  *(_OWORD *)v3 = *v1;
  *((_OWORD *)v3 + 1) = v4;
  return UnevenRoundedRectangle.animatableData.modify;
}

double *EdgeInsets.encode(to:)(_QWORD *a1, double a2, double a3, double a4, double a5)
{
  double v6[5];

  v6[4] = *(double *)MEMORY[0x24BDAC8D0];
  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  v6[3] = a5;
  return closure #1 in EdgeInsets.encode(to:)(v6, a1);
}

double *closure #1 in EdgeInsets.encode(to:)(double *result, _QWORD *a2)
{
  double *v3;
  uint64_t v4;
  float v5;
  double v6;
  double v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  char v15;
  double v16;

  v3 = result;
  v4 = 0;
  while (1)
  {
    v6 = v3[v4];
    if (v6 == 0.0)
      goto LABEL_4;
    v7 = fabs(v6);
    v8 = v4 * 8 + 5;
    if (v7 >= 65536.0)
      v8 = v4 * 8 + 1;
    v9 = v8 + 8;
    v10 = a2[1];
    v11 = a2[2];
    if (v10 >= v11)
    {
      result = (double *)(v10 + 1);
      if (__OFADD__(v10, 1))
        goto LABEL_26;
      if (v11 < (uint64_t)result)
      {
        v16 = v7;
        v15 = v9;
        v14 = (_BYTE *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
        v9 = v15;
        v7 = v16;
      }
      else
      {
        a2[1] = result;
        v14 = (_BYTE *)(*a2 + v10);
      }
      *v14 = v9 & 0x7D;
    }
    else
    {
      *(_BYTE *)(*a2 + v10) = v9;
      a2[1] = v10 + 1;
    }
    if (v7 < 65536.0)
      break;
    v13 = a2[1];
    result = (double *)(v13 + 8);
    if (__OFADD__(v13, 8))
      goto LABEL_25;
    if (a2[2] < (uint64_t)result)
    {
      result = (double *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
      *result = v6;
    }
    else
    {
      a2[1] = result;
      *(double *)(*a2 + v13) = v6;
    }
LABEL_4:
    if (++v4 == 4)
      return result;
  }
  v12 = a2[1];
  result = (double *)(v12 + 4);
  if (!__OFADD__(v12, 4))
  {
    if (a2[2] >= (uint64_t)result)
    {
      a2[1] = result;
      result = (double *)(*a2 + v12);
    }
    else
    {
      result = (double *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    }
    v5 = v6;
    *(float *)result = v5;
    goto LABEL_4;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

double EdgeInsets.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  double result;
  uint64_t v3;
  _OWORD v4[2];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  memset(v4, 0, sizeof(v4));
  closure #1 in EdgeInsets.init(from:)((unint64_t)v4, a1, &v3);
  if (!v1)
    return *(double *)v4;
  return result;
}

unint64_t closure #1 in EdgeInsets.init(from:)(unint64_t result, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  double *v14;
  unint64_t v15;
  float *v16;
  float v17;
  double v18;

  v4 = v3;
  v6 = a2[1];
  if (v6 >= a2[2])
  {
LABEL_38:
    a2[3] = 0;
    return result;
  }
  v8 = result;
  while (1)
  {
    v10 = a2[3];
    if (v10)
    {
      v11 = a2[4];
      if (v6 < v11)
        goto LABEL_12;
      if (v11 < v6)
        break;
      a2[3] = 0;
    }
    result = ProtobufDecoder.decodeVarint()();
    if (v3)
      goto LABEL_37;
    v10 = result;
    if (result <= 7)
      break;
LABEL_12:
    if (v10 <= 0x27)
    {
      v12 = (v10 >> 3) - 1;
      if (!(v10 >> 3))
      {
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        JUMPOUT(0x234F1CB7CLL);
      }
      if (v12 < 0)
        goto LABEL_40;
      v13 = v10 & 7;
      if (v13 == 5)
      {
        v16 = (float *)a2[1];
        if (a2[2] < (unint64_t)(v16 + 1))
          break;
        v17 = *v16;
        a2[1] = v16 + 1;
        v18 = v17;
      }
      else
      {
        if (v13 == 2)
        {
          result = ProtobufDecoder.decodeVarint()();
          if (v3)
            goto LABEL_37;
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_41;
          v14 = (double *)a2[1];
          v15 = a2[2];
          if (v15 < (unint64_t)v14 + result)
            break;
          a2[3] = v10 & 0xFFFFFFFFFFFFFFF8 | 1;
          a2[4] = (char *)v14 + result;
        }
        else
        {
          if (v13 != 1)
            break;
          v14 = (double *)a2[1];
          v15 = a2[2];
        }
        if (v15 < (unint64_t)(v14 + 1))
          break;
        v18 = *v14;
        a2[1] = v14 + 1;
      }
      *(double *)(v8 + 8 * v12) = v18;
    }
    else
    {
      switch(v10 & 7)
      {
        case 0uLL:
          result = ProtobufDecoder.decodeVarint()();
          if (v3)
            goto LABEL_37;
          break;
        case 1uLL:
          v9 = a2[1] + 8;
          if (a2[2] >= v9)
            goto LABEL_4;
          goto LABEL_36;
        case 2uLL:
          result = ProtobufDecoder.decodeVarint()();
          if (v3)
            goto LABEL_37;
          if ((result & 0x8000000000000000) != 0)
            goto LABEL_42;
          v9 = a2[1] + result;
          if (a2[2] < v9)
            goto LABEL_36;
LABEL_4:
          a2[1] = v9;
          break;
        case 5uLL:
          v9 = a2[1] + 4;
          if (a2[2] < v9)
            goto LABEL_36;
          goto LABEL_4;
        default:
          goto LABEL_36;
      }
    }
    v6 = a2[1];
    if (v6 >= a2[2])
      goto LABEL_38;
  }
LABEL_36:
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  v4 = swift_allocError();
  result = swift_willThrow();
LABEL_37:
  *a3 = v4;
  return result;
}

double *protocol witness for ProtobufEncodableMessage.encode(to:) in conformance EdgeInsets(_QWORD *a1)
{
  _OWORD *v1;
  __int128 v2;
  _OWORD v4[2];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v2 = v1[1];
  v4[0] = *v1;
  v4[1] = v2;
  return closure #1 in EdgeInsets.encode(to:)((double *)v4, a1);
}

double protocol witness for ProtobufDecodableMessage.init(from:) in conformance EdgeInsets@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v7 = 0u;
  v8 = 0u;
  closure #1 in EdgeInsets.init(from:)((unint64_t)&v7, a1, &v6);
  if (!v2)
  {
    result = *(double *)&v7;
    v5 = v8;
    *a2 = v7;
    a2[1] = v5;
  }
  return result;
}

BOOL specialized static OptionalEdgeInsets.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  char v4;
  char v6;

  v2 = *(_BYTE *)(a2 + 8);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 8))
      return 0;
  }
  else
  {
    if (*(double *)a1 != *(double *)a2)
      v2 = 1;
    if ((v2 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 24))
      return 0;
  }
  else
  {
    if (*(double *)(a1 + 16) == *(double *)(a2 + 16))
      v3 = *(_BYTE *)(a2 + 24);
    else
      v3 = 1;
    if ((v3 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 40))
      return 0;
  }
  else
  {
    if (*(double *)(a1 + 32) == *(double *)(a2 + 32))
      v4 = *(_BYTE *)(a2 + 40);
    else
      v4 = 1;
    if ((v4 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 56) & 1) == 0)
  {
    if (*(double *)(a1 + 48) == *(double *)(a2 + 48))
      v6 = *(_BYTE *)(a2 + 56);
    else
      v6 = 1;
    return (v6 & 1) == 0;
  }
  return (*(_BYTE *)(a2 + 56) & 1) != 0;
}

unint64_t lazy protocol witness table accessor for type OptionalEdgeInsets and conformance OptionalEdgeInsets()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OptionalEdgeInsets and conformance OptionalEdgeInsets;
  if (!lazy protocol witness table cache variable for type OptionalEdgeInsets and conformance OptionalEdgeInsets)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for OptionalEdgeInsets, &type metadata for OptionalEdgeInsets);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OptionalEdgeInsets and conformance OptionalEdgeInsets);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for EdgeInsets(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type EdgeInsets and conformance EdgeInsets();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_234F1CD80(uint64_t a1, unsigned __int8 *a2)
{
  return ((uint64_t (*)(void))((char *)sub_234F1CDA0 + 4 * byte_2352B1758[*a2]))();
}

_QWORD *sub_234F1CDA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE *v2;
  _QWORD *result;

  v2 = (_BYTE *)(a1 + 24);
  result = (_QWORD *)(a1 + 16);
  LOBYTE(v2) = *v2;
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = (_BYTE)v2;
  return result;
}

uint64_t sub_234F1CDD4(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  return ((uint64_t (*)(void))((char *)sub_234F1CDF8 + 4 * byte_2352B175C[*a3]))();
}

void sub_234F1CDF8(uint64_t a1@<X1>, char a2@<W8>)
{
  uint64_t v2;

  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = a2;
}

void sub_234F1CE04(uint64_t a1@<X1>, char a2@<W8>)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 32) = v2;
  *(_BYTE *)(a1 + 40) = a2;
}

void sub_234F1CE10(uint64_t a1@<X1>, char a2@<W8>)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 48) = v2;
  *(_BYTE *)(a1 + 56) = a2;
}

void sub_234F1CE1C(uint64_t a1@<X1>, char a2@<W8>)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 16) = v2;
  *(_BYTE *)(a1 + 24) = a2;
}

uint64_t sub_234F1CE28()
{
  return 0;
}

uint64_t sub_234F1CE38(uint64_t a1, unsigned __int8 *a2)
{
  return ((uint64_t (*)(void))((char *)sub_234F1CE58 + 4 * byte_2352B1760[*a2]))();
}

double sub_234F1CE58@<D0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

uint64_t sub_234F1CE78(double *a1, uint64_t a2, unsigned __int8 *a3)
{
  return ((uint64_t (*)(double))((char *)sub_234F1CE98 + 4 * byte_2352B1764[*a3]))(*a1);
}

void sub_234F1CE98(double a1, uint64_t a2, uint64_t a3)
{
  *(double *)(a3 + 8) = a1;
}

void sub_234F1CEA0(double a1, uint64_t a2, uint64_t a3)
{
  *(double *)(a3 + 16) = a1;
}

void sub_234F1CEAC(double a1, uint64_t a2, uint64_t a3)
{
  *(double *)(a3 + 24) = a1;
}

uint64_t sub_234F1CEB4()
{
  return 0;
}

__n128 sub_234F1CEC4@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

__n128 sub_234F1CED0(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

ValueMetadata *type metadata accessor for EdgeInsets()
{
  return &type metadata for EdgeInsets;
}

uint64_t getEnumTagSinglePayload for OptionalEdgeInsets(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 57))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for OptionalEdgeInsets(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 57) = v3;
  return result;
}

ValueMetadata *type metadata accessor for OptionalEdgeInsets()
{
  return &type metadata for OptionalEdgeInsets;
}

SwiftUI::Spacing __swiftcall Spacing.init(minima:)(SwiftUI::Spacing minima)
{
  SwiftUI::Spacing *v1;

  v1->minima._rawValue = minima.minima._rawValue;
  return minima;
}

unsigned __int8 *Spacing.incorporate(_:of:)(unsigned __int8 *result)
{
  uint64_t *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;

  v2 = *result;
  if (*result)
  {
    v3 = swift_bridgeObjectRetain();
    v4 = specialized Sequence.filter(_:)(v3, v2);
    v5 = specialized _arrayForceCast<A, B>(_:)(v4);
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v7 = *v1;
    *v1 = 0x8000000000000000;
    specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v5, isUniquelyReferenced_nonNull_native, &v7);
    swift_bridgeObjectRelease();
    *v1 = v7;
    return (unsigned __int8 *)swift_bridgeObjectRelease();
  }
  return result;
}

SwiftUI::Spacing __swiftcall Spacing.init()()
{
  unint64_t *v0;
  unint64_t *v1;
  uint64_t inited;
  __int128 v3;
  __int128 v4;
  unint64_t v5;
  SwiftUI::Spacing result;

  v1 = v0;
  type metadata accessor for _ContiguousArrayStorage<(Spacing.Key, Spacing.Value)>();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23528B7A0;
  if (one-time initialization token for edgeBelowText != -1)
    swift_once();
  *(_QWORD *)(inited + 32) = static Spacing.Category.edgeBelowText;
  *(_BYTE *)(inited + 40) = 0;
  v3 = 0uLL;
  *(_OWORD *)(inited + 48) = 0u;
  *(_OWORD *)(inited + 64) = 0u;
  *(_BYTE *)(inited + 80) = 0;
  if (one-time initialization token for edgeAboveText != -1)
  {
    swift_once();
    v3 = 0uLL;
  }
  *(_QWORD *)(inited + 88) = static Spacing.Category.edgeAboveText;
  *(_BYTE *)(inited + 96) = 2;
  *(_OWORD *)(inited + 104) = v3;
  *(_OWORD *)(inited + 120) = v3;
  *(_BYTE *)(inited + 136) = 0;
  if (one-time initialization token for edgeRightText != -1)
    swift_once();
  *(_QWORD *)(inited + 144) = static Spacing.Category.edgeRightText;
  *(_BYTE *)(inited + 152) = 1;
  v4 = 0uLL;
  *(_OWORD *)(inited + 160) = 0u;
  *(_OWORD *)(inited + 176) = 0u;
  *(_BYTE *)(inited + 192) = 0;
  if (one-time initialization token for edgeLeftText != -1)
  {
    swift_once();
    v4 = 0uLL;
  }
  *(_QWORD *)(inited + 200) = static Spacing.Category.edgeLeftText;
  *(_BYTE *)(inited + 208) = 3;
  *(_OWORD *)(inited + 216) = v4;
  *(_OWORD *)(inited + 232) = v4;
  *(_BYTE *)(inited + 248) = 0;
  v5 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  result.minima._rawValue = (void *)swift_setDeallocating();
  *v1 = v5;
  return result;
}

_QWORD *Spacing.Key.init(category:edge:)@<X0>(_QWORD *result@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  char v3;

  v3 = *a2;
  *(_QWORD *)a3 = *result;
  *(_BYTE *)(a3 + 8) = v3;
  return result;
}

void Spacing.Value.init(_:)(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 32) = 0;
}

uint64_t specialized Sequence.filter(_:)(uint64_t result, unsigned __int8 a2)
{
  uint64_t v2;
  int64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = result;
  v3 = 0;
  v4 = a2;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  v10 = MEMORY[0x24BEE4AF8];
  v22 = v9;
  while (1)
  {
    if (v8)
    {
      v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v12 = v11 | (v3 << 6);
      goto LABEL_22;
    }
    v13 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v13 >= v9)
      goto LABEL_32;
    v14 = *(_QWORD *)(v5 + 8 * v13);
    ++v3;
    if (!v14)
    {
      v3 = v13 + 1;
      if (v13 + 1 >= v9)
        goto LABEL_32;
      v14 = *(_QWORD *)(v5 + 8 * v3);
      if (!v14)
      {
        v3 = v13 + 2;
        if (v13 + 2 >= v9)
          goto LABEL_32;
        v14 = *(_QWORD *)(v5 + 8 * v3);
        if (!v14)
        {
          v3 = v13 + 3;
          if (v13 + 3 >= v9)
            goto LABEL_32;
          v14 = *(_QWORD *)(v5 + 8 * v3);
          if (!v14)
            break;
        }
      }
    }
LABEL_21:
    v8 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v3 << 6);
LABEL_22:
    v16 = *(_QWORD *)(v2 + 48) + 16 * v12;
    v17 = *(unsigned __int8 *)(v16 + 8);
    if (v17 - 9 < 0xEF || (v17 & 0x80) != 0 || v17 > 7 || ((1 << v17) & ~v4) == 0)
    {
      v18 = *(_QWORD *)(v2 + 56) + 40 * v12;
      v27 = *(_QWORD *)v18;
      v28 = *(_QWORD *)v16;
      v25 = *(_QWORD *)(v18 + 16);
      v26 = *(_QWORD *)(v18 + 8);
      v24 = *(_QWORD *)(v18 + 24);
      v23 = *(_BYTE *)(v18 + 32);
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v10 + 16) + 1, 1);
      v20 = *(_QWORD *)(v10 + 16);
      v19 = *(_QWORD *)(v10 + 24);
      if (v20 >= v19 >> 1)
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
      *(_QWORD *)(v10 + 16) = v20 + 1;
      v21 = v10 + 56 * v20;
      *(_QWORD *)(v21 + 32) = v28;
      *(_BYTE *)(v21 + 40) = v17;
      *(_QWORD *)(v21 + 48) = v27;
      *(_QWORD *)(v21 + 56) = v26;
      *(_QWORD *)(v21 + 64) = v25;
      *(_QWORD *)(v21 + 72) = v24;
      *(_BYTE *)(v21 + 80) = v23;
      v9 = v22;
    }
  }
  v15 = v13 + 4;
  if (v15 >= v9)
  {
LABEL_32:
    swift_release();
    return v10;
  }
  v14 = *(_QWORD *)(v5 + 8 * v15);
  if (v14)
  {
    v3 = v15;
    goto LABEL_21;
  }
  while (1)
  {
    v3 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v3 >= v9)
      goto LABEL_32;
    v14 = *(_QWORD *)(v5 + 8 * v3);
    ++v15;
    if (v14)
      goto LABEL_21;
  }
LABEL_34:
  __break(1u);
  return result;
}

_BYTE *Spacing.reset(_:layoutDirection:)(uint64_t a1, unsigned __int8 *a2)
{
  char v3;
  unsigned __int8 v4;

  v4 = *a2;
  AbsoluteEdge.Set.init(_:layoutDirection:)(&v4, &v3);
  return Spacing.reset(_:)(&v3);
}

uint64_t Spacing.clear(_:layoutDirection:)(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t **v2;
  uint64_t result;
  unint64_t *v4;
  uint64_t v5;
  unint64_t *v6;
  unsigned __int8 v7;
  unsigned __int8 v8;

  v7 = *a2;
  result = AbsoluteEdge.Set.init(_:layoutDirection:)(&v7, &v8);
  v4 = (unint64_t *)v8;
  if (v8)
  {
    v5 = swift_bridgeObjectRetain();
    v6 = specialized _NativeDictionary.filter(_:)(v5, v4);
    result = swift_bridgeObjectRelease_n();
    *v2 = v6;
  }
  return result;
}

void Spacing.isLayoutDirectionSymmetric.getter()
{
  uint64_t *v0;
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  float64x2_t v16;
  float64x2_t v17;
  int v18;
  int v19;
  Swift::UInt8 v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  float64x2_t v24;
  int v25;
  int32x4_t v26;
  int32x4_t v27;
  unint64_t v28;
  __int128 v29;
  char v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  int v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  __int128 v38;
  int v39;
  float64x2_t v40;
  __int128 v41;
  float64x2_t v42;
  __int128 v43;
  _OWORD v44[2];
  char v45;
  _OWORD v46[2];
  char v47;

  v1 = 0;
  v2 = *v0;
  v3 = v2 + 64;
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(v2 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  while (v6)
  {
    v9 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    v10 = v9 | (v1 << 6);
LABEL_25:
    v14 = *(_QWORD *)(v2 + 48) + 16 * v10;
    if (*(_QWORD *)v14)
    {
      v15 = *(_QWORD *)(v2 + 56) + 40 * v10;
      v16 = *(float64x2_t *)v15;
      v17 = *(float64x2_t *)(v15 + 16);
      v18 = *(unsigned __int8 *)(v15 + 32);
      v19 = *(unsigned __int8 *)(v14 + 8);
      if (v19 == 1)
      {
        v20 = 3;
        if (!*(_QWORD *)(v2 + 16))
          return;
        goto LABEL_31;
      }
      if (v19 == 3)
      {
        v20 = 1;
        if (!*(_QWORD *)(v2 + 16))
          return;
LABEL_31:
        v40 = v17;
        v42 = v16;
        v21 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)v14, v20);
        if ((v22 & 1) == 0)
          return;
        v23 = *(_QWORD *)(v2 + 56) + 40 * v21;
        v24 = *(float64x2_t *)v23;
        v25 = *(unsigned __int8 *)(v23 + 32);
        if (v18)
        {
          v26 = (int32x4_t)vceqq_f64(v42, v24);
          v27 = (int32x4_t)vceqq_f64(v40, *(float64x2_t *)(v23 + 16));
          if (v18 == 1)
          {
            if (v25 != 1)
              return;
          }
          else if (v25 != 2)
          {
            return;
          }
          if ((~vaddv_s16((int16x4_t)vand_s8((int8x8_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32(v26, v27)), 0xFuLL)), (int8x8_t)0x8000400020001)) & 0xF) != 0)return;
        }
        else
        {
          if (*(_BYTE *)(v23 + 32))
            v8 = 0;
          else
            v8 = v42.f64[0] == v24.f64[0];
          if (!v8)
            return;
        }
      }
    }
  }
  v11 = v1 + 1;
  if (__OFADD__(v1, 1))
  {
    __break(1u);
LABEL_53:
    __break(1u);
    return;
  }
  if (v11 >= v7)
    goto LABEL_39;
  v12 = *(_QWORD *)(v3 + 8 * v11);
  ++v1;
  if (v12)
    goto LABEL_24;
  v1 = v11 + 1;
  if (v11 + 1 >= v7)
    goto LABEL_39;
  v12 = *(_QWORD *)(v3 + 8 * v1);
  if (v12)
    goto LABEL_24;
  v1 = v11 + 2;
  if (v11 + 2 >= v7)
    goto LABEL_39;
  v12 = *(_QWORD *)(v3 + 8 * v1);
  if (v12)
  {
LABEL_24:
    v6 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v1 << 6);
    goto LABEL_25;
  }
  v13 = v11 + 3;
  if (v13 < v7)
  {
    v12 = *(_QWORD *)(v3 + 8 * v13);
    if (!v12)
    {
      while (1)
      {
        v1 = v13 + 1;
        if (__OFADD__(v13, 1))
          goto LABEL_53;
        if (v1 >= v7)
          goto LABEL_39;
        v12 = *(_QWORD *)(v3 + 8 * v1);
        ++v13;
        if (v12)
          goto LABEL_24;
      }
    }
    v1 = v13;
    goto LABEL_24;
  }
LABEL_39:
  if (!*(_QWORD *)(v2 + 16))
    return;
  v28 = specialized __RawDictionaryStorage.find<A>(_:)(0, 1u);
  v29 = 0uLL;
  if ((v30 & 1) == 0)
  {
    v34 = 255;
    v32 = 0uLL;
    v33 = 0uLL;
    if (*(_QWORD *)(v2 + 16))
      goto LABEL_42;
    goto LABEL_45;
  }
  v31 = *(_QWORD *)(v2 + 56) + 40 * v28;
  v32 = *(_OWORD *)v31;
  v33 = *(_OWORD *)(v31 + 16);
  v34 = *(unsigned __int8 *)(v31 + 32);
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_45:
    v39 = 255;
    v38 = 0uLL;
    goto LABEL_47;
  }
LABEL_42:
  v41 = v33;
  v43 = v32;
  v35 = specialized __RawDictionaryStorage.find<A>(_:)(0, 3u);
  if ((v36 & 1) != 0)
  {
    v37 = *(_QWORD *)(v2 + 56) + 40 * v35;
    v29 = *(_OWORD *)v37;
    v38 = *(_OWORD *)(v37 + 16);
    v39 = *(unsigned __int8 *)(v37 + 32);
    v33 = v41;
    v32 = v43;
  }
  else
  {
    v39 = 255;
    v38 = 0uLL;
    v33 = v41;
    v32 = v43;
    v29 = 0uLL;
  }
LABEL_47:
  v46[0] = v29;
  v46[1] = v38;
  v47 = v39;
  if (v34 != 255)
  {
    v44[0] = v32;
    v44[1] = v33;
    v45 = v34;
    if (v39 != 255)
      specialized static Spacing.Value.== infix(_:_:)((uint64_t)v44, (uint64_t)v46);
  }
}

Swift::UInt Spacing.distanceToSuccessorView(along:layoutDirection:preferring:)(char a1, _BYTE *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  uint64_t v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  uint64_t v14;

  v4 = *a3;
  v5 = *v3;
  if (*a2)
    v6 = 1;
  else
    v6 = 3;
  if (*a2)
    v7 = 3;
  else
    v7 = 1;
  if ((a1 & 1) != 0)
    v8 = 2;
  else
    v8 = v6;
  if ((a1 & 1) != 0)
    v9 = 0;
  else
    v9 = v7;
  if (*(_QWORD *)(v5 + 16) >= *(_QWORD *)(v4 + 16))
  {
    v14 = *a3;
    v13 = v9;
    v12 = v8;
    v11 = v5;
  }
  else
  {
    v14 = *v3;
    v13 = v8;
    v12 = v9;
    v11 = v4;
  }
  return Spacing._distance(from:to:ofViewPreferring:)(&v13, &v12, &v11);
}

uint64_t Spacing.description.getter()
{
  uint64_t *v0;
  uint64_t result;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  Swift::UInt8 *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::UInt v15;
  Swift::UInt8 v16;
  uint64_t v17;
  void *v18;
  void *v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  void *object;
  uint64_t countAndFlagsBits;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;

  result = 0x20676E6963617053;
  v2 = *v0;
  if (*(_QWORD *)(*v0 + 16))
  {
    v37 = 0x20676E6963617053;
    v38 = 0xEA00000000000A5BLL;
    swift_bridgeObjectRetain_n();
    v3 = specialized _copyCollectionToContiguousArray<A>(_:)(v2);
    swift_bridgeObjectRelease();
    v32._countAndFlagsBits = (uint64_t)v3;
    specialized MutableCollection<>.sort(by:)(&v32._countAndFlagsBits);
    swift_bridgeObjectRelease();
    v4 = *(_QWORD *)(v32._countAndFlagsBits + 16);
    if (v4)
    {
      v5 = (Swift::UInt8 *)(v32._countAndFlagsBits + 40);
      while (1)
      {
        v15 = *((_QWORD *)v5 - 1);
        v16 = *v5;
        if (v15)
        {
          v17 = _typeName(_:qualified:)();
          v19 = v18;
        }
        else
        {
          v19 = (void *)0xE700000000000000;
          v17 = 0x746C7561666564;
        }
        v32._countAndFlagsBits = 0;
        v32._object = (void *)0xE000000000000000;
        v20._countAndFlagsBits = 40;
        v20._object = (void *)0xE100000000000000;
        String.append(_:)(v20);
        v21._countAndFlagsBits = v17;
        v21._object = v19;
        String.append(_:)(v21);
        swift_bridgeObjectRelease();
        v22._countAndFlagsBits = 8236;
        v22._object = (void *)0xE200000000000000;
        String.append(_:)(v22);
        LOBYTE(v35) = v16;
        _print_unlocked<A, B>(_:_:)();
        v23._countAndFlagsBits = 41;
        v23._object = (void *)0xE100000000000000;
        String.append(_:)(v23);
        if (!*(_QWORD *)(v2 + 16))
          break;
        countAndFlagsBits = v32._countAndFlagsBits;
        object = v32._object;
        v26 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
        if ((v27 & 1) == 0)
          goto LABEL_16;
        v28 = *(_QWORD *)(v2 + 56) + 40 * v26;
        v29 = *(_QWORD *)v28;
        if (*(_BYTE *)(v28 + 32))
        {
          v7 = *(void **)(v28 + 8);
          v6 = *(_QWORD *)(v28 + 16);
          v8 = *(_QWORD *)(v28 + 24);
          v35 = 0;
          v36 = 0xE000000000000000;
          v32._countAndFlagsBits = v29;
          v32._object = v7;
          v33 = v6;
          v34 = v8;
          _print_unlocked<A, B>(_:_:)();
          v9 = v35;
          v10 = (void *)v36;
        }
        else
        {
          v9 = Double.description.getter();
          v10 = v30;
        }
        v5 += 16;
        v32._countAndFlagsBits = 8224;
        v32._object = (void *)0xE200000000000000;
        v11._countAndFlagsBits = countAndFlagsBits;
        v11._object = object;
        String.append(_:)(v11);
        swift_bridgeObjectRelease();
        v12._countAndFlagsBits = 2112032;
        v12._object = (void *)0xE300000000000000;
        String.append(_:)(v12);
        v13._countAndFlagsBits = v9;
        v13._object = v10;
        String.append(_:)(v13);
        swift_bridgeObjectRelease();
        v14._countAndFlagsBits = 10;
        v14._object = (void *)0xE100000000000000;
        String.append(_:)(v14);
        String.append(_:)(v32);
        swift_bridgeObjectRelease();
        if (!--v4)
          goto LABEL_13;
      }
      __break(1u);
LABEL_16:
      __break(1u);
      result = swift_release();
      __break(1u);
    }
    else
    {
LABEL_13:
      swift_release();
      v31._countAndFlagsBits = 93;
      v31._object = (void *)0xE100000000000000;
      String.append(_:)(v31);
      return v37;
    }
  }
  return result;
}

uint64_t specialized FloatingPoint.isAlmostEqual(to:tolerance:)(double a1, double a2, double a3)
{
  double v5;
  double v6;

  if ((~*(_QWORD *)&a3 & 0x7FF0000000000000) == 0 || (~*(_QWORD *)&a1 & 0x7FF0000000000000) == 0)
    return specialized FloatingPoint.rescaledAlmostEqual(to:tolerance:)(a1, a2, a3);
  v5 = fabs(a3);
  v6 = fabs(a1);
  if (v5 <= v6)
    v5 = v6;
  if (v5 <= 2.22507386e-308)
    v5 = 2.22507386e-308;
  return vabdd_f64(a3, a1) < v5 * a2;
}

uint64_t specialized FloatingPoint.rescaledAlmostEqual(to:tolerance:)(double a1, double a2, double a3)
{
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  __n128 v14;
  __n128 v15;

  while (1)
  {
    v5 = a3;
    v6 = *(_QWORD *)&a3;
    v7 = *(_QWORD *)&a3 & 0x7FF0000000000000;
    v8 = *(_QWORD *)&a3 & 0xFFFFFFFFFFFFFLL;
    if ((*(_QWORD *)&a3 & 0x7FF0000000000000) == 0x7FF0000000000000 && v8 != 0)
      return 0;
    a3 = a1;
    v10 = (*(_QWORD *)&a1 >> 52) & 0x7FFLL;
    v11 = *(_QWORD *)&a1 & 0xFFFFFFFFFFFFFLL;
    if ((*(_QWORD *)&a1 & 0xFFFFFFFFFFFFFLL) != 0 && v10 == 2047)
      return 0;
    a1 = v5;
    if (!v8)
    {
      a1 = v5;
      if (v7 == 0x7FF0000000000000)
        break;
    }
  }
  if (!v11 && v10 == 2047)
    return v5 == a3;
  v13 = Double.exponent.getter();
  v14.n128_u64[0] = specialized Double.init(sign:exponent:significand:)(v6 < 0, v13, 1.0);
  v15.n128_f64[0] = a3 * 0.5;
  if (!(v10 | v11))
    v15.n128_f64[0] = a3;
  if (v10 == 2047)
    v15.n128_f64[0] = a3;
  return specialized FloatingPoint.isAlmostEqual(to:tolerance:)(v15, a2, v14);
}

void one-time initialization function for defaultSpacingValue()
{
  double (*v0)(void);
  void *v1;
  CGFloat v2;
  double v3;
  CGFloat v4;

  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v0 = *(double (**)(void))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue.shared) + 0x78);
  v1 = static CoreGlue.shared;
  v2 = v0();
  v4 = v3;

  defaultSpacingValue.width = v2;
  defaultSpacingValue.height = v4;
}

CGFloat defaultSpacingValue.getter()
{
  if (one-time initialization token for defaultSpacingValue != -1)
    swift_once();
  return defaultSpacingValue.width;
}

uint64_t Spacing.Category.init(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void Spacing.Category.hash(into:)()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static Spacing.Category.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

Swift::Int Spacing.Category.hashValue.getter()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void Spacing.Key.category.getter(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

_QWORD *Spacing.Key.category.setter(_QWORD *result)
{
  _QWORD *v1;

  *v1 = *result;
  return result;
}

uint64_t (*Spacing.Key.category.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void Spacing.Key.edge.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 8);
}

_BYTE *Spacing.Key.edge.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = *result;
  return result;
}

uint64_t (*Spacing.Key.edge.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void Spacing.Key.hash(into:)()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt8 v2;

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  if (*(_QWORD *)v0)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v2);
}

Swift::Int Spacing.Key.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt8 v2;

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Spacing.Key()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt8 v2;

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  if (*(_QWORD *)v0)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Spacing.Key()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt8 v2;

  Hasher.init(_seed:)();
  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  if (*(_QWORD *)v0)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

double Spacing.TextMetrics.ascend.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void Spacing.TextMetrics.ascend.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*Spacing.TextMetrics.ascend.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double Spacing.TextMetrics.descend.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void Spacing.TextMetrics.descend.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

uint64_t (*Spacing.TextMetrics.descend.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double Spacing.TextMetrics.leading.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void Spacing.TextMetrics.leading.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
}

uint64_t (*Spacing.TextMetrics.leading.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double Spacing.TextMetrics.pixelLength.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

void Spacing.TextMetrics.pixelLength.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 24) = a1;
}

uint64_t (*Spacing.TextMetrics.pixelLength.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void Spacing.TextMetrics.init(ascend:descend:leading:pixelLength:)(double *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
}

double Spacing.TextMetrics.lineSpacing.getter()
{
  double *v0;

  return *v0 + v0[1] + v0[2];
}

BOOL static Spacing.TextMetrics.< infix(_:_:)(double *a1, double *a2)
{
  return *a1 + a1[1] + a1[2] < *a2 + a2[1] + a2[2];
}

uint64_t Spacing.TextMetrics.isAlmostEqual(to:)(double *a1)
{
  double *v1;
  double v2;
  double v3;
  double v4;
  double v5;

  v2 = a1[1];
  v3 = a1[2];
  v4 = v1[1];
  v5 = v1[2];
  if ((specialized FloatingPoint.isAlmostEqual(to:tolerance:)(*a1, 0.0000000149011612, *v1) & 1) != 0
    && (specialized FloatingPoint.isAlmostEqual(to:tolerance:)(v2, 0.0000000149011612, v4) & 1) != 0)
  {
    return specialized FloatingPoint.isAlmostEqual(to:tolerance:)(v3, 0.0000000149011612, v5);
  }
  else
  {
    return 0;
  }
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance Spacing.TextMetrics(double *a1, double *a2)
{
  return *a1 + a1[1] + a1[2] < *a2 + a2[1] + a2[2];
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance Spacing.TextMetrics(double *a1, double *a2)
{
  return *a2 + a2[1] + a2[2] >= *a1 + a1[1] + a1[2];
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance Spacing.TextMetrics(double *a1, double *a2)
{
  return *a1 + a1[1] + a1[2] >= *a2 + a2[1] + a2[2];
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance Spacing.TextMetrics(double *a1, double *a2)
{
  return *a2 + a2[1] + a2[2] < *a1 + a1[1] + a1[2];
}

uint64_t Spacing.Value.value.getter()
{
  _BYTE *v0;

  if (v0[32])
    return 0;
  else
    return *(_QWORD *)v0;
}

uint64_t Spacing.Value.distance(to:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;
  int v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  result = *a1;
  v4 = *((unsigned __int8 *)a1 + 32);
  v5 = *(double *)v1;
  if (*(_BYTE *)(v1 + 32))
  {
    v7 = a1[1];
    v6 = a1[2];
    v8 = a1[3];
    v10 = *(_QWORD *)(v1 + 8);
    v9 = *(_QWORD *)(v1 + 16);
    v11 = *(_QWORD *)(v1 + 24);
    if (*(_BYTE *)(v1 + 32) == 1)
    {
      if (v4)
      {
        if (v4 == 2)
        {
          v16 = *(double *)v1;
          v17 = v10;
          v18 = v9;
          v19 = v11;
          v12 = *(double *)&result;
          v13 = v7;
          v14 = v6;
          v15 = v8;
LABEL_13:
          *(double *)&result = specialized static Spacing.TextMetrics.spacing(top:bottom:)((uint64_t)&v16, (uint64_t)&v12);
          return result;
        }
LABEL_15:
        *(double *)&result = 0.0;
      }
    }
    else if (v4)
    {
      if (v4 == 1)
      {
        v16 = *(double *)&result;
        v17 = v7;
        v18 = v6;
        v19 = v8;
        v12 = v5;
        v13 = v10;
        v14 = v9;
        v15 = v11;
        goto LABEL_13;
      }
      goto LABEL_15;
    }
  }
  else if (*((_BYTE *)a1 + 32))
  {
    return *(uint64_t *)v1;
  }
  else
  {
    *(double *)&result = *(double *)&result + v5;
  }
  return result;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance Spacing.Value(uint64_t a1, uint64_t a2)
{
  return !specialized static Spacing.Value.< infix(_:_:)(a2, a1);
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance Spacing.Value(uint64_t a1, uint64_t a2)
{
  return !specialized static Spacing.Value.< infix(_:_:)(a1, a2);
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance Spacing.Value(uint64_t a1, uint64_t a2)
{
  return specialized static Spacing.Value.< infix(_:_:)(a2, a1);
}

_BYTE *Spacing.clear(_:)(_BYTE *result)
{
  unint64_t **v1;
  unint64_t *v2;
  uint64_t v3;
  unint64_t *v4;

  v2 = (unint64_t *)*result;
  if (*result)
  {
    v3 = swift_bridgeObjectRetain();
    v4 = specialized _NativeDictionary.filter(_:)(v3, v2);
    result = (_BYTE *)swift_bridgeObjectRelease_n();
    *v1 = v4;
  }
  return result;
}

_BYTE *Spacing.reset(_:)(_BYTE *result)
{
  unint64_t **v1;
  unint64_t *v2;
  uint64_t v3;
  unint64_t *v4;
  Swift::UInt v5;
  char isUniquelyReferenced_nonNull_native;
  Swift::UInt v7;
  char v8;
  Swift::UInt v9;
  char v10;
  Swift::UInt v11;
  char v12;
  unint64_t *v13;
  _OWORD v14[2];
  char v15;
  _OWORD v16[2];
  char v17;
  _OWORD v18[2];
  char v19;
  _OWORD v20[2];
  char v21;

  v2 = (unint64_t *)*result;
  if (!*result)
    return result;
  v3 = swift_bridgeObjectRetain();
  v4 = specialized _NativeDictionary.filter(_:)(v3, v2);
  swift_bridgeObjectRelease();
  *v1 = v4;
  result = (_BYTE *)swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    if (one-time initialization token for edgeBelowText != -1)
      swift_once();
    v5 = static Spacing.Category.edgeBelowText;
    memset(v20, 0, sizeof(v20));
    v21 = 0;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v18[0] = *v1;
    *v1 = (unint64_t *)0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v20, v5, 0, isUniquelyReferenced_nonNull_native);
    *v1 = *(unint64_t **)&v18[0];
    result = (_BYTE *)swift_bridgeObjectRelease();
    if ((v2 & 4) == 0)
    {
LABEL_4:
      if ((v2 & 2) == 0)
        goto LABEL_5;
      goto LABEL_13;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_4;
  }
  if (one-time initialization token for edgeAboveText != -1)
    swift_once();
  v7 = static Spacing.Category.edgeAboveText;
  memset(v18, 0, sizeof(v18));
  v19 = 0;
  v8 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v16[0] = *v1;
  *v1 = (unint64_t *)0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v18, v7, 2, v8);
  *v1 = *(unint64_t **)&v16[0];
  result = (_BYTE *)swift_bridgeObjectRelease();
  if ((v2 & 2) == 0)
  {
LABEL_5:
    if ((v2 & 8) == 0)
      return result;
    goto LABEL_16;
  }
LABEL_13:
  if (one-time initialization token for edgeRightText != -1)
    swift_once();
  v9 = static Spacing.Category.edgeRightText;
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  v10 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v14[0] = *v1;
  *v1 = (unint64_t *)0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v16, v9, 1, v10);
  *v1 = *(unint64_t **)&v14[0];
  result = (_BYTE *)swift_bridgeObjectRelease();
  if ((v2 & 8) != 0)
  {
LABEL_16:
    if (one-time initialization token for edgeLeftText != -1)
      swift_once();
    v11 = static Spacing.Category.edgeLeftText;
    memset(v14, 0, sizeof(v14));
    v15 = 0;
    v12 = swift_isUniquelyReferenced_nonNull_native();
    v13 = *v1;
    *v1 = (unint64_t *)0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v14, v11, 3, v12);
    *v1 = v13;
    return (_BYTE *)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t Spacing.minima.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Spacing.minima.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*Spacing.minima.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

Swift::UInt Spacing._distance(from:to:ofViewPreferring:)(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  Swift::UInt result;
  _QWORD *v19;
  int64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  double v31;
  double v32;
  int v33;
  int64_t v34;
  _QWORD *v35;
  char v36;
  uint64_t v37;
  double v38;
  double v39;
  double v40;
  double v41;
  int v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  char *v49;
  uint64_t v50;
  double v51;
  double v52;
  double v53;
  double v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  double v58;
  BOOL v59;
  unint64_t v60;
  char v61;
  uint64_t v62;
  Swift::UInt v63;
  BOOL v64;
  double v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  double v69;
  double v70;
  unsigned int v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  uint64_t v76;
  double v77;
  double v78;
  double v79;
  int v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;

  v73 = type metadata accessor for FloatingPointRoundingRule();
  v74 = *(_QWORD *)(v73 - 8);
  MEMORY[0x24BDAC7A8](v73);
  v72 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a1;
  v80 = *a2;
  v9 = *a3;
  v10 = *(_QWORD **)v3;
  v12 = (_QWORD *)(*(_QWORD *)v3 + 64);
  v11 = *v12;
  v13 = *(_BYTE *)(*(_QWORD *)v3 + 32);
  v76 = 1;
  v14 = 1 << v13;
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v11;
  v17 = (unint64_t)(v14 + 63) >> 6;
  v71 = *MEMORY[0x24BEE38E0];
  *(double *)&result = COERCE_DOUBLE(swift_bridgeObjectRetain());
  v19 = v12;
  v20 = v17;
  v75 = 0.0;
  v21 = 0;
  while (v16)
  {
    v22 = __clz(__rbit64(v16));
    v16 &= v16 - 1;
    v23 = v22 | (v21 << 6);
LABEL_20:
    v27 = v10[6] + 16 * v23;
    result = *(Swift::UInt *)v27;
    v28 = *(unsigned __int8 *)(v27 + 8);
    v29 = *(double *)&result != 0.0 && v28 == v8;
    if (v29)
    {
      if (*(_QWORD *)(v9 + 16))
      {
        v30 = v10[7] + 40 * v23;
        v31 = *(double *)v30;
        v32 = *(double *)(v30 + 8);
        v77 = *(double *)(v30 + 16);
        v78 = *(double *)(v30 + 24);
        v79 = v31;
        v33 = *(unsigned __int8 *)(v30 + 32);
        v34 = v20;
        v35 = v19;
        *(double *)&result = COERCE_DOUBLE(specialized __RawDictionaryStorage.find<A>(_:)(result, v80));
        v19 = v35;
        v20 = v34;
        if ((v36 & 1) != 0)
        {
          v37 = *(_QWORD *)(v9 + 56) + 40 * result;
          v39 = *(double *)v37;
          v38 = *(double *)(v37 + 8);
          v41 = *(double *)(v37 + 16);
          v40 = *(double *)(v37 + 24);
          v42 = *(unsigned __int8 *)(v37 + 32);
          if (v33 == 1)
          {
            if (!v42)
            {
LABEL_47:
              v43 = v39;
              goto LABEL_60;
            }
            if (v42 == 2)
            {
              v69 = v38;
              v68 = v39;
              if (one-time initialization token for introduced != -1)
              {
                v53 = v40;
                swift_once();
                v40 = v53;
              }
              v70 = v40;
              v67 = static _SemanticFeature_v5.introduced;
              if (one-time initialization token for forced != -1)
                swift_once();
              *(double *)&result = COERCE_DOUBLE(swift_beginAccess());
              if (byte_25426FAB4 != 1)
              {
                v43 = 0.0;
                v20 = v34;
                v19 = v35;
                v45 = v79;
                if (static Semantics.forced < v67)
                  goto LABEL_60;
LABEL_56:
                v46 = v41;
                v85 = v45;
                v86 = v32;
                v87 = v77;
                v88 = v78;
                v48 = v69;
                v81 = v68;
                v82 = v69;
                v83 = v41;
                v84 = v70;
                if ((Spacing.TextMetrics.isAlmostEqual(to:)(&v81) & 1) == 0)
                  v46 = v68 + v48 + v41 - v48 + v32 - v32 - v68;
                v47 = v78;
LABEL_59:
                v49 = v72;
                v50 = v73;
                (*(void (**)(char *, _QWORD, uint64_t))(v74 + 104))(v72, v71, v73);
                v85 = v46;
                specialized FloatingPoint.round(_:toMultipleOf:)(v49, v47);
                v43 = v85;
                *(double *)&result = COERCE_DOUBLE((*(uint64_t (**)(char *, uint64_t))(v74 + 8))(v49, v50));
                v20 = v34;
                v19 = v35;
                goto LABEL_60;
              }
              *(double *)&result = COERCE_DOUBLE(dyld_program_sdk_at_least());
              v43 = 0.0;
              v20 = v34;
              v19 = v35;
              v45 = v79;
              if ((result & 1) != 0)
                goto LABEL_56;
LABEL_60:
              v51 = v75;
              if ((v76 & 1) != 0)
                v51 = -INFINITY;
              if (v51 <= v43)
                v51 = v43;
              v75 = v51;
              v76 = 0;
            }
          }
          else
          {
            if (v33 != 2)
            {
              if (v42)
                v43 = v79;
              else
                v43 = v79 + v39;
              goto LABEL_60;
            }
            if (!v42)
              goto LABEL_47;
            if (v42 == 1)
            {
              v69 = v38;
              v68 = v39;
              if (one-time initialization token for introduced != -1)
              {
                v52 = v40;
                swift_once();
                v40 = v52;
              }
              v70 = v40;
              v67 = static _SemanticFeature_v5.introduced;
              if (one-time initialization token for forced != -1)
                swift_once();
              *(double *)&result = COERCE_DOUBLE(swift_beginAccess());
              if (byte_25426FAB4 != 1)
              {
                v43 = 0.0;
                v20 = v34;
                v19 = v35;
                v44 = v79;
                if (static Semantics.forced < v67)
                  goto LABEL_60;
LABEL_52:
                v46 = v77;
                v85 = v68;
                v86 = v69;
                v87 = v41;
                v88 = v70;
                v81 = v44;
                v82 = v32;
                v83 = v77;
                v84 = v78;
                if ((Spacing.TextMetrics.isAlmostEqual(to:)(&v81) & 1) == 0)
                  v46 = v44 + v32 + v46 - v32 + v69 - v69 - v44;
                v47 = v70;
                goto LABEL_59;
              }
              *(double *)&result = COERCE_DOUBLE(dyld_program_sdk_at_least());
              v43 = 0.0;
              v20 = v34;
              v19 = v35;
              v44 = v79;
              if ((result & 1) != 0)
                goto LABEL_52;
              goto LABEL_60;
            }
          }
        }
      }
    }
  }
  v24 = v21 + 1;
  if (__OFADD__(v21, 1))
  {
    __break(1u);
LABEL_91:
    __break(1u);
    return result;
  }
  if (v24 >= v20)
    goto LABEL_65;
  v25 = v19[v24];
  ++v21;
  if (v25)
    goto LABEL_19;
  v21 = v24 + 1;
  if (v24 + 1 >= v20)
    goto LABEL_65;
  v25 = v19[v21];
  if (v25)
    goto LABEL_19;
  v21 = v24 + 2;
  if (v24 + 2 >= v20)
    goto LABEL_65;
  v25 = v19[v21];
  if (v25)
  {
LABEL_19:
    v16 = (v25 - 1) & v25;
    v23 = __clz(__rbit64(v25)) + (v21 << 6);
    goto LABEL_20;
  }
  v26 = v24 + 3;
  if (v26 < v20)
  {
    v25 = v19[v26];
    if (!v25)
    {
      while (1)
      {
        v21 = v26 + 1;
        if (__OFADD__(v26, 1))
          goto LABEL_91;
        if (v21 >= v20)
          goto LABEL_65;
        v25 = v19[v21];
        ++v26;
        if (v25)
          goto LABEL_19;
      }
    }
    v21 = v26;
    goto LABEL_19;
  }
LABEL_65:
  swift_release();
  if ((v76 & 1) == 0)
  {
    *(double *)&result = v75;
    return result;
  }
  v54 = 0.0;
  if (!v10[2] || (v55 = specialized __RawDictionaryStorage.find<A>(_:)(0, v8), (v56 & 1) == 0))
  {
    v59 = 1;
    if (!*(_QWORD *)(v9 + 16))
      goto LABEL_82;
    goto LABEL_75;
  }
  v57 = v10[7] + 40 * v55;
  v58 = *(double *)v57;
  LODWORD(v57) = *(unsigned __int8 *)(v57 + 32);
  v59 = (_DWORD)v57 != 0;
  if ((_DWORD)v57)
    v54 = 0.0;
  else
    v54 = v58;
  if (*(_QWORD *)(v9 + 16))
  {
LABEL_75:
    v60 = specialized __RawDictionaryStorage.find<A>(_:)(0, v80);
    if ((v61 & 1) == 0)
      goto LABEL_82;
    v62 = *(_QWORD *)(v9 + 56) + 40 * v60;
    v63 = *(Swift::UInt *)v62;
    LODWORD(v62) = *(unsigned __int8 *)(v62 + 32);
    v29 = (_DWORD)v62 == 0;
    v64 = (_DWORD)v62 != 0;
    if (v29)
      result = v63;
    else
      *(double *)&result = 0.0;
    if (!v59)
      goto LABEL_80;
LABEL_83:
    if (v64)
      return result;
    v54 = -INFINITY;
    goto LABEL_85;
  }
LABEL_82:
  *(double *)&result = 0.0;
  v64 = 1;
  if (v59)
    goto LABEL_83;
LABEL_80:
  if (!v64)
  {
LABEL_85:
    v65 = *(double *)&result;
    goto LABEL_86;
  }
  v65 = -INFINITY;
LABEL_86:
  if (v54 > v65)
    v65 = v54;
  *(double *)&result = v65;
  return result;
}

unint64_t static Spacing.== infix(_:_:)(unint64_t *a1, uint64_t *a2)
{
  return specialized static Dictionary<>.== infix(_:_:)(*a1, *a2);
}

unint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Spacing(unint64_t *a1, uint64_t *a2)
{
  return specialized static Dictionary<>.== infix(_:_:)(*a1, *a2);
}

uint64_t static Spacing.zero.getter@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for zero != -1)
    swift_once();
  *a1 = static Spacing.zero;
  return swift_bridgeObjectRetain();
}

uint64_t static Spacing.all(_:)@<X0>(unint64_t *a1@<X8>, double a2@<D0>)
{
  uint64_t inited;
  unint64_t v5;
  uint64_t result;

  type metadata accessor for _ContiguousArrayStorage<(Spacing.Key, Spacing.Value)>();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23528B7A0;
  *(_QWORD *)(inited + 32) = 0;
  *(_BYTE *)(inited + 40) = 1;
  *(double *)(inited + 48) = a2;
  *(_QWORD *)(inited + 88) = 0;
  *(_QWORD *)(inited + 64) = 0;
  *(_QWORD *)(inited + 72) = 0;
  *(_QWORD *)(inited + 56) = 0;
  *(_BYTE *)(inited + 80) = 0;
  *(_BYTE *)(inited + 96) = 3;
  *(double *)(inited + 104) = a2;
  *(_QWORD *)(inited + 144) = 0;
  *(_BYTE *)(inited + 152) = 0;
  *(_QWORD *)(inited + 120) = 0;
  *(_QWORD *)(inited + 128) = 0;
  *(_QWORD *)(inited + 112) = 0;
  *(_BYTE *)(inited + 136) = 0;
  *(double *)(inited + 160) = a2;
  *(_QWORD *)(inited + 200) = 0;
  *(_QWORD *)(inited + 168) = 0;
  *(_QWORD *)(inited + 176) = 0;
  *(_BYTE *)(inited + 192) = 0;
  *(_QWORD *)(inited + 184) = 0;
  *(_BYTE *)(inited + 208) = 2;
  *(double *)(inited + 216) = a2;
  *(_QWORD *)(inited + 232) = 0;
  *(_QWORD *)(inited + 240) = 0;
  *(_QWORD *)(inited + 224) = 0;
  *(_BYTE *)(inited + 248) = 0;
  v5 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  result = swift_setDeallocating();
  *a1 = v5;
  return result;
}

uint64_t static Spacing.horizontal(_:)@<X0>(unint64_t *a1@<X8>, double a2@<D0>)
{
  uint64_t inited;
  unint64_t v5;
  uint64_t result;

  type metadata accessor for _ContiguousArrayStorage<(Spacing.Key, Spacing.Value)>();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2352828C0;
  *(_QWORD *)(inited + 32) = 0;
  *(_BYTE *)(inited + 40) = 1;
  *(double *)(inited + 48) = a2;
  *(_QWORD *)(inited + 88) = 0;
  *(_QWORD *)(inited + 64) = 0;
  *(_QWORD *)(inited + 72) = 0;
  *(_QWORD *)(inited + 56) = 0;
  *(_BYTE *)(inited + 80) = 0;
  *(_BYTE *)(inited + 96) = 3;
  *(double *)(inited + 104) = a2;
  *(_QWORD *)(inited + 120) = 0;
  *(_QWORD *)(inited + 128) = 0;
  *(_QWORD *)(inited + 112) = 0;
  *(_BYTE *)(inited + 136) = 0;
  v5 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  result = swift_setDeallocating();
  *a1 = v5;
  return result;
}

uint64_t static Spacing.vertical(_:)@<X0>(unint64_t *a1@<X8>, double a2@<D0>)
{
  uint64_t inited;
  unint64_t v5;
  uint64_t result;

  type metadata accessor for _ContiguousArrayStorage<(Spacing.Key, Spacing.Value)>();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2352828C0;
  *(_QWORD *)(inited + 32) = 0;
  *(_BYTE *)(inited + 40) = 0;
  *(double *)(inited + 48) = a2;
  *(_QWORD *)(inited + 88) = 0;
  *(_QWORD *)(inited + 64) = 0;
  *(_QWORD *)(inited + 72) = 0;
  *(_QWORD *)(inited + 56) = 0;
  *(_BYTE *)(inited + 80) = 0;
  *(_BYTE *)(inited + 96) = 2;
  *(double *)(inited + 104) = a2;
  *(_QWORD *)(inited + 120) = 0;
  *(_QWORD *)(inited + 128) = 0;
  *(_QWORD *)(inited + 112) = 0;
  *(_BYTE *)(inited + 136) = 0;
  v5 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  result = swift_setDeallocating();
  *a1 = v5;
  return result;
}

void one-time initialization function for textToText()
{
  static Spacing.Category.textToText = (uint64_t)&unk_25064DA40;
}

_QWORD *static Spacing.Category.textToText.getter@<X0>(_QWORD *a1@<X8>)
{
  return static Spacing.Category.textToText.getter(&one-time initialization token for textToText, &static Spacing.Category.textToText, a1);
}

void one-time initialization function for edgeAboveText()
{
  static Spacing.Category.edgeAboveText = (uint64_t)&unk_25064DAA0;
}

_QWORD *static Spacing.Category.edgeAboveText.getter@<X0>(_QWORD *a1@<X8>)
{
  return static Spacing.Category.textToText.getter(&one-time initialization token for edgeAboveText, &static Spacing.Category.edgeAboveText, a1);
}

void one-time initialization function for edgeBelowText()
{
  static Spacing.Category.edgeBelowText = (uint64_t)&unk_25064DAC0;
}

_QWORD *static Spacing.Category.edgeBelowText.getter@<X0>(_QWORD *a1@<X8>)
{
  return static Spacing.Category.textToText.getter(&one-time initialization token for edgeBelowText, &static Spacing.Category.edgeBelowText, a1);
}

void one-time initialization function for textBaseline()
{
  static Spacing.Category.textBaseline = (uint64_t)&unk_25064DA80;
}

_QWORD *static Spacing.Category.textBaseline.getter@<X0>(_QWORD *a1@<X8>)
{
  return static Spacing.Category.textToText.getter(&one-time initialization token for textBaseline, &static Spacing.Category.textBaseline, a1);
}

void one-time initialization function for edgeLeftText()
{
  static Spacing.Category.edgeLeftText = (uint64_t)&unk_25064DA60;
}

_QWORD *static Spacing.Category.edgeLeftText.getter@<X0>(_QWORD *a1@<X8>)
{
  return static Spacing.Category.textToText.getter(&one-time initialization token for edgeLeftText, &static Spacing.Category.edgeLeftText, a1);
}

void one-time initialization function for edgeRightText()
{
  static Spacing.Category.edgeRightText = (uint64_t)&unk_25064DAE0;
}

_QWORD *static Spacing.Category.edgeRightText.getter@<X0>(_QWORD *a1@<X8>)
{
  return static Spacing.Category.textToText.getter(&one-time initialization token for edgeRightText, &static Spacing.Category.edgeRightText, a1);
}

void one-time initialization function for leftTextBaseline()
{
  static Spacing.Category.leftTextBaseline = (uint64_t)&unk_25064DB00;
}

_QWORD *static Spacing.Category.leftTextBaseline.getter@<X0>(_QWORD *a1@<X8>)
{
  return static Spacing.Category.textToText.getter(&one-time initialization token for leftTextBaseline, &static Spacing.Category.leftTextBaseline, a1);
}

void one-time initialization function for rightTextBaseline()
{
  static Spacing.Category.rightTextBaseline = (uint64_t)&unk_25064DB20;
}

_QWORD *static Spacing.Category.rightTextBaseline.getter@<X0>(_QWORD *a1@<X8>)
{
  return static Spacing.Category.textToText.getter(&one-time initialization token for rightTextBaseline, &static Spacing.Category.rightTextBaseline, a1);
}

_QWORD *static Spacing.Category.textToText.getter@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  if (*result != -1)
    result = (_QWORD *)swift_once();
  *a3 = *a2;
  return result;
}

BOOL specialized static Spacing.Key.== infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  BOOL v3;

  v2 = *a2;
  if (*(_QWORD *)a1)
  {
    if (v2)
      v3 = *(_QWORD *)a1 == v2;
    else
      v3 = 0;
    if (!v3)
      return 0;
  }
  else if (v2)
  {
    return 0;
  }
  return *(unsigned __int8 *)(a1 + 8) == *((unsigned __int8 *)a2 + 8);
}

BOOL specialized static Spacing.Value.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  float64x2_t v2;
  float64x2_t v3;
  int v4;

  v2 = *(float64x2_t *)a1;
  v3 = *(float64x2_t *)a2;
  v4 = *(unsigned __int8 *)(a2 + 32);
  if (!*(_BYTE *)(a1 + 32))
    return !*(_BYTE *)(a2 + 32) && v2.f64[0] == v3.f64[0];
  if (*(_BYTE *)(a1 + 32) == 1)
  {
    if (v4 != 1)
      return 0;
    return vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(v2, v3), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 16), *(float64x2_t *)(a2 + 16)))), 0xFuLL))) & 1;
  }
  if (v4 == 2)
    return vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(v2, v3), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 16), *(float64x2_t *)(a2 + 16)))), 0xFuLL))) & 1;
  return 0;
}

BOOL specialized static Spacing.Value.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  unint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  unint64_t v9;
  BOOL v10;
  _BOOL4 v14;

  v2 = *(double *)a1;
  v3 = *(double *)a2;
  v4 = *(unsigned __int8 *)(a2 + 32);
  if (*(_BYTE *)(a1 + 32))
  {
    v5 = *(double *)(a1 + 16);
    v8 = *(double *)(a2 + 8);
    v7 = *(double *)(a2 + 16);
    if (*(_BYTE *)(a1 + 32) == 1)
    {
      if ((_DWORD)v4 != 1)
      {
        v9 = 1;
        return v9 < v4;
      }
    }
    else if ((_DWORD)v4 != 2)
    {
      v9 = 2;
      return v9 < v4;
    }
    v6 = *(double *)(a1 + 8);
    v10 = v2 == v3 && v6 == v8;
    return (!v10 || v5 != v7 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) && v2 + v6 + v5 < v3 + v8 + v7;
  }
  else
  {
    if (*(_BYTE *)(a2 + 32))
    {
      v9 = 0;
      return v9 < v4;
    }
    v10 = v2 == v3;
    v14 = v2 < v3;
    return !v10 && v14;
  }
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t i;
  unint64_t v6;
  double v7;
  double v8;
  _BOOL4 v9;
  double v10;
  double v11;
  unint64_t v12;
  Swift::UInt v13;
  Swift::UInt8 v14;
  int v15;
  _QWORD *v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  char v25;
  _QWORD *v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t result;
  double v51;
  double v52;
  double v53;

  v4 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v4)
  {
    for (i = a1 + 40; ; i += 56)
    {
      v13 = *(_QWORD *)(i - 8);
      if (v13 == 1)
        return swift_bridgeObjectRelease();
      v14 = *(_BYTE *)i;
      v10 = *(double *)(i + 8);
      v52 = *(double *)(i + 16);
      v53 = *(double *)(i + 24);
      v51 = *(double *)(i + 32);
      v15 = *(unsigned __int8 *)(i + 40);
      v16 = (_QWORD *)*a3;
      v18 = specialized __RawDictionaryStorage.find<A>(_:)(v13, *(_BYTE *)i);
      v19 = v16[2];
      v20 = (v17 & 1) == 0;
      v21 = v19 + v20;
      if (__OFADD__(v19, v20))
      {
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      v22 = v17;
      if (v16[3] >= v21)
      {
        if ((a2 & 1) == 0)
          specialized _NativeDictionary.copy()();
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, a2 & 1);
        v23 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v14);
        if ((v22 & 1) != (v24 & 1))
          goto LABEL_57;
        v18 = v23;
      }
      v25 = v15;
      v26 = (_QWORD *)*a3;
      if ((v22 & 1) != 0)
        break;
      v26[(v18 >> 6) + 8] |= 1 << v18;
      v41 = v26[6] + 16 * v18;
      *(_QWORD *)v41 = v13;
      *(_BYTE *)(v41 + 8) = v14;
      v42 = v26[7] + 40 * v18;
      *(double *)v42 = v10;
      *(double *)(v42 + 8) = v52;
      *(double *)(v42 + 16) = v53;
      *(double *)(v42 + 24) = v51;
      *(_BYTE *)(v42 + 32) = v15;
      v43 = v26[2];
      v44 = __OFADD__(v43, 1);
      v45 = v43 + 1;
      if (v44)
        goto LABEL_56;
      v26[2] = v45;
LABEL_9:
      a2 = 1;
      if (!--v4)
        return swift_bridgeObjectRelease();
    }
    v27 = v26[7] + 40 * v18;
    v28 = *(double *)v27;
    v29 = *(double *)(v27 + 8);
    v31 = *(double *)(v27 + 16);
    v30 = *(double *)(v27 + 24);
    v12 = *(unsigned __int8 *)(v27 + 32);
    if (v15)
    {
      if (v15 == 1)
      {
        v11 = v51;
        if ((_DWORD)v12 == 1)
        {
          v32 = v10;
          v8 = v52;
          v7 = v53;
          v33 = v52;
          v34 = v53;
          v35 = *(double *)v27;
          v36 = *(double *)(v27 + 8);
          v37 = *(double *)(v27 + 16);
          if (v10 != v28 || v52 != v29 || v53 != v31 || v51 != v30)
          {
LABEL_48:
            v9 = v32 + v33 + v34 < v35 + v36 + v37;
            goto LABEL_5;
          }
          LOBYTE(v12) = 1;
LABEL_8:
          *(double *)v27 = v10;
          *(double *)(v27 + 8) = v8;
          *(double *)(v27 + 16) = v7;
          *(double *)(v27 + 24) = v11;
          *(_BYTE *)(v27 + 32) = v12;
          goto LABEL_9;
        }
        v6 = 1;
      }
      else
      {
        v11 = v51;
        if ((_DWORD)v12 == 2)
        {
          v32 = v10;
          v8 = v52;
          v7 = v53;
          v33 = v52;
          v34 = v53;
          v35 = *(double *)v27;
          v36 = *(double *)(v27 + 8);
          v37 = *(double *)(v27 + 16);
          if (v10 != v28 || v52 != v29 || v53 != v31 || v51 != v30)
            goto LABEL_48;
          LOBYTE(v12) = 2;
          goto LABEL_8;
        }
        v6 = 2;
      }
    }
    else
    {
      if (!*(_BYTE *)(v27 + 32))
      {
        v11 = v51;
        if (v10 != v28)
        {
          v9 = v10 < v28;
          v8 = v52;
          v7 = v53;
LABEL_5:
          if (v9)
          {
            v10 = *(double *)v27;
            v8 = *(double *)(v27 + 8);
            v7 = *(double *)(v27 + 16);
            v11 = *(double *)(v27 + 24);
          }
          else
          {
            LOBYTE(v12) = v25;
          }
          goto LABEL_8;
        }
        LOBYTE(v12) = 0;
        v8 = v52;
        v7 = v53;
        goto LABEL_8;
      }
      v6 = 0;
      v11 = v51;
    }
    v8 = v52;
    v7 = v53;
    v9 = v6 < v12;
    goto LABEL_5;
  }
  return swift_bridgeObjectRelease();
}

double specialized Double.init(sign:exponent:significand:)(char a1, uint64_t a2, double a3)
{
  double result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = -a3;
  if ((a1 & 1) == 0)
    result = a3;
  v5 = (*(_QWORD *)&a3 >> 52) & 0x7FFLL;
  if (v5 != 2047 && v5 | *(_QWORD *)&a3 & 0xFFFFFFFFFFFFFLL)
  {
    if (a2 >= -1022)
    {
      if (a2 >= 1024)
      {
        if (a2 >= 3069)
          a2 = 3069;
        do
        {
          a2 -= 1023;
          result = result * 8.98846567e307;
        }
        while ((unint64_t)a2 > 0x3FF);
      }
    }
    else
    {
      if (a2 <= -3066)
        v6 = -3066;
      else
        v6 = a2;
      do
      {
        a2 = v6 + 1022;
        result = result * 2.22507386e-308;
        v7 = __CFADD__(v6, 2044);
        v6 += 1022;
      }
      while (!v7);
    }
    return result * COERCE_DOUBLE(((a2 << 52) + 0x3FF0000000000000) & 0x7FF0000000000000);
  }
  return result;
}

double specialized static Spacing.TextMetrics.spacing(top:bottom:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  __int128 v12;
  unsigned int v13;
  double v14;
  __int128 v15;
  __int128 v17;
  __int128 v18;
  double v19[2];
  __int128 v20;
  double v21;
  __int128 v22;
  double v23;

  v4 = type metadata accessor for FloatingPointRoundingRule();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(double *)a1;
  v9 = *(double *)(a1 + 24);
  v10 = *(double *)a2;
  v11 = *(double *)(a2 + 8);
  v12 = *(_OWORD *)(a2 + 16);
  v17 = *(_OWORD *)(a1 + 8);
  v18 = v12;
  if (one-time initialization token for introduced != -1)
    swift_once();
  v13 = static _SemanticFeature_v5.introduced;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FAB4 == 1)
  {
    v14 = 0.0;
    if ((dyld_program_sdk_at_least() & 1) == 0)
      return v14;
  }
  else
  {
    v14 = 0.0;
    if (static Semantics.forced < v13)
      return v14;
  }
  v21 = v8;
  v22 = v17;
  v23 = v9;
  v19[0] = v10;
  v19[1] = v11;
  v20 = v18;
  if ((Spacing.TextMetrics.isAlmostEqual(to:)(v19) & 1) == 0)
  {
    *(double *)&v15 = *(double *)&v17 + v10 + v11 + *(double *)&v18 - v11 - *(double *)&v17 - v10;
    v18 = v15;
  }
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x24BEE38E0], v4);
  v21 = *(double *)&v18;
  specialized FloatingPoint.round(_:toMultipleOf:)(v7, v9);
  v14 = v21;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v14;
}

unint64_t lazy protocol witness table accessor for type Spacing.Category and conformance Spacing.Category()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Spacing.Category and conformance Spacing.Category;
  if (!lazy protocol witness table cache variable for type Spacing.Category and conformance Spacing.Category)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Spacing.Category, &type metadata for Spacing.Category);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Spacing.Category and conformance Spacing.Category);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Spacing.TextMetrics and conformance Spacing.TextMetrics()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Spacing.TextMetrics and conformance Spacing.TextMetrics;
  if (!lazy protocol witness table cache variable for type Spacing.TextMetrics and conformance Spacing.TextMetrics)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Spacing.TextMetrics, &type metadata for Spacing.TextMetrics);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Spacing.TextMetrics and conformance Spacing.TextMetrics);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Spacing.Value and conformance Spacing.Value()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Spacing.Value and conformance Spacing.Value;
  if (!lazy protocol witness table cache variable for type Spacing.Value and conformance Spacing.Value)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Spacing.Value, &type metadata for Spacing.Value);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Spacing.Value and conformance Spacing.Value);
  }
  return result;
}

ValueMetadata *type metadata accessor for Spacing()
{
  return &type metadata for Spacing;
}

ValueMetadata *type metadata accessor for Spacing.Category()
{
  return &type metadata for Spacing.Category;
}

uint64_t getEnumTagSinglePayload for Spacing.Key(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 9))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Spacing.Key(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Spacing.Key()
{
  return &type metadata for Spacing.Key;
}

ValueMetadata *type metadata accessor for Spacing.TextMetrics()
{
  return &type metadata for Spacing.TextMetrics;
}

uint64_t getEnumTagSinglePayload for Spacing.Value(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Spacing.Value(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Spacing.Value()
{
  return &type metadata for Spacing.Value;
}

void *type metadata accessor for Spacing.Category.EdgeBelowText()
{
  return &unk_25064DAC0;
}

void *type metadata accessor for Spacing.Category.EdgeAboveText()
{
  return &unk_25064DAA0;
}

void *type metadata accessor for Spacing.Category.EdgeRightText()
{
  return &unk_25064DAE0;
}

void *type metadata accessor for Spacing.Category.EdgeLeftText()
{
  return &unk_25064DA60;
}

void *type metadata accessor for Spacing.Category.TextToText()
{
  return &unk_25064DA40;
}

void *type metadata accessor for Spacing.Category.TextBaseline()
{
  return &unk_25064DA80;
}

void *type metadata accessor for Spacing.Category.TextLeftBaseline()
{
  return &unk_25064DB00;
}

void *type metadata accessor for Spacing.Category.TextRightBaseline()
{
  return &unk_25064DB20;
}

uint64_t PlatformDrawableOptions.isAccelerated.getter()
{
  uint64_t v0;

  return *(_DWORD *)(v0 + 12) & 1;
}

double PlatformDrawableContent.init()@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 40) = 5;
  return result;
}

void PlatformDrawableContent.State.init()(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = 0;
}

void PlatformDrawableContent.draw(in:size:state:)(void *a1)
{
  uint64_t v1;
  unint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  id v15;
  uint64_t State;
  double v17;
  uint64_t v18;
  id v19;
  void (*v20)(uint64_t *);
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27[2];
  uint64_t v28;
  uint64_t v29;

  v4 = *(void **)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v6 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v7 = *(_QWORD *)(v1 + 32);
  v8 = *(unsigned __int8 *)(v1 + 40);
  if ((_DWORD)v8 == 4)
  {
    v15 = v4;
    objc_msgSend(a1, sel_translateByX_Y_, COERCE_DOUBLE(v6 ^ 0x8000000000000000), COERCE_DOUBLE(v5 ^ 0x8000000000000000));
    State = RBDisplayListGetState();
    LODWORD(v17) = v3;
    objc_msgSend(v15, sel_drawInState_by_, State, v17);
    v9 = v4;
    v10 = (void *)v3;
    v11 = v6;
    v12 = v5;
    v13 = v7;
    v14 = 4;
  }
  else
  {
    if ((_DWORD)v8 != 3)
    {
      v28 = 0;
      v29 = 0;
      v18 = one-time initialization token for shared;
      v19 = a1;
      if (v18 != -1)
        swift_once();
      swift_beginAccess();
      v20 = *(void (**)(uint64_t *))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue2.shared) + 0x68);
      v21 = static CoreGlue2.shared;
      v20(&v28);

      v23 = v28;
      v22 = v29;
      type metadata accessor for GraphicsContext.Storage();
      v24 = swift_allocObject();
      *(_QWORD *)(v24 + 32) = 1065353216;
      *(_QWORD *)(v24 + 40) = 0x7FF8000000000000;
      v27[0] = v23;
      v27[1] = v22;
      type metadata accessor for GraphicsContext.Storage.Shared();
      swift_allocObject();
      v25 = v19;
      *(_QWORD *)(v24 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v25, v27);
      v26 = RBDisplayListGetState();

      *(_QWORD *)(v24 + 24) = v26;
      *(_BYTE *)(v24 + 48) = 0;
      v28 = v24;
      __asm { BR              X9 }
    }
    swift_unknownObjectRetain();
    objc_msgSend(a1, sel_translateByX_Y_, COERCE_DOUBLE(v3 ^ 0x8000000000000000), COERCE_DOUBLE(v6 ^ 0x8000000000000000));
    objc_msgSend(a1, sel_drawDisplayList_, v4);
    v9 = v4;
    v10 = (void *)v3;
    v11 = v6;
    v12 = v5;
    v13 = v7;
    v14 = 3;
  }
  outlined consume of PlatformDrawableContent.Storage(v9, v10, v11, v12, v13, v14);
}

uint64_t PlatformDrawableOptions.isOpaque.getter()
{
  uint64_t v0;

  return (*(unsigned __int8 *)(v0 + 12) >> 1) & 1;
}

id PlatformDrawableOptions.caLayerContentsFormat.getter()
{
  uint64_t v0;
  int v1;
  id *v2;
  id *v3;

  v1 = *(_DWORD *)(v0 + 12);
  v2 = (id *)MEMORY[0x24BDE5890];
  if ((v1 & 0x100) != 0)
    v2 = (id *)MEMORY[0x24BDE5898];
  if ((v1 & 0x40) != 0)
    v3 = (id *)MEMORY[0x24BDE5888];
  else
    v3 = v2;
  return *v3;
}

void PlatformDrawableContent.draw(in:size:contentsScale:state:)()
{
  __asm { BR              X10 }
}

void sub_234F20C20(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  CGContext *v64;
  double v65;
  double v66;
  uint64_t v67;
  void (*v68)(uint64_t *);
  void *v69;
  uint64_t v70[5];
  uint64_t v71;
  uint64_t v72;

  v71 = 0;
  v72 = 0;
  outlined copy of PlatformDrawableContent.Storage(v63, v62, v61, v60, v59, 0);
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v68 = *(void (**)(uint64_t *))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue2.shared) + 0x68);
  v69 = static CoreGlue2.shared;
  v68(&v71);

  v70[0] = v71;
  v70[1] = v72;
  specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(v64, v70, v67, 0, (void (*)(uint64_t *, double, double))v63, v66, v65);
  swift_release();
  swift_release();
  outlined consume of PlatformDrawableContent.Storage(v63, v62, v61, v60, v59, 0);
}

uint64_t PlatformDrawableOptions.rendersAsynchronously.getter()
{
  uint64_t v0;

  return (*(unsigned __int8 *)(v0 + 12) >> 2) & 1;
}

void PlatformDrawableOptions.update(rbLayer:)()
{
  uint64_t v0;
  unsigned int v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;

  v1 = *(_DWORD *)(v0 + 12);
  v2 = *(char *)(v0 + 16);
  objc_opt_self();
  v3 = (void *)swift_dynamicCastObjCClassUnconditional();
  v4 = RasterizationOptions.resolvedColorMode.getter();
  v5 = v3;
  objc_msgSend(v5, sel_setColorMode_, v4);
  objc_msgSend(v5, sel_setRendersAsynchronously_, (v1 >> 2) & 1);
  objc_msgSend(v5, sel_setMaxDrawableCount_, v2);
  objc_msgSend(v5, sel_setAllowsDisplayCompositing_, (v1 >> 3) & 1);
  objc_msgSend(v5, sel_setAllowsPackedDrawable_, (v1 >> 5) & 1);

}

void PlatformDrawableContent.State.mode.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *PlatformDrawableContent.State.mode.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*PlatformDrawableContent.State.mode.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t PlatformDrawableContent.State._renderer.getter()
{
  return swift_retain();
}

uint64_t PlatformDrawableContent.State._renderer.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*PlatformDrawableContent.State._renderer.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

_BYTE *PlatformDrawableContent.State.init(platformViewMode:)@<X0>(_BYTE *result@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = *result;
  *(_QWORD *)(a2 + 8) = 0;
  return result;
}

uint64_t PlatformDrawableContent.State.renderer()()
{
  uint64_t v0;
  char v2;

  if (!*(_QWORD *)(v0 + 8))
  {
    v2 = *(_BYTE *)v0;
    type metadata accessor for DisplayList.GraphicsRenderer();
    swift_allocObject();
    *(_QWORD *)(v0 + 8) = DisplayList.GraphicsRenderer.init(platformViewMode:)(&v2);
  }
  return swift_retain();
}

uint64_t PlatformDrawableOptions.rendersFirstFrameAsynchronously.getter()
{
  uint64_t v0;

  return (*(unsigned __int8 *)(v0 + 12) >> 4) & 1;
}

BOOL static PlatformDrawableOptions.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2;
  char v3;
  int v4;
  char v5;
  unsigned __int8 v6;
  int v7;
  char v8;
  int v9;
  char v10;
  unsigned __int8 v12[4];
  int v13;
  char v14;
  int v15;
  char v16;
  unsigned __int8 v17[4];
  int v18;
  char v19;
  int v20;
  char v21;

  v2 = *(_DWORD *)(a1 + 4);
  v3 = *(_BYTE *)(a1 + 8);
  v4 = *(_DWORD *)(a1 + 12);
  v5 = *(_BYTE *)(a1 + 16);
  v6 = *(_BYTE *)a2;
  v7 = *(_DWORD *)(a2 + 4);
  v8 = *(_BYTE *)(a2 + 8);
  v9 = *(_DWORD *)(a2 + 12);
  v10 = *(_BYTE *)(a2 + 16);
  v17[0] = *(_BYTE *)a1;
  v18 = v2;
  v19 = v3;
  v20 = v4;
  v21 = v5;
  v12[0] = v6;
  v13 = v7;
  v14 = v8;
  v15 = v9;
  v16 = v10;
  return specialized static RasterizationOptions.== infix(_:_:)(v17, v12);
}

void type metadata accessor for _ContiguousArrayStorage<(RBDisplayListRenderKey, Any)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(RBDisplayListRenderKey, Any)>)
  {
    type metadata accessor for (RBDisplayListRenderKey, Any)();
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(RBDisplayListRenderKey, Any)>);
  }
}

void type metadata accessor for (RBDisplayListRenderKey, Any)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (RBDisplayListRenderKey, Any))
  {
    type metadata accessor for RBDisplayListRenderKey(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (RBDisplayListRenderKey, Any));
  }
}

uint64_t dispatch thunk of PlatformDrawable.options.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of PlatformDrawable.options.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of PlatformDrawable.options.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of static PlatformDrawable.allowsContentsMultiplyColor.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of PlatformDrawable.update(content:required:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of PlatformDrawable.makeAsyncUpdate(content:required:layer:bounds:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 48))();
}

uint64_t dispatch thunk of PlatformDrawable.setContentsScale(_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of PlatformDrawable.drawForTesting(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

ValueMetadata *type metadata accessor for PlatformDrawableContent()
{
  return &type metadata for PlatformDrawableContent;
}

uint64_t assignWithCopy for PlatformDrawableContent.State(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for PlatformDrawableContent.State(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for PlatformDrawableContent.State()
{
  return &type metadata for PlatformDrawableContent.State;
}

ValueMetadata *type metadata accessor for PlatformDrawableOptions()
{
  return &type metadata for PlatformDrawableOptions;
}

void destroy for PlatformDrawableContent(uint64_t a1)
{
  outlined consume of PlatformDrawableContent.Storage(*(void **)a1, *(id *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
}

uint64_t initializeWithCopy for PlatformDrawableContent(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(id *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 40);
  outlined copy of PlatformDrawableContent.Storage(*(id *)a2, v4, v5, v6, v7, v8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  return a1;
}

uint64_t assignWithCopy for PlatformDrawableContent(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v3 = *(id *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 40);
  outlined copy of PlatformDrawableContent.Storage(*(id *)a2, v4, v5, v6, v7, v8);
  v9 = *(void **)a1;
  v10 = *(void **)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  v14 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v8;
  outlined consume of PlatformDrawableContent.Storage(v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for PlatformDrawableContent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  char v11;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_BYTE *)(a2 + 40);
  v5 = *(void **)a1;
  v7 = *(void **)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 32) = v3;
  v11 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v4;
  outlined consume of PlatformDrawableContent.Storage(v5, v7, v6, v8, v9, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlatformDrawableContent(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFB && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 251);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 5)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PlatformDrawableContent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 251;
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for PlatformDrawableContent.Storage(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 40) <= 4u)
    return *(unsigned __int8 *)(a1 + 40);
  else
    return (*(_DWORD *)a1 + 5);
}

uint64_t destructiveInjectEnumTag for PlatformDrawableContent.Storage(uint64_t result, unsigned int a2)
{
  if (a2 >= 5)
  {
    *(_QWORD *)result = a2 - 5;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    LOBYTE(a2) = 5;
  }
  *(_BYTE *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for PlatformDrawableContent.Storage()
{
  return &type metadata for PlatformDrawableContent.Storage;
}

Swift::Void __swiftcall DisplayList.insertLayerFilters(matrices:version:premultiplied:)(Swift::OpaquePointer matrices, SwiftUI::DisplayList::Version version, Swift::Bool premultiplied)
{
  uint64_t v3;
  int64_t v4;
  char v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;

  v4 = 0;
  v5 = 0;
  v6 = (char *)matrices._rawValue + 64;
  v7 = 1 << *((_BYTE *)matrices._rawValue + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *((_QWORD *)matrices._rawValue + 8);
  v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v12 = v11 | (v4 << 6);
      goto LABEL_5;
    }
    v13 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v13 >= v10)
      goto LABEL_25;
    v14 = *(_QWORD *)&v6[8 * v13];
    ++v4;
    if (!v14)
    {
      v4 = v13 + 1;
      if (v13 + 1 >= v10)
        goto LABEL_25;
      v14 = *(_QWORD *)&v6[8 * v4];
      if (!v14)
      {
        v4 = v13 + 2;
        if (v13 + 2 >= v10)
          goto LABEL_25;
        v14 = *(_QWORD *)&v6[8 * v4];
        if (!v14)
        {
          v4 = v13 + 3;
          if (v13 + 3 >= v10)
            goto LABEL_25;
          v14 = *(_QWORD *)&v6[8 * v4];
          if (!v14)
          {
            v4 = v13 + 4;
            if (v13 + 4 >= v10)
              goto LABEL_25;
            v14 = *(_QWORD *)&v6[8 * v4];
            if (!v14)
              break;
          }
        }
      }
    }
LABEL_24:
    v9 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v4 << 6);
LABEL_5:
    v5 |= *(_BYTE *)(*((_QWORD *)matrices._rawValue + 6) + v12);
  }
  v15 = v13 + 5;
  if (v15 < v10)
  {
    v14 = *(_QWORD *)&v6[8 * v15];
    if (!v14)
    {
      while (1)
      {
        v4 = v15 + 1;
        if (__OFADD__(v15, 1))
          break;
        if (v4 >= v10)
          goto LABEL_25;
        v14 = *(_QWORD *)&v6[8 * v4];
        ++v15;
        if (v14)
          goto LABEL_24;
      }
LABEL_27:
      __break(1u);
    }
    v4 = v15;
    goto LABEL_24;
  }
LABEL_25:
  swift_bridgeObjectRetain();
  ForegroundTransform.apply(to:)(v3);
  swift_bridgeObjectRelease();
}

_QWORD *ForegroundTransform.apply(to:)(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  uint64_t v3;
  _QWORD *result;
  __int16 v5;
  char v6;
  uint64_t v8;
  __int16 v9;
  char v10;
  _QWORD *v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v2 = *(_OWORD *)(MEMORY[0x24BDBF070] + 16);
  v14 = *MEMORY[0x24BDBF070];
  v3 = *(_QWORD *)(v1 + 16);
  v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v12 = MEMORY[0x24BEE4AF8];
  v13 = 0;
  v15 = v2;
  v16 = v3;
  if (*(_QWORD *)(*(_QWORD *)a1 + 16))
    __asm { BR              X8 }
  swift_bridgeObjectRelease();
  ForegroundTransform.NewList.flushPendingItems(transform:)(v1);
  swift_bridgeObjectRelease();
  result = DisplayList.init(_:)(v11, (uint64_t)&v8);
  v5 = v9;
  v6 = v10;
  *(_QWORD *)a1 = v8;
  *(_WORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 10) = v6;
  return result;
}

uint64_t DisplayList.applyViewGraphTransform(time:version:)()
{
  uint64_t v0;
  uint64_t result;

  if ((*(_WORD *)(v0 + 8) & 0x60) != 0)
  {
    specialized DisplayList.transform(_:)(v0);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t ForegroundTransform.NewList.flushPendingItems(transform:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  int v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  float64x2_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  __int16 v48;
  char v49;
  int v50;
  unsigned __int8 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;

  v4 = *(_QWORD **)(v1 + 8);
  if (v4[2])
  {
    v5 = v1;
    v6 = result;
    v7 = *(_QWORD *)result;
    if (!*(_QWORD *)(*(_QWORD *)result + 16))
      goto LABEL_5;
    v8 = specialized __RawDictionaryStorage.find<A>(_:)(*(_BYTE *)(v5 + 16));
    if ((v9 & 1) == 0)
      goto LABEL_5;
    v10 = *(_QWORD *)(v7 + 56) + 80 * v8;
    v11 = *(_OWORD *)(v10 + 16);
    v12 = *(_OWORD *)(v10 + 48);
    v54 = *(_OWORD *)(v10 + 32);
    v55 = v12;
    v56 = *(_OWORD *)(v10 + 64);
    v52 = *(_OWORD *)v10;
    v53 = v11;
    v13 = *(_QWORD *)v10;
    v14 = *(_QWORD *)(v10 + 8);
    v15 = *(_QWORD *)(v10 + 16);
    v16 = *(_QWORD *)(v10 + 24);
    v18 = *(_QWORD *)(v10 + 32);
    v17 = *(_QWORD *)(v10 + 40);
    v39 = *(_QWORD *)(v10 + 56);
    v40 = *(_QWORD *)(v10 + 48);
    v37 = *(_QWORD *)(v10 + 72);
    v38 = *(_QWORD *)(v10 + 64);
    if (_ColorMatrix.isIdentity.getter())
    {
LABEL_5:
      v19 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v19);
LABEL_6:
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v5 + 8) = MEMORY[0x24BEE4AF8];
      v20 = *(_OWORD *)(MEMORY[0x24BDBF070] + 16);
      *(_OWORD *)(v5 + 24) = *MEMORY[0x24BDBF070];
      *(_OWORD *)(v5 + 40) = v20;
      *(_QWORD *)(v5 + 56) = *(_QWORD *)(v6 + 16);
      return result;
    }
    v21 = (_QWORD *)v4[2];
    if (v21)
    {
      v36 = *(float64x2_t *)(v5 + 24);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v4 = specialized _ArrayBuffer._consumeAndCreateNew()(v4);
      v22 = 0;
      v23 = v4[2];
      v24 = 4;
      while ((unint64_t)v22 < v23)
      {
        v22 = (_QWORD *)((char *)v22 + 1);
        *(float64x2_t *)&v4[v24] = vsubq_f64(*(float64x2_t *)&v4[v24], v36);
        v24 += 9;
        if (v21 == v22)
        {
          v25 = v17;
          *(_QWORD *)(v5 + 8) = v4;
          goto LABEL_16;
        }
      }
      __break(1u);
    }
    else
    {
      v25 = v17;
LABEL_16:
      v17 = swift_allocObject();
      v26 = *(unsigned __int8 *)(v6 + 24);
      *(_QWORD *)(v17 + 16) = v13;
      *(_QWORD *)(v17 + 24) = v14;
      *(_QWORD *)(v17 + 32) = v15;
      *(_QWORD *)(v17 + 40) = v16;
      *(_QWORD *)(v17 + 48) = v18;
      *(_QWORD *)(v17 + 56) = v25;
      *(_QWORD *)(v17 + 64) = v40;
      *(_QWORD *)(v17 + 72) = v39;
      *(_QWORD *)(v17 + 80) = v38;
      *(_QWORD *)(v17 + 88) = v37;
      *(_QWORD *)(v17 + 96) = v26;
      *(_BYTE *)(v17 + 132) = 4;
      v27 = (_QWORD *)swift_bridgeObjectRetain();
      DisplayList.init(_:)(v27, (uint64_t)&v41);
      v28 = v41;
      v29 = (unsigned __int16)v42;
      v30 = BYTE2(v42);
      v31 = *(_QWORD *)(v5 + 24);
      v32 = *(_QWORD *)(v5 + 32);
      v2 = *(_QWORD *)(v5 + 40);
      v3 = *(_QWORD *)(v5 + 48);
      v15 = *(_QWORD *)(v5 + 56);
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>();
      *(_QWORD *)(v5 + 24) = 0;
      *(_QWORD *)(v5 + 32) = 0;
      v13 = swift_allocObject();
      *(_OWORD *)(v13 + 16) = xmmword_23527E860;
      *(_QWORD *)(v13 + 32) = v31;
      *(_QWORD *)(v13 + 40) = v32;
      *(_QWORD *)(v13 + 48) = v2;
      *(_QWORD *)(v13 + 56) = v3;
      *(_QWORD *)(v13 + 64) = v15;
      *(_OWORD *)(v13 + 72) = xmmword_23529EF20;
      *(_QWORD *)(v13 + 88) = v28;
      *(_BYTE *)(v13 + 98) = v30;
      *(_WORD *)(v13 + 96) = v29;
      *(_DWORD *)(v13 + 100) = 0;
      outlined copy of DisplayList.Effect(2, 0, 19);
      swift_bridgeObjectRetain();
      outlined copy of DisplayList.Effect(2, 0, 19);
      swift_retain();
      v41 = v31;
      v42 = v32;
      v43 = v2;
      v44 = v3;
      v45 = v15;
      v46 = xmmword_23529EF20;
      v47 = v28;
      v49 = v30;
      v48 = v29;
      v50 = 0;
      DisplayList.Item.properties.getter();
      outlined consume of DisplayList.Effect(2, 0, 19);
      swift_bridgeObjectRelease();
      LODWORD(v16) = v29 | (v51 << 16);
      v21 = *(_QWORD **)v5;
      outlined copy of DisplayList.Effect(v17, 0, 9);
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_17;
    }
    v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
LABEL_17:
    v34 = v21[2];
    v33 = v21[3];
    if (v34 >= v33 >> 1)
      v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v33 > 1), v34 + 1, 1, v21);
    v21[2] = v34 + 1;
    v35 = &v21[9 * v34];
    v35[4] = 0;
    v35[5] = 0;
    v35[6] = v2;
    v35[7] = v3;
    v35[8] = v15;
    v35[9] = v17;
    v35[10] = 0x4000000900000000;
    v35[11] = v13;
    *((_BYTE *)v35 + 98) = BYTE2(v16);
    *((_WORD *)v35 + 48) = v16;
    *((_DWORD *)v35 + 25) = 0;
    swift_release();
    outlined consume of DisplayList.Effect(v17, 0, 9);
    swift_bridgeObjectRelease();
    *(_QWORD *)v5 = v21;
    goto LABEL_6;
  }
  return result;
}

void closure #1 in ViewGraphTransform.apply(to:)(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_234F2427C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_234F242A0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_234F242C4()
{
  uint64_t v0;

  outlined consume of GraphicsFilter(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(id *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_DWORD *)(v0 + 128), BYTE2(*(_DWORD *)(v0 + 128)));
  return swift_deallocObject();
}

void type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>)
  {
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>);
  }
}

double specialized static EnvironmentalView._makeView(view:inputs:)@<D0>(unsigned int a1@<W0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int ShouldRecordTree;
  char v23;
  int v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  unsigned int v30;
  double result;
  uint64_t v32;
  unint64_t v33;
  int v34;
  unint64_t v36;
  double v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  int v43;
  _OWORD v44[2];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  int v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a2 + 16);
  v32 = *(_QWORD *)(a2 + 40);
  v33 = *(_QWORD *)a2;
  v6 = *(_DWORD *)(a2 + 8);
  v7 = *(_DWORD *)(a2 + 24);
  v8 = *(_DWORD *)(a2 + 28);
  v9 = *(_DWORD *)(a2 + 36);
  v34 = *(_DWORD *)(a2 + 32);
  swift_beginAccess();
  v10 = *(_DWORD *)(v5 + 16);
  type metadata accessor for PropertyList.Tracker();
  v11 = swift_allocObject();
  type metadata accessor for AtomicBuffer<TrackerData>(0, v12, v13, v14);
  v15 = swift_allocObject();
  v16 = MEMORY[0x24BEE4B00];
  *(_DWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = 0;
  *(_QWORD *)(v15 + 32) = v16;
  v17 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v15 + 40) = v16;
  *(_QWORD *)(v15 + 48) = v17;
  *(_BYTE *)(v15 + 56) = 0;
  *(_QWORD *)(v11 + 16) = v15;
  v49 = __PAIR64__(v10, a1);
  v50 = v11;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for EnvironmentalViewChild<Color>(0, v18, v19, v20);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type EnvironmentalViewChild<Color> and conformance EnvironmentalViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentalViewChild<Color>, (uint64_t)&protocol conformance descriptor for EnvironmentalViewChild<A>);
  swift_retain();
  v21 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  v23 = ShouldRecordTree;
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v24 = *(_DWORD *)(a2 + 80);
  v25 = *(_QWORD *)(a2 + 48);
  v26 = *(_OWORD *)(a2 + 56);
  v27 = *(_QWORD *)(a2 + 72);
  v28 = *(_OWORD *)(a2 + 48);
  v45 = *(_OWORD *)(a2 + 32);
  v46 = v28;
  v47 = *(_OWORD *)(a2 + 64);
  v48 = v24;
  v29 = *(_OWORD *)(a2 + 16);
  v44[0] = *(_OWORD *)a2;
  v44[1] = v29;
  LODWORD(v45) = 0;
  v49 = v33;
  LODWORD(v50) = v6;
  v51 = v5;
  v52 = v7;
  v53 = v8;
  v54 = 0;
  v55 = v9;
  v56 = v32;
  v57 = v25;
  v58 = v26;
  v59 = v27;
  v60 = v24;
  if ((v9 & 1) != 0)
  {
    outlined retain of _ViewInputs(a2);
    v30 = v21;
  }
  else
  {
    v36 = __PAIR64__(*(_DWORD *)(v5 + 16), v21);
    v37 = COERCE_DOUBLE(__PAIR64__(v6, v7));
    v38 = v8;
    v40 = 0;
    v39 = 0;
    v41 = 1;
    v42 = 0;
    v43 = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of _ViewInputs(a2);
    type metadata accessor for AnimatableAttribute<ColorView>(0);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<ColorView> and conformance AnimatableAttribute<A>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatableAttribute<ColorView>, (uint64_t)&protocol conformance descriptor for AnimatableAttribute<A>);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v30 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  specialized static RendererLeafView.makeLeafView(view:inputs:)(v30, (uint64_t)&v49, &v36);
  LODWORD(v45) = v34;
  if ((v23 & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v36, v44);
    AGSubgraphEndTreeElement();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    outlined release of _ViewInputs(a2);
  }
  swift_release();
  *(_QWORD *)a3 = v36;
  result = v37;
  a3[1] = v37;
  return result;
}

double static EnvironmentalView._makeView(view:inputs:)@<D0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, double *a5@<X8>)
{
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int ShouldRecordTree;
  char v23;
  uint64_t AssociatedConformanceWitness;
  void (*v25)(uint64_t *__return_ptr, int *, unint64_t *, uint64_t, uint64_t);
  double result;
  unsigned int v27;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v40;
  uint64_t v41;
  double v42;
  int v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  v7 = *a1;
  v8 = *(_QWORD *)a2;
  v9 = *(_QWORD *)(a2 + 16);
  v36 = *(_DWORD *)(a2 + 24);
  v37 = *(_DWORD *)(a2 + 8);
  v38 = *(_DWORD *)(a2 + 32);
  v34 = *(_DWORD *)(a2 + 36);
  v35 = *(_DWORD *)(a2 + 28);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  v32 = *(_DWORD *)(a2 + 60);
  v33 = *(_DWORD *)(a2 + 56);
  v30 = *(_DWORD *)(a2 + 68);
  v31 = *(_DWORD *)(a2 + 64);
  v28 = *(_DWORD *)(a2 + 76);
  v29 = *(_DWORD *)(a2 + 72);
  v27 = *(_DWORD *)(a2 + 80);
  swift_beginAccess();
  v12 = EnvironmentalViewChild.init(view:env:)(v7, *(unsigned int *)(v9 + 16));
  v13 = v12;
  v15 = v14;
  v16 = HIDWORD(v12);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v59 = __PAIR64__(v16, v13);
  v60 = v15;
  v19 = type metadata accessor for EnvironmentalViewChild(0, a3, a4, v18);
  swift_retain();
  v20 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentalViewChild<A>, v19);
  _GraphValue.init<A>(_:)((uint64_t)&v59, AssociatedTypeWitness, v19, v20, &v43);
  v21 = v43;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  v23 = ShouldRecordTree;
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v59 = v8;
  v61 = v9;
  LODWORD(v60) = v37;
  v66 = v10;
  v67 = v11;
  v64 = 0;
  v65 = v34;
  v68 = v33;
  v69 = v32;
  v70 = v31;
  v71 = v30;
  v72 = v29;
  v73 = v28;
  v74 = v27;
  v62 = v36;
  v63 = v35;
  v40 = v21;
  v44 = v8;
  v45 = v37;
  v46 = v9;
  v47 = v36;
  v48 = v35;
  v49 = 0;
  v50 = v34;
  v51 = v10;
  v52 = v11;
  v53 = v33;
  v54 = v32;
  v55 = v31;
  v56 = v30;
  v57 = v29;
  v58 = __PAIR64__(v27, v28);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v25 = *(void (**)(uint64_t *__return_ptr, int *, unint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness
                                                                                                  + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v25(&v41, &v40, &v44, AssociatedTypeWitness, AssociatedConformanceWitness);
  v64 = v38;
  if ((v23 & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)&v41, (uint64_t)&v59);
    AGSubgraphEndTreeElement();
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_QWORD *)a5 = v41;
  result = v42;
  a5[1] = v42;
  return result;
}

unint64_t EnvironmentalViewChild.init(view:env:)(unsigned int a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  type metadata accessor for PropertyList.Tracker();
  v4 = swift_allocObject();
  type metadata accessor for AtomicBuffer<TrackerData>(0, v5, v6, v7);
  v8 = swift_allocObject();
  *(_DWORD *)(v8 + 16) = 0;
  v9 = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = v9;
  v10 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v8 + 40) = v9;
  *(_QWORD *)(v8 + 48) = v10;
  *(_BYTE *)(v8 + 56) = 0;
  *(_QWORD *)(v4 + 16) = v8;
  return a1 | (unint64_t)(a2 << 32);
}

uint64_t type metadata accessor for EnvironmentalViewChild(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EnvironmentalViewChild);
}

Swift::Void __swiftcall EnvironmentalViewChild.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t Value;
  char v18;
  char v19;
  void (*v20)(char *, uint64_t, uint64_t);
  char v21;
  uint64_t *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char is_enabled;
  _QWORD *v36;
  uint64_t inited;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  void (*v54)(char *, uint64_t);
  char *v55;
  uint64_t (*v56)(char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[2];
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t AssociatedTypeWitness;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v2 = v0;
  v83 = *MEMORY[0x24BDAC8D0];
  v3 = type metadata accessor for OSSignpostID();
  v72 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v7 = *(_QWORD *)(v2 + 16);
  v66 = *(_QWORD *)(v2 + 24);
  v67 = (char *)v62 - v8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v69 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v68 = (char *)v62 - v9;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v71 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v74 = (char *)v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v62 - v13;
  v78 = v15;
  v16 = *(int *)(v15 + 48);
  v76 = *(_QWORD *)(v1 + 8);
  Value = AGGraphGetValue();
  v19 = v18;
  v20 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  v75 = v7;
  *(_QWORD *)&v79 = v20;
  v20(v14, Value, v7);
  v21 = v19 & 1;
  v77 = v14;
  v14[v16] = v19 & 1;
  v22 = (uint64_t *)AGGraphGetValue();
  v25 = *v22;
  v24 = v22[1];
  if ((v19 & 1) != 0)
  {
    swift_retain();
    swift_retain();
    v27 = v76;
  }
  else
  {
    v26 = v23;
    swift_retain();
    swift_retain();
    v27 = v76;
    if ((v26 & 1) == 0
      || (v28 = swift_retain(),
          v29 = PropertyList.Tracker.hasDifferentUsedValues(_:)(v28),
          swift_release(),
          (v29 & 1) == 0))
    {
      if (AGGraphGetOutputValue())
      {
        (*(void (**)(char *, uint64_t))(v71 + 8))(v77, v78);
        swift_release();
        swift_release();
        return;
      }
    }
  }
  v65 = v24;
  PropertyList.Tracker.reset()();
  if (v25)
    v30 = *(_QWORD *)(v25 + 64);
  else
    v30 = 0;
  v31 = *(_QWORD *)(v27 + 16);
  swift_retain_n();
  swift_retain_n();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v31 + 16));
  *(_QWORD *)(v31 + 24) = v30;
  os_unfair_lock_unlock((os_unfair_lock_t)(v31 + 16));
  swift_release();
  swift_release();
  swift_release();
  v32 = *(int *)(v78 + 48);
  v33 = v74;
  v34 = v75;
  ((void (*)(char *, char *, uint64_t))v79)(v74, v77, v75);
  v33[v32] = v21;
  static os_signpost_type_t.event.getter();
  is_enabled = kdebug_is_enabled();
  v70 = v25;
  if ((is_enabled & 1) != 0)
  {
    v64 = v2;
    v36 = v67;
    static OSSignpostID.exclusive.getter();
    v63 = static os_signpost_type_t.begin.getter();
    type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2352828C0;
    v38 = AGTypeID.description.getter();
    v40 = v39;
    v41 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 56) = MEMORY[0x24BEE0D00];
    v42 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(inited + 32) = v38;
    v43 = inited + 32;
    *(_QWORD *)(inited + 64) = v42;
    *(_QWORD *)(inited + 40) = v40;
    *(_QWORD *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(_QWORD *)(inited + 96) = v41;
    *(_QWORD *)(inited + 104) = v42;
    *(_QWORD *)(inited + 80) = v44;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    (*(void (**)(char *, _QWORD *, uint64_t))(v72 + 16))(v5, v36, v3);
    type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg?>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v45 = swift_initStackObject();
    v79 = xmmword_235283260;
    *(_OWORD *)(v45 + 16) = xmmword_235283260;
    if (*(_QWORD *)(inited + 16))
    {
      v46 = v45;
      outlined init with copy of AnyTrackedValue(inited + 32, v45 + 32);
      if (*(_QWORD *)(inited + 16) >= 2uLL)
      {
        v62[1] = inited;
        v43 = v63 | 0x14110014;
        outlined init with copy of AnyTrackedValue(inited + 72, v46 + 72);
        *(_OWORD *)(v46 + 128) = 0u;
        *(_QWORD *)(v46 + 144) = 0;
        *(_OWORD *)(v46 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v43, v46, v43, (uint64_t)v5);
        outlined init with copy of CVarArg?(v46 + 112, (uint64_t)&v80);
        swift_bridgeObjectRelease();
        if (!v82)
        {
LABEL_23:
          outlined destroy of CVarArg?((uint64_t)&v80);
          swift_bridgeObjectRelease();
          v54 = *(void (**)(char *, uint64_t))(v72 + 8);
          v54(v5, v3);
          v80 = v70;
          v81 = v76;
          v51 = (uint64_t)v68;
          v53 = v74;
          (*(void (**)(uint64_t *, uint64_t))(v66 + 40))(&v80, v75);
          static os_signpost_type_t.end.getter();
          v55 = v67;
          OSSignpostID.rawValue.getter();
          kdebug_trace();
          v54(v55, v3);
          v2 = v64;
          v52 = v69;
          goto LABEL_24;
        }
        outlined destroy of CVarArg?((uint64_t)&v80);
        v36 = &unk_2561AC000;
        if (one-time initialization token for continuation == -1)
        {
LABEL_17:
          v47 = __swift_project_value_buffer(v3, (uint64_t)static OSSignpostID.continuation);
          v48 = *(void (**)(char *, uint64_t, uint64_t))(v72 + 24);
          while (1)
          {
            v48(v5, v47, v3);
            v49 = swift_initStackObject();
            *(_OWORD *)(v49 + 16) = v79;
            *(_OWORD *)(v49 + 32) = 0u;
            *(_OWORD *)(v49 + 48) = 0u;
            *(_OWORD *)(v49 + 64) = 0u;
            *(_OWORD *)(v49 + 80) = 0u;
            *(_OWORD *)(v49 + 96) = 0u;
            *(_OWORD *)(v49 + 128) = 0u;
            *(_QWORD *)(v49 + 144) = 0;
            *(_OWORD *)(v49 + 112) = 0u;
            v50 = v49 + 112;
            specialized withKDebugValues(_:_:closure:)(v43, v49, v43, (uint64_t)v5);
            outlined init with copy of CVarArg?(v50, (uint64_t)&v80);
            swift_bridgeObjectRelease();
            if (!v82)
              break;
            outlined destroy of CVarArg?((uint64_t)&v80);
            if (v36[291] != -1)
              swift_once();
            v47 = __swift_project_value_buffer(v3, (uint64_t)static OSSignpostID.continuation);
          }
          goto LABEL_23;
        }
LABEL_27:
        swift_once();
        goto LABEL_17;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_27;
  }
  v80 = v25;
  v81 = v27;
  v51 = (uint64_t)v68;
  (*(void (**)(uint64_t *, uint64_t))(v66 + 40))(&v80, v34);
  v52 = v69;
  v53 = v33;
LABEL_24:
  v56 = *(uint64_t (**)(char *, uint64_t))(v71 + 8);
  v57 = v78;
  v58 = v56(v53, v78);
  v59 = MEMORY[0x24BDAC7A8](v58);
  v62[-2] = v2;
  v62[-1] = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentalViewChild<A>, v2, v59);
  v60 = AssociatedTypeWitness;
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v51, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)&v62[-4], AssociatedTypeWitness, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v61);
  swift_release();
  swift_release_n();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v51, v60);
  v56(v77, v57);
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance EnvironmentalViewChild<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a1, 1, 1, AssociatedTypeWitness);
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance EnvironmentalViewChild<A>()
{
  return specialized EnvironmentalViewChild.description.getter();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance EnvironmentalViewChild<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentalViewChild<A>, a1);
  return static AsyncAttribute.flags.getter();
}

double protocol witness for static View._makeView(view:inputs:) in conformance EnvironmentReader<A>@<D0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, double *a4@<X8>)
{
  uint64_t v8;

  v8 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentReader<A>, a3);
  return static EnvironmentalView._makeView(view:inputs:)(a1, a2, a3, v8, a4);
}

double protocol witness for static View._makeView(view:inputs:) in conformance Color@<D0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  unsigned int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static EnvironmentalView._makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t dispatch thunk of EnvironmentalView.body(environment:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t instantiation function for generic protocol witness table for EnvironmentalViewChild<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentalViewChild<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in EnvironmentalViewChild<A>()
{
  JUMPOUT(0x23B7C9C04);
}

unint64_t specialized EnvironmentalViewChild.description.getter()
{
  Swift::String v0;

  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0xD000000000000014;
}

void type metadata accessor for EnvironmentalViewChild<Color>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for EnvironmentalViewChild<Color>)
  {
    v4 = type metadata accessor for EnvironmentalViewChild(0, (uint64_t)&type metadata for Color, (uint64_t)&protocol witness table for Color, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for EnvironmentalViewChild<Color>);
  }
}

void type metadata accessor for AnimatableAttribute<ColorView>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for AnimatableAttribute<ColorView>)
  {
    v2 = lazy protocol witness table accessor for type ColorView and conformance ColorView();
    v4 = type metadata accessor for AnimatableAttribute(a1, (uint64_t)&type metadata for ColorView, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for AnimatableAttribute<ColorView>);
  }
}

uint64_t EnvironmentReader.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t EnvironmentReader.body(environment:)(__int128 *a1)
{
  uint64_t (**v1)(__int128 *);
  uint64_t (*v2)(__int128 *);
  __int128 v4;

  v2 = *v1;
  v4 = *a1;
  return v2(&v4);
}

uint64_t static EnvironmentReader._makeViewList(view:inputs:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD v34[7];
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  char v47;

  v8 = *a1;
  v25 = *(_QWORD *)a2;
  v9 = *(_QWORD *)(a2 + 16);
  v26 = *(_DWORD *)(a2 + 8);
  v27 = *(_DWORD *)(a2 + 24);
  v28 = *(_DWORD *)(a2 + 28);
  v29 = *(_DWORD *)(a2 + 32);
  v30 = *(_DWORD *)(a2 + 36);
  v31 = *(_QWORD *)(a2 + 40);
  v32 = *(_QWORD *)(a2 + 48);
  v33 = *(_QWORD *)(a2 + 56);
  v10 = *(_DWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_BYTE *)(a2 + 80);
  if (one-time initialization token for introduced != -1)
    swift_once();
  v13 = static _SemanticFeature_v3.introduced;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FAB4 == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0)
    {
LABEL_7:
      v34[1] = v8;
      v35 = v25;
      LODWORD(v36) = v26;
      v37 = v9;
      v38 = v27;
      v39 = v28;
      v40 = v29;
      v41 = v30;
      v42 = v31;
      v43 = v32;
      v44 = v33;
      v45 = v10;
      v46 = v11;
      v47 = v12;
      v15 = type metadata accessor for EnvironmentReader(0, a3, a4, v14);
      return static _ViewListOutputs.unaryViewList<A>(view:inputs:)((uint64_t)&v35, v15, (uint64_t)&protocol witness table for EnvironmentReader<A>, a5);
    }
  }
  else if (static Semantics.forced < v13)
  {
    goto LABEL_7;
  }
  swift_beginAccess();
  v17 = *(unsigned int *)(v9 + 16);
  v19 = type metadata accessor for EnvironmentReader(0, a3, a4, v18);
  v20 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentReader<A>, v19);
  v35 = EnvironmentalViewChild.init(view:env:)(v8, v17);
  v36 = v21;
  v23 = type metadata accessor for EnvironmentalViewChild(0, v19, v20, v22);
  swift_retain();
  v24 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentalViewChild<A>, v23);
  _GraphValue.init<A>(_:)((uint64_t)&v35, a3, v23, v24, v34);
  v35 = v25;
  LODWORD(v36) = v26;
  v37 = v9;
  v38 = v27;
  v39 = v28;
  v40 = v29;
  v41 = v30;
  v42 = v31;
  v43 = v32;
  v44 = v33;
  v45 = v10;
  v46 = v11;
  v47 = v12;
  (*(void (**)(_DWORD *, unint64_t *, uint64_t, uint64_t))(a4 + 32))(v34, &v35, a3, a4);
  return swift_release();
}

uint64_t static EnvironmentReader._viewListCount(inputs:)(__int128 *a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v9;
  __int128 v10;
  int v11;
  uint64_t v12;

  v9 = *a1;
  v5 = *((_DWORD *)a1 + 4);
  v6 = *((_QWORD *)a1 + 3);
  if (one-time initialization token for introduced != -1)
    swift_once();
  v7 = static _SemanticFeature_v3.introduced;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FAB4 == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0)
      return 1;
  }
  else if (static Semantics.forced < v7)
  {
    return 1;
  }
  v10 = v9;
  v11 = v5;
  v12 = v6;
  return (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(a3 + 40))(&v10, a2, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance EnvironmentReader<A>@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static EnvironmentReader._makeViewList(view:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance EnvironmentReader<A>(__int128 *a1, uint64_t a2)
{
  return static EnvironmentReader._viewListCount(inputs:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t type metadata accessor for EnvironmentReader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EnvironmentReader);
}

uint64_t key path getter for _AppearanceActionModifier.appear : _AppearanceActionModifier@<X0>(uint64_t *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)())v5;
  return outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v3);
}

uint64_t key path setter for _AppearanceActionModifier.appear : _AppearanceActionModifier(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *a2;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v3);
  result = outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v7);
  *a2 = (uint64_t)v6;
  a2[1] = v5;
  return result;
}

uint64_t _AppearanceActionModifier.appear.getter(uint64_t a1)
{
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(a1);
  return a1;
}

uint64_t _AppearanceActionModifier.appear.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t result;

  result = outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*v2);
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*_AppearanceActionModifier.appear.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t key path getter for _AppearanceActionModifier.disappear : _AppearanceActionModifier@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)())v5;
  return outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v3);
}

uint64_t key path setter for _AppearanceActionModifier.disappear : _AppearanceActionModifier(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @escaping @callee_guaranteed () -> ();
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *(_QWORD *)(a2 + 16);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v3);
  result = outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v7);
  *(_QWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 24) = v5;
  return result;
}

uint64_t _AppearanceActionModifier.disappear.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(a3);
  return a3;
}

uint64_t _AppearanceActionModifier.disappear.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*(_QWORD *)(v2 + 16));
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*_AppearanceActionModifier.disappear.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t static _AppearanceActionModifier._makeView(modifier:inputs:body:)(_DWORD *a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v5 = *a2;
  v6 = *((_DWORD *)a2 + 2);
  v7 = a2[2];
  v8 = *((_DWORD *)a2 + 20);
  v9 = *MEMORY[0x24BE096C0];
  LODWORD(v14) = *a1;
  v15 = 1;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  LOBYTE(v19) = 0;
  DWORD1(v19) = 0;
  DWORD2(v19) = v9;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type AppearanceEffect and conformance AppearanceEffect();
  v13 = a2[3];
  Attribute.init<A>(body:value:flags:update:)();
  v10 = AGGraphSetFlags();
  v14 = v5;
  LODWORD(v15) = v6;
  v16 = v7;
  v11 = a2[4];
  v17 = v13;
  v18 = v11;
  v19 = *(_OWORD *)(a2 + 5);
  v20 = *(_OWORD *)(a2 + 7);
  v21 = a2[9];
  v22 = v8;
  return a3(v10, &v14);
}

uint64_t AppearanceEffect.init(modifier:phase:)@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v3;

  v3 = *MEMORY[0x24BE096C0];
  *(_DWORD *)a3 = result;
  *(_DWORD *)(a3 + 4) = a2;
  *(_QWORD *)(a3 + 8) = 1;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 40) = 0;
  *(_DWORD *)(a3 + 44) = 0;
  *(_DWORD *)(a3 + 48) = v3;
  return result;
}

uint64_t static _AppearanceActionModifier._makeViewList(modifier:inputs:body:)(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  _OWORD v19[5];
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  v6 = *(_OWORD *)(a2 + 48);
  v23 = *(_OWORD *)(a2 + 32);
  v24 = v6;
  v25 = *(_OWORD *)(a2 + 64);
  v26 = *(_BYTE *)(a2 + 80);
  v7 = *(_OWORD *)(a2 + 16);
  v21 = *(_OWORD *)a2;
  v22 = v7;
  if (one-time initialization token for v3 != -1)
    swift_once();
  v8 = static Semantics.v3;
  if (one-time initialization token for forced != -1)
    swift_once();
  v9 = swift_beginAccess();
  if (byte_25426FAB4 == 1)
  {
    v9 = dyld_program_sdk_at_least();
    if ((v9 & 1) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
  if (static Semantics.forced >= v8)
  {
LABEL_9:
    v19[0] = __PAIR64__(DWORD2(v22), v5);
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    lazy protocol witness table accessor for type _AppearanceActionModifier.MergedCallbacks and conformance _AppearanceActionModifier.MergedCallbacks();
    v9 = Attribute.init<A>(body:value:flags:update:)();
    v5 = v9;
  }
LABEL_10:
  v16 = *(_OWORD *)(a2 + 48);
  v19[2] = *(_OWORD *)(a2 + 32);
  v19[3] = v16;
  v19[4] = *(_OWORD *)(a2 + 64);
  v20 = *(_BYTE *)(a2 + 80);
  v17 = *(_OWORD *)(a2 + 16);
  v19[0] = *(_OWORD *)a2;
  v19[1] = v17;
  a3(v9, v19, v10, v11, v12, v13, v14, v15);
  return specialized _ViewListOutputs.multiModifier<A>(_:inputs:)(v5, &v21);
}

void _AppearanceActionModifier.MergedBox.appear()()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  BOOL v9;
  int v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;

  v2 = *(_DWORD *)(v1 + 20);
  if (!v2)
  {
    if ((*(_BYTE *)(v1 + 64) & 1) == 0)
    {
      *(_BYTE *)(v1 + 64) = 1;
      swift_retain();
      specialized static Update.begin()();
      v0 = swift_allocObject();
      *(_QWORD *)(v0 + 16) = partial apply for closure #1 in _AppearanceActionModifier.MergedBox.update();
      *(_QWORD *)(v0 + 24) = v1;
      v3 = one-time initialization token for actions;
      swift_retain();
      if (v3 == -1)
        goto LABEL_5;
      goto LABEL_13;
    }
    v2 = 0;
  }
  while (1)
  {
    v9 = __OFADD__(v2, 1);
    v10 = v2 + 1;
    if (!v9)
      break;
    __break(1u);
LABEL_13:
    swift_once();
LABEL_5:
    v4 = static Update.actions;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
    v5 = v4[2];
    v6 = v4[3];
    v7 = v5 + 1;
    if (v5 >= v6 >> 1)
    {
      v14 = v5 + 1;
      v11 = v4;
      v12 = v4[2];
      v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v5 + 1, 1, v11);
      v5 = v12;
      v7 = v14;
      v4 = v13;
    }
    v4[2] = v7;
    v8 = &v4[2 * v5];
    v8[4] = thunk for @escaping @callee_guaranteed () -> ()partial apply;
    v8[5] = v0;
    static Update.actions = v4;
    swift_bridgeObjectRelease();
    static Update.end()();
    swift_release();
    v2 = *(_DWORD *)(v1 + 20);
  }
  *(_DWORD *)(v1 + 20) = v10;
}

uint64_t closure #1 in _AppearanceActionModifier.MergedBox.update()(uint64_t result)
{
  int v1;
  int v2;
  void (*v3)(uint64_t);
  uint64_t v4;

  *(_BYTE *)(result + 64) = 0;
  v1 = *(_DWORD *)(result + 20);
  v2 = *(_DWORD *)(result + 24);
  *(_DWORD *)(result + 24) = v1;
  if (v2 <= 0)
  {
    if (v1 >= 1)
    {
      v3 = *(void (**)(uint64_t))(result + 32);
      if (v3)
        goto LABEL_7;
    }
  }
  else if (v1 <= 0)
  {
    v3 = *(void (**)(uint64_t))(result + 48);
    if (v3)
    {
LABEL_7:
      v4 = swift_retain();
      v3(v4);
      return outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v3);
    }
  }
  return result;
}

uint64_t _AppearanceActionModifier.MergedBox.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*(_QWORD *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v1);
  return swift_deallocClassInstance();
}

uint64_t _AppearanceActionModifier.MergedCallbacks.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t *Value;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 8);
  if (v1)
  {
    v2 = *(_DWORD *)(v1 + 16);
    if (v2 == *(_DWORD *)AGGraphGetValue() >> 1)
    {
      v3 = *(_QWORD *)(v1 + 32);
      v4 = *(_QWORD *)(v1 + 48);
      goto LABEL_6;
    }
    swift_release();
  }
  v5 = *(_DWORD *)AGGraphGetValue() >> 1;
  type metadata accessor for _AppearanceActionModifier.MergedBox();
  v1 = swift_allocObject();
  v4 = 0;
  v3 = 0;
  *(_DWORD *)(v1 + 20) = 0;
  *(_DWORD *)(v1 + 24) = 0;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_BYTE *)(v1 + 64) = 0;
  *(_DWORD *)(v1 + 16) = v5;
  *(_QWORD *)(v0 + 8) = v1;
LABEL_6:
  Value = (uint64_t *)AGGraphGetValue();
  v8 = *Value;
  v7 = Value[1];
  v9 = Value[2];
  v10 = Value[3];
  *(_QWORD *)(v1 + 32) = *Value;
  *(_QWORD *)(v1 + 40) = v7;
  *(_QWORD *)(v1 + 48) = v9;
  *(_QWORD *)(v1 + 56) = v10;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v8);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v9);
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v3);
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v4);
  if (!*(_QWORD *)(v0 + 8))
    __break(1u);
  swift_retain();
  swift_retain();
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

uint64_t implicit closure #4 in implicit closure #3 in _AppearanceActionModifier.MergedCallbacks.updateValue()(uint64_t result)
{
  uint64_t v1;
  int v2;
  BOOL v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;

  v2 = *(_DWORD *)(result + 20);
  v3 = __OFSUB__(v2, 1);
  v4 = v2 - 1;
  if (v3)
  {
    __break(1u);
LABEL_12:
    swift_once();
    goto LABEL_6;
  }
  v5 = result;
  *(_DWORD *)(result + 20) = v4;
  if (v4 || (*(_BYTE *)(result + 64) & 1) != 0)
    return result;
  *(_BYTE *)(result + 64) = 1;
  swift_retain();
  specialized static Update.begin()();
  v1 = swift_allocObject();
  *(_QWORD *)(v1 + 16) = partial apply for closure #1 in _AppearanceActionModifier.MergedBox.update();
  *(_QWORD *)(v1 + 24) = v5;
  v6 = one-time initialization token for actions;
  swift_retain();
  if (v6 != -1)
    goto LABEL_12;
LABEL_6:
  v7 = static Update.actions;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
  v8 = v7[2];
  v9 = v7[3];
  v10 = v8 + 1;
  if (v8 >= v9 >> 1)
  {
    v15 = v8 + 1;
    v12 = v7;
    v13 = v7[2];
    v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v8 + 1, 1, v12);
    v8 = v13;
    v10 = v15;
    v7 = v14;
  }
  v7[2] = v10;
  v11 = &v7[2 * v8];
  v11[4] = partial apply for thunk for @escaping @callee_guaranteed () -> ();
  v11[5] = v1;
  static Update.actions = v7;
  swift_bridgeObjectRelease();
  static Update.end()();
  return swift_release();
}

void protocol witness for static StatefulRule.initialValue.getter in conformance _AppearanceActionModifier.MergedCallbacks(_QWORD *a1@<X8>)
{
  *a1 = 1;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _AppearanceActionModifier(_DWORD *a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v5 = *a2;
  v6 = *((_DWORD *)a2 + 2);
  v7 = a2[2];
  v8 = *((_DWORD *)a2 + 20);
  v9 = *MEMORY[0x24BE096C0];
  LODWORD(v14) = *a1;
  v15 = 1;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  LOBYTE(v19) = 0;
  DWORD1(v19) = 0;
  DWORD2(v19) = v9;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type AppearanceEffect and conformance AppearanceEffect();
  v13 = a2[3];
  Attribute.init<A>(body:value:flags:update:)();
  v10 = AGGraphSetFlags();
  v14 = v5;
  LODWORD(v15) = v6;
  v16 = v7;
  v11 = a2[4];
  v17 = v13;
  v18 = v11;
  v19 = *(_OWORD *)(a2 + 5);
  v20 = *(_OWORD *)(a2 + 7);
  v21 = a2[9];
  v22 = v8;
  return a3(v10, &v14);
}

uint64_t View.onAppear(perform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[4];

  v5[0] = a1;
  v5[1] = a2;
  v5[2] = 0;
  v5[3] = 0;
  return View.modifier<A>(_:)(v5, a3, &type metadata for _AppearanceActionModifier, a4);
}

uint64_t View.onDisappear(perform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[4];

  v5[0] = 0;
  v5[1] = 0;
  v5[2] = a1;
  v5[3] = a2;
  return View.modifier<A>(_:)(v5, a3, &type metadata for _AppearanceActionModifier, a4);
}

Swift::Void __swiftcall AppearanceEffect.updateValue()()
{
  uint64_t v0;
  int v1;
  int v2;
  uint64_t *Value;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*(_DWORD *)(v0 + 48) == *MEMORY[0x24BE096C0])
    *(_DWORD *)(v0 + 48) = AGGraphGetCurrentAttribute();
  v1 = *(_DWORD *)(v0 + 44);
  v2 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v1 != v2)
  {
    *(_DWORD *)(v0 + 44) = v2;
    AppearanceEffect.disappeared()();
  }
  Value = (uint64_t *)AGGraphGetValue();
  v4 = *Value;
  v5 = Value[1];
  v6 = Value[2];
  v7 = Value[3];
  v8 = *(_QWORD *)(v0 + 8);
  v9 = *(_QWORD *)(v0 + 16);
  v10 = *(_QWORD *)(v0 + 24);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*Value);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v6);
  outlined consume of _AppearanceActionModifier?(v8, v9, v10);
  *(_QWORD *)(v0 + 8) = v4;
  *(_QWORD *)(v0 + 16) = v5;
  *(_QWORD *)(v0 + 24) = v6;
  *(_QWORD *)(v0 + 32) = v7;
  AppearanceEffect.appeared()();
}

Swift::Void __swiftcall AppearanceEffect.disappeared()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;

  if (*(_BYTE *)(v0 + 40) == 1)
  {
    v1 = *(_QWORD *)(v0 + 8);
    if (v1 != 1)
    {
      v2 = *(_QWORD *)(v0 + 24);
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*(_QWORD *)(v0 + 8));
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v2);
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v1);
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v2);
      v3 = *(_QWORD *)(v0 + 24);
      if (v3)
      {
        v4 = *(_QWORD *)(v0 + 32);
        v5 = swift_allocObject();
        *(_QWORD *)(v5 + 16) = v3;
        *(_QWORD *)(v5 + 24) = v4;
        v6 = swift_allocObject();
        *(_QWORD *)(v6 + 16) = thunk for @escaping @callee_guaranteed () -> ()partial apply;
        *(_QWORD *)(v6 + 24) = v5;
        outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v3);
        swift_retain();
        specialized static Update.begin()();
        v7 = swift_allocObject();
        *(_QWORD *)(v7 + 16) = thunk for @escaping @callee_guaranteed () -> ()partial apply;
        *(_QWORD *)(v7 + 24) = v6;
        v8 = one-time initialization token for actions;
        swift_retain();
        if (v8 != -1)
          swift_once();
        v9 = static Update.actions;
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
        v10 = v9[2];
        v11 = v9[3];
        v12 = v10 + 1;
        if (v10 >= v11 >> 1)
        {
          v17 = v10 + 1;
          v14 = v9;
          v15 = v9[2];
          v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v10 + 1, 1, v14);
          v10 = v15;
          v12 = v17;
          v9 = v16;
        }
        v9[2] = v12;
        v13 = &v9[2 * v10];
        v13[4] = thunk for @escaping @callee_guaranteed () -> ()partial apply;
        v13[5] = v7;
        static Update.actions = v9;
        swift_bridgeObjectRelease();
        static Update.end()();
        swift_release();
        swift_release();
      }
    }
    *(_BYTE *)(v0 + 40) = 0;
  }
}

Swift::Void __swiftcall AppearanceEffect.appeared()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  int CurrentAttribute;
  int v15;
  id v16;
  void *v17;
  id v18;
  uint64_t Context;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;

  if ((*(_BYTE *)(v0 + 40) & 1) != 0)
    return;
  v1 = *(_QWORD *)(v0 + 8);
  if (v1 != 1)
  {
    v2 = *(_QWORD *)(v0 + 24);
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*(_QWORD *)(v0 + 8));
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v2);
    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v1);
    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v2);
    v3 = *(_QWORD *)(v0 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v0 + 16);
      v5 = swift_allocObject();
      *(_QWORD *)(v5 + 16) = v3;
      *(_QWORD *)(v5 + 24) = v4;
      v6 = swift_allocObject();
      *(_QWORD *)(v6 + 16) = thunk for @escaping @callee_guaranteed () -> ()partial apply;
      *(_QWORD *)(v6 + 24) = v5;
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v3);
      swift_retain();
      specialized static Update.begin()();
      v7 = swift_allocObject();
      *(_QWORD *)(v7 + 16) = thunk for @escaping @callee_guaranteed () -> ()partial apply;
      *(_QWORD *)(v7 + 24) = v6;
      v8 = one-time initialization token for actions;
      swift_retain();
      if (v8 != -1)
        swift_once();
      v9 = static Update.actions;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      v10 = v9[2];
      v11 = v9[3];
      v12 = v10 + 1;
      if (v10 >= v11 >> 1)
      {
        v33 = v10 + 1;
        v30 = v9;
        v31 = v9[2];
        v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v10 + 1, 1, v30);
        v10 = v31;
        v12 = v33;
        v9 = v32;
      }
      v9[2] = v12;
      v13 = &v9[2 * v10];
      v13[4] = thunk for @escaping @callee_guaranteed () -> ()partial apply;
      v13[5] = v7;
      static Update.actions = v9;
      swift_bridgeObjectRelease();
      static Update.end()();
      swift_release();
      swift_release();
    }
  }
  *(_BYTE *)(v0 + 40) = 1;
  CurrentAttribute = AGGraphGetCurrentAttribute();
  v15 = *MEMORY[0x24BE096C0];
  if (CurrentAttribute == *MEMORY[0x24BE096C0])
  {
    v16 = (id)AGSubgraphGetCurrent();
    if (!v16)
    {
LABEL_36:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return;
    }
    v17 = v16;
    v18 = (id)AGSubgraphGetGraph();

  }
  else
  {
    v18 = (id)AGGraphGetAttributeGraph();
  }
  Context = AGGraphGetContext();
  if (!Context)
  {
    __break(1u);
    goto LABEL_36;
  }
  v20 = Context;
  swift_retain();

  swift_beginAccess();
  v21 = *(_BYTE *)(v20 + 169);
  swift_release();
  if ((v21 & 1) == 0)
    return;
  if (one-time initialization token for v6 != -1)
    swift_once();
  v22 = static Semantics.v6;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FAB4 == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0)
      return;
  }
  else if (static Semantics.forced < v22)
  {
    return;
  }
  if (AGGraphGetCurrentAttribute() == v15)
  {
    __break(1u);
    goto LABEL_34;
  }
  v23 = AGCreateWeakAttribute();
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = v23;
  specialized static Update.begin()();
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = partial apply for closure #2 in AppearanceEffect.appeared();
  *(_QWORD *)(v22 + 24) = v24;
  v25 = one-time initialization token for actions;
  swift_retain();
  if (v25 != -1)
LABEL_34:
    swift_once();
  v26 = static Update.actions;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26[2] + 1, 1, v26);
  v28 = v26[2];
  v27 = v26[3];
  if (v28 >= v27 >> 1)
    v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v27 > 1), v28 + 1, 1, v26);
  v26[2] = v28 + 1;
  v29 = &v26[2 * v28];
  v29[4] = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  v29[5] = v22;
  static Update.actions = v26;
  swift_bridgeObjectRelease();
  static Update.end()();
  swift_release();
}

void closure #2 in AppearanceEffect.appeared()()
{
  uint64_t v0;

  if (AGWeakAttributeGetAttribute() != *MEMORY[0x24BE096C0])
  {
    AGGraphGetAttributeInfo();
    if (*(_QWORD *)(v0 + 8) != 1)
      AppearanceEffect.disappeared()();
  }
}

void static AppearanceEffect.willRemove(attribute:)()
{
  uint64_t v0;

  AGGraphGetAttributeInfo();
  if (*(_QWORD *)(v0 + 8) != 1)
    AppearanceEffect.disappeared()();
}

void protocol witness for static RemovableAttribute.willRemove(attribute:) in conformance AppearanceEffect()
{
  uint64_t v0;

  AGGraphGetAttributeInfo();
  if (*(_QWORD *)(v0 + 8) != 1)
    AppearanceEffect.disappeared()();
}

unint64_t lazy protocol witness table accessor for type AppearanceEffect and conformance AppearanceEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AppearanceEffect and conformance AppearanceEffect;
  if (!lazy protocol witness table cache variable for type AppearanceEffect and conformance AppearanceEffect)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AppearanceEffect, &type metadata for AppearanceEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppearanceEffect and conformance AppearanceEffect);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _AppearanceActionModifier.MergedCallbacks and conformance _AppearanceActionModifier.MergedCallbacks()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _AppearanceActionModifier.MergedCallbacks and conformance _AppearanceActionModifier.MergedCallbacks;
  if (!lazy protocol witness table cache variable for type _AppearanceActionModifier.MergedCallbacks and conformance _AppearanceActionModifier.MergedCallbacks)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _AppearanceActionModifier.MergedCallbacks, &unk_25063BE48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AppearanceActionModifier.MergedCallbacks and conformance _AppearanceActionModifier.MergedCallbacks);
  }
  return result;
}

uint64_t outlined consume of _AppearanceActionModifier?(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != 1)
  {
    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(result);
    return outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(a3);
  }
  return result;
}

uint64_t specialized static AppearanceEffect.didReinsert(attribute:)()
{
  uint64_t result;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;

  result = AGGraphGetAttributeInfo();
  if (*(_DWORD *)(v1 + 48) != *MEMORY[0x24BE096C0])
  {
    AGGraphInvalidateValue();
    v2 = (id)AGGraphGetAttributeGraph();
    result = AGGraphGetContext();
    if (result)
    {
      v3 = result;
      swift_retain();

      if ((*(uint64_t (**)(void))(*(_QWORD *)v3 + 192))())
      {
        v5 = v4;
        ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t))(v5 + 16))(ObjectType, v5);
        swift_release();
        return swift_unknownObjectRelease();
      }
      else
      {
        return swift_release();
      }
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AppearanceEffect(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AppearanceEffect and conformance AppearanceEffect();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_QWORD *destroy for _AppearanceActionModifier(_QWORD *result)
{
  _QWORD *v1;

  v1 = result;
  if (*result)
    result = (_QWORD *)swift_release();
  if (v1[2])
    return (_QWORD *)swift_release();
  return result;
}

_QWORD *initializeWithCopy for _AppearanceActionModifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*a2)
  {
    v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  v5 = a2[2];
  if (v5)
  {
    v6 = a2[3];
    a1[2] = v5;
    a1[3] = v6;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  }
  return a1;
}

_QWORD *assignWithCopy for _AppearanceActionModifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  if (*a1)
  {
    if (v4)
    {
      v5 = a2[1];
      *a1 = v4;
      a1[1] = v5;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    v6 = a2[1];
    *a1 = v4;
    a1[1] = v6;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  v7 = a2[2];
  if (!a1[2])
  {
    if (v7)
    {
      v9 = a2[3];
      a1[2] = v7;
      a1[3] = v9;
      swift_retain();
      return a1;
    }
LABEL_14:
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    return a1;
  }
  if (!v7)
  {
    swift_release();
    goto LABEL_14;
  }
  v8 = a2[3];
  a1[2] = v7;
  a1[3] = v8;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for _AppearanceActionModifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  if (*a1)
  {
    if (v4)
    {
      v5 = a2[1];
      *a1 = v4;
      a1[1] = v5;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    v6 = a2[1];
    *a1 = v4;
    a1[1] = v6;
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  v7 = a2[2];
  if (!a1[2])
  {
    if (v7)
    {
      v9 = a2[3];
      a1[2] = v7;
      a1[3] = v9;
      return a1;
    }
LABEL_14:
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    return a1;
  }
  if (!v7)
  {
    swift_release();
    goto LABEL_14;
  }
  v8 = a2[3];
  a1[2] = v7;
  a1[3] = v8;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for _AppearanceActionModifier(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _AppearanceActionModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for _AppearanceActionModifier()
{
  return &type metadata for _AppearanceActionModifier;
}

uint64_t type metadata accessor for _AppearanceActionModifier.MergedBox()
{
  return objc_opt_self();
}

uint64_t destroy for AppearanceEffect(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = result;
  v2 = *(_QWORD *)(result + 8);
  if (v2)
  {
    if (v2 == 1)
      return result;
    result = swift_release();
  }
  if (*(_QWORD *)(v1 + 24))
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for AppearanceEffect(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = (_OWORD *)(a1 + 8);
  v5 = (_OWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    if (v6 == 1)
    {
      v7 = *(_OWORD *)(a2 + 24);
      *v4 = *v5;
      *(_OWORD *)(a1 + 24) = v7;
      goto LABEL_9;
    }
    v8 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v8;
    swift_retain();
  }
  else
  {
    *v4 = *v5;
  }
  v9 = *(_QWORD *)(a2 + 24);
  if (v9)
  {
    v10 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v9;
    *(_QWORD *)(a1 + 32) = v10;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
LABEL_9:
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 44) = *(_QWORD *)(a2 + 44);
  return a1;
}

uint64_t assignWithCopy for AppearanceEffect(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 *v5;
  uint64_t v6;
  __int128 *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  v5 = (__int128 *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  v7 = (__int128 *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 8);
  if (v4 == 1)
  {
    if (v6)
    {
      if (v6 == 1)
      {
        v8 = *v7;
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
LABEL_25:
        *v5 = v8;
        goto LABEL_26;
      }
      v11 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 8) = v6;
      *(_QWORD *)(a1 + 16) = v11;
      swift_retain();
    }
    else
    {
      *v5 = *v7;
    }
    v12 = *(_QWORD *)(a2 + 24);
    if (!v12)
    {
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      goto LABEL_26;
    }
LABEL_22:
    v15 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v12;
    *(_QWORD *)(a1 + 32) = v15;
    swift_retain();
    goto LABEL_26;
  }
  if (v6 != 1)
  {
    if (v4)
    {
      if (v6)
      {
        v10 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 8) = v6;
        *(_QWORD *)(a1 + 16) = v10;
        swift_retain();
        swift_release();
        goto LABEL_18;
      }
      swift_release();
    }
    else if (v6)
    {
      v13 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 8) = v6;
      *(_QWORD *)(a1 + 16) = v13;
      swift_retain();
      goto LABEL_18;
    }
    *v5 = *v7;
LABEL_18:
    v5 = (__int128 *)(a1 + 24);
    v12 = *(_QWORD *)(a2 + 24);
    if (*(_QWORD *)(a1 + 24))
    {
      if (v12)
      {
        v14 = *(_QWORD *)(a2 + 32);
        *(_QWORD *)(a1 + 24) = v12;
        *(_QWORD *)(a1 + 32) = v14;
        swift_retain();
        swift_release();
        goto LABEL_26;
      }
      swift_release();
    }
    else if (v12)
    {
      goto LABEL_22;
    }
    v8 = *(_OWORD *)(a2 + 24);
    goto LABEL_25;
  }
  outlined destroy of _AppearanceActionModifier((_QWORD *)(a1 + 8));
  v9 = v7[1];
  *v5 = *v7;
  v5[1] = v9;
LABEL_26:
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  return a1;
}

_QWORD *outlined destroy of _AppearanceActionModifier(_QWORD *a1)
{
  destroy for _AppearanceActionModifier(a1);
  return a1;
}

uint64_t assignWithTake for AppearanceEffect(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = (_OWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  v7 = (_OWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 8);
  if (v4 == 1)
    goto LABEL_4;
  if (v6 != 1)
  {
    if (v4)
    {
      if (v6)
      {
        v10 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 8) = v6;
        *(_QWORD *)(a1 + 16) = v10;
        swift_release();
        goto LABEL_13;
      }
      swift_release();
    }
    else if (v6)
    {
      v11 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 8) = v6;
      *(_QWORD *)(a1 + 16) = v11;
      goto LABEL_13;
    }
    *v5 = *v7;
LABEL_13:
    v12 = *(_QWORD *)(a2 + 24);
    if (*(_QWORD *)(a1 + 24))
    {
      if (v12)
      {
        v13 = *(_QWORD *)(a2 + 32);
        *(_QWORD *)(a1 + 24) = v12;
        *(_QWORD *)(a1 + 32) = v13;
        swift_release();
        goto LABEL_5;
      }
      swift_release();
    }
    else if (v12)
    {
      v14 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 24) = v12;
      *(_QWORD *)(a1 + 32) = v14;
      goto LABEL_5;
    }
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    goto LABEL_5;
  }
  outlined destroy of _AppearanceActionModifier((_QWORD *)(a1 + 8));
LABEL_4:
  v8 = v7[1];
  *v5 = *v7;
  v5[1] = v8;
LABEL_5:
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 44) = *(_QWORD *)(a2 + 44);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppearanceEffect(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFFD && *(_BYTE *)(a1 + 52))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  v5 = __OFSUB__(v4, 1);
  v6 = v4 - 1;
  if (v6 < 0 != v5)
    v6 = -1;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for AppearanceEffect(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 52) = 1;
  }
  else
  {
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 52) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for AppearanceEffect()
{
  return &type metadata for AppearanceEffect;
}

uint64_t sub_234F2772C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[1];
  v5 = type metadata accessor for ModifiedContent(255, *a1, (uint64_t)&type metadata for _AppearanceActionModifier, a4);
  v7[0] = v4;
  v7[1] = &protocol witness table for _AppearanceActionModifier;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v7);
}

void *type metadata accessor for _AppearanceActionModifier.MergedCallbacks()
{
  return &unk_25063BE48;
}

uint64_t partial apply for implicit closure #4 in implicit closure #3 in _AppearanceActionModifier.MergedCallbacks.updateValue()()
{
  uint64_t v0;

  return implicit closure #4 in implicit closure #3 in _AppearanceActionModifier.MergedCallbacks.updateValue()(v0);
}

uint64_t partial apply for closure #1 in _AppearanceActionModifier.MergedBox.update()()
{
  uint64_t v0;

  return closure #1 in _AppearanceActionModifier.MergedBox.update()(v0);
}

uint64_t sub_234F277A8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_234F277CC()
{
  return swift_deallocObject();
}

void partial apply for closure #2 in AppearanceEffect.appeared()()
{
  closure #2 in AppearanceEffect.appeared()();
}

uint64_t _PreferenceValue.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t WeakValue;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  WeakValue = AGGraphGetWeakValue();
  if (WeakValue)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a2, WeakValue, AssociatedTypeWitness);
  else
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(v3, v4);
}

uint64_t static PreferenceKey._delay<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  return swift_retain();
}

uint64_t _PreferenceValue.attribute.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t _PreferenceValue.attribute.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*_PreferenceValue.attribute.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _PreferenceValue.init(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t _DelayedPreferenceView.transform.getter(uint64_t a1)
{
  swift_retain();
  return a1;
}

uint64_t _DelayedPreferenceView.transform.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_release();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*_DelayedPreferenceView.transform.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void static _DelayedPreferenceView._makeView(view:inputs:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _BYTE v21[16];
  uint64_t AssociatedTypeWitness;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v10 = *a1;
  v11 = *((_DWORD *)a2 + 2);
  v12 = a2[2];
  v14 = a2[5];
  v13 = a2[6];
  v15 = *((_DWORD *)a2 + 20);
  v31 = *a2;
  v32 = v11;
  v34 = *(_OWORD *)(a2 + 3);
  v33 = v12;
  v35 = v14;
  v36 = v13;
  v37 = *(_OWORD *)(a2 + 7);
  v38 = a2[9];
  v39 = v15;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferencesInputs.add<A>(_:)(a3, a3, a5, v16);
  v27 = 0;
  LOBYTE(v28) = 1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v23 = type metadata accessor for PreferenceValueAttribute(0, a3, a5, v17);
  v24 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for PreferenceValueAttribute<A>, v23);
  v18 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v27, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v21, v23, MEMORY[0x24BEE4078], v18, MEMORY[0x24BEE40A8], v19);
  v20 = v25;
  v25 = v10;
  v26 = v20;
  v27 = a3;
  v28 = a4;
  v29 = a5;
  v30 = a6;
  type metadata accessor for DelayedPreferenceChild();
}

uint64_t sub_234F27AF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int ShouldRecordTree;
  void (*v16)(uint64_t *__return_ptr, int *, uint64_t *);
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t result;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  _QWORD v42[12];
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;

  v42[3] = a1;
  v42[4] = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DelayedPreferenceChild<A, B>, a1);
  v5 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v43, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v42, a1, v2, v5, v1, v6);
  _GraphValue.init(_:)(v59, &v41);
  v36 = v41;
  v7 = *(_QWORD *)(v3 - 192);
  v8 = *(_QWORD *)(v3 - 176);
  v26 = *(_DWORD *)(v3 - 164);
  v27 = *(_DWORD *)(v3 - 168);
  v30 = *(_DWORD *)(v3 - 160);
  v28 = *(_DWORD *)(v3 - 156);
  v29 = *(_DWORD *)(v3 - 184);
  v9 = *(_QWORD *)(v3 - 152);
  v10 = *(_QWORD *)(v3 - 144);
  v12 = *(_DWORD *)(v3 - 136);
  v11 = *(_DWORD *)(v3 - 132);
  v13 = *(_DWORD *)(v3 - 128);
  v14 = *(_DWORD *)(v3 - 124);
  v24 = *(_DWORD *)(v3 - 116);
  v25 = *(_DWORD *)(v3 - 120);
  v23 = *(_DWORD *)(v3 - 112);
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v59 = v7;
  v60 = v29;
  v62 = v8;
  v63 = v27;
  v64 = v26;
  v66 = v28;
  v67 = v9;
  v68 = v10;
  v69 = v12;
  v70 = v11;
  v71 = v13;
  v72 = v14;
  v73 = v25;
  v74 = v24;
  v75 = v23;
  v37 = v36;
  v43 = v7;
  v44 = v29;
  v45 = v8;
  v46 = v27;
  v47 = v26;
  v48 = 0;
  v49 = v28;
  v50 = v9;
  v51 = v10;
  v52 = v12;
  v53 = v11;
  v54 = v13;
  v55 = v14;
  v56 = v25;
  v57 = v24;
  v58 = v23;
  v16 = *(void (**)(uint64_t *__return_ptr, int *, uint64_t *))(v32 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16(&v38, &v37, &v43);
  v65 = v30;
  if ((ShouldRecordTree & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)&v38, (uint64_t)&v59);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  swift_release();
  swift_release();
  v17 = v38;
  v18 = v39;
  v19 = v40;
  v59 = v38;
  v60 = v39;
  v61 = v40;
  v21 = _ViewOutputs.subscript.getter(v33, v33, v34, v20);
  static PreferenceValueAttribute.setSource(_:of:)(v21 | ((HIDWORD(v21) & 1) << 32), v31, v33, v34);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  *(_QWORD *)v35 = v17;
  *(_DWORD *)(v35 + 8) = v18;
  *(_DWORD *)(v35 + 12) = v19;
  return result;
}

uint64_t PreferenceValueAttribute.init(source:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = result;
  *(_BYTE *)(a3 + 8) = a2 & 1;
  return result;
}

uint64_t static PreferenceValueAttribute.setSource(_:of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for PreferenceValueAttribute(0, a3, a4, a4);
  return AGGraphMutateAttribute();
}

void protocol witness for static View._makeView(view:inputs:) in conformance _DelayedPreferenceView<A, B>(int *a1, uint64_t *a2, uint64_t *a3)
{
  static _DelayedPreferenceView._makeView(view:inputs:)(a1, a2, a3[2], a3[3], a3[4], a3[5]);
}

uint64_t DelayedPreferenceChild.value.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, char *a6@<X8>)
{
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t CurrentAttribute;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  unint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  void *v52;
  char *v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  int v59;
  int v60;
  char v61[24];
  uint64_t v62;

  v51 = a6;
  v52 = a5;
  v9 = a1;
  v62 = *MEMORY[0x24BDAC8D0];
  v10 = HIDWORD(a1);
  v11 = type metadata accessor for ObservationTracking._AccessList();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v49 = (char *)&v45 - v16;
  MEMORY[0x24BDAC7A8](v17);
  v50 = (char *)&v45 - v18;
  type metadata accessor for ObservationTracking._AccessList?();
  v46 = v19;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v45 - v23;
  v48 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v53 = (char *)&v45 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v27);
  v47 = (char *)&v45 - v28;
  v55 = a2;
  v56 = a3;
  v57 = a4;
  v58 = v52;
  v59 = v9;
  v60 = v10;
  CurrentAttribute = AGGraphGetCurrentAttribute();
  if ((_DWORD)CurrentAttribute == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    a4 = CurrentAttribute;
    if (one-time initialization token for lastestAccessLists == -1)
      goto LABEL_3;
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  v52 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v24, 1, 1, v11);
  MEMORY[0x24BDAC7A8](v30);
  *(&v45 - 4) = a3;
  *(&v45 - 3) = (uint64_t)partial apply for closure #1 in DelayedPreferenceChild.value.getter;
  *(&v45 - 2) = (uint64_t)&v54;
  v31 = type metadata accessor for Error();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v24, (uint64_t)partial apply for closure #1 in _withObservation<A>(do:), (uint64_t)(&v45 - 6), (uint64_t)v46, v31, a3, MEMORY[0x24BEE3F20], (uint64_t)v61);
  outlined init with copy of ObservationTracking._AccessList?((uint64_t)v24, (uint64_t)v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v21, 1, v11) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v21);
    v32 = v51;
  }
  else
  {
    v33 = v50;
    v46 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v46(v50, v21, v11);
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v49, v33, v11);
    swift_beginAccess();
    v34 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v34;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v34 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v34 + 2) + 1, 1, (unint64_t)v34);
      static ObservationRegistrar.lastestAccessLists = v34;
    }
    v32 = v51;
    v37 = *((_QWORD *)v34 + 2);
    v36 = *((_QWORD *)v34 + 3);
    if (v37 >= v36 >> 1)
    {
      v34 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1, (unint64_t)v34);
      static ObservationRegistrar.lastestAccessLists = v34;
    }
    *((_QWORD *)v34 + 2) = v37 + 1;
    v46(&v34[((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(_QWORD *)(v12 + 72) * v37], v49, v11);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v50, v11);
  }
  v38 = *(void (**)(char *, char *, uint64_t))(v48 + 32);
  v39 = v47;
  v38(v47, v53, a3);
  outlined destroy of ObservationTracking._AccessList?((uint64_t)v24);
  v38(v32, v39, a3);
  v40 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v40)
  {
    v41 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    v42 = *(_QWORD *)(v12 + 72);
    v43 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v43(v14, v41, v11);
      installObservationSlow<A>(accessList:attribute:)((uint64_t)v14, a4, a3);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
      v41 += v42;
      --v40;
    }
    while (v40);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v52;
  return swift_bridgeObjectRelease();
}

void closure #1 in DelayedPreferenceChild.value.getter()
{
  type metadata accessor for _DelayedPreferenceView();
}

uint64_t sub_234F283FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  return Attribute.syncMainIfReferences<A>(do:)((void (*)(_QWORD))partial apply for closure #1 in closure #1 in DelayedPreferenceChild.value.getter, (uint64_t)&v4, a1, v1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance DelayedPreferenceChild<A, B>@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  unint64_t *v2;

  return DelayedPreferenceChild.value.getter(*v2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(void **)(a1 + 40), a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DelayedPreferenceChild<A, B>()
{
  return specialized DelayedPreferenceChild.description.getter();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance DelayedPreferenceChild<A, B>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for DelayedPreferenceChild<A, B>, a1);
  return static AsyncAttribute.flags.getter();
}

void View.preferenceValue<A, B>(_:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v10;
  uint64_t v15;
  uint64_t v16;
  double v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v27[1] = a7;
  v28 = a8;
  v29 = a2;
  v30 = a3;
  v31 = a9;
  v15 = *(_QWORD *)(a4 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  v17 = MEMORY[0x24BDAC7A8](a1);
  v18 = (char *)v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v18, v10, v19, v17);
  v20 = (*(unsigned __int8 *)(v15 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v21 = (v16 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = (char *)swift_allocObject();
  *((_QWORD *)v22 + 2) = a4;
  *((_QWORD *)v22 + 3) = a5;
  *((_QWORD *)v22 + 4) = a6;
  *((_QWORD *)v22 + 5) = a7;
  v23 = v28;
  *((_QWORD *)v22 + 6) = v28;
  *((_QWORD *)v22 + 7) = a10;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(&v22[v20], v18, a4);
  v24 = &v22[v21];
  v25 = v30;
  *(_QWORD *)v24 = v29;
  *((_QWORD *)v24 + 1) = v25;
  type metadata accessor for _DetachedKey(255, a5, v23, v26);
  v32 = a5;
  v33 = a6;
  v34 = v23;
  v35 = a10;
  type metadata accessor for _PreferenceReadingView();
}

void sub_234F28594(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 128) = v2;
  *(_QWORD *)(v3 - 120) = v1;
  *(_QWORD *)(v3 - 112) = a1;
  *(_QWORD *)(v3 - 104) = &protocol witness table for _DetachedKey<A>;
  *(_QWORD *)(v3 - 96) = *(_QWORD *)(v3 - 168);
  *(_QWORD *)(v3 - 88) = &protocol witness table for _PreferenceReadingView<A, B>;
  type metadata accessor for _DetachedView();
}

uint64_t sub_234F285C0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)(v1 - 136);
  *v2 = partial apply for closure #1 in View.preferenceValue<A, B>(_:_:);
  v2[1] = v0;
  return swift_retain();
}

void closure #1 in View.preferenceValue<A, B>(_:_:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v16;

  type metadata accessor for _DetachedKey(0, a6, a9, a4);
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a5;
  v16[3] = a6;
  v16[4] = a7;
  v16[5] = a8;
  v16[6] = a9;
  v16[7] = a10;
  v16[8] = *a1;
  v16[9] = a3;
  v16[10] = a4;
  type metadata accessor for _PreferenceReadingView();
}

#error "234F286D8: call analysis failed (funcsize=12)"

uint64_t sub_234F286DC()
{
  swift_retain();
  return swift_release();
}

uint64_t closure #1 in closure #1 in View.preferenceValue<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _QWORD *a8@<X8>, uint64_t a9, uint64_t a10)
{
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _OWORD v27[6];
  uint64_t v28;

  v17 = *(_OWORD *)(a1 + 80);
  v27[4] = *(_OWORD *)(a1 + 64);
  v27[5] = v17;
  v28 = *(_QWORD *)(a1 + 96);
  v18 = *(_OWORD *)(a1 + 16);
  v27[0] = *(_OWORD *)a1;
  v27[1] = v18;
  v19 = *(_OWORD *)(a1 + 48);
  v27[2] = *(_OWORD *)(a1 + 32);
  v27[3] = v19;
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = a4;
  *(_QWORD *)(v20 + 24) = a5;
  *(_QWORD *)(v20 + 32) = a6;
  *(_QWORD *)(v20 + 40) = a7;
  *(_QWORD *)(v20 + 48) = a9;
  *(_QWORD *)(v20 + 56) = a10;
  *(_QWORD *)(v20 + 64) = a2;
  *(_QWORD *)(v20 + 72) = a3;
  v21 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v20 + 144) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v20 + 160) = v21;
  *(_QWORD *)(v20 + 176) = *(_QWORD *)(a1 + 96);
  v22 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v20 + 80) = *(_OWORD *)a1;
  *(_OWORD *)(v20 + 96) = v22;
  v23 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v20 + 112) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v20 + 128) = v23;
  type metadata accessor for _PreferenceValue(0, a5, a9, v24);
  _PreferenceValue._force<A>(_:)((uint64_t)partial apply for closure #1 in closure #1 in closure #1 in View.preferenceValue<A, B>(_:_:), v20, a8);
  swift_retain();
  outlined retain of _DetachedPlaceholder<_DetachedKey<A1>>((uint64_t)v27);
  return swift_release();
}

uint64_t PreferenceValueAttribute.source.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t PreferenceValueAttribute.source.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)v2 = result;
  *(_BYTE *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*PreferenceValueAttribute.source.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t static PreferenceValueAttribute.initialValue.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;

  (*(void (**)(void))(a1 + 16))();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a2, 0, 1, AssociatedTypeWitness);
}

uint64_t PreferenceValueAttribute.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t WeakValue;

  if (*(_BYTE *)(v2 + 8) == 1)
  {
    v4 = *(_QWORD *)(a1 + 16);
    v5 = *(_QWORD *)(a1 + 24);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 16);
    v5 = *(_QWORD *)(a1 + 24);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    WeakValue = AGGraphGetWeakValue();
    if (WeakValue)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a2, WeakValue, AssociatedTypeWitness);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
}

uint64_t PreferenceValueAttribute.description.getter()
{
  return specialized PreferenceValueAttribute.description.getter();
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance PreferenceValueAttribute<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static PreferenceValueAttribute.initialValue.getter(*(_QWORD *)(a1 + 24), a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PreferenceValueAttribute<A>()
{
  return specialized PreferenceValueAttribute.description.getter();
}

uint64_t protocol witness for static _AttributeBody._updateDefault(_:) in conformance PreferenceValueAttribute<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  double v15;
  uint64_t v16;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v17 - v7;
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v17 - v11;
  static PreferenceValueAttribute.initialValue.getter(v3, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, AssociatedTypeWitness) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v14 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(v12, v8, AssociatedTypeWitness);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17[-2] = a2;
  v17[-1] = MEMORY[0x23B7C9C04](&protocol conformance descriptor for PreferenceValueAttribute<A>, a2, v15);
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v12, (uint64_t)partial apply for closure #1 in static Rule._updateDefault(_:), (uint64_t)&v17[-4], AssociatedTypeWitness, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v16);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, AssociatedTypeWitness);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance PreferenceValueAttribute<A>(uint64_t a1)
{
  return static AsyncAttribute.flags.getter();
}

uint64_t type metadata accessor for PreferenceValueAttribute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PreferenceValueAttribute);
}

void type metadata accessor for DelayedPreferenceChild()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t partial apply for closure #1 in static PreferenceValueAttribute.setSource(_:of:)(uint64_t a1)
{
  uint64_t result;

  result = AGCreateWeakAttribute();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = 0;
  return result;
}

uint64_t sub_234F28C0C()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in View.preferenceValue<A, B>(_:_:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;

  v2 = v1[2];
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (_QWORD *)((char *)v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  closure #1 in View.preferenceValue<A, B>(_:_:)(a1, (uint64_t)v1 + v4, *v5, v5[1], v2, v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t specialized DelayedPreferenceChild.description.getter()
{
  Swift::String v0;

  v0._countAndFlagsBits = static PreferenceKey.readableName.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0x203A79616C6544;
}

uint64_t specialized PreferenceValueAttribute.description.getter()
{
  Swift::String v0;

  v0._countAndFlagsBits = static PreferenceKey.readableName.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 36;
}

void base witness table accessor for _AttributeBody in PreferenceValueAttribute<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t instantiation function for generic protocol witness table for PreferenceValueAttribute<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for PreferenceValueAttribute<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_234F28DB8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = a1[1];
  *a2 = v2;
  a2[1] = v3;
  return swift_retain();
}

uint64_t sub_234F28DC4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  swift_retain();
  result = swift_release();
  *a2 = v4;
  a2[1] = v3;
  return result;
}

uint64_t sub_234F28E04()
{
  return 32;
}

__n128 sub_234F28E10(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t type metadata accessor for _PreferenceValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _PreferenceValue);
}

void type metadata accessor for _DelayedPreferenceView()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t __swift_memcpy9_4(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

_UNKNOWN **sub_234F28E48()
{
  return &protocol witness table for _DelayedPreferenceView<A, B>;
}

_UNKNOWN **sub_234F28E54()
{
  return &protocol witness table for _DelayedPreferenceView<A, B>;
}

uint64_t instantiation function for generic protocol witness table for DelayedPreferenceChild<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DelayedPreferenceChild<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in DelayedPreferenceChild<A, B>()
{
  JUMPOUT(0x23B7C9C04);
}

void partial apply for closure #1 in DelayedPreferenceChild.value.getter()
{
  closure #1 in DelayedPreferenceChild.value.getter();
}

uint64_t partial apply for closure #1 in closure #1 in DelayedPreferenceChild.value.getter(uint64_t (**a1)(uint64_t *))
{
  uint64_t (*v1)(uint64_t *);
  uint64_t v3;

  v1 = *a1;
  v3 = AGCreateWeakAttribute();
  return v1(&v3);
}

uint64_t sub_234F28F08()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in View.preferenceValue<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in closure #1 in View.preferenceValue<A, B>(_:_:)(a1, v2[9], v2[10], v2[2], v2[3], v2[4], v2[5], a2, v2[6], v2[7]);
}

uint64_t sub_234F28F60()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in View.preferenceValue<A, B>(_:_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, _OWORD *);
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[6];
  uint64_t v8;

  v2 = *(uint64_t (**)(uint64_t, _OWORD *))(v1 + 64);
  v3 = *(_OWORD *)(v1 + 160);
  v7[4] = *(_OWORD *)(v1 + 144);
  v7[5] = v3;
  v8 = *(_QWORD *)(v1 + 176);
  v4 = *(_OWORD *)(v1 + 96);
  v7[0] = *(_OWORD *)(v1 + 80);
  v7[1] = v4;
  v5 = *(_OWORD *)(v1 + 128);
  v7[2] = *(_OWORD *)(v1 + 112);
  v7[3] = v5;
  return v2(a1, v7);
}

uint64_t outlined retain of _DetachedPlaceholder<_DetachedKey<A1>>(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t View.transformEnvironment<A>(_:transform:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];

  v7 = *a1;
  v10[0] = a1;
  v10[1] = a2;
  v10[2] = a3;
  v8 = type metadata accessor for _EnvironmentKeyTransformModifier(0, *(_QWORD *)(*MEMORY[0x24BEE2B70] + v7 + 8), a3, a4);
  return View.modifier<A>(_:)(v10, a4, v8, a5);
}

uint64_t type metadata accessor for _EnvironmentKeyTransformModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _EnvironmentKeyTransformModifier);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance LineLimitModifier(unsigned int *a1, uint64_t a2)
{
  return specialized static EnvironmentModifier._makeInputs(modifier:inputs:)(*a1, a2);
}

uint64_t static EnvironmentModifier._makeInputs(modifier:inputs:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int v17;
  int v18;
  _DWORD v19[2];
  _BYTE v20[16];
  uint64_t updated;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v7 = *a1;
  v8 = *(_QWORD *)(a2 + 16);
  swift_beginAccess();
  v9 = *(_DWORD *)(v8 + 16);
  v19[0] = v7;
  v19[1] = v9;
  updated = type metadata accessor for UpdateEnvironment(0, a3, a4, v10);
  v22 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for UpdateEnvironment<A>, updated);
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Attribute<EnvironmentValues>, (uint64_t)&type metadata for EnvironmentValues, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE095F0]);
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v19, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v20, updated, MEMORY[0x24BEE4078], v11, MEMORY[0x24BEE40A8], v12);
  v13 = MEMORY[0x24BEE4AF8];
  v14 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
  v15 = swift_allocObject();
  *(_DWORD *)(v15 + 16) = v18;
  *(_QWORD *)(v15 + 24) = v13;
  *(_OWORD *)(v15 + 32) = 0u;
  *(_OWORD *)(v15 + 48) = 0u;
  *(_OWORD *)(v15 + 64) = 0u;
  *(_WORD *)(v15 + 80) = 256;
  *(_QWORD *)(v15 + 88) = v14;
  result = swift_release();
  *(_QWORD *)(a2 + 16) = v15;
  v17 = *(_DWORD *)(a2 + 32);
  if ((v17 & 0x20) == 0)
    *(_DWORD *)(a2 + 32) = v17 | 0x20;
  return result;
}

uint64_t _EnvironmentKeyTransformModifier.keyPath.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*_EnvironmentKeyTransformModifier.keyPath.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t key path getter for _EnvironmentKeyTransformModifier.transform : <A>_EnvironmentKeyTransformModifier<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v5 = *(_QWORD *)(a3 + a2 - 8);
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = (uint64_t (*)())swift_allocObject();
  *((_QWORD *)v8 + 2) = v5;
  *((_QWORD *)v8 + 3) = v7;
  *((_QWORD *)v8 + 4) = v6;
  *a4 = _sSo11AGAttributea14AttributeGraphE10mutateBody2as12invalidating_yxm_SbyxzXEtlFySvXEfU_TA_0;
  a4[1] = v8;
  return swift_retain();
}

uint64_t key path setter for _EnvironmentKeyTransformModifier.transform : <A>_EnvironmentKeyTransformModifier<A>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v5 = *(_QWORD *)(a4 + a3 - 8);
  v7 = *a1;
  v6 = a1[1];
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = v5;
  v8[3] = v7;
  v8[4] = v6;
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 8) = _sSo11AGAttributea14AttributeGraphE10mutateBody2as12invalidating_yxm_SbyxzXEtlFySvXEfU_TA_0;
  *(_QWORD *)(a2 + 16) = v8;
  return result;
}

uint64_t _EnvironmentKeyTransformModifier.transform.getter(uint64_t a1, uint64_t a2)
{
  swift_retain();
  return a2;
}

uint64_t _EnvironmentKeyTransformModifier.transform.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*_EnvironmentKeyTransformModifier.transform.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t static _EnvironmentKeyTransformModifier._makeInputs(modifier:inputs:)(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  int v22;
  _DWORD v23[4];
  _BYTE v24[16];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v6 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v23 - v7;
  v11 = type metadata accessor for ChildEnvironment(0, a3, v9, v10);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (_DWORD *)((char *)v23 - v13);
  LODWORD(a1) = *a1;
  v15 = *(_QWORD *)(a2 + 16);
  swift_beginAccess();
  LODWORD(v15) = *(_DWORD *)(v15 + 16);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(v8, 1, 1, a3);
  ChildEnvironment.init(modifier:environment:oldValue:oldKeyPath:)((int)a1, v15, (uint64_t)v8, 0, a3, v14);
  v25 = v11;
  v26 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ChildEnvironment<A>, v11);
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for Attribute<EnvironmentValues>, (uint64_t)&type metadata for EnvironmentValues, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE095F0]);
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v14, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)v24, v11, MEMORY[0x24BEE4078], v16, MEMORY[0x24BEE40A8], v17);
  (*(void (**)(_DWORD *, uint64_t))(v12 + 8))(v14, v11);
  LODWORD(a1) = v23[3];
  v18 = MEMORY[0x24BEE4AF8];
  v19 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
  v20 = swift_allocObject();
  *(_DWORD *)(v20 + 16) = (_DWORD)a1;
  *(_QWORD *)(v20 + 24) = v18;
  *(_OWORD *)(v20 + 32) = 0u;
  *(_OWORD *)(v20 + 48) = 0u;
  *(_OWORD *)(v20 + 64) = 0u;
  *(_WORD *)(v20 + 80) = 256;
  *(_QWORD *)(v20 + 88) = v19;
  result = swift_release();
  *(_QWORD *)(a2 + 16) = v20;
  v22 = *(_DWORD *)(a2 + 32);
  if ((v22 & 0x20) == 0)
    *(_DWORD *)(a2 + 32) = v22 | 0x20;
  return result;
}

uint64_t ChildEnvironment.init(modifier:environment:oldValue:oldKeyPath:)@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _DWORD *a6@<X8>)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;

  *a6 = a1;
  a6[1] = a2;
  v9 = type metadata accessor for ChildEnvironment(0, a5, a3, a4);
  v10 = (char *)a6 + *(int *)(v9 + 32);
  v11 = type metadata accessor for Optional();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10, a3, v11);
  *(_QWORD *)((char *)a6 + *(int *)(v9 + 36)) = a4;
  return result;
}

uint64_t ChildEnvironment.modifier.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyTransformModifier(0, *(_QWORD *)(a1 + 16), a3, a4);
  v4 = *(_QWORD *)AGGraphGetValue();
  swift_retain();
  swift_retain();
  return v4;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance _EnvironmentKeyTransformModifier<A>(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  return static _EnvironmentKeyTransformModifier._makeInputs(modifier:inputs:)(a1, a2, *(_QWORD *)(a3 + 16));
}

uint64_t closure #1 in ChildEnvironment.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  unint64_t StatusReg;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  char *v27;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v37;
  char *v38;
  char *v39;
  void *v40;
  char *v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v5 = type metadata accessor for ObservationTracking._AccessList();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v41 = (char *)&v37 - v10;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v37 - v12;
  type metadata accessor for ObservationTracking._AccessList?();
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v37 - v18;
  v20 = *(char **)(a1 + 8);
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v38 = v13;
    v39 = v20;
    if (one-time initialization token for lastestAccessLists == -1)
      goto LABEL_3;
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  v40 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v19, 1, 1, v5);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v22 = v19;
  v23 = *(_QWORD *)(StatusReg + 848);
  *(_QWORD *)(StatusReg + 848) = v22;
  ((void (*)(uint64_t))v39)(a3);
  *(_QWORD *)(StatusReg + 848) = v23;
  v39 = v22;
  outlined init with copy of ObservationTracking._AccessList?((uint64_t)v22, (uint64_t)v16);
  v24 = (_QWORD *)&type metadata instantiation cache for InterfaceIdiomBox;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v16, 1, v5) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v16);
  }
  else
  {
    v25 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v26 = v38;
    v25(v38, v16, v5);
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v41, v26, v5);
    swift_beginAccess();
    v27 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v27;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v27 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v27 + 2) + 1, 1, (unint64_t)v27);
      static ObservationRegistrar.lastestAccessLists = v27;
    }
    v30 = *((_QWORD *)v27 + 2);
    v29 = *((_QWORD *)v27 + 3);
    if (v30 >= v29 >> 1)
    {
      v27 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1, (unint64_t)v27);
      static ObservationRegistrar.lastestAccessLists = v27;
    }
    *((_QWORD *)v27 + 2) = v30 + 1;
    v25(&v27[((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v30], v41, v5);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v26, v5);
    v24 = &type metadata instantiation cache for InterfaceIdiomBox;
  }
  outlined destroy of ObservationTracking._AccessList?((uint64_t)v39);
  v31 = v24[463];
  v32 = *(_QWORD *)(v31 + 16);
  if (v32)
  {
    v33 = v31 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v34 = *(_QWORD *)(v6 + 72);
    v35 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v35(v8, v33, v5);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v8);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      v33 += v34;
      --v32;
    }
    while (v32);
    swift_bridgeObjectRelease();
  }
  v24[463] = v40;
  return swift_bridgeObjectRelease();
}

uint64_t UpdateEnvironment.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  MaterialView.ChildEnvironment.environment.getter(a4);
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(a3 + 16))(a1, a4, a2, a3);
}

uint64_t protocol witness for Rule.value.getter in conformance UpdateEnvironment<A>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;

  return UpdateEnvironment.value.getter(*v2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance SystemColorSchemeModifier(unsigned int *a1, uint64_t a2)
{
  return specialized static EnvironmentModifier._makeInputs(modifier:inputs:)(*a1, a2);
}

uint64_t type metadata accessor for UpdateEnvironment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UpdateEnvironment);
}

uint64_t sub_234F29FE4()
{
  return 8;
}

_QWORD *sub_234F29FF0(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for _EnvironmentKeyTransformModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for _EnvironmentKeyTransformModifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for _EnvironmentKeyTransformModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_release();
  v4 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v4;
  swift_release();
  return a1;
}

uint64_t dispatch thunk of static EnvironmentModifier.makeEnvironment(modifier:environment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t sub_234F2A0E8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v4 = *a1;
  v5 = a1[2];
  v6 = type metadata accessor for _EnvironmentKeyTransformModifier(255, a1[1], a3, a4);
  v8 = type metadata accessor for ModifiedContent(255, v4, v6, v7);
  v10[0] = v5;
  v10[1] = &protocol witness table for _EnvironmentKeyTransformModifier<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v8, v10);
}

uint64_t type metadata completion function for ChildEnvironment()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ChildEnvironment(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  int v9;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  void *v15;
  const void *v16;

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v6 & 0x100000;
  if (v7 > 7 || v9 != 0 || ((v8 + 7 + ((v7 + 8) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v12 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v13 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    v14 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v13 = *v14;
    v15 = (void *)(((unint64_t)v13 + v7 + 4) & ~v7);
    v16 = (const void *)(((unint64_t)v14 + v7 + 4) & ~v7);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v16, 1, v4))
    {
      memcpy(v15, v16, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v15, v16, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v15, 0, 1, v4);
    }
    *(_QWORD *)(((unint64_t)v15 + v8 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v16 + v8 + 7) & 0xFFFFFFFFFFFFF8);
  }
  swift_retain();
  return v3;
}

_DWORD *assignWithCopy for ChildEnvironment(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  size_t v14;
  uint64_t v15;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)(((unint64_t)v4 + v8 + 4) & ~v8);
  v10 = (void *)(((unint64_t)v5 + v8 + 4) & ~v8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v12 = v11(v9, 1, v6);
  v13 = v11(v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v9, v10, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(v9, v10, v6);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  }
  if (*(_DWORD *)(v7 + 84))
    v14 = *(_QWORD *)(v7 + 64);
  else
    v14 = *(_QWORD *)(v7 + 64) + 1;
  memcpy(v9, v10, v14);
LABEL_10:
  if (*(_DWORD *)(v7 + 84))
    v15 = *(_QWORD *)(v7 + 64);
  else
    v15 = *(_QWORD *)(v7 + 64) + 1;
  *(_QWORD *)(((unint64_t)v9 + v15 + 7) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v10 + v15 + 7) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

_DWORD *assignWithTake for ChildEnvironment(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  size_t v14;
  uint64_t v15;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)(((unint64_t)v4 + v8 + 4) & ~v8);
  v10 = (void *)(((unint64_t)v5 + v8 + 4) & ~v8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v12 = v11(v9, 1, v6);
  v13 = v11(v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v9, v10, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(v9, v10, v6);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  }
  if (*(_DWORD *)(v7 + 84))
    v14 = *(_QWORD *)(v7 + 64);
  else
    v14 = *(_QWORD *)(v7 + 64) + 1;
  memcpy(v9, v10, v14);
LABEL_10:
  if (*(_DWORD *)(v7 + 84))
    v15 = *(_QWORD *)(v7 + 64);
  else
    v15 = *(_QWORD *)(v7 + 64) + 1;
  *(_QWORD *)(((unint64_t)v9 + v15 + 7) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v10 + v15 + 7) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

void storeEnumTagSinglePayload for ChildEnvironment(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFE)
    v10 = 2147483646;
  else
    v10 = v9;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  if (v10 < a3)
  {
    v12 = a3 - v10;
    if ((((_DWORD)v11 + 7 + ((*(unsigned __int8 *)(v7 + 80) + 8) & ~*(unsigned __int8 *)(v7 + 80))) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v13 = v12 + 1;
    else
      v13 = 2;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v6 = v14;
    else
      v6 = 0;
  }
  if (a2 > v10)
  {
    if ((((_DWORD)v11 + 7 + ((*(unsigned __int8 *)(v7 + 80) + 8) & ~*(unsigned __int8 *)(v7 + 80))) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      v15 = ~v10 + a2;
      bzero(a1, ((v11 + 7 + ((*(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))) & 0xFFFFFFFFFFFFFFF8)+ 8);
      *a1 = v15;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t sub_234F2AAC4@<X0>(unsigned int a1@<W1>, size_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  int v18;
  _QWORD *v19;
  uint64_t result;

  *(_BYTE *)(v15 + v16) = 0;
  if (a1)
  {
    v17 = (void *)((((v15 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v14 + 4) & v10);
    if (v11 < 0x7FFFFFFE)
    {
      v19 = (_QWORD *)(((unint64_t)v17 + v13) & 0xFFFFFFFFFFFFFFF8);
      if (a1 > 0x7FFFFFFE)
      {
        *v19 = 0;
        *(_DWORD *)v19 = a1 - 0x7FFFFFFF;
      }
      else
      {
        *v19 = a1;
      }
    }
    else if (v11 >= a1)
    {
      return (*(uint64_t (**)(void *, _QWORD))(v12 + 56))(v17, a1 + 1);
    }
    else if ((_DWORD)a2)
    {
      if (a2 <= 3)
        v18 = a2;
      else
        v18 = 4;
      bzero(v17, a2);
      __asm { BR              X10 }
    }
  }
  return result;
}

void sub_234F2ABDC()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_234F2ABEC()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_234F2ABF4()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

void base witness table accessor for _AttributeBody in UpdateEnvironment<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t partial apply for closure #1 in ChildEnvironment.updateValue()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in ChildEnvironment.updateValue()(a1, *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t partial apply for closure #2 in implicit closure #1 in ChildEnvironment.updateValue()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X7>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  __int128 v7;
  int v8;
  char v9;

  v7 = *(_OWORD *)(v3 + 16);
  v8 = 2;
  result = _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in compareValues<A>(_:_:options:), (uint64_t)&v6, v7, MEMORY[0x24BEE4078], MEMORY[0x24BEE1328], MEMORY[0x24BEE40A8], a2);
  *a3 = v9;
  return result;
}

uint64_t partial apply for closure #3 in implicit closure #3 in ChildEnvironment.updateValue()@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v4 = *a1;
  type metadata accessor for AnyKeyPath();
  result = MEMORY[0x23B7C6B38](v4, v2);
  *a2 = result & 1;
  return result;
}

uint64_t sub_234F2AD18()
{
  swift_release();
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for JitterTextEffect()
{
  return &type metadata for JitterTextEffect;
}

_UNKNOWN **associated type witness table accessor for Text.Effect.Base.Timing : Text.Effect.DurationProvider in JitterTextEffect()
{
  return &protocol witness table for JitterTextEffect.Timing;
}

uint64_t protocol witness for Text.Effect.DurationProvider.duration.getter in conformance JitterTextEffect.Timing()
{
  return 0x4000000000000000;
}

uint64_t closure #1 in JitterTextEffect.configuration(_:)(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CFIndex v11;
  double v12;
  double v13;
  double Size;
  void *v15;
  uint64_t v16;
  id v17;
  id v18;
  const __CTLine *v19;
  void *v20;
  const __CTFont *v21;
  uint64_t v22;
  CFIndex v23;
  double v24;
  double v25;
  void *v26;
  uint64_t v27;
  id v28;
  id v29;
  const __CTLine *v30;
  void *v31;
  const __CTFont *v32;
  uint64_t v33;
  uint64_t (*v34)(void);
  uint64_t v35;
  unint64_t v36;
  uint64_t inited;
  int64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t result;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  _QWORD v55[2];

  v2 = a2[1];
  v51 = *a2;
  v52 = v2;
  v53 = a2[2];
  v54 = *((_QWORD *)a2 + 6);
  v3 = specialized static Text.Effect.ClusterTransformMap.byWords(fragment:)((uint64_t)&v51);
  v48 = v4;
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_BYTE *)(v5 + 64) = 1;
  v49 = swift_allocObject();
  *(_QWORD *)(v49 + 16) = 0;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = 0;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = 0;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = 0;
  v50 = swift_allocObject();
  *(_DWORD *)(v50 + 16) = 7;
  v9 = *((_QWORD *)&v52 + 1);
  v55[0] = *((_QWORD *)&v52 + 1);
  v11 = *(_QWORD *)(*((_QWORD *)&v52 + 1) + 16);
  v10 = *(_QWORD *)(*((_QWORD *)&v52 + 1) + 24);
  swift_retain_n();
  v12 = 0.0;
  v13 = 0.0;
  v47 = v3;
  if (v11 != v10)
  {
    while (1)
    {
      v15 = *(void **)(v9 + 32);
      v16 = *(_QWORD *)(v9 + 40);
      if ((*(_BYTE *)(v9 + 48) & 1) != 0)
      {
        outlined copy of Text.Layout.Line.Line(*(void **)(v9 + 32), *(_QWORD *)(v9 + 40), 1);
        v17 = (id)_NSTextLineFragmentGetCTLine(v15);
        if (!v17)
          goto LABEL_45;
        v18 = v17;
        outlined consume of Text.Layout.Line.Line(v15, v16, 1);
        v15 = v18;
      }
      else
      {
        outlined copy of Text.Layout.Line.Line(*(void **)(v9 + 32), *(_QWORD *)(v9 + 40), 0);
        outlined copy of Text.Layout.Line.Line(v15, v16, 0);

        swift_release();
      }
      if (v11 < *(_QWORD *)(v9 + 16) || v11 >= *(_QWORD *)(v9 + 24))
        break;
      swift_retain();
      v19 = v15;
      v20 = (id)_CTLineGetRunAtIndex(v19, v11);
      v21 = (const __CTFont *)(id)CTRunGetFont();
      swift_release();

      if (v21)
      {
        Size = CTFontGetSize(v21);
        swift_release();

        v19 = v21;
      }
      else
      {
        swift_release();
        Size = 0.0;
      }
      ++v11;

      if (v13 <= Size)
        v13 = Size;
      if (v11 == *(_QWORD *)(v9 + 24))
      {
        v13 = v13 * 0.2;
        v3 = v47;
        goto LABEL_16;
      }
    }
    __break(1u);
    goto LABEL_41;
  }
LABEL_16:
  outlined release of ViewTransform((uint64_t)v55);
  outlined release of ViewTransform((uint64_t)v55);
  v23 = *(_QWORD *)(v9 + 16);
  v22 = *(_QWORD *)(v9 + 24);
  swift_retain_n();
  if (v23 != v22)
  {
    v24 = 0.0;
    while (1)
    {
      v26 = *(void **)(v9 + 32);
      v27 = *(_QWORD *)(v9 + 40);
      if ((*(_BYTE *)(v9 + 48) & 1) != 0)
      {
        outlined copy of Text.Layout.Line.Line(*(void **)(v9 + 32), *(_QWORD *)(v9 + 40), 1);
        v28 = (id)_NSTextLineFragmentGetCTLine(v26);
        if (!v28)
          goto LABEL_46;
        v29 = v28;
        outlined consume of Text.Layout.Line.Line(v26, v27, 1);
        v26 = v29;
      }
      else
      {
        outlined copy of Text.Layout.Line.Line(*(void **)(v9 + 32), *(_QWORD *)(v9 + 40), 0);
        outlined copy of Text.Layout.Line.Line(v26, v27, 0);

        swift_release();
      }
      if (v23 < *(_QWORD *)(v9 + 16) || v23 >= *(_QWORD *)(v9 + 24))
        break;
      swift_retain();
      v30 = v26;
      v31 = (id)_CTLineGetRunAtIndex(v30, v23);
      v32 = (const __CTFont *)(id)CTRunGetFont();
      swift_release();

      if (v32)
      {
        v25 = CTFontGetSize(v32);
        swift_release();

        v30 = v32;
      }
      else
      {
        swift_release();
        v25 = 0.0;
      }
      ++v23;

      if (v24 <= v25)
        v24 = v25;
      if (v23 == *(_QWORD *)(v9 + 24))
      {
        v12 = v24 * 0.3;
        v3 = v47;
        goto LABEL_31;
      }
    }
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
LABEL_31:
  outlined release of ViewTransform((uint64_t)v55);
  outlined release of ViewTransform((uint64_t)v55);
  v33 = swift_allocObject();
  *(_QWORD *)(v33 + 16) = v3;
  *(_QWORD *)(v33 + 24) = v48;
  *(_QWORD *)(v33 + 32) = v49;
  *(_QWORD *)(v33 + 40) = v5;
  *(_QWORD *)(v33 + 48) = v6;
  *(double *)(v33 + 56) = v13;
  *(_QWORD *)(v33 + 64) = v50;
  *(_QWORD *)(v33 + 72) = v7;
  *(double *)(v33 + 80) = v12;
  *(_QWORD *)(v33 + 88) = v8;
  v34 = MEMORY[0x24BEE3598];
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>, (uint64_t)&type metadata for Text.Effect.Drawable.Fragment, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_23527E860;
  *(_QWORD *)(v35 + 32) = partial apply for closure #1 in closure #1 in JitterTextEffect.configuration(_:);
  v36 = v35 + 32;
  *(_QWORD *)(v35 + 40) = v33;
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Drawable>, (uint64_t)&type metadata for Text.Effect.Drawable, (uint64_t (*)(_QWORD, uint64_t))v34);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23527E860;
  *(_QWORD *)(inited + 32) = v35;
  v38 = *(_QWORD *)(v35 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38, 1, MEMORY[0x24BEE4AF8]);
  v40 = v39;
  if (!*(_QWORD *)(v35 + 16))
  {
    if (v38)
    {
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
LABEL_39:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return (uint64_t)v40;
  }
  v41 = v39[2];
  if ((v39[3] >> 1) - v41 < v38)
  {
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  v42 = (unint64_t)&v39[2 * v41 + 4];
  if (v36 >= v42 + 16 * v38 || v42 >= v36 + 16 * v38)
  {
    swift_arrayInitWithCopy();
    if (v38)
    {
      v43 = v40[2];
      v44 = __OFADD__(v43, v38);
      v45 = v43 + v38;
      if (v44)
        goto LABEL_44;
      v40[2] = v45;
    }
    goto LABEL_39;
  }
LABEL_47:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t closure #1 in closure #1 in JitterTextEffect.configuration(_:)(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9, __n128 a10, __n128 a11, uint64_t a12, uint64_t a13)
{
  double v17;
  double v18;
  double v21;
  double v22;
  unint64_t result;
  double v24;
  int32x2_t v25;
  int64x2_t v26;
  int8x16_t v27;
  double v28;
  double v29;
  double *v30;
  double *v31;
  double *v32;
  double *v33;
  unsigned int *v34;
  unsigned int v35;
  double v36;
  double v37;
  double v38;
  long double v39;
  long double v40;
  unsigned int v41;
  double v42;
  unsigned int v43;
  double v44;
  CGFloat MidX;
  double v46;
  double v47;
  double v48;
  float64x2_t v54;
  float64x2_t v55;
  _BYTE v56[72];
  _BYTE v57[80];
  _BYTE v58[16];
  float64x2_t v59;
  float64x2_t v60;
  double v61;
  double v62;
  char v63;
  _QWORD v64[6];
  __int128 v65;
  uint64_t v66;
  char v67;
  CGRect v68;

  v17 = a10.n128_f64[0];
  v18 = a9.n128_f64[0];
  a11.n128_f64[0] = a2[5];
  v21 = a2[8];
  a10.n128_f64[0] = a11.n128_f64[0] - a2[4];
  if (a10.n128_f64[0] >= 0.0)
  {
    a9.n128_f64[0] = a10.n128_f64[0] / v21;
    v22 = 0.0;
    if (a9.n128_f64[0] < 0.0)
      goto LABEL_8;
  }
  else
  {
    v22 = 0.0;
    a9.n128_f64[0] = 0.0 / v21;
    if (a9.n128_f64[0] < 0.0)
      goto LABEL_8;
  }
  a10.n128_u64[0] = 1.0;
  if (a9.n128_f64[0] <= 1.0)
    v22 = a9.n128_f64[0];
  else
    v22 = 1.0;
LABEL_8:
  Text.Effect.ClusterTransformMap.subscript.getter(a3, a4, (uint64_t)v56, a9, a10, a11);
  result = outlined init with take of Text.Effect.ClusterTransformMap.Element?((uint64_t)v56, (uint64_t)v58);
  if ((v63 & 1) != 0)
  {
    v24 = *a2;
    if (__OFSUB__(*(_QWORD *)a2, a1))
    {
      __break(1u);
      return result;
    }
    v25 = vdup_n_s32(*(_QWORD *)&v24 == a1);
    v26.i64[0] = v25.u32[0];
    v26.i64[1] = v25.u32[1];
    v27 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v26, 0x3FuLL));
    v54 = (float64x2_t)vandq_s8(*(int8x16_t *)(a2 + 26), v27);
    v55 = (float64x2_t)vandq_s8(*(int8x16_t *)(a2 + 28), v27);
    if (*(_QWORD *)&v24 == a1)
      v28 = a2[30];
    else
      v28 = 0.0;
    if (*(_QWORD *)&v24 == a1)
      v29 = a2[31];
    else
      v29 = 0.0;
  }
  else
  {
    v54 = v59;
    v55 = v60;
    v28 = v61;
    v29 = v62;
  }
  v30 = (double *)(a5 + 16);
  v31 = (double *)(a7 + 16);
  v32 = (double *)(a12 + 16);
  v33 = (double *)(a13 + 16);
  swift_beginAccess();
  if (*v30 != v22
    || (swift_beginAccess(), (*(_BYTE *)(a6 + 64) & 1) != 0)
    || (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a6 + 16), v54), (int32x4_t)vceqq_f64(*(float64x2_t *)(a6 + 32), v55))), 0xFuLL))) & 1) == 0|| *(double *)(a6 + 48) != v28|| *(double *)(a6 + 56) != v29)
  {
    v34 = (unsigned int *)(a8 + 16);
    swift_beginAccess();
    *(float64x2_t *)(a6 + 16) = v54;
    *(float64x2_t *)(a6 + 32) = v55;
    *(double *)(a6 + 48) = v28;
    *(double *)(a6 + 56) = v29;
    *(_BYTE *)(a6 + 64) = 0;
    swift_beginAccess();
    *v30 = v22;
    swift_beginAccess();
    v35 = 214013 * *v34 + 2531011;
    *v34 = v35;
    v36 = ((double)HIWORD(v35) * 0.0000152590219 + -0.5 + (double)HIWORD(v35) * 0.0000152590219 + -0.5) * v18;
    v37 = pow(v22, 0.75);
    v38 = fabs(sqrt(v22));
    if (v22 == -INFINITY)
      v38 = INFINITY;
    v39 = sin(v38 + v37);
    v40 = (1.0 - v22) * v39 * ((1.0 - v22) * v39);
    swift_beginAccess();
    *v31 = v40 * v36;
    swift_beginAccess();
    v41 = 214013 * *v34 + 2531011;
    *v34 = v41;
    v42 = v40 * (((double)HIWORD(v41) * 0.0000152590219 + -0.5 + (double)HIWORD(v41) * 0.0000152590219 + -0.5) * v17);
    swift_beginAccess();
    *v32 = v42;
    swift_beginAccess();
    v43 = 214013 * *v34 + 2531011;
    *v34 = v43;
    v44 = v40 * (((double)HIWORD(v43) * 0.0000152590219 + -0.5 + (double)HIWORD(v43) * 0.0000152590219 + -0.5) * 0.25);
    swift_beginAccess();
    *v33 = v44;
  }
  v68.origin.x = v54.f64[0];
  v68.size.width = v55.f64[0];
  v68.size.height = v55.f64[1] + v28;
  v68.origin.y = v54.f64[1] - v55.f64[1];
  MidX = CGRectGetMidX(v68);
  swift_beginAccess();
  v46 = *v33;
  swift_beginAccess();
  v47 = *v31;
  swift_beginAccess();
  v48 = *v32;
  v64[0] = 0;
  *(double *)&v64[1] = v47;
  *(double *)&v64[2] = v48;
  *(double *)&v64[3] = v46;
  *(CGFloat *)&v64[4] = MidX;
  *(double *)&v64[5] = v54.f64[1] - v55.f64[1];
  __asm { FMOV            V0.2D, #1.0 }
  v65 = _Q0;
  v66 = 0x3FF0000000000000;
  v67 = 1;
  Text.Effect.TransformContext.record(position:for:)((unint64_t)v64, a1, (uint64_t)v57);
  return Text.Effect.TransformContext.draw(state:keyPath:)((uint64_t)v57, 0, 0, 0, 1);
}

uint64_t protocol witness for static TextEffect.name.getter in conformance JitterTextEffect()
{
  return 0x72657474696ALL;
}

unint64_t instantiation function for generic protocol witness table for JitterTextEffect(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type JitterTextEffect and conformance JitterTextEffect();
  result = lazy protocol witness table accessor for type JitterTextEffect and conformance JitterTextEffect();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t specialized JitterTextEffect.configuration(_:)()
{
  uint64_t v0;
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;

  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = partial apply for closure #1 in JitterTextEffect.configuration(_:);
  *(_QWORD *)(v0 + 24) = 0;
  v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v3 = v1[2];
  v2 = v1[3];
  if (v3 >= v2 >> 1)
    v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v2 > 1), v3 + 1, 1, v1);
  v1[2] = v3 + 1;
  v4 = &v1[2 * v3];
  v4[4] = partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.Text.Effect.Base.Timing, @guaranteed Text.Effect.DrawableFragment<A>, @unowned Text.Effect.QuantizationContext) -> (@owned Text.Effect.Drawable);
  v4[5] = v0;
  return MEMORY[0x24BEE4AF8];
}

uint64_t sub_234F2B978()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.Text.Effect.Base.Timing, @guaranteed Text.Effect.DrawableFragment<A>, @unowned Text.Effect.QuantizationContext) -> (@owned Text.Effect.Drawable)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t (*v6)(uint64_t, _OWORD *, _OWORD *);
  __int128 v7;
  __int128 v8;
  uint64_t result;
  _OWORD v10[3];
  uint64_t v11;
  _OWORD v12[2];
  uint64_t v13;

  v6 = *(uint64_t (**)(uint64_t, _OWORD *, _OWORD *))(v4 + 16);
  v7 = *(_OWORD *)(a2 + 16);
  v10[0] = *(_OWORD *)a2;
  v10[1] = v7;
  v10[2] = *(_OWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a2 + 48);
  v8 = *(_OWORD *)(a3 + 16);
  v12[0] = *(_OWORD *)a3;
  v12[1] = v8;
  v13 = *(_QWORD *)(a3 + 32);
  result = v6(a1, v10, v12);
  *a4 = result;
  return result;
}

uint64_t sub_234F2B9FC()
{
  return swift_deallocObject();
}

uint64_t sub_234F2BA0C()
{
  return swift_deallocObject();
}

uint64_t sub_234F2BA1C()
{
  return swift_deallocObject();
}

uint64_t sub_234F2BA2C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

unint64_t partial apply for closure #1 in closure #1 in JitterTextEffect.configuration(_:)(uint64_t a1, double *a2, __n128 a3, __n128 a4, __n128 a5)
{
  uint64_t *v5;

  a3.n128_u64[0] = v5[7];
  a4.n128_u64[0] = v5[10];
  return closure #1 in closure #1 in JitterTextEffect.configuration(_:)(a1, a2, v5[2], v5[3], v5[4], v5[5], v5[6], v5[8], a3, a4, a5, v5[9], v5[11]);
}

ValueMetadata *type metadata accessor for JitterTextEffect.Timing()
{
  return &type metadata for JitterTextEffect.Timing;
}

void View._detached<A, B>(with:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t v9;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD v20[8];

  v20[0] = a7;
  v20[1] = a2;
  v15 = *(_QWORD *)(a3 - 8);
  v16 = MEMORY[0x24BDAC7A8](a1);
  v18 = (char *)v20 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v18, v9, v19, v16);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a8, v18, a3);
  v20[2] = a4;
  v20[3] = a3;
  v20[4] = a5;
  v20[5] = v20[0];
  v20[6] = a6;
  v20[7] = a9;
  type metadata accessor for _DetachedView();
}

uint64_t sub_234F2BB84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v4 = (_QWORD *)(v2 + *(int *)(a1 + 68));
  *v4 = *(_QWORD *)(v3 - 136);
  v4[1] = v1;
  return swift_retain();
}

uint64_t static _Detachable.detachedProperties.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _Detachable.detachedProperties.getter(a1);
}

{
  uint64_t result;

  if (one-time initialization token for all != -1)
    result = swift_once();
  *a1 = static _DetachableProperties.all;
  return result;
}

uint64_t _DetachableProperties.rawValue.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t _DetachableProperties.init(rawValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static _DetachableProperties.position.getter(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

void static _DetachableProperties.dimensions.getter(_DWORD *a1@<X8>)
{
  *a1 = 2;
}

void static _DetachableProperties.environment.getter(_DWORD *a1@<X8>)
{
  *a1 = 4;
}

void static _DetachableProperties.transaction.getter(_DWORD *a1@<X8>)
{
  *a1 = 8;
}

void static _DetachableProperties.layout.getter(_DWORD *a1@<X8>)
{
  *a1 = 16;
}

uint64_t static _DetachableProperties.all.getter@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  if (one-time initialization token for all != -1)
    result = swift_once();
  *a1 = static _DetachableProperties.all;
  return result;
}

uint64_t _DetachedView.content.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2);
}

uint64_t _DetachedView.content.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 40))(v2, a1);
}

uint64_t (*_DetachedView.content.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void key path getter for _DetachedView.transform : <A, B, C>_DetachedView<A, B, C>()
{
  type metadata accessor for _DetachedView();
}

uint64_t sub_234F2BD88(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(v1 + *(int *)(a1 + 68));
  v4 = v3[1];
  *v2 = *v3;
  v2[1] = v4;
  return swift_retain();
}

void key path setter for _DetachedView.transform : <A, B, C>_DetachedView<A, B, C>()
{
  type metadata accessor for _DetachedView();
}

uint64_t sub_234F2BDE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  v4 = (_QWORD *)(v1 + *(int *)(a1 + 68));
  swift_retain();
  result = swift_release();
  *v4 = v3;
  v4[1] = v2;
  return result;
}

uint64_t _DetachedView.transform.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 68));
  swift_retain();
  return v2;
}

uint64_t _DetachedView.transform.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t result;

  v6 = (_QWORD *)(v3 + *(int *)(a3 + 68));
  result = swift_release();
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*_DetachedView.transform.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void _DetachedView.init(content:transform:)(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for _DetachedView();
}

uint64_t sub_234F2BF14(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v4 = (_QWORD *)(v3 + *(int *)(result + 68));
  *v4 = v2;
  v4[1] = v1;
  return result;
}

void type metadata accessor for _DetachedView()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void static _DetachedView._makeView(view:inputs:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v21 = *a1;
  v8 = *(_QWORD *)(a2 + 16);
  v24 = *(_DWORD *)(a2 + 28);
  v9 = *(_DWORD *)(a2 + 60);
  v10 = *(_DWORD *)(a2 + 64);
  v11 = *(_DWORD *)(a2 + 68);
  v22 = *(_DWORD *)(a2 + 72);
  v23 = *(_DWORD *)(a2 + 56);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(a6 + 16))(&v30, a3, a6);
  v12 = v30;
  if ((v30 & 1) != 0)
  {
    swift_retain_n();
    v13 = v8;
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    if ((v12 & 2) != 0)
    {
LABEL_6:
      v14 = MEMORY[0x24BEE4AF8];
      if ((v12 & 4) == 0)
      {
        swift_beginAccess();
        v15 = *(_DWORD *)(v13 + 16);
        DWORD2(v30) = 0;
        *(_QWORD *)&v30 = v15;
        protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
        type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for SwitchRule<EnvironmentValues>, (uint64_t)&type metadata for EnvironmentValues, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for SwitchRule);
        lazy protocol witness table accessor for type SwitchRule<ViewTransform> and conformance SwitchRule<A>(&lazy protocol witness table cache variable for type SwitchRule<EnvironmentValues> and conformance SwitchRule<A>, &lazy cache variable for type metadata for SwitchRule<EnvironmentValues>, (uint64_t)&type metadata for EnvironmentValues);
        v16 = Attribute.init<A>(body:value:flags:update:)();
        v17 = specialized Dictionary.init(dictionaryLiteral:)(v14);
        type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
        v18 = swift_allocObject();
        *(_DWORD *)(v18 + 16) = v16;
        *(_QWORD *)(v18 + 24) = v14;
        *(_OWORD *)(v18 + 32) = 0u;
        *(_OWORD *)(v18 + 48) = 0u;
        *(_OWORD *)(v18 + 64) = 0u;
        *(_WORD *)(v18 + 80) = 256;
        *(_QWORD *)(v18 + 88) = v17;
        swift_release();
      }
      if ((v12 & 8) == 0)
      {
        DWORD2(v30) = 0;
        *(_QWORD *)&v30 = v24;
        protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
        type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for SwitchRule<Transaction>, (uint64_t)&type metadata for Transaction, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for SwitchRule);
        lazy protocol witness table accessor for type SwitchRule<ViewTransform> and conformance SwitchRule<A>(&lazy protocol witness table cache variable for type SwitchRule<Transaction> and conformance SwitchRule<A>, &lazy cache variable for type metadata for SwitchRule<Transaction>, (uint64_t)&type metadata for Transaction);
        Attribute.init<A>(body:value:flags:update:)();
      }
      DWORD2(v30) = 0;
      *(_QWORD *)&v30 = v23;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for SwitchRule<PreferenceKeys>, (uint64_t)&type metadata for PreferenceKeys, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for SwitchRule);
      lazy protocol witness table accessor for type SwitchRule<ViewTransform> and conformance SwitchRule<A>(&lazy protocol witness table cache variable for type SwitchRule<PreferenceKeys> and conformance SwitchRule<A>, &lazy cache variable for type metadata for SwitchRule<PreferenceKeys>, (uint64_t)&type metadata for PreferenceKeys);
      Attribute.init<A>(body:value:flags:update:)();
      v19 = swift_bridgeObjectRelease();
      MEMORY[0x24BDAC7A8](v19);
      LODWORD(v35) = v21;
      *(_QWORD *)&v30 = a3;
      *((_QWORD *)&v30 + 1) = a4;
      v31 = a5;
      v32 = a6;
      v33 = a7;
      v34 = a8;
      type metadata accessor for _DetachedView();
    }
  }
  else
  {
    LODWORD(v30) = v9;
    *(_QWORD *)((char *)&v30 + 4) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for SwitchRule<ViewTransform>, (uint64_t)&type metadata for ViewTransform, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for SwitchRule);
    lazy protocol witness table accessor for type SwitchRule<ViewTransform> and conformance SwitchRule<A>(&lazy protocol witness table cache variable for type SwitchRule<ViewTransform> and conformance SwitchRule<A>, &lazy cache variable for type metadata for SwitchRule<ViewTransform>, (uint64_t)&type metadata for ViewTransform);
    swift_retain_n();
    v13 = v8;
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    Attribute.init<A>(body:value:flags:update:)();
    LODWORD(v30) = v10;
    *(_QWORD *)((char *)&v30 + 4) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for SwitchRule<ViewOrigin>, (uint64_t)&type metadata for ViewOrigin, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for SwitchRule);
    lazy protocol witness table accessor for type SwitchRule<ViewTransform> and conformance SwitchRule<A>(&lazy protocol witness table cache variable for type SwitchRule<ViewOrigin> and conformance SwitchRule<A>, &lazy cache variable for type metadata for SwitchRule<ViewOrigin>, (uint64_t)&type metadata for ViewOrigin);
    Attribute.init<A>(body:value:flags:update:)();
    LODWORD(v30) = v11;
    *(_QWORD *)((char *)&v30 + 4) = 0;
    Attribute.init<A>(body:value:flags:update:)();
    if ((v12 & 2) != 0)
      goto LABEL_6;
  }
  DWORD2(v30) = 0;
  *(_QWORD *)&v30 = v22;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for SwitchRule<ViewSize>, (uint64_t)&type metadata for ViewSize, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for SwitchRule);
  lazy protocol witness table accessor for type SwitchRule<ViewTransform> and conformance SwitchRule<A>(&lazy protocol witness table cache variable for type SwitchRule<ViewSize> and conformance SwitchRule<A>, &lazy cache variable for type metadata for SwitchRule<ViewSize>, (uint64_t)&type metadata for ViewSize);
  Attribute.init<A>(body:value:flags:update:)();
  goto LABEL_6;
}

void closure #1 in static _DetachedView._makeView(view:inputs:)()
{
  type metadata accessor for _DetachedView();
}

uint64_t sub_234F2CE64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v6[2] = a1;
  v7 = v1;
  v3 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v2, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v6, v1, MEMORY[0x24BEE4078], v3, MEMORY[0x24BEE40A8], v4);
  return v8;
}

void protocol witness for static View._makeView(view:inputs:) in conformance _DetachedView<A, B, C>(int *a1, uint64_t a2, uint64_t *a3)
{
  static _DetachedView._makeView(view:inputs:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], a3[7]);
}

void ConnectOutputsVisitor.visit<A>(key:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;

  (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 + 24) + 8))(a3, a3, a4);
  v7 = _ViewOutputs.subscript.getter(a3, a3, a4, v6);
  _ViewOutputs.subscript.setter(v7 | ((HIDWORD(v7) & 1) << 32), a3, a3, a4);
}

void protocol witness for PreferenceKeyVisitor.visit<A>(key:) in conformance ConnectOutputsVisitor<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  ConnectOutputsVisitor.visit<A>(key:)(a1, a4, a2, a3);
}

void View._detached<A>(_:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  _QWORD v16[6];

  v12 = *(_QWORD *)(a2 - 8);
  v13 = MEMORY[0x24BDAC7A8](a1);
  v15 = (char *)v16 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v12 + 16))(v15, v6, v13);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(a6, v15, a2);
  v16[0] = &type metadata for _EmptyDetached;
  v16[1] = a2;
  v16[2] = a3;
  v16[3] = &protocol witness table for _EmptyDetached;
  v16[4] = a4;
  v16[5] = a5;
  type metadata accessor for _DetachedView();
}

uint64_t sub_234F2D048(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v4 = (_QWORD *)(v3 + *(int *)(a1 + 68));
  *v4 = v2;
  v4[1] = v1;
  return swift_retain();
}

BOOL static _DetachedKey.matches<A>(key:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3 == a2;
}

BOOL protocol witness for static _Detachable.matches<A>(key:) in conformance _DetachedKey<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static _DetachedKey.matches<A>(key:)(a1, *(_QWORD *)(a4 + 16), a2);
}

uint64_t static _EmptyDetached.matches<A>(key:)()
{
  return 0;
}

void static _EmptyDetached.detachedProperties.getter(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t DetachedChild.value.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  _OWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t CurrentAttribute;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  unint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  void *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  _OWORD *v58;
  char v59[24];
  _OWORD v60[7];
  uint64_t v61;

  v52 = a2;
  v61 = *MEMORY[0x24BDAC8D0];
  v4 = type metadata accessor for ObservationTracking._AccessList();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v50 = (char *)&v45 - v9;
  MEMORY[0x24BDAC7A8](v10);
  v51 = (char *)&v45 - v11;
  type metadata accessor for ObservationTracking._AccessList?();
  v13 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v45 - v17;
  v19 = *(_QWORD *)(a1 + 24);
  v49 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v53 = (char *)&v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v48 = (char *)&v45 - v23;
  v24 = v2[4];
  v25 = v2[5];
  v26 = v2[2];
  v60[3] = v2[3];
  v60[4] = v24;
  v27 = v2[6];
  v60[5] = v25;
  v60[6] = v27;
  v28 = v2[1];
  v60[0] = *v2;
  v60[1] = v28;
  v60[2] = v26;
  v55 = *(_QWORD *)(a1 + 16);
  v56 = v19;
  v57 = *(_OWORD *)(a1 + 32);
  v58 = v60;
  CurrentAttribute = AGGraphGetCurrentAttribute();
  if ((_DWORD)CurrentAttribute == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    a1 = CurrentAttribute;
    if (one-time initialization token for lastestAccessLists == -1)
      goto LABEL_3;
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  v47 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v18, 1, 1, v4);
  MEMORY[0x24BDAC7A8](v30);
  *(&v45 - 4) = v19;
  *(&v45 - 3) = (uint64_t)partial apply for closure #1 in DetachedChild.value.getter;
  *(&v45 - 2) = (uint64_t)&v54;
  v31 = type metadata accessor for Error();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v18, (uint64_t)partial apply for closure #1 in _withObservation<A>(do:), (uint64_t)(&v45 - 6), v13, v31, v19, MEMORY[0x24BEE3F20], (uint64_t)v59);
  outlined init with copy of ObservationTracking._AccessList?((uint64_t)v18, (uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v15, 1, v4) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v15);
    v32 = v52;
  }
  else
  {
    v33 = v51;
    v46 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
    v46(v51, v15, v4);
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v50, v33, v4);
    swift_beginAccess();
    v34 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v34;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v34 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v34 + 2) + 1, 1, (unint64_t)v34);
      static ObservationRegistrar.lastestAccessLists = v34;
    }
    v32 = v52;
    v37 = *((_QWORD *)v34 + 2);
    v36 = *((_QWORD *)v34 + 3);
    if (v37 >= v36 >> 1)
    {
      v34 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1, (unint64_t)v34);
      static ObservationRegistrar.lastestAccessLists = v34;
    }
    *((_QWORD *)v34 + 2) = v37 + 1;
    v46(&v34[((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v37], v50, v4);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v51, v4);
  }
  v38 = *(void (**)(char *, char *, uint64_t))(v49 + 32);
  v39 = v48;
  v38(v48, v53, v19);
  outlined destroy of ObservationTracking._AccessList?((uint64_t)v18);
  v38(v32, v39, v19);
  v40 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v40)
  {
    v41 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v42 = *(_QWORD *)(v5 + 72);
    v43 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v43(v7, v41, v4);
      installObservationSlow<A>(accessList:attribute:)((uint64_t)v7, a1, v19);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      v41 += v42;
      --v40;
    }
    while (v40);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v47;
  return swift_bridgeObjectRelease();
}

void closure #1 in DetachedChild.value.getter()
{
  type metadata accessor for DetachedChild();
}

uint64_t sub_234F2D644(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t FunctionTypeMetadata1;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v13 = v7;
  v14 = v6;
  v15 = v5;
  v16 = v4;
  v17 = v8;
  type metadata accessor for _DetachedPlaceholder(255, v7, v5, a4);
  FunctionTypeMetadata1 = swift_getFunctionTypeMetadata1();
  return Attribute.syncMainIfReferences<A>(do:)((void (*)(_QWORD))partial apply for closure #1 in closure #1 in DetachedChild.value.getter, (uint64_t)&v12, FunctionTypeMetadata1, v6, v9);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance DetachedChild<A, B>(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for DetachedChild<A, B>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t static _DetachedPlaceholder._makeView(view:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int ShouldRecordTree;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  __int128 v25;
  unsigned int v26;
  int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD v36[5];
  int v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  int v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v28 = *a1;
  v29 = *((_DWORD *)a2 + 2);
  v34 = a2[2];
  v35 = *a2;
  v7 = *((_DWORD *)a2 + 8);
  v30 = a2[3];
  v31 = *((_DWORD *)a2 + 9);
  v32 = a2[6];
  v33 = a2[5];
  v9 = *((_DWORD *)a2 + 14);
  v8 = *((_DWORD *)a2 + 15);
  v10 = *((_DWORD *)a2 + 16);
  v11 = *((_DWORD *)a2 + 17);
  v12 = *((_DWORD *)a2 + 18);
  v13 = *((_DWORD *)a2 + 19);
  v14 = *((_DWORD *)a2 + 20);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(a4 + 16))(&v53, a3, a4);
  if ((v53 & 1) == 0)
  {
    LODWORD(v38) = v28;
    *(_QWORD *)&v53 = v35;
    DWORD2(v53) = v29;
    *(_QWORD *)&v54 = v34;
    *((_QWORD *)&v54 + 1) = v30;
    *(_QWORD *)&v55 = __PAIR64__(v31, v7);
    *((_QWORD *)&v55 + 1) = v33;
    *(_QWORD *)&v56 = v32;
    *((_QWORD *)&v56 + 1) = __PAIR64__(v8, v9);
    *(_QWORD *)&v57 = __PAIR64__(v11, v10);
    *((_QWORD *)&v57 + 1) = __PAIR64__(v13, v12);
    v58 = v14;
    return static _DetachedPlaceholder.makeStub(view:inputs:)((int *)&v38, (uint64_t *)&v53, a3, a4, (uint64_t)a5);
  }
  v24 = __PAIR64__(v8, v9);
  *(_QWORD *)&v25 = __PAIR64__(v11, v10);
  *((_QWORD *)&v25 + 1) = __PAIR64__(v13, v12);
  v26 = v7;
  v16 = specialized _GraphInputs.intern<A>(_:id:)(0);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = a3;
  *(_QWORD *)(v17 + 24) = a4;
  *(_DWORD *)(v17 + 32) = v28;
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
    AGSubgraphBeginTreeElement();
  v38 = v35;
  v39 = v29;
  v40 = v34;
  v41 = v30;
  v44 = v33;
  v45 = v32;
  v46 = v9;
  v47 = HIDWORD(v24);
  v48 = v25;
  v49 = v11;
  v50 = v12;
  v51 = v13;
  v52 = v14;
  v42 = 0;
  v43 = v31;
  *(_QWORD *)&v53 = v35;
  DWORD2(v53) = v29;
  *(_QWORD *)&v54 = v34;
  *((_QWORD *)&v54 + 1) = v30;
  DWORD1(v55) = v31;
  *((_QWORD *)&v55 + 1) = v33;
  *(_QWORD *)&v56 = v32;
  *((_QWORD *)&v56 + 1) = v24;
  v57 = v25;
  v58 = v14;
  if ((v31 & 0x20) != 0)
  {
LABEL_12:
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v23 = (uint64_t)a5;
    specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(v16, (uint64_t)&v53, (void (*)(uint64_t *__return_ptr, uint64_t, __int128 *))partial apply for closure #1 in static _DetachedPlaceholder._makeView(view:inputs:), a5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v42 = v26;
    if ((ShouldRecordTree & 1) != 0)
      goto LABEL_13;
    goto LABEL_11;
  }
  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, v30, v29, v18);
  v21 = *(_QWORD *)(v32 + 16);
  if (v21)
  {
    v22 = (_QWORD *)(v32 + 32);
    while (*v22 != v20)
    {
      v22 += 2;
      if (!--v21)
        goto LABEL_10;
    }
    goto LABEL_12;
  }
LABEL_10:
  v36[2] = v55;
  v36[3] = v56;
  v36[4] = v57;
  v37 = v58;
  v36[0] = v53;
  v36[1] = v54;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v23 = (uint64_t)a5;
  closure #1 in static _DetachedPlaceholder._makeView(view:inputs:)((uint64_t)v36, v28, a3, a4, (uint64_t)a5);
  v42 = v26;
  if ((ShouldRecordTree & 1) != 0)
  {
LABEL_13:
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(v23, (uint64_t)&v38);
    AGSubgraphEndTreeElement();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
LABEL_11:
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in static _DetachedPlaceholder._makeView(view:inputs:)@<X0>(uint64_t a1@<X1>, int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  int v19;

  v5 = *(_QWORD *)a1;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_DWORD *)(a1 + 80);
  v19 = a2;
  v11 = v5;
  v12 = v6;
  v13 = v7;
  v9 = *(_OWORD *)(a1 + 40);
  v14 = *(_OWORD *)(a1 + 24);
  v15 = v9;
  v16 = *(_OWORD *)(a1 + 56);
  v17 = *(_QWORD *)(a1 + 72);
  v18 = v8;
  return static _DetachedPlaceholder.makeStub(view:inputs:)(&v19, &v11, a3, a4, a5);
}

uint64_t static _DetachedPlaceholder.makeStub(view:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  int v31;
  int v32;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  char v39[16];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v34 = *a1;
  v31 = *((_DWORD *)a2 + 2);
  v6 = a2[2];
  v7 = *((_DWORD *)a2 + 6);
  v8 = *((_DWORD *)a2 + 7);
  v9 = *((_DWORD *)a2 + 9);
  v10 = a2[6];
  v23 = a2[5];
  v11 = *((_DWORD *)a2 + 15);
  v27 = *((_DWORD *)a2 + 14);
  v28 = *((_DWORD *)a2 + 8);
  v12 = *((_DWORD *)a2 + 16);
  v13 = *((_DWORD *)a2 + 17);
  v25 = *((_DWORD *)a2 + 19);
  v26 = *((_DWORD *)a2 + 18);
  v24 = *((_DWORD *)a2 + 20);
  v42 = *a2;
  v5 = v42;
  LODWORD(v43) = v31;
  v44 = v6;
  v45 = __PAIR64__(v8, v7);
  v46 = v28;
  v47 = v9;
  v48 = v23;
  v49 = v10;
  v50 = __PAIR64__(v11, v27);
  v51 = v12;
  v52 = v13;
  v53 = v26;
  v54 = v25;
  v55 = v24;
  _ViewInputs.makeIndirectOutputs()((uint64_t)&v36);
  v14 = v36;
  LODWORD(v42) = v34;
  v43 = v5;
  LODWORD(v44) = v31;
  v45 = v6;
  v46 = v7;
  v47 = v8;
  v48 = __PAIR64__(v9, v28);
  v49 = v23;
  v50 = v10;
  v51 = v27;
  v52 = v11;
  v53 = v12;
  v54 = v13;
  v55 = v26;
  v56 = v25;
  v57 = v24;
  v58 = v36;
  v32 = v37;
  v59 = v37;
  v60 = v38;
  v35 = v38;
  v16 = type metadata accessor for _DetachedPlaceholder.Stub(0, a3, a4, v15);
  v40 = v16;
  v41 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _DetachedPlaceholder<A>.Stub, v16);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<()>, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE095F0]);
  v18 = v17;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v42, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_8, (uint64_t)&v39, v16, MEMORY[0x24BEE4078], v18, MEMORY[0x24BEE40A8], v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  v21 = *(_QWORD *)(v14 + 16);
  if (v21)
  {
    swift_bridgeObjectRetain();
    v22 = 48;
    do
    {
      AGGraphSetIndirectDependency();
      v22 += 24;
      --v21;
    }
    while (v21);
    result = swift_bridgeObjectRelease();
  }
  if (v35 != *MEMORY[0x24BE096C0])
    result = AGGraphSetIndirectDependency();
  *(_QWORD *)a5 = v14;
  *(_DWORD *)(a5 + 8) = v32;
  *(_DWORD *)(a5 + 12) = v35;
  return result;
}

uint64_t _DetachedPlaceholder.Stub.view.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t Value;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  type metadata accessor for _DetachedPlaceholder(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  Value = AGGraphGetValue();
  v5 = *(_DWORD *)(Value + 8);
  v6 = *(_QWORD *)(Value + 16);
  v7 = *(_QWORD *)(Value + 40);
  v8 = *(_QWORD *)(Value + 48);
  v9 = *(_DWORD *)(Value + 80);
  v10 = *(_QWORD *)(Value + 88);
  *(_QWORD *)a3 = *(_QWORD *)Value;
  *(_DWORD *)(a3 + 8) = v5;
  *(_QWORD *)(a3 + 16) = v6;
  *(_OWORD *)(a3 + 24) = *(_OWORD *)(Value + 24);
  *(_QWORD *)(a3 + 40) = v7;
  *(_QWORD *)(a3 + 48) = v8;
  *(_OWORD *)(a3 + 56) = *(_OWORD *)(Value + 56);
  *(_QWORD *)(a3 + 72) = *(_QWORD *)(Value + 72);
  *(_DWORD *)(a3 + 80) = v9;
  *(_QWORD *)(a3 + 88) = v10;
  *(_QWORD *)(a3 + 96) = *(_QWORD *)(Value + 96);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t _DetachedPlaceholder.Stub.updateValue()(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;

  result = AGGraphGetOutputValue();
  if (!result)
  {
    v4 = *(_QWORD *)(v1 + 8);
    v5 = *(_DWORD *)(v1 + 16);
    v6 = *(_QWORD *)(v1 + 24);
    v7 = *(_DWORD *)(v1 + 32);
    v8 = *(_DWORD *)(v1 + 36);
    v24 = *(_DWORD *)(v1 + 44);
    v25 = *(_DWORD *)(v1 + 40);
    v22 = *(_QWORD *)(v1 + 56);
    v23 = *(_QWORD *)(v1 + 48);
    v20 = *(_DWORD *)(v1 + 68);
    v21 = *(_DWORD *)(v1 + 64);
    v18 = *(_DWORD *)(v1 + 76);
    v19 = *(_DWORD *)(v1 + 72);
    v16 = *(_DWORD *)(v1 + 84);
    v17 = *(_DWORD *)(v1 + 80);
    v15 = *(_DWORD *)(v1 + 88);
    v14 = *(_QWORD *)(v1 + 96);
    v9 = *(unsigned int *)(v1 + 104);
    v12 = *(_DWORD *)(v1 + 108);
    v13 = v9;
    v47 = HIDWORD(v4);
    v55 = v16;
    v58 = v9;
    v59 = v12;
    _DetachedPlaceholder.Stub.view.getter(a1, v9, (uint64_t)&v60);
    v45 = v60;
    v46 = v61;
    v49 = v63;
    v48 = v62;
    v50 = v64;
    v51 = v65;
    v52 = v66;
    v53 = v67;
    v54 = v68;
    v56 = v69;
    v57 = v70;
    v29 = v4;
    v30 = v5;
    v31 = v6;
    v32 = v7;
    v33 = v8;
    v34 = v25;
    v35 = v24;
    v36 = v23;
    v37 = v22;
    v38 = v21;
    v39 = v20;
    v40 = v19;
    v41 = v18;
    v42 = v17;
    v43 = v16;
    v44 = v15;
    v26 = v14;
    v27 = v13;
    v28 = v12;
    v11 = type metadata accessor for _DetachedPlaceholder(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v10);
    _DetachedPlaceholder.attach(inputs:outputs:)((uint64_t)&v29, &v26, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t _DetachedPlaceholder.attach(inputs:outputs:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  _QWORD v30[3];

  v4 = *a2;
  v5 = *((_DWORD *)a2 + 3);
  v24 = *((_DWORD *)a2 + 2);
  v6 = *(_QWORD *)(v3 + 88);
  v23 = *(_DWORD *)(v3 + 96);
  v25 = *(_DWORD *)(v3 + 100);
  v7 = (*(_QWORD *(**)(_QWORD *__return_ptr))(*(_QWORD *)(a3 + 24) + 16))(v30);
  v8 = v30[0];
  if ((v30[0] & 1) != 0)
  {
    if ((v30[0] & 2) != 0)
      goto LABEL_3;
  }
  else
  {
    MEMORY[0x24BDAC7A8](v7);
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for SwitchRule<ViewTransform>, (uint64_t)&type metadata for ViewTransform, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for SwitchRule);
    MEMORY[0x24BDAC7A8](v15);
    v16 = AGGraphMutateAttribute();
    MEMORY[0x24BDAC7A8](v16);
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for SwitchRule<ViewOrigin>, (uint64_t)&type metadata for ViewOrigin, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for SwitchRule);
    MEMORY[0x24BDAC7A8](v17);
    v18 = AGGraphMutateAttribute();
    MEMORY[0x24BDAC7A8](v18);
    MEMORY[0x24BDAC7A8](v19);
    v7 = (_QWORD *)AGGraphMutateAttribute();
    if ((v8 & 2) != 0)
    {
LABEL_3:
      if ((v8 & 4) != 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  MEMORY[0x24BDAC7A8](v7);
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for SwitchRule<ViewSize>, (uint64_t)&type metadata for ViewSize, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for SwitchRule);
  MEMORY[0x24BDAC7A8](v20);
  v7 = (_QWORD *)AGGraphMutateAttribute();
  if ((v8 & 4) != 0)
  {
LABEL_4:
    if ((v8 & 8) != 0)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_18:
  swift_beginAccess();
  v21 = swift_beginAccess();
  MEMORY[0x24BDAC7A8](v21);
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for SwitchRule<EnvironmentValues>, (uint64_t)&type metadata for EnvironmentValues, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for SwitchRule);
  MEMORY[0x24BDAC7A8](v22);
  v7 = (_QWORD *)AGGraphMutateAttribute();
  if ((v8 & 8) == 0)
  {
LABEL_5:
    MEMORY[0x24BDAC7A8](v7);
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for SwitchRule<Transaction>, (uint64_t)&type metadata for Transaction, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for SwitchRule);
    MEMORY[0x24BDAC7A8](v9);
    v7 = (_QWORD *)AGGraphMutateAttribute();
  }
LABEL_6:
  MEMORY[0x24BDAC7A8](v7);
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for SwitchRule<PreferenceKeys>, (uint64_t)&type metadata for PreferenceKeys, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for SwitchRule);
  MEMORY[0x24BDAC7A8](v10);
  AGGraphMutateAttribute();
  v11 = *(_QWORD *)(v4 + 16);
  v12 = *MEMORY[0x24BE096C0];
  if (v11)
  {
    swift_bridgeObjectRetain();
    v13 = 48;
    do
    {
      AGGraphSetIndirectDependency();
      v13 += 24;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease();
  }
  if (v5 != v12)
    AGGraphSetIndirectDependency();
  v28 = v4;
  v29 = v24;
  v26 = v6;
  v27 = v23;
  swift_bridgeObjectRetain();
  PreferencesOutputs.attachIndirectOutputs(to:)((uint64_t)&v26);
  if (v5 != v12 && v25 != v12)
    AGGraphSetIndirectAttribute();
  return swift_bridgeObjectRelease();
}

uint64_t SwitchRule.weakValue.getter@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t WeakValue;
  uint64_t v5;
  uint64_t v6;

  WeakValue = AGGraphGetWeakValue();
  v5 = *(_QWORD *)(a1 - 8);
  if (WeakValue)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2, WeakValue, a1);
    v6 = 0;
  }
  else
  {
    v6 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a2, v6, 1, a1);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance _DetachedPlaceholder<A>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return static _DetachedPlaceholder._makeView(view:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

uint64_t SwitchRule.value.getter@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t Value;
  uint64_t v11;

  v4 = type metadata accessor for Optional();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v11 - v6;
  SwitchRule.weakValue.getter(a1, (uint64_t)&v11 - v6);
  v8 = *(_QWORD *)(a1 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, a1) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a2, v7, a1);
  Value = AGGraphGetValue();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a2, Value, a1);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t protocol witness for Rule.value.getter in conformance SwitchRule<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return SwitchRule.value.getter(*(_QWORD *)(a1 + 16), a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SwitchRule<A>()
{
  return specialized SwitchRule.description.getter();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance SwitchRule<A>(uint64_t a1)
{
  MEMORY[0x23B7C9C04]("Q|;\x1BXg\n", a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t type metadata accessor for SwitchRule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SwitchRule);
}

uint64_t lazy protocol witness table accessor for type SwitchRule<ViewTransform> and conformance SwitchRule<A>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, a2, a3, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for SwitchRule);
    result = MEMORY[0x23B7C9C04]("q{;\x1BHf\n", v5);
    atomic_store(result, a1);
  }
  return result;
}

void partial apply for closure #1 in static _DetachedView._makeView(view:inputs:)()
{
  closure #1 in static _DetachedView._makeView(view:inputs:)();
}

uint64_t sub_234F2E854()
{
  return 48;
}

__n128 sub_234F2E860(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t type metadata accessor for _DetachedPlaceholder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _DetachedPlaceholder);
}

void type metadata accessor for DetachedChild()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t type metadata accessor for ConnectOutputsVisitor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ConnectOutputsVisitor);
}

uint64_t sub_234F2E89C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static _DetachedPlaceholder._makeView(view:inputs:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in static _DetachedPlaceholder._makeView(view:inputs:)(a1, *(_DWORD *)(v2 + 32), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

unint64_t lazy protocol witness table accessor for type _DetachableProperties and conformance _DetachableProperties()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _DetachableProperties and conformance _DetachableProperties;
  if (!lazy protocol witness table cache variable for type _DetachableProperties and conformance _DetachableProperties)
  {
    result = MEMORY[0x23B7C9C04]("}~;\x1B$g\n", &type metadata for _DetachableProperties);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DetachableProperties and conformance _DetachableProperties);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _DetachableProperties and conformance _DetachableProperties;
  if (!lazy protocol witness table cache variable for type _DetachableProperties and conformance _DetachableProperties)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _DetachableProperties, &type metadata for _DetachableProperties);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DetachableProperties and conformance _DetachableProperties);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _DetachableProperties and conformance _DetachableProperties;
  if (!lazy protocol witness table cache variable for type _DetachableProperties and conformance _DetachableProperties)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _DetachableProperties, &type metadata for _DetachableProperties);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DetachableProperties and conformance _DetachableProperties);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _DetachableProperties and conformance _DetachableProperties;
  if (!lazy protocol witness table cache variable for type _DetachableProperties and conformance _DetachableProperties)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _DetachableProperties, &type metadata for _DetachableProperties);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DetachableProperties and conformance _DetachableProperties);
  }
  return result;
}

uint64_t sub_234F2E9D8()
{
  return 48;
}

__n128 sub_234F2E9E4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t dispatch thunk of static _Detachable.matches<A>(key:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of static _Detachable.detachedProperties.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

ValueMetadata *type metadata accessor for _DetachableProperties()
{
  return &type metadata for _DetachableProperties;
}

uint64_t type metadata completion function for _DetachedView()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for _DetachedView(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_234F2EB0C + 4 * byte_2352B2620[v10]))();
  }
}

void storeEnumTagSinglePayload for _DetachedView(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_234F2EC84()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x234F2ECFCLL);
}

void sub_234F2EC8C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x234F2EC94);
  JUMPOUT(0x234F2ECFCLL);
}

void sub_234F2ECD4()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x234F2ECFCLL);
}

void sub_234F2ECDC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x234F2ECFCLL);
}

uint64_t sub_234F2ECE4(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x234F2ECFCLL);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x234F2ECF8);
    JUMPOUT(0x234F2ECF0);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t type metadata accessor for _DetachedKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _DetachedKey);
}

ValueMetadata *type metadata accessor for _EmptyDetached()
{
  return &type metadata for _EmptyDetached;
}

uint64_t destroy for _DetachedPlaceholder()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _DetachedPlaceholder(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v3;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _DetachedPlaceholder(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  return a1;
}

__n128 __swift_memcpy104_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for _DetachedPlaceholder(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for _DetachedPlaceholder(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 104))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _DetachedPlaceholder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

_UNKNOWN **sub_234F2F090()
{
  return &protocol witness table for _DetachedView<A, B, C>;
}

_UNKNOWN **sub_234F2F09C()
{
  return &protocol witness table for _DetachedView<A, B, C>;
}

uint64_t destroy for ConnectOutputsVisitor()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ConnectOutputsVisitor(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ConnectOutputsVisitor(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  return a1;
}

uint64_t assignWithTake for ConnectOutputsVisitor(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

uint64_t instantiation function for generic protocol witness table for SwitchRule<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04]("q{;\x1BHf\n");
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in SwitchRule<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t instantiation function for generic protocol witness table for DetachedChild<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DetachedChild<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in DetachedChild<A, B>()
{
  JUMPOUT(0x23B7C9C04);
}

void partial apply for closure #1 in DetachedChild.value.getter()
{
  closure #1 in DetachedChild.value.getter();
}

uint64_t partial apply for closure #1 in closure #1 in DetachedChild.value.getter(void (**a1)(_OWORD *))
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(_OWORD *);
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[6];
  uint64_t v9;

  v2 = *(_QWORD *)(v1 + 48);
  v3 = *a1;
  v4 = *(_OWORD *)(v2 + 56);
  v5 = *(_OWORD *)(v2 + 88);
  v8[4] = *(_OWORD *)(v2 + 72);
  v8[5] = v5;
  v9 = *(_QWORD *)(v2 + 104);
  v6 = *(_OWORD *)(v2 + 24);
  v8[0] = *(_OWORD *)(v2 + 8);
  v8[1] = v6;
  v8[2] = *(_OWORD *)(v2 + 40);
  v8[3] = v4;
  outlined retain of DetachedChild<A, B>(v2);
  v3(v8);
  return outlined release of DetachedChild<A, B>(v2);
}

uint64_t outlined retain of DetachedChild<A, B>(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of DetachedChild<A, B>(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1;
}

uint64_t specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = result;
  v3 = *(_DWORD *)(result + 8) | *(_DWORD *)(a2 + 32);
  *(_DWORD *)(result + 8) = 0;
  if ((v3 & 0x80) != 0 && *(_DWORD *)(result + 12) == *MEMORY[0x24BE096C0])
    v3 &= ~0x80u;
  if ((v3 & 0xFFFFFEFF) != 0)
  {
    result = AGSubgraphShouldRecordTree();
    if ((_DWORD)result)
    {
      if ((v3 & 4) != 0)
      {
        result = AGSubgraphAddTreeValue();
        if ((v3 & 8) == 0)
        {
LABEL_8:
          if ((v3 & 0x10) == 0)
            goto LABEL_9;
          goto LABEL_15;
        }
      }
      else if ((v3 & 8) == 0)
      {
        goto LABEL_8;
      }
      result = AGSubgraphAddTreeValue();
      if ((v3 & 0x10) == 0)
      {
LABEL_9:
        if ((v3 & 0x20) == 0)
          goto LABEL_10;
        goto LABEL_16;
      }
LABEL_15:
      result = AGSubgraphAddTreeValue();
      if ((v3 & 0x20) == 0)
      {
LABEL_10:
        if ((v3 & 0x40) == 0)
          goto LABEL_11;
        goto LABEL_17;
      }
LABEL_16:
      swift_beginAccess();
      result = AGSubgraphAddTreeValue();
      if ((v3 & 0x40) == 0)
      {
LABEL_11:
        if ((v3 & 0x80) == 0)
          return result;
LABEL_18:
        result = *(unsigned int *)(v2 + 12);
        if ((_DWORD)result != *MEMORY[0x24BE096C0])
          return AGSubgraphAddTreeValue();
        __break(1u);
        return result;
      }
LABEL_17:
      result = AGSubgraphAddTreeValue();
      if ((v3 & 0x80) == 0)
        return result;
      goto LABEL_18;
    }
  }
  return result;
}

uint64_t specialized SwitchRule.description.getter()
{
  Swift::String v0;

  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 547916002;
}

uint64_t type metadata accessor for _DetachedPlaceholder.Stub(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _DetachedPlaceholder.Stub);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_8@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

void base witness table accessor for _AttributeBody in _DetachedPlaceholder<A>.Stub()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t partial apply for specialized closure #1 in Attribute.setSwitchValue(_:)(uint64_t a1)
{
  uint64_t result;

  result = AGCreateWeakAttribute();
  *(_QWORD *)(a1 + 4) = result;
  return result;
}

uint64_t static Text.Superscript.== infix(_:_:)()
{
  return 1;
}

Swift::Int Text.Superscript.hashValue.getter()
{
  Hasher.init(_seed:)();
  return Hasher._finalize()();
}

ValueMetadata *type metadata accessor for Text.Superscript()
{
  return &type metadata for Text.Superscript;
}

uint64_t PlatformViewDefinition.deinit()
{
  uint64_t v0;

  return v0;
}

void static PlatformViewDefinition.setAllowsWindowActivationEvents(_:for:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static PlatformViewDefinition.setHitTestsAsOpaque(_:for:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

_QWORD *DisplayList.ViewUpdater.Platform.init(definition:)@<X0>(unint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(a1 + 80))(&v5);
  *a2 = v5 | a1;
  return result;
}

uint64_t PlatformViewDefinition.ViewKind.isContainer.getter()
{
  _BYTE *v0;

  return (*v0 < 0x11uLL) & (0x15F01u >> *v0);
}

void DisplayList.GraphicsRenderer.drawPlatformLayer(_:in:size:update:)(id a1, uint64_t a2, char a3, double a4, CGFloat a5)
{
  id v8;

  if ((a3 & 1) != 0)
  {
    objc_msgSend(a1, sel_setBounds_, 0.0, 0.0, a4, a5);
    objc_msgSend(a1, sel_layoutIfNeeded);
  }
  v8 = a1;
  specialized GraphicsContext.drawLayer(flags:content:)(0, a5, a2, v8);

}

void specialized DisplayList.ViewUpdater.AsyncLayer.update<A>(_:from:to:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  Class *v6;
  float v7;
  float v8;
  float v9;
  float v10;
  id v14;
  CALayer v15;
  Swift::Bool v16;
  Swift::String v17;
  id v18;

  if ((a6 & 1) != 0)
  {
    if ((a3 & 1) == 0)
    {
      v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBCEF8]), sel_init);
LABEL_22:
      v15.super.isa = *v6;
      v17._object = (void *)0x80000002352DD770;
      v18 = v14;
      v17._countAndFlagsBits = 0xD000000000000015;
      *(_QWORD *)&v15._attr.refcount = 1;
      DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v14, v17, v15, v16);

    }
  }
  else
  {
    if ((a3 & 1) != 0)
    {
      v8 = *((float *)&a4 + 1);
      v7 = *(float *)&a4;
      v10 = *((float *)&a5 + 1);
      v9 = *(float *)&a5;
LABEL_19:
      if (one-time initialization token for cache != -1)
        swift_once();
      v14 = (id)specialized ObjectCache.subscript.getter(v7, v8, v9, v10);
      goto LABEL_22;
    }
    v8 = *((float *)&a4 + 1);
    v7 = *(float *)&a4;
    v10 = *((float *)&a5 + 1);
    v9 = *(float *)&a5;
    if (*(float *)&a4 != *(float *)&a1
      || *((float *)&a4 + 1) != *((float *)&a1 + 1)
      || *(float *)&a5 != *(float *)&a2
      || *((float *)&a5 + 1) != *((float *)&a2 + 1))
    {
      goto LABEL_19;
    }
  }
}

void specialized DisplayList.ViewUpdater.AsyncLayer.update<A>(_:from:to:)(double *a1, uint64_t a2)
{
  Class *v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  Swift::String v10;
  Swift::Bool v11;
  __int128 v12;
  _QWORD v13[3];
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  CALayer v25;

  v3 = *(double *)(a2 + 8);
  if (*(double *)a2 != *a1
    || v3 != a1[1]
    || *(double *)(a2 + 16) != a1[2]
    || *(double *)(a2 + 24) != a1[3]
    || *(double *)(a2 + 32) != a1[4]
    || *(double *)(a2 + 40) != a1[5]
    || *(double *)(a2 + 48) != a1[6]
    || *(double *)(a2 + 56) != a1[7]
    || *(double *)(a2 + 64) != a1[8])
  {
    v12 = *(_OWORD *)(a2 + 16);
    v4 = *(_QWORD *)(a2 + 32);
    v5 = *(_QWORD *)(a2 + 40);
    v6 = *(_QWORD *)(a2 + 48);
    v7 = *(_QWORD *)(a2 + 56);
    v8 = *(_QWORD *)(a2 + 64);
    v13[0] = *(_QWORD *)a2;
    *(double *)&v13[1] = v3;
    v13[2] = 0;
    v14 = v12;
    v15 = v4;
    v16 = 0;
    v17 = v5;
    v18 = 0;
    v19 = 0;
    v20 = xmmword_235281560;
    v21 = v6;
    v22 = v7;
    v23 = 0;
    v24 = v8;
    v9 = objc_msgSend((id)objc_opt_self(), sel_valueWithCATransform3D_, v13);
    v25.super.isa = *v2;
    v10._countAndFlagsBits = 0x726F66736E617274;
    v10._object = (void *)0xE90000000000006DLL;
    *(_QWORD *)&v25._attr.refcount = 1;
    DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v9, v10, v25, v11);

  }
}

id specialized ShapeLayerShadowHelper.visitPaint<A>(_:)(float a1, float a2, float a3, float a4)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int128 v15;
  int v16;
  int8x16_t v17;
  void *v18;
  uint64_t v19;
  int v20;
  char v21;
  __int128 v22;
  double v23;
  double v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v34;
  id v35;
  id v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v47;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  int v57;
  char v58;
  char v59;
  uint64_t v60;
  _OWORD v61[2];
  char v62;
  _BYTE v63[40];
  int8x16_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  unsigned __int128 v68;
  unsigned __int128 v69;
  unsigned __int128 v70;
  uint64_t v71;
  unsigned __int128 v72;
  uint64_t v73;
  char v74;

  v5 = v4;
  v6 = *(_OWORD *)(v4 + 32);
  v61[0] = *(_OWORD *)(v4 + 16);
  v61[1] = v6;
  v62 = *(_BYTE *)(v4 + 48);
  outlined init with take of Path.Storage((uint64_t)v61, (uint64_t)v63);
  outlined retain of Path.Storage((uint64_t)v63, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
  ShapeType.init(_:)((uint64_t)v61, (uint64_t)&v64);
  v8 = v64.i64[1];
  v7 = v64.i64[0];
  v10 = *((_QWORD *)&v65 + 1);
  v9 = v65;
  v12 = *((_QWORD *)&v66 + 1);
  *(_QWORD *)&v11 = v66;
  v13 = v67;
  v15 = v68;
  v14 = v69;
  v16 = BYTE8(v69);
  v17.i64[0] = LODWORD(a1);
  v17.i64[1] = LODWORD(a3);
  v64 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)__PAIR64__(LODWORD(a4), LODWORD(a2)), 0x20uLL), v17);
  v65 = 0u;
  v66 = 0u;
  LOBYTE(v67) = 0;
  v68 = __PAIR128__(v8, v7);
  v69 = __PAIR128__(v10, v9);
  v70 = __PAIR128__(v12, *(unint64_t *)&v11);
  v71 = v13;
  v72 = v15;
  v73 = v14;
  v74 = v16;
  v45 = v11;
  v44 = v14;
  if (v16)
  {
    if (v16 == 3
      && !(v8 | v7 | v9 | v10 | *(_QWORD *)&v11 | v12 | v13 | (unint64_t)v15 | *((_QWORD *)&v15 + 1) | v14))
    {
      v52 = v9;
      v18 = *(void **)(v5 + 8);
      v34 = *(_BYTE *)v5 & 3;
      if ((_DWORD)v34 == 2
        || (v35 = objc_msgSend(*(id *)(v5 + 8), sel_delegate)) == 0)
      {
        CoreViewSetShadow(2, v18, 0, 0.0, 0.0, 0.0);
      }
      else
      {
        v36 = v35;
        v37 = v34;
        v38 = v36;
        v39 = CoreViewResolvedSystem(v37, v36);
        CoreViewSetShadow(v39, v38, 0, 0.0, 0.0, 0.0);
        swift_unknownObjectRelease();
      }
      outlined release of (PaintType, ShapeType)((uint64_t)&v64);
      v9 = v52;
      if ((*(_BYTE *)(v5 + 117) & 1) == 0)
        return (id)outlined consume of ShapeType(v7, v8, v9, v10, LOBYTE(v45), v12, v13, v15, *((uint64_t *)&v15 + 1), v44, v16);
    }
    else
    {
      v18 = *(void **)(v5 + 8);
      v60 = *(_QWORD *)v5;
      v19 = *(_QWORD *)(v5 + 104);
      v20 = *(_DWORD *)(v5 + 112);
      v21 = *(_BYTE *)(v5 + 116);
      v22 = *(_OWORD *)(v5 + 88);
      v54 = *(_OWORD *)(v5 + 72);
      v55 = v22;
      v56 = v19;
      v58 = v21;
      v57 = v20;
      v59 = 0;
      v23 = *(double *)(v5 + 56);
      v24 = *(double *)(v5 + 64);
      outlined copy of ShapeType(v7, v8, v9, v10, LOBYTE(v11), v12, v13, v15, *((uint64_t *)&v15 + 1), v14, v16);
      updateShadow(platform:layer:shadow:paintOpacity:path:offset:)(&v60, v18, (uint64_t *)&v54, (uint64_t)v61, a4, v23, v24);
      outlined release of (PaintType, ShapeType)((uint64_t)&v64);
      if ((*(_BYTE *)(v5 + 117) & 1) == 0)
        return (id)outlined consume of ShapeType(v7, v8, v9, v10, LOBYTE(v45), v12, v13, v15, *((uint64_t *)&v15 + 1), v44, v16);
    }
    objc_msgSend(v18, sel_setCornerRadius_, 0.0);
    return (id)outlined consume of ShapeType(v7, v8, v9, v10, LOBYTE(v45), v12, v13, v15, *((uint64_t *)&v15 + 1), v44, v16);
  }
  v25 = *(void **)(v5 + 8);
  v41 = *(_QWORD *)(v5 + 72);
  v49 = v12;
  v26 = v7;
  v27 = *(unsigned int *)(v5 + 80);
  v28 = *(float *)(v5 + 84);
  v40 = *(_OWORD *)(v5 + 88);
  v47 = v8;
  v29 = *(_QWORD *)(v5 + 104);
  v42 = *(_DWORD *)(v5 + 112);
  v43 = *(_QWORD *)v5;
  v51 = v9;
  v30 = *(_BYTE *)(v5 + 116);
  objc_msgSend(v25, sel_setShadowPathIsBounds_, 1);
  objc_msgSend(v25, sel_setShadowPath_, 0);
  v60 = v43;
  v31 = v27 | ((unint64_t)COERCE_UNSIGNED_INT(v28 * a4) << 32);
  v7 = v26;
  v12 = v49;
  *(_QWORD *)&v54 = v41;
  *((_QWORD *)&v54 + 1) = v31;
  v55 = v40;
  v56 = v29;
  v8 = v47;
  v58 = v30;
  v57 = v42;
  v59 = 0;
  DisplayList.ViewUpdater.Platform.setShadow(_:layer:)((uint64_t)&v54, v25);
  v9 = v51;
  outlined release of (PaintType, ShapeType)((uint64_t)&v64);
  if ((*(_BYTE *)(v5 + 117) & 1) == 0)
    return (id)outlined consume of ShapeType(v7, v8, v9, v10, LOBYTE(v45), v12, v13, v15, *((uint64_t *)&v15 + 1), v44, v16);
  objc_msgSend(v25, sel_setCornerRadius_, v45);
  v32 = (_QWORD *)MEMORY[0x24BDE58E8];
  if ((v49 & 1) == 0)
    v32 = (_QWORD *)MEMORY[0x24BDE58E0];
  return objc_msgSend(v25, sel_setCornerCurve_, *v32);
}

BOOL static PlatformViewDefinition.ViewKind.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void DisplayList.ViewUpdater.Platform.updateItemView(_:index:item:state:)(uint64_t a1, uint64_t a2, double *a3, __int128 *a4)
{
  uint64_t v7;
  double v8;
  uint64_t v9;
  double v10;
  double v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;
  uint64_t ObjectType;
  uint64_t v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  int v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v7 = type metadata accessor for Date();
  MEMORY[0x24BDAC7A8](v7);
  v8 = *a3;
  v9 = *((_QWORD *)a3 + 1);
  v11 = a3[2];
  v10 = a3[3];
  v12 = *((_QWORD *)a3 + 4);
  v13 = *((_QWORD *)a3 + 5);
  v14 = *((_QWORD *)a3 + 6);
  v33 = *((_QWORD *)a3 + 7);
  v32 = *((unsigned __int16 *)a3 + 32) | (*((unsigned __int8 *)a3 + 66) << 16);
  v30 = *((_DWORD *)a3 + 17);
  v15 = v14 >> 62;
  v31 = v12;
  if (!(v14 >> 62))
  {
    if (*(unsigned __int16 *)(a1 + 82) != (unsigned __int16)v14)
    {
      v16 = a4[9];
      v42 = a4[8];
      v43 = v16;
      v44 = a4[10];
      v17 = a4[5];
      v38 = a4[4];
      v39 = v17;
      v18 = a4[7];
      v40 = a4[6];
      v41 = v18;
      v19 = a4[1];
      v34 = *a4;
      v35 = v19;
      v20 = a4[3];
      v36 = a4[2];
      v37 = v20;
      *(_BYTE *)(a1 + 105) = 0;
      if ((*(_BYTE *)(a1 + 57) & 0x20) != 0)
        *(_BYTE *)(a1 + 57) &= ~0x20u;
      __asm { BR              X10 }
    }
    goto LABEL_16;
  }
  if ((_DWORD)v15 != 1)
    goto LABEL_26;
  outlined copy of DisplayList.Item.Value(v13, v14);
  swift_bridgeObjectRelease();
  if (v31)
  {
    v21 = (2 * ((33 * (v31 >> 16)) ^ v31)) | 1;
    if (*(unsigned __int16 *)(a1 + 82) == ((unsigned __int16)(2 * ((33 * WORD1(v31)) ^ v31)) | 1))
      goto LABEL_13;
LABEL_12:
    *(_WORD *)(a1 + 82) = v21;
    __asm { BR              X10 }
  }
  if (*(_WORD *)(a1 + 82))
  {
    LOWORD(v21) = 0;
    goto LABEL_12;
  }
LABEL_13:
  if (BYTE4(v14) == 8)
    __asm { BR              X10 }
  outlined consume of DisplayList.Effect(v13, v14, SBYTE4(v14));
  v12 = v31;
LABEL_16:
  if ((*(_BYTE *)(a1 + 57) & 0x20) != 0)
  {
    v25 = a4[9];
    v42 = a4[8];
    v43 = v25;
    v44 = a4[10];
    v26 = a4[5];
    v38 = a4[4];
    v39 = v26;
    v27 = a4[7];
    v40 = a4[6];
    v41 = v27;
    v28 = a4[1];
    v34 = *a4;
    v35 = v28;
    v29 = a4[3];
    v36 = a4[2];
    v37 = v29;
    if (!(_DWORD)v15)
      __asm { BR              X10 }
    goto LABEL_26;
  }
  if (*(_BYTE *)(a1 + 56) == 7 && (v11 != *(double *)(a1 + 40) || v10 != *(double *)(a1 + 48)))
  {
    swift_unknownObjectRetain();
    ObjectType = swift_getObjectType();
    v23 = swift_conformsToProtocol2();
    if (v23)
    {
      *(_QWORD *)&v36 = 0;
      v34 = 0u;
      v35 = 0u;
      BYTE8(v36) = -1;
      v24 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t, uint64_t))(v23 + 40))(&v34, 1, ObjectType, v23);
      swift_unknownObjectRelease();
      *(_BYTE *)(a1 + 105) = (v24 & 1) == 0;
      v12 = v31;
      goto LABEL_22;
    }
    __break(1u);
LABEL_26:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x234F32844);
  }
LABEL_22:
  *(double *)&v34 = v8;
  *((_QWORD *)&v34 + 1) = v9;
  *(double *)&v35 = v11;
  *((double *)&v35 + 1) = v10;
  *(_QWORD *)&v36 = v12;
  *((_QWORD *)&v36 + 1) = v13;
  *(_QWORD *)&v37 = v14;
  *((_QWORD *)&v37 + 1) = v33;
  BYTE2(v38) = BYTE2(v32);
  LOWORD(v38) = v32;
  DWORD1(v38) = v30;
  DisplayList.ViewUpdater.Platform.updateState(_:item:size:state:)(a1, &v34, (uint64_t)a4, v11, v10);
}

BOOL DisplayList.ViewUpdater.Platform.updateItemViewAsync(layer:index:oldItem:oldState:newItem:newState:)(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, double *a5, __int128 *a6)
{
  double *v6;
  CGFloat v9;
  CGFloat v10;
  double v11;
  double v12;
  unint64_t v13;
  double v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  double v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  unint64_t v64;
  CGFloat v65;
  double v66;
  double v67;
  CGFloat v68;
  CGFloat v69;
  uint64_t v70;
  int v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  char v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  char v131;
  char v132;
  char v133;
  uint64_t v135;
  void *v136;
  char v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  int v142;
  unint64_t v143;
  int v144;
  __int16 v145;
  __int16 v146;
  __int16 v147;
  __int16 v148;
  char v149;
  char v150;
  int v151;
  char v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  char v158;
  int v159;
  char v160;
  int v161;
  char v163;
  Swift::Double v164;
  BOOL v165;
  double v166;
  char v167;
  int v168;
  char v169;
  int v170;
  uint64_t v171;
  int v172;
  char v173;
  int v174;
  char v175;
  int v176;
  char v177;
  BOOL v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  double v185;
  double v186;
  double v187;
  double v188;
  double v189;
  double v190;
  double v191;
  double v192;
  unint64_t v193;
  __int128 *v194;
  void *v195;
  Swift::String v196;
  Swift::Bool v197;
  uint64_t v198;
  uint64_t v199;
  char v200;
  uint64_t v201;
  __int16 v202;
  uint64_t v203;
  char v204;
  char v205;
  char v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  __int128 v212;
  char v213;
  char v214;
  char v215;
  CGFloat v216;
  uint64_t v217;
  char v218;
  CGFloat v219;
  uint64_t v220;
  char v221;
  CGFloat v222;
  char v223;
  uint64_t v224;
  CGFloat v225;
  uint64_t v226;
  uint64_t v227;
  __int128 v228;
  uint64_t v229;
  uint64_t ObjectType;
  double v231;
  char v232;
  uint64_t v233;
  uint64_t v234;
  double v235;
  void *v236;
  char v237;
  CGFloat v238;
  void *v239;
  uint64_t v240;
  double v241;
  CGFloat v242;
  char v243;
  uint64_t v244;
  char v245;
  __int128 v246;
  uint64_t v247;
  uint64_t v248;
  __int128 v249;
  uint64_t v250;
  float v251;
  __int128 v252;
  float v253;
  uint64_t v254;
  float v255;
  uint64_t v256;
  uint64_t v257;
  float afterb;
  char after;
  SwiftUI::Time aftera;
  uint64_t afterc;
  float v262;
  uint64_t (*v263)(__int128 *, uint64_t, uint64_t);
  char v264;
  __int16 v265;
  char v266;
  uint64_t v267;
  uint64_t v268;
  float v269;
  uint64_t v270;
  char v271;
  int v272;
  __int16 v273;
  uint64_t v274;
  uint64_t v275;
  int v276;
  float v277;
  char v278;
  __int16 v279;
  uint64_t v280;
  uint64_t v281;
  __int128 v282;
  float v283;
  void *v284;
  uint64_t v285;
  char v286;
  double v287;
  char v288;
  uint64_t v289;
  __int128 v290;
  int v291;
  int v292;
  double v293;
  CGFloat v294;
  CGFloat v295;
  int v296;
  int v297;
  uint64_t v298;
  uint64_t v299;
  int v300;
  int v301;
  uint64_t v302;
  uint64_t v305;
  uint64_t v306;
  CGFloat v307;
  uint64_t v308;
  unint64_t v309;
  double v310;
  double v311;
  __int128 t2;
  __int128 t2_16;
  _BYTE t2_32[32];
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  _BYTE t1[32];
  _BYTE t1_32[32];
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  uint64_t v377;
  unint64_t v378;
  unint64_t v379;
  uint64_t v380;
  __int16 v381;
  char v382;
  int v383;
  __int128 v384;
  __int128 v385;
  CGFloat v386;
  CGFloat v387;
  unint64_t v388;
  uint64_t v389;
  __int16 v390;
  char v391;
  int v392;
  _OWORD v393[2];
  char v394;
  __int128 v395;
  double v396;
  double v397;
  uint64_t v398;
  unint64_t v399;
  unint64_t v400;
  uint64_t v401;
  __int16 v402;
  char v403;
  int v404;
  CGAffineTransform v405;
  unint64_t v406;
  uint64_t v407;
  __int16 v408;
  char v409;
  int v410;
  uint64_t v411;
  CALayer v412;

  v411 = *MEMORY[0x24BDAC8D0];
  v10 = *(double *)a3;
  v9 = *(double *)(a3 + 8);
  v12 = *(double *)(a3 + 16);
  v11 = *(double *)(a3 + 24);
  v14 = *(double *)(a3 + 32);
  v13 = *(unint64_t *)(a3 + 40);
  v16 = *(_QWORD *)(a3 + 48);
  v15 = *(_QWORD *)(a3 + 56);
  v17 = *(unsigned __int16 *)(a3 + 64) | (*(unsigned __int8 *)(a3 + 66) << 16);
  v18 = *(_DWORD *)(a3 + 68);
  v20 = *a5;
  v19 = *((_QWORD *)a5 + 1);
  v22 = a5[2];
  v21 = a5[3];
  v23 = *((_QWORD *)a5 + 4);
  v309 = *((_QWORD *)a5 + 5);
  v25 = *((_QWORD *)a5 + 6);
  v24 = *((_QWORD *)a5 + 7);
  v26 = *((_DWORD *)a5 + 17);
  v27 = v25 >> 62;
  v28 = *v6;
  if (v25 >> 62 == 3)
  {
    v29 = *((unsigned __int16 *)a5 + 32) | (*((unsigned __int8 *)a5 + 66) << 16);
    v30 = *((_QWORD *)a5 + 5);
    if ((v29 & 0xFFFFFF) == 0 && v25 == 0xC000000000000000 && !(v24 | v309))
      goto LABEL_17;
    v31 = v16 >> 62;
    if (v16 >> 62 == 3)
      goto LABEL_17;
  }
  else
  {
    v29 = *((unsigned __int16 *)a5 + 32) | (*((unsigned __int8 *)a5 + 66) << 16);
    v31 = v16 >> 62;
    v30 = *((_QWORD *)a5 + 5);
    if (v16 >> 62 == 3 || (_DWORD)v27 == 2)
      goto LABEL_17;
  }
  if ((_DWORD)v31)
  {
    if ((_DWORD)v31 == 1 && (_DWORD)v27 == 1)
    {
      v307 = *(double *)(a3 + 40);
      v308 = *(_QWORD *)(a3 + 56);
      v302 = a1;
      v300 = *((_DWORD *)a5 + 17);
      v298 = *((_QWORD *)a5 + 4);
      v296 = *(_DWORD *)(a3 + 68);
      v293 = v28;
      v294 = *(double *)(a3 + 32);
      if (v23 == *(_QWORD *)&v14)
      {
        if (BYTE4(v16) == 8)
          __asm { BR              X10 }
        v37 = *(uint64_t *)(a3 + 40);
        v38 = *(_QWORD *)(a3 + 48);
        goto LABEL_34;
      }
      v305 = *((_QWORD *)a5 + 7);
      if (BYTE4(v16) == 3)
      {
        v292 = *(unsigned __int16 *)(a3 + 64) | (*(unsigned __int8 *)(a3 + 66) << 16);
        if (BYTE4(v25) == 3)
        {
          v95 = v30;
          v96 = *(_QWORD *)(a3 + 40);
          outlined init with copy of AnyTrackedValue(v13 + 16, (uint64_t)&v364);
          outlined init with copy of AnyTrackedValue(v30 + 16, (uint64_t)&v353);
          v270 = *((_QWORD *)&v365 + 1);
          v97 = v366;
          __swift_project_boxed_opaque_existential_1(&v364, *((uint64_t *)&v365 + 1));
          v263 = *(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v97 + 24);
          outlined copy of DisplayList.Effect(v96, v16, 3);
          outlined copy of DisplayList.Effect(v30, v25, 3);
          outlined copy of DisplayList.Item.Value(v96, v16);
          outlined copy of DisplayList.Item.Value(v30, v25);
          outlined copy of DisplayList.Effect(v96, v16, 3);
          outlined copy of DisplayList.Effect(v30, v25, 3);
          v98 = v263(&v353, v270, v97);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v353);
          if ((v98 & 1) != 0)
          {
            outlined consume of DisplayList.Effect(*(uint64_t *)&v307, v16, 3);
            outlined consume of DisplayList.Effect(v95, v25, 3);
            outlined consume of DisplayList.Item.Value(*(uint64_t *)&v307, v16);
            outlined consume of DisplayList.Item.Value(v95, v25);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v364);
            outlined consume of DisplayList.Effect(*(uint64_t *)&v307, v16, 3);
            outlined consume of DisplayList.Effect(v95, v25, 3);
            return 0;
          }
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v364);
          outlined consume of DisplayList.Effect(*(uint64_t *)&v307, v16, 3);
          outlined consume of DisplayList.Effect(v95, v25, 3);
          v30 = v95;
          v107 = v305;
          goto LABEL_93;
        }
        v106 = *(_QWORD *)(a3 + 40);
        outlined copy of DisplayList.Effect(v13, v16, 3);
        outlined copy of DisplayList.Effect(v30, v25, SBYTE4(v25));
        outlined copy of DisplayList.Item.Value(v106, v16);
        v101 = v305;
        outlined copy of DisplayList.Item.Value(v30, v25);
        outlined copy of DisplayList.Effect(v106, v16, 3);
        outlined copy of DisplayList.Effect(v30, v25, SBYTE4(v25));
        outlined consume of DisplayList.Effect(v106, v16, 3);
        v102 = v30;
        v103 = v25;
        v104 = BYTE4(v25);
      }
      else
      {
        if (BYTE4(v16) == 8)
        {
          v39 = *(_QWORD *)(a3 + 40);
          v40 = *(unsigned __int16 *)(a3 + 64) | (*(unsigned __int8 *)(a3 + 66) << 16);
          outlined copy of DisplayList.Item.Value(v13, v16);
          outlined copy of DisplayList.Item.Value(v30, v25);
          outlined copy of DisplayList.Effect(v39, v16, 8);
          outlined copy of DisplayList.Effect(v30, v25, SBYTE4(v25));
          v292 = v40;
          if (BYTE4(v25) == 8)
            __asm { BR              X1 }
          outlined copy of DisplayList.Effect(v39, v16, SBYTE4(v16));
          outlined copy of DisplayList.Effect(v30, v25, SBYTE4(v25));
          outlined consume of DisplayList.Effect(v39, v16, SBYTE4(v16));
          outlined consume of DisplayList.Effect(v30, v25, SBYTE4(v25));
          v107 = v305;
LABEL_93:
          v15 = v308;
          goto LABEL_94;
        }
        v99 = *(_QWORD *)(a3 + 40);
        v100 = *(unsigned __int16 *)(a3 + 64) | (*(unsigned __int8 *)(a3 + 66) << 16);
        outlined copy of DisplayList.Effect(v13, v16, SBYTE4(v16));
        outlined copy of DisplayList.Effect(v30, v25, SBYTE4(v25));
        v292 = v100;
        outlined copy of DisplayList.Item.Value(v99, v16);
        v101 = v305;
        outlined copy of DisplayList.Item.Value(v30, v25);
        outlined copy of DisplayList.Effect(v99, v16, SBYTE4(v16));
        outlined copy of DisplayList.Effect(v30, v25, SBYTE4(v25));
        outlined consume of DisplayList.Effect(v99, v16, SBYTE4(v16));
        v102 = v30;
        v103 = v25;
        v104 = BYTE4(v25);
      }
      outlined consume of DisplayList.Effect(v102, v103, v104);
      v107 = v101;
LABEL_94:
      v310 = v293;
      *(CGFloat *)&v384 = v10;
      *((CGFloat *)&v384 + 1) = v9;
      *(double *)&v385 = v12;
      *((double *)&v385 + 1) = v11;
      v386 = v294;
      v387 = v307;
      v388 = v16;
      v389 = v15;
      v391 = BYTE2(v292);
      v390 = v292;
      v392 = v296;
      *(double *)&v375 = v20;
      *((_QWORD *)&v375 + 1) = v19;
      *(double *)&v376 = v22;
      *((double *)&v376 + 1) = v21;
      v377 = v298;
      v378 = v30;
      v379 = v25;
      v380 = v107;
      v382 = BYTE2(v29);
      v381 = v29;
      v383 = v300;
      v199 = v30;
      v35 = DisplayList.ViewUpdater.Platform.updateStateAsync(layer:oldItem:oldSize:oldState:newItem:newSize:newState:)(v302, &v384, (uint64_t)a4, &v375, (uint64_t)a6, v12, v11, v22, v21);
      outlined consume of DisplayList.Effect(*(uint64_t *)&v307, v16, SBYTE4(v16));
      outlined consume of DisplayList.Effect(v199, v25, SBYTE4(v25));
      outlined consume of DisplayList.Item.Value(*(uint64_t *)&v307, v16);
      outlined consume of DisplayList.Item.Value(v199, v25);
      return v35;
    }
  }
  else if (!(_DWORD)v27)
  {
    if ((unsigned __int16)*(_QWORD *)(a3 + 48) != (unsigned __int16)v25)
    {
      v306 = *((_QWORD *)a5 + 7);
      v41 = a4[8];
      v42 = a4[6];
      v360 = a4[7];
      v361 = v41;
      v43 = a4[8];
      v44 = a4[10];
      v362 = a4[9];
      v363 = v44;
      v45 = a4[4];
      v46 = a4[2];
      v356 = a4[3];
      v357 = v45;
      v47 = a4[4];
      v48 = a4[6];
      v358 = a4[5];
      v359 = v48;
      v49 = *a4;
      v50 = *a4;
      v51 = a4[2];
      v354 = a4[1];
      v355 = v51;
      v350 = v43;
      v351 = v362;
      v352 = a4[10];
      v353 = v49;
      v346 = v47;
      v347 = v358;
      v348 = v42;
      v349 = v360;
      v342 = v50;
      v343 = v354;
      v344 = v46;
      v345 = v356;
      v52 = a6[7];
      v53 = a6[9];
      v372 = a6[8];
      v373 = v53;
      v54 = a6[9];
      v374 = a6[10];
      v55 = a6[3];
      v56 = a6[5];
      v368 = a6[4];
      v369 = v56;
      v57 = a6[5];
      v58 = a6[7];
      v370 = a6[6];
      v371 = v58;
      v59 = a6[1];
      v364 = *a6;
      v365 = v59;
      v60 = a6[3];
      v62 = *a6;
      v61 = a6[1];
      v366 = a6[2];
      v367 = v60;
      v339 = v372;
      v340 = v54;
      v341 = a6[10];
      v335 = v368;
      v336 = v57;
      v337 = v370;
      v338 = v52;
      v331 = v62;
      v332 = v61;
      v333 = v366;
      v334 = v55;
      *(double *)&v375 = v12;
      *((double *)&v375 + 1) = v11;
      v310 = v22;
      v311 = v21;
      *(_BYTE *)(a1 + 32) = 0;
      switch(v13 >> 60)
      {
        case 1uLL:
          if (v30 >> 60 != 1)
            goto LABEL_75;
          v295 = v14;
          v297 = v18;
          v299 = v23;
          v301 = v26;
          v251 = *(float *)(v13 + 28);
          v253 = *(float *)(v13 + 24);
          v255 = *(float *)(v13 + 20);
          afterb = *(float *)(v13 + 16);
          v283 = *(float *)(v30 + 16);
          v277 = *(float *)(v30 + 20);
          v269 = *(float *)(v30 + 24);
          v262 = *(float *)(v30 + 28);
          v64 = v13;
          v291 = v17;
          outlined copy of DisplayList.Item.Value(v13, v16);
          outlined copy of DisplayList.Item.Value(v30, v25);
          v276 = v29;
          if (v283 == afterb && v277 == v255 && v269 == v253 && v262 == v251)
          {
            v65 = *(double *)&v64;
            outlined copy of DisplayList.Item.Value(v64, v16);
            outlined copy of DisplayList.Item.Value(v30, v25);
            outlined copy of DisplayList.Item.Value(v64, v16);
            outlined copy of DisplayList.Item.Value(v30, v25);
            outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)&v353);
            outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)&v364);
            outlined consume of DisplayList.Content.Value(v64);
            outlined consume of DisplayList.Content.Value(v30);
            v66 = v21;
            v67 = v22;
            v68 = v11;
            v69 = v12;
            v70 = a1;
            goto LABEL_88;
          }
          outlined copy of DisplayList.Item.Value(v64, v16);
          outlined copy of DisplayList.Item.Value(v30, v25);
          outlined copy of DisplayList.Item.Value(v64, v16);
          outlined copy of DisplayList.Item.Value(v30, v25);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)&v353);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)&v364);
          if (one-time initialization token for cache != -1)
            swift_once();
          v195 = (void *)specialized ObjectCache.subscript.getter(v283, v277, v269, v262);
          v412.super.isa = *(Class *)a1;
          v196._countAndFlagsBits = 0x756F72676B636162;
          v196._object = (void *)0xEF726F6C6F43646ELL;
          *(_QWORD *)&v412._attr.refcount = 1;
          DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v195, v196, v412, v197);

          outlined consume of DisplayList.Content.Value(v64);
          outlined consume of DisplayList.Content.Value(v30);
          v66 = v21;
          v67 = v22;
          v68 = v11;
          v69 = v12;
          v70 = a1;
          goto LABEL_87;
        case 3uLL:
          if (v30 >> 60 != 3)
            goto LABEL_75;
          v271 = *(_BYTE *)(v13 + 24);
          v108 = *(_QWORD *)(v13 + 32);
          v109 = *(_QWORD *)(v13 + 40);
          v110 = *(_QWORD *)(v13 + 48);
          v111 = *(_BYTE *)(v13 + 56);
          v112 = *(_QWORD *)(v13 + 60);
          v113 = *(_QWORD *)(v13 + 68);
          v114 = *(_BYTE *)(v13 + 76);
          v115 = *(_QWORD *)(v13 + 80);
          v116 = *(_QWORD *)(v13 + 88);
          v256 = *(_QWORD *)(v13 + 96);
          v254 = *(_QWORD *)(v13 + 104);
          v117 = *(_BYTE *)(v13 + 112);
          v264 = *(_BYTE *)(v13 + 114);
          after = *(_BYTE *)(v13 + 115);
          v118 = *(_BYTE *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x71);
          v284 = *(void **)(v30 + 16);
          v278 = *(_BYTE *)(v30 + 24);
          v119 = *(_QWORD *)(v30 + 32);
          v120 = *(_QWORD *)(v30 + 40);
          v121 = *(_QWORD *)(v30 + 48);
          v122 = *(_BYTE *)(v30 + 56);
          v123 = *(_QWORD *)(v30 + 60);
          v124 = *(_QWORD *)(v30 + 68);
          v125 = *(_BYTE *)(v30 + 76);
          v126 = *(_QWORD *)(v30 + 80);
          v127 = *(_QWORD *)(v30 + 88);
          v128 = *(_QWORD *)(v30 + 96);
          v129 = *(_QWORD *)(v30 + 104);
          v130 = *(_BYTE *)(v30 + 112);
          v131 = *(_BYTE *)(v30 + 113);
          v132 = *(_BYTE *)(v30 + 114);
          v133 = *(_BYTE *)(v30 + 115);
          *(_QWORD *)t1 = *(_QWORD *)(v13 + 16);
          t1[8] = v271;
          v209 = v109;
          v211 = v108;
          *(_QWORD *)&t1[16] = v108;
          *(_QWORD *)&t1[24] = v109;
          v207 = v110;
          *(_QWORD *)t1_32 = v110;
          v205 = v111;
          t1_32[8] = v111;
          v203 = v112;
          *(_QWORD *)&t1_32[12] = v112;
          *(_QWORD *)&t1_32[20] = v113;
          t1_32[28] = v114;
          v201 = v115;
          *(_QWORD *)&v324 = v115;
          *((_QWORD *)&v324 + 1) = v116;
          *(_QWORD *)&v325 = v256;
          *((_QWORD *)&v325 + 1) = v254;
          v200 = v118;
          LOBYTE(v326) = v117;
          BYTE1(v326) = v118;
          BYTE2(v326) = v264;
          BYTE3(v326) = after;
          *(_QWORD *)&t2 = v284;
          BYTE8(t2) = v278;
          v248 = v120;
          v250 = v119;
          *(_QWORD *)&t2_16 = v119;
          *((_QWORD *)&t2_16 + 1) = v120;
          v247 = v121;
          *(_QWORD *)t2_32 = v121;
          v245 = v122;
          t2_32[8] = v122;
          v240 = v124;
          v244 = v123;
          *(_QWORD *)&t2_32[12] = v123;
          *(_QWORD *)&t2_32[20] = v124;
          v237 = v125;
          t2_32[28] = v125;
          v233 = v126;
          *(_QWORD *)&v315 = v126;
          v227 = v128;
          v229 = v127;
          *((_QWORD *)&v315 + 1) = v127;
          *(_QWORD *)&v316 = v128;
          v224 = v129;
          *((_QWORD *)&v316 + 1) = v129;
          v221 = v130;
          LOBYTE(v317) = v130;
          v213 = v131;
          BYTE1(v317) = v131;
          v218 = v132;
          BYTE2(v317) = v132;
          v215 = v133;
          BYTE3(v317) = v133;
          v135 = v13;
          outlined copy of DisplayList.Item.Value(v13, v16);
          outlined copy of DisplayList.Item.Value(v30, v25);
          outlined copy of DisplayList.Item.Value(v135, v16);
          outlined copy of DisplayList.Item.Value(v30, v25);
          outlined copy of DisplayList.Item.Value(v135, v16);
          outlined copy of DisplayList.Item.Value(v30, v25);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)&v353);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)&v364);
          v136 = *(void **)t1;
          outlined copy of GraphicsImage.Contents?(*(id *)t1, v271);
          outlined copy of GraphicsImage.Contents?(v284, v278);
          if ((specialized static ImageLayer.updateAsync(layer:oldImage:oldSize:newImage:newSize:)((Class *)a1, (uint64_t)t1, (uint64_t)&t2, v12, v11, v22, v21) & 1) != 0)
          {
            *(_QWORD *)t1 = v136;
            t1[8] = v271;
            *(_QWORD *)&t1[16] = v211;
            *(_QWORD *)&t1[24] = v209;
            *(_QWORD *)t1_32 = v207;
            t1_32[8] = v205;
            *(_QWORD *)&t1_32[12] = v203;
            *(_QWORD *)&t1_32[20] = v113;
            t1_32[28] = v114;
            *(_QWORD *)&v324 = v201;
            *((_QWORD *)&v324 + 1) = v116;
            *(_QWORD *)&v325 = v256;
            *((_QWORD *)&v325 + 1) = v254;
            LOBYTE(v326) = v117;
            BYTE1(v326) = v200;
            BYTE2(v326) = v264;
            BYTE3(v326) = after;
            v137 = GraphicsImage.bitmapOrientation.getter();
            *(_QWORD *)t1 = v284;
            t1[8] = v278;
            *(_QWORD *)&t1[16] = v250;
            *(_QWORD *)&t1[24] = v248;
            *(_QWORD *)t1_32 = v247;
            t1_32[8] = v245;
            *(_QWORD *)&t1_32[12] = v244;
            *(_QWORD *)&t1_32[20] = v240;
            t1_32[28] = v237;
            *(_QWORD *)&v324 = v233;
            *((_QWORD *)&v324 + 1) = v229;
            *(_QWORD *)&v325 = v227;
            *((_QWORD *)&v325 + 1) = v224;
            LOBYTE(v326) = v221;
            BYTE1(v326) = v213;
            BYTE2(v326) = v218;
            BYTE3(v326) = v215;
            GraphicsImage.bitmapOrientation.getter();
            __asm { BR              X10 }
          }
          outlined consume of GraphicsImage.Contents?(v136, v271);
          outlined consume of GraphicsImage.Contents?(v284, v278);
          outlined consume of DisplayList.Item.Value(v30, v25);
          outlined consume of DisplayList.Item.Value(v135, v16);
          outlined consume of DisplayList.Item.Value(v135, v16);
          v179 = v30;
          v180 = v25;
          goto LABEL_76;
        case 4uLL:
          v138 = *(_OWORD *)(v13 + 32);
          v384 = *(_OWORD *)(v13 + 16);
          v385 = v138;
          LOBYTE(v386) = *(_BYTE *)(v13 + 48);
          if (v30 >> 60 != 4)
            goto LABEL_75;
          v295 = v14;
          v297 = v18;
          v299 = v23;
          v301 = v26;
          v272 = *(unsigned __int8 *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x41);
          v279 = *(unsigned __int8 *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x40);
          v285 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x38);
          v139 = *(_OWORD *)(v30 + 16);
          v140 = *(_OWORD *)(v30 + 32);
          v394 = *(_BYTE *)(v30 + 48);
          v393[0] = v139;
          v393[1] = v140;
          v141 = *(_QWORD *)(v30 + 56);
          v265 = *(unsigned __int8 *)(v30 + 64);
          v142 = *(unsigned __int8 *)(v30 + 65);
          v143 = v13;
          v144 = v17;
          outlined copy of DisplayList.Item.Value(v13, v16);
          outlined copy of DisplayList.Item.Value(v30, v25);
          outlined copy of DisplayList.Item.Value(v143, v16);
          outlined copy of DisplayList.Item.Value(v30, v25);
          v291 = v144;
          outlined copy of DisplayList.Item.Value(v143, v16);
          outlined copy of DisplayList.Item.Value(v30, v25);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)&v353);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)&v364);
          outlined retain of Path.Storage((uint64_t)&v384, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
          outlined retain of Path.Storage((uint64_t)v393, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
          if (v272)
            v145 = 256;
          else
            v145 = 0;
          v146 = v145 | v279;
          if (v142)
            v147 = 256;
          else
            v147 = 0;
          v148 = v147 | v265;
          swift_retain();
          swift_retain();
          v149 = DisplayList.ViewUpdater.Platform.updateShapeViewAsync(layer:oldState:oldSize:oldPath:oldPaint:oldStyle:newState:newSize:newPath:newPaint:newStyle:contentsChanged:)((void **)a1, (uint64_t)&v342, (double *)&v375, (uint64_t)&v384, v285, v146, (uint64_t)&v331, &v310, (uint64_t)v393, v141, v148, 1);
          swift_release();
          swift_release();
          outlined retain of Path.Storage((uint64_t)v393, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
          outlined retain of Path.Storage((uint64_t)&v384, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
          if ((v149 & 1) != 0)
          {
            v276 = v29;
            outlined consume of DisplayList.Content.Value(v143);
            v30 = v309;
            outlined consume of DisplayList.Content.Value(v309);
            v68 = *((double *)&v375 + 1);
            v69 = *(double *)&v375;
            v67 = v310;
            v66 = v311;
            v70 = a1;
            v65 = *(double *)&v143;
            goto LABEL_88;
          }
          outlined consume of DisplayList.Item.Value(v309, v25);
          outlined consume of DisplayList.Item.Value(v143, v16);
          outlined consume of DisplayList.Item.Value(v143, v16);
          outlined consume of DisplayList.Item.Value(v309, v25);
          outlined consume of DisplayList.Content.Value(v143);
          outlined consume of DisplayList.Content.Value(v309);
          v318 = v338;
          v319 = v339;
          v320 = v340;
          v321 = v341;
          v315 = v335;
          v316 = v336;
          v317 = v337;
          t2 = v331;
          t2_16 = v332;
          *(_OWORD *)t2_32 = v333;
          *(_OWORD *)&t2_32[16] = v334;
          outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)&t2);
          v328 = v350;
          v329 = v351;
          v330 = v352;
          v324 = v346;
          v325 = v347;
          v326 = v348;
          v327 = v349;
          *(_OWORD *)t1 = v342;
          *(_OWORD *)&t1[16] = v343;
          *(_OWORD *)t1_32 = v344;
          *(_OWORD *)&t1_32[16] = v345;
          v194 = (__int128 *)t1;
          goto LABEL_82;
        case 9uLL:
          if (v30 >> 60 != 9)
            goto LABEL_75;
          v295 = v14;
          v297 = v18;
          v299 = v23;
          v301 = v26;
          v150 = *(_BYTE *)(v13 + 64);
          v151 = *(_DWORD *)(v13 + 60);
          v152 = *(_BYTE *)(v13 + 56);
          v153 = *(_DWORD *)(v13 + 52);
          v154 = *(_QWORD *)(v30 + 16);
          v155 = *(unsigned __int16 *)(v30 + 24);
          v156 = *(unsigned __int8 *)(v30 + 26);
          v157 = v17;
          v158 = *(_BYTE *)(v30 + 48);
          v159 = *(_DWORD *)(v30 + 52);
          v160 = *(_BYTE *)(v30 + 56);
          v161 = *(_DWORD *)(v30 + 60);
          v163 = *(_BYTE *)(v30 + 64);
          v164 = *(double *)(v364 + 8);
          LOBYTE(t2) = *(_BYTE *)(v13 + 48);
          DWORD1(t2) = v153;
          BYTE8(t2) = v152;
          HIDWORD(t2) = v151;
          LOBYTE(t2_16) = v150;
          LOBYTE(v405.a) = v158;
          HIDWORD(v405.a) = v159;
          LOBYTE(v405.b) = v160;
          HIDWORD(v405.b) = v161;
          LOBYTE(v405.c) = v163;
          v273 = v155;
          v266 = v156;
          v280 = v154;
          *(_QWORD *)t1 = v154;
          *(_QWORD *)&t1[8] = v155 | (v156 << 16);
          v165 = v22 != v12;
          *(_OWORD *)&t1[16] = *(_OWORD *)(v30 + 32);
          aftera.seconds = v164;
          *(Swift::Double *)t1_32 = v164;
          if (v21 != v11)
            v165 = 1;
          v286 = v165;
          t1_32[8] = 2;
          v64 = v13;
          outlined copy of DisplayList.Item.Value(v13, v16);
          outlined copy of DisplayList.Item.Value(v30, v25);
          outlined copy of DisplayList.Item.Value(v64, v16);
          outlined copy of DisplayList.Item.Value(v30, v25);
          outlined copy of DisplayList.Item.Value(v64, v16);
          outlined copy of DisplayList.Item.Value(v30, v25);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)&v353);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)&v364);
          if ((DisplayList.ViewUpdater.Platform.updateDrawingViewAsync(_:oldOptions:newOptions:content:sizeChanged:newSize:newState:)(a1, (char *)&t2, (uint64_t)&v405, (uint64_t)t1, v286, a6, v22, v21) & 1) == 0)goto LABEL_91;
          v291 = v157;
          v276 = v29;
          v287 = *(double *)(a1 + 24);
          *(_QWORD *)t1 = v280;
          *(_WORD *)&t1[8] = v273;
          t1[10] = v266;
          v405.a = aftera.seconds;
          DisplayList.nextUpdate(after:)(aftera);
          outlined consume of DisplayList.Content.Value(v64);
          outlined consume of DisplayList.Content.Value(v30);
          v166 = *(double *)&t2;
          if (*(double *)&t2 >= v287)
            v166 = v287;
          *(double *)(a1 + 24) = v166;
          v66 = v21;
          v67 = v22;
          v68 = v11;
          v69 = v12;
          v70 = a1;
          goto LABEL_87;
        case 0xAuLL:
          if (v30 >> 60 != 10)
            goto LABEL_75;
          v295 = v14;
          v297 = v18;
          v299 = v23;
          v301 = v26;
          v167 = *(_BYTE *)(v13 + 56);
          v168 = *(_DWORD *)(v13 + 52);
          v169 = *(_BYTE *)(v13 + 48);
          v170 = *(_DWORD *)(v13 + 44);
          v171 = *(_QWORD *)(v30 + 16);
          v172 = v17;
          v173 = *(_BYTE *)(v30 + 40);
          v174 = *(_DWORD *)(v30 + 44);
          v175 = *(_BYTE *)(v30 + 48);
          v176 = *(_DWORD *)(v30 + 52);
          v177 = *(_BYTE *)(v30 + 56);
          LOBYTE(t2) = *(_BYTE *)(v13 + 40);
          DWORD1(t2) = v170;
          BYTE8(t2) = v169;
          HIDWORD(t2) = v168;
          LOBYTE(t2_16) = v167;
          LOBYTE(v405.a) = v173;
          HIDWORD(v405.a) = v174;
          LOBYTE(v405.b) = v175;
          HIDWORD(v405.b) = v176;
          LOBYTE(v405.c) = v177;
          *(_OWORD *)&t1[8] = *(_OWORD *)(v30 + 24);
          *(_QWORD *)t1_32 = 0;
          v178 = v22 != v12;
          *(_QWORD *)t1 = v171;
          *(_QWORD *)&t1[24] = 0;
          if (v21 != v11)
            v178 = 1;
          v288 = v178;
          t1_32[8] = 3;
          v64 = v13;
          outlined copy of DisplayList.Item.Value(v13, v16);
          outlined copy of DisplayList.Item.Value(v30, v25);
          outlined copy of DisplayList.Item.Value(v64, v16);
          outlined copy of DisplayList.Item.Value(v30, v25);
          outlined copy of DisplayList.Item.Value(v64, v16);
          outlined copy of DisplayList.Item.Value(v30, v25);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)&v353);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)&v364);
          if ((DisplayList.ViewUpdater.Platform.updateDrawingViewAsync(_:oldOptions:newOptions:content:sizeChanged:newSize:newState:)(a1, (char *)&t2, (uint64_t)&v405, (uint64_t)t1, v288, a6, v22, v21) & 1) == 0)
          {
LABEL_91:
            outlined consume of DisplayList.Item.Value(v30, v25);
            outlined consume of DisplayList.Item.Value(v64, v16);
            outlined consume of DisplayList.Item.Value(v64, v16);
            outlined consume of DisplayList.Item.Value(v30, v25);
            outlined consume of DisplayList.Content.Value(v64);
            v193 = v30;
            goto LABEL_81;
          }
          v291 = v172;
          v276 = v29;
          outlined consume of DisplayList.Content.Value(v64);
          outlined consume of DisplayList.Content.Value(v30);
          v66 = v21;
          v67 = v22;
          v68 = v11;
          v69 = v12;
          v70 = a1;
LABEL_87:
          v65 = *(double *)&v64;
LABEL_88:
          v405.a = v10;
          v405.b = v9;
          v405.c = v12;
          v405.d = v11;
          v405.tx = v295;
          v405.ty = v65;
          v406 = v16;
          v407 = v15;
          v409 = BYTE2(v291);
          v408 = v291;
          v410 = v297;
          *(double *)&v395 = v20;
          *((_QWORD *)&v395 + 1) = v19;
          v396 = v22;
          v397 = v21;
          v398 = v299;
          v399 = v30;
          v400 = v25;
          v401 = v306;
          v403 = BYTE2(v276);
          v402 = v276;
          v404 = v301;
          v198 = v30;
          v35 = DisplayList.ViewUpdater.Platform.updateStateAsync(layer:oldItem:oldSize:oldState:newItem:newSize:newState:)(v70, (__int128 *)&v405, (uint64_t)&v342, &v395, (uint64_t)&v331, v69, v68, v67, v66);
          outlined consume of DisplayList.Item.Value(v198, v25);
          outlined consume of DisplayList.Item.Value(*(uint64_t *)&v65, v16);
          outlined consume of DisplayList.Item.Value(*(uint64_t *)&v65, v16);
          outlined consume of DisplayList.Item.Value(v198, v25);
          v318 = v338;
          v319 = v339;
          v320 = v340;
          v321 = v341;
          v315 = v335;
          v316 = v336;
          v317 = v337;
          t2 = v331;
          t2_16 = v332;
          *(_OWORD *)t2_32 = v333;
          *(_OWORD *)&t2_32[16] = v334;
          v328 = v350;
          v329 = v351;
          v330 = v352;
          v324 = v346;
          v325 = v347;
          v326 = v348;
          v327 = v349;
          *(_OWORD *)t1 = v342;
          *(_OWORD *)&t1[16] = v343;
          *(_OWORD *)t1_32 = v344;
          *(_OWORD *)&t1_32[16] = v345;
          break;
        default:
LABEL_75:
          v135 = v13;
          outlined copy of DisplayList.Item.Value(v13, v16);
          outlined copy of DisplayList.Item.Value(v30, v25);
          outlined copy of DisplayList.Item.Value(v135, v16);
          outlined copy of DisplayList.Item.Value(v30, v25);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)&v353);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)&v364);
          outlined consume of DisplayList.Item.Value(v135, v16);
          v179 = v30;
          v180 = v25;
LABEL_76:
          outlined consume of DisplayList.Item.Value(v179, v180);
          v181 = v135;
          goto LABEL_80;
      }
      goto LABEL_95;
    }
    v293 = v28;
    v294 = *(double *)(a3 + 32);
    v296 = *(_DWORD *)(a3 + 68);
    v298 = *((_QWORD *)a5 + 4);
    v300 = *((_DWORD *)a5 + 17);
    v302 = a1;
    v37 = *(uint64_t *)(a3 + 40);
    v38 = *(_QWORD *)(a3 + 48);
    v307 = *(double *)&v37;
    v308 = *(_QWORD *)(a3 + 56);
LABEL_34:
    v71 = *(unsigned __int16 *)(a3 + 64) | (*(unsigned __int8 *)(a3 + 66) << 16);
    outlined copy of DisplayList.Item.Value(v37, v38);
    outlined copy of DisplayList.Item.Value(v30, v25);
    outlined consume of DisplayList.Item.Value(*(uint64_t *)&v307, v16);
    outlined consume of DisplayList.Item.Value(v30, v25);
    if ((*(_BYTE *)(v302 + 17) & 0x20) == 0)
    {
      *(double *)&v342 = v293;
      *(CGFloat *)&v364 = v10;
      *((CGFloat *)&v364 + 1) = v9;
      *(double *)&v365 = v12;
      *((double *)&v365 + 1) = v11;
      *(CGFloat *)&v366 = v294;
      *((CGFloat *)&v366 + 1) = v307;
      *(_QWORD *)&v367 = v16;
      *((_QWORD *)&v367 + 1) = v308;
      BYTE2(v368) = BYTE2(v71);
      LOWORD(v368) = v71;
      DWORD1(v368) = v296;
      *(double *)&v353 = v20;
      *((_QWORD *)&v353 + 1) = v19;
      *(double *)&v354 = v22;
      *((double *)&v354 + 1) = v21;
      *(_QWORD *)&v355 = v298;
      *((_QWORD *)&v355 + 1) = v30;
      *(_QWORD *)&v356 = v25;
      *((_QWORD *)&v356 + 1) = v24;
      BYTE2(v357) = BYTE2(v29);
      LOWORD(v357) = v29;
      DWORD1(v357) = v300;
      return DisplayList.ViewUpdater.Platform.updateStateAsync(layer:oldItem:oldSize:oldState:newItem:newSize:newState:)(v302, &v364, (uint64_t)a4, &v353, (uint64_t)a6, v12, v11, v22, v21);
    }
    v72 = a4[7];
    v73 = a4[9];
    v361 = a4[8];
    v362 = v73;
    v74 = a4[3];
    v75 = a4[5];
    v357 = a4[4];
    v358 = v75;
    v76 = a4[5];
    v77 = a4[7];
    v359 = a4[6];
    v360 = v77;
    v78 = a4[1];
    v353 = *a4;
    v354 = v78;
    v79 = a4[3];
    v81 = *a4;
    v80 = a4[1];
    v355 = a4[2];
    v356 = v79;
    v349 = v72;
    v350 = v361;
    v82 = a4[10];
    v351 = a4[9];
    v352 = v82;
    v345 = v74;
    v346 = v357;
    v347 = v76;
    v348 = v359;
    v343 = v80;
    v344 = v355;
    v83 = a6[8];
    v84 = a6[6];
    v371 = a6[7];
    v372 = v83;
    v85 = a6[8];
    v86 = a6[10];
    v373 = a6[9];
    v374 = v86;
    v87 = a6[4];
    v88 = a6[2];
    v367 = a6[3];
    v368 = v87;
    v89 = a6[4];
    v90 = a6[6];
    v369 = a6[5];
    v370 = v90;
    v91 = *a6;
    v92 = a6[1];
    v363 = v82;
    v364 = v91;
    v93 = *a6;
    v94 = a6[2];
    v365 = a6[1];
    v366 = v94;
    v339 = v85;
    v340 = v373;
    v341 = a6[10];
    v342 = v81;
    v335 = v89;
    v336 = v369;
    v337 = v84;
    v338 = v371;
    v331 = v93;
    v332 = v92;
    v333 = v88;
    v334 = v367;
    if (v31 | v27)
    {
      outlined copy of DisplayList.Item.Value(*(uint64_t *)&v307, v16);
      outlined copy of DisplayList.Item.Value(v30, v25);
      v33 = *(_QWORD *)&v307;
      v34 = v16;
      goto LABEL_18;
    }
    if (*(_QWORD *)&v307 >> 60 != 4)
    {
      if (*(_QWORD *)&v307 >> 60 == 3 && v30 >> 60 == 3)
      {
        v243 = *(_BYTE *)(*(_QWORD *)&v307 + 24);
        v236 = *(void **)(v30 + 16);
        v239 = *(void **)(*(_QWORD *)&v307 + 16);
        v232 = *(_BYTE *)(v30 + 24);
        v228 = *(_OWORD *)(v30 + 32);
        v226 = *(_QWORD *)(v30 + 48);
        v223 = *(_BYTE *)(v30 + 56);
        v217 = *(_QWORD *)(v30 + 68);
        v220 = *(_QWORD *)(v30 + 60);
        v214 = *(_BYTE *)(v30 + 76);
        v212 = *(_OWORD *)(v30 + 80);
        v208 = *(_QWORD *)(v30 + 104);
        v210 = *(_QWORD *)(v30 + 96);
        v204 = *(_BYTE *)(v30 + 113);
        v206 = *(_BYTE *)(v30 + 112);
        v202 = *(_WORD *)(v30 + 114);
        outlined copy of DisplayList.Item.Value(*(uint64_t *)&v307, v16);
        outlined copy of DisplayList.Item.Value(v30, v25);
        outlined copy of DisplayList.Item.Value(*(uint64_t *)&v307, v16);
        outlined copy of DisplayList.Item.Value(v30, v25);
        outlined copy of DisplayList.Item.Value(*(uint64_t *)&v307, v16);
        outlined copy of DisplayList.Item.Value(v30, v25);
        outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)&v353);
        outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)&v364);
        outlined copy of GraphicsImage.Contents?(v239, v243);
        outlined copy of GraphicsImage.Contents?(v236, v232);
        v105 = GraphicsImage.bitmapOrientation.getter();
        *(_QWORD *)t1 = v236;
        t1[8] = v232;
        *(_OWORD *)&t1[16] = v228;
        *(_QWORD *)t1_32 = v226;
        t1_32[8] = v223;
        *(_QWORD *)&t1_32[12] = v220;
        *(_QWORD *)&t1_32[20] = v217;
        t1_32[28] = v214;
        v324 = v212;
        *(_QWORD *)&v325 = v210;
        *((_QWORD *)&v325 + 1) = v208;
        LOBYTE(v326) = v206;
        BYTE1(v326) = v204;
        WORD1(v326) = v202;
        GraphicsImage.bitmapOrientation.getter();
        __asm { BR              X10 }
      }
      goto LABEL_79;
    }
    v182 = *(_OWORD *)(*(_QWORD *)&v307 + 32);
    v384 = *(_OWORD *)(*(_QWORD *)&v307 + 16);
    v385 = v182;
    LOBYTE(v386) = *(_BYTE *)(*(_QWORD *)&v307 + 48);
    if (v30 >> 60 != 4)
    {
LABEL_79:
      outlined copy of DisplayList.Item.Value(*(uint64_t *)&v307, v16);
      outlined copy of DisplayList.Item.Value(v30, v25);
      outlined copy of DisplayList.Item.Value(*(uint64_t *)&v307, v16);
      outlined copy of DisplayList.Item.Value(v30, v25);
      outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)&v353);
      outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)&v364);
      outlined consume of DisplayList.Item.Value(*(uint64_t *)&v307, v16);
      outlined consume of DisplayList.Item.Value(v30, v25);
      v181 = *(_QWORD *)&v307;
LABEL_80:
      outlined consume of DisplayList.Content.Value(v181);
      v193 = v30;
LABEL_81:
      outlined consume of DisplayList.Content.Value(v193);
      outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)&v364);
      v194 = &v353;
LABEL_82:
      outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)v194);
      return 0;
    }
    v234 = v364;
    v183 = *(_OWORD *)(v309 + 16);
    v184 = *(_OWORD *)(v309 + 32);
    LOBYTE(v377) = *(_BYTE *)(v309 + 48);
    v375 = v183;
    v376 = v184;
    v289 = *((_QWORD *)&v368 + 1);
    v281 = *((_QWORD *)&v367 + 1);
    v274 = v368;
    v267 = v367;
    afterc = *((_QWORD *)&v366 + 1);
    v257 = v366;
    v252 = v357;
    v249 = v356;
    v246 = v355;
    ObjectType = swift_getObjectType();
    v241 = *(double *)(v353 + 24);
    outlined copy of DisplayList.Item.Value(*(uint64_t *)&v307, v16);
    outlined copy of DisplayList.Item.Value(v309, v25);
    outlined copy of DisplayList.Item.Value(*(uint64_t *)&v307, v16);
    outlined copy of DisplayList.Item.Value(v309, v25);
    outlined copy of DisplayList.Item.Value(*(uint64_t *)&v307, v16);
    outlined copy of DisplayList.Item.Value(v309, v25);
    outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)&v353);
    outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)&v364);
    outlined retain of Path.Storage((uint64_t)&v384, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
    outlined retain of Path.Storage((uint64_t)&v375, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
    swift_retain();
    swift_retain();
    v185 = specialized static ShapeLayerHelper.makeLayerBounds(size:path:layerType:contentsScale:)(v12, v11, v241, (uint64_t)&v384, ObjectType);
    v216 = v186;
    v219 = v185;
    v238 = v188;
    v242 = v187;
    v189 = specialized static ShapeLayerHelper.makeLayerBounds(size:path:layerType:contentsScale:)(v22, v21, *(double *)(v234 + 24), (uint64_t)&v375, ObjectType);
    v222 = v190;
    v225 = v189;
    v235 = v191;
    v231 = v192;
    *(_OWORD *)t1 = v246;
    *(_OWORD *)&t1[16] = v249;
    *(_OWORD *)t1_32 = v252;
    CGAffineTransformTranslate((CGAffineTransform *)&t2, (CGAffineTransform *)t1, v219, v216);
    v344 = t2;
    v345 = t2_16;
    v346 = *(_OWORD *)t2_32;
    *(_QWORD *)t1 = v257;
    *(_QWORD *)&t1[8] = afterc;
    *(_QWORD *)&t1[16] = v267;
    *(_QWORD *)&t1[24] = v281;
    *(_QWORD *)t1_32 = v274;
    *(_QWORD *)&t1_32[8] = v289;
    CGAffineTransformTranslate((CGAffineTransform *)&t2, (CGAffineTransform *)t1, v225, v222);
    v282 = t2_16;
    v290 = t2;
    v275 = *(_QWORD *)t2_32;
    v268 = *(_QWORD *)&t2_32[8];
    outlined consume of DisplayList.Item.Value(*(uint64_t *)&v307, v16);
    outlined consume of DisplayList.Item.Value(v309, v25);
    swift_release();
    swift_release();
    outlined retain of Path.Storage((uint64_t)&v375, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
    outlined retain of Path.Storage((uint64_t)&v384, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
    outlined consume of DisplayList.Item.Value(*(uint64_t *)&v307, v16);
    outlined consume of DisplayList.Item.Value(v309, v25);
    v333 = v290;
    v334 = v282;
    *(_QWORD *)&v335 = v275;
    *((_QWORD *)&v335 + 1) = v268;
    outlined consume of DisplayList.Content.Value(*(unint64_t *)&v307);
    outlined consume of DisplayList.Content.Value(v309);
    v310 = v293;
    v405.a = v10;
    v405.b = v9;
    v405.c = v12;
    v405.d = v11;
    v405.tx = v294;
    v405.ty = v307;
    v406 = v16;
    v407 = v308;
    v409 = BYTE2(v71);
    v408 = v71;
    v410 = v296;
    *(double *)&v395 = v20;
    *((_QWORD *)&v395 + 1) = v19;
    v396 = v22;
    v397 = v21;
    v398 = v298;
    v399 = v309;
    v400 = v25;
    v401 = v24;
    v403 = BYTE2(v29);
    v402 = v29;
    v404 = v300;
    v35 = DisplayList.ViewUpdater.Platform.updateStateAsync(layer:oldItem:oldSize:oldState:newItem:newSize:newState:)(v302, (__int128 *)&v405, (uint64_t)&v342, &v395, (uint64_t)&v331, v242, v238, v235, v231);
    v318 = v338;
    v319 = v339;
    v320 = v340;
    v321 = v341;
    v315 = v335;
    v316 = v336;
    v317 = v337;
    t2 = v331;
    t2_16 = v332;
    *(_OWORD *)t2_32 = v333;
    *(_OWORD *)&t2_32[16] = v334;
    v328 = v350;
    v329 = v351;
    v330 = v352;
    v324 = v346;
    v325 = v347;
    v326 = v348;
    v327 = v349;
    *(_OWORD *)t1 = v342;
    *(_OWORD *)&t1[16] = v343;
    *(_OWORD *)t1_32 = v344;
    *(_OWORD *)&t1_32[16] = v345;
LABEL_95:
    outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)&t2);
    outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)t1);
    return v35;
  }
LABEL_17:
  v32 = *(_QWORD *)(a3 + 40);
  outlined copy of DisplayList.Item.Value(v13, v16);
  outlined copy of DisplayList.Item.Value(v30, v25);
  v33 = v32;
  v34 = v16;
LABEL_18:
  outlined consume of DisplayList.Item.Value(v33, v34);
  outlined consume of DisplayList.Item.Value(v30, v25);
  return 0;
}

void static PlatformViewDefinition.System.uiView.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static PlatformViewDefinition.System.nsView.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void PlatformViewDefinition.System.hash(into:)()
{
  Swift::UInt8 *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static PlatformViewDefinition.System.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int PlatformViewDefinition.System.hashValue.getter()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void PlatformViewDefinition.ViewKind.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int PlatformViewDefinition.ViewKind.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void static PlatformViewDefinition.system.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static PlatformViewDefinition.makeView(kind:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static PlatformViewDefinition.makeLayerView(type:kind:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static PlatformViewDefinition.makePlatformView(view:kind:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static PlatformViewDefinition.makeDrawingView(options:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static PlatformViewDefinition.setPath(_:shapeView:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static PlatformViewDefinition.setProjectionTransform(_:projectionView:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t static PlatformViewDefinition.getRBLayer(drawingView:)()
{
  return 0;
}

void static PlatformViewDefinition.setIgnoresEvents(_:of:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t PlatformViewDefinition.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

double DisplayList.ViewUpdater.ViewInfo.init(platform:kind:)@<D0>(uint64_t *a1@<X0>, __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  __int8 v5;
  unint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  __int16 v12;
  int v13;
  char v14;
  char v15;
  double result;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD v21[2];
  __int8 v22;
  char v23;
  int16x8_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int16 v28;
  __int128 v29;
  __int128 v30;
  __int16 v31;
  int v32;
  char v33;
  char v34;
  double v35;

  v4 = *a1;
  v6 = *a1 & 0xFFFFFFFFFFFFFFFCLL;
  v24.i8[0] = *a2;
  v5 = v24.i8[0];
  v7 = (void *)(*(uint64_t (**)(int16x8_t *))(v6 + 88))(&v24);
  v8 = (id)CoreViewLayer(v4 & 3, v7);
  v21[0] = vdupq_n_s64(0x7FF0000000000000uLL);
  v21[1] = v21[0];
  v22 = v5;
  v23 = 0;
  v9 = swift_unknownObjectRetain();
  DisplayList.ViewUpdater.ViewInfo.init(view:layer:container:state:)(v9, (uint64_t)v8, (uint64_t)v7, (uint64_t)v21, &v24);
  v10 = v25;
  v11 = v28;
  v12 = v31;
  v13 = v32;
  v14 = v33;
  v15 = v34;
  result = v35;
  v18 = v29;
  v17 = v30;
  v19 = v26;
  v20 = v27;
  *(int16x8_t *)a3 = v24;
  *(_QWORD *)(a3 + 16) = v10;
  *(_OWORD *)(a3 + 24) = v19;
  *(_OWORD *)(a3 + 40) = v20;
  *(_WORD *)(a3 + 56) = v11;
  *(_OWORD *)(a3 + 64) = v18;
  *(_OWORD *)(a3 + 80) = v17;
  *(_WORD *)(a3 + 96) = v12;
  *(_DWORD *)(a3 + 100) = v13;
  *(_BYTE *)(a3 + 104) = v14;
  *(_BYTE *)(a3 + 105) = v15;
  *(double *)(a3 + 112) = result;
  return result;
}

void DisplayList.ViewUpdater.Platform.updateState(_:item:size:state:)(uint64_t a1, __int128 *a2, uint64_t a3, double a4, double a5)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  int v26;
  int v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  void *v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  _QWORD *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  char v64;
  void *v65;
  CFMutableArrayRef v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  unint64_t v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unsigned int v78;
  _QWORD v79[2];
  int v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  CFMutableArrayRef v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  _QWORD *v98;
  void *v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  char v111;
  __int128 v112;
  __int128 v113;

  v6 = a3;
  v9 = a1;
  v87 = *a2;
  v86 = a2[1];
  v88 = a2[2];
  v85 = a2[3];
  v10 = *((unsigned __int8 *)a2 + 66);
  v11 = *((unsigned __int16 *)a2 + 32);
  v12 = *((_DWORD *)a2 + 17);
  v13 = *v5;
  v14 = *(_QWORD *)(a3 + 120);
  if (v14)
  {
    if (*(unsigned __int16 *)(a1 + 84) == ((unsigned __int16)(2 * ((33 * WORD1(v14)) ^ v14)) | 1))
      goto LABEL_8;
  }
  else if (!*(_WORD *)(a1 + 84))
  {
    goto LABEL_8;
  }
  CoreViewSetOpacity(*v5 & 3, *(void **)a1, *(float *)(a3 + 8));
  v15 = *(_QWORD *)(v6 + 120);
  if (v15)
    LODWORD(v15) = (2 * ((33 * (v15 >> 16)) ^ v15)) | 1;
  *(_WORD *)(v9 + 84) = v15;
LABEL_8:
  v16 = *(unsigned __int16 *)(v9 + 86);
  v17 = *(_QWORD *)(v6 + 128);
  v89 = v13;
  if (v17)
  {
    if (v16 == ((unsigned __int16)(2 * ((33 * WORD1(v17)) ^ v17)) | 1))
      goto LABEL_24;
  }
  else if (!v16)
  {
    goto LABEL_24;
  }
  v18 = *(_QWORD *)(v6 + 16);
  if ((*(_BYTE *)(v6 + 24) & 1) != 0)
  {
    *((_QWORD *)&v101 + 1) = swift_getObjectType();
    *(_QWORD *)&v100 = v18;
    swift_unknownObjectRetain();
  }
  else
  {
    if (_RBBlendModeGetCompositingFilterInGroup(*(_QWORD *)(v6 + 16)))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      v112 = 0u;
      v113 = 0u;
    }
    outlined init with take of Any?((uint64_t)&v112, (uint64_t)&v100);
  }
  v19 = *(void **)v9;
  LODWORD(v99) = v13 & 3;
  outlined init with copy of Any?((uint64_t)&v100, (uint64_t)&v112);
  v20 = *((_QWORD *)&v113 + 1);
  if (*((_QWORD *)&v113 + 1))
  {
    v21 = __swift_project_boxed_opaque_existential_1(&v112, *((uint64_t *)&v113 + 1));
    v98 = v79;
    v22 = v10;
    v23 = *(_QWORD *)(v20 - 8);
    v24 = MEMORY[0x24BDAC7A8](v21);
    v26 = v11;
    v27 = v12;
    v28 = (char *)v79 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v23 + 16))(v28, v24);
    swift_unknownObjectRetain();
    v29 = _bridgeAnythingToObjectiveC<A>(_:)();
    v30 = *(void (**)(char *, uint64_t))(v23 + 8);
    v10 = v22;
    v31 = v28;
    v12 = v27;
    v11 = v26;
    v30(v31, v20);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v112);
  }
  else
  {
    swift_unknownObjectRetain();
    v29 = 0;
  }
  CoreViewSetCompositingFilter(v99, v19, v29);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  outlined destroy of Any?((uint64_t)&v100);
  v32 = *(_QWORD *)(v6 + 128);
  v13 = v89;
  if (v32)
    LODWORD(v32) = (2 * ((33 * (v32 >> 16)) ^ v32)) | 1;
  *(_WORD *)(v9 + 86) = v32;
LABEL_24:
  v33 = *(_QWORD *)(v6 + 152);
  if (v33)
  {
    if (*(unsigned __int16 *)(v9 + 92) == ((unsigned __int16)(2 * ((33 * WORD1(v33)) ^ v33)) | 1))
      goto LABEL_45;
  }
  else if (!*(_WORD *)(v9 + 92))
  {
    goto LABEL_45;
  }
  v34 = *(_QWORD *)(v6 + 88);
  *(_QWORD *)&v112 = v34;
  v35 = *(unsigned __int8 *)(v9 + 56);
  swift_bridgeObjectRetain();
  if (v35 == 7)
  {
    v36 = specialized Array<A>.popColorMultiply(drawable:)((uint64_t *)&v112, (uint64_t *)v9);
    v38 = *(void **)(v9 + 8);
    if ((v39 & 1) != 0)
    {
      v45 = v38;
      v44 = 0;
    }
    else
    {
      v40 = v36;
      v41 = v37;
      v42 = one-time initialization token for cache;
      v43 = v38;
      if (v42 != -1)
        swift_once();
      v44 = (void *)specialized ObjectCache.subscript.getter(*(float *)&v40, *((float *)&v40 + 1), *(float *)&v41, *((float *)&v41 + 1));
    }
    objc_msgSend(v38, sel_setContentsMultiplyColor_, v44);

    v34 = v112;
  }
  v46 = *(void **)v9;
  swift_unknownObjectRetain();
  v90 = _CAFilterArrayCreate();
  v47 = *(_QWORD *)(v34 + 16);
  if (v47)
  {
    v79[0] = v46;
    v80 = v11;
    v81 = v10;
    v82 = v12;
    v83 = v9;
    v84 = v6;
    swift_bridgeObjectRetain();
    v79[1] = v34;
    v48 = v34 + 120 * v47 - 24;
    do
    {
      v50 = *(_QWORD **)(v48 - 56);
      v51 = *(void **)(v48 - 48);
      v52 = *(_QWORD *)(v48 - 40);
      v53 = *(_QWORD *)(v48 - 32);
      v54 = *(_QWORD *)(v48 - 24);
      v55 = *(_QWORD *)(v48 - 16);
      v56 = *(_QWORD *)(v48 - 8);
      v57 = *(_QWORD *)v48;
      v58 = *(_QWORD *)(v48 + 8);
      v59 = *(_QWORD *)(v48 + 16);
      v60 = *(_QWORD *)(v48 + 24);
      v61 = *(_QWORD *)(v48 + 32);
      v62 = *(_QWORD *)(v48 + 40);
      v63 = *(_DWORD *)(v48 + 48);
      v64 = *(_BYTE *)(v48 + 52);
      *(_QWORD *)&v100 = *(_QWORD *)(v48 - 64);
      *((_QWORD *)&v100 + 1) = v50;
      *(_QWORD *)&v101 = v51;
      *((_QWORD *)&v101 + 1) = v52;
      *(_QWORD *)&v102 = v53;
      *((_QWORD *)&v102 + 1) = v54;
      *(_QWORD *)&v103 = v55;
      *((_QWORD *)&v103 + 1) = v56;
      v104 = v57;
      v105 = v58;
      v106 = v59;
      v107 = v60;
      v108 = v61;
      v109 = v62;
      v110 = v63;
      v111 = v64;
      v91 = v57;
      v99 = (void *)v100;
      v98 = v50;
      v97 = v51;
      v96 = v52;
      v95 = v53;
      v94 = v54;
      v93 = v55;
      v92 = v56;
      outlined copy of GraphicsFilter((id)v100, (int)v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, SBYTE2(v63));
      GraphicsFilter.makeCAFilter()();
      if (v65)
      {
        v49 = v65;
        _CAFilterArrayAppend(v90, v65);
        outlined consume of GraphicsFilter(v99, (int)v98, v97, v96, v95, v94, v93, v92, v91, v58, v59, v60, v61, v62, v63, SBYTE2(v63));

      }
      else
      {
        outlined consume of GraphicsFilter(v99, (int)v98, v97, v96, v95, v94, v93, v92, v91, v58, v59, v60, v61, v62, v63, SBYTE2(v63));
      }
      v48 -= 120;
      --v47;
    }
    while (v47);
    swift_bridgeObjectRelease();
    v6 = v84;
    v9 = v83;
    v13 = v89;
    v12 = v82;
    v10 = v81;
    v11 = v80;
    v46 = (void *)v79[0];
  }
  v66 = v90;
  CoreViewSetFilters(v13 & 3, v46, (uint64_t)v90);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  v67 = *(_QWORD *)(v6 + 152);
  if (v67)
    LODWORD(v67) = (2 * ((33 * (v67 >> 16)) ^ v67)) | 1;
  *(_WORD *)(v9 + 92) = v67;
LABEL_45:
  v68 = *(_QWORD *)(v6 + 144);
  if (v68)
  {
    if (*(unsigned __int16 *)(v9 + 90) != ((unsigned __int16)(2 * ((33 * WORD1(v68)) ^ v68)) | 1))
      goto LABEL_53;
  }
  else if (*(_WORD *)(v9 + 90))
  {
    goto LABEL_53;
  }
  v69 = *(_QWORD *)(v6 + 136);
  if (v69)
  {
    if (*(unsigned __int16 *)(v9 + 88) == ((unsigned __int16)(2 * ((33 * WORD1(v69)) ^ v69)) | 1))
    {
LABEL_51:
      LOBYTE(v70) = 0;
      goto LABEL_56;
    }
  }
  else if (!*(_WORD *)(v9 + 88))
  {
    goto LABEL_51;
  }
LABEL_53:
  v71 = *(unsigned __int8 *)(v9 + 57);
  *(_QWORD *)&v100 = v13;
  DisplayList.ViewUpdater.Platform.updateClipShapes(_:state:)(v9, (_OWORD *)v6);
  v72 = *(_QWORD *)(v6 + 144);
  if (v72)
    LODWORD(v72) = (2 * ((33 * (v72 >> 16)) ^ v72)) | 1;
  v73 = v71 | *(unsigned __int8 *)(v9 + 57);
  *(_WORD *)(v9 + 90) = v72;
  v70 = (v73 >> 3) & 1;
LABEL_56:
  *(_QWORD *)&v112 = v13;
  if ((DisplayList.ViewUpdater.Platform.updateGeometry(_:item:size:state:clipRectChanged:)(v9, a4, a5, (uint64_t)&v100, (uint64_t *)v6, v70) & 1) == 0)
  {
    v74 = *(_QWORD *)(v6 + 160);
    if (v74)
    {
      if (*(unsigned __int16 *)(v9 + 94) != ((unsigned __int16)(2 * ((33 * WORD1(v74)) ^ v74)) | 1))
        goto LABEL_65;
    }
    else if (*(_WORD *)(v9 + 94))
    {
      goto LABEL_65;
    }
    if ((_QWORD)v88)
    {
      if (*(unsigned __int16 *)(v9 + 80) == ((unsigned __int16)(2 * ((33 * WORD1(v88)) ^ v88)) | 1))
        goto LABEL_68;
    }
    else if (!*(_WORD *)(v9 + 80))
    {
      goto LABEL_68;
    }
  }
LABEL_65:
  *(_QWORD *)&v112 = v13;
  v100 = v87;
  v101 = v86;
  v102 = v88;
  v103 = v85;
  BYTE2(v104) = (v11 | (v10 << 16)) >> 16;
  LOWORD(v104) = v11;
  HIDWORD(v104) = v12;
  DisplayList.ViewUpdater.Platform.updateShadow(_:state:item:)(v9, (_QWORD *)v6, (double *)&v100);
  v75 = *(_QWORD *)(v6 + 160);
  if (v75)
    LODWORD(v75) = (2 * ((33 * (v75 >> 16)) ^ v75)) | 1;
  *(_WORD *)(v9 + 94) = v75;
LABEL_68:
  v76 = *(_QWORD *)(v6 + 168);
  if (v76)
  {
    if (*(unsigned __int16 *)(v9 + 96) == ((unsigned __int16)(2 * ((33 * WORD1(v76)) ^ v76)) | 1))
      goto LABEL_75;
  }
  else if (!*(_WORD *)(v9 + 96))
  {
    goto LABEL_75;
  }
  *(_QWORD *)&v100 = v13;
  DisplayList.ViewUpdater.Platform.updateProperties(_:state:)((_QWORD *)v9, v6);
  v77 = *(_QWORD *)(v6 + 168);
  if (v77)
    LODWORD(v77) = (2 * ((33 * (v77 >> 16)) ^ v77)) | 1;
  *(_WORD *)(v9 + 96) = v77;
LABEL_75:
  v78 = *(unsigned __int8 *)(v9 + 56);
  if (v78 > 0xF || ((1 << v78) & 0xE084) == 0)
    objc_msgSend(*(id *)(v9 + 8), sel_setContentsScale_, *(double *)(*(_QWORD *)v6 + 24));
}

BOOL DisplayList.ViewUpdater.Platform.updateStateAsync(layer:oldItem:oldSize:oldState:newItem:newSize:newState:)(uint64_t a1, __int128 *a2, uint64_t a3, __int128 *a4, uint64_t a5, CGFloat a6, CGFloat a7, double a8, double a9)
{
  uint64_t *v9;
  int v17;
  int v18;
  int v19;
  int v20;
  float v21;
  uint64_t v22;
  id v23;
  double v24;
  id v25;
  Swift::String v26;
  Swift::Bool v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  int64x2_t v54;
  int64x2_t v55;
  _OWORD v56[4];
  __int16 v57;
  char v58;
  int v59;
  _OWORD v60[4];
  __int16 v61;
  char v62;
  int v63;
  uint64_t v64;
  CALayer v65;

  if (*(unsigned __int8 *)(a5 + 104) != *(unsigned __int8 *)(a3 + 104))
    return 0;
  v49 = a2[1];
  v50 = *a2;
  v48 = a2[3];
  v46 = *((unsigned __int16 *)a2 + 32);
  v47 = *((unsigned __int8 *)a2 + 66);
  v17 = *((_DWORD *)a2 + 17);
  v53 = *a4;
  v54 = (int64x2_t)a2[2];
  v55 = (int64x2_t)a4[2];
  v51 = a4[3];
  v52 = a4[1];
  v18 = *((unsigned __int8 *)a4 + 66);
  v19 = *((unsigned __int16 *)a4 + 32);
  v20 = *((_DWORD *)a4 + 17);
  v21 = *(float *)(a5 + 8);
  v22 = *v9;
  if (v21 != *(float *)(a3 + 8))
  {
    v23 = objc_allocWithZone(MEMORY[0x24BDD16E0]);
    *(float *)&v24 = v21;
    v25 = objc_msgSend(v23, sel_initWithFloat_, v24);
    v65.super.isa = *(Class *)a1;
    v26._countAndFlagsBits = 0x7974696361706FLL;
    v26._object = (void *)0xE700000000000000;
    *(_QWORD *)&v65._attr.refcount = 1;
    DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v25, v26, v65, v27);

  }
  if (*(_QWORD *)(a5 + 128) != *(_QWORD *)(a3 + 128))
    return 0;
  v45 = v17;
  if (*(_QWORD *)(a5 + 152) != *(_QWORD *)(a3 + 152))
  {
    v44 = v20;
    *(_QWORD *)&v60[0] = *(_QWORD *)(a3 + 88);
    *(_QWORD *)&v56[0] = *(_QWORD *)(a5 + 88);
    if (*(_BYTE *)(a1 + 16) == 7)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v28 = specialized Array<A>.popColorMultiply(drawable:)((uint64_t *)v60, (id *)a1);
      v42 = v29;
      v43 = v28;
      v31 = v30 & 1;
      swift_bridgeObjectRelease();
      v32 = specialized Array<A>.popColorMultiply(drawable:)((uint64_t *)v56, (id *)a1);
      v34 = v33;
      v36 = v35;
      swift_bridgeObjectRelease();
      if ((v36 & 1) == 0 || !v31)
        specialized DisplayList.ViewUpdater.AsyncLayer.update<A>(_:from:to:)(v43, v42, v31, v32, v34, v36 & 1);
    }
    v37 = *(_QWORD *)(a3 + 88);
    v38 = *(_QWORD *)(a5 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v39 = specialized static GraphicsFilter.updateAsync(layer:oldFilters:newFilters:)((Class *)a1, v37, v38);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v20 = v44;
    if ((v39 & 1) == 0)
      return 0;
  }
  if ((*(_QWORD *)(a5 + 144) != *(_QWORD *)(a3 + 144) || *(_QWORD *)(a5 + 136) != *(_QWORD *)(a3 + 136))
    && (DisplayList.ViewUpdater.Platform.updateClipShapesAsync(layer:oldState:newState:)(a1, a3, a5) & 1) == 0)
  {
    return 0;
  }
  v40 = DisplayList.ViewUpdater.Platform.updateGeometryAsync(layer:oldItem:oldSize:oldState:newItem:newSize:newState:)(a1, a6, a7, a8, a9, (uint64_t)v60, (uint64_t *)a3, (uint64_t)v56, (double *)a5);
  if (v40 == 2)
    return 0;
  if ((v40 & 1) == 0
    && *(_QWORD *)(a5 + 160) == *(_QWORD *)(a3 + 160)
    && (vmovn_s64(vceqq_s64(v55, v54)).u32[0] & 1) != 0)
  {
    return 1;
  }
  v64 = v22;
  v60[0] = v50;
  v60[1] = v49;
  v60[2] = v54;
  v60[3] = v48;
  v62 = (v46 | (v47 << 16)) >> 16;
  v61 = v46;
  v63 = v45;
  v56[0] = v53;
  v56[1] = v52;
  v56[2] = v55;
  v56[3] = v51;
  v58 = (v19 | (v18 << 16)) >> 16;
  v57 = v19;
  v59 = v20;
  return (DisplayList.ViewUpdater.Platform.updateShadowAsync(layer:oldState:oldItem:newState:newItem:boundsChanged:)(a1, (_QWORD *)a3, (double *)v60, a5, (double *)v56, v40 & 1) & 1) != 0;
}

uint64_t DisplayList.ViewUpdater.Platform._makeItemView(item:state:)(uint64_t a1)
{
  unint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 48);
  if (!(v1 >> 62))
    __asm { BR              X10 }
  if (v1 >> 62 == 1)
  {
    outlined copy of DisplayList.Effect(*(_QWORD *)(a1 + 40), v1, SBYTE4(v1));
    __asm { BR              X10 }
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_234F371EC()
{
  JUMPOUT(0x234F371B8);
}

void *DisplayList.ViewUpdater.Platform.missingPlatformView()()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  void (*v8)(CGSize);
  __int128 v9;
  __int128 v10;
  char v11;

  v1 = *v0;
  v2 = *v0 & 0xFFFFFFFFFFFFFFFCLL;
  LOBYTE(v8) = 0;
  HIDWORD(v8) = 0;
  LOBYTE(v9) = 1;
  DWORD1(v9) = 160;
  BYTE8(v9) = 3;
  v3 = (void *)(*(uint64_t (**)(void (**)(CGSize)))(v2 + 112))(&v8);
  v5 = v4;
  ObjectType = swift_getObjectType();
  CoreViewSetClipsToBounds(v1 & 3, v3, 0, 0);
  v8 = closure #1 in DisplayList.ViewUpdater.Platform.missingPlatformView();
  v9 = 0u;
  v10 = 0u;
  v11 = 0;
  (*(void (**)(void (**)(CGSize), _QWORD, uint64_t, uint64_t))(v5 + 40))(&v8, 0, ObjectType, v5);
  return v3;
}

double DisplayList.ViewUpdater.Platform.updateShapeView(_:state:size:path:paint:style:contentsChanged:)(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, uint64_t a5, __int16 a6, char a7)
{
  uint64_t *v7;
  CGFloat v14;
  void *v15;
  CGFloat v16;
  double v17;
  double v18;
  CGFloat v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  int v28;
  CGFloat v29;
  uint64_t v30;
  char v31;
  char v32;
  char v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  double v39;
  BOOL v40;
  char v41;
  char v42;
  uint64_t v43;
  void (*v44)(CGAffineTransform *, ValueMetadata *, _UNKNOWN **);
  id v45;
  uint64_t v46;
  double v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  id v52;
  uint64_t v53;
  __int16 v54;
  __int16 v55;
  int v56;
  char v57;
  char v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  void (*v65)(CGAffineTransform *, ValueMetadata *, _UNKNOWN **);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 v69;
  __int128 v70;
  double result;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  double txa;
  CGFloat v78;
  uint64_t v79;
  unsigned __int8 v80;
  CGFloat v81;
  CGFloat v82;
  double *v83;
  _BYTE v84[64];
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  char v89;
  CGAffineTransform location;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _BYTE v95[24];
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  char v99;
  _QWORD v100[4];
  unsigned __int8 v101;
  _QWORD v102[4];
  unsigned __int8 v103;
  int64x2_t v104;
  int64x2_t v105;
  __int128 v106;

  v14 = *(double *)(a4 + 8);
  v81 = *(double *)(a4 + 24);
  v82 = *(double *)(a4 + 16);
  v80 = *(_BYTE *)(a4 + 32);
  v78 = *(double *)a4;
  v79 = *v7;
  v15 = *(void **)(a1 + 8);
  v16 = COERCE_DOUBLE(swift_getObjectType());
  v17 = *a3;
  v18 = a3[1];
  v83 = a3;
  v19 = *(double *)a2;
  v20 = specialized static ShapeLayerHelper.makeLayerBounds(size:path:layerType:contentsScale:)(v17, v18, *(double *)(*(_QWORD *)a2 + 24), a4, *(uint64_t *)&v16);
  v22 = v21;
  v24 = v23;
  v26 = v25;
  if ((a7 & 1) != 0)
  {
    v75 = *(_QWORD *)(*(_QWORD *)&v19 + 24);
    v27 = -v20;
    v28 = *(_DWORD *)(a2 + 8);
    v29 = *(double *)(a2 + 16);
    v30 = *(_QWORD *)(a2 + 96);
    v31 = *(_BYTE *)(a2 + 104);
    v32 = *(_BYTE *)(a2 + 105);
    v33 = *(_BYTE *)(a2 + 106);
    v34 = *(_DWORD *)(a2 + 108);
    v35 = *(_QWORD *)(a2 + 112);
    v36 = *(_QWORD *)(a2 + 168);
    v99 = *(_BYTE *)(a2 + 24);
    location.a = v19;
    LODWORD(location.b) = v28;
    location.c = v29;
    LOBYTE(location.d) = v99;
    v37 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&location.tx = *(_OWORD *)(a2 + 32);
    v91 = v37;
    v38 = *(_OWORD *)(a2 + 80);
    v92 = *(_OWORD *)(a2 + 64);
    v93 = v38;
    *(_QWORD *)&v94 = v30;
    BYTE8(v94) = v31;
    BYTE9(v94) = v32;
    BYTE10(v94) = v33;
    HIDWORD(v94) = v34;
    *(_OWORD *)&v95[8] = *(_OWORD *)(a2 + 120);
    v96 = *(_OWORD *)(a2 + 136);
    v97 = *(_OWORD *)(a2 + 152);
    *(_QWORD *)v95 = v35;
    v98 = v36;
    v39 = v20;
    v40 = DisplayList.ViewUpdater.Model.State.hasDODEffects.getter();
    v41 = a6 & 1;
    v42 = HIBYTE(a6) & 1;
    *(_QWORD *)&location.a = v15;
    location.b = v16;
    v43 = *(_QWORD *)&v78;
    location.c = v78;
    location.d = v14;
    v74 = *(_QWORD *)&v14;
    location.tx = v82;
    location.ty = v81;
    LOBYTE(v91) = v80;
    txa = v39;
    *((double *)&v91 + 1) = v39;
    *(double *)&v92 = v22;
    *((_QWORD *)&v92 + 1) = a5;
    *(double *)&v93 = v27;
    *((double *)&v93 + 1) = -v22;
    *(double *)&v94 = v17;
    *((double *)&v94 + 1) = v18;
    v95[0] = v41;
    v95[1] = v42;
    *(_QWORD *)&v95[8] = v75;
    v95[16] = !v40;
    v44 = *(void (**)(CGAffineTransform *, ValueMetadata *, _UNKNOWN **))(*(_QWORD *)a5 + 136);
    v45 = v15;
    outlined retain of Path.Storage(a4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
    swift_retain();
    v44(&location, &type metadata for ShapeLayerHelper, &protocol witness table for ShapeLayerHelper);
    v46 = *(_QWORD *)&location.b;
    if (*(_QWORD *)&location.b != *(_QWORD *)&v16)
    {
      swift_unknownObjectRelease();

      swift_unknownObjectRelease();
      v47 = specialized static ShapeLayerHelper.makeLayerBounds(size:path:layerType:contentsScale:)(v17, v18, *(double *)(*(_QWORD *)&v19 + 24), a4, v46);
      v22 = v48;
      v24 = v49;
      v26 = v50;
      *((double *)&v91 + 1) = v47;
      *(double *)&v92 = v48;
      txa = v47;
      *(double *)&v93 = -v47;
      *((double *)&v93 + 1) = -v48;
      v84[0] = 3;
      v51 = (void *)(*(uint64_t (**)(uint64_t, _BYTE *))((v79 & 0xFFFFFFFFFFFFFFFCLL) + 96))(v46, v84);
      swift_unknownObjectRetain();
      v52 = (id)CoreViewLayer(v79 & 3, v51);
      v104 = vdupq_n_s64(0x7FF0000000000000uLL);
      v105 = v104;
      LOWORD(v106) = 3;
      v53 = swift_unknownObjectRetain();
      DisplayList.ViewUpdater.ViewInfo.init(view:layer:container:state:)(v53, (uint64_t)v52, (uint64_t)v51, (uint64_t)&v104, (int16x8_t *)v84);
      v54 = *(_WORD *)&v84[56];
      v55 = v87;
      v56 = DWORD1(v87);
      v57 = BYTE8(v87);
      v58 = BYTE9(v87);
      v59 = v88;
      v61 = v85;
      v60 = v86;
      v62 = *(_OWORD *)&v84[24];
      v63 = *(_OWORD *)&v84[40];
      v64 = *(_OWORD *)&v84[8];
      *(_QWORD *)a1 = *(_QWORD *)v84;
      *(_OWORD *)(a1 + 8) = v64;
      *(_OWORD *)(a1 + 24) = v62;
      *(_OWORD *)(a1 + 40) = v63;
      *(_WORD *)(a1 + 56) = v54;
      *(_OWORD *)(a1 + 64) = v61;
      *(_OWORD *)(a1 + 80) = v60;
      *(_WORD *)(a1 + 96) = v55;
      *(_DWORD *)(a1 + 100) = v56;
      *(_BYTE *)(a1 + 104) = v57;
      *(_BYTE *)(a1 + 105) = v58;
      *(_QWORD *)(a1 + 112) = v59;
      objc_storeStrong((id *)&location, (id)v64);
      v65 = *(void (**)(CGAffineTransform *, ValueMetadata *, _UNKNOWN **))(**((_QWORD **)&v92 + 1) + 136);
      swift_retain();
      v65(&location, &type metadata for ShapeLayerHelper, &protocol witness table for ShapeLayerHelper);
      swift_unknownObjectRelease();
      swift_release();
    }
    if (v22 == 0.0)
    {
      outlined init with take of Path.Storage(a4, (uint64_t)&v104);
      outlined retain of Path.Storage((uint64_t)&v104, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
      v66 = v74;
      v68 = *(_QWORD *)&v81;
      v67 = *(_QWORD *)&v82;
      v69 = v80;
    }
    else
    {
      CGAffineTransformMakeTranslation((CGAffineTransform *)v84, -v22, -v22);
      v104 = *(int64x2_t *)v84;
      v105 = *(int64x2_t *)&v84[16];
      v106 = *(_OWORD *)&v84[32];
      Path.applying(_:)((double *)v104.i64, (uint64_t)v100);
      v43 = v100[0];
      v66 = v100[1];
      v67 = v100[2];
      v68 = v100[3];
      v69 = v101;
    }
    v102[0] = v43;
    v102[1] = v66;
    v102[2] = v67;
    v102[3] = v68;
    v103 = v69;
    (*(void (**)(_QWORD *, _QWORD))((v79 & 0xFFFFFFFFFFFFFFFCLL) + 120))(v102, *(_QWORD *)a1);
    outlined consume of Path.Storage(v43, v66, v67, v68, v69);
    if ((*(_BYTE *)(a1 + 57) & 0x20) == 0)
      *(_BYTE *)(a1 + 57) |= 0x20u;
    v87 = v94;
    v88 = *(_OWORD *)v95;
    v89 = v95[16];
    *(CGAffineTransform *)v84 = location;
    *(_OWORD *)&v84[48] = v91;
    v85 = v92;
    v86 = v93;
    outlined release of ShapeLayerHelper((uint64_t)v84);
    v20 = txa;
  }
  v70 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&location.a = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&location.c = v70;
  *(_OWORD *)&location.tx = *(_OWORD *)(a2 + 64);
  CGAffineTransformTranslate((CGAffineTransform *)v84, &location, v20, v22);
  result = *(double *)v84;
  v72 = *(_OWORD *)&v84[16];
  v73 = *(_OWORD *)&v84[32];
  *(_OWORD *)(a2 + 32) = *(_OWORD *)v84;
  *(_OWORD *)(a2 + 48) = v72;
  *(_OWORD *)(a2 + 64) = v73;
  *(_QWORD *)v83 = v24;
  *((_QWORD *)v83 + 1) = v26;
  return result;
}

void DisplayList.ViewUpdater.Platform.updateShadowView(_:path:shadow:size:)(uint64_t a1, uint64_t a2, int *a3, CGFloat a4, CGFloat a5)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned __int8 v20;
  uint64_t v21;
  id v22;
  void *v23;
  void *v24;
  void *v25;
  int8x16_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  int8x16_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned __int8 v47;
  char v48;
  CGRect v49;
  CGRect v50;

  v6 = v5;
  v11 = *(_QWORD *)a2;
  v12 = *(_QWORD *)(a2 + 8);
  v13 = *(_QWORD *)(a2 + 16);
  v14 = *(_QWORD *)(a2 + 24);
  v15 = *(_BYTE *)(a2 + 32);
  v29 = *a3;
  v30 = a3[1];
  v27 = a3[2];
  v28 = a3[3];
  v17 = *((_QWORD *)a3 + 2);
  v16 = *((_QWORD *)a3 + 3);
  v18 = *((_QWORD *)a3 + 4);
  v19 = a3[10];
  v20 = *((_BYTE *)a3 + 44);
  v21 = *v6;
  Path.boundingRect.getter();
  v50.origin.x = 0.0;
  v50.origin.y = 0.0;
  v50.size.width = a4;
  v50.size.height = a5;
  if (CGRectEqualToRect(v49, v50))
  {
    v22 = *(id *)(a1 + 8);
    outlined retain of Path.Storage(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
    specialized ShapeLayerShadowHelper.visitPaint<A>(_:)(1.0, 1.0, 1.0, 1.0);
    v31.i64[0] = v21;
    v31.i64[1] = (uint64_t)v22;
    v32 = v11;
    v33 = v12;
    v34 = v13;
    v35 = v14;
    v36 = v15;
    v37 = 0;
    v38 = 0;
    v39 = v29;
    v40 = v30;
    v41 = v27;
    v42 = v28;
    v43 = v17;
    v44 = v16;
    v45 = v18;
    v46 = v19;
    v47 = v20;
    v48 = 1;
    outlined release of ShapeLayerShadowHelper((uint64_t)&v31);
  }
  else
  {
    v23 = *(void **)(a1 + 8);
    Path.cgPath.getter();
    v25 = v24;
    objc_msgSend(v23, sel_setShadowPath_, v24);

    objc_msgSend(v23, sel_setShadowPathIsBounds_, 0);
    v26.i64[0] = v29;
    v26.i64[1] = v27;
    v31 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)__PAIR64__(v28, v30), 0x20uLL), v26);
    v32 = v17;
    v33 = v16;
    v34 = v18;
    WORD2(v35) = v20;
    LODWORD(v35) = v19;
    DisplayList.ViewUpdater.Platform.setShadow(_:layer:)((uint64_t)&v31, v23);
  }
}

uint64_t closure #1 in DisplayList.ViewUpdater.Platform.updateItemView(_:index:item:state:)(_QWORD *a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  uint64_t v12;
  BOOL v13;

  if (one-time initialization token for shared != -1)
    swift_once();
  v12 = static TextDrawingContext.shared;
  if (a1[24])
  {
    swift_retain();
    v13 = NSAttributedString.isDynamic.getter();
  }
  else
  {
    swift_retain();
    v13 = 0;
  }
  (*(void (**)(uint64_t, BOOL, uint64_t, uint64_t, double, double, double, double, double, double))(*a1 + 288))(1, v13, v12, a2, 0.0, 0.0, a3, a4, a5, a6);
  return swift_release();
}

uint64_t DisplayList.ViewUpdater.Platform.updateDrawingView(_:options:contentsScale:content:sizeChanged:)(uint64_t a1, char *a2, uint64_t a3, unsigned int a4, double a5)
{
  uint64_t *v5;
  char v8;
  int v9;
  char v10;
  int v11;
  char v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void **, _QWORD, uint64_t, uint64_t);
  id v22;
  int64x2_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t ObjectType;
  uint64_t v28;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;

  v8 = *a2;
  v9 = *((_DWORD *)a2 + 1);
  v10 = a2[8];
  v11 = *((_DWORD *)a2 + 3);
  v12 = a2[16];
  v13 = *(void **)a3;
  v14 = *(void **)(a3 + 8);
  v15 = *(_QWORD *)(a3 + 16);
  v16 = *(_QWORD *)(a3 + 24);
  v17 = *(_QWORD *)(a3 + 32);
  v28 = *(_QWORD *)a1;
  v18 = *(_BYTE *)(a3 + 40);
  v26 = *v5;
  v36 = *v5;
  LOBYTE(v30) = v8;
  HIDWORD(v30) = v9;
  LOBYTE(v31) = v10;
  HIDWORD(v31) = v11;
  LOBYTE(v32) = v12;
  swift_unknownObjectRetain();
  specialized DisplayList.ViewUpdater.Platform.updateDrawingView(_:options:contentsScale:)((uint64_t *)a1, (char *)&v30, a5);
  v20 = v19;
  ObjectType = swift_getObjectType();
  v30 = v13;
  v31 = v14;
  v32 = v15;
  v33 = v16;
  v34 = v17;
  v35 = v18;
  v21 = *(uint64_t (**)(void **, _QWORD, uint64_t, uint64_t))(v20 + 40);
  swift_unknownObjectRetain();
  outlined copy of PlatformDrawableContent.Storage(v13, v14, v15, v16, v17, v18);
  LOBYTE(v21) = v21(&v30, a4, ObjectType, v20);
  outlined consume of PlatformDrawableContent.Storage(v13, v14, v15, v16, v17, v18);
  *(_BYTE *)(a1 + 105) = (v21 & 1) == 0;
  if (*(_QWORD *)a1 == v28)
  {
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  else
  {
    v22 = (id)CoreViewLayer(v26 & 3, *(void **)a1);

    *(_QWORD *)(a1 + 8) = v22;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_WORD *)(a1 + 96) = 0;
    v23 = vdupq_n_s64(0x7FF0000000000000uLL);
    *(int64x2_t *)(a1 + 24) = v23;
    *(int64x2_t *)(a1 + 40) = v23;
    *(_BYTE *)(a1 + 57) = 0;
    if (one-time initialization token for infinity != -1)
      swift_once();
    v24 = static Time.infinity;
    swift_unknownObjectRelease();
    result = swift_unknownObjectRelease();
    *(_QWORD *)(a1 + 112) = v24;
  }
  return result;
}

uint64_t DisplayList.ViewUpdater.Platform.updateShapeViewAsync(layer:oldState:oldSize:oldPath:oldPaint:oldStyle:newState:newSize:newPath:newPaint:newStyle:contentsChanged:)(void **a1, uint64_t a2, double *a3, uint64_t a4, uint64_t a5, __int16 a6, uint64_t a7, double *a8, uint64_t a9, uint64_t a10, __int16 a11, char a12)
{
  void *v17;
  CGFloat v18;
  double v19;
  double v20;
  CGFloat v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  CGFloat v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  CGFloat v37;
  uint64_t v38;
  char v39;
  char v40;
  char v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  CGFloat v46;
  uint64_t v47;
  char v48;
  char v49;
  char v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  id v56;
  char v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v65;
  char v66;
  CGFloat v67;
  CGFloat v68;
  CGFloat v69;
  CGFloat v70;
  uint64_t v72;
  char v73;
  CGFloat v74;
  CGFloat v75;
  CGFloat v76;
  CGFloat v77;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double *v83;
  double *v84;
  double tx;
  char v86;
  char v87;
  int v88;
  __int16 v89;
  CGAffineTransform v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  BOOL v96;
  CGAffineTransform v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  _BYTE v102[24];
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  CGAffineTransform v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  BOOL v112;
  CGAffineTransform v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  BOOL v119;
  uint64_t v120;

  v120 = *MEMORY[0x24BDAC8D0];
  v76 = *(double *)(a9 + 8);
  v77 = *(double *)a9;
  v74 = *(double *)(a9 + 24);
  v75 = *(double *)(a9 + 16);
  v73 = *(_BYTE *)(a9 + 32);
  v69 = *(double *)(a4 + 8);
  v70 = *(double *)a4;
  v67 = *(double *)(a4 + 24);
  v68 = *(double *)(a4 + 16);
  v66 = *(_BYTE *)(a4 + 32);
  v17 = *a1;
  v18 = COERCE_DOUBLE(swift_getObjectType());
  v19 = *a3;
  v20 = a3[1];
  v83 = a3;
  v21 = *(double *)a2;
  v22 = specialized static ShapeLayerHelper.makeLayerBounds(size:path:layerType:contentsScale:)(v19, v20, *(double *)(*(_QWORD *)a2 + 24), a4, *(uint64_t *)&v18);
  v24 = v23;
  v26 = v25;
  v82 = v27;
  v28 = *a8;
  v29 = a8[1];
  v84 = a8;
  v30 = *(double *)a7;
  tx = specialized static ShapeLayerHelper.makeLayerBounds(size:path:layerType:contentsScale:)(v28, v29, *(double *)(*(_QWORD *)a7 + 24), a9, *(uint64_t *)&v18);
  v32 = v31;
  v80 = v34;
  v81 = v33;
  if ((a12 & 1) != 0)
  {
    v65 = *(_QWORD *)(*(_QWORD *)&v21 + 24);
    LODWORD(v97.b) = *(_DWORD *)(a2 + 8);
    v35 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v97.tx = *(_OWORD *)(a2 + 32);
    v98 = v35;
    v36 = *(_OWORD *)(a2 + 80);
    v99 = *(_OWORD *)(a2 + 64);
    v37 = *(double *)(a2 + 16);
    v38 = *(_QWORD *)(a2 + 96);
    v39 = *(_BYTE *)(a2 + 104);
    v40 = *(_BYTE *)(a2 + 105);
    v41 = *(_BYTE *)(a2 + 106);
    v42 = *(_DWORD *)(a2 + 108);
    v43 = *(_QWORD *)(a2 + 112);
    v44 = *(_QWORD *)(a2 + 168);
    v86 = *(_BYTE *)(a2 + 24);
    v97.a = v21;
    v97.c = v37;
    LOBYTE(v97.d) = v86;
    v100 = v36;
    *(_QWORD *)&v101 = v38;
    BYTE8(v101) = v39;
    BYTE9(v101) = v40;
    BYTE10(v101) = v41;
    HIDWORD(v101) = v42;
    *(_OWORD *)&v102[8] = *(_OWORD *)(a2 + 120);
    v103 = *(_OWORD *)(a2 + 136);
    v104 = *(_OWORD *)(a2 + 152);
    *(_QWORD *)v102 = v43;
    v105 = v44;
    *(_QWORD *)&v106.a = v17;
    v106.b = v18;
    v106.c = v70;
    v106.d = v69;
    v106.tx = v68;
    v106.ty = v67;
    LOBYTE(v107) = v66;
    *((double *)&v107 + 1) = v22;
    *(double *)&v108 = v24;
    *((_QWORD *)&v108 + 1) = a5;
    *(double *)&v109 = -v22;
    *((double *)&v109 + 1) = -v24;
    *(double *)&v110 = v19;
    *((double *)&v110 + 1) = v20;
    LOWORD(v111) = a6 & 0x101;
    *((_QWORD *)&v111 + 1) = v65;
    v112 = !DisplayList.ViewUpdater.Model.State.hasDODEffects.getter();
    v72 = *(_QWORD *)(*(_QWORD *)&v30 + 24);
    v45 = *(_DWORD *)(a7 + 8);
    v46 = *(double *)(a7 + 16);
    v47 = *(_QWORD *)(a7 + 96);
    v48 = *(_BYTE *)(a7 + 104);
    v49 = *(_BYTE *)(a7 + 105);
    v50 = *(_BYTE *)(a7 + 106);
    v51 = *(_DWORD *)(a7 + 108);
    v52 = *(_QWORD *)(a7 + 112);
    v53 = *(_QWORD *)(a7 + 168);
    v87 = *(_BYTE *)(a7 + 24);
    v97.a = v30;
    LODWORD(v97.b) = v45;
    v97.c = v46;
    LOBYTE(v97.d) = v87;
    v54 = *(_OWORD *)(a7 + 48);
    *(_OWORD *)&v97.tx = *(_OWORD *)(a7 + 32);
    v98 = v54;
    v55 = *(_OWORD *)(a7 + 80);
    v99 = *(_OWORD *)(a7 + 64);
    v100 = v55;
    *(_QWORD *)&v101 = v47;
    BYTE8(v101) = v48;
    BYTE9(v101) = v49;
    BYTE10(v101) = v50;
    HIDWORD(v101) = v51;
    *(_OWORD *)&v102[8] = *(_OWORD *)(a7 + 120);
    v103 = *(_OWORD *)(a7 + 136);
    v104 = *(_OWORD *)(a7 + 152);
    *(_QWORD *)v102 = v52;
    v105 = v53;
    *(_QWORD *)&v90.a = v17;
    v90.b = v18;
    v90.c = v77;
    v90.d = v76;
    v90.tx = v75;
    v90.ty = v74;
    LOBYTE(v91) = v73;
    *((double *)&v91 + 1) = tx;
    *(double *)&v92 = v32;
    *((_QWORD *)&v92 + 1) = a10;
    *(double *)&v93 = -tx;
    *((double *)&v93 + 1) = -v32;
    *(double *)&v94 = v28;
    *((double *)&v94 + 1) = v29;
    LOWORD(v95) = a11 & 0x101;
    WORD3(v95) = v89;
    *(_DWORD *)((char *)&v95 + 2) = v88;
    *((_QWORD *)&v95 + 1) = v72;
    v96 = !DisplayList.ViewUpdater.Model.State.hasDODEffects.getter();
    v56 = v17;
    outlined retain of Path.Storage(a4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
    swift_retain();
    outlined retain of Path.Storage(a9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
    swift_retain();
    v57 = specialized static ShapeLayerHelper.updateAsync(layer:old:new:)((uint64_t)a1, (uint64_t)&v106, (unsigned __int8 *)&v90);
    v117 = v94;
    v118 = v95;
    v119 = v96;
    v113 = v90;
    v114 = v91;
    v115 = v92;
    v116 = v93;
    v101 = v110;
    *(_OWORD *)v102 = v111;
    v102[16] = v112;
    v97 = v106;
    v98 = v107;
    v99 = v108;
    v100 = v109;
    outlined release of ShapeLayerHelper((uint64_t)&v113);
    outlined release of ShapeLayerHelper((uint64_t)&v97);
    if ((v57 & 1) == 0)
      return 0;
  }
  v58 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v97.a = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v97.c = v58;
  *(_OWORD *)&v97.tx = *(_OWORD *)(a2 + 64);
  CGAffineTransformTranslate(&v113, &v97, v22, v24);
  v59 = *(_OWORD *)&v113.c;
  v60 = *(_OWORD *)&v113.tx;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)&v113.a;
  *(_OWORD *)(a2 + 48) = v59;
  *(_OWORD *)(a2 + 64) = v60;
  v61 = *(_OWORD *)(a7 + 48);
  *(_OWORD *)&v97.a = *(_OWORD *)(a7 + 32);
  *(_OWORD *)&v97.c = v61;
  *(_OWORD *)&v97.tx = *(_OWORD *)(a7 + 64);
  CGAffineTransformTranslate(&v113, &v97, tx, v32);
  v62 = *(_OWORD *)&v113.c;
  v63 = *(_OWORD *)&v113.tx;
  *(_OWORD *)(a7 + 32) = *(_OWORD *)&v113.a;
  *(_OWORD *)(a7 + 48) = v62;
  *(_OWORD *)(a7 + 64) = v63;
  *(_QWORD *)v83 = v26;
  *((_QWORD *)v83 + 1) = v82;
  *(_QWORD *)v84 = v81;
  *((_QWORD *)v84 + 1) = v80;
  return 1;
}

uint64_t DisplayList.ViewUpdater.Platform.updateDrawingViewAsync(_:oldOptions:newOptions:content:sizeChanged:newSize:newState:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, char a5, __int128 *a6, CGFloat width, CGFloat height)
{
  char v13;
  int v14;
  char v15;
  int v16;
  char v17;
  int v18;
  char v19;
  int v20;
  char v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  void *v28;
  char v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  double x;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  double y;
  uint64_t (*v43)(__int128 *, _QWORD, id, uint64_t, uint64_t, double, double, double, double);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t ObjectType;
  char v55;
  char v56;
  uint64_t v57;
  void *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  SwiftUI::FixedRoundedRect_optional v70;

  v13 = *a2;
  v14 = *((_DWORD *)a2 + 1);
  v15 = a2[8];
  v16 = *((_DWORD *)a2 + 3);
  v17 = a2[16];
  v18 = *(_DWORD *)(a3 + 4);
  v19 = *(_BYTE *)(a3 + 8);
  v20 = *(_DWORD *)(a3 + 12);
  v21 = *(_BYTE *)(a3 + 16);
  v22 = *(void **)a4;
  v23 = *(void **)(a4 + 8);
  v24 = *(_QWORD *)(a4 + 16);
  v25 = *(_QWORD *)(a4 + 24);
  v26 = *(_QWORD *)(a4 + 32);
  v27 = *(_BYTE *)(a4 + 40);
  LOBYTE(v59) = *(_BYTE *)a3;
  DWORD1(v59) = v18;
  BYTE8(v59) = v19;
  HIDWORD(v59) = v20;
  LOBYTE(v60) = v21;
  LOBYTE(v70.value.rect.origin.x) = v13;
  HIDWORD(v70.value.rect.origin.x) = v14;
  LOBYTE(v70.value.rect.origin.y) = v15;
  HIDWORD(v70.value.rect.origin.y) = v16;
  LOBYTE(v70.value.rect.size.width) = v17;
  if (!specialized static RasterizationOptions.== infix(_:_:)((unsigned __int8 *)&v59, (unsigned __int8 *)&v70))
    return 0;
  v28 = *(void **)a1;
  v57 = *(_QWORD *)(a1 + 8);
  v58 = v22;
  v29 = *(_BYTE *)(a1 + 17);
  v30 = v28;
  v31 = objc_msgSend(v30, sel_delegate);
  if (!v31)
  {

    return 0;
  }
  v32 = v31;
  v55 = v27;
  v56 = a5;
  swift_getObjectType();
  v33 = swift_conformsToProtocol2();
  if (v33)
    v34 = v33;
  else
    v34 = 0;
  if (v33)
    v35 = v32;
  else
    v35 = 0;

  if (!v35)
    goto LABEL_22;
  x = 0.0;
  if ((v29 & 8) == 0)
    goto LABEL_12;
  v37 = a6[9];
  v67 = a6[8];
  v68 = v37;
  v69 = a6[10];
  v38 = a6[5];
  v63 = a6[4];
  v64 = v38;
  v39 = a6[7];
  v65 = a6[6];
  v66 = v39;
  v40 = a6[1];
  v59 = *a6;
  v60 = v40;
  v41 = a6[3];
  v61 = a6[2];
  v62 = v41;
  DisplayList.ViewUpdater.Model.State.clipRect()(&v70);
  if (v70.value.style != SwiftUI_RoundedCornerStyle_unknownDefault)
  {
    width = v70.value.rect.size.width;
    height = v70.value.rect.size.height;
    x = v70.value.rect.origin.x;
    y = v70.value.rect.origin.y;
  }
  else
  {
LABEL_12:
    y = 0.0;
  }
  ObjectType = swift_getObjectType();
  *(_QWORD *)&v59 = v58;
  *((_QWORD *)&v59 + 1) = v23;
  *(_QWORD *)&v60 = v24;
  *((_QWORD *)&v60 + 1) = v25;
  *(_QWORD *)&v61 = v26;
  BYTE8(v61) = v55;
  v43 = *(uint64_t (**)(__int128 *, _QWORD, id, uint64_t, uint64_t, double, double, double, double))(v34 + 48);
  outlined copy of PlatformDrawableContent.Storage(v58, v23, v24, v25, v26, v55);
  v44 = v43(&v59, v56 & 1, v30, ObjectType, v34, x, y, width, height);
  v46 = v45;
  outlined consume of PlatformDrawableContent.Storage(v58, v23, v24, v25, v26, v55);
  if (!v44)
  {
LABEL_22:
    swift_unknownObjectRelease();
    return 0;
  }
  v47 = swift_allocObject();
  *(_QWORD *)(v47 + 16) = v44;
  *(_QWORD *)(v47 + 24) = v46;
  v48 = *(_QWORD **)(v57 + 64);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v57 + 64) = v48;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v48[2] + 1, 1, v48);
    *(_QWORD *)(v57 + 64) = v48;
  }
  v51 = v48[2];
  v50 = v48[3];
  if (v51 >= v50 >> 1)
    v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v50 > 1), v51 + 1, 1, v48);
  v48[2] = v51 + 1;
  v52 = &v48[2 * v51];
  v52[4] = partial apply for thunk for @escaping @callee_guaranteed () -> ();
  v52[5] = v47;
  *(_QWORD *)(v57 + 64) = v48;
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v44);
  swift_unknownObjectRelease();
  return 1;
}

void closure #1 in DisplayList.ViewUpdater.Platform.missingPlatformView()(CGSize size)
{
  GraphicsContext.renderMissingPlatformView(size:)(size);
}

uint64_t specialized Array<A>.popColorMultiply(drawable:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t result;
  void *v13;
  int v14;
  void *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char v43;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  if (!v3)
    return 0;
  v4 = v2 + 120 * v3;
  if (*(_BYTE *)(v4 + 28) != 5)
    return 0;
  v6 = *(_QWORD *)(v4 - 88);
  v7 = *a2;
  swift_unknownObjectRetain();
  swift_getObjectType();
  v8 = swift_conformsToProtocol2();
  if (v8)
    v9 = v8;
  else
    v9 = 0;
  if (v8)
    v10 = v7;
  else
    v10 = 0;
  if (!v10)
  {
    swift_unknownObjectRelease();
    return 0;
  }
  swift_getObjectType();
  v11 = (*(uint64_t (**)(void))(v9 + 32))();
  result = swift_unknownObjectRelease();
  if ((v11 & 1) == 0)
    return 0;
  if (*(_QWORD *)(v2 + 16))
  {
    specialized Array._customRemoveLast()((uint64_t)&v28);
    if (v43 == 255)
    {
      specialized Array.remove(at:)(*(_QWORD *)(*a1 + 16) - 1, (uint64_t)&v28);
      v13 = v28;
      v14 = v29;
      v15 = v30;
      v16 = v31;
      v17 = v32;
      v18 = v33;
      v19 = v34;
      v20 = v35;
      v21 = v36;
      v22 = v37;
      v23 = v38;
      v24 = v39;
      v25 = v40;
      v26 = v41;
      v27 = v42;
    }
    else
    {
      v27 = v42;
      v25 = v40;
      v26 = v41;
      v23 = v38;
      v24 = v39;
      v21 = v36;
      v22 = v37;
      v19 = v34;
      v20 = v35;
      v17 = v32;
      v18 = v33;
      v15 = v30;
      v16 = v31;
      v13 = v28;
      v14 = v29;
    }
    outlined consume of GraphicsFilter(v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, SBYTE2(v27));
    return v6;
  }
  __break(1u);
  return result;
}

uint64_t specialized Array<A>.popColorMultiply(drawable:)(uint64_t *a1, id *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  char v13;
  uint64_t result;
  void *v15;
  int v16;
  void *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  char v45;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  if (!v3)
    return 0;
  v4 = v2 + 120 * v3;
  if (*(_BYTE *)(v4 + 28) != 5)
    return 0;
  v6 = *(_QWORD *)(v4 - 88);
  v7 = *a2;
  v8 = objc_msgSend(v7, sel_delegate);
  if (!v8)
  {

    return 0;
  }
  v9 = v8;
  swift_getObjectType();
  v10 = swift_conformsToProtocol2();
  if (v10)
    v11 = v10;
  else
    v11 = 0;
  if (v10)
    v12 = v9;
  else
    v12 = 0;

  if (!v12)
  {
    swift_unknownObjectRelease();
    return 0;
  }
  swift_getObjectType();
  v13 = (*(uint64_t (**)(void))(v11 + 32))();
  result = swift_unknownObjectRelease();
  if ((v13 & 1) == 0)
    return 0;
  if (*(_QWORD *)(v2 + 16))
  {
    specialized Array._customRemoveLast()((uint64_t)&v30);
    if (v45 == 255)
    {
      specialized Array.remove(at:)(*(_QWORD *)(*a1 + 16) - 1, (uint64_t)&v30);
      v15 = v30;
      v16 = v31;
      v17 = v32;
      v18 = v33;
      v19 = v34;
      v20 = v35;
      v21 = v36;
      v22 = v37;
      v23 = v38;
      v24 = v39;
      v25 = v40;
      v26 = v41;
      v27 = v42;
      v28 = v43;
      v29 = v44;
    }
    else
    {
      v29 = v44;
      v27 = v42;
      v28 = v43;
      v25 = v40;
      v26 = v41;
      v23 = v38;
      v24 = v39;
      v21 = v36;
      v22 = v37;
      v19 = v34;
      v20 = v35;
      v17 = v32;
      v18 = v33;
      v15 = v30;
      v16 = v31;
    }
    outlined consume of GraphicsFilter(v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, SBYTE2(v29));
    return v6;
  }
  __break(1u);
  return result;
}

void DisplayList.ViewUpdater.Platform.updateClipShapes(_:state:)(uint64_t a1, _OWORD *a2)
{
  uint64_t *v2;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  SwiftUI::RoundedCornerStyle style;
  char v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  char v21;
  CGFloat height;
  double width;
  CGFloat v24;
  CGFloat y;
  CGFloat x;
  void *v27;
  double v28;
  double v29;
  double v30;
  _QWORD *v31;
  char v32;
  char v33;
  CGAffineTransform v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  SwiftUI::FixedRoundedRect_optional v43;
  CGRect v44;
  CGRect v45;

  v5 = *v2;
  v6 = a2[9];
  v40 = a2[8];
  v41 = v6;
  v42 = a2[10];
  v7 = a2[5];
  v36 = a2[4];
  v37 = v7;
  v8 = a2[7];
  v38 = a2[6];
  v39 = v8;
  v9 = a2[1];
  *(_OWORD *)&v34.a = *a2;
  *(_OWORD *)&v34.c = v9;
  v10 = a2[3];
  *(_OWORD *)&v34.tx = a2[2];
  v35 = v10;
  DisplayList.ViewUpdater.Model.State.clipRect()(&v43);
  style = v43.value.style;
  if (v43.value.style == SwiftUI_RoundedCornerStyle_unknownDefault)
  {
    v12 = *(_BYTE *)(a1 + 57);
    if ((v12 & 8) != 0)
    {
      v12 &= ~8u;
      *(_BYTE *)(a1 + 57) = v12;
      CoreViewSetClipsToBounds(v5 & 3, *(void **)a1, 0, 0);
      v13 = *(void **)(a1 + 8);
      objc_msgSend(v13, sel_bounds, *(_OWORD *)&v34.a, *(_OWORD *)&v34.c, *(_OWORD *)&v34.tx, v35, v36, v37, v38, v39, v40, v41, v42);
      objc_msgSend(v13, sel_setBounds_, 0.0, 0.0);
      objc_msgSend(v13, sel_setCornerRadius_, 0.0);
      objc_msgSend(v13, sel_setCornerCurve_, *MEMORY[0x24BDE58E0]);
    }
    v14 = *((_QWORD *)a2 + 10);
    if (*(_QWORD *)(v14 + 16))
    {
      v15 = *(void **)(a1 + 8);
      swift_bridgeObjectRetain();
      v16 = objc_msgSend(v15, sel_mask);
      if (v16)
      {
        v17 = v16;
        type metadata accessor for MaskLayer();
        v18 = (char *)swift_dynamicCastClass();
        if (v18)
        {
LABEL_10:
          v19 = a2[3];
          *(_OWORD *)&v34.a = a2[2];
          *(_OWORD *)&v34.c = v19;
          *(_OWORD *)&v34.tx = a2[4];
          CGAffineTransformInvert((CGAffineTransform *)&v43, &v34);
          v20 = swift_bridgeObjectRetain();
          v21 = specialized static Array<A>.== infix(_:_:)(v20, v14);
          swift_bridgeObjectRelease();
          if ((v21 & 1) != 0
            && (v34 = *(CGAffineTransform *)&v18[OBJC_IVAR____TtC7SwiftUI9MaskLayer_clipTransform],
                (static CGAffineTransform.== infix(_:_:)() & 1) != 0))
          {
            swift_bridgeObjectRelease();

          }
          else
          {
            MaskLayer.setClips(_:transform:)((Swift::OpaquePointer)v14, (CGAffineTransform *)&v43);

            swift_bridgeObjectRelease();
          }
          return;
        }

      }
      v18 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MaskLayer()), sel_init);
      objc_msgSend(v18, sel_setAnchorPoint_, 0.0, 0.0);
      objc_msgSend(v18, sel_setNoAnimationDelegate);
      objc_msgSend(v15, sel_setMask_, v18);

      if ((v12 & 0x10) == 0)
        *(_BYTE *)(a1 + 57) = v12 | 0x10;
      goto LABEL_10;
    }
    if ((v12 & 0x10) == 0)
      return;
    objc_msgSend(*(id *)(a1 + 8), sel_setMask_, 0);
    v33 = v12 & 0xEF;
LABEL_26:
    *(_BYTE *)(a1 + 57) = v33;
    return;
  }
  height = v43.value.rect.size.height;
  width = v43.value.cornerSize.width;
  y = v43.value.rect.origin.y;
  v24 = v43.value.rect.size.width;
  x = v43.value.rect.origin.x;
  CoreViewSetClipsToBounds(v5 & 3, *(void **)a1, 1, 0);
  v27 = *(void **)(a1 + 8);
  v44.origin.x = x;
  v44.origin.y = y;
  v44.size.width = v24;
  v44.size.height = height;
  v28 = CGRectGetWidth(v44);
  v45.origin.x = x;
  v45.origin.y = y;
  v45.size.width = v24;
  v45.size.height = height;
  v29 = CGRectGetHeight(v45);
  if (v29 >= v28)
    v29 = v28;
  v30 = v29 * 0.5;
  if (v30 >= width)
    v30 = width;
  objc_msgSend(v27, sel_setCornerRadius_, v30, *(_OWORD *)&v34.a, *(_OWORD *)&v34.c, *(_OWORD *)&v34.tx, v35, v36, v37, v38, v39, v40, v41, v42);
  v31 = (_QWORD *)MEMORY[0x24BDE58E8];
  if ((style & 1) == 0)
    v31 = (_QWORD *)MEMORY[0x24BDE58E0];
  objc_msgSend(v27, sel_setCornerCurve_, *v31);
  v32 = *(_BYTE *)(a1 + 57);
  if ((v32 & 8) == 0)
  {
    v32 |= 8u;
    *(_BYTE *)(a1 + 57) = v32;
  }
  if ((v32 & 0x10) != 0)
  {
    objc_msgSend(v27, sel_setMask_, 0);
    v33 = v32 & 0xEF;
    goto LABEL_26;
  }
}

uint64_t DisplayList.ViewUpdater.Platform.updateGeometry(_:item:size:state:clipRectChanged:)(uint64_t a1, double a2, double a3, uint64_t a4, uint64_t *a5, char a6)
{
  uint64_t *v6;
  double height;
  double width;
  uint64_t v12;
  double v13;
  double v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned __int16 v18;
  char v19;
  double v20;
  double v21;
  char v22;
  double v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  int v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  double x;
  int v35;
  int v36;
  double y;
  char v38;
  BOOL v40;
  BOOL v41;
  double v42;
  _BOOL4 v43;
  double v44;
  void *v45;
  char v46;
  void *v47;
  id v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  double v60;
  double v61;
  __int128 v62;
  uint64_t v63;
  char v64;
  char v65;
  char v66;
  int v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  SwiftUI::FixedRoundedRect_optional v73;
  char v74;

  height = a3;
  width = a2;
  v12 = *v6;
  v14 = *(double *)(a1 + 40);
  v13 = *(double *)(a1 + 48);
  v15 = v13 != a3 || v14 != a2;
  v16 = *(unsigned __int16 *)(a1 + 88);
  v17 = a5[17];
  if (v17)
    v18 = (2 * ((33 * WORD1(v17)) ^ v17)) | 1;
  else
    v18 = 0;
  *(_WORD *)(a1 + 88) = v18;
  if (v16 == v18)
    v19 = v15;
  else
    v19 = 1;
  if ((v19 & 1) == 0 && (a6 & 1) == 0)
    return 0;
  v21 = *((double *)a5 + 8);
  v20 = *((double *)a5 + 9);
  v22 = *(_BYTE *)(a1 + 57);
  if ((v22 & 8) == 0)
    goto LABEL_14;
  v23 = *(double *)a5;
  v24 = *((_DWORD *)a5 + 2);
  v25 = a5[2];
  v26 = a5[12];
  v27 = *((_BYTE *)a5 + 104);
  v28 = *((_BYTE *)a5 + 105);
  v29 = *((_BYTE *)a5 + 106);
  v30 = *((_DWORD *)a5 + 27);
  v31 = a5[14];
  v74 = *((_BYTE *)a5 + 24);
  *(double *)&v56 = v23;
  DWORD2(v56) = v24;
  *(_QWORD *)&v57 = v25;
  BYTE8(v57) = v74;
  v32 = *((_OWORD *)a5 + 3);
  v58 = *((_OWORD *)a5 + 2);
  v59 = v32;
  v60 = v21;
  v61 = v20;
  v62 = *((_OWORD *)a5 + 5);
  v63 = v26;
  v64 = v27;
  v65 = v28;
  v66 = v29;
  v67 = v30;
  v68 = v31;
  v69 = *(_OWORD *)(a5 + 15);
  v70 = v17;
  v33 = *((_OWORD *)a5 + 10);
  v71 = *((_OWORD *)a5 + 9);
  v72 = v33;
  DisplayList.ViewUpdater.Model.State.clipRect()(&v73);
  if (v73.value.style == SwiftUI_RoundedCornerStyle_unknownDefault)
  {
LABEL_14:
    if ((v22 & 1) == 0)
    {
      if (v16 != v18)
      {
        if (v21 == *(double *)(a1 + 24) && v20 == *(double *)(a1 + 32))
        {
          x = 0.0;
          if (v15)
          {
            if (v14 != width || v13 != height)
            {
              v15 = 0;
              v35 = 0;
              *(double *)(a1 + 40) = width;
              *(double *)(a1 + 48) = height;
              v36 = 1;
              y = 0.0;
              if ((v22 & 4) != 0)
                goto LABEL_167;
              goto LABEL_157;
            }
            v15 = 0;
          }
          v36 = 0;
          v35 = 0;
          goto LABEL_154;
        }
        *(double *)(a1 + 24) = v21;
        *(double *)(a1 + 32) = v20;
        if ((v15 & 1) == 0)
        {
          v15 = 0;
          x = 0.0;
          if ((v22 & 4) != 0)
          {
            v36 = 0;
            y = 0.0;
            goto LABEL_168;
          }
          v35 = 1;
          v36 = 0;
          y = 0.0;
LABEL_157:
          v42 = *((double *)a5 + 5);
          v43 = 1;
          if (*((double *)a5 + 4) == 1.0 && v42 == 0.0 && *((double *)a5 + 6) == 0.0)
          {
            v44 = *((double *)a5 + 7);
            v43 = v44 != 1.0;
            if ((v22 & 2) == 0 && v44 == 1.0)
              goto LABEL_173;
          }
          v45 = *(void **)a1;
          *(_QWORD *)&v56 = a5[4];
          *((double *)&v56 + 1) = v42;
          v57 = *((_OWORD *)a5 + 3);
          v58 = 0uLL;
          CoreViewSetTransform(v12 & 3, v45, &v56);
          if (v43)
          {
            if ((v22 & 2) != 0)
              goto LABEL_173;
            v46 = v22 | 2;
          }
          else
          {
            if ((v22 & 2) == 0)
              goto LABEL_173;
            v46 = v22 & 0xFD;
          }
          *(_BYTE *)(a1 + 57) = v46;
LABEL_173:
          v49 = 0.0;
          if ((*(_QWORD *)&v21 & 0xFFFFFFFFFFFFFLL) != 0)
            v50 = 0.0;
          else
            v50 = v21;
          if ((~*(_QWORD *)&v21 & 0x7FF0000000000000) != 0)
            v50 = v21;
          if ((*(_QWORD *)&v20 & 0xFFFFFFFFFFFFFLL) != 0)
            v51 = 0.0;
          else
            v51 = v20;
          if ((~*(_QWORD *)&v20 & 0x7FF0000000000000) != 0)
            v51 = v20;
          if ((*(_QWORD *)&x & 0xFFFFFFFFFFFFFLL) != 0)
            v52 = 0.0;
          else
            v52 = x;
          if ((~*(_QWORD *)&x & 0x7FF0000000000000) != 0)
            v52 = x;
          if ((*(_QWORD *)&y & 0xFFFFFFFFFFFFFLL) != 0)
            v53 = 0.0;
          else
            v53 = y;
          if ((~*(_QWORD *)&y & 0x7FF0000000000000) != 0)
            v53 = y;
          if ((*(_QWORD *)&width & 0xFFFFFFFFFFFFFLL) != 0)
            v54 = 0.0;
          else
            v54 = width;
          if ((~*(_QWORD *)&width & 0x7FF0000000000000) != 0)
            v54 = width;
          if ((*(_QWORD *)&height & 0xFFFFFFFFFFFFFLL) == 0)
            v49 = height;
          if ((~*(_QWORD *)&height & 0x7FF0000000000000) != 0)
            v49 = height;
          v47 = *(void **)a1;
          CoreViewSetGeometry((void *)(v12 & 3), *(void **)a1, *(unsigned __int8 *)(a1 + 56) - 13 < 3, v35, v15, v36, v50, v51, v52, v53, v54, v49);
          if ((v15 & 1) != 0)
            goto LABEL_205;
          goto LABEL_203;
        }
        if (v14 != width || v13 != height)
        {
          v15 = 0;
          *(double *)(a1 + 40) = width;
          *(double *)(a1 + 48) = height;
          x = 0.0;
          v36 = 1;
          y = 0.0;
          v35 = 1;
          if ((v22 & 4) != 0)
            goto LABEL_167;
          goto LABEL_157;
        }
        v15 = 0;
        v36 = 0;
        x = 0.0;
        v35 = 1;
LABEL_154:
        y = 0.0;
        goto LABEL_155;
      }
      if ((v15 & 1) == 0)
      {
        v15 = 0;
        v36 = 0;
        v35 = 0;
        x = 0.0;
        goto LABEL_154;
      }
      v15 = 0;
      v35 = 0;
      *(double *)(a1 + 40) = width;
      *(double *)(a1 + 48) = height;
      x = 0.0;
      v36 = 1;
      y = 0.0;
      if ((v22 & 4) == 0)
        goto LABEL_173;
LABEL_167:
      CoreViewSetSize(v12 & 3, *(void **)a1);
      goto LABEL_168;
    }
    x = 0.0;
    if (v16 == v18)
    {
      if ((v15 & 1) != 0)
      {
        v35 = 0;
        *(double *)(a1 + 40) = width;
        *(double *)(a1 + 48) = height;
        v36 = 1;
      }
      else
      {
        v36 = 0;
        v35 = 0;
      }
      y = 0.0;
      goto LABEL_48;
    }
    y = 0.0;
LABEL_52:
    if (v21 != *(double *)(a1 + 24) || v20 != *(double *)(a1 + 32))
    {
      *(double *)(a1 + 24) = v21;
      *(double *)(a1 + 32) = v20;
      if ((v15 & 1) != 0)
      {
        if (width == v14)
        {
          if (height == v13)
          {
            v40 = x == 0.0;
            if (y != 0.0)
              v40 = 0;
            if ((v22 & 1) == 0)
            {
              if (v40)
              {
                if ((v22 & 4) == 0)
                {
                  v15 = 0;
                  v36 = 0;
                  v35 = 1;
                  goto LABEL_156;
                }
                goto LABEL_102;
              }
              v36 = 0;
              goto LABEL_148;
            }
            v36 = 0;
            goto LABEL_132;
          }
          *(double *)(a1 + 40) = width;
          *(double *)(a1 + 48) = height;
          v40 = x == 0.0;
          if (y != 0.0)
            v40 = 0;
          if ((v22 & 1) != 0)
          {
            v36 = 1;
LABEL_132:
            v35 = 1;
LABEL_133:
            v15 = 1;
            if (!v40)
              goto LABEL_155;
            goto LABEL_48;
          }
          if (v40)
          {
            if ((v22 & 4) == 0)
            {
              v15 = 0;
              v36 = 1;
              v35 = 1;
              goto LABEL_156;
            }
LABEL_135:
            LOBYTE(v15) = 0;
            goto LABEL_209;
          }
          v36 = 1;
LABEL_148:
          v35 = 1;
          goto LABEL_149;
        }
        *(double *)(a1 + 40) = width;
        *(double *)(a1 + 48) = height;
        v36 = 1;
        if ((v22 & 1) == 0)
        {
          if (x != 0.0 || y != 0.0)
            goto LABEL_148;
          v15 = 0;
          if ((v22 & 4) != 0)
            goto LABEL_167;
LABEL_130:
          v35 = 1;
          goto LABEL_156;
        }
        if (x == 0.0)
        {
          v41 = y == 0.0;
          v35 = 1;
          goto LABEL_139;
        }
        goto LABEL_127;
      }
      v36 = 0;
      if ((v22 & 1) != 0)
      {
        if (x == 0.0)
        {
          if (y == 0.0)
          {
            v35 = 1;
            goto LABEL_48;
          }
          v15 = 1;
          if ((v22 & 4) != 0)
            goto LABEL_167;
          goto LABEL_130;
        }
LABEL_127:
        v15 = 1;
        v35 = 1;
        goto LABEL_155;
      }
      v35 = 1;
      if (x != 0.0 || y != 0.0)
      {
LABEL_149:
        v38 = v22 | 1;
        *(_BYTE *)(a1 + 57) = v22 | 1;
        if ((v22 & 4) == 0)
          goto LABEL_150;
        goto LABEL_166;
      }
      if ((v22 & 4) == 0)
      {
        v15 = 0;
        v36 = 0;
        goto LABEL_156;
      }
LABEL_102:
      LOBYTE(v15) = 0;
      v36 = 0;
      goto LABEL_168;
    }
    if ((v15 & 1) == 0)
    {
      v36 = 0;
      if ((v22 & 1) == 0)
      {
        if (x != 0.0 || y != 0.0)
          goto LABEL_103;
        goto LABEL_80;
      }
      goto LABEL_82;
    }
    if (width == v14)
    {
      if (height == v13)
      {
        v36 = 0;
        if ((v22 & 1) == 0)
        {
          if (x != 0.0 || y != 0.0)
          {
LABEL_103:
            v35 = 0;
            goto LABEL_149;
          }
LABEL_80:
          if ((v22 & 4) == 0)
          {
            v15 = 0;
            v36 = 0;
            v35 = 0;
            goto LABEL_156;
          }
          goto LABEL_102;
        }
LABEL_82:
        v15 = 1;
        if (x != 0.0)
        {
          v35 = 0;
          goto LABEL_155;
        }
        v35 = 0;
        if (y != 0.0)
          goto LABEL_155;
LABEL_48:
        v38 = v22 & 0xFE;
        *(_BYTE *)(a1 + 57) = v22 & 0xFE;
        if ((v22 & 4) == 0)
        {
LABEL_150:
          v15 = 1;
          v22 = v38;
          if (v16 == v18)
            goto LABEL_173;
          goto LABEL_157;
        }
LABEL_166:
        LOBYTE(v15) = 1;
        goto LABEL_167;
      }
      *(double *)(a1 + 40) = width;
      *(double *)(a1 + 48) = height;
      v40 = x == 0.0;
      if (y != 0.0)
        v40 = 0;
      if ((v22 & 1) == 0)
      {
        if (v40)
        {
LABEL_115:
          if ((v22 & 4) == 0)
          {
            v15 = 0;
            v35 = 0;
            v36 = 1;
            goto LABEL_156;
          }
          goto LABEL_135;
        }
LABEL_123:
        v35 = 0;
        v36 = 1;
        goto LABEL_149;
      }
    }
    else
    {
      *(double *)(a1 + 40) = width;
      *(double *)(a1 + 48) = height;
      v40 = x == 0.0;
      if (y != 0.0)
        v40 = 0;
      if ((v22 & 1) == 0)
      {
        if (v40)
          goto LABEL_115;
        goto LABEL_123;
      }
    }
    v35 = 0;
    v36 = 1;
    goto LABEL_133;
  }
  width = v73.value.rect.size.width;
  height = v73.value.rect.size.height;
  x = v73.value.rect.origin.x;
  y = v73.value.rect.origin.y;
  v21 = v21 + v73.value.rect.origin.x;
  v20 = v20 + v73.value.rect.origin.y;
  if (v16 != v18)
  {
    LOBYTE(v15) = v15 | a6;
    goto LABEL_52;
  }
  if (!v15)
  {
    if ((a6 & 1) == 0)
      goto LABEL_100;
LABEL_51:
    LOBYTE(v15) = 1;
    goto LABEL_52;
  }
  if ((a6 & 1) != 0)
    goto LABEL_51;
  if (v73.value.rect.size.width == v14 && v73.value.rect.size.height == v13)
  {
    if ((v22 & 1) != 0)
    {
      v36 = 0;
      if (v73.value.rect.origin.x != 0.0)
      {
        v35 = 0;
        v15 = 1;
        goto LABEL_155;
      }
      if (v73.value.rect.origin.y != 0.0)
      {
        v15 = 1;
        v35 = 0;
        goto LABEL_155;
      }
      v35 = 0;
      goto LABEL_48;
    }
    if (v73.value.rect.origin.x != 0.0 || v73.value.rect.origin.y != 0.0)
    {
      v36 = 0;
      v35 = 0;
      goto LABEL_149;
    }
LABEL_100:
    v15 = 0;
    v36 = 0;
    v35 = 0;
    if ((v22 & 4) == 0)
      goto LABEL_173;
    goto LABEL_168;
  }
  *(CGFloat *)(a1 + 40) = v73.value.rect.size.width;
  *(double *)(a1 + 48) = height;
  if ((v22 & 1) == 0)
  {
    if (x == 0.0 && y == 0.0)
    {
      v15 = 0;
      v35 = 0;
      v36 = 1;
      if ((v22 & 4) != 0)
        goto LABEL_167;
      goto LABEL_173;
    }
    goto LABEL_123;
  }
  if (x == 0.0)
  {
    v35 = 0;
    v36 = 1;
    v41 = y == 0.0;
LABEL_139:
    v15 = 1;
    if (!v41)
      goto LABEL_155;
    goto LABEL_48;
  }
  v35 = 0;
  v15 = 1;
  v36 = 1;
LABEL_155:
  if ((v22 & 4) == 0)
  {
LABEL_156:
    if (v16 == v18)
      goto LABEL_173;
    goto LABEL_157;
  }
  if ((v15 & 1) != 0)
    goto LABEL_166;
  LOBYTE(v15) = 0;
  if (v36)
  {
LABEL_209:
    v36 = 1;
    goto LABEL_167;
  }
  v36 = 0;
LABEL_168:
  v47 = *(void **)a1;
  v48 = (id)CoreViewLayer(v12 & 3, *(void **)a1);
  objc_msgSend(v48, sel_setRasterizationScale_, *(double *)(*a5 + 24));

  if ((v15 & 1) != 0)
    goto LABEL_205;
LABEL_203:
  if (!v36)
    return 0;
LABEL_205:
  if (*(_BYTE *)(a1 + 56) == 12)
    CoreViewSetMaskGeometry((void *)(v12 & 3), v47, x, y, width, height);
  return 1;
}

void DisplayList.ViewUpdater.Platform.updateShadow(_:state:item:)(uint64_t a1, _QWORD *a2, double *a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  float v10;
  void *v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  unsigned __int8 v15;
  float v16;
  float v17;
  float v18;
  float v19;
  double v20;
  double v21;
  double v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  double v27;
  double v28;
  __int128 v29;
  uint64_t v30;
  void *v31;
  uint64_t ObjectType;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char v39;
  __int128 v40;
  __int128 v41;
  void (*v42)(__int128 *, ValueMetadata *, _UNKNOWN **);
  id v43;
  __int128 v44;
  uint64_t v45;
  int v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[54];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _OWORD v58[2];
  __int128 v59;
  __int128 v60;
  char v61;

  v6 = *v3;
  v7 = a2[12];
  if (v7)
  {
    if (*(_BYTE *)(a1 + 56))
    {
      v8 = *((_QWORD *)a3 + 6);
      if (!(v8 >> 62))
      {
        v9 = *((_QWORD *)a3 + 5);
        if (v9 >> 60 == 4)
        {
          v27 = a3[2];
          v28 = a3[3];
          v29 = *(_OWORD *)(v9 + 32);
          v59 = *(_OWORD *)(v9 + 16);
          v60 = v29;
          v61 = *(_BYTE *)(v9 + 48);
          v30 = *(_QWORD *)(v9 + 56);
          v31 = *(void **)(a1 + 8);
          ObjectType = swift_getObjectType();
          v33 = *(double *)(*a2 + 24);
          outlined copy of DisplayList.Item.Value(v9, v8);
          outlined copy of DisplayList.Item.Value(v9, v8);
          swift_retain();
          outlined retain of Path.Storage((uint64_t)&v59, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
          swift_retain();
          v34 = specialized static ShapeLayerHelper.makeLayerBounds(size:path:layerType:contentsScale:)(v27, v28, v33, (uint64_t)&v59, ObjectType);
          v36 = v35;
          swift_beginAccess();
          v37 = *(_QWORD *)(v7 + 48);
          v38 = *(_DWORD *)(v7 + 56);
          v39 = *(_BYTE *)(v7 + 60);
          *(_QWORD *)&v47 = v6;
          *((_QWORD *)&v47 + 1) = v31;
          v41 = *(_OWORD *)(v7 + 16);
          v40 = *(_OWORD *)(v7 + 32);
          v48 = v59;
          v49 = v60;
          LOBYTE(v50) = v61;
          *((double *)&v50 + 1) = v34;
          *(_QWORD *)v51 = v36;
          *(_OWORD *)&v51[8] = v41;
          *(_OWORD *)&v51[24] = v40;
          *(_QWORD *)&v51[40] = v37;
          *(_DWORD *)&v51[48] = v38;
          v51[52] = v39;
          v51[53] = 0;
          v42 = *(void (**)(__int128 *, ValueMetadata *, _UNKNOWN **))(*(_QWORD *)v30 + 136);
          outlined retain of Path.Storage((uint64_t)&v59, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
          v43 = v31;
          v42(&v47, &type metadata for ShapeLayerShadowHelper, &protocol witness table for ShapeLayerShadowHelper);
          swift_release();
          outlined retain of Path.Storage((uint64_t)&v59, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
          outlined consume of DisplayList.Item.Value(v9, v8);
          swift_release();
          v56 = *(_OWORD *)v51;
          v57 = *(_OWORD *)&v51[16];
          v58[0] = *(_OWORD *)&v51[32];
          *(_QWORD *)((char *)v58 + 14) = *(_QWORD *)&v51[46];
          v52 = v47;
          v53 = v48;
          v54 = v49;
          v55 = v50;
          outlined release of ShapeLayerShadowHelper((uint64_t)&v52);
          goto LABEL_17;
        }
        if (v9 >> 60 == 1)
        {
          v10 = *(float *)(v9 + 28);
          v11 = *(void **)(a1 + 8);
          swift_beginAccess();
          v12 = *(unsigned int *)(v7 + 24);
          v13 = *(float *)(v7 + 28);
          v44 = *(_OWORD *)(v7 + 32);
          v14 = *(_QWORD *)(v7 + 48);
          v45 = *(_QWORD *)(v7 + 16);
          v46 = *(_DWORD *)(v7 + 56);
          v15 = *(_BYTE *)(v7 + 60);
          outlined copy of DisplayList.Item.Value(v9, v8);
          swift_retain();
          objc_msgSend(v11, sel_setShadowPathIsBounds_, 1);
          objc_msgSend(v11, sel_setShadowPath_, 0);
          *(_QWORD *)&v59 = v6;
          *(_QWORD *)&v52 = v45;
          *((_QWORD *)&v52 + 1) = v12 | ((unint64_t)COERCE_UNSIGNED_INT(v10 * v13) << 32);
          v53 = v44;
          *(_QWORD *)&v54 = v14;
          WORD6(v54) = v15;
          DWORD2(v54) = v46;
          DisplayList.ViewUpdater.Platform.setShadow(_:layer:)((uint64_t)&v52, v11);
          swift_release();
LABEL_17:
          outlined consume of DisplayList.Item.Value(v9, v8);
          return;
        }
      }
    }
    swift_beginAccess();
    v16 = *(float *)(v7 + 16);
    v17 = *(float *)(v7 + 20);
    v18 = *(float *)(v7 + 24);
    v19 = *(float *)(v7 + 28);
    v20 = *(double *)(v7 + 32);
    v21 = *(double *)(v7 + 40);
    v22 = *(double *)(v7 + 48);
    v23 = *(void **)a1;
    v24 = one-time initialization token for cache;
    swift_retain();
    if (v24 != -1)
      swift_once();
    v25 = (void *)specialized ObjectCache.subscript.getter(v16, v17, v18, v19);
    CoreViewSetShadow(v6 & 3, v23, (uint64_t)v25, v20, v21, v22);
    swift_release();

  }
  else
  {
    v26 = a2[20];
    if (v26)
    {
      if (*(unsigned __int16 *)(a1 + 94) == ((unsigned __int16)(2 * ((33 * WORD1(v26)) ^ v26)) | 1))
        return;
    }
    else if (!*(_WORD *)(a1 + 94))
    {
      return;
    }
    if (*(unsigned __int8 *)(a1 + 56) - 13 >= 3)
      CoreViewSetShadow(*v3 & 3, *(void **)a1, 0, 0.0, 0.0, 0.0);
  }
}

void DisplayList.ViewUpdater.Platform.updateProperties(_:state:)(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;

  v5 = *v2;
  v6 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))((*v2 & 0xFFFFFFFFFFFFFFFCLL) + 144))((*(unsigned __int8 *)(a2 + 104) >> 1) & 1, *a1);
  v7 = (void *)a1[1];
  if (*(char *)(a2 + 104) < 0)
    v8 = 18;
  else
    v8 = 0;
  swift_unknownObjectRetain();
  v9 = v7;
  swift_unknownObjectRetain();
  v10 = (id)CoreViewLayer(v5 & 3, v6);
  objc_msgSend(v10, sel_setDisableUpdateMask_, v8);
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
}

uint64_t DisplayList.ViewUpdater.Platform.updateClipShapesAsync(layer:oldState:newState:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  id v13;
  void *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  id v23;
  char v24;
  char v25;
  CGFloat v26;
  int v27;
  CGFloat v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  char v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  int style;
  CGFloat height;
  double width;
  CGFloat v41;
  CGFloat y;
  CGFloat x;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  CGFloat v49;
  CGFloat v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  id v59;
  Swift::String v60;
  Swift::Bool v61;
  CGSize size;
  double v64;
  SwiftUI::FixedRoundedRect_optional v65;
  _QWORD v66[2];
  char v67;
  char v68;
  uint64_t v69;
  char v70;
  CGAffineTransform v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  _BYTE v76[64];
  SwiftUI::FixedRoundedRect_optional v77;
  CALayer v78;
  CGRect v79;
  CGRect v80;
  CGRect v81;
  CGRect v82;

  v6 = *(_QWORD *)(a2 + 80);
  if (!*(_QWORD *)(v6 + 16) && !*(_QWORD *)(*(_QWORD *)(a3 + 80) + 16))
    goto LABEL_22;
  v7 = *(_BYTE *)(a1 + 17);
  if ((v7 & 8) != 0)
  {
    v26 = *(double *)a2;
    v27 = *(_DWORD *)(a2 + 8);
    v28 = *(double *)(a2 + 16);
    v29 = *(_QWORD *)(a2 + 88);
    v30 = *(_QWORD *)(a2 + 96);
    v31 = *(_BYTE *)(a2 + 104);
    v32 = *(_BYTE *)(a2 + 105);
    v33 = *(_BYTE *)(a2 + 106);
    v34 = *(_DWORD *)(a2 + 108);
    v35 = *(_QWORD *)(a2 + 112);
    v36 = *(_QWORD *)(a2 + 168);
    LOBYTE(v66[0]) = *(_BYTE *)(a2 + 24);
    v71.a = v26;
    LODWORD(v71.b) = v27;
    v71.c = v28;
    LOBYTE(v71.d) = v66[0];
    v37 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v71.tx = *(_OWORD *)(a2 + 32);
    v72 = v37;
    v73 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)&v74 = v6;
    *((_QWORD *)&v74 + 1) = v29;
    *(_QWORD *)&v75 = v30;
    BYTE8(v75) = v31;
    BYTE9(v75) = v32;
    BYTE10(v75) = v33;
    HIDWORD(v75) = v34;
    *(_OWORD *)&v76[8] = *(_OWORD *)(a2 + 120);
    *(_OWORD *)&v76[24] = *(_OWORD *)(a2 + 136);
    *(_OWORD *)&v76[40] = *(_OWORD *)(a2 + 152);
    *(_QWORD *)v76 = v35;
    *(_QWORD *)&v76[56] = v36;
    DisplayList.ViewUpdater.Model.State.clipRect()(&v77);
    style = v77.value.style;
    if (v77.value.style == SwiftUI_RoundedCornerStyle_unknownDefault)
      goto LABEL_23;
    height = v77.value.rect.size.height;
    width = v77.value.cornerSize.width;
    y = v77.value.rect.origin.y;
    v41 = v77.value.rect.size.width;
    x = v77.value.rect.origin.x;
    v44 = *(_OWORD *)(a3 + 144);
    *(_OWORD *)&v76[16] = *(_OWORD *)(a3 + 128);
    *(_OWORD *)&v76[32] = v44;
    *(_OWORD *)&v76[48] = *(_OWORD *)(a3 + 160);
    v45 = *(_OWORD *)(a3 + 80);
    v73 = *(_OWORD *)(a3 + 64);
    v74 = v45;
    v46 = *(_OWORD *)(a3 + 112);
    v75 = *(_OWORD *)(a3 + 96);
    *(_OWORD *)v76 = v46;
    v47 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)&v71.a = *(_OWORD *)a3;
    *(_OWORD *)&v71.c = v47;
    v48 = *(_OWORD *)(a3 + 48);
    *(_OWORD *)&v71.tx = *(_OWORD *)(a3 + 32);
    v72 = v48;
    DisplayList.ViewUpdater.Model.State.clipRect()(&v65);
    if (v65.value.style == SwiftUI_RoundedCornerStyle_unknownDefault
      || ((v65.value.style ^ style) & 1) != 0)
    {
      goto LABEL_23;
    }
    size = v65.value.rect.size;
    v64 = v65.value.cornerSize.width;
    v49 = v65.value.rect.origin.y;
    v50 = v65.value.rect.origin.x;
    v79.origin.x = x;
    v79.origin.y = y;
    v79.size.width = v41;
    v79.size.height = height;
    v51 = CGRectGetWidth(v79);
    v80.origin.x = x;
    v80.origin.y = y;
    v80.size.width = v41;
    v80.size.height = height;
    v52 = CGRectGetHeight(v80);
    if (v52 >= v51)
      v52 = v51;
    v53 = v52 * 0.5;
    if (v53 >= width)
      v54 = width;
    else
      v54 = v53;
    v81.origin.x = v50;
    v81.origin.y = v49;
    v81.size.width = size.width;
    v81.size.height = size.height;
    v55 = CGRectGetWidth(v81);
    v82.origin.x = v50;
    v82.origin.y = v49;
    v82.size.width = size.width;
    v82.size.height = size.height;
    v56 = CGRectGetHeight(v82);
    if (v56 >= v55)
      v56 = v55;
    v57 = v56 * 0.5;
    if (v57 >= v64)
      v58 = v64;
    else
      v58 = v57;
    if (v58 != v54)
    {
      v59 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithDouble_, v58);
      v78.super.isa = *(Class *)a1;
      v60._countAndFlagsBits = 0x615272656E726F63;
      v60._object = (void *)0xEC00000073756964;
      *(_QWORD *)&v78._attr.refcount = 1;
      DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v59, v60, v78, v61);

    }
LABEL_22:
    v25 = 1;
    return v25 & 1;
  }
  v8 = *(_OWORD *)(a3 + 144);
  *(_OWORD *)&v76[16] = *(_OWORD *)(a3 + 128);
  *(_OWORD *)&v76[32] = v8;
  *(_OWORD *)&v76[48] = *(_OWORD *)(a3 + 160);
  v9 = *(_OWORD *)(a3 + 80);
  v73 = *(_OWORD *)(a3 + 64);
  v74 = v9;
  v10 = *(_OWORD *)(a3 + 112);
  v75 = *(_OWORD *)(a3 + 96);
  *(_OWORD *)v76 = v10;
  v11 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)&v71.a = *(_OWORD *)a3;
  *(_OWORD *)&v71.c = v11;
  v12 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)&v71.tx = *(_OWORD *)(a3 + 32);
  v72 = v12;
  DisplayList.ViewUpdater.Model.State.clipRect()(&v77);
  if (v77.value.style != SwiftUI_RoundedCornerStyle_unknownDefault
    || (v13 = objc_msgSend(*(id *)a1, sel_mask)) == 0)
  {
LABEL_23:
    v25 = 0;
    return v25 & 1;
  }
  v14 = v13;
  v15 = *(_QWORD *)(a1 + 8);
  v16 = *(_BYTE *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v18 = *(_BYTE *)(a1 + 32);
  v66[0] = v13;
  v66[1] = v15;
  v67 = v16;
  v68 = v7;
  v69 = v17;
  v70 = v18;
  v19 = *(_QWORD *)(a2 + 80);
  v20 = *(_QWORD *)(a3 + 80);
  v21 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v71.a = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v71.c = v21;
  *(_OWORD *)&v71.tx = *(_OWORD *)(a2 + 64);
  CGAffineTransformInvert((CGAffineTransform *)&v77, &v71);
  v22 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)&v71.a = *(_OWORD *)(a3 + 32);
  *(_OWORD *)&v71.c = v22;
  *(_OWORD *)&v71.tx = *(_OWORD *)(a3 + 64);
  CGAffineTransformInvert((CGAffineTransform *)&v65, &v71);
  *(CGPoint *)&v71.a = v65.value.rect.origin;
  *(CGSize *)&v71.c = v65.value.rect.size;
  *(CGSize *)&v71.tx = v65.value.cornerSize;
  v23 = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static MaskLayer.updateClipsAsync(layer:oldClips:newClips:oldTransform:newTransform:)((uint64_t)v66, v19, v20);
  v25 = v24;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v25 & 1;
}

uint64_t DisplayList.ViewUpdater.Platform.updateGeometryAsync(layer:oldItem:oldSize:oldState:newItem:newSize:newState:)(uint64_t a1, CGFloat a2, CGFloat a3, double a4, double a5, uint64_t a6, uint64_t *a7, uint64_t a8, double *a9)
{
  float64x2_t v16;
  char v17;
  CGFloat v18;
  double v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat width;
  CGFloat height;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  float64x2_t v41;
  CGFloat v42;
  CGFloat v43;
  _BOOL4 v44;
  float64x2_t v45;
  int32x4_t v46;
  uint64_t v47;
  int v48;
  void *v49;
  id v50;
  Class v51;
  Swift::String v52;
  Swift::Bool v53;
  id v54;
  uint64_t result;
  CALayer v56;
  Swift::Bool v57;
  void *v58;
  Swift::String v59;
  int32x4_t v60;
  id v61;
  Swift::String v62;
  Swift::Bool v63;
  CGFloat v64;
  CGFloat v65;
  CGFloat v66;
  CGFloat v67;
  CGSize v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  id v72;
  Swift::String v73;
  Swift::Bool v74;
  __int128 v75;
  __int128 v76;
  float64x2_t v77;
  CGFloat y;
  __int128 v79;
  CGFloat x;
  double v81;
  __int128 v82;
  float64x2_t v83;
  __int128 v84;
  float64x2_t v85;
  __int128 v86;
  SwiftUI::FixedRoundedRect_optional v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  float64x2_t v92;
  __int128 v93;
  __int128 v94;
  _BYTE v95[64];
  SwiftUI::FixedRoundedRect_optional v96;
  CGAffineTransform m;
  CALayer v98;
  CALayer v99;
  CALayer v100;
  CGRect v101;

  v16 = *((float64x2_t *)a7 + 4);
  v83 = v16;
  v85 = *(float64x2_t *)(a9 + 8);
  v17 = *(_BYTE *)(a1 + 17);
  v18 = 0.0;
  if ((v17 & 8) != 0)
  {
    v24 = *a7;
    v25 = *((_DWORD *)a7 + 2);
    v26 = a7[2];
    v27 = a7[12];
    v28 = *((_BYTE *)a7 + 104);
    v29 = *((_BYTE *)a7 + 105);
    v30 = *((_BYTE *)a7 + 106);
    v31 = *((_DWORD *)a7 + 27);
    v32 = a7[14];
    v33 = a7[21];
    LOBYTE(m.a) = *((_BYTE *)a7 + 24);
    *(_QWORD *)&v88 = v24;
    DWORD2(v88) = v25;
    *(_QWORD *)&v89 = v26;
    BYTE8(v89) = LOBYTE(m.a);
    v34 = *((_OWORD *)a7 + 3);
    v90 = *((_OWORD *)a7 + 2);
    v91 = v34;
    v35 = *((_OWORD *)a7 + 5);
    v92 = v16;
    v93 = v35;
    *(_QWORD *)&v94 = v27;
    BYTE8(v94) = v28;
    BYTE9(v94) = v29;
    BYTE10(v94) = v30;
    HIDWORD(v94) = v31;
    *(_OWORD *)&v95[8] = *(_OWORD *)(a7 + 15);
    *(_OWORD *)&v95[24] = *(_OWORD *)(a7 + 17);
    *(_OWORD *)&v95[40] = *(_OWORD *)(a7 + 19);
    *(_QWORD *)v95 = v32;
    *(_QWORD *)&v95[56] = v33;
    DisplayList.ViewUpdater.Model.State.clipRect()(&v96);
    if (v96.value.style == SwiftUI_RoundedCornerStyle_unknownDefault)
      goto LABEL_5;
    width = v96.value.rect.size.width;
    height = v96.value.rect.size.height;
    y = v96.value.rect.origin.y;
    x = v96.value.rect.origin.x;
    v36 = *((_OWORD *)a9 + 9);
    *(_OWORD *)&v95[16] = *((_OWORD *)a9 + 8);
    *(_OWORD *)&v95[32] = v36;
    *(_OWORD *)&v95[48] = *((_OWORD *)a9 + 10);
    v37 = *((_OWORD *)a9 + 5);
    v92 = *(float64x2_t *)(a9 + 8);
    v93 = v37;
    v38 = *((_OWORD *)a9 + 7);
    v94 = *((_OWORD *)a9 + 6);
    *(_OWORD *)v95 = v38;
    v39 = *((_OWORD *)a9 + 1);
    v88 = *(_OWORD *)a9;
    v89 = v39;
    v40 = *((_OWORD *)a9 + 3);
    v90 = *((_OWORD *)a9 + 2);
    v91 = v40;
    DisplayList.ViewUpdater.Model.State.clipRect()(&v87);
    if (v87.value.style == SwiftUI_RoundedCornerStyle_unknownDefault)
    {
LABEL_5:
      v19 = 0.0;
      v20 = 0.0;
      v21 = 0.0;
      width = a2;
      height = a3;
      v18 = 0.0;
    }
    else
    {
      a4 = v87.value.rect.size.width;
      a5 = v87.value.rect.size.height;
      v21 = y;
      v20 = x;
      v41.f64[0] = x;
      v41.f64[1] = y;
      v18 = v87.value.rect.origin.x;
      v83 = vaddq_f64(v83, v41);
      v85 = vaddq_f64(v85, (float64x2_t)v87.value.rect.origin);
      v19 = v87.value.rect.origin.y;
    }
  }
  else
  {
    v19 = 0.0;
    v20 = 0.0;
    v21 = 0.0;
    width = a2;
    height = a3;
  }
  v81 = v18;
  v101.origin.x = v18;
  v101.origin.y = v19;
  v101.size.width = a4;
  v101.size.height = a5;
  v42 = width;
  v43 = height;
  v44 = CGRectEqualToRect(v101, *(CGRect *)&v20);
  if (v44)
  {
    if ((v17 & 4) == 0)
    {
      v45 = v85;
      if (v85.f64[0] == v83.f64[0])
      {
        v46 = (int32x4_t)vceqq_f64(v85, v83);
        *(int32x2_t *)v46.i8 = vmovn_s64((int64x2_t)v46);
        if ((vmovn_s32(v46).i8[2] & 1) != 0)
        {
          v47 = 0;
          goto LABEL_23;
        }
      }
      goto LABEL_22;
    }
    return 0;
  }
  v48 = *(unsigned __int8 *)(a1 + 16);
  if ((v48 - 13) < 3)
    return 2;
  v49 = (void *)objc_opt_self();
  v50 = objc_msgSend(v49, sel_valueWithRect_, v81, v19, a4, a5);
  v51 = *(Class *)a1;
  v52._countAndFlagsBits = 0x73646E756F62;
  v52._object = (void *)0xE600000000000000;
  v98.super.isa = *(Class *)a1;
  *(_QWORD *)&v98._attr.refcount = 1;
  DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v50, v52, v98, v53);

  if (v48 != 12)
  {
LABEL_18:
    if ((v17 & 4) == 0)
    {
      v45 = v85;
      if (v85.f64[0] == v83.f64[0])
      {
        v60 = (int32x4_t)vceqq_f64(v85, v83);
        *(int32x2_t *)v60.i8 = vmovn_s64((int64x2_t)v60);
        if ((vmovn_s32(v60).i8[2] & 1) != 0)
        {
          v47 = 1;
          goto LABEL_23;
        }
      }
LABEL_22:
      v47 = !v44;
      v61 = objc_msgSend((id)objc_opt_self(), sel_valueWithPoint_, *(_OWORD *)&v45);
      v99.super.isa = *(Class *)a1;
      v62._countAndFlagsBits = 0x6E6F697469736F70;
      v62._object = (void *)0xE800000000000000;
      *(_QWORD *)&v99._attr.refcount = 1;
      DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v61, v62, v99, v63);

LABEL_23:
      v64 = a9[4];
      v65 = a9[5];
      v66 = a9[6];
      v67 = a9[7];
      v68 = (CGSize)*((_OWORD *)a7 + 3);
      v96.value.rect.origin = (CGPoint)*((_OWORD *)a7 + 2);
      v96.value.rect.size = v68;
      v96.value.cornerSize.width = 0.0;
      v96.value.cornerSize.height = 0.0;
      v87.value.rect.origin.x = v64;
      v87.value.rect.origin.y = v65;
      v87.value.rect.size.width = v66;
      v87.value.rect.size.height = v67;
      v87.value.cornerSize.width = 0.0;
      v87.value.cornerSize.height = 0.0;
      if ((static CGAffineTransform.== infix(_:_:)() & 1) == 0)
      {
        m.a = v64;
        m.b = v65;
        m.c = v66;
        m.d = v67;
        m.tx = 0.0;
        m.ty = 0.0;
        CATransform3DMakeAffineTransform((CATransform3D *)&v88, &m);
        v84 = v89;
        v86 = v88;
        v79 = v91;
        v82 = v90;
        v76 = v93;
        v77 = v92;
        v75 = v94;
        v69 = *(_QWORD *)v95;
        v70 = *(_QWORD *)&v95[8];
        v71 = (void *)objc_opt_self();
        v88 = v86;
        v89 = v84;
        v90 = v82;
        v91 = v79;
        v92 = v77;
        v93 = v76;
        v94 = v75;
        *(_QWORD *)v95 = v69;
        *(_QWORD *)&v95[8] = v70;
        v72 = objc_msgSend(v71, sel_valueWithCATransform3D_, &v88);
        v100.super.isa = *(Class *)a1;
        v73._countAndFlagsBits = 0x726F66736E617274;
        v73._object = (void *)0xE90000000000006DLL;
        *(_QWORD *)&v100._attr.refcount = 1;
        DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v72, v73, v100, v74);

      }
      return v47;
    }
    return 1;
  }
  v54 = objc_msgSend(v49, sel_valueWithRect_, v81, v19, a4, a5);
  result = (uint64_t)-[objc_class mask](v51, sel_mask);
  if (result)
  {
    v58 = (void *)result;
    v59._countAndFlagsBits = 0x73646E756F62;
    v59._object = (void *)0xE600000000000000;
    v56.super.isa = (Class)result;
    *(_QWORD *)&v56._attr.refcount = 1;
    DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v54, v59, v56, v57);

    goto LABEL_18;
  }
  __break(1u);
  return result;
}

uint64_t DisplayList.ViewUpdater.Platform.updateShadowAsync(layer:oldState:oldItem:newState:newItem:boundsChanged:)(uint64_t a1, _QWORD *a2, double *a3, uint64_t a4, double *a5, char a6)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  char v21;
  __int128 v22;
  float v23;
  float v24;
  uint64_t v25;
  int v26;
  float v27;
  uint64_t v28;
  int v29;
  unsigned __int8 v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  unsigned __int8 v35;
  unsigned int v36;
  char v37;
  uint64_t v38;
  int v39;
  unsigned __int8 v40;
  __int128 v41;
  uint64_t v42;
  int v43;
  unsigned __int8 v44;
  __int128 v45;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  double v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  int v59;
  char v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  int v64;
  char v65;
  __int128 v66;
  __int128 v67;
  void (*v68)(__int128 *, ValueMetadata *, _UNKNOWN **);
  id v69;
  id v70;
  uint64_t ObjectType;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  _BYTE v84[54];
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  _OWORD v91[2];
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  _BYTE v96[54];
  __int128 v97;
  __int128 v98;
  char v99;
  __int128 v100;
  __int128 v101;
  char v102;
  uint64_t v103;

  v103 = *MEMORY[0x24BDAC8D0];
  v7 = a2[12];
  v8 = *(_QWORD *)(a4 + 96);
  if (!v7)
  {
    if (!v8)
    {
LABEL_14:
      v37 = 1;
      return v37 & 1;
    }
LABEL_13:
    v37 = 0;
    return v37 & 1;
  }
  if (!v8)
    goto LABEL_13;
  v10 = a3[2];
  v11 = a3[3];
  v78 = *((_QWORD *)a3 + 6);
  v12 = a5[2];
  v13 = a5[3];
  v75 = *((_QWORD *)a5 + 5);
  v76 = *((_QWORD *)a5 + 6);
  v77 = *((_QWORD *)a3 + 5);
  v14 = *v6;
  if ((a6 & 1) == 0)
  {
    swift_beginAccess();
    v15 = *(_QWORD *)(v8 + 48);
    v16 = *(_DWORD *)(v8 + 56);
    v17 = *(_BYTE *)(v8 + 60);
    v18 = *(_OWORD *)(v8 + 32);
    v92 = *(_OWORD *)(v8 + 16);
    v93 = v18;
    *(_QWORD *)&v94 = v15;
    DWORD2(v94) = v16;
    BYTE12(v94) = v17;
    swift_beginAccess();
    v19 = *(_QWORD *)(v7 + 48);
    v20 = *(_DWORD *)(v7 + 56);
    v21 = *(_BYTE *)(v7 + 60);
    v22 = *(_OWORD *)(v7 + 32);
    v85 = *(_OWORD *)(v7 + 16);
    v86 = v22;
    *(_QWORD *)&v87 = v19;
    DWORD2(v87) = v20;
    BYTE12(v87) = v21;
    if (specialized static ResolvedShadowStyle.== infix(_:_:)((uint64_t)&v92, (uint64_t)&v85))
      goto LABEL_14;
  }
  if (!*(_BYTE *)(a1 + 16))
  {
    swift_retain_n();
    swift_retain_n();
LABEL_17:
    swift_beginAccess();
    v38 = *(_QWORD *)(v7 + 48);
    v39 = *(_DWORD *)(v7 + 56);
    v40 = *(_BYTE *)(v7 + 60);
    v41 = *(_OWORD *)(v7 + 32);
    v92 = *(_OWORD *)(v7 + 16);
    v93 = v41;
    *(_QWORD *)&v94 = v38;
    WORD6(v94) = v40;
    DWORD2(v94) = v39;
    swift_beginAccess();
    v42 = *(_QWORD *)(v8 + 48);
    v43 = *(_DWORD *)(v8 + 56);
    v44 = *(_BYTE *)(v8 + 60);
    v45 = *(_OWORD *)(v8 + 32);
    v85 = *(_OWORD *)(v8 + 16);
    v86 = v45;
    *(_QWORD *)&v87 = v42;
    WORD6(v87) = v44;
    DWORD2(v87) = v43;
    v37 = DisplayList.ViewUpdater.AsyncLayer.updateShadowStyle(oldShadow:newShadow:)((uint64_t)&v92, (double *)&v85);
    swift_release_n();
    swift_release_n();
    return v37 & 1;
  }
  if (v78 >> 62 || v76 >> 62)
  {
    swift_retain_n();
    swift_retain_n();
    outlined copy of DisplayList.Item.Value(v77, v78);
    outlined copy of DisplayList.Item.Value(v75, v76);
    outlined consume of DisplayList.Item.Value(v77, v78);
    outlined consume of DisplayList.Item.Value(v75, v76);
    goto LABEL_17;
  }
  if (v77 >> 60 == 4)
  {
    v47 = *(_OWORD *)(v77 + 32);
    v100 = *(_OWORD *)(v77 + 16);
    v101 = v47;
    v102 = *(_BYTE *)(v77 + 48);
    if (v75 >> 60 == 4)
    {
      v48 = *(_QWORD *)((v77 & 0xFFFFFFFFFFFFFFFLL) + 0x38);
      v49 = *(_OWORD *)(v75 + 32);
      v97 = *(_OWORD *)(v75 + 16);
      v98 = v49;
      v99 = *(_BYTE *)(v75 + 48);
      v72 = v48;
      v73 = *(_QWORD *)(v75 + 56);
      ObjectType = swift_getObjectType();
      v50 = *(double *)(*a2 + 24);
      outlined copy of DisplayList.Item.Value(v77, v78);
      outlined copy of DisplayList.Item.Value(v75, v76);
      swift_retain();
      swift_retain();
      outlined copy of DisplayList.Item.Value(v77, v78);
      outlined copy of DisplayList.Item.Value(v75, v76);
      swift_retain();
      swift_retain();
      outlined copy of DisplayList.Item.Value(v77, v78);
      outlined copy of DisplayList.Item.Value(v75, v76);
      outlined retain of Path.Storage((uint64_t)&v100, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
      outlined retain of Path.Storage((uint64_t)&v97, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
      swift_retain();
      swift_retain();
      v51 = specialized static ShapeLayerHelper.makeLayerBounds(size:path:layerType:contentsScale:)(v10, v11, v50, (uint64_t)&v100, ObjectType);
      v53 = v52;
      v54 = specialized static ShapeLayerHelper.makeLayerBounds(size:path:layerType:contentsScale:)(v12, v13, *(double *)(*a2 + 24), (uint64_t)&v97, ObjectType);
      v56 = v55;
      v57 = *(void **)a1;
      swift_beginAccess();
      v58 = *(_QWORD *)(v7 + 48);
      v59 = *(_DWORD *)(v7 + 56);
      v60 = *(_BYTE *)(v7 + 60);
      *(_QWORD *)&v80 = v14;
      *((_QWORD *)&v80 + 1) = v57;
      v62 = *(_OWORD *)(v7 + 16);
      v61 = *(_OWORD *)(v7 + 32);
      LOBYTE(v83) = v102;
      v82 = v101;
      v81 = v100;
      *((double *)&v83 + 1) = v51;
      *(_QWORD *)v84 = v53;
      *(_OWORD *)&v84[8] = v62;
      *(_OWORD *)&v84[24] = v61;
      *(_QWORD *)&v84[40] = v58;
      *(_DWORD *)&v84[48] = v59;
      v84[52] = v60;
      v84[53] = 0;
      swift_beginAccess();
      v63 = *(_QWORD *)(v8 + 48);
      v64 = *(_DWORD *)(v8 + 56);
      v65 = *(_BYTE *)(v8 + 60);
      *(_QWORD *)&v92 = v14;
      *((_QWORD *)&v92 + 1) = v57;
      v67 = *(_OWORD *)(v8 + 16);
      v66 = *(_OWORD *)(v8 + 32);
      LOBYTE(v95) = v99;
      v93 = v97;
      v94 = v98;
      *((double *)&v95 + 1) = v54;
      *(_QWORD *)v96 = v56;
      *(_OWORD *)&v96[8] = v67;
      *(_OWORD *)&v96[24] = v66;
      *(_QWORD *)&v96[40] = v63;
      *(_DWORD *)&v96[48] = v64;
      v96[52] = v65;
      v96[53] = 0;
      *(_QWORD *)&v85 = a1;
      *((_QWORD *)&v85 + 1) = &v80;
      *(_QWORD *)&v86 = &v92;
      *((_QWORD *)&v86 + 1) = v73;
      LOBYTE(v87) = 0;
      v68 = *(void (**)(__int128 *, ValueMetadata *, _UNKNOWN **))(*(_QWORD *)v72 + 136);
      v69 = v57;
      outlined retain of Path.Storage((uint64_t)&v100, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
      outlined retain of Path.Storage((uint64_t)&v97, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
      swift_retain();
      v70 = v69;
      v68(&v85, &type metadata for ShapeLayerAsyncShadowHelper, &protocol witness table for ShapeLayerAsyncShadowHelper);
      v37 = v87;
      swift_release();
      swift_release();
      swift_release();
      outlined consume of DisplayList.Item.Value(v77, v78);
      outlined consume of DisplayList.Item.Value(v75, v76);
      outlined retain of Path.Storage((uint64_t)&v100, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
      outlined retain of Path.Storage((uint64_t)&v97, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
      swift_release();
      swift_release();
      outlined consume of DisplayList.Item.Value(v77, v78);
      outlined consume of DisplayList.Item.Value(v75, v76);
      swift_release();
      swift_release();
      v89 = *(_OWORD *)v96;
      v90 = *(_OWORD *)&v96[16];
      v91[0] = *(_OWORD *)&v96[32];
      v85 = v92;
      v86 = v93;
      v87 = v94;
      *(_QWORD *)((char *)v91 + 14) = *(_QWORD *)&v96[46];
      v88 = v95;
      outlined release of ShapeLayerShadowHelper((uint64_t)&v85);
      *(_OWORD *)v96 = *(_OWORD *)v84;
      *(_OWORD *)&v96[16] = *(_OWORD *)&v84[16];
      *(_OWORD *)&v96[32] = *(_OWORD *)&v84[32];
      *(_QWORD *)&v96[46] = *(_QWORD *)&v84[46];
      v92 = v80;
      v93 = v81;
      v94 = v82;
      v95 = v83;
      outlined release of ShapeLayerShadowHelper((uint64_t)&v92);
      outlined consume of DisplayList.Content.Value(v77);
      outlined consume of DisplayList.Content.Value(v75);
      return v37 & 1;
    }
    goto LABEL_22;
  }
  if (v77 >> 60 != 1 || v75 >> 60 != 1)
  {
LABEL_22:
    swift_retain();
    swift_retain();
    outlined copy of DisplayList.Item.Value(v77, v78);
    outlined copy of DisplayList.Item.Value(v75, v76);
    swift_retain();
    swift_retain();
    outlined copy of DisplayList.Item.Value(v77, v78);
    outlined copy of DisplayList.Item.Value(v75, v76);
    outlined consume of DisplayList.Item.Value(v77, v78);
    outlined consume of DisplayList.Item.Value(v75, v76);
    outlined consume of DisplayList.Content.Value(v77);
    outlined consume of DisplayList.Content.Value(v75);
    goto LABEL_17;
  }
  v23 = *(float *)(v77 + 28);
  v24 = *(float *)(v75 + 28);
  swift_beginAccess();
  v25 = *(_QWORD *)(v7 + 16);
  v26 = *(_DWORD *)(v7 + 24);
  v27 = *(float *)(v7 + 28);
  v74 = *(_OWORD *)(v7 + 32);
  v28 = *(_QWORD *)(v7 + 48);
  v29 = *(_DWORD *)(v7 + 56);
  v30 = *(_BYTE *)(v7 + 60);
  swift_beginAccess();
  v31 = *(_QWORD *)(v8 + 16);
  v32 = *(_DWORD *)(v8 + 24);
  v33 = *(_QWORD *)(v8 + 48);
  v34 = *(_DWORD *)(v8 + 56);
  v35 = *(_BYTE *)(v8 + 60);
  *(float *)&v36 = v24 * *(float *)(v8 + 28);
  *(_QWORD *)&v92 = v25;
  DWORD2(v92) = v26;
  *((float *)&v92 + 3) = v23 * v27;
  v93 = v74;
  *(_QWORD *)&v94 = v28;
  WORD6(v94) = v30;
  DWORD2(v94) = v29;
  *(_QWORD *)&v85 = v31;
  *((_QWORD *)&v85 + 1) = __PAIR64__(v36, v32);
  v86 = *(_OWORD *)(v8 + 32);
  *(_QWORD *)&v87 = v33;
  WORD6(v87) = v35;
  DWORD2(v87) = v34;
  outlined copy of DisplayList.Item.Value(v77, v78);
  outlined copy of DisplayList.Item.Value(v75, v76);
  swift_retain();
  swift_retain();
  outlined copy of DisplayList.Item.Value(v77, v78);
  outlined copy of DisplayList.Item.Value(v75, v76);
  v37 = DisplayList.ViewUpdater.AsyncLayer.updateShadowStyle(oldShadow:newShadow:)((uint64_t)&v92, (double *)&v85);
  outlined consume of DisplayList.Item.Value(v77, v78);
  outlined consume of DisplayList.Item.Value(v75, v76);
  swift_release();
  swift_release();
  outlined consume of DisplayList.Content.Value(v77);
  outlined consume of DisplayList.Content.Value(v75);
  return v37 & 1;
}

unint64_t lazy protocol witness table accessor for type PlatformViewDefinition.System and conformance PlatformViewDefinition.System()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformViewDefinition.System and conformance PlatformViewDefinition.System;
  if (!lazy protocol witness table cache variable for type PlatformViewDefinition.System and conformance PlatformViewDefinition.System)
  {
    result = MEMORY[0x23B7C9C04]("az;\x1Bpe\n", &type metadata for PlatformViewDefinition.System);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewDefinition.System and conformance PlatformViewDefinition.System);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatformViewDefinition.ViewKind and conformance PlatformViewDefinition.ViewKind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformViewDefinition.ViewKind and conformance PlatformViewDefinition.ViewKind;
  if (!lazy protocol witness table cache variable for type PlatformViewDefinition.ViewKind and conformance PlatformViewDefinition.ViewKind)
  {
    result = MEMORY[0x23B7C9C04]("9z;\x1Bde\n", &type metadata for PlatformViewDefinition.ViewKind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewDefinition.ViewKind and conformance PlatformViewDefinition.ViewKind);
  }
  return result;
}

uint64_t type metadata accessor for PlatformViewDefinition()
{
  return objc_opt_self();
}

uint64_t method lookup function for PlatformViewDefinition()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of static PlatformViewDefinition.system.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of static PlatformViewDefinition.makeView(kind:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of static PlatformViewDefinition.makeLayerView(type:kind:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of static PlatformViewDefinition.makePlatformView(view:kind:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of static PlatformViewDefinition.makeDrawingView(options:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of static PlatformViewDefinition.setPath(_:shapeView:)(uint64_t a1)
{
  uint64_t v1;
  char v2;
  uint64_t (*v3)(_OWORD *);
  __int128 v4;
  _OWORD v6[2];
  char v7;

  v2 = *(_BYTE *)(a1 + 32);
  v3 = *(uint64_t (**)(_OWORD *))(v1 + 120);
  v4 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v4;
  v7 = v2;
  return v3(v6);
}

uint64_t dispatch thunk of static PlatformViewDefinition.setProjectionTransform(_:projectionView:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_OWORD *);
  __int128 v4;
  __int128 v5;
  _OWORD v7[4];
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(uint64_t (**)(_OWORD *))(v1 + 128);
  v4 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v4;
  v5 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v5;
  v8 = v2;
  return v3(v7);
}

uint64_t dispatch thunk of static PlatformViewDefinition.getRBLayer(drawingView:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of static PlatformViewDefinition.setIgnoresEvents(_:of:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of static PlatformViewDefinition.setAllowsWindowActivationEvents(_:for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of static PlatformViewDefinition.setHitTestsAsOpaque(_:for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

ValueMetadata *type metadata accessor for PlatformViewDefinition.System()
{
  return &type metadata for PlatformViewDefinition.System;
}

uint64_t getEnumTagSinglePayload for PlatformViewDefinition.ViewKind(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF0)
    goto LABEL_17;
  if (a2 + 16 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 16) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 16;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 16;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 16;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x11;
  v8 = v6 - 17;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PlatformViewDefinition.ViewKind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 16 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 16) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF0)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEF)
    return ((uint64_t (*)(void))((char *)&loc_234F3AF30 + 4 * byte_2352B2CF1[v4]))();
  *a1 = a2 + 16;
  return ((uint64_t (*)(void))((char *)sub_234F3AF64 + 4 * byte_2352B2CEC[v4]))();
}

uint64_t sub_234F3AF64(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F3AF6C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234F3AF74);
  return result;
}

uint64_t sub_234F3AF80(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234F3AF88);
  *(_BYTE *)result = a2 + 16;
  return result;
}

uint64_t sub_234F3AF8C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F3AF94(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PlatformViewDefinition.ViewKind()
{
  return &type metadata for PlatformViewDefinition.ViewKind;
}

ValueMetadata *type metadata accessor for DisplayList.ViewUpdater.Platform()
{
  return &type metadata for DisplayList.ViewUpdater.Platform;
}

uint64_t specialized DisplayList.ViewUpdater.Platform.updateDrawingView(_:options:contentsScale:)(uint64_t *a1, char *a2, double a3)
{
  uint64_t *v3;
  char v5;
  int v6;
  char v7;
  int v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t ObjectType;
  void (*v17)(uint64_t *__return_ptr, uint64_t, _QWORD *);
  unsigned __int8 v18;
  int v19;
  char v20;
  int v21;
  char v22;
  void (*v23)(uint64_t *, uint64_t, _QWORD *);
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void (*v27)(uint64_t, _QWORD *, double);
  uint64_t v29;
  unsigned __int8 v31[4];
  int v32;
  char v33;
  int v34;
  char v35;
  uint64_t v36;
  char v37;
  int v38;
  char v39;

  v5 = *a2;
  v6 = *((_DWORD *)a2 + 1);
  v7 = a2[8];
  v8 = *((_DWORD *)a2 + 3);
  v9 = a2[16];
  v10 = *v3;
  v11 = *a1;
  swift_getObjectType();
  v12 = swift_conformsToProtocol2();
  if (v12)
    v13 = (_QWORD *)v12;
  else
    v13 = 0;
  if (v12)
    v14 = v11;
  else
    v14 = 0;
  v29 = v10;
  if (!v14)
  {
    swift_unknownObjectRelease();
    LOBYTE(v36) = v5;
    HIDWORD(v36) = v6;
    v37 = v7;
    v38 = v8;
    v39 = v9;
    v14 = (*(uint64_t (**)(uint64_t *))((v10 & 0xFFFFFFFFFFFFFFFCLL) + 112))(&v36);
    v13 = v15;
  }
  ObjectType = swift_getObjectType();
  v17 = (void (*)(uint64_t *__return_ptr, uint64_t, _QWORD *))v13[1];
  swift_unknownObjectRetain();
  v17(&v36, ObjectType, v13);
  swift_unknownObjectRelease();
  v18 = v36;
  v19 = HIDWORD(v36);
  v20 = v37;
  v21 = v38;
  v22 = v39;
  LOBYTE(v36) = v5;
  HIDWORD(v36) = v6;
  v37 = v7;
  v38 = v8;
  v39 = v9;
  v31[0] = v18;
  v32 = v19;
  v33 = v20;
  v34 = v21;
  v35 = v22;
  if (!specialized static RasterizationOptions.== infix(_:_:)((unsigned __int8 *)&v36, v31))
  {
    LOBYTE(v36) = v5;
    HIDWORD(v36) = v6;
    v37 = v7;
    v38 = v8;
    v39 = v9;
    if (((((v8 & 1) == 0) ^ v21) & 1) != 0)
    {
      v23 = (void (*)(uint64_t *, uint64_t, _QWORD *))v13[2];
      swift_unknownObjectRetain();
      v23(&v36, ObjectType, v13);
      swift_unknownObjectRelease();
    }
    else
    {
      v24 = (*(uint64_t (**)(uint64_t *))((v29 & 0xFFFFFFFFFFFFFFFCLL) + 112))(&v36);
      v13 = v25;
      swift_unknownObjectRelease();
      v14 = v24;
    }
  }
  v26 = swift_getObjectType();
  v27 = (void (*)(uint64_t, _QWORD *, double))v13[7];
  swift_unknownObjectRetain();
  v27(v26, v13, a3);
  swift_unknownObjectRelease();
  *a1 = v14;
  return v14;
}

uint64_t outlined release of ShapeLayerShadowHelper(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_BYTE *)(a1 + 48);

  outlined consume of Path.Storage(v2, v3, v4, v5, v6);
  return a1;
}

uint64_t sub_234F3B234()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_234F3B258()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DisplayList.ViewUpdater.Platform.updateItemView(_:index:item:state:)(double a1, double a2)
{
  uint64_t v2;

  return closure #1 in DisplayList.ViewUpdater.Platform.updateItemView(_:index:item:state:)(*(_QWORD **)(v2 + 16), *(_QWORD *)(v2 + 24), a1, a2, *(double *)(v2 + 40), *(double *)(v2 + 48));
}

unint64_t type metadata accessor for CABackdropLayer()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CABackdropLayer;
  if (!lazy cache variable for type metadata for CABackdropLayer)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CABackdropLayer);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DisplayList.ViewUpdater.Platform.State(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xF0 && *(_BYTE *)(a1 + 34))
    return (*(_DWORD *)a1 + 240);
  v3 = *(unsigned __int8 *)(a1 + 32);
  v4 = v3 >= 0x11;
  v5 = v3 - 17;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for DisplayList.ViewUpdater.Platform.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xEF)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_WORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 240;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xF0)
      *(_BYTE *)(result + 34) = 1;
  }
  else
  {
    if (a3 >= 0xF0)
      *(_BYTE *)(result + 34) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = a2 + 16;
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.ViewUpdater.Platform.State()
{
  return &type metadata for DisplayList.ViewUpdater.Platform.State;
}

ValueMetadata *type metadata accessor for DisplayList.ViewUpdater.Platform.ViewFlags()
{
  return &type metadata for DisplayList.ViewUpdater.Platform.ViewFlags;
}

unint64_t lazy protocol witness table accessor for type DisplayList.ViewUpdater.Platform.ViewFlags and conformance DisplayList.ViewUpdater.Platform.ViewFlags()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayList.ViewUpdater.Platform.ViewFlags and conformance DisplayList.ViewUpdater.Platform.ViewFlags;
  if (!lazy protocol witness table cache variable for type DisplayList.ViewUpdater.Platform.ViewFlags and conformance DisplayList.ViewUpdater.Platform.ViewFlags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DisplayList.ViewUpdater.Platform.ViewFlags, &type metadata for DisplayList.ViewUpdater.Platform.ViewFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.ViewUpdater.Platform.ViewFlags and conformance DisplayList.ViewUpdater.Platform.ViewFlags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayList.ViewUpdater.Platform.ViewFlags and conformance DisplayList.ViewUpdater.Platform.ViewFlags;
  if (!lazy protocol witness table cache variable for type DisplayList.ViewUpdater.Platform.ViewFlags and conformance DisplayList.ViewUpdater.Platform.ViewFlags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DisplayList.ViewUpdater.Platform.ViewFlags, &type metadata for DisplayList.ViewUpdater.Platform.ViewFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.ViewUpdater.Platform.ViewFlags and conformance DisplayList.ViewUpdater.Platform.ViewFlags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayList.ViewUpdater.Platform.ViewFlags and conformance DisplayList.ViewUpdater.Platform.ViewFlags;
  if (!lazy protocol witness table cache variable for type DisplayList.ViewUpdater.Platform.ViewFlags and conformance DisplayList.ViewUpdater.Platform.ViewFlags)
  {
    result = MEMORY[0x23B7C9C04]("\ty;\x1BXd\n", &type metadata for DisplayList.ViewUpdater.Platform.ViewFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.ViewUpdater.Platform.ViewFlags and conformance DisplayList.ViewUpdater.Platform.ViewFlags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayList.ViewUpdater.Platform.ViewFlags and conformance DisplayList.ViewUpdater.Platform.ViewFlags;
  if (!lazy protocol witness table cache variable for type DisplayList.ViewUpdater.Platform.ViewFlags and conformance DisplayList.ViewUpdater.Platform.ViewFlags)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DisplayList.ViewUpdater.Platform.ViewFlags, &type metadata for DisplayList.ViewUpdater.Platform.ViewFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.ViewUpdater.Platform.ViewFlags and conformance DisplayList.ViewUpdater.Platform.ViewFlags);
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.ViewUpdater.Model()
{
  return &type metadata for DisplayList.ViewUpdater.Model;
}

uint64_t initializeWithCopy for DisplayList.ViewUpdater.Model.Clip(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  outlined copy of Path.Storage(*(_QWORD *)a2, v5, v6, v7, v8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_WORD *)(a1 + 89) = *(_WORD *)(a2 + 89);
  return a1;
}

uint64_t assignWithCopy for DisplayList.ViewUpdater.Model.Clip(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  outlined copy of Path.Storage(*(_QWORD *)a2, v5, v6, v7, v8);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v13 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v8;
  outlined consume of Path.Storage(v9, v10, v11, v12, v13);
  v14 = *(_OWORD *)(a2 + 40);
  v15 = *(_OWORD *)(a2 + 56);
  v16 = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v16;
  *(_OWORD *)(a1 + 56) = v15;
  *(_OWORD *)(a1 + 40) = v14;
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  *(_BYTE *)(a1 + 90) = *(_BYTE *)(a2 + 90);
  return a1;
}

__n128 __swift_memcpy91_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 75) = *(_OWORD *)(a2 + 75);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for DisplayList.ViewUpdater.Model.Clip(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  unsigned __int8 v10;

  v4 = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  v10 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v4;
  outlined consume of Path.Storage(v5, v6, v7, v8, v10);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  *(_BYTE *)(a1 + 90) = *(_BYTE *)(a2 + 90);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayList.ViewUpdater.Model.Clip(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 91))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 89);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for DisplayList.ViewUpdater.Model.Clip(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 90) = 0;
    *(_WORD *)(result + 88) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 91) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 91) = 0;
    if (a2)
      *(_BYTE *)(result + 89) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.ViewUpdater.Model.Clip()
{
  return &type metadata for DisplayList.ViewUpdater.Model.Clip;
}

Swift::Void __swiftcall DisplayList.ViewUpdater.Model.State.reset()()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;

  *(_DWORD *)(v0 + 8) = 1065353216;
  if (one-time initialization token for normal != -1)
    swift_once();
  v1 = static GraphicsBlendMode.normal;
  v2 = byte_254266040;
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_BYTE *)(v0 + 24);
  outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_254266040);
  outlined consume of GraphicsBlendMode(v3, v4);
  *(_QWORD *)(v0 + 16) = v1;
  *(_BYTE *)(v0 + 24) = v2;
  *(_QWORD *)(v0 + 32) = 0x3FF0000000000000;
  *(_QWORD *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 56) = 0x3FF0000000000000;
  *(_QWORD *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 72) = 0;
  swift_bridgeObjectRelease();
  v5 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 80) = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 88) = v5;
  swift_release();
  *(_QWORD *)(v0 + 96) = 0;
  *(_BYTE *)(v0 + 104) = 0;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 112) = v5;
  *(_OWORD *)(v0 + 120) = 0u;
  *(_OWORD *)(v0 + 136) = 0u;
  *(_OWORD *)(v0 + 152) = 0u;
  *(_QWORD *)(v0 + 168) = 0;
}

BOOL DisplayList.ViewUpdater.Model.State.hasDODEffects.getter()
{
  uint64_t v0;
  _BOOL8 result;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned int v6;

  if (*(_QWORD *)(v0 + 96))
    return 1;
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3)
    return 0;
  LOBYTE(result) = 0;
  v4 = (unsigned __int8 *)(v2 + 148);
  v5 = 1;
  do
  {
    if (result)
    {
LABEL_7:
      result = 1;
      if (v3 == v5)
        return result;
      goto LABEL_14;
    }
    v6 = *v4;
    if (v6 >= 2)
    {
      if (v6 == 2)
        goto LABEL_7;
      result = 0;
      if (v3 == v5)
        return result;
    }
    else
    {
      result = (*(_QWORD *)(v4 - 108) & 1) == 0;
      if (v3 == v5)
        return result;
    }
LABEL_14:
    v4 += 120;
  }
  while (!__OFADD__(v5++, 1));
  __break(1u);
  return 0;
}

void __swiftcall DisplayList.ViewUpdater.Model.State.clipRect()(SwiftUI::FixedRoundedRect_optional *__return_ptr retstr)
{
  uint64_t v1;
  int8x16_t v2;
  int8x16_t v3;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  __int128 v9;
  CGFloat v10;
  CGPoint v11;
  int v12;
  double v13;
  double v14;
  SwiftUI::RoundedCornerStyle v15;
  CGFloat v16;
  CGFloat v17;
  _BOOL4 v18;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat tx;
  CGFloat ty;
  CGFloat v27;
  CGFloat x;
  CGFloat y;
  CGFloat v30;
  CGFloat height;
  CGFloat width;
  int8x16_t v33;
  int8x16_t v34;
  CGSize v35;
  float64x2_t v36;
  int8x16_t v37;
  CGPoint rect;
  int8x16_t rect_16;
  int8x16_t v40;
  CGAffineTransform v41;
  CGAffineTransform v42;
  CGSize v43;
  CGRect v44;
  CGRect v45;

  v5 = *(_QWORD *)(v1 + 80);
  if (*(_QWORD *)(v5 + 16) != 1 || *(_BYTE *)(v5 + 120) != 1)
    goto LABEL_21;
  v6 = *(double *)(v1 + 32);
  v7 = *(double *)(v1 + 40);
  v8 = *(double *)(v1 + 48);
  v9 = *(_OWORD *)(v1 + 56);
  v10 = *(double *)(v1 + 72);
  v11 = *(CGPoint *)(v5 + 32);
  v12 = *(unsigned __int8 *)(v5 + 64);
  if (v12 == 2)
  {
    v16 = *(double *)(*(_QWORD *)&v11.x + 32);
    v17 = *(double *)(*(_QWORD *)&v11.x + 40);
    v2.i64[0] = *(_QWORD *)(*(_QWORD *)&v11.x + 48);
    v3.i64[0] = *(_QWORD *)(*(_QWORD *)&v11.x + 56);
    v15 = *(_BYTE *)(*(_QWORD *)&v11.x + 64);
    v11 = *(CGPoint *)(*(_QWORD *)&v11.x + 16);
  }
  else
  {
    v14 = *(double *)(v5 + 48);
    v13 = *(double *)(v5 + 56);
    if (v12 != 1)
    {
      if (!v12)
      {
        v15 = SwiftUI_RoundedCornerStyle_circular;
        v16 = v14;
        v17 = v13;
        v2.i64[0] = 0;
        v3.i64[0] = 0;
        goto LABEL_10;
      }
LABEL_21:
      retstr->value.rect.size = 0u;
      retstr->value.cornerSize = 0u;
      retstr->value.rect.origin = 0u;
      retstr->value.style = SwiftUI_RoundedCornerStyle_unknownDefault;
      return;
    }
    v16 = v14;
    v17 = v13;
    if (v14 != v13)
      goto LABEL_21;
    v15 = SwiftUI_RoundedCornerStyle_circular;
    *(double *)v2.i64 = v14 * 0.5;
    *(double *)v3.i64 = v14 * 0.5;
  }
LABEL_10:
  v18 = v6 == 0.0;
  if (*(double *)&v9 != 0.0)
    v18 = 0;
  if ((v8 != 0.0 || v7 != 0.0) && !v18)
    goto LABEL_21;
  rect_16 = v3;
  v40 = v2;
  v42.a = v6;
  v42.b = v7;
  v42.c = v8;
  *(_OWORD *)&v42.d = v9;
  v42.ty = v10;
  rect = v11;
  CGAffineTransformInvert(&v41, &v42);
  a = v41.a;
  b = v41.b;
  c = v41.c;
  d = v41.d;
  tx = v41.tx;
  ty = v41.ty;
  v44.origin = rect;
  v42 = v41;
  v44.size.width = v16;
  v44.size.height = v17;
  v45 = CGRectApplyAffineTransform(v44, &v42);
  v27 = *(double *)v40.i64;
  x = v45.origin.x;
  y = v45.origin.y;
  if ((~v40.i64[0] & 0x7FF0000000000000) != 0)
  {
    v30 = *(double *)rect_16.i64;
    if ((~rect_16.i64[0] & 0x7FF0000000000000) != 0)
    {
      v42.a = a;
      v42.b = b;
      v42.c = c;
      v42.d = d;
      v42.tx = tx;
      v42.ty = ty;
      height = v45.size.height;
      *(_QWORD *)&v43.width = v40.i64[0];
      *(_QWORD *)&v43.height = rect_16.i64[0];
      width = v45.size.width;
      v35 = CGSizeApplyAffineTransform(v43, &v42);
      *(CGFloat *)v34.i64 = v35.height;
      *(CGFloat *)v33.i64 = v35.width;
      v36.f64[0] = NAN;
      v36.f64[1] = NAN;
      v37 = (int8x16_t)vnegq_f64(v36);
      *(_QWORD *)&v27 = vbslq_s8(v37, v33, v40).u64[0];
      v45.size.height = height;
      *(_QWORD *)&v30 = vbslq_s8(v37, v34, rect_16).u64[0];
      v45.size.width = width;
    }
  }
  else
  {
    v30 = *(double *)rect_16.i64;
  }
  retstr->value.rect.origin.x = x;
  retstr->value.rect.origin.y = y;
  retstr->value.rect.size.width = v45.size.width;
  retstr->value.rect.size.height = v45.size.height;
  retstr->value.cornerSize.width = v27;
  retstr->value.cornerSize.height = v30;
  retstr->value.style = v15;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance DisplayList.ViewUpdater.Model.Clip(_BYTE *a1, unsigned __int8 *a2)
{
  char v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  char v10;
  _BYTE v12[40];
  _BYTE v13[40];

  outlined init with take of Path.Storage((uint64_t)a1, (uint64_t)v12);
  v4 = a1[88];
  v5 = a1[89];
  v6 = a1[90];
  outlined init with take of Path.Storage((uint64_t)a2, (uint64_t)v13);
  v7 = a2[88];
  v8 = a2[89];
  v9 = a2[90];
  specialized static Path.Storage.== infix(_:_:)((uint64_t)v12);
  if ((v10 & 1) == 0)
    return 0;
  if ((v4 & 1) == 0)
  {
    if ((v7 & 1) != 0 || (static CGAffineTransform.== infix(_:_:)() & 1) == 0)
      return 0;
    return (v5 ^ v8 | v6 ^ v9) ^ 1u;
  }
  if (v7)
    return (v5 ^ v8 | v6 ^ v9) ^ 1u;
  return 0;
}

uint64_t DisplayList.Item.rewriteVibrancyFilterAsBackdrop(matrix:list:)(__int128 *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char v20;
  __int16 v21;
  __int16 v22;

  v3 = v2;
  v18 = a1[1];
  v19 = *a1;
  v16 = a1[3];
  v17 = a1[2];
  v4 = *((_QWORD *)a1 + 8);
  v5 = *((_QWORD *)a1 + 9);
  v6 = *a2;
  v20 = *((_BYTE *)a2 + 10);
  v21 = *((_WORD *)a2 + 4);
  v7 = swift_allocObject();
  *(_DWORD *)(v7 + 16) = 1065353216;
  *(_QWORD *)(v7 + 28) = 0;
  *(_QWORD *)(v7 + 20) = 0;
  *(_QWORD *)(v7 + 40) = MEMORY[0x24BEE4AF8];
  v8 = *(_QWORD *)(v3 + 16);
  v9 = *(_QWORD *)(v3 + 24);
  v10 = *(_QWORD *)(v3 + 32);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = v19;
  *(_OWORD *)(v11 + 32) = v18;
  *(_OWORD *)(v11 + 48) = v17;
  *(_OWORD *)(v11 + 64) = v16;
  *(_QWORD *)(v11 + 80) = v4;
  *(_QWORD *)(v11 + 88) = v5;
  *(_QWORD *)(v11 + 96) = 0;
  *(_BYTE *)(v11 + 132) = 4;
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_23527E860;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 0;
  *(_QWORD *)(v12 + 48) = v8;
  *(_QWORD *)(v12 + 56) = v9;
  *(_QWORD *)(v12 + 64) = v10;
  *(_QWORD *)(v12 + 72) = v7;
  *(_DWORD *)(v12 + 100) = 0;
  *(_QWORD *)(v12 + 80) = 0;
  *(_QWORD *)(v12 + 88) = 0;
  *(_DWORD *)(v12 + 95) = 0;
  swift_retain_n();
  DisplayList.Item.features.getter();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v6;
  *(_WORD *)(v13 + 24) = v21;
  *(_BYTE *)(v13 + 26) = v20;
  *(_DWORD *)(v13 + 28) = 0;
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_23527E860;
  *(_QWORD *)(v14 + 32) = 0;
  *(_QWORD *)(v14 + 40) = 0;
  *(_QWORD *)(v14 + 48) = v8;
  *(_QWORD *)(v14 + 56) = v9;
  *(_QWORD *)(v14 + 64) = v10;
  *(_QWORD *)(v14 + 72) = v11;
  *(_QWORD *)(v14 + 80) = 0x4000000900000000;
  *(_QWORD *)(v14 + 88) = v12;
  *(_BYTE *)(v14 + 98) = 0;
  *(_WORD *)(v14 + 96) = v22;
  *(_DWORD *)(v14 + 100) = 0;
  outlined copy of DisplayList.Effect(v11, 0, 9);
  swift_bridgeObjectRetain();
  outlined copy of DisplayList.Effect(v11, 0, 9);
  swift_bridgeObjectRetain();
  swift_release();
  DisplayList.Item.properties.getter();
  swift_release_n();
  outlined consume of DisplayList.Effect(v11, 0, 9);
  swift_bridgeObjectRelease();
  v3 += 64;
  result = outlined consume of DisplayList.Item.Value(*(_QWORD *)(v3 - 24), *(_QWORD *)(v3 - 16));
  *(_QWORD *)(v3 - 24) = v13;
  *(_QWORD *)(v3 - 16) = 0x4000000700000000;
  *(_QWORD *)(v3 - 8) = v14;
  *(_BYTE *)(v3 + 2) = v22;
  *(_WORD *)v3 = v22;
  return result;
}

uint64_t DisplayList.Item.discardContainingClips(state:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  CGFloat v4;
  __int128 v5;
  __int128 v6;
  CGFloat v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  CGFloat a;
  uint64_t v17;
  int8x16_t v18;
  unint64_t v19;
  int64_t v20;
  float64x2_t v21;
  double v22;
  char v23;
  unsigned __int8 *v24;
  int8x16_t v25;
  int v26;
  double v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  unint64_t v35;
  unint64_t v36;
  CGFloat v38;
  int8x16_t v39;
  int8x16_t v40;
  CGSize v41;
  uint64_t v42;
  double *v43;
  double v44;
  double v45;
  uint64_t v46;
  _BYTE *v47;
  double v48;
  double v49;
  CGFloat v50;
  double v51;
  double v52;
  double v53;
  double v54;
  CGFloat v55;
  CGFloat v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned __int8 v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int8 v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned __int8 v89;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned __int8 v97;
  unsigned __int8 v98;
  unsigned __int8 v99;
  unsigned __int8 v100;
  __int128 v101;
  __int128 v102;
  __int128 rect2;
  char rect2_16;
  char rect2_24;
  char rect;
  int8x16_t v107;
  uint64_t r2;
  double r2_8;
  uint64_t r2_16;
  uint64_t r2_24;
  uint64_t v112;
  int v113;
  uint64_t v114;
  unint64_t v115;
  CGFloat ty;
  CGFloat tx;
  CGFloat d;
  CGFloat c;
  CGFloat b;
  CGFloat v122;
  CGFloat v123;
  int8x16_t v124;
  double v125;
  uint64_t v126;
  CGSize size;
  double sizea;
  uint64_t sizeb;
  CGAffineTransform v130;
  CGAffineTransform v131;
  _OWORD v132[4];
  _OWORD v133[3];
  CGRect v134;
  CGRect v135;
  CGRect v136;
  CGRect v137;
  CGRect v138;
  CGRect v139;
  CGRect v140;
  CGRect v141;
  CGRect v142;
  CGRect v143;
  CGRect v144;
  CGRect v145;
  CGRect v146;
  CGRect v147;

  v2 = *(_QWORD **)(a1 + 80);
  v3 = v2[2];
  if (!v3)
    return 1;
  v4 = *(double *)(v1 + 16);
  v122 = *(double *)(v1 + 8);
  v123 = *(double *)v1;
  v5 = *((_OWORD *)v2 + 5);
  v132[2] = *((_OWORD *)v2 + 4);
  v132[3] = v5;
  v133[0] = *((_OWORD *)v2 + 6);
  *(_OWORD *)((char *)v133 + 11) = *(_OWORD *)((char *)v2 + 107);
  v6 = *((_OWORD *)v2 + 3);
  v132[0] = *((_OWORD *)v2 + 2);
  v7 = *(double *)(v1 + 24);
  v9 = *(_QWORD *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  v132[1] = v6;
  outlined retain of Path.Storage((uint64_t)v132, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
  DisplayList.ViewUpdater.Model.Clip.isEmpty.getter();
  v11 = v10;
  outlined retain of Path.Storage((uint64_t)v132, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  if ((v11 & 1) != 0)
    return 0;
  if (v8 >> 62)
    return 1;
  v13 = *(double *)(a1 + 40);
  v14 = *(double *)(a1 + 48);
  v15 = *(double *)(a1 + 56);
  if (v13 == 0.0 && v14 == 0.0 || (v12 = 1, *(double *)(a1 + 32) == 0.0) && v15 == 0.0)
  {
    v115 = v8;
    v131.a = *(CGFloat *)(a1 + 32);
    v131.b = v13;
    v131.c = v14;
    v131.d = v15;
    *(_OWORD *)&v131.tx = *(_OWORD *)(a1 + 64);
    CGAffineTransformInvert(&v130, &v131);
    a = v130.a;
    c = v130.c;
    b = v130.b;
    v17 = v9 >> 60;
    tx = v130.tx;
    d = v130.d;
    ty = v130.ty;
    outlined copy of DisplayList.Content.Value(v9);
    v19 = v9;
    v20 = 0;
    v114 = v19;
    v91 = v19 & 0xFFFFFFFFFFFFFFFLL;
    v21.f64[0] = NAN;
    v21.f64[1] = NAN;
    v107 = (int8x16_t)vnegq_f64(v21);
    v22 = 0.0;
    v23 = 1;
    v113 = v17;
    r2_8 = a;
    while (1)
    {
      if (v20 < 0)
      {
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
LABEL_90:
        JUMPOUT(0x234F3CD54);
      }
      if ((unint64_t)v20 >= v2[2])
        goto LABEL_84;
      v24 = (unsigned __int8 *)&v2[12 * v20 + 4];
      if (v24[88] != 1)
        goto LABEL_73;
      v25 = *(int8x16_t *)v24;
      v26 = v24[32];
      if (v26 == 2)
      {
        v28 = *(_QWORD *)(v25.i64[0] + 32);
        v29 = *(double *)(v25.i64[0] + 40);
        v25.i64[0] = *(_QWORD *)(v25.i64[0] + 48);
        size = (CGSize)v25;
        v25.i64[0] = *(_QWORD *)(*(_QWORD *)v24 + 56);
        v124 = v25;
        v25 = *(int8x16_t *)(*(_QWORD *)v24 + 16);
      }
      else
      {
        v27 = *((double *)v24 + 2);
        if (v26 == 1)
        {
          v28 = *((_QWORD *)v24 + 2);
          v29 = *((double *)v24 + 3);
          if (v27 != v29)
            goto LABEL_73;
          *(double *)v18.i64 = v27 * 0.5;
          size = (CGSize)v18;
        }
        else
        {
          if (v24[32])
            goto LABEL_73;
          v28 = *((_QWORD *)v24 + 2);
          v29 = *((double *)v24 + 3);
          v18.i64[0] = 0;
          size = (CGSize)v18;
          v18.i64[0] = 0;
        }
        v124 = v18;
      }
      v30 = v25.i64[1];
      v131.a = a;
      v131.b = b;
      v131.c = c;
      v131.d = d;
      v131.tx = tx;
      v131.ty = ty;
      v134 = CGRectApplyAffineTransform(*(CGRect *)v25.i8, &v131);
      x = v134.origin.x;
      y = v134.origin.y;
      width = v134.size.width;
      height = v134.size.height;
      v36 = v124.u64[0];
      v35 = *(unint64_t *)&size.width;
      if ((~*(_QWORD *)&size.width & 0x7FF0000000000000) != 0 && (~v124.i64[0] & 0x7FF0000000000000) != 0)
      {
        v131.a = a;
        v131.b = b;
        v131.c = c;
        v131.d = d;
        v131.tx = tx;
        v131.ty = ty;
        v38 = size.width;
        v41 = CGSizeApplyAffineTransform(*(CGSize *)(&v36 - 1), &v131);
        *(CGFloat *)v40.i64 = v41.height;
        *(CGFloat *)v39.i64 = v41.width;
        v35 = vbslq_s8(v107, v39, (int8x16_t)size).u64[0];
        v36 = vbslq_s8(v107, v40, v124).u64[0];
      }
      v12 = 1;
      if (v17 > 0xA)
        goto LABEL_82;
      v125 = *(double *)&v36;
      sizea = *(double *)&v35;
      if (((1 << v17) & 0x70F) == 0)
      {
        if ((_DWORD)v17 == 4)
          __asm { BR              X8 }
LABEL_82:
        outlined consume of DisplayList.Item.Value(v114, v115);
        return v12;
      }
      v135.origin.x = x;
      v135.origin.y = y;
      v135.size.width = width;
      v135.size.height = height;
      v145.origin.y = v122;
      v145.origin.x = v123;
      v145.size.width = v4;
      v145.size.height = v7;
      v136 = CGRectIntersection(v135, v145);
      if (CGRectIsEmpty(v136))
      {
        v12 = 0;
        goto LABEL_82;
      }
      if ((v23 & 1) != 0)
      {
        v42 = *(_QWORD *)(a1 + 88);
        v43 = *(double **)(a1 + 96);
        if (v43)
        {
          swift_beginAccess();
          v44 = fabs(v43[5]);
          v45 = fabs(v43[6]);
          if (v44 <= v45)
            v44 = v45;
          v22 = v43[4] * 2.8 + 0.0 + v44;
          v46 = *(_QWORD *)(v42 + 16);
          if (!v46)
            goto LABEL_41;
LABEL_36:
          v47 = (_BYTE *)(v42 + 148);
          do
          {
            if (!*v47 && (*(v47 - 108) & 1) == 0)
              v22 = v22 + *(double *)(v47 - 116) * 2.8;
            v47 += 120;
            --v46;
          }
          while (v46);
          goto LABEL_41;
        }
        v22 = 0.0;
        v46 = *(_QWORD *)(v42 + 16);
        if (v46)
          goto LABEL_36;
      }
LABEL_41:
      if (v22 != 0.0)
      {
        v137.origin.x = x;
        v137.origin.y = y;
        v137.size.width = width;
        v137.size.height = height;
        v138 = CGRectInset(v137, v22, v22);
        x = v138.origin.x;
        y = v138.origin.y;
        width = v138.size.width;
        height = v138.size.height;
        if (CGRectIsEmpty(v138))
          goto LABEL_72;
        v48 = sizea - v22;
        if (sizea - v22 < 0.0)
          v48 = 0.0;
        sizea = v48;
        v49 = v125 - v22;
        if (v125 - v22 < 0.0)
          v49 = 0.0;
        v125 = v49;
      }
      v139.origin.x = x;
      v139.origin.y = y;
      v139.size.width = width;
      v139.size.height = height;
      v140 = CGRectInset(v139, -0.001, -0.001);
      v146.origin.y = v122;
      v146.origin.x = v123;
      v146.size.width = v4;
      v146.size.height = v7;
      if (!CGRectContainsRect(v140, v146))
      {
LABEL_72:
        v23 = 0;
        goto LABEL_73;
      }
      if (sizea <= 0.0 && v125 <= 0.0)
      {
LABEL_59:
        if (v20 != --v3)
        {
          v57 = v2[2];
          if (v20 >= (uint64_t)v57)
            goto LABEL_86;
          if (v3 >= v57)
            goto LABEL_87;
          v58 = *(_QWORD *)v24;
          v59 = *((_QWORD *)v24 + 1);
          v60 = *((_QWORD *)v24 + 2);
          v61 = *((_QWORD *)v24 + 3);
          v62 = v24[32];
          v102 = *(_OWORD *)(v24 + 56);
          rect2 = *(_OWORD *)(v24 + 40);
          v101 = *(_OWORD *)(v24 + 72);
          v98 = v24[89];
          v99 = v24[88];
          v97 = v24[90];
          v92 = 12 * v3;
          v63 = (uint64_t)&v2[12 * v3 + 4];
          v64 = *(_QWORD *)v63;
          v65 = *(_QWORD *)(v63 + 8);
          v67 = *(_QWORD *)(v63 + 16);
          v66 = *(_QWORD *)(v63 + 24);
          v68 = *(_BYTE *)(v63 + 32);
          sizeb = *(_QWORD *)(v63 + 40);
          v126 = *(_QWORD *)(v63 + 48);
          r2_24 = *(_QWORD *)(v63 + 64);
          v112 = *(_QWORD *)(v63 + 56);
          r2_16 = *(_QWORD *)(v63 + 72);
          r2 = *(_QWORD *)(v63 + 80);
          rect = *(_BYTE *)(v63 + 88);
          rect2_24 = *(_BYTE *)(v63 + 89);
          rect2_16 = *(_BYTE *)(v63 + 90);
          v95 = v59;
          v96 = v58;
          v93 = v61;
          v94 = v60;
          outlined copy of Path.Storage(v58, v59, v60, v61, v62);
          outlined copy of Path.Storage(v64, v65, v67, v66, v68);
          v100 = v62;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
          v69 = v2 + 4;
          v70 = (uint64_t)&v2[12 * v20 + 4];
          v71 = *(_QWORD *)v70;
          v72 = *(_QWORD *)(v70 + 8);
          v73 = *(_QWORD *)(v70 + 16);
          v74 = *(_QWORD *)(v70 + 24);
          *(_QWORD *)v70 = v64;
          *(_QWORD *)(v70 + 8) = v65;
          *(_QWORD *)(v70 + 16) = v67;
          *(_QWORD *)(v70 + 24) = v66;
          v75 = *(_BYTE *)(v70 + 32);
          *(_BYTE *)(v70 + 32) = v68;
          *(_QWORD *)(v70 + 40) = sizeb;
          *(_QWORD *)(v70 + 48) = v126;
          *(_QWORD *)(v70 + 56) = v112;
          *(_QWORD *)(v70 + 64) = r2_24;
          *(_QWORD *)(v70 + 72) = r2_16;
          *(_QWORD *)(v70 + 80) = r2;
          *(_BYTE *)(v70 + 88) = rect;
          *(_BYTE *)(v70 + 89) = rect2_24;
          *(_BYTE *)(v70 + 90) = rect2_16;
          outlined consume of Path.Storage(v71, v72, v73, v74, v75);
          if (v3 >= v2[2])
            goto LABEL_88;
          v76 = &v69[v92];
          v77 = v69[12 * v3];
          v78 = v69[v92 + 1];
          v79 = v69[v92 + 2];
          v80 = v69[v92 + 3];
          *v76 = v96;
          v76[1] = v95;
          v76[2] = v94;
          v76[3] = v93;
          v81 = v69[v92 + 4];
          *((_BYTE *)v76 + 32) = v100;
          *(_OWORD *)(v76 + 5) = rect2;
          *(_OWORD *)(v76 + 7) = v102;
          *(_OWORD *)(v76 + 9) = v101;
          *((_BYTE *)v76 + 88) = v99;
          *((_BYTE *)v76 + 89) = v98;
          *((_BYTE *)v76 + 90) = v97;
          outlined consume of Path.Storage(v77, v78, v79, v80, v81);
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
        v82 = v2[2];
        if (v3 >= v82)
          goto LABEL_85;
        v83 = v82 - 1;
        v84 = v82 - 1 - v3;
        if (v84 < 0)
        {
          _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          goto LABEL_90;
        }
        v85 = &v2[12 * v3];
        v86 = v85[4];
        v85 += 4;
        v88 = v85[2];
        v87 = v85[3];
        v17 = v85[1];
        v89 = *((_BYTE *)v85 + 32);
        memmove(v85, v85 + 12, 96 * v84);
        v2[2] = v83;
        outlined consume of Path.Storage(v86, v17, v88, v87, v89);
        v23 = 0;
        *(_QWORD *)(a1 + 80) = v2;
        LODWORD(v17) = v113;
        if (v20 >= (uint64_t)v3)
          goto LABEL_80;
      }
      else
      {
        v141.origin.x = x;
        v141.origin.y = y;
        v141.size.width = width;
        v141.size.height = height;
        v50 = v7;
        v51 = v4;
        v52 = fabs(CGRectGetWidth(v141)) * 0.5;
        v142.origin.x = x;
        v142.origin.y = y;
        v142.size.width = width;
        v142.size.height = height;
        v53 = fabs(CGRectGetHeight(v142)) * 0.5;
        if (v53 >= v52)
          v53 = v52;
        v4 = v51;
        v7 = v50;
        v54 = sizea;
        if (v53 < sizea)
          v54 = v53;
        if (v53 >= v125)
          v53 = v125;
        v55 = v54 * 0.292893219;
        v56 = v53 * 0.292893219;
        v143.origin.x = x;
        v143.origin.y = y;
        v143.size.width = width;
        v143.size.height = height;
        v144 = CGRectInset(v143, v55, v56);
        v147.origin.y = v122;
        v147.origin.x = v123;
        v147.size.width = v4;
        v147.size.height = v50;
        if (CGRectContainsRect(v144, v147))
        {
          a = r2_8;
          goto LABEL_59;
        }
        v23 = 0;
        a = r2_8;
LABEL_73:
        if (++v20 >= (uint64_t)v3)
        {
LABEL_80:
          v12 = 1;
          goto LABEL_82;
        }
      }
    }
  }
  return v12;
}

void sub_234F3CDA4()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x234F3CDECLL);
}

void DisplayList.Item.canMergeWithClipRect(_:state:)()
{
  __asm { BR              X10 }
}

uint64_t sub_234F3CE90()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)sub_234F3CEB0 + 4 * byte_2352B2FFC[v0 >> 60]))();
}

BOOL sub_234F3CEB0()
{
  unint64_t v0;
  unint64_t v1;
  CGFloat v2;
  CGFloat v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  _BOOL8 v10;
  CGRect v12;
  CGRect v13;
  CGRect v14;

  outlined copy of DisplayList.Content.Value(v0);
  v12.origin.x = v9;
  v12.origin.y = v8;
  v12.size.width = v7;
  v12.size.height = v6;
  v13 = CGRectInset(v12, -0.001, -0.001);
  v14.origin.x = v5;
  v14.origin.y = v4;
  v14.size.width = v3;
  v14.size.height = v2;
  v10 = CGRectContainsRect(v13, v14);
  outlined consume of DisplayList.Item.Value(v0, v1);
  return v10;
}

void sub_234F3CFA8()
{
  JUMPOUT(0x234F3CF7CLL);
}

void sub_234F3D01C()
{
  ((void (*)(const char *, uint64_t, uint64_t, _QWORD, unint64_t, const char *, uint64_t, uint64_t))_assertionFailure(_:_:file:line:flags:))("Fatal error", 11, 2, 0, 0xE000000000000000, "SwiftUICore/DisplayListViewModel.swift", 38, 2);
  __break(1u);
  JUMPOUT(0x234F3D06CLL);
}

void sub_234F3D028()
{
  swift_retain();
  JUMPOUT(0x234F3D038);
}

Swift::Bool __swiftcall DisplayList.Item.canMergeWithTransform()()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v5;
  char v6;
  unint64_t v7;
  double v8;
  double v9;

  v1 = *(_QWORD *)(v0 + 48);
  if (v1 >> 62 != 1)
    return 1;
  v2 = *(_QWORD *)(v0 + 40);
  outlined copy of DisplayList.Effect(v2, v1, SBYTE4(v1));
  if (BYTE4(v1) == 14)
  {
    v5 = v2;
    v6 = v1;
    LOBYTE(v7) = 14;
LABEL_10:
    outlined consume of DisplayList.Effect(v5, v6, v7);
    return 1;
  }
  if (BYTE4(v1) != 6)
  {
    v5 = v2;
    v6 = v1;
    v7 = HIDWORD(v1);
    goto LABEL_10;
  }
  v3 = *(unsigned __int8 *)(v2 + 48);
  if (!*(_BYTE *)(v2 + 48))
  {
LABEL_7:
    outlined consume of DisplayList.Effect(v2, v1, 6);
    return 0;
  }
  if (v3 != 1)
  {
    if (v3 == 2)
      goto LABEL_7;
    v5 = v2;
    v6 = v1;
    LOBYTE(v7) = 6;
    goto LABEL_10;
  }
  v9 = *(double *)(v2 + 32);
  v8 = *(double *)(v2 + 40);
  outlined consume of DisplayList.Effect(v2, v1, 6);
  return v9 != v8;
}

void DisplayList.Item.canInheritShadowOrFilters.getter()
{
  __asm { BR              X10 }
}

BOOL sub_234F3D1A4()
{
  unint64_t v0;

  return (v0 >> 60) - 8 < 0xFFFFFFFD;
}

uint64_t sub_234F3D1D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = outlined copy of DisplayList.Effect(v1, v0, SBYTE4(v0));
  return ((uint64_t (*)(uint64_t))((char *)&loc_234F3D1B4 + 4 * byte_2352B300D[BYTE4(v0)]))(v2);
}

void sub_234F3D200()
{
  char v0;
  uint64_t v1;

  outlined consume of DisplayList.Effect(v1, v0, 1);
  JUMPOUT(0x234F3D1B4);
}

void sub_234F3D214()
{
  char v0;
  uint64_t v1;

  outlined consume of DisplayList.Effect(v1, v0, 11);
  JUMPOUT(0x234F3D1B4);
}

void sub_234F3D228()
{
  char v0;
  uint64_t v1;

  outlined consume of DisplayList.Effect(v1, v0, 13);
  JUMPOUT(0x234F3D1B4);
}

uint64_t sub_234F3D23C()
{
  uint64_t v0;

  return ((uint64_t (*)(void))((char *)sub_234F3D260 + 4 * byte_2352B3021[*(unsigned __int8 *)(v0 + 88)]))();
}

void sub_234F3D260()
{
  char v0;
  uint64_t v1;

  outlined consume of DisplayList.Effect(v1, v0, 8);
  JUMPOUT(0x234F3D1B4);
}

void sub_234F3D2E4()
{
  char v0;
  uint64_t v1;

  outlined consume of DisplayList.Effect(v1, v0, 9);
  JUMPOUT(0x234F3D1B4);
}

void sub_234F3D304()
{
  char v0;
  uint64_t v1;

  outlined consume of DisplayList.Effect(v1, v0, 14);
  JUMPOUT(0x234F3D1B4);
}

void sub_234F3D318()
{
  char v0;
  uint64_t v1;

  outlined consume of DisplayList.Effect(v1, v0, 18);
  JUMPOUT(0x234F3D1B4);
}

void sub_234F3D32C()
{
  char v0;
  uint64_t v1;

  outlined consume of DisplayList.Effect(v1, v0, 15);
  JUMPOUT(0x234F3D1B4);
}

void sub_234F3D340()
{
  char v0;
  uint64_t v1;

  outlined consume of DisplayList.Effect(v1, v0, 17);
  JUMPOUT(0x234F3D1B4);
}

void sub_234F3D354(uint64_t a1, uint64_t a2, CGAffineTransform *a3, CGAffineTransform *a4)
{
  char v4;
  uint64_t v5;

  outlined consume of DisplayList.Effect(v5, v4, 8);
  JUMPOUT(0x234F3D1B4);
}

void sub_234F3D428()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void DisplayList.ViewUpdater.Model.State.adjust(for:)(_OWORD *a1)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  double width;
  double v6;
  uint64_t v7;
  double v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  double v19;
  double v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  char v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  double v33;
  int v34;
  double v35;
  CGAffineTransform v36;
  CGSize v37;

  v2 = a1[1];
  v3 = a1[2];
  v4 = *(_QWORD *)(v1 + 96);
  if (v4 || *(_QWORD *)(*(_QWORD *)(v1 + 88) + 16))
  {
    *(_OWORD *)&v36.a = *a1;
    *(_OWORD *)&v36.c = v2;
    *(_OWORD *)&v36.tx = v3;
    v37.width = 1.0;
    v37.height = 1.0;
    width = CGSizeApplyAffineTransform(v37, &v36).width;
    if (fabs(width + -1.0) > 0.001)
    {
      v6 = 1.0 / width;
      if (v4)
      {
        swift_beginAccess();
        v7 = *(_QWORD *)(v4 + 40);
        v8 = v6 * *(double *)(v4 + 32);
        v9 = *(_DWORD *)(v4 + 16);
        v10 = *(_DWORD *)(v4 + 20);
        v12 = *(_DWORD *)(v4 + 24);
        v11 = *(_DWORD *)(v4 + 28);
        v13 = *(_QWORD *)(v4 + 48);
        v34 = *(_DWORD *)(v4 + 56);
        v14 = *(_BYTE *)(v4 + 60);
        swift_retain();
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          swift_beginAccess();
          *(_DWORD *)(v4 + 16) = v9;
          *(_DWORD *)(v4 + 20) = v10;
          *(_DWORD *)(v4 + 24) = v12;
          *(_DWORD *)(v4 + 28) = v11;
          *(double *)(v4 + 32) = v8;
          *(_QWORD *)(v4 + 40) = v7;
          *(_QWORD *)(v4 + 48) = v13;
          *(_DWORD *)(v4 + 56) = v34;
          *(_BYTE *)(v4 + 60) = v14;
        }
        else
        {
          type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for MutableBox<ResolvedShadowStyle>, (uint64_t)&type metadata for ResolvedShadowStyle, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
          v15 = swift_allocObject();
          *(_DWORD *)(v15 + 16) = v9;
          *(_DWORD *)(v15 + 20) = v10;
          *(_DWORD *)(v15 + 24) = v12;
          *(_DWORD *)(v15 + 28) = v11;
          *(double *)(v15 + 32) = v8;
          *(_QWORD *)(v15 + 40) = v7;
          *(_QWORD *)(v15 + 48) = v13;
          *(_DWORD *)(v15 + 56) = v34;
          *(_BYTE *)(v15 + 60) = v14;
          swift_release();
          v4 = v15;
        }
        swift_beginAccess();
        v17 = *(double *)(v4 + 40);
        v16 = *(double *)(v4 + 48);
        v18 = *(_QWORD *)(v4 + 32);
        if (v17 == 0.0)
          v19 = 0.0;
        else
          v19 = v6 * v17;
        if (v16 == 0.0)
          v20 = 0.0;
        else
          v20 = v6 * v16;
        v35 = v20;
        v21 = *(_DWORD *)(v4 + 16);
        v22 = *(_DWORD *)(v4 + 20);
        v24 = *(_DWORD *)(v4 + 24);
        v23 = *(_DWORD *)(v4 + 28);
        v25 = *(_DWORD *)(v4 + 56);
        v26 = *(_BYTE *)(v4 + 60);
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          swift_beginAccess();
          *(_DWORD *)(v4 + 16) = v21;
          *(_DWORD *)(v4 + 20) = v22;
          *(_DWORD *)(v4 + 24) = v24;
          *(_DWORD *)(v4 + 28) = v23;
          *(_QWORD *)(v4 + 32) = v18;
          *(double *)(v4 + 40) = v19;
          *(double *)(v4 + 48) = v35;
          *(_DWORD *)(v4 + 56) = v25;
          *(_BYTE *)(v4 + 60) = v26;
        }
        else
        {
          type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for MutableBox<ResolvedShadowStyle>, (uint64_t)&type metadata for ResolvedShadowStyle, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
          v27 = swift_allocObject();
          *(_DWORD *)(v27 + 16) = v21;
          *(_DWORD *)(v27 + 20) = v22;
          *(_DWORD *)(v27 + 24) = v24;
          *(_DWORD *)(v27 + 28) = v23;
          *(_QWORD *)(v27 + 32) = v18;
          *(double *)(v27 + 40) = v19;
          *(double *)(v27 + 48) = v35;
          *(_DWORD *)(v27 + 56) = v25;
          *(_BYTE *)(v27 + 60) = v26;
          swift_release();
          v4 = v27;
        }
        swift_retain();
        swift_release();
        *(_QWORD *)(v1 + 96) = v4;
        swift_release();
      }
      v28 = *(_QWORD **)(v1 + 88);
      v29 = v28[2];
      if (v29)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_28:
          v28 = specialized _ArrayBuffer._consumeAndCreateNew()(v28);
        v30 = 0;
        v31 = v28 + 10;
        do
        {
          if (v30 >= v28[2])
          {
            __break(1u);
            goto LABEL_28;
          }
          if (!*((_BYTE *)v31 + 68))
          {
            v32 = *(v31 - 5);
            v33 = *((double *)v31 - 6);
            outlined consume of GraphicsFilter(*(void **)&v33, v32, (id)*(v31 - 4), *(v31 - 3), *(v31 - 2), *(v31 - 1), *v31, v31[1], v31[2], v31[3], v31[4], v31[5], v31[6], v31[7], *((_DWORD *)v31 + 16), BYTE2(*((_DWORD *)v31 + 16)));
            *((double *)v31 - 6) = v6 * v33;
            *(v31 - 5) = v32 & 0x101;
            *((_OWORD *)v31 - 2) = 0u;
            *((_OWORD *)v31 - 1) = 0u;
            *(_OWORD *)v31 = 0u;
            *((_OWORD *)v31 + 1) = 0u;
            *((_OWORD *)v31 + 2) = 0u;
            *((_OWORD *)v31 + 3) = 0u;
            *(_QWORD *)((char *)v31 + 61) = 0;
          }
          ++v30;
          v31 += 15;
        }
        while (v29 != v30);
        *(_QWORD *)(v1 + 88) = v28;
      }
    }
  }
}

uint64_t DisplayList.ViewUpdater.Model.State.addClip(_:style:)(uint64_t a1, __int16 a2)
{
  uint64_t v2;
  double v3;
  double v4;
  double *v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  unsigned __int8 v11;
  double v12;
  double v13;
  double v14;
  double v15;
  int8x16_t v16;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  char v21;
  uint64_t v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  uint64_t v34;
  CGFloat v35;
  int8x16_t v36;
  int8x16_t v37;
  CGSize v38;
  float64x2_t v39;
  int8x16_t v40;
  int8x16_t v41;
  double v42;
  uint64_t v43;
  BOOL IsInfinite;
  uint64_t v45;
  unsigned __int8 *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t result;
  unsigned __int8 *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  CGFloat v62;
  unsigned __int8 v63;
  CGFloat v64;
  uint64_t v65;
  int8x16_t v66;
  uint64_t v67;
  uint64_t size;
  CGSize sizea;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int8 v74;
  CGAffineTransform v75;
  _BYTE v76[40];
  int8x16_t v77;
  int8x16_t v78;
  char v79;
  CGRect v80;
  CGRect v81;
  CGRect v82;
  CGRect v83;
  CGRect v84;
  CGRect v85;
  CGRect v86;

  v5 = (double *)v2;
  LOBYTE(v6) = a2 & 1;
  v7 = HIBYTE(a2) & 1;
  v8 = *(_QWORD *)a1;
  v9 = *(double *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  size = *(_QWORD *)(a1 + 24);
  v11 = *(_BYTE *)(a1 + 32);
  outlined init with take of Path.Storage(a1, (uint64_t)v76);
  v13 = *(double *)(v2 + 32);
  v12 = *(double *)(v2 + 40);
  v15 = *(double *)(v2 + 48);
  v14 = *(double *)(v2 + 56);
  v60 = v7;
  if (v12 == 0.0 && v15 == 0.0 || v13 == 0.0 && v14 == 0.0)
  {
    outlined init with take of Path.Storage((uint64_t)v76, (uint64_t)&v77);
    switch(v79)
    {
      case 0:
        v80.origin = (CGPoint)v77;
        v80.size = (CGSize)v78;
        v75.a = v13;
        v75.b = v12;
        v75.c = v15;
        v75.d = v14;
        *(_OWORD *)&v75.tx = *(_OWORD *)(v2 + 64);
        v81 = CGRectApplyAffineTransform(v80, &v75);
        x = v81.origin.x;
        y = v81.origin.y;
        width = v81.size.width;
        height = v81.size.height;
        if (CGRectIsNull(v81))
          goto LABEL_9;
        v21 = 0;
        v22 = *(_QWORD *)&x;
        v23 = y;
        v24 = width;
        v25 = height;
        goto LABEL_17;
      case 1:
        v82.origin = (CGPoint)v77;
        v82.size = (CGSize)v78;
        v75.a = v13;
        v75.b = v12;
        v75.c = v15;
        v75.d = v14;
        *(_OWORD *)&v75.tx = *(_OWORD *)(v2 + 64);
        v83 = CGRectApplyAffineTransform(v82, &v75);
        v26 = v83.origin.x;
        v27 = v83.origin.y;
        v28 = v83.size.width;
        v29 = v83.size.height;
        if (CGRectIsNull(v83))
        {
LABEL_9:
          v22 = 0;
          v23 = 0.0;
          v24 = 0.0;
          v25 = 0.0;
          v21 = 6;
        }
        else
        {
          v86.origin.x = v26;
          v86.origin.y = v27;
          v86.size.width = v28;
          v86.size.height = v29;
          IsInfinite = CGRectIsInfinite(v86);
          v22 = *(_QWORD *)&v26;
          v23 = v27;
          v24 = v28;
          v25 = v29;
          v21 = !IsInfinite;
        }
        goto LABEL_17;
      case 2:
        v84 = *(CGRect *)(v77.i64[0] + 16);
        v16.i64[0] = *(_QWORD *)(v77.i64[0] + 48);
        sizea = (CGSize)v16;
        v16.i64[0] = *(_QWORD *)(v77.i64[0] + 56);
        v66 = v16;
        v2 = *(unsigned __int8 *)(v77.i64[0] + 64);
        v30 = v5[8];
        v31 = v5[9];
        v75.a = v13;
        v75.b = v12;
        v75.c = v15;
        v75.d = v14;
        v75.tx = v30;
        v75.ty = v31;
        v85 = CGRectApplyAffineTransform(v84, &v75);
        v62 = v85.size.height;
        v64 = v85.size.width;
        v32 = v85.origin.y;
        v33 = v85.origin.x;
        if ((~*(_QWORD *)&sizea.width & 0x7FF0000000000000) != 0)
        {
          v34 = v66.i64[0];
          if ((~v66.i64[0] & 0x7FF0000000000000) != 0)
          {
            v75.a = v13;
            v75.b = v12;
            v75.c = v15;
            v75.d = v14;
            v75.tx = v30;
            v75.ty = v31;
            v35 = sizea.width;
            v38 = CGSizeApplyAffineTransform(*(CGSize *)(&v34 - 1), &v75);
            *(CGFloat *)v37.i64 = v38.height;
            *(CGFloat *)v36.i64 = v38.width;
            v39.f64[0] = NAN;
            v39.f64[1] = NAN;
            v40 = (int8x16_t)vnegq_f64(v39);
            v66.i64[0] = vbslq_s8(v40, v37, v66).u64[0];
            *(_QWORD *)&sizea.width = vbslq_s8(v40, v36, (int8x16_t)sizea).u64[0];
          }
        }
        v22 = swift_allocObject();
        v23 = 0.0;
        v24 = 0.0;
        v25 = 0.0;
        *(CGFloat *)(v22 + 16) = v33;
        *(CGFloat *)(v22 + 24) = v32;
        *(CGFloat *)(v22 + 32) = v64;
        *(CGFloat *)(v22 + 40) = v62;
        *(CGFloat *)(v22 + 48) = sizea.width;
        *(_QWORD *)(v22 + 56) = v66.i64[0];
        v21 = 2;
        *(_BYTE *)(v22 + 64) = v2;
LABEL_17:
        v65 = *(_QWORD *)&v23;
        v67 = v22;
        *(_QWORD *)&v75.a = v22;
        v75.b = v23;
        v61 = *(_QWORD *)&v24;
        v75.c = v24;
        v75.d = v25;
        size = *(_QWORD *)&v25;
        v63 = v21;
        LOBYTE(v75.tx) = v21;
        v42 = v5[10];
        v45 = *(_QWORD *)(*(_QWORD *)&v42 + 16);
        if (!v45)
        {
          v3 = 0.0;
          v4 = 0.0;
          v9 = 0.0;
          v42 = 0.0;
          v58 = 0;
          v59 = 0;
          LOBYTE(v43) = 1;
          goto LABEL_26;
        }
        v57 = v6;
        v6 = 0;
        v43 = 64;
        break;
      case 6:
        v41 = vorrq_s8(v77, v78);
        if (vorr_s8(*(int8x8_t *)v41.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL)))
          goto LABEL_15;
        type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.ViewUpdater.Model.Clip>, (uint64_t)&type metadata for DisplayList.ViewUpdater.Model.Clip, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
        v2 = swift_allocObject();
        *(_OWORD *)(v2 + 16) = xmmword_23527E860;
        *(_QWORD *)(v2 + 32) = v8;
        *(double *)(v2 + 40) = v9;
        *(_QWORD *)(v2 + 48) = v10;
        *(_QWORD *)(v2 + 56) = size;
        *(_BYTE *)(v2 + 64) = v11;
        *(_OWORD *)(v2 + 72) = 0u;
        *(_OWORD *)(v2 + 88) = 0u;
        *(_OWORD *)(v2 + 104) = 0u;
        *(_BYTE *)(v2 + 120) = 1;
        *(_BYTE *)(v2 + 121) = v6;
        *(_BYTE *)(v2 + 122) = v7;
        result = swift_bridgeObjectRelease();
        goto LABEL_30;
      default:
        goto LABEL_15;
    }
    while (1)
    {
      if (v6 >= *(_QWORD *)(*(_QWORD *)&v42 + 16))
      {
        __break(1u);
        goto LABEL_37;
      }
      v46 = (unsigned __int8 *)(*(_QWORD *)&v42 + v43);
      if ((*(_BYTE *)(*(_QWORD *)&v42 + v43 + 56) & 1) != 0)
      {
        v70 = *((_QWORD *)v46 - 4);
        v71 = *((_QWORD *)v46 - 3);
        v72 = *((_QWORD *)v46 - 2);
        v73 = *((_QWORD *)v46 - 1);
        v74 = *v46;
        outlined copy of Path.Storage(v70, v71, v72, v73, *v46);
        v9 = *(double *)&v70;
        v4 = *(double *)&v72;
        v3 = *(double *)&v73;
        v2 = v74;
        if ((Path.intersectRoundedRects(_:)((uint64_t)&v75) & 1) != 0)
        {
          outlined copy of Path.Storage(v70, v71, v72, v73, v74);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v42 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew()(*(_QWORD **)&v42));
          if (v6 >= *(_QWORD *)(*(_QWORD *)&v42 + 16))
          {
            __break(1u);
            JUMPOUT(0x234F3DD7CLL);
          }
          v51 = (unsigned __int8 *)(*(_QWORD *)&v42 + v43);
          v52 = *(_QWORD *)(*(_QWORD *)&v42 + v43 - 32);
          v53 = *(_QWORD *)(*(_QWORD *)&v42 + v43 - 24);
          v54 = *(_QWORD *)(*(_QWORD *)&v42 + v43 - 16);
          v55 = *(_QWORD *)(*(_QWORD *)&v42 + v43 - 8);
          *((_QWORD *)v51 - 4) = v70;
          *((_QWORD *)v51 - 3) = v71;
          *((_QWORD *)v51 - 2) = v72;
          *((_QWORD *)v51 - 1) = v73;
          v56 = *(_BYTE *)(*(_QWORD *)&v42 + v43);
          *v51 = v74;
          outlined consume of Path.Storage(v52, v53, v54, v55, v56);
          outlined consume of Path.Storage(v67, v65, v61, size, v63);
          result = outlined consume of Path.Storage(v70, v71, v72, v73, v74);
          v5[10] = v42;
          return result;
        }
        outlined consume of Path.Storage(v70, v71, v72, v73, v74);
      }
      ++v6;
      v43 += 96;
      if (v45 == v6)
      {
        v3 = 0.0;
        v4 = 0.0;
        v9 = 0.0;
        v42 = 0.0;
        v58 = 0;
        v59 = 0;
        LOBYTE(v43) = 1;
        LOBYTE(v6) = v57;
        goto LABEL_26;
      }
    }
  }
LABEL_15:
  v61 = v10;
  v63 = v11;
  v65 = *(_QWORD *)&v9;
  v67 = v8;
  v58 = *(_QWORD *)(v2 + 72);
  v59 = *(_QWORD *)(v2 + 64);
  v3 = v13;
  v4 = v12;
  v9 = v15;
  v42 = v14;
  outlined retain of Path.Storage((uint64_t)v76, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
  LOBYTE(v43) = 0;
LABEL_26:
  v2 = *((_QWORD *)v5 + 10);
  outlined copy of Path.Storage(v67, v65, v61, size, v63);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_37:
    v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1, (_QWORD *)v2);
  v48 = *(_QWORD *)(v2 + 16);
  v47 = *(_QWORD *)(v2 + 24);
  if (v48 >= v47 >> 1)
    v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v47 > 1), v48 + 1, 1, (_QWORD *)v2);
  *(_QWORD *)(v2 + 16) = v48 + 1;
  v49 = v2 + 96 * v48;
  *(_QWORD *)(v49 + 32) = v67;
  *(_QWORD *)(v49 + 40) = v65;
  *(_QWORD *)(v49 + 48) = v61;
  *(_QWORD *)(v49 + 56) = size;
  *(_BYTE *)(v49 + 64) = v63;
  *(double *)(v49 + 72) = v3;
  *(double *)(v49 + 80) = v4;
  *(double *)(v49 + 88) = v9;
  *(double *)(v49 + 96) = v42;
  *(_QWORD *)(v49 + 104) = v59;
  *(_QWORD *)(v49 + 112) = v58;
  *(_BYTE *)(v49 + 120) = v43;
  *(_BYTE *)(v49 + 121) = v6;
  *(_BYTE *)(v49 + 122) = v60;
  result = outlined consume of Path.Storage(v67, v65, v61, size, v63);
LABEL_30:
  *((_QWORD *)v5 + 10) = v2;
  return result;
}

uint64_t Path.intersectRoundedRects(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  int v14;
  double v15;
  double v16;
  double v17;
  double *v18;
  double v19;
  double v20;
  double v21;
  CGFloat v22;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  char v27;
  BOOL v28;
  double v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  double v34;
  double v35;
  double v36;
  double v38;
  double v39;
  double v40;
  double v41;
  CGFloat v42;
  SwiftUI::FixedRoundedRect v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  char v50;
  _BYTE v51[40];
  uint64_t v52;
  double v53;
  double v54;
  double v55;
  char v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;

  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v5 = *(uint64_t *)(v1 + 16);
  v4 = *(uint64_t *)(v1 + 24);
  v6 = *(unsigned __int8 *)(v1 + 32);
  if (v6 == 2)
  {
    v8 = *(double *)(v2 + 16);
    v9 = *(double *)(v2 + 24);
    v10 = *(double *)(v2 + 32);
    v12 = *(double *)(v2 + 40);
    v11 = *(double *)(v2 + 48);
    v41 = *(double *)(v2 + 56);
    v7 = *(unsigned __int8 *)(v2 + 64);
  }
  else if (v6 == 1)
  {
    v10 = *(double *)(v1 + 16);
    v12 = *(double *)(v1 + 24);
    if (*(double *)&v5 != *(double *)&v4)
      return 0;
    v7 = 0;
    v9 = *(double *)(v1 + 8);
    v8 = *(double *)v1;
    v11 = *(double *)&v5 * 0.5;
    v41 = *(double *)&v5 * 0.5;
  }
  else
  {
    if (*(_BYTE *)(v1 + 32))
      return 0;
    v7 = 0;
    v8 = *(double *)v1;
    v9 = *(double *)(v1 + 8);
    v10 = *(double *)(v1 + 16);
    v11 = 0.0;
    v41 = 0.0;
    v12 = *(double *)(v1 + 24);
  }
  outlined init with take of Path.Storage(a1, (uint64_t)v51);
  outlined init with take of Path.Storage((uint64_t)v51, (uint64_t)&v52);
  if (v56 == 2)
  {
    v39 = v10;
    v40 = v8;
    v18 = (double *)(v52 + 16);
    v15 = *(double *)(v52 + 24);
    v16 = *(double *)(v52 + 32);
    v20 = *(double *)(v52 + 40);
    v17 = *(double *)(v52 + 48);
    v19 = *(double *)(v52 + 56);
    v14 = *(unsigned __int8 *)(v52 + 64);
    v13 = v41;
  }
  else if (v56 == 1)
  {
    v16 = v54;
    v20 = v55;
    v13 = v41;
    if (v54 != v55)
      return 0;
    v39 = v10;
    v40 = v8;
    v14 = 0;
    v15 = v53;
    v17 = v54 * 0.5;
    v18 = (double *)&v52;
    v19 = v54 * 0.5;
  }
  else
  {
    v13 = v41;
    if (v56)
      return 0;
    v39 = v10;
    v40 = v8;
    v14 = 0;
    v15 = v53;
    v16 = v54;
    v17 = 0.0;
    v18 = (double *)&v52;
    v19 = 0.0;
    v20 = v55;
  }
  v21 = *v18;
  if (v11 == 0.0 && v13 == 0.0 && v17 == 0.0 && v19 == 0.0)
  {
    v22 = v15;
    outlined consume of Path.Storage(v2, v3, v5, v4, v6);
    v57.size.width = v39;
    v57.origin.x = v40;
    v57.origin.y = v9;
    v57.size.height = v12;
    v59.origin.x = v21;
    v59.origin.y = v22;
    v59.size.width = v16;
    v59.size.height = v20;
    v58 = CGRectIntersection(v57, v59);
    x = v58.origin.x;
    y = v58.origin.y;
    width = v58.size.width;
    height = v58.size.height;
    if (CGRectIsNull(v58))
    {
      v27 = 6;
      x = 0.0;
      y = 0.0;
      width = 0.0;
      height = 0.0;
    }
    else
    {
      v27 = 0;
    }
    *(CGFloat *)v1 = x;
    *(CGFloat *)(v1 + 8) = y;
    *(CGFloat *)(v1 + 16) = width;
    *(CGFloat *)(v1 + 24) = height;
    goto LABEL_54;
  }
  v28 = v11 == v17 && v13 == v19;
  if (v28 && ((v7 ^ v14) & 1) == 0)
  {
    if (vabdd_f64(v40, v21) < 0.001 && vabdd_f64(v39, v16) < 0.001)
    {
      v29 = v15;
      outlined consume of Path.Storage(v2, v3, v5, v4, v6);
      if (v9 > v29)
        v30 = v9;
      else
        v30 = v29;
      v31 = v9 + v12;
      if (v29 + v20 < v9 + v12)
        v31 = v29 + v20;
      if (v30 < v31)
      {
        v32 = v31 - v30;
        v33 = swift_allocObject();
        *(double *)(v33 + 16) = v40;
        *(double *)(v33 + 24) = v30;
        *(double *)(v33 + 32) = v39;
        *(double *)(v33 + 40) = v32;
LABEL_47:
        *(double *)(v33 + 48) = v11;
        *(double *)(v33 + 56) = v41;
LABEL_52:
        *(_BYTE *)(v33 + 64) = v7;
        goto LABEL_53;
      }
      goto LABEL_56;
    }
    if (vabdd_f64(v9, v15) < 0.001 && vabdd_f64(v12, v20) < 0.001)
    {
      outlined consume of Path.Storage(v2, v3, v5, v4, v6);
      if (v40 > v21)
        v34 = v40;
      else
        v34 = v21;
      v35 = v40 + v39;
      if (v16 + v21 < v40 + v39)
        v35 = v16 + v21;
      if (v34 < v35)
      {
        v36 = v35 - v34;
        v33 = swift_allocObject();
        *(double *)(v33 + 16) = v34;
        *(double *)(v33 + 24) = v9;
        *(double *)(v33 + 32) = v36;
        *(double *)(v33 + 40) = v12;
        goto LABEL_47;
      }
LABEL_56:
      *(_OWORD *)v1 = 0u;
      *(_OWORD *)(v1 + 16) = 0u;
      v27 = 6;
      goto LABEL_54;
    }
  }
  v44 = v40;
  v45 = v9;
  v46 = v39;
  v47 = v12;
  v48 = v11;
  v49 = v13;
  v50 = v7;
  v43.rect.origin.x = v21;
  v43.rect.origin.y = v15;
  v43.rect.size.width = v16;
  v43.rect.size.height = v20;
  v43.cornerSize.width = v17;
  v43.cornerSize.height = v19;
  v43.style = v14;
  v42 = v13;
  v38 = v15;
  if (FixedRoundedRect.contains(_:)(&v43))
  {
    outlined consume of Path.Storage(v2, v3, v5, v4, v6);
    v33 = swift_allocObject();
    *(double *)(v33 + 16) = v21;
    *(double *)(v33 + 24) = v38;
    *(double *)(v33 + 32) = v16;
    *(double *)(v33 + 40) = v20;
    *(double *)(v33 + 48) = v17;
    *(double *)(v33 + 56) = v19;
    *(_BYTE *)(v33 + 64) = v14;
LABEL_53:
    *(_QWORD *)v1 = v33;
    *(_QWORD *)(v1 + 16) = 0;
    *(_QWORD *)(v1 + 24) = 0;
    v27 = 2;
    *(_QWORD *)(v1 + 8) = 0;
LABEL_54:
    *(_BYTE *)(v1 + 32) = v27;
    return 1;
  }
  v44 = v21;
  v45 = v38;
  v46 = v16;
  v47 = v20;
  v48 = v17;
  v49 = v19;
  v50 = v14;
  v43.rect.origin.x = v40;
  v43.rect.origin.y = v9;
  v43.rect.size.width = v39;
  v43.rect.size.height = v12;
  v43.cornerSize.width = v11;
  v43.cornerSize.height = v42;
  v43.style = v7;
  if (FixedRoundedRect.contains(_:)(&v43))
  {
    outlined consume of Path.Storage(v2, v3, v5, v4, v6);
    v33 = swift_allocObject();
    *(double *)(v33 + 16) = v40;
    *(double *)(v33 + 24) = v9;
    *(double *)(v33 + 32) = v39;
    *(double *)(v33 + 40) = v12;
    *(double *)(v33 + 48) = v11;
    *(CGFloat *)(v33 + 56) = v42;
    goto LABEL_52;
  }
  return 0;
}

void DisplayList.ViewUpdater.Model.Clip.isEmpty.getter()
{
  __asm { BR              X13 }
}

BOOL sub_234F3E260@<W0>(CGFloat a1@<X8>)
{
  CGFloat v1;
  CGFloat v2;
  CGFloat v3;
  CGRect v5;

  v5.origin.x = v3;
  v5.origin.y = a1;
  v5.size.width = v1;
  v5.size.height = v2;
  return CGRectIsNull(v5);
}

void sub_234F3E340()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x234F3E388);
}

void specialized DisplayList.Item.canMergeWithClipMask(state:)()
{
  __asm { BR              X10 }
}

uint64_t sub_234F3E3E0(uint64_t a1, uint64_t a2, CGFloat angle, uint64_t a4, CGAffineTransform *a5, CGAffineTransform *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t anglea, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;

  switch(v15 >> 60)
  {
    case 6uLL:
    case 7uLL:
    case 8uLL:
      v14 = 0;
      break;
    case 9uLL:
      v16 = (_BYTE *)((v15 & 0xFFFFFFFFFFFFFFFLL) + 60);
      goto LABEL_5;
    case 0xAuLL:
      v16 = (_BYTE *)((v15 & 0xFFFFFFFFFFFFFFFLL) + 52);
LABEL_5:
      v14 = *v16 & 1;
      break;
    default:
      return v14;
  }
  return v14;
}

void sub_234F3E630()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized static DisplayList.ViewUpdater.Model.merge(item:index:into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  CGFloat v7;
  int v8;
  int32x4_t v9;
  int c_low;
  uint64_t v11;
  unsigned __int8 *v12;
  double v13;
  int v14;
  int v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  CGFloat v37;
  CGFloat v38;
  CGFloat v39;
  CGFloat v40;
  CGFloat v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  CGFloat v49;
  char v50;
  uint64_t v51;
  char v52;
  CGFloat v53;
  CGFloat v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  char v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  CGFloat v64;
  char v65;
  uint64_t v66;
  char v67;
  unint64_t v68;
  __int128 v69;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat v73;
  CGFloat v74;
  CGFloat v75;
  uint64_t v76;
  CGAffineTransform v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  char v84;
  char v85;
  int v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  CGAffineTransform t2;
  SwiftUI::FixedRoundedRect_optional v93;
  int32x4_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(double *)(a1 + 56);
  v8 = *(unsigned __int16 *)(a1 + 64) | (*(unsigned __int8 *)(a1 + 66) << 16);
  if (v6 >> 62 != 2)
  {
LABEL_14:
    v16 = *(float *)(a3 + 8);
    v76 = a3;
    if (v16 == 1.0)
    {
LABEL_15:
      if ((*(_BYTE *)(a3 + 105) & 1) == 0)
      {
        v17 = *(_QWORD *)(a3 + 88);
        v18 = *(_QWORD *)(v17 + 16);
        if (!v18)
          goto LABEL_40;
        v19 = (unsigned __int8 *)(v17 + 148);
        while (1)
        {
          v20 = *v19;
          v19 += 120;
          if (v20 != 5)
            break;
          if (!--v18)
            goto LABEL_40;
        }
      }
LABEL_32:
      if (v6 >> 62 != 1)
        goto LABEL_40;
      if (BYTE4(v6) == 9)
      {
        if (*(_BYTE *)(v5 + 132) == 12)
        {
          v26 = *(_QWORD *)(v5 + 80);
          v25 = *(_QWORD *)(v5 + 88);
          v28 = *(_QWORD *)(v5 + 64);
          v27 = *(_QWORD *)(v5 + 72);
          v30 = *(_QWORD *)(v5 + 48);
          v29 = *(_QWORD *)(v5 + 56);
          v32 = *(_QWORD *)(v5 + 32);
          v31 = *(_QWORD *)(v5 + 40);
          v33 = *(_QWORD *)(v5 + 24);
          v94.i64[0] = *(_QWORD *)(v5 + 16);
          v94.i64[1] = v33;
          v95 = v32;
          v96 = v31;
          v97 = v30;
          v98 = v29;
          v99 = v28;
          v100 = v27;
          v101 = v26;
          v102 = v25;
          outlined copy of DisplayList.Item.Value(v5, v6);
          outlined consume of DisplayList.Effect(v5, v6, 9);
          v77.a = v7;
          LOWORD(v77.b) = v8;
          BYTE2(v77.b) = BYTE2(v8);
          DisplayList.Item.rewriteVibrancyFilterAsBackdrop(matrix:list:)((__int128 *)v94.i8, (uint64_t *)&v77);
LABEL_39:
          swift_bridgeObjectRelease();
LABEL_40:
          v37 = *(double *)a1;
          v38 = *(double *)(a1 + 8);
          v39 = *(double *)(a1 + 16);
          v40 = *(double *)(a1 + 24);
          v41 = *(double *)(a1 + 40);
          v42 = a3;
          v44 = *(_QWORD *)(a1 + 48);
          v43 = *(_QWORD *)(a1 + 56);
          v45 = *(unsigned __int8 *)(a1 + 66);
          v46 = *(unsigned __int16 *)(a1 + 64);
          v47 = v46 | (v45 << 16);
          v48 = *(_DWORD *)(a1 + 68);
          v49 = *(double *)(a1 + 32);
          v77.a = *(CGFloat *)a1;
          v77.b = v38;
          v77.c = v39;
          v77.d = v40;
          v77.tx = v49;
          v77.ty = v41;
          *(_QWORD *)&v78 = v44;
          *((_QWORD *)&v78 + 1) = v43;
          BYTE2(v79) = v45;
          LOWORD(v79) = v46;
          DWORD1(v79) = v48;
          if ((DisplayList.Item.discardContainingClips(state:)(v42) & 1) != 0)
            v50 = 4;
          else
            v50 = 0;
          v51 = *(_QWORD *)(v42 + 80);
          if (!*(_QWORD *)(v51 + 16))
          {
            v64 = v41;
            v66 = v76;
LABEL_53:
            if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(v66 + 32), (float64x2_t)xmmword_235281560), (int32x4_t)vceqq_f64(*(float64x2_t *)(v66 + 48), (float64x2_t)xmmword_23528A280))))) & 1) != 0)
            {
              v77.a = v37;
              v77.b = v38;
              v77.c = v39;
              v77.d = v40;
              v77.tx = v49;
              v77.ty = v64;
              *(_QWORD *)&v78 = v44;
              *((_QWORD *)&v78 + 1) = v43;
              LOWORD(v79) = v47;
              BYTE2(v79) = BYTE2(v47);
              DWORD1(v79) = v48;
              if (!DisplayList.Item.canMergeWithTransform()())
                v50 |= 2u;
            }
LABEL_56:
            if ((v50 & 2) == 0 && (*(_QWORD *)(v66 + 96) || *(_QWORD *)(*(_QWORD *)(v66 + 88) + 16)))
            {
              v77.a = v37;
              v77.b = v38;
              v77.c = v39;
              v77.d = v40;
              v77.tx = v49;
              v77.ty = v64;
              *(_QWORD *)&v78 = v44;
              *((_QWORD *)&v78 + 1) = v43;
              LOWORD(v79) = v47;
              BYTE2(v79) = BYTE2(v47);
              DWORD1(v79) = v48;
              DisplayList.Item.canInheritShadowOrFilters.getter();
              if ((v67 & 1) == 0)
                v50 |= 2u;
            }
            v68 = v44 >> 62;
            if ((v50 & 2) != 0)
            {
              DisplayList.ViewUpdater.Model.State.reset()();
            }
            else if ((*(_BYTE *)(v66 + 104) & 2) != 0)
            {
              __asm { BR              X9 }
            }
            v69 = *(_OWORD *)(v66 + 48);
            *(_OWORD *)&v77.a = *(_OWORD *)(v66 + 32);
            *(_OWORD *)&v77.c = v69;
            *(_OWORD *)&v77.tx = *(_OWORD *)(v66 + 64);
            CGAffineTransformTranslate((CGAffineTransform *)&v93, &v77, v37, v38);
            y = v93.value.rect.origin.y;
            width = v93.value.rect.size.width;
            height = v93.value.rect.size.height;
            v73 = v93.value.cornerSize.width;
            v74 = v93.value.cornerSize.height;
            *(CGFloat *)(v66 + 32) = v93.value.rect.origin.x;
            *(CGFloat *)(v66 + 40) = y;
            *(CGFloat *)(v66 + 48) = width;
            *(CGFloat *)(v66 + 56) = height;
            *(CGFloat *)(v66 + 64) = v73;
            *(CGFloat *)(v66 + 72) = v74;
            if (*(uint64_t *)&v49 <= *(_QWORD *)(v66 + 136))
              v75 = *(double *)(v66 + 136);
            else
              v75 = v49;
            *(CGFloat *)(v66 + 136) = v75;
            __asm { BR              X9 }
          }
          v77.a = v37;
          v77.b = v38;
          v77.c = v39;
          v77.d = v40;
          v77.tx = v49;
          v77.ty = v41;
          *(_QWORD *)&v78 = v44;
          *((_QWORD *)&v78 + 1) = v43;
          LOWORD(v79) = v47;
          BYTE2(v79) = BYTE2(v47);
          DWORD1(v79) = v48;
          specialized DisplayList.Item.canMergeWithClipMask(state:)();
          if ((v52 & 1) != 0)
          {
            v53 = *(double *)v76;
            v54 = *(double *)(v76 + 16);
            v55 = *(_QWORD *)(v76 + 88);
            v56 = *(_QWORD *)(v76 + 96);
            v57 = *(_BYTE *)(v76 + 104);
            v58 = *(_BYTE *)(v76 + 105);
            v59 = *(_BYTE *)(v76 + 106);
            v60 = *(_DWORD *)(v76 + 108);
            v61 = *(_QWORD *)(v76 + 112);
            v62 = *(_QWORD *)(v76 + 168);
            LOBYTE(t2.a) = *(_BYTE *)(v76 + 24);
            v77.a = v53;
            *(float *)&v77.b = v16;
            v77.c = v54;
            LOBYTE(v77.d) = LOBYTE(t2.a);
            v63 = *(_OWORD *)(v76 + 48);
            *(_OWORD *)&v77.tx = *(_OWORD *)(v76 + 32);
            v78 = v63;
            v79 = *(_OWORD *)(v76 + 64);
            v80 = v51;
            v81 = v55;
            v82 = v56;
            v83 = v57;
            v84 = v58;
            v85 = v59;
            v86 = v60;
            v87 = v61;
            v88 = *(_OWORD *)(v76 + 120);
            v89 = *(_OWORD *)(v76 + 136);
            v90 = *(_OWORD *)(v76 + 152);
            v91 = v62;
            DisplayList.ViewUpdater.Model.State.clipRect()(&v93);
            if (v93.value.style != SwiftUI_RoundedCornerStyle_unknownDefault)
            {
              v77.a = v37;
              v77.b = v38;
              v77.c = v39;
              v77.d = v40;
              v77.tx = v49;
              v77.ty = v41;
              v64 = v41;
              *(_QWORD *)&v78 = v44;
              *((_QWORD *)&v78 + 1) = v43;
              BYTE2(v79) = BYTE2(v47);
              LOWORD(v79) = v47;
              DWORD1(v79) = v48;
              v93.value.style &= 1u;
              DisplayList.Item.canMergeWithClipRect(_:state:)();
              if ((v65 & 1) == 0)
                v50 |= 2u;
LABEL_52:
              v66 = v76;
              if ((v50 & 2) != 0)
                goto LABEL_56;
              goto LABEL_53;
            }
          }
          else
          {
            v50 |= 2u;
          }
          v64 = v41;
          goto LABEL_52;
        }
        outlined copy of DisplayList.Item.Value(v5, v6);
        v34 = v5;
        v35 = v6;
        LOBYTE(v36) = 9;
      }
      else
      {
        outlined copy of DisplayList.Effect(v5, v6, SBYTE4(v6));
        swift_bridgeObjectRetain();
        v34 = v5;
        v35 = v6;
        v36 = HIDWORD(v6);
      }
      outlined consume of DisplayList.Effect(v34, v35, v36);
      goto LABEL_39;
    }
    v21 = *(_QWORD *)(a3 + 16);
    v22 = *(_BYTE *)(a3 + 24);
    outlined copy of GraphicsBlendMode(v21, v22);
    if (one-time initialization token for normal != -1)
      swift_once();
    v23 = static GraphicsBlendMode.normal;
    v24 = byte_254266040;
    if ((v22 & 1) != 0)
    {
      if (byte_254266040)
      {
        swift_unknownObjectRetain();
        outlined consume of GraphicsBlendMode(v21, 1);
        outlined consume of GraphicsBlendMode(v23, 1);
        if (v21 != v23)
          goto LABEL_32;
        goto LABEL_15;
      }
      swift_unknownObjectRetain();
    }
    else if ((byte_254266040 & 1) == 0)
    {
      outlined consume of GraphicsBlendMode(v21, 0);
      outlined consume of GraphicsBlendMode(v23, 0);
      if ((_DWORD)v21 != (_DWORD)v23)
        goto LABEL_32;
      goto LABEL_15;
    }
    outlined copy of GraphicsBlendMode(v23, v24);
    outlined consume of GraphicsBlendMode(v21, v22);
    outlined consume of GraphicsBlendMode(v23, v24);
    outlined consume of GraphicsBlendMode(v21, v22);
    goto LABEL_32;
  }
  if (*(_QWORD *)(*(_QWORD *)(a3 + 112) + 16))
  {
    specialized Array._customRemoveLast()((uint64_t)&v77);
    if ((BYTE4(v77.c) & 1) != 0)
    {
      specialized Array.remove(at:)(*(_QWORD *)(*(_QWORD *)(a3 + 112) + 16) - 1, (uint64_t)&v94);
      v9 = v94;
      c_low = v95;
      v11 = *(_QWORD *)(v5 + 16);
      if (v11)
        goto LABEL_5;
    }
    else
    {
      c_low = LODWORD(v77.c);
      v9 = *(int32x4_t *)&v77.a;
      v94.i32[0] = LODWORD(v77.a);
      v11 = *(_QWORD *)(v5 + 16);
      if (v11)
      {
LABEL_5:
        v12 = (unsigned __int8 *)(v5 + 66);
        v13 = MEMORY[0x24BEE4AF8];
        do
        {
          if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(*(int32x4_t *)(v12 - 34), v9)), 0xFuLL))) & 1) != 0
            && *(_DWORD *)(v12 - 18) == c_low)
          {
            v13 = *(double *)(v12 - 10);
            v14 = *((unsigned __int16 *)v12 - 1);
            v15 = *v12;
            swift_bridgeObjectRetain();
            goto LABEL_13;
          }
          v12 += 40;
          --v11;
        }
        while (v11);
        v14 = 0;
        v15 = 0;
        goto LABEL_13;
      }
    }
  }
  v14 = 0;
  v15 = 0;
  v13 = MEMORY[0x24BEE4AF8];
LABEL_13:
  outlined consume of DisplayList.Item.Value(v5, v6);
  v5 = 0;
  *(_OWORD *)(a1 + 40) = xmmword_23527E870;
  v8 = v14 | (v15 << 16);
  *(double *)(a1 + 56) = v13;
  *(_BYTE *)(a1 + 66) = v15;
  *(_WORD *)(a1 + 64) = v14;
  v6 = 0x4000001300000000;
  v7 = v13;
  goto LABEL_14;
}

void sub_234F3F794()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_234F3F7E8()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_234F3F80C()
{
  uint64_t v0;

  outlined consume of GraphicsFilter(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(id *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_DWORD *)(v0 + 128), BYTE2(*(_DWORD *)(v0 + 128)));
  return swift_deallocObject();
}

uint64_t sub_234F3F864()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_234F3F888()
{
  return swift_deallocObject();
}

uint64_t initializeWithCopy for DisplayList.ViewUpdater.AsyncLayer(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = v3;
  return a1;
}

uint64_t assignWithCopy for DisplayList.ViewUpdater.AsyncLayer(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for DisplayList.ViewUpdater.AsyncLayer(uint64_t a1, uint64_t a2)
{

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for DisplayList.ViewUpdater.AsyncLayer()
{
  return &type metadata for DisplayList.ViewUpdater.AsyncLayer;
}

uint64_t destroy for DisplayList.ViewUpdater.ViewCache(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DisplayList.ViewUpdater.ViewCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  id v8;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(void **)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v7 = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v7;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  *(_BYTE *)(a1 + 106) = *(_BYTE *)(a2 + 106);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DisplayList.ViewUpdater.ViewCache(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 56);
  v5 = *(void **)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v5;
  v6 = v5;

  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  *(_BYTE *)(a1 + 106) = *(_BYTE *)(a2 + 106);
  return a1;
}

uint64_t assignWithTake for DisplayList.ViewUpdater.ViewCache(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();

  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  *(_BYTE *)(a1 + 106) = *(_BYTE *)(a2 + 106);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayList.ViewUpdater.ViewCache(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 107))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DisplayList.ViewUpdater.ViewCache(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 106) = 0;
    *(_WORD *)(result + 104) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 107) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 107) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.ViewUpdater.ViewCache()
{
  return &type metadata for DisplayList.ViewUpdater.ViewCache;
}

unint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI11DisplayListV11ViewUpdaterC0G5CacheV3KeyV_s5NeverOytSgTB503_s7c4UI11ef3V11gh4C0E5i70V17removeRecursively33_A9949015C771FF99F7528BB7239FD006LLyyyXlFytSgAG3J6VXEfU_AJTf1cn_n(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t *a4)
{
  uint64_t v4;
  int v5;
  int v6;
  unint64_t result;
  _QWORD v8[2];
  char v9;
  char v10[2];

  v5 = a3;
  if (a3 == 2)
  {
    v6 = 0;
  }
  else
  {
    v8[0] = a1;
    v8[1] = a2;
    v9 = a3 & 1;
    result = closure #1 in DisplayList.ViewUpdater.ViewCache.removeRecursively(_:)((uint64_t)v8, a4, v10);
    if (v4)
      return result;
    v6 = v10[0];
  }
  return v6 | ((v5 == 2) << 8);
}

Swift::Void __swiftcall DisplayList.ViewUpdater.ViewCache.clearAsyncValues()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  unint64_t v38;
  id v39;
  int64_t v40;
  unint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = 1 << *(_BYTE *)(v1 + 32);
  if (v2 < 64)
    v3 = ~(-1 << v2);
  else
    v3 = -1;
  v4 = v3 & *(_QWORD *)(v1 + 64);
  v45 = (unint64_t)(v2 + 63) >> 6;
  v46 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  v5 = 0;
  while (2)
  {
    if (!v4)
    {
      v7 = v5 + 1;
      if (__OFADD__(v5, 1))
        goto LABEL_69;
      if (v7 >= v45)
        goto LABEL_64;
      v8 = *(_QWORD *)(v44 + 8 * v7);
      v9 = v5 + 1;
      if (!v8)
      {
        v9 = v5 + 2;
        if (v5 + 2 >= v45)
          goto LABEL_64;
        v8 = *(_QWORD *)(v44 + 8 * v9);
        if (!v8)
        {
          v9 = v5 + 3;
          if (v5 + 3 >= v45)
            goto LABEL_64;
          v8 = *(_QWORD *)(v44 + 8 * v9);
          if (!v8)
          {
            v10 = v5 + 4;
            if (v5 + 4 < v45)
            {
              v8 = *(_QWORD *)(v44 + 8 * v10);
              if (v8)
              {
                v9 = v5 + 4;
                goto LABEL_21;
              }
              while (1)
              {
                v9 = v10 + 1;
                if (__OFADD__(v10, 1))
                  goto LABEL_70;
                if (v9 >= v45)
                  break;
                v8 = *(_QWORD *)(v44 + 8 * v9);
                ++v10;
                if (v8)
                  goto LABEL_21;
              }
            }
LABEL_64:
            swift_release();
            swift_bridgeObjectRelease();
            *(_QWORD *)(v43 + 40) = MEMORY[0x24BEE4B00];

            *(_QWORD *)(v43 + 56) = 0;
            return;
          }
        }
      }
LABEL_21:
      v47 = (v8 - 1) & v8;
      v48 = v9;
      v6 = __clz(__rbit64(v8)) + (v9 << 6);
      goto LABEL_22;
    }
    v47 = (v4 - 1) & v4;
    v48 = v5;
    v6 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_22:
    v11 = *(void **)(*(_QWORD *)(v46 + 48) + 8 * v6);
    v12 = (_QWORD *)(*(_QWORD *)(v46 + 56) + 16 * v6);
    v14 = *v12;
    v13 = v12[1];
    v15 = (_QWORD *)(*v12 + 56);
    v16 = 1 << *(_BYTE *)(*v12 + 32);
    if (v16 < 64)
      v17 = ~(-1 << v16);
    else
      v17 = -1;
    v18 = v17 & *v15;
    v19 = (unint64_t)(v16 + 63) >> 6;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v20 = 0;
    while (1)
    {
      if (v18)
      {
        v21 = __clz(__rbit64(v18));
        v18 &= v18 - 1;
        v22 = v21 | (v20 << 6);
        goto LABEL_27;
      }
      v27 = v20 + 1;
      if (__OFADD__(v20, 1))
      {
        __break(1u);
LABEL_66:
        __break(1u);
        goto LABEL_67;
      }
      if (v27 >= v19)
        goto LABEL_43;
      v28 = v15[v27];
      ++v20;
      if (!v28)
      {
        v20 = v27 + 1;
        if (v27 + 1 >= v19)
          goto LABEL_43;
        v28 = v15[v20];
        if (!v28)
        {
          v20 = v27 + 2;
          if (v27 + 2 >= v19)
            goto LABEL_43;
          v28 = v15[v20];
          if (!v28)
            break;
        }
      }
LABEL_42:
      v18 = (v28 - 1) & v28;
      v22 = __clz(__rbit64(v28)) + (v20 << 6);
LABEL_27:
      v23 = (uint64_t *)(*(_QWORD *)(v14 + 48) + 16 * v22);
      v24 = *v23;
      v25 = v23[1];
      swift_bridgeObjectRetain();
      v26 = (void *)MEMORY[0x23B7C5DAC](v24, v25);
      objc_msgSend(v11, sel_removeAnimationForKey_, v26);
      swift_bridgeObjectRelease();

    }
    v29 = v27 + 3;
    if (v29 < v19)
    {
      v28 = v15[v29];
      if (!v28)
      {
        while (1)
        {
          v20 = v29 + 1;
          if (__OFADD__(v29, 1))
            break;
          if (v20 >= v19)
            goto LABEL_43;
          v28 = v15[v20];
          ++v29;
          if (v28)
            goto LABEL_42;
        }
LABEL_67:
        __break(1u);
        goto LABEL_68;
      }
      v20 = v29;
      goto LABEL_42;
    }
LABEL_43:
    swift_release();
    v30 = v13 + 64;
    v31 = *(_QWORD *)(v13 + 64);
    v32 = 1 << *(_BYTE *)(v13 + 32);
    swift_bridgeObjectRelease();
    v33 = 0;
    if (v32 < 64)
      v34 = ~(-1 << v32);
    else
      v34 = -1;
    v35 = v34 & v31;
    v36 = (unint64_t)(v32 + 63) >> 6;
    while (2)
    {
      if (v35)
      {
        v37 = __clz(__rbit64(v35));
        v35 &= v35 - 1;
        v38 = v37 | (v33 << 6);
LABEL_48:
        v39 = *(id *)(*(_QWORD *)(v13 + 56) + 8 * v38);
        objc_msgSend(v11, sel_removePresentationModifier_, v39);

        continue;
      }
      break;
    }
    v40 = v33 + 1;
    if (__OFADD__(v33, 1))
      goto LABEL_66;
    if (v40 >= v36)
    {
LABEL_5:
      swift_release();
      v4 = v47;
      v5 = v48;
      continue;
    }
    break;
  }
  v41 = *(_QWORD *)(v30 + 8 * v40);
  ++v33;
  if (v41)
    goto LABEL_63;
  v33 = v40 + 1;
  if (v40 + 1 >= v36)
    goto LABEL_5;
  v41 = *(_QWORD *)(v30 + 8 * v33);
  if (v41)
    goto LABEL_63;
  v33 = v40 + 2;
  if (v40 + 2 >= v36)
    goto LABEL_5;
  v41 = *(_QWORD *)(v30 + 8 * v33);
  if (v41)
  {
LABEL_63:
    v35 = (v41 - 1) & v41;
    v38 = __clz(__rbit64(v41)) + (v33 << 6);
    goto LABEL_48;
  }
  v42 = v40 + 3;
  if (v42 >= v36)
    goto LABEL_5;
  v41 = *(_QWORD *)(v30 + 8 * v42);
  if (v41)
  {
    v33 = v42;
    goto LABEL_63;
  }
  while (1)
  {
    v33 = v42 + 1;
    if (__OFADD__(v42, 1))
      break;
    if (v33 >= v36)
      goto LABEL_5;
    v41 = *(_QWORD *)(v30 + 8 * v33);
    ++v42;
    if (v41)
      goto LABEL_63;
  }
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
}

Swift::Void __swiftcall DisplayList.ViewUpdater.ViewCache.reclaim(time:)(SwiftUI::Time time)
{
  double *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  int64_t v12;
  char **p_type;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  unint64_t v30;
  char v31;
  char v32;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v34;
  void *v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  int v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  unsigned int v61;
  int v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  unint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char v76;
  unint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  unsigned int v82;
  int v84;
  id v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  id v89;
  unint64_t v90;
  char v91;
  unint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  char v100;
  unint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  void *v106;
  unsigned int v107;
  BOOL v108;
  int v109;
  id v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  id v115;
  id v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  id v121;
  id v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  id v126;
  unint64_t v127;
  char v128;
  unint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  id v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  char v147;
  unint64_t v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  char v156;
  unint64_t v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  unsigned int v162;
  int v164;
  id v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  __int16 v175;
  void *v176;
  uint64_t v177;
  id v178;
  unint64_t v179;
  char v180;
  unint64_t v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  char v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  char v189;
  unint64_t v190;
  char v191;
  uint64_t v192;
  id v193;
  id v194;
  unint64_t v195;
  char *v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  void *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  __int16 v204;
  void *v205;
  uint64_t v206;
  id v207;
  unint64_t v208;
  char v209;
  unint64_t v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  char v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  char v218;
  unint64_t v219;
  char v220;
  uint64_t v221;
  id v222;
  unint64_t v223;
  uint64_t v224;
  unint64_t v225;
  char v226;
  unint64_t v227;
  int v228;
  uint64_t v229;
  uint64_t v230;
  char v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  char v235;
  unint64_t v236;
  int v237;
  uint64_t v238;
  uint64_t v239;
  void *v240;
  unsigned int v241;
  int v243;
  unint64_t v244;
  char *v245;
  char *v246;
  unint64_t v247;
  char v248;
  unint64_t v249;
  int v250;
  uint64_t v251;
  uint64_t v252;
  char v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  char v257;
  unint64_t v258;
  int v259;
  uint64_t v260;
  uint64_t v261;
  void *v262;
  unsigned int v263;
  int v265;
  id v266;
  unint64_t v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  void *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  void *v277;
  uint64_t v278;
  id v279;
  unint64_t v280;
  char v281;
  unint64_t v282;
  int v283;
  uint64_t v284;
  uint64_t v285;
  char v286;
  unint64_t v287;
  unint64_t v288;
  unint64_t v289;
  char v290;
  unint64_t v291;
  char v292;
  uint64_t v293;
  id v294;
  id v295;
  unint64_t v296;
  unint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  void *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  __int16 v305;
  void *v306;
  uint64_t v307;
  id v308;
  unint64_t v309;
  char v310;
  unint64_t v311;
  char v312;
  uint64_t v313;
  uint64_t v314;
  char v315;
  unint64_t v316;
  unint64_t v317;
  unint64_t v318;
  char v319;
  unint64_t v320;
  char v321;
  uint64_t v322;
  id v323;
  unint64_t v324;
  char *v325;
  char *v326;
  unint64_t v327;
  char v328;
  unint64_t v329;
  int v330;
  uint64_t v331;
  uint64_t v332;
  char v333;
  unint64_t v334;
  unint64_t v335;
  unint64_t v336;
  char v337;
  unint64_t v338;
  int v339;
  uint64_t v340;
  uint64_t v341;
  void *v342;
  unsigned int v343;
  int v345;
  id v346;
  unint64_t v347;
  unint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  void *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  __int16 v356;
  void *v357;
  uint64_t v358;
  id v359;
  unint64_t v360;
  char v361;
  unint64_t v362;
  char v363;
  uint64_t v364;
  uint64_t v365;
  char v366;
  unint64_t v367;
  unint64_t v368;
  unint64_t v369;
  char v370;
  unint64_t v371;
  char v372;
  uint64_t v373;
  id v374;
  id v375;
  unint64_t v376;
  unint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  void *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  __int16 v385;
  void *v386;
  uint64_t v387;
  id v388;
  unint64_t v389;
  char v390;
  unint64_t v391;
  char v392;
  uint64_t v393;
  uint64_t v394;
  char v395;
  unint64_t v396;
  unint64_t v397;
  unint64_t v398;
  char v399;
  unint64_t v400;
  char v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  id v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  id v412;
  unsigned int v413;
  uint64_t v414;
  uint64_t v415;
  int64_t v416;
  unsigned int v417;
  void *v418;
  unsigned int v419;
  unint64_t v420;
  int64_t v421;
  void *v422;
  void *v423;
  void *v424;
  unint64_t v425;
  unint64_t v426;
  id v427;
  id v428;
  id v429;
  int v430;
  uint64_t v431;
  id v432;
  id v433;
  int v434;
  uint64_t v435;
  unsigned int v436;
  unsigned int v437;
  int v438;
  void *v439;
  unsigned int v440;
  void *v441;
  void *v442;
  void *v443;
  unint64_t v444;
  void *v445;
  void *v446;
  void *v447;
  uint64_t v448;
  unint64_t v449;
  int v450;
  void *v451;
  int v452;
  id v453;
  id v454;
  char *v455;
  char *v456;
  unsigned int v457;
  id v458;
  id v459;
  char *v460;
  id v461;
  id v462;
  unint64_t v463;
  uint64_t v464;
  unint64_t v465;
  id v466;
  id v467;
  id v468;
  id v469;
  id v470;
  id v471;
  id v472[2];
  char *v473;
  int v474;
  __int128 v475;
  id v476;
  id v477;
  id v478;
  id v479;
  uint64_t v480;
  __int128 v481;
  char *v482;
  __int128 v483;
  __int128 v484;
  int v485;
  __int128 v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  id v490;
  __int128 v491;
  uint64_t v492;
  __int16 v493;
  __int128 v494;
  __int128 v495;
  __int128 v496;
  uint64_t v497;
  char v498;
  __int128 v499;
  __int128 v500;
  char v501;
  char v502;
  char v503;
  void *v504;
  char v505;
  char v506;
  char v507;
  char v508;
  char v509;
  char v510;
  int v511;
  char v512;
  char v513;
  int v514;
  int v515;
  int v516;
  __int16 v517;
  int v518;
  int v519;
  __int16 v520;
  __int16 v521;
  __int16 v522;
  unint64_t v523;
  unint64_t v524;
  __int16 v525;
  __int16 v526;
  unint64_t v527;
  unint64_t v528;
  unint64_t v529;
  void *v530;
  uint64_t *v531;
  _QWORD v532[3];
  __int128 v533;
  uint64_t v534;
  uint64_t v535;
  __int16 v536;
  void *v537;
  uint64_t v538;
  __int128 v539;
  __int16 v540;
  int v541;
  __int16 v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  void *v546;
  uint64_t v547;
  __int128 v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  void *v552;
  uint64_t v553;
  __int128 v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;

  v3 = v2;
  v4 = v2[3];
  v5 = *(_QWORD *)(v4 + 56);
  v414 = v4;
  v415 = v4 + 56;
  v6 = *v1;
  v7 = 1 << *(_BYTE *)(v4 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & v5;
  v416 = (unint64_t)(v7 + 63) >> 6;
  v10 = v3 + 1;
  swift_bridgeObjectRetain();
  v11 = v9;
  v12 = 0;
  p_type = &stru_250685FF0.type;
  v531 = v3 + 1;
  while (1)
  {
    while (1)
    {
      if (v11)
      {
        v14 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v15 = v14 | (v12 << 6);
      }
      else
      {
        if (__OFADD__(v12++, 1))
          goto LABEL_280;
        if (v12 >= v416)
          goto LABEL_270;
        v17 = *(_QWORD *)(v415 + 8 * v12);
        if (!v17)
        {
          v18 = v12 + 1;
          if (v12 + 1 >= v416)
            goto LABEL_270;
          v17 = *(_QWORD *)(v415 + 8 * v18);
          if (!v17)
          {
            v18 = v12 + 2;
            if (v12 + 2 >= v416)
              goto LABEL_270;
            v17 = *(_QWORD *)(v415 + 8 * v18);
            if (!v17)
            {
              v18 = v12 + 3;
              if (v12 + 3 >= v416)
                goto LABEL_270;
              v17 = *(_QWORD *)(v415 + 8 * v18);
              if (!v17)
              {
                while (1)
                {
                  v12 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_287;
                  if (v12 >= v416)
                    break;
                  v17 = *(_QWORD *)(v415 + 8 * v12);
                  ++v18;
                  if (v17)
                    goto LABEL_18;
                }
LABEL_270:
                swift_release();
                swift_bridgeObjectRelease();
                v3[3] = MEMORY[0x24BEE4B08];
                if (*(_QWORD *)(v3[4] + 16))
                {
                  v403 = swift_bridgeObjectRetain();
                  v404 = specialized _NativeDictionary.filter(_:)(v403, v6);
                  swift_bridgeObjectRelease_n();
                  v3[4] = v404;
                }
                ++*((_DWORD *)v3 + 23);
                return;
              }
            }
          }
          v12 = v18;
        }
LABEL_18:
        v11 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      v19 = *v10;
      if (*(_QWORD *)(*v10 + 16))
      {
        v420 = v11;
        v421 = v12;
        v20 = *(_QWORD *)(v414 + 48) + 20 * v15;
        v21 = *(_BYTE *)(v20 + 16);
        v22 = *(_QWORD *)v20;
        v23 = *(_QWORD *)(v20 + 8);
        v24 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)v20, v23, v21);
        v11 = v420;
        v12 = v421;
        if ((v25 & 1) != 0)
        {
          v26 = *(_QWORD *)(v19 + 56) + 120 * v24;
          if (*(_BYTE *)(v26 + 104) == 1)
            break;
        }
      }
    }
    v28 = *(void **)v26;
    v27 = *(void **)(v26 + 8);
    v29 = *(void **)(v26 + 16);
    v413 = *(unsigned __int8 *)(v26 + 56);
    v30 = specialized __RawDictionaryStorage.find<A>(_:)(v22, v23, v21);
    v32 = v31;
    swift_unknownObjectRetain();
    v412 = v27;
    swift_unknownObjectRetain();
    if ((v32 & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v34 = *v10;
      v545 = *v10;
      *v10 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        specialized _NativeDictionary.copy()();
        v34 = v545;
      }
      v35 = *(void **)(*(_QWORD *)(v34 + 56) + 120 * v30 + 8);
      specialized _NativeDictionary._delete(at:)(v30, v34);
      *v10 = v34;
      swift_unknownObjectRelease();

      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
    }
    v36 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)v28);
    if ((v37 & 1) != 0)
    {
      v38 = v36;
      v39 = swift_isUniquelyReferenced_nonNull_native();
      v40 = v3[2];
      v545 = v40;
      v3[2] = 0x8000000000000000;
      if (!v39)
      {
        specialized _NativeDictionary.copy()();
        v40 = v545;
      }
      specialized _NativeDictionary._delete(at:)(v38, v40);
      v3[2] = v40;
      swift_bridgeObjectRelease();
    }
    if (v413 > 0x10 || ((1 << v413) & 0x15F01) == 0)
      goto LABEL_5;
    v42 = *(_DWORD *)v3 & 3;
    v427 = (id)CoreViewSubviews(v42, v29);
    v43 = (unint64_t)objc_msgSend(v427, sel_count);
    if ((v43 & 0x8000000000000000) != 0)
      goto LABEL_286;
    v530 = v28;
    if (v43)
      break;
LABEL_158:

    if (v413 == 12)
    {
      v222 = (id)CoreViewMaskView(v42, v28);
      if (v222)
      {
        v428 = (id)CoreViewSubviews(v42, v222);
        v223 = (unint64_t)objc_msgSend(v428, sel_count);
        if ((v223 & 0x8000000000000000) != 0)
          goto LABEL_290;
        if (v223)
        {
          v224 = 0;
          v426 = v223;
          do
          {
            v435 = v224;
            v432 = objc_msgSend(v428, p_type[319], v405, v406, v407, v408, v409, v410, v411);
            v225 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)v432);
            if ((v226 & 1) != 0)
            {
              v227 = v225;
              v228 = swift_isUniquelyReferenced_nonNull_native();
              v229 = v3[2];
              v545 = v229;
              v3[2] = 0x8000000000000000;
              if (!v228)
              {
                specialized _NativeDictionary.copy()();
                v229 = v545;
              }
              v230 = *(_QWORD *)(v229 + 56) + 20 * v227;
              v231 = *(_BYTE *)(v230 + 16);
              v232 = *(_QWORD *)v230;
              v233 = *(_QWORD *)(v230 + 8);
              specialized _NativeDictionary._delete(at:)(v227, v229);
              v3[2] = v229;
              swift_bridgeObjectRelease();
              v234 = specialized __RawDictionaryStorage.find<A>(_:)(v232, v233, v231);
              if ((v235 & 1) != 0)
              {
                v236 = v234;
                v237 = swift_isUniquelyReferenced_nonNull_native();
                v238 = *v10;
                v545 = *v10;
                *v10 = 0x8000000000000000;
                if (!v237)
                {
                  specialized _NativeDictionary.copy()();
                  v238 = v545;
                }
                v239 = *(_QWORD *)(v238 + 56) + 120 * v236;
                v240 = *(void **)(v239 + 16);
                v422 = *(void **)(v239 + 8);
                v424 = *(void **)v239;
                v241 = *(unsigned __int8 *)(v239 + 56);
                specialized _NativeDictionary._delete(at:)(v236, v238);
                *v10 = v238;
                swift_bridgeObjectRelease();
                if (v241 <= 0x10 && ((1 << v241) & 0x15F01) != 0)
                {
                  v419 = v241;
                  v243 = *(_DWORD *)v3 & 3;
                  v461 = (id)CoreViewSubviews(v243, v240);
                  v244 = (unint64_t)objc_msgSend(v461, sel_count);
                  if ((v244 & 0x8000000000000000) != 0)
                    goto LABEL_284;
                  if (v244)
                  {
                    v245 = 0;
                    v450 = v243;
                    v455 = (char *)v244;
                    do
                    {
                      v482 = v245;
                      v477 = objc_msgSend(v461, p_type[319], v245);
                      v247 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)v477);
                      if ((v248 & 1) != 0)
                      {
                        v249 = v247;
                        v250 = swift_isUniquelyReferenced_nonNull_native();
                        v251 = v3[2];
                        v545 = v251;
                        v3[2] = 0x8000000000000000;
                        if (!v250)
                        {
                          specialized _NativeDictionary.copy()();
                          v251 = v545;
                        }
                        v252 = *(_QWORD *)(v251 + 56) + 20 * v249;
                        v253 = *(_BYTE *)(v252 + 16);
                        v254 = *(_QWORD *)v252;
                        v255 = *(_QWORD *)(v252 + 8);
                        specialized _NativeDictionary._delete(at:)(v249, v251);
                        v3[2] = v251;
                        swift_bridgeObjectRelease();
                        v256 = specialized __RawDictionaryStorage.find<A>(_:)(v254, v255, v253);
                        if ((v257 & 1) != 0)
                        {
                          v258 = v256;
                          v259 = swift_isUniquelyReferenced_nonNull_native();
                          v260 = *v10;
                          v545 = *v10;
                          *v10 = 0x8000000000000000;
                          v243 = v450;
                          if (!v259)
                          {
                            specialized _NativeDictionary.copy()();
                            v260 = v545;
                          }
                          v261 = *(_QWORD *)(v260 + 56) + 120 * v258;
                          v262 = *(void **)(v261 + 16);
                          v443 = *(void **)(v261 + 8);
                          v446 = *(void **)v261;
                          v263 = *(unsigned __int8 *)(v261 + 56);
                          specialized _NativeDictionary._delete(at:)(v258, v260);
                          *v10 = v260;
                          swift_bridgeObjectRelease();
                          v437 = v263;
                          if (v263 > 0x10 || ((1 << v263) & 0x15F01) == 0)
                            goto LABEL_222;
                          v265 = *(_DWORD *)v3 & 3;
                          v266 = (id)CoreViewSubviews(v265, v262);
                          v267 = (unint64_t)objc_msgSend(v266, sel_count);
                          if ((v267 & 0x8000000000000000) != 0)
                            goto LABEL_276;
                          v268 = v267;
                          v430 = v265;
                          if (v267)
                          {
                            v269 = 0;
                            v465 = v267;
                            v471 = v266;
                            do
                            {
                              v279 = objc_msgSend(v266, sel_objectAtIndexedSubscript_, v269);
                              v280 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)v279);
                              if ((v281 & 1) != 0)
                              {
                                v282 = v280;
                                v283 = swift_isUniquelyReferenced_nonNull_native();
                                v284 = v3[2];
                                v545 = v284;
                                v3[2] = 0x8000000000000000;
                                if (!v283)
                                {
                                  specialized _NativeDictionary.copy()();
                                  v284 = v545;
                                }
                                v285 = *(_QWORD *)(v284 + 56) + 20 * v282;
                                v286 = *(_BYTE *)(v285 + 16);
                                v287 = *(_QWORD *)v285;
                                v288 = *(_QWORD *)(v285 + 8);
                                specialized _NativeDictionary._delete(at:)(v282, v284);
                                v3[2] = v284;
                                swift_bridgeObjectRelease();
                                v289 = specialized __RawDictionaryStorage.find<A>(_:)(v287, v288, v286);
                                if ((v290 & 1) != 0)
                                {
                                  v291 = v289;
                                  v292 = swift_isUniquelyReferenced_nonNull_native();
                                  v293 = *v531;
                                  v545 = *v531;
                                  *v531 = 0x8000000000000000;
                                  if ((v292 & 1) == 0)
                                  {
                                    specialized _NativeDictionary.copy()();
                                    v293 = v545;
                                  }
                                  v270 = *(_QWORD *)(v293 + 56) + 120 * v291;
                                  v271 = *(_QWORD *)v270;
                                  v272 = *(void **)(v270 + 8);
                                  v273 = *(_QWORD *)(v270 + 16);
                                  v500 = *(_OWORD *)(v270 + 24);
                                  v274 = *(_QWORD *)(v270 + 40);
                                  v275 = *(_QWORD *)(v270 + 48);
                                  v493 = *(_WORD *)(v270 + 56);
                                  v277 = *(void **)(v270 + 64);
                                  v276 = *(_QWORD *)(v270 + 72);
                                  v526 = *(_WORD *)(v270 + 96);
                                  v519 = *(_DWORD *)(v270 + 100);
                                  v513 = *(_BYTE *)(v270 + 104);
                                  v507 = *(_BYTE *)(v270 + 105);
                                  v278 = *(_QWORD *)(v270 + 112);
                                  v486 = *(_OWORD *)(v270 + 80);
                                  specialized _NativeDictionary._delete(at:)(v291, v293);
                                  v3[1] = v293;
                                  swift_bridgeObjectRelease();
                                  v532[0] = *v3;
                                  v545 = v271;
                                  v546 = v272;
                                  v547 = v273;
                                  v548 = v500;
                                  v549 = v274;
                                  v550 = v275;
                                  LOWORD(v551) = v493;
                                  v552 = v277;
                                  v553 = v276;
                                  v554 = v486;
                                  LOWORD(v555) = v526;
                                  HIDWORD(v555) = v519;
                                  LOBYTE(v556) = v513;
                                  BYTE1(v556) = v507;
                                  v557 = v278;
                                  specialized DisplayList.ViewUpdater.Platform.forEachChild(of:do:)((uint64_t)&v545, v532, v3);
                                  swift_unknownObjectRelease();

                                  swift_unknownObjectRelease();
                                  v268 = v465;
                                  v266 = v471;
                                }
                              }
                              ++v269;
                              CoreViewRemoveFromSuperview(*(_DWORD *)v3 & 3, v279);
                              swift_unknownObjectRelease();
                            }
                            while (v268 != v269);
                          }

                          if (v437 != 12)
                            goto LABEL_221;
                          v294 = (id)CoreViewMaskView(v430, v446);
                          v10 = v3 + 1;
                          p_type = (char **)(&stru_250685FF0 + 16);
                          v243 = v450;
                          v246 = v482;
                          if (v294)
                          {
                            v295 = (id)CoreViewSubviews(v430, v294);
                            v296 = (unint64_t)objc_msgSend(v295, sel_count);
                            if ((v296 & 0x8000000000000000) != 0)
                              goto LABEL_281;
                            v297 = v296;
                            if (v296)
                            {
                              v298 = 0;
                              v466 = v295;
                              v527 = v296;
                              do
                              {
                                v308 = objc_msgSend(v295, sel_objectAtIndexedSubscript_, v298);
                                v309 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)v308);
                                if ((v310 & 1) != 0)
                                {
                                  v311 = v309;
                                  v312 = swift_isUniquelyReferenced_nonNull_native();
                                  v313 = v3[2];
                                  v545 = v313;
                                  v3[2] = 0x8000000000000000;
                                  if ((v312 & 1) == 0)
                                  {
                                    specialized _NativeDictionary.copy()();
                                    v313 = v545;
                                  }
                                  v314 = *(_QWORD *)(v313 + 56) + 20 * v311;
                                  v315 = *(_BYTE *)(v314 + 16);
                                  v316 = *(_QWORD *)v314;
                                  v317 = *(_QWORD *)(v314 + 8);
                                  specialized _NativeDictionary._delete(at:)(v311, v313);
                                  v3[2] = v313;
                                  swift_bridgeObjectRelease();
                                  v318 = specialized __RawDictionaryStorage.find<A>(_:)(v316, v317, v315);
                                  v297 = v527;
                                  if ((v319 & 1) != 0)
                                  {
                                    v320 = v318;
                                    v321 = swift_isUniquelyReferenced_nonNull_native();
                                    v322 = *v531;
                                    v545 = *v531;
                                    *v531 = 0x8000000000000000;
                                    if ((v321 & 1) == 0)
                                    {
                                      specialized _NativeDictionary.copy()();
                                      v322 = v545;
                                    }
                                    v299 = *(_QWORD *)(v322 + 56) + 120 * v320;
                                    v300 = *(_QWORD *)v299;
                                    v301 = *(void **)(v299 + 8);
                                    v302 = *(_QWORD *)(v299 + 16);
                                    v494 = *(_OWORD *)(v299 + 24);
                                    v303 = *(_QWORD *)(v299 + 40);
                                    v304 = *(_QWORD *)(v299 + 48);
                                    v305 = *(_WORD *)(v299 + 56);
                                    v306 = *(void **)(v299 + 64);
                                    v487 = *(_QWORD *)(v299 + 72);
                                    v520 = *(_WORD *)(v299 + 96);
                                    v514 = *(_DWORD *)(v299 + 100);
                                    v508 = *(_BYTE *)(v299 + 104);
                                    v501 = *(_BYTE *)(v299 + 105);
                                    v307 = *(_QWORD *)(v299 + 112);
                                    *(_OWORD *)v472 = *(_OWORD *)(v299 + 80);
                                    specialized _NativeDictionary._delete(at:)(v320, v322);
                                    v3[1] = v322;
                                    swift_bridgeObjectRelease();
                                    v532[0] = *v3;
                                    v545 = v300;
                                    v546 = v301;
                                    v547 = v302;
                                    v548 = v494;
                                    v549 = v303;
                                    v550 = v304;
                                    LOWORD(v551) = v305;
                                    v552 = v306;
                                    v553 = v487;
                                    v554 = *(_OWORD *)v472;
                                    LOWORD(v555) = v520;
                                    HIDWORD(v555) = v514;
                                    LOBYTE(v556) = v508;
                                    BYTE1(v556) = v501;
                                    v557 = v307;
                                    specialized DisplayList.ViewUpdater.Platform.forEachChild(of:do:)((uint64_t)&v545, v532, v3);
                                    swift_unknownObjectRelease();

                                    swift_unknownObjectRelease();
                                    v297 = v527;
                                    v295 = v466;
                                  }
                                }
                                ++v298;
                                CoreViewRemoveFromSuperview(*(_DWORD *)v3 & 3, v308);
                                swift_unknownObjectRelease();
                              }
                              while (v297 != v298);
                            }
                            swift_unknownObjectRelease();

LABEL_221:
                            v10 = v3 + 1;
                            p_type = (char **)(&stru_250685FF0 + 16);
                            v243 = v450;
LABEL_222:
                            v246 = v482;
                          }
                          swift_unknownObjectRelease();

                          swift_unknownObjectRelease();
                          goto LABEL_185;
                        }
                        v243 = v450;
                      }
                      v246 = v482;
LABEL_185:
                      v245 = v246 + 1;
                      CoreViewRemoveFromSuperview(*(_DWORD *)v3 & 3, v477);
                      swift_unknownObjectRelease();
                    }
                    while (v245 != v455);
                  }

                  if (v419 == 12)
                  {
                    v323 = (id)CoreViewMaskView(v243, v424);
                    if (v323)
                    {
                      v462 = (id)CoreViewSubviews(v243, v323);
                      v324 = (unint64_t)objc_msgSend(v462, sel_count);
                      if ((v324 & 0x8000000000000000) != 0)
                        goto LABEL_289;
                      v325 = (char *)v324;
                      if (v324)
                      {
                        v326 = 0;
                        v456 = (char *)v324;
                        do
                        {
                          v478 = objc_msgSend(v462, p_type[319], v326);
                          v327 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)v478);
                          if ((v328 & 1) != 0)
                          {
                            v329 = v327;
                            v473 = v326;
                            v330 = swift_isUniquelyReferenced_nonNull_native();
                            v331 = v3[2];
                            v545 = v331;
                            v3[2] = 0x8000000000000000;
                            if (!v330)
                            {
                              specialized _NativeDictionary.copy()();
                              v331 = v545;
                            }
                            v332 = *(_QWORD *)(v331 + 56) + 20 * v329;
                            v333 = *(_BYTE *)(v332 + 16);
                            v334 = *(_QWORD *)v332;
                            v335 = *(_QWORD *)(v332 + 8);
                            specialized _NativeDictionary._delete(at:)(v329, v331);
                            v3[2] = v331;
                            swift_bridgeObjectRelease();
                            v336 = specialized __RawDictionaryStorage.find<A>(_:)(v334, v335, v333);
                            if ((v337 & 1) != 0)
                            {
                              v338 = v336;
                              v339 = swift_isUniquelyReferenced_nonNull_native();
                              v340 = *v10;
                              v545 = *v10;
                              *v10 = 0x8000000000000000;
                              v325 = v456;
                              v326 = v473;
                              if (!v339)
                              {
                                specialized _NativeDictionary.copy()();
                                v340 = v545;
                              }
                              v341 = *(_QWORD *)(v340 + 56) + 120 * v338;
                              v342 = *(void **)(v341 + 16);
                              v447 = *(void **)(v341 + 8);
                              v451 = *(void **)v341;
                              v343 = *(unsigned __int8 *)(v341 + 56);
                              specialized _NativeDictionary._delete(at:)(v338, v340);
                              *v10 = v340;
                              swift_bridgeObjectRelease();
                              v440 = v343;
                              if (v343 <= 0x10 && ((1 << v343) & 0x15F01) != 0)
                              {
                                v345 = *(_DWORD *)v3 & 3;
                                v346 = (id)CoreViewSubviews(v345, v342);
                                v347 = (unint64_t)objc_msgSend(v346, sel_count);
                                if ((v347 & 0x8000000000000000) != 0)
                                  goto LABEL_282;
                                v348 = v347;
                                v438 = v345;
                                if (v347)
                                {
                                  v349 = 0;
                                  v467 = v346;
                                  v528 = v347;
                                  do
                                  {
                                    v359 = objc_msgSend(v346, p_type[319], v349);
                                    v360 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)v359);
                                    if ((v361 & 1) != 0)
                                    {
                                      v362 = v360;
                                      v363 = swift_isUniquelyReferenced_nonNull_native();
                                      v364 = v3[2];
                                      v545 = v364;
                                      v3[2] = 0x8000000000000000;
                                      if ((v363 & 1) == 0)
                                      {
                                        specialized _NativeDictionary.copy()();
                                        v364 = v545;
                                      }
                                      v365 = *(_QWORD *)(v364 + 56) + 20 * v362;
                                      v366 = *(_BYTE *)(v365 + 16);
                                      v367 = *(_QWORD *)v365;
                                      v368 = *(_QWORD *)(v365 + 8);
                                      specialized _NativeDictionary._delete(at:)(v362, v364);
                                      v3[2] = v364;
                                      swift_bridgeObjectRelease();
                                      v369 = specialized __RawDictionaryStorage.find<A>(_:)(v367, v368, v366);
                                      v348 = v528;
                                      if ((v370 & 1) != 0)
                                      {
                                        v371 = v369;
                                        v372 = swift_isUniquelyReferenced_nonNull_native();
                                        v373 = *v531;
                                        v545 = *v531;
                                        *v531 = 0x8000000000000000;
                                        if ((v372 & 1) == 0)
                                        {
                                          specialized _NativeDictionary.copy()();
                                          v373 = v545;
                                        }
                                        v350 = *(_QWORD *)(v373 + 56) + 120 * v371;
                                        v351 = *(_QWORD *)v350;
                                        v352 = *(void **)(v350 + 8);
                                        v353 = *(_QWORD *)(v350 + 16);
                                        v495 = *(_OWORD *)(v350 + 24);
                                        v354 = *(_QWORD *)(v350 + 40);
                                        v355 = *(_QWORD *)(v350 + 48);
                                        v356 = *(_WORD *)(v350 + 56);
                                        v357 = *(void **)(v350 + 64);
                                        v488 = *(_QWORD *)(v350 + 72);
                                        v521 = *(_WORD *)(v350 + 96);
                                        v515 = *(_DWORD *)(v350 + 100);
                                        v509 = *(_BYTE *)(v350 + 104);
                                        v502 = *(_BYTE *)(v350 + 105);
                                        v358 = *(_QWORD *)(v350 + 112);
                                        v483 = *(_OWORD *)(v350 + 80);
                                        specialized _NativeDictionary._delete(at:)(v371, v373);
                                        v3[1] = v373;
                                        swift_bridgeObjectRelease();
                                        v532[0] = *v3;
                                        v545 = v351;
                                        v546 = v352;
                                        v547 = v353;
                                        v548 = v495;
                                        v549 = v354;
                                        v550 = v355;
                                        LOWORD(v551) = v356;
                                        v552 = v357;
                                        v553 = v488;
                                        v554 = v483;
                                        LOWORD(v555) = v521;
                                        HIDWORD(v555) = v515;
                                        LOBYTE(v556) = v509;
                                        BYTE1(v556) = v502;
                                        v557 = v358;
                                        specialized DisplayList.ViewUpdater.Platform.forEachChild(of:do:)((uint64_t)&v545, v532, v3);
                                        swift_unknownObjectRelease();

                                        swift_unknownObjectRelease();
                                        p_type = &stru_250685FF0.type;
                                        v348 = v528;
                                        v346 = v467;
                                      }
                                    }
                                    ++v349;
                                    CoreViewRemoveFromSuperview(*(_DWORD *)v3 & 3, v359);
                                    swift_unknownObjectRelease();
                                  }
                                  while (v348 != v349);
                                }

                                if (v440 != 12)
                                {
                                  v10 = v3 + 1;
                                  goto LABEL_267;
                                }
                                v374 = (id)CoreViewMaskView(v438, v451);
                                v10 = v3 + 1;
                                v325 = v456;
                                v326 = v473;
                                if (v374)
                                {
                                  v375 = (id)CoreViewSubviews(v438, v374);
                                  v376 = (unint64_t)objc_msgSend(v375, sel_count);
                                  if ((v376 & 0x8000000000000000) != 0)
                                    goto LABEL_288;
                                  v377 = v376;
                                  if (v376)
                                  {
                                    v378 = 0;
                                    v468 = v375;
                                    v529 = v376;
                                    do
                                    {
                                      v388 = objc_msgSend(v375, sel_objectAtIndexedSubscript_, v378);
                                      v389 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)v388);
                                      if ((v390 & 1) != 0)
                                      {
                                        v391 = v389;
                                        v392 = swift_isUniquelyReferenced_nonNull_native();
                                        v393 = v3[2];
                                        v545 = v393;
                                        v3[2] = 0x8000000000000000;
                                        if ((v392 & 1) == 0)
                                        {
                                          specialized _NativeDictionary.copy()();
                                          v393 = v545;
                                        }
                                        v394 = *(_QWORD *)(v393 + 56) + 20 * v391;
                                        v395 = *(_BYTE *)(v394 + 16);
                                        v396 = *(_QWORD *)v394;
                                        v397 = *(_QWORD *)(v394 + 8);
                                        specialized _NativeDictionary._delete(at:)(v391, v393);
                                        v3[2] = v393;
                                        swift_bridgeObjectRelease();
                                        v398 = specialized __RawDictionaryStorage.find<A>(_:)(v396, v397, v395);
                                        v10 = v3 + 1;
                                        v377 = v529;
                                        if ((v399 & 1) != 0)
                                        {
                                          v400 = v398;
                                          v401 = swift_isUniquelyReferenced_nonNull_native();
                                          v402 = *v531;
                                          v545 = *v531;
                                          *v531 = 0x8000000000000000;
                                          if ((v401 & 1) == 0)
                                          {
                                            specialized _NativeDictionary.copy()();
                                            v402 = v545;
                                          }
                                          v379 = *(_QWORD *)(v402 + 56) + 120 * v400;
                                          v380 = *(_QWORD *)v379;
                                          v381 = *(void **)(v379 + 8);
                                          v382 = *(_QWORD *)(v379 + 16);
                                          v496 = *(_OWORD *)(v379 + 24);
                                          v383 = *(_QWORD *)(v379 + 40);
                                          v384 = *(_QWORD *)(v379 + 48);
                                          v385 = *(_WORD *)(v379 + 56);
                                          v386 = *(void **)(v379 + 64);
                                          v489 = *(_QWORD *)(v379 + 72);
                                          v522 = *(_WORD *)(v379 + 96);
                                          v516 = *(_DWORD *)(v379 + 100);
                                          v510 = *(_BYTE *)(v379 + 104);
                                          v503 = *(_BYTE *)(v379 + 105);
                                          v387 = *(_QWORD *)(v379 + 112);
                                          v484 = *(_OWORD *)(v379 + 80);
                                          specialized _NativeDictionary._delete(at:)(v400, v402);
                                          v3[1] = v402;
                                          swift_bridgeObjectRelease();
                                          v532[0] = *v3;
                                          v545 = v380;
                                          v546 = v381;
                                          v547 = v382;
                                          v548 = v496;
                                          v549 = v383;
                                          v550 = v384;
                                          LOWORD(v551) = v385;
                                          v552 = v386;
                                          v553 = v489;
                                          v554 = v484;
                                          LOWORD(v555) = v522;
                                          HIDWORD(v555) = v516;
                                          LOBYTE(v556) = v510;
                                          BYTE1(v556) = v503;
                                          v557 = v387;
                                          specialized DisplayList.ViewUpdater.Platform.forEachChild(of:do:)((uint64_t)&v545, v532, v3);
                                          swift_unknownObjectRelease();

                                          swift_unknownObjectRelease();
                                          v10 = v3 + 1;
                                          v375 = v468;
                                          v377 = v529;
                                        }
                                      }
                                      ++v378;
                                      CoreViewRemoveFromSuperview(*(_DWORD *)v3 & 3, v388);
                                      swift_unknownObjectRelease();
                                    }
                                    while (v377 != v378);
                                  }
                                  swift_unknownObjectRelease();

                                  p_type = (char **)(&stru_250685FF0 + 16);
LABEL_267:
                                  v325 = v456;
                                  v326 = v473;
                                }
                              }
                              swift_unknownObjectRelease();

                              swift_unknownObjectRelease();
                              goto LABEL_230;
                            }
                            v325 = v456;
                            v326 = v473;
                          }
LABEL_230:
                          ++v326;
                          CoreViewRemoveFromSuperview(*(_DWORD *)v3 & 3, v478);
                          swift_unknownObjectRelease();
                        }
                        while (v326 != v325);
                      }
                      swift_unknownObjectRelease();

                    }
                  }
                }
                swift_unknownObjectRelease();

                swift_unknownObjectRelease();
              }
            }
            CoreViewRemoveFromSuperview(*(_DWORD *)v3 & 3, v432);
            swift_unknownObjectRelease();
            v224 = v435 + 1;
          }
          while (v435 + 1 != v426);
        }
        swift_unknownObjectRelease();

      }
    }
LABEL_5:
    swift_unknownObjectRelease();

    swift_unknownObjectRelease();
    v11 = v420;
    v12 = v421;
  }
  v44 = 0;
  v485 = v42;
  v425 = v43;
  while (1)
  {
    v431 = v44;
    v429 = objc_msgSend(v427, p_type[319], v405, v406, v407, v408, v409, v410, v411);
    v45 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)v429);
    if ((v46 & 1) == 0)
      goto LABEL_38;
    v47 = v45;
    v48 = swift_isUniquelyReferenced_nonNull_native();
    v49 = v3[2];
    v545 = v49;
    v3[2] = 0x8000000000000000;
    if (!v48)
    {
      specialized _NativeDictionary.copy()();
      v49 = v545;
    }
    v50 = *(_QWORD *)(v49 + 56) + 20 * v47;
    v51 = *(_BYTE *)(v50 + 16);
    v52 = *(_QWORD *)v50;
    v53 = *(_QWORD *)(v50 + 8);
    specialized _NativeDictionary._delete(at:)(v47, v49);
    v3[2] = v49;
    swift_bridgeObjectRelease();
    v54 = specialized __RawDictionaryStorage.find<A>(_:)(v52, v53, v51);
    if ((v55 & 1) != 0)
      break;
    v42 = v485;
LABEL_38:
    CoreViewRemoveFromSuperview(*(_DWORD *)v3 & 3, v429);
    swift_unknownObjectRelease();
    v44 = v431 + 1;
    if (v431 + 1 == v425)
      goto LABEL_158;
  }
  v56 = v54;
  v57 = swift_isUniquelyReferenced_nonNull_native();
  v58 = *v10;
  v545 = *v10;
  *v10 = 0x8000000000000000;
  v42 = v485;
  if (!v57)
  {
    specialized _NativeDictionary.copy()();
    v58 = v545;
  }
  v59 = *(_QWORD *)(v58 + 56) + 120 * v56;
  v423 = *(void **)v59;
  v60 = *(void **)(v59 + 16);
  v418 = *(void **)(v59 + 8);
  v61 = *(unsigned __int8 *)(v59 + 56);
  specialized _NativeDictionary._delete(at:)(v56, v58);
  *v10 = v58;
  swift_bridgeObjectRelease();
  if (v61 > 0x10 || ((1 << v61) & 0x15F01) == 0)
  {
LABEL_156:
    swift_unknownObjectRelease();

    swift_unknownObjectRelease();
    goto LABEL_38;
  }
  v417 = v61;
  v63 = *(_DWORD *)v3 & 3;
  v469 = (id)CoreViewSubviews(v63, v60);
  v64 = (unint64_t)objc_msgSend(v469, sel_count);
  if ((v64 & 0x8000000000000000) != 0)
    goto LABEL_279;
  if (!v64)
  {
LABEL_110:

    if (v417 == 12)
    {
      v142 = (id)CoreViewMaskView(v63, v423);
      if (v142)
      {
        v454 = (id)CoreViewSubviews(v63, v142);
        v143 = (unint64_t)objc_msgSend(v454, sel_count);
        if ((v143 & 0x8000000000000000) != 0)
          goto LABEL_285;
        v144 = v143;
        if (v143)
        {
          v145 = 0;
          v449 = v143;
          do
          {
            v470 = objc_msgSend(v454, p_type[319], v145, v405, v406, v407, v408, v409, v410, v411);
            v146 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)v470);
            if ((v147 & 1) != 0)
            {
              v148 = v146;
              v464 = v145;
              v149 = swift_isUniquelyReferenced_nonNull_native();
              v150 = v3[2];
              v545 = v150;
              v3[2] = 0x8000000000000000;
              if (!v149)
              {
                specialized _NativeDictionary.copy()();
                v150 = v545;
              }
              v151 = *(_QWORD *)(v150 + 56) + 20 * v148;
              v152 = *(_BYTE *)(v151 + 16);
              v153 = *(_QWORD *)v151;
              v154 = *(_QWORD *)(v151 + 8);
              specialized _NativeDictionary._delete(at:)(v148, v150);
              v3[2] = v150;
              swift_bridgeObjectRelease();
              v155 = specialized __RawDictionaryStorage.find<A>(_:)(v153, v154, v152);
              if ((v156 & 1) != 0)
              {
                v157 = v155;
                v158 = swift_isUniquelyReferenced_nonNull_native();
                v159 = *v10;
                v545 = *v10;
                *v10 = 0x8000000000000000;
                v42 = v485;
                v144 = v449;
                v145 = v464;
                if (!v158)
                {
                  specialized _NativeDictionary.copy()();
                  v159 = v545;
                }
                v160 = *(_QWORD *)(v159 + 56) + 120 * v157;
                v161 = *(void **)(v160 + 16);
                v442 = *(void **)(v160 + 8);
                v445 = *(void **)v160;
                v162 = *(unsigned __int8 *)(v160 + 56);
                specialized _NativeDictionary._delete(at:)(v157, v159);
                *v10 = v159;
                swift_bridgeObjectRelease();
                v436 = v162;
                if (v162 > 0x10 || ((1 << v162) & 0x15F01) == 0)
                {
                  v28 = v530;
                }
                else
                {
                  v164 = *(_DWORD *)v3 & 3;
                  v165 = (id)CoreViewSubviews(v164, v161);
                  v166 = (unint64_t)objc_msgSend(v165, sel_count);
                  if ((v166 & 0x8000000000000000) != 0)
                    goto LABEL_277;
                  v167 = v166;
                  v434 = v164;
                  if (v166)
                  {
                    v168 = 0;
                    v459 = v165;
                    v524 = v166;
                    do
                    {
                      v178 = objc_msgSend(v165, p_type[319], v168);
                      v179 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)v178);
                      if ((v180 & 1) != 0)
                      {
                        v181 = v179;
                        v182 = swift_isUniquelyReferenced_nonNull_native();
                        v183 = v3[2];
                        v545 = v183;
                        v3[2] = 0x8000000000000000;
                        if (!v182)
                        {
                          specialized _NativeDictionary.copy()();
                          v183 = v545;
                        }
                        v184 = *(_QWORD *)(v183 + 56) + 20 * v181;
                        v185 = *(_BYTE *)(v184 + 16);
                        v186 = *(_QWORD *)v184;
                        v187 = *(_QWORD *)(v184 + 8);
                        specialized _NativeDictionary._delete(at:)(v181, v183);
                        v3[2] = v183;
                        swift_bridgeObjectRelease();
                        v188 = specialized __RawDictionaryStorage.find<A>(_:)(v186, v187, v185);
                        p_type = (char **)(&stru_250685FF0 + 16);
                        v167 = v524;
                        if ((v189 & 1) != 0)
                        {
                          v190 = v188;
                          v191 = swift_isUniquelyReferenced_nonNull_native();
                          v192 = *v10;
                          v545 = *v10;
                          *v10 = 0x8000000000000000;
                          if ((v191 & 1) == 0)
                          {
                            specialized _NativeDictionary.copy()();
                            v192 = v545;
                          }
                          v169 = *(_QWORD *)(v192 + 56) + 120 * v190;
                          v170 = *(_QWORD *)v169;
                          v171 = *(void **)(v169 + 8);
                          v172 = *(_QWORD *)(v169 + 16);
                          v491 = *(_OWORD *)(v169 + 24);
                          v173 = *(_QWORD *)(v169 + 40);
                          v174 = *(_QWORD *)(v169 + 48);
                          v175 = *(_WORD *)(v169 + 56);
                          v176 = *(void **)(v169 + 64);
                          v480 = *(_QWORD *)(v169 + 72);
                          v517 = *(_WORD *)(v169 + 96);
                          v511 = *(_DWORD *)(v169 + 100);
                          v505 = *(_BYTE *)(v169 + 104);
                          v498 = *(_BYTE *)(v169 + 105);
                          v177 = *(_QWORD *)(v169 + 112);
                          v475 = *(_OWORD *)(v169 + 80);
                          specialized _NativeDictionary._delete(at:)(v190, v192);
                          v3[1] = v192;
                          swift_bridgeObjectRelease();
                          v532[0] = *v3;
                          v545 = v170;
                          v546 = v171;
                          v547 = v172;
                          v548 = v491;
                          v549 = v173;
                          v550 = v174;
                          LOWORD(v551) = v175;
                          v552 = v176;
                          v553 = v480;
                          v554 = v475;
                          LOWORD(v555) = v517;
                          HIDWORD(v555) = v511;
                          LOBYTE(v556) = v505;
                          BYTE1(v556) = v498;
                          v557 = v177;
                          specialized DisplayList.ViewUpdater.Platform.forEachChild(of:do:)((uint64_t)&v545, v532, v3);
                          swift_unknownObjectRelease();

                          swift_unknownObjectRelease();
                          v10 = v3 + 1;
                          p_type = &stru_250685FF0.type;
                          v165 = v459;
                          v167 = v524;
                        }
                      }
                      ++v168;
                      CoreViewRemoveFromSuperview(*(_DWORD *)v3 & 3, v178);
                      swift_unknownObjectRelease();
                    }
                    while (v167 != v168);
                  }

                  if (v436 != 12)
                    goto LABEL_152;
                  v193 = (id)CoreViewMaskView(v434, v445);
                  v28 = v530;
                  v42 = v485;
                  v144 = v449;
                  v145 = v464;
                  if (v193)
                  {
                    v194 = (id)CoreViewSubviews(v434, v193);
                    v195 = (unint64_t)objc_msgSend(v194, sel_count);
                    if ((v195 & 0x8000000000000000) != 0)
                      goto LABEL_283;
                    v196 = (char *)v195;
                    if (v195)
                    {
                      v197 = 0;
                      v476 = v194;
                      v460 = (char *)v195;
                      do
                      {
                        v207 = objc_msgSend(v194, p_type[319], v197);
                        v208 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)v207);
                        if ((v209 & 1) != 0)
                        {
                          v210 = v208;
                          v211 = swift_isUniquelyReferenced_nonNull_native();
                          v212 = v3[2];
                          v545 = v212;
                          v3[2] = 0x8000000000000000;
                          if (!v211)
                          {
                            specialized _NativeDictionary.copy()();
                            v212 = v545;
                          }
                          v213 = *(_QWORD *)(v212 + 56) + 20 * v210;
                          v214 = *(_BYTE *)(v213 + 16);
                          v216 = *(_QWORD *)v213;
                          v215 = *(_QWORD *)(v213 + 8);
                          specialized _NativeDictionary._delete(at:)(v210, v212);
                          v3[2] = v212;
                          swift_bridgeObjectRelease();
                          v217 = specialized __RawDictionaryStorage.find<A>(_:)(v216, v215, v214);
                          v10 = v3 + 1;
                          p_type = (char **)(&stru_250685FF0 + 16);
                          if ((v218 & 1) != 0)
                          {
                            v219 = v217;
                            v220 = swift_isUniquelyReferenced_nonNull_native();
                            v221 = *v531;
                            v545 = *v531;
                            *v531 = 0x8000000000000000;
                            if ((v220 & 1) == 0)
                            {
                              specialized _NativeDictionary.copy()();
                              v221 = v545;
                            }
                            v198 = *(_QWORD *)(v221 + 56) + 120 * v219;
                            v199 = *(_QWORD *)v198;
                            v200 = *(void **)(v198 + 8);
                            v201 = *(_QWORD *)(v198 + 16);
                            v499 = *(_OWORD *)(v198 + 24);
                            v202 = *(_QWORD *)(v198 + 40);
                            v203 = *(_QWORD *)(v198 + 48);
                            v204 = *(_WORD *)(v198 + 56);
                            v205 = *(void **)(v198 + 64);
                            v492 = *(_QWORD *)(v198 + 72);
                            v525 = *(_WORD *)(v198 + 96);
                            v518 = *(_DWORD *)(v198 + 100);
                            v512 = *(_BYTE *)(v198 + 104);
                            v506 = *(_BYTE *)(v198 + 105);
                            v206 = *(_QWORD *)(v198 + 112);
                            v481 = *(_OWORD *)(v198 + 80);
                            specialized _NativeDictionary._delete(at:)(v219, v221);
                            v3[1] = v221;
                            swift_bridgeObjectRelease();
                            v532[0] = *v3;
                            v545 = v199;
                            v546 = v200;
                            v547 = v201;
                            v548 = v499;
                            v549 = v202;
                            v550 = v203;
                            LOWORD(v551) = v204;
                            v552 = v205;
                            v553 = v492;
                            v554 = v481;
                            LOWORD(v555) = v525;
                            HIDWORD(v555) = v518;
                            LOBYTE(v556) = v512;
                            BYTE1(v556) = v506;
                            v557 = v206;
                            specialized DisplayList.ViewUpdater.Platform.forEachChild(of:do:)((uint64_t)&v545, v532, v3);
                            swift_unknownObjectRelease();

                            swift_unknownObjectRelease();
                            v10 = v3 + 1;
                            p_type = &stru_250685FF0.type;
                            v194 = v476;
                            v196 = v460;
                          }
                        }
                        ++v197;
                        CoreViewRemoveFromSuperview(*(_DWORD *)v3 & 3, v207);
                        swift_unknownObjectRelease();
                      }
                      while (v196 != v197);
                    }
                    swift_unknownObjectRelease();

LABEL_152:
                    v28 = v530;
                    v42 = v485;
                    v144 = v449;
                    v145 = v464;
                  }
                }
                swift_unknownObjectRelease();

                swift_unknownObjectRelease();
                goto LABEL_116;
              }
              v42 = v485;
              v144 = v449;
              v145 = v464;
            }
LABEL_116:
            ++v145;
            CoreViewRemoveFromSuperview(*(_DWORD *)v3 & 3, v470);
            swift_unknownObjectRelease();
          }
          while (v145 != v144);
        }
        swift_unknownObjectRelease();

      }
    }
    goto LABEL_156;
  }
  v65 = 0;
  v474 = v63;
  v463 = v64;
  while (1)
  {
    v497 = v65;
    v490 = objc_msgSend(v469, p_type[319], v405, v406, v407, v408, v409, v410, v411);
    v66 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)v490);
    if ((v67 & 1) == 0)
      goto LABEL_53;
    v68 = v66;
    v69 = swift_isUniquelyReferenced_nonNull_native();
    v70 = v3[2];
    v545 = v70;
    v3[2] = 0x8000000000000000;
    if (!v69)
    {
      specialized _NativeDictionary.copy()();
      v70 = v545;
    }
    v71 = *(_QWORD *)(v70 + 56) + 20 * v68;
    v72 = *(_BYTE *)(v71 + 16);
    v73 = *(_QWORD *)v71;
    v74 = *(_QWORD *)(v71 + 8);
    specialized _NativeDictionary._delete(at:)(v68, v70);
    v3[2] = v70;
    swift_bridgeObjectRelease();
    v75 = specialized __RawDictionaryStorage.find<A>(_:)(v73, v74, v72);
    if ((v76 & 1) != 0)
      break;
    v42 = v485;
    v63 = v474;
LABEL_53:
    CoreViewRemoveFromSuperview(*(_DWORD *)v3 & 3, v490);
    swift_unknownObjectRelease();
    v65 = v497 + 1;
    if (v497 + 1 == v463)
      goto LABEL_110;
  }
  v77 = v75;
  v78 = swift_isUniquelyReferenced_nonNull_native();
  v79 = *v10;
  v545 = *v10;
  *v10 = 0x8000000000000000;
  v42 = v485;
  v63 = v474;
  if (!v78)
  {
    specialized _NativeDictionary.copy()();
    v79 = v545;
  }
  v80 = *(_QWORD *)(v79 + 56) + 120 * v77;
  v81 = *(void **)(v80 + 16);
  v439 = *(void **)(v80 + 8);
  v441 = *(void **)v80;
  v82 = *(unsigned __int8 *)(v80 + 56);
  specialized _NativeDictionary._delete(at:)(v77, v79);
  *v10 = v79;
  swift_bridgeObjectRelease();
  v457 = v82;
  if (v82 > 0x10 || ((1 << v82) & 0x15F01) == 0)
  {
LABEL_109:
    swift_unknownObjectRelease();

    swift_unknownObjectRelease();
    goto LABEL_53;
  }
  v84 = *(_DWORD *)v3 & 3;
  v85 = (id)CoreViewSubviews(v84, v81);
  v86 = (unint64_t)objc_msgSend(v85, sel_count);
  if ((v86 & 0x8000000000000000) != 0)
    goto LABEL_275;
  v87 = v86;
  v452 = v84;
  if (!v86)
  {
LABEL_95:

    if (v457 == 12)
    {
      v121 = (id)CoreViewMaskView(v452, v441);
      v42 = v485;
      v63 = v474;
      if (v121)
      {
        v122 = (id)CoreViewSubviews(v452, v121);
        v123 = (unint64_t)objc_msgSend(v122, sel_count);
        if ((v123 & 0x8000000000000000) != 0)
          goto LABEL_278;
        v124 = v123;
        if (v123)
        {
          v125 = 0;
          v433 = v122;
          v444 = v123;
          do
          {
            v126 = objc_msgSend(v122, p_type[319], v125, v405, v406, v407, v408, v409, v410, v411);
            v127 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)v126);
            if ((v128 & 1) != 0)
            {
              v129 = v127;
              v130 = swift_isUniquelyReferenced_nonNull_native();
              v131 = v3[2];
              v545 = v131;
              v3[2] = 0x8000000000000000;
              if (!v130)
              {
                specialized _NativeDictionary.copy()();
                v131 = v545;
              }
              v132 = *(_QWORD *)(v131 + 56) + 20 * v129;
              v133 = *(_BYTE *)(v132 + 16);
              v134 = *(_QWORD *)v132;
              v135 = *(_QWORD *)(v132 + 8);
              specialized _NativeDictionary._delete(at:)(v129, v131);
              v3[2] = v131;
              swift_bridgeObjectRelease();
              specialized Dictionary._Variant.removeValue(forKey:)(v134, v135, v133, (uint64_t)&v545);
              v136 = v545;
              if (v545)
              {
                v138 = v556;
                v137 = v557;
                v139 = *((_QWORD *)&v554 + 1);
                v140 = v555;
                v141 = v554;
                v448 = v553;
                v453 = v552;
                v458 = v546;
                v544 = *v3;
                v532[0] = v545;
                v532[1] = v546;
                v532[2] = v547;
                v533 = v548;
                v534 = v549;
                v535 = v550;
                v536 = v551;
                v537 = v552;
                v538 = v553;
                v539 = v554;
                v540 = v555;
                v541 = HIDWORD(v555);
                v542 = v556 & 0x101;
                v543 = v557;
                specialized DisplayList.ViewUpdater.Platform.forEachChild(of:do:)((uint64_t)v532, &v544, v3);
                v410 = v138;
                v411 = v137;
                v408 = v139;
                v409 = v140;
                v122 = v433;
                v407 = v141;
                v10 = v3 + 1;
                v406 = v448;
                v405 = v453;
                outlined consume of DisplayList.ViewUpdater.ViewInfo?(v136, v458);
              }
              v42 = v485;
              v63 = v474;
              v124 = v444;
            }
            ++v125;
            CoreViewRemoveFromSuperview(*(_DWORD *)v3 & 3, v126);
            swift_unknownObjectRelease();
            p_type = &stru_250685FF0.type;
          }
          while (v124 != v125);
        }
        swift_unknownObjectRelease();

        v28 = v530;
      }
    }
    else
    {
      v42 = v485;
      v63 = v474;
    }
    goto LABEL_109;
  }
  v88 = 0;
  v479 = v85;
  v523 = v86;
  while (1)
  {
    v89 = objc_msgSend(v85, p_type[319], v88);
    v90 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)v89);
    if ((v91 & 1) == 0)
      goto LABEL_68;
    v92 = v90;
    v93 = swift_isUniquelyReferenced_nonNull_native();
    v94 = v3[2];
    v545 = v94;
    v3[2] = 0x8000000000000000;
    if (!v93)
    {
      specialized _NativeDictionary.copy()();
      v94 = v545;
    }
    v95 = *(_QWORD *)(v94 + 56) + 20 * v92;
    v96 = *(_BYTE *)(v95 + 16);
    v97 = *(_QWORD *)v95;
    v98 = *(_QWORD *)(v95 + 8);
    specialized _NativeDictionary._delete(at:)(v92, v94);
    v3[2] = v94;
    swift_bridgeObjectRelease();
    v99 = specialized __RawDictionaryStorage.find<A>(_:)(v97, v98, v96);
    if ((v100 & 1) != 0)
      break;
    v10 = v3 + 1;
    p_type = &stru_250685FF0.type;
    v87 = v523;
LABEL_68:
    ++v88;
    CoreViewRemoveFromSuperview(*(_DWORD *)v3 & 3, v89);
    swift_unknownObjectRelease();
    if (v88 == v87)
      goto LABEL_95;
  }
  v101 = v99;
  v10 = v3 + 1;
  v102 = swift_isUniquelyReferenced_nonNull_native();
  v103 = *v531;
  v545 = *v531;
  *v531 = 0x8000000000000000;
  if (!v102)
  {
    specialized _NativeDictionary.copy()();
    v103 = v545;
  }
  v104 = *(_QWORD *)(v103 + 56) + 120 * v101;
  v105 = *(void **)v104;
  v504 = *(void **)(v104 + 8);
  v106 = *(void **)(v104 + 16);
  v107 = *(unsigned __int8 *)(v104 + 56);
  specialized _NativeDictionary._delete(at:)(v101, v103);
  *v531 = v103;
  swift_bridgeObjectRelease();
  v108 = v107 > 0x10 || ((1 << v107) & 0x15F01) == 0;
  p_type = (char **)(&stru_250685FF0 + 16);
  if (v108)
  {
    v85 = v479;
    v87 = v523;
    v28 = v530;
    goto LABEL_92;
  }
  v109 = *(_DWORD *)v3 & 3;
  v110 = (id)CoreViewSubviews(v109, v106);
  v111 = (unint64_t)objc_msgSend(v110, sel_count);
  if ((v111 & 0x8000000000000000) == 0)
  {
    v112 = v111;
    if (v111)
    {
      v113 = 0;
      do
      {
        v114 = v113 + 1;
        closure #1 in closure #1 in closure #1 in DisplayList.ViewUpdater.ViewCache.removeRecursively(_:)(objc_msgSend(v110, sel_objectAtIndexedSubscript_), v3);
        swift_unknownObjectRelease();
        v113 = v114;
      }
      while (v112 != v114);
    }

    if (v107 != 12)
    {
      v28 = v530;
      v10 = v3 + 1;
      p_type = (char **)(&stru_250685FF0 + 16);
      goto LABEL_91;
    }
    v115 = (id)CoreViewMaskView(v109, v105);
    p_type = &stru_250685FF0.type;
    v28 = v530;
    v85 = v479;
    if (v115)
    {
      v116 = (id)CoreViewSubviews(v109, v115);
      v117 = (unint64_t)objc_msgSend(v116, sel_count);
      if ((v117 & 0x8000000000000000) != 0)
        goto LABEL_274;
      v118 = v117;
      if (v117)
      {
        v119 = 0;
        do
        {
          v120 = v119 + 1;
          closure #1 in closure #1 in closure #1 in DisplayList.ViewUpdater.ViewCache.removeRecursively(_:)(objc_msgSend(v116, sel_objectAtIndexedSubscript_), v3);
          swift_unknownObjectRelease();
          v119 = v120;
        }
        while (v118 != v120);
      }
      swift_unknownObjectRelease();

      v10 = v3 + 1;
LABEL_91:
      v85 = v479;
      v87 = v523;
    }
    else
    {
      v10 = v3 + 1;
      v87 = v523;
    }
LABEL_92:
    swift_unknownObjectRelease();

    swift_unknownObjectRelease();
    goto LABEL_68;
  }
  __break(1u);
LABEL_274:
  __break(1u);
LABEL_275:
  __break(1u);
LABEL_276:
  __break(1u);
LABEL_277:
  __break(1u);
LABEL_278:
  __break(1u);
LABEL_279:
  __break(1u);
LABEL_280:
  __break(1u);
LABEL_281:
  __break(1u);
LABEL_282:
  __break(1u);
LABEL_283:
  __break(1u);
LABEL_284:
  __break(1u);
LABEL_285:
  __break(1u);
LABEL_286:
  __break(1u);
LABEL_287:
  __break(1u);
LABEL_288:
  __break(1u);
LABEL_289:
  __break(1u);
LABEL_290:
  __break(1u);
}

Swift::Void __swiftcall DisplayList.ViewUpdater.ViewCache.commitAsyncValues(targetTimestamp:)(SwiftUI::Time_optional targetTimestamp)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void (*v7)(_QWORD *@<X8>);
  int64_t v8;
  id v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  char isUniquelyReferenced_nonNull_native;
  Swift::Int v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  void *v41;
  id v42;
  void *v43;
  uint64_t v44;
  Swift::Int v45;
  Swift::Int v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  unint64_t v51;
  char v52;
  id v53;
  id v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  void *v71;
  id v72;
  id v73;
  id v74;
  char v75;
  Swift::Int v76;
  char v77;
  unint64_t v78;
  uint64_t v79;
  _BOOL8 v80;
  uint64_t v81;
  char v82;
  unint64_t v83;
  char v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  Swift::Int *v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  id v92;
  uint64_t v93;
  char v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  int64_t v100;
  int64_t v101;
  unint64_t v102;
  unint64_t v103;
  int64_t v104;
  unint64_t v105;
  int64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(uint64_t);
  uint64_t v111;
  id v112;
  unsigned __int8 v113;
  uint64_t v114;
  uint64_t v115;
  int64_t v116;
  uint64_t v117;
  unint64_t v118;
  int64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  unint64_t v125;
  id v126;
  unint64_t v127;

  v2 = v1;
  v117 = *(_QWORD *)(v1 + 48);
  if (!*(_QWORD *)(v117 + 16) && !*(_QWORD *)(*(_QWORD *)(v1 + 64) + 16))
    return;
  if ((objc_msgSend((id)objc_opt_self(), sel_isMainThread) & 1) == 0)
    objc_msgSend((id)objc_opt_self(), sel_activateBackground_, 1);
  v3 = (void *)objc_opt_self();
  v113 = objc_msgSend(v3, sel_disableActions);
  if ((v113 & 1) == 0)
    objc_msgSend(v3, sel_setDisableActions_, 1);
  v112 = v3;
  v127 = MEMORY[0x24BEE4B08];
  v115 = v117 + 64;
  v4 = 1 << *(_BYTE *)(v117 + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v117 + 64);
  v116 = (unint64_t)(v4 + 63) >> 6;
  v122 = *MEMORY[0x24BDE5978];
  swift_bridgeObjectRetain();
  v7 = 0;
  v8 = 0;
  v114 = v1;
  while (1)
  {
    if (v6)
    {
      v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v11 = v10 | (v8 << 6);
    }
    else
    {
      v12 = v8 + 1;
      if (__OFADD__(v8, 1))
        goto LABEL_109;
      if (v12 >= v116)
        goto LABEL_77;
      v13 = *(_QWORD *)(v115 + 8 * v12);
      ++v8;
      if (!v13)
      {
        v8 = v12 + 1;
        if (v12 + 1 >= v116)
          goto LABEL_77;
        v13 = *(_QWORD *)(v115 + 8 * v8);
        if (!v13)
        {
          v8 = v12 + 2;
          if (v12 + 2 >= v116)
            goto LABEL_77;
          v13 = *(_QWORD *)(v115 + 8 * v8);
          if (!v13)
          {
            v14 = v12 + 3;
            if (v14 >= v116)
              goto LABEL_77;
            v13 = *(_QWORD *)(v115 + 8 * v14);
            if (!v13)
            {
              while (1)
              {
                v8 = v14 + 1;
                if (__OFADD__(v14, 1))
                  goto LABEL_111;
                if (v8 >= v116)
                  break;
                v13 = *(_QWORD *)(v115 + 8 * v8);
                ++v14;
                if (v13)
                  goto LABEL_28;
              }
LABEL_77:
              swift_release();
              if ((v113 & 1) == 0)
                objc_msgSend(v112, sel_setDisableActions_, 0);
              swift_beginAccess();
              v95 = v127;
              v96 = v127 + 56;
              v97 = 1 << *(_BYTE *)(v127 + 32);
              v98 = -1;
              if (v97 < 64)
                v98 = ~(-1 << v97);
              v99 = v98 & *(_QWORD *)(v127 + 56);
              v100 = (unint64_t)(v97 + 63) >> 6;
              swift_bridgeObjectRetain();
              v101 = 0;
              while (1)
              {
                if (v99)
                {
                  v102 = __clz(__rbit64(v99));
                  v99 &= v99 - 1;
                  v103 = v102 | (v101 << 6);
                }
                else
                {
                  v104 = v101 + 1;
                  if (__OFADD__(v101, 1))
                    goto LABEL_110;
                  if (v104 >= v100)
                    goto LABEL_99;
                  v105 = *(_QWORD *)(v96 + 8 * v104);
                  ++v101;
                  if (!v105)
                  {
                    v101 = v104 + 1;
                    if (v104 + 1 >= v100)
                      goto LABEL_99;
                    v105 = *(_QWORD *)(v96 + 8 * v101);
                    if (!v105)
                    {
                      v101 = v104 + 2;
                      if (v104 + 2 >= v100)
                        goto LABEL_99;
                      v105 = *(_QWORD *)(v96 + 8 * v101);
                      if (!v105)
                      {
                        v106 = v104 + 3;
                        if (v106 >= v100)
                          goto LABEL_99;
                        v105 = *(_QWORD *)(v96 + 8 * v106);
                        if (!v105)
                        {
                          while (1)
                          {
                            v101 = v106 + 1;
                            if (__OFADD__(v106, 1))
                              goto LABEL_112;
                            if (v101 >= v100)
                              break;
                            v105 = *(_QWORD *)(v96 + 8 * v101);
                            ++v106;
                            if (v105)
                              goto LABEL_98;
                          }
LABEL_99:
                          swift_release();
                          v107 = *(_QWORD *)(v2 + 64);
                          v108 = *(_QWORD *)(v107 + 16);
                          if (v108)
                          {
                            swift_bridgeObjectRetain();
                            v109 = v107 + 40;
                            do
                            {
                              v110 = *(void (**)(uint64_t))(v109 - 8);
                              v111 = swift_retain();
                              v110(v111);
                              swift_release();
                              v109 += 16;
                              --v108;
                            }
                            while (v108);
                            swift_bridgeObjectRelease();
                          }
                          swift_bridgeObjectRelease();
                          *(_QWORD *)(v2 + 48) = MEMORY[0x24BEE4B00];
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v7);
                          *(_QWORD *)(v2 + 64) = MEMORY[0x24BEE4AF8];
                          return;
                        }
                        v101 = v106;
                      }
                    }
                  }
LABEL_98:
                  v99 = (v105 - 1) & v105;
                  v103 = __clz(__rbit64(v105)) + (v101 << 6);
                }
                objc_msgSend(*(id *)(*(_QWORD *)(v95 + 48) + 8 * v103), sel_flushWithTransaction);
              }
            }
            v8 = v14;
          }
        }
      }
LABEL_28:
      v6 = (v13 - 1) & v13;
      v11 = __clz(__rbit64(v13)) + (v8 << 6);
    }
    v15 = 8 * v11;
    v16 = *(_QWORD *)(*(_QWORD *)(v117 + 48) + v15);
    v17 = *(_QWORD *)(*(_QWORD *)(v117 + 56) + v15);
    v126 = *(id *)(v2 + 56);
    v18 = v126;
    swift_bridgeObjectRetain();
    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v7);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v124 = *(_QWORD **)(v2 + 40);
    v20 = (Swift::Int)v124;
    *(_QWORD *)(v2 + 40) = 0x8000000000000000;
    v121 = v16;
    v22 = specialized __RawDictionaryStorage.find<A>(_:)(v16);
    v23 = *(_QWORD *)(v20 + 16);
    v24 = (v21 & 1) == 0;
    v25 = v23 + v24;
    if (__OFADD__(v23, v24))
      goto LABEL_107;
    v26 = v21;
    if (*(_QWORD *)(v20 + 24) >= v25)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        v20 = (Swift::Int)v124;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v25, isUniquelyReferenced_nonNull_native);
      v20 = (Swift::Int)v124;
      v27 = specialized __RawDictionaryStorage.find<A>(_:)(v121);
      if ((v26 & 1) != (v28 & 1))
        goto LABEL_117;
      v22 = v27;
    }
    *(_QWORD *)(v2 + 40) = v20;
    swift_bridgeObjectRelease();
    v29 = *(_QWORD **)(v2 + 40);
    if ((v26 & 1) != 0)
    {
      v30 = swift_bridgeObjectRetain();
    }
    else
    {
      v29[(v22 >> 6) + 8] |= 1 << v22;
      *(_QWORD *)(v29[6] + 8 * v22) = v121;
      v31 = (_QWORD *)(v29[7] + 16 * v22);
      *v31 = MEMORY[0x24BEE4B08];
      v31[1] = MEMORY[0x24BEE4B00];
      v32 = v29[2];
      v33 = v32 + 1;
      v34 = __OFADD__(v32, 1);
      v30 = swift_bridgeObjectRetain();
      if (v34)
        goto LABEL_108;
      *(_QWORD *)(v30 + 16) = v33;
    }
    v35 = *(_QWORD *)(v30 + 56);
    swift_bridgeObjectRelease();
    v120 = *(_QWORD *)(v17 + 16);
    if (v120)
      break;
    swift_bridgeObjectRelease();
LABEL_12:
    swift_beginAccess();
    v9 = v126;

    *(_QWORD *)(v2 + 56) = v9;
    v7 = specialized thunk for @callee_guaranteed () -> (@owned DisplayList.ViewUpdater.ViewCache.AsyncValues);
  }
  v118 = v6;
  v119 = v8;
  v123 = v17 + 32;
  swift_bridgeObjectRetain();
  swift_beginAccess();
  v36 = 0;
  v37 = v35 + 16 * v22 + 8;
  v38 = v120;
  v39 = (void *)v121;
  while (1)
  {
    v44 = v123 + 32 * v36;
    v45 = *(_QWORD *)v44;
    v46 = *(_QWORD *)(v44 + 8);
    v47 = *(void **)(v44 + 16);
    if (*(_BYTE *)(v44 + 24) != 1)
    {
      swift_bridgeObjectRetain_n();
      v40 = v47;
      v41 = (void *)MEMORY[0x23B7C5DAC](v45, v46);
      swift_bridgeObjectRelease();
      v42 = objc_msgSend((id)objc_opt_self(), sel_animationWithKeyPath_, v41);

      objc_msgSend(v42, sel_setBeginTime_, -1.0);
      objc_msgSend(v42, sel_setDuration_, 1.0);
      objc_msgSend(v42, sel_setFillMode_, v122);
      objc_msgSend(v42, sel_setToValue_, v40);
      objc_msgSend(v42, sel_setRemovedOnCompletion_, 0);
      v43 = (void *)MEMORY[0x23B7C5DAC](v45, v46);
      objc_msgSend(v39, sel_addAnimation_forKey_, v42, v43);

      specialized Set._Variant.insert(_:)((Swift::Int *)&v124, v45, v46);
      swift_bridgeObjectRelease();
      goto LABEL_45;
    }
    v48 = *(_QWORD *)v37;
    v49 = *(_QWORD *)(*(_QWORD *)v37 + 16);
    swift_bridgeObjectRetain();
    if (v49)
    {
      swift_bridgeObjectRetain();
      v50 = v47;
      v51 = specialized __RawDictionaryStorage.find<A>(_:)(v45, v46);
      if ((v52 & 1) != 0)
      {
        v53 = *(id *)(*(_QWORD *)(v48 + 56) + 8 * v51);
        swift_bridgeObjectRelease();
        objc_msgSend(v53, sel_setValue_, v50);
        v54 = objc_msgSend(v53, sel_group);
        if (!v54)
          goto LABEL_115;
        v55 = (uint64_t)v54;

        swift_beginAccess();
        v56 = v127;
        v57 = static Hasher._hash(seed:_:)();
        v58 = -1 << *(_BYTE *)(v56 + 32);
        v59 = v57 & ~v58;
        if (((*(_QWORD *)(v56 + 56 + ((v59 >> 3) & 0xFFFFFFFFFFFFF8)) >> v59) & 1) != 0)
        {
          v60 = *(_QWORD *)(v56 + 48);
          if (*(_QWORD *)(v60 + 8 * v59) == v55)
          {
LABEL_75:
            swift_endAccess();

            swift_bridgeObjectRelease();
            goto LABEL_45;
          }
          v61 = ~v58;
          while (1)
          {
            v59 = (v59 + 1) & v61;
            if (((*(_QWORD *)(v56 + 56 + ((v59 >> 3) & 0xFFFFFFFFFFFFF8)) >> v59) & 1) == 0)
              break;
            if (*(_QWORD *)(v60 + 8 * v59) == v55)
              goto LABEL_75;
          }
        }
        v94 = swift_isUniquelyReferenced_nonNull_native();
        v125 = v127;
        v127 = 0x8000000000000000;
        specialized _NativeSet.insertNew(_:at:isUnique:)(v55, v59, v94);
        v127 = v125;
        swift_bridgeObjectRelease();
        goto LABEL_75;
      }
      swift_bridgeObjectRelease();
      v63 = v126;
      if (v126)
      {
LABEL_59:
        v64 = v63;
        v65 = objc_msgSend(v64, sel_count);
        v66 = objc_msgSend(v64, sel_capacity);

        if ((uint64_t)v65 < (uint64_t)v66)
          goto LABEL_62;
      }
    }
    else
    {
      v62 = v47;
      v63 = v126;
      if (v126)
        goto LABEL_59;
    }
    v64 = objc_msgSend((id)objc_opt_self(), sel_groupWithCapacity_, 100);
    v67 = v126;
    v126 = v64;

    if (!v64)
      goto LABEL_114;
    objc_msgSend(v64, sel_setUpdatesAsynchronously_, 0);
LABEL_62:
    v68 = objc_allocWithZone(MEMORY[0x24BDE5728]);
    swift_bridgeObjectRetain();
    v69 = v47;
    v70 = v64;
    v71 = (void *)MEMORY[0x23B7C5DAC](v45, v46);
    swift_bridgeObjectRelease();
    v72 = v69;
    v73 = objc_msgSend(v68, sel_initWithKeyPath_initialValue_additive_group_, v71, v72, 0, v70);

    objc_msgSend(v39, sel_addPresentationModifier_, v73);
    swift_bridgeObjectRetain();
    v74 = v73;
    v75 = swift_isUniquelyReferenced_nonNull_native();
    v124 = *(_QWORD **)v37;
    v76 = (Swift::Int)v124;
    *(_QWORD *)v37 = 0x8000000000000000;
    v78 = specialized __RawDictionaryStorage.find<A>(_:)(v45, v46);
    v79 = *(_QWORD *)(v76 + 16);
    v80 = (v77 & 1) == 0;
    v81 = v79 + v80;
    if (__OFADD__(v79, v80))
      break;
    v82 = v77;
    if (*(_QWORD *)(v76 + 24) >= v81)
    {
      if ((v75 & 1) == 0)
        specialized _NativeDictionary.copy()();
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v81, v75);
      v83 = specialized __RawDictionaryStorage.find<A>(_:)(v45, v46);
      if ((v82 & 1) != (v84 & 1))
        goto LABEL_116;
      v78 = v83;
    }
    v38 = v120;
    v85 = v124;
    if ((v82 & 1) != 0)
    {
      v86 = v124[7];
      v87 = 8 * v78;

      *(_QWORD *)(v86 + v87) = v74;
    }
    else
    {
      v124[(v78 >> 6) + 8] |= 1 << v78;
      v88 = (Swift::Int *)(v85[6] + 16 * v78);
      *v88 = v45;
      v88[1] = v46;
      *(_QWORD *)(v85[7] + 8 * v78) = v74;
      v89 = v85[2];
      v90 = __OFADD__(v89, 1);
      v91 = v89 + 1;
      if (v90)
        goto LABEL_106;
      v85[2] = v91;
      swift_bridgeObjectRetain();
    }
    *(_QWORD *)v37 = v85;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v92 = objc_msgSend(v74, sel_group);
    v39 = (void *)v121;
    if (!v92)
      goto LABEL_113;
    v93 = (uint64_t)v92;

    swift_beginAccess();
    specialized Set._Variant.insert(_:)((uint64_t *)&v125, v93);
    swift_endAccess();

    swift_bridgeObjectRelease();
LABEL_45:
    if (++v36 == v38)
    {
      swift_bridgeObjectRelease_n();
      v2 = v114;
      v6 = v118;
      v8 = v119;
      goto LABEL_12;
    }
  }
  __break(1u);
LABEL_106:
  __break(1u);
LABEL_107:
  __break(1u);
LABEL_108:
  __break(1u);
LABEL_109:
  __break(1u);
LABEL_110:
  __break(1u);
LABEL_111:
  __break(1u);
LABEL_112:
  __break(1u);
LABEL_113:
  __break(1u);
LABEL_114:
  __break(1u);
LABEL_115:
  __break(1u);
LABEL_116:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_117:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

double DisplayList.ViewUpdater.ViewCache.prepare(item:parentState:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  double result;
  uint64_t v19;
  uint64_t v20;
  Swift::Bool v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  char v26;
  _QWORD v27[5];

  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for DisplayList.ArchiveIDs?, (uint64_t (*)(uint64_t))type metadata accessor for DisplayList.ArchiveIDs, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v23 - v7;
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(unsigned __int16 *)(a1 + 64) | (*(unsigned __int8 *)(a1 + 66) << 16);
  if (v10 >> 62 == 1)
  {
    switch(BYTE4(v10))
    {
      case 1u:
        v19 = swift_projectBox();
        outlined init with copy of DisplayList.ArchiveIDs?(v19, (uint64_t)v8);
        v20 = type metadata accessor for DisplayList.ArchiveIDs();
        v21 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v8, 1, v20) != 1;
        DisplayList.Index.updateArchive(entering:)(v21);
        outlined destroy of DisplayList.ArchiveIDs?((uint64_t)v8);
        break;
      case 9u:
        if (*(_BYTE *)(v9 + 132) == 15)
        {
          v22 = *(_QWORD *)(a1 + 32);
          if (v22)
            LODWORD(v22) = (2 * ((33 * (v22 >> 16)) ^ v22)) | 1;
          LOWORD(v27[0]) = v22;
          DisplayList.Item.addDrawingGroup(contentSeed:)((unsigned __int16 *)v27);
        }
        break;
      case 0xAu:
        outlined init with copy of AnyTrackedValue(v9 + 16, (uint64_t)v27);
        v24 = v11;
        v25 = v12;
        v26 = BYTE2(v12);
        outlined copy of DisplayList.Effect(v9, v10, 10);
        swift_bridgeObjectRetain();
        DisplayList.ViewUpdater.ViewCache.prepareAnimation(_:displayList:item:parentState:)(v27, &v24, a1, a2, a3);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
        swift_bridgeObjectRelease();
        outlined consume of DisplayList.Effect(v9, v10, 10);
        return result;
    }
  }
  else
  {
    if (v10 >> 62)
      v13 = 0;
    else
      v13 = v9 >> 60 == 4;
    if (v13)
    {
      v14 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(v9 + 56) + 120);
      outlined copy of DisplayList.Item.Value(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
      v15 = swift_retain();
      if ((v14(v15) & 1) == 0)
      {
        v16 = *(_QWORD *)(a1 + 32);
        if (v16)
          v17 = (2 * ((33 * WORD1(v16)) ^ v16)) | 1;
        else
          v17 = 0;
        LOWORD(v27[0]) = v17;
        DisplayList.Item.addDrawingGroup(contentSeed:)((unsigned __int16 *)v27);
      }
      swift_release();
      outlined consume of DisplayList.Item.Value(v9, v10);
    }
  }
  if (one-time initialization token for infinity != -1)
    swift_once();
  result = *(double *)&static Time.infinity;
  *a3 = static Time.infinity;
  return result;
}

void DisplayList.ViewUpdater.ViewCache.update(item:state:tag:in:makeView:updateView:)(uint64_t *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, void (*a5)(__int128 *__return_ptr, id *, __int128 *, uint64_t)@<X4>, void (*a6)(id *, __int128 *, __int128 *, uint64_t)@<X6>, uint64_t a7@<X8>)
{
  int *v7;
  int *v8;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  __int16 v38;
  __int16 v39;
  __int16 v40;
  __int16 v41;
  __int16 v42;
  __int16 v43;
  __int16 v44;
  __int16 v45;
  int v46;
  int v47;
  char v48;
  double v49;
  id v50;
  id v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  int v55;
  int v56;
  __int128 v57;
  char v58;
  uint64_t v59;
  id v60;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v62;
  unint64_t v63;
  char v64;
  unint64_t v65;
  char v66;
  char v67;
  _QWORD *v68;
  char v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  id v75;
  id v76;
  char v77;
  unint64_t v78;
  BOOL v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char v83;
  char v84;
  int v85;
  id v86;
  unint64_t v87;
  char v88;
  unint64_t v89;
  char v90;
  uint64_t v91;
  int v92;
  char v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  __int16 v97;
  char v98;
  id v99;
  id v100;
  uint64_t v101;
  void *v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  id v107;
  uint64_t v108;
  unint64_t v109;
  Swift::String v110;
  Swift::String v111;
  Swift::String v112;
  Swift::String v113;
  Swift::String v114;
  Swift::String v115;
  Swift::String v116;
  Swift::String v117;
  Swift::String v118;
  Swift::String v119;
  Swift::String v120;
  Swift::String v121;
  Swift::String v122;
  int v123;
  __int16 v124;
  __int16 v125;
  __int16 v126;
  __int16 v127;
  __int16 v128;
  __int16 v129;
  __int16 v130;
  __int16 v131;
  uint64_t v132;
  char v133;
  char v134;
  double v135;
  int v136;
  char v137;
  int v138;
  uint64_t v139;
  unint64_t v140;
  id v141;
  __int128 v143;
  uint64_t v144;
  int v145;
  void *v146;
  unint64_t v149;
  int v150;
  uint64_t v151;
  void *v152;
  char v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  __int128 v157;
  char v158;
  id v159[2];
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  uint64_t v166;
  __int128 v167;
  _BYTE v168[48];
  __int128 v169;
  _BYTE v170[32];
  uint64_t v171;
  __int128 v172;
  uint64_t v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  __int16 v179;
  __int128 v180;
  int v181;
  char v182;
  char v183;
  double v184;

  v8 = v7;
  v11 = a3 & 1;
  v13 = *a1;
  v12 = a1[1];
  v15 = a1[2];
  v14 = a1[3];
  v16 = a1[4];
  v143 = *(_OWORD *)(a1 + 5);
  v144 = a1[7];
  v145 = *((unsigned __int16 *)a1 + 32) | (*((unsigned __int8 *)a1 + 66) << 16);
  v151 = *((unsigned int *)a1 + 17);
  v18 = v7[18];
  v17 = v7[19];
  v19 = v7[20];
  v20 = v7[21];
  v21 = *((_QWORD *)v7 + 1);
  v153 = v11;
  v150 = v20;
  v155 = v18;
  v156 = v17;
  if (!*(_QWORD *)(v21 + 16)
    || (v22 = v19 | (v20 << 32),
        v140 = v18 | (v17 << 32),
        v23 = specialized __RawDictionaryStorage.find<A>(_:)(v140, v22, v11),
        LODWORD(v18) = v155,
        LODWORD(v17) = v156,
        (v24 & 1) == 0))
  {
    v53 = *((_BYTE *)v8 + 88);
    v159[0] = (id)__PAIR64__(v17, v18);
    v159[1] = (id)__PAIR64__(v20, v19);
    LOBYTE(v160) = v53;
    *(_QWORD *)&v172 = v13;
    *((_QWORD *)&v172 + 1) = v12;
    v173 = v15;
    *(_QWORD *)&v174 = v14;
    *((_QWORD *)&v174 + 1) = v16;
    v175 = v143;
    v176 = v144;
    BYTE2(v177) = BYTE2(v145);
    LOWORD(v177) = v145;
    HIDWORD(v177) = v151;
    a5(&v167, v159, &v172, a2);
    v54 = v19;
    if (v16)
      v55 = (2 * ((33 * (v16 >> 16)) ^ v16)) | 1;
    else
      LOWORD(v55) = 0;
    v56 = v8[23];
    v57 = v167;
    v58 = v170[25];
    v174 = *(_OWORD *)&v168[8];
    v59 = v171;
    v172 = v167;
    v173 = *(_QWORD *)v168;
    v175 = *(_OWORD *)&v168[24];
    LOWORD(v176) = *(_WORD *)&v168[40];
    v177 = v169;
    v178 = a4;
    v179 = v55;
    v180 = *(_OWORD *)&v170[2];
    v181 = v56;
    v182 = v170[24];
    v183 = v170[25];
    v184 = *(double *)&v171;
    swift_unknownObjectRetain();
    v60 = *((id *)&v57 + 1);
    swift_unknownObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v159[0] = *((id *)v8 + 1);
    *((_QWORD *)v8 + 1) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)&v172, v155 | (v156 << 32), v54 | (v20 << 32), v153, isUniquelyReferenced_nonNull_native);
    *((id *)v8 + 1) = v159[0];
    swift_bridgeObjectRelease();
    v62 = *((_QWORD *)v8 + 2);
    if (*(_QWORD *)(v62 + 16))
    {
      v63 = specialized __RawDictionaryStorage.find<A>(_:)(v57);
      if ((v64 & 1) != 0)
      {
        v65 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(*(_QWORD *)(v62 + 56) + 20 * v63), *(_QWORD *)(*(_QWORD *)(v62 + 56) + 20 * v63 + 8), *(_BYTE *)(*(_QWORD *)(v62 + 56) + 20 * v63 + 16));
        if ((v66 & 1) != 0)
        {
          v149 = v65;
          v67 = swift_isUniquelyReferenced_nonNull_native();
          v68 = (_QWORD *)*((_QWORD *)v8 + 1);
          v159[0] = v68;
          *((_QWORD *)v8 + 1) = 0x8000000000000000;
          if ((v67 & 1) == 0)
          {
            specialized _NativeDictionary.copy()();
            v68 = v159[0];
          }
          v146 = *(void **)(v68[7] + 120 * v149 + 8);
          specialized _NativeDictionary._delete(at:)(v149, (uint64_t)v68);
          *((_QWORD *)v8 + 1) = v68;
          swift_unknownObjectRelease();

          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
    }
    v69 = swift_isUniquelyReferenced_nonNull_native();
    v159[0] = *((id *)v8 + 2);
    *((_QWORD *)v8 + 2) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v155 | (v156 << 32), v54 | (v20 << 32), v153, v57, v69);
    *((id *)v8 + 2) = v159[0];
    swift_bridgeObjectRelease();
    v70 = (void *)*((_QWORD *)&v167 + 1);
    if (!v8[20] && (_DWORD)v151)
      objc_msgSend(*((id *)&v167 + 1), sel_setSwiftUI_displayListID_, v151);
    v71 = v167;
    v72 = *(_QWORD *)v168;
    v73 = v58 ^ 1;
    v74 = v169;

    *(_QWORD *)a7 = v71;
    *(_QWORD *)(a7 + 8) = v72;
    *(_QWORD *)(a7 + 16) = v74;
    *(_DWORD *)(a7 + 24) = v155;
    *(_DWORD *)(a7 + 28) = v156;
    *(_DWORD *)(a7 + 32) = v54;
    *(_DWORD *)(a7 + 36) = v150;
    *(_BYTE *)(a7 + 40) = v153;
    *(_BYTE *)(a7 + 41) = 1;
    goto LABEL_45;
  }
  v138 = v19;
  v25 = *(_QWORD *)(v21 + 56) + 120 * v23;
  v27 = *(id *)v25;
  v26 = *(void **)(v25 + 8);
  v28 = *(_QWORD *)(v25 + 16);
  v29 = *(_QWORD *)(v25 + 24);
  v30 = *(_QWORD *)(v25 + 32);
  v32 = *(_QWORD *)(v25 + 40);
  v31 = *(_QWORD *)(v25 + 48);
  v33 = *(_BYTE *)(v25 + 56);
  v34 = *(_BYTE *)(v25 + 57);
  v36 = *(_QWORD *)(v25 + 64);
  v35 = *(_QWORD *)(v25 + 72);
  v37 = *(unsigned __int16 *)(v25 + 80);
  v38 = *(_WORD *)(v25 + 82);
  v39 = *(_WORD *)(v25 + 84);
  v40 = *(_WORD *)(v25 + 86);
  v41 = *(_WORD *)(v25 + 88);
  v42 = *(_WORD *)(v25 + 90);
  v43 = *(_WORD *)(v25 + 92);
  v44 = *(_WORD *)(v25 + 94);
  v45 = *(_WORD *)(v25 + 96);
  v46 = *(_DWORD *)(v25 + 100);
  v47 = *(unsigned __int8 *)(v25 + 104);
  v48 = *(_BYTE *)(v25 + 105);
  v49 = *(double *)(v25 + 112);
  v159[0] = *(id *)v25;
  v159[1] = v26;
  *(_QWORD *)&v160 = v28;
  *((_QWORD *)&v160 + 1) = v29;
  *(_QWORD *)&v161 = v30;
  *((_QWORD *)&v161 + 1) = v32;
  *(_QWORD *)&v162 = v31;
  BYTE8(v162) = v33;
  BYTE9(v162) = v34;
  *(_QWORD *)&v163 = v36;
  *((_QWORD *)&v163 + 1) = v35;
  v139 = v35;
  LOWORD(v164) = v37;
  WORD1(v164) = v38;
  WORD2(v164) = v39;
  WORD3(v164) = v40;
  WORD4(v164) = v41;
  WORD5(v164) = v42;
  WORD6(v164) = v43;
  HIWORD(v164) = v44;
  LOWORD(v165) = v45;
  BYTE8(v165) = v47;
  BYTE9(v165) = v48;
  v135 = v49;
  v166 = *(_QWORD *)&v49;
  v137 = v33;
  if (v46 != v8[23])
  {
    v124 = v45;
    v125 = v44;
    v126 = v43;
    v127 = v42;
    v128 = v41;
    v129 = v40;
    v130 = v39;
    v131 = v38;
    v132 = v36;
    v133 = v34;
    v134 = v48;
    v136 = v37;
    v123 = v8[23];
    DWORD1(v165) = v123;
    if (v47)
    {
      BYTE8(v165) = 0;
      swift_unknownObjectRetain_n();
      v50 = v26;
      swift_unknownObjectRetain_n();
      v51 = v50;
      v52 = v140;
      specialized Set._Variant.remove(_:)(v140, v22, v153, (uint64_t)&v172);
    }
    else
    {
      swift_unknownObjectRetain_n();
      v75 = v26;
      swift_unknownObjectRetain_n();
      v76 = v75;
      v52 = v140;
    }
    v141 = v27;
    *(_QWORD *)&v172 = v27;
    *((_QWORD *)&v172 + 1) = v26;
    v173 = v28;
    *(_QWORD *)&v174 = v29;
    *((_QWORD *)&v174 + 1) = v30;
    *(_QWORD *)&v175 = v32;
    *((_QWORD *)&v175 + 1) = v31;
    LOBYTE(v176) = v137;
    BYTE1(v176) = v133;
    v177 = v132;
    v178 = v139;
    v179 = v136;
    LOWORD(v180) = v131;
    WORD1(v180) = v130;
    WORD2(v180) = v129;
    WORD3(v180) = v128;
    WORD4(v180) = v127;
    WORD5(v180) = v126;
    WORD6(v180) = v125;
    HIWORD(v180) = v124;
    v181 = v123;
    v182 = 0;
    v183 = v134;
    v184 = v135;
    v77 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v167 = *((_QWORD *)v8 + 1);
    *((_QWORD *)v8 + 1) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)&v172, v52, v22, v153, v77);
    *((_QWORD *)v8 + 1) = v167;
    swift_bridgeObjectRelease();
    v78 = v52;
    if (v16)
    {
      v79 = 1;
      v81 = a2;
      v80 = a4;
      if (v136 != ((unsigned __int16)(2 * ((33 * WORD1(v16)) ^ v16)) | 1))
        goto LABEL_26;
    }
    else
    {
      v81 = a2;
      v80 = a4;
      if (v136)
      {
        v79 = 1;
LABEL_26:
        if (one-time initialization token for infinity != -1)
          swift_once();
        v166 = static Time.infinity;
        v82 = v78;
        if (v139 != v80)
        {
          *((_QWORD *)&v163 + 1) = v80;
          DisplayList.ViewUpdater.ViewInfo.Seeds.invalidate()();
          v141 = v159[0];
        }
        v83 = *((_BYTE *)v8 + 88);
        v157 = *(_OWORD *)(v8 + 18);
        v158 = v83;
        *(_QWORD *)&v167 = v13;
        *((_QWORD *)&v167 + 1) = v12;
        *(_QWORD *)v168 = v15;
        *(_QWORD *)&v168[8] = v14;
        *(_QWORD *)&v168[16] = v16;
        *(_OWORD *)&v168[24] = v143;
        *(_QWORD *)&v168[40] = v144;
        BYTE2(v169) = BYTE2(v145);
        LOWORD(v169) = v145;
        DWORD1(v169) = v151;
        a6(v159, &v157, &v167, v81);
        v84 = BYTE9(v165);
        if ((BYTE9(v165) & 1) == 0)
        {
          if (v16)
            v85 = (2 * ((33 * (v16 >> 16)) ^ v16)) | 1;
          else
            LOWORD(v85) = 0;
          LOWORD(v164) = v85;
        }
        v86 = v159[0];
        if (v159[0] != v141)
        {
          v87 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)v141);
          if ((v88 & 1) != 0)
          {
            v89 = v87;
            v90 = swift_isUniquelyReferenced_nonNull_native();
            v91 = *((_QWORD *)v8 + 2);
            *(_QWORD *)&v167 = v91;
            *((_QWORD *)v8 + 2) = 0x8000000000000000;
            if ((v90 & 1) == 0)
            {
              specialized _NativeDictionary.copy()();
              v91 = v167;
            }
            specialized _NativeDictionary._delete(at:)(v89, v91);
            *((_QWORD *)v8 + 2) = v91;
            swift_bridgeObjectRelease();
          }
          v92 = *v8;
          swift_unknownObjectRetain();
          CoreViewRemoveFromSuperview(v92 & 3, v141);
          v93 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)&v167 = *((_QWORD *)v8 + 2);
          *((_QWORD *)v8 + 2) = 0x8000000000000000;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v82, v22, v153, (Swift::UInt)v86, v93);
          *((_QWORD *)v8 + 2) = v167;
          swift_bridgeObjectRelease();
          if (!v8[20])
          {
            if ((_DWORD)v151)
              objc_msgSend(v159[1], sel_setSwiftUI_displayListID_, v151);
          }
          swift_unknownObjectRelease();
          v79 = 1;
        }
        v169 = v163;
        *(_OWORD *)v170 = v164;
        *(_OWORD *)&v170[16] = v165;
        v167 = *(_OWORD *)v159;
        *(_OWORD *)v168 = v160;
        *(_OWORD *)&v168[16] = v161;
        v171 = v166;
        *(_OWORD *)&v168[32] = v162;
        outlined retain of DisplayList.ViewUpdater.ViewInfo((uint64_t)&v167);
        v94 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)&v157 = *((_QWORD *)v8 + 1);
        *((_QWORD *)v8 + 1) = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)&v167, v82, v22, v153, v94);
        *((_QWORD *)v8 + 1) = v157;
        swift_bridgeObjectRelease();
        v95 = v163;
        v73 = v84 ^ 1;
        v59 = v166;
        v96 = v160;

        *(_QWORD *)a7 = v86;
        *(_QWORD *)(a7 + 8) = v96;
        *(_QWORD *)(a7 + 16) = v95;
        *(_DWORD *)(a7 + 24) = v155;
        *(_DWORD *)(a7 + 28) = v156;
        *(_DWORD *)(a7 + 32) = v138;
        *(_DWORD *)(a7 + 36) = v150;
        *(_BYTE *)(a7 + 40) = v153;
        *(_BYTE *)(a7 + 41) = v79;
LABEL_45:
        *(_BYTE *)(a7 + 42) = v73;
        *(_QWORD *)(a7 + 48) = v59;
        return;
      }
    }
    v79 = *(double *)(*(_QWORD *)v81 + 8) >= v135;
    goto LABEL_26;
  }
  v97 = *((_WORD *)v8 + 52);
  v98 = *((_BYTE *)v8 + 106);
  *(_QWORD *)&v172 = *((_QWORD *)v8 + 12);
  WORD4(v172) = v97;
  BYTE10(v172) = v98;
  swift_unknownObjectRetain_n();
  v99 = v26;
  swift_unknownObjectRetain_n();
  v100 = v99;
  v101 = DisplayList.minimalDescription.getter();
  v152 = v102;
  v154 = v101;
  static os_log_type_t.error.getter();
  if (one-time initialization token for internalErrorsLog != -1)
    swift_once();
  swift_beginAccess();
  v103 = (void *)static Log.internalErrorsLog;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v104 = swift_allocObject();
  *(_OWORD *)(v104 + 16) = xmmword_235283240;
  v105 = MEMORY[0x24BEE44F0];
  v106 = MEMORY[0x24BEE4558];
  *(_QWORD *)(v104 + 56) = MEMORY[0x24BEE44F0];
  *(_QWORD *)(v104 + 64) = v106;
  *(_DWORD *)(v104 + 32) = v155;
  *(_QWORD *)(v104 + 96) = v105;
  *(_QWORD *)(v104 + 104) = v106;
  *(_DWORD *)(v104 + 72) = v156;
  *(_QWORD *)(v104 + 136) = v105;
  *(_QWORD *)(v104 + 144) = v106;
  *(_DWORD *)(v104 + 112) = v138;
  *(_QWORD *)(v104 + 176) = v105;
  *(_QWORD *)(v104 + 184) = v106;
  *(_DWORD *)(v104 + 152) = v20;
  v107 = v103;
  _print_unlocked<A, B>(_:_:)();
  v108 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v104 + 216) = MEMORY[0x24BEE0D00];
  v109 = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(v104 + 192) = 0;
  *(_QWORD *)(v104 + 200) = 0xE000000000000000;
  *(_QWORD *)(v104 + 256) = v108;
  *(_QWORD *)(v104 + 264) = v109;
  *(_QWORD *)(v104 + 224) = v109;
  *(_QWORD *)(v104 + 232) = v154;
  *(_QWORD *)(v104 + 240) = v152;
  swift_bridgeObjectRetain();
  os_log(_:dso:log:_:_:)();

  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(37);
  v110._countAndFlagsBits = 0x6465746165706572;
  v110._object = (void *)0xEF203A7765697620;
  String.append(_:)(v110);
  v111._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v111);
  swift_bridgeObjectRelease();
  v112._countAndFlagsBits = 35;
  v112._object = (void *)0xE100000000000000;
  String.append(_:)(v112);
  swift_bridgeObjectRelease();
  v113._countAndFlagsBits = 8236;
  v113._object = (void *)0xE200000000000000;
  String.append(_:)(v113);
  v114._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v114);
  swift_bridgeObjectRelease();
  v115._countAndFlagsBits = 8236;
  v115._object = (void *)0xE200000000000000;
  String.append(_:)(v115);
  v116._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v116);
  swift_bridgeObjectRelease();
  v117._countAndFlagsBits = 35;
  v117._object = (void *)0xE100000000000000;
  String.append(_:)(v117);
  swift_bridgeObjectRelease();
  v118._countAndFlagsBits = 8236;
  v118._object = (void *)0xE200000000000000;
  String.append(_:)(v118);
  v119._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v119);
  swift_bridgeObjectRelease();
  v120._countAndFlagsBits = 8236;
  v120._object = (void *)0xE200000000000000;
  String.append(_:)(v120);
  _print_unlocked<A, B>(_:_:)();
  v121._countAndFlagsBits = 8236;
  v121._object = (void *)0xE200000000000000;
  String.append(_:)(v121);
  v122._countAndFlagsBits = v154;
  v122._object = v152;
  String.append(_:)(v122);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

unint64_t DisplayList.ViewUpdater.ViewCache.setNextUpdate(_:in:)(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  char v3;
  double v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  _BOOL8 v13;
  BOOL v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;

  v4 = *(double *)result;
  if (*(double *)result >= *(double *)(a2 + 48))
    return result;
  v5 = v2;
  *(double *)(a2 + 48) = v4;
  v6 = *(_BYTE *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v10 = *(_QWORD **)(v2 + 8);
  *(_QWORD *)(v5 + 8) = 0x8000000000000000;
  result = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8, v6);
  v12 = v10[2];
  v13 = (v11 & 1) == 0;
  v14 = __OFADD__(v12, v13);
  v15 = v12 + v13;
  if (v14)
  {
    __break(1u);
    goto LABEL_14;
  }
  v3 = v11;
  if (v10[3] < v15)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, isUniquelyReferenced_nonNull_native);
    result = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8, v6);
    if ((v3 & 1) == (v16 & 1))
      goto LABEL_7;
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_14:
    v20 = result;
    specialized _NativeDictionary.copy()();
    result = v20;
    if ((v3 & 1) != 0)
      goto LABEL_8;
LABEL_15:
    __break(1u);
    return result;
  }
LABEL_7:
  if ((v3 & 1) == 0)
    goto LABEL_15;
LABEL_8:
  v17 = v10[7];
  if (*(_QWORD *)(v17 + 120 * result))
  {
    v18 = v17 + 120 * result;
    v19 = *(_BYTE *)(v18 + 105);
    *(_BYTE *)(v18 + 104) = *(_BYTE *)(v18 + 104);
    *(_BYTE *)(v18 + 105) = v19;
    *(double *)(v18 + 112) = v4;
  }
  else
  {
    result = specialized _NativeDictionary._delete(at:)(result, (uint64_t)v10);
  }
  *(_QWORD *)(v5 + 8) = v10;
  return result;
}

{
  uint64_t v2;
  char v3;
  double v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  _BOOL8 v13;
  BOOL v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;

  v4 = *(double *)result;
  if (*(double *)result >= *(double *)(a2 + 32))
    return result;
  v5 = v2;
  *(double *)(a2 + 32) = v4;
  v6 = *(_BYTE *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v10 = *(_QWORD **)(v2 + 8);
  *(_QWORD *)(v5 + 8) = 0x8000000000000000;
  result = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8, v6);
  v12 = v10[2];
  v13 = (v11 & 1) == 0;
  v14 = __OFADD__(v12, v13);
  v15 = v12 + v13;
  if (v14)
  {
    __break(1u);
    goto LABEL_14;
  }
  v3 = v11;
  if (v10[3] < v15)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, isUniquelyReferenced_nonNull_native);
    result = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8, v6);
    if ((v3 & 1) == (v16 & 1))
      goto LABEL_7;
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_14:
    v20 = result;
    specialized _NativeDictionary.copy()();
    result = v20;
    if ((v3 & 1) != 0)
      goto LABEL_8;
LABEL_15:
    __break(1u);
    return result;
  }
LABEL_7:
  if ((v3 & 1) == 0)
    goto LABEL_15;
LABEL_8:
  v17 = v10[7];
  if (*(_QWORD *)(v17 + 120 * result))
  {
    v18 = v17 + 120 * result;
    v19 = *(_BYTE *)(v18 + 105);
    *(_BYTE *)(v18 + 104) = *(_BYTE *)(v18 + 104);
    *(_BYTE *)(v18 + 105) = v19;
    *(double *)(v18 + 112) = v4;
  }
  else
  {
    result = specialized _NativeDictionary._delete(at:)(result, (uint64_t)v10);
  }
  *(_QWORD *)(v5 + 8) = v10;
  return result;
}

unint64_t specialized DisplayList.ViewUpdater.ViewCache.updateAsync(oldItem:oldState:newItem:newState:tag:updateView:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  return specialized DisplayList.ViewUpdater.ViewCache.updateAsync(oldItem:oldState:newItem:newState:tag:updateView:)(a1, a2, a3, a4, a5, a6, a7, (void (*)(_OWORD *__return_ptr, uint64_t, __int128 *, _OWORD *, uint64_t, _OWORD *, uint64_t, char *, uint64_t))specialized closure #1 in DisplayList.ViewUpdater.ViewCache.updateAsync(oldItem:oldState:newItem:newState:tag:updateView:), a8);
}

{
  return specialized DisplayList.ViewUpdater.ViewCache.updateAsync(oldItem:oldState:newItem:newState:tag:updateView:)(a1, a2, a3, a4, a5, a6, a7, (void (*)(_OWORD *__return_ptr, uint64_t, __int128 *, _OWORD *, uint64_t, _OWORD *, uint64_t, char *, uint64_t))specialized closure #1 in DisplayList.ViewUpdater.ViewCache.updateAsync(oldItem:oldState:newItem:newState:tag:updateView:), a8);
}

unint64_t specialized DisplayList.ViewUpdater.ViewCache.updateAsync(oldItem:oldState:newItem:newState:tag:updateView:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void (*a8)(_OWORD *__return_ptr, uint64_t, __int128 *, _OWORD *, uint64_t, _OWORD *, uint64_t, char *, uint64_t)@<X7>, _QWORD *a9@<X8>)
{
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v15;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  __int16 v27;
  __int16 v28;
  int v29;
  char v30;
  char v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  id v35;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  _BYTE v45[48];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[7];
  uint64_t v51;
  _OWORD v52[2];
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  _OWORD v56[2];
  __int128 v57;
  __int128 v58;
  uint64_t v59;

  v10 = *(_OWORD *)(result + 48);
  v53 = *(_OWORD *)(result + 32);
  v54 = v10;
  v55 = *(_QWORD *)(result + 64);
  v11 = *(_OWORD *)(result + 16);
  v52[0] = *(_OWORD *)result;
  v52[1] = v11;
  v12 = *(_OWORD *)(a3 + 48);
  v57 = *(_OWORD *)(a3 + 32);
  v58 = v12;
  v59 = *(_QWORD *)(a3 + 64);
  v13 = *(_OWORD *)(a3 + 16);
  v56[0] = *(_OWORD *)a3;
  v56[1] = v13;
  if (HIDWORD(v55) == HIDWORD(v59)
    && (v15 = *(_QWORD *)(a6 + 8), *(_QWORD *)(v15 + 16))
    && (v20 = a5 & 1,
        v21 = *(unsigned int *)(a6 + 72) | ((unint64_t)*(unsigned int *)(a6 + 76) << 32),
        v22 = *(unsigned int *)(a6 + 80) | ((unint64_t)*(unsigned int *)(a6 + 84) << 32),
        result = specialized __RawDictionaryStorage.find<A>(_:)(v21, v22, a5 & 1),
        (v23 & 1) != 0))
  {
    v41 = v21;
    v24 = *(_QWORD *)(v15 + 56) + 120 * result;
    v25 = *(void **)(v24 + 8);
    v26 = *(_QWORD *)(v24 + 16);
    v27 = *(_WORD *)(v24 + 56);
    v28 = *(_WORD *)(v24 + 96);
    v29 = *(_DWORD *)(v24 + 100);
    v30 = *(_BYTE *)(v24 + 104);
    v31 = *(_BYTE *)(v24 + 105);
    v32 = *(_QWORD *)(v24 + 112);
    *(_QWORD *)&v44 = *(_QWORD *)v24;
    *((_QWORD *)&v44 + 1) = v25;
    *(_QWORD *)v45 = v26;
    v33 = *(_OWORD *)(v24 + 40);
    *(_OWORD *)&v45[8] = *(_OWORD *)(v24 + 24);
    *(_OWORD *)&v45[24] = v33;
    *(_WORD *)&v45[40] = v27;
    v34 = *(_OWORD *)(v24 + 80);
    v46 = *(_OWORD *)(v24 + 64);
    v47 = v34;
    LOWORD(v48) = v28;
    DWORD1(v48) = v29;
    BYTE8(v48) = v30;
    BYTE9(v48) = v31;
    v49 = v32;
    v43 = 0;
    swift_unknownObjectRetain();
    v35 = v25;
    swift_unknownObjectRetain();
    a8(v50, a6, &v44, v52, a2, v56, a4, &v43, a7);
    if (LOBYTE(v50[0]) == 1)
    {
      if ((v43 & 1) != 0)
      {
        v50[4] = v46;
        v50[5] = v47;
        v50[6] = v48;
        v51 = v49;
        v50[0] = v44;
        v50[1] = *(_OWORD *)v45;
        v50[2] = *(_OWORD *)&v45[16];
        v50[3] = *(_OWORD *)&v45[32];
        outlined retain of DisplayList.ViewUpdater.ViewInfo((uint64_t)v50);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v42 = *(_QWORD *)(a6 + 8);
        *(_QWORD *)(a6 + 8) = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v50, v41, v22, v20, isUniquelyReferenced_nonNull_native);
        *(_QWORD *)(a6 + 8) = v42;
        swift_bridgeObjectRelease();
      }
      v37 = v49;
      v38 = v20 | ((unint64_t)((_QWORD)v57 != (_QWORD)v53) << 8);
      v39 = 0x10000;
      if (BYTE9(v48))
        v39 = 0;
      v40 = (void *)*((_QWORD *)&v44 + 1);
      *a9 = v46;
      a9[1] = v41;
      a9[2] = v22;
      a9[3] = v38 | v39;
      a9[4] = v37;
    }
    else
    {
      *a9 = 0;
      a9[1] = 0;
      a9[2] = 0;
      *(_OWORD *)(a9 + 3) = xmmword_23528B9A0;
      v40 = (void *)*((_QWORD *)&v44 + 1);
    }
    swift_unknownObjectRelease();

    return swift_unknownObjectRelease();
  }
  else
  {
    *a9 = 0;
    a9[1] = 0;
    a9[2] = 0;
    *(_OWORD *)(a9 + 3) = xmmword_23528B9A0;
  }
  return result;
}

Swift::Void __swiftcall DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)(NSObject _, Swift::String a2, CALayer in, Swift::Bool usingPresentationModifier)
{
  uint64_t v4;
  uint64_t v5;
  char refcount;
  Class isa;
  void *object;
  uint64_t countAndFlagsBits;
  objc_class *v11;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;

  v5 = v4;
  refcount = in._attr.refcount;
  isa = in.super.isa;
  object = a2._object;
  countAndFlagsBits = a2._countAndFlagsBits;
  swift_bridgeObjectRetain();
  v11 = _.isa;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v13 = *(_QWORD **)(v5 + 48);
  *(_QWORD *)(v5 + 48) = 0x8000000000000000;
  v15 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)isa);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
LABEL_14:
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
    *(_QWORD *)(v5 + 8 * v15) = v13;
    goto LABEL_10;
  }
  v19 = v14;
  if (v13[3] >= v18)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      specialized _NativeDictionary.copy()();
  }
  else
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, isUniquelyReferenced_nonNull_native);
    v20 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)isa);
    if ((v19 & 1) != (v21 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return;
    }
    v15 = v20;
  }
  *(_QWORD *)(v5 + 48) = v13;
  swift_bridgeObjectRelease();
  v22 = *(_QWORD *)(v5 + 48);
  if ((v19 & 1) == 0)
    specialized _NativeDictionary._insert(at:key:value:)(v15, isa, MEMORY[0x24BEE4AF8], *(_QWORD *)(v5 + 48));
  v5 = *(_QWORD *)(v22 + 56);
  v13 = *(_QWORD **)(v5 + 8 * v15);
  v23 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v5 + 8 * v15) = v13;
  if ((v23 & 1) == 0)
    goto LABEL_14;
LABEL_10:
  v25 = v13[2];
  v24 = v13[3];
  if (v25 >= v24 >> 1)
  {
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v24 > 1), v25 + 1, 1, v13);
    *(_QWORD *)(v5 + 8 * v15) = v13;
  }
  v13[2] = v25 + 1;
  v26 = &v13[4 * v25];
  v26[4] = countAndFlagsBits;
  v26[5] = object;
  v26[6] = v11;
  *((_BYTE *)v26 + 56) = refcount & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance DisplayList.ViewUpdater.ViewCache.Key()
{
  uint64_t v0;
  Swift::UInt32 v1;
  Swift::UInt32 v2;
  Swift::UInt32 v3;
  Swift::UInt32 v4;
  Swift::UInt8 v5;

  v1 = *(_DWORD *)v0;
  v2 = *(_DWORD *)(v0 + 4);
  v3 = *(_DWORD *)(v0 + 8);
  v4 = *(_DWORD *)(v0 + 12);
  v5 = *(_BYTE *)(v0 + 16);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance DisplayList.ViewUpdater.ViewCache.Key()
{
  uint64_t v0;
  Swift::UInt32 v1;
  Swift::UInt32 v2;
  Swift::UInt32 v3;
  Swift::UInt8 v4;

  v1 = *(_DWORD *)(v0 + 4);
  v2 = *(_DWORD *)(v0 + 8);
  v3 = *(_DWORD *)(v0 + 12);
  v4 = *(_BYTE *)(v0 + 16);
  Hasher._combine(_:)(*(_DWORD *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DisplayList.ViewUpdater.ViewCache.Key()
{
  uint64_t v0;
  Swift::UInt32 v1;
  Swift::UInt32 v2;
  Swift::UInt32 v3;
  Swift::UInt32 v4;
  Swift::UInt8 v5;

  v1 = *(_DWORD *)v0;
  v2 = *(_DWORD *)(v0 + 4);
  v3 = *(_DWORD *)(v0 + 8);
  v4 = *(_DWORD *)(v0 + 12);
  v5 = *(_BYTE *)(v0 + 16);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

uint64_t DisplayList.ViewUpdater.ViewCache.prepareAnimation(_:displayList:item:parentState:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  char v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  int8x16_t v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t result;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  __int16 v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned __int8 v57;
  uint64_t v58;
  char v59;
  uint64_t v60[3];
  _BYTE v61[24];
  uint64_t v62;
  uint64_t v63;
  _BYTE v64[40];
  char v65;
  uint64_t v66;
  char v67;

  v7 = v6;
  v54 = *a2;
  v52 = *((_WORD *)a2 + 4);
  v53 = *((_BYTE *)a2 + 10);
  v11 = *(_QWORD *)(*(_QWORD *)a4 + 8);
  v67 = 1;
  v12 = v6[9];
  v13 = v6[10];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v15 = v6[4];
  *(_QWORD *)v64 = v15;
  v7[4] = 0x8000000000000000;
  v17 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v13, 0);
  v18 = *(_QWORD *)(v15 + 16);
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
LABEL_25:
    specialized _NativeDictionary.copy()();
    v15 = *(_QWORD *)v64;
    goto LABEL_6;
  }
  v5 = v16;
  if (*(_QWORD *)(v15 + 24) >= v20)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_6;
    goto LABEL_25;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, isUniquelyReferenced_nonNull_native);
  v15 = *(_QWORD *)v64;
  v21 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v13, 0);
  if ((v5 & 1) != (v22 & 1))
  {
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    goto LABEL_27;
  }
  v17 = v21;
LABEL_6:
  v7[4] = v15;
  swift_bridgeObjectRelease();
  v23 = (_QWORD *)v7[4];
  if ((v5 & 1) == 0)
  {
    memset(v64, 0, sizeof(v64));
    v65 = 2;
    v66 = 0;
    specialized _NativeDictionary._insert(at:key:value:)(v17, v12, v13, 0, (uint64_t)v64, v23);
  }
  v24 = v23[7];
  v25 = v24 + 56 * v17;
  outlined init with copy of DisplayList.ViewUpdater.ViewCache.AnimatorInfo.State((uint64_t *)v25, (uint64_t)v64);
  if (v65 == 2
    && (v26 = vorrq_s8(*(int8x16_t *)&v64[8], *(int8x16_t *)&v64[24]),
        !(*(_QWORD *)&vorr_s8(*(int8x8_t *)v26.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)) | *(_QWORD *)v64)))
  {
    outlined destroy of DisplayList.ViewUpdater.ViewCache.AnimatorInfo.State((uint64_t)v64);
    v47 = a1[3];
    v48 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v47);
    (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(v48 + 32))(v64, v47, v48);
    v65 = 0;
    outlined assign with take of DisplayList.ViewUpdater.ViewCache.AnimatorInfo.State((uint64_t)v64, v24 + 56 * v17);
  }
  else
  {
    outlined destroy of DisplayList.ViewUpdater.ViewCache.AnimatorInfo.State((uint64_t)v64);
  }
  outlined init with copy of DisplayList.ViewUpdater.ViewCache.AnimatorInfo.State((uint64_t *)(v24 + 56 * v17), (uint64_t)v64);
  if (!v65)
  {
    v50 = v24;
    outlined init with take of ScrollStateRequest((__int128 *)v64, (uint64_t)v61);
    outlined destroy of DisplayList.ViewUpdater.ViewCache.AnimatorInfo.State(v24 + 56 * v17);
    *(_OWORD *)v25 = 0u;
    *(_OWORD *)(v25 + 16) = 0u;
    *(_QWORD *)(v25 + 32) = 0;
    *(_BYTE *)(v25 + 40) = 2;
    v60[0] = v11;
    v27 = *(double *)(a3 + 16);
    v28 = *(double *)(a3 + 24);
    v29 = v62;
    v30 = v63;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v61, v62);
    v49 = (*(uint64_t (**)(uint64_t *, _QWORD *, uint64_t *, uint64_t, uint64_t, double, double))(v30 + 8))(&v55, a1, v60, v29, v30, v27, v28);
    v31 = v55;
    v32 = v56;
    v33 = v57;
    swift_beginAccess();
    v67 = v49 & 1;
    v34 = a3 + 64;
    v35 = *(_QWORD *)(v34 - 24);
    v36 = *(_QWORD *)(v34 - 16);
    *(_QWORD *)(v34 - 24) = v31;
    *(_QWORD *)(v34 - 16) = v32 | (v33 << 32) | 0x4000000000000000;
    *(_QWORD *)(v34 - 8) = v54;
    *(_WORD *)v34 = v52;
    *(_BYTE *)(v34 + 2) = v53;
    outlined copy of DisplayList.Effect(v31, v32, v33);
    swift_bridgeObjectRetain();
    outlined consume of DisplayList.Item.Value(v35, v36);
    v37 = *(_QWORD *)(*(_QWORD *)a4 + 16);
    *(_QWORD *)(v34 - 32) = v37;
    if ((v49 & 1) != 0)
    {
      v55 = v31;
      v56 = v32;
      v57 = v33;
      v38 = 1;
      v58 = v37;
    }
    else
    {
      outlined consume of DisplayList.Effect(v31, v32, v33);
      outlined init with copy of AnyTrackedValue((uint64_t)v61, (uint64_t)&v55);
      v38 = 0;
    }
    v45 = v17;
    v44 = a5;
    v24 = v50;
    v59 = v38;
    outlined assign with take of DisplayList.ViewUpdater.ViewCache.AnimatorInfo.State((uint64_t)&v55, v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v61);
    goto LABEL_18;
  }
  if (v65 != 1)
  {
LABEL_27:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v39 = *(_QWORD *)&v64[16];
  v40 = *(unsigned int *)&v64[8] | ((unint64_t)v64[12] << 32) | 0x4000000000000000;
  v41 = a3 + 64;
  v42 = *(_QWORD *)(v41 - 24);
  v43 = *(_QWORD *)(v41 - 16);
  *(_QWORD *)(v41 - 24) = *(_QWORD *)v64;
  *(_QWORD *)(v41 - 16) = v40;
  *(_QWORD *)(v41 - 8) = v54;
  *(_WORD *)v41 = v52;
  *(_BYTE *)(v41 + 2) = v53;
  swift_bridgeObjectRetain();
  outlined consume of DisplayList.Item.Value(v42, v43);
  *(_QWORD *)(v41 - 32) = v39;
  v44 = a5;
  v45 = v17;
LABEL_18:
  *(_QWORD *)(v24 + 56 * v45 + 48) = v11;
  result = swift_beginAccess();
  if (v67 == 1)
  {
    if (one-time initialization token for infinity != -1)
      result = swift_once();
    v11 = static Time.infinity;
  }
  *v44 = v11;
  return result;
}

void specialized closure #1 in DisplayList.ViewUpdater.ViewCache.updateAsync(oldItem:oldState:newItem:newState:tag:updateView:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X4>, __int128 *a6@<X5>, BOOL *a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>)
{
  char v12;
  char v13;
  unsigned __int8 v14;
  uint64_t v15;
  id v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unsigned __int8 v21;
  double v22;
  BOOL v23;
  char v24;
  _BYTE v31[20];
  uint64_t v32;
  id v33[2];
  char v34;
  char v35;
  double v36;
  unsigned __int8 v37;
  _OWORD v38[4];
  uint64_t v39;
  _OWORD v40[4];
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v12 = *(_BYTE *)(a2 + 56);
  v13 = *(_BYTE *)(a2 + 57);
  v14 = *(_BYTE *)(a2 + 105);
  v15 = one-time initialization token for infinity;
  v16 = *(id *)(a2 + 8);
  if (v15 != -1)
    swift_once();
  v33[0] = v16;
  v33[1] = a1;
  v34 = v12;
  v35 = v13;
  v36 = *(double *)&static Time.infinity;
  v37 = v14;
  v32 = a8;
  v17 = *(_OWORD *)(a3 + 48);
  v40[2] = *(_OWORD *)(a3 + 32);
  v40[3] = v17;
  v41 = *(_QWORD *)(a3 + 64);
  v18 = *(_OWORD *)(a3 + 16);
  v40[0] = *(_OWORD *)a3;
  v40[1] = v18;
  v19 = *(_OWORD *)(a5 + 48);
  v38[2] = *(_OWORD *)(a5 + 32);
  v38[3] = v19;
  v39 = *(_QWORD *)(a5 + 64);
  v20 = *(_OWORD *)(a5 + 16);
  v38[0] = *(_OWORD *)a5;
  v38[1] = v20;
  if (DisplayList.ViewUpdater.Platform.updateItemViewAsync(layer:index:oldItem:oldState:newItem:newState:)((uint64_t)v33, (uint64_t)v31, (uint64_t)v40, a4, (double *)v38, a6))
  {
    v21 = v37;
    v22 = v36;
    v23 = *(unsigned __int8 *)(a2 + 105) != v37 || *(double *)(a2 + 112) != v36;
    *a7 = v23;
    *(_BYTE *)(a2 + 105) = v21;

    *(double *)(a2 + 112) = v22;
    v24 = 1;
  }
  else
  {

    v24 = 0;
  }
  *a9 = v24;
}

void specialized closure #1 in DisplayList.ViewUpdater.ViewCache.updateAsync(oldItem:oldState:newItem:newState:tag:updateView:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, BOOL *a7@<X6>, char *a8@<X8>)
{
  char v12;
  char v13;
  unsigned __int8 v14;
  uint64_t v15;
  id v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unsigned __int8 v21;
  double v22;
  BOOL v23;
  char v24;
  id v29[2];
  char v30;
  char v31;
  double v32;
  unsigned __int8 v33;
  __int128 v34[4];
  uint64_t v35;
  __int128 v36[4];
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v12 = *(_BYTE *)(a2 + 56);
  v13 = *(_BYTE *)(a2 + 57);
  v14 = *(_BYTE *)(a2 + 105);
  v15 = one-time initialization token for infinity;
  v16 = *(id *)(a2 + 8);
  if (v15 != -1)
    swift_once();
  v29[0] = v16;
  v29[1] = a1;
  v30 = v12;
  v31 = v13;
  v32 = *(double *)&static Time.infinity;
  v33 = v14;
  v17 = *(_OWORD *)(a3 + 48);
  v36[2] = *(_OWORD *)(a3 + 32);
  v36[3] = v17;
  v37 = *(_QWORD *)(a3 + 64);
  v18 = *(_OWORD *)(a3 + 16);
  v36[0] = *(_OWORD *)a3;
  v36[1] = v18;
  *(_QWORD *)&v18 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)&v17 = *(_QWORD *)(a3 + 24);
  v19 = *(_OWORD *)(a5 + 48);
  v34[2] = *(_OWORD *)(a5 + 32);
  v34[3] = v19;
  v35 = *(_QWORD *)(a5 + 64);
  v20 = *(_OWORD *)(a5 + 16);
  v34[0] = *(_OWORD *)a5;
  v34[1] = v20;
  if (DisplayList.ViewUpdater.Platform.updateStateAsync(layer:oldItem:oldSize:oldState:newItem:newSize:newState:)((uint64_t)v29, v36, a4, v34, a6, *(CGFloat *)&v18, *(CGFloat *)&v17, *(double *)(a5 + 16), *(double *)(a5 + 24)))
  {
    v21 = v33;
    v22 = v32;
    v23 = *(unsigned __int8 *)(a2 + 105) != v33 || *(double *)(a2 + 112) != v32;
    *a7 = v23;
    *(_BYTE *)(a2 + 105) = v21;

    *(double *)(a2 + 112) = v22;
    v24 = 1;
  }
  else
  {

    v24 = 0;
  }
  *a8 = v24;
}

unint64_t closure #1 in DisplayList.ViewUpdater.ViewCache.removeRecursively(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, char *a3@<X8>)
{
  unint64_t result;
  char v6;
  unint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  __int16 v13;
  int v14;
  char v15;
  int v16;
  char v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  __int16 v25;
  __int16 v26;
  __int16 v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  void *v36;
  _QWORD v37[7];
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  __int16 v43;
  __int16 v44;
  __int16 v45;
  __int16 v46;
  __int16 v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;
  int v51;
  char v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;

  result = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  if ((v6 & 1) != 0)
  {
    v7 = result;
    v35 = a3;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = a2[1];
    v37[0] = v9;
    a2[1] = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      v9 = v37[0];
    }
    v10 = *(_QWORD *)(v9 + 56) + 120 * v7;
    v11 = *(_QWORD *)v10;
    v36 = *(void **)(v10 + 8);
    v33 = *(_QWORD *)(v10 + 24);
    v34 = *(_QWORD *)(v10 + 16);
    v22 = *(_QWORD *)(v10 + 40);
    v23 = *(_QWORD *)(v10 + 48);
    v30 = *(_BYTE *)(v10 + 56);
    v28 = *(_QWORD *)(v10 + 32);
    v29 = *(_BYTE *)(v10 + 57);
    v31 = *(_QWORD *)(v10 + 72);
    v32 = *(_QWORD *)(v10 + 64);
    v27 = *(_WORD *)(v10 + 80);
    v26 = *(_WORD *)(v10 + 82);
    v25 = *(_WORD *)(v10 + 84);
    v24 = *(_WORD *)(v10 + 86);
    v18 = *(_WORD *)(v10 + 88);
    v12 = *(_WORD *)(v10 + 90);
    v21 = *(_WORD *)(v10 + 92);
    v13 = *(_WORD *)(v10 + 96);
    v14 = *(_DWORD *)(v10 + 100);
    v15 = *(_BYTE *)(v10 + 104);
    v16 = *(unsigned __int8 *)(v10 + 105);
    v19 = *(_QWORD *)(v10 + 112);
    v20 = *(_WORD *)(v10 + 94);
    specialized _NativeDictionary._delete(at:)(v7, v9);
    a2[1] = v9;
    result = swift_bridgeObjectRelease();
    if (v11)
    {
      v55 = *a2;
      v37[0] = v11;
      v37[1] = v36;
      v37[2] = v34;
      v37[3] = v33;
      v37[4] = v28;
      v37[5] = v22;
      v37[6] = v23;
      v38 = v30;
      v39 = v29;
      v40 = v32;
      v41 = v31;
      v42 = v27;
      v43 = v26;
      v44 = v25;
      v45 = v24;
      v46 = v18;
      v47 = v12;
      v48 = v21;
      v49 = v20;
      v50 = v13;
      v51 = v14;
      v52 = v15;
      v53 = v16 != 0;
      v54 = v19;
      specialized DisplayList.ViewUpdater.Platform.forEachChild(of:do:)((uint64_t)v37, &v55, a2);
      result = outlined consume of DisplayList.ViewUpdater.ViewInfo?(v11, v36);
      v17 = 0;
    }
    else
    {
      v17 = 1;
    }
    a3 = v35;
  }
  else
  {
    v17 = 1;
  }
  *a3 = v17;
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in DisplayList.ViewUpdater.ViewCache.removeRecursively(_:)(void *a1, uint64_t *a2)
{
  unint64_t v4;
  char v5;
  unint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;

  v4 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)a1);
  if ((v5 & 1) != 0)
  {
    v6 = v4;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v8 = a2[2];
    a2[2] = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      specialized _NativeDictionary.copy()();
    v9 = *(_QWORD *)(v8 + 56) + 20 * v6;
    v10 = *(_QWORD *)v9;
    v11 = *(_QWORD *)(v9 + 8);
    v12 = *(_BYTE *)(v9 + 16);
    specialized _NativeDictionary._delete(at:)(v6, v8);
    a2[2] = v8;
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v12 = 2;
  }
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI11DisplayListV11ViewUpdaterC0G5CacheV3KeyV_s5NeverOytSgTB503_s7c4UI11ef3V11gh4C0E5i70V17removeRecursively33_A9949015C771FF99F7528BB7239FD006LLyyyXlFytSgAG3J6VXEfU_AJTf1cn_n(v10, v11, v12, a2);
  return CoreViewRemoveFromSuperview(*(_DWORD *)a2 & 3, a1);
}

void specialized thunk for @callee_guaranteed () -> (@owned DisplayList.ViewUpdater.ViewCache.AsyncValues)(_QWORD *a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x24BEE4B00];
  *a1 = MEMORY[0x24BEE4B08];
  a1[1] = v1;
}

uint64_t outlined consume of DisplayList.ViewUpdater.ViewInfo?(uint64_t result, void *a2)
{
  if (result)
  {
    swift_unknownObjectRelease();

    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, double a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  unint64_t v6;
  size_t v7;
  uint64_t v8;
  void *v9;
  _QWORD v11[2];

  v4 = isStackAllocationSafe;
  v11[1] = *MEMORY[0x24BDAC8D0];
  v5 = *(_BYTE *)(isStackAllocationSafe + 32);
  v6 = (unint64_t)((1 << v5) + 63) >> 6;
  v7 = 8 * v6;
  if ((v5 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    bzero((char *)v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    v8 = specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v6, v4, a2);
    if (v2)
      swift_willThrow();
    else
      return v8;
  }
  else
  {
    v9 = (void *)swift_slowAlloc();
    bzero(v9, v7);
    v4 = specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v9, v6, v4, a2);
    MEMORY[0x23B7C9D54](v9, -1, -1);
  }
  return v4;
}

uint64_t specialized closure #1 in _NativeDictionary.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3, double a4)
{
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  char v19;
  double v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  _QWORD v30[7];
  _DWORD v31[4];
  char v32;
  _BYTE v33[56];
  _BYTE v34[64];
  uint64_t v35;

  v26 = (unint64_t *)result;
  v27 = 0;
  v5 = 0;
  v35 = a3;
  v8 = *(_QWORD *)(a3 + 64);
  v6 = a3 + 64;
  v7 = v8;
  v9 = 1 << *(_BYTE *)(v6 - 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & v7;
  v28 = v6;
  v29 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v12 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v13 = v12 | (v5 << 6);
      goto LABEL_5;
    }
    v21 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v21 >= v29)
      return specialized _NativeDictionary.extractDictionary(using:count:)(v26, a2, v27, v35);
    v22 = *(_QWORD *)(v28 + 8 * v21);
    ++v5;
    if (!v22)
    {
      v5 = v21 + 1;
      if (v21 + 1 >= v29)
        return specialized _NativeDictionary.extractDictionary(using:count:)(v26, a2, v27, v35);
      v22 = *(_QWORD *)(v28 + 8 * v5);
      if (!v22)
      {
        v5 = v21 + 2;
        if (v21 + 2 >= v29)
          return specialized _NativeDictionary.extractDictionary(using:count:)(v26, a2, v27, v35);
        v22 = *(_QWORD *)(v28 + 8 * v5);
        if (!v22)
          break;
      }
    }
LABEL_20:
    v11 = (v22 - 1) & v22;
    v13 = __clz(__rbit64(v22)) + (v5 << 6);
LABEL_5:
    v14 = *(_QWORD *)(v35 + 48) + 20 * v13;
    v15 = *(_DWORD *)v14;
    v16 = *(_DWORD *)(v14 + 4);
    v18 = *(_DWORD *)(v14 + 8);
    v17 = *(_DWORD *)(v14 + 12);
    v19 = *(_BYTE *)(v14 + 16);
    outlined init with copy of DisplayList.ViewUpdater.ViewCache.AnimatorInfo(*(_QWORD *)(v35 + 56) + 56 * v13, (uint64_t)v34);
    v31[0] = v15;
    v31[1] = v16;
    v31[2] = v18;
    v31[3] = v17;
    v32 = v19;
    outlined init with copy of DisplayList.ViewUpdater.ViewCache.AnimatorInfo((uint64_t)v34, (uint64_t)v33);
    outlined init with copy of DisplayList.ViewUpdater.ViewCache.AnimatorInfo((uint64_t)v33, (uint64_t)v30);
    v20 = *(double *)&v30[6];
    outlined destroy of DisplayList.ViewUpdater.ViewCache.AnimatorInfo((uint64_t)v30);
    outlined destroy of (key: DisplayList.ViewUpdater.ViewCache.Key, value: DisplayList.ViewUpdater.ViewCache.AnimatorInfo)((uint64_t)v31);
    result = outlined destroy of DisplayList.ViewUpdater.ViewCache.AnimatorInfo((uint64_t)v34);
    if (v20 >= a4)
    {
      *(unint64_t *)((char *)v26 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      if (__OFADD__(v27++, 1))
      {
        __break(1u);
        return specialized _NativeDictionary.extractDictionary(using:count:)(v26, a2, v27, v35);
      }
    }
  }
  v23 = v21 + 3;
  if (v23 >= v29)
    return specialized _NativeDictionary.extractDictionary(using:count:)(v26, a2, v27, v35);
  v22 = *(_QWORD *)(v28 + 8 * v23);
  if (v22)
  {
    v5 = v23;
    goto LABEL_20;
  }
  while (1)
  {
    v5 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v5 >= v29)
      return specialized _NativeDictionary.extractDictionary(using:count:)(v26, a2, v27, v35);
    v22 = *(_QWORD *)(v28 + 8 * v5);
    ++v23;
    if (v22)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t outlined destroy of DisplayList.ViewUpdater.ViewCache.AnimatorInfo(uint64_t a1)
{
  destroy for DisplayList.ViewUpdater.ViewCache.AnimatorInfo(a1);
  return a1;
}

uint64_t outlined destroy of (key: DisplayList.ViewUpdater.ViewCache.Key, value: DisplayList.ViewUpdater.ViewCache.AnimatorInfo)(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for (key: DisplayList.ViewUpdater.ViewCache.Key, value: DisplayList.ViewUpdater.ViewCache.AnimatorInfo)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for (key: DisplayList.ViewUpdater.ViewCache.Key, value: DisplayList.ViewUpdater.ViewCache.AnimatorInfo)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (key: DisplayList.ViewUpdater.ViewCache.Key, value: DisplayList.ViewUpdater.ViewCache.AnimatorInfo))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: DisplayList.ViewUpdater.ViewCache.Key, value: DisplayList.ViewUpdater.ViewCache.AnimatorInfo));
  }
}

uint64_t outlined retain of DisplayList.ViewUpdater.ViewInfo(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 8);
  swift_unknownObjectRetain();
  v3 = v2;
  swift_unknownObjectRetain();
  return a1;
}

uint64_t outlined init with copy of DisplayList.ViewUpdater.ViewCache.AnimatorInfo.State(uint64_t *a1, uint64_t a2)
{
  initializeWithCopy for DisplayList.ViewUpdater.ViewCache.AnimatorInfo.State(a2, a1);
  return a2;
}

uint64_t outlined destroy of DisplayList.ViewUpdater.ViewCache.AnimatorInfo.State(uint64_t a1)
{
  destroy for DisplayList.ViewUpdater.ViewCache.AnimatorInfo.State(a1);
  return a1;
}

uint64_t outlined assign with take of DisplayList.ViewUpdater.ViewCache.AnimatorInfo.State(uint64_t a1, uint64_t a2)
{
  assignWithTake for DisplayList.ViewUpdater.ViewCache.AnimatorInfo.State(a2, a1);
  return a2;
}

uint64_t destroy for DisplayList.ViewUpdater.ViewCache.AnimatorInfo.State(uint64_t result)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(result + 40);
  if (v1 >= 2)
    v1 = *(_DWORD *)result + 2;
  if (v1 == 1)
    return outlined consume of DisplayList.Effect(*(_QWORD *)result, *(_DWORD *)(result + 8), *(_BYTE *)(result + 12));
  if (!v1)
    return __swift_destroy_boxed_opaque_existential_1(result);
  return result;
}

uint64_t initializeWithCopy for DisplayList.ViewUpdater.ViewCache.AnimatorInfo.State(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  __int128 v5;
  uint64_t v6;
  int v7;
  char v8;
  __int128 v9;

  v4 = *((unsigned __int8 *)a2 + 40);
  if (v4 >= 2)
    v4 = *(_DWORD *)a2 + 2;
  if (v4 == 1)
  {
    v6 = *a2;
    v7 = *((_DWORD *)a2 + 2);
    v8 = *((_BYTE *)a2 + 12);
    outlined copy of DisplayList.Effect(*a2, v7, v8);
    *(_QWORD *)a1 = v6;
    *(_DWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 12) = v8;
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_BYTE *)(a1 + 40) = 1;
  }
  else if (v4)
  {
    v9 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v9;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)a2 + 25);
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t, uint64_t *))(v5 - 8))(a1, a2);
    *(_BYTE *)(a1 + 40) = 0;
  }
  return a1;
}

uint64_t assignWithCopy for DisplayList.ViewUpdater.ViewCache.AnimatorInfo.State(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  __int128 v10;
  __int128 v11;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
    {
      outlined consume of DisplayList.Effect(*(_QWORD *)a1, *(_DWORD *)(a1 + 8), *(_BYTE *)(a1 + 12));
    }
    else if (!v4)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      v7 = *a2;
      v8 = *((_DWORD *)a2 + 2);
      v9 = *((_BYTE *)a2 + 12);
      outlined copy of DisplayList.Effect(*a2, v8, v9);
      *(_QWORD *)a1 = v7;
      *(_DWORD *)(a1 + 8) = v8;
      *(_BYTE *)(a1 + 12) = v9;
      *(_QWORD *)(a1 + 16) = a2[2];
      *(_BYTE *)(a1 + 40) = 1;
    }
    else if (v5)
    {
      v10 = *(_OWORD *)a2;
      v11 = *((_OWORD *)a2 + 1);
      *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)a2 + 25);
      *(_OWORD *)a1 = v10;
      *(_OWORD *)(a1 + 16) = v11;
    }
    else
    {
      v6 = a2[3];
      *(_QWORD *)(a1 + 24) = v6;
      *(_QWORD *)(a1 + 32) = a2[4];
      (**(void (***)(uint64_t, uint64_t *))(v6 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 0;
    }
  }
  return a1;
}

uint64_t assignWithTake for DisplayList.ViewUpdater.ViewCache.AnimatorInfo.State(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
    {
      outlined consume of DisplayList.Effect(*(_QWORD *)a1, *(_DWORD *)(a1 + 8), *(_BYTE *)(a1 + 12));
    }
    else if (!v4)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 40) = 1;
    }
    else
    {
      v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      if (v5)
      {
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }
      else
      {
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        *(_BYTE *)(a1 + 40) = 0;
      }
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayList.ViewUpdater.ViewCache.AnimatorInfo.State(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 3)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DisplayList.ViewUpdater.ViewCache.AnimatorInfo.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

void *type metadata accessor for DisplayList.ViewUpdater.ViewCache.AnimatorInfo.State()
{
  return &unk_25060F5F0;
}

void destroy for DisplayList.ViewUpdater.ViewCache.PendingAsyncValue(uint64_t a1)
{
  swift_bridgeObjectRelease();

}

uint64_t initializeWithCopy for DisplayList.ViewUpdater.ViewCache.PendingAsyncValue(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  v5 = v4;
  return a1;
}

uint64_t assignWithCopy for DisplayList.ViewUpdater.ViewCache.PendingAsyncValue(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(void **)(a2 + 16);
  v5 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  v6 = v4;

  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for DisplayList.ViewUpdater.ViewCache.PendingAsyncValue(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for DisplayList.ViewUpdater.ViewCache.PendingAsyncValue()
{
  return &type metadata for DisplayList.ViewUpdater.ViewCache.PendingAsyncValue;
}

ValueMetadata *type metadata accessor for DisplayList.ViewUpdater.ViewCache.AsyncValues()
{
  return &type metadata for DisplayList.ViewUpdater.ViewCache.AsyncValues;
}

uint64_t destroy for DisplayList.ViewUpdater.ViewCache.AnimatorInfo(uint64_t result)
{
  if (*(_BYTE *)(result + 40) == 1)
    return outlined consume of DisplayList.Effect(*(_QWORD *)result, *(_DWORD *)(result + 8), *(_BYTE *)(result + 12));
  if (!*(_BYTE *)(result + 40))
    return __swift_destroy_boxed_opaque_existential_1(result);
  return result;
}

uint64_t initializeWithCopy for DisplayList.ViewUpdater.ViewCache.AnimatorInfo(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  int v6;
  char v7;
  __int128 v8;

  if (*(_BYTE *)(a2 + 40) == 1)
  {
    v5 = *(_QWORD *)a2;
    v6 = *(_DWORD *)(a2 + 8);
    v7 = *(_BYTE *)(a2 + 12);
    outlined copy of DisplayList.Effect(*(_QWORD *)a2, v6, v7);
    *(_QWORD *)a1 = v5;
    *(_DWORD *)(a1 + 8) = v6;
    *(_BYTE *)(a1 + 12) = v7;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 40) = 1;
  }
  else if (*(_BYTE *)(a2 + 40))
  {
    v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
    *(_BYTE *)(a1 + 40) = 0;
  }
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

uint64_t assignWithCopy for DisplayList.ViewUpdater.ViewCache.AnimatorInfo(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  __int128 v8;
  __int128 v9;

  if ((__int128 *)a1 != a2)
  {
    outlined destroy of DisplayList.ViewUpdater.ViewCache.AnimatorInfo.State(a1);
    if (*((_BYTE *)a2 + 40) == 1)
    {
      v5 = *(_QWORD *)a2;
      v6 = *((_DWORD *)a2 + 2);
      v7 = *((_BYTE *)a2 + 12);
      outlined copy of DisplayList.Effect(*(_QWORD *)a2, v6, v7);
      *(_QWORD *)a1 = v5;
      *(_DWORD *)(a1 + 8) = v6;
      *(_BYTE *)(a1 + 12) = v7;
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_BYTE *)(a1 + 40) = 1;
    }
    else if (*((_BYTE *)a2 + 40))
    {
      v8 = *a2;
      v9 = a2[1];
      *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v9;
    }
    else
    {
      v4 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v4;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 0;
    }
  }
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  return a1;
}

uint64_t assignWithTake for DisplayList.ViewUpdater.ViewCache.AnimatorInfo(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (a1 != a2)
  {
    outlined destroy of DisplayList.ViewUpdater.ViewCache.AnimatorInfo.State(a1);
    v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayList.ViewUpdater.ViewCache.AnimatorInfo(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DisplayList.ViewUpdater.ViewCache.AnimatorInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.ViewUpdater.ViewCache.AnimatorInfo()
{
  return &type metadata for DisplayList.ViewUpdater.ViewCache.AnimatorInfo;
}

ValueMetadata *type metadata accessor for DisplayList.ViewUpdater.ViewCache.Key()
{
  return &type metadata for DisplayList.ViewUpdater.ViewCache.Key;
}

uint64_t storeEnumTagSinglePayload for DisplayList.ViewUpdater.ViewCache.Tag(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_234F461F8 + 4 * byte_2352B3111[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_234F4622C + 4 * asc_2352B310C[v4]))();
}

uint64_t sub_234F4622C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F46234(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234F4623CLL);
  return result;
}

uint64_t sub_234F46248(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234F46250);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_234F46254(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F4625C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.ViewUpdater.ViewCache.Tag()
{
  return &type metadata for DisplayList.ViewUpdater.ViewCache.Tag;
}

unint64_t lazy protocol witness table accessor for type DisplayList.ViewUpdater.ViewCache.Tag and conformance DisplayList.ViewUpdater.ViewCache.Tag()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayList.ViewUpdater.ViewCache.Tag and conformance DisplayList.ViewUpdater.ViewCache.Tag;
  if (!lazy protocol witness table cache variable for type DisplayList.ViewUpdater.ViewCache.Tag and conformance DisplayList.ViewUpdater.ViewCache.Tag)
  {
    result = MEMORY[0x23B7C9C04]("=w;\x1B<b\n", &type metadata for DisplayList.ViewUpdater.ViewCache.Tag);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.ViewUpdater.ViewCache.Tag and conformance DisplayList.ViewUpdater.ViewCache.Tag);
  }
  return result;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs13StrideThroughVySo9NSDecimalaG_So8NSNumberCs5NeverOTg5067_s7SwiftUI25AccessibilityValueStorageV21platformAllowedValuesSaySo8G26CGSgvgAFSo9NSDecimalaXEfU_Tf1cn_n(unsigned int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  NSDecimal *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSDecimal *v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  NSDecimalNumber *v25;
  NSDecimal *v26;
  int v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  NSDecimal *v38;
  uint64_t v39;

  specialized StrideThrough.underestimatedCount.getter();
  v3 = v2;
  v39 = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray.reserveCapacity(_:)();
  if (v3 < 0)
    goto LABEL_22;
  v31 = *((unsigned __int16 *)a1 + 9);
  v33 = *((unsigned __int16 *)a1 + 8);
  v34 = *((unsigned __int16 *)a1 + 7);
  v35 = *((unsigned __int16 *)a1 + 6);
  v36 = *((unsigned __int16 *)a1 + 5);
  v32 = *((unsigned __int16 *)a1 + 4);
  v37 = *((unsigned __int16 *)a1 + 3);
  v5 = *((unsigned __int16 *)a1 + 2);
  v6 = *a1;
  v38 = (NSDecimal *)*((_QWORD *)a1 + 5);
  v7 = (NSDecimal *)a1[14];
  v8 = *(_QWORD *)(a1 + 5);
  v9 = *(_QWORD *)(a1 + 7);
  v10 = a1[9];
  v30 = v8;
  v11 = 0;
  if (!v3)
    goto LABEL_14;
  v28 = a1[9];
  while (1)
  {
    v29 = v11;
    v16 = v9;
    NSDecimal.init(integerLiteral:)(v7, 0);
    v17 = v5;
    v18 = v6 | (v5 << 32) | (v37 << 48);
    if ((static NSDecimal.< infix(_:_:)() & 1) == 0)
      break;
    v19 = v30;
    v20 = v28;
    if ((static NSDecimal.< infix(_:_:)() & 1) == 0)
      goto LABEL_10;
LABEL_4:
    NSDecimal.advanced(by:)(v21, v38);
    v5 = WORD2(v12);
    v36 = WORD1(v13);
    v37 = HIWORD(v12);
    v6 = v12;
    v32 = (unsigned __int16)v13;
    v34 = HIWORD(v13);
    v35 = WORD2(v13);
    v33 = (unsigned __int16)v14;
    v15 = HIWORD(v14);
    v31 = HIWORD(v14);
    v9 = v16;
LABEL_5:
    NSDecimal._bridgeToObjectiveC()((NSDecimalNumber *)v15);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    --v3;
    v8 = v30;
    v10 = v28;
    v11 = v29;
    if (!v3)
    {
      while (1)
      {
LABEL_14:
        NSDecimal.init(integerLiteral:)(v7, 0);
        if ((static NSDecimal.< infix(_:_:)() & 1) != 0)
        {
          if ((static NSDecimal.< infix(_:_:)() & 1) != 0)
            goto LABEL_12;
        }
        else if ((static NSDecimal.< infix(_:_:)() & 1) != 0)
        {
LABEL_12:
          NSDecimal.advanced(by:)(v26, v38);
          v5 = WORD2(v22);
          v36 = WORD1(v23);
          v37 = HIWORD(v22);
          v6 = v22;
          v32 = (unsigned __int16)v23;
          v34 = HIWORD(v23);
          v35 = WORD2(v23);
          v33 = (unsigned __int16)v24;
          v25 = (NSDecimalNumber *)HIWORD(v24);
          v31 = HIWORD(v24);
          goto LABEL_13;
        }
        v27 = MEMORY[0x23B7C6904](v6 | (v5 << 32) | (v37 << 48), v32 | (v36 << 16) | (v35 << 32) | (v34 << 48), v33 | (v31 << 16), v8, v9, v10);
        v25 = (NSDecimalNumber *)(v11 | ~v27);
        if (v11 & 1 | ((v27 & 1) == 0))
          return v39;
        v11 = 1;
LABEL_13:
        NSDecimal._bridgeToObjectiveC()(v25);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v8 = v30;
      }
    }
  }
  v19 = v30;
  v20 = v28;
  if ((static NSDecimal.< infix(_:_:)() & 1) != 0)
    goto LABEL_4;
LABEL_10:
  result = MEMORY[0x23B7C6904](v18, v32 | (v36 << 16) | (v35 << 32) | (v34 << 48), v33 | (v31 << 16), v19, v16, v20);
  if (!(v29 & 1 | ((result & 1) == 0)))
  {
    v9 = v16;
    v15 = 1;
    v29 = 1;
    v5 = v17;
    goto LABEL_5;
  }
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

void AnyAccessibilityValue.init<A>(_:)()
{
  type metadata accessor for AnyAccessibilityValue.ConcreteBase();
}

uint64_t sub_234F466D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *boxed_opaque_existential_1;

  v3[3] = a1;
  v3[4] = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyAccessibilityValue.ConcreteBase<A>, a1);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v3);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(boxed_opaque_existential_1, v2, v1);
}

uint64_t AnyAccessibilityValue.localizedDescription.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
}

SwiftUI::AnyAccessibilityValueType_optional __swiftcall AnyAccessibilityValueType.init(rawValue:)(Swift::UInt rawValue)
{
  char *v1;
  char v2;

  v2 = 12;
  if (rawValue < 0xC)
    v2 = rawValue;
  *v1 = v2;
  return (SwiftUI::AnyAccessibilityValueType_optional)rawValue;
}

uint64_t AnyAccessibilityValueType.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

SwiftUI::AnyAccessibilityValueType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AnyAccessibilityValueType(Swift::UInt *a1)
{
  return AnyAccessibilityValueType.init(rawValue:)(*a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AnyAccessibilityValueType()
{
  lazy protocol witness table accessor for type AnyAccessibilityValueType and conformance AnyAccessibilityValueType();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AnyAccessibilityValueType()
{
  lazy protocol witness table accessor for type AnyAccessibilityValueType and conformance AnyAccessibilityValueType();
  return RawRepresentable<>.encode(to:)();
}

uint64_t AccessibilityValue.localizedDescription.getter()
{
  return 0;
}

uint64_t AccessibilityValue.displayDescription.getter()
{
  return 0;
}

uint64_t AccessibilityValue.minValue.getter()
{
  return AccessibilityValue.maxValue.getter();
}

uint64_t AccessibilityValue.minValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a1, 1, 1, AssociatedTypeWitness);
}

uint64_t AccessibilityValue<>.displayDescription.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v8 = (char *)&v11 - v7;
  (*(void (**)(uint64_t, uint64_t, double))(a2 + 48))(a1, a2, v6);
  v9 = dispatch thunk of CustomStringConvertible.description.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, AssociatedTypeWitness);
  return v9;
}

{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t AccessibilityValue<>.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2);
}

uint64_t specialized AccessibilityValue<>.localizedDescription.getter(void *a1)
{
  id v1;
  id v2;
  uint64_t v3;

  v1 = a1;
  v2 = objc_msgSend((id)objc_opt_self(), sel_localizedStringFromNumber_numberStyle_, v1, 1);
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t specialized AccessibilityValue<>.localizedNumericDescription.getter(uint64_t a1, char a2)
{
  Swift::Double v4;
  double v5;
  Class isa;
  Class v7;
  double v8;
  double v9;
  double v10;
  double v11;
  NSNumber v12;
  Class v13;
  Class v14;
  uint64_t v15;
  id v16;
  uint64_t v17;

  type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
  v4 = 0.0;
  v5 = 0.0;
  if ((a2 & 1) == 0)
  {
    isa = NSNumber.init(integerLiteral:)(0).super.super.isa;
    v7 = NSNumber.init(integerLiteral:)(1).super.super.isa;
    -[objc_class doubleValue](v7, sel_doubleValue);
    v9 = v8;
    -[objc_class doubleValue](isa, sel_doubleValue);
    v11 = v10;

    v5 = v9 - v11;
    v4 = *(double *)&a1;
  }
  v12.super.super.isa = NSNumber.init(floatLiteral:)(v4).super.super.isa;
  v13 = v12.super.super.isa;
  if (fabs(v5 + -100.0) >= 2.22044605e-16)
  {
    if (fabs(v5 + -1.0) >= 2.22044605e-16)
      v15 = 1;
    else
      v15 = 3;
  }
  else
  {
    -[objc_class doubleValue](v12.super.super.isa, sel_doubleValue);
    v14 = CGFloat._bridgeToObjectiveC()().super.super.isa;

    v15 = 3;
    v13 = v14;
  }
  v16 = objc_msgSend((id)objc_opt_self(), sel_localizedStringFromNumber_numberStyle_, v13, v15);
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v17;
}

uint64_t specialized AccessibilityValue<>.localizedNumericDescription.getter(void *a1, void *a2, void *a3)
{
  double v4;
  id v6;
  id v7;
  double v8;
  double v9;
  double v10;
  double v11;
  id v12;
  NSNumber v13;
  uint64_t v14;
  double v15;
  id v16;
  uint64_t v17;

  v4 = 0.0;
  if (a2 && a3)
  {
    v6 = a2;
    v7 = a3;
    objc_msgSend(v7, sel_doubleValue);
    v9 = v8;
    objc_msgSend(v6, sel_doubleValue);
    v11 = v10;

    v4 = v9 - v11;
  }
  if (fabs(v4 + -100.0) >= 2.22044605e-16)
  {
    v15 = fabs(v4 + -1.0);
    v13.super.super.isa = (Class)a1;
    if (v15 >= 2.22044605e-16)
      v14 = 1;
    else
      v14 = 3;
  }
  else
  {
    v12 = a1;
    objc_msgSend(v12, sel_doubleValue);
    v13.super.super.isa = CGFloat._bridgeToObjectiveC()().super.super.isa;

    v14 = 3;
  }
  v16 = objc_msgSend((id)objc_opt_self(), sel_localizedStringFromNumber_numberStyle_, v13.super.super.isa, v14);
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v17;
}

uint64_t AccessibilityValue<>.localizedNumericDescription.getter(uint64_t a1, uint64_t a2)
{
  void *v4;
  double v5;
  id v6;
  Class isa;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  double v14;
  id v15;
  void *v16;

  (*(void (**)(void **__return_ptr))(a2 + 56))(&v16);
  v4 = v16;
  if (v16)
  {
    v15 = v16;
    closure #1 in AccessibilityValue<>.localizedNumericDescription.getter(&v15, a1, a2, &v14);

    v5 = v14;
  }
  else
  {
    v5 = 0.0;
  }
  (*(void (**)(id *__return_ptr, uint64_t, uint64_t))(a2 + 48))(&v15, a1, a2);
  if (fabs(v5 + -100.0) >= 2.22044605e-16)
  {
    if (fabs(v5 + -1.0) >= 2.22044605e-16)
      v8 = 1;
    else
      v8 = 3;
  }
  else
  {
    v6 = v15;
    objc_msgSend(v15, sel_doubleValue);
    isa = CGFloat._bridgeToObjectiveC()().super.super.isa;

    v15 = isa;
    v8 = 3;
  }
  v9 = (void *)objc_opt_self();
  v10 = v15;
  v11 = objc_msgSend(v9, sel_localizedStringFromNumber_numberStyle_, v15, v8);
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v12;
}

void closure #1 in AccessibilityValue<>.localizedNumericDescription.getter(void **a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, double *a4@<X8>)
{
  void *v5;
  id v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  id v12;

  v5 = *a1;
  (*(void (**)(id *__return_ptr, uint64_t, uint64_t))(a3 + 64))(&v12, a2, a3);
  if (v12)
  {
    v6 = v12;
    objc_msgSend(v6, sel_doubleValue);
    v8 = v7;
    objc_msgSend(v5, sel_doubleValue);
    v10 = v9;

    v11 = v8 - v10;
  }
  else
  {
    v11 = 0.0;
  }
  *a4 = v11;
}

uint64_t AccessibilityValueByProxy.localizedDescription.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v8 = (char *)&v12 - v7;
  (*(void (**)(uint64_t, uint64_t, double))(a2 + 32))(a1, a2, v6);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, AssociatedTypeWitness);
  return v10;
}

uint64_t AccessibilityValueByProxy.displayDescription.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v8 = (char *)&v12 - v7;
  (*(void (**)(uint64_t, uint64_t, double))(a2 + 32))(a1, a2, v6);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, AssociatedTypeWitness);
  return v10;
}

uint64_t AccessibilityValueByProxy.value.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v8 = (char *)&v11 - v7;
  (*(void (**)(uint64_t, uint64_t, double))(a2 + 32))(a1, a2, v6);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(AssociatedTypeWitness, AssociatedConformanceWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, AssociatedTypeWitness);
}

uint64_t AccessibilityValueByProxy.minValue.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v8 = (char *)&v11 - v7;
  (*(void (**)(uint64_t, uint64_t, double))(a2 + 32))(a1, a2, v6);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 56))(AssociatedTypeWitness, AssociatedConformanceWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, AssociatedTypeWitness);
}

uint64_t AccessibilityValueByProxy.maxValue.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v8 = (char *)&v11 - v7;
  (*(void (**)(uint64_t, uint64_t, double))(a2 + 32))(a1, a2, v6);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 64))(AssociatedTypeWitness, AssociatedConformanceWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, AssociatedTypeWitness);
}

uint64_t AccessibilityValueByProxy.step.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v8 = (char *)&v11 - v7;
  (*(void (**)(uint64_t, uint64_t, double))(a2 + 32))(a1, a2, v6);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 72))(AssociatedTypeWitness, AssociatedConformanceWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, AssociatedTypeWitness);
}

void static Int.type.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t protocol witness for AccessibilityValue.localizedDescription.getter in conformance Int()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

void static Double.type.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for AccessibilityValue.displayDescription.getter in conformance Double()
{
  return Double.description.getter();
}

void static Bool.type.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for AccessibilityValue.displayDescription.getter in conformance Bool()
{
  _BYTE *v0;

  if (*v0)
    return 1702195828;
  else
    return 0x65736C6166;
}

void static String.type.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for AccessibilityValue.displayDescription.getter in conformance String()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

void static AccessibilityEmptyValue.type.getter(_BYTE *a1@<X8>)
{
  *a1 = 11;
}

uint64_t AccessibilityEmptyValue.value.getter()
{
  return 1;
}

uint64_t static AccessibilityEmptyValue.== infix(_:_:)()
{
  return 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AccessibilityEmptyValue.CodingKeys()
{
  lazy protocol witness table accessor for type AccessibilityEmptyValue.CodingKeys and conformance AccessibilityEmptyValue.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AccessibilityEmptyValue.CodingKeys()
{
  lazy protocol witness table accessor for type AccessibilityEmptyValue.CodingKeys and conformance AccessibilityEmptyValue.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t AccessibilityEmptyValue.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<AccessibilityEmptyValue.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityEmptyValue.CodingKeys and conformance AccessibilityEmptyValue.CodingKeys, (uint64_t)&unk_250636900, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AccessibilityEmptyValue.CodingKeys and conformance AccessibilityEmptyValue.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t AccessibilityEmptyValue.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

void protocol witness for AccessibilityValue.maxValue.getter in conformance AccessibilityEmptyValue(_WORD *a1@<X8>)
{
  *a1 = 256;
}

void protocol witness for static AccessibilityValue.type.getter in conformance AccessibilityEmptyValue(_BYTE *a1@<X8>)
{
  *a1 = 11;
}

uint64_t protocol witness for Decodable.init(from:) in conformance AccessibilityEmptyValue(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AccessibilityEmptyValue(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<AccessibilityEmptyValue.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityEmptyValue.CodingKeys and conformance AccessibilityEmptyValue.CodingKeys, (uint64_t)&unk_250636900, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AccessibilityEmptyValue.CodingKeys and conformance AccessibilityEmptyValue.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void static AccessibilityBoundedNumber.type.getter(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

id AccessibilityBoundedNumber.number.getter@<X0>(void **a1@<X8>)
{
  void **v1;
  void *v2;

  v2 = *v1;
  *a1 = *v1;
  return v2;
}

void AccessibilityBoundedNumber.number.setter(void **a1)
{
  id *v1;
  void *v2;

  v2 = *a1;

  *v1 = v2;
}

uint64_t (*AccessibilityBoundedNumber.number.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

id AccessibilityBoundedNumber.lowerBound.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 8);
  *a1 = v2;
  return v2;
}

void AccessibilityBoundedNumber.lowerBound.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *a1;

  *(_QWORD *)(v1 + 8) = v2;
}

uint64_t (*AccessibilityBoundedNumber.lowerBound.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

id AccessibilityBoundedNumber.upperBound.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 16);
  *a1 = v2;
  return v2;
}

void AccessibilityBoundedNumber.upperBound.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *a1;

  *(_QWORD *)(v1 + 16) = v2;
}

uint64_t (*AccessibilityBoundedNumber.upperBound.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

id AccessibilityBoundedNumber.stride.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 24);
  *a1 = v2;
  return v2;
}

void AccessibilityBoundedNumber.stride.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *a1;

  *(_QWORD *)(v1 + 24) = v2;
}

uint64_t (*AccessibilityBoundedNumber.stride.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

_QWORD *AccessibilityBoundedNumber.init(value:minValue:maxValue:step:)@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *a2;
  v6 = *a3;
  v7 = *a4;
  *a5 = *result;
  a5[1] = v5;
  a5[2] = v6;
  a5[3] = v7;
  return result;
}

id AccessibilityBoundedNumber.value.getter()
{
  id *v0;

  return *v0;
}

id AccessibilityNumber.value.getter()
{
  id *v0;

  return *v0;
}

void *AccessibilityBoundedNumber.minValue.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 8);
  v2 = v1;
  return v1;
}

void *AccessibilityBoundedNumber.maxValue.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 16);
  v2 = v1;
  return v1;
}

void *AccessibilityBoundedNumber.step.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 24);
  v2 = v1;
  return v1;
}

uint64_t static AccessibilityNumber.== infix(_:_:)()
{
  type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  return static NSObject.== infix(_:_:)() & 1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AccessibilityBoundedNumber.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_234F47970 + 4 * byte_2352B3270[*v0]))(0x7265626D756ELL, 0xE600000000000000);
}

uint64_t sub_234F47970()
{
  return 0x756F427265776F6CLL;
}

uint64_t sub_234F47998()
{
  return 0x656469727473;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AccessibilityBoundedNumber.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized AccessibilityBoundedNumber.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance AccessibilityBoundedNumber.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AccessibilityBoundedNumber.CodingKeys()
{
  lazy protocol witness table accessor for type AccessibilityBoundedNumber.CodingKeys and conformance AccessibilityBoundedNumber.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AccessibilityBoundedNumber.CodingKeys()
{
  lazy protocol witness table accessor for type AccessibilityBoundedNumber.CodingKeys and conformance AccessibilityBoundedNumber.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t AccessibilityBoundedNumber.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<AccessibilityBoundedNumber.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityBoundedNumber.CodingKeys and conformance AccessibilityBoundedNumber.CodingKeys, (uint64_t)&unk_25063C418, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v14 - v6;
  v9 = *v1;
  v8 = v1[1];
  v16 = v1[2];
  v17 = v8;
  v15 = v1[3];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AccessibilityBoundedNumber.CodingKeys and conformance AccessibilityBoundedNumber.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v20 = v9;
  v19 = 0;
  lazy protocol witness table accessor for type AccessibilityNumber and conformance AccessibilityNumber();
  v10 = v18;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v10)
  {
    v11 = v15;
    v12 = v16;
    v20 = v17;
    v19 = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v20 = v12;
    v19 = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v20 = v11;
    v19 = 3;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void AccessibilityBoundedNumber.init(from:)(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  _QWORD *v23;
  char v24;
  id v25;

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<AccessibilityBoundedNumber.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityBoundedNumber.CodingKeys and conformance AccessibilityBoundedNumber.CodingKeys, (uint64_t)&unk_25063C418, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v19 - v8;
  v10 = a1[3];
  v23 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v10);
  lazy protocol witness table accessor for type AccessibilityBoundedNumber.CodingKeys and conformance AccessibilityBoundedNumber.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);

  }
  else
  {
    v22 = v7;
    v24 = 0;
    lazy protocol witness table accessor for type AccessibilityNumber and conformance AccessibilityNumber();
    v11 = v6;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v24 = 1;
    v12 = v25;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v21 = v12;
    v13 = v25;
    v24 = 2;
    v14 = v25;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v15 = v25;
    v24 = 3;
    v20 = v25;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v9, v11);
    v16 = v25;
    v17 = v25;
    v18 = v21;
    *a2 = v21;
    a2[1] = v13;
    a2[2] = v15;
    a2[3] = v16;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);

  }
}

uint64_t protocol witness for AccessibilityValue.localizedDescription.getter in conformance AccessibilityBoundedNumber()
{
  void **v0;

  return specialized AccessibilityValue<>.localizedNumericDescription.getter(*v0, v0[1], v0[2]);
}

void protocol witness for Decodable.init(from:) in conformance AccessibilityBoundedNumber(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  AccessibilityBoundedNumber.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AccessibilityBoundedNumber(_QWORD *a1)
{
  return AccessibilityBoundedNumber.encode(to:)(a1);
}

uint64_t AccessibilityBoundedNumber.init<A>(for:in:by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t);
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(char *, uint64_t, uint64_t);
  void (*v44)(char *, uint64_t);
  _QWORD *v45;
  void (*v46)(char *, uint64_t);
  uint64_t result;
  _OWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(_QWORD **__return_ptr, uint64_t, uint64_t);
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  void (*v72)(char *, uint64_t);
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t AssociatedTypeWitness;
  _QWORD *v80;
  uint64_t v81;
  _OWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89[16];
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;

  v85 = a3;
  v88 = a2;
  v82 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = type metadata accessor for Optional();
  v83 = *(_QWORD *)(v9 - 8);
  v84 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v76 = (char *)&v73 - v10;
  v81 = type metadata accessor for ClosedRange();
  v11 = type metadata accessor for Optional();
  v86 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v75 = (char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v78 = (char *)&v73 - v14;
  v80 = (_QWORD *)type metadata accessor for Optional();
  v15 = *(v80 - 1);
  MEMORY[0x24BDAC7A8](v80);
  v17 = (char *)&v73 - v16;
  v18 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v73 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v73 - v23;
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)&v73 - v26;
  v90 = a4;
  v91 = a5;
  v77 = a5;
  v92 = a1;
  v87 = v11;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in AccessibilityBoundedNumber.init<A>(for:in:by:), (uint64_t)v89, MEMORY[0x24BEE4078], a4, v28, (uint64_t)v17);
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v29(v24, a1, a4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, a4) == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v27, v24, a4);
    (*(void (**)(char *, _QWORD *))(v15 + 8))(v17, v80);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v24, a4);
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v27, v17, a4);
  }
  v30 = a1;
  v32 = v83;
  v31 = v84;
  v29(v21, (uint64_t)v27, a4);
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityNumeric);
  if ((swift_dynamicCast() & 1) == 0)
  {
    v96 = 0;
    v94 = 0u;
    v95 = 0u;
    outlined destroy of TypesettingConfiguration((uint64_t)&v94, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityNumeric?);
    v36 = v86;
    v37 = v87;
    goto LABEL_9;
  }
  v33 = *((_QWORD *)&v95 + 1);
  v34 = v96;
  __swift_project_boxed_opaque_existential_1(&v94, *((uint64_t *)&v95 + 1));
  (*(void (**)(_QWORD **__return_ptr, uint64_t, uint64_t))(v34 + 24))(&v93, v33, v34);
  v35 = v93;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
  v36 = v86;
  v37 = v87;
  v80 = v35;
  if (!v35)
  {
LABEL_9:
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v85, v31);
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v88, v37);
    v46 = *(void (**)(char *, uint64_t))(v18 + 8);
    v46(v27, a4);
    result = ((uint64_t (*)(uint64_t, uint64_t))v46)(v30, a4);
    v48 = v82;
    *v82 = 0u;
    v48[1] = 0u;
    return result;
  }
  v73 = v18;
  v38 = v30;
  v74 = v27;
  v39 = *(void (**)(char *, uint64_t, uint64_t))(v86 + 16);
  v40 = v78;
  v39(v78, v88, v87);
  v41 = v81;
  v42 = *(_QWORD *)(v81 - 8);
  v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48);
  if (v43(v40, 1, v81) == 1)
  {
    v44 = *(void (**)(char *, uint64_t))(v36 + 8);
    v45 = v80;
    v44(v40, v37);
  }
  else
  {
    v49 = v80;
    ClosedRange<>.minimumValue.getter(v41, (uint64_t)&v94);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v40, v41);
    v50 = *((_QWORD *)&v95 + 1);
    if (*((_QWORD *)&v95 + 1))
    {
      v51 = v96;
      __swift_project_boxed_opaque_existential_1(&v94, *((uint64_t *)&v95 + 1));
      v52 = *(void (**)(_QWORD **__return_ptr, uint64_t, uint64_t))(v51 + 24);
      v53 = v51;
      v37 = v87;
      v52(&v93, v50, v53);
      v54 = v93;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
      goto LABEL_14;
    }
    outlined destroy of TypesettingConfiguration((uint64_t)&v94, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityNumeric?);
  }
  v54 = 0;
LABEL_14:
  v55 = AssociatedTypeWitness;
  v56 = v75;
  v39(v75, v88, v37);
  v57 = v81;
  if (v43(v56, 1, v81) == 1)
  {
    v58 = v56;
    v59 = v86;
    (*(void (**)(char *, uint64_t))(v86 + 8))(v58, v37);
    v81 = 0;
    v60 = v82;
    v61 = v83;
    v62 = v84;
  }
  else
  {
    ClosedRange<>.maximumValue.getter(v57, (uint64_t)&v94);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v56, v57);
    v63 = *((_QWORD *)&v95 + 1);
    if (*((_QWORD *)&v95 + 1))
    {
      v64 = v96;
      __swift_project_boxed_opaque_existential_1(&v94, *((uint64_t *)&v95 + 1));
      (*(void (**)(_QWORD **__return_ptr, uint64_t, uint64_t))(v64 + 24))(&v93, v63, v64);
      v81 = (uint64_t)v93;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
    }
    else
    {
      outlined destroy of TypesettingConfiguration((uint64_t)&v94, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityNumeric?);
      v81 = 0;
    }
    v60 = v82;
    v61 = v83;
    v62 = v84;
    v59 = v86;
    v55 = AssociatedTypeWitness;
  }
  v65 = v76;
  (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v76, v85, v62);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 48))(v65, 1, v55) == 1)
  {
    (*(void (**)(char *, uint64_t))(v61 + 8))(v65, v62);
LABEL_25:
    v96 = 0;
    v94 = 0u;
    v95 = 0u;
    v67 = v38;
    v68 = v73;
    goto LABEL_26;
  }
  if (!swift_dynamicCast())
    goto LABEL_25;
  v66 = *((_QWORD *)&v95 + 1);
  v67 = v38;
  v68 = v73;
  if (!*((_QWORD *)&v95 + 1))
  {
LABEL_26:
    outlined destroy of TypesettingConfiguration((uint64_t)&v94, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityNumeric?);
    v70 = 0;
    goto LABEL_27;
  }
  v69 = v96;
  __swift_project_boxed_opaque_existential_1(&v94, *((uint64_t *)&v95 + 1));
  (*(void (**)(_QWORD **__return_ptr, uint64_t, uint64_t))(v69 + 24))(&v93, v66, v69);
  v59 = v86;
  v70 = v93;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
LABEL_27:
  v71 = v80;

  (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v85, v62);
  (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v88, v87);
  v72 = *(void (**)(char *, uint64_t))(v68 + 8);
  v72(v74, a4);
  result = ((uint64_t (*)(uint64_t, uint64_t))v72)(v67, a4);
  *v60 = v71;
  v60[1] = v54;
  v60[2] = v81;
  v60[3] = v70;
  return result;
}

SwiftUI::AccessibilityDisclosureValue __swiftcall AccessibilityDisclosureValue.init(_:)(SwiftUI::AccessibilityDisclosureValue result)
{
  SwiftUI::AccessibilityDisclosureValue *v1;

  *v1 = result;
  return result;
}

void static AccessibilityDisclosureValue.type.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t AccessibilityDisclosureValue.value.getter()
{
  return 2;
}

uint64_t AccessibilityDisclosureValue.uiKitValue.getter()
{
  return 2;
}

uint64_t AccessibilityDisclosureValue.platformDisclosureValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t AccessibilityDisclosureValue.displayDescription.getter()
{
  return 0;
}

SwiftUI::AccessibilityDisclosureValue_optional __swiftcall AccessibilityDisclosureValue.init(rawValue:)(SwiftUI::AccessibilityDisclosureValue_optional rawValue)
{
  char *v1;
  char v2;

  if (rawValue.value == SwiftUI_AccessibilityDisclosureValue_expanded)
    v2 = 1;
  else
    v2 = 2;
  if (rawValue.value == SwiftUI_AccessibilityDisclosureValue_collapsed)
    v2 = 0;
  *v1 = v2;
  return rawValue;
}

uint64_t AccessibilityDisclosureValue.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

void static AccessibilityToggleValue.type.getter(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

SwiftUI::AccessibilityToggleValue::State_optional __swiftcall AccessibilityToggleValue.State.init(rawValue:)(SwiftUI::AccessibilityToggleValue::State_optional rawValue)
{
  SwiftUI::AccessibilityToggleValue::State *v1;
  SwiftUI::AccessibilityToggleValue::State value;

  value = rawValue.value;
  if (rawValue.value >= SwiftUI_AccessibilityToggleValue_State_unknownDefault)
    value = SwiftUI_AccessibilityToggleValue_State_unknownDefault;
  *v1 = value;
  return rawValue;
}

uint64_t AccessibilityToggleValue.State.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

SwiftUI::AccessibilityToggleValue::State_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AccessibilityToggleValue.State(Swift::UInt8 *a1)
{
  return AccessibilityToggleValue.State.init(rawValue:)(*a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AccessibilityToggleValue.State()
{
  lazy protocol witness table accessor for type AccessibilityToggleValue.State and conformance AccessibilityToggleValue.State();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AccessibilityToggleValue.State()
{
  lazy protocol witness table accessor for type AccessibilityToggleValue.State and conformance AccessibilityToggleValue.State();
  return RawRepresentable<>.encode(to:)();
}

void AccessibilityToggleValue.state.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *AccessibilityToggleValue.state.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*AccessibilityToggleValue.state.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

SwiftUI::AccessibilityToggleValue __swiftcall AccessibilityToggleValue.init(_:)(SwiftUI::AccessibilityToggleValue result)
{
  char *v1;
  char v2;

  if (*(_BYTE *)result.state)
    v2 = 2 * (*(_BYTE *)result.state != 1);
  else
    v2 = 1;
  *v1 = v2;
  return result;
}

uint64_t AccessibilityToggleValue.uiKitValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t AccessibilityToggleValue.appKitValue.getter()
{
  char *v0;

  return qword_2352B49C8[*v0];
}

uint64_t AccessibilityToggleValue.displayDescription.getter()
{
  char *v0;

  return *(_QWORD *)&aFalse[8 * *v0];
}

BOOL static AccessibilityToggleValue.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AccessibilityToggleValue.CodingKeys()
{
  return 0x6574617473;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AccessibilityToggleValue.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6574617473 && a2 == 0xE500000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AccessibilityToggleValue.CodingKeys()
{
  lazy protocol witness table accessor for type AccessibilityToggleValue.CodingKeys and conformance AccessibilityToggleValue.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AccessibilityToggleValue.CodingKeys()
{
  lazy protocol witness table accessor for type AccessibilityToggleValue.CodingKeys and conformance AccessibilityToggleValue.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t AccessibilityToggleValue.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  char v8;
  _BYTE v10[32];

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<AccessibilityToggleValue.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityToggleValue.CodingKeys and conformance AccessibilityToggleValue.CodingKeys, (uint64_t)&unk_250638C78, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = &v10[-v6];
  v8 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AccessibilityToggleValue.CodingKeys and conformance AccessibilityToggleValue.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[31] = v8;
  lazy protocol witness table accessor for type AccessibilityToggleValue.State and conformance AccessibilityToggleValue.State();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t AccessibilityToggleValue.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _BYTE *v9;
  uint64_t v11;
  _BYTE *v12;
  char v13;

  v12 = a2;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<AccessibilityToggleValue.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityToggleValue.CodingKeys and conformance AccessibilityToggleValue.CodingKeys, (uint64_t)&unk_250638C78, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v11 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AccessibilityToggleValue.CodingKeys and conformance AccessibilityToggleValue.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v9 = v12;
    lazy protocol witness table accessor for type AccessibilityToggleValue.State and conformance AccessibilityToggleValue.State();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *v9 = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for AccessibilityValue.localizedDescription.getter in conformance AccessibilityToggleValue()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t protocol witness for AccessibilityValue.displayDescription.getter in conformance AccessibilityToggleValue()
{
  char *v0;

  return *(_QWORD *)&aFalse[8 * *v0];
}

uint64_t protocol witness for Decodable.init(from:) in conformance AccessibilityToggleValue@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return AccessibilityToggleValue.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AccessibilityToggleValue(_QWORD *a1)
{
  return AccessibilityToggleValue.encode(to:)(a1);
}

void static AccessibilityStepperValue.type.getter(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t (*AccessibilityStepperValue.base.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilityStepperValue.localizedDescription.getter()
{
  _QWORD *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend((id)objc_opt_self(), sel_localizedStringFromNumber_numberStyle_, *v0, 1);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t AccessibilityStepperValue.displayDescription.getter()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;

  v1 = *(void **)v0;
  v2 = *(void **)(v0 + 8);
  v4 = *(void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v5 = (void *)objc_opt_self();
  v6 = v3;
  v7 = v1;
  v8 = v2;
  v9 = v4;
  v10 = objc_msgSend(v5, sel_localizedStringFromNumber_numberStyle_, v7, 1);
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v11;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AccessibilityStepperValue.CodingKeys()
{
  return 1702060386;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AccessibilityStepperValue.CodingKeys()
{
  lazy protocol witness table accessor for type AccessibilityStepperValue.CodingKeys and conformance AccessibilityStepperValue.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AccessibilityStepperValue.CodingKeys()
{
  lazy protocol witness table accessor for type AccessibilityStepperValue.CodingKeys and conformance AccessibilityStepperValue.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t AccessibilityStepperValue.encode(to:)(_QWORD *a1)
{
  return AccessibilityStepperValue.encode(to:)(a1, &lazy cache variable for type metadata for KeyedEncodingContainer<AccessibilityStepperValue.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityStepperValue.CodingKeys and conformance AccessibilityStepperValue.CodingKeys, (uint64_t)&unk_25063A870);
}

uint64_t AccessibilityStepperValue.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AccessibilityStepperValue.init(from:)(a1, &lazy cache variable for type metadata for KeyedDecodingContainer<AccessibilityStepperValue.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityStepperValue.CodingKeys and conformance AccessibilityStepperValue.CodingKeys, (uint64_t)&unk_25063A870, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AccessibilityStepperValue@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AccessibilityStepperValue.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AccessibilityStepperValue(_QWORD *a1)
{
  return AccessibilityStepperValue.encode(to:)(a1);
}

uint64_t protocol witness for AccessibilityValue.localizedDescription.getter in conformance AccessibilityStepperValue()
{
  _QWORD *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend((id)objc_opt_self(), sel_localizedStringFromNumber_numberStyle_, *v0, 1);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t protocol witness for AccessibilityValue.displayDescription.getter in conformance AccessibilityStepperValue()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;

  v1 = *(void **)v0;
  v2 = *(void **)(v0 + 8);
  v4 = *(void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v5 = (void *)objc_opt_self();
  v6 = v3;
  v7 = v1;
  v8 = v2;
  v9 = v4;
  v10 = objc_msgSend(v5, sel_localizedStringFromNumber_numberStyle_, v7, 1);
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v11;
}

void static AccessibilitySliderValue.type.getter(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

id AccessibilityStepperValue.base.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v9;

  v2 = *(void **)v1;
  v3 = *(void **)(v1 + 8);
  v4 = *(void **)(v1 + 24);
  v9 = *(id *)(v1 + 16);
  *a1 = *(_QWORD *)v1;
  a1[1] = v3;
  a1[2] = v9;
  a1[3] = v4;
  v5 = v4;
  v6 = v2;
  v7 = v3;
  return v9;
}

__n128 AccessibilityStepperValue.base.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  __n128 result;

  v3 = *a1;
  v4 = a1[3];
  v5 = *(void **)(v1 + 8);
  v6 = *(void **)(v1 + 16);
  v7 = *(void **)(v1 + 24);

  *(_QWORD *)v1 = v3;
  result = *(__n128 *)(a1 + 1);
  *(__n128 *)(v1 + 8) = result;
  *(_QWORD *)(v1 + 24) = v4;
  return result;
}

uint64_t (*AccessibilitySliderValue.base.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

__n128 AccessibilityStepperValue.init(_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  *(_QWORD *)(a2 + 24) = v2;
  return result;
}

_QWORD *AccessibilityStepperValue.init(value:minValue:maxValue:)@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  v5 = *a3;
  *a4 = *result;
  a4[1] = v4;
  a4[2] = v5;
  a4[3] = 0;
  return result;
}

uint64_t AccessibilitySliderValue.init<A>(value:minValue:maxValue:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, Class *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  void (*v22)(char *, uint64_t, uint64_t, double);
  Class v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  Class v25;
  uint64_t result;
  char *v27;
  Class v28;
  void (*v29)(char *, uint64_t);
  _QWORD v30[2];
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  Class v35;
  Class v36;

  v32 = a3;
  v11 = type metadata accessor for Optional();
  v34 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v30 - v15;
  v17 = *(_QWORD *)(a4 - 8);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16);
  v31 = a1;
  v22(v21, a1, a4, v19);
  v30[1] = a5;
  AccessibilityNumber.init<A>(floatingPoint:)((uint64_t)v21, a4, &v36);
  v23 = v36;
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  v33 = a2;
  v25 = 0;
  if (v24(a2, 1, a4) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v16, v33, v11);
    result = v24(v16, 1, a4);
    if ((_DWORD)result == 1)
    {
      __break(1u);
      goto LABEL_10;
    }
    AccessibilityNumber.init<A>(floatingPoint:)((uint64_t)v16, a4, &v35);
    v25 = v35;
  }
  v27 = v32;
  if (v24(v32, 1, a4) == 1)
  {
    v28 = 0;
LABEL_8:
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v31, a4);
    v29 = *(void (**)(char *, uint64_t))(v34 + 8);
    v29(v27, v11);
    result = ((uint64_t (*)(char *, uint64_t))v29)(v33, v11);
    *a6 = v23;
    a6[1] = v25;
    a6[2] = v28;
    a6[3] = 0;
    return result;
  }
  (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v13, v27, v11);
  result = v24(v13, 1, a4);
  if ((_DWORD)result != 1)
  {
    AccessibilityNumber.init<A>(floatingPoint:)((uint64_t)v13, a4, &v35);
    v28 = v35;
    goto LABEL_8;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t AccessibilityNumber.init<A>(floatingPoint:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, Class *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  Class isa;
  uint64_t result;
  Swift::Double v11[2];

  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
  lazy protocol witness table accessor for type Double and conformance Double();
  BinaryFloatingPoint.init<A>(_:)();
  isa = NSNumber.init(floatLiteral:)(v11[1]).super.super.isa;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  *a3 = isa;
  return result;
}

uint64_t static AccessibilityStepperValue.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v2 = *a1;
  v3 = a1[3];
  v4 = *a2;
  v8 = a2[3];
  v9 = v2;
  v10 = *(_OWORD *)(a1 + 1);
  v11 = v3;
  v6 = v4;
  v7 = *(_OWORD *)(a2 + 1);
  return specialized static AccessibilityBoundedNumber.== infix(_:_:)((uint64_t)&v9, (uint64_t)&v6) & 1;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AccessibilityStepperValue.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 1702060386 && a2 == 0xE400000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AccessibilitySliderValue.CodingKeys()
{
  lazy protocol witness table accessor for type AccessibilitySliderValue.CodingKeys and conformance AccessibilitySliderValue.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AccessibilitySliderValue.CodingKeys()
{
  lazy protocol witness table accessor for type AccessibilitySliderValue.CodingKeys and conformance AccessibilitySliderValue.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t AccessibilitySliderValue.encode(to:)(_QWORD *a1)
{
  return AccessibilityStepperValue.encode(to:)(a1, &lazy cache variable for type metadata for KeyedEncodingContainer<AccessibilitySliderValue.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilitySliderValue.CodingKeys and conformance AccessibilitySliderValue.CodingKeys, (uint64_t)&unk_250638B68);
}

uint64_t AccessibilityStepperValue.encode(to:)(_QWORD *a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  __int128 *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  type metadata accessor for FontBox<Font.SystemProvider>(0, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v8 = v7;
  v16 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v13 - v9;
  v15 = *v4;
  v11 = *((_QWORD *)v4 + 2);
  v14 = *((_QWORD *)v4 + 3);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v17 = v15;
  v18 = v11;
  v19 = v14;
  lazy protocol witness table accessor for type AccessibilityBoundedNumber and conformance AccessibilityBoundedNumber();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v10, v8);
}

uint64_t AccessibilitySliderValue.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AccessibilityStepperValue.init(from:)(a1, &lazy cache variable for type metadata for KeyedDecodingContainer<AccessibilitySliderValue.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilitySliderValue.CodingKeys and conformance AccessibilitySliderValue.CodingKeys, (uint64_t)&unk_250638B68, a2);
}

uint64_t AccessibilityStepperValue.init(from:)@<X0>(_QWORD *a1@<X0>, unint64_t *a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v18 = a5;
  type metadata accessor for FontBox<Font.SystemProvider>(0, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v22 = v8;
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v17 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v5)
  {
    v12 = v18;
    lazy protocol witness table accessor for type AccessibilityBoundedNumber and conformance AccessibilityBoundedNumber();
    v13 = v22;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v13);
    v14 = v21;
    v15 = v20;
    *(_QWORD *)v12 = v19;
    *(_OWORD *)(v12 + 8) = v15;
    *(_QWORD *)(v12 + 24) = v14;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AccessibilitySliderValue@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AccessibilitySliderValue.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AccessibilitySliderValue(_QWORD *a1)
{
  return AccessibilitySliderValue.encode(to:)(a1);
}

uint64_t protocol witness for AccessibilityValue.localizedDescription.getter in conformance AccessibilitySliderValue()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;

  v2 = *(void **)v0;
  v1 = *(void **)(v0 + 8);
  v3 = *(void **)(v0 + 16);
  v4 = *(id *)(v0 + 24);
  v5 = v2;
  v6 = v1;
  v7 = v3;
  v8 = specialized AccessibilityValue<>.localizedNumericDescription.getter(v5, v1, v3);

  return v8;
}

id protocol witness for AccessibilityValue.minValue.getter in conformance AccessibilitySliderValue@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 8);
  *a1 = v2;
  return v2;
}

id protocol witness for AccessibilityValue.maxValue.getter in conformance AccessibilitySliderValue@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 16);
  *a1 = v2;
  return v2;
}

id protocol witness for AccessibilityValue.step.getter in conformance AccessibilitySliderValue@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 24);
  *a1 = v2;
  return v2;
}

void static AccessibilityProgressValue.type.getter(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t AccessibilityProgressValue.percent.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t AccessibilityProgressValue.percent.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)v2 = result;
  *(_BYTE *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*AccessibilityProgressValue.percent.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

SwiftUI::AccessibilityProgressValue __swiftcall AccessibilityProgressValue.init(percent:)(SwiftUI::AccessibilityProgressValue percent)
{
  char v1;
  uint64_t v2;

  *(_QWORD *)v2 = *(_QWORD *)&percent.percent.is_nil;
  *(_BYTE *)(v2 + 8) = v1 & 1;
  return percent;
}

NSNumber AccessibilityProgressValue.value.getter()
{
  uint64_t v0;
  double v1;

  if (*(_BYTE *)(v0 + 8))
    v1 = 0.0;
  else
    v1 = *(double *)v0;
  type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
  return NSNumber.init(floatLiteral:)(v1);
}

Class AccessibilityProgressValue.minValue.getter()
{
  return AccessibilityProgressValue.minValue.getter(0);
}

Class AccessibilityProgressValue.maxValue.getter()
{
  return AccessibilityProgressValue.minValue.getter(1);
}

Class AccessibilityProgressValue.minValue.getter(Swift::Int a1)
{
  uint64_t v1;

  if ((*(_BYTE *)(v1 + 8) & 1) != 0)
    return 0;
  type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
  return NSNumber.init(integerLiteral:)(a1).super.super.isa;
}

uint64_t AccessibilityProgressValue.localizedDescription.getter()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 8) & 1) != 0)
    return 0;
  else
    return specialized AccessibilityValue<>.localizedNumericDescription.getter(*(_QWORD *)v0, 0);
}

uint64_t AccessibilityProgressValue.displayDescription.getter()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 8) & 1) != 0)
    return 0;
  else
    return specialized AccessibilityValue<>.localizedNumericDescription.getter(*(_QWORD *)v0, 0);
}

uint64_t static AccessibilityProgressValue.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v2;

  v2 = *(_BYTE *)(a2 + 8);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 8) & 1) == 0)
      return 0;
  }
  else
  {
    if (*(double *)a1 != *(double *)a2)
      v2 = 1;
    if ((v2 & 1) != 0)
      return 0;
  }
  return 1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AccessibilityProgressValue.CodingKeys()
{
  return 0x746E6563726570;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AccessibilityProgressValue.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x746E6563726570 && a2 == 0xE700000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AccessibilityProgressValue.CodingKeys()
{
  lazy protocol witness table accessor for type AccessibilityProgressValue.CodingKeys and conformance AccessibilityProgressValue.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AccessibilityProgressValue.CodingKeys()
{
  lazy protocol witness table accessor for type AccessibilityProgressValue.CodingKeys and conformance AccessibilityProgressValue.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t AccessibilityProgressValue.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<AccessibilityProgressValue.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityProgressValue.CodingKeys and conformance AccessibilityProgressValue.CodingKeys, (uint64_t)&unk_25063C530, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AccessibilityProgressValue.CodingKeys and conformance AccessibilityProgressValue.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t AccessibilityProgressValue.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v14;
  uint64_t v15;

  v15 = a2;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<AccessibilityProgressValue.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityProgressValue.CodingKeys and conformance AccessibilityProgressValue.CodingKeys, (uint64_t)&unk_25063C530, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v14 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AccessibilityProgressValue.CodingKeys and conformance AccessibilityProgressValue.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v9 = v15;
    v10 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v12 = v11;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_QWORD *)v9 = v10;
    *(_BYTE *)(v9 + 8) = v12 & 1;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for AccessibilityValue.localizedDescription.getter in conformance AccessibilityProgressValue()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 8) & 1) != 0)
    return 0;
  else
    return specialized AccessibilityValue<>.localizedNumericDescription.getter(*(_QWORD *)v0, 0);
}

NSNumber protocol witness for AccessibilityValue.value.getter in conformance AccessibilityProgressValue@<X0>(NSNumber *a1@<X8>)
{
  uint64_t v1;
  double v3;
  NSNumber result;

  if (*(_BYTE *)(v1 + 8))
    v3 = 0.0;
  else
    v3 = *(double *)v1;
  type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
  result.super.super.isa = NSNumber.init(floatLiteral:)(v3).super.super.isa;
  a1->super.super.isa = result.super.super.isa;
  return result;
}

Class protocol witness for AccessibilityValue.minValue.getter in conformance AccessibilityProgressValue@<X0>(Class *a1@<X8>)
{
  return protocol witness for AccessibilityValue.minValue.getter in conformance AccessibilityProgressValue(0, a1);
}

Class protocol witness for AccessibilityValue.maxValue.getter in conformance AccessibilityProgressValue@<X0>(Class *a1@<X8>)
{
  return protocol witness for AccessibilityValue.minValue.getter in conformance AccessibilityProgressValue(1, a1);
}

Class protocol witness for AccessibilityValue.minValue.getter in conformance AccessibilityProgressValue@<X0>(Swift::Int a1@<X2>, Class *a2@<X8>)
{
  uint64_t v2;
  Class result;

  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    result = 0;
  }
  else
  {
    type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
    result = NSNumber.init(integerLiteral:)(a1).super.super.isa;
  }
  *a2 = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance AccessibilityProgressValue@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AccessibilityProgressValue.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AccessibilityProgressValue(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<AccessibilityProgressValue.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityProgressValue.CodingKeys and conformance AccessibilityProgressValue.CodingKeys, (uint64_t)&unk_25063C530, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AccessibilityProgressValue.CodingKeys and conformance AccessibilityProgressValue.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityProgressValue(uint64_t a1, uint64_t a2)
{
  char v2;

  v2 = *(_BYTE *)(a2 + 8);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (*(_BYTE *)(a2 + 8))
      return 1;
  }
  else
  {
    if (*(double *)a1 != *(double *)a2)
      v2 = 1;
    if ((v2 & 1) == 0)
      return 1;
  }
  return 0;
}

uint64_t static AccessibilityNumber.AccessibilityNumberArchiveError.== infix(_:_:)()
{
  return 1;
}

void AccessibilityNumber.AccessibilityNumberArchiveError.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int AccessibilityNumber.AccessibilityNumberArchiveError.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void static AccessibilityNumber.type.getter(_BYTE *a1@<X8>)
{
  *a1 = 10;
}

SwiftUI::AccessibilityNumber __swiftcall AccessibilityNumber.init(_:)(SwiftUI::AccessibilityNumber result)
{
  SwiftUI::AccessibilityNumber *v1;

  v1->base.super.super.isa = result.base.super.super.isa;
  return result;
}

uint64_t AccessibilityNumber.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v10, v10[3]);
    lazy protocol witness table accessor for type Data and conformance Data();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSKeyedUnarchiver);
    type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
    v5 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
    v7 = v5;
    if (v5)
    {
      outlined consume of Data._Representation(v8, v9);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
      *a2 = v7;
    }
    else
    {
      lazy protocol witness table accessor for type AccessibilityNumber.AccessibilityNumberArchiveError and conformance AccessibilityNumber.AccessibilityNumberArchiveError();
      swift_allocError();
      swift_willThrow();
      outlined consume of Data._Representation(v8, v9);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t AccessibilityNumber.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v10[2];
  _BYTE v11[24];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  v10[0] = 0;
  v3 = objc_msgSend((id)objc_opt_self(), sel_archivedDataWithRootObject_requiringSecureCoding_error_, v2, 1, v10);
  v4 = v10[0];
  if (v3)
  {
    v5 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v7 = v6;

    v10[0] = v5;
    v10[1] = v7;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v11, v12);
    lazy protocol witness table accessor for type Data and conformance Data();
    dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
    outlined consume of Data._Representation((uint64_t)v5, (unint64_t)v7);
  }
  else
  {
    v8 = v4;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
}

uint64_t protocol witness for AccessibilityValue.localizedDescription.getter in conformance AccessibilityNumber()
{
  void **v0;

  return specialized AccessibilityValue<>.localizedDescription.getter(*v0);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AccessibilityNumber@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return AccessibilityNumber.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AccessibilityNumber(_QWORD *a1)
{
  return AccessibilityNumber.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityNumber()
{
  type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  return static NSObject.== infix(_:_:)() & 1;
}

SwiftUI::AccessibilityNumber __swiftcall AccessibilityNumber.init(integerLiteral:)(Swift::Int integerLiteral)
{
  SwiftUI::AccessibilityNumber *v1;
  SwiftUI::AccessibilityNumber *v3;
  SwiftUI::AccessibilityNumber result;

  v3 = v1;
  type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
  result.base = NSNumber.init(integerLiteral:)(integerLiteral);
  v3->base.super.super.isa = result.base.super.super.isa;
  return result;
}

NSNumber protocol witness for ExpressibleByIntegerLiteral.init(integerLiteral:) in conformance AccessibilityNumber@<X0>(Swift::Int *a1@<X0>, NSNumber *a2@<X8>)
{
  Swift::Int v3;
  NSNumber result;

  v3 = *a1;
  type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
  result.super.super.isa = NSNumber.init(integerLiteral:)(v3).super.super.isa;
  a2->super.super.isa = result.super.super.isa;
  return result;
}

SwiftUI::AccessibilityNumber __swiftcall AccessibilityNumber.init(floatLiteral:)(Swift::Double floatLiteral)
{
  SwiftUI::AccessibilityNumber *v1;
  SwiftUI::AccessibilityNumber *v3;
  SwiftUI::AccessibilityNumber result;

  v3 = v1;
  type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
  result.base = NSNumber.init(floatLiteral:)(floatLiteral);
  v3->base.super.super.isa = result.base.super.super.isa;
  return result;
}

NSNumber protocol witness for ExpressibleByFloatLiteral.init(floatLiteral:) in conformance AccessibilityNumber@<X0>(double *a1@<X0>, NSNumber *a2@<X8>)
{
  Swift::Double v3;
  NSNumber result;

  v3 = *a1;
  type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
  result.super.super.isa = NSNumber.init(floatLiteral:)(v3).super.super.isa;
  a2->super.super.isa = result.super.super.isa;
  return result;
}

uint64_t ProxyCodable<>.localizedDescription.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(a2 + 32))(*(_QWORD *)(a1 + 16));
}

uint64_t ProxyCodable<>.displayDescription.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(a2 + 40))(*(_QWORD *)(a1 + 16));
}

uint64_t ProxyCodable<>.value.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(a2 + 48))(*(_QWORD *)(a1 + 16));
}

uint64_t ProxyCodable<>.minValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(a2 + 56))(*(_QWORD *)(a1 + 16));
}

uint64_t ProxyCodable<>.maxValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(a2 + 64))(*(_QWORD *)(a1 + 16));
}

uint64_t ProxyCodable<>.step.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(a2 + 72))(*(_QWORD *)(a1 + 16));
}

uint64_t static ProxyCodable<>.type.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t protocol witness for AccessibilityValue.localizedDescription.getter in conformance <> ProxyCodable<A>(uint64_t a1, uint64_t a2)
{
  return ProxyCodable<>.localizedDescription.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t protocol witness for AccessibilityValue.displayDescription.getter in conformance <> ProxyCodable<A>(uint64_t a1, uint64_t a2)
{
  return ProxyCodable<>.displayDescription.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t protocol witness for AccessibilityValue.value.getter in conformance <> ProxyCodable<A>(uint64_t a1, uint64_t a2)
{
  return ProxyCodable<>.value.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t protocol witness for AccessibilityValue.minValue.getter in conformance <> ProxyCodable<A>(uint64_t a1, uint64_t a2)
{
  return ProxyCodable<>.minValue.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t protocol witness for AccessibilityValue.maxValue.getter in conformance <> ProxyCodable<A>(uint64_t a1, uint64_t a2)
{
  return ProxyCodable<>.maxValue.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t protocol witness for AccessibilityValue.step.getter in conformance <> ProxyCodable<A>(uint64_t a1, uint64_t a2)
{
  return ProxyCodable<>.step.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t protocol witness for static AccessibilityValue.type.getter in conformance <> ProxyCodable<A>(uint64_t a1, uint64_t a2)
{
  return static ProxyCodable<>.type.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 - 8));
}

uint64_t AnyAccessibilityValue.ConcreteBase.localizedDescription.getter(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 40) + 32))(*(_QWORD *)(a1 + 16));
}

uint64_t AnyAccessibilityValue.ConcreteBase.displayDescription.getter(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 40) + 40))(*(_QWORD *)(a1 + 16));
}

uint64_t AnyAccessibilityValue.ConcreteBase.value.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 48);
  v5 = *(_QWORD *)(a1 + 16);
  a2[3] = swift_getAssociatedTypeWitness();
  __swift_allocate_boxed_opaque_existential_1(a2);
  return v4(v5, v3);
}

uint64_t AnyAccessibilityValue.ConcreteBase.minValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v14;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v14 - v9;
  (*(void (**)(uint64_t, uint64_t, double))(v3 + 56))(v4, v3, v8);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, AssociatedTypeWitness) == 1)
  {
    result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  else
  {
    *(_QWORD *)(a2 + 24) = AssociatedTypeWitness;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a2);
    return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v11 + 32))(boxed_opaque_existential_1, v10, AssociatedTypeWitness);
  }
  return result;
}

uint64_t AnyAccessibilityValue.ConcreteBase.maxValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v14;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v14 - v9;
  (*(void (**)(uint64_t, uint64_t, double))(v3 + 64))(v4, v3, v8);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, AssociatedTypeWitness) == 1)
  {
    result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  else
  {
    *(_QWORD *)(a2 + 24) = AssociatedTypeWitness;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a2);
    return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v11 + 32))(boxed_opaque_existential_1, v10, AssociatedTypeWitness);
  }
  return result;
}

uint64_t AnyAccessibilityValue.ConcreteBase.step.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v14;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v14 - v9;
  (*(void (**)(uint64_t, uint64_t, double))(v3 + 72))(v4, v3, v8);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, AssociatedTypeWitness) == 1)
  {
    result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  else
  {
    *(_QWORD *)(a2 + 24) = AssociatedTypeWitness;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a2);
    return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v11 + 32))(boxed_opaque_existential_1, v10, AssociatedTypeWitness);
  }
  return result;
}

uint64_t AnyAccessibilityValue.ConcreteBase.type.getter(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 40) + 80))(*(_QWORD *)(a1 + 16));
}

uint64_t AnyAccessibilityValue.ConcreteBase.as<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v13;

  v7 = *(_QWORD *)(a2 + 16);
  v8 = MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))((char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v4, v7, v8);
  v11 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(a4, v11 ^ 1u, 1, a3);
}

uint64_t AnyAccessibilityValue.ConcreteBase.isEqual(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t, uint64_t);
  void (*v24)(char *, char *, uint64_t);
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  void (*v31)(char *, char *, uint64_t);
  unsigned int (*v32)(char *, uint64_t, uint64_t);
  void (*v33)(char *, uint64_t);
  char v34;
  char *v35;
  char *v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  char *v39;
  void (*v40)(char *, uint64_t);
  void (*v41)(char *, uint64_t);
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t TupleTypeMetadata2;
  char v50[40];

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v43 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v45 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v47 = (char *)&v43 - v8;
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v43 - v11;
  v48 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v44 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v43 - v16;
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v43 - v19;
  outlined init with copy of AnyTrackedValue(a1, (uint64_t)v50);
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for AbstractAnyAccessibilityValue);
  v21 = swift_dynamicCast();
  v22 = *(_QWORD *)(a2 - 8);
  v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
  if (v21)
  {
    v23(v12, 0, 1, a2);
    v24 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v24(v20, v12, v4);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v12, a2);
    v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v25(v20, 0, 1, v4);
  }
  else
  {
    v23(v12, 1, 1, a2);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v25(v20, 1, 1, v4);
    v24 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  }
  v26 = v5;
  v27 = v20;
  v24(v17, (char *)v46, v4);
  v25(v17, 0, 1, v4);
  v28 = v48;
  v29 = v47;
  v30 = &v47[*(int *)(TupleTypeMetadata2 + 48)];
  v31 = *(void (**)(char *, char *, uint64_t))(v48 + 16);
  v31(v47, v27, v7);
  v31(v30, v17, v7);
  v46 = v26;
  v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
  if (v32(v29, 1, v4) != 1)
  {
    v35 = v27;
    v36 = v44;
    v31(v44, v29, v7);
    if (v32(v30, 1, v4) != 1)
    {
      v38 = v46;
      v39 = v43;
      (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v43, v30, v4);
      v34 = dispatch thunk of static Equatable.== infix(_:_:)();
      v40 = *(void (**)(char *, uint64_t))(v38 + 8);
      v40(v39, v4);
      v41 = *(void (**)(char *, uint64_t))(v48 + 8);
      v41(v17, v7);
      v41(v35, v7);
      v40(v36, v4);
      v41(v29, v7);
      return v34 & 1;
    }
    v37 = *(void (**)(char *, uint64_t))(v48 + 8);
    v37(v17, v7);
    v37(v35, v7);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v36, v4);
    goto LABEL_9;
  }
  v33 = *(void (**)(char *, uint64_t))(v28 + 8);
  v33(v17, v7);
  v33(v27, v7);
  if (v32(v30, 1, v4) != 1)
  {
LABEL_9:
    (*(void (**)(char *, uint64_t))(v45 + 8))(v29, TupleTypeMetadata2);
    v34 = 0;
    return v34 & 1;
  }
  v33(v29, v7);
  v34 = 1;
  return v34 & 1;
}

uint64_t static AnyAccessibilityValue.ConcreteBase.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t AnyAccessibilityValue.ConcreteBase.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 1702060386 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

void AnyAccessibilityValue.ConcreteBase.encode(to:)()
{
  type metadata accessor for AnyAccessibilityValue.ConcreteBase.CodingKeys();
}

uint64_t sub_234F4AE9C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyAccessibilityValue.ConcreteBase<A>.CodingKeys, a1);
  v2 = type metadata accessor for KeyedEncodingContainer();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - v4;
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void type metadata accessor for AnyAccessibilityValue.ConcreteBase()
{
  JUMPOUT(0x23B7C9B5CLL);
}

unint64_t lazy protocol witness table accessor for type AccessibilityEmptyValue.CodingKeys and conformance AccessibilityEmptyValue.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityEmptyValue.CodingKeys and conformance AccessibilityEmptyValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityEmptyValue.CodingKeys and conformance AccessibilityEmptyValue.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityEmptyValue.CodingKeys, &unk_250636900);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityEmptyValue.CodingKeys and conformance AccessibilityEmptyValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityEmptyValue.CodingKeys and conformance AccessibilityEmptyValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityEmptyValue.CodingKeys and conformance AccessibilityEmptyValue.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityEmptyValue.CodingKeys, &unk_250636900);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityEmptyValue.CodingKeys and conformance AccessibilityEmptyValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityEmptyValue.CodingKeys and conformance AccessibilityEmptyValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityEmptyValue.CodingKeys and conformance AccessibilityEmptyValue.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityEmptyValue.CodingKeys, &unk_250636900);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityEmptyValue.CodingKeys and conformance AccessibilityEmptyValue.CodingKeys);
  }
  return result;
}

void AnyAccessibilityValue.ConcreteBase.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[12];

  v8[5] = a3;
  v8[4] = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8[6] = (char *)v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[8] = v4;
  v8[9] = v5;
  v8[10] = v6;
  v8[11] = v7;
  type metadata accessor for AnyAccessibilityValue.ConcreteBase.CodingKeys();
}

void sub_234F4B050(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyAccessibilityValue.ConcreteBase<A>.CodingKeys, a1);
  v6 = type metadata accessor for KeyedDecodingContainer();
  *(_QWORD *)(v5 - 120) = v6;
  *(_QWORD *)(v5 - 168) = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  *(_QWORD *)(v5 - 160) = v1;
  *(_QWORD *)(v5 - 152) = v4;
  *(_QWORD *)(v5 - 112) = v1;
  *(_QWORD *)(v5 - 104) = v4;
  *(_QWORD *)(v5 - 96) = v3;
  *(_QWORD *)(v5 - 88) = v2;
  type metadata accessor for AnyAccessibilityValue.ConcreteBase();
}

uint64_t sub_234F4B0C0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v15 - v6;
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  v8 = *(_QWORD *)(v3 - 72);
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v8)
  {
    v9 = v7;
    *(_QWORD *)(v3 - 176) = v5;
    *(_QWORD *)(v3 - 72) = a1;
    v10 = *(_QWORD *)(v3 - 168);
    v11 = *(_QWORD *)(v3 - 160);
    v13 = *(_QWORD *)(v3 - 144);
    v12 = *(_QWORD *)(v3 - 136);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(uint64_t, _QWORD))(v10 + 8))(v2, *(_QWORD *)(v3 - 120));
    (*(void (**)(char *, _QWORD, uint64_t))(v13 + 32))(v9, *(_QWORD *)(v3 - 128), v11);
    (*(void (**)(uint64_t, char *, _QWORD))(*(_QWORD *)(v3 - 176) + 32))(v12, v9, *(_QWORD *)(v3 - 72));
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v1);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AnyAccessibilityValue.ConcreteBase<A>.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = AnyAccessibilityValue.ConcreteBase.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance AnyAccessibilityValue.ConcreteBase<A>.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = protocol witness for static Equatable.== infix(_:_:) in conformance _DisplayList_Identity.CodingKeys();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnyAccessibilityValue.ConcreteBase<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyAccessibilityValue.ConcreteBase<A>.CodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AnyAccessibilityValue.ConcreteBase<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyAccessibilityValue.ConcreteBase<A>.CodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for AbstractAnyAccessibilityValue.as<A>(_:) in conformance AnyAccessibilityValue.ConcreteBase<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return AnyAccessibilityValue.ConcreteBase.as<A>(_:)(a1, a3, a2, a4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnyAccessibilityValue.ConcreteBase<A>()
{
  return static AnyAccessibilityValue.ConcreteBase.== infix(_:_:)();
}

void protocol witness for Decodable.init(from:) in conformance AnyAccessibilityValue.ConcreteBase<A>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  AnyAccessibilityValue.ConcreteBase.init(from:)(a1, *(_QWORD *)(a2 + 16), a3);
}

void protocol witness for Encodable.encode(to:) in conformance AnyAccessibilityValue.ConcreteBase<A>()
{
  AnyAccessibilityValue.ConcreteBase.encode(to:)();
}

uint64_t AnyAccessibilityValue.displayDescription.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
}

uint64_t AnyAccessibilityValue.value.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 40))(v1, v2);
}

uint64_t AnyAccessibilityValue.minValue.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 48))(v1, v2);
}

uint64_t AnyAccessibilityValue.maxValue.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 56))(v1, v2);
}

uint64_t AnyAccessibilityValue.step.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 64))(v1, v2);
}

uint64_t AnyAccessibilityValue.type.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 72))(v1, v2);
}

uint64_t AnyAccessibilityValue.as<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;

  v4 = v3;
  v7 = v4[3];
  v8 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 80))(a2, a2, a3, v7, v8);
}

uint64_t protocol witness for AbstractAnyAccessibilityValue.localizedDescription.getter in conformance AnyAccessibilityValue()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
}

uint64_t protocol witness for AbstractAnyAccessibilityValue.minValue.getter in conformance AnyAccessibilityValue()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 48))(v1, v2);
}

uint64_t protocol witness for AbstractAnyAccessibilityValue.maxValue.getter in conformance AnyAccessibilityValue()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 56))(v1, v2);
}

uint64_t protocol witness for AbstractAnyAccessibilityValue.step.getter in conformance AnyAccessibilityValue()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 64))(v1, v2);
}

uint64_t protocol witness for AbstractAnyAccessibilityValue.type.getter in conformance AnyAccessibilityValue()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 72))(v1, v2);
}

uint64_t protocol witness for AbstractAnyAccessibilityValue.isEqual(to:) in conformance AnyAccessibilityValue(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = a1[3];
  v3 = a1[4];
  v4 = __swift_project_boxed_opaque_existential_1(a1, v2);
  return specialized AnyAccessibilityValue.isEqual(to:)((uint64_t)v4, v1, v2, v3);
}

uint64_t AccessibilityValueStorage.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of AnyAccessibilityValue?(v1, a1);
}

uint64_t AccessibilityValueStorage.description.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AccessibilityValueStorage.init<A>(_:description:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _OWORD *a9@<X8>)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  _QWORD v20[6];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[40];

  v20[2] = a6;
  v20[3] = a7;
  v20[4] = a8;
  v15 = type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in AccessibilityValueStorage.init<A>(_:description:), (uint64_t)v20, MEMORY[0x24BEE4078], (uint64_t)&type metadata for AnyAccessibilityValue, v16, (uint64_t)v24);
  *(_QWORD *)&v23 = 0;
  v21 = 0u;
  v22 = 0u;
  outlined assign with copy of AnyAccessibilityValue?((uint64_t)v24, (uint64_t)&v21);
  if (a5)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, (uint64_t)&type metadata for Text, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_23527E860;
    *(_QWORD *)(v17 + 32) = a2;
    *(_QWORD *)(v17 + 40) = a3;
    *(_BYTE *)(v17 + 48) = a4 & 1;
    *(_QWORD *)(v17 + 56) = a5;
  }
  else
  {
    v17 = MEMORY[0x24BEE4AF8];
  }
  outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)v24, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
  *((_QWORD *)&v23 + 1) = v17;
  v18 = v22;
  *a9 = v21;
  a9[1] = v18;
  a9[2] = v23;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(a1, v15);
}

void closure #1 in AccessibilityValueStorage.init<A>(_:description:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ProxyCodable(0, v9, v10, v10);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v15 - v13;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v8, a1, a2, v12);
  ProxyCodable.init(_:)((uint64_t)v8, a2, (uint64_t)v14);
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ProxyCodable<A>, v11);
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ProxyCodable<A>, v11);
  v16 = a3;
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for <> ProxyCodable<A>, v11, &v16);
  AnyAccessibilityValue.init<A>(_:)();
}

uint64_t AccessibilityValueStorage.init<A>(_:description:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _OWORD *a9@<X8>, uint64_t a10)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  _QWORD v21[6];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[40];

  v21[2] = a6;
  v21[3] = a7;
  v21[4] = a8;
  v21[5] = a10;
  v16 = type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in AccessibilityValueStorage.init<A>(_:description:), (uint64_t)v21, MEMORY[0x24BEE4078], (uint64_t)&type metadata for AnyAccessibilityValue, v17, (uint64_t)v25);
  *(_QWORD *)&v24 = 0;
  v22 = 0u;
  v23 = 0u;
  outlined assign with copy of AnyAccessibilityValue?((uint64_t)v25, (uint64_t)&v22);
  if (a5)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, (uint64_t)&type metadata for Text, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_23527E860;
    *(_QWORD *)(v18 + 32) = a2;
    *(_QWORD *)(v18 + 40) = a3;
    *(_BYTE *)(v18 + 48) = a4 & 1;
    *(_QWORD *)(v18 + 56) = a5;
  }
  else
  {
    v18 = MEMORY[0x24BEE4AF8];
  }
  outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)v25, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
  *((_QWORD *)&v24 + 1) = v18;
  v19 = v23;
  *a9 = v22;
  a9[1] = v19;
  a9[2] = v24;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(a1, v16);
}

void closure #1 in AccessibilityValueStorage.init<A>(_:description:)(uint64_t a1)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, double))(v3 + 16))((char *)&v4 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  AnyAccessibilityValue.init<A>(_:)();
}

uint64_t AccessibilityValueStorage.init(description:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t result;
  _OWORD v12[2];
  uint64_t v13;

  v13 = 0;
  memset(v12, 0, sizeof(v12));
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_QWORD *)(a5 + 32) = 0;
  outlined assign with copy of AnyAccessibilityValue?((uint64_t)v12, a5);
  if (a4)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, (uint64_t)&type metadata for Text, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_23527E860;
    *(_QWORD *)(v10 + 32) = a1;
    *(_QWORD *)(v10 + 40) = a2;
    *(_BYTE *)(v10 + 48) = a3 & 1;
    *(_QWORD *)(v10 + 56) = a4;
  }
  else
  {
    v10 = MEMORY[0x24BEE4AF8];
  }
  result = outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)v12, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
  *(_QWORD *)(a5 + 40) = v10;
  return result;
}

double AccessibilityValueStorage.init(descriptions:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?(a2, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
  result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = a1;
  return result;
}

uint64_t AccessibilityValueStorage.valueDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 40);
  if (*(_QWORD *)(v1 + 16))
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    outlined init with copy of AnyAccessibilityValue?(v0, (uint64_t)v9);
    v3 = v10;
    if (v10)
    {
      v4 = v11;
      __swift_project_boxed_opaque_existential_1(v9, v10);
      v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 24))(v3, v4);
      v7 = v6;
      outlined destroy of AnyAccessibilityValue((uint64_t)v9);
      v1 = MEMORY[0x24BEE4AF8];
      if (v7)
      {
        type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, (uint64_t)&type metadata for Text, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
        v8 = swift_allocObject();
        *(_OWORD *)(v8 + 16) = xmmword_23527E860;
        *(_QWORD *)(v8 + 32) = v5;
        *(_QWORD *)(v8 + 40) = v7;
        *(_BYTE *)(v8 + 48) = 0;
        *(_QWORD *)(v8 + 56) = v1;
        return v8;
      }
    }
    else
    {
      outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)v9, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
      return MEMORY[0x24BEE4AF8];
    }
  }
  return v1;
}

uint64_t AccessibilityValueStorage.valueDescription.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 40) = a1;
  return result;
}

void (*AccessibilityValueStorage.valueDescription.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = v3 + 5;
  v3[6] = v1;
  v5 = *(_QWORD *)(v1 + 40);
  if (*(_QWORD *)(v5 + 16))
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    v7 = v3;
    outlined init with copy of AnyAccessibilityValue?(v1, (uint64_t)v3);
    v8 = v7[3];
    if (v8)
    {
      v9 = v7[4];
      __swift_project_boxed_opaque_existential_1(v7, v7[3]);
      v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 24))(v8, v9);
      v12 = v11;
      outlined destroy of AnyAccessibilityValue((uint64_t)v7);
      v5 = MEMORY[0x24BEE4AF8];
      if (v12)
      {
        type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, (uint64_t)&type metadata for Text, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
        v13 = swift_allocObject();
        *(_OWORD *)(v13 + 16) = xmmword_23527E860;
        *(_QWORD *)(v13 + 32) = v10;
        *(_QWORD *)(v13 + 40) = v12;
        *(_BYTE *)(v13 + 48) = 0;
        *(_QWORD *)(v13 + 56) = v5;
        v5 = v13;
      }
    }
    else
    {
      outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)v7, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
      v5 = MEMORY[0x24BEE4AF8];
    }
  }
  *v4 = v5;
  return AccessibilityValueStorage.valueDescription.modify;
}

void AccessibilityValueStorage.valueDescription.modify(uint64_t a1, char a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(void **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v4 + 40) = v3;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v4 + 40) = v3;
  }
  free(v2);
}

double AccessibilityValueStorage.platformMinValue.getter@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double result;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  outlined init with copy of AnyAccessibilityValue?(v1, (uint64_t)v6);
  v3 = v7;
  if (v7)
  {
    v4 = v8;
    __swift_project_boxed_opaque_existential_1(v6, v7);
    (*(void (**)(uint64_t, uint64_t))(v4 + 48))(v3, v4);
    outlined destroy of AnyAccessibilityValue((uint64_t)v6);
  }
  else
  {
    outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)v6, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
    result = 0.0;
    *a1 = 0u;
    a1[1] = 0u;
  }
  return result;
}

double AccessibilityValueStorage.platformMaxValue.getter@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double result;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  outlined init with copy of AnyAccessibilityValue?(v1, (uint64_t)v6);
  v3 = v7;
  if (v7)
  {
    v4 = v8;
    __swift_project_boxed_opaque_existential_1(v6, v7);
    (*(void (**)(uint64_t, uint64_t))(v4 + 56))(v3, v4);
    outlined destroy of AnyAccessibilityValue((uint64_t)v6);
  }
  else
  {
    outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)v6, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
    result = 0.0;
    *a1 = 0u;
    a1[1] = 0u;
  }
  return result;
}

uint64_t AccessibilityValueStorage.platformNumberValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[3];
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  outlined init with copy of AnyAccessibilityValue?(v0, (uint64_t)v4);
  v1 = v5;
  if (v5)
  {
    v2 = v6;
    __swift_project_boxed_opaque_existential_1(v4, v5);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v2 + 40))(v7, v1, v2);
    outlined destroy of AnyAccessibilityValue((uint64_t)v4);
    type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
    if (swift_dynamicCast())
      return v4[0];
    else
      return 0;
  }
  else
  {
    outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)v4, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
    return 0;
  }
}

uint64_t AccessibilityValueStorage.isBounded.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  outlined init with copy of AnyAccessibilityValue?(v0, (uint64_t)v12);
  v1 = v13;
  if (v13)
  {
    v2 = v14;
    __swift_project_boxed_opaque_existential_1(v12, v13);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v2 + 48))(&v7, v1, v2);
    outlined destroy of AnyAccessibilityValue((uint64_t)v12);
    if (*((_QWORD *)&v8 + 1))
    {
      outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)&v7, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8);
      outlined init with copy of AccessibilityValueStorage(v0, (uint64_t)v12);
      outlined destroy of AccessibilityValueStorage((uint64_t)v12);
      return 1;
    }
  }
  else
  {
    outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)v12, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
    v7 = 0u;
    v8 = 0u;
  }
  v4 = MEMORY[0x24BEE4AD8];
  outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)&v7, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8);
  outlined init with copy of AccessibilityValueStorage(v0, (uint64_t)v12);
  outlined init with copy of AnyAccessibilityValue?((uint64_t)v12, (uint64_t)&v7);
  v3 = *((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v5 = v9;
    __swift_project_boxed_opaque_existential_1(&v7, *((uint64_t *)&v8 + 1));
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v5 + 56))(&v10, v3, v5);
    outlined destroy of AnyAccessibilityValue((uint64_t)&v7);
    v3 = *((_QWORD *)&v11 + 1) != 0;
  }
  else
  {
    outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)&v7, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
    v10 = 0u;
    v11 = 0u;
  }
  outlined destroy of AccessibilityValueStorage((uint64_t)v12);
  outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)&v10, (unint64_t *)&lazy cache variable for type metadata for Any?, v4 + 8);
  return v3;
}

uint64_t AccessibilityValueStorage.hasAllowedValues.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;

  outlined init with copy of AnyAccessibilityValue?(v0, (uint64_t)v18);
  v1 = v19;
  if (!v19)
  {
    outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)v18, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
    v15 = 0u;
    v16 = 0u;
    goto LABEL_9;
  }
  v2 = v20;
  __swift_project_boxed_opaque_existential_1(v18, v19);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v2 + 64))(&v15, v1, v2);
  outlined destroy of AnyAccessibilityValue((uint64_t)v18);
  if (!*((_QWORD *)&v16 + 1))
  {
LABEL_9:
    outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)&v15, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8);
    outlined init with copy of AccessibilityValueStorage(v0, (uint64_t)v18);
    outlined destroy of AccessibilityValueStorage((uint64_t)v18);
    goto LABEL_12;
  }
  v3 = MEMORY[0x24BEE4AD8];
  outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)&v15, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x24BEE4AD8] + 8);
  outlined init with copy of AccessibilityValueStorage(v0, (uint64_t)v18);
  outlined init with copy of AnyAccessibilityValue?((uint64_t)v18, (uint64_t)&v15);
  v4 = *((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v5 = v17;
    __swift_project_boxed_opaque_existential_1(&v15, *((uint64_t *)&v16 + 1));
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v5 + 48))(&v10, v4, v5);
    outlined destroy of AccessibilityValueStorage((uint64_t)v18);
    outlined destroy of AnyAccessibilityValue((uint64_t)&v15);
    if (*((_QWORD *)&v11 + 1))
    {
      outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)&v10, (unint64_t *)&lazy cache variable for type metadata for Any?, v3 + 8);
      outlined init with copy of AccessibilityValueStorage(v0, (uint64_t)&v15);
      outlined init with copy of AnyAccessibilityValue?((uint64_t)&v15, (uint64_t)&v10);
      v6 = *((_QWORD *)&v11 + 1);
      if (*((_QWORD *)&v11 + 1))
      {
        v7 = v12;
        __swift_project_boxed_opaque_existential_1(&v10, *((uint64_t *)&v11 + 1));
        (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v7 + 56))(&v13, v6, v7);
        outlined destroy of AccessibilityValueStorage((uint64_t)&v15);
        outlined destroy of AnyAccessibilityValue((uint64_t)&v10);
        if (*((_QWORD *)&v14 + 1))
        {
          v8 = 1;
LABEL_16:
          outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)&v13, (unint64_t *)&lazy cache variable for type metadata for Any?, v3 + 8);
          return v8;
        }
      }
      else
      {
        outlined destroy of AccessibilityValueStorage((uint64_t)&v15);
        outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)&v10, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
        v13 = 0u;
        v14 = 0u;
      }
      v8 = 0;
      goto LABEL_16;
    }
  }
  else
  {
    outlined destroy of AccessibilityValueStorage((uint64_t)v18);
    outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)&v15, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
    v10 = 0u;
    v11 = 0u;
  }
  outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)&v10, (unint64_t *)&lazy cache variable for type metadata for Any?, v3 + 8);
LABEL_12:
  outlined init with copy of AccessibilityValueStorage(v0, (uint64_t)&v15);
  outlined destroy of AccessibilityValueStorage((uint64_t)&v15);
  return 0;
}

uint64_t AccessibilityValueStorage.platformAllowedValues.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  int v25;
  __int128 v26;
  int v27;
  __int128 v28;
  void *v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[20];
  int v34;
  __int128 v35;
  int v36;
  __int16 v37;
  __int16 v38;
  __int16 v39;
  __int16 v40;
  __int16 v41;
  __int16 v42;
  __int16 v43;
  __int16 v44;

  outlined init with copy of AnyAccessibilityValue?(v0, (uint64_t)v33);
  v1 = v35;
  if (!(_QWORD)v35)
  {
    outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)v33, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
    v31 = 0u;
    v32 = 0u;
    goto LABEL_13;
  }
  v2 = *((_QWORD *)&v35 + 1);
  __swift_project_boxed_opaque_existential_1(v33, v35);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v2 + 64))(&v31, v1, v2);
  outlined destroy of AnyAccessibilityValue((uint64_t)v33);
  if (!*((_QWORD *)&v32 + 1))
  {
LABEL_13:
    v24 = MEMORY[0x24BEE4AD8] + 8;
LABEL_14:
    outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)&v31, (unint64_t *)&lazy cache variable for type metadata for Any?, v24);
    return 0;
  }
  type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
  v3 = MEMORY[0x24BEE4AD8];
  if ((swift_dynamicCast() & 1) == 0)
    return 0;
  v4 = *(void **)v33;
  outlined init with copy of AnyAccessibilityValue?(v0, (uint64_t)v33);
  v5 = v35;
  if (!(_QWORD)v35)
  {
    outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)v33, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
    v31 = 0u;
    v32 = 0u;
    goto LABEL_21;
  }
  v6 = *((_QWORD *)&v35 + 1);
  __swift_project_boxed_opaque_existential_1(v33, v35);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v6 + 48))(&v31, v5, v6);
  outlined destroy of AnyAccessibilityValue((uint64_t)v33);
  if (!*((_QWORD *)&v32 + 1))
  {
LABEL_21:

    v24 = v3 + 8;
    goto LABEL_14;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {

    return 0;
  }
  v7 = *(void **)v33;
  outlined init with copy of AnyAccessibilityValue?(v0, (uint64_t)v33);
  v8 = v35;
  if (!(_QWORD)v35)
  {
    outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)v33, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
    v31 = 0u;
    v32 = 0u;
    goto LABEL_20;
  }
  v9 = *((_QWORD *)&v35 + 1);
  __swift_project_boxed_opaque_existential_1(v33, v35);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v9 + 56))(&v31, v8, v9);
  outlined destroy of AnyAccessibilityValue((uint64_t)v33);
  if (!*((_QWORD *)&v32 + 1))
  {
LABEL_20:

    goto LABEL_21;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {

    return 0;
  }
  v10 = *(void **)v33;
  objc_msgSend(v7, sel_decimalValue);
  v27 = *(_DWORD *)v33;
  v28 = *(_OWORD *)&v33[4];
  v29 = v10;
  objc_msgSend(v10, sel_decimalValue);
  v25 = *(_DWORD *)v33;
  v26 = *(_OWORD *)&v33[4];
  objc_msgSend(v4, sel_decimalValue);
  v11 = *(unsigned int *)v33;
  v12 = *(unsigned __int16 *)&v33[4];
  v30 = *(unsigned __int16 *)&v33[6];
  v13 = *(unsigned __int16 *)&v33[8];
  v14 = *(unsigned __int16 *)&v33[10];
  v15 = *(unsigned __int16 *)&v33[12];
  v16 = *(unsigned __int16 *)&v33[14];
  v17 = *(unsigned __int16 *)&v33[16];
  v18 = *(unsigned __int16 *)&v33[18];
  NSDecimal.init(integerLiteral:)((NSDecimal *)*(unsigned __int16 *)&v33[6], 0);
  result = MEMORY[0x23B7C6904](v11 | (v12 << 32) | (v30 << 48), v13 | (v14 << 16) | (v15 << 32) | (v16 << 48), v17 | (v18 << 16), v19, v20, v21);
  if ((result & 1) == 0)
  {
    *(_DWORD *)v33 = v27;
    *(_OWORD *)&v33[4] = v28;
    v34 = v25;
    v35 = v26;
    v36 = v11;
    v37 = v12;
    v38 = v30;
    v39 = v13;
    v40 = v14;
    v41 = v15;
    v42 = v16;
    v43 = v17;
    v44 = v18;
    v23 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs13StrideThroughVySo9NSDecimalaG_So8NSNumberCs5NeverOTg5067_s7SwiftUI25AccessibilityValueStorageV21platformAllowedValuesSaySo8G26CGSgvgAFSo9NSDecimalaXEfU_Tf1cn_n((unsigned int *)v33);

    return v23;
  }
  __break(1u);
  return result;
}

uint64_t AccessibilityValueStorage.merge(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  outlined init with copy of AnyAccessibilityValue?(v1, (uint64_t)&v10);
  v3 = *((_QWORD *)&v11 + 1);
  outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)&v10, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
  if (v3)
    goto LABEL_2;
  outlined init with copy of AnyAccessibilityValue?(a1, (uint64_t)&v7);
  if (!*((_QWORD *)&v8 + 1))
  {
    outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)&v7, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
LABEL_2:
    result = 0;
    goto LABEL_5;
  }
  v10 = v7;
  v11 = v8;
  v12 = v9;
  outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?(v1, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
  v5 = v11;
  *(_OWORD *)v1 = v10;
  *(_OWORD *)(v1 + 16) = v5;
  *(_QWORD *)(v1 + 32) = v12;
  result = 1;
LABEL_5:
  if (!*(_QWORD *)(*(_QWORD *)(v1 + 40) + 16))
  {
    v6 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)(v6 + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v1 + 40) = v6;
      return 1;
    }
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance AccessibilityDisclosureValue()
{
  lazy protocol witness table accessor for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AccessibilityDisclosureValue()
{
  lazy protocol witness table accessor for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue();
  return RawRepresentable<>.encode(to:)();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AnyAccessibilityValue.Keys()
{
  _BYTE *v0;

  if (*v0)
    return 0x65756C6176;
  else
    return 1701869940;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AnyAccessibilityValue.Keys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = AnyCodable.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnyAccessibilityValue.Keys()
{
  lazy protocol witness table accessor for type AnyAccessibilityValue.Keys and conformance AnyAccessibilityValue.Keys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AnyAccessibilityValue.Keys()
{
  lazy protocol witness table accessor for type AnyAccessibilityValue.Keys and conformance AnyAccessibilityValue.Keys();
  return CodingKey.debugDescription.getter();
}

uint64_t AnyAccessibilityValue.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<AnyAccessibilityValue.Keys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyAccessibilityValue.Keys and conformance AnyAccessibilityValue.Keys, (uint64_t)&unk_250631A78, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  MEMORY[0x24BDAC7A8](v3);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AnyAccessibilityValue.Keys and conformance AnyAccessibilityValue.Keys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    lazy protocol witness table accessor for type AnyAccessibilityValueType and conformance AnyAccessibilityValueType();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    __asm { BR              X10 }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t AnyAccessibilityValue.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v14[5];
  char v15;

  v3 = v1;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<AnyAccessibilityValue.Keys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyAccessibilityValue.Keys and conformance AnyAccessibilityValue.Keys, (uint64_t)&unk_250631A78, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v14[-1] - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AnyAccessibilityValue.Keys and conformance AnyAccessibilityValue.Keys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10 = v3[3];
  v11 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v10);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v11 + 72))(v14, v10, v11);
  v15 = 0;
  lazy protocol witness table accessor for type AnyAccessibilityValueType and conformance AnyAccessibilityValueType();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v3, v3[3]);
    v15 = 1;
    KeyedEncodingContainer.superEncoder(forKey:)();
    dispatch thunk of Encodable.encode(to:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AnyAccessibilityValue(_QWORD *a1)
{
  return AnyAccessibilityValue.init(from:)(a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AnyAccessibilityValue(_QWORD *a1)
{
  return AnyAccessibilityValue.encode(to:)(a1);
}

uint64_t CodableAccessibilityValueStorage.init(_:in:idiom:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  __int128 v13[2];
  __int128 v14;

  v6 = *a2;
  v7 = a2[1];
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  v8 = a4 + 24;
  *(_QWORD *)(a4 + 56) = 0;
  *(_QWORD *)&v13[0] = v6;
  *((_QWORD *)&v13[0] + 1) = v7;
  v14 = *a3;
  v9 = swift_bridgeObjectRetain();
  v10 = static AccessibilityCore.textsResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:separator:)(v9, v13, 1, 1, 0, 0, &v14, 8236, 0xE200000000000000);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v10)
    v11 = 1;
  else
    v11 = 255;
  *(_QWORD *)a4 = v10;
  *(_QWORD *)(a4 + 8) = 0;
  *(_WORD *)(a4 + 16) = v11;
  outlined init with copy of AnyAccessibilityValue?(a1, (uint64_t)v13);
  outlined destroy of AccessibilityValueStorage(a1);
  return outlined assign with take of AnyAccessibilityValue?((uint64_t)v13, v8);
}

uint64_t CodableAccessibilityValueStorage.accessibilityValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[40];

  outlined init with copy of AnyAccessibilityValue?(v1 + 24, (uint64_t)v9);
  v4 = *(void **)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v5 = *(_WORD *)(v1 + 16);
  if ((_BYTE)v5 == 0xFF)
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    outlined copy of AccessibilityText?(v4, v3, 255);
    outlined assign with copy of AnyAccessibilityValue?((uint64_t)v9, a1);
    v6 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    type metadata accessor for AccessibilityTextStorage();
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = v4;
    *(_QWORD *)(v7 + 24) = v3;
    *(_BYTE *)(v7 + 32) = v5 & 1;
    *(_BYTE *)(v7 + 33) = HIBYTE(v5) & 1;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_QWORD *)(a1 + 32) = 0;
    outlined copy of AccessibilityText?(v4, v3, v5);
    outlined assign with copy of AnyAccessibilityValue?((uint64_t)v9, a1);
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, (uint64_t)&type metadata for Text, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_23527E860;
    *(_QWORD *)(v6 + 32) = v7;
    *(_QWORD *)(v6 + 40) = 0;
    *(_BYTE *)(v6 + 48) = 1;
    *(_QWORD *)(v6 + 56) = MEMORY[0x24BEE4AF8];
  }
  result = outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)v9, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
  *(_QWORD *)(a1 + 40) = v6;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableAccessibilityValueStorage.CodingKeys()
{
  lazy protocol witness table accessor for type CodableAccessibilityValueStorage.CodingKeys and conformance CodableAccessibilityValueStorage.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableAccessibilityValueStorage.CodingKeys()
{
  lazy protocol witness table accessor for type CodableAccessibilityValueStorage.CodingKeys and conformance CodableAccessibilityValueStorage.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t CodableAccessibilityValueStorage.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int16 v10;
  __int128 v12;
  __int16 v13;
  char v14;

  v3 = v1;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<CodableAccessibilityValueStorage.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityValueStorage.CodingKeys and conformance CodableAccessibilityValueStorage.CodingKeys, (uint64_t)&unk_2506418B8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v12 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableAccessibilityValueStorage.CodingKeys and conformance CodableAccessibilityValueStorage.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10 = *((_WORD *)v3 + 8);
  v12 = *v3;
  v13 = v10;
  v14 = 0;
  lazy protocol witness table accessor for type AccessibilityText and conformance AccessibilityText();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v12) = 1;
    lazy protocol witness table accessor for type AnyAccessibilityValue and conformance AnyAccessibilityValue();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t CodableAccessibilityValueStorage.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int16 v14;
  __int128 v15;
  __int16 v16;
  _OWORD v17[2];
  uint64_t v18;
  char v19;

  v12 = a2;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodableAccessibilityValueStorage.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityValueStorage.CodingKeys and conformance CodableAccessibilityValueStorage.CodingKeys, (uint64_t)&unk_2506418B8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v11 - v7;
  v15 = 0uLL;
  v16 = 255;
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableAccessibilityValueStorage.CodingKeys and conformance CodableAccessibilityValueStorage.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v9 = v12;
    v19 = 0;
    lazy protocol witness table accessor for type AccessibilityText and conformance AccessibilityText();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v15 = v13;
    v16 = v14;
    v19 = 1;
    lazy protocol witness table accessor for type AnyAccessibilityValue and conformance AnyAccessibilityValue();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    outlined assign with take of AnyAccessibilityValue?((uint64_t)&v13, (uint64_t)v17);
    outlined init with copy of CodableAccessibilityValueStorage((uint64_t *)&v15, v9);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return outlined destroy of CodableAccessibilityValueStorage((uint64_t)&v15);
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableAccessibilityValueStorage@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return CodableAccessibilityValueStorage.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableAccessibilityValueStorage(_QWORD *a1)
{
  return CodableAccessibilityValueStorage.encode(to:)(a1);
}

uint64_t specialized AnyAccessibilityValue.isEqual(to:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _BYTE v15[40];
  _OWORD v16[2];
  uint64_t v17;
  uint64_t v18[5];

  v18[3] = a3;
  v18[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v18);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
  outlined init with copy of AnyTrackedValue((uint64_t)v18, (uint64_t)v15);
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for AbstractAnyAccessibilityValue);
  if (swift_dynamicCast())
  {
    v16[0] = v12;
    v16[1] = v13;
    v17 = v14;
    v8 = a2[3];
    v9 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v8);
    v10 = (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v9 + 88))(v16, v8, v9);
    outlined destroy of AnyAccessibilityValue((uint64_t)v16);
  }
  else
  {
    v14 = 0;
    v12 = 0u;
    v13 = 0u;
    outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)&v12, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
    v10 = 0;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  return v10 & 1;
}

void specialized StrideThrough.underestimatedCount.getter()
{
  unsigned int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  char v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSDecimal *v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  NSDecimal *v34;

  v1 = 0;
  v24 = 0;
  v2 = *v0;
  v3 = *((unsigned __int16 *)v0 + 2);
  v4 = *((unsigned __int16 *)v0 + 3);
  v5 = *((unsigned __int16 *)v0 + 4);
  v6 = *((unsigned __int16 *)v0 + 5);
  v7 = *((unsigned __int16 *)v0 + 6);
  v8 = *((unsigned __int16 *)v0 + 7);
  v32 = *((unsigned __int16 *)v0 + 9);
  v33 = *((unsigned __int16 *)v0 + 8);
  v34 = (NSDecimal *)*((_QWORD *)v0 + 5);
  v26 = *(_QWORD *)(v0 + 7);
  v27 = *(_QWORD *)(v0 + 5);
  v9 = v0[9];
  v25 = v0[9];
  do
  {
    NSDecimal.init(integerLiteral:)((NSDecimal *)v9, 0);
    v14 = static NSDecimal.< infix(_:_:)();
    v30 = v3;
    v31 = v2;
    v15 = v2 | (v3 << 32);
    v16 = v4;
    v17 = v15 | (v4 << 48);
    v28 = v6;
    v29 = v5;
    v18 = v7;
    v19 = v5 | (v6 << 16) | (v7 << 32) | (v8 << 48);
    if ((v14 & 1) != 0)
    {
      v21 = v26;
      v20 = v27;
      v22 = v25;
      if ((static NSDecimal.< infix(_:_:)() & 1) != 0)
        goto LABEL_2;
    }
    else
    {
      v21 = v26;
      v20 = v27;
      v22 = v25;
      if ((static NSDecimal.< infix(_:_:)() & 1) != 0)
      {
LABEL_2:
        NSDecimal.advanced(by:)(v23, v34);
        v3 = WORD2(v10);
        v4 = HIWORD(v10);
        v6 = WORD1(v11);
        v7 = WORD2(v11);
        v2 = v10;
        v5 = (unsigned __int16)v11;
        v8 = HIWORD(v11);
        v9 = HIWORD(v12);
        v32 = HIWORD(v12);
        v33 = (unsigned __int16)v12;
        continue;
      }
    }
    if (v24 & 1 | ((MEMORY[0x23B7C6904](v17, v19, v33 | (v32 << 16), v20, v21, v22) & 1) == 0))
      return;
    v9 = 1;
    v24 = 1;
    v4 = v16;
    v3 = v30;
    v2 = v31;
    v6 = v28;
    v5 = v29;
    v7 = v18;
  }
  while (!__OFADD__(v1++, 1));
  __break(1u);
}

uint64_t specialized static AccessibilityBoundedNumber.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  char v12;
  id v13;
  id v14;
  char v15;
  id v16;
  id v17;
  char v18;
  char v19;
  id v20;
  id v21;
  id v22;

  v2 = *(void **)a1;
  v3 = *(void **)(a1 + 8);
  v5 = *(void **)(a1 + 16);
  v4 = *(void **)(a1 + 24);
  v6 = *(void **)a2;
  v7 = *(void **)(a2 + 8);
  v9 = *(void **)(a2 + 16);
  v8 = *(void **)(a2 + 24);
  type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v10 = v2;
  v11 = v6;
  v12 = static NSObject.== infix(_:_:)();

  if ((v12 & 1) == 0)
    goto LABEL_10;
  if (v3)
  {
    if (!v7)
    {
      v20 = v3;
LABEL_20:
      v22 = v20;
      goto LABEL_21;
    }
    v13 = v3;
    v14 = v7;
    v15 = static NSObject.== infix(_:_:)();

    if ((v15 & 1) == 0)
      goto LABEL_10;
  }
  else if (v7)
  {
    goto LABEL_18;
  }
  if (!v5)
  {
    if (v9)
      goto LABEL_18;
    goto LABEL_13;
  }
  if (!v9)
  {
    v20 = v5;
    goto LABEL_20;
  }
  v16 = v5;
  v17 = v9;
  v18 = static NSObject.== infix(_:_:)();

  if ((v18 & 1) != 0)
  {
LABEL_13:
    if (v4)
    {
      if (v8)
      {
        v21 = v4;
        v22 = v8;
        v19 = static NSObject.== infix(_:_:)();

LABEL_22:
        return v19 & 1;
      }
      v20 = v4;
      goto LABEL_20;
    }
    if (!v8)
    {
      v19 = 1;
      return v19 & 1;
    }
LABEL_18:
    v22 = 0;
LABEL_21:
    v19 = 0;
    goto LABEL_22;
  }
LABEL_10:
  v19 = 0;
  return v19 & 1;
}

unint64_t lazy protocol witness table accessor for type AccessibilityBoundedNumber.CodingKeys and conformance AccessibilityBoundedNumber.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityBoundedNumber.CodingKeys and conformance AccessibilityBoundedNumber.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityBoundedNumber.CodingKeys and conformance AccessibilityBoundedNumber.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityBoundedNumber.CodingKeys, &unk_25063C418);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityBoundedNumber.CodingKeys and conformance AccessibilityBoundedNumber.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityBoundedNumber.CodingKeys and conformance AccessibilityBoundedNumber.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityBoundedNumber.CodingKeys and conformance AccessibilityBoundedNumber.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04]("!i;\x1B,W\n", &unk_25063C418);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityBoundedNumber.CodingKeys and conformance AccessibilityBoundedNumber.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityBoundedNumber.CodingKeys and conformance AccessibilityBoundedNumber.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityBoundedNumber.CodingKeys and conformance AccessibilityBoundedNumber.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityBoundedNumber.CodingKeys, &unk_25063C418);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityBoundedNumber.CodingKeys and conformance AccessibilityBoundedNumber.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityBoundedNumber.CodingKeys and conformance AccessibilityBoundedNumber.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityBoundedNumber.CodingKeys and conformance AccessibilityBoundedNumber.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityBoundedNumber.CodingKeys, &unk_25063C418);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityBoundedNumber.CodingKeys and conformance AccessibilityBoundedNumber.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityNumber and conformance AccessibilityNumber()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityNumber and conformance AccessibilityNumber;
  if (!lazy protocol witness table cache variable for type AccessibilityNumber and conformance AccessibilityNumber)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityNumber, &type metadata for AccessibilityNumber);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNumber and conformance AccessibilityNumber);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityNumber and conformance AccessibilityNumber;
  if (!lazy protocol witness table cache variable for type AccessibilityNumber and conformance AccessibilityNumber)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityNumber, &type metadata for AccessibilityNumber);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNumber and conformance AccessibilityNumber);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityNumber and conformance AccessibilityNumber;
  if (!lazy protocol witness table cache variable for type AccessibilityNumber and conformance AccessibilityNumber)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityNumber, &type metadata for AccessibilityNumber);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNumber and conformance AccessibilityNumber);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityNumber and conformance AccessibilityNumber;
  if (!lazy protocol witness table cache variable for type AccessibilityNumber and conformance AccessibilityNumber)
  {
    result = MEMORY[0x23B7C9C04](")p;\x1B\b\\\n", &type metadata for AccessibilityNumber);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNumber and conformance AccessibilityNumber);
  }
  return result;
}

uint64_t partial apply for closure #1 in AccessibilityBoundedNumber.init<A>(for:in:by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return Comparable.clamped(to:)(a1, *(_QWORD *)(v2 + 16), a2);
}

void type metadata accessor for AccessibilityNumeric?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AccessibilityNumeric?)
  {
    type metadata accessor for ScrollStateRequest(255, (unint64_t *)&lazy cache variable for type metadata for AccessibilityNumeric);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityNumeric?);
  }
}

unint64_t lazy protocol witness table accessor for type AccessibilityToggleValue.CodingKeys and conformance AccessibilityToggleValue.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityToggleValue.CodingKeys and conformance AccessibilityToggleValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityToggleValue.CodingKeys and conformance AccessibilityToggleValue.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityToggleValue.CodingKeys, &unk_250638C78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityToggleValue.CodingKeys and conformance AccessibilityToggleValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityToggleValue.CodingKeys and conformance AccessibilityToggleValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityToggleValue.CodingKeys and conformance AccessibilityToggleValue.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04]("ih;\x1BPV\n", &unk_250638C78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityToggleValue.CodingKeys and conformance AccessibilityToggleValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityToggleValue.CodingKeys and conformance AccessibilityToggleValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityToggleValue.CodingKeys and conformance AccessibilityToggleValue.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityToggleValue.CodingKeys, &unk_250638C78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityToggleValue.CodingKeys and conformance AccessibilityToggleValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityToggleValue.CodingKeys and conformance AccessibilityToggleValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityToggleValue.CodingKeys and conformance AccessibilityToggleValue.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityToggleValue.CodingKeys, &unk_250638C78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityToggleValue.CodingKeys and conformance AccessibilityToggleValue.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityToggleValue.State and conformance AccessibilityToggleValue.State()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityToggleValue.State and conformance AccessibilityToggleValue.State;
  if (!lazy protocol witness table cache variable for type AccessibilityToggleValue.State and conformance AccessibilityToggleValue.State)
  {
    result = MEMORY[0x23B7C9C04]("Ut;\x1B\\_\n", &type metadata for AccessibilityToggleValue.State);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityToggleValue.State and conformance AccessibilityToggleValue.State);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityToggleValue.State and conformance AccessibilityToggleValue.State;
  if (!lazy protocol witness table cache variable for type AccessibilityToggleValue.State and conformance AccessibilityToggleValue.State)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityToggleValue.State, &type metadata for AccessibilityToggleValue.State);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityToggleValue.State and conformance AccessibilityToggleValue.State);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityToggleValue.State and conformance AccessibilityToggleValue.State;
  if (!lazy protocol witness table cache variable for type AccessibilityToggleValue.State and conformance AccessibilityToggleValue.State)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityToggleValue.State, &type metadata for AccessibilityToggleValue.State);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityToggleValue.State and conformance AccessibilityToggleValue.State);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityToggleValue.State and conformance AccessibilityToggleValue.State;
  if (!lazy protocol witness table cache variable for type AccessibilityToggleValue.State and conformance AccessibilityToggleValue.State)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityToggleValue.State, &type metadata for AccessibilityToggleValue.State);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityToggleValue.State and conformance AccessibilityToggleValue.State);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityStepperValue.CodingKeys and conformance AccessibilityStepperValue.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityStepperValue.CodingKeys and conformance AccessibilityStepperValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityStepperValue.CodingKeys and conformance AccessibilityStepperValue.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityStepperValue.CodingKeys, &unk_25063A870);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityStepperValue.CodingKeys and conformance AccessibilityStepperValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityStepperValue.CodingKeys and conformance AccessibilityStepperValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityStepperValue.CodingKeys and conformance AccessibilityStepperValue.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityStepperValue.CodingKeys, &unk_25063A870);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityStepperValue.CodingKeys and conformance AccessibilityStepperValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityStepperValue.CodingKeys and conformance AccessibilityStepperValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityStepperValue.CodingKeys and conformance AccessibilityStepperValue.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityStepperValue.CodingKeys, &unk_25063A870);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityStepperValue.CodingKeys and conformance AccessibilityStepperValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityStepperValue.CodingKeys and conformance AccessibilityStepperValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityStepperValue.CodingKeys and conformance AccessibilityStepperValue.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityStepperValue.CodingKeys, &unk_25063A870);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityStepperValue.CodingKeys and conformance AccessibilityStepperValue.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityBoundedNumber and conformance AccessibilityBoundedNumber()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityBoundedNumber and conformance AccessibilityBoundedNumber;
  if (!lazy protocol witness table cache variable for type AccessibilityBoundedNumber and conformance AccessibilityBoundedNumber)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityBoundedNumber, &type metadata for AccessibilityBoundedNumber);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityBoundedNumber and conformance AccessibilityBoundedNumber);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityBoundedNumber and conformance AccessibilityBoundedNumber;
  if (!lazy protocol witness table cache variable for type AccessibilityBoundedNumber and conformance AccessibilityBoundedNumber)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityBoundedNumber, &type metadata for AccessibilityBoundedNumber);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityBoundedNumber and conformance AccessibilityBoundedNumber);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityBoundedNumber and conformance AccessibilityBoundedNumber;
  if (!lazy protocol witness table cache variable for type AccessibilityBoundedNumber and conformance AccessibilityBoundedNumber)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityBoundedNumber, &type metadata for AccessibilityBoundedNumber);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityBoundedNumber and conformance AccessibilityBoundedNumber);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityBoundedNumber and conformance AccessibilityBoundedNumber;
  if (!lazy protocol witness table cache variable for type AccessibilityBoundedNumber and conformance AccessibilityBoundedNumber)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityBoundedNumber, &type metadata for AccessibilityBoundedNumber);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityBoundedNumber and conformance AccessibilityBoundedNumber);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Double and conformance Double()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Double and conformance Double;
  if (!lazy protocol witness table cache variable for type Double and conformance Double)
  {
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE13D0], MEMORY[0x24BEE13C8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Double and conformance Double);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilitySliderValue.CodingKeys and conformance AccessibilitySliderValue.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilitySliderValue.CodingKeys and conformance AccessibilitySliderValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilitySliderValue.CodingKeys and conformance AccessibilitySliderValue.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilitySliderValue.CodingKeys, &unk_250638B68);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilitySliderValue.CodingKeys and conformance AccessibilitySliderValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilitySliderValue.CodingKeys and conformance AccessibilitySliderValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilitySliderValue.CodingKeys and conformance AccessibilitySliderValue.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilitySliderValue.CodingKeys, &unk_250638B68);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilitySliderValue.CodingKeys and conformance AccessibilitySliderValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilitySliderValue.CodingKeys and conformance AccessibilitySliderValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilitySliderValue.CodingKeys and conformance AccessibilitySliderValue.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04]("qh;\x1B(U\n", &unk_250638B68);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilitySliderValue.CodingKeys and conformance AccessibilitySliderValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilitySliderValue.CodingKeys and conformance AccessibilitySliderValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilitySliderValue.CodingKeys and conformance AccessibilitySliderValue.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04]("Yh;\x1B", &unk_250638B68);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilitySliderValue.CodingKeys and conformance AccessibilitySliderValue.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityProgressValue.CodingKeys and conformance AccessibilityProgressValue.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityProgressValue.CodingKeys and conformance AccessibilityProgressValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityProgressValue.CodingKeys and conformance AccessibilityProgressValue.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityProgressValue.CodingKeys, &unk_25063C530);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityProgressValue.CodingKeys and conformance AccessibilityProgressValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityProgressValue.CodingKeys and conformance AccessibilityProgressValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityProgressValue.CodingKeys and conformance AccessibilityProgressValue.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityProgressValue.CodingKeys, &unk_25063C530);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityProgressValue.CodingKeys and conformance AccessibilityProgressValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityProgressValue.CodingKeys and conformance AccessibilityProgressValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityProgressValue.CodingKeys and conformance AccessibilityProgressValue.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityProgressValue.CodingKeys, &unk_25063C530);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityProgressValue.CodingKeys and conformance AccessibilityProgressValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityProgressValue.CodingKeys and conformance AccessibilityProgressValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityProgressValue.CodingKeys and conformance AccessibilityProgressValue.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityProgressValue.CodingKeys, &unk_25063C530);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityProgressValue.CodingKeys and conformance AccessibilityProgressValue.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityNumber.AccessibilityNumberArchiveError and conformance AccessibilityNumber.AccessibilityNumberArchiveError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityNumber.AccessibilityNumberArchiveError and conformance AccessibilityNumber.AccessibilityNumberArchiveError;
  if (!lazy protocol witness table cache variable for type AccessibilityNumber.AccessibilityNumberArchiveError and conformance AccessibilityNumber.AccessibilityNumberArchiveError)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityNumber.AccessibilityNumberArchiveError, &type metadata for AccessibilityNumber.AccessibilityNumberArchiveError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNumber.AccessibilityNumberArchiveError and conformance AccessibilityNumber.AccessibilityNumberArchiveError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityNumber.AccessibilityNumberArchiveError and conformance AccessibilityNumber.AccessibilityNumberArchiveError;
  if (!lazy protocol witness table cache variable for type AccessibilityNumber.AccessibilityNumberArchiveError and conformance AccessibilityNumber.AccessibilityNumberArchiveError)
  {
    result = MEMORY[0x23B7C9C04]("=q;\x1B8]\n", &type metadata for AccessibilityNumber.AccessibilityNumberArchiveError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNumber.AccessibilityNumberArchiveError and conformance AccessibilityNumber.AccessibilityNumberArchiveError);
  }
  return result;
}

uint64_t specialized static AccessibilityValueStorage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  _OWORD v7[2];
  uint64_t v8;
  _QWORD v9[5];
  _BYTE v10[24];
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _BYTE v15[40];
  _BYTE v16[40];

  outlined init with copy of AnyAccessibilityValue?(a1, (uint64_t)v16);
  outlined init with copy of AnyAccessibilityValue?(a2, (uint64_t)v15);
  outlined init with copy of AnyAccessibilityValue?((uint64_t)v16, (uint64_t)v10);
  outlined init with copy of AnyAccessibilityValue?((uint64_t)v15, (uint64_t)&v12);
  if (!v11)
  {
    outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)v15, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
    outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)v16, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
    if (!*((_QWORD *)&v13 + 1))
    {
      outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)v10, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
      goto LABEL_7;
    }
LABEL_9:
    outlined destroy of TypesettingConfiguration((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for (AnyAccessibilityValue?, AnyAccessibilityValue?));
LABEL_10:
    v5 = 0;
    return v5 & 1;
  }
  outlined init with copy of AnyAccessibilityValue?((uint64_t)v10, (uint64_t)v9);
  if (!*((_QWORD *)&v13 + 1))
  {
    outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)v15, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
    outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)v16, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
    outlined destroy of AnyAccessibilityValue((uint64_t)v9);
    goto LABEL_9;
  }
  v7[0] = v12;
  v7[1] = v13;
  v8 = v14;
  v4 = specialized AnyAccessibilityValue.isEqual(to:)((uint64_t)v7, v9);
  outlined destroy of AnyAccessibilityValue((uint64_t)v7);
  outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)v15, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
  outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)v16, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
  outlined destroy of AnyAccessibilityValue((uint64_t)v9);
  outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)v10, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
  if ((v4 & 1) == 0)
    goto LABEL_10;
LABEL_7:
  v5 = specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40));
  return v5 & 1;
}

uint64_t specialized static AnyAccessibilityValue.== infix(_:_:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _BYTE v11[40];
  _OWORD v12[2];
  uint64_t v13;
  _QWORD v14[5];

  v14[3] = &type metadata for AnyAccessibilityValue;
  v14[4] = lazy protocol witness table accessor for type AnyAccessibilityValue and conformance AnyAccessibilityValue();
  v14[0] = swift_allocObject();
  outlined init with copy of AnyAccessibilityValue(a2, v14[0] + 16);
  outlined init with copy of AnyTrackedValue((uint64_t)v14, (uint64_t)v11);
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for AbstractAnyAccessibilityValue);
  if (swift_dynamicCast())
  {
    v12[0] = v8;
    v12[1] = v9;
    v13 = v10;
    v4 = a1[3];
    v5 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v4);
    v6 = (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v5 + 88))(v12, v4, v5);
    outlined destroy of AnyAccessibilityValue((uint64_t)v12);
  }
  else
  {
    v10 = 0;
    v8 = 0u;
    v9 = 0u;
    outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)&v8, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
    v6 = 0;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  return v6 & 1;
}

uint64_t outlined init with copy of AnyAccessibilityValue?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void partial apply for closure #1 in AccessibilityValueStorage.init<A>(_:description:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in AccessibilityValueStorage.init<A>(_:description:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

{
  closure #1 in AccessibilityValueStorage.init<A>(_:description:)(a1);
}

uint64_t outlined assign with copy of AnyAccessibilityValue?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of AccessibilityValueStorage(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AccessibilityValueStorage(a2, a1);
  return a2;
}

uint64_t outlined destroy of AccessibilityValueStorage(uint64_t a1)
{
  destroy for AccessibilityValueStorage(a1);
  return a1;
}

unint64_t lazy protocol witness table accessor for type AnyAccessibilityValue.Keys and conformance AnyAccessibilityValue.Keys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyAccessibilityValue.Keys and conformance AnyAccessibilityValue.Keys;
  if (!lazy protocol witness table cache variable for type AnyAccessibilityValue.Keys and conformance AnyAccessibilityValue.Keys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyAccessibilityValue.Keys, &unk_250631A78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyAccessibilityValue.Keys and conformance AnyAccessibilityValue.Keys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyAccessibilityValue.Keys and conformance AnyAccessibilityValue.Keys;
  if (!lazy protocol witness table cache variable for type AnyAccessibilityValue.Keys and conformance AnyAccessibilityValue.Keys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyAccessibilityValue.Keys, &unk_250631A78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyAccessibilityValue.Keys and conformance AnyAccessibilityValue.Keys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyAccessibilityValue.Keys and conformance AnyAccessibilityValue.Keys;
  if (!lazy protocol witness table cache variable for type AnyAccessibilityValue.Keys and conformance AnyAccessibilityValue.Keys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyAccessibilityValue.Keys, &unk_250631A78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyAccessibilityValue.Keys and conformance AnyAccessibilityValue.Keys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyAccessibilityValue.Keys and conformance AnyAccessibilityValue.Keys;
  if (!lazy protocol witness table cache variable for type AnyAccessibilityValue.Keys and conformance AnyAccessibilityValue.Keys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyAccessibilityValue.Keys, &unk_250631A78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyAccessibilityValue.Keys and conformance AnyAccessibilityValue.Keys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnyAccessibilityValueType and conformance AnyAccessibilityValueType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyAccessibilityValueType and conformance AnyAccessibilityValueType;
  if (!lazy protocol witness table cache variable for type AnyAccessibilityValueType and conformance AnyAccessibilityValueType)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyAccessibilityValueType, &type metadata for AnyAccessibilityValueType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyAccessibilityValueType and conformance AnyAccessibilityValueType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyAccessibilityValueType and conformance AnyAccessibilityValueType;
  if (!lazy protocol witness table cache variable for type AnyAccessibilityValueType and conformance AnyAccessibilityValueType)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyAccessibilityValueType, &type metadata for AnyAccessibilityValueType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyAccessibilityValueType and conformance AnyAccessibilityValueType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyAccessibilityValueType and conformance AnyAccessibilityValueType;
  if (!lazy protocol witness table cache variable for type AnyAccessibilityValueType and conformance AnyAccessibilityValueType)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyAccessibilityValueType, &type metadata for AnyAccessibilityValueType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyAccessibilityValueType and conformance AnyAccessibilityValueType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyAccessibilityValueType and conformance AnyAccessibilityValueType;
  if (!lazy protocol witness table cache variable for type AnyAccessibilityValueType and conformance AnyAccessibilityValueType)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyAccessibilityValueType, &type metadata for AnyAccessibilityValueType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyAccessibilityValueType and conformance AnyAccessibilityValueType);
  }
  return result;
}

uint64_t type metadata accessor for AnyAccessibilityValue.ConcreteBase<AccessibilityEmptyValue>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for AnyAccessibilityValue.ConcreteBase<AccessibilityEmptyValue>;
  if (!lazy cache variable for type metadata for AnyAccessibilityValue.ConcreteBase<AccessibilityEmptyValue>)
  {
    lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue();
    lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue();
    lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue();
    type metadata accessor for AnyAccessibilityValue.ConcreteBase();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue;
  if (!lazy protocol witness table cache variable for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityEmptyValue, &type metadata for AccessibilityEmptyValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue;
  if (!lazy protocol witness table cache variable for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityEmptyValue, &type metadata for AccessibilityEmptyValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue;
  if (!lazy protocol witness table cache variable for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityEmptyValue, &type metadata for AccessibilityEmptyValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue;
  if (!lazy protocol witness table cache variable for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue)
  {
    result = MEMORY[0x23B7C9C04]("-v;\x1B,a\n", &type metadata for AccessibilityEmptyValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue);
  }
  return result;
}

uint64_t type metadata accessor for AnyAccessibilityValue.ConcreteBase<AccessibilityNumber>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for AnyAccessibilityValue.ConcreteBase<AccessibilityNumber>;
  if (!lazy cache variable for type metadata for AnyAccessibilityValue.ConcreteBase<AccessibilityNumber>)
  {
    lazy protocol witness table accessor for type AccessibilityNumber and conformance AccessibilityNumber();
    lazy protocol witness table accessor for type AccessibilityNumber and conformance AccessibilityNumber();
    lazy protocol witness table accessor for type AccessibilityNumber and conformance AccessibilityNumber();
    type metadata accessor for AnyAccessibilityValue.ConcreteBase();
  }
  return result;
}

uint64_t type metadata accessor for AnyAccessibilityValue.ConcreteBase<AccessibilityBoundedNumber>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for AnyAccessibilityValue.ConcreteBase<AccessibilityBoundedNumber>;
  if (!lazy cache variable for type metadata for AnyAccessibilityValue.ConcreteBase<AccessibilityBoundedNumber>)
  {
    lazy protocol witness table accessor for type AccessibilityBoundedNumber and conformance AccessibilityBoundedNumber();
    lazy protocol witness table accessor for type AccessibilityBoundedNumber and conformance AccessibilityBoundedNumber();
    lazy protocol witness table accessor for type AccessibilityBoundedNumber and conformance AccessibilityBoundedNumber();
    type metadata accessor for AnyAccessibilityValue.ConcreteBase();
  }
  return result;
}

uint64_t type metadata accessor for AnyAccessibilityValue.ConcreteBase<AccessibilityProgressValue>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for AnyAccessibilityValue.ConcreteBase<AccessibilityProgressValue>;
  if (!lazy cache variable for type metadata for AnyAccessibilityValue.ConcreteBase<AccessibilityProgressValue>)
  {
    lazy protocol witness table accessor for type AccessibilityProgressValue and conformance AccessibilityProgressValue();
    lazy protocol witness table accessor for type AccessibilityProgressValue and conformance AccessibilityProgressValue();
    lazy protocol witness table accessor for type AccessibilityProgressValue and conformance AccessibilityProgressValue();
    type metadata accessor for AnyAccessibilityValue.ConcreteBase();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityProgressValue and conformance AccessibilityProgressValue()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityProgressValue and conformance AccessibilityProgressValue;
  if (!lazy protocol witness table cache variable for type AccessibilityProgressValue and conformance AccessibilityProgressValue)
  {
    result = MEMORY[0x23B7C9C04]("\rr;\x1Bx]\n", &type metadata for AccessibilityProgressValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityProgressValue and conformance AccessibilityProgressValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityProgressValue and conformance AccessibilityProgressValue;
  if (!lazy protocol witness table cache variable for type AccessibilityProgressValue and conformance AccessibilityProgressValue)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityProgressValue, &type metadata for AccessibilityProgressValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityProgressValue and conformance AccessibilityProgressValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityProgressValue and conformance AccessibilityProgressValue;
  if (!lazy protocol witness table cache variable for type AccessibilityProgressValue and conformance AccessibilityProgressValue)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityProgressValue, &type metadata for AccessibilityProgressValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityProgressValue and conformance AccessibilityProgressValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityProgressValue and conformance AccessibilityProgressValue;
  if (!lazy protocol witness table cache variable for type AccessibilityProgressValue and conformance AccessibilityProgressValue)
  {
    result = MEMORY[0x23B7C9C04]("eq;\x1B(]\n", &type metadata for AccessibilityProgressValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityProgressValue and conformance AccessibilityProgressValue);
  }
  return result;
}

uint64_t type metadata accessor for AnyAccessibilityValue.ConcreteBase<AccessibilitySliderValue>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for AnyAccessibilityValue.ConcreteBase<AccessibilitySliderValue>;
  if (!lazy cache variable for type metadata for AnyAccessibilityValue.ConcreteBase<AccessibilitySliderValue>)
  {
    lazy protocol witness table accessor for type AccessibilitySliderValue and conformance AccessibilitySliderValue();
    lazy protocol witness table accessor for type AccessibilitySliderValue and conformance AccessibilitySliderValue();
    lazy protocol witness table accessor for type AccessibilitySliderValue and conformance AccessibilitySliderValue();
    type metadata accessor for AnyAccessibilityValue.ConcreteBase();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilitySliderValue and conformance AccessibilitySliderValue()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilitySliderValue and conformance AccessibilitySliderValue;
  if (!lazy protocol witness table cache variable for type AccessibilitySliderValue and conformance AccessibilitySliderValue)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilitySliderValue, &type metadata for AccessibilitySliderValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilitySliderValue and conformance AccessibilitySliderValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilitySliderValue and conformance AccessibilitySliderValue;
  if (!lazy protocol witness table cache variable for type AccessibilitySliderValue and conformance AccessibilitySliderValue)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilitySliderValue, &type metadata for AccessibilitySliderValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilitySliderValue and conformance AccessibilitySliderValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilitySliderValue and conformance AccessibilitySliderValue;
  if (!lazy protocol witness table cache variable for type AccessibilitySliderValue and conformance AccessibilitySliderValue)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilitySliderValue, &type metadata for AccessibilitySliderValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilitySliderValue and conformance AccessibilitySliderValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilitySliderValue and conformance AccessibilitySliderValue;
  if (!lazy protocol witness table cache variable for type AccessibilitySliderValue and conformance AccessibilitySliderValue)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilitySliderValue, &type metadata for AccessibilitySliderValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilitySliderValue and conformance AccessibilitySliderValue);
  }
  return result;
}

uint64_t type metadata accessor for AnyAccessibilityValue.ConcreteBase<AccessibilityStepperValue>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for AnyAccessibilityValue.ConcreteBase<AccessibilityStepperValue>;
  if (!lazy cache variable for type metadata for AnyAccessibilityValue.ConcreteBase<AccessibilityStepperValue>)
  {
    lazy protocol witness table accessor for type AccessibilityStepperValue and conformance AccessibilityStepperValue();
    lazy protocol witness table accessor for type AccessibilityStepperValue and conformance AccessibilityStepperValue();
    lazy protocol witness table accessor for type AccessibilityStepperValue and conformance AccessibilityStepperValue();
    type metadata accessor for AnyAccessibilityValue.ConcreteBase();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityStepperValue and conformance AccessibilityStepperValue()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityStepperValue and conformance AccessibilityStepperValue;
  if (!lazy protocol witness table cache variable for type AccessibilityStepperValue and conformance AccessibilityStepperValue)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityStepperValue, &type metadata for AccessibilityStepperValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityStepperValue and conformance AccessibilityStepperValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityStepperValue and conformance AccessibilityStepperValue;
  if (!lazy protocol witness table cache variable for type AccessibilityStepperValue and conformance AccessibilityStepperValue)
  {
    result = MEMORY[0x23B7C9C04]("Us;\x1Bx^\n", &type metadata for AccessibilityStepperValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityStepperValue and conformance AccessibilityStepperValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityStepperValue and conformance AccessibilityStepperValue;
  if (!lazy protocol witness table cache variable for type AccessibilityStepperValue and conformance AccessibilityStepperValue)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityStepperValue, &type metadata for AccessibilityStepperValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityStepperValue and conformance AccessibilityStepperValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityStepperValue and conformance AccessibilityStepperValue;
  if (!lazy protocol witness table cache variable for type AccessibilityStepperValue and conformance AccessibilityStepperValue)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityStepperValue, &type metadata for AccessibilityStepperValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityStepperValue and conformance AccessibilityStepperValue);
  }
  return result;
}

uint64_t objectdestroyTm_10()
{
  id *v0;

  return swift_deallocObject();
}

uint64_t type metadata accessor for AnyAccessibilityValue.ConcreteBase<AccessibilityToggleValue>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for AnyAccessibilityValue.ConcreteBase<AccessibilityToggleValue>;
  if (!lazy cache variable for type metadata for AnyAccessibilityValue.ConcreteBase<AccessibilityToggleValue>)
  {
    lazy protocol witness table accessor for type AccessibilityToggleValue and conformance AccessibilityToggleValue();
    lazy protocol witness table accessor for type AccessibilityToggleValue and conformance AccessibilityToggleValue();
    lazy protocol witness table accessor for type AccessibilityToggleValue and conformance AccessibilityToggleValue();
    type metadata accessor for AnyAccessibilityValue.ConcreteBase();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityToggleValue and conformance AccessibilityToggleValue()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityToggleValue and conformance AccessibilityToggleValue;
  if (!lazy protocol witness table cache variable for type AccessibilityToggleValue and conformance AccessibilityToggleValue)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityToggleValue, &type metadata for AccessibilityToggleValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityToggleValue and conformance AccessibilityToggleValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityToggleValue and conformance AccessibilityToggleValue;
  if (!lazy protocol witness table cache variable for type AccessibilityToggleValue and conformance AccessibilityToggleValue)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityToggleValue, &type metadata for AccessibilityToggleValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityToggleValue and conformance AccessibilityToggleValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityToggleValue and conformance AccessibilityToggleValue;
  if (!lazy protocol witness table cache variable for type AccessibilityToggleValue and conformance AccessibilityToggleValue)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityToggleValue, &type metadata for AccessibilityToggleValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityToggleValue and conformance AccessibilityToggleValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityToggleValue and conformance AccessibilityToggleValue;
  if (!lazy protocol witness table cache variable for type AccessibilityToggleValue and conformance AccessibilityToggleValue)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityToggleValue, &type metadata for AccessibilityToggleValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityToggleValue and conformance AccessibilityToggleValue);
  }
  return result;
}

uint64_t type metadata accessor for AnyAccessibilityValue.ConcreteBase<AccessibilityDisclosureValue>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for AnyAccessibilityValue.ConcreteBase<AccessibilityDisclosureValue>;
  if (!lazy cache variable for type metadata for AnyAccessibilityValue.ConcreteBase<AccessibilityDisclosureValue>)
  {
    lazy protocol witness table accessor for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue();
    lazy protocol witness table accessor for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue();
    lazy protocol witness table accessor for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue();
    type metadata accessor for AnyAccessibilityValue.ConcreteBase();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue;
  if (!lazy protocol witness table cache variable for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue)
  {
    result = MEMORY[0x23B7C9C04]("Eo;\x1B$Z\n", &type metadata for AccessibilityDisclosureValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue;
  if (!lazy protocol witness table cache variable for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityDisclosureValue, &type metadata for AccessibilityDisclosureValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue;
  if (!lazy protocol witness table cache variable for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityDisclosureValue, &type metadata for AccessibilityDisclosureValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue;
  if (!lazy protocol witness table cache variable for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityDisclosureValue, &type metadata for AccessibilityDisclosureValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue;
  if (!lazy protocol witness table cache variable for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue)
  {
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue);
  }
  return result;
}

uint64_t type metadata accessor for AnyAccessibilityValue.ConcreteBase<String>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for AnyAccessibilityValue.ConcreteBase<String>;
  if (!lazy cache variable for type metadata for AnyAccessibilityValue.ConcreteBase<String>)
    type metadata accessor for AnyAccessibilityValue.ConcreteBase();
  return result;
}

uint64_t type metadata accessor for AnyAccessibilityValue.ConcreteBase<Bool>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for AnyAccessibilityValue.ConcreteBase<Bool>;
  if (!lazy cache variable for type metadata for AnyAccessibilityValue.ConcreteBase<Bool>)
    type metadata accessor for AnyAccessibilityValue.ConcreteBase();
  return result;
}

uint64_t type metadata accessor for AnyAccessibilityValue.ConcreteBase<Double>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for AnyAccessibilityValue.ConcreteBase<Double>;
  if (!lazy cache variable for type metadata for AnyAccessibilityValue.ConcreteBase<Double>)
    type metadata accessor for AnyAccessibilityValue.ConcreteBase();
  return result;
}

uint64_t type metadata accessor for AnyAccessibilityValue.ConcreteBase<Int>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for AnyAccessibilityValue.ConcreteBase<Int>;
  if (!lazy cache variable for type metadata for AnyAccessibilityValue.ConcreteBase<Int>)
    type metadata accessor for AnyAccessibilityValue.ConcreteBase();
  return result;
}

uint64_t outlined assign with take of AnyAccessibilityValue?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityValueStorage.CodingKeys and conformance CodableAccessibilityValueStorage.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityValueStorage.CodingKeys and conformance CodableAccessibilityValueStorage.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityValueStorage.CodingKeys and conformance CodableAccessibilityValueStorage.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAccessibilityValueStorage.CodingKeys, &unk_2506418B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityValueStorage.CodingKeys and conformance CodableAccessibilityValueStorage.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityValueStorage.CodingKeys and conformance CodableAccessibilityValueStorage.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityValueStorage.CodingKeys and conformance CodableAccessibilityValueStorage.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAccessibilityValueStorage.CodingKeys, &unk_2506418B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityValueStorage.CodingKeys and conformance CodableAccessibilityValueStorage.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityValueStorage.CodingKeys and conformance CodableAccessibilityValueStorage.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityValueStorage.CodingKeys and conformance CodableAccessibilityValueStorage.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableAccessibilityValueStorage.CodingKeys, &unk_2506418B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityValueStorage.CodingKeys and conformance CodableAccessibilityValueStorage.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityValueStorage.CodingKeys and conformance CodableAccessibilityValueStorage.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityValueStorage.CodingKeys and conformance CodableAccessibilityValueStorage.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04]("1f;\x1BlR\n", &unk_2506418B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityValueStorage.CodingKeys and conformance CodableAccessibilityValueStorage.CodingKeys);
  }
  return result;
}

uint64_t outlined destroy of CodableAccessibilityValueStorage(uint64_t a1)
{
  destroy for CodableAccessibilityValueStorage(a1);
  return a1;
}

uint64_t outlined init with copy of CodableAccessibilityValueStorage(uint64_t *a1, uint64_t a2)
{
  initializeWithCopy for CodableAccessibilityValueStorage(a2, a1);
  return a2;
}

_UNKNOWN **associated type witness table accessor for AccessibilityValue.PlatformValue : AccessibilityPlatformSafe in Int()
{
  return &protocol witness table for Int;
}

_UNKNOWN **associated type witness table accessor for AccessibilityValue.PlatformValue : AccessibilityPlatformSafe in Double()
{
  return &protocol witness table for Double;
}

_UNKNOWN **associated type witness table accessor for AccessibilityValue.PlatformValue : AccessibilityPlatformSafe in Bool()
{
  return &protocol witness table for Bool;
}

_UNKNOWN **associated type witness table accessor for AccessibilityValue.PlatformValue : AccessibilityPlatformSafe in String()
{
  return &protocol witness table for String;
}

uint64_t associated type witness table accessor for AccessibilityValue.PlatformValue : AccessibilityPlatformSafe in AccessibilityEmptyValue()
{
  return lazy protocol witness table accessor for type Never? and conformance <A> A?(&lazy protocol witness table cache variable for type Never? and conformance <A> A?, &lazy cache variable for type metadata for Never?, MEMORY[0x24BEE4078], (uint64_t)&protocol witness table for Never);
}

unint64_t instantiation function for generic protocol witness table for AccessibilityEmptyValue(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **associated type witness table accessor for AccessibilityValue.PlatformValue : AccessibilityPlatformSafe in AccessibilityBoundedNumber()
{
  return &protocol witness table for NSNumber;
}

unint64_t instantiation function for generic protocol witness table for AccessibilityBoundedNumber(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AccessibilityBoundedNumber and conformance AccessibilityBoundedNumber();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for AccessibilityValue.PlatformValue : AccessibilityPlatformSafe in AccessibilityDisclosureValue()
{
  return lazy protocol witness table accessor for type Never? and conformance <A> A?(&lazy protocol witness table cache variable for type Bool? and conformance <A> A?, &lazy cache variable for type metadata for Bool?, MEMORY[0x24BEE1328], (uint64_t)&protocol witness table for Bool);
}

uint64_t lazy protocol witness table accessor for type Never? and conformance <A> A?(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, a2, a3, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v8 = a4;
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for <A> A?, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AccessibilityDisclosureValue(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for AccessibilityToggleValue(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AccessibilityToggleValue and conformance AccessibilityToggleValue();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for AccessibilityStepperValue(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AccessibilityStepperValue and conformance AccessibilityStepperValue();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type AccessibilityStepperValue and conformance AccessibilityStepperValue();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for AccessibilitySliderValue(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AccessibilitySliderValue and conformance AccessibilitySliderValue();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type AccessibilitySliderValue and conformance AccessibilitySliderValue();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for AccessibilityProgressValue(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AccessibilityProgressValue and conformance AccessibilityProgressValue();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for AccessibilityNumber(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AccessibilityNumber and conformance AccessibilityNumber();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for ExpressibleByIntegerLiteral.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral in AccessibilityNumber()
{
  return MEMORY[0x24BEE17E8];
}

uint64_t associated type witness table accessor for ExpressibleByFloatLiteral.FloatLiteralType : _ExpressibleByBuiltinFloatLiteral in AccessibilityNumber()
{
  return MEMORY[0x24BEE1440];
}

uint64_t associated type witness table accessor for AccessibilityValue.PlatformValue : AccessibilityPlatformSafe in <> ProxyCodable<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t instantiation function for generic protocol witness table for <> ProxyCodable<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for <> ProxyCodable<A>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for AnyAccessibilityValue(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type AnyAccessibilityValue and conformance AnyAccessibilityValue();
  result = lazy protocol witness table accessor for type AnyAccessibilityValue and conformance AnyAccessibilityValue();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_234F4F8E0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = AccessibilityValueStorage.valueDescription.getter();
  *a1 = result;
  return result;
}

uint64_t sub_234F4F908(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a2 + 40) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for AnyAccessibilityValueType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF5)
    goto LABEL_17;
  if (a2 + 11 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 11) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 11;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 11;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 11;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xC;
  v8 = v6 - 12;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyAccessibilityValueType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_234F4FA24 + 4 * byte_2352B3285[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_234F4FA58 + 4 * byte_2352B3280[v4]))();
}

uint64_t sub_234F4FA58(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F4FA60(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234F4FA68);
  return result;
}

uint64_t sub_234F4FA74(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234F4FA7CLL);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_234F4FA80(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F4FA88(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnyAccessibilityValueType()
{
  return &type metadata for AnyAccessibilityValueType;
}

uint64_t dispatch thunk of AccessibilityValue.localizedDescription.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of AccessibilityValue.displayDescription.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of AccessibilityValue.value.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of AccessibilityValue.minValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of AccessibilityValue.maxValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of AccessibilityValue.step.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of static AccessibilityValue.type.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of AccessibilityValueByProxy.base.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

ValueMetadata *type metadata accessor for AccessibilityEmptyValue()
{
  return &type metadata for AccessibilityEmptyValue;
}

ValueMetadata *type metadata accessor for AccessibilityBoundedNumber()
{
  return &type metadata for AccessibilityBoundedNumber;
}

ValueMetadata *type metadata accessor for AccessibilityDisclosureValue()
{
  return &type metadata for AccessibilityDisclosureValue;
}

ValueMetadata *type metadata accessor for AccessibilityToggleValue()
{
  return &type metadata for AccessibilityToggleValue;
}

uint64_t storeEnumTagSinglePayload for AccessibilityToggleValue(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_234F4FB84 + 4 * byte_2352B328F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_234F4FBB8 + 4 * byte_2352B328A[v4]))();
}

uint64_t sub_234F4FBB8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F4FBC0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234F4FBC8);
  return result;
}

uint64_t sub_234F4FBD4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234F4FBDCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_234F4FBE0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F4FBE8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityToggleValue.State()
{
  return &type metadata for AccessibilityToggleValue.State;
}

ValueMetadata *type metadata accessor for AccessibilityStepperValue()
{
  return &type metadata for AccessibilityStepperValue;
}

void destroy for AccessibilitySliderValue(id *a1)
{

}

_QWORD *initializeWithCopy for AccessibilityBoundedNumber(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = *(void **)(a2 + 16);
  v6 = *(void **)(a2 + 24);
  a1[2] = v5;
  a1[3] = v6;
  v7 = v3;
  v8 = v4;
  v9 = v5;
  v10 = v6;
  return a1;
}

uint64_t assignWithCopy for AccessibilityBoundedNumber(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a1 + 8);
  v8 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  v9 = v8;

  v10 = *(void **)(a1 + 16);
  v11 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  v12 = v11;

  v13 = *(void **)(a1 + 24);
  v14 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v14;
  v15 = v14;

  return a1;
}

uint64_t assignWithTake for AccessibilityBoundedNumber(uint64_t a1, _OWORD *a2)
{
  void *v4;
  void *v5;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = a2[1];

  return a1;
}

ValueMetadata *type metadata accessor for AccessibilitySliderValue()
{
  return &type metadata for AccessibilitySliderValue;
}

ValueMetadata *type metadata accessor for AccessibilityProgressValue()
{
  return &type metadata for AccessibilityProgressValue;
}

ValueMetadata *type metadata accessor for AccessibilityNumber()
{
  return &type metadata for AccessibilityNumber;
}

ValueMetadata *type metadata accessor for AccessibilityNumber.AccessibilityNumberArchiveError()
{
  return &type metadata for AccessibilityNumber.AccessibilityNumberArchiveError;
}

ValueMetadata *type metadata accessor for AnyAccessibilityValue()
{
  return &type metadata for AnyAccessibilityValue;
}

uint64_t destroy for AccessibilityValueStorage(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_1(a1);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AccessibilityValueStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = v5;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AccessibilityValueStorage(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v4 = *((_QWORD *)a2 + 3);
  if (*(_QWORD *)(a1 + 24))
  {
    if (v4)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
    }
    else
    {
      outlined destroy of AnyAccessibilityValue(a1);
      v5 = *((_QWORD *)a2 + 4);
      v6 = a2[1];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(_QWORD *)(a1 + 32) = v5;
    }
  }
  else if (v4)
  {
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)a1 = v7;
    *(_OWORD *)(a1 + 16) = v8;
  }
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AccessibilityValueStorage(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  if (*(_QWORD *)(a1 + 24))
  {
    if (*(_QWORD *)(a2 + 24))
      __swift_destroy_boxed_opaque_existential_1(a1);
    else
      outlined destroy of AnyAccessibilityValue(a1);
  }
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityValueStorage(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityValueStorage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityValueStorage()
{
  return &type metadata for AccessibilityValueStorage;
}

void destroy for CodableAccessibilityValueStorage(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 16) != 0xFF)
    outlined consume of AccessibilityText.Storage(*(void **)a1, *(_QWORD *)(a1 + 8), *(_WORD *)(a1 + 16) & 1);
  if (*(_QWORD *)(a1 + 48))
    __swift_destroy_boxed_opaque_existential_1(a1 + 24);
}

uint64_t initializeWithCopy for CodableAccessibilityValueStorage(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  unsigned int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;

  v4 = *((unsigned __int16 *)a2 + 8);
  if (*((_BYTE *)a2 + 16) == 0xFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
  }
  else
  {
    v5 = v4 >> 8;
    v6 = v4 & 1;
    v7 = *a2;
    v8 = a2[1];
    outlined copy of AccessibilityText.Storage((void *)*a2, v8, v4 & 1);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = v6;
    *(_BYTE *)(a1 + 17) = v5;
  }
  v9 = (_OWORD *)(a1 + 24);
  v10 = a2 + 3;
  v11 = a2[6];
  if (v11)
  {
    v12 = a2[7];
    *(_QWORD *)(a1 + 48) = v11;
    *(_QWORD *)(a1 + 56) = v12;
    (**(void (***)(_OWORD *, _OWORD *))(v11 - 8))(v9, v10);
  }
  else
  {
    v13 = *(_OWORD *)(a2 + 5);
    *v9 = *v10;
    *(_OWORD *)(a1 + 40) = v13;
    *(_QWORD *)(a1 + 56) = a2[7];
  }
  return a1;
}

uint64_t assignWithCopy for CodableAccessibilityValueStorage(uint64_t a1, uint64_t *a2)
{
  __int16 v4;
  __int128 v5;
  __int16 v6;
  char v7;
  void *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  char v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v4 = *((_WORD *)a2 + 8);
  if (*(unsigned __int8 *)(a1 + 16) != 0xFF)
  {
    if (v4 == 255)
    {
      outlined destroy of AccessibilityText(a1);
      v6 = *((_WORD *)a2 + 8);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_WORD *)(a1 + 16) = v6;
      goto LABEL_9;
    }
    v10 = v4 & 1;
    v11 = *a2;
    v12 = a2[1];
    outlined copy of AccessibilityText.Storage((void *)*a2, v12, v4 & 1);
    v13 = *(void **)a1;
    v14 = *(_QWORD *)(a1 + 8);
    v15 = *(_BYTE *)(a1 + 16);
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v12;
    *(_BYTE *)(a1 + 16) = v10;
    outlined consume of AccessibilityText.Storage(v13, v14, v15);
  }
  else
  {
    if (v4 == 255)
    {
      v5 = *(_OWORD *)a2;
      *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
      *(_OWORD *)a1 = v5;
      goto LABEL_9;
    }
    v7 = v4 & 1;
    v8 = (void *)*a2;
    v9 = a2[1];
    outlined copy of AccessibilityText.Storage((void *)*a2, v9, v4 & 1);
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v9;
    *(_BYTE *)(a1 + 16) = v7;
  }
  *(_BYTE *)(a1 + 17) = *((_BYTE *)a2 + 17);
LABEL_9:
  v16 = (_OWORD *)(a1 + 24);
  v17 = a2 + 3;
  v18 = a2[6];
  if (*(_QWORD *)(a1 + 48))
  {
    if (v18)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 24), a2 + 3);
    }
    else
    {
      outlined destroy of AnyAccessibilityValue(a1 + 24);
      v19 = a2[7];
      v20 = *(_OWORD *)(a2 + 5);
      *v16 = *v17;
      *(_OWORD *)(a1 + 40) = v20;
      *(_QWORD *)(a1 + 56) = v19;
    }
  }
  else if (v18)
  {
    *(_QWORD *)(a1 + 48) = v18;
    *(_QWORD *)(a1 + 56) = a2[7];
    (**(void (***)(uint64_t, uint64_t))(v18 - 8))(a1 + 24, (uint64_t)(a2 + 3));
  }
  else
  {
    v21 = *v17;
    v22 = *(_OWORD *)(a2 + 5);
    *(_QWORD *)(a1 + 56) = a2[7];
    *v16 = v21;
    *(_OWORD *)(a1 + 40) = v22;
  }
  return a1;
}

uint64_t assignWithTake for CodableAccessibilityValueStorage(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  __int16 v5;
  void *v6;
  uint64_t v7;
  __int128 v8;

  v4 = *(_WORD *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16) == 0xFF)
    goto LABEL_4;
  v5 = *(_WORD *)(a2 + 16);
  if ((_BYTE)v5 == 0xFF)
  {
    outlined destroy of AccessibilityText(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
    goto LABEL_6;
  }
  v6 = *(void **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v5 & 1;
  outlined consume of AccessibilityText.Storage(v6, v7, v4 & 1);
  *(_BYTE *)(a1 + 17) = HIBYTE(v5) & 1;
LABEL_6:
  if (*(_QWORD *)(a1 + 48))
  {
    if (*(_QWORD *)(a2 + 48))
      __swift_destroy_boxed_opaque_existential_1(a1 + 24);
    else
      outlined destroy of AnyAccessibilityValue(a1 + 24);
  }
  v8 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for CodableAccessibilityValueStorage(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CodableAccessibilityValueStorage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
      *(_QWORD *)(result + 48) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CodableAccessibilityValueStorage()
{
  return &type metadata for CodableAccessibilityValueStorage;
}

void *type metadata accessor for CodableAccessibilityValueStorage.CodingKeys()
{
  return &unk_2506418B8;
}

uint64_t storeEnumTagSinglePayload for AccessibilityDisclosureValue(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_234F50450 + 4 * byte_2352B3299[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_234F50484 + 4 * byte_2352B3294[v4]))();
}

uint64_t sub_234F50484(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F5048C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234F50494);
  return result;
}

uint64_t sub_234F504A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234F504A8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_234F504AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F504B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for AnyAccessibilityValue.Keys()
{
  return &unk_250631A78;
}

void *type metadata accessor for AccessibilityProgressValue.CodingKeys()
{
  return &unk_25063C530;
}

void *type metadata accessor for AccessibilitySliderValue.CodingKeys()
{
  return &unk_250638B68;
}

void *type metadata accessor for AccessibilityStepperValue.CodingKeys()
{
  return &unk_25063A870;
}

void *type metadata accessor for AccessibilityToggleValue.CodingKeys()
{
  return &unk_250638C78;
}

uint64_t storeEnumTagSinglePayload for AccessibilityBoundedNumber.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_234F5055C + 4 * byte_2352B32A3[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_234F50590 + 4 * byte_2352B329E[v4]))();
}

uint64_t sub_234F50590(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F50598(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234F505A0);
  return result;
}

uint64_t sub_234F505AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234F505B4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_234F505B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F505C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for AccessibilityBoundedNumber.CodingKeys()
{
  return &unk_25063C418;
}

void *type metadata accessor for AccessibilityEmptyValue.CodingKeys()
{
  return &unk_250636900;
}

uint64_t getEnumTagSinglePayload for AnyAccessibilityValue.ConcreteBase(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234F5069C + 4 * byte_2352B32A8[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for AnyAccessibilityValue.ConcreteBase(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t instantiation function for generic protocol witness table for AnyAccessibilityValue.ConcreteBase<A>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyAccessibilityValue.ConcreteBase<A>);
  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyAccessibilityValue.ConcreteBase<A>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t specialized AccessibilityBoundedNumber.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7265626D756ELL && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x756F427265776F6CLL && a2 == 0xEA0000000000646ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x756F427265707075 && a2 == 0xEA0000000000646ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656469727473 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

void type metadata accessor for AnyAccessibilityValue.ConcreteBase.CodingKeys()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void type metadata accessor for (AnyAccessibilityValue?, AnyAccessibilityValue?)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (AnyAccessibilityValue?, AnyAccessibilityValue?))
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (AnyAccessibilityValue?, AnyAccessibilityValue?));
  }
}

uint64_t sub_234F51268()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t storeEnumTagSinglePayload for AccessibilityNumber.AccessibilityNumberArchiveError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_234F512CC + 4 * byte_2352B32B6[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_234F512EC + 4 * byte_2352B32BB[v4]))();
}

_BYTE *sub_234F512CC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_234F512EC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_234F512F4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_234F512FC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_234F51304(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_234F5130C(_DWORD *result)
{
  *result = 0;
  return result;
}

void base witness table accessor for Equatable in AnyAccessibilityValue.ConcreteBase<A>.CodingKeys()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for CustomDebugStringConvertible in AnyAccessibilityValue.ConcreteBase<A>.CodingKeys()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for CustomStringConvertible in AnyAccessibilityValue.ConcreteBase<A>.CodingKeys()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t BloomFilter.value.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t BloomFilter.value.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*BloomFilter.value.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

SwiftUI::BloomFilter __swiftcall BloomFilter.init()()
{
  _QWORD *v0;
  SwiftUI::BloomFilter result;

  *v0 = 0;
  return result;
}

SwiftUI::BloomFilter __swiftcall BloomFilter.init(hashValue:)(SwiftUI::BloomFilter hashValue)
{
  uint64_t *v1;

  *v1 = (1 << (hashValue.value >> 4)) | (1 << (hashValue.value >> 10)) | (1 << SBYTE2(hashValue.value));
  return hashValue;
}

uint64_t BloomFilter.init<A>(value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v6;
  uint64_t result;

  v6 = dispatch thunk of Hashable.hashValue.getter();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  *a3 = (1 << (v6 >> 4)) | (1 << (v6 >> 10)) | (1 << SBYTE2(v6));
  return result;
}

unint64_t BloomFilter.init(type:)@<X0>(unint64_t result@<X0>, uint64_t *a2@<X8>)
{
  *a2 = (1 << (result >> 4)) | (1 << (result >> 10)) | (1 << SBYTE2(result));
  return result;
}

Swift::Void __swiftcall BloomFilter.formUnion(_:)(SwiftUI::BloomFilter a1)
{
  _QWORD *v1;

  *v1 |= *(_QWORD *)a1.value;
}

SwiftUI::BloomFilter __swiftcall BloomFilter.union(_:)(SwiftUI::BloomFilter result)
{
  _QWORD *v1;
  _QWORD *v2;

  *v1 = *v2 | *(_QWORD *)result.value;
  return result;
}

Swift::Bool __swiftcall BloomFilter.mayContain(_:)(SwiftUI::BloomFilter a1)
{
  _QWORD *v1;

  return (*(_QWORD *)a1.value & ~*v1) == 0;
}

BOOL BloomFilter.isEmpty.getter()
{
  _QWORD *v0;

  return *v0 == 0;
}

BOOL static BloomFilter.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

ValueMetadata *type metadata accessor for BloomFilter()
{
  return &type metadata for BloomFilter;
}

uint64_t Interpolatable<>.interpolatableData.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  uint64_t v25;
  uint64_t v26;

  v26 = a3;
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v5 = swift_getAssociatedConformanceWitness();
  v6 = type metadata accessor for InterpolatedVectorElement(255, a1, AssociatedConformanceWitness, v5);
  v9 = type metadata accessor for ArrayWith2Inline(0, v6, v7, v8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v23 - v10;
  v12 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = swift_checkMetadataState();
  type metadata accessor for _ContiguousArrayStorage();
  swift_allocObject();
  v17 = static Array._adoptStorage(_:count:)();
  v19 = v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v25, a1);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v19, v15, a1);
  *(_QWORD *)(v19
            + *(int *)(type metadata accessor for InterpolatedVectorElement(0, a1, AssociatedConformanceWitness, v5)
                     + 44)) = 0x3FF0000000000000;
  _finalizeUninitializedArray<A>(_:)();
  ArrayWith2Inline.init(arrayLiteral:)(v17, v6, v20, v21);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(a2 + 48))(v11, v16, a2);
}

uint64_t type metadata accessor for InterpolatedVectorElement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InterpolatedVectorElement);
}

uint64_t key path setter for Interpolatable<>.interpolatableData : <A>A(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  void (*v6)(_QWORD, _QWORD);
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  v5 = *(_QWORD *)(a4 + a3 - 24);
  v6 = *(void (**)(_QWORD, _QWORD))(a4 + a3 - 16);
  v7 = *(_QWORD *)(a4 + a3 - 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11 = (char *)&v14 - v10;
  (*(void (**)(char *, uint64_t, double))(v12 + 16))((char *)&v14 - v10, a1, v9);
  return Interpolatable<>.interpolatableData.setter((uint64_t)v11, v5, v6, v7);
}

uint64_t Interpolatable<>.interpolatableData.setter(uint64_t a1, uint64_t a2, void (*a3)(_QWORD, _QWORD), uint64_t a4)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  void (*v32)(uint64_t, uint64_t);
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  _QWORD *v35;
  void (*v36)(_QWORD, _QWORD);
  void (*v37)(_QWORD);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  double v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, char *, uint64_t);
  uint64_t v72;
  uint64_t v73;
  void (*v74)(_QWORD);
  void (*v75)(_QWORD, _QWORD);
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v75 = a3;
  v69 = a2;
  v72 = a1;
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v73 = swift_getAssociatedConformanceWitness();
  v7 = type metadata accessor for InterpolatedVectorElement(255, a2, AssociatedConformanceWitness, v73);
  v10 = type metadata accessor for ArrayWith2Inline(255, v7, v8, v9);
  v71 = (void (*)(uint64_t, char *, uint64_t))MEMORY[0x23B7C9C04](&protocol conformance descriptor for ArrayWith2Inline<A>, v10);
  v11 = type metadata accessor for LazyFilterSequence();
  v78 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ArrayWith2Inline<A>, v10);
  v83 = v78;
  v70 = MEMORY[0x23B7C9C04](MEMORY[0x24BEE3000], v11, &v83);
  v12 = v11;
  v81 = v11;
  v13 = type metadata accessor for DefaultIndices();
  v65 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v63 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v64 = (char *)&v59 - v17;
  v61 = MEMORY[0x23B7C9C04](MEMORY[0x24BEE0670], v13, v16);
  v18 = type metadata accessor for IndexingIterator();
  v67 = *(_QWORD *)(v18 - 8);
  v68 = v18;
  MEMORY[0x24BDAC7A8](v18);
  v62 = (char *)&v59 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v76 = (char *)&v59 - v21;
  v77 = v7;
  v60 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v59 - v23;
  v74 = (void (*)(_QWORD))type metadata accessor for LazySequence();
  MEMORY[0x24BDAC7A8](v74);
  v25 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v28 = (char *)&v59 - v27;
  v80 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)&v59 - v30;
  v32 = *(void (**)(uint64_t, uint64_t))(a4 + 56);
  v79 = swift_checkMetadataState();
  v32(v79, a4);
  Sequence.enumerated()();
  v33 = *(void (**)(char *, uint64_t))(v25 + 8);
  v34 = v69;
  v33(v28, v10);
  v35 = (_QWORD *)swift_allocObject();
  v37 = v74;
  v36 = v75;
  v35[2] = v34;
  v35[3] = v36;
  v35[4] = a4;
  MEMORY[0x23B7C9C04](MEMORY[0x24BEE25B0], v37);
  v38 = v81;
  LazySequenceProtocol.filter(_:)();
  swift_release();
  v39 = Collection.count.getter();
  if (v39)
  {
    v40 = v39;
    v41 = *(_QWORD *)(v34 - 8);
    v42 = v66;
    v75 = *(void (**)(_QWORD, _QWORD))(v41 + 8);
    v75(v66, v34);
    if (v40 == 1)
    {
      v82 = 0;
      MEMORY[0x23B7C7108](&v82, v38, v78);
      (*(void (**)(uint64_t))(*(_QWORD *)(v79 - 8) + 8))(v72);
      (*(void (**)(char *, uint64_t))(v80 + 8))(v31, v38);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v41 + 32))(v42, v24, v34);
    }
    else
    {
      v82 = 0;
      v44 = v78;
      MEMORY[0x23B7C7108](&v82, v38, v78);
      v71 = *(void (**)(uint64_t, char *, uint64_t))(v41 + 32);
      v71(v42, v24, v34);
      v82 = 0;
      MEMORY[0x23B7C7108](&v82, v38, v44);
      v45 = *(double *)&v24[*(int *)(v77 + 44)];
      v74 = *(void (**)(_QWORD))(v60 + 8);
      v74(v24);
      Collection<>.indices.getter();
      v46 = v64;
      Collection.dropFirst(_:)();
      v47 = v65;
      v48 = v62;
      (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v62, v46, v13);
      MEMORY[0x23B7C5B6C](&v82, v13);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v46, v13);
      v49 = v68;
      *(_QWORD *)&v48[*(int *)(v68 + 36)] = v82;
      v50 = v76;
      (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v76, v48, v49);
      v51 = &v50[*(int *)(v49 + 36)];
      v52 = *(_QWORD *)v51;
      DefaultIndices.endIndex.getter();
      v54 = v79;
      v53 = v80;
      while (v52 != v82)
      {
        DefaultIndices.formIndex(after:)();
        v82 = v52;
        v55 = v81;
        v56 = v78;
        MEMORY[0x23B7C7108](&v82, v81, v78);
        v57 = *(double *)&v24[*(int *)(v77 + 44)];
        v74(v24);
        v45 = v45 + v57;
        v58 = v57 / v45;
        if (v58 < 1.0)
        {
          v82 = v52;
          MEMORY[0x23B7C7108](&v82, v55, v56);
          (*(void (**)(char *, uint64_t, double))(v73 + 8))(v24, v34, v58);
          v75(v24, v34);
        }
        else
        {
          v75(v42, v34);
          v82 = v52;
          MEMORY[0x23B7C7108](&v82, v55, v56);
          v71(v42, v24, v34);
        }
        v50 = v76;
        v54 = v79;
        v53 = v80;
        v52 = *(_QWORD *)v51;
        DefaultIndices.endIndex.getter();
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 8))(v72, v54);
      (*(void (**)(char *, uint64_t))(v67 + 8))(v50, v68);
      return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v31, v81);
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(v79 - 8) + 8))(v72);
    return (*(uint64_t (**)(char *, uint64_t))(v80 + 8))(v31, v38);
  }
}

uint64_t InterpolatedVectorElement.init(key:amount:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t result;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a5, a1, a2);
  result = type metadata accessor for InterpolatedVectorElement(0, a2, a3, a4);
  *(double *)(a5 + *(int *)(result + 44)) = a6;
  return result;
}

BOOL closure #1 in Interpolatable<>.interpolatableData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t v5;

  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v5 = swift_getAssociatedConformanceWitness();
  return *(double *)(a1
                   + *(int *)(type metadata accessor for InterpolatedVectorElement(0, a2, AssociatedConformanceWitness, v5)+ 44)) > 0.0;
}

void (*Interpolatable<>.interpolatableData.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  size_t v12;
  void *v13;

  v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[2] = a4;
  v9[3] = v4;
  *v9 = a2;
  v9[1] = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[4] = AssociatedTypeWitness;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9[5] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v9[6] = malloc(v12);
  v13 = malloc(v12);
  v9[7] = v13;
  Interpolatable<>.interpolatableData.getter(a2, a4, (uint64_t)v13);
  return Interpolatable<>.interpolatableData.modify;
}

void Interpolatable<>.interpolatableData.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(_QWORD, _QWORD);
  uint64_t v9;

  v2 = *a1;
  v3 = (void *)(*a1)[6];
  v4 = (void *)(*a1)[7];
  if ((a2 & 1) != 0)
  {
    v5 = v2[4];
    v6 = v2[5];
    v7 = v2[2];
    v9 = *v2;
    v8 = (void (*)(_QWORD, _QWORD))v2[1];
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[6], v4, v5);
    Interpolatable<>.interpolatableData.setter((uint64_t)v3, v9, v8, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    Interpolatable<>.interpolatableData.setter((*a1)[7], *v2, (void (*)(_QWORD, _QWORD))v2[1], v2[2]);
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t static InterpolatedVector.zero.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

Swift::Void __swiftcall InterpolatedVector.scale(by:)(Swift::Double by)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t *, _QWORD);
  uint64_t v28;
  uint64_t (*v29)(uint64_t *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;

  v4 = v3;
  v5 = v2;
  v6 = v1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v10 = swift_getAssociatedConformanceWitness();
  v11 = type metadata accessor for InterpolatedVectorElement(0, AssociatedTypeWitness, AssociatedConformanceWitness, v10);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v28 - v12;
  v16 = type metadata accessor for ArrayWith2Inline(0, v11, v14, v15);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v28 - v19;
  (*(void (**)(uint64_t, uint64_t, double))(v5 + 56))(v6, v5, v18);
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ArrayWith2Inline<A>, v16);
  RandomAccessCollection<>.indices.getter();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
  v22 = v30;
  v21 = v31;
  if (v30 != v31)
  {
    if (v31 < v30)
    {
      __break(1u);
    }
    else if (v30 < v31)
    {
      v23 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v5 + 72);
      v28 = v11;
      v29 = v23;
      do
      {
        v24 = v29(&v30, v6, v5);
        v25 = v5;
        v26 = v4;
        v27 = (void (*)(uint64_t *, _QWORD))v24;
        ArrayWith2Inline.subscript.getter(v22, v16);
        *(double *)&v13[*(int *)(v28 + 44)] = *(double *)&v13[*(int *)(v28 + 44)] * by;
        ArrayWith2Inline.subscript.setter((uint64_t)v13, v22, v16);
        v27(&v30, 0);
        v4 = v26;
        v5 = v25;
        ++v22;
      }
      while (v21 != v22);
      return;
    }
    __break(1u);
  }
}

double InterpolatedVector.magnitudeSquared.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE v16[16];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v6 = swift_getAssociatedConformanceWitness();
  v7 = type metadata accessor for InterpolatedVectorElement(255, AssociatedTypeWitness, AssociatedConformanceWitness, v6);
  v10 = type metadata accessor for ArrayWith2Inline(0, v7, v8, v9);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = &v16[-v13];
  (*(void (**)(uint64_t, uint64_t, double))(a2 + 56))(a1, a2, v12);
  v19 = 0;
  v17 = a1;
  v18 = a2;
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for ArrayWith2Inline<A>, v10);
  Sequence.reduce<A>(_:_:)();
  (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v14, v10);
  return v20;
}

double closure #1 in InterpolatedVector.magnitudeSquared.getter@<D0>(double *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  double v5;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  double result;

  v5 = *a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v8 = swift_getAssociatedConformanceWitness();
  v9 = type metadata accessor for InterpolatedVectorElement(0, AssociatedTypeWitness, AssociatedConformanceWitness, v8);
  result = v5 + *(double *)(a2 + *(int *)(v9 + 44)) * *(double *)(a2 + *(int *)(v9 + 44));
  *a3 = result;
  return result;
}

BOOL closure #1 in InterpolatedVector.merge(_:factor:)(uint64_t a1, double a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v6 = swift_getAssociatedConformanceWitness();
  return fabs(*(double *)(a1
                        + *(int *)(type metadata accessor for InterpolatedVectorElement(0, AssociatedTypeWitness, AssociatedConformanceWitness, v6)+ 44))) >= a2;
}

uint64_t static InterpolatedVector.+= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  char *v26;
  void (*v27)(uint64_t, uint64_t, double);
  char v28;
  uint64_t (*v29)(char *, uint64_t);
  uint64_t result;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(_BYTE *, _QWORD);
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  _QWORD v58[2];
  void (*v59)(_BYTE *, _QWORD);
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t, double);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(char *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE v73[40];

  v69 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = swift_getAssociatedConformanceWitness();
  v66 = AssociatedConformanceWitness;
  v10 = type metadata accessor for InterpolatedVectorElement(0, AssociatedTypeWitness, AssociatedConformanceWitness, v9);
  v67 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v60 = (uint64_t)v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v58 - v13;
  MEMORY[0x24BDAC7A8](v15);
  v70 = v16;
  v71 = (uint64_t)v58 - v17;
  v20 = type metadata accessor for ArrayWith2Inline(0, v16, v18, v19);
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v58[1] = (char *)v58 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)v58 - v25;
  v27 = *(void (**)(uint64_t, uint64_t, double))(a4 + 56);
  v64 = a2;
  v27(a3, a4, v24);
  v68 = (uint64_t (*)(char *, uint64_t))MEMORY[0x23B7C9C04](&protocol conformance descriptor for ArrayWith2Inline<A>, v20);
  v28 = Collection.isEmpty.getter();
  v29 = *(uint64_t (**)(char *, uint64_t))(v21 + 8);
  result = v29(v26, v20);
  if ((v28 & 1) == 0)
  {
    v31 = v69;
    ((void (*)(uint64_t, uint64_t))v27)(a3, a4);
    v32 = Collection.isEmpty.getter();
    v29(v26, v20);
    if ((v32 & 1) != 0)
    {
      v33 = *(_QWORD *)(a3 - 8);
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v31, a3);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))(v31, v64, a3);
    }
    v58[0] = a4;
    ((void (*)(uint64_t, uint64_t))v27)(a3, a4);
    v34 = a3;
    v35 = Collection.count.getter();
    v29(v26, v20);
    v36 = v34;
    v37 = v34;
    v38 = v29;
    v39 = v58[0];
    ((void (*)(uint64_t))v27)(v37);
    v40 = Collection.count.getter();
    v68 = v38;
    result = v38(v26, v20);
    if (v40 < 0)
      goto LABEL_24;
    v63 = v35;
    if (v40)
    {
      v41 = 0;
      v61 = v27;
      v62 = v40;
      while (v41 != v40)
      {
        ((void (*)(uint64_t, uint64_t))v27)(v36, v39);
        v65 = v41;
        ArrayWith2Inline.subscript.getter(v41, v20);
        result = v68(v26, v20);
        v46 = v63;
        if (v63 < 0)
          goto LABEL_23;
        if (v63)
        {
          v47 = 0;
          v48 = *(double *)(v71 + *(int *)(v70 + 44));
          while (1)
          {
            ((void (*)(uint64_t, uint64_t))v27)(v36, v39);
            ArrayWith2Inline.subscript.getter(v47, v20);
            v68(v26, v20);
            if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
              break;
            ++v47;
            (*(void (**)(char *, uint64_t))(v67 + 8))(v14, v70);
            if (v46 == v47)
              goto LABEL_7;
          }
          v49 = v70;
          v50 = *(int *)(v70 + 44);
          v51 = v48 + *(double *)&v14[v50];
          *(double *)&v14[v50] = v51;
          if (fabs(v51) >= 0.000000953674316)
          {
            v55 = v49;
            (*(void (**)(uint64_t, char *, uint64_t))(v67 + 16))(v60, v14, v49);
            v59 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v39 + 72))(v73, v36, v39);
            ArrayWith2Inline.subscript.setter(v60, v47, v20);
            v59(v73, 0);
            v44 = *(void (**)(char *, uint64_t))(v67 + 8);
            v44(v14, v55);
            v45 = v55;
          }
          else
          {
            v72 = v47;
            v59 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v39 + 72))(v73, v36, v39);
            MEMORY[0x23B7C9C04](&protocol conformance descriptor for ArrayWith2Inline<A>, v20);
            v52 = v60;
            RangeReplaceableCollection.remove(at:)();
            v44 = *(void (**)(char *, uint64_t))(v67 + 8);
            v53 = v52;
            v54 = v70;
            v44((char *)v53, v70);
            v59(v73, 0);
            v44(v14, v54);
            v63 = v46 - 1;
            v45 = v54;
          }
          v43 = v71;
        }
        else
        {
LABEL_7:
          v42 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v39 + 72))(v73, v36, v39);
          v43 = v71;
          ArrayWith2Inline.append(_:)(v71, v20);
          v42(v73, 0);
          v27 = v61;
          v44 = *(void (**)(char *, uint64_t))(v67 + 8);
          v45 = v70;
        }
        v41 = v65 + 1;
        result = ((uint64_t (*)(uint64_t, uint64_t))v44)(v43, v45);
        v40 = v62;
        if (v41 == v62)
          goto LABEL_20;
      }
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
      return result;
    }
LABEL_20:
    v56 = ((uint64_t (*)(uint64_t, uint64_t))v27)(v36, v39);
    v57 = MEMORY[0x24BDAC7A8](v56);
    v58[-4] = v36;
    v58[-3] = v39;
    v58[-2] = 0x3EB0000000000000;
    MEMORY[0x23B7C9C04](&protocol conformance descriptor for ArrayWith2Inline<A>, v20, v57);
    RangeReplaceableCollection.filter(_:)();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v39 + 64))(v26, v36, v39);
  }
  return result;
}

uint64_t static InterpolatedVector.-= infix(_:_:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  char *v27;
  void (*v28)(char *, uint64_t);
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t);
  uint64_t result;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void (*v44)(_BYTE *, _QWORD);
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  char *v58;
  void (*v59)(_BYTE *, _QWORD);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t);
  uint64_t (*v67)(char *, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE v72[40];

  v68 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = a3;
  v10 = swift_getAssociatedConformanceWitness();
  v64 = AssociatedConformanceWitness;
  v11 = type metadata accessor for InterpolatedVectorElement(0, AssociatedTypeWitness, AssociatedConformanceWitness, v10);
  v65 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v60 = (uint64_t)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v58 - v14;
  MEMORY[0x24BDAC7A8](v16);
  v69 = v17;
  v70 = (uint64_t)&v58 - v18;
  v21 = type metadata accessor for ArrayWith2Inline(0, v17, v19, v20);
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v58 = (char *)&v58 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v58 - v26;
  v28 = *(void (**)(char *, uint64_t))(a4 + 56);
  v62 = a2;
  v29 = v28;
  ((void (*)(char *, uint64_t, double))v28)(a3, a4, v25);
  v30 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ArrayWith2Inline<A>, v21);
  LOBYTE(a3) = Collection.isEmpty.getter();
  v31 = *(uint64_t (**)(char *, uint64_t))(v22 + 8);
  result = v31(v27, v21);
  if ((a3 & 1) == 0)
  {
    v29(v9, a4);
    v66 = (void (*)(char *, uint64_t))v30;
    v33 = Collection.count.getter();
    v34 = (void (*)(char *, uint64_t))v31;
    v67 = v31;
    v35 = v9;
    v36 = a4;
    v37 = v33;
    v34(v27, v21);
    v38 = v35;
    v39 = v35;
    v40 = v36;
    v29(v39, v36);
    v41 = Collection.count.getter();
    result = v67(v27, v21);
    if (v41 < 0)
    {
LABEL_22:
      __break(1u);
      return result;
    }
    v66 = v29;
    v42 = v38;
    if (v41)
    {
      v43 = 0;
      v61 = v41;
      while (v43 != v41)
      {
        v66(v42, v40);
        v48 = v70;
        v63 = v43;
        ArrayWith2Inline.subscript.getter(v43, v21);
        result = v67(v27, v21);
        v49 = *(int *)(v69 + 44);
        v50 = *(double *)(v48 + v49);
        *(double *)(v48 + v49) = -v50;
        if (v37 < 0)
          goto LABEL_21;
        if (v37)
        {
          v51 = 0;
          while (1)
          {
            v66(v38, v40);
            ArrayWith2Inline.subscript.getter(v51, v21);
            v67(v27, v21);
            if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
              break;
            ++v51;
            (*(void (**)(char *, uint64_t))(v65 + 8))(v15, v69);
            if (v37 == v51)
              goto LABEL_5;
          }
          v52 = v69;
          v53 = *(int *)(v69 + 44);
          v54 = *(double *)&v15[v53];
          *(double *)&v15[v53] = v54 - v50;
          if (vabdd_f64(v54, v50) >= 0.000000953674316)
          {
            (*(void (**)(uint64_t, char *, uint64_t))(v65 + 16))(v60, v15, v52);
            v59 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, char *, uint64_t))(v40 + 72))(v72, v38, v40);
            ArrayWith2Inline.subscript.setter(v60, v51, v21);
            v59(v72, 0);
            v46 = *(void (**)(char *, uint64_t))(v65 + 8);
            v46(v15, v52);
          }
          else
          {
            v71 = v51;
            v59 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, char *, uint64_t))(v40 + 72))(v72, v38, v40);
            MEMORY[0x23B7C9C04](&protocol conformance descriptor for ArrayWith2Inline<A>, v21);
            v55 = v60;
            RangeReplaceableCollection.remove(at:)();
            v46 = *(void (**)(char *, uint64_t))(v65 + 8);
            v46((char *)v55, v52);
            v59(v72, 0);
            v46(v15, v52);
            --v37;
          }
          v47 = v52;
          v45 = v70;
        }
        else
        {
LABEL_5:
          v44 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, char *, uint64_t))(v40 + 72))(v72, v38, v40);
          v45 = v70;
          ArrayWith2Inline.append(_:)(v70, v21);
          v44(v72, 0);
          v46 = *(void (**)(char *, uint64_t))(v65 + 8);
          v47 = v69;
        }
        v43 = v63 + 1;
        result = ((uint64_t (*)(uint64_t, uint64_t))v46)(v45, v47);
        v41 = v61;
        v42 = v38;
        if (v43 == v61)
          goto LABEL_18;
      }
      __break(1u);
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
LABEL_18:
    v56 = ((uint64_t (*)(char *, uint64_t))v66)(v42, v40);
    v57 = MEMORY[0x24BDAC7A8](v56);
    *(&v58 - 4) = v42;
    *(&v58 - 3) = (char *)v40;
    *(&v58 - 2) = (char *)0x3EB0000000000000;
    MEMORY[0x23B7C9C04](&protocol conformance descriptor for ArrayWith2Inline<A>, v21, v57);
    RangeReplaceableCollection.filter(_:)();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v40 + 64))(v27, v42, v40);
  }
  return result;
}

uint64_t static InterpolatedVector.+ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static InterpolatedVector.+ infix(_:_:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BEE2F78], a5);
}

uint64_t static InterpolatedVector.- infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static InterpolatedVector.+ infix(_:_:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BEE2F80], a5);
}

uint64_t static InterpolatedVector.+ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, _QWORD)@<X4>, uint64_t a6@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a6, a1);
  return a5(a6, a2, a3, *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8));
}

uint64_t InterpolatedVectorElement.key.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t InterpolatedVectorElement.key.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*InterpolatedVectorElement.key.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double InterpolatedVectorElement.amount.getter(uint64_t a1)
{
  uint64_t v1;

  return *(double *)(v1 + *(int *)(a1 + 44));
}

uint64_t InterpolatedVectorElement.amount.setter(uint64_t result, double a2)
{
  uint64_t v2;

  *(double *)(v2 + *(int *)(result + 44)) = a2;
  return result;
}

uint64_t (*InterpolatedVectorElement.amount.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

BOOL static InterpolatedVectorElement.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    return 0;
  v10 = type metadata accessor for InterpolatedVectorElement(0, a3, a4, a5);
  return *(double *)(a1 + *(int *)(v10 + 44)) == *(double *)(a2 + *(int *)(v10 + 44));
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance InterpolatedVectorElement<A>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return static InterpolatedVectorElement.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4]);
}

uint64_t sub_234F533C4()
{
  return swift_deallocObject();
}

BOOL partial apply for closure #1 in Interpolatable<>.interpolatableData.setter(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in Interpolatable<>.interpolatableData.setter(a1, *(_QWORD *)(v1 + 16));
}

double partial apply for closure #1 in InterpolatedVector.magnitudeSquared.getter@<D0>(double *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  return closure #1 in InterpolatedVector.magnitudeSquared.getter(a1, a2, a3);
}

BOOL partial apply for closure #1 in InterpolatedVector.merge(_:factor:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in InterpolatedVector.merge(_:factor:)(a1, *(double *)(v1 + 32));
}

uint64_t sub_234F53418@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return Interpolatable<>.interpolatableData.getter(*(_QWORD *)(a2 + a1 - 24), *(_QWORD *)(a2 + a1 - 8), a3);
}

uint64_t sub_234F53448()
{
  return 24;
}

__n128 sub_234F53454(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t dispatch thunk of Interpolatable.interpolate(with:by:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of InterpolatedVector.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of InterpolatedVector.init(elements:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of InterpolatedVector.elements.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of InterpolatedVector.elements.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of InterpolatedVector.elements.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t type metadata completion function for InterpolatedVectorElement()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t assignWithCopy for InterpolatedVectorElement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for InterpolatedVectorElement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for InterpolatedVectorElement(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(void))(v4 + 48))();
    return 0;
  }
  if (((((*(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
    v6 = 2;
  else
    v6 = a2 - v5 + 1;
  if (v6 >= 0x10000)
    v7 = 4;
  else
    v7 = 2;
  if (v6 < 0x100)
    v7 = 1;
  if (v6 >= 2)
    v8 = v7;
  else
    v8 = 0;
  return ((uint64_t (*)(void))((char *)&loc_234F53638 + 4 * byte_2352B4A50[v8]))();
}

void storeEnumTagSinglePayload for InterpolatedVectorElement(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v11 = 0;
    if (a2 <= v7)
      goto LABEL_14;
  }
  else
  {
    v8 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v9 = v8 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_14:
      __asm { BR              X11 }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_234F53778()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_234F53780(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x234F53788);
}

void sub_234F537A4()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_234F537AC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_234F537B4(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v4 + v5) = 0;
  if (!a2)
    JUMPOUT(0x234F537BCLL);
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

BOOL closure #1 in InterpolatedVector.merge(_:factor:)partial apply(uint64_t a1)
{
  return partial apply for closure #1 in InterpolatedVector.merge(_:factor:)(a1);
}

uint64_t static AppearsActiveKey.defaultValue.getter()
{
  return 1;
}

uint64_t EnvironmentValues.appearsActive.getter()
{
  return EnvironmentValues.avoidsOrphans.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.appearsActive.setter(uint64_t a1)
{
  return EnvironmentValues.nearestScrollableAxes.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void (*EnvironmentValues.appearsActive.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    v6 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v6, (uint64_t)v3);
  }
  swift_release_n();
  v3[4] = 0;
  *((_BYTE *)v3 + 40) = v5 & 1;
  return EnvironmentValues.appearsActive.modify;
}

void EnvironmentValues.appearsActive.modify(uint64_t a1, char a2)
{
  EnvironmentValues.allowsTightening.modify(a1, a2, (void (*)(uint64_t *, uint64_t, _QWORD **))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t static WindowEnvironmentKeys.AppearsFocused.defaultValue.getter()
{
  return 1;
}

uint64_t static WindowEnvironmentKeys.AppearsMain.defaultValue.getter()
{
  return 0;
}

uint64_t static WindowEnvironmentKeys.AppearsActive.defaultValue.getter()
{
  return 1;
}

uint64_t static WindowEnvironmentKeys.IsFocused.defaultValue.getter()
{
  return 1;
}

uint64_t static WindowEnvironmentKeys.IsMain.defaultValue.getter()
{
  return 1;
}

uint64_t EnvironmentValues.windowAppearsFocused.getter()
{
  return EnvironmentValues.avoidsOrphans.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.windowAppearsFocused.setter(uint64_t a1)
{
  return EnvironmentValues.nearestScrollableAxes.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void (*EnvironmentValues.windowAppearsFocused.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    v6 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v6, (uint64_t)v3);
  }
  swift_release_n();
  v3[4] = 0;
  *((_BYTE *)v3 + 40) = v5 & 1;
  return EnvironmentValues.windowAppearsFocused.modify;
}

void EnvironmentValues.windowAppearsFocused.modify(uint64_t a1, char a2)
{
  EnvironmentValues.allowsTightening.modify(a1, a2, (void (*)(uint64_t *, uint64_t, _QWORD **))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.windowAppearsMain.getter()
{
  return EnvironmentValues.avoidsOrphans.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.windowAppearsMain.setter(uint64_t a1)
{
  return EnvironmentValues.nearestScrollableAxes.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void (*EnvironmentValues.windowAppearsMain.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    v6 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[4] = 0;
  *((_BYTE *)v3 + 40) = v5 & 1;
  return EnvironmentValues.windowAppearsMain.modify;
}

void EnvironmentValues.windowAppearsMain.modify(uint64_t a1, char a2)
{
  EnvironmentValues.allowsTightening.modify(a1, a2, (void (*)(uint64_t *, uint64_t, _QWORD **))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.windowAppearsActive.getter()
{
  return EnvironmentValues.avoidsOrphans.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.windowAppearsActive.setter(uint64_t a1)
{
  return EnvironmentValues.nearestScrollableAxes.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void (*EnvironmentValues.windowAppearsActive.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    v6 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v6, (uint64_t)v3);
  }
  swift_release_n();
  v3[4] = 0;
  *((_BYTE *)v3 + 40) = v5 & 1;
  return EnvironmentValues.windowAppearsActive.modify;
}

void EnvironmentValues.windowAppearsActive.modify(uint64_t a1, char a2)
{
  EnvironmentValues.allowsTightening.modify(a1, a2, (void (*)(uint64_t *, uint64_t, _QWORD **))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.windowIsFocused.getter()
{
  return EnvironmentValues.avoidsOrphans.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.windowIsFocused.setter(uint64_t a1)
{
  return EnvironmentValues.nearestScrollableAxes.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void (*EnvironmentValues.windowIsFocused.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    v6 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v6, (uint64_t)v3);
  }
  swift_release_n();
  v3[4] = 0;
  *((_BYTE *)v3 + 40) = v5 & 1;
  return EnvironmentValues.windowIsFocused.modify;
}

void EnvironmentValues.windowIsFocused.modify(uint64_t a1, char a2)
{
  EnvironmentValues.allowsTightening.modify(a1, a2, (void (*)(uint64_t *, uint64_t, _QWORD **))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.windowIsMain.getter()
{
  return EnvironmentValues.avoidsOrphans.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t key path getter for EnvironmentValues.appearsActive : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(uint64_t)@<X3>, uint64_t (*a3)(uint64_t, uint64_t *)@<X4>, _BYTE *a4@<X8>)
{
  uint64_t v5;
  char v7;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v5 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v7 = a2(v5);
    swift_release_n();
  }
  else
  {
    v9 = swift_retain_n();
    v7 = a3(v9, &v11);
  }
  result = swift_release_n();
  *a4 = v7 & 1;
  return result;
}

uint64_t EnvironmentValues.windowIsMain.setter(uint64_t a1)
{
  return EnvironmentValues.nearestScrollableAxes.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void (*EnvironmentValues.windowIsMain.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    v6 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v6, (uint64_t)v3);
  }
  swift_release_n();
  v3[4] = 0;
  *((_BYTE *)v3 + 40) = v5 & 1;
  return EnvironmentValues.windowIsMain.modify;
}

void EnvironmentValues.windowIsMain.modify(uint64_t a1, char a2)
{
  EnvironmentValues.allowsTightening.modify(a1, a2, (void (*)(uint64_t *, uint64_t, _QWORD **))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t sub_234F53F14@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return key path getter for EnvironmentValues.appearsActive : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_234F53F38(unsigned __int8 *a1)
{
  return EnvironmentValues.appearsActive.setter(*a1);
}

uint64_t sub_234F53F5C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return key path getter for EnvironmentValues.appearsActive : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_234F53F80(unsigned __int8 *a1)
{
  return EnvironmentValues.windowAppearsFocused.setter(*a1);
}

uint64_t sub_234F53FA4@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return key path getter for EnvironmentValues.appearsActive : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_234F53FC8(unsigned __int8 *a1)
{
  return EnvironmentValues.windowAppearsMain.setter(*a1);
}

uint64_t sub_234F53FEC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return key path getter for EnvironmentValues.appearsActive : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_234F54010(unsigned __int8 *a1)
{
  return EnvironmentValues.windowAppearsActive.setter(*a1);
}

uint64_t sub_234F54034@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return key path getter for EnvironmentValues.appearsActive : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_234F54058(unsigned __int8 *a1)
{
  return EnvironmentValues.windowIsFocused.setter(*a1);
}

uint64_t sub_234F5407C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return key path getter for EnvironmentValues.appearsActive : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_234F540A0(unsigned __int8 *a1)
{
  return EnvironmentValues.windowIsMain.setter(*a1);
}

ValueMetadata *type metadata accessor for AppearsActiveKey()
{
  return &type metadata for AppearsActiveKey;
}

ValueMetadata *type metadata accessor for WindowEnvironmentKeys()
{
  return &type metadata for WindowEnvironmentKeys;
}

ValueMetadata *type metadata accessor for WindowEnvironmentKeys.AppearsFocused()
{
  return &type metadata for WindowEnvironmentKeys.AppearsFocused;
}

ValueMetadata *type metadata accessor for WindowEnvironmentKeys.AppearsMain()
{
  return &type metadata for WindowEnvironmentKeys.AppearsMain;
}

ValueMetadata *type metadata accessor for WindowEnvironmentKeys.AppearsActive()
{
  return &type metadata for WindowEnvironmentKeys.AppearsActive;
}

ValueMetadata *type metadata accessor for WindowEnvironmentKeys.IsFocused()
{
  return &type metadata for WindowEnvironmentKeys.IsFocused;
}

ValueMetadata *type metadata accessor for WindowEnvironmentKeys.IsMain()
{
  return &type metadata for WindowEnvironmentKeys.IsMain;
}

uint64_t outlined destroy of NonGestureEventType?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for NonGestureEventType?();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for NonGestureEventType?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for NonGestureEventType?)
  {
    type metadata accessor for ScrollStateRequest(255, &lazy cache variable for type metadata for NonGestureEventType);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for NonGestureEventType?);
  }
}

uint64_t static Alignment.center.getter()
{
  return static Alignment.center.getter(&one-time initialization token for center, (uint64_t)&static Alignment.center);
}

uint64_t AlignmentGuide.fraction.getter(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = (*(uint64_t (**)(void))(a2 + 16))();
  return AlignmentKey.fraction.getter(v2);
}

BOOL static AlignmentKey.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t static HorizontalAlignment.center.getter()
{
  return static HorizontalAlignment.center.getter(&one-time initialization token for center, (uint64_t)&static HorizontalAlignment.center);
}

uint64_t AlignmentKey.id.getter(unint64_t a1)
{
  _QWORD *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (one-time initialization token for _typeCache != -1)
    swift_once();
  v2 = static AlignmentKey._typeCache;
  v3 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
  swift_retain();
  os_unfair_lock_lock(v3);
  v4 = v2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v3);
  result = swift_release();
  if (a1 < 2)
  {
    __break(1u);
  }
  else if (a1 >> 1 <= *(_QWORD *)(v4 + 16))
  {
    v6 = *(_QWORD *)(v4 + 16 * (a1 >> 1) + 16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v6;
  }
  __break(1u);
  return result;
}

uint64_t AlignmentKey.axis.getter(char a1)
{
  return a1 & 1;
}

BOOL static Alignment.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1 == a3 && a2 == a4;
}

uint64_t static VerticalAlignment.center.getter()
{
  return static HorizontalAlignment.center.getter(&one-time initialization token for center, (uint64_t)&static VerticalAlignment.center);
}

uint64_t HorizontalAlignment.init(_:)(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  _QWORD *v5;
  uint64_t v7;

  if (one-time initialization token for _typeCache != -1)
    swift_once();
  v4 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
  v5 = (_QWORD *)((char *)static AlignmentKey._typeCache + 24);
  swift_retain_n();
  os_unfair_lock_lock(v4);
  closure #1 in AlignmentKey.init(id:axis:)(v5, a1, a2, &v7);
  os_unfair_lock_unlock(v4);
  swift_release();
  swift_release();
  return 2 * v7 + 2;
}

uint64_t VerticalAlignment.init(_:)(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  _QWORD *v5;
  uint64_t v7;

  if (one-time initialization token for _typeCache != -1)
    swift_once();
  v4 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
  v5 = (_QWORD *)((char *)static AlignmentKey._typeCache + 24);
  swift_retain_n();
  os_unfair_lock_lock(v4);
  closure #1 in AlignmentKey.init(id:axis:)(v5, a1, a2, &v7);
  os_unfair_lock_unlock(v4);
  swift_release();
  swift_release();
  return 2 * v7 + 3;
}

double static AlignmentID._combineExplicit(childValue:_:into:)(uint64_t a1, uint64_t a2, double a3)
{
  return static AlignmentID._combineExplicit(childValue:_:into:)(a1, a2, a3);
}

{
  double result;

  if (!a1)
    goto LABEL_4;
  if ((*(_BYTE *)(a2 + 8) & 1) != 0)
  {
    __break(1u);
LABEL_4:
    *(double *)a2 = a3;
  }
  result = (*(double *)a2 * (double)a1 + a3) / ((double)a1 + 1.0);
  *(double *)a2 = result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t static AlignmentID.combineExplicit<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD v18[3];
  char v19;
  char v20;
  uint64_t v21;
  char v22;

  v18[0] = a2;
  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v14 = (char *)v18 - v13;
  v21 = 0;
  v22 = 1;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v9, a1, a3, v12);
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  v15 = 0;
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()();
    if ((v20 & 1) != 0)
      break;
    if ((v19 & 1) == 0)
    {
      (*(void (**)(uint64_t, uint64_t *, _QWORD, uint64_t, double))(a4 + 16))(v15, &v21, v18[0], a4, *(double *)&v18[2]);
      if (__OFADD__(v15++, 1))
      {
        __break(1u);
        break;
      }
    }
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, AssociatedTypeWitness);
  return v21;
}

unint64_t AlignmentKey.init(id:axis:)(uint64_t a1, uint64_t a2, char a3)
{
  os_unfair_lock_s *v6;
  _QWORD *v7;
  uint64_t v9;

  if (one-time initialization token for _typeCache != -1)
    swift_once();
  v6 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
  v7 = (_QWORD *)((char *)static AlignmentKey._typeCache + 24);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  closure #1 in AlignmentKey.init(id:axis:)(v7, a1, a2, &v9);
  os_unfair_lock_unlock(v6);
  swift_release();
  swift_release();
  return (a3 & 1 | (unint64_t)(2 * v9)) + 2;
}

BOOL static VerticalAlignment.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t HorizontalAlignment.combineExplicit<A>(_:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (one-time initialization token for _typeCache != -1)
    swift_once();
  v6 = static AlignmentKey._typeCache;
  v7 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
  swift_retain();
  os_unfair_lock_lock(v7);
  v8 = v6[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v7);
  result = swift_release();
  if (a2 < 2)
  {
    __break(1u);
  }
  else if (a2 >> 1 <= *(_QWORD *)(v8 + 16))
  {
    v10 = v8 + 16 * (a2 >> 1);
    v11 = *(_QWORD *)(v10 + 16);
    v12 = *(_QWORD *)(v10 + 24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return static AlignmentID.combineExplicit<A>(_:)(a1, v11, a3, v12);
  }
  __break(1u);
  return result;
}

uint64_t Alignment.horizontal.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*Alignment.horizontal.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t Alignment.vertical.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t Alignment.vertical.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*Alignment.vertical.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t one-time initialization function for leading()
{
  os_unfair_lock_s *v0;
  _QWORD *v1;
  uint64_t result;
  uint64_t v3;

  if (one-time initialization token for _typeCache != -1)
    swift_once();
  v0 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
  v1 = (_QWORD *)((char *)static AlignmentKey._typeCache + 24);
  swift_retain_n();
  os_unfair_lock_lock(v0);
  closure #1 in AlignmentKey.init(id:axis:)(v1, (uint64_t)&unk_25062CA18, (uint64_t)&protocol witness table for HorizontalAlignment.Leading, &v3);
  os_unfair_lock_unlock(v0);
  swift_release();
  result = swift_release();
  static HorizontalAlignment.leading = 2 * v3 + 2;
  return result;
}

{
  uint64_t v0;
  uint64_t result;

  if (one-time initialization token for leading != -1)
    result = swift_once();
  v0 = static HorizontalAlignment.leading;
  if (one-time initialization token for center != -1)
    result = swift_once();
  static Alignment.leading = v0;
  unk_254265450 = static VerticalAlignment.center;
  return result;
}

uint64_t static HorizontalAlignment.leading.getter()
{
  return static HorizontalAlignment.center.getter(&one-time initialization token for leading, (uint64_t)&static HorizontalAlignment.leading);
}

uint64_t one-time initialization function for center()
{
  os_unfair_lock_s *v0;
  _QWORD *v1;
  uint64_t result;
  uint64_t v3;

  if (one-time initialization token for _typeCache != -1)
    swift_once();
  v0 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
  v1 = (_QWORD *)((char *)static AlignmentKey._typeCache + 24);
  swift_retain_n();
  os_unfair_lock_lock(v0);
  closure #1 in AlignmentKey.init(id:axis:)(v1, (uint64_t)&unk_25062C9D0, (uint64_t)&protocol witness table for HorizontalAlignment.Center, &v3);
  os_unfair_lock_unlock(v0);
  swift_release();
  result = swift_release();
  static HorizontalAlignment.center = 2 * v3 + 2;
  return result;
}

{
  os_unfair_lock_s *v0;
  _QWORD *v1;
  uint64_t result;
  uint64_t v3;

  if (one-time initialization token for _typeCache != -1)
    swift_once();
  v0 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
  v1 = (_QWORD *)((char *)static AlignmentKey._typeCache + 24);
  swift_retain_n();
  os_unfair_lock_lock(v0);
  closure #1 in AlignmentKey.init(id:axis:)(v1, (uint64_t)&unk_2506278F0, (uint64_t)&protocol witness table for VerticalAlignment.Center, &v3);
  os_unfair_lock_unlock(v0);
  swift_release();
  result = swift_release();
  static VerticalAlignment.center = 2 * v3 + 3;
  return result;
}

{
  uint64_t v0;
  uint64_t result;

  if (one-time initialization token for center != -1)
    result = swift_once();
  v0 = static HorizontalAlignment.center;
  if (one-time initialization token for center != -1)
    result = swift_once();
  *(_QWORD *)&static Alignment.center = v0;
  *((_QWORD *)&static Alignment.center + 1) = static VerticalAlignment.center;
  return result;
}

uint64_t one-time initialization function for trailing()
{
  os_unfair_lock_s *v0;
  _QWORD *v1;
  uint64_t result;
  uint64_t v3;

  if (one-time initialization token for _typeCache != -1)
    swift_once();
  v0 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
  v1 = (_QWORD *)((char *)static AlignmentKey._typeCache + 24);
  swift_retain_n();
  os_unfair_lock_lock(v0);
  closure #1 in AlignmentKey.init(id:axis:)(v1, (uint64_t)&unk_25062CA60, (uint64_t)&protocol witness table for HorizontalAlignment.Trailing, &v3);
  os_unfair_lock_unlock(v0);
  swift_release();
  result = swift_release();
  static HorizontalAlignment.trailing = 2 * v3 + 2;
  return result;
}

{
  uint64_t v0;
  uint64_t result;

  if (one-time initialization token for trailing != -1)
    result = swift_once();
  v0 = static HorizontalAlignment.trailing;
  if (one-time initialization token for center != -1)
    result = swift_once();
  static Alignment.trailing = v0;
  *(_QWORD *)algn_254261DD0 = static VerticalAlignment.center;
  return result;
}

uint64_t static HorizontalAlignment.trailing.getter()
{
  return static HorizontalAlignment.center.getter(&one-time initialization token for trailing, (uint64_t)&static HorizontalAlignment.trailing);
}

uint64_t one-time initialization function for leadingText()
{
  os_unfair_lock_s *v0;
  _QWORD *v1;
  uint64_t result;
  uint64_t v3;

  if (one-time initialization token for _typeCache != -1)
    swift_once();
  v0 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
  v1 = (_QWORD *)((char *)static AlignmentKey._typeCache + 24);
  swift_retain_n();
  os_unfair_lock_lock(v0);
  closure #1 in AlignmentKey.init(id:axis:)(v1, (uint64_t)&unk_25062C988, (uint64_t)&protocol witness table for HorizontalAlignment.LeadingText, &v3);
  os_unfair_lock_unlock(v0);
  swift_release();
  result = swift_release();
  static HorizontalAlignment.leadingText = 2 * v3 + 2;
  return result;
}

uint64_t static HorizontalAlignment.leadingText.getter()
{
  return static HorizontalAlignment.center.getter(&one-time initialization token for leadingText, (uint64_t)&static HorizontalAlignment.leadingText);
}

uint64_t one-time initialization function for top()
{
  os_unfair_lock_s *v0;
  _QWORD *v1;
  uint64_t result;
  uint64_t v3;

  if (one-time initialization token for _typeCache != -1)
    swift_once();
  v0 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
  v1 = (_QWORD *)((char *)static AlignmentKey._typeCache + 24);
  swift_retain_n();
  os_unfair_lock_lock(v0);
  closure #1 in AlignmentKey.init(id:axis:)(v1, (uint64_t)&unk_250627860, (uint64_t)&protocol witness table for VerticalAlignment.Top, &v3);
  os_unfair_lock_unlock(v0);
  swift_release();
  result = swift_release();
  static VerticalAlignment.top = 2 * v3 + 3;
  return result;
}

{
  uint64_t v0;
  uint64_t result;

  if (one-time initialization token for center != -1)
    result = swift_once();
  v0 = static HorizontalAlignment.center;
  if (one-time initialization token for top != -1)
    result = swift_once();
  static Alignment.top = v0;
  unk_254264F90 = static VerticalAlignment.top;
  return result;
}

uint64_t static VerticalAlignment.top.getter()
{
  return static HorizontalAlignment.center.getter(&one-time initialization token for top, (uint64_t)&static VerticalAlignment.top);
}

uint64_t one-time initialization function for bottom()
{
  os_unfair_lock_s *v0;
  _QWORD *v1;
  uint64_t result;
  uint64_t v3;

  if (one-time initialization token for _typeCache != -1)
    swift_once();
  v0 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
  v1 = (_QWORD *)((char *)static AlignmentKey._typeCache + 24);
  swift_retain_n();
  os_unfair_lock_lock(v0);
  closure #1 in AlignmentKey.init(id:axis:)(v1, (uint64_t)&unk_2506278A8, (uint64_t)&protocol witness table for VerticalAlignment.Bottom, &v3);
  os_unfair_lock_unlock(v0);
  swift_release();
  result = swift_release();
  static VerticalAlignment.bottom = 2 * v3 + 3;
  return result;
}

{
  uint64_t v0;
  uint64_t result;

  if (one-time initialization token for center != -1)
    result = swift_once();
  v0 = static HorizontalAlignment.center;
  if (one-time initialization token for bottom != -1)
    result = swift_once();
  static Alignment.bottom = v0;
  *(_QWORD *)algn_254263828 = static VerticalAlignment.bottom;
  return result;
}

uint64_t static VerticalAlignment.bottom.getter()
{
  return static HorizontalAlignment.center.getter(&one-time initialization token for bottom, (uint64_t)&static VerticalAlignment.bottom);
}

uint64_t one-time initialization function for firstTextBaseline()
{
  os_unfair_lock_s *v0;
  _QWORD *v1;
  uint64_t result;
  uint64_t v3;

  if (one-time initialization token for _typeCache != -1)
    swift_once();
  v0 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
  v1 = (_QWORD *)((char *)static AlignmentKey._typeCache + 24);
  swift_retain_n();
  os_unfair_lock_lock(v0);
  closure #1 in AlignmentKey.init(id:axis:)(v1, (uint64_t)&unk_2506277E0, (uint64_t)&protocol witness table for VerticalAlignment.FirstTextBaseline, &v3);
  os_unfair_lock_unlock(v0);
  swift_release();
  result = swift_release();
  static VerticalAlignment.firstTextBaseline = 2 * v3 + 3;
  return result;
}

uint64_t static VerticalAlignment.firstTextBaseline.getter()
{
  return static HorizontalAlignment.center.getter(&one-time initialization token for firstTextBaseline, (uint64_t)&static VerticalAlignment.firstTextBaseline);
}

uint64_t one-time initialization function for lastTextBaseline()
{
  os_unfair_lock_s *v0;
  _QWORD *v1;
  uint64_t result;
  uint64_t v3;

  if (one-time initialization token for _typeCache != -1)
    swift_once();
  v0 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
  v1 = (_QWORD *)((char *)static AlignmentKey._typeCache + 24);
  swift_retain_n();
  os_unfair_lock_lock(v0);
  closure #1 in AlignmentKey.init(id:axis:)(v1, (uint64_t)&unk_2506277A8, (uint64_t)&protocol witness table for VerticalAlignment.LastTextBaseline, &v3);
  os_unfair_lock_unlock(v0);
  swift_release();
  result = swift_release();
  static VerticalAlignment.lastTextBaseline = 2 * v3 + 3;
  return result;
}

uint64_t static VerticalAlignment.lastTextBaseline.getter()
{
  return static HorizontalAlignment.center.getter(&one-time initialization token for lastTextBaseline, (uint64_t)&static VerticalAlignment.lastTextBaseline);
}

uint64_t one-time initialization function for _firstTextLineCenter()
{
  os_unfair_lock_s *v0;
  _QWORD *v1;
  uint64_t result;
  uint64_t v3;

  if (one-time initialization token for _typeCache != -1)
    swift_once();
  v0 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
  v1 = (_QWORD *)((char *)static AlignmentKey._typeCache + 24);
  swift_retain_n();
  os_unfair_lock_lock(v0);
  closure #1 in AlignmentKey.init(id:axis:)(v1, (uint64_t)&unk_250627818, (uint64_t)&protocol witness table for VerticalAlignment.FirstTextLineCenter, &v3);
  os_unfair_lock_unlock(v0);
  swift_release();
  result = swift_release();
  static VerticalAlignment._firstTextLineCenter = 2 * v3 + 3;
  return result;
}

uint64_t static VerticalAlignment._firstTextLineCenter.getter()
{
  return static HorizontalAlignment.center.getter(&one-time initialization token for _firstTextLineCenter, (uint64_t)&static VerticalAlignment._firstTextLineCenter);
}

uint64_t static HorizontalAlignment.center.getter(_QWORD *a1, uint64_t a2)
{
  if (*a1 != -1)
    swift_once();
  return *(_QWORD *)a2;
}

uint64_t static Alignment.leading.getter()
{
  return static Alignment.center.getter(&one-time initialization token for leading, (uint64_t)&static Alignment.leading);
}

uint64_t static Alignment.center.getter(_QWORD *a1, uint64_t a2)
{
  if (*a1 != -1)
    swift_once();
  return *(_QWORD *)a2;
}

uint64_t static Alignment.trailing.getter()
{
  return static Alignment.center.getter(&one-time initialization token for trailing, (uint64_t)&static Alignment.trailing);
}

uint64_t static Alignment.top.getter()
{
  return static Alignment.center.getter(&one-time initialization token for top, (uint64_t)&static Alignment.top);
}

uint64_t static Alignment.bottom.getter()
{
  return static Alignment.center.getter(&one-time initialization token for bottom, (uint64_t)&static Alignment.bottom);
}

uint64_t one-time initialization function for topLeading()
{
  uint64_t v0;
  uint64_t result;

  if (one-time initialization token for leading != -1)
    result = swift_once();
  v0 = static HorizontalAlignment.leading;
  if (one-time initialization token for top != -1)
    result = swift_once();
  *(_QWORD *)&static Alignment.topLeading = v0;
  *((_QWORD *)&static Alignment.topLeading + 1) = static VerticalAlignment.top;
  return result;
}

uint64_t static Alignment.topLeading.getter()
{
  return static Alignment.center.getter(&one-time initialization token for topLeading, (uint64_t)&static Alignment.topLeading);
}

uint64_t one-time initialization function for topTrailing()
{
  uint64_t v0;
  uint64_t result;

  if (one-time initialization token for trailing != -1)
    result = swift_once();
  v0 = static HorizontalAlignment.trailing;
  if (one-time initialization token for top != -1)
    result = swift_once();
  static Alignment.topTrailing = v0;
  *(_QWORD *)algn_25425FF98 = static VerticalAlignment.top;
  return result;
}

uint64_t static Alignment.topTrailing.getter()
{
  return static Alignment.center.getter(&one-time initialization token for topTrailing, (uint64_t)&static Alignment.topTrailing);
}

uint64_t one-time initialization function for bottomLeading()
{
  uint64_t v0;
  uint64_t result;

  if (one-time initialization token for leading != -1)
    result = swift_once();
  v0 = static HorizontalAlignment.leading;
  if (one-time initialization token for bottom != -1)
    result = swift_once();
  static Alignment.bottomLeading = v0;
  unk_254261AE0 = static VerticalAlignment.bottom;
  return result;
}

uint64_t static Alignment.bottomLeading.getter()
{
  return static Alignment.center.getter(&one-time initialization token for bottomLeading, (uint64_t)&static Alignment.bottomLeading);
}

uint64_t one-time initialization function for bottomTrailing()
{
  uint64_t v0;
  uint64_t result;

  if (one-time initialization token for trailing != -1)
    result = swift_once();
  v0 = static HorizontalAlignment.trailing;
  if (one-time initialization token for bottom != -1)
    result = swift_once();
  static Alignment.bottomTrailing = v0;
  *(_QWORD *)algn_2561ABC48 = static VerticalAlignment.bottom;
  return result;
}

uint64_t static Alignment.bottomTrailing.getter()
{
  return static Alignment.center.getter(&one-time initialization token for bottomTrailing, (uint64_t)&static Alignment.bottomTrailing);
}

double protocol witness for static AlignmentID.defaultValue(in:) in conformance HorizontalAlignment.Center(uint64_t a1)
{
  return *(double *)(a1 + 16) * 0.5;
}

double protocol witness for static AlignmentID.defaultValue(in:) in conformance HorizontalAlignment.Trailing(uint64_t a1)
{
  return *(double *)(a1 + 16);
}

uint64_t protocol witness for static AlignmentID.defaultValue(in:) in conformance HorizontalAlignment.LeadingText(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static AlignmentID.defaultValue(in:) in conformance HorizontalAlignment.LeadingText(a1, a2, a3, &one-time initialization token for leading, (unint64_t *)&static HorizontalAlignment.leading);
}

double protocol witness for static AlignmentID.defaultValue(in:) in conformance VerticalAlignment.Center(uint64_t a1)
{
  return *(double *)(a1 + 24) * 0.5;
}

void protocol witness for static AlignmentID._combineExplicit(childValue:_:into:) in conformance VerticalAlignment.FirstTextBaseline(double a1, uint64_t a2, uint64_t a3)
{
  double v3;

  v3 = *(double *)a3;
  if (*(_BYTE *)(a3 + 8))
    v3 = INFINITY;
  if (v3 <= a1)
    a1 = v3;
  *(double *)a3 = a1;
  *(_BYTE *)(a3 + 8) = 0;
}

double protocol witness for static AlignmentID.defaultValue(in:) in conformance VerticalAlignment.LastTextBaseline(uint64_t a1)
{
  return *(double *)(a1 + 24);
}

void protocol witness for static AlignmentID._combineExplicit(childValue:_:into:) in conformance VerticalAlignment.LastTextBaseline(double a1, uint64_t a2, uint64_t a3)
{
  double v3;

  v3 = *(double *)a3;
  if (*(_BYTE *)(a3 + 8))
    v3 = -INFINITY;
  if (v3 > a1)
    a1 = v3;
  *(double *)a3 = a1;
  *(_BYTE *)(a3 + 8) = 0;
}

uint64_t protocol witness for static AlignmentID.defaultValue(in:) in conformance VerticalAlignment.FirstTextLineCenter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static AlignmentID.defaultValue(in:) in conformance HorizontalAlignment.LeadingText(a1, a2, a3, &one-time initialization token for center, (unint64_t *)&static VerticalAlignment.center);
}

uint64_t protocol witness for static AlignmentID.defaultValue(in:) in conformance HorizontalAlignment.LeadingText(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, unint64_t *a5)
{
  if (*a4 != -1)
    swift_once();
  return ViewDimensions.subscript.getter(*a5);
}

uint64_t one-time initialization function for _typeCache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v5;

  type metadata accessor for AtomicBuffer<AlignmentKey.TypeCache>(0, a2, a3, a4);
  result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  v5 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(result + 24) = MEMORY[0x24BEE4B00];
  *(_QWORD *)(result + 32) = v5;
  static AlignmentKey._typeCache = (_UNKNOWN *)result;
  return result;
}

unint64_t closure #1 in AlignmentKey.init(id:axis:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;

  v8 = *a1;
  if (*(_QWORD *)(*a1 + 16) && (result = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v10 & 1) != 0))
  {
    v11 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * result);
  }
  else
  {
    v12 = (_QWORD *)a1[1];
    v11 = v12[2];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11 + 1, 1, v12);
    v14 = v12[2];
    v13 = v12[3];
    if (v14 >= v13 >> 1)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v12);
    v12[2] = v14 + 1;
    v15 = &v12[2 * v14];
    v15[4] = a2;
    v15[5] = a3;
    a1[1] = v12;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v17 = *a1;
    *a1 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v11, a2, isUniquelyReferenced_nonNull_native);
    *a1 = v17;
    result = swift_bridgeObjectRelease();
  }
  *a4 = v11;
  return result;
}

SwiftUI::AlignmentKey __swiftcall AlignmentKey.init()()
{
  return 0;
}

BOOL static AlignmentKey.< infix(_:_:)(unint64_t a1, unint64_t a2)
{
  return a2 < a1;
}

uint64_t AlignmentKey.fraction.getter(unint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v17[2];
  __int128 v18;
  __int128 v19;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v2 = static LayoutComputer.defaultValue;
  v3 = *(_QWORD *)algn_25426F938;
  v4 = one-time initialization token for _typeCache;
  swift_retain();
  if (v4 != -1)
    swift_once();
  v5 = static AlignmentKey._typeCache;
  v6 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
  swift_retain();
  os_unfair_lock_lock(v6);
  v7 = v5[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v6);
  result = swift_release();
  if (a1 < 2)
  {
    __break(1u);
  }
  else if (a1 >> 1 <= *(_QWORD *)(v7 + 16))
  {
    v9 = v7 + 16 * (a1 >> 1);
    v10 = *(_QWORD *)(v9 + 16);
    v11 = *(_QWORD *)(v9 + 24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v17[0] = v2;
    v17[1] = v3;
    __asm { FMOV            V0.2D, #1.0 }
    v18 = _Q0;
    v19 = _Q0;
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v11 + 8))(v17, v10, v11);
    return swift_release();
  }
  __break(1u);
  return result;
}

void AlignmentKey.hash(into:)(int a1, Swift::UInt a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int AlignmentKey.hashValue.getter(Swift::UInt a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance AlignmentKey(_QWORD *a1, _QWORD *a2)
{
  return *a2 < *a1;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance AlignmentKey(_QWORD *a1, _QWORD *a2)
{
  return *a1 >= *a2;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance AlignmentKey(_QWORD *a1, _QWORD *a2)
{
  return *a2 >= *a1;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance AlignmentKey(_QWORD *a1, _QWORD *a2)
{
  return *a1 < *a2;
}

unint64_t instantiation function for generic protocol witness table for HorizontalAlignment(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type HorizontalAlignment and conformance HorizontalAlignment();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for VerticalAlignment(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type VerticalAlignment and conformance VerticalAlignment();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AlignmentKey and conformance AlignmentKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AlignmentKey and conformance AlignmentKey;
  if (!lazy protocol witness table cache variable for type AlignmentKey and conformance AlignmentKey)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AlignmentKey, &type metadata for AlignmentKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AlignmentKey and conformance AlignmentKey);
  }
  return result;
}

uint64_t dispatch thunk of static AlignmentID.defaultValue(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of static AlignmentID._combineExplicit(childValue:_:into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

ValueMetadata *type metadata accessor for HorizontalAlignment()
{
  return &type metadata for HorizontalAlignment;
}

ValueMetadata *type metadata accessor for VerticalAlignment()
{
  return &type metadata for VerticalAlignment;
}

ValueMetadata *type metadata accessor for Alignment()
{
  return &type metadata for Alignment;
}

ValueMetadata *type metadata accessor for AlignmentKey()
{
  return &type metadata for AlignmentKey;
}

uint64_t dispatch thunk of AlignmentGuide.key.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

void type metadata accessor for AtomicBuffer<AlignmentKey.TypeCache>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for AtomicBuffer<AlignmentKey.TypeCache>)
  {
    v4 = type metadata accessor for AtomicBuffer(0, (uint64_t)&type metadata for AlignmentKey.TypeCache, a3, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<AlignmentKey.TypeCache>);
  }
}

void *type metadata accessor for HorizontalAlignment.Center()
{
  return &unk_25062C9D0;
}

ValueMetadata *type metadata accessor for AlignmentKey.TypeCache()
{
  return &type metadata for AlignmentKey.TypeCache;
}

void *type metadata accessor for VerticalAlignment.Center()
{
  return &unk_2506278F0;
}

void *type metadata accessor for VerticalAlignment.FirstTextBaseline()
{
  return &unk_2506277E0;
}

void *type metadata accessor for VerticalAlignment.LastTextBaseline()
{
  return &unk_2506277A8;
}

void *type metadata accessor for VerticalAlignment.FirstTextLineCenter()
{
  return &unk_250627818;
}

void *type metadata accessor for HorizontalAlignment.LeadingText()
{
  return &unk_25062C988;
}

void *type metadata accessor for HorizontalAlignment.Leading()
{
  return &unk_25062CA18;
}

void *type metadata accessor for HorizontalAlignment.Trailing()
{
  return &unk_25062CA60;
}

void *type metadata accessor for VerticalAlignment.Top()
{
  return &unk_250627860;
}

void *type metadata accessor for VerticalAlignment.Bottom()
{
  return &unk_2506278A8;
}

uint64_t GraphHost.intern<A>(_:for:id:)(uint64_t a1, Swift::UInt a2, char *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  id v14;
  id v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  _DWORD v19[6];

  v5 = v4;
  v9 = *a3;
  swift_beginAccess();
  v10 = *(_QWORD *)(v4 + 120);
  if (*(_QWORD *)(v10 + 16))
  {
    v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2, v9);
    if ((v12 & 1) != 0)
      return *(unsigned int *)(*(_QWORD *)(v10 + 56) + 4 * v11);
  }
  swift_beginAccess();
  v14 = *(id *)(v5 + 24);
  AGGraphClearUpdate();
  v15 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  closure #1 in GraphHost.intern<A>(_:for:id:)(a1, a4, v19);
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  v13 = v19[0];
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v18 = *(_QWORD *)(v5 + 120);
  *(_QWORD *)(v5 + 120) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v13, a2, v9, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v5 + 120) = v18;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return v13;
}

double GraphHost.Data.init()@<D0>(uint64_t a1@<X8>)
{
  id v2;
  uint64_t (*v3)(void);
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  id v13;
  int v14;
  int v15;
  int v16;
  void *Shared;

  if (one-time initialization token for sharedGraph != -1)
    swift_once();
  Shared = (void *)AGGraphCreateShared();
  v13 = Shared;
  v2 = (id)AGSubgraphCreate();
  AGSubgraphSetCurrent();
  v3 = MEMORY[0x24BE09670];
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for External<Time>, (uint64_t)&type metadata for Time, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BE09670]);
  lazy protocol witness table accessor for type External<PreferenceKeys> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type External<Time> and conformance External<A>, &lazy cache variable for type metadata for External<Time>, (uint64_t)&type metadata for Time);
  v16 = Attribute.init<A>(body:value:flags:update:)();
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for External<EnvironmentValues>, (uint64_t)&type metadata for EnvironmentValues, (uint64_t (*)(_QWORD, uint64_t))v3);
  lazy protocol witness table accessor for type External<PreferenceKeys> and conformance External<A>(&lazy protocol witness table cache variable for type External<EnvironmentValues> and conformance External<A>, &lazy cache variable for type metadata for External<EnvironmentValues>, (uint64_t)&type metadata for EnvironmentValues);
  v15 = Attribute.init<A>(body:value:flags:update:)();
  type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for External<_GraphInputs.Phase>, (uint64_t)&type metadata for _GraphInputs.Phase, (uint64_t (*)(_QWORD, uint64_t))v3);
  lazy protocol witness table accessor for type External<PreferenceKeys> and conformance External<A>(&lazy protocol witness table cache variable for type External<_GraphInputs.Phase> and conformance External<A>, &lazy cache variable for type metadata for External<_GraphInputs.Phase>, (uint64_t)&type metadata for _GraphInputs.Phase);
  v4 = Attribute.init<A>(body:value:flags:update:)();
  v5 = MEMORY[0x24BEE4AF8];
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for External<PreferenceKeys>, (uint64_t)&type metadata for PreferenceKeys, (uint64_t (*)(_QWORD, uint64_t))v3);
  lazy protocol witness table accessor for type External<PreferenceKeys> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type External<PreferenceKeys> and conformance External<A>, (unint64_t *)&lazy cache variable for type metadata for External<PreferenceKeys>, (uint64_t)&type metadata for PreferenceKeys);
  v14 = Attribute.init<A>(body:value:flags:update:)();
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for External<Transaction>, (uint64_t)&type metadata for Transaction, (uint64_t (*)(_QWORD, uint64_t))v3);
  lazy protocol witness table accessor for type External<PreferenceKeys> and conformance External<A>(&lazy protocol witness table cache variable for type External<Transaction> and conformance External<A>, (unint64_t *)&lazy cache variable for type metadata for External<Transaction>, (uint64_t)&type metadata for Transaction);
  v6 = Attribute.init<A>(body:value:flags:update:)();
  v7 = MEMORY[0x24BEE44F0];
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for External<UInt32>, MEMORY[0x24BEE44F0], (uint64_t (*)(_QWORD, uint64_t))v3);
  lazy protocol witness table accessor for type External<PreferenceKeys> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type External<UInt32> and conformance External<A>, (unint64_t *)&lazy cache variable for type metadata for External<UInt32>, v7);
  LODWORD(v3) = Attribute.init<A>(body:value:flags:update:)();
  v8 = Attribute.init<A>(body:value:flags:update:)();
  v9 = specialized Dictionary.init(dictionaryLiteral:)(v5);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
  v10 = swift_allocObject();
  *(_DWORD *)(v10 + 16) = v15;
  *(_QWORD *)(v10 + 24) = v5;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_WORD *)(v10 + 80) = 256;
  *(_QWORD *)(v10 + 88) = v9;
  v11 = AGSubgraphCreate();
  AGSubgraphAddChild();

  AGSubgraphSetCurrent();
  *(_QWORD *)a1 = Shared;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v11;
  *(_WORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = v16;
  *(_DWORD *)(a1 + 32) = v15;
  *(_DWORD *)(a1 + 36) = v4;
  *(_DWORD *)(a1 + 40) = v14;
  *(_DWORD *)(a1 + 44) = v6;
  *(_DWORD *)(a1 + 48) = (_DWORD)v3;
  *(_DWORD *)(a1 + 52) = v8;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = v16;
  *(_QWORD *)(a1 + 72) = v10;
  *(_DWORD *)(a1 + 80) = v4;
  *(_DWORD *)(a1 + 84) = v6;
  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 88) = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 96) = MEMORY[0x24BEE4B08];
  return result;
}

uint64_t GraphHost.init(data:)(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  char v3;
  char v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  uint64_t result;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v2 = *(void **)a1;
  v3 = *(_BYTE *)(a1 + 24);
  v4 = *(_BYTE *)(a1 + 25);
  v17 = *(_OWORD *)(a1 + 28);
  v18 = *(_OWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 44);
  v6 = *(_DWORD *)(a1 + 52);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_DWORD *)(a1 + 64);
  v9 = *(_QWORD *)(a1 + 72);
  v16 = *(_OWORD *)(a1 + 80);
  v10 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(v1 + 120) = MEMORY[0x24BEE4B00];
  *(_BYTE *)(v1 + 128) = 0;
  *(_DWORD *)(v1 + 132) = 0;
  *(_DWORD *)(v1 + 136) = 0;
  *(_DWORD *)(v1 + 140) = -1;
  v11 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 144) = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(v1 + 152) = 0;
  *(_QWORD *)(v1 + 160) = v11;
  *(_WORD *)(v1 + 168) = 1;
  if (!objc_msgSend((id)objc_opt_self(), sel_isMainThread))
    goto LABEL_9;
  *(_QWORD *)(v1 + 16) = v2;
  *(_OWORD *)(v1 + 24) = v18;
  *(_BYTE *)(v1 + 40) = v3;
  *(_BYTE *)(v1 + 41) = v4;
  *(_OWORD *)(v1 + 44) = v17;
  *(_QWORD *)(v1 + 60) = v5;
  *(_DWORD *)(v1 + 68) = v6;
  *(_QWORD *)(v1 + 72) = v7;
  *(_DWORD *)(v1 + 80) = v8;
  *(_QWORD *)(v1 + 88) = v9;
  *(_OWORD *)(v1 + 96) = v16;
  *(_QWORD *)(v1 + 112) = v10;
  if (v2)
  {
    swift_allocObject();
    swift_weakInit();
    swift_retain();
    v12 = v2;
    AGGraphSetUpdateCallback();

    swift_release_n();
    swift_beginAccess();
    v13 = *(void **)(v1 + 16);
    if (v13)
    {
      swift_allocObject();
      swift_weakInit();
      swift_retain();
      v14 = v13;
      AGGraphSetInvalidationCallback();

      swift_release_n();
      if (*(_QWORD *)(v1 + 16))
      {
        AGGraphSetContext();
        return v1;
      }
      goto LABEL_8;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_8:
  __break(1u);
LABEL_9:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t GraphHost.Data.$time.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 28);
}

id GraphHost.rootSubgraph.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(id *)(v0 + 32);
}

Swift::Void __swiftcall GraphHost.instantiateIfNeeded()()
{
  uint64_t v0;
  _BYTE *v1;
  Swift::OpaquePointer *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *rawValue;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;

  v1 = (_BYTE *)v0;
  v2 = (Swift::OpaquePointer *)(v0 + 128);
  swift_beginAccess();
  if ((v1[128] & 1) == 0)
  {
    if (one-time initialization token for waitingForPreviewThunks != -1)
      goto LABEL_24;
    while (waitingForPreviewThunks)
    {
      if (one-time initialization token for blockedGraphHosts != -1)
        swift_once();
      v2 = &blockedGraphHosts;
      swift_beginAccess();
      v3 = *((_QWORD *)blockedGraphHosts._rawValue + 2);
      if (!v3)
        goto LABEL_13;
      if (*((_BYTE **)blockedGraphHosts._rawValue + 4) == v1)
        return;
      if (v3 == 1)
      {
LABEL_13:
        swift_beginAccess();
        rawValue = blockedGraphHosts._rawValue;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        blockedGraphHosts._rawValue = rawValue;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, rawValue[2] + 1, 1, rawValue);
          blockedGraphHosts._rawValue = rawValue;
        }
        v8 = rawValue[2];
        v9 = rawValue[3];
        v10 = v8 + 1;
        if (v8 >= v9 >> 1)
        {
          v15 = rawValue;
          v16 = rawValue[2];
          v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v8 + 1, 1, v15);
          v8 = v16;
          rawValue = v17;
          blockedGraphHosts._rawValue = v17;
        }
        rawValue[2] = v10;
        rawValue[v8 + 4] = v1;
        swift_endAccess();
        return;
      }
      v4 = 5;
      while (1)
      {
        v5 = v4 - 3;
        if (__OFADD__(v4 - 4, 1))
          break;
        if (*((_BYTE **)blockedGraphHosts._rawValue + v4) == v1)
          return;
        ++v4;
        if (v5 == v3)
          goto LABEL_13;
      }
      __break(1u);
LABEL_24:
      swift_once();
    }
    if (((uint64_t)v2->_rawValue & 1) == 0)
    {
      v11 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 192))();
      if (v11)
      {
        v13 = v12;
        ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t (*)(_QWORD, _QWORD), _QWORD, uint64_t, uint64_t, uint64_t))(v13 + 8))(_ViewInputs.base.modify, 0, MEMORY[0x24BEE4AE0] + 8, ObjectType, v13);
        v11 = swift_unknownObjectRelease();
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v1 + 208))(v11);
      v1[128] = 1;
    }
  }
}

Swift::Void __swiftcall GraphHost.startTransactionUpdate()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 152) = 1;
  swift_beginAccess();
  AGGraphGetValue();
  AGGraphSetValue();
}

double GraphHost.Data.time.getter@<D0>(_QWORD *a1@<X8>)
{
  double *Value;
  double result;

  Value = (double *)AGGraphGetValue();
  result = *Value;
  *a1 = *(_QWORD *)Value;
  return result;
}

uint64_t GraphHost.Data.time.setter()
{
  return AGGraphSetValue();
}

uint64_t (*GraphHost.Data.updateSeed.modify(_DWORD *a1))(_DWORD *a1)
{
  uint64_t v1;

  a1[2] = *(_DWORD *)(v1 + 48);
  *a1 = *(_DWORD *)AGGraphGetValue();
  return GraphHost.Data.updateSeed.modify;
}

uint64_t GraphHost.Data.updateSeed.modify(_DWORD *a1)
{
  a1[1] = *a1;
  return AGGraphSetValue();
}

uint64_t GraphHost.finishTransactionUpdate(in:postUpdate:)(uint64_t a1, uint64_t (*a2)(BOOL))
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t result;

  v4 = (uint64_t *)(v2 + 160);
  swift_beginAccess();
  v5 = 0;
  v6 = *(_QWORD *)(v2 + 160);
  do
  {
    *v4 = MEMORY[0x24BEE4AF8];
    v7 = *(_QWORD *)(v6 + 16);
    if (v7)
    {
      v8 = v6 + 40;
      do
      {
        v9 = *(void (**)(uint64_t))(v8 - 8);
        v10 = swift_retain();
        v9(v10);
        swift_release();
        v8 += 16;
        --v7;
      }
      while (v7);
    }
    ++v5;
    swift_bridgeObjectRelease();
    AGSubgraphUpdate();
    result = a2(*(_QWORD *)(*v4 + 16) != 0);
    if (v5 == 8)
      break;
    v6 = *v4;
  }
  while (*(_QWORD *)(*v4 + 16));
  *(_BYTE *)(v2 + 152) = 0;
  return result;
}

Swift::Void __swiftcall GraphHost.uninstantiate()()
{
  GraphHost.uninstantiate(immediately:)(0);
}

uint64_t GraphHost.deinit()
{
  _QWORD *v0;
  int64_t v1;
  uint64_t result;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  GraphHost.invalidate()();
  if (one-time initialization token for blockedGraphHosts != -1)
    swift_once();
  swift_beginAccess();
  swift_retain();
  v1 = specialized MutableCollection._halfStablePartition(isSuffixElement:)((uint64_t)&blockedGraphHosts, (uint64_t)v0);
  result = swift_release();
  v3 = *((_QWORD *)blockedGraphHosts._rawValue + 2);
  if (v3 < v1)
  {
    __break(1u);
  }
  else
  {
    specialized Array.replaceSubrange<A>(_:with:)(v1, v3);
    swift_endAccess();
    v4 = (void *)v0[2];
    v5 = (void *)v0[3];
    v6 = (void *)v0[4];
    swift_bridgeObjectRelease();
    swift_release();

    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (uint64_t)v0;
  }
  return result;
}

uint64_t GraphHost.graphDelegate.getter()
{
  return 0;
}

uint64_t GraphHost.parentHost.getter()
{
  return 0;
}

uint64_t GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)(unint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD), uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int *v18;
  int v19;
  char *v20;
  char v21;
  uint64_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t ObjectType;
  void (*v34)(char *, uint64_t (*)(_QWORD, _QWORD), uint64_t);
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  _QWORD *v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  char v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _BOOL4 v51;
  _BOOL4 v52;
  uint64_t (*v53)(_QWORD, _QWORD);
  uint64_t v54;
  uint64_t v55[3];
  unint64_t v56;
  int v57;
  _QWORD *v58;

  v8 = v7;
  v53 = a3;
  v54 = a7;
  v9 = a6;
  v12 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v50 - v16;
  v19 = *v18;
  v21 = *v20;
  if (one-time initialization token for _lock != -1)
    swift_once();
  v22 = static Update._lock;
  _MovableLockLock(static Update._lock);
  swift_beginAccess();
  if (*(_QWORD *)(v8 + 16))
  {
    v23 = (v21 & 1) != 0 || AGGraphGetCounter() != 0;
    swift_beginAccess();
    *(_BYTE *)(v8 + 168) &= a5 & 1;
    v24 = v8 + 144;
    v25 = swift_beginAccess();
    v26 = *(_QWORD *)(*(_QWORD *)(v8 + 144) + 16);
    if (v26)
    {
      v52 = v23;
      swift_beginAccess();
      v27 = *(_QWORD **)v24;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)v24 = v27;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v27 = specialized _ArrayBuffer._consumeAndCreateNew()(v27);
        *(_QWORD *)v24 = v27;
      }
      if (v26 > v27[2])
      {
        __break(1u);
        goto LABEL_39;
      }
      v29 = &v27[3 * v26];
      if (*((_DWORD *)v29 + 4) == v19)
      {
        v27 = v29 + 1;
        v30 = v29[1];
        if (v30)
        {
          if (a1)
          {
            v55[0] = MEMORY[0x24BEE4AF8];
            swift_retain();
            swift_retain();
            v51 = compareLists(_:_:ignoredTypes:)(v30, a1, (uint64_t)v55);
            v50 = v55[0];
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            if (v51)
            {
LABEL_15:
              AsyncTransaction.append<A>(_:)(v53, v9, v54);
              swift_endAccess();
              if (v52)
              {
LABEL_31:
                v22 = static Update._lock;
                return _MovableLockUnlock(v22);
              }
              swift_beginAccess();
              if (*(_QWORD *)(*(_QWORD *)v24 + 16))
              {
                specialized Array._customRemoveLast()((uint64_t)&v56);
                v12 = (uint64_t)v58;
                if (v58)
                {
                  LODWORD(v17) = v57;
                  v9 = v56;
                }
                else
                {
                  specialized Array.remove(at:)(*(_QWORD *)(*(_QWORD *)v24 + 16) - 1, (uint64_t)&v56);
                  v9 = v56;
                  LODWORD(v17) = v57;
                  v12 = (uint64_t)v58;
                }
                swift_endAccess();
                GraphHost.flushTransactions()();
                swift_beginAccess();
                v27 = *(_QWORD **)(v8 + 144);
                swift_retain();
                swift_bridgeObjectRetain();
                v46 = swift_isUniquelyReferenced_nonNull_native();
                *(_QWORD *)(v8 + 144) = v27;
                if ((v46 & 1) != 0)
                {
LABEL_35:
                  v48 = v27[2];
                  v47 = v27[3];
                  if (v48 >= v47 >> 1)
                  {
                    v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v47 > 1), v48 + 1, 1, v27);
                    *(_QWORD *)v24 = v27;
                  }
                  v27[2] = v48 + 1;
                  v49 = &v27[3 * v48];
                  v49[4] = v9;
                  *((_DWORD *)v49 + 10) = (_DWORD)v17;
                  v49[6] = v12;
                  swift_endAccess();
                  swift_bridgeObjectRelease();
                  swift_release();
                  goto LABEL_31;
                }
LABEL_40:
                v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27[2] + 1, 1, v27);
                *(_QWORD *)v24 = v27;
                goto LABEL_35;
              }
LABEL_39:
              __break(1u);
              goto LABEL_40;
            }
          }
        }
        else if (!a1)
        {
          goto LABEL_15;
        }
      }
      swift_endAccess();
      if (!v52)
        GraphHost.flushTransactions()();
    }
    else if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 192))(v25))
    {
      v32 = v31;
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v32 + 32))(ObjectType, v32);
      swift_unknownObjectRelease();
    }
    v34 = *(void (**)(char *, uint64_t (*)(_QWORD, _QWORD), uint64_t))(v12 + 16);
    v34(v17, v53, v9);
    v56 = a1;
    v57 = v19;
    swift_retain();
    v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
    v58 = v35;
    v37 = v35[2];
    v36 = v35[3];
    if (v37 >= v36 >> 1)
    {
      v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v36 > 1), v37 + 1, 1, v35);
      v58 = v35;
    }
    v34(v14, (uint64_t (*)(_QWORD, _QWORD))v17, v9);
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v37, (uint64_t)v14, (uint64_t *)&v58, v9, v54);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v9);
    v38 = v56;
    v39 = v57;
    swift_beginAccess();
    v40 = *(_QWORD **)v24;
    v41 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v24 = v40;
    if ((v41 & 1) == 0)
    {
      v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40[2] + 1, 1, v40);
      *(_QWORD *)v24 = v40;
    }
    v43 = v40[2];
    v42 = v40[3];
    if (v43 >= v42 >> 1)
    {
      v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v42 > 1), v43 + 1, 1, v40);
      *(_QWORD *)v24 = v40;
    }
    v40[2] = v43 + 1;
    v44 = &v40[3 * v43];
    v44[4] = v38;
    *((_DWORD *)v44 + 10) = v39;
    v44[6] = v35;
    swift_endAccess();
    goto LABEL_31;
  }
  return _MovableLockUnlock(v22);
}

Swift::Void __swiftcall GraphHost.flushTransactions()()
{
  uint64_t v0;
  id *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  void (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t ObjectType;
  uint64_t v26;
  uint64_t v27;
  id *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;

  v1 = (id *)v0;
  swift_beginAccess();
  if (!*(_QWORD *)(v0 + 16))
    return;
  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 144);
  v29 = *(_QWORD *)(v2 + 16);
  if (!v29)
    return;
  v3 = 0;
  v4 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 144) = MEMORY[0x24BEE4AF8];
  v5 = (uint64_t *)(v0 + 160);
  v27 = v2 + 32;
  v28 = (id *)v0;
  v26 = v2;
  do
  {
    if (v3 >= *(_QWORD *)(v2 + 16))
      __break(1u);
    v6 = (uint64_t *)(v27 + 24 * v3);
    v7 = *v6;
    v8 = v6[2];
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    GraphHost.instantiateIfNeeded()();
    if (v7)
      AGGraphSetValue();
    *((_BYTE *)v1 + 152) = 1;
    AGGraphGetValue();
    AGGraphSetValue();
    swift_retain();
    _threadTransactionData();
    v9 = one-time initialization token for v5;
    swift_retain();
    if (v9 != -1)
      swift_once();
    v10 = static Semantics.v5;
    if (one-time initialization token for forced != -1)
      swift_once();
    swift_beginAccess();
    if (byte_25426FABC == 1)
    {
      if ((dyld_program_minos_at_least() & 1) == 0)
        goto LABEL_20;
    }
    else if (dword_25426FAB8 < v10)
    {
      goto LABEL_20;
    }
    if (_threadTransactionData())
    {
      swift_unknownObjectRetain();
      swift_release();
      type metadata accessor for PropertyList.Element();
      swift_dynamicCastClassUnconditional();
    }
    else
    {
      swift_release();
    }
    PropertyList.merge(_:)(v7);
LABEL_20:
    _setThreadTransactionData();
    v11 = *(_QWORD *)(v8 + 16);
    if (v11)
    {
      v30 = v3;
      v12 = (_QWORD *)(v8 + 32);
      swift_bridgeObjectRetain();
      do
      {
        v14 = v12[3];
        v13 = v12[4];
        __swift_project_boxed_opaque_existential_1(v12, v14);
        (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v13);
        v12 += 5;
        --v11;
      }
      while (v11);
      swift_bridgeObjectRelease();
      v3 = v30;
    }
    v31 = v3 + 1;
    _setThreadTransactionData();
    swift_release();
    swift_release();
    v15 = v1[3];
    swift_beginAccess();
    v16 = 0;
    v17 = v1[20];
    do
    {
      *v5 = v4;
      v18 = v17[2];
      if (v18)
      {
        v19 = v17 + 5;
        do
        {
          v20 = (void (*)(uint64_t))*(v19 - 1);
          v21 = swift_retain();
          v20(v21);
          swift_release();
          v19 += 2;
          --v18;
        }
        while (v18);
      }
      ++v16;
      swift_bridgeObjectRelease();
      AGSubgraphUpdate();
      if (v16 == 8)
        break;
      v17 = (_QWORD *)*v5;
    }
    while (*(_QWORD *)(*v5 + 16));
    v1 = v28;
    *((_BYTE *)v28 + 152) = 0;

    if (v7)
      AGGraphSetValue();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    v2 = v26;
    v3 = v31;
  }
  while (v31 != v29);
  v22 = swift_bridgeObjectRelease();
  if ((*((uint64_t (**)(uint64_t))*v28 + 24))(v22))
  {
    v24 = v23;
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v24 + 16))(ObjectType, v24);
    swift_unknownObjectRelease();
  }
  swift_beginAccess();
  *((_BYTE *)v28 + 168) = 1;
}

uint64_t GraphHost.asyncTransaction<A>(_:id:invalidating:style:mayDeferUpdate:)(unint64_t a1, unsigned int *a2, unint64_t a3, char *a4, char a5)
{
  return specialized GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)(a1, *a2, a3, *a4, a5);
}

uint64_t GraphHost.environment.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;

  swift_beginAccess();
  Value = (uint64_t *)AGGraphGetValue();
  v4 = *Value;
  v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();
  return swift_retain();
}

uint64_t GraphHost.setEnvironment(_:)()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;

  swift_beginAccess();
  v1 = (void *)v0[2];
  v2 = (void *)v0[3];
  v3 = (void *)v0[4];
  swift_retain();
  v4 = v1;
  v5 = v2;
  v6 = v3;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  AGGraphSetValue();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t GraphHost.preferenceValue<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *WeakValue;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v7 = *(_QWORD *)(a2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = type metadata accessor for PreferenceList.Value(0, AssociatedTypeWitness, v9, v10);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v20 - v12;
  swift_beginAccess();
  v22 = *(_QWORD *)AGGraphGetValue();
  if ((PreferenceKeys.contains<A>(_:)(a1, a1, v7, v14) & 1) != 0)
  {
    GraphHost.instantiateIfNeeded()();
    swift_beginAccess();
    WeakValue = (uint64_t *)AGGraphGetWeakValue();
    if (WeakValue)
    {
      v16 = *WeakValue;
      swift_retain();
    }
    else
    {
      v16 = 0;
    }
    v21 = v16;
    PreferenceList.subscript.getter(a1, v7, (uint64_t)v13);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a3, v13, AssociatedTypeWitness);
  }
  else
  {
    AGGraphClearUpdate();
    closure #1 in GraphHost.addPreference<A>(_:)(v3, a1, a2, (void (*)(uint64_t, uint64_t, uint64_t))PreferenceKeys.add<A>(_:));
    AGGraphSetUpdate();
    GraphHost.instantiateIfNeeded()();
    swift_beginAccess();
    v17 = (uint64_t *)AGGraphGetWeakValue();
    if (v17)
    {
      v18 = *v17;
      swift_retain();
    }
    else
    {
      v18 = 0;
    }
    v21 = v18;
    PreferenceList.subscript.getter(a1, v7, (uint64_t)v13);
    swift_release();
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a3, v13, AssociatedTypeWitness);
    AGGraphClearUpdate();
    closure #1 in GraphHost.addPreference<A>(_:)(v3, a1, a2, (void (*)(uint64_t, uint64_t, uint64_t))PreferenceKeys.remove<A>(_:));
    return AGGraphSetUpdate();
  }
}

uint64_t specialized GraphDelegate.beginTransaction()()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  id v5;
  Class isa;
  void *v7;
  _QWORD v9[6];

  v0 = swift_allocObject();
  swift_weakInit();
  v1 = (void *)objc_opt_self();
  swift_retain_n();
  if (objc_msgSend(v1, sel_isMainThread))
  {
    swift_retain();
    specialized static NSRunLoop.addObserver(_:)((uint64_t)partial apply for specialized closure #1 in closure #1 in GraphDelegate.beginTransaction(), v0);
    swift_release_n();
  }
  else
  {
    v2 = objc_msgSend((id)objc_opt_self(), sel_mainRunLoop);
    type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<NSRunLoopMode>, (uint64_t (*)(uint64_t))type metadata accessor for NSRunLoopMode, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_23527E860;
    v4 = (void *)*MEMORY[0x24BDBCB80];
    *(_QWORD *)(v3 + 32) = *MEMORY[0x24BDBCB80];
    type metadata accessor for NSRunLoopMode(0);
    v5 = v4;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v9[4] = partial apply for specialized closure #1 in GraphDelegate.beginTransaction();
    v9[5] = v0;
    v9[0] = MEMORY[0x24BDAC760];
    v9[1] = 1107296256;
    v9[2] = thunk for @escaping @callee_guaranteed () -> ();
    v9[3] = &block_descriptor_62;
    v7 = _Block_copy(v9);
    swift_retain();
    swift_release();
    objc_msgSend(v2, sel_performInModes_block_, isa, v7);
    _Block_release(v7);
    swift_release_n();

  }
  return swift_release();
}

Swift::Void __swiftcall GraphDelegate.beginTransaction()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  Class isa;
  void *v12;
  _QWORD v13[6];

  v2 = v1;
  v3 = v0;
  v4 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v5 = (_QWORD *)swift_allocObject();
  v5[2] = v3;
  v5[3] = v2;
  v5[4] = v4;
  v6 = (void *)objc_opt_self();
  swift_retain_n();
  if (objc_msgSend(v6, sel_isMainThread))
  {
    closure #1 in GraphDelegate.beginTransaction()(v4, v3, v2);
    swift_release();
    swift_release();
  }
  else
  {
    v7 = objc_msgSend((id)objc_opt_self(), sel_mainRunLoop);
    type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<NSRunLoopMode>, (uint64_t (*)(uint64_t))type metadata accessor for NSRunLoopMode, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_23527E860;
    v9 = (void *)*MEMORY[0x24BDBCB80];
    *(_QWORD *)(v8 + 32) = *MEMORY[0x24BDBCB80];
    type metadata accessor for NSRunLoopMode(0);
    v10 = v9;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v13[4] = partial apply for closure #1 in GraphDelegate.beginTransaction();
    v13[5] = v5;
    v13[0] = MEMORY[0x24BDAC760];
    v13[1] = 1107296256;
    v13[2] = thunk for @escaping @callee_guaranteed () -> ();
    v13[3] = &block_descriptor_24;
    v12 = _Block_copy(v13);
    swift_retain();
    swift_release();
    objc_msgSend(v7, sel_performInModes_block_, isa, v12);
    _Block_release(v12);
    swift_release();
    swift_release();

  }
  swift_release();
}

uint64_t GraphHost.Data.$updateSeed.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 48);
}

uint64_t GraphHost.continueTransaction(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t result;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;

  v3 = v2;
  if (one-time initialization token for lockAssertionsAreEnabled != -1)
    swift_once();
  if (!lockAssertionsAreEnabled)
    goto LABEL_7;
  if (one-time initialization token for _lock != -1)
    swift_once();
  if (!_MovableLockIsOwner(static Update._lock))
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_7:
    v6 = *(_BYTE *)(v2 + 152);
    v7 = swift_retain_n();
    if ((v6 & 1) != 0)
    {
      v8 = v3;
LABEL_12:
      v11 = swift_allocObject();
      *(_QWORD *)(v11 + 16) = a1;
      *(_QWORD *)(v11 + 24) = a2;
      v12 = (_QWORD *)(v8 + 160);
      swift_beginAccess();
      v13 = *(_QWORD **)(v8 + 160);
      swift_retain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v8 + 160) = v13;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
        *v12 = v13;
      }
      v16 = v13[2];
      v15 = v13[3];
      if (v16 >= v15 >> 1)
      {
        v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v13);
        *v12 = v13;
      }
      v13[2] = v16 + 1;
      v17 = &v13[2 * v16];
      v17[4] = thunk for @escaping @callee_guaranteed () -> ()partial apply;
      v17[5] = v11;
      swift_endAccess();
      return swift_release_n();
    }
    else
    {
      v9 = v3;
      while (1)
      {
        v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 200))(v7);
        swift_release();
        swift_release();
        if (!v8)
          break;
        v10 = *(_BYTE *)(v8 + 152);
        v7 = swift_retain();
        v9 = v8;
        if ((v10 & 1) != 0)
          goto LABEL_12;
      }
      v19 = (_QWORD *)swift_allocObject();
      v19[2] = v3;
      v19[3] = a1;
      v19[4] = a2;
      swift_retain();
      swift_retain();
      specialized static Update.begin()();
      v20 = swift_allocObject();
      *(_QWORD *)(v20 + 16) = partial apply for closure #1 in GraphHost.continueTransaction(_:);
      *(_QWORD *)(v20 + 24) = v19;
      v21 = one-time initialization token for actions;
      swift_retain();
      if (v21 != -1)
        swift_once();
      v22 = static Update.actions;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
      v24 = v22[2];
      v23 = v22[3];
      if (v24 >= v23 >> 1)
        v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, v22);
      v22[2] = v24 + 1;
      v25 = &v22[2 * v24];
      v25[4] = partial apply for thunk for @escaping @callee_guaranteed () -> ();
      v25[5] = v20;
      static Update.actions = v22;
      swift_bridgeObjectRelease();
      static Update.end()();
      return swift_release();
    }
  }
  return result;
}

id GraphHost.graph.getter()
{
  uint64_t v0;
  id result;

  swift_beginAccess();
  result = *(id *)(v0 + 16);
  if (result)
    return result;
  __break(1u);
  return result;
}

uint64_t AGGraphRef.graphHost()()
{
  uint64_t result;

  result = AGGraphGetContext();
  if (result)
    return swift_retain();
  __break(1u);
  return result;
}

uint64_t GraphHost.graphInvalidation(from:)(uint64_t a1)
{
  _BYTE *v1;
  id v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;

  if ((a1 & 0x100000000) == 0)
  {
    v2 = (id)AGGraphGetAttributeGraph();
    result = AGGraphGetContext();
    if (!result)
    {
      __break(1u);
      return result;
    }
    v4 = result;
    swift_retain();

    swift_beginAccess();
    v5 = *(_QWORD *)AGGraphGetValue();
    swift_beginAccess();
    v6 = 0;
    if (v1[168] == 1)
    {
      swift_beginAccess();
      v6 = *(_BYTE *)(v4 + 168);
    }
    v1[168] = v6;
    if (v5)
    {
      swift_retain();
      v7 = _threadTransactionID();
      specialized GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)(v5, v7, 1, 1);
      swift_release();
      return swift_release();
    }
    a1 = swift_release();
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 192))(a1);
  if (result)
  {
    v9 = v8;
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v9 + 16))(ObjectType, v9);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t specialized closure #1 in GraphDelegate.beginTransaction()(uint64_t a1)
{
  swift_retain();
  specialized static NSRunLoop.addObserver(_:)((uint64_t)partial apply for specialized closure #1 in closure #1 in GraphDelegate.beginTransaction(), a1);
  return swift_release();
}

uint64_t closure #1 in GraphDelegate.beginTransaction()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  v6 = (_QWORD *)swift_allocObject();
  v6[2] = a2;
  v6[3] = a3;
  v6[4] = a1;
  swift_retain();
  specialized static NSRunLoop.addObserver(_:)((uint64_t)partial apply for closure #1 in closure #1 in GraphDelegate.beginTransaction(), (uint64_t)v6);
  return swift_release();
}

uint64_t specialized closure #1 in closure #1 in GraphDelegate.beginTransaction()()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;

  if (one-time initialization token for _lock != -1)
    swift_once();
  v0 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v2 = Strong;
    specialized static Update.begin()();
    AGGraphClearUpdate();
    specialized closure #1 in ViewRendererHost.updateViewGraph<A>(body:)(v2);
    AGGraphSetUpdate();
    static Update.end()();
    swift_release();
  }
  static Update.end()();
  return _MovableLockUnlock(v0);
}

uint64_t closure #1 in closure #1 in GraphDelegate.beginTransaction()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (one-time initialization token for _lock != -1)
    swift_once();
  v6 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  closure #1 in closure #1 in closure #1 in GraphDelegate.beginTransaction()(a1, a2, a3);
  static Update.end()();
  return _MovableLockUnlock(v6);
}

uint64_t closure #1 in closure #1 in closure #1 in GraphDelegate.beginTransaction()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;

  v5 = a1 + 16;
  swift_beginAccess();
  result = MEMORY[0x23B7C9E44](v5);
  if (result)
  {
    (*(void (**)(void (*)(), _QWORD, uint64_t, uint64_t, uint64_t))(a3 + 8))(closure #1 in closure #1 in closure #1 in closure #1 in GraphDelegate.beginTransaction(), 0, MEMORY[0x24BEE4AE0] + 8, a2, a3);
    return swift_unknownObjectRelease();
  }
  return result;
}

void closure #1 in closure #1 in closure #1 in closure #1 in GraphDelegate.beginTransaction()()
{
  GraphHost.flushTransactions()();
}

id one-time initialization function for sharedGraph()
{
  id result;

  result = closure #1 in variable initialization expression of static GraphHost.sharedGraph();
  static GraphHost.sharedGraph = (uint64_t)result;
  return result;
}

id closure #1 in variable initialization expression of static GraphHost.sharedGraph()
{
  void *v0;
  char *v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;
  _QWORD v10[6];

  v0 = (void *)AGGraphCreate();
  v1 = getenv("SWIFTUI_ASSERT_LOCKS");
  if (v1 && atoi(v1))
  {
    if (one-time initialization token for threadAssertionTrace != -1)
      swift_once();
    AGGraphSetTrace();
  }
  v2 = swift_allocObject();
  *(_DWORD *)(v2 + 16) = 0;
  type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v3 = static OS_dispatch_queue.main.getter();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v0;
  *(_QWORD *)(v4 + 24) = v2;
  v10[4] = partial apply for closure #1 in closure #1 in variable initialization expression of static GraphHost.sharedGraph;
  v10[5] = v4;
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 1107296256;
  v10[2] = thunk for @escaping @callee_guaranteed (@unowned Int32) -> ();
  v10[3] = &block_descriptor_75_0;
  v5 = _Block_copy(v10);
  v6 = v0;
  swift_retain();
  swift_release();
  swift_beginAccess();
  notify_register_dispatch("com.apple.swiftuitrace.state", (int *)(v2 + 16), v3, v5);
  swift_endAccess();
  _Block_release(v5);

  handleTraceNotification(graph:token:)(v6, *(_DWORD *)(v2 + 16));
  if (one-time initialization token for update != -1)
    swift_once();
  if (AGGraphTraceEventEnabled())
  {
    type metadata accessor for LayoutTrace.Recorder();
    v7 = swift_allocObject();
    *(_BYTE *)(v7 + 24) = 0;
    *(_QWORD *)(v7 + 40) = 0;
    *(_QWORD *)(v7 + 48) = 0;
    *(_QWORD *)(v7 + 32) = 0;
    *(_WORD *)(v7 + 56) = 512;
    *(_QWORD *)(v7 + 16) = v6;
    swift_beginAccess();
    static LayoutTrace.recorder = (_UNKNOWN *)v7;
    v8 = v6;
    swift_release();
  }
  swift_release();
  return v6;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned Int32) -> ()(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

id GraphHost.Data.graph.getter()
{
  id *v0;
  id v1;
  id v2;

  v1 = *v0;
  v2 = *v0;
  return v1;
}

void GraphHost.Data.graph.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

uint64_t (*GraphHost.Data.graph.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

id GraphHost.Data.globalSubgraph.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 8);
}

void GraphHost.Data.globalSubgraph.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = a1;
}

uint64_t (*GraphHost.Data.globalSubgraph.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

id GraphHost.Data.rootSubgraph.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

void GraphHost.Data.rootSubgraph.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
}

uint64_t (*GraphHost.Data.rootSubgraph.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t GraphHost.Data.isRemoved.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t GraphHost.Data.isRemoved.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 24) = result;
  return result;
}

uint64_t (*GraphHost.Data.isRemoved.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t GraphHost.Data.isHiddenForReuse.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 25);
}

uint64_t GraphHost.Data.isHiddenForReuse.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 25) = result;
  return result;
}

uint64_t (*GraphHost.Data.isHiddenForReuse.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*GraphHost.Data.time.modify(uint64_t a1))(_QWORD *a1)
{
  uint64_t v1;

  *(_DWORD *)(a1 + 16) = *(_DWORD *)(v1 + 28);
  *(_QWORD *)a1 = *(_QWORD *)AGGraphGetValue();
  return GraphHost.Data.time.modify;
}

uint64_t GraphHost.Data.time.modify(_QWORD *a1)
{
  a1[1] = *a1;
  return AGGraphSetValue();
}

uint64_t GraphHost.Data.$time.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 28) = result;
  return result;
}

_DWORD *(*GraphHost.Data.$time.modify(uint64_t a1))(_DWORD *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 28);
  return _ViewInputs.transaction.modify;
}

uint64_t GraphHost.Data.environment.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;

  Value = (uint64_t *)AGGraphGetValue();
  v4 = *Value;
  v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();
  return swift_retain();
}

uint64_t key path getter for GraphHost.Data.environment : GraphHost.Data@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;

  Value = (uint64_t *)AGGraphGetValue();
  v4 = *Value;
  v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();
  return swift_retain();
}

uint64_t GraphHost.Data.environment.setter()
{
  AGGraphSetValue();
  swift_release();
  return swift_release();
}

void (*GraphHost.Data.environment.modify(_QWORD *a1))(_QWORD **a1)
{
  uint64_t v1;
  _DWORD *v3;
  uint64_t *Value;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x24uLL);
  *a1 = v3;
  v3[8] = *(_DWORD *)(v1 + 32);
  Value = (uint64_t *)AGGraphGetValue();
  v6 = *Value;
  v5 = Value[1];
  *(_QWORD *)v3 = v6;
  *((_QWORD *)v3 + 1) = v5;
  swift_retain();
  swift_retain();
  return GraphHost.Data.environment.modify;
}

void GraphHost.Data.environment.modify(_QWORD **a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = *a1;
  v2 = (*a1)[1];
  v1[2] = **a1;
  v1[3] = v2;
  AGGraphSetValue();
  swift_release();
  swift_release();
  free(v1);
}

uint64_t GraphHost.Data.$environment.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 32);
}

uint64_t GraphHost.Data.$environment.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 32) = result;
  return result;
}

_DWORD *(*GraphHost.Data.$environment.modify(uint64_t a1))(_DWORD *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 32);
  return _ViewInputs.changedDebugProperties.modify;
}

_DWORD *GraphHost.Data.phase.getter@<X0>(_DWORD *a1@<X8>)
{
  _DWORD *result;

  result = (_DWORD *)AGGraphGetValue();
  *a1 = *result;
  return result;
}

uint64_t GraphHost.Data.phase.setter()
{
  return AGGraphSetValue();
}

uint64_t (*GraphHost.Data.phase.modify(_DWORD *a1))(_DWORD *a1)
{
  uint64_t v1;

  a1[2] = *(_DWORD *)(v1 + 36);
  *a1 = *(_DWORD *)AGGraphGetValue();
  return GraphHost.Data.phase.modify;
}

uint64_t GraphHost.Data.phase.modify(_DWORD *a1)
{
  a1[1] = *a1;
  return AGGraphSetValue();
}

uint64_t GraphHost.Data.$phase.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 36);
}

uint64_t GraphHost.Data.$phase.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 36) = result;
  return result;
}

_DWORD *(*GraphHost.Data.$phase.modify(uint64_t a1))(_DWORD *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 36);
  return GraphHost.Data.$phase.modify;
}

_DWORD *GraphHost.Data.$phase.modify(_DWORD *result)
{
  *(_DWORD *)(*(_QWORD *)result + 36) = result[2];
  return result;
}

uint64_t GraphHost.Data.hostPreferenceKeys.getter@<X0>(_QWORD *a1@<X8>)
{
  *a1 = *(_QWORD *)AGGraphGetValue();
  return swift_bridgeObjectRetain();
}

uint64_t GraphHost.Data.hostPreferenceKeys.setter()
{
  AGGraphSetValue();
  return swift_bridgeObjectRelease();
}

uint64_t (*GraphHost.Data.hostPreferenceKeys.modify(uint64_t a1))(_QWORD *a1)
{
  uint64_t v1;

  *(_DWORD *)(a1 + 16) = *(_DWORD *)(v1 + 40);
  *(_QWORD *)a1 = *(_QWORD *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  return GraphHost.Data.hostPreferenceKeys.modify;
}

uint64_t GraphHost.Data.hostPreferenceKeys.modify(_QWORD *a1)
{
  a1[1] = *a1;
  AGGraphSetValue();
  return swift_bridgeObjectRelease();
}

uint64_t GraphHost.Data.$hostPreferenceKeys.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 40);
}

uint64_t GraphHost.Data.$hostPreferenceKeys.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 40) = result;
  return result;
}

_DWORD *(*GraphHost.Data.$hostPreferenceKeys.modify(uint64_t a1))(_DWORD *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 40);
  return StyledTextResponder.$view.modify;
}

uint64_t GraphHost.Data.transaction.getter()
{
  AGGraphGetValue();
  return swift_retain();
}

uint64_t GraphHost.Data.transaction.setter()
{
  AGGraphSetValue();
  return swift_release();
}

uint64_t (*GraphHost.Data.transaction.modify(uint64_t a1))(_QWORD *a1)
{
  uint64_t v1;

  *(_DWORD *)(a1 + 16) = *(_DWORD *)(v1 + 44);
  *(_QWORD *)a1 = *(_QWORD *)AGGraphGetValue();
  swift_retain();
  return GraphHost.Data.transaction.modify;
}

uint64_t GraphHost.Data.transaction.modify(_QWORD *a1)
{
  a1[1] = *a1;
  AGGraphSetValue();
  return swift_release();
}

uint64_t GraphHost.Data.$transaction.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 44);
}

uint64_t GraphHost.Data.$transaction.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 44) = result;
  return result;
}

_DWORD *(*GraphHost.Data.$transaction.modify(uint64_t a1))(_DWORD *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 44);
  return StyledTextResponder.$styles.modify;
}

uint64_t GraphHost.Data.updateSeed.getter()
{
  return *(unsigned int *)AGGraphGetValue();
}

uint64_t GraphHost.Data.updateSeed.setter()
{
  return AGGraphSetValue();
}

uint64_t GraphHost.Data.$updateSeed.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 48) = result;
  return result;
}

_DWORD *(*GraphHost.Data.$updateSeed.modify(uint64_t a1))(_DWORD *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 48);
  return GraphHost.Data.$updateSeed.modify;
}

_DWORD *GraphHost.Data.$updateSeed.modify(_DWORD *result)
{
  *(_DWORD *)(*(_QWORD *)result + 48) = result[2];
  return result;
}

uint64_t GraphHost.Data.transactionSeed.getter()
{
  return *(unsigned int *)AGGraphGetValue();
}

uint64_t GraphHost.Data.transactionSeed.setter()
{
  return AGGraphSetValue();
}

uint64_t (*GraphHost.Data.transactionSeed.modify(_DWORD *a1))()
{
  uint64_t v1;

  a1[2] = *(_DWORD *)(v1 + 52);
  *a1 = *(_DWORD *)AGGraphGetValue();
  return GraphHost.Data.transactionSeed.modify;
}

uint64_t GraphHost.Data.$transactionSeed.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 52);
}

uint64_t GraphHost.Data.$transactionSeed.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 52) = result;
  return result;
}

_DWORD *(*GraphHost.Data.$transactionSeed.modify(uint64_t a1))(_DWORD *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 52);
  return GraphHost.Data.$transactionSeed.modify;
}

_DWORD *GraphHost.Data.$transactionSeed.modify(_DWORD *result)
{
  *(_DWORD *)(*(_QWORD *)result + 52) = result[2];
  return result;
}

uint64_t GraphHost.Data.inputs.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_DWORD *)(v1 + 64);
  v3 = *(_QWORD *)(v1 + 72);
  v4 = *(_QWORD *)(v1 + 96);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 56);
  *(_DWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 80);
  *(_QWORD *)(a1 + 40) = v4;
  swift_retain();
  swift_retain();
  return swift_bridgeObjectRetain();
}

double GraphHost.Data.inputs.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  double result;
  uint64_t v8;

  v3 = *a1;
  v4 = *((_DWORD *)a1 + 2);
  v5 = a1[2];
  v6 = a1[5];
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_QWORD *)(v1 + 56) = v3;
  *(_DWORD *)(v1 + 64) = v4;
  *(_QWORD *)(v1 + 72) = v5;
  result = *((double *)a1 + 3);
  v8 = a1[4];
  *(double *)(v1 + 80) = result;
  *(_QWORD *)(v1 + 88) = v8;
  *(_QWORD *)(v1 + 96) = v6;
  return result;
}

uint64_t (*GraphHost.Data.inputs.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

Swift::Void __swiftcall GraphHost.Data.invalidate()()
{
  id *v0;
  id v1;

  if (*v0)
  {
    v1 = *v0;
    specialized static Update.begin()();
    AGSubgraphInvalidate();
    AGGraphSetContext();
    AGGraphInvalidate();

    *v0 = 0;
    static Update.end()();

  }
}

id GraphHost.data.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v3;
  void *v4;
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  id v15;

  swift_beginAccess();
  v3 = *(void **)(v1 + 16);
  v4 = *(void **)(v1 + 24);
  v15 = *(id *)(v1 + 32);
  v5 = *(_BYTE *)(v1 + 40);
  v6 = *(_BYTE *)(v1 + 41);
  v7 = *(_DWORD *)(v1 + 68);
  v8 = *(_QWORD *)(v1 + 72);
  v9 = *(_DWORD *)(v1 + 80);
  v10 = *(_QWORD *)(v1 + 88);
  v11 = *(_QWORD *)(v1 + 112);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v15;
  *(_BYTE *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 25) = v6;
  *(_OWORD *)(a1 + 28) = *(_OWORD *)(v1 + 44);
  *(_QWORD *)(a1 + 44) = *(_QWORD *)(v1 + 60);
  *(_DWORD *)(a1 + 52) = v7;
  *(_QWORD *)(a1 + 56) = v8;
  *(_DWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 72) = v10;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(v1 + 96);
  *(_QWORD *)(a1 + 96) = v11;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v12 = v3;
  v13 = v4;
  return v15;
}

uint64_t GraphHost.data.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  char v5;
  int v6;
  uint64_t v7;
  int v8;
  void *v9;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 24);
  v5 = *((_BYTE *)a1 + 25);
  v6 = *((_DWORD *)a1 + 13);
  v7 = a1[7];
  v8 = *((_DWORD *)a1 + 16);
  v11 = a1[9];
  v12 = a1[12];
  swift_beginAccess();
  v9 = *(void **)(v1 + 32);
  v13 = *(void **)(v1 + 24);
  v14 = *(void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = v3;
  *(_OWORD *)(v1 + 24) = *(_OWORD *)(a1 + 1);
  *(_BYTE *)(v1 + 40) = v4;
  *(_BYTE *)(v1 + 41) = v5;
  *(_OWORD *)(v1 + 44) = *(_OWORD *)((char *)a1 + 28);
  *(_QWORD *)(v1 + 60) = *(uint64_t *)((char *)a1 + 44);
  *(_DWORD *)(v1 + 68) = v6;
  *(_QWORD *)(v1 + 72) = v7;
  *(_DWORD *)(v1 + 80) = v8;
  *(_QWORD *)(v1 + 88) = v11;
  *(_OWORD *)(v1 + 96) = *((_OWORD *)a1 + 5);
  *(_QWORD *)(v1 + 112) = v12;
  swift_bridgeObjectRelease();
  swift_release();

  return swift_release();
}

uint64_t (*GraphHost.data.modify())()
{
  swift_beginAccess();
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

BOOL GraphHost.isValid.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 16) != 0;
}

uint64_t GraphHost.graphInputs.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v3;
  uint64_t v4;
  uint64_t v5;

  swift_beginAccess();
  v3 = *(_DWORD *)(v1 + 80);
  v4 = *(_QWORD *)(v1 + 88);
  v5 = *(_QWORD *)(v1 + 112);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 72);
  *(_DWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 96);
  *(_QWORD *)(a1 + 40) = v5;
  swift_retain();
  swift_retain();
  return swift_bridgeObjectRetain();
}

id GraphHost.globalSubgraph.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(id *)(v0 + 24);
}

uint64_t GraphHost.isInstantiated.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 128);
}

uint64_t GraphHost.hostPreferenceValues.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 132);
}

uint64_t GraphHost.hostPreferenceValues.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 132) = a1;
  return result;
}

uint64_t (*GraphHost.hostPreferenceValues.modify())()
{
  swift_beginAccess();
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t GraphHost.lastHostPreferencesSeed.getter@<X0>(_DWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *a1 = *(_DWORD *)(v1 + 140);
  return result;
}

uint64_t GraphHost.lastHostPreferencesSeed.setter(int *a1)
{
  uint64_t v1;
  int v2;
  uint64_t result;

  v2 = *a1;
  result = swift_beginAccess();
  *(_DWORD *)(v1 + 140) = v2;
  return result;
}

uint64_t (*GraphHost.lastHostPreferencesSeed.modify())()
{
  swift_beginAccess();
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

uint64_t GraphHost.mayDeferUpdate.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 168);
}

uint64_t GraphHost.RemovedState.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t GraphHost.RemovedState.init(rawValue:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static GraphHost.RemovedState.unattached.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static GraphHost.RemovedState.hiddenForReuse.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t GraphHost.removedState.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *a1 = *(_BYTE *)(v1 + 169);
  return result;
}

void GraphHost.removedState.setter(char *a1)
{
  uint64_t v1;
  char v2;

  v2 = *a1;
  swift_beginAccess();
  *(_BYTE *)(v1 + 169) = v2;
  GraphHost.updateRemovedState()();
}

Swift::Void __swiftcall GraphHost.updateRemovedState()()
{
  uint64_t v0;
  uint64_t v1;
  unsigned int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  id v8;
  id v9;

  v1 = swift_beginAccess();
  LOBYTE(v2) = *(_BYTE *)(v0 + 169);
  if ((_BYTE)v2)
  {
    v3 = 1;
  }
  else
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 200))(v1);
    if (v4)
    {
      v5 = v4;
      swift_beginAccess();
      v2 = *(unsigned __int8 *)(v5 + 169);
      swift_release();
      v3 = (v2 >> 1) & 1;
    }
    else
    {
      v3 = 0;
      LOBYTE(v2) = 0;
    }
  }
  v6 = v2 & 2;
  v7 = swift_beginAccess();
  if (v3 != *(unsigned __int8 *)(v0 + 40))
  {
    if ((v3 & 1) != 0)
    {
      v8 = *(id *)(v0 + 32);
      AGSubgraphApply();

      v7 = AGSubgraphRemoveChild();
    }
    else
    {
      AGSubgraphAddChild();
      v9 = *(id *)(v0 + 32);
      AGSubgraphApply();

    }
    *(_BYTE *)(v0 + 40) = v3;
  }
  if ((v6 != 0) != *(_BYTE *)(v0 + 41))
  {
    *(_BYTE *)(v0 + 41) = v6 >> 1;
    (*(void (**)(uint64_t))(*(_QWORD *)v0 + 232))(v7);
  }
}

void (*GraphHost.removedState.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return GraphHost.removedState.modify;
}

void GraphHost.removedState.modify(uint64_t a1, char a2)
{
  swift_endAccess();
  if ((a2 & 1) == 0)
    GraphHost.updateRemovedState()();
}

uint64_t GraphHost.__allocating_init(data:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  GraphHost.init(data:)(a1);
  return v2;
}

uint64_t closure #1 in GraphHost.init(data:)()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = (*(uint64_t (**)(void))(*(_QWORD *)result + 192))();
    v3 = v2;
    result = swift_release();
    if (v1)
    {
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t (*)(_QWORD, _QWORD), _QWORD, uint64_t, uint64_t, uint64_t))(v3 + 8))(_ViewInputs.base.modify, 0, MEMORY[0x24BEE4AE0] + 8, ObjectType, v3);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t closure #2 in GraphHost.init(data:)(unsigned int a1)
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    GraphHost.graphInvalidation(from:)(a1);
    return swift_release();
  }
  return result;
}

Swift::Void __swiftcall GraphHost.invalidate()()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  void *v4;
  id v5;

  swift_beginAccess();
  if (*(_BYTE *)(v0 + 128) == 1)
  {
    v1 = swift_beginAccess();
    MEMORY[0x24BDAC7A8](v1);
    v3 = v2;
    AGSubgraphApply();

    *(_BYTE *)(v0 + 128) = 0;
  }
  swift_beginAccess();
  v4 = *(void **)(v0 + 16);
  if (v4)
  {
    v5 = v4;
    specialized static Update.begin()();
    AGSubgraphInvalidate();
    AGGraphSetContext();
    AGGraphInvalidate();

    *(_QWORD *)(v0 + 16) = 0;
    static Update.end()();

  }
  swift_endAccess();
}

uint64_t GraphHost.__deallocating_deinit()
{
  _QWORD *v0;
  int64_t v1;
  uint64_t result;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  GraphHost.invalidate()();
  if (one-time initialization token for blockedGraphHosts != -1)
    swift_once();
  swift_beginAccess();
  swift_retain();
  v1 = specialized MutableCollection._halfStablePartition(isSuffixElement:)((uint64_t)&blockedGraphHosts, (uint64_t)v0);
  result = swift_release();
  v3 = *((_QWORD *)blockedGraphHosts._rawValue + 2);
  if (v3 < v1)
  {
    __break(1u);
  }
  else
  {
    specialized Array.replaceSubrange<A>(_:with:)(v1, v3);
    swift_endAccess();
    v4 = (void *)v0[2];
    v5 = (void *)v0[3];
    v6 = (void *)v0[4];
    swift_bridgeObjectRelease();
    swift_release();

    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_deallocClassInstance();
  }
  return result;
}

BOOL static GraphHost.isUpdating.getter()
{
  if (one-time initialization token for sharedGraph != -1)
    swift_once();
  return AGGraphGetCounter() != 0;
}

uint64_t GraphHost.isUpdating.getter()
{
  uint64_t v0;
  uint64_t result;

  swift_beginAccess();
  result = *(_QWORD *)(v0 + 16);
  if (result)
    return AGGraphGetCounter() != 0;
  return result;
}

Swift::Void __swiftcall GraphHost.setNeedsUpdate(mayDeferUpdate:)(Swift::Bool mayDeferUpdate)
{
  uint64_t v1;

  swift_beginAccess();
  *(_BYTE *)(v1 + 168) &= mayDeferUpdate;
  swift_beginAccess();
  if (*(_QWORD *)(v1 + 16))
    AGGraphSetNeedsUpdate();
}

SwiftUI::GraphHost::ConstantID_optional __swiftcall GraphHost.ConstantID.init(rawValue:)(SwiftUI::GraphHost::ConstantID_optional rawValue)
{
  SwiftUI::GraphHost::ConstantID *v1;
  SwiftUI::GraphHost::ConstantID value;

  value = rawValue.value;
  if (rawValue.value >= SwiftUI_GraphHost_ConstantID_unknownDefault)
    value = SwiftUI_GraphHost_ConstantID_unknownDefault;
  *v1 = value;
  return rawValue;
}

uint64_t GraphHost.ConstantID.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

SwiftUI::GraphHost::ConstantID_optional protocol witness for RawRepresentable.init(rawValue:) in conformance GraphHost.ConstantID(Swift::Int8 *a1)
{
  return GraphHost.ConstantID.init(rawValue:)(*a1);
}

uint64_t closure #1 in GraphHost.intern<A>(_:for:id:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _DWORD v12[4];
  _BYTE v13[16];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a2 - 8);
  v6 = MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v5 + 16))(v8, v6);
  v14 = a2;
  v9 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v8, (uint64_t)partial apply for closure #1 in Attribute.init(value:), (uint64_t)v13, a2, MEMORY[0x24BEE4078], v9, MEMORY[0x24BEE40A8], v10);
  result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, a2);
  *a3 = v12[3];
  return result;
}

uint64_t GraphHost.customMirror.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for Mirror.AncestorRepresentation();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Mirror.DisplayStyle?, (uint64_t (*)(uint64_t))MEMORY[0x24BEE4398], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v10 - v6;
  v11 = v0;
  v10 = MEMORY[0x24BEE4AF8];
  v8 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE43C0], v1);
  type metadata accessor for GraphHost();
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [(label: String?, value: Any)], (uint64_t (*)(uint64_t))type metadata accessor for (label: String?, value: Any), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  lazy protocol witness table accessor for type [(label: String?, value: Any)] and conformance [A]();
  swift_retain();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance GraphHost()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v10[2];

  v1 = type metadata accessor for Mirror.AncestorRepresentation();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for Mirror.DisplayStyle?, (uint64_t (*)(uint64_t))MEMORY[0x24BEE4398], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v10 - v6;
  v10[1] = *v0;
  v10[0] = MEMORY[0x24BEE4AF8];
  v8 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE43C0], v1);
  type metadata accessor for GraphHost();
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [(label: String?, value: Any)], (uint64_t (*)(uint64_t))type metadata accessor for (label: String?, value: Any), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  lazy protocol witness table accessor for type [(label: String?, value: Any)] and conformance [A]();
  swift_retain();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t GraphHost.emptyTransaction(_:)(unint64_t a1)
{
  uint64_t v2;

  v2 = _threadTransactionID();
  return specialized GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)(a1, v2, 1, 1);
}

Swift::Void __swiftcall GraphHost.instantiate()()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;

  v1 = swift_beginAccess();
  if ((v0[128] & 1) == 0)
  {
    v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 192))(v1);
    if (v2)
    {
      v4 = v3;
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t (*)(_QWORD, _QWORD), _QWORD, uint64_t, uint64_t, uint64_t))(v4 + 8))(_ViewInputs.base.modify, 0, MEMORY[0x24BEE4AE0] + 8, ObjectType, v4);
      v2 = swift_unknownObjectRelease();
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v0 + 208))(v2);
    v0[128] = 1;
  }
}

Swift::Void __swiftcall GraphHost.uninstantiate(immediately:)(Swift::Bool immediately)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  void *v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  swift_beginAccess();
  if (*(_BYTE *)(v1 + 128) == 1)
  {
    swift_beginAccess();
    v3 = *(_QWORD *)(v1 + 88);
    swift_beginAccess();
    v4 = *(_DWORD *)(v3 + 16);
    v5 = MEMORY[0x24BEE4AF8];
    v6 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for MutableBox);
    v7 = swift_allocObject();
    *(_DWORD *)(v7 + 16) = v4;
    *(_QWORD *)(v7 + 24) = v5;
    *(_OWORD *)(v7 + 32) = 0u;
    *(_OWORD *)(v7 + 48) = 0u;
    *(_OWORD *)(v7 + 64) = 0u;
    *(_WORD *)(v7 + 80) = 256;
    *(_QWORD *)(v7 + 88) = v6;
    *(_QWORD *)(v1 + 88) = v7;
    swift_endAccess();
    v8 = swift_release();
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 216))(v8);
    v9 = *(id *)(v1 + 32);
    AGSubgraphApply();

    if ((*(_BYTE *)(v1 + 40) & 1) == 0)
      v10 = AGSubgraphRemoveChild();
    MEMORY[0x24BDAC7A8](v10);
    v12 = v11;
    AGSubgraphApply();

    v13 = *(void **)(v1 + 32);
    if (immediately)
    {
      AGSubgraphInvalidate();
    }
    else
    {
      v14 = swift_allocObject();
      *(_QWORD *)(v14 + 16) = v13;
      v15 = v13;
      specialized static Update.begin()();
      v16 = swift_allocObject();
      *(_QWORD *)(v16 + 16) = partial apply for closure #1 in GraphHost.uninstantiate(immediately:);
      *(_QWORD *)(v16 + 24) = v14;
      v17 = one-time initialization token for actions;
      swift_retain();
      if (v17 != -1)
        swift_once();
      v18 = static Update.actions;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
      v19 = v18[2];
      v20 = v18[3];
      v21 = v19 + 1;
      if (v19 >= v20 >> 1)
      {
        v28 = v19 + 1;
        v25 = v18;
        v26 = v18[2];
        v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v19 + 1, 1, v25);
        v19 = v26;
        v21 = v28;
        v18 = v27;
      }
      v18[2] = v21;
      v22 = &v18[2 * v19];
      v22[4] = thunk for @escaping @callee_guaranteed () -> ()partial apply;
      v22[5] = v16;
      static Update.actions = v18;
      swift_bridgeObjectRelease();
      static Update.end()();
      swift_release();
    }
    if (*(_QWORD *)(v1 + 16))
    {
      v23 = AGSubgraphCreate();
      v24 = *(void **)(v1 + 32);
      *(_QWORD *)(v1 + 32) = v23;

      if ((*(_BYTE *)(v1 + 40) & 1) == 0)
        AGSubgraphAddChild();
      *(_BYTE *)(v1 + 128) = 0;
    }
    else
    {
      __break(1u);
    }
  }
}

Swift::Void __swiftcall GraphHost.setTime(_:)(SwiftUI::Time a1)
{
  double *v1;
  uint64_t v2;
  double v3;
  uint64_t v4;

  v3 = *v1;
  swift_beginAccess();
  if (*(double *)AGGraphGetValue() != v3)
  {
    v4 = AGGraphSetValue();
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 224))(v4);
  }
}

uint64_t GraphHost.setPhase(_:)()
{
  swift_beginAccess();
  return AGGraphSetValue();
}

Swift::Void __swiftcall GraphHost.incrementPhase()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;

  swift_beginAccess();
  AGGraphGetValue();
  v1 = AGGraphSetValue();
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 192))(v1))
  {
    v3 = v2;
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v3 + 16))(ObjectType, v3);
    swift_unknownObjectRelease();
  }
}

uint64_t AsyncTransaction.append<A>(_:)(uint64_t (*a1)(_QWORD, _QWORD), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t (*v5)(_QWORD, _QWORD);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  _QWORD *v17;
  _QWORD *v18;
  void (*v19)(char *, uint64_t (*)(_QWORD, _QWORD), uint64_t, double);
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v21;
  char *v22;
  void (*v23)(char *, uint64_t (*)(_QWORD, _QWORD), uint64_t, double);
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t result;
  char v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t (*v35)(_QWORD, _QWORD);
  uint64_t v36;

  v36 = a3;
  v5 = a1;
  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v33 - v10;
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v33 - v14;
  v16 = (uint64_t *)(v3 + 16);
  v17 = *(_QWORD **)(v3 + 16);
  v18 = (_QWORD *)v17[2];
  v19 = *(void (**)(char *, uint64_t (*)(_QWORD, _QWORD), uint64_t, double))(v6 + 16);
  v19((char *)&v33 - v14, v5, a2, v13);
  v35 = v5;
  if (v18)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v16 = (uint64_t)v17;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v17 = specialized _ArrayBuffer._consumeAndCreateNew()(v17);
      *v16 = (uint64_t)v17;
    }
    if ((unint64_t)v18 > v17[2])
    {
      __break(1u);
      goto LABEL_13;
    }
    v21 = &v17[5 * ((_QWORD)v18 - 1)];
    v34 = v16;
    v22 = v11;
    v23 = v19;
    v24 = v8;
    v26 = v21[7];
    v25 = v21[8];
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v21 + 4), v26);
    v27 = v26;
    v8 = v24;
    v19 = v23;
    v11 = v22;
    v16 = v34;
    v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 16))(v15, a2, v36, v27, v25);
    *v16 = (uint64_t)v17;
    v5 = *(uint64_t (**)(_QWORD, _QWORD))(v6 + 8);
    result = v5(v15, a2);
    if ((v28 & 1) != 0)
      return result;
  }
  else
  {
    v5 = *(uint64_t (**)(_QWORD, _QWORD))(v6 + 8);
    v5(v15, a2);
  }
  ((void (*)(char *, uint64_t (*)(_QWORD, _QWORD), uint64_t))v19)(v11, v35, a2);
  v18 = (_QWORD *)*v16;
  v30 = swift_isUniquelyReferenced_nonNull_native();
  *v16 = (uint64_t)v18;
  if ((v30 & 1) == 0)
  {
LABEL_13:
    v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
    *v16 = (uint64_t)v18;
  }
  v32 = v18[2];
  v31 = v18[3];
  if (v32 >= v31 >> 1)
    *v16 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v31 > 1), v32 + 1, 1, v18);
  ((void (*)(char *, char *, uint64_t))v19)(v8, v11, a2);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v32, (uint64_t)v8, v16, a2, v36);
  return v5(v11, a2);
}

uint64_t GraphHost.asyncTransaction(_:id:_:)(unint64_t a1, int *a2, _QWORD *a3, uint64_t a4)
{
  int v7;

  v7 = *a2;
  swift_retain();
  specialized GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)(a1, v7, a3, a4, 1, 1);
  return swift_release();
}

uint64_t CustomGraphMutation.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t closure #1 in GraphHost.continueTransaction(_:)(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  int v5;

  v5 = _threadTransactionID();
  swift_retain();
  specialized GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)(0, v5, a2, a3, 1, 1);
  return swift_release();
}

BOOL GraphHost.hasPendingTransactions.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(*(_QWORD *)(v0 + 144) + 16) != 0;
}

void specialized GraphHost.runTransaction(_:do:)(unint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  unint64_t v13;

  GraphHost.instantiateIfNeeded()();
  if (a1 >= 2)
  {
    swift_beginAccess();
    AGGraphSetValue();
  }
  v13 = a1;
  *(_BYTE *)(a2 + 152) = 1;
  swift_beginAccess();
  AGGraphGetValue();
  AGGraphSetValue();
  v4 = (uint64_t *)(a2 + 160);
  v5 = *(id *)(a2 + 24);
  swift_beginAccess();
  v6 = 0;
  v7 = *(_QWORD *)(a2 + 160);
  v8 = MEMORY[0x24BEE4AF8];
  do
  {
    *v4 = v8;
    v9 = *(_QWORD *)(v7 + 16);
    if (v9)
    {
      v10 = v7 + 40;
      do
      {
        v11 = *(void (**)(uint64_t))(v10 - 8);
        v12 = swift_retain();
        v11(v12);
        swift_release();
        v10 += 16;
        --v9;
      }
      while (v9);
    }
    ++v6;
    swift_bridgeObjectRelease();
    AGSubgraphUpdate();
    if (v6 == 8)
      break;
    v7 = *v4;
  }
  while (*(_QWORD *)(*v4 + 16));
  *(_BYTE *)(a2 + 152) = 0;

  if (v13 >= 2)
    AGGraphSetValue();
}

void GraphHost.runTransaction(_:do:)(unint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v5;
  uint64_t *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  unint64_t v15;

  GraphHost.instantiateIfNeeded()();
  if (a1 >= 2)
  {
    swift_beginAccess();
    AGGraphSetValue();
  }
  v15 = a1;
  *(_BYTE *)(v2 + 152) = 1;
  swift_beginAccess();
  AGGraphGetValue();
  v5 = AGGraphSetValue();
  a2(v5);
  v6 = (uint64_t *)(v2 + 160);
  v7 = *(id *)(v2 + 24);
  swift_beginAccess();
  v8 = 0;
  v9 = *(_QWORD *)(v2 + 160);
  v10 = MEMORY[0x24BEE4AF8];
  do
  {
    *v6 = v10;
    v11 = *(_QWORD *)(v9 + 16);
    if (v11)
    {
      v12 = v9 + 40;
      do
      {
        v13 = *(void (**)(uint64_t))(v12 - 8);
        v14 = swift_retain();
        v13(v14);
        swift_release();
        v12 += 16;
        --v11;
      }
      while (v11);
    }
    ++v8;
    swift_bridgeObjectRelease();
    AGSubgraphUpdate();
    if (v8 == 8)
      break;
    v9 = *v6;
  }
  while (*(_QWORD *)(*v6 + 16));
  *(_BYTE *)(v2 + 152) = 0;

  if (v15 > 1)
    AGGraphSetValue();
}

Swift::Void __swiftcall GraphHost.runTransaction()()
{
  uint64_t v0;

  specialized GraphHost.runTransaction(_:do:)(1uLL, v0);
}

uint64_t GraphHost.needsTransaction.getter()
{
  swift_beginAccess();
  return AGSubgraphIsDirty();
}

void one-time initialization function for pendingGlobalTransactions()
{
  static GraphHost.pendingGlobalTransactions = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
}

uint64_t static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:)(unint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  int *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t result;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t (*v25)(_QWORD, _QWORD);
  void *v26;
  uint64_t v27;
  id v28;
  Class isa;
  void *v30;
  uint64_t v31;
  void (*v32)(_BYTE *, uint64_t (*)(_QWORD, _QWORD), uint64_t);
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  _QWORD *v38;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _BYTE v45[12];
  _BOOL4 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  unint64_t aBlock;
  uint64_t v55;
  uint64_t v56[4];

  v49 = a5;
  v50 = a7;
  v51 = a1;
  v10 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v12 = &v45[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v13);
  v15 = &v45[-v14];
  v52 = *v16;
  if (one-time initialization token for _lock != -1)
    swift_once();
  _MovableLockLock(static Update._lock);
  if (one-time initialization token for pendingGlobalTransactions != -1)
    swift_once();
  swift_beginAccess();
  v17 = *((_QWORD *)static GraphHost.pendingGlobalTransactions + 2);
  if (!v17)
    goto LABEL_17;
  swift_beginAccess();
  v18 = static GraphHost.pendingGlobalTransactions;
  result = swift_isUniquelyReferenced_nonNull_native();
  static GraphHost.pendingGlobalTransactions = v18;
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v18);
    v18 = (_QWORD *)result;
    static GraphHost.pendingGlobalTransactions = (_UNKNOWN *)result;
  }
  if (v17 <= v18[2])
  {
    if (v18[5 * v17 - 1] == a4)
    {
      v20 = (uint64_t)&v18[5 * v17 - 1];
      if (*(_DWORD *)(v20 + 24) == v52)
      {
        v21 = *(_QWORD *)(v20 + 16);
        if (v21)
        {
          if (!v51)
            goto LABEL_16;
          v53 = MEMORY[0x24BEE4AF8];
          v47 = v20 + 16;
          swift_retain();
          v22 = v51;
          swift_retain();
          v46 = compareLists(_:_:ignoredTypes:)(v21, v22, (uint64_t)&v53);
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          if (!v46)
          {
            v18 = static GraphHost.pendingGlobalTransactions;
            goto LABEL_16;
          }
LABEL_28:
          AsyncTransaction.append<A>(_:)(a3, a6, v50);
          swift_endAccess();
          v40 = (_QWORD *)&unk_254270000;
          return _MovableLockUnlock(v40[226]);
        }
        if (!v51)
          goto LABEL_28;
      }
    }
LABEL_16:
    swift_endAccess();
    if (v18[2])
    {
LABEL_20:
      v31 = v10;
      v32 = *(void (**)(_BYTE *, uint64_t (*)(_QWORD, _QWORD), uint64_t))(v10 + 16);
      v32(v15, a3, a6);
      aBlock = v51;
      LODWORD(v55) = v52;
      swift_retain();
      swift_unknownObjectRetain();
      v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
      v56[0] = (uint64_t)v33;
      v35 = v33[2];
      v34 = v33[3];
      v48 = a4;
      if (v35 >= v34 >> 1)
      {
        v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v34 > 1), v35 + 1, 1, v33);
        v56[0] = (uint64_t)v33;
      }
      v32(v12, (uint64_t (*)(_QWORD, _QWORD))v15, a6);
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v35, (uint64_t)v12, v56, a6, v50);
      (*(void (**)(_BYTE *, uint64_t))(v31 + 8))(v15, a6);
      v36 = aBlock;
      v37 = v55;
      swift_beginAccess();
      v38 = static GraphHost.pendingGlobalTransactions;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      static GraphHost.pendingGlobalTransactions = v38;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38[2] + 1, 1, v38);
        static GraphHost.pendingGlobalTransactions = v38;
      }
      v40 = &unk_254270000;
      v42 = v38[2];
      v41 = v38[3];
      if (v42 >= v41 >> 1)
      {
        v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v41 > 1), v42 + 1, 1, v38);
        static GraphHost.pendingGlobalTransactions = v38;
      }
      v38[2] = v42 + 1;
      v43 = &v38[5 * v42];
      v44 = v49;
      v43[4] = v48;
      v43[5] = v44;
      v43[6] = v36;
      *((_DWORD *)v43 + 14) = v37;
      v43[8] = v33;
      swift_endAccess();
      return _MovableLockUnlock(v40[226]);
    }
LABEL_17:
    if (objc_msgSend((id)objc_opt_self(), sel_isMainThread))
    {
      specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0);
    }
    else
    {
      v23 = objc_msgSend((id)objc_opt_self(), sel_mainRunLoop);
      type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<NSRunLoopMode>, (uint64_t (*)(uint64_t))type metadata accessor for NSRunLoopMode, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      v24 = swift_allocObject();
      *(_OWORD *)(v24 + 16) = xmmword_23527E860;
      v25 = a3;
      v26 = (void *)*MEMORY[0x24BDBCB80];
      *(_QWORD *)(v24 + 32) = *MEMORY[0x24BDBCB80];
      type metadata accessor for NSRunLoopMode(0);
      v47 = v10;
      v27 = a4;
      v28 = v26;
      a3 = v25;
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v56[2] = (uint64_t)closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:);
      v56[3] = 0;
      aBlock = MEMORY[0x24BDAC760];
      v55 = 1107296256;
      v56[0] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
      v56[1] = (uint64_t)&block_descriptor_28;
      v30 = _Block_copy(&aBlock);
      swift_release();
      objc_msgSend(v23, sel_performInModes_block_, isa, v30);
      _Block_release(v30);

      a4 = v27;
      v10 = v47;
    }
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

void closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:)()
{
  specialized static NSRunLoop.addObserver(_:)((uint64_t)implicit closure #1 in closure #1 in static GraphHost.globalTransaction<A>(_:id:mutation:hostProvider:), 0);
}

uint64_t GraphHost.addPreference<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GraphHost.addPreference<A>(_:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))PreferenceKeys.add<A>(_:));
}

uint64_t GraphHost.removePreference<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GraphHost.addPreference<A>(_:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))PreferenceKeys.remove<A>(_:));
}

uint64_t GraphHost.addPreference<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  _QWORD *v4;

  AGGraphClearUpdate();
  closure #1 in GraphHost.addPreference<A>(_:)(v4, a2, a3, a4);
  return AGGraphSetUpdate();
}

uint64_t closure #1 in GraphHost.addPreference<A>(_:)(_QWORD *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  id v13;

  swift_beginAccess();
  v7 = (void *)a1[2];
  v6 = (void *)a1[3];
  v8 = (void *)a1[4];
  AGGraphGetValue();
  v9 = *(_QWORD *)(a3 + 8);
  v13 = v7;
  v10 = v6;
  v11 = v8;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  a4(a2, a2, v9);
  AGGraphSetValue();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t GraphHost.preferenceValues()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  GraphHost.instantiateIfNeeded()();
  swift_beginAccess();
  result = AGGraphGetWeakValue();
  if (result)
    result = swift_retain();
  *a1 = result;
  return result;
}

Swift::Bool __swiftcall GraphHost.updatePreferences()()
{
  uint64_t v0;
  uint64_t WeakValue;
  int v2;
  int v3;
  Swift::Bool result;

  swift_beginAccess();
  WeakValue = AGGraphGetWeakValue();
  if (WeakValue && *(_QWORD *)WeakValue)
    v2 = *(_DWORD *)(*(_QWORD *)WeakValue + 28);
  else
    v2 = 0;
  swift_beginAccess();
  v3 = *(_DWORD *)(v0 + 140);
  result = v2 == -1 || v3 == -1 || v2 != v3;
  *(_DWORD *)(v0 + 140) = v2;
  return result;
}

BOOL static _GraphMutation_Style.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void _GraphMutation_Style.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int _GraphMutation_Style.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t InvalidatingGraphMutation.combine<A>(with:)(uint64_t a1)
{
  _DWORD *v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _DWORD v6[4];

  v2 = MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, double))(v4 + 16))((char *)v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  result = swift_dynamicCast();
  if ((_DWORD)result)
    return v6[2] == *v1 && v6[3] == v1[1];
  return result;
}

uint64_t protocol witness for GraphMutation.apply() in conformance InvalidatingGraphMutation()
{
  uint64_t result;

  result = AGWeakAttributeGetAttribute();
  if ((_DWORD)result != *MEMORY[0x24BE096C0])
    return AGGraphInvalidateValue();
  return result;
}

Swift::Void __swiftcall CustomGraphMutation.apply()()
{
  void (**v0)(void);

  (*v0)();
}

uint64_t CustomGraphMutation.combine<A>(with:)()
{
  return 0;
}

uint64_t protocol witness for GraphMutation.apply() in conformance CustomGraphMutation()
{
  uint64_t (**v0)(void);

  return (*v0)();
}

BOOL protocol witness for GraphMutation.combine<A>(with:) in conformance EmptyGraphMutation(uint64_t a1, ValueMetadata *a2)
{
  return specialized EmptyGraphMutation.combine<A>(with:)(a2);
}

const char *one-time initialization function for waitingForPreviewThunks()
{
  const char *result;
  Swift::Bool v1;

  result = getenv("XCODE_RUNNING_FOR_PREVIEWS");
  if (result)
  {
    result = (const char *)atoi(result);
    v1 = (_DWORD)result != 0;
  }
  else
  {
    v1 = 0;
  }
  waitingForPreviewThunks = v1;
  return result;
}

void one-time initialization function for blockedGraphHosts()
{
  blockedGraphHosts._rawValue = (void *)MEMORY[0x24BEE4AF8];
}

Swift::Void __swiftcall __previewThunksHaveFinishedLoading()()
{
  _QWORD *rawValue;
  uint64_t v1;
  char *v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;

  if (one-time initialization token for waitingForPreviewThunks != -1)
    swift_once();
  if (waitingForPreviewThunks)
  {
    waitingForPreviewThunks = 0;
    if (one-time initialization token for blockedGraphHosts != -1)
      swift_once();
    swift_beginAccess();
    rawValue = blockedGraphHosts._rawValue;
    blockedGraphHosts._rawValue = (void *)MEMORY[0x24BEE4AF8];
    v1 = rawValue[2];
    if (v1)
    {
      v2 = (char *)(rawValue + 4);
      do
      {
        v3 = *(uint64_t (**)(uint64_t))(**(_QWORD **)v2 + 192);
        v4 = swift_retain();
        v5 = v3(v4);
        v7 = v6;
        swift_release();
        if (v5)
        {
          ObjectType = swift_getObjectType();
          (*(void (**)(uint64_t, uint64_t))(v7 + 16))(ObjectType, v7);
          swift_unknownObjectRelease();
        }
        v2 += 8;
        --v1;
      }
      while (v1);
    }
    swift_bridgeObjectRelease();
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ConstantKey()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt8 v2;

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ConstantKey()
{
  uint64_t v0;
  Swift::UInt8 v1;

  v1 = *(_BYTE *)(v0 + 8);
  Hasher._combine(_:)(*(_QWORD *)v0);
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ConstantKey()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt8 v2;

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ConstantKey(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 == *(_QWORD *)a2 && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8);
}

double one-time initialization function for threadAssertionTrace()
{
  uint64_t v0;
  double result;

  v0 = swift_slowAlloc();
  result = 0.0;
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_OWORD *)(v0 + 144) = 0u;
  *(_OWORD *)(v0 + 160) = 0u;
  *(_OWORD *)(v0 + 176) = 0u;
  *(_OWORD *)(v0 + 192) = 0u;
  *(_OWORD *)(v0 + 208) = 0u;
  *(_OWORD *)(v0 + 224) = 0u;
  *(_OWORD *)(v0 + 240) = 0u;
  *(_OWORD *)(v0 + 256) = 0u;
  *(_OWORD *)(v0 + 272) = 0u;
  *(_OWORD *)(v0 + 288) = 0u;
  *(_OWORD *)(v0 + 304) = 0u;
  *(_OWORD *)(v0 + 320) = 0u;
  *(_QWORD *)(v0 + 24) = @objc closure #1 in closure #1 in variable initialization expression of threadAssertionTrace;
  *(_QWORD *)(v0 + 40) = @objc closure #2 in closure #1 in variable initialization expression of threadAssertionTrace;
  *(_QWORD *)(v0 + 56) = @objc closure #3 in closure #1 in variable initialization expression of threadAssertionTrace;
  *(_QWORD *)(v0 + 72) = @objc closure #4 in closure #1 in variable initialization expression of threadAssertionTrace;
  *(_QWORD *)(v0 + 88) = @objc closure #5 in closure #1 in variable initialization expression of threadAssertionTrace;
  *(_QWORD *)(v0 + 136) = @objc closure #6 in closure #1 in variable initialization expression of threadAssertionTrace;
  *(_QWORD *)(v0 + 144) = @objc closure #7 in closure #1 in variable initialization expression of threadAssertionTrace;
  *(_QWORD *)(v0 + 152) = @objc closure #8 in closure #1 in variable initialization expression of threadAssertionTrace;
  *(_QWORD *)(v0 + 160) = @objc closure #9 in closure #1 in variable initialization expression of threadAssertionTrace;
  *(_QWORD *)(v0 + 168) = @objc closure #10 in closure #1 in variable initialization expression of threadAssertionTrace;
  *(_QWORD *)(v0 + 192) = @objc closure #11 in closure #1 in variable initialization expression of threadAssertionTrace;
  *(_QWORD *)(v0 + 240) = @objc closure #12 in closure #1 in variable initialization expression of threadAssertionTrace;
  *(_QWORD *)(v0 + 248) = @objc closure #13 in closure #1 in variable initialization expression of threadAssertionTrace;
  *(_QWORD *)(v0 + 256) = @objc closure #14 in closure #1 in variable initialization expression of threadAssertionTrace;
  *(_QWORD *)(v0 + 264) = @objc closure #15 in closure #1 in variable initialization expression of threadAssertionTrace;
  *(_QWORD *)(v0 + 272) = @objc closure #16 in closure #1 in variable initialization expression of threadAssertionTrace;
  threadAssertionTrace = v0;
  return result;
}

void @objc closure #1 in closure #1 in variable initialization expression of threadAssertionTrace(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;
  BOOL IsOwner;
  id v5;
  id v6;

  v2 = one-time initialization token for lockAssertionsAreEnabled;
  v3 = a2;
  if (v2 != -1)
  {
    v6 = v3;
    swift_once();
    v3 = v6;
  }
  if (!lockAssertionsAreEnabled)
    goto LABEL_7;
  v5 = v3;
  if (one-time initialization token for _lock != -1)
    swift_once();
  IsOwner = _MovableLockIsOwner(static Update._lock);
  v3 = v5;
  if (!IsOwner)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_7:

  }
}

void @objc closure #12 in closure #1 in variable initialization expression of threadAssertionTrace()
{
  if (one-time initialization token for lockAssertionsAreEnabled != -1)
    swift_once();
  if (lockAssertionsAreEnabled)
  {
    if (one-time initialization token for _lock != -1)
      swift_once();
    if (!_MovableLockIsOwner(static Update._lock))
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
}

void @objc closure #2 in closure #1 in variable initialization expression of threadAssertionTrace()
{
  if (one-time initialization token for lockAssertionsAreEnabled != -1)
    swift_once();
  if (lockAssertionsAreEnabled)
  {
    if (one-time initialization token for _lock != -1)
      swift_once();
    if (!_MovableLockIsOwner(static Update._lock))
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = static Hasher._hash(seed:_:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, (uint64_t (*)(uint64_t))type metadata accessor for AGSubgraphRef, &lazy protocol witness table cache variable for type AGSubgraphRef and conformance AGSubgraphRef, (uint64_t)&protocol conformance descriptor for AGSubgraphRef);
}

{
  uint64_t v2;

  v2 = static Hasher._hash(seed:_:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  type metadata accessor for URL();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0];
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
  v3 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3, v2, &lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x24BDCDB00]);
}

{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
}

{
  uint64_t v2;

  type metadata accessor for CodingUserInfoKey();
  v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  type metadata accessor for UUID();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58];
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
  v3 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3, v2, &lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x24BDCEA98]);
}

{
  Swift::UInt v2;
  Swift::UInt v3;
  Swift::Int v4;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(_QWORD *)a1);
  Hasher._combine(_:)(*(_QWORD *)(a1 + 8));
  Hasher._combine(_:)(*(_QWORD *)(a1 + 16));
  if (*(_BYTE *)(a1 + 32) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 24);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
  }
  if (*(_BYTE *)(a1 + 48) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 40);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }
  v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt a1, Swift::UInt8 a2)
{
  Swift::Int v4;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(a2);
  v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

{
  Swift::Int v4;

  Hasher.init(_seed:)();
  if (a1)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(a1);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(a2);
  v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  Swift::Int v8;

  v6 = HIDWORD(a1);
  v7 = HIDWORD(a2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(a3);
  Hasher._combine(_:)(BYTE4(a3));
  Hasher._combine(_:)(BYTE5(a3) & 1);
  v8 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, a3 & 0x1FFFFFFFFFFLL, v8);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;

  Hasher.init(_seed:)();
  String.hash(into:)();
  v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt32 a1)
{
  Swift::Int v2;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt64 a1, uint64_t a2)
{
  Swift::Int v4;
  _BYTE v6[72];

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 88))(v6);
  v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(char a1)
{
  char v2;
  Swift::Int v3;

  v2 = a1 & 1;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  v3 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v2, v3);
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, (void (*)(uint64_t))MEMORY[0x24BEE4318], (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, (void (*)(_BYTE *))NamedImage.VectorKey.hash(into:), (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, (void (*)(_BYTE *))NamedImage.BitmapKey.hash(into:), (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, (void (*)(uint64_t))MEMORY[0x24BEE42F8], (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

{
  Swift::Int v2;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned __int8 a1)
{
  Swift::Int v2;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt a1, unsigned int a2, Swift::UInt a3)
{
  Swift::UInt v6;
  Swift::Int v7;

  v6 = a2 & 1;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)((a2 >> 8) & 1);
  Hasher._combine(_:)(HIWORD(a2) & 1);
  Hasher._combine(_:)(a3);
  v7 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2 & 0x10101, a3, v7);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned int a1, uint64_t a2, uint64_t a3, void *a4)
{
  Swift::UInt v8;
  id v9;
  Swift::Int v10;

  v8 = a1 & 1;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)((a1 >> 8) & 1);
  Hasher._combine(_:)(HIWORD(a1) & 1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (a4)
  {
    Hasher._combine(_:)(1u);
    v9 = a4;
    NSObject.hash(into:)();

  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v10 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1 & 0x10101, a2, a3, a4, v10);
}

void specialized __RawDictionaryStorage.find<A>(_:)(char a1)
{
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

unint64_t sub_234F5C8CC()
{
  uint64_t v0;
  Swift::Int v1;

  Hasher._combine(_:)(1uLL);
  Hasher._combine(_:)(BYTE1(v0));
  v1 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v0, v1);
}

void sub_234F5C954()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3, uint64_t a4)
{
  Swift::Int v8;

  Hasher.init(_seed:)();
  a2(0);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(a3, a2, a4);
  _CFObject.hash(into:)();
  v8 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v8, a2, a3, a4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(void *a1)
{
  id v2;
  Swift::Int v3;

  Hasher.init(_seed:)();
  if (a1)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFStringRef(0);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
    v2 = a1;
    _CFObject.hash(into:)();

  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v3 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)((uint64_t)a1, v3);
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, void (*a2)(_BYTE *), uint64_t (*a3)(uint64_t, Swift::Int))
{
  Swift::Int v5;
  _BYTE v8[72];

  Hasher.init(_seed:)();
  a2(v8);
  v5 = Hasher._finalize()();
  return a3(a1, v5);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(int a1)
{
  Swift::Int v2;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(_QWORD *a1, unint64_t a2)
{
  unint64_t v4;
  Swift::Int v5;

  v4 = HIDWORD(a2);
  Hasher.init(_seed:)();
  Material.ResolvedMaterial.hash(into:)();
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(BYTE5(a2));
  v5 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2 & 0xFFFFFFFFFFFFLL, v5);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(_QWORD *a1, int a2)
{
  Swift::Int v4;

  Hasher.init(_seed:)();
  Material.ResolvedMaterial.hash(into:)();
  v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt a1)
{
  Swift::Int v2;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(double a1)
{
  uint64_t v2;

  v2 = static Hasher._hash(seed:_:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v2, a1);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt a1, Swift::UInt a2)
{
  Swift::Int v4;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(a2);
  v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

{
  Swift::Int v4;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(a2);
  v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  Swift::Int v6;

  v4 = HIDWORD(a1);
  v5 = HIDWORD(a2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v5);
  v6 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v6);
}

{
  uint64_t v4;
  Swift::Int v5;

  Hasher.init(_seed:)();
  v4 = (a1 >> 38) & 3;
  if ((_DWORD)v4)
  {
    if ((_DWORD)v4 != 1)
      __asm { BR              X10 }
    Hasher._combine(_:)(6uLL);
    ContentTransition.NumericTextConfiguration.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(5uLL);
    Hasher._combine(_:)(a1 & 1);
  }
  if ((a2 & 0xFF000000) == 0x2000000)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)((a2 >> 24) & 1);
  }
  if ((a2 & 0xFF00000000) == 0x300000000)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(BYTE4(a2));
  }
  Hasher._combine(_:)(BYTE5(a2) & 1);
  v5 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2 & 0x1FFFFFFFFFFLL, v5);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unint64_t a1, unint64_t a2, Swift::UInt16 a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  Swift::UInt64 v10;
  Swift::Int v11;

  v8 = HIDWORD(a1);
  v9 = HIDWORD(a2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(a3);
  if ((*(_QWORD *)&a4 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v10 = *(_QWORD *)&a4;
  else
    v10 = 0;
  Hasher._combine(_:)(v10);
  v11 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, a3, v11, a4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned int a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = MEMORY[0x23B7C7624](*(_QWORD *)(v1 + 40), a1, 4);
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3);
}

{
  uint64_t v1;
  uint64_t v3;

  v3 = MEMORY[0x23B7C7624](*(_QWORD *)(v1 + 40), a1, 4);
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  char v6;
  char v7;
  Swift::Int v8;

  v6 = a2 & 1;
  v7 = a4 & 1;
  Hasher.init(_seed:)();
  _ProposedSize.hash(into:)();
  v8 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v6, a3, v7, v8);
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, void (*a2)(uint64_t), uint64_t (*a3)(uint64_t, Swift::Int))
{
  Swift::Int v5;

  Hasher.init(_seed:)();
  a2(a1);
  v5 = Hasher._finalize()();
  return a3(a1, v5);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unint64_t a1, unint64_t a2, char a3)
{
  unint64_t v5;
  unint64_t v6;
  int v7;
  Swift::Int v8;

  v5 = HIDWORD(a1);
  v6 = HIDWORD(a2);
  v7 = a3 & 1;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  v8 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v7, v8);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt64 a1, Swift::UInt a2)
{
  Swift::Int v4;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(a2);
  v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt8 a1)
{
  Swift::Int v2;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unint64_t a1, uint64_t a2)
{
  unint64_t v4;
  void (*v5)(_BYTE *);
  Swift::Int v6;
  _BYTE v8[72];

  v4 = HIDWORD(a1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(v4);
  if (a2)
  {
    Hasher._combine(_:)(1u);
    v5 = *(void (**)(_BYTE *))(*(_QWORD *)a2 + 112);
    swift_retain();
    v5(v8);
    swift_release();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v6 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v6);
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *result;
  unint64_t v19;
  char v20;

  v4 = v3;
  v8 = *v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = *(_QWORD *)(v8 + 24);
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_OWORD *)(*(_QWORD *)(v16 + 56) + 32 * v10);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
        return outlined init with take of Any(a1, v17);
      }
      return (_OWORD *)specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return (_OWORD *)specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *result;
  unint64_t v19;
  char v20;

  v4 = v3;
  v8 = *v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = *(_QWORD *)(v8 + 24);
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_OWORD *)(*(_QWORD *)(v16 + 56) + 32 * v10);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
        return outlined init with take of Any(a1, v17);
      }
      return (_OWORD *)specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return (_OWORD *)specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  unint64_t v18;
  char v19;

  v4 = v3;
  v8 = *v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = *(_QWORD *)(v8 + 24);
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v10) = a1;
        return swift_bridgeObjectRelease();
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v19 & 1))
    {
      v10 = v18;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (uint64_t (*)(uint64_t, uint64_t))outlined init with take of ScrollStateRequest, (uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t result;
  unint64_t v22;
  char v23;
  uint64_t v24;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for URL();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      v20 = *v4;
      if ((v18 & 1) != 0)
        return outlined assign with take of NamedImage.Cache.WeakCatalog(a1, v20[7] + 8 * v14);
      goto LABEL_11;
    }
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a3 & 1);
    v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v18 & 1) == (v23 & 1))
    {
      v14 = v22;
      v20 = *v4;
      if ((v18 & 1) != 0)
        return outlined assign with take of NamedImage.Cache.WeakCatalog(a1, v20[7] + 8 * v14);
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v11, a1, v20);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];
        result = swift_release();
        *(_QWORD *)(v17 + 8 * v10) = a1;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char v20;

  v4 = v3;
  v8 = *v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = *(_QWORD *)(v8 + 24);
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = *(_QWORD *)(v16 + 56);
        result = swift_bridgeObjectRelease();
        *(_QWORD *)(v17 + 8 * v10) = a1;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  _BYTE v18[40];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_14;
  }
  v14 = v9;
  v15 = v8[3];
  if (v15 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    v16 = *v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v16[7] + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v17 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v10 = result;
  v16 = *v4;
  if ((v14 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  outlined init with copy of AnyHashable(a2, (uint64_t)v18);
  return specialized _NativeDictionary._insert(at:key:value:)(v10, (uint64_t)v18, a1, v16);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (uint64_t (*)(uint64_t, uint64_t))outlined init with take of ScrollStateRequest, (uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];
        result = swift_release();
        *(_QWORD *)(v17 + 8 * v10) = a1;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (uint64_t (*)(uint64_t, uint64_t))outlined init with take of ScrollStateRequest, (uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (uint64_t (*)(uint64_t, uint64_t))outlined init with take of ScrollStateRequest, (uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  char v20;

  v4 = v3;
  v8 = *v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (void (*)(uint64_t))MEMORY[0x24BEE4318], (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = *(_QWORD *)(v8 + 24);
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = *(_QWORD *)(v16 + 56);
        result = swift_release();
        *(_QWORD *)(v17 + 8 * v10) = a1;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (void (*)(uint64_t))MEMORY[0x24BEE4318], (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t result;
  unint64_t v18;
  char v19;
  _BYTE v20[40];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
        return outlined assign with take of WeakBox<AnyLocationBase>(a1, v16[7] + 8 * v10);
      goto LABEL_11;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v19 & 1))
    {
      v10 = v18;
      v16 = *v4;
      if ((v14 & 1) != 0)
        return outlined assign with take of WeakBox<AnyLocationBase>(a1, v16[7] + 8 * v10);
LABEL_11:
      outlined init with copy of AnyHashable(a2, (uint64_t)v20);
      return specialized _NativeDictionary._insert(at:key:value:)(v10, (uint64_t)v20, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= result && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        *(_QWORD *)(v16[7] + 8 * v10) = a1;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= result && (a3 & 1) == 0)
    {
      result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v17 & 1))
    {
      v10 = result;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v4 = v3;
  v8 = *v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)specialized _NativeDictionary.copy()();
LABEL_7:
    v16 = *v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = *(_QWORD *)(v16 + 56);
      result = swift_release();
      *(_QWORD *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    *(_QWORD *)(v16 + 8 * (v10 >> 6) + 64) |= 1 << v10;
    *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v10) = a1;
    v19 = *(_QWORD *)(v16 + 16);
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (!v20)
    {
      *(_QWORD *)(v16 + 16) = v21;
      return result;
    }
    goto LABEL_14;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    v10 = result;
    v16 = *v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(char a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  _BYTE v18[40];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_14;
  }
  v14 = v9;
  v15 = v8[3];
  if (v15 >= result && (a3 & 1) != 0)
    goto LABEL_9;
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_9;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v16 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v10 = result;
LABEL_9:
  v17 = *v4;
  if ((v14 & 1) != 0)
  {
    *(_BYTE *)(v17[7] + v10) = a1 & 1;
  }
  else
  {
    outlined init with copy of AnyHashable(a2, (uint64_t)v18);
    return specialized _NativeDictionary._insert(at:key:value:)(v10, (uint64_t)v18, a1 & 1, v17);
  }
  return result;
}

{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  _QWORD *v18;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_13;
  }
  v14 = v9;
  v15 = v8[3];
  if (v15 >= result && (a3 & 1) != 0)
    goto LABEL_9;
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_9;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v16 & 1))
  {
LABEL_13:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v10 = result;
LABEL_9:
  v17 = a1 & 1;
  v18 = *v4;
  if ((v14 & 1) == 0)
    return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, v17, v18);
  *(_BYTE *)(v18[7] + v10) = v17;
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(int a1, Swift::UInt a2, char a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= result && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        *(_DWORD *)(v18[7] + 4 * v12) = a1;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
    }
    if (v17 >= result && (a4 & 1) == 0)
    {
      result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a4 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v19 & 1))
    {
      v12 = result;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t result;
  unint64_t v24;
  char v25;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a4);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a5 & 1) != 0)
    {
LABEL_7:
      v20 = *v6;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = (unint64_t *)(v20[7] + 24 * v14);
        v22 = *v21;
        *v21 = a1;
        v21[1] = a2;
        v21[2] = a3;
        return outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v22);
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v14, a4, a1, a2, a3, v20);
    }
    if (v19 >= v17 && (a5 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
    v24 = specialized __RawDictionaryStorage.find<A>(_:)(a4);
    if ((v18 & 1) == (v25 & 1))
    {
      v14 = v24;
      v20 = *v6;
      if ((v18 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v14, a4, a1, a2, a3, v20);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  unint64_t result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (uint64_t *)(v18[7] + 16 * v12);
        *v19 = a1;
        v19[1] = a2;
        return swift_bridgeObjectRelease();
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2, v18);
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2, v18);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t result;
  unint64_t v23;
  char v24;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a4);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a5 & 1) != 0)
    {
LABEL_7:
      v20 = *v6;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = v20[7] + 24 * v14;
        *(_QWORD *)v21 = a1;
        *(_QWORD *)(v21 + 8) = a2;
        *(_BYTE *)(v21 + 16) = a3 & 1;
        *(_DWORD *)(v21 + 20) = HIDWORD(a3);
        return outlined consume of DynamicPropertyCache.Fields.Layout();
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v14, a4, a1, a2, a3 & 0xFFFFFFFF00000001, v20);
    }
    if (v19 >= v17 && (a5 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
    v23 = specialized __RawDictionaryStorage.find<A>(_:)(a4);
    if ((v18 & 1) == (v24 & 1))
    {
      v14 = v23;
      v20 = *v6;
      if ((v18 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v14, a4, a1, a2, a3 & 0xFFFFFFFF00000001, v20);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, Swift::UInt32 a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t result;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  char v22;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a4);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= result && (a5 & 1) != 0)
    {
LABEL_7:
      v20 = *v6;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = (uint64_t *)(v20[7] + 24 * v14);
        *v21 = a1;
        v21[1] = a2;
        v21[2] = a3;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v14, a4, a1, a2, a3, v20);
    }
    if (v19 >= result && (a5 & 1) == 0)
    {
      result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a5 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a4);
    if ((v18 & 1) == (v22 & 1))
    {
      v14 = result;
      v20 = *v6;
      if ((v18 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v14, a4, a1, a2, a3, v20);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(int a1, unint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t result;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;

  v6 = (_QWORD **)v5;
  v11 = (_QWORD *)*v5;
  v12 = a4 & 0x1FFFFFFFFFFLL;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4 & 0x1FFFFFFFFFFLL);
  v15 = v11[2];
  v16 = (v13 & 1) == 0;
  result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v11[3];
    if (v19 >= result && (a5 & 1) != 0)
    {
LABEL_7:
      v20 = *v6;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        *(_DWORD *)(v20[7] + 4 * v14) = a1;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v14, a2, a3, v12, a1, v20);
    }
    if (v19 >= result && (a5 & 1) == 0)
    {
      result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a5 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, v12);
    if ((v18 & 1) == (v21 & 1))
    {
      v14 = result;
      v20 = *v6;
      if ((v18 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v14, a2, a3, v12, a1, v20);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, Swift::UInt a2, int a3, Swift::UInt a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v11;
  int v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t result;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char v22;

  v6 = (_QWORD **)v5;
  v11 = (_QWORD *)*v5;
  v12 = a3 & 0x10101;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3 & 0x10101, a4);
  v15 = v11[2];
  v16 = (v13 & 1) == 0;
  result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v11[3];
    if (v19 >= result && (a5 & 1) != 0)
    {
LABEL_7:
      v20 = *v6;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = v20[7] + 20 * v14;
        *(_OWORD *)v21 = *(_OWORD *)a1;
        *(_BYTE *)(v21 + 16) = *(_BYTE *)(a1 + 16);
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v14, a2, v12, a4, a1, v20);
    }
    if (v19 >= result && (a5 & 1) == 0)
    {
      result = specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a5 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a2, v12, a4);
    if ((v18 & 1) == (v22 & 1))
    {
      v14 = result;
      v20 = *v6;
      if ((v18 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v14, a2, v12, a4, a1, v20);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5, char a6)
{
  _QWORD *v6;
  _QWORD **v7;
  _QWORD *v13;
  int v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  id v26;

  v7 = (_QWORD **)v6;
  v13 = (_QWORD *)*v6;
  v14 = a2 & 0x10101;
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2 & 0x10101, a3, a4, a5);
  v17 = v13[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
  }
  else
  {
    v20 = v15;
    v21 = v13[3];
    if (v21 >= v19 && (a6 & 1) != 0)
    {
LABEL_7:
      v22 = *v7;
      if ((v20 & 1) != 0)
      {
LABEL_8:
        v23 = v22[7];

        *(_QWORD *)(v23 + 8 * v16) = a1;
        return;
      }
      goto LABEL_11;
    }
    if (v21 >= v19 && (a6 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, a6 & 1);
    v24 = specialized __RawDictionaryStorage.find<A>(_:)(v14, a3, a4, a5);
    if ((v20 & 1) == (v25 & 1))
    {
      v16 = v24;
      v22 = *v7;
      if ((v20 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v16, v14, a3, a4, (uint64_t)a5, a1, v22);
      v26 = a5;
      swift_bridgeObjectRetain();
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(__int16 a1, char a2, double a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  char v19;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  specialized __RawDictionaryStorage.find<A>(_:)(a1);
  v11 = v10;
  v12 = v8[2];
  v13 = (v9 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    v15 = v9;
    v16 = v8[3];
    if (v16 >= v14 && (a2 & 1) != 0)
    {
LABEL_7:
      v17 = *v4;
      if ((v15 & 1) != 0)
      {
LABEL_8:
        *(double *)(v17[7] + 8 * v11) = a3;
        return;
      }
      goto LABEL_11;
    }
    if (v16 >= v14 && (a2 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a2 & 1);
    specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v15 & 1) == (v19 & 1))
    {
      v11 = v18;
      v17 = *v4;
      if ((v15 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v11, a1, v17, a3);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  _OWORD *v16;
  _OWORD *result;
  unint64_t v18;
  char v19;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
  v10 = v7[2];
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v13 = v8;
    v14 = v7[3];
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        v16 = (_OWORD *)(v15[7] + 32 * v9);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
        return outlined init with take of Any(a1, v16);
      }
      goto LABEL_11;
    }
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, a3 & 1);
    v18 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
    if ((v13 & 1) == (v19 & 1))
    {
      v9 = v18;
      v15 = *v4;
      if ((v13 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v9, (uint64_t)a2, a1, v15);
      return a2;
    }
  }
  type metadata accessor for CFStringRef(0);
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), type metadata accessor for RBSymbolAnimationOptionKey, (void (*)(unint64_t, void *, _OWORD *, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), type metadata accessor for NSAttributedStringKey, (void (*)(unint64_t, void *, _OWORD *, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), type metadata accessor for RBDisplayListInterpolatorOptionKey, (void (*)(unint64_t, void *, _OWORD *, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _OWORD *v19;
  _OWORD *result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_OWORD *)(v18[7] + 32 * v12);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
        return outlined init with take of Any(a1, v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain();
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t result;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for NamedImage.VectorKey(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)*v3;
  v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (void (*)(_BYTE *))NamedImage.VectorKey.hash(into:), (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    v17 = v12;
    v18 = v11[3];
    if (v18 >= v16 && (a3 & 1) != 0)
    {
LABEL_7:
      v19 = *v4;
      if ((v17 & 1) != 0)
        return outlined assign with take of NamedImage.VectorInfo((uint64_t)a1, v19[7] + 80 * v13);
      goto LABEL_11;
    }
    if (v18 >= v16 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, a3 & 1);
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (void (*)(_BYTE *))NamedImage.VectorKey.hash(into:), (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
    if ((v17 & 1) == (v22 & 1))
    {
      v13 = v21;
      v19 = *v4;
      if ((v17 & 1) != 0)
        return outlined assign with take of NamedImage.VectorInfo((uint64_t)a1, v19[7] + 80 * v13);
LABEL_11:
      outlined init with copy of TypesettingLanguage(a2, (uint64_t)v10, type metadata accessor for NamedImage.VectorKey);
      return specialized _NativeDictionary._insert(at:key:value:)(v13, (uint64_t)v10, a1, v19);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t result;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for NamedImage.BitmapKey(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)*v3;
  v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (void (*)(_BYTE *))NamedImage.BitmapKey.hash(into:), (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    v17 = v12;
    v18 = v11[3];
    if (v18 >= v16 && (a3 & 1) != 0)
    {
LABEL_7:
      v19 = *v4;
      if ((v17 & 1) != 0)
        return outlined assign with take of NamedImage.BitmapInfo((uint64_t)a1, v19[7] + 96 * v13);
      goto LABEL_11;
    }
    if (v18 >= v16 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, a3 & 1);
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (void (*)(_BYTE *))NamedImage.BitmapKey.hash(into:), (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
    if ((v17 & 1) == (v22 & 1))
    {
      v13 = v21;
      v19 = *v4;
      if ((v17 & 1) != 0)
        return outlined assign with take of NamedImage.BitmapInfo((uint64_t)a1, v19[7] + 96 * v13);
LABEL_11:
      outlined init with copy of TypesettingLanguage(a2, (uint64_t)v10, type metadata accessor for NamedImage.BitmapKey);
      return specialized _NativeDictionary._insert(at:key:value:)(v13, (uint64_t)v10, a1, v19);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t result;
  unint64_t v22;
  char v23;
  uint64_t v24;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      v20 = *v4;
      if ((v18 & 1) != 0)
        return outlined assign with take of NamedImage.DecodedInfo((uint64_t)a1, v20[7] + 48 * v14);
      goto LABEL_11;
    }
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a3 & 1);
    v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v18 & 1) == (v23 & 1))
    {
      v14 = v22;
      v20 = *v4;
      if ((v18 & 1) != 0)
        return outlined assign with take of NamedImage.DecodedInfo((uint64_t)a1, v20[7] + 48 * v14);
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v11, a1, v20);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, int a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  char v6;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;

  v4 = (_QWORD **)v3;
  v6 = a2;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];

        *(_QWORD *)(v17 + 8 * v10) = a1;
        return;
      }
      goto LABEL_11;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(v6 & 1);
    if ((v14 & 1) == (v19 & 1))
    {
      v10 = v18;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v10, v6 & 1, a1, v16);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        result = swift_release();
        *(_QWORD *)(v19 + 8 * v12) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  char v23;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        v20 = v19
            + *(_QWORD *)(*(_QWORD *)(type metadata accessor for AccessibilityCustomAttributes.Value() - 8) + 72)
            * v12;
        return outlined assign with take of AccessibilityCustomAttributes.Value(a1, v20);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v23 & 1))
    {
      v12 = v22;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, char a2, double a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= result && (a2 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        *(double *)(v16[7] + 8 * v10) = a3;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a1, v16, a3);
    }
    if (v15 >= result && (a2 & 1) == 0)
    {
      result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a2 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v14 & 1) == (v17 & 1))
    {
      v10 = result;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a1, v16, a3);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, Swift::UInt a2, char a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t result;
  unint64_t v20;
  char v21;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
        return outlined init with take of Spacing.Value(a1, v18[7] + 40 * v12);
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      v12 = v20;
      v18 = *v5;
      if ((v16 & 1) != 0)
        return outlined init with take of Spacing.Value(a1, v18[7] + 40 * v12);
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3, void (*a4)(void), void (*a5)(void), uint64_t (*a6)(uint64_t, uint64_t), uint64_t (*a7)(unint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v7;
  uint64_t *v10;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  unint64_t v25;
  char v26;

  v10 = v7;
  v14 = *v7;
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v17 = *(_QWORD *)(v14 + 16);
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
  }
  else
  {
    v20 = v15;
    v21 = *(_QWORD *)(v14 + 24);
    if (v21 >= v19 && (a3 & 1) != 0)
    {
LABEL_7:
      v22 = *v10;
      if ((v20 & 1) != 0)
      {
LABEL_8:
        v23 = *(_QWORD *)(v22 + 56) + 40 * v16;
        __swift_destroy_boxed_opaque_existential_1(v23);
        return a6(a1, v23);
      }
      return a7(v16, a2, a1, v22);
    }
    if (v21 >= v19 && (a3 & 1) == 0)
    {
      a4();
      goto LABEL_7;
    }
    a5();
    v25 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v20 & 1) == (v26 & 1))
    {
      v16 = v25;
      v22 = *v10;
      if ((v20 & 1) != 0)
        goto LABEL_8;
      return a7(v16, a2, a1, v22);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, _QWORD *a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v9 = (_QWORD *)*v4;
  v10 = a3 & 0xFFFFFFFFFFFFLL;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3 & 0xFFFFFFFFFFFFLL);
  v13 = v9[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v9[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        result = swift_bridgeObjectRelease();
        *(_QWORD *)(v19 + 8 * v12) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, v10);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, (uint64_t)a2, v10, a1, v18);
      return outlined copy of Material.ID((unint64_t)a2);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, _QWORD *a2, int a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        result = swift_bridgeObjectRelease();
        *(_QWORD *)(v19 + 8 * v12) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, (uint64_t)a2, a3, a1, v18);
      return outlined copy of Material.ID((unint64_t)a2);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, char a2, double a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t result;
  unint64_t v18;
  char v19;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a2 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
        return outlined assign with take of Text.Effect.BaseFragment(a1, v16[7] + 56 * v10);
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a1, v16, a3);
    }
    if (v15 >= v13 && (a2 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a2 & 1);
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
    if ((v14 & 1) == (v19 & 1))
    {
      v10 = v18;
      v16 = *v4;
      if ((v14 & 1) != 0)
        return outlined assign with take of Text.Effect.BaseFragment(a1, v16[7] + 56 * v10);
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a1, v16, a3);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(__int128 *a1, unint64_t a2, unint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7] + 40 * v12;
        __swift_destroy_boxed_opaque_existential_1(v19);
        return outlined init with take of ScrollStateRequest(a1, v19);
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, unint64_t a2, unint64_t a3, __int16 a4, char a5, double a6)
{
  _QWORD *v6;
  _QWORD **v7;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t result;
  unint64_t v25;
  char v26;

  v7 = (_QWORD **)v6;
  v14 = (_QWORD *)*v6;
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4, a6);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
  }
  else
  {
    v20 = v15;
    v21 = v14[3];
    if (v21 >= v19 && (a5 & 1) != 0)
    {
LABEL_7:
      v22 = *v7;
      if ((v20 & 1) != 0)
      {
LABEL_8:
        v23 = v22[7];
        result = swift_unknownObjectRelease();
        *(_QWORD *)(v23 + 8 * v16) = a1;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v16, a2, a3, a4, a1, v22, a6);
    }
    if (v21 >= v19 && (a5 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, a5 & 1);
    v25 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4, a6);
    if ((v20 & 1) == (v26 & 1))
    {
      v16 = v25;
      v22 = *v7;
      if ((v20 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v16, a2, a3, a4, a1, v22, a6);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, void *a2, char a3, void (*a4)(void), void (*a5)(void), void (*a6)(_QWORD), void (*a7)(unint64_t, void *, _OWORD *, uint64_t))
{
  uint64_t *v7;
  uint64_t *v12;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *result;
  unint64_t v26;
  char v27;

  v12 = v7;
  v15 = *v7;
  v17 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  v18 = *(_QWORD *)(v15 + 16);
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
  }
  else
  {
    v21 = v16;
    v22 = *(_QWORD *)(v15 + 24);
    if (v22 >= v20 && (a3 & 1) != 0)
    {
LABEL_7:
      v23 = *v12;
      if ((v21 & 1) != 0)
      {
LABEL_8:
        v24 = (_OWORD *)(*(_QWORD *)(v23 + 56) + 32 * v17);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
        return outlined init with take of Any(a1, v24);
      }
      goto LABEL_11;
    }
    if (v22 >= v20 && (a3 & 1) == 0)
    {
      a4();
      goto LABEL_7;
    }
    a5();
    v26 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
    if ((v21 & 1) == (v27 & 1))
    {
      v17 = v26;
      v23 = *v12;
      if ((v21 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      a7(v17, a2, a1, v23);
      return a2;
    }
  }
  a6(0);
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;

  v5 = (_QWORD **)v4;
  v9 = (_QWORD *)*v4;
  v10 = a3 & 0x1FFFFFFFFFFLL;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3 & 0x1FFFFFFFFFFLL);
  v13 = v9[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v9[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];

        *(_QWORD *)(v19 + 8 * v12) = a1;
        return;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, v10);
    if ((v16 & 1) == (v21 & 1))
    {
      v12 = v20;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, v10, a1, v18);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(__int128 *a1, Swift::UInt a2, Swift::UInt a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7] + 40 * v12;
        __swift_destroy_boxed_opaque_existential_1(v19);
        return outlined init with take of ScrollStateRequest(a1, v19);
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(int a1, unsigned int a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= result && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        *(_DWORD *)(v16[7] + 4 * v10) = a1;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= result && (a3 & 1) == 0)
    {
      result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v17 & 1))
    {
      v10 = result;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  type metadata accessor for AGAttribute(0);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, unint64_t a2, unint64_t a3, char a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  char v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t result;
  unint64_t v22;
  char v23;

  v6 = (_QWORD **)v5;
  v11 = a4 & 1;
  v12 = (_QWORD *)*v5;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4 & 1);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a5 & 1) != 0)
    {
LABEL_7:
      v20 = *v6;
      if ((v18 & 1) != 0)
        return outlined assign with take of DisplayList.ViewUpdater.ViewInfo(a1, v20[7] + 120 * v14);
      return specialized _NativeDictionary._insert(at:key:value:)(v14, a2, a3, v11, a1, v20);
    }
    if (v19 >= v17 && (a5 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
    v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, v11);
    if ((v18 & 1) == (v23 & 1))
    {
      v14 = v22;
      v20 = *v6;
      if ((v18 & 1) != 0)
        return outlined assign with take of DisplayList.ViewUpdater.ViewInfo(a1, v20[7] + 120 * v14);
      return specialized _NativeDictionary._insert(at:key:value:)(v14, a2, a3, v11, a1, v20);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(Swift::UInt64 a1, Swift::UInt a2, char a3, double a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= result && (a3 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        *(double *)(v18[7] + 8 * v12) = a4;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a1, a2, v18, a4);
    }
    if (v17 >= result && (a3 & 1) == 0)
    {
      result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v16 & 1) == (v19 & 1))
    {
      v12 = result;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a1, a2, v18, a4);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t result;
  uint64_t v18;
  char v19;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (void (*)(uint64_t))MEMORY[0x24BEE4318], (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
        return outlined assign with take of TextEffectsAnimationController.Timing(a1, v16[7] + 120 * v10);
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (void (*)(uint64_t))MEMORY[0x24BEE4318], (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
    if ((v14 & 1) == (v19 & 1))
    {
      v10 = v18;
      v16 = *v4;
      if ((v14 & 1) != 0)
        return outlined assign with take of TextEffectsAnimationController.Timing(a1, v16[7] + 120 * v10);
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, char a2, Swift::UInt64 a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a5 & 1) != 0)
    {
LABEL_7:
      v20 = *v6;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = v20[7] + 16 * v14;
        result = swift_bridgeObjectRelease();
        *(_QWORD *)v21 = a1;
        *(_BYTE *)(v21 + 8) = a2;
        return result;
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a5 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
    v23 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
    if ((v18 & 1) == (v24 & 1))
    {
      v14 = v23;
      v20 = *v6;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v14, a3, a4, a1, a2, v20);
      return swift_retain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

int64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  int64_t result;
  char v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  char v22;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a4, (void (*)(uint64_t))MEMORY[0x24BEE4318], (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= result && (a5 & 1) != 0)
    {
LABEL_7:
      v20 = *v6;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = (uint64_t *)(v20[7] + 24 * v14);
        *v21 = a1;
        v21[1] = a2;
        v21[2] = a3;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v14, a4, a1, a2, a3, v20);
    }
    if (v19 >= result && (a5 & 1) == 0)
    {
      result = (int64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a5 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a4, (void (*)(uint64_t))MEMORY[0x24BEE4318], (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
    if ((v18 & 1) == (v22 & 1))
    {
      v14 = result;
      v20 = *v6;
      if ((v18 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v14, a4, a1, a2, a3, v20);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3, void (*a4)(void), void (*a5)(void), void (*a6)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v6;
  uint64_t *v9;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  v9 = v6;
  v13 = *v6;
  v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (void (*)(uint64_t))MEMORY[0x24BEE4318], (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
  v16 = *(_QWORD *)(v13 + 16);
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
  }
  else
  {
    v19 = v14;
    v20 = *(_QWORD *)(v13 + 24);
    if (v20 >= v18 && (a3 & 1) != 0)
    {
LABEL_7:
      v21 = *v9;
      if ((v19 & 1) != 0)
      {
LABEL_8:
        v22 = *(_QWORD *)(v21 + 56);

        *(_QWORD *)(v22 + 8 * v15) = a1;
        return;
      }
      goto LABEL_11;
    }
    if (v20 >= v18 && (a3 & 1) == 0)
    {
      a4();
      goto LABEL_7;
    }
    a5();
    v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (void (*)(uint64_t))MEMORY[0x24BEE4318], (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
    if ((v19 & 1) == (v24 & 1))
    {
      v15 = v23;
      v21 = *v9;
      if ((v19 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      a6(v15, a2, a1, v21);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, char a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  char v20;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= result && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_OWORD *)(v16[7] + 80 * v10);
        v18 = a1[3];
        v17[2] = a1[2];
        v17[3] = v18;
        v17[4] = a1[4];
        v19 = a1[1];
        *v17 = *a1;
        v17[1] = v19;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= result && (a3 & 1) == 0)
    {
      result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = result;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, Swift::UInt a2, Swift::UInt a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        result = swift_release();
        *(_QWORD *)(v19 + 8 * v12) = a1;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        result = swift_bridgeObjectRelease();
        *(_QWORD *)(v19 + 8 * v12) = a1;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
    }
  }
  type metadata accessor for _NSRange(0);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3, double a4, double a5)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t result;
  unint64_t v23;
  char v24;
  _BYTE v25[40];

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      v20 = *v6;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = v20[7] + 24 * v14;
        result = swift_unknownObjectRelease();
        *(_QWORD *)v21 = a1;
        *(double *)(v21 + 8) = a4;
        *(double *)(v21 + 16) = a5;
        return result;
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a3 & 1);
    v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v18 & 1) == (v24 & 1))
    {
      v14 = v23;
      v20 = *v6;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      outlined init with copy of AnyHashable(a2, (uint64_t)v25);
      return specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v25, a1, v20, a4, a5);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(char a1, char a2, double a3, double a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  double *v19;
  char v20;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= result && (a2 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (double *)(v18[7] + 16 * v12);
        *v19 = a3;
        v19[1] = a4;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a1, v18, a3, a4);
    }
    if (v17 >= result && (a2 & 1) == 0)
    {
      result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a2 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v16 & 1) == (v20 & 1))
    {
      v12 = result;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a1, v18, a3, a4);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3, Swift::UInt a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t result;
  char v18;
  uint64_t v19;
  char v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a4);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_13;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= result && (a5 & 1) != 0)
    goto LABEL_9;
  if (v19 >= result && (a5 & 1) == 0)
  {
    result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_9;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a5 & 1);
  result = specialized __RawDictionaryStorage.find<A>(_:)(a4);
  if ((v18 & 1) != (v20 & 1))
  {
LABEL_13:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v14 = result;
LABEL_9:
  v21 = a3 & 1;
  v22 = *v6;
  if ((v18 & 1) == 0)
    return specialized _NativeDictionary._insert(at:key:value:)(v14, a4, a1, a2, v21, v22);
  v23 = v22[7] + 20 * v14;
  *(_QWORD *)v23 = a1;
  *(_QWORD *)(v23 + 8) = a2;
  *(_BYTE *)(v23 + 16) = v21;
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  _QWORD *v6;
  _QWORD **v7;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t result;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  char v24;

  v7 = (_QWORD **)v6;
  v14 = (_QWORD *)*v6;
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(a4, a5);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  result = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
  }
  else
  {
    v20 = v15;
    v21 = v14[3];
    if (v21 >= result && (a6 & 1) != 0)
    {
LABEL_7:
      v22 = *v7;
      if ((v20 & 1) != 0)
      {
LABEL_8:
        v23 = (uint64_t *)(v22[7] + 24 * v16);
        *v23 = a1;
        v23[1] = a2;
        v23[2] = a3;
        return result;
      }
      goto LABEL_11;
    }
    if (v21 >= result && (a6 & 1) == 0)
    {
      result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a6 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a4, a5);
    if ((v20 & 1) == (v24 & 1))
    {
      v16 = result;
      v22 = *v7;
      if ((v20 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v16, a4, a5, a1, a2, a3, v22);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

int64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  int64_t result;
  char v14;
  int64_t v15;
  _QWORD *v16;
  char v17;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (void (*)(uint64_t))MEMORY[0x24BEE42F8], (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= result && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        *(_QWORD *)(v16[7] + 8 * v10) = a1;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= result && (a3 & 1) == 0)
    {
      result = (int64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a2, (void (*)(uint64_t))MEMORY[0x24BEE42F8], (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
    if ((v14 & 1) == (v17 & 1))
    {
      v10 = result;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, char a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _OWORD *v17;
  _OWORD *result;
  unint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_OWORD *)(v16[7] + 32 * v10);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
        return outlined init with take of Any(a1, v17);
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, unint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t result;
  unint64_t v20;
  char v21;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
        return outlined assign with take of CanvasSymbols.Child((uint64_t)a1, v18[7] + 48 * v12);
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      v12 = v20;
      v18 = *v5;
      if ((v16 & 1) != 0)
        return outlined assign with take of CanvasSymbols.Child((uint64_t)a1, v18[7] + 48 * v12);
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      return swift_retain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, Swift::UInt a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];
        result = swift_bridgeObjectRelease();
        *(_QWORD *)(v17 + 8 * v10) = a1;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, char a2, uint64_t a3, char a4, char a5, double a6, double a7)
{
  _QWORD *v7;
  _QWORD **v8;
  _QWORD *v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t result;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  double *v25;
  char v26;

  v8 = (_QWORD **)v7;
  v16 = (_QWORD *)*v7;
  v18 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2 & 1, a3, a4 & 1);
  v19 = v16[2];
  v20 = (v17 & 1) == 0;
  result = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
  }
  else
  {
    v22 = v17;
    v23 = v16[3];
    if (v23 >= result && (a5 & 1) != 0)
    {
LABEL_7:
      v24 = *v8;
      if ((v22 & 1) != 0)
      {
LABEL_8:
        v25 = (double *)(v24[7] + 16 * v18);
        *v25 = a6;
        v25[1] = a7;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v18, a1, a2 & 1, a3, a4 & 1, v24, a6, a7);
    }
    if (v23 >= result && (a5 & 1) == 0)
    {
      result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a5 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2 & 1, a3, a4 & 1);
    if ((v22 & 1) == (v26 & 1))
    {
      v18 = result;
      v24 = *v8;
      if ((v22 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v18, a1, a2 & 1, a3, a4 & 1, v24, a6, a7);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6)
{
  _QWORD *v6;
  _QWORD **v7;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t result;
  __int128 v25;
  unint64_t v26;
  char v27;

  v7 = (_QWORD **)v6;
  v14 = (_QWORD *)*v6;
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3 & 1, a4, a5 & 1);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
  }
  else
  {
    v20 = v15;
    v21 = v14[3];
    if (v21 >= v19 && (a6 & 1) != 0)
    {
LABEL_7:
      v22 = *v7;
      if ((v20 & 1) != 0)
      {
LABEL_8:
        v23 = v22[7] + 56 * v16;
        result = swift_release();
        v25 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)v23 = *(_OWORD *)a1;
        *(_OWORD *)(v23 + 16) = v25;
        *(_OWORD *)(v23 + 32) = *(_OWORD *)(a1 + 32);
        *(_QWORD *)(v23 + 48) = *(_QWORD *)(a1 + 48);
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v16, a2, a3 & 1, a4, a5 & 1, a1, v22);
    }
    if (v21 >= v19 && (a6 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, a6 & 1);
    v26 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3 & 1, a4, a5 & 1);
    if ((v20 & 1) == (v27 & 1))
    {
      v16 = v26;
      v22 = *v7;
      if ((v20 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v16, a2, a3 & 1, a4, a5 & 1, a1, v22);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = MEMORY[0x23B7C6C4C](v9, a1);
      outlined destroy of AnyHashable((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  unint64_t result;

  result = a2 & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
    __asm { BR              X21 }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;
  void *v9;
  id v10;
  char v11;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = v2;
    v8 = ~v4;
    do
    {
      v9 = *(void **)(*(_QWORD *)(v6 + 48) + 8 * v5);
      if (v9)
      {
        if (a1)
        {
          type metadata accessor for CFStringRef(0);
          lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
          v10 = v9;
          v11 = static _CFObject.== infix(_:_:)();

          if ((v11 & 1) != 0)
            return v5;
        }
      }
      else if (!a1)
      {
        return v5;
      }
      v5 = (v5 + 1) & v8;
    }
    while (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t, __n128);
  char v15;
  _QWORD v17[2];

  v3 = v2;
  v17[1] = a1;
  v5 = type metadata accessor for CodingUserInfoKey();
  v6 = *(_QWORD *)(v5 - 8);
  v7.n128_f64[0] = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = -1 << *(_BYTE *)(v3 + 32);
  v11 = a2 & ~v10;
  if (((*(_QWORD *)(v3 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
  {
    v12 = ~v10;
    v13 = *(_QWORD *)(v6 + 72);
    v14 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v6 + 16);
    do
    {
      v14(v9, *(_QWORD *)(v3 + 48) + v13 * v11, v5, v7);
      v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      if ((v15 & 1) != 0)
        break;
      v11 = (v11 + 1) & v12;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  return v11;
}

{
  uint64_t v2;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) == 0)
    return result;
  v6 = ~v4;
  while (1)
  {
    v7 = *(_QWORD *)(v2 + 48) + 56 * result;
    if (*(_QWORD *)v7 != *(_QWORD *)a1)
      goto LABEL_4;
    v8 = *(_QWORD *)(v7 + 8);
    v9 = *(_QWORD *)(a1 + 8);
    if (__OFSUB__(v9, v8))
      break;
    if (v9 == v8)
    {
      v10 = *(_QWORD *)(v7 + 16);
      v11 = *(_QWORD *)(a1 + 16);
      if (__OFSUB__(v11, v10))
        goto LABEL_23;
      if (v11 == v10)
      {
        v12 = *(_QWORD *)(v7 + 40);
        v13 = *(_BYTE *)(v7 + 48);
        if ((*(_BYTE *)(v7 + 32) & 1) != 0)
        {
          if ((*(_BYTE *)(a1 + 32) & 1) == 0)
            goto LABEL_4;
LABEL_16:
          if ((v13 & 1) != 0)
          {
            if ((*(_BYTE *)(a1 + 48) & 1) != 0)
              return result;
          }
          else if ((*(_BYTE *)(a1 + 48) & 1) == 0)
          {
            v16 = *(_QWORD *)(a1 + 40);
            if (__OFSUB__(v16, v12))
              goto LABEL_25;
            if (v16 == v12)
              return result;
          }
          goto LABEL_4;
        }
        if ((*(_BYTE *)(a1 + 32) & 1) == 0)
        {
          v14 = *(_QWORD *)(v7 + 24);
          v15 = *(_QWORD *)(a1 + 24);
          if (__OFSUB__(v15, v14))
            goto LABEL_24;
          if (v15 == v14)
            goto LABEL_16;
        }
      }
    }
LABEL_4:
    result = (result + 1) & v6;
    if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) == 0)
      return result;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    v8 = *(_QWORD *)(v7 + 8 * result);
    if (__OFSUB__(a1, v8))
    {
LABEL_11:
      __break(1u);
      return result;
    }
    if (v8 != a1)
    {
      v9 = ~v5;
      result = (result + 1) & v9;
      if (((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
      {
        while (1)
        {
          v10 = *(_QWORD *)(v7 + 8 * result);
          if (__OFSUB__(a1, v10))
            break;
          if (v10 != a1)
          {
            result = (result + 1) & v9;
            if (((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
              continue;
          }
          return result;
        }
        __break(1u);
        goto LABEL_11;
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      v12 = ~v4;
      v5 = (v5 + 1) & v12;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16)
            break;
          v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            v5 = (v5 + 1) & v12;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v5 = -1 << *(_BYTE *)(v3 + 32);
  result = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = ~v5;
    do
    {
      v8 = *(_QWORD *)(v3 + 48) + 16 * result;
      v9 = *(_QWORD *)v8;
      v10 = *(unsigned __int8 *)(v8 + 8);
      if (v9 == a1 && v10 == a2)
        break;
      result = (result + 1) & v7;
    }
    while (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v5 = -1 << *(_BYTE *)(v3 + 32);
  result = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = ~v5;
    do
    {
      v8 = *(_QWORD *)(v3 + 48) + 16 * result;
      v9 = *(_QWORD *)v8;
      v10 = *(unsigned __int8 *)(v8 + 8);
      if (v9)
      {
        if (a1)
        {
          if (v9 == a1 && v10 == a2)
            return result;
        }
      }
      else if (!a1 && v10 == a2)
      {
        return result;
      }
      result = (result + 1) & v7;
    }
    while (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  unint64_t result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned __int8 v16;
  BOOL v22;

  v6 = -1 << *(_BYTE *)(v4 + 32);
  result = a4 & ~v6;
  if (((*(_QWORD *)(v4 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v8 = ~v6;
    do
    {
      v9 = *(_QWORD *)(v4 + 48) + 24 * result;
      v10 = *(_DWORD *)v9;
      v11 = *(_DWORD *)(v9 + 4);
      v12 = *(_DWORD *)(v9 + 8);
      v13 = *(_DWORD *)(v9 + 12);
      v14 = *(_DWORD *)(v9 + 16);
      v15 = *(unsigned __int8 *)(v9 + 20);
      v16 = *(_BYTE *)(v9 + 21);
      v22 = v10 != (_DWORD)a1
         || v11 != HIDWORD(a1)
         || v12 != (_DWORD)a2
         || v13 != HIDWORD(a2)
         || v14 != (_DWORD)a3
         || v15 != BYTE4(a3);
      if (((v22 | BYTE5(a3) & 1 ^ v16) & 1) == 0)
        break;
      result = (result + 1) & v8;
    }
    while (((*(_QWORD *)(v4 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);

  v4 = -1 << *(_BYTE *)(v3 + 32);
  v5 = a3 & ~v4;
  if (((*(_QWORD *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v8 = ~v4;
    do
    {
      v9 = *(_QWORD *)(v3 + 48);
      if (*(_QWORD *)(v9 + 16 * v5) == a1)
      {
        v10 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(v9 + 16 * v5 + 8) + 80);
        swift_retain();
        LOBYTE(v10) = v10(a2);
        swift_release();
        if ((v10 & 1) != 0)
          break;
      }
      v5 = (v5 + 1) & v8;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

{
  uint64_t v3;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  _QWORD *v8;

  v5 = -1 << *(_BYTE *)(v3 + 32);
  result = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = ~v5;
    do
    {
      v8 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * result);
      if (v8[1] == a2 && *v8 == a1)
        break;
      result = (result + 1) & v7;
    }
    while (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v5;
  unint64_t result;
  int32x4_t v7;

  v5 = -1 << *(_BYTE *)(v3 + 32);
  result = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7.i64[0] = a1;
    v7.i64[1] = a2;
    do
    {
      if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(*(int32x4_t *)(*(_QWORD *)(v3 + 48) + 16 * result), v7)), 0xFuLL))) & 1) != 0)break;
      result = (result + 1) & ~v5;
    }
    while (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = -1 << *(_BYTE *)(v3 + 32);
  result = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = ~v5;
    v8 = *(_QWORD *)(v3 + 48);
    do
    {
      if (*(_QWORD *)(v8 + 16 * result) == a1)
      {
        v9 = *(_QWORD *)(v8 + 16 * result + 8);
        if (__OFSUB__(a2, v9))
        {
          __break(1u);
          return result;
        }
        if (v9 == a2)
          return result;
      }
      result = (result + 1) & v7;
    }
    while (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v5 = -1 << *(_BYTE *)(v3 + 32);
  result = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = ~v5;
    do
    {
      v8 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * result);
      v10 = *v8;
      v9 = v8[1];
      if (v10 == a1 && v9 == a2)
        break;
      result = (result + 1) & v7;
    }
    while (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (((((a1 & 1) == 0) ^ *(unsigned __int8 *)(v7 + result)) & 1) == 0)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (((((a1 & 1) == 0) ^ *(_BYTE *)(v7 + result)) & 1) != 0)
          break;
      }
    }
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  unint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = -1 << *(_BYTE *)(v4 + 32);
  result = a4 & ~v6;
  if (((*(_QWORD *)(v4 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v8 = ~v6;
    v9 = *(_QWORD *)(v4 + 48);
    do
    {
      v10 = v9 + 24 * result;
      if (*(_QWORD *)v10 == a1
        && ((a2 ^ *(unsigned __int8 *)(v10 + 8)) & 1) == 0
        && ((*(unsigned __int8 *)(v10 + 9) ^ ((unsigned __int16)(a2 & 0x100) >> 8)) & 1) == 0
        && ((*(unsigned __int8 *)(v10 + 10) ^ ((a2 & 0x10000u) >> 16)) & 1) == 0
        && *(_QWORD *)(v9 + 24 * result + 16) == a3)
      {
        break;
      }
      result = (result + 1) & v8;
    }
    while (((*(_QWORD *)(v4 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(int a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v13;
  unsigned __int8 *v14;
  void *v15;
  BOOL v16;
  char v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  char v22;
  uint64_t v25;

  v6 = v5 + 64;
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = a5 & ~v7;
  if (((*(_QWORD *)(v5 + 64 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
  {
    v9 = v5;
    v11 = a3;
    v13 = ~v7;
    v25 = a2;
    do
    {
      v14 = (unsigned __int8 *)(*(_QWORD *)(v9 + 48) + 32 * v8);
      if (((a1 ^ *v14) & 1) == 0
        && ((v14[1] ^ ((unsigned __int16)(a1 & 0x100) >> 8)) & 1) == 0
        && ((v14[2] ^ ((a1 & 0x10000u) >> 16)) & 1) == 0)
      {
        v15 = (void *)*((_QWORD *)v14 + 3);
        v16 = *((_QWORD *)v14 + 1) == a2 && *((_QWORD *)v14 + 2) == v11;
        if (v16 || (v17 = _stringCompareWithSmolCheck(_:_:expecting:)(), a2 = v25, (v17 & 1) != 0))
        {
          if (v15)
          {
            if (a4)
            {
              type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSBundle);
              swift_bridgeObjectRetain();
              v18 = v15;
              v19 = a4;
              v20 = a4;
              v21 = v18;
              v22 = static NSObject.== infix(_:_:)();
              swift_bridgeObjectRelease();

              a4 = v19;
              v11 = a3;
              a2 = v25;
              if ((v22 & 1) != 0)
                return v8;
            }
          }
          else if (!a4)
          {
            return v8;
          }
        }
      }
      v8 = (v8 + 1) & v13;
    }
    while (((*(_QWORD *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  }
  return v8;
}

void sub_234F62FA4()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  void *v12;
  id v13;
  uint64_t v14;
  id v15;
  char v16;

  v6 = v5 + 64;
  v7 = -1 << *(_BYTE *)(v5 + 32);
  i = a2 & ~v7;
  if (((*(_QWORD *)(v5 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    a3(0);
    v12 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * i);
    lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(a4, a3, a5);
    v13 = v12;
    LOBYTE(a4) = static _CFObject.== infix(_:_:)();

    if ((a4 & 1) == 0)
    {
      v14 = ~v7;
      for (i = (i + 1) & v14; ((*(_QWORD *)(v6 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v14)
      {
        v15 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * i);
        v16 = static _CFObject.== infix(_:_:)();

        if ((v16 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t, __n128);
  char v18;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  unint64_t *v22;
  uint64_t v23;

  v22 = a4;
  v23 = a5;
  v6 = v5;
  v20 = a1;
  v21 = a3;
  v8 = a3(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10.n128_f64[0] = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v20 - v11;
  v13 = -1 << *(_BYTE *)(v6 + 32);
  v14 = a2 & ~v13;
  if (((*(_QWORD *)(v6 + 64 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v15 = ~v13;
    v16 = *(_QWORD *)(v9 + 72);
    v17 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v9 + 16);
    do
    {
      v17(v12, *(_QWORD *)(v6 + 48) + v16 * v14, v8, v10);
      lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(v22, v21, v23);
      v18 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      if ((v18 & 1) != 0)
        break;
      v14 = (v14 + 1) & v15;
    }
    while (((*(_QWORD *)(v6 + 64 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
  }
  return v14;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;

  v3 = v2;
  v6 = (int *)type metadata accessor for NamedImage.VectorKey(0);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (unsigned __int8 *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v2 + 64;
  v11 = -1 << *(_BYTE *)(v2 + 32);
  v12 = a2 & ~v11;
  if (((*(_QWORD *)(v2 + 64 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
  {
    v13 = ~v11;
    v14 = *(_QWORD *)(v7 + 72);
    while (1)
    {
      outlined init with copy of TypesettingLanguage(*(_QWORD *)(v3 + 48) + v14 * v12, (uint64_t)v9, type metadata accessor for NamedImage.VectorKey);
      if (*v9 != *a1 || ((v9[1] ^ a1[1]) & 1) != 0)
        goto LABEL_5;
      v15 = *((_QWORD *)v9 + 1) == *((_QWORD *)a1 + 1) && *((_QWORD *)v9 + 2) == *((_QWORD *)a1 + 2);
      if (!v15 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
        || *((double *)v9 + 3) != *((double *)a1 + 3)
        || v9[32] != a1[32]
        || (MEMORY[0x23B7C526C](&v9[v6[8]], &a1[v6[8]]) & 1) == 0
        || *(double *)&v9[v6[9]] != *(double *)&a1[v6[9]]
        || v9[v6[10]] != a1[v6[10]]
        || *(double *)&v9[v6[11]] != *(double *)&a1[v6[11]])
      {
        goto LABEL_5;
      }
      v16 = v6[12];
      v17 = *(void **)&v9[v16];
      v18 = *(void **)&a1[v16];
      if (!v17)
        break;
      if (v17 == (void *)1)
      {
        if (v18 != (void *)1)
          goto LABEL_4;
        goto LABEL_22;
      }
      if ((unint64_t)v18 < 2)
      {
LABEL_4:
        v25 = v18;
        outlined copy of Image.Location(v18);
        outlined copy of Image.Location(v17);
        outlined consume of Image.Location(v17);
        outlined consume of Image.Location(v25);
        goto LABEL_5;
      }
      v25 = v18;
      v23 = type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
      v24 = v17;
      v19 = v25;
      outlined copy of Image.Location(v25);
      outlined copy of Image.Location(v24);
      outlined copy of Image.Location(v19);
      outlined copy of Image.Location(v24);
      LODWORD(v23) = static NSObject.== infix(_:_:)();
      outlined consume of Image.Location(v24);
      v20 = v25;
      outlined consume of Image.Location(v25);
      outlined consume of Image.Location(v20);
      outlined consume of Image.Location(v24);
      if ((v23 & 1) == 0)
        goto LABEL_5;
LABEL_25:
      if (*(_QWORD *)&v9[v6[13]] == *(_QWORD *)&a1[v6[13]])
      {
        outlined destroy of TypesettingConfiguration((uint64_t)v9, type metadata accessor for NamedImage.VectorKey);
        return v12;
      }
LABEL_5:
      outlined destroy of TypesettingConfiguration((uint64_t)v9, type metadata accessor for NamedImage.VectorKey);
      v12 = (v12 + 1) & v13;
      if (((*(_QWORD *)(v10 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
        return v12;
    }
    if (v18)
      goto LABEL_4;
LABEL_22:
    outlined consume of Image.Location(v17);
    outlined consume of Image.Location(v17);
    goto LABEL_25;
  }
  return v12;
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  void *v14;
  void *v15;
  uint64_t v17;
  int v18;
  int *v19;
  uint64_t v20;

  v19 = (int *)type metadata accessor for NamedImage.BitmapKey(0);
  MEMORY[0x24BDAC7A8](v19);
  v7 = (unsigned __int8 *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v2 + 64;
  v9 = -1 << *(_BYTE *)(v2 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v5 + 72);
    v20 = v2;
    while (1)
    {
      outlined init with copy of TypesettingLanguage(*(_QWORD *)(v2 + 48) + v12 * v10, (uint64_t)v7, type metadata accessor for NamedImage.BitmapKey);
      if (*v7 != *a1 || ((v7[1] ^ a1[1]) & 1) != 0)
        goto LABEL_5;
      v13 = *((_QWORD *)v7 + 1) == *((_QWORD *)a1 + 1) && *((_QWORD *)v7 + 2) == *((_QWORD *)a1 + 2);
      if (!v13 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
        || *((double *)v7 + 3) != *((double *)a1 + 3))
      {
        goto LABEL_5;
      }
      v14 = (void *)*((_QWORD *)v7 + 4);
      v15 = (void *)*((_QWORD *)a1 + 4);
      if (!v14)
        break;
      if (v14 == (void *)1)
      {
        if (v15 != (void *)1)
          goto LABEL_4;
        goto LABEL_17;
      }
      if ((unint64_t)v15 < 2)
      {
LABEL_4:
        outlined copy of Image.Location(*((id *)a1 + 4));
        outlined copy of Image.Location(v14);
        outlined consume of Image.Location(v14);
        outlined consume of Image.Location(v15);
        v2 = v20;
        goto LABEL_5;
      }
      type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
      outlined copy of Image.Location(v15);
      outlined copy of Image.Location(v14);
      outlined copy of Image.Location(v15);
      outlined copy of Image.Location(v14);
      v18 = static NSObject.== infix(_:_:)();
      outlined consume of Image.Location(v14);
      outlined consume of Image.Location(v15);
      outlined consume of Image.Location(v15);
      outlined consume of Image.Location(v14);
      v2 = v20;
      if ((v18 & 1) == 0)
        goto LABEL_5;
LABEL_20:
      if (v7[40] == a1[40]
        && (MEMORY[0x23B7C526C](&v7[v19[9]], &a1[v19[9]]) & 1) != 0
        && v7[v19[10]] == a1[v19[10]]
        && *(_QWORD *)&v7[v19[11]] == *(_QWORD *)&a1[v19[11]]
        && *(_QWORD *)&v7[v19[12]] == *(_QWORD *)&a1[v19[12]]
        && v7[v19[13]] == a1[v19[13]]
        && v7[v19[14]] == a1[v19[14]])
      {
        outlined destroy of TypesettingConfiguration((uint64_t)v7, type metadata accessor for NamedImage.BitmapKey);
        return v10;
      }
LABEL_5:
      outlined destroy of TypesettingConfiguration((uint64_t)v7, type metadata accessor for NamedImage.BitmapKey);
      v10 = (v10 + 1) & v11;
      if (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        return v10;
    }
    if (v15)
      goto LABEL_4;
LABEL_17:
    outlined consume of Image.Location(*((id *)v7 + 4));
    outlined consume of Image.Location(v14);
    v2 = v20;
    goto LABEL_20;
  }
  return v10;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_BYTE *)(v7 + result) != (a1 & 1))
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (((*(unsigned __int8 *)(v7 + result) ^ a1) & 1) == 0)
          break;
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_DWORD *)(v7 + 4 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_DWORD *)(v7 + 4 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  int v12;
  int v13;
  int v16;
  int v17;
  _QWORD *v18;
  _QWORD *v19;

  v4 = -1 << *(_BYTE *)(v3 + 32);
  v5 = a3 & ~v4;
  if (((*(_QWORD *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = a2;
    v8 = ~v4;
    v16 = BYTE5(a2);
    v17 = BYTE4(a2);
    do
    {
      v9 = *(_QWORD *)(v3 + 48) + 16 * v5;
      v10 = *(_QWORD **)v9;
      v11 = *(_DWORD *)(v9 + 8);
      v12 = *(unsigned __int8 *)(v9 + 12);
      v13 = *(unsigned __int8 *)(v9 + 13);
      v18 = a1;
      v19 = v10;
      outlined copy of Material.ID((unint64_t)v10);
      if (specialized static Material.ID.== infix(_:_:)(&v19, &v18) && v11 == v6)
      {
        outlined consume of Material.ID((unint64_t)v10);
        if (v12 == v17 && v13 == v16)
          return v5;
      }
      else
      {
        outlined consume of Material.ID((unint64_t)v10);
      }
      v5 = (v5 + 1) & v8;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(_QWORD *a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  _QWORD *v13;
  _QWORD *v14;

  v4 = -1 << *(_BYTE *)(v3 + 32);
  v5 = a3 & ~v4;
  if (((*(_QWORD *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v8 = ~v4;
    do
    {
      v9 = *(_QWORD *)(v3 + 48) + 16 * v5;
      v10 = *(_QWORD **)v9;
      v11 = *(_DWORD *)(v9 + 8);
      v13 = a1;
      v14 = v10;
      if (specialized static Material.ID.== infix(_:_:)(&v14, &v13) && v11 == a2)
        break;
      v5 = (v5 + 1) & v8;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  result = a1 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v6 = *(_QWORD *)(v2 + 48);
    if (*(double *)(v6 + 8 * result) != a2)
    {
      v7 = ~v4;
      for (result = (result + 1) & v7;
            ((*(_QWORD *)(v3 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v7)
      {
        if (*(double *)(v6 + 8 * result) == a2)
          break;
      }
    }
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, unsigned __int16 a3, uint64_t a4, double a5)
{
  uint64_t v5;
  uint64_t v7;
  unint64_t result;
  uint64_t v9;
  uint64_t v10;
  double v11;
  BOOL v16;

  v7 = -1 << *(_BYTE *)(v5 + 32);
  result = a4 & ~v7;
  if (((*(_QWORD *)(v5 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v9 = ~v7;
    do
    {
      v10 = *(_QWORD *)(v5 + 48) + 32 * result;
      v11 = *(double *)(v10 + 24);
      v16 = *(_DWORD *)v10 == (_DWORD)a1
         && *(_DWORD *)(v10 + 4) == HIDWORD(a1)
         && *(_DWORD *)(v10 + 8) == (_DWORD)a2
         && *(_DWORD *)(v10 + 12) == HIDWORD(a2)
         && *(unsigned __int16 *)(v10 + 16) == a3;
      if (v11 != a5)
        v16 = 0;
      if (v16)
        break;
      result = (result + 1) & v9;
    }
    while (((*(_QWORD *)(v5 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;

  v5 = -1 << *(_BYTE *)(v3 + 32);
  result = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = ~v5;
    v8 = a1 & 0xC000000000;
    v17 = a1 & 0xFF0000000000;
    do
    {
      v9 = *(_QWORD *)(v3 + 48) + 16 * result;
      v10 = *(_QWORD *)v9;
      v11 = *(unsigned __int8 *)(v9 + 11);
      v12 = *(unsigned __int8 *)(v9 + 12);
      v13 = *(unsigned __int8 *)(v9 + 13);
      v14 = (*(_QWORD *)v9 >> 38) & 3;
      if ((_DWORD)v14)
      {
        if ((_DWORD)v14 != 1)
          __asm { BR              X16 }
        if (v8 != 0x4000000000)
          goto LABEL_5;
        v15 = *(unsigned __int8 *)(v9 + 10);
        v16 = *(unsigned __int16 *)(v9 + 8);
        if ((v10 & 0x100000000) != 0)
        {
          if ((a1 & 0x100000000) == 0 || *(float *)&v10 != *(float *)&a1)
            goto LABEL_5;
        }
        else if ((a1 & 0x100000000) != 0 || (a1 & 1) == ((v10 & 1) == 0))
        {
          goto LABEL_5;
        }
        if ((v10 & 0xFF0000000000) == 0x20000000000)
        {
          if (v17 != 0x20000000000)
            goto LABEL_5;
        }
        else if (v17 == 0x20000000000 || ((v10 ^ a1) & 0x10000000000) != 0)
        {
          goto LABEL_5;
        }
        if (BYTE6(v10) != BYTE6(a1)
          || HIBYTE(v10) != HIBYTE(a1)
          || v16 != a2
          || BYTE1(v16) != BYTE1(a2)
          || ((v16 | (v15 << 16)) >> 16) != BYTE2(a2))
        {
          goto LABEL_5;
        }
      }
      else if (v8 || ((a1 ^ ((*(_QWORD *)v9 & 1) == 0)) & 1) == 0)
      {
        goto LABEL_5;
      }
      if (v11 == 2)
      {
        if (BYTE3(a2) != 2)
          goto LABEL_5;
      }
      else if (BYTE3(a2) == 2 || ((a2 >> 24) & 1) != (v11 & 1))
      {
        goto LABEL_5;
      }
      if (v12 == 3)
      {
        if (BYTE4(a2) == 3)
          goto LABEL_4;
      }
      else if (BYTE4(a2) != 3 && v12 == BYTE4(a2))
      {
LABEL_4:
        if ((((a2 >> 40) & 1 ^ v13) & 1) == 0)
          return result;
      }
LABEL_5:
      result = (result + 1) & v7;
    }
    while (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  unint64_t result;
  uint64_t v9;
  uint64_t v10;

  v7 = -1 << *(_BYTE *)(v5 + 32);
  result = a5 & ~v7;
  if (((*(_QWORD *)(v5 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v9 = ~v7;
    do
    {
      v10 = *(_QWORD *)(v5 + 48) + 32 * result;
      if ((*(_BYTE *)(v10 + 8) & 1) != 0)
      {
        if ((a2 & 1) == 0)
          goto LABEL_4;
      }
      else if ((a2 & 1) != 0 || *(double *)v10 != *(double *)&a1)
      {
        goto LABEL_4;
      }
      if ((*(_BYTE *)(v10 + 24) & 1) != 0)
      {
        if ((a4 & 1) != 0)
          return result;
      }
      else if ((a4 & 1) == 0 && *(double *)(v10 + 16) == *(double *)&a3)
      {
        return result;
      }
LABEL_4:
      result = (result + 1) & v9;
    }
    while (((*(_QWORD *)(v5 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  unint64_t result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  _BOOL4 v18;

  v6 = -1 << *(_BYTE *)(v4 + 32);
  result = a4 & ~v6;
  if (((*(_QWORD *)(v4 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v8 = ~v6;
    do
    {
      v9 = *(_QWORD *)(v4 + 48) + 20 * result;
      v10 = *(_DWORD *)v9;
      v11 = *(_DWORD *)(v9 + 4);
      v12 = *(_DWORD *)(v9 + 8);
      v13 = *(_DWORD *)(v9 + 12);
      v14 = *(unsigned __int8 *)(v9 + 16);
      v18 = v10 != (_DWORD)a1 || v11 != HIDWORD(a1) || v12 != (_DWORD)a2 || v13 != HIDWORD(a2);
      if (((v18 | a3 ^ v14) & 1) == 0)
        break;
      result = (result + 1) & v8;
    }
    while (((*(_QWORD *)(v4 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v7 = v3;
    v9 = a1;
    v10 = HIDWORD(a1);
    v11 = ~v5;
    while (1)
    {
      v12 = *(_QWORD *)(v7 + 48) + 16 * v6;
      if (*(_DWORD *)v12 != v9 || *(_DWORD *)(v12 + 4) != (_DWORD)v10)
        goto LABEL_5;
      v14 = *(_QWORD *)(v12 + 8);
      if (!v14)
        break;
      if (!a2)
      {
        swift_retain_n();
LABEL_4:
        swift_release_n();
        goto LABEL_5;
      }
      if (v14 == a2)
        return v6;
      v15 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 104);
      swift_retain_n();
      v16 = swift_retain();
      LOBYTE(v15) = v15(v16);
      swift_release_n();
      swift_release();
      if ((v15 & 1) != 0)
        return v6;
LABEL_5:
      v6 = (v6 + 1) & v11;
      if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
        return v6;
    }
    if (!a2)
      return v6;
    goto LABEL_4;
  }
  return v6;
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return a2 & ~(-1 << *(_BYTE *)(v2 + 32));
}

uint64_t sub_234F649F0()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in GraphHost.init(data:)()
{
  return closure #1 in GraphHost.init(data:)();
}

uint64_t partial apply for closure #2 in GraphHost.init(data:)(unsigned int a1)
{
  return closure #2 in GraphHost.init(data:)(a1);
}

BOOL specialized EmptyGraphMutation.combine<A>(with:)(ValueMetadata *a1)
{
  return a1 == &type metadata for EmptyGraphMutation;
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1)
{
  uint64_t v1;

  return a1 & ~(-1 << *(_BYTE *)(v1 + 32));
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)()
{
  Swift::Int v0;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  v0 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v0);
}

uint64_t specialized static GraphHost.currentHost.getter()
{
  id v0;
  void *v1;
  id v2;
  uint64_t Context;
  uint64_t v4;
  uint64_t result;

  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    v0 = (id)AGSubgraphGetCurrent();
    if (!v0)
      goto LABEL_8;
    v1 = v0;
    v2 = (id)AGSubgraphGetGraph();

  }
  else
  {
    v2 = (id)AGGraphGetAttributeGraph();
  }
  Context = AGGraphGetContext();
  if (Context)
  {
    v4 = Context;
    swift_retain();

    return v4;
  }
  __break(1u);
LABEL_8:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_234F64B88()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_234F64BAC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in GraphDelegate.beginTransaction()()
{
  uint64_t *v0;

  return closure #1 in GraphDelegate.beginTransaction()(v0[4], v0[2], v0[3]);
}

uint64_t block_copy_helper_24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_24()
{
  return swift_release();
}

uint64_t sub_234F64BF4()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in GraphHost.continueTransaction(_:)()
{
  uint64_t v0;

  return closure #1 in GraphHost.continueTransaction(_:)(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_234F64C2C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t type metadata accessor for GraphHost()
{
  return objc_opt_self();
}

void type metadata accessor for (label: String?, value: Any)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (label: String?, value: Any))
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (label: String?, value: Any));
  }
}

uint64_t sub_234F64D54()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in GraphHost.uninstantiate(immediately:)()
{
  uint64_t v0;
  id v1;

  v1 = *(id *)(v0 + 16);
  AGSubgraphInvalidate();

}

unint64_t lazy protocol witness table accessor for type GraphHost.RemovedState and conformance GraphHost.RemovedState()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GraphHost.RemovedState and conformance GraphHost.RemovedState;
  if (!lazy protocol witness table cache variable for type GraphHost.RemovedState and conformance GraphHost.RemovedState)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GraphHost.RemovedState, &type metadata for GraphHost.RemovedState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphHost.RemovedState and conformance GraphHost.RemovedState);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GraphHost.RemovedState and conformance GraphHost.RemovedState;
  if (!lazy protocol witness table cache variable for type GraphHost.RemovedState and conformance GraphHost.RemovedState)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GraphHost.RemovedState, &type metadata for GraphHost.RemovedState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphHost.RemovedState and conformance GraphHost.RemovedState);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GraphHost.RemovedState and conformance GraphHost.RemovedState;
  if (!lazy protocol witness table cache variable for type GraphHost.RemovedState and conformance GraphHost.RemovedState)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GraphHost.RemovedState, &type metadata for GraphHost.RemovedState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphHost.RemovedState and conformance GraphHost.RemovedState);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GraphHost.RemovedState and conformance GraphHost.RemovedState;
  if (!lazy protocol witness table cache variable for type GraphHost.RemovedState and conformance GraphHost.RemovedState)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GraphHost.RemovedState, &type metadata for GraphHost.RemovedState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphHost.RemovedState and conformance GraphHost.RemovedState);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GraphHost.ConstantID and conformance GraphHost.ConstantID()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GraphHost.ConstantID and conformance GraphHost.ConstantID;
  if (!lazy protocol witness table cache variable for type GraphHost.ConstantID and conformance GraphHost.ConstantID)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GraphHost.ConstantID, &type metadata for GraphHost.ConstantID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphHost.ConstantID and conformance GraphHost.ConstantID);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _GraphMutation_Style and conformance _GraphMutation_Style()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _GraphMutation_Style and conformance _GraphMutation_Style;
  if (!lazy protocol witness table cache variable for type _GraphMutation_Style and conformance _GraphMutation_Style)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _GraphMutation_Style, &type metadata for _GraphMutation_Style);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GraphMutation_Style and conformance _GraphMutation_Style);
  }
  return result;
}

double sub_234F64F3C@<D0>(_QWORD *a1@<X8>)
{
  double *Value;
  double result;

  Value = (double *)AGGraphGetValue();
  result = *Value;
  *a1 = *(_QWORD *)Value;
  return result;
}

uint64_t sub_234F64F74()
{
  return AGGraphSetValue();
}

uint64_t sub_234F64FD4@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + 28);
  return result;
}

_DWORD *sub_234F64FE0(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 28) = *result;
  return result;
}

uint64_t sub_234F64FF0()
{
  return AGGraphSetValue();
}

uint64_t sub_234F65054@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

_DWORD *sub_234F65060(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 32) = *result;
  return result;
}

_DWORD *sub_234F6506C@<X0>(_DWORD *a1@<X8>)
{
  _DWORD *result;

  result = (_DWORD *)AGGraphGetValue();
  *a1 = *result;
  return result;
}

uint64_t sub_234F650A4()
{
  return AGGraphSetValue();
}

uint64_t sub_234F65104@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + 36);
  return result;
}

_DWORD *sub_234F65110(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 36) = *result;
  return result;
}

uint64_t sub_234F6511C@<X0>(_QWORD *a1@<X8>)
{
  *a1 = *(_QWORD *)AGGraphGetValue();
  return swift_bridgeObjectRetain();
}

uint64_t sub_234F65154()
{
  return AGGraphSetValue();
}

uint64_t sub_234F651B4@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + 40);
  return result;
}

_DWORD *sub_234F651C0(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 40) = *result;
  return result;
}

uint64_t sub_234F651CC@<X0>(_QWORD *a1@<X8>)
{
  *a1 = *(_QWORD *)AGGraphGetValue();
  return swift_retain();
}

uint64_t sub_234F65204()
{
  return AGGraphSetValue();
}

uint64_t sub_234F65264@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + 44);
  return result;
}

_DWORD *sub_234F65270(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 44) = *result;
  return result;
}

_DWORD *sub_234F6527C@<X0>(_DWORD *a1@<X8>)
{
  _DWORD *result;

  result = (_DWORD *)AGGraphGetValue();
  *a1 = *result;
  return result;
}

uint64_t sub_234F652B4()
{
  return AGGraphSetValue();
}

uint64_t sub_234F65314@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + 48);
  return result;
}

_DWORD *sub_234F65320(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 48) = *result;
  return result;
}

_DWORD *sub_234F6532C@<X0>(_DWORD *a1@<X8>)
{
  _DWORD *result;

  result = (_DWORD *)AGGraphGetValue();
  *a1 = *result;
  return result;
}

uint64_t sub_234F65364()
{
  return AGGraphSetValue();
}

uint64_t sub_234F653C4@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + 52);
  return result;
}

_DWORD *sub_234F653D0(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 52) = *result;
  return result;
}

uint64_t sub_234F653DC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 169);
  return result;
}

void sub_234F65420(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  *(_BYTE *)(v3 + 169) = v2;
  GraphHost.updateRemovedState()();
}

uint64_t dispatch thunk of GraphDelegate.updateGraph<A>(body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of GraphDelegate.graphDidChange()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of GraphDelegate.preferencesDidChange()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of GraphDelegate.beginTransaction()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t method lookup function for GraphHost()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of GraphHost.__allocating_init(data:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t dispatch thunk of GraphHost.graphDelegate.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of GraphHost.parentHost.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of GraphHost.instantiateOutputs()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of GraphHost.uninstantiateOutputs()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of GraphHost.timeDidChange()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of GraphHost.isHiddenForReuseDidChange()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t destroy for GraphHost.Data(id *a1)
{

  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GraphHost.Data(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_OWORD *)(a1 + 28) = *(_OWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 44) = *(_QWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v6 = v3;
  v7 = v4;
  v8 = v5;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GraphHost.Data(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  v9 = v7;

  v10 = *(void **)(a2 + 16);
  v11 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  v12 = v10;

  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for GraphHost.Data(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  v5 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_OWORD *)(a1 + 28) = *(_OWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 44) = *(_QWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_release();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_release();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GraphHost.Data(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 104))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GraphHost.Data(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GraphHost.Data()
{
  return &type metadata for GraphHost.Data;
}

ValueMetadata *type metadata accessor for GraphHost.RemovedState()
{
  return &type metadata for GraphHost.RemovedState;
}

uint64_t storeEnumTagSinglePayload for GraphHost.ConstantID(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_234F658B4 + 4 * byte_2352B4FD9[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_234F658E8 + 4 * byte_2352B4FD4[v4]))();
}

uint64_t sub_234F658E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F658F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234F658F8);
  return result;
}

uint64_t sub_234F65904(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234F6590CLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_234F65910(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F65918(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GraphHost.ConstantID()
{
  return &type metadata for GraphHost.ConstantID;
}

uint64_t dispatch thunk of GraphMutation.apply()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of GraphMutation.combine<A>(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t storeEnumTagSinglePayload for _GraphMutation_Style(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_234F65990 + 4 * byte_2352B4FE3[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_234F659C4 + 4 * byte_2352B4FDE[v4]))();
}

uint64_t sub_234F659C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F659CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234F659D4);
  return result;
}

uint64_t sub_234F659E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234F659E8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_234F659EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F659F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for _GraphMutation_Style()
{
  return &type metadata for _GraphMutation_Style;
}

ValueMetadata *type metadata accessor for CustomGraphMutation()
{
  return &type metadata for CustomGraphMutation;
}

uint64_t dispatch thunk of TransactionHostProvider.mutationHost.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t destroy for AsyncTransaction()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeBufferWithCopyOfBuffer for AsyncTransaction(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AsyncTransaction(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AsyncTransaction(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AsyncTransaction()
{
  return &type metadata for AsyncTransaction;
}

ValueMetadata *type metadata accessor for ConstantKey()
{
  return &type metadata for ConstantKey;
}

uint64_t outlined assign with take of CanvasSymbols.Child(uint64_t a1, uint64_t a2)
{
  assignWithTake for CanvasSymbols.Child(a2, a1);
  return a2;
}

uint64_t outlined assign with take of TextEffectsAnimationController.Timing(uint64_t a1, uint64_t a2)
{
  assignWithTake for TextEffectsAnimationController.Timing(a2, a1);
  return a2;
}

uint64_t partial apply for specialized closure #1 in GraphDelegate.beginTransaction()()
{
  uint64_t v0;

  return specialized closure #1 in GraphDelegate.beginTransaction()(v0);
}

uint64_t partial apply for specialized closure #1 in closure #1 in GraphDelegate.beginTransaction()()
{
  return specialized closure #1 in closure #1 in GraphDelegate.beginTransaction()();
}

uint64_t outlined assign with take of DisplayList.ViewUpdater.ViewInfo(uint64_t a1, uint64_t a2)
{
  assignWithTake for DisplayList.ViewUpdater.ViewInfo(a2, a1);
  return a2;
}

uint64_t specialized static GraphHost.flushGlobalTransactions()()
{
  uint64_t result;
  char *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;

  if (one-time initialization token for pendingGlobalTransactions != -1)
LABEL_41:
    swift_once();
  result = swift_beginAccess();
  v1 = (char *)static GraphHost.pendingGlobalTransactions;
  v32 = *((_QWORD *)static GraphHost.pendingGlobalTransactions + 2);
  if (v32)
  {
    v2 = 0;
    static GraphHost.pendingGlobalTransactions = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
    v30 = v1;
    v31 = v1 + 32;
    while (1)
    {
      if (v2 >= *((_QWORD *)v1 + 2))
      {
        __break(1u);
        goto LABEL_41;
      }
      v5 = &v31[40 * v2];
      v7 = *((_QWORD *)v5 + 1);
      v6 = *((_QWORD *)v5 + 2);
      v8 = *((unsigned int *)v5 + 6);
      v9 = *((_QWORD *)v5 + 4);
      ObjectType = swift_getObjectType();
      v11 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      v12 = v11(ObjectType, v7);
      if (!v12)
        break;
      v13 = v12;
      v33 = v2;
      swift_retain_n();
      swift_bridgeObjectRetain();
      GraphHost.instantiateIfNeeded()();
      if (v6)
      {
        swift_beginAccess();
        AGGraphSetValue();
      }
      *(_BYTE *)(v13 + 152) = 1;
      swift_beginAccess();
      AGGraphGetValue();
      AGGraphSetValue();
      swift_retain();
      swift_bridgeObjectRetain();
      specialized closure #1 in withTransaction<A>(_:_:)(v6, v6, v8, v9);
      v14 = v13 + 160;
      v15 = *(id *)(v13 + 24);
      swift_beginAccess();
      v16 = 0;
      v17 = *(_QWORD *)(v13 + 160);
      do
      {
        *(_QWORD *)v14 = MEMORY[0x24BEE4AF8];
        v18 = *(_QWORD *)(v17 + 16);
        if (v18)
        {
          v19 = v17 + 40;
          do
          {
            v20 = *(void (**)(uint64_t))(v19 - 8);
            v21 = swift_retain();
            v20(v21);
            swift_release();
            v19 += 16;
            --v18;
          }
          while (v18);
        }
        ++v16;
        swift_bridgeObjectRelease();
        AGSubgraphUpdate();
        if (v16 == 8)
          break;
        v17 = *(_QWORD *)v14;
      }
      while (*(_QWORD *)(*(_QWORD *)v14 + 16));
      *(_BYTE *)(v13 + 152) = 0;

      if (v6)
        AGGraphSetValue();
      swift_bridgeObjectRelease();
      v22 = swift_release_n();
      v1 = v30;
      v2 = v33;
      if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 192))(v22))
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        goto LABEL_6;
      }
      v3 = v23;
      v4 = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v3 + 16))(v4, v3);
      swift_bridgeObjectRelease();
      swift_release();
      swift_unknownObjectRelease();
      swift_release();
LABEL_5:
      swift_unknownObjectRelease();
LABEL_6:
      if (++v2 == v32)
        return swift_bridgeObjectRelease();
    }
    swift_retain();
    swift_bridgeObjectRetain();
    _threadTransactionData();
    v24 = one-time initialization token for v5;
    swift_retain();
    if (v24 != -1)
      swift_once();
    v25 = static Semantics.v5;
    if (one-time initialization token for forced != -1)
      swift_once();
    swift_beginAccess();
    if (byte_25426FABC == 1)
    {
      if ((dyld_program_minos_at_least() & 1) == 0)
        goto LABEL_33;
    }
    else if (dword_25426FAB8 < v25)
    {
LABEL_33:
      _setThreadTransactionData();
      v26 = *(_QWORD *)(v9 + 16);
      if (v26)
      {
        v27 = (_QWORD *)(v9 + 32);
        swift_bridgeObjectRetain();
        do
        {
          v29 = v27[3];
          v28 = v27[4];
          __swift_project_boxed_opaque_existential_1(v27, v29);
          (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v29, v28);
          v27 += 5;
          --v26;
        }
        while (v26);
        swift_bridgeObjectRelease();
        v1 = v30;
      }
      _setThreadTransactionData();
      swift_release();
      swift_bridgeObjectRelease_n();
      swift_release_n();
      goto LABEL_5;
    }
    if (_threadTransactionData())
    {
      swift_unknownObjectRetain();
      swift_release();
      type metadata accessor for PropertyList.Element();
      swift_dynamicCastClassUnconditional();
    }
    else
    {
      swift_release();
    }
    PropertyList.merge(_:)(v6);
    goto LABEL_33;
  }
  return result;
}

uint64_t outlined assign with take of WeakBox<AnyLocationBase>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for WeakBox<AnyLocationBase>, (uint64_t (*)(uint64_t))type metadata accessor for AnyLocationBase, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for WeakBox);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of NamedImage.Cache.WeakCatalog(uint64_t a1, uint64_t a2)
{
  assignWithTake for NamedImage.Cache.WeakCatalog(a2, a1);
  return a2;
}

uint64_t outlined assign with take of NamedImage.BitmapInfo(uint64_t a1, uint64_t a2)
{
  assignWithTake for NamedImage.BitmapInfo(a2, a1);
  return a2;
}

uint64_t outlined assign with take of NamedImage.VectorInfo(uint64_t a1, uint64_t a2)
{
  assignWithTake for NamedImage.VectorInfo(a2, a1);
  return a2;
}

uint64_t outlined assign with take of NamedImage.DecodedInfo(uint64_t a1, uint64_t a2)
{
  assignWithTake for NamedImage.DecodedInfo(a2, a1);
  return a2;
}

uint64_t partial apply for closure #1 in closure #1 in GraphDelegate.beginTransaction()()
{
  uint64_t *v0;

  return closure #1 in closure #1 in GraphDelegate.beginTransaction()(v0[4], v0[2], v0[3]);
}

uint64_t sub_234F66324()
{
  return swift_deallocObject();
}

uint64_t sub_234F66334()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in variable initialization expression of static GraphHost.sharedGraph()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v1 = *(void **)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  swift_beginAccess();
  return handleTraceNotification(graph:token:)(v1, *(_DWORD *)(v2 + 16));
}

uint64_t partial apply for closure #1 in Attribute.init(value:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in Attribute.init(value:)(a1, *(_QWORD *)(v1 + 16));
}

ValueMetadata *type metadata accessor for InvalidatingGraphMutation()
{
  return &type metadata for InvalidatingGraphMutation;
}

ValueMetadata *type metadata accessor for EmptyGraphMutation()
{
  return &type metadata for EmptyGraphMutation;
}

uint64_t destroy for GlobalTransaction()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GlobalTransaction(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_unknownObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GlobalTransaction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for GlobalTransaction(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for GlobalTransaction()
{
  return &type metadata for GlobalTransaction;
}

uint64_t outlined assign with take of Text.Effect.BaseFragment(uint64_t a1, uint64_t a2)
{
  assignWithTake for Text.Effect.DrawableFragment(a2, a1);
  return a2;
}

uint64_t static ViewInputBoolFlag.value.getter()
{
  return 1;
}

uint64_t specialized static ViewInputFlag.evaluate(inputs:)(uint64_t *a1)
{
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v7 = *a1;
  v3 = v7;
  outlined retain of _GraphInputs((uint64_t)a1);
  outlined retain of ViewTransform((uint64_t)&v7);
  v4 = specialized find<A>(_:key:)(v3, v1);
  if (v4)
    v5 = *(unsigned __int8 *)(v4 + 72);
  else
    v5 = 0;
  outlined release of ViewTransform((uint64_t)&v7);
  outlined release of _GraphInputs((uint64_t)a1);
  return v5;
}

uint64_t static ViewInputFlag.evaluate(inputs:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v19 = a2;
  swift_getAssociatedTypeWitness();
  v18 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v18 - v9;
  v11 = *a1;
  v12 = *((_DWORD *)a1 + 2);
  v13 = a1[2];
  v14 = a1[5];
  v15 = swift_checkMetadataState();
  v21 = v11;
  v22 = v12;
  v23 = v13;
  v24 = *(_OWORD *)(a1 + 3);
  v25 = v14;
  _GraphInputs.subscript.getter(v15, v15, v18);
  (*(void (**)(uint64_t, uint64_t))(a3 + 48))(v19, a3);
  swift_getAssociatedConformanceWitness();
  LOBYTE(v14) = dispatch thunk of static Equatable.== infix(_:_:)();
  v16 = *(void (**)(char *, uint64_t))(v20 + 8);
  v16(v7, AssociatedTypeWitness);
  v16(v10, AssociatedTypeWitness);
  return v14 & 1;
}

uint64_t static ViewInputFlag._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized static ViewInputFlag._makeInputs(modifier:inputs:)(a2, a3, a4);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance VariantThatFitsFlag(_OWORD *a1)
{
  __int128 v1;
  _OWORD v3[3];

  v1 = a1[1];
  v3[0] = *a1;
  v3[1] = v1;
  v3[2] = a1[2];
  return specialized static ViewInputFlag.evaluate(inputs:)((uint64_t *)v3) & 1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance VariantThatFitsFlag(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance VariantThatFitsFlag(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t static ViewInputBoolFlag.defaultValue.getter()
{
  return 0;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance UnifiedHitTestingFeature(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance UnifiedHitTestingFeature(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance UnifiedHitTestingFeature(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance VariantThatFitsFlag(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance ImprovedButtonGestureFeature(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance UnifiedHitTestingFeature(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ImprovedButtonGestureFeature(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance VariantThatFitsFlag(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance EndedGestureWaitsForActiveFeature(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance VariantThatFitsFlag(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance GestureContainerFeature(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance UnifiedHitTestingFeature(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance GestureContainerFeature(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance VariantThatFitsFlag(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance GestureRecognizerBasedEvents(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance UnifiedHitTestingFeature(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance GestureRecognizerBasedEvents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance VariantThatFitsFlag(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance TextSelectionForbidden(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance UnifiedHitTestingFeature(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance TextSelectionForbidden(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance VariantThatFitsFlag(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance _SemanticFeature_v2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance UnifiedHitTestingFeature(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance _SemanticFeature_v2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance VariantThatFitsFlag(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance _SemanticFeature_v2_1(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance UnifiedHitTestingFeature(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance _SemanticFeature_v2_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance VariantThatFitsFlag(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance _SemanticFeature_v2_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance UnifiedHitTestingFeature(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance _SemanticFeature_v2_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance VariantThatFitsFlag(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance _SemanticFeature_v3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance UnifiedHitTestingFeature(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance _SemanticFeature_v3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance VariantThatFitsFlag(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance _SemanticFeature_v4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance UnifiedHitTestingFeature(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance _SemanticFeature_v4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance VariantThatFitsFlag(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance _SemanticFeature_v4_4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance UnifiedHitTestingFeature(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance _SemanticFeature_v4_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance VariantThatFitsFlag(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance _SemanticFeature_v5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance UnifiedHitTestingFeature(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance _SemanticFeature_v5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance VariantThatFitsFlag(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance _SemanticFeature_v5_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance UnifiedHitTestingFeature(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance _SemanticFeature_v5_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance VariantThatFitsFlag(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance _SemanticFeature_v6(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance UnifiedHitTestingFeature(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance _SemanticFeature_v6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance VariantThatFitsFlag(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance Semantics.DismissPopsInNavigationSplitViewRoots(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance UnifiedHitTestingFeature(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance Semantics.DismissPopsInNavigationSplitViewRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance VariantThatFitsFlag(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance DisabledFeature(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance VariantThatFitsFlag(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance EnabledFeature(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance UnifiedHitTestingFeature(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance EnabledFeature(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance VariantThatFitsFlag(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

BOOL static InvertedViewInputPredicate.evaluate(inputs:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v3 = *((_DWORD *)a1 + 2);
  v4 = a1[2];
  v5 = a1[5];
  v7 = *a1;
  v8 = v3;
  v9 = v4;
  v10 = *(_OWORD *)(a1 + 3);
  v11 = v5;
  return ((*(uint64_t (**)(uint64_t *))(a3 + 8))(&v7) & 1) == 0;
}

BOOL protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance InvertedViewInputPredicate<A>(uint64_t *a1, uint64_t a2)
{
  return static InvertedViewInputPredicate.evaluate(inputs:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

BOOL static InvertedViewInputPredicate<>.isEnabled.getter(uint64_t a1, uint64_t a2)
{
  return ((*(uint64_t (**)(void))(a2 + 16))() & 1) == 0;
}

uint64_t static InvertedViewInputPredicate<>.value.getter()
{
  return 0;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance <> InvertedViewInputPredicate<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;

  v8 = *(_QWORD *)(a4 - 8);
  v6 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for <> InvertedViewInputPredicate<A>, a3, &v8);
  return static ViewInputFlag._makeInputs(modifier:inputs:)(v6, a2, a3, v6);
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance <> InvertedViewInputPredicate<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  v5 = *(_QWORD *)(a2 - 8);
  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for <> InvertedViewInputPredicate<A>, a1, &v5);
  *a3 = 0;
  return result;
}

uint64_t static OrOperationViewInputPredicate.evaluate(inputs:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  char v14;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;

  v6 = *a1;
  v7 = *((_DWORD *)a1 + 2);
  v8 = a1[2];
  v9 = *((_DWORD *)a1 + 6);
  v10 = *((_DWORD *)a1 + 7);
  v11 = *((_DWORD *)a1 + 8);
  v12 = *((_DWORD *)a1 + 9);
  v13 = a1[5];
  v17 = *a1;
  v18 = v7;
  v19 = v8;
  v20 = v9;
  v21 = v10;
  v22 = v11;
  v23 = v12;
  v24 = v13;
  if (((*(uint64_t (**)(uint64_t *))(a4 + 8))(&v17) & 1) != 0)
  {
    v14 = 1;
  }
  else
  {
    v17 = v6;
    v18 = v7;
    v19 = v8;
    v20 = v9;
    v21 = v10;
    v22 = v11;
    v23 = v12;
    v24 = v13;
    v14 = (*(uint64_t (**)(uint64_t *, uint64_t))(a5 + 8))(&v17, a3);
  }
  return v14 & 1;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance OrOperationViewInputPredicate<A, B>(uint64_t *a1, uint64_t *a2)
{
  return static OrOperationViewInputPredicate.evaluate(inputs:)(a1, a2[2], a2[3], a2[4], a2[5]);
}

uint64_t static AndOperationViewInputPredicate.evaluate(inputs:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  char v14;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;

  v6 = *a1;
  v7 = *((_DWORD *)a1 + 2);
  v8 = a1[2];
  v9 = *((_DWORD *)a1 + 6);
  v10 = *((_DWORD *)a1 + 7);
  v11 = *((_DWORD *)a1 + 8);
  v12 = *((_DWORD *)a1 + 9);
  v13 = a1[5];
  v17 = *a1;
  v18 = v7;
  v19 = v8;
  v20 = v9;
  v21 = v10;
  v22 = v11;
  v23 = v12;
  v24 = v13;
  if (((*(uint64_t (**)(uint64_t *))(a4 + 8))(&v17) & 1) != 0)
  {
    v17 = v6;
    v18 = v7;
    v19 = v8;
    v20 = v9;
    v21 = v10;
    v22 = v11;
    v23 = v12;
    v24 = v13;
    v14 = (*(uint64_t (**)(uint64_t *, uint64_t))(a5 + 8))(&v17, a3);
  }
  else
  {
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance AndOperationViewInputPredicate<A, B>(uint64_t *a1, uint64_t *a2)
{
  return static AndOperationViewInputPredicate.evaluate(inputs:)(a1, a2[2], a2[3], a2[4], a2[5]);
}

BOOL static TypesMatch.evaluate(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a2 == a3;
}

BOOL protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance TypesMatch<A, B>(uint64_t a1, uint64_t a2)
{
  return static TypesMatch.evaluate(inputs:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t static IsVisionEnabledPredicate.evaluate(inputs:)()
{
  return 0;
}

uint64_t _ViewInputs.isVisionEnabled.getter()
{
  return 0;
}

uint64_t _ViewListInputs.isVisionEnabled.getter()
{
  return 0;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance UnifiedHitTestingFeature(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *))
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;

  v6 = swift_retain();
  LOBYTE(a4) = a4(v6, v4, &v8);
  swift_release();
  return a4 & 1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance WithinAccessibilityRotor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance VariantThatFitsFlag(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance VariantThatFitsFlag(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t *))
{
  uint64_t v5;
  uint64_t v9;

  swift_retain();
  a5(a2, v5, 1, &v9);
  return swift_release();
}

uint64_t protocol witness for static ViewInputFlag.value.getter in conformance BothFeatures<A, B>@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for BothFeatures<A, B>, a1);
  *a2 = 1;
  return result;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance BothFeatures<A, B>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for BothFeatures<A, B>);
  return static ViewInputFlag.evaluate(inputs:)(a1, a2, v4);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance BothFeatures<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for BothFeatures<A, B>, a3);
  return specialized static ViewInputFlag._makeInputs(modifier:inputs:)(a2, a3, v5);
}

uint64_t specialized static ViewInputFlag._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  char *v8;
  Swift::Int v9;
  uint64_t v11;

  swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v8 = (char *)&v11 - v7;
  v9 = swift_checkMetadataState();
  (*(void (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3);
  return _GraphInputs.subscript.setter((uint64_t)v8, v9, v9, v5);
}

uint64_t instantiation function for generic protocol witness table for <> InvertedViewInputPredicate<A>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v8 = *a3;
  v5 = v8;
  *(_QWORD *)(a1 + 8) = MEMORY[0x23B7C9C04](&protocol conformance descriptor for <> InvertedViewInputPredicate<A>, a2, &v8);
  v7 = v5;
  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for <> InvertedViewInputPredicate<A>, a2, &v7);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

{
  uint64_t result;
  uint64_t v5;

  v5 = *a3;
  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for <> InvertedViewInputPredicate<A>, a2, &v5);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

{
  uint64_t result;
  uint64_t v5;

  v5 = *a3;
  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for <> InvertedViewInputPredicate<A>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;
  uint64_t v5;

  v5 = *a3;
  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for <> InvertedViewInputPredicate<A>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for ViewInputFlag.Input : ViewInput in <> InvertedViewInputPredicate<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a3 - 8);
  return MEMORY[0x23B7C9C04](&protocol conformance descriptor for <> InvertedViewInputPredicate<A>, a1, &v4);
}

uint64_t dispatch thunk of static ViewInputPredicate.evaluate(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of static ViewInputFlag.value.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of ViewInputFlag.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t type metadata accessor for InvertedViewInputPredicate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InvertedViewInputPredicate);
}

void type metadata accessor for OrOperationViewInputPredicate()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void type metadata accessor for AndOperationViewInputPredicate()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t type metadata accessor for TypesMatch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TypesMatch);
}

ValueMetadata *type metadata accessor for IsVisionEnabledPredicate()
{
  return &type metadata for IsVisionEnabledPredicate;
}

_UNKNOWN **sub_234F67168()
{
  return &protocol witness table for InvertedViewInputPredicate<A>;
}

_UNKNOWN **sub_234F67174()
{
  return &protocol witness table for OrOperationViewInputPredicate<A, B>;
}

BOOL static VectorImageLayer.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

id CUINamedVectorGlyph.image(at:value:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  void *v5;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  id v18;
  id v19;
  id v20;

  if (one-time initialization token for valueLock != -1)
    swift_once();
  v11 = (void *)static CUINamedVectorGlyph.valueLock;
  objc_msgSend((id)static CUINamedVectorGlyph.valueLock, sel_lock);
  objc_msgSend(v5, sel_variableMinValue);
  v13 = v12;
  objc_msgSend(v5, sel_variableMaxValue);
  v15 = v14;
  if ((a5 & 0x100000000) != 0)
    v16 = INFINITY;
  else
    v16 = *(float *)&a5;
  v17 = 0.0;
  if ((a5 & 0x100000000) != 0)
    v17 = INFINITY;
  objc_msgSend(v5, sel_setVariableMinValue_, v17);
  objc_msgSend(v5, sel_setVariableMaxValue_, v16);
  if ((a4 & 1) != 0)
  {
    v19 = objc_msgSend(objc_retainAutorelease(v5), sel_image);
    v18 = v19;
    if (v19)
      v20 = v19;
  }
  else
  {
    v18 = objc_msgSend(v5, sel_rasterizeImageUsingScaleFactor_forTargetSize_, *(double *)&a3, *(double *)&a1, *(double *)&a2);
  }
  objc_msgSend(v5, sel_setVariableMinValue_, v13);
  objc_msgSend(v5, sel_setVariableMaxValue_, v15);
  objc_msgSend(v11, sel_unlock);
  return v18;
}

uint64_t VectorImageLayer.image(size:imageScale:prefersMask:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 104))();
}

uint64_t VectorImageLayer.size.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 88))();
}

uint64_t VectorImageLayer.displayList.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 96))();
}

void VectorImageLayer.init(image:location:size:)(void *a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  CGPDFDocument *v13;
  CGPDFDocument *v14;
  CGPDFPage *v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  id v18;
  char v19;
  char v20;
  uint64_t v21;
  void *v22;
  id v23;
  CGPDFPage *v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  char v27;
  char v28;
  uint64_t v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v9 = *a2;
  objc_opt_self();
  v10 = swift_dynamicCastObjCClass();
  if (!v10)
  {
LABEL_13:
    objc_opt_self();
    v21 = swift_dynamicCastObjCClass();
    if (v21)
    {
      v22 = (void *)v21;
      v23 = a1;
      v24 = (CGPDFPage *)objc_msgSend(v22, sel_svgDocument);
      if (v24)
      {
        v15 = v24;
        if ((unint64_t)v9 >= 2)
        {
          v25 = one-time initialization token for sharedCache;
          v26 = v9;
          if (v25 != -1)
            swift_once();
          swift_retain();
          swift_retain();
          v18 = NamedImage.Cache.subscript.getter(v26);
          v28 = v27;
          swift_release();
          swift_release();
          if (v18)
          {

            if ((v28 & 1) != 0)
            {
LABEL_22:
              outlined consume of Image.Location(v9);
              type metadata accessor for SVGImageContents();
              goto LABEL_23;
            }
            v23 = v18;
          }
        }

        v18 = 0;
        goto LABEL_22;
      }

      outlined consume of Image.Location(v9);
    }
    else
    {

      outlined consume of Image.Location(v9);
    }
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return;
  }
  v11 = (void *)v10;
  v12 = a1;
  v13 = (CGPDFDocument *)objc_msgSend(v11, sel_pdfDocument);
  if (!v13
    || (v14 = v13, v15 = CGPDFDocumentGetPage(v13, 1uLL), v14, !v15))
  {

    goto LABEL_13;
  }
  if ((unint64_t)v9 < 2)
    goto LABEL_10;
  v16 = one-time initialization token for sharedCache;
  v17 = v9;
  if (v16 != -1)
    swift_once();
  swift_retain();
  swift_retain();
  v18 = NamedImage.Cache.subscript.getter(v17);
  v20 = v19;
  swift_release();
  swift_release();
  if (!v18)
    goto LABEL_10;

  if ((v20 & 1) == 0)
  {
    v12 = v18;
LABEL_10:

    v18 = 0;
  }
  outlined consume of Image.Location(v9);
  type metadata accessor for PDFImageContents();
LABEL_23:
  v29 = swift_allocObject();
  *(_QWORD *)(v29 + 48) = v15;
  *(_QWORD *)(v29 + 56) = v18;
  *(_QWORD *)(v29 + 40) = 0;
  *(double *)(v29 + 24) = a4;
  *(double *)(v29 + 32) = a5;
  *(_QWORD *)(v29 + 16) = MEMORY[0x24BEE4B00];
  v30 = objc_msgSend(a1, sel_name);
  if (v30)
  {
    v31 = v30;
    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v34 = v33;

  }
  else
  {

    v32 = 0;
    v34 = 0;
  }
  *(_QWORD *)a3 = v29;
  *(_QWORD *)(a3 + 8) = v9;
  *(_QWORD *)(a3 + 16) = v32;
  *(_QWORD *)(a3 + 24) = v34;
}

uint64_t type metadata accessor for SVGImageContents()
{
  return objc_opt_self();
}

uint64_t VectorImageLayer.contents.getter()
{
  return swift_retain();
}

uint64_t VectorImageLayer.contents.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*VectorImageLayer.contents.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t VectorImageLayer.init(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  a2[1] = 2;
  a2[2] = 0;
  a2[3] = 0;
  return result;
}

uint64_t VectorImageLayer.init(pdfPage:size:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  return VectorImageLayer.init(pdfPage:size:)(a1, (void (*)(_QWORD))type metadata accessor for PDFImageContents, a2, a3, a4);
}

uint64_t VectorImageLayer.init(svgDocument:size:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  return VectorImageLayer.init(pdfPage:size:)(a1, (void (*)(_QWORD))type metadata accessor for SVGImageContents, a2, a3, a4);
}

uint64_t VectorImageLayer.init(pdfPage:size:)@<X0>(uint64_t a1@<X0>, void (*a2)(_QWORD)@<X1>, uint64_t *a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t result;

  a2(0);
  result = swift_allocObject();
  *(_QWORD *)(result + 48) = a1;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(double *)(result + 24) = a4;
  *(double *)(result + 32) = a5;
  *(_QWORD *)(result + 16) = MEMORY[0x24BEE4B00];
  *a3 = result;
  a3[1] = 2;
  a3[2] = 0;
  a3[3] = 0;
  return result;
}

id VectorImageLayer.location.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 8);
  *a1 = v2;
  return outlined copy of Image.Location?(v2);
}

void VectorImageLayer.location.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *a1;
  outlined consume of Image.Location?(*(id *)(v1 + 8));
  *(_QWORD *)(v1 + 8) = v2;
}

uint64_t (*VectorImageLayer.location.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t VectorImageLayer.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t VectorImageLayer.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*VectorImageLayer.name.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void VectorImageLayer.hash(into:)()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int VectorImageLayer.hashValue.getter()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t VectorImageLayer.encode(to:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;
  unint64_t v12;
  unint64_t v13;

  v4 = *v1;
  (*(void (**)(void))(*(_QWORD *)*v1 + 96))();
  v5 = specialized ProtobufEncoder.messageField<A>(_:_:)(1);
  if (v2)
    return swift_unknownObjectRelease();
  v6 = (*(double (**)(uint64_t))(*(_QWORD *)v4 + 88))(v5);
  v8 = v7;
  ProtobufEncoder.encodeVarint(_:)(0x12uLL);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD **)(a1 + 24);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
    v10 = (_QWORD *)result;
  }
  v13 = v10[2];
  v12 = v10[3];
  if (v13 >= v12 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v10);
    v10 = (_QWORD *)result;
  }
  v10[2] = v13 + 1;
  v10[v13 + 4] = v9;
  *(_QWORD *)(a1 + 24) = v10;
  if (!__OFADD__(v9, 1))
  {
    *(_QWORD *)(a1 + 8) = v9 + 1;
    CGSize.encode(to:)((double *)a1, v6, v8);
    ProtobufEncoder.endLengthDelimited()();
    return swift_unknownObjectRelease();
  }
  __break(1u);
  return result;
}

double *VectorImageLayer.init(from:)@<X0>(_QWORD *a1@<X0>, double **a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  double *result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  double v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v5 = a1[1];
  v6 = a1[2];
  if (v5 < v6)
  {
    v7 = 0;
    v8 = 0.0;
    v9 = 0;
    while (1)
    {
      v12 = a1[3];
      if (!v12)
        goto LABEL_12;
      v13 = a1[4];
      if (v5 >= v13)
        break;
LABEL_14:
      if (v12 >> 3 == 2)
      {
        if ((v12 & 7) != 2)
          goto LABEL_53;
        v23 = (_QWORD *)a1[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23[2] + 1, 1, v23);
        v25 = v23[2];
        v24 = v23[3];
        if (v25 >= v24 >> 1)
          v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v24 > 1), v25 + 1, 1, v23);
        v23[2] = v25 + 1;
        v23[v25 + 4] = v6;
        a1[5] = v23;
        v26 = ProtobufDecoder.decodeVarint()();
        if (v2)
          return (double *)swift_unknownObjectRelease();
        if (v26 < 0)
          goto LABEL_62;
        v27 = a1[1] + v26;
        if (v6 < v27)
          goto LABEL_53;
        a1[2] = v27;
        v28 = specialized CGPoint.init(from:)(a1);
        v30 = (_QWORD *)a1[5];
        if (!v30[2])
          goto LABEL_64;
        v8 = v28;
        v9 = v29;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v31 = v30[2];
          if (!v31)
            goto LABEL_52;
        }
        else
        {
          v30 = specialized _ArrayBuffer._consumeAndCreateNew()(v30);
          v31 = v30[2];
          if (!v31)
          {
LABEL_52:
            __break(1u);
LABEL_53:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            swift_willThrow();
            return (double *)swift_unknownObjectRelease();
          }
        }
        v32 = v31 - 1;
        v33 = v30[v32 + 4];
        v30[2] = v32;
        a1[5] = v30;
        a1[2] = v33;
      }
      else if (v12 >> 3 == 1)
      {
        if ((v12 & 7) != 2)
          goto LABEL_53;
        v14 = (_QWORD *)a1[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
        v16 = v14[2];
        v15 = v14[3];
        if (v16 >= v15 >> 1)
          v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v14);
        v14[2] = v16 + 1;
        v14[v16 + 4] = v6;
        a1[5] = v14;
        v17 = ProtobufDecoder.decodeVarint()();
        if (v2)
          return (double *)swift_unknownObjectRelease();
        if (v17 < 0)
        {
          __break(1u);
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
LABEL_64:
          __break(1u);
LABEL_65:
          __break(1u);
LABEL_66:
          __break(1u);
          __break(1u);
          v35 = specialized _ArrayBuffer._consumeAndCreateNew()(a2);
          v36 = v35[2];
          if (!v36)
          {
            __break(1u);
            v35 = (_QWORD *)a1[5];
            if (v35[2])
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
              {
                v36 = v35[2];
                if (v36)
                  goto LABEL_60;
LABEL_70:
                __break(1u);
                JUMPOUT(0x234F67EA0);
              }
            }
            else
            {
              __break(1u);
            }
            v35 = specialized _ArrayBuffer._consumeAndCreateNew()(v35);
            v36 = v35[2];
            if (!v36)
              goto LABEL_70;
          }
LABEL_60:
          v37 = v36 - 1;
          v38 = v35[v37 + 4];
          v35[2] = v37;
          result = (double *)swift_unknownObjectRelease();
          a1[5] = v35;
          a1[2] = v38;
          return result;
        }
        v18 = a1[1] + v17;
        if (v6 < v18)
          goto LABEL_53;
        a1[2] = v18;
        CodableRBDisplayListContents.init(from:)((uint64_t)a1, &v39);
        v19 = (_QWORD *)a1[5];
        if (!v19[2])
          goto LABEL_63;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v20 = v19[2];
          if (!v20)
            goto LABEL_65;
        }
        else
        {
          v19 = specialized _ArrayBuffer._consumeAndCreateNew()(v19);
          v20 = v19[2];
          if (!v20)
            goto LABEL_65;
        }
        v21 = v20 - 1;
        v22 = v19[v21 + 4];
        v19[2] = v21;
        swift_unknownObjectRelease();
        a1[5] = v19;
        a1[2] = v22;
        v7 = v39;
      }
      else
      {
        switch(v12 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (v2)
              return (double *)swift_unknownObjectRelease();
            break;
          case 1uLL:
            v11 = a1[1] + 8;
            if (v6 >= v11)
              goto LABEL_6;
            goto LABEL_53;
          case 2uLL:
            v34 = ProtobufDecoder.decodeVarint()();
            if (v2)
              return (double *)swift_unknownObjectRelease();
            if (v34 < 0)
              goto LABEL_66;
            v11 = a1[1] + v34;
            if (v6 < v11)
              goto LABEL_53;
LABEL_6:
            a1[1] = v11;
            break;
          case 5uLL:
            v11 = a1[1] + 4;
            if (v6 < v11)
              goto LABEL_53;
            goto LABEL_6;
          default:
            goto LABEL_53;
        }
      }
      v5 = a1[1];
      v6 = a1[2];
      if (v5 >= v6)
      {
        a1[3] = 0;
        if (!v7)
          goto LABEL_4;
        type metadata accessor for DisplayListImageContents();
        result = (double *)swift_allocObject();
        result[4] = v8;
        *((_QWORD *)result + 5) = v9;
        *((_QWORD *)result + 2) = MEMORY[0x24BEE4B00];
        *((_QWORD *)result + 3) = v7;
        *a2 = result;
        a2[1] = (double *)2;
        a2[2] = 0;
        a2[3] = 0;
        return result;
      }
    }
    if (v13 < v5)
      goto LABEL_53;
    a1[3] = 0;
LABEL_12:
    v12 = ProtobufDecoder.decodeVarint()();
    if (v2)
      return (double *)swift_unknownObjectRelease();
    if (v12 < 8)
      goto LABEL_53;
    goto LABEL_14;
  }
  a1[3] = 0;
LABEL_4:
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  return (double *)swift_willThrow();
}

uint64_t DisplayListImageContents.__allocating_init(displayList:size:)(uint64_t a1, double a2, double a3)
{
  uint64_t result;

  result = swift_allocObject();
  *(double *)(result + 32) = a2;
  *(double *)(result + 40) = a3;
  *(_QWORD *)(result + 16) = MEMORY[0x24BEE4B00];
  *(_QWORD *)(result + 24) = a1;
  return result;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance VectorImageLayer(uint64_t a1)
{
  return VectorImageLayer.encode(to:)(a1);
}

double *protocol witness for ProtobufDecodableMessage.init(from:) in conformance VectorImageLayer@<X0>(_QWORD *a1@<X0>, double **a2@<X8>)
{
  return VectorImageLayer.init(from:)(a1, a2);
}

uint64_t VectorImageContents.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t VectorImageContents.init()()
{
  uint64_t v0;

  return v0;
}

void VectorImageContents.size.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void VectorImageContents.displayList.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void VectorImageContents.image(size:imageScale:prefersMask:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t VectorImageContents.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t VectorImageContents.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

Swift::Void __swiftcall CachedVectorImageContents.draw(in:)(CGContextRef in)
{
  uint64_t v1;

  objc_msgSend((id)(*(uint64_t (**)(void))(*(_QWORD *)v1 + 96))(), sel_renderInContext_options_, in, 0);
  swift_unknownObjectRelease();
}

CGImageRef CachedVectorImageContents.image(size:imageScale:prefersMask:)(char a1, double a2, double a3, double a4)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  char v11;
  double v12;
  double v13;
  double v14;
  BOOL v15;
  unint64_t v16;
  char v17;
  CGImageRef Image;
  CGImage *v19;
  double v20;
  double v21;
  size_t v22;
  size_t v23;
  CGColorSpace *v24;
  uint32_t v25;
  CGContext *v26;
  CGContext *v27;
  char v28;
  CGImage *v29;

  v6 = v4;
  v11 = a1 ^ 1;
  v12 = (*(double (**)(void))(*v4 + 88))();
  v14 = v13;
  v15 = v13 != a3 || v12 != a2;
  if (!v15)
  {
    swift_beginAccess();
    v4 = (_QWORD *)v4[2];
    if (v4[2])
    {
      v16 = specialized __RawDictionaryStorage.find<A>(_:)(v11 & 1);
      if ((v17 & 1) != 0)
      {
        Image = *(CGImageRef *)(v4[7] + 8 * v16);
        swift_endAccess();
        v19 = Image;
        return Image;
      }
    }
    swift_endAccess();
  }
  v20 = ceil(a2 * a4);
  if ((~*(_QWORD *)&v20 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v20 <= -9.22337204e18)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v20 >= 9.22337204e18)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v21 = ceil(a3 * a4);
  if ((~*(_QWORD *)&v21 & 0x7FF0000000000000) == 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v21 <= -9.22337204e18)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (v21 >= 9.22337204e18)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    swift_once();
    goto LABEL_18;
  }
  v4 = (_QWORD *)(uint64_t)v20;
  v5 = (uint64_t)v21;
  if ((a1 & 1) != 0)
  {
    v22 = (uint64_t)v20;
    v23 = (uint64_t)v21;
    v24 = 0;
    v25 = 7;
    goto LABEL_19;
  }
  if (one-time initialization token for sRGB != -1)
    goto LABEL_33;
LABEL_18:
  v24 = (CGColorSpace *)static CGImageRef.sRGB;
  v22 = (size_t)v4;
  v23 = v5;
  v25 = 8193;
LABEL_19:
  v26 = _CGBitmapContextCreate(v22, v23, v24, v25);
  v27 = v26;
  if (!v26)
    return 0;
  CGContextScaleCTM(v26, (double)(uint64_t)v4 / a2, (double)v5 / a3);
  CGContextScaleCTM(v27, a2 / v12, a3 / v14);
  (*(void (**)(CGContext *))(*v6 + 120))(v27);
  Image = CGBitmapContextCreateImage(v27);

  if (Image)
    v28 = v15;
  else
    v28 = 1;
  if ((v28 & 1) == 0)
  {
    swift_beginAccess();
    v29 = Image;
    specialized Dictionary.subscript.setter((uint64_t)Image, v11 & 1);
    swift_endAccess();
  }
  return Image;
}

uint64_t CachedVectorImageContents.__allocating_init()()
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = MEMORY[0x24BEE4B00];
  return result;
}

uint64_t CachedVectorImageContents.init()()
{
  uint64_t v0;
  uint64_t result;

  result = v0;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4B00];
  return result;
}

uint64_t type metadata accessor for PDFImageContents()
{
  return objc_opt_self();
}

uint64_t CachedVectorImageContents.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t CachedVectorImageContents.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

id one-time initialization function for valueLock()
{
  id result;

  result = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1648]), sel_init);
  static CUINamedVectorGlyph.valueLock = (uint64_t)result;
  return result;
}

uint64_t DrawableImageContents.displayList.getter()
{
  _QWORD *v0;
  id v1;
  double v2;
  id v3;
  id v4;
  uint64_t result;

  if (v0[5])
    return swift_unknownObjectRetain();
  v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EEF8]), sel_init);
  objc_msgSend(v1, sel_setDefaultColorSpace_, 1);
  LODWORD(v2) = 1.0;
  v3 = objc_msgSend(v1, sel_beginCGContextWithAlpha_, v2);
  (*(void (**)(void))(*v0 + 120))();
  objc_msgSend(v1, sel_endCGContext);
  v4 = objc_msgSend(v1, sel_moveContents);

  v0[5] = v4;
  swift_unknownObjectRelease();
  result = v0[5];
  if (result)
    return swift_unknownObjectRetain();
  __break(1u);
  return result;
}

void DrawableImageContents.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t DrawableImageContents.__ivar_destroyer()
{
  return swift_unknownObjectRelease();
}

uint64_t DrawableImageContents.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

void PDFImageContents.draw(in:)(CGContext *a1)
{
  uint64_t v1;
  CGPDFPage *v3;
  CGAffineTransform v4;
  CGRect v5;

  CGContextSaveGState(a1);
  v3 = *(CGPDFPage **)(v1 + 48);
  v5.size.width = *(CGFloat *)(v1 + 24);
  v5.size.height = *(CGFloat *)(v1 + 32);
  v5.origin.x = 0.0;
  v5.origin.y = 0.0;
  CGPDFPageGetDrawingTransform(&v4, v3, kCGPDFCropBox, v5, 0, 1);
  CGContextConcatCTM(a1, &v4);
  CGContextDrawPDFPage(a1, v3);
  CGContextRestoreGState(a1);
}

void PDFImageContents.__ivar_destroyer()
{
  uint64_t v0;

}

uint64_t SVGImageContents.draw(in:)()
{
  return CGContextDrawSVGDocument();
}

uint64_t PDFImageContents.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t DisplayListImageContents.init(displayList:size:)(uint64_t a1, double a2, double a3)
{
  uint64_t v3;

  *(double *)(v3 + 32) = a2;
  *(double *)(v3 + 40) = a3;
  *(_QWORD *)(v3 + 16) = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v3 + 24) = a1;
  return v3;
}

double DisplayListImageContents.size.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

uint64_t DisplayListImageContents.displayList.getter()
{
  return swift_unknownObjectRetain();
}

void DisplayListImageContents.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void DisplayListImageContents.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t DisplayListImageContents.__ivar_destroyer()
{
  return swift_unknownObjectRelease();
}

uint64_t DisplayListImageContents.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t DisplayListImageContents.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DisplayListImageContents()
{
  return objc_opt_self();
}

CGContextRef _CGBitmapContextCreate(size_t width, size_t height, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return CGBitmapContextCreate(0, width, height, 8uLL, 0, space, bitmapInfo);
}

unint64_t lazy protocol witness table accessor for type VectorImageLayer and conformance VectorImageLayer()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VectorImageLayer and conformance VectorImageLayer;
  if (!lazy protocol witness table cache variable for type VectorImageLayer and conformance VectorImageLayer)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for VectorImageLayer, &type metadata for VectorImageLayer);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VectorImageLayer and conformance VectorImageLayer);
  }
  return result;
}

uint64_t destroy for VectorImageLayer(uint64_t a1)
{
  void *v2;

  swift_release();
  v2 = *(void **)(a1 + 8);
  if ((unint64_t)v2 >= 3)

  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for VectorImageLayer(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  id v5;
  uint64_t v6;

  v4 = (void *)a2[1];
  *a1 = *a2;
  swift_retain();
  if ((unint64_t)v4 >= 2)
  {
    if (v4 == (void *)2)
    {
      a1[1] = 2;
    }
    else
    {
      a1[1] = v4;
      v5 = v4;
    }
  }
  else
  {
    a1[1] = v4;
  }
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for VectorImageLayer(_QWORD *a1, _QWORD *a2)
{
  unint64_t *v4;
  void *v5;
  unint64_t v6;
  id v7;
  id v9;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v4 = a1 + 1;
  v5 = (void *)a1[1];
  v6 = a2[1];
  if (v5 != (void *)2)
  {
    if (v6 == 2)
    {
      outlined destroy of Image.Location((id *)a1 + 1);
    }
    else
    {
      if ((unint64_t)v5 < 2)
      {
        if (v6 < 2)
          goto LABEL_13;
        goto LABEL_9;
      }
      if (v6 >= 2)
      {
        *v4 = v6;
        v9 = (id)v6;

        goto LABEL_14;
      }

    }
    v6 = a2[1];
    goto LABEL_13;
  }
  if (v6 < 2)
  {
LABEL_13:
    *v4 = v6;
    goto LABEL_14;
  }
  if (v6 == 2)
  {
    v6 = 2;
    goto LABEL_13;
  }
LABEL_9:
  *v4 = v6;
  v7 = (id)v6;
LABEL_14:
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for VectorImageLayer(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  swift_release();
  v5 = a1 + 1;
  v4 = (void *)a1[1];
  v6 = a2[1];
  if (v4 == (void *)2)
  {
    if (v6 != 2)
    {
      *v5 = v6;
      goto LABEL_12;
    }
LABEL_6:
    *v5 = 2;
    goto LABEL_12;
  }
  if (v6 == 2)
  {
    outlined destroy of Image.Location((id *)a1 + 1);
    goto LABEL_6;
  }
  if ((unint64_t)v4 >= 2)
  {
    if (v6 >= 2)
    {
      *v5 = v6;

    }
    else
    {

      *v5 = v6;
    }
  }
  else
  {
    *v5 = v6;
  }
LABEL_12:
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for VectorImageLayer()
{
  return &type metadata for VectorImageLayer;
}

uint64_t type metadata accessor for VectorImageContents()
{
  return objc_opt_self();
}

uint64_t method lookup function for VectorImageContents()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VectorImageContents.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of VectorImageContents.size.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of VectorImageContents.displayList.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of VectorImageContents.image(size:imageScale:prefersMask:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t type metadata accessor for CachedVectorImageContents()
{
  return objc_opt_self();
}

uint64_t method lookup function for CachedVectorImageContents()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for DrawableImageContents()
{
  return objc_opt_self();
}

uint64_t method lookup function for DisplayListImageContents()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DisplayListImageContents.__allocating_init(displayList:size:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t storeEnumTagSinglePayload for CachedVectorImageContents.CacheKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_234F68A98 + 4 * byte_2352B57B5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_234F68ACC + 4 * asc_2352B57B0[v4]))();
}

uint64_t sub_234F68ACC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F68AD4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234F68ADCLL);
  return result;
}

uint64_t sub_234F68AE8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234F68AF0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_234F68AF4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F68AFC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CachedVectorImageContents.CacheKey()
{
  return &type metadata for CachedVectorImageContents.CacheKey;
}

void PreferenceList.init()(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL PreferenceList.contains<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  _BOOL8 result;

  v3 = *v2;
  if (!*v2)
    return 0;
  if (*(_QWORD *)(v3 + 16) == a2)
    return 1;
  do
  {
    v3 = *(_QWORD *)(v3 + 32);
    result = v3 != 0;
  }
  while (v3 && *(_QWORD *)(v3 + 16) != a2);
  return result;
}

uint64_t PreferenceList.valueIfPresent<A>(for:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[6];

  v7 = *v3;
  if (*v3)
  {
    while (*(_QWORD *)(v7 + 16) != a1)
    {
      v7 = *(_QWORD *)(v7 + 32);
      if (!v7)
        goto LABEL_7;
    }
    v7 = swift_retain();
LABEL_7:
    v19[5] = v7;
    MEMORY[0x24BDAC7A8](v7);
    v19[2] = a1;
    v19[3] = a2;
    type metadata accessor for _PreferenceNode(255, a1, a2, v13);
    type metadata accessor for Optional();
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v17 = type metadata accessor for PreferenceList.Value(0, AssociatedTypeWitness, v15, v16);
    _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in PreferenceList.valueIfPresent<A>(for:), (uint64_t)v19, MEMORY[0x24BEE4078], v17, v18, a3);
    return swift_release();
  }
  else
  {
    v8 = swift_getAssociatedTypeWitness();
    v11 = type metadata accessor for PreferenceList.Value(0, v8, v9, v10);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a3, 1, 1, v11);
  }
}

uint64_t PreferenceList.Value.init(value:seed:)@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v6 = *a2;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a4, a1);
  result = type metadata accessor for PreferenceList.Value(0, a3, v7, v8);
  *(_DWORD *)(a4 + *(int *)(result + 28)) = v6;
  return result;
}

uint64_t PreferenceList.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  specialized PreferenceList.subscript.setter(a1, a2, a3, a4);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = type metadata accessor for PreferenceList.Value(0, AssociatedTypeWitness, v6, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
}

uint64_t PreferenceList.modifyValue<A>(for:transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t (*v17)(char *);
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t (*v28)(char *);
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;

  v5 = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v30 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11 = (char *)&v27 - v10;
  v14 = type metadata accessor for PreferenceList.Value(0, AssociatedTypeWitness, v12, v13);
  v29 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v27 - v15;
  v17 = *(uint64_t (**)(char *))a2;
  v27 = *(_QWORD *)(a2 + 8);
  v28 = v17;
  v18 = *(_DWORD *)(a2 + 16);
  v32 = *v5;
  PreferenceList.subscript.getter(a3, a4, (uint64_t)&v27 - v15);
  v19 = *(int *)(v14 + 28);
  v20 = *(_DWORD *)&v16[v19];
  if (v20 != -1 && v18 != 0)
  {
    if (v20)
      v22 = v18 == -1;
    else
      v22 = 1;
    if (!v22)
      v18 = merge32(_:_:)(*(unsigned int *)&v16[v19], v18);
    *(_DWORD *)&v16[v19] = v18;
    v20 = v18;
  }
  v23 = v28(v16);
  PreferenceList.removeValue<A>(for:)(v23, a3);
  type metadata accessor for _PreferenceNode(0, a3, a4, v24);
  (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v11, v16, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v16, v14);
  v31 = v20;
  v25 = *v5;
  swift_allocObject();
  result = _PreferenceNode.init(value:seed:next:)((uint64_t)v11, &v31, v25);
  *v5 = result;
  return result;
}

uint64_t PreferenceList.subscript.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9.n128_f64[0] = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11 = (char *)&v19 - v10;
  v12 = *v3;
  if (*v3)
  {
    while (*(_QWORD *)(v12 + 16) != a1)
    {
      v12 = *(_QWORD *)(v12 + 32);
      if (!v12)
        goto LABEL_4;
    }
    v14 = v12 + *(_QWORD *)(*(_QWORD *)v12 + 176);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    swift_retain();
    v15(v11, v14, AssociatedTypeWitness);
    v13 = *(_DWORD *)(v12 + 24);
    swift_release();
  }
  else
  {
LABEL_4:
    (*(void (**)(uint64_t, uint64_t, __n128))(a2 + 16))(a1, a2, v9);
    v13 = 0;
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(a3, v11, AssociatedTypeWitness);
  result = type metadata accessor for PreferenceList.Value(0, AssociatedTypeWitness, v16, v17);
  *(_DWORD *)(a3 + *(int *)(result + 28)) = v13;
  return result;
}

void PreferenceList.seed.getter(_DWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  if (*v1)
    LODWORD(v2) = *(_DWORD *)(v2 + 28);
  *a1 = v2;
}

uint64_t PreferenceList.Value.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t PreferenceList.Value.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*PreferenceList.Value.value.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t PreferenceList.Value.seed.getter@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = *(_DWORD *)(v2 + *(int *)(result + 28));
  return result;
}

_DWORD *PreferenceList.Value.seed.setter(_DWORD *result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)(v2 + *(int *)(a2 + 28)) = *result;
  return result;
}

uint64_t (*PreferenceList.Value.seed.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t type metadata accessor for PreferenceList.Value(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PreferenceList.Value);
}

void PreferenceList.removeValue<A>(for:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *i;

  v3 = (_QWORD *)*v2;
  *v2 = 0;
  if (v3)
  {
    v4 = v2;
    swift_retain();
    if (v3[2] != a2)
    {
      *v2 = (*(uint64_t (**)(_QWORD))(*v3 + 136))(*v2);
      swift_release();
    }
    for (i = (_QWORD *)v3[4]; i; i = (_QWORD *)i[4])
    {
      if (i[2] != a2)
      {
        *v4 = (*(uint64_t (**)(_QWORD))(*i + 136))(*v4);
        swift_release();
      }
    }
    swift_release_n();
  }
}

uint64_t _PreferenceNode.__allocating_init(value:seed:next:)(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  swift_allocObject();
  return _PreferenceNode.init(value:seed:next:)(a1, a2, a3);
}

void (*PreferenceList.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  void *v16;

  v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[2] = a4;
  v9[3] = v4;
  *v9 = a2;
  v9[1] = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = type metadata accessor for PreferenceList.Value(0, AssociatedTypeWitness, v11, v12);
  v9[4] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v9[5] = v14;
  v15 = *(_QWORD *)(v14 + 64);
  v9[6] = malloc(v15);
  v16 = malloc(v15);
  v9[7] = v16;
  PreferenceList.subscript.getter(a3, a4, (uint64_t)v16);
  return PreferenceList.subscript.modify;
}

void PreferenceList.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void *, uint64_t);

  v2 = *a1;
  v3 = (void *)(*a1)[6];
  v4 = (void *)(*a1)[7];
  v5 = (*a1)[4];
  v6 = (*a1)[5];
  v7 = (*a1)[2];
  v9 = **a1;
  v8 = (*a1)[1];
  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[6], v4, v5);
    specialized PreferenceList.subscript.setter((uint64_t)v3, v9, v8, v7);
    v10 = *(void (**)(void *, uint64_t))(v6 + 8);
    v10(v3, v5);
  }
  else
  {
    specialized PreferenceList.subscript.setter((*a1)[7], v9, v8, v7);
    v10 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v10(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t closure #1 in PreferenceList.valueIfPresent<A>(for:)@<X0>(char **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v8 = (char *)&v13 - v7;
  v9 = *a1;
  (*(void (**)(char *, char *, uint64_t, double))(v5 + 16))((char *)&v13 - v7, &v9[*(_QWORD *)(*(_QWORD *)v9 + 176)], AssociatedTypeWitness, v6);
  LODWORD(v9) = *((_DWORD *)v9 + 6);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v8, AssociatedTypeWitness);
  result = type metadata accessor for PreferenceList.Value(0, AssociatedTypeWitness, v10, v11);
  *(_DWORD *)(a2 + *(int *)(result + 28)) = (_DWORD)v9;
  return result;
}

uint64_t partial apply for closure #1 in PreferenceList.valueIfPresent<A>(for:)@<X0>(char **a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in PreferenceList.valueIfPresent<A>(for:)(a1, a2);
}

uint64_t type metadata accessor for _PreferenceNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _PreferenceNode);
}

BOOL PreferenceList.mayNotBeEqual(to:)(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  int v5;
  uint64_t v6;
  int v7;

  v2 = *a1;
  v3 = *v1;
  if (*v1)
  {
    if (v2)
      v4 = v3 == v2;
    else
      v4 = 0;
    if (v4)
      return 0;
    v5 = *(_DWORD *)(v3 + 28);
    if (!v2)
      return v5 != 0;
  }
  else
  {
    if (!v2)
    {
      swift_retain();
      return 0;
    }
    v5 = 0;
  }
  v6 = 1;
  if (v5 != -1)
  {
    v7 = *(_DWORD *)(v2 + 28);
    if (v7 != -1 && v5 == v7)
      return 0;
  }
  return v6;
}

uint64_t *PreferenceList.combine(with:)(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t j;

  v2 = *result;
  if (*result)
  {
    v3 = *v1;
    if (*v1)
    {
      *v1 = 0;
      swift_retain();
      closure #1 in PreferenceList.combine(with:)(v3, v2, v1);
      for (i = *(_QWORD *)(v3 + 32); i; i = *(_QWORD *)(i + 32))
        closure #1 in PreferenceList.combine(with:)(i, v2, v1);
      closure #2 in PreferenceList.combine(with:)(v2, v3, v1);
      for (j = *(_QWORD *)(v2 + 32); j; j = *(_QWORD *)(j + 32))
        closure #2 in PreferenceList.combine(with:)(j, v3, v1);
      swift_release();
      return (uint64_t *)swift_release();
    }
    else
    {
      *v1 = v2;
      return (uint64_t *)swift_retain();
    }
  }
  return result;
}

uint64_t closure #1 in PreferenceList.combine(with:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;

  v6 = *a3;
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128);
  swift_retain();
  v8 = v7(a2, v6);
  swift_release();
  if (!v8)
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(*a3);
  *a3 = v8;
  return swift_release();
}

uint64_t closure #2 in PreferenceList.combine(with:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a2))
    *a3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1 + 136))(*a3);
  return swift_release();
}

Swift::Void __swiftcall PreferenceList.filterRemoved()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t i;

  v1 = *v0;
  if (*v0)
  {
    *v0 = 0;
    closure #1 in PreferenceList.filterRemoved()(v1, v0);
    for (i = *(_QWORD *)(v1 + 32); i; i = *(_QWORD *)(i + 32))
      closure #1 in PreferenceList.filterRemoved()(i, v0);
    swift_release();
  }
}

uint64_t closure #1 in PreferenceList.filterRemoved()(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  if ((result & 1) != 0)
  {
    *a2 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1 + 136))(*a2);
    return swift_release();
  }
  return result;
}

uint64_t PreferenceList.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  Swift::String v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v1 = 0x7974706D65;
  v2 = *v0;
  v12 = 0;
  v13 = 0xE000000000000000;
  if (!v2)
    goto LABEL_4;
  v3 = *(_DWORD *)(v2 + 28);
  if (v3 == -1)
  {
    v4 = 0xE700000000000000;
    v1 = 0x64696C61766E69;
  }
  else
  {
    if (!v3)
    {
LABEL_4:
      v4 = 0xE500000000000000;
      goto LABEL_7;
    }
    LODWORD(v11) = *(_DWORD *)(v2 + 28);
    v1 = dispatch thunk of CustomStringConvertible.description.getter();
    v4 = v5;
  }
LABEL_7:
  v6 = v4;
  String.append(_:)(*(Swift::String *)&v1);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 5972026;
  v7._object = (void *)0xE300000000000000;
  String.append(_:)(v7);
  v11 = 0;
  if (v2)
  {
    MEMORY[0x24BDAC7A8](v8);
    do
    {
      closure #1 in PreferenceList.description.getter(v2, &v11);
      v2 = *(_QWORD *)(v2 + 32);
    }
    while (v2);
  }
  v9._countAndFlagsBits = 93;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  return v12;
}

uint64_t closure #1 in PreferenceList.description.getter(uint64_t a1, _QWORD *a2)
{
  Swift::String v4;
  Swift::String v5;
  uint64_t result;

  if (*a2)
  {
    v4._countAndFlagsBits = 8236;
    v4._object = (void *)0xE200000000000000;
    String.append(_:)(v4);
  }
  v5._countAndFlagsBits = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 152))();
  String.append(_:)(v5);
  result = swift_bridgeObjectRelease();
  if (__OFADD__(*a2, 1))
    __break(1u);
  else
    ++*a2;
  return result;
}

void PreferenceNode.find(from:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void PreferenceNode.combine(from:next:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void PreferenceNode.copy(next:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static PreferenceNode._includesRemovedValues.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void PreferenceNode.description.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t PreferenceNode.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 32) = 0;
  if (v1)
  {
    do
    {
      if (!swift_isUniquelyReferenced_native())
        break;
      v2 = *(_QWORD *)(v1 + 32);
      swift_retain();
      swift_release();
      v1 = v2;
    }
    while (v2);
  }
  swift_release();
  return v0;
}

uint64_t PreferenceNode.__deallocating_deinit()
{
  PreferenceNode.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PreferenceNode()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 152))();
}

uint64_t _PreferenceNode.init(value:seed:next:)(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;

  v6 = *a2;
  v7 = v3 + *(_QWORD *)(*(_QWORD *)v3 + 176);
  v8 = *(_QWORD *)(*(_QWORD *)v3 + 160);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v7, a1, AssociatedTypeWitness);
  *(_QWORD *)(v3 + 16) = v8;
  *(_DWORD *)(v3 + 24) = v6;
  if (a3)
  {
    v10 = *(unsigned int *)(a3 + 28);
    if ((_DWORD)v10 == -1)
      goto LABEL_10;
  }
  else
  {
    v10 = 0;
  }
  if (v6)
  {
    if (!(_DWORD)v10 || v6 == -1)
      LODWORD(v10) = v6;
    else
      LODWORD(v10) = merge32(_:_:)(v10, v6);
  }
LABEL_10:
  *(_DWORD *)(v3 + 28) = v10;
  *(_QWORD *)(v3 + 32) = a3;
  return v3;
}

uint64_t _PreferenceNode.find(from:)(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    while (*(_QWORD *)(result + 16) != *(_QWORD *)(*(_QWORD *)v1 + 160))
    {
      result = *(_QWORD *)(result + 32);
      if (!result)
        return result;
    }
    return swift_retain();
  }
  return result;
}

uint64_t _PreferenceNode.combine(from:next:)(uint64_t a1, uint64_t a2)
{
  unsigned int *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  double v15;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;

  v5 = *(_QWORD *)v2;
  v6 = *(_QWORD *)(*(_QWORD *)v2 + 168);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (char *)&v17 - v9;
  if (!a1)
    return 0;
  while (*((_QWORD *)v2 + 2) != *(_QWORD *)(a1 + 16))
  {
    a1 = *(_QWORD *)(a1 + 32);
    if (!a1)
      return 0;
  }
  v12 = (uint64_t)v2 + *(_QWORD *)(v5 + 176);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16);
  swift_retain();
  v14 = v13(v10, v12, AssociatedTypeWitness);
  v19 = v2[6];
  v15 = MEMORY[0x24BDAC7A8](v14);
  *(&v17 - 2) = (uint64_t)&v19;
  *(&v17 - 1) = a1;
  (*(void (**)(char *, uint64_t (*)@<X0>(uint64_t@<X8>), double))(v6 + 24))(v10, partial apply for closure #3 in _PreferenceNode.combine(from:next:), v15);
  swift_release();
  v18 = v19;
  swift_allocObject();
  v11 = _PreferenceNode.init(value:seed:next:)((uint64_t)v10, &v18, a2);
  swift_retain();
  return v11;
}

uint64_t closure #3 in _PreferenceNode.combine(from:next:)@<X0>(unsigned int *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  uint64_t v7;
  BOOL v9;
  char *v10;
  uint64_t AssociatedTypeWitness;

  v6 = a2[6];
  v7 = *a1;
  if ((_DWORD)v7 != -1 && v6 != 0)
  {
    if ((_DWORD)v7)
      v9 = v6 == -1;
    else
      v9 = 1;
    if (!v9)
      v6 = merge32(_:_:)(v7, v6);
    *a1 = v6;
  }
  v10 = (char *)a2 + *(_QWORD *)(*(_QWORD *)a2 + 176);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a3, v10, AssociatedTypeWitness);
}

uint64_t _PreferenceNode.copy(next:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  double v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[12];
  unsigned int v12;

  v3 = *v1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v7 = &v11[-v6];
  (*(void (**)(_BYTE *, uint64_t, double))(v8 + 16))(&v11[-v6], (uint64_t)v1 + *(_QWORD *)(v3 + 176), v5);
  v12 = *((_DWORD *)v1 + 6);
  swift_allocObject();
  v9 = _PreferenceNode.init(value:seed:next:)((uint64_t)v7, &v12, a1);
  swift_retain();
  return v9;
}

uint64_t static _PreferenceNode._includesRemovedValues.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 168) + 32))() & 1;
}

uint64_t _PreferenceNode.description.getter()
{
  Swift::String v0;
  Swift::String v1;

  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 2112800;
  v1._object = (void *)0xE300000000000000;
  String.append(_:)(v1);
  swift_getAssociatedTypeWitness();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  return 0;
}

uint64_t _PreferenceNode.__ivar_destroyer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 176);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
}

uint64_t _PreferenceNode.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  v0 = PreferenceNode.deinit();
  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 176);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
  return v0;
}

uint64_t _PreferenceNode.__deallocating_deinit()
{
  _PreferenceNode.deinit();
  return swift_deallocClassInstance();
}

uint64_t specialized PreferenceList.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  unsigned int v22;

  v5 = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v15 = (char *)&v21 - v14;
  v16 = *v5;
  if (*v5)
  {
    while (*(_QWORD *)(v16 + 16) != a2)
    {
      v16 = *(_QWORD *)(v16 + 32);
      if (!v16)
        goto LABEL_6;
    }
    PreferenceList.removeValue<A>(for:)(v12, a3);
  }
LABEL_6:
  type metadata accessor for _PreferenceNode(0, a3, a4, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v15, a1, AssociatedTypeWitness);
  v22 = *(_DWORD *)(a1
                  + *(int *)(type metadata accessor for PreferenceList.Value(0, AssociatedTypeWitness, v17, v18) + 28));
  v19 = *v5;
  swift_allocObject();
  result = _PreferenceNode.init(value:seed:next:)((uint64_t)v15, &v22, v19);
  *v5 = result;
  return result;
}

ValueMetadata *type metadata accessor for PreferenceList()
{
  return &type metadata for PreferenceList;
}

uint64_t type metadata completion function for PreferenceList.Value()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PreferenceList.Value(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(void))(v4 + 48))();
    return 0;
  }
  if (((((*(_QWORD *)(v4 + 64) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4) & 0xFFFFFFFC) != 0)
    v6 = 2;
  else
    v6 = a2 - v5 + 1;
  if (v6 >= 0x10000)
    v7 = 4;
  else
    v7 = 2;
  if (v6 < 0x100)
    v7 = 1;
  if (v6 >= 2)
    v8 = v7;
  else
    v8 = 0;
  return ((uint64_t (*)(void))((char *)&loc_234F6A3E8 + 4 * byte_2352B5A28[v8]))();
}

void storeEnumTagSinglePayload for PreferenceList.Value(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v11 = 0;
    if (a2 <= v7)
      goto LABEL_14;
  }
  else
  {
    v8 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 3) & 0xFFFFFFFC) == 0xFFFFFFFC)
      v9 = v8 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_14:
      __asm { BR              X11 }
  }
  if (((*(_DWORD *)(v6 + 64) + 3) & 0xFFFFFFFC) != 0xFFFFFFFC)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_234F6A528()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_234F6A530(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x234F6A538);
}

void sub_234F6A554()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_234F6A55C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_234F6A564(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v4 + v5) = 0;
  if (!a2)
    JUMPOUT(0x234F6A56CLL);
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

uint64_t type metadata accessor for PreferenceNode()
{
  return objc_opt_self();
}

uint64_t type metadata completion function for _PreferenceNode()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t partial apply for closure #3 in _PreferenceNode.combine(from:next:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #3 in _PreferenceNode.combine(from:next:)(*(unsigned int **)(v1 + 16), *(_DWORD **)(v1 + 24), a1);
}

uint64_t Environment.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  os_log_type_t v14;
  void *v15;
  os_log_type_t v16;
  NSObject *v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void (*v22)(_QWORD *);
  void *v23;
  uint64_t v25[3];
  _QWORD v26[2];

  v5 = v4;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = type metadata accessor for Environment.Content(0, v7, a2, a3);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v25[-1] - v10;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))((char *)&v25[-1] - v10, v5, v8, v9);
  if (swift_getEnumCaseMultiPayload() == 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a4, v11, v7);
  v14 = static os_log_type_t.fault.getter();
  if (one-time initialization token for runtimeIssuesLog != -1)
    swift_once();
  v15 = (void *)static Log.runtimeIssuesLog;
  v16 = v14;
  if (os_log_type_enabled((os_log_t)static Log.runtimeIssuesLog, v14))
  {
    v17 = v15;
    v18 = (uint8_t *)swift_slowAlloc();
    v19 = swift_slowAlloc();
    v25[0] = v19;
    *(_DWORD *)v18 = 136315138;
    v20 = _typeName(_:qualified:)();
    v26[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2349C4000, v17, v16, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v18, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B7C9D54](v19, -1, -1);
    MEMORY[0x23B7C9D54](v18, -1, -1);

  }
  v26[0] = 0;
  v26[1] = 0;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v22 = *(void (**)(_QWORD *))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue2.shared) + 0x68);
  v23 = static CoreGlue2.shared;
  v22(v26);

  swift_getAtKeyPath();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t type metadata accessor for Environment.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Environment.Content);
}

uint64_t Environment.init(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t **a4@<X8>)
{
  uint64_t v5;

  v5 = *a1;
  *a4 = a1;
  type metadata accessor for Environment.Content(0, *(_QWORD *)(*MEMORY[0x24BEE46A8] + v5 + 8), a2, a3);
  return swift_storeEnumTagMultiPayload();
}

uint64_t Environment.content.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;

  v6 = type metadata accessor for Environment.Content(0, *(_QWORD *)(a1 + 16), a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a4, v4, v6);
}

uint64_t Environment.content.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;

  v6 = type metadata accessor for Environment.Content(0, *(_QWORD *)(a2 + 16), a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(v4, a1, v6);
}

uint64_t (*Environment.content.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void Environment.error()()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._object = (void *)0x80000002352E54C0;
  v1._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t static Environment._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ValueMetadata *a5)
{
  return specialized static Environment._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a3, a4, a5);
}

uint64_t protocol witness for static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:) in conformance Environment<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return specialized static Environment._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a3, a4, *(ValueMetadata **)(a6 + 16));
}

uint64_t EnvironmentBox.update(property:phase:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *Value;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  void (*v57)(_QWORD, _QWORD, _QWORD);
  uint64_t v58;
  unint64_t v59;
  unsigned int (*v60)(char *, uint64_t, uint64_t *);
  uint64_t v61;
  void (*v62)(char *, char *, uint64_t *);
  char *v63;
  char *v64;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  void (*v72)(char *, char *, uint64_t);
  char *v73;
  uint64_t v74;
  char *v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  void (*v84)(char *, uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  void (*v89)(uint64_t, uint64_t);
  uint64_t v90;
  void (*v91)(char *, uint64_t, uint64_t);
  uint64_t v92;
  int v93;
  uint64_t v94;
  char *v95;
  uint64_t result;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122[3];
  _QWORD v123[2];
  unsigned __int8 v124;
  uint64_t v125;

  v125 = *MEMORY[0x24BDAC8D0];
  v120 = a3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v97 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v111 = (char *)&v97 - v11;
  v113 = (uint64_t *)type metadata accessor for ObservationTracking._AccessList();
  v115 = *(v113 - 1);
  MEMORY[0x24BDAC7A8](v113);
  v107 = (char *)&v97 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v108 = (char *)&v97 - v14;
  type metadata accessor for ObservationTracking._AccessList?();
  v105 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v97 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v117 = (uint64_t *)((char *)&v97 - v19);
  MEMORY[0x24BDAC7A8](v20);
  v109 = (uint64_t)&v97 - v21;
  MEMORY[0x24BDAC7A8](v22);
  v114 = (uint64_t)&v97 - v23;
  v119 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v103 = (char *)&v97 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v116 = (char *)&v97 - v27;
  MEMORY[0x24BDAC7A8](v28);
  v106 = (char *)&v97 - v29;
  MEMORY[0x24BDAC7A8](v30);
  v110 = (char *)&v97 - v31;
  v34 = type metadata accessor for Environment.Content(0, v5, v32, v33);
  v35 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v112 = (char *)&v97 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = MEMORY[0x24BDAC7A8](v37);
  v40 = (uint64_t *)((char *)&v97 - v39);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v35 + 16))((char *)&v97 - v39, a1, v34, v38);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(uint64_t *, uint64_t))(v35 + 8))(v40, v34);
    return 0;
  }
  v98 = v34;
  v99 = v35;
  v102 = v7;
  v104 = v6;
  v100 = v9;
  v101 = a1;
  v42 = *v40;
  Value = (_QWORD *)AGGraphGetValue();
  v44 = Value[1];
  v123[0] = *Value;
  v123[1] = v44;
  v46 = v45 & 1;
  v124 = v45 & 1;
  v118 = v3;
  v47 = *(_QWORD *)(v3 + 8);
  v122[0] = v42;
  v97 = v42;
  if (!v47)
  {
    swift_retain();
    swift_retain();
    v50 = v113;
    goto LABEL_9;
  }
  v121 = v47;
  type metadata accessor for KeyPath();
  swift_retain();
  swift_retain_n();
  swift_retain();
  v48 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  v49 = swift_release();
  v50 = v113;
  if ((v48 & 1) == 0)
  {
LABEL_9:
    v124 = 1;
    swift_retain();
    v49 = swift_release();
    *(_QWORD *)(v118 + 8) = v42;
    v51 = v115;
    goto LABEL_10;
  }
  v51 = v115;
  if (!v46 && (*(_BYTE *)(v118 + *(int *)(v120 + 36)) & 1) == 0)
  {
    v52 = v101;
    v53 = v100;
    v54 = v119;
    v55 = v98;
    (*(void (**)(char *, uint64_t, uint64_t))(v102 + 16))(v100, v118 + *(int *)(v120 + 32), v104);
    goto LABEL_26;
  }
LABEL_10:
  v113 = &v97;
  v56 = MEMORY[0x24BDAC7A8](v49);
  *(&v97 - 2) = (uint64_t)v123;
  *(&v97 - 1) = v42;
  v57 = (void (*)(_QWORD, _QWORD, _QWORD))v117;
  v58 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t *, double))(v51 + 56))(v117, 1, 1, v50, v56);
  MEMORY[0x24BDAC7A8](v58);
  *(&v97 - 4) = v5;
  *(&v97 - 3) = (uint64_t)partial apply for closure #1 in EnvironmentBox.update(property:phase:);
  *(&v97 - 2) = (uint64_t)(&v97 - 4);
  v59 = type metadata accessor for Error();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v57, (uint64_t)partial apply for closure #1 in _withObservation<A>(do:), (uint64_t)(&v97 - 6), v105, v59, v5, MEMORY[0x24BEE3F20], (uint64_t)v122);
  outlined init with copy of ObservationTracking._AccessList?((uint64_t)v57, (uint64_t)v17);
  v60 = *(unsigned int (**)(char *, uint64_t, uint64_t *))(v51 + 48);
  if (v60(v17, 1, v50) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v17);
  }
  else
  {
    v61 = v51;
    v62 = *(void (**)(char *, char *, uint64_t *))(v51 + 32);
    v63 = v108;
    v62(v108, v17, v50);
    if (one-time initialization token for lastestAccessLists != -1)
      swift_once();
    (*(void (**)(char *, char *, uint64_t *))(v61 + 16))(v107, v63, v50);
    swift_beginAccess();
    v64 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v64;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v64 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v64 + 2) + 1, 1, (unint64_t)v64);
      static ObservationRegistrar.lastestAccessLists = v64;
    }
    v67 = *((_QWORD *)v64 + 2);
    v66 = *((_QWORD *)v64 + 3);
    if (v67 >= v66 >> 1)
    {
      v64 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v66 > 1, v67 + 1, 1, (unint64_t)v64);
      static ObservationRegistrar.lastestAccessLists = v64;
    }
    *((_QWORD *)v64 + 2) = v67 + 1;
    v68 = v115;
    v62(&v64[((*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80))+ *(_QWORD *)(v115 + 72) * v67], v107, v50);
    swift_endAccess();
    (*(void (**)(char *, uint64_t *))(v68 + 8))(v108, v50);
  }
  v69 = v114;
  v70 = v50;
  v71 = v119;
  v72 = *(void (**)(char *, char *, uint64_t))(v119 + 32);
  v73 = v106;
  v72(v106, v116, v5);
  v74 = v109;
  outlined init with take of ObservationTracking._AccessList?((uint64_t)v117, v109);
  v75 = v110;
  v72(v110, v73, v5);
  outlined init with take of ObservationTracking._AccessList?(v74, v69);
  v76 = v60((char *)v69, 1, v70) != 1;
  v77 = v120;
  v78 = v118;
  *(_BYTE *)(v118 + *(int *)(v120 + 36)) = v76;
  v79 = v78 + *(int *)(v77 + 32);
  v80 = v69;
  v81 = v102;
  v82 = v111;
  v83 = v104;
  v117 = *(_QWORD **)(v102 + 16);
  ((void (*)(char *, char *, uint64_t))v117)(v111, (char *)v79, v104);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))(v82, 1, v5) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v80);
    v84 = *(void (**)(char *, uint64_t))(v81 + 8);
    v84(v82, v83);
    v53 = v100;
LABEL_24:
    v55 = v98;
    v91 = (void (*)(char *, uint64_t, uint64_t))v117;
    v92 = v120;
    v84((char *)v79, v83);
    v72((char *)v79, v75, v5);
    v54 = v119;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v119 + 56))((char *)v79, 0, 1, v5);
    v90 = v118;
    goto LABEL_25;
  }
  v85 = (uint64_t)v103;
  v86 = ((uint64_t (*)(char *, char *, uint64_t))v72)(v103, v82, v5);
  MEMORY[0x24BDAC7A8](v86);
  *(&v97 - 4) = v5;
  *(&v97 - 3) = (uint64_t)v75;
  *((_DWORD *)&v97 - 4) = 3;
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v85, (uint64_t)partial apply for closure #1 in compareValues<A>(_:_:options:), (uint64_t)(&v97 - 6), v5, MEMORY[0x24BEE4078], MEMORY[0x24BEE1328], MEMORY[0x24BEE40A8], v87);
  v88 = LOBYTE(v122[0]);
  v89 = *(void (**)(uint64_t, uint64_t))(v71 + 8);
  v89(v85, v5);
  v53 = v100;
  if (v88 != 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v114);
    v84 = *(void (**)(char *, uint64_t))(v102 + 8);
    v83 = v104;
    goto LABEL_24;
  }
  v89((uint64_t)v75, v5);
  outlined destroy of ObservationTracking._AccessList?(v114);
  v124 = 0;
  v83 = v104;
  v90 = v118;
  v54 = v119;
  v55 = v98;
  v91 = (void (*)(char *, uint64_t, uint64_t))v117;
  v92 = v120;
LABEL_25:
  v52 = v101;
  v91(v53, v90 + *(int *)(v92 + 32), v83);
LABEL_26:
  v93 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 48))(v53, 1, v5);
  v94 = v99;
  if (v93 != 1)
  {
    swift_release();
    v95 = v112;
    (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v112, v53, v5);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, char *, uint64_t))(v94 + 40))(v52, v95, v55);
    v41 = v124;
    swift_release();
    swift_release();
    return v41;
  }
  __break(1u);
  result = outlined destroy of ObservationTracking._AccessList?(v52);
  __break(1u);
  return result;
}

uint64_t closure #1 in EnvironmentBox.update(property:phase:)()
{
  swift_retain();
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  return swift_release();
}

uint64_t FullEnvironmentBox.update(property:phase:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    return 0;
  v3 = v1;
  v6 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  AGGraphGetValue();
  if (!v1[1])
  {
    outlined copy of Environment<EnvironmentValues>.Content(v6, v5, 0);
    outlined copy of Environment<EnvironmentValues>.Content(v6, v5, 0);
    swift_retain();
    swift_retain();
    swift_release();
    goto LABEL_8;
  }
  v8 = v7;
  v20 = v1[1];
  type metadata accessor for KeyPath<EnvironmentValues, EnvironmentValues>();
  outlined copy of Environment<EnvironmentValues>.Content(v6, v5, 0);
  outlined copy of Environment<EnvironmentValues>.Content(v6, v5, 0);
  outlined copy of Environment<EnvironmentValues>.Content(v6, v5, 0);
  swift_retain();
  swift_retain();
  v9 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  result = outlined consume of Environment<EnvironmentValues>.Content(v6, v5, 0);
  if ((v9 & 1) == 0)
  {
LABEL_8:
    swift_retain();
    swift_release();
    v3[1] = v6;
    goto LABEL_9;
  }
  if ((v8 & 1) == 0)
  {
    v2 = 0;
    goto LABEL_16;
  }
LABEL_9:
  swift_retain();
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  v11 = v3[2];
  if (v11 == 1
    || (v12 = swift_retain(), v13 = PropertyList.Tracker.hasDifferentUsedValues(_:)(v12),
                              swift_release(),
                              (v13 & 1) != 0))
  {
    v19 = v5;
    v14 = v3[4];
    PropertyList.Tracker.reset()();
    if (v20)
      v15 = *(_QWORD *)(v20 + 64);
    else
      v15 = 0;
    v16 = *(_QWORD *)(v14 + 16);
    swift_retain_n();
    swift_retain_n();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v16 + 16));
    *(_QWORD *)(v16 + 24) = v15;
    os_unfair_lock_unlock((os_unfair_lock_t)(v16 + 16));
    swift_release();
    swift_release_n();
    swift_release();
    swift_release();
    result = outlined consume of EnvironmentValues?(v11);
    v3[2] = v20;
    v3[3] = v14;
    v2 = 1;
    v5 = v19;
  }
  else
  {
    swift_release();
    result = swift_release();
    v2 = 0;
  }
LABEL_16:
  v17 = v3[2];
  if (v17 != 1)
  {
    v18 = v3[3];
    outlined copy of EnvironmentValues?(v3[2]);
    outlined consume of Environment<EnvironmentValues>.Content(v6, v5, 0);
    outlined consume of Environment<EnvironmentValues>.Content(v6, v5, 0);
    swift_release();
    swift_release();
    *(_QWORD *)a1 = v17;
    *(_QWORD *)(a1 + 8) = v18;
    *(_BYTE *)(a1 + 16) = 1;
    return v2;
  }
  __break(1u);
  return result;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = _StringGuts.copyUTF8(into:)();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      v2 = String.UTF8View._foreignCount()();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UInt8>, MEMORY[0x24BEE4260], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static Environment._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, ValueMetadata *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  int *v11;
  int v12;
  uint64_t v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[24];
  int v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v7 = type metadata accessor for EnvironmentBox(0, (uint64_t)a4, a3, (uint64_t)a4);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = &v20[-v9];
  v11 = (int *)(*(_QWORD *)(a3 + 16) + 16);
  swift_beginAccess();
  if (a4 == &type metadata for EnvironmentValues)
  {
    v15 = *v11;
    type metadata accessor for PropertyList.Tracker();
    v16 = swift_allocObject();
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AtomicBuffer);
    v17 = swift_allocObject();
    *(_DWORD *)(v17 + 16) = 0;
    v18 = MEMORY[0x24BEE4B00];
    *(_QWORD *)(v17 + 24) = 0;
    *(_QWORD *)(v17 + 32) = v18;
    v19 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v17 + 40) = v18;
    *(_QWORD *)(v17 + 48) = v19;
    *(_BYTE *)(v17 + 56) = 0;
    *(_QWORD *)(v16 + 16) = v17;
    v21 = v15;
    v22 = xmmword_235260F20;
    v23 = 0;
    v24 = v16;
    specialized _DynamicPropertyBuffer.append<A>(_:fieldOffset:)((uint64_t)&v21, a2);
    outlined consume of EnvironmentValues?(1);
    return swift_release();
  }
  else
  {
    v12 = *v11;
    *((_QWORD *)v10 + 1) = 0;
    (*((void (**)(_BYTE *, uint64_t, uint64_t, ValueMetadata *))a4[-1].Description + 7))(&v10[*(int *)(v7 + 32)], 1, 1, a4);
    v10[*(int *)(v7 + 36)] = 0;
    *(_DWORD *)v10 = v12;
    v13 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentBox<A>, v7);
    _DynamicPropertyBuffer.append<A>(_:fieldOffset:)((uint64_t)v10, a2, v7, v13);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
  }
}

uint64_t type metadata completion function for Environment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for Environment.Content(319, *(_QWORD *)(a1 + 16), a3, a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for Environment(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  if (v3 <= 8)
    v3 = 8;
  v4 = *(unsigned __int8 *)(a1 + v3);
  if (v4 < 2)
  {
    if (v4 == 1)
      return (*(uint64_t (**)(void))(v2 + 8))();
    else
      return swift_release();
  }
  else
  {
    if (v3 <= 3)
      v5 = v3;
    else
      v5 = 4;
    return ((uint64_t (*)(void))((char *)&loc_234F6BFF8 + 4 * byte_2352B5B30[v5]))();
  }
}

_QWORD *initializeWithCopy for Environment(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    (*(void (**)(_QWORD *))(v4 + 16))(a1);
    v8 = 1;
  }
  else
  {
    *a1 = *a2;
    swift_retain();
    v8 = 0;
  }
  *((_BYTE *)a1 + v5) = v8;
  return a1;
}

_QWORD *assignWithCopy for Environment(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 8uLL)
      v7 = 8;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)
      (*(void (**)(_QWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    else
      swift_release();
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v5);
      *((_BYTE *)a1 + v7) = 1;
    }
    else
    {
      *a1 = *a2;
      *((_BYTE *)a1 + v7) = 0;
      swift_retain();
    }
  }
  return a1;
}

_QWORD *initializeWithTake for Environment(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    (*(void (**)(_QWORD *))(v4 + 32))(a1);
    v8 = 1;
  }
  else
  {
    v8 = 0;
    *a1 = *a2;
  }
  *((_BYTE *)a1 + v5) = v8;
  return a1;
}

_QWORD *assignWithTake for Environment(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 8uLL)
      v7 = 8;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)
      (*(void (**)(_QWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    else
      swift_release();
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
      v12 = 1;
    }
    else
    {
      v12 = 0;
      *a1 = *a2;
    }
    *((_BYTE *)a1 + v7) = v12;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for Environment(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = 8;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) > 8uLL)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 255);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234F6C5DC + 4 * byte_2352B5B53[(v4 - 1)]))();
}

void storeEnumTagSinglePayload for Environment(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (v5 <= 8)
    v5 = 8;
  v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    v7 = 0;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t type metadata accessor for Environment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Environment);
}

uint64_t type metadata completion function for Environment.Content()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Environment(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
LABEL_18:
    swift_retain();
    return v3;
  }
  v9 = *((unsigned __int8 *)a2 + v5);
  if (v9 >= 2)
  {
    if (v5 <= 3)
      v10 = v5;
    else
      v10 = 4;
    __asm { BR              X13 }
  }
  if (v9 != 1)
  {
    *a1 = *a2;
    *((_BYTE *)a1 + v5) = 0;
    goto LABEL_18;
  }
  (*(void (**)(uint64_t *))(v4 + 16))(a1);
  *((_BYTE *)v3 + v5) = 1;
  return v3;
}

uint64_t destroy for Environment.Content(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  if (v3 <= 8)
    v3 = 8;
  v4 = *(unsigned __int8 *)(a1 + v3);
  if (v4 < 2)
  {
    if (v4 == 1)
      return (*(uint64_t (**)(void))(v2 + 8))();
    else
      return swift_release();
  }
  else
  {
    if (v3 <= 3)
      v5 = v3;
    else
      v5 = 4;
    return ((uint64_t (*)(void))((char *)&loc_234F6C9B0 + 4 * byte_2352B5B66[v5]))();
  }
}

_QWORD *initializeWithCopy for Environment.Content(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    (*(void (**)(_QWORD *))(v4 + 16))(a1);
    v8 = 1;
  }
  else
  {
    *a1 = *a2;
    swift_retain();
    v8 = 0;
  }
  *((_BYTE *)a1 + v5) = v8;
  return a1;
}

_QWORD *assignWithCopy for Environment.Content(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 8uLL)
      v7 = 8;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)
      (*(void (**)(_QWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    else
      swift_release();
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v5);
      *((_BYTE *)a1 + v7) = 1;
    }
    else
    {
      *a1 = *a2;
      *((_BYTE *)a1 + v7) = 0;
      swift_retain();
    }
  }
  return a1;
}

_QWORD *initializeWithTake for Environment.Content(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    (*(void (**)(_QWORD *))(v4 + 32))(a1);
    v8 = 1;
  }
  else
  {
    v8 = 0;
    *a1 = *a2;
  }
  *((_BYTE *)a1 + v5) = v8;
  return a1;
}

_QWORD *assignWithTake for Environment.Content(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 8uLL)
      v7 = 8;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)
      (*(void (**)(_QWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    else
      swift_release();
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
      v12 = 1;
    }
    else
    {
      v12 = 0;
      *a1 = *a2;
    }
    *((_BYTE *)a1 + v7) = v12;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for Environment.Content(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = 8;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) > 8uLL)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 255);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234F6CF94 + 4 * byte_2352B5B89[(v4 - 1)]))();
}

void storeEnumTagSinglePayload for Environment.Content(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (v5 <= 8)
    v5 = 8;
  v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    v7 = 0;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t getEnumTag for Environment.Content(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 8;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64) > 8uLL)
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 2u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_234F6D1D0 + 4 * byte_2352B5B97[v3]))();
}

void destructiveInjectEnumTag for Environment.Content(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  size_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) <= 8uLL)
    v4 = 8;
  else
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (a2 > 1)
  {
    v5 = a2 - 2;
    if (v4 < 4)
    {
      v6 = v5 >> (8 * v4);
      v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if ((_DWORD)v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if ((_DWORD)v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t type metadata accessor for EnvironmentBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EnvironmentBox);
}

uint64_t destroy for FullEnvironmentBox(uint64_t a1)
{
  swift_release();
  if (*(_QWORD *)(a1 + 16) != 1)
  {
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t initializeWithCopy for FullEnvironmentBox(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v5 = (_OWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 16);
  swift_retain();
  if (v4 == 1)
  {
    *(_OWORD *)(a1 + 16) = *v5;
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v6;
    swift_retain();
    swift_retain();
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for FullEnvironmentBox(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(a1 + 16) != 1)
  {
    if (v4 != 1)
    {
      *(_QWORD *)(a1 + 16) = v4;
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    outlined destroy of EnvironmentValues(a1 + 16);
    goto LABEL_6;
  }
  if (v4 == 1)
  {
LABEL_6:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    goto LABEL_8;
  }
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_retain();
LABEL_8:
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t outlined destroy of EnvironmentValues(uint64_t a1)
{
  destroy for AnyTransition.InsertionVisitor();
  return a1;
}

uint64_t assignWithTake for FullEnvironmentBox(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  v4 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(a1 + 16) != 1)
  {
    if (v4 != 1)
    {
      *(_QWORD *)(a1 + 16) = v4;
      swift_release();
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_release();
      goto LABEL_6;
    }
    outlined destroy of EnvironmentValues(a1 + 16);
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
LABEL_6:
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for FullEnvironmentBox()
{
  return &type metadata for FullEnvironmentBox;
}

uint64_t type metadata completion function for EnvironmentBox()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for EnvironmentBox(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  int v9;
  uint64_t v12;
  unint64_t v13;
  int v14;
  _QWORD *v15;
  void *v16;
  const void *v17;
  unsigned int (*v18)(const void *, uint64_t, uint64_t);

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v6 & 0x100000;
  if (v7 > 7 || v9 != 0 || v8 + ((v7 + 16) & ~v7) + 1 > 0x18)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v12 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain();
  }
  else
  {
    v14 = *(_DWORD *)a2;
    v13 = (unint64_t)a2 + 11;
    *(_DWORD *)a1 = v14;
    v15 = (_QWORD *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8);
    *v15 = *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF8);
    v16 = (void *)(((unint64_t)v15 + v7 + 8) & ~v7);
    v17 = (const void *)(((v13 & 0xFFFFFFFFFFFFFFF8) + v7 + 8) & ~v7);
    v18 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_retain();
    if (v18(v17, 1, v4))
    {
      memcpy(v16, v17, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v16, v17, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v16, 0, 1, v4);
    }
    *((_BYTE *)v16 + v8) = *((_BYTE *)v17 + v8);
  }
  return v3;
}

uint64_t destroy for EnvironmentBox(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;

  v3 = (a1 + 11) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (v3 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v5 + 8))(v6, v4);
  return result;
}

_DWORD *initializeWithCopy for EnvironmentBox(_DWORD *a1, int *a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t);
  int v13;
  size_t v14;
  size_t v15;
  size_t v16;

  v5 = *a2;
  v4 = (unint64_t)a2 + 11;
  *a1 = v5;
  v6 = (_QWORD *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (void *)(((unint64_t)v6 + v9 + 8) & ~v9);
  v11 = (const void *)((v9 + 8 + (v4 & 0xFFFFFFFFFFFFFFF8)) & ~v9);
  v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
  swift_retain();
  if (v12(v11, 1, v7))
  {
    v13 = *(_DWORD *)(v8 + 84);
    v14 = *(_QWORD *)(v8 + 64);
    if (v13)
      v15 = v14;
    else
      v15 = v14 + 1;
    memcpy(v10, v11, v15);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v10, v11, v7);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, v7);
    v13 = *(_DWORD *)(v8 + 84);
    v14 = *(_QWORD *)(v8 + 64);
  }
  if (v13)
    v16 = v14;
  else
    v16 = v14 + 1;
  *((_BYTE *)v10 + v16) = *((_BYTE *)v11 + v16);
  return a1;
}

_DWORD *assignWithCopy for EnvironmentBox(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  size_t v14;
  uint64_t v15;

  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  swift_retain();
  swift_release();
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (void *)(((unint64_t)v5 + v9 + 8) & ~v9);
  v11 = (void *)(((unint64_t)v6 + v9 + 8) & ~v9);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  LODWORD(v5) = v12(v10, 1, v7);
  v13 = v12(v11, 1, v7);
  if ((_DWORD)v5)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 16))(v10, v11, v7);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, v7);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 24))(v10, v11, v7);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v10, v7);
  }
  if (*(_DWORD *)(v8 + 84))
    v14 = *(_QWORD *)(v8 + 64);
  else
    v14 = *(_QWORD *)(v8 + 64) + 1;
  memcpy(v10, v11, v14);
LABEL_10:
  if (*(_DWORD *)(v8 + 84))
    v15 = *(_QWORD *)(v8 + 64);
  else
    v15 = *(_QWORD *)(v8 + 64) + 1;
  *((_BYTE *)v10 + v15) = *((_BYTE *)v11 + v15);
  return a1;
}

_DWORD *initializeWithTake for EnvironmentBox(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  int v11;
  size_t v12;
  size_t v13;
  size_t v14;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)(((unint64_t)v4 + v8 + 8) & ~v8);
  v10 = (const void *)(((unint64_t)v5 + v8 + 8) & ~v8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6))
  {
    v11 = *(_DWORD *)(v7 + 84);
    v12 = *(_QWORD *)(v7 + 64);
    if (v11)
      v13 = v12;
    else
      v13 = v12 + 1;
    memcpy(v9, v10, v13);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v9, v10, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
    v11 = *(_DWORD *)(v7 + 84);
    v12 = *(_QWORD *)(v7 + 64);
  }
  if (v11)
    v14 = v12;
  else
    v14 = v12 + 1;
  *((_BYTE *)v9 + v14) = *((_BYTE *)v10 + v14);
  return a1;
}

_DWORD *assignWithTake for EnvironmentBox(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  size_t v14;
  uint64_t v15;

  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  swift_release();
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (void *)(((unint64_t)v5 + v9 + 8) & ~v9);
  v11 = (void *)(((unint64_t)v6 + v9 + 8) & ~v9);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  LODWORD(v6) = v12(v10, 1, v7);
  v13 = v12(v11, 1, v7);
  if ((_DWORD)v6)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 32))(v10, v11, v7);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, v7);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 40))(v10, v11, v7);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v10, v7);
  }
  if (*(_DWORD *)(v8 + 84))
    v14 = *(_QWORD *)(v8 + 64);
  else
    v14 = *(_QWORD *)(v8 + 64) + 1;
  memcpy(v10, v11, v14);
LABEL_10:
  if (*(_DWORD *)(v8 + 84))
    v15 = *(_QWORD *)(v8 + 64);
  else
    v15 = *(_QWORD *)(v8 + 64) + 1;
  *((_BYTE *)v10 + v15) = *((_BYTE *)v11 + v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for EnvironmentBox(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v15;
  int v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned int v19;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFE)
    v7 = 2147483646;
  else
    v7 = v6;
  if (v5)
    v8 = 1;
  else
    v8 = 2;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = a2 - v7;
  if (a2 <= v7)
    goto LABEL_28;
  v11 = v8 + *(_QWORD *)(v4 + 64) + ((v9 + 16) & ~v9);
  v12 = 8 * v11;
  if (v11 <= 3)
  {
    v15 = ((v10 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      v13 = *(_DWORD *)(a1 + v11);
      if (!v13)
        goto LABEL_28;
      goto LABEL_21;
    }
    if (v15 > 0xFF)
    {
      v13 = *(unsigned __int16 *)(a1 + v11);
      if (!*(_WORD *)(a1 + v11))
        goto LABEL_28;
      goto LABEL_21;
    }
    if (v15 < 2)
    {
LABEL_28:
      v17 = (unint64_t *)((a1 + 11) & 0xFFFFFFFFFFFFFFF8);
      if (v6 > 0x7FFFFFFE)
      {
        v19 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v17 + v9 + 8) & ~v9);
        if (v19 >= 2)
          return v19 - 1;
        else
          return 0;
      }
      else
      {
        v18 = *v17;
        if (v18 >= 0xFFFFFFFF)
          LODWORD(v18) = -1;
        if ((v18 + 1) >= 2)
          return v18;
        else
          return 0;
      }
    }
  }
  v13 = *(unsigned __int8 *)(a1 + v11);
  if (!*(_BYTE *)(a1 + v11))
    goto LABEL_28;
LABEL_21:
  v16 = (v13 - 1) << v12;
  if (v11 > 3)
    v16 = 0;
  if ((_DWORD)v11)
  {
    if (v11 > 3)
      LODWORD(v11) = 4;
    __asm { BR              X12 }
  }
  return v7 + v16 + 1;
}

void storeEnumTagSinglePayload for EnvironmentBox(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  size_t v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFE)
    v10 = 2147483646;
  else
    v10 = v9;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  v12 = v11 + ((*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)) + 1;
  v13 = a3 >= v10;
  v14 = a3 - v10;
  if (v14 != 0 && v13)
  {
    if (v12 > 3)
    {
      v6 = 1u;
      if (v10 < a2)
        goto LABEL_19;
      goto LABEL_26;
    }
    v15 = ((v14 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      v6 = 4u;
      if (v10 < a2)
      {
LABEL_19:
        v16 = ~v10 + a2;
        if (v12 < 4)
        {
          if ((_DWORD)v11 + ((*(unsigned __int8 *)(v7 + 80) + 16) & ~*(unsigned __int8 *)(v7 + 80)) != -1)
          {
            v17 = v16 & ~(-1 << (8 * v12));
            bzero(a1, v12);
            if ((_DWORD)v12 == 3)
            {
              *a1 = v17;
              *((_BYTE *)a1 + 2) = BYTE2(v17);
            }
            else if ((_DWORD)v12 == 2)
            {
              *a1 = v17;
            }
            else
            {
              *(_BYTE *)a1 = v17;
            }
          }
        }
        else
        {
          bzero(a1, v12);
          *(_DWORD *)a1 = v16;
        }
        __asm { BR              X10 }
      }
LABEL_26:
      __asm { BR              X15 }
    }
    if (v15 >= 0x100)
      v6 = 2;
    else
      v6 = v15 > 1;
  }
  if (v10 < a2)
    goto LABEL_19;
  goto LABEL_26;
}

void sub_234F6E02C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_234F6E034()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_234F6E054()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_234F6E064()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_234F6E06C()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

_UNKNOWN **associated type witness table accessor for DynamicPropertyBox.Property : DynamicProperty in FullEnvironmentBox()
{
  return &protocol witness table for Environment<A>;
}

uint64_t partial apply for closure #1 in EnvironmentBox.update(property:phase:)()
{
  return closure #1 in EnvironmentBox.update(property:phase:)();
}

uint64_t outlined init with take of ObservationTracking._AccessList?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ObservationTracking._AccessList?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined copy of Environment<EnvironmentValues>.Content(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    swift_retain();
  return swift_retain();
}

uint64_t outlined consume of Environment<EnvironmentValues>.Content(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  result = swift_release();
  if ((a3 & 1) != 0)
    return swift_release();
  return result;
}

void type metadata accessor for KeyPath<EnvironmentValues, EnvironmentValues>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for KeyPath<EnvironmentValues, EnvironmentValues>)
  {
    v0 = type metadata accessor for KeyPath();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyPath<EnvironmentValues, EnvironmentValues>);
  }
}

uint64_t StatefulRule.withObservation<A>(do:)@<X0>(char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  return StatefulRule.withObservation<A>(do:)(a1, a2, a3, a4, a5, (uint64_t)_s7SwiftUI16_withObservation2dox5value_0D00D8TrackingV11_AccessListVSg06accessI0txyKXE_tKlFxSpyAJGKXEfU_TA_0, MEMORY[0x24BE09618], MEMORY[0x24BE09680], a6);
}

uint64_t Rule.withObservation<A>(do:)@<X0>(char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  return StatefulRule.withObservation<A>(do:)(a1, a2, a3, a4, a5, (uint64_t)_s7SwiftUI16_withObservation2dox5value_0D00D8TrackingV11_AccessListVSg06accessI0txyKXE_tKlFxSpyAJGKXEfU_TA_0, MEMORY[0x24BE09648], MEMORY[0x24BE09688], a6);
}

uint64_t StatefulRule.withObservation<A>(do:)@<X0>(char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  unsigned int CurrentAttribute;
  void *v33;
  uint64_t (*v34)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  void *v42;
  uint64_t v44;
  int v45;
  uint64_t v46;
  void *v47;
  void (*v48)(char *, uint64_t, uint64_t);
  char *v49;
  char *v50;
  void *v51;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  void (*v57)(char *, char *, char *);
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t AssociatedTypeWitness;
  char *v66;
  char *v67;
  char *v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  _QWORD v86[8];

  v79 = a6;
  v77 = a1;
  v78 = a2;
  v76 = a9;
  v86[6] = *MEMORY[0x24BDAC8D0];
  v81 = type metadata accessor for ObservationTracking._AccessList();
  v14 = *(_QWORD *)(v81 - 8);
  MEMORY[0x24BDAC7A8](v81);
  v16 = (char *)&v66 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v66 = (char *)&v66 - v18;
  MEMORY[0x24BDAC7A8](v19);
  v67 = (char *)&v66 - v20;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v21, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v23 = v22;
  MEMORY[0x24BDAC7A8](v22);
  v74 = (uint64_t)&v66 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25);
  v82 = (char *)&v66 - v26;
  v75 = *((_QWORD *)a4 - 1);
  MEMORY[0x24BDAC7A8](v27);
  v84 = (char *)&v66 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)&v66 - v30;
  CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v73 = v31;
    v69 = CurrentAttribute;
    v83 = a4;
    v72 = a3;
    v71 = a5;
    v70 = a7;
    v85 = a8;
    v68 = v16;
    if (one-time initialization token for lastestAccessLists == -1)
      goto LABEL_3;
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  v33 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  v34 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  v35 = v14;
  v37 = v81;
  v36 = (uint64_t)v82;
  v38 = v34(v82, 1, 1, v81);
  MEMORY[0x24BDAC7A8](v38);
  v39 = (uint64_t)v83;
  v40 = v77;
  *(&v66 - 4) = v83;
  *(&v66 - 3) = v40;
  *(&v66 - 2) = v78;
  v41 = type metadata accessor for Error();
  v42 = v80;
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v36, v79, (uint64_t)(&v66 - 6), v23, v41, v39, MEMORY[0x24BEE3F20], (uint64_t)v86);
  if (v42)
  {
    outlined destroy of ObservationTracking._AccessList?(v36, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5C08], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    static ObservationRegistrar.lastestAccessLists = v33;
    return swift_bridgeObjectRelease();
  }
  else
  {
    v80 = v33;
    v44 = v74;
    outlined init with copy of ObservationTracking._AccessList?(v36, v74, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5C08], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v45 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v44, 1, v37);
    v79 = 0;
    if (v45 == 1)
    {
      v46 = v35;
      outlined destroy of ObservationTracking._AccessList?(v44, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5C08], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v47 = v80;
    }
    else
    {
      v48 = *(void (**)(char *, uint64_t, uint64_t))(v35 + 32);
      v49 = v67;
      v48(v67, v44, v37);
      v50 = v66;
      (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v66, v49, v37);
      swift_beginAccess();
      v51 = static ObservationRegistrar.lastestAccessLists;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      static ObservationRegistrar.lastestAccessLists = v51;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v51 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v51 + 2) + 1, 1, (unint64_t)v51);
        static ObservationRegistrar.lastestAccessLists = v51;
      }
      v54 = *((_QWORD *)v51 + 2);
      v53 = *((_QWORD *)v51 + 3);
      if (v54 >= v53 >> 1)
      {
        v51 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1, v54 + 1, 1, (unint64_t)v51);
        static ObservationRegistrar.lastestAccessLists = v51;
      }
      *((_QWORD *)v51 + 2) = v54 + 1;
      v55 = (unint64_t)v51
          + ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))
          + *(_QWORD *)(v35 + 72) * v54;
      v37 = v81;
      v48((char *)v55, (uint64_t)v50, v81);
      swift_endAccess();
      v46 = v35;
      (*(void (**)(char *, uint64_t))(v35 + 8))(v49, v37);
      v47 = v80;
      v36 = (uint64_t)v82;
    }
    v56 = v83;
    v57 = *(void (**)(char *, char *, char *))(v75 + 32);
    v58 = v73;
    v57(v73, v84, v83);
    outlined destroy of ObservationTracking._AccessList?(v36, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5C08], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v57(v76, v58, v56);
    v59 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
    if (v59)
    {
      v60 = (char *)static ObservationRegistrar.lastestAccessLists
          + ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80));
      v84 = *(char **)(v46 + 72);
      v61 = v37;
      v62 = *(char **)(v46 + 16);
      v82 = (char *)static ObservationRegistrar.lastestAccessLists;
      v83 = v62;
      swift_bridgeObjectRetain();
      v63 = (uint64_t)v68;
      v64 = v69;
      do
      {
        ((void (*)(uint64_t, char *, uint64_t))v83)(v63, v60, v61);
        AssociatedTypeWitness = swift_getAssociatedTypeWitness();
        installObservationSlow<A>(accessList:attribute:)(v63, v64, AssociatedTypeWitness);
        (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v63, v61);
        v60 = &v84[(_QWORD)v60];
        --v59;
      }
      while (v59);
      swift_bridgeObjectRelease();
      v47 = v80;
    }
    static ObservationRegistrar.lastestAccessLists = v47;
    return swift_bridgeObjectRelease();
  }
}

uint64_t _withObservation<A>(do:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  char *v31;
  char *v32;
  char *v33;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char v42[16];
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46[3];
  uint64_t v47;

  v40 = a3;
  v41 = a4;
  v39 = a1;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5C08], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v8 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v38 = (uint64_t)&v38 - v9;
  v10 = type metadata accessor for ObservationTracking._AccessList();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v38 - v15;
  v17 = *(_QWORD *)(a5 - 8);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, double))(v11 + 56))(a2, 1, 1, v10, v19);
  v43 = a5;
  v44 = v40;
  v45 = v41;
  v22 = type metadata accessor for Error();
  v23 = v47;
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a2, (uint64_t)_s7SwiftUI16_withObservation2dox5value_0D00D8TrackingV11_AccessListVSg06accessI0txyKXE_tKlFxSpyAJGKXEfU_TA_0, (uint64_t)v42, v8, v22, a5, MEMORY[0x24BEE3F20], (uint64_t)v46);
  if (v23)
    return outlined destroy of ObservationTracking._AccessList?(a2, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5C08], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v40 = 0;
  v41 = v16;
  v47 = v17;
  v25 = v38;
  outlined init with copy of ObservationTracking._AccessList?(a2, v38, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5C08], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v25, 1, v10) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v25, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5C08], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v26 = v39;
    v27 = v47;
    v28 = a5;
  }
  else
  {
    v29 = v11;
    v30 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 32);
    v31 = v41;
    v30(v41, v25, v10);
    v28 = a5;
    if (one-time initialization token for lastestAccessLists != -1)
      swift_once();
    v38 = v29;
    v32 = v13;
    (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v13, v31, v10);
    swift_beginAccess();
    v33 = (char *)static ObservationRegistrar.lastestAccessLists;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v33;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v33 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v33 + 2) + 1, 1, (unint64_t)v33);
      static ObservationRegistrar.lastestAccessLists = v33;
    }
    v36 = *((_QWORD *)v33 + 2);
    v35 = *((_QWORD *)v33 + 3);
    if (v36 >= v35 >> 1)
    {
      v33 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1, (unint64_t)v33);
      static ObservationRegistrar.lastestAccessLists = v33;
    }
    *((_QWORD *)v33 + 2) = v36 + 1;
    v37 = v38;
    v30(&v33[((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80))+ *(_QWORD *)(v38 + 72) * v36], (uint64_t)v32, v10);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v41, v10);
    v26 = v39;
    v27 = v47;
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v27 + 32))(v26, v21, v28);
}

void one-time initialization function for latestTriggers()
{
  static ObservationRegistrar.latestTriggers = MEMORY[0x24BEE4AF8];
}

uint64_t static ObservationRegistrar.latestTriggers.getter()
{
  return static ObservationRegistrar.latestTriggers.getter(&one-time initialization token for latestTriggers);
}

uint64_t static ObservationRegistrar.latestTriggers.setter(uint64_t a1)
{
  return static ObservationRegistrar.latestTriggers.setter(a1, &one-time initialization token for latestTriggers, &static ObservationRegistrar.latestTriggers);
}

uint64_t (*static ObservationRegistrar.latestTriggers.modify())()
{
  if (one-time initialization token for latestTriggers != -1)
    swift_once();
  swift_beginAccess();
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

void one-time initialization function for lastestAccessLists()
{
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
}

uint64_t static ObservationRegistrar.lastestAccessLists.getter()
{
  return static ObservationRegistrar.latestTriggers.getter(&one-time initialization token for lastestAccessLists);
}

uint64_t static ObservationRegistrar.latestTriggers.getter(_QWORD *a1)
{
  if (*a1 != -1)
    swift_once();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static ObservationRegistrar.lastestAccessLists.setter(uint64_t a1)
{
  return static ObservationRegistrar.latestTriggers.setter(a1, &one-time initialization token for lastestAccessLists, &static ObservationRegistrar.lastestAccessLists);
}

uint64_t static ObservationRegistrar.latestTriggers.setter(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  if (*a2 != -1)
    swift_once();
  swift_beginAccess();
  *a3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static ObservationRegistrar.lastestAccessLists.modify())()
{
  if (one-time initialization token for lastestAccessLists != -1)
    swift_once();
  swift_beginAccess();
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t closure #1 in _withObservation<A>(do:)(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t StatusReg;
  uint64_t v8;
  uint64_t result;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v8 = *(_QWORD *)(StatusReg + 848);
  *(_QWORD *)(StatusReg + 848) = a1;
  result = a2();
  *(_QWORD *)(StatusReg + 848) = v8;
  if (v5)
    *a5 = v5;
  return result;
}

uint64_t _s7SwiftUI16_withObservation2dox5value_0D00D8TrackingV11_AccessListVSg06accessI0txyKXE_tKlFxSpyAJGKXEfU_TA_0(uint64_t a1, _QWORD *a2)
{
  return partial apply for closure #1 in _withObservation<A>(do:)(a1, a2);
}

uint64_t _withObservation<A, B>(attribute:do:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  char *v34;
  char *v35;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  void (*v40)(char *, void *, uint64_t);
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  void *v60;
  _QWORD v61[8];

  v58 = a3;
  v48 = a4;
  v57 = a2;
  v49 = a1;
  v55 = a6;
  v61[6] = *MEMORY[0x24BDAC8D0];
  v7 = type metadata accessor for ObservationTracking._AccessList();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v53 = (char *)&v47 - v12;
  MEMORY[0x24BDAC7A8](v13);
  v54 = (char *)&v47 - v14;
  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, v15, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v56 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v50 = (uint64_t)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v47 - v19;
  v51 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v47 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v52 = (char *)&v47 - v25;
  if (one-time initialization token for lastestAccessLists != -1)
    swift_once();
  swift_beginAccess();
  v60 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x24BEE4AF8];
  v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v20, 1, 1, v7);
  MEMORY[0x24BDAC7A8](v26);
  v27 = v57;
  *(&v47 - 4) = a5;
  *(&v47 - 3) = v27;
  *(&v47 - 2) = (uint64_t)v58;
  v28 = type metadata accessor for Error();
  v29 = v59;
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v20, (uint64_t)_s7SwiftUI16_withObservation2dox5value_0D00D8TrackingV11_AccessListVSg06accessI0txyKXE_tKlFxSpyAJGKXEfU_TA_0, (uint64_t)(&v47 - 6), v56, v28, a5, MEMORY[0x24BEE3F20], (uint64_t)v61);
  if (v29)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v20, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5C08], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    static ObservationRegistrar.lastestAccessLists = v60;
    return swift_bridgeObjectRelease();
  }
  else
  {
    v31 = a5;
    v58 = v23;
    v59 = 0;
    v32 = v50;
    outlined init with copy of ObservationTracking._AccessList?((uint64_t)v20, v50, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5C08], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v32, 1, v7) == 1)
    {
      outlined destroy of ObservationTracking._AccessList?(v32, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5C08], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    }
    else
    {
      v33 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 32);
      v34 = v54;
      v33(v54, v32, v7);
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v53, v34, v7);
      swift_beginAccess();
      v35 = (char *)static ObservationRegistrar.lastestAccessLists;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      static ObservationRegistrar.lastestAccessLists = v35;
      v47 = v31;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v35 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v35 + 2) + 1, 1, (unint64_t)v35);
        static ObservationRegistrar.lastestAccessLists = v35;
      }
      v38 = *((_QWORD *)v35 + 2);
      v37 = *((_QWORD *)v35 + 3);
      if (v38 >= v37 >> 1)
      {
        v35 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1, (unint64_t)v35);
        static ObservationRegistrar.lastestAccessLists = v35;
      }
      *((_QWORD *)v35 + 2) = v38 + 1;
      v33(&v35[((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v38], (uint64_t)v53, v7);
      swift_endAccess();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v54, v7);
      v31 = v47;
    }
    v39 = v52;
    v40 = *(void (**)(char *, void *, uint64_t))(v51 + 32);
    v40(v52, v58, v31);
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v20, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5C08], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v40(v55, v39, v31);
    v41 = *((_QWORD *)static ObservationRegistrar.lastestAccessLists + 2);
    if (v41)
    {
      v42 = (char *)static ObservationRegistrar.lastestAccessLists
          + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
      v43 = *(_QWORD *)(v8 + 72);
      v44 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
      v58 = static ObservationRegistrar.lastestAccessLists;
      swift_bridgeObjectRetain();
      v45 = v48;
      v46 = v49;
      do
      {
        v44(v10, v42, v7);
        installObservationSlow<A>(accessList:attribute:)((uint64_t)v10, v46, v45);
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        v42 += v43;
        --v41;
      }
      while (v41);
      swift_bridgeObjectRelease();
    }
    static ObservationRegistrar.lastestAccessLists = v60;
    return swift_bridgeObjectRelease();
  }
}

uint64_t _installObservation<A>(accessLists:attribute:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v6 = result;
    v7 = *(_QWORD *)(type metadata accessor for ObservationTracking._AccessList() - 8);
    v8 = v6 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v9 = *(_QWORD *)(v7 + 72);
    swift_bridgeObjectRetain();
    do
    {
      installObservationSlow<A>(accessList:attribute:)(v8, a2, a3);
      v8 += v9;
      --v3;
    }
    while (v3);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t installObservationSlow<A>(accessList:attribute:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  id v12;
  void *v13;
  id v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  _BYTE v22[8];
  char v23[8];

  type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5C08], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v5);
  v7 = &v22[-v6];
  v8 = type metadata accessor for ObservationTracking();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x24BE096C0])
  {
    v12 = (id)AGSubgraphGetCurrent();
    if (!v12)
      goto LABEL_8;
    v13 = v12;
    v14 = (id)AGSubgraphGetGraph();

  }
  else
  {
    v14 = (id)AGGraphGetAttributeGraph();
  }
  if (AGGraphGetContext())
  {
    swift_retain();

    swift_weakInit();
    swift_weakAssign();
    swift_release();
    outlined init with take of WeakUncheckedSendable<GraphHost>((uint64_t)v22, (uint64_t)v23);
    v15 = AGCreateWeakAttribute();
    v16 = v15;
    v17 = HIDWORD(v15);
    v18 = type metadata accessor for ObservationTracking._AccessList();
    v19 = *(_QWORD *)(v18 - 8);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v19 + 16))(v7, a1, v18);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v7, 0, 1, v18);
    ObservationTracking.init(_:)();
    outlined init with copy of ObservationTracking._AccessList?((uint64_t)v23, (uint64_t)v22, &lazy cache variable for type metadata for WeakUncheckedSendable<GraphHost>, (uint64_t (*)(uint64_t))type metadata accessor for GraphHost, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for WeakUncheckedSendable);
    v20 = swift_allocObject();
    *(_QWORD *)(v20 + 16) = a3;
    *(_DWORD *)(v20 + 24) = v16;
    *(_DWORD *)(v20 + 28) = v17;
    outlined init with take of WeakUncheckedSendable<GraphHost>((uint64_t)v22, v20 + 32);
    static ObservationTracking._installTracking(_:willSet:didSet:)();
    swift_release();
    (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
    return outlined destroy of ObservationTracking._AccessList?((uint64_t)v23, &lazy cache variable for type metadata for WeakUncheckedSendable<GraphHost>, (uint64_t (*)(uint64_t))type metadata accessor for GraphHost, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for WeakUncheckedSendable);
  }
  __break(1u);
LABEL_8:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in installObservationSlow<A>(accessList:attribute:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7 = _ViewInputs.base.modify(a2, a4);
  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ObservationTracking>, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5C20], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v8 = type metadata accessor for ObservationTracking();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_23527E860;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v9 + 16))(v11 + v10, a1, v8);
  if (one-time initialization token for _lock != -1)
    swift_once();
  v12 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  closure #1 in closure #1 in installObservationSlow<A>(accessList:attribute:)(a2, a3, v7, v11);
  static Update.end()();
  _MovableLockUnlock(v12);
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in closure #1 in installObservationSlow<A>(accessList:attribute:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  result = AGWeakAttributeGetAttribute();
  if ((_DWORD)result == *MEMORY[0x24BE096C0] || (result = swift_weakLoadStrong()) == 0)
  {
    v9 = *(_QWORD *)(a4 + 16);
    if (v9)
    {
      v10 = *(_QWORD *)(type metadata accessor for ObservationTracking() - 8);
      v11 = a4 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
      v12 = *(_QWORD *)(v10 + 72);
      swift_bridgeObjectRetain();
      do
      {
        ObservationTracking.cancel()();
        v11 += v12;
        --v9;
      }
      while (v9);
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v7 = _threadTransactionData();
    if (v7)
    {
      type metadata accessor for PropertyList.Element();
      swift_unknownObjectRetain();
      v7 = swift_dynamicCastClassUnconditional();
    }
    v8 = _threadTransactionID();
    specialized GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)(v7, v8, a3, a4, 0, 1);
    swift_release();
    return swift_release();
  }
  return result;
}

void (*Rule.observationInstaller.getter(uint64_t a1, uint64_t a2))(uint64_t a1)
{
  void (*result)(uint64_t);
  int v5;
  uint64_t v6;

  result = (void (*)(uint64_t))AGGraphGetCurrentAttribute();
  if ((_DWORD)result == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v5 = (int)result;
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = a1;
    *(_QWORD *)(v6 + 24) = a2;
    *(_DWORD *)(v6 + 32) = v5;
    return partial apply for closure #1 in Rule.observationInstaller.getter;
  }
  return result;
}

void (*StatefulRule.observationInstaller.getter(uint64_t a1, uint64_t a2))(uint64_t a1)
{
  void (*result)(uint64_t);
  int v5;
  uint64_t v6;

  result = (void (*)(uint64_t))AGGraphGetCurrentAttribute();
  if ((_DWORD)result == *MEMORY[0x24BE096C0])
  {
    __break(1u);
  }
  else
  {
    v5 = (int)result;
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = a1;
    *(_QWORD *)(v6 + 24) = a2;
    *(_DWORD *)(v6 + 32) = v5;
    return partial apply for closure #1 in StatefulRule.observationInstaller.getter;
  }
  return result;
}

void closure #1 in Rule.observationInstaller.getter(uint64_t a1, uint64_t a2)
{
  id v4;
  int IsValid;
  id v6;
  id v7;

  v4 = (id)AGGraphGetAttributeSubgraph();
  IsValid = AGSubgraphIsValid();

  if (IsValid)
  {
    v7 = (id)AGGraphGetAttributeSubgraph();
    AGGraphClearUpdate();
    v6 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    closure #1 in closure #1 in Rule.observationInstaller.getter(a1, a2);
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
  }
}

uint64_t closure #1 in closure #1 in Rule.observationInstaller.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ObservationTracking._AccessList>, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5C08], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v4 = type metadata accessor for ObservationTracking._AccessList();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = swift_allocObject() + v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  installObservationSlow<A>(accessList:attribute:)(v7, a2, AssociatedTypeWitness);
  swift_setDeallocating();
  swift_arrayDestroy();
  return swift_deallocClassInstance();
}

uint64_t ObservationGraphMutation.apply()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  char isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  _QWORD v18[2];
  uint64_t v19;

  v4 = type metadata accessor for ObservationTracking();
  v19 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for latestTriggers != -1)
    swift_once();
  swift_beginAccess();
  v7 = static ObservationRegistrar.latestTriggers;
  if (static ObservationRegistrar.latestTriggers < 0
    || (static ObservationRegistrar.latestTriggers & 0x4000000000000000) != 0
    || (isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(),
        v7 = static ObservationRegistrar.latestTriggers,
        (isUniquelyReferenced_nonNull_bridgeObject & 1) == 0))
  {
    if (v7 >> 62)
    {
      swift_bridgeObjectRetain();
      v10 = _CocoaArrayWrapper.endIndex.getter();
      result = _CocoaArrayWrapper.endIndex.getter();
      if (result < 0)
        goto LABEL_29;
      v17 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v10 < 0 || v17 < v10)
      {
        __break(1u);
        goto LABEL_27;
      }
    }
    else
    {
      v10 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x18) >> 1;
    }
    static ObservationRegistrar.latestTriggers = (uint64_t)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, v10);
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  if ((unint64_t)static ObservationRegistrar.latestTriggers >> 62)
  {
LABEL_27:
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if ((v9 & 0x8000000000000000) == 0)
      goto LABEL_8;
    __break(1u);
LABEL_29:
    __break(1u);
    return result;
  }
  v9 = *(_QWORD *)((static ObservationRegistrar.latestTriggers & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_8:
  specialized Array.replaceSubrange<A>(_:with:)(0, v9);
LABEL_12:
  swift_endAccess();
  v11 = *(_QWORD *)(a2 + 16);
  if (v11)
  {
    v18[0] = a2;
    v18[1] = a1;
    v12 = a2 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
    v13 = *(_QWORD *)(v19 + 72);
    v14 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
    swift_bridgeObjectRetain();
    do
    {
      v14(v6, v12, v4);
      if (ObservationTracking.changed.getter())
      {
        swift_beginAccess();
        v15 = swift_retain();
        MEMORY[0x23B7C61A8](v15);
        if (*(_QWORD *)((static ObservationRegistrar.latestTriggers & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((static ObservationRegistrar.latestTriggers & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_endAccess();
        swift_release();
      }
      ObservationTracking.cancel()();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v4);
      v12 += v13;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease();
  }
  result = AGWeakAttributeGetAttribute();
  if ((_DWORD)result != *MEMORY[0x24BE096C0])
    return AGGraphInvalidateValue();
  return result;
}

uint64_t ObservationGraphMutation.combine<A>(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  char v8;
  _BYTE v10[8];
  uint64_t v11;

  v4 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = InvalidatingGraphMutation.combine<A>(with:)(v7);
  if ((v8 & 1) != 0)
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 16))(v6, a1, a2);
    if ((swift_dynamicCast() & 1) != 0)
      specialized Array.append<A>(contentsOf:)(v11);
  }
  return v8 & 1;
}

uint64_t protocol witness for GraphMutation.apply() in conformance ObservationGraphMutation()
{
  uint64_t *v0;

  return ObservationGraphMutation.apply()(*v0, v0[1]);
}

uint64_t sub_234F70010()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in Rule.observationInstaller.getter(uint64_t a1)
{
  uint64_t v1;

  closure #1 in Rule.observationInstaller.getter(a1, *(unsigned int *)(v1 + 32));
}

uint64_t sub_234F7004C()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in StatefulRule.observationInstaller.getter(uint64_t a1)
{
  uint64_t v1;

  closure #1 in Rule.observationInstaller.getter(a1, *(unsigned int *)(v1 + 32));
}

uint64_t outlined init with take of WeakUncheckedSendable<GraphHost>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for WeakUncheckedSendable<GraphHost>, (uint64_t (*)(uint64_t))type metadata accessor for GraphHost, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for WeakUncheckedSendable);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of ObservationTracking._AccessList?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v7;

  type metadata accessor for [(_:)](0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t sub_234F70134()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in installObservationSlow<A>(accessList:attribute:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in installObservationSlow<A>(accessList:attribute:)(a1, *(_QWORD *)(v1 + 24), v1 + 32, *(_QWORD *)(v1 + 16));
}

uint64_t outlined destroy of ObservationTracking._AccessList?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v5;

  type metadata accessor for [(_:)](0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

ValueMetadata *type metadata accessor for ObservationGraphMutation()
{
  return &type metadata for ObservationGraphMutation;
}

uint64_t static AnyTransition.push(from:)(char a1)
{
  uint64_t result;

  type metadata accessor for TransitionBox<PushTransition>(0);
  result = swift_allocObject();
  *(_BYTE *)(result + 16) = a1;
  return result;
}

SwiftUI::PushTransition __swiftcall PushTransition.init(edge:)(SwiftUI::PushTransition edge)
{
  SwiftUI::PushTransition *v1;

  v1->edge = edge.edge;
  return edge;
}

void type metadata accessor for TransitionBox<PushTransition>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for TransitionBox<PushTransition>)
  {
    v2 = lazy protocol witness table accessor for type PushTransition and conformance PushTransition();
    v4 = type metadata accessor for TransitionBox(a1, (uint64_t)&type metadata for PushTransition, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for TransitionBox<PushTransition>);
  }
}

unint64_t lazy protocol witness table accessor for type PushTransition and conformance PushTransition()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PushTransition and conformance PushTransition;
  if (!lazy protocol witness table cache variable for type PushTransition and conformance PushTransition)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for PushTransition, &type metadata for PushTransition);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PushTransition and conformance PushTransition);
  }
  return result;
}

uint64_t PushTransition.edge.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t PushTransition.edge.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*PushTransition.edge.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void PushTransition.body(content:phase:)(char a1@<W1>, uint64_t a2@<X8>)
{
  _BYTE *v2;
  unsigned int v3;
  double v4;

  LOBYTE(v3) = *v2;
  if (a1)
  {
    v3 = 0x1000302u >> (8 * v3);
    if (a1 == 1)
      LOBYTE(v3) = 4;
  }
  v4 = 0.0;
  if (a1 == 1)
    v4 = 1.0;
  *(_BYTE *)a2 = v3;
  *(double *)(a2 + 8) = v4;
}

uint64_t PushTransition._makeContentTransition(transition:)(uint64_t a1)
{
  uint64_t result;

  if (*(_BYTE *)a1 != 3)
    __asm { BR              X10 }
  result = outlined consume of _Transition_ContentTransition.Result(*(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  *(_QWORD *)(a1 + 24) = 1;
  *(_BYTE *)(a1 + 32) = 0;
  return result;
}

uint64_t associated type witness table accessor for Transition.Body : View in PushTransition()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t storeEnumTagSinglePayload for PushTransition(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_234F70560 + 4 * byte_2352B5D11[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_234F70594 + 4 * byte_2352B5D0C[v4]))();
}

uint64_t sub_234F70594(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F7059C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234F705A4);
  return result;
}

uint64_t sub_234F705B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234F705B8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_234F705BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F705C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PushTransition()
{
  return &type metadata for PushTransition;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<PlaceholderContentView<PushTransition>, MoveTransition.MoveLayout>, OpacityRendererEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<PlaceholderContentView<PushTransition>, MoveTransition.MoveLayout>, OpacityRendererEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<PlaceholderContentView<PushTransition>, MoveTransition.MoveLayout>, OpacityRendererEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<PlaceholderContentView<PushTransition>, MoveTransition.MoveLayout>, OpacityRendererEffect>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<PlaceholderContentView<PushTransition>, MoveTransition.MoveLayout> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for OpacityRendererEffect;
    result = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<PlaceholderContentView<PushTransition>, MoveTransition.MoveLayout>, OpacityRendererEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<PlaceholderContentView<PushTransition>, MoveTransition.MoveLayout>, OpacityRendererEffect>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<PlaceholderContentView<PushTransition>, MoveTransition.MoveLayout>, OpacityRendererEffect>)
  {
    type metadata accessor for ModifiedContent<PlaceholderContentView<PushTransition>, MoveTransition.MoveLayout>(255);
    v4 = type metadata accessor for ModifiedContent(a1, v2, (uint64_t)&type metadata for OpacityRendererEffect, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<PlaceholderContentView<PushTransition>, MoveTransition.MoveLayout>, OpacityRendererEffect>);
  }
}

void type metadata accessor for ModifiedContent<PlaceholderContentView<PushTransition>, MoveTransition.MoveLayout>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ModifiedContent<PlaceholderContentView<PushTransition>, MoveTransition.MoveLayout>)
  {
    type metadata accessor for MutableBox<CachedEnvironment>(255, &lazy cache variable for type metadata for PlaceholderContentView<PushTransition>, (uint64_t)&type metadata for PushTransition, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for PlaceholderContentView);
    v4 = type metadata accessor for ModifiedContent(a1, v2, (uint64_t)&type metadata for MoveTransition.MoveLayout, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<PlaceholderContentView<PushTransition>, MoveTransition.MoveLayout>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<PlaceholderContentView<PushTransition>, MoveTransition.MoveLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<PushTransition>, MoveTransition.MoveLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<PushTransition>, MoveTransition.MoveLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<PlaceholderContentView<PushTransition>, MoveTransition.MoveLayout>(255);
    v2[0] = &protocol witness table for PlaceholderContentView<A>;
    v2[1] = &protocol witness table for MoveTransition.MoveLayout;
    result = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<PushTransition>, MoveTransition.MoveLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t AccessibilityCombinable.combined(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a4, v4, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 8))(a1, a2, a3);
}

uint64_t Optional<A>.merge(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t TupleTypeMetadata2;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, double);
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  int v22;
  int v23;
  char v24;
  void (*v25)(uint64_t, uint64_t);
  char *v26;
  void (*v27)(uint64_t, uint64_t);
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  char *v31;
  void (*v32)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;

  v4 = v3;
  v36 = a3;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v35 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v34 = (char *)&v34 - v11;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v13 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v15 = (char *)&v34 - v14;
  v17 = (char *)&v34 + *(int *)(v16 + 48) - v14;
  v18 = *(_QWORD *)(a2 - 8);
  v19 = *(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16);
  v37 = v4;
  v19((char *)&v34 - v14, (uint64_t)v4, a2, v13);
  v20 = a1;
  ((void (*)(char *, uint64_t, uint64_t))v19)(v17, a1, a2);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
  v22 = v21(v15, 1, v7);
  v23 = v21(v17, 1, v7);
  if (v22 == 1)
  {
    if (v23 == 1)
    {
      v24 = 0;
    }
    else
    {
      v25 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
      v26 = v37;
      v25((uint64_t)v37, a2);
      ((void (*)(char *, uint64_t, uint64_t))v19)(v26, v20, a2);
      v25((uint64_t)v17, a2);
      v24 = 1;
    }
  }
  else if (v23 == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v15, v7);
    v24 = 0;
  }
  else
  {
    v27 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v28 = v37;
    v27((uint64_t)v37, a2);
    v29 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v30 = v34;
    v29(v34, v15, v7);
    v31 = v35;
    v29(v35, v17, v7);
    v32 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
    v32((uint64_t)v28, 1, 1, v7);
    v27((uint64_t)v28, a2);
    v24 = (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v31, v7);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v31, v7);
    v29(v28, v30, v7);
    v32((uint64_t)v28, 0, 1, v7);
  }
  return v24 & 1;
}

uint64_t protocol witness for AccessibilityCombinable.merge(with:) in conformance <A> A?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Optional<A>.merge(with:)(a1, a2, *(_QWORD *)(a3 - 8));
}

Swift::Bool __swiftcall Array.merge(with:)(Swift::OpaquePointer with)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = v1;
  v4 = *(_QWORD *)(v1 + 16);
  v5 = MEMORY[0x23B7C6268](*v2, v4);
  swift_bridgeObjectRetain();
  MEMORY[0x23B7C9C04](MEMORY[0x24BEE12C8], v3);
  Array.append<A>(contentsOf:)();
  return v5 != MEMORY[0x23B7C6268](*v2, v4);
}

BOOL protocol witness for AccessibilityCombinable.merge(with:) in conformance [A](Swift::OpaquePointer *a1)
{
  return Array.merge(with:)((Swift::OpaquePointer)a1->_rawValue);
}

uint64_t dispatch thunk of AccessibilityCombinable.merge(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t Gradient.color(at:)(uint64_t a1, double a2)
{
  uint64_t v4;

  type metadata accessor for ColorBox<GradientColorProvider>(0);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_BYTE *)(v4 + 24) = 0;
  *(double *)(v4 + 32) = a2;
  swift_bridgeObjectRetain();
  return v4;
}

void type metadata accessor for ColorBox<GradientColorProvider>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ColorBox<GradientColorProvider>)
  {
    v2 = lazy protocol witness table accessor for type GradientColorProvider and conformance GradientColorProvider();
    v4 = type metadata accessor for ColorBox(a1, (uint64_t)&unk_2506326C0, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ColorBox<GradientColorProvider>);
  }
}

unint64_t lazy protocol witness table accessor for type GradientColorProvider and conformance GradientColorProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GradientColorProvider and conformance GradientColorProvider;
  if (!lazy protocol witness table cache variable for type GradientColorProvider and conformance GradientColorProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GradientColorProvider, &unk_2506326C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GradientColorProvider and conformance GradientColorProvider);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GradientColorProvider and conformance GradientColorProvider;
  if (!lazy protocol witness table cache variable for type GradientColorProvider and conformance GradientColorProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GradientColorProvider, &unk_2506326C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GradientColorProvider and conformance GradientColorProvider);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GradientColorProvider and conformance GradientColorProvider;
  if (!lazy protocol witness table cache variable for type GradientColorProvider and conformance GradientColorProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GradientColorProvider, &unk_2506326C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GradientColorProvider and conformance GradientColorProvider);
  }
  return result;
}

uint64_t AnyGradient.color(at:)(uint64_t a1, double a2)
{
  uint64_t v4;

  type metadata accessor for ColorBox<GradientColorProvider>(0);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_BYTE *)(v4 + 24) = 1;
  *(double *)(v4 + 32) = a2;
  swift_retain();
  return v4;
}

uint64_t initializeBufferWithCopyOfBuffer for GradientColorProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of EitherGradient(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t assignWithCopy for GradientColorProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of EitherGradient(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of EitherGradient(v6, v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for GradientColorProvider(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of EitherGradient(v6, v7);
  *(_QWORD *)(a1 + 16) = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for GradientColorProvider(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GradientColorProvider(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

void *type metadata accessor for GradientColorProvider()
{
  return &unk_2506326C0;
}

float GradientColorProvider.resolve(in:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  void (*v6)(uint64_t *__return_ptr, double *);
  int8x16_t v7;
  int8x16_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  float v17;
  float v18;
  float v19;
  double v20;
  float v21;
  __int32 v22;
  float v23;
  float v24;
  float v25;
  float v26;
  double v27;
  double v28;
  float v29;
  float v31;
  double v32;
  double v33;
  double v34;
  double v35;
  char v36;
  uint64_t v37;
  char v38;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(_QWORD *)v1;
  v5 = *(double *)(v1 + 16);
  if ((*(_BYTE *)(v1 + 8) & 1) != 0)
  {
    v32 = *(double *)a1;
    v33 = *(double *)&v3;
    v6 = *(void (**)(uint64_t *__return_ptr, double *))(*(_QWORD *)v4 + 104);
    swift_retain();
    v6(&v37, &v32);
    outlined consume of EitherGradient(v4, 1);
    v9 = v37;
    v10 = v38;
  }
  else
  {
    swift_retain();
    swift_retain();
    outlined copy of EitherGradient(v4, 0);
    v9 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI8GradientV4StopVG_AF08ResolvedF0VAIVs5NeverOTg503_s7d3UI8f16V7resolve2inAA08h31C0VAA17EnvironmentValuesV_tFAG4G10VAcJVXEfU_AF0pQ0VTf1cn_nTf4ng_n(v4, v2, v3);
    swift_release();
    swift_release();
    if (one-time initialization token for default != -1)
LABEL_21:
      swift_once();
    v10 = static ResolvedGradient.ColorSpace.default;
    outlined consume of EitherGradient(v4, 0);
  }
  v11 = *(_QWORD *)(v9 + 16);
  v12 = v11 - 1;
  if (v11 == 1)
  {
    v13 = *(float *)(v9 + 32);
LABEL_18:
    swift_bridgeObjectRelease();
    return v13;
  }
  if (v11)
  {
    v14 = 0;
    while (1)
    {
      if (!v12)
      {
        __break(1u);
        goto LABEL_21;
      }
      v15 = v9 + v14;
      v16 = *(double *)(v9 + v14 + 96);
      if (v5 <= v16)
        break;
      v14 += 48;
      if (!--v12)
      {
        v13 = *(float *)(v9 + 32 + 48 * v11 - 48);
        goto LABEL_18;
      }
    }
    v13 = *(float *)(v15 + 32);
    v17 = *(float *)(v15 + 36);
    v18 = *(float *)(v15 + 40);
    v19 = *(float *)(v15 + 44);
    v20 = *(double *)(v15 + 48);
    if (v20 <= v5)
    {
      v21 = *(float *)(v15 + 80);
      v22 = *(_DWORD *)(v15 + 84);
      v23 = *(float *)(v15 + 88);
      v24 = *(float *)(v15 + 92);
      *(double *)v7.i64 = (v5 - v20) / (v16 - v20);
      if ((*(_BYTE *)(v9 + v14 + 120) & 1) == 0)
      {
        v25 = *(float *)(v15 + 80);
        LODWORD(v26) = HIDWORD(*(_QWORD *)(v15 + 112));
        v27 = COERCE_FLOAT(HIDWORD(*(_QWORD *)(v15 + 104)));
        v28 = COERCE_FLOAT(*(_QWORD *)(v15 + 112));
        v32 = COERCE_FLOAT(*(_QWORD *)(v15 + 104));
        v33 = v27;
        v34 = v28;
        v35 = v26;
        v36 = 0;
        *(double *)v7.i64 = UnitCurve.value(at:)(*(Swift::Double *)v7.i64);
        v21 = v25;
      }
      LOBYTE(v32) = v10;
      *(float *)v7.i32 = *(double *)v7.i64;
      v31 = *(float *)v7.i32;
      *(float *)v7.i32 = v13;
      v8.i32[0] = v22;
      ResolvedGradient.ColorSpace.mix(_:_:by:)(v7, v17, v18, v19, v21, v8, v23, v24, v31);
      v13 = v29;
    }
    goto LABEL_18;
  }
  swift_bridgeObjectRelease();
  return 0.0;
}

Swift::Int GradientColorProvider.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  Swift::UInt64 v3;
  void (*v4)(_BYTE *);
  Swift::UInt64 v5;
  _BYTE v7[72];

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  Hasher.init(_seed:)();
  if ((v2 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    v4 = *(void (**)(_BYTE *))(*(_QWORD *)v1 + 120);
    swift_retain();
    v4(v7);
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
    specialized Array<A>.hash(into:)((uint64_t)v7, v1);
  }
  outlined consume of EitherGradient(v1, v2);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = v3;
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance GradientColorProvider(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  Swift::UInt64 v5;
  void (*v6)(uint64_t);
  Swift::UInt64 v7;

  v3 = *(_QWORD *)v1;
  v4 = *(_BYTE *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  if ((v4 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    v6 = *(void (**)(uint64_t))(*(_QWORD *)v3 + 120);
    swift_retain();
    v6(a1);
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
    specialized Array<A>.hash(into:)(a1, v3);
  }
  outlined consume of EitherGradient(v3, v4);
  if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v7 = v5;
  else
    v7 = 0;
  Hasher._combine(_:)(v7);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GradientColorProvider()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  Swift::UInt64 v3;
  void (*v4)(_BYTE *);
  Swift::UInt64 v5;
  _BYTE v7[72];

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  Hasher.init(_seed:)();
  if ((v2 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    v4 = *(void (**)(_BYTE *))(*(_QWORD *)v1 + 120);
    swift_retain();
    v4(v7);
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
    specialized Array<A>.hash(into:)((uint64_t)v7, v1);
  }
  outlined consume of EitherGradient(v1, v2);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = v3;
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GradientColorProvider(uint64_t *a1, uint64_t *a2)
{
  char v2;
  double v3;
  uint64_t v4;
  char v5;
  double v6;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;

  v2 = *((_BYTE *)a1 + 8);
  v3 = *((double *)a1 + 2);
  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *((double *)a2 + 2);
  v10 = *a1;
  v11 = v2;
  v8 = v4;
  v9 = v5;
  return static EitherGradient.== infix(_:_:)(&v10, &v8) & (v3 == v6);
}

unint64_t instantiation function for generic protocol witness table for GradientColorProvider(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type GradientColorProvider and conformance GradientColorProvider();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t Binding.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  specialized Binding.wrappedValue.setter(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(a1);
}

uint64_t Binding.projectedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2);
}

uint64_t Binding.transaction.getter()
{
  return swift_retain();
}

uint64_t Binding.transaction.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*Binding.transaction.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t Binding.location.getter()
{
  return swift_retain();
}

uint64_t Binding.location.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*Binding.location.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t Binding._value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 32));
}

uint64_t Binding._value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 32), a1);
}

uint64_t (*Binding._value.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t Binding.init(value:location:transaction:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;

  v7 = *a2;
  *a5 = a3;
  a5[1] = (uint64_t)a2;
  v8 = *(_QWORD *)(v7 + 88);
  v9 = (char *)a5 + *(int *)(type metadata accessor for Binding(0, v8, a3, a4) + 32);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v9, a1, v8);
}

uint64_t Binding.init(value:location:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;

  v7 = *a2;
  *a5 = 0;
  a5[1] = a2;
  v8 = *(_QWORD *)(v7 + 88);
  v9 = (char *)a5 + *(int *)(type metadata accessor for Binding(0, v8, a3, a4) + 32);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v9, a1, v8);
}

uint64_t (*_s7SwiftUI7BindingV11getIsolatedyxycxyYbYAcFZ(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  _QWORD *v6;

  v6 = (_QWORD *)swift_allocObject();
  v6[2] = a3;
  v6[3] = a1;
  v6[4] = a2;
  swift_retain();
  return _s7SwiftUI7BindingV11getIsolatedyxycxyYbYAcFZxycfU_TA;
}

uint64_t Binding.init(get:set:)@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  return Binding.init(get:set:)(a1, a2, a3, a4, a5, a6);
}

{
  return Binding.init(get:set:)(a1, a2, a3, a4, a5, a6);
}

{
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  char *v37;
  _QWORD v38[4];

  v37 = a6;
  MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = a5;
  v13[3] = a3;
  v13[4] = a4;
  v14 = _ViewInputs.base.modify(a1, a2);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  swift_retain();
  v21 = swift_retain();
  a1(v21);
  v24 = type metadata accessor for FunctionalLocation(255, a5, v22, v23);
  v25 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for FunctionalLocation<A>, v24);
  type metadata accessor for LocationBox(0, v24, v25, v26);
  v38[0] = v14;
  v38[1] = v16;
  v38[2] = v18;
  v38[3] = v20;
  swift_retain();
  swift_retain();
  v27 = (uint64_t *)LocationBox.__allocating_init(_:)((uint64_t)v38);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v28 = *v27;
  v29 = v37;
  *(_QWORD *)v37 = 0;
  *((_QWORD *)v29 + 1) = v27;
  v30 = v29;
  v31 = *(_QWORD *)(v28 + 88);
  v34 = type metadata accessor for Binding(0, v31, v32, v33);
  return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(&v30[*(int *)(v34 + 32)], v12, v31);
}

uint64_t static Binding.constant(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t, uint64_t, double);
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;

  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ConstantLocation(0, v9, v10, v11);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v30 - v18;
  v20 = *(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16);
  v20(v8, a1, a2, v17);
  ConstantLocation.init(value:)((uint64_t)v8, a2, (uint64_t)v19);
  ((void (*)(char *, uint64_t, uint64_t))v20)(v8, a1, a2);
  v21 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ConstantLocation<A>, v12);
  type metadata accessor for LocationBox(0, v12, v21, v22);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v15, v19, v12);
  v23 = (uint64_t *)LocationBox.__allocating_init(_:)((uint64_t)v15);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v19, v12);
  v24 = *v23;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = v23;
  v25 = *(_QWORD *)(v24 + 88);
  v28 = type metadata accessor for Binding(0, v25, v26, v27);
  return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(&a3[*(int *)(v28 + 32)], v8, v25);
}

uint64_t Binding.readValue()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  if (one-time initialization token for _lock != -1)
    swift_once();
  if (!_MovableLockIsOwner(static Update._lock) || static Update.dispatchDepth >= static Update.depth)
    return (*(uint64_t (**)(void))(**(_QWORD **)(v2 + 8) + 120))();
  (*(void (**)(uint64_t))(**(_QWORD **)(v2 + 8) + 104))(1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 32));
}

void (*Binding.wrappedValue.modify(_QWORD *a1, uint64_t a2))(_QWORD **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;

  v5 = malloc(0x28uLL);
  *a1 = v5;
  v6 = *(_QWORD *)(a2 + 16);
  *v5 = v2;
  v5[1] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[2] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[3] = malloc(v8);
  v9 = malloc(v8);
  v5[4] = v9;
  Binding.readValue()(a2, (uint64_t)v9);
  return Binding.wrappedValue.modify;
}

void Binding.wrappedValue.modify(_QWORD **a1, char a2)
{
  _QWORD **v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void (*v8)(void *, uint64_t);

  v2 = (_QWORD **)*a1;
  v3 = (void *)(*a1)[3];
  v4 = (void *)(*a1)[4];
  v5 = (*a1)[1];
  v6 = (*a1)[2];
  v7 = (_QWORD *)**a1;
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))((*a1)[3], v4, v5);
    (*(void (**)(void *, _QWORD))(*(_QWORD *)v7[1] + 128))(v3, *v7);
    v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v7[1] + 128))((*a1)[4], *v7);
    v8 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v8(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t Binding.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v8 = a1;
  v5 = type metadata accessor for WritableKeyPath();
  v6 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for WritableKeyPath<A, B>, v5);
  return Binding.projecting<A>(_:)((uint64_t)&v8, a2, v5, v6, a3);
}

uint64_t Binding.projecting<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v6 = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v15 = (char *)&v23 - v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(a4 + 32))(v6 + *(int *)(a2 + 32), a3, a4, v13);
  v16 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v6 + 8) + 136))(a1, a3, a4);
  v17 = *v16;
  *(_QWORD *)a5 = *(_QWORD *)v6;
  *((_QWORD *)a5 + 1) = v16;
  v18 = *(_QWORD *)(v17 + 88);
  v21 = type metadata accessor for Binding(0, v18, v19, v20);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(&a5[*(int *)(v21 + 32)], v15, v18);
  return swift_retain();
}

uint64_t Binding<A>.id.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Binding.readValue()(v5, (uint64_t)v4);
  dispatch thunk of RawRepresentable.rawValue.getter();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t protocol witness for Identifiable.id.getter in conformance <A> Binding<A>(uint64_t a1)
{
  return Binding<A>.id.getter(a1);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance <A> Binding<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v6 = *(_QWORD *)(a2 - 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11 = (char *)&v15 - v10;
  v12 = *(_QWORD *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v12 + 16))(a3, v3, a1, v9);
  Binding<A>.startIndex.getter(a1, v6);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v3, a1);
  v16 = v6;
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for <A> Binding<A>, a1, &v16);
  v13 = type metadata accessor for IndexingIterator();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a3 + *(int *)(v13 + 36), v11, AssociatedTypeWitness);
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance <A> Binding<A>(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence.underestimatedCount.getter in conformance <A> Binding<A>(a1, a2, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1950]);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance <A> Binding<A>(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence.underestimatedCount.getter in conformance <A> Binding<A>(a1, a2, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1970]);
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance <A> Binding<A>(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v7;

  v7 = *(_QWORD *)(a2 - 8);
  v5 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for <A> Binding<A>, a1, &v7);
  return a3(a1, v5);
}

uint64_t Binding<A>.startIndex.getter(uint64_t a1, uint64_t a2)
{
  return Binding<A>.startIndex.getter(a1, a2, (void (*)(uint64_t, _QWORD))MEMORY[0x24BEE18A0]);
}

uint64_t Binding<A>.endIndex.getter(uint64_t a1, uint64_t a2)
{
  return Binding<A>.startIndex.getter(a1, a2, (void (*)(uint64_t, _QWORD))MEMORY[0x24BEE1910]);
}

uint64_t Binding<A>.indices.getter(uint64_t a1, uint64_t a2)
{
  return Binding<A>.startIndex.getter(a1, a2, (void (*)(uint64_t, _QWORD))MEMORY[0x24BEE18F8]);
}

uint64_t Binding<A>.startIndex.getter(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, _QWORD))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Binding.readValue()(v9, (uint64_t)v8);
  a3(v5, *(_QWORD *)(a2 + 8));
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t Binding<A>.index(after:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Binding.readValue()(v6, (uint64_t)v5);
  dispatch thunk of Collection.index(after:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t Binding<A>.formIndex(after:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Binding.readValue()(v6, (uint64_t)v5);
  dispatch thunk of Collection.formIndex(after:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t Binding<A>.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  char *v36;
  void (*v37)(char *, uint64_t, uint64_t);
  void (*v38)(char *, uint64_t, uint64_t, double);
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;

  v5 = v4;
  v42 = a3;
  v45 = a4;
  v46 = a1;
  v44 = *(_QWORD *)(a3 + 8);
  v41 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v34 = AssociatedTypeWitness;
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v43 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v31 - v11;
  v36 = (char *)&v31 - v11;
  v13 = *(_QWORD *)(a2 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  MEMORY[0x24BDAC7A8](v15);
  v40 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v31 - v18;
  v38 = *(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16);
  v38((char *)&v31 - v18, v5, a2, v17);
  v37 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v37(v12, v46, AssociatedTypeWitness);
  v20 = (*(unsigned __int8 *)(v13 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v21 = (v14 + v20 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v35 = v21 + v9;
  v22 = (char *)swift_allocObject();
  *((_QWORD *)v22 + 2) = 0;
  *((_QWORD *)v22 + 3) = 0;
  v23 = v41;
  v24 = v42;
  *((_QWORD *)v22 + 4) = v41;
  *((_QWORD *)v22 + 5) = v24;
  v33 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v33(&v22[v20], v19, a2);
  v32 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v25 = v34;
  v32(&v22[v21], v36, v34);
  v26 = v40;
  ((void (*)(char *, uint64_t, uint64_t))v38)(v40, v39, a2);
  v27 = v43;
  v37(v43, v46, v25);
  v28 = (char *)swift_allocObject();
  *((_QWORD *)v28 + 2) = 0;
  *((_QWORD *)v28 + 3) = 0;
  *((_QWORD *)v28 + 4) = v23;
  *((_QWORD *)v28 + 5) = v24;
  v33(&v28[v20], v26, a2);
  v32(&v28[v21], v27, v25);
  v29 = swift_getAssociatedTypeWitness();
  return Binding.init(get:set:)((void (*)(uint64_t))partial apply for closure #1 in Binding<A>.subscript.getter, (uint64_t)v22, (uint64_t)partial apply for closure #2 in Binding<A>.subscript.getter, (uint64_t)v28, v29, v45);
}

uint64_t closure #1 in Binding<A>.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(_BYTE *, _QWORD);
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  _BYTE v17[32];

  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for Binding(0, v10, v8, v9);
  Binding.readValue()(v11, (uint64_t)v7);
  v12 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
  v14 = v13;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a3, v14, AssociatedTypeWitness);
  v12(v17, 0);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, a2);
}

uint64_t closure #2 in Binding<A>.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  v25 = a1;
  v9 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v15 = (char *)&v24 - v14;
  v16 = swift_getAssociatedTypeWitness();
  v17 = MEMORY[0x24BDAC7A8](v16);
  (*(void (**)(char *, uint64_t, double))(v18 + 16))((char *)&v24 - v19, a5, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v25, AssociatedTypeWitness);
  v22 = type metadata accessor for Binding(0, a6, v20, v21);
  Binding.readValue()(v22, (uint64_t)v11);
  dispatch thunk of MutableCollection.subscript.setter();
  (*(void (**)(char *, _QWORD))(**(_QWORD **)(a4 + 8) + 128))(v11, *(_QWORD *)a4);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, a6);
}

uint64_t protocol witness for Collection.startIndex.getter in conformance <A> Binding<A>(uint64_t a1, uint64_t a2)
{
  return Binding<A>.startIndex.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t protocol witness for Collection.endIndex.getter in conformance <A> Binding<A>(uint64_t a1, uint64_t a2)
{
  return Binding<A>.endIndex.getter(a1, *(_QWORD *)(a2 - 8));
}

void (*protocol witness for Collection.subscript.read in conformance <A> Binding<A>(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4))(_QWORD *a1)
{
  uint64_t *v8;

  v8 = (uint64_t *)malloc(0x28uLL);
  *a1 = v8;
  v8[4] = (uint64_t)Binding<A>.subscript.read(v8, a2, a3, *(_QWORD *)(a4 - 8));
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

void (*Binding<A>.subscript.read(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4))(_QWORD *a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = type metadata accessor for Binding(0, AssociatedTypeWitness, v9, v10);
  *a1 = v11;
  v12 = *(_QWORD *)(v11 - 8);
  a1[1] = v12;
  v13 = (char *)malloc(*(_QWORD *)(v12 + 64));
  a1[2] = (uint64_t)v13;
  Binding<A>.subscript.getter(a2, a3, a4, v13);
  return ArraySlice.subscript.readspecialized ;
}

uint64_t protocol witness for Collection.indices.getter in conformance <A> Binding<A>(uint64_t a1, uint64_t a2)
{
  return Binding<A>.indices.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance <A> Binding<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  swift_getAssociatedTypeWitness();
  v2 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t protocol witness for Collection.index(after:) in conformance <A> Binding<A>(uint64_t a1, uint64_t a2)
{
  return Binding<A>.index(after:)(a1, a2);
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance <A> Binding<A>(uint64_t a1, uint64_t a2)
{
  return Binding<A>.formIndex(after:)(a1, a2);
}

uint64_t Binding<A>.index(before:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Binding.readValue()(v6, (uint64_t)v5);
  dispatch thunk of BidirectionalCollection.index(before:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t Binding<A>.formIndex(before:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Binding.readValue()(v6, (uint64_t)v5);
  dispatch thunk of BidirectionalCollection.formIndex(before:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance <A> Binding<A>(uint64_t a1, uint64_t a2)
{
  return Binding<A>.index(before:)(a1, a2);
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance <A> Binding<A>(uint64_t a1, uint64_t a2)
{
  return Binding<A>.formIndex(before:)(a1, a2);
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance <A> Binding<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD v6[2];

  v4 = *(_QWORD *)(a4 - 8);
  v6[0] = *(_QWORD *)(*(_QWORD *)(a4 - 16) + 8);
  v6[1] = v4;
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for <A> Binding<A>, a3, v6);
  return BidirectionalCollection.index(_:offsetBy:)();
}

uint64_t protocol witness for RandomAccessCollection.distance(from:to:) in conformance <A> Binding<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v7 = *(_QWORD *)(a4 - 8);
  v10[0] = *(_QWORD *)(*(_QWORD *)(a4 - 16) + 8);
  v10[1] = v7;
  v8 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for <A> Binding<A>, a3, v10);
  return MEMORY[0x23B7C5C14](a1, a2, a3, v8);
}

uint64_t Binding.transaction(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, v3, a2);
  swift_retain();
  result = swift_release();
  *a3 = a1;
  return result;
}

uint64_t Binding.animation(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, v3, a2);
  swift_retain();
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(a3, a1);
  swift_release_n();
  return swift_release();
}

void Binding.subscript.getter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(*(_QWORD *)(*MEMORY[0x24BEE2B70] + *a1 + 8) + 16);
  MEMORY[0x24BDAC7A8](a1);
  v4 = type metadata accessor for BindingOperations.NilCoalescing(0, v1, v2, v3);
  MEMORY[0x24BDAC7A8](v4);
  v5 = type metadata accessor for WritableKeyPath();
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for WritableKeyPath<A, B>, v5);
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for BindingOperations.NilCoalescing<A>, v4);
  type metadata accessor for ComposedProjection();
}

void sub_234F72B70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;

  *(_QWORD *)(v17 - 168) = *(_QWORD *)(a1 - 8);
  v18 = MEMORY[0x24BDAC7A8](a1);
  v20 = (char *)&a9 - v19;
  *(_QWORD *)(v17 - 112) = *(_QWORD *)(v17 - 160);
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v10 + 16))(v15, *(_QWORD *)(v17 - 136), v13, v18);
  BindingOperations.NilCoalescing.init(defaultValue:)(v15, v13, v16);
  Projection.composed<A>(with:)(v16, v9, v14, v12, v11, (uint64_t)v20);
}

uint64_t sub_234F72BEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 152) + 8))(v2, v0);
  v5 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ComposedProjection<A, B>, v3);
  Binding.projecting<A>(_:)(v1, *(_QWORD *)(v4 - 144), v3, v5, *(char **)(v4 - 128));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 168) + 8))(v1, v3);
}

uint64_t Binding.zip<A>(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  uint64_t TupleTypeMetadata2;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];

  v5 = v4;
  v10 = *(_QWORD *)(a2 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v13 = (char *)&v32 - v12;
  v14 = _ViewInputs.base.modify(v5[1], *(_QWORD *)(a1 + 8));
  v32 = v15;
  v33 = v14;
  v16 = (char *)v5 + *(int *)(a2 + 32);
  v19 = a1 + *(int *)(type metadata accessor for Binding(0, a3, v17, v18) + 32);
  v20 = &v13[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v13, v16, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(v20, v19, a3);
  v22 = type metadata accessor for ZipLocation(255, v10, a3, v21);
  v23 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ZipLocation<A, B>, v22);
  type metadata accessor for LocationBox(0, v22, v23, v24);
  v34[0] = v33;
  v34[1] = v32;
  swift_retain();
  swift_retain();
  v25 = (uint64_t *)LocationBox.__allocating_init(_:)((uint64_t)v34);
  v26 = *v25;
  *(_QWORD *)a4 = *v5;
  *((_QWORD *)a4 + 1) = v25;
  v27 = *(_QWORD *)(v26 + 88);
  v30 = type metadata accessor for Binding(0, v27, v28, v29);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(&a4[*(int *)(v30 + 32)], v13, v27);
  return swift_retain();
}

void Binding.init<A>(flattening:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[16];
  uint64_t v19;
  uint64_t v20;
  uint64_t KeyPath;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[5];
  uint64_t v26;

  MEMORY[0x24BDAC7A8](a1);
  v22 = v7;
  v23 = v8;
  v24 = v9;
  v19 = a3;
  v20 = a4;
  KeyPath = swift_getKeyPath();
  v12 = (char *)type metadata accessor for AnyLocation(0, a2, v10, v11);
  v14 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for implicit closure #1 in Binding.init<A>(flattening:), (uint64_t)v18, a3, v12, MEMORY[0x24BEE4078], a4, MEMORY[0x24BEE40A8], v13);
  swift_release();
  v15 = type metadata accessor for Array();
  v16 = MEMORY[0x23B7C9C04](MEMORY[0x24BEE12E0], v15);
  v26 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AnyLocation<A>, v12);
  v17 = MEMORY[0x23B7C9C04](MEMORY[0x24BEE12C0], v15, &v26);
  FlattenedCollectionLocation.init(base:)(v14, v15, (uint64_t)v25);
  v25[3] = v17;
  v25[4] = v25[0];
  v25[0] = a2;
  v25[1] = v15;
  v25[2] = v16;
  type metadata accessor for FlattenedCollectionLocation();
}

uint64_t sub_234F72F58(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  FlattenedCollectionLocation.get()();
  v8 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for FlattenedCollectionLocation<A, B>, a1);
  type metadata accessor for LocationBox(0, a1, v8, v9);
  *(_QWORD *)(v6 - 136) = v5;
  v10 = (uint64_t *)LocationBox.__allocating_init(_:)(v6 - 136);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v4, v3);
  v11 = *v10;
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = v10;
  v12 = *(_QWORD *)(v11 + 88);
  v15 = type metadata accessor for Binding(0, v12, v13, v14);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(&v1[*(int *)(v15 + 32)], v2, v12);
}

void static Binding._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  specialized static Binding._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a3, a4, a5);
}

uint64_t Binding.Box.update(property:phase:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v4 = v3;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v3;
  if (*v3)
  {
    swift_beginAccess();
    if (*(_QWORD *)(v12 + 16) == *(_QWORD *)(a1 + 8))
      goto LABEL_8;
    HIDWORD(v26) = LocationBox.wasRead.getter();
  }
  else
  {
    HIDWORD(v26) = 0;
  }
  v13 = type metadata accessor for Binding.ScopedLocation(255, v6, v8, v9);
  v14 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Binding<A>.ScopedLocation, v13);
  type metadata accessor for LocationBox(0, v13, v14, v15);
  v16 = *(_QWORD *)(a1 + 8);
  v17 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 96);
  v18 = swift_retain_n();
  LOBYTE(v13) = v17(v18);
  swift_release();
  v27 = v16;
  v28 = v13 & 1;
  v19 = LocationBox.__allocating_init(_:)((uint64_t)&v27);
  swift_release();
  *v4 = v19;
  if ((v26 & 0x100000000) != 0)
    LocationBox.wasRead.setter(1);
  v12 = v19;
LABEL_8:
  v20 = LocationBox.update()((uint64_t)v11);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = v12;
  v23 = type metadata accessor for Binding(0, v6, v21, v22);
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 24))(a1 + *(int *)(v23 + 32), v11, v6);
  if ((v20 & 1) == 0)
  {
    v25 = 0;
    goto LABEL_12;
  }
  if (*v4)
  {
    v25 = LocationBox.wasRead.getter();
LABEL_12:
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
    return v25 & 1;
  }
  __break(1u);
  return result;
}

uint64_t Binding.ScopedLocation.get()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a1 + 120))();
}

uint64_t Binding.ScopedLocation.set(_:transaction:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a3 + 128))();
}

uint64_t Binding.ScopedLocation.update()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a2 + 144))() & 1;
}

uint64_t static Binding.ScopedLocation.== infix(_:_:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;

  v5 = a4;
  type metadata accessor for AnyLocation(0, a5, a3, a4);
  return static AnyLocation.== infix(_:_:)(a1, a3) & ~(a2 ^ v5) & 1;
}

uint64_t protocol witness for Location.wasRead.getter in conformance Binding<A>.ScopedLocation()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t protocol witness for Location.wasRead.setter in conformance Binding<A>.ScopedLocation(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = result;
  return result;
}

uint64_t protocol witness for Location.get() in conformance Binding<A>.ScopedLocation()
{
  uint64_t *v0;

  return Binding.ScopedLocation.get()(*v0);
}

uint64_t protocol witness for Location.set(_:transaction:) in conformance Binding<A>.ScopedLocation(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return Binding.ScopedLocation.set(_:transaction:)(a1, a2, *v2);
}

uint64_t protocol witness for Location.update() in conformance Binding<A>.ScopedLocation(uint64_t a1)
{
  uint64_t *v1;

  return Binding.ScopedLocation.update()(a1, *v1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Binding<A>.ScopedLocation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Binding.ScopedLocation.== infix(_:_:)(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8), *(_QWORD *)a2, *(unsigned __int8 *)(a2 + 8), *(_QWORD *)(a3 + 16));
}

void protocol witness for static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:) in conformance Binding<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  specialized static Binding._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a3, a4, *(_QWORD *)(a6 + 16));
}

uint64_t static EnableRuntimeConcurrencyCheck.isEnabled.getter()
{
  return 1;
}

void specialized static Binding._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = 0;
  v5 = type metadata accessor for Binding.Box(0, a4, a3, a4);
  v6 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Binding<A>.Box, v5);
  _DynamicPropertyBuffer.append<A>(_:fieldOffset:)((uint64_t)&v7, a2, v5, v6);
}

uint64_t specialized Binding.wrappedValue.setter(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(**(_QWORD **)(v1 + 8) + 128))(a1, *(_QWORD *)v1);
}

uint64_t type metadata accessor for Binding(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Binding);
}

uint64_t sub_234F733F0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _s7SwiftUI7BindingV11getIsolatedyxycxyYbYAcFZxycfU_TA()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t partial apply for closure #1 in Binding.init(get:set:)(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(v1 + 24);
  swift_retain();
  v3(a1);
  return swift_release();
}

uint64_t partial apply for closure #1 in Binding.init(get:set:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void (*v5)(uint64_t, uint64_t);

  v5 = *(void (**)(uint64_t, uint64_t))(v2 + 24);
  swift_retain();
  v5(a1, a2);
  return swift_release();
}

uint64_t partial apply for closure #1 in Binding<A>.subscript.getter@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;

  v5 = *(_QWORD *)(v3 + 32);
  type metadata accessor for Binding(0, v5, a1, a2);
  swift_getAssociatedTypeWitness();
  return closure #1 in Binding<A>.subscript.getter(*(_QWORD *)(v3 + 16), v5, a3);
}

uint64_t objectdestroy_8Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  unint64_t v12;

  v5 = *(_QWORD *)(v4 + 32);
  v6 = type metadata accessor for Binding(0, v5, a3, a4);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = v8 + *(_QWORD *)(v7 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = (v9 + *(unsigned __int8 *)(v11 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4 + v8 + *(int *)(v6 + 32), v5);
  (*(void (**)(unint64_t, uint64_t))(v11 + 8))(v4 + v12, AssociatedTypeWitness);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in Binding<A>.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v6 = v4[4];
  v7 = *(_QWORD *)(type metadata accessor for Binding(0, v6, a3, a4) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = v8 + *(_QWORD *)(v7 + 64);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 80);
  return closure #2 in Binding<A>.subscript.getter(a1, v4[2], v4[3], (uint64_t)v4 + v8, (uint64_t)v4 + ((v9 + v10) & ~v10), v6);
}

uint64_t partial apply for implicit closure #1 in Binding.init<A>(flattening:)()
{
  return swift_getAtKeyPath();
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in <A> Binding<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t base witness table accessor for Sequence in <A> Binding<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a3 - 8);
  return MEMORY[0x23B7C9C04]("AU;\x1B,J\n", a1, &v4);
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in <A> Binding<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in <A> Binding<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t base witness table accessor for Collection in <A> Binding<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a3 - 16);
  return MEMORY[0x23B7C9C04](&protocol conformance descriptor for <A> Binding<A>, a1, &v4);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in <A> Binding<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in <A> Binding<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in <A> Binding<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for <A> Binding<A>, MEMORY[0x24BEE4218]);
}

uint64_t base witness table accessor for BidirectionalCollection in <A> Binding<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v5[2];

  v3 = *(_QWORD *)(a3 - 8);
  v5[0] = *(_QWORD *)(*(_QWORD *)(a3 - 16) + 8);
  v5[1] = v3;
  return MEMORY[0x23B7C9C04](&protocol conformance descriptor for <A> Binding<A>, a1, v5);
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in <A> Binding<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in <A> Binding<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in <A> Binding<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for <A> Binding<A>, MEMORY[0x24BEE4230]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in <A> Binding<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  int8x16_t v9;

  v9 = vextq_s8(*(int8x16_t *)(a3 - 16), *(int8x16_t *)(a3 - 16), 8uLL);
  v8 = MEMORY[0x23B7C9C04](a4, a2, &v9);
  return MEMORY[0x23B7C9C04](a5, a1, &v8);
}

uint64_t sub_234F738EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = type metadata accessor for Binding(0, *(_QWORD *)(a3 + a2 - 8), a3, a4);
  return Binding.wrappedValue.getter(v4);
}

uint64_t sub_234F73924(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for Binding(0, *(_QWORD *)(a4 + a3 - 8), a3, a4);
  return specialized Binding.wrappedValue.setter(a1);
}

uint64_t sub_234F73960()
{
  return 8;
}

_QWORD *sub_234F7396C(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t type metadata completion function for Binding()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Binding(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = ((v6 + 16) & ~v6) + *(_QWORD *)(v5 + 64);
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v12 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    v13 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v12 = *v13;
    v14 = ((unint64_t)v12 + v6 + 8) & ~v6;
    v15 = ((unint64_t)v13 + v6 + 8) & ~v6;
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v16(v14, v15, v4);
  }
  return a1;
}

uint64_t destroy for Binding(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a1 + 15;
  swift_release();
  swift_release();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((v3 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *initializeWithCopy for Binding(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void (*v12)(uint64_t, unint64_t, uint64_t);

  v5 = *a2;
  v4 = (unint64_t)a2 + 15;
  *a1 = v5;
  v6 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)v6 + v9 + 8) & ~v9;
  v11 = (v9 + 8 + (v4 & 0xFFFFFFFFFFFFFFF8)) & ~v9;
  v12 = *(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 16);
  swift_retain();
  swift_retain();
  v12(v10, v11, v7);
  return a1;
}

_QWORD *assignWithCopy for Binding(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v5 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  v6 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))(((unint64_t)v6 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(unsigned __int8 *)(v7 + 80) + 8 + (v5 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

_QWORD *initializeWithTake for Binding(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 32))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_QWORD *assignWithTake for Binding(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v5 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  v6 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 &= 0xFFFFFFFFFFFFFFF8;
  *v6 = *(_QWORD *)v5;
  swift_release();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))(((unint64_t)v6 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(unsigned __int8 *)(v7 + 80) + 8 + v5) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for Binding(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 16) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      v15 = (unint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v15 + v7 + 8) & ~v7);
      v16 = *v15;
      if (v16 >= 0xFFFFFFFF)
        LODWORD(v16) = -1;
      return (v16 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234F73E08 + 4 * byte_2352B5E50[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for Binding(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

ValueMetadata *type metadata accessor for EnableRuntimeConcurrencyCheck()
{
  return &type metadata for EnableRuntimeConcurrencyCheck;
}

uint64_t type metadata accessor for Binding.Box(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Binding.Box);
}

_UNKNOWN **associated type witness table accessor for DynamicPropertyBox.Property : DynamicProperty in Binding<A>.Box()
{
  return &protocol witness table for Binding<A>;
}

uint64_t type metadata accessor for Binding.ScopedLocation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Binding.ScopedLocation);
}

uint64_t instantiation function for generic protocol witness table for Binding<A>.ScopedLocation(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Binding<A>.ScopedLocation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t View._untagged()(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = 1;
  return View._trait<A>(_:_:)((uint64_t)&type metadata for IsAuxiliaryContentTraitKey, (uint64_t)&v3, a1, (uint64_t)&type metadata for IsAuxiliaryContentTraitKey, a2, (uint64_t)&protocol witness table for IsAuxiliaryContentTraitKey);
}

uint64_t View.tag<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v10 = type metadata accessor for TagValueTraitKey.Value(0, a3, a5, a4);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v19 - v12;
  v15 = type metadata accessor for TagValueTraitKey(0, a3, a5, v14);
  v16 = *(_QWORD *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v13, a1, a3);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, a3);
  v17 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TagValueTraitKey<A>, v15);
  View._trait<A>(_:_:)(v15, (uint64_t)v13, a2, v15, a4, v17);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t type metadata accessor for TagValueTraitKey.Value(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TagValueTraitKey.Value);
}

uint64_t type metadata accessor for TagValueTraitKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TagValueTraitKey);
}

uint64_t View.removeTag<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[2];
  uint64_t v44;

  v39 = a3;
  v42 = a5;
  v8 = type metadata accessor for Optional();
  v44 = a4;
  v38 = MEMORY[0x23B7C9C04](MEMORY[0x24BEE4AB0], v8, &v44);
  v10 = type metadata accessor for TagValueTraitKey.Value(0, v8, v38, v9);
  v40 = *(_QWORD *)(v10 - 8);
  v41 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v35 - v11;
  v36 = type metadata accessor for TagValueTraitKey.Value(0, a2, a4, v13);
  v14 = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v16 = (char *)&v35 - v15;
  v18 = type metadata accessor for TagValueTraitKey(255, a2, a4, v17);
  v19 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TagValueTraitKey<A>, v18);
  v21 = type metadata accessor for _TraitWritingModifier(255, v18, v19, v20);
  v23 = type metadata accessor for ModifiedContent(0, a1, v21, v22);
  v37 = *(_QWORD *)(v23 - 8);
  v24 = MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)&v35 - v25;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)(a2 - 8) + 56))(v16, 1, 1, a2, v24);
  v27 = v18;
  v28 = v18;
  v29 = v39;
  View._trait<A>(_:_:)(v27, (uint64_t)v16, a1, v28, v39, v19);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v36);
  v31 = type metadata accessor for TagValueTraitKey(0, v8, v38, v30);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v12, 1, 1, v8);
  v43[0] = v29;
  v43[1] = &protocol witness table for _TraitWritingModifier<A>;
  v32 = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v23, v43);
  v33 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TagValueTraitKey<A>, v31);
  View._trait<A>(_:_:)(v31, (uint64_t)v12, v23, v31, v32, v33);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v12, v41);
  return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v26, v23);
}

uint64_t static TagValueTraitKey.defaultValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 1, 1);
}

uint64_t protocol witness for static _ViewTraitKey.defaultValue.getter in conformance TagValueTraitKey<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static TagValueTraitKey.defaultValue.getter(*(_QWORD *)(a1 + 16), a2);
}

uint64_t static IsAuxiliaryContentTraitKey.defaultValue.getter()
{
  return 0;
}

uint64_t ViewTraitCollection.isAuxiliaryContent.getter()
{
  uint64_t *v0;
  uint64_t v1;
  char v2;

  v1 = *v0;
  swift_bridgeObjectRetain();
  v2 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(0, v1);
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t key path getter for ViewTraitCollection.isAuxiliaryContent : ViewTraitCollection@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  char v4;
  uint64_t result;

  v3 = *a1;
  swift_bridgeObjectRetain();
  v4 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(0, v3);
  result = swift_bridgeObjectRelease();
  *a2 = v4 & 1;
  return result;
}

uint64_t (*ViewTraitCollection.isAuxiliaryContent.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  char v4;

  *(_QWORD *)a1 = v1;
  v3 = *v1;
  swift_bridgeObjectRetain();
  v4 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(0, v3);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = v4 & 1;
  return ViewTraitCollection.isAuxiliaryContent.modify;
}

uint64_t ViewTraitCollection.isAuxiliaryContent.modify(uint64_t a1)
{
  return specialized ViewTraitCollection.subscript.setter(*(_BYTE *)(a1 + 8));
}

uint64_t ViewTraitCollection.tagValue<A>(for:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];

  v8 = type metadata accessor for TagValueTraitKey.Value(0, a1, a2, a3);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v18 - v10;
  v18[1] = *v4;
  v13 = type metadata accessor for TagValueTraitKey(0, a1, a2, v12);
  v14 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TagValueTraitKey<A>, v13);
  ViewTraitCollection.subscript.getter(v13, v14, (uint64_t)v11);
  v15 = *(_QWORD *)(a1 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v11, 1, a1) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v16 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a4, v11, a1);
    v16 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(a4, v16, 1, a1);
}

uint64_t ViewTraitCollection.tag<A>(for:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  char v21;
  uint64_t v22;
  _QWORD v24[2];

  v8 = type metadata accessor for TagValueTraitKey.Value(0, a1, a2, a3);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v24 - v10;
  v12 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *v4;
  v24[1] = *v4;
  v18 = type metadata accessor for TagValueTraitKey(0, a1, a2, v17);
  v19 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TagValueTraitKey<A>, v18);
  ViewTraitCollection.subscript.getter(v18, v19, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, a1) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  else
  {
    v20 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v20(v15, v11, a1);
    swift_bridgeObjectRetain();
    v21 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(0, v16);
    swift_bridgeObjectRelease();
    if ((v21 & 1) == 0)
    {
      v20(a4, v15, a1);
      v22 = 0;
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(a4, v22, 1, a1);
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, a1);
  }
  v22 = 1;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(a4, v22, 1, a1);
}

uint64_t ViewTraitCollection.setTagIfUnset<A>(for:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v7 = type metadata accessor for TagValueTraitKey.Value(0, a3, a4, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v17 - v10;
  v12 = *(_QWORD *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))((char *)&v17 - v10, a2, a3, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v11, 0, 1, a3);
  v14 = type metadata accessor for TagValueTraitKey(0, a3, a4, v13);
  v15 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TagValueTraitKey<A>, v14);
  ViewTraitCollection.setValueIfUnset<A>(_:for:)((uint64_t)v11, v14, v14, v15);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t ViewTraitCollection.setTag<A>(for:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v7 = type metadata accessor for TagValueTraitKey.Value(0, a3, a4, a4);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v16 - v9;
  v11 = *(_QWORD *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))((char *)&v16 - v9, a2, a3, v8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v10, 0, 1, a3);
  v13 = type metadata accessor for TagValueTraitKey(0, a3, a4, v12);
  v14 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TagValueTraitKey<A>, v13);
  return ViewTraitCollection.subscript.setter((uint64_t)v10, v13, v13, v14);
}

uint64_t TagIndexProjection.__allocating_init(_:)(__int128 *a1)
{
  swift_allocObject();
  return TagIndexProjection.init(_:)(a1);
}

uint64_t TagIndexProjection.init(_:)(__int128 *a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = 0;
  *(_BYTE *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = Dictionary.init()();
  *(_QWORD *)(v1 + 80) = Dictionary.init()();
  outlined init with take of ScrollStateRequest(a1, v1 + 16);
  return v1;
}

void TagIndexProjection.hash(into:)()
{
  Swift::UInt v0;

  Hasher._combine(_:)(v0);
}

uint64_t TagIndexProjection.get(base:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[7];
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;

  v3 = *v1;
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 88);
  MEMORY[0x23B7C5A4C](&v10, a1, v1[10], v4, MEMORY[0x24BEE1768], v5);
  v6 = v10;
  if ((v11 & 1) != 0)
  {
    v7 = swift_endAccess();
    v12 = v6;
    v13 = 1;
    MEMORY[0x24BDAC7A8](v7);
    v9[2] = v4;
    v9[3] = v5;
    v9[4] = a1;
    v9[5] = &v12;
    TagIndexProjection.readUntil(_:)((uint64_t)partial apply for closure #1 in TagIndexProjection.get(base:), (uint64_t)v9);
    return v12;
  }
  else
  {
    swift_endAccess();
  }
  return v6;
}

uint64_t TagIndexProjection.readUntil(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v10[7];
  char v11;
  uint64_t v12;
  uint64_t v13;

  v3 = v2;
  if ((*(_BYTE *)(v2 + 64) & 1) == 0)
  {
    v5 = result;
    v6 = *(_QWORD *)(v3 + 48);
    v12 = *(_QWORD *)(v3 + 56);
    v13 = v12;
    v7 = *(_QWORD *)(v3 + 40);
    v8 = __swift_project_boxed_opaque_existential_1((_QWORD *)(v3 + 16), v7);
    MEMORY[0x24BDAC7A8](v8);
    v10[2] = &v13;
    v10[3] = v3;
    v10[4] = v5;
    v10[5] = a2;
    v11 = 1;
    result = ViewList.applySublists(from:list:to:)((uint64_t)&v12, 0x100000000uLL, (uint64_t)partial apply for closure #1 in TagIndexProjection.readUntil(_:), (uint64_t)v10, v7, v6);
    v9 = v13;
    if ((result & 1) != 0)
      v9 = 0;
    *(_QWORD *)(v3 + 56) = v9;
    *(_BYTE *)(v3 + 64) = result & 1;
  }
  return result;
}

void TagIndexProjection.set(base:newValue:)(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v21 = a1;
  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 80);
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v20 - v10;
  v12 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a3 & 1) == 0)
  {
    swift_beginAccess();
    v16 = v3[9];
    v22 = a2;
    MEMORY[0x23B7C5A4C](&v22, v16, MEMORY[0x24BEE1768], v7, MEMORY[0x24BEE1778]);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v7) == 1)
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      v17 = swift_endAccess();
      MEMORY[0x24BDAC7A8](v17);
      v18 = *(_QWORD *)(v6 + 88);
      *(&v20 - 4) = v7;
      *(&v20 - 3) = v18;
      v19 = v21;
      *(&v20 - 2) = a2;
      *(&v20 - 1) = v19;
      TagIndexProjection.readUntil(_:)((uint64_t)partial apply for closure #1 in TagIndexProjection.set(base:newValue:), (uint64_t)(&v20 - 6));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v11, v7);
      swift_endAccess();
      (*(void (**)(uint64_t, char *, uint64_t))(v12 + 40))(v21, v15, v7);
    }
  }
}

uint64_t closure #1 in TagIndexProjection.readUntil(_:)(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t, char *), uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t result;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, char *);
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  char v53;

  v44 = a5;
  v45 = a4;
  v48 = a3;
  v7 = *a3;
  v8 = *(_QWORD *)(*a3 + 80);
  v9 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v42 - v10;
  v12 = *(_QWORD *)(v7 + 88);
  v14 = type metadata accessor for TagValueTraitKey.Value(0, v8, v12, v13);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v42 - v16;
  v18 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v46 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v42 - v22;
  v24 = *a2;
  v25 = *a1;
  v49 = a1[1];
  v50 = a2;
  *a2 = v24 - v25;
  v26 = a1[9];
  v51 = v26;
  v47 = v12;
  v28 = type metadata accessor for TagValueTraitKey(0, v8, v12, v27);
  v29 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TagValueTraitKey<A>, v28);
  ViewTraitCollection.subscript.getter(v28, v29, (uint64_t)v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, v8) == 1)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
LABEL_5:
    v32 = v49;
    v31 = v50;
    goto LABEL_6;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v23, v17, v8);
  swift_bridgeObjectRetain();
  v30 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(0, v26);
  swift_bridgeObjectRelease();
  if ((v30 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v23, v8);
    goto LABEL_5;
  }
  v42 = v18;
  v43 = v23;
  v34 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
  v34(v46, v23, v8);
  v31 = v50;
  v52 = *v50;
  v53 = 0;
  swift_beginAccess();
  type metadata accessor for Dictionary();
  Dictionary.subscript.setter();
  result = swift_endAccess();
  v35 = *v31;
  v32 = v49;
  v36 = *v31 + v49;
  if (v36 < *v31)
  {
    __break(1u);
  }
  else
  {
    if (!v49)
      goto LABEL_14;
    result = swift_beginAccess();
    if (v35 < v36)
    {
      v37 = v42;
      v38 = v43;
      do
      {
        v34(v11, v38, v8);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v11, 0, 1, v8);
        v52 = v35;
        type metadata accessor for Dictionary();
        Dictionary.subscript.setter();
        ++v35;
        --v32;
      }
      while (v32);
      swift_endAccess();
      v32 = v49;
      v31 = v50;
      v35 = *v50;
LABEL_14:
      v39 = v35;
      v40 = v43;
      v41 = v45(v39, v43);
      (*(void (**)(char *, uint64_t))(v42 + 8))(v40, v8);
      if ((v41 & 1) != 0)
      {
        result = 0;
        goto LABEL_7;
      }
LABEL_6:
      result = 1;
LABEL_7:
      *v31 += v32;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t TagIndexProjection.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t TagIndexProjection.__deallocating_deinit()
{
  TagIndexProjection.deinit();
  return swift_deallocClassInstance();
}

Swift::Int TagIndexProjection.hashValue.getter()
{
  Swift::UInt v0;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(v0);
  return Hasher._finalize()();
}

uint64_t protocol witness for Projection.get(base:) in conformance TagIndexProjection<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = TagIndexProjection.get(base:)(a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

void protocol witness for Projection.set(base:newValue:) in conformance TagIndexProjection<A>(uint64_t a1, uint64_t a2)
{
  TagIndexProjection.set(base:newValue:)(a1, *(_QWORD *)a2, *(_BYTE *)(a2 + 8));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TagIndexProjection<A>()
{
  return TagIndexProjection.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance TagIndexProjection<A>()
{
  TagIndexProjection.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TagIndexProjection<A>()
{
  Hasher.init(_seed:)();
  TagIndexProjection.hash(into:)();
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TagIndexProjection<A>(uint64_t *a1, uint64_t *a2)
{
  return project #1 <A, B>(lhs:rhs:) in static ScrollPosition.== infix(_:_:)(*a1, *a2);
}

uint64_t Binding.selecting<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v16 - v7;
  v9 = *(_QWORD *)(v4 - 8);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v8, a1, v5, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    if (one-time initialization token for _constantFalse != -1)
      swift_once();
    v14 = _constantFalse;
    swift_retain();
    swift_retain();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v13, v8, v4);
    v14 = static Binding.== infix<A>(_:_:)(v2, (uint64_t)v13, v4);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v4);
  }
  return v14;
}

uint64_t Binding<A>.projectingTagIndex(viewList:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  __int128 v10;

  v6 = type metadata accessor for TagIndexProjection(0, *(_QWORD *)(a2 + 16), a3, a4);
  outlined init with copy of AnyTrackedValue(a1, (uint64_t)&v10);
  swift_allocObject();
  v9 = TagIndexProjection.init(_:)(&v10);
  v7 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TagIndexProjection<A>, v6);
  Binding.projecting<A>(_:)((uint64_t)&v9, a2, v6, v7, (char *)&v10);
  swift_release();
  return v10;
}

uint64_t type metadata accessor for TagIndexProjection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TagIndexProjection);
}

uint64_t sub_234F75604(char *a1)
{
  return specialized ViewTraitCollection.subscript.setter(*a1);
}

uint64_t type metadata completion function for TagValueTraitKey.Value()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TagValueTraitKey.Value(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v7;
  if (!a2)
    return 0;
  v8 = a2 - v6;
  if (a2 > v6)
  {
    v9 = 8 * v7;
    if (v7 > 3)
      goto LABEL_8;
    v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v7);
      if (v10)
        goto LABEL_15;
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2)
          goto LABEL_24;
LABEL_8:
        v10 = *(unsigned __int8 *)(a1 + v7);
        if (!*(_BYTE *)(a1 + v7))
          goto LABEL_24;
LABEL_15:
        v12 = (v10 - 1) << v9;
        if (v7 > 3)
          v12 = 0;
        if ((_DWORD)v7)
        {
          if (v7 <= 3)
            v13 = v7;
          else
            v13 = 4;
          __asm { BR              X12 }
        }
        return v6 + v12 + 1;
      }
      v10 = *(unsigned __int16 *)(a1 + v7);
      if (*(_WORD *)(a1 + v7))
        goto LABEL_15;
    }
  }
LABEL_24:
  if (v5 < 2)
    return 0;
  v14 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v14 >= 2)
    return v14 - 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for TagValueTraitKey.Value(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  size_t v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (v8)
  {
    v10 = *(_QWORD *)(v7 + 64);
  }
  else
  {
    v9 = 0;
    v10 = *(_QWORD *)(v7 + 64) + 1;
  }
  v11 = a3 >= v9;
  v12 = a3 - v9;
  if (v12 != 0 && v11)
  {
    if (v10 > 3)
    {
      v6 = 1u;
      if (v9 < a2)
        goto LABEL_14;
      goto LABEL_21;
    }
    v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v6 = 4u;
      if (v9 < a2)
      {
LABEL_14:
        v14 = ~v9 + a2;
        if (v10 < 4)
        {
          if ((_DWORD)v10)
          {
            v15 = v14 & ~(-1 << (8 * v10));
            bzero(a1, v10);
            if ((_DWORD)v10 == 3)
            {
              *a1 = v15;
              *((_BYTE *)a1 + 2) = BYTE2(v15);
            }
            else if ((_DWORD)v10 == 2)
            {
              *a1 = v15;
            }
            else
            {
              *(_BYTE *)a1 = v15;
            }
          }
        }
        else
        {
          bzero(a1, v10);
          *(_DWORD *)a1 = v14;
        }
        __asm { BR              X10 }
      }
LABEL_21:
      __asm { BR              X11 }
    }
    if (v13 >= 0x100)
      v6 = 2;
    else
      v6 = v13 > 1;
  }
  if (v9 < a2)
    goto LABEL_14;
  goto LABEL_21;
}

void sub_234F75968()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_234F75970()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

uint64_t getEnumTag for TagValueTraitKey.Value(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 48))(a1, 1);
}

uint64_t destructiveInjectEnumTag for TagValueTraitKey.Value(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 56))(a1, a2, 1);
}

ValueMetadata *type metadata accessor for IsAuxiliaryContentTraitKey()
{
  return &type metadata for IsAuxiliaryContentTraitKey;
}

uint64_t type metadata completion function for TagIndexProjection()
{
  return swift_initClassMetadata2();
}

uint64_t sub_234F75A24(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[2];
  _QWORD v24[2];
  uint64_t v25;

  v4 = *a1;
  v6 = a1[2];
  v5 = a1[3];
  v7 = type metadata accessor for TagValueTraitKey(255, a1[1], v5, a4);
  v8 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TagValueTraitKey<A>, v7);
  v10 = type metadata accessor for _TraitWritingModifier(255, v7, v8, v9);
  v12 = type metadata accessor for ModifiedContent(255, v4, v10, v11);
  v13 = type metadata accessor for Optional();
  v25 = v5;
  v14 = MEMORY[0x23B7C9C04](MEMORY[0x24BEE4AB0], v13, &v25);
  v16 = type metadata accessor for TagValueTraitKey(255, v13, v14, v15);
  v17 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TagValueTraitKey<A>, v16);
  v19 = type metadata accessor for _TraitWritingModifier(255, v16, v17, v18);
  v21 = type metadata accessor for ModifiedContent(255, v12, v19, v20);
  v24[0] = v6;
  v24[1] = &protocol witness table for _TraitWritingModifier<A>;
  v23[0] = MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v12, v24);
  v23[1] = &protocol witness table for _TraitWritingModifier<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v21, v23);
}

uint64_t sub_234F75B4C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v4 = *a1;
  v5 = a1[1];
  type metadata accessor for _TraitWritingModifier<IsAuxiliaryContentTraitKey>(255, a2, a3, a4);
  v8 = type metadata accessor for ModifiedContent(255, v4, v6, v7);
  v10[0] = v5;
  v10[1] = &protocol witness table for _TraitWritingModifier<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v8, v10);
}

void type metadata accessor for _TraitWritingModifier<IsAuxiliaryContentTraitKey>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for _TraitWritingModifier<IsAuxiliaryContentTraitKey>)
  {
    v4 = type metadata accessor for _TraitWritingModifier(0, (uint64_t)&type metadata for IsAuxiliaryContentTraitKey, (uint64_t)&protocol witness table for IsAuxiliaryContentTraitKey, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<IsAuxiliaryContentTraitKey>);
  }
}

uint64_t sub_234F75C04(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];

  v4 = *a1;
  v5 = a1[2];
  v6 = type metadata accessor for TagValueTraitKey(255, a1[1], a1[3], a4);
  v7 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TagValueTraitKey<A>, v6);
  v9 = type metadata accessor for _TraitWritingModifier(255, v6, v7, v8);
  v11 = type metadata accessor for ModifiedContent(255, v4, v9, v10);
  v13[0] = v5;
  v13[1] = &protocol witness table for _TraitWritingModifier<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v11, v13);
}

void base witness table accessor for Equatable in TagIndexProjection<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t instantiation function for generic protocol witness table for TagIndexProjection<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for TagIndexProjection<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

BOOL partial apply for closure #1 in TagIndexProjection.set(base:newValue:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[4];
  if (v3 == a1)
    (*(void (**)(_QWORD))(*(_QWORD *)(v1[2] - 8) + 24))(v1[5]);
  return v3 == a1;
}

uint64_t partial apply for closure #1 in TagIndexProjection.readUntil(_:)(uint64_t *a1)
{
  uint64_t v1;

  return closure #1 in TagIndexProjection.readUntil(_:)(a1, *(uint64_t **)(v1 + 16), *(uint64_t **)(v1 + 24), *(uint64_t (**)(uint64_t, char *))(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t partial apply for closure #1 in TagIndexProjection.get(base:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)(v1 + 40);
  v4 = dispatch thunk of static Equatable.== infix(_:_:)();
  if ((v4 & 1) != 0)
  {
    *(_QWORD *)v3 = a1;
    *(_BYTE *)(v3 + 8) = 0;
  }
  return v4 & 1;
}

uint64_t static _Velocity<>.zero.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of IteratorProtocol.next()();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(a2, v6, a1);
}

uint64_t static _Velocity.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t _Velocity.init(valuePerSecond:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t _Velocity.valuePerSecond.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _Velocity.valuePerSecond.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_Velocity.valuePerSecond.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _Velocity.map<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void (*v9)(uint64_t);
  uint64_t v11;

  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9(v3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(a3, v8, a2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _Velocity<A>()
{
  return static _Velocity.== infix(_:_:)();
}

uint64_t static _Velocity<>.< infix(_:_:)()
{
  return dispatch thunk of static Comparable.< infix(_:_:)() & 1;
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance <> _Velocity<A>()
{
  return static _Velocity<>.< infix(_:_:)();
}

uint64_t _Velocity<>.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int _Velocity<>.hashValue.getter()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <> _Velocity<A>()
{
  return _Velocity<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance <> _Velocity<A>()
{
  return _Velocity<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <> _Velocity<A>()
{
  Hasher.init(_seed:)();
  _Velocity<>.hash(into:)();
  return Hasher._finalize()();
}

uint64_t _Velocity<>.init()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of IteratorProtocol.next()();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(a2, v6, a1);
}

uint64_t static _Velocity<>.+= infix(_:_:)()
{
  return dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
}

uint64_t static _Velocity<>.-= infix(_:_:)()
{
  return dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
}

uint64_t static _Velocity<>.+ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static _Velocity<>.+ infix(_:_:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE2F78], a5);
}

uint64_t type metadata accessor for _Velocity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _Velocity);
}

uint64_t static _Velocity<>.- infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static _Velocity<>.+ infix(_:_:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE2F80], a5);
}

uint64_t static _Velocity<>.+ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;

  v12 = type metadata accessor for _Velocity(0, a3, *(_QWORD *)(a4 + 8), a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a6, a1, v12);
  return a5(a6, a2, a3, a4);
}

uint64_t protocol witness for static AdditiveArithmetic.zero.getter in conformance <> _Velocity<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static _Velocity<>.zero.getter(*(_QWORD *)(a1 + 16), a2);
}

uint64_t protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance <> _Velocity<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static _Velocity<>.+ infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8), a5);
}

uint64_t protocol witness for static AdditiveArithmetic.+= infix(_:_:) in conformance <> _Velocity<A>()
{
  return static _Velocity<>.+= infix(_:_:)();
}

uint64_t protocol witness for static AdditiveArithmetic.- infix(_:_:) in conformance <> _Velocity<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static _Velocity<>.- infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8), a5);
}

uint64_t protocol witness for static AdditiveArithmetic.-= infix(_:_:) in conformance <> _Velocity<A>()
{
  return static _Velocity<>.-= infix(_:_:)();
}

uint64_t _Velocity<>.scale(by:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(a2 + 16))(*(_QWORD *)(a1 + 16));
}

uint64_t _Velocity<>.magnitudeSquared.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(a2 + 24))(*(_QWORD *)(a1 + 16));
}

void base witness table accessor for Equatable in <> _Velocity<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t protocol witness for VectorArithmetic.scale(by:) in conformance <> _Velocity<A>(uint64_t a1, uint64_t a2)
{
  return _Velocity<>.scale(by:)(a1, *(_QWORD *)(a2 - 8));
}

uint64_t protocol witness for VectorArithmetic.magnitudeSquared.getter in conformance <> _Velocity<A>(uint64_t a1, uint64_t a2)
{
  return _Velocity<>.magnitudeSquared.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t instantiation function for generic protocol witness table for <> _Velocity<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for <> _Velocity<A>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for _Velocity(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234F762B0 + 4 * byte_2352B63F8[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for _Velocity(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t WhitespaceRemovingFormatStyle.format(_:)()
{
  return dispatch thunk of FormatStyle.format(_:)();
}

uint64_t WhitespaceRemovingFormatStyle.locale(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)(v11 - 8) + 16))(a3, v3, a2, v8);
  dispatch thunk of FormatStyle.locale(_:)();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 40))(a3, v10, v6);
}

uint64_t WhitespaceRemovingFormatStyle.hash(into:)()
{
  dispatch thunk of Hashable.hash(into:)();
  swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  swift_getAssociatedConformanceWitness();
  Optional<A>.hash(into:)();
  return Optional<A>.hash(into:)();
}

uint64_t static WhitespaceRemovingFormatStyle.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v35[11];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t TupleTypeMetadata2;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v37 = a7;
  v38 = a8;
  v46 = a1;
  v36 = a6;
  v35[8] = *(_QWORD *)(a6 + 8);
  v41 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v44 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v35[7] = (char *)v35 - v13;
  v40 = v14;
  v15 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v35[9] = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v17 = (char *)v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v35[10] = (char *)v35 - v19;
  v39 = v15;
  v43 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)v35 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)v35 - v24;
  MEMORY[0x24BDAC7A8](v26);
  v28 = (char *)v35 - v27;
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)v35 - v30;
  MEMORY[0x24BDAC7A8](v32);
  MEMORY[0x24BDAC7A8](v33);
  v42 = a2;
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
  {
    v35[5] = v31;
    v35[3] = v25;
    v35[6] = v28;
    v35[2] = v22;
    v35[4] = v17;
    v47 = a3;
    v48 = v41;
    v49 = a5;
    v50 = v36;
    v51 = v37;
    v52 = v38;
    v53 = a9;
    type metadata accessor for WhitespaceRemovingFormatStyle();
  }
  return 0;
}

uint64_t WhitespaceRemovingFormatStyle.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1702060386 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6156786966657270 && a2 == 0xEB0000000065756CLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6156786966667573 && a2 == 0xEB0000000065756CLL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t WhitespaceRemovingFormatStyle.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return 1702060386;
  if (a1 == 1)
    return 0x6156786966657270;
  return 0x6156786966667573;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance WhitespaceRemovingFormatStyle<A, B>.CodingKeys(char *a1, char *a2)
{
  return static EventListenerPhase.FailureReason.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance WhitespaceRemovingFormatStyle<A, B>.CodingKeys()
{
  unsigned __int8 *v0;

  return EventListenerPhase.FailureReason.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance WhitespaceRemovingFormatStyle<A, B>.CodingKeys(uint64_t a1)
{
  unsigned __int8 *v1;

  EventListenerPhase.FailureReason.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance WhitespaceRemovingFormatStyle<A, B>.CodingKeys()
{
  unsigned __int8 *v0;
  _BYTE v2[72];

  Hasher.init(_seed:)();
  EventListenerPhase.FailureReason.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WhitespaceRemovingFormatStyle<A, B>.CodingKeys()
{
  char *v0;

  return WhitespaceRemovingFormatStyle.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WhitespaceRemovingFormatStyle<A, B>.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = WhitespaceRemovingFormatStyle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance WhitespaceRemovingFormatStyle<A, B>.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = specialized TimeDataFormatting.Resolvable.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WhitespaceRemovingFormatStyle<A, B>.CodingKeys(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for WhitespaceRemovingFormatStyle<A, B>.CodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WhitespaceRemovingFormatStyle<A, B>.CodingKeys(uint64_t a1)
{
  MEMORY[0x23B7C9C04](&protocol conformance descriptor for WhitespaceRemovingFormatStyle<A, B>.CodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

void WhitespaceRemovingFormatStyle.encode(to:)()
{
  type metadata accessor for WhitespaceRemovingFormatStyle.CodingKeys();
}

uint64_t sub_234F77134(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  MEMORY[0x23B7C9C04](&protocol conformance descriptor for WhitespaceRemovingFormatStyle<A, B>.CodingKeys, a1);
  v3 = type metadata accessor for KeyedEncodingContainer();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - v5;
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  *(_BYTE *)(v2 - 136) = 0;
  v7 = *(_QWORD *)(v2 - 72);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v7)
  {
    *(_BYTE *)(v2 - 136) = 1;
    swift_getAssociatedTypeWitness();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    *(_BYTE *)(v2 - 136) = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int WhitespaceRemovingFormatStyle.hashValue.getter()
{
  Hasher.init(_seed:)();
  WhitespaceRemovingFormatStyle.hash(into:)();
  return Hasher._finalize()();
}

void WhitespaceRemovingFormatStyle.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[30];

  v22[29] = a1;
  v22[2] = a9;
  v22[17] = swift_getAssociatedTypeWitness();
  v16 = type metadata accessor for Optional();
  v22[14] = *(_QWORD *)(v16 - 8);
  v22[15] = v16;
  MEMORY[0x24BDAC7A8](v16);
  v22[3] = (char *)v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v22[6] = (char *)v22 - v19;
  v22[4] = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v22[7] = (char *)v22 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[20] = a2;
  v22[21] = a3;
  v22[22] = a4;
  v22[23] = a5;
  v22[24] = a6;
  v22[25] = a7;
  v22[26] = a8;
  type metadata accessor for WhitespaceRemovingFormatStyle.CodingKeys();
}

void sub_234F77424(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v8 - 176) = MEMORY[0x23B7C9C04](&protocol conformance descriptor for WhitespaceRemovingFormatStyle<A, B>.CodingKeys, a1);
  v9 = type metadata accessor for KeyedDecodingContainer();
  *(_QWORD *)(v8 - 216) = v9;
  *(_QWORD *)(v8 - 264) = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  *(_QWORD *)(v8 - 232) = v7;
  *(_QWORD *)(v8 - 224) = v1;
  *(_QWORD *)(v8 - 144) = v1;
  *(_QWORD *)(v8 - 136) = v2;
  *(_QWORD *)(v8 - 128) = v7;
  *(_QWORD *)(v8 - 120) = v5;
  *(_QWORD *)(v8 - 112) = v4;
  *(_QWORD *)(v8 - 104) = v3;
  *(_QWORD *)(v8 - 240) = v3;
  *(_QWORD *)(v8 - 96) = v6;
  type metadata accessor for WhitespaceRemovingFormatStyle();
}

uint64_t sub_234F774A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  double v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  void (*v10)(double);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v29[96];

  v5 = *(_QWORD *)(a1 - 8);
  v6 = MEMORY[0x24BDAC7A8](a1);
  v8 = &v29[-v7];
  v10 = *(void (**)(double))(*(_QWORD *)(v1 - 8) + 56);
  *(_QWORD *)(v3 - 152) = &v29[*(int *)(v9 + 76) - v7];
  v10(v6);
  *(_QWORD *)(v3 - 200) = &v8[*(int *)(a1 + 80)];
  ((void (*)(void))v10)();
  __swift_project_boxed_opaque_existential_1(*(_QWORD **)(v3 - 72), *(_QWORD *)(*(_QWORD *)(v3 - 72) + 24));
  *(_QWORD *)(v3 - 208) = v2;
  v11 = *(_QWORD *)(v3 - 160);
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v11)
  {
    v18 = *(_QWORD *)(v3 - 192);
    v17 = *(_QWORD *)(v3 - 184);
    v19 = *(_QWORD *)(v3 - 200);
    __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v3 - 72));
    v20 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 8);
    v20(*(_QWORD *)(v3 - 152), v17);
    return v20(v19, v17);
  }
  else
  {
    *(_QWORD *)(v3 - 296) = v5;
    *(_QWORD *)(v3 - 176) = a1;
    v12 = *(_QWORD *)(v3 - 264);
    v14 = *(_QWORD *)(v3 - 256);
    v13 = *(_QWORD *)(v3 - 248);
    *(_QWORD *)(v3 - 160) = v8;
    *(_BYTE *)(v3 - 144) = 0;
    v16 = *(_QWORD *)(v3 - 224);
    v15 = *(_QWORD *)(v3 - 216);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v3 - 272) + 32))(*(_QWORD *)(v3 - 160), v13, v16);
    *(_BYTE *)(v3 - 144) = 1;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v21 = *(_QWORD *)(v3 - 184);
    v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 192) + 40);
    v23 = *(_QWORD *)(v3 - 152);
    *(_QWORD *)(v3 - 232) = v22;
    v22(v23, v14, v21);
    *(_BYTE *)(v3 - 144) = 2;
    v24 = *(_QWORD *)(v3 - 280);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(_QWORD, uint64_t))(v12 + 8))(*(_QWORD *)(v3 - 208), v15);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v3 - 232))(*(_QWORD *)(v3 - 200), v24, v21);
    v25 = *(_QWORD *)(v3 - 296);
    v26 = *(_QWORD *)(v3 - 160);
    v27 = *(_QWORD *)(v3 - 176);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v25 + 16))(*(_QWORD *)(v3 - 288), v26, v27);
    __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v3 - 72));
    return (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v26, v27);
  }
}

void protocol witness for Decodable.init(from:) in conformance WhitespaceRemovingFormatStyle<A, B>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  WhitespaceRemovingFormatStyle.init(from:)(a1, a2[2], a2[3], a2[4], a2[5], a2[6], a2[7], a2[8], a3);
}

void protocol witness for Encodable.encode(to:) in conformance WhitespaceRemovingFormatStyle<A, B>()
{
  WhitespaceRemovingFormatStyle.encode(to:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance WhitespaceRemovingFormatStyle<A, B>()
{
  Hasher.init(_seed:)();
  WhitespaceRemovingFormatStyle.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance WhitespaceRemovingFormatStyle<A, B>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return static WhitespaceRemovingFormatStyle.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], a3[7], a3[8]) & 1;
}

uint64_t WhitespaceRemovingFormatStyle<>.discreteInput(after:)()
{
  return dispatch thunk of DiscreteFormatStyle.discreteInput(after:)();
}

uint64_t WhitespaceRemovingFormatStyle<>.discreteInput(before:)()
{
  return dispatch thunk of DiscreteFormatStyle.discreteInput(before:)();
}

uint64_t WhitespaceRemovingFormatStyle<>.input(after:)()
{
  return dispatch thunk of DiscreteFormatStyle.input(after:)();
}

uint64_t WhitespaceRemovingFormatStyle<>.input(before:)()
{
  return dispatch thunk of DiscreteFormatStyle.input(before:)();
}

uint64_t protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance <> WhitespaceRemovingFormatStyle<A, B>()
{
  return WhitespaceRemovingFormatStyle<>.discreteInput(before:)();
}

uint64_t protocol witness for DiscreteFormatStyle.discreteInput(after:) in conformance <> WhitespaceRemovingFormatStyle<A, B>()
{
  return WhitespaceRemovingFormatStyle<>.discreteInput(after:)();
}

uint64_t protocol witness for DiscreteFormatStyle.input(before:) in conformance <> WhitespaceRemovingFormatStyle<A, B>()
{
  return WhitespaceRemovingFormatStyle<>.input(before:)();
}

uint64_t protocol witness for DiscreteFormatStyle.input(after:) in conformance <> WhitespaceRemovingFormatStyle<A, B>()
{
  return WhitespaceRemovingFormatStyle<>.input(after:)();
}

void static WhitespaceRemovingFormatStyle<>.representation<A>(of:for:)()
{
  type metadata accessor for TimeDataFormatting.Resolvable();
}

void sub_234F778DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  MEMORY[0x24BDAC7A8](a1);
  v10 = *(_QWORD *)(v7 + 8);
  if (*v8 <= 1)
  {
    *(_QWORD *)(v9 - 136) = v6;
    *(_QWORD *)(v9 - 128) = v1;
    *(_QWORD *)(v9 - 120) = v10;
    *(_QWORD *)(v9 - 112) = v2;
    *(_QWORD *)(v9 - 104) = v5;
    *(_QWORD *)(v9 - 96) = v4;
    *(_QWORD *)(v9 - 88) = v3;
    type metadata accessor for WhitespaceRemovingFormatStyle();
  }
  *(_QWORD *)(v9 - 136) = v6;
  *(_QWORD *)(v9 - 128) = v1;
  *(_QWORD *)(v9 - 120) = v10;
  *(_QWORD *)(v9 - 112) = v2;
  *(_QWORD *)(v9 - 104) = v5;
  *(_QWORD *)(v9 - 96) = v4;
  *(_QWORD *)(v9 - 88) = v3;
  type metadata accessor for WhitespaceRemovingFormatStyle();
}

void sub_234F779F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  *(_QWORD *)(v3 - 144) = v2;
  v5 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for <> WhitespaceRemovingFormatStyle<A, B>, a1, v3 - 144);
  *(_QWORD *)(v3 - 136) = *(_QWORD *)(v3 - 176);
  *(_QWORD *)(v3 - 128) = a1;
  *(_QWORD *)(v3 - 120) = v1;
  *(_QWORD *)(v3 - 112) = v5;
  *(_QWORD *)(v3 - 104) = &protocol witness table for AttributedString;
  type metadata accessor for TimeDataFormatting.Resolvable();
}

void sub_234F77A38(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t *boxed_opaque_existential_1;

  v3 = *(uint64_t **)(v1 - 160);
  v3[3] = a1;
  v3[4] = (uint64_t)&protocol witness table for TimeDataFormatting.Resolvable<A, B>;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v3);
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(boxed_opaque_existential_1, *(_QWORD *)(v1 - 168), a1);
  JUMPOUT(0x234F77A64);
}

void protocol witness for static SafelySerializableDiscreteFormatStyle.representation<A>(of:for:) in conformance <> WhitespaceRemovingFormatStyle<A, B>()
{
  static WhitespaceRemovingFormatStyle<>.representation<A>(of:for:)();
}

void type metadata accessor for WhitespaceRemovingFormatStyle()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void type metadata accessor for WhitespaceRemovingFormatStyle.CodingKeys()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void base witness table accessor for Decodable in WhitespaceRemovingFormatStyle<A, B>()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for Encodable in WhitespaceRemovingFormatStyle<A, B>()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for Hashable in WhitespaceRemovingFormatStyle<A, B>()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for Equatable in WhitespaceRemovingFormatStyle<A, B>()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for FormatStyle in <> WhitespaceRemovingFormatStyle<A, B>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t instantiation function for generic protocol witness table for <> WhitespaceRemovingFormatStyle<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for <> WhitespaceRemovingFormatStyle<A, B>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata completion function for WhitespaceRemovingFormatStyle()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for WhitespaceRemovingFormatStyle(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  unint64_t v26;
  unsigned int (*v28)(unint64_t, uint64_t, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v10;
  v12 = v7 + v10;
  v13 = (v7 + v11) & ~v11;
  if (*(_DWORD *)(v9 + 84))
    v14 = *(_QWORD *)(v9 + 64);
  else
    v14 = *(_QWORD *)(v9 + 64) + 1;
  v15 = ((v14 + v10 + v13) & ~(unint64_t)v10) + v14;
  v16 = *(_DWORD *)(v6 + 80) | v10;
  v17 = (*(_BYTE *)(v6 + 80) | v10);
  v18 = v16 & 0x100000;
  if (v17 > 7 || v18 != 0 || v15 > 0x18)
  {
    v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + ((v17 + 16) & ~v17));
    swift_retain();
  }
  else
  {
    v22 = AssociatedTypeWitness;
    v23 = ~v11;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    v24 = (unint64_t)a1 + v12;
    v25 = (void *)(((unint64_t)a1 + v12) & ~v11);
    v26 = (unint64_t)a2 + v12;
    v28 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v28(v26 & ~v11, 1, v22))
    {
      memcpy(v25, (const void *)(v26 & v23), v14);
    }
    else
    {
      (*(void (**)(void *, unint64_t, uint64_t))(v9 + 16))(v25, v26 & v23, v22);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v25, 0, 1, v22);
    }
    if (v28(((v26 | v11) + v14) & v23, 1, v22))
    {
      memcpy((void *)(((v24 | v11) + v14) & v23), (const void *)(((v26 | v11) + v14) & v23), v14);
    }
    else
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((v24 | v11) + v14) & v23, ((v26 | v11) + v14) & v23, v22);
      (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(((v24 | v11) + v14) & v23, 0, 1, v22);
    }
  }
  return a1;
}

uint64_t destroy for WhitespaceRemovingFormatStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = *(_QWORD *)(v3 + 64) + a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = v4 + v7;
  v9 = ~v7;
  v10 = (v4 + v7) & ~v7;
  v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v11(v10, 1, AssociatedTypeWitness))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v10, AssociatedTypeWitness);
  v12 = (v8 | v7) + *(_QWORD *)(v6 + 64);
  if (!*(_DWORD *)(v6 + 84))
    ++v12;
  v13 = v12 & v9;
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v11)(v12 & v9, 1, AssociatedTypeWitness);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v13, AssociatedTypeWitness);
  return result;
}

uint64_t initializeWithCopy for WhitespaceRemovingFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  size_t v14;
  size_t v15;
  size_t v16;
  void *v17;
  const void *v18;
  unsigned int (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v21 = a1;
  v10 = v6 + v9 + a1;
  v11 = ~v9;
  v12 = v6 + v9 + a2;
  v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v20(v12 & ~v9, 1, AssociatedTypeWitness))
  {
    v13 = *(_DWORD *)(v8 + 84);
    v14 = *(_QWORD *)(v8 + 64);
    if (v13)
      v15 = *(_QWORD *)(v8 + 64);
    else
      v15 = v14 + 1;
    memcpy((void *)(v10 & ~v9), (const void *)(v12 & ~v9), v15);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v10 & ~v9, v12 & ~v9, AssociatedTypeWitness);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v10 & ~v9, 0, 1, AssociatedTypeWitness);
    v13 = *(_DWORD *)(v8 + 84);
    v14 = *(_QWORD *)(v8 + 64);
  }
  if (v13)
    v16 = v14;
  else
    v16 = v14 + 1;
  v17 = (void *)(((v10 | v9) + v16) & v11);
  v18 = (const void *)(((v12 | v9) + v16) & v11);
  if (v20((uint64_t)v18, 1, AssociatedTypeWitness))
  {
    memcpy(v17, v18, v16);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v17, v18, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v17, 0, 1, AssociatedTypeWitness);
  }
  return v21;
}

uint64_t assignWithCopy for WhitespaceRemovingFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  size_t v16;
  size_t v17;
  void *v18;
  void *v19;
  int v20;
  int v21;
  uint64_t v23;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v23 = a1;
  v10 = v6 + v9 + a1;
  v11 = ~v9;
  v12 = v6 + v9 + a2;
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  v14 = v13((void *)(v10 & ~v9), 1, AssociatedTypeWitness);
  v15 = v13((void *)(v12 & ~v9), 1, AssociatedTypeWitness);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v10 & ~v9, v12 & ~v9, AssociatedTypeWitness);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v10 & ~v9, 0, 1, AssociatedTypeWitness);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v15)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(v10 & ~v9, v12 & ~v9, AssociatedTypeWitness);
      goto LABEL_10;
    }
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10 & ~v9, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v8 + 84))
    v16 = *(_QWORD *)(v8 + 64);
  else
    v16 = *(_QWORD *)(v8 + 64) + 1;
  memcpy((void *)(v10 & ~v9), (const void *)(v12 & ~v9), v16);
LABEL_10:
  if (*(_DWORD *)(v8 + 84))
    v17 = *(_QWORD *)(v8 + 64);
  else
    v17 = *(_QWORD *)(v8 + 64) + 1;
  v18 = (void *)(((v10 | v9) + v17) & v11);
  v19 = (void *)(((v12 | v9) + v17) & v11);
  v20 = v13(v18, 1, AssociatedTypeWitness);
  v21 = v13(v19, 1, AssociatedTypeWitness);
  if (!v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 24))(v18, v19, AssociatedTypeWitness);
      return v23;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v18, AssociatedTypeWitness);
    goto LABEL_18;
  }
  if (v21)
  {
LABEL_18:
    memcpy(v18, v19, v17);
    return v23;
  }
  (*(void (**)(void *, void *, uint64_t))(v8 + 16))(v18, v19, AssociatedTypeWitness);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v18, 0, 1, AssociatedTypeWitness);
  return v23;
}

uint64_t initializeWithTake for WhitespaceRemovingFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  size_t v14;
  size_t v15;
  size_t v16;
  void *v17;
  const void *v18;
  unsigned int (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v21 = a1;
  v10 = v6 + v9 + a1;
  v11 = ~v9;
  v12 = v6 + v9 + a2;
  v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v20(v12 & ~v9, 1, AssociatedTypeWitness))
  {
    v13 = *(_DWORD *)(v8 + 84);
    v14 = *(_QWORD *)(v8 + 64);
    if (v13)
      v15 = *(_QWORD *)(v8 + 64);
    else
      v15 = v14 + 1;
    memcpy((void *)(v10 & ~v9), (const void *)(v12 & ~v9), v15);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v10 & ~v9, v12 & ~v9, AssociatedTypeWitness);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v10 & ~v9, 0, 1, AssociatedTypeWitness);
    v13 = *(_DWORD *)(v8 + 84);
    v14 = *(_QWORD *)(v8 + 64);
  }
  if (v13)
    v16 = v14;
  else
    v16 = v14 + 1;
  v17 = (void *)(((v10 | v9) + v16) & v11);
  v18 = (const void *)(((v12 | v9) + v16) & v11);
  if (v20((uint64_t)v18, 1, AssociatedTypeWitness))
  {
    memcpy(v17, v18, v16);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(v17, v18, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v17, 0, 1, AssociatedTypeWitness);
  }
  return v21;
}

uint64_t assignWithTake for WhitespaceRemovingFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  size_t v16;
  size_t v17;
  void *v18;
  void *v19;
  int v20;
  int v21;
  uint64_t v23;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v23 = a1;
  v10 = v6 + v9 + a1;
  v11 = ~v9;
  v12 = v6 + v9 + a2;
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  v14 = v13((void *)(v10 & ~v9), 1, AssociatedTypeWitness);
  v15 = v13((void *)(v12 & ~v9), 1, AssociatedTypeWitness);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v10 & ~v9, v12 & ~v9, AssociatedTypeWitness);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v10 & ~v9, 0, 1, AssociatedTypeWitness);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v15)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40))(v10 & ~v9, v12 & ~v9, AssociatedTypeWitness);
      goto LABEL_10;
    }
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10 & ~v9, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v8 + 84))
    v16 = *(_QWORD *)(v8 + 64);
  else
    v16 = *(_QWORD *)(v8 + 64) + 1;
  memcpy((void *)(v10 & ~v9), (const void *)(v12 & ~v9), v16);
LABEL_10:
  if (*(_DWORD *)(v8 + 84))
    v17 = *(_QWORD *)(v8 + 64);
  else
    v17 = *(_QWORD *)(v8 + 64) + 1;
  v18 = (void *)(((v10 | v9) + v17) & v11);
  v19 = (void *)(((v12 | v9) + v17) & v11);
  v20 = v13(v18, 1, AssociatedTypeWitness);
  v21 = v13(v19, 1, AssociatedTypeWitness);
  if (!v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 40))(v18, v19, AssociatedTypeWitness);
      return v23;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v18, AssociatedTypeWitness);
    goto LABEL_18;
  }
  if (v21)
  {
LABEL_18:
    memcpy(v18, v19, v17);
    return v23;
  }
  (*(void (**)(void *, void *, uint64_t))(v8 + 32))(v18, v19, AssociatedTypeWitness);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v18, 0, 1, AssociatedTypeWitness);
  return v23;
}

uint64_t getEnumTagSinglePayload for WhitespaceRemovingFormatStyle(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  unsigned int v21;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v9 = *(_DWORD *)(v8 + 84);
  if (v9)
    v10 = v9 - 1;
  else
    v10 = 0;
  if (v10 <= v7)
    v11 = v7;
  else
    v11 = v10;
  if (v9)
    v12 = *(_QWORD *)(v8 + 64);
  else
    v12 = *(_QWORD *)(v8 + 64) + 1;
  if (!a2)
    return 0;
  v13 = *(unsigned __int8 *)(v8 + 80);
  v14 = *(_QWORD *)(v6 + 64) + v13;
  if (a2 <= v11)
    goto LABEL_29;
  v15 = ((v12 + v13 + (v14 & ~v13)) & ~v13) + v12;
  v16 = 8 * v15;
  if (v15 <= 3)
  {
    v18 = ((a2 - v11 + ~(-1 << v16)) >> v16) + 1;
    if (HIWORD(v18))
    {
      v17 = *(_DWORD *)(a1 + v15);
      if (!v17)
        goto LABEL_29;
      goto LABEL_20;
    }
    if (v18 > 0xFF)
    {
      v17 = *(unsigned __int16 *)(a1 + v15);
      if (!*(_WORD *)(a1 + v15))
        goto LABEL_29;
      goto LABEL_20;
    }
    if (v18 < 2)
    {
LABEL_29:
      if (v11)
      {
        if (v7 >= v10)
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, v7, v5);
        v21 = (*(uint64_t (**)(uint64_t))(v8 + 48))((v14 + a1) & ~v13);
        if (v21 >= 2)
          return v21 - 1;
        else
          return 0;
      }
      return 0;
    }
  }
  v17 = *(unsigned __int8 *)(a1 + v15);
  if (!*(_BYTE *)(a1 + v15))
    goto LABEL_29;
LABEL_20:
  v19 = (v17 - 1) << v16;
  if (v15 > 3)
    v19 = 0;
  if ((_DWORD)v15)
  {
    if (v15 <= 3)
      v20 = v15;
    else
      v20 = 4;
    __asm { BR              X12 }
  }
  return v11 + v19 + 1;
}

void storeEnumTagSinglePayload for WhitespaceRemovingFormatStyle(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = 0;
  v10 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v11 = *(_DWORD *)(v10 + 84);
  v12 = v11 - 1;
  if (!v11)
    v12 = 0;
  if (v12 <= v8)
    v13 = v8;
  else
    v13 = v12;
  v14 = *(unsigned __int8 *)(v10 + 80);
  if (v11)
    v16 = *(_QWORD *)(v10 + 64);
  else
    v16 = *(_QWORD *)(v10 + 64) + 1;
  v15 = *(_QWORD *)(v7 + 64) + v14;
  v17 = ((v16 + v14 + (v15 & ~(_DWORD)v14)) & ~(_DWORD)v14) + v16;
  if (a3 > v13)
  {
    if (v17 > 3)
    {
      v9 = 1u;
      if (v13 >= a2)
LABEL_25:
        __asm { BR              X14 }
LABEL_18:
      v19 = ~v13 + a2;
      if (v17 < 4)
      {
        if (v17)
        {
          v20 = v19 & ~(-1 << (8 * v17));
          bzero(a1, ((v16 + v14 + (v15 & ~v14)) & ~v14) + v16);
          if (v17 == 3)
          {
            *(_WORD *)a1 = v20;
            a1[2] = BYTE2(v20);
          }
          else if (v17 == 2)
          {
            *(_WORD *)a1 = v20;
          }
          else
          {
            *a1 = v20;
          }
        }
      }
      else
      {
        bzero(a1, ((v16 + v14 + (v15 & ~v14)) & ~v14) + v16);
        *(_DWORD *)a1 = v19;
      }
      __asm { BR              X10 }
    }
    v18 = ((a3 - v13 + ~(-1 << (8 * v17))) >> (8 * v17)) + 1;
    if (HIWORD(v18))
    {
      v9 = 4u;
      if (v13 >= a2)
        goto LABEL_25;
      goto LABEL_18;
    }
    if (v18 >= 0x100)
      v9 = 2;
    else
      v9 = v18 > 1;
  }
  if (v13 >= a2)
    goto LABEL_25;
  goto LABEL_18;
}

void sub_234F78AD8()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
}

void sub_234F78AE0()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
}

void sub_234F78B04()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_234F78B14()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_234F78B1C()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t storeEnumTagSinglePayload for WhitespaceRemovingFormatStyle.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_234F78B74 + 4 * byte_2352B6597[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_234F78BA8 + 4 * byte_2352B6592[v4]))();
}

uint64_t sub_234F78BA8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F78BB0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234F78BB8);
  return result;
}

uint64_t sub_234F78BC4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234F78BCCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_234F78BD0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F78BD8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void base witness table accessor for Equatable in WhitespaceRemovingFormatStyle<A, B>.CodingKeys()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for CustomDebugStringConvertible in WhitespaceRemovingFormatStyle<A, B>.CodingKeys()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for CustomStringConvertible in WhitespaceRemovingFormatStyle<A, B>.CodingKeys()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t EnvironmentValues.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return EnvironmentValues.getValue<A>(for:)(a1, a2, a3);
}

{
  return EnvironmentValues.subscript.getter(a1, a2, a3, (uint64_t (*)(_QWORD))type metadata accessor for DerivedEnvironmentPropertyKey, (uint64_t)&protocol conformance descriptor for DerivedEnvironmentPropertyKey<A>, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))PropertyList.Tracker.derivedValue<A>(_:for:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))PropertyList.subscript.getter);
}

{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17[16];

  v8 = *v3;
  v7 = v3[1];
  if (v7)
  {
    swift_retain_n();
    swift_retain_n();
    v9 = specialized PropertyList.Tracker.value<A>(_:for:)(v8);
    v11 = v10;
    swift_release_n();
    swift_release_n();
    if (v9)
    {
LABEL_3:
      v15 = v8;
      v16 = v7;
      return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 8))(a1, &v15, a2, *(_QWORD *)(a3 + 8), v9, v11);
    }
  }
  else
  {
    v13 = swift_retain_n();
    v9 = specialized closure #1 in PropertyList.subscript.getter(v13, (uint64_t)v17);
    v11 = v14;
    swift_release_n();
    if (v9)
      goto LABEL_3;
  }
  v15 = v8;
  v16 = v7;
  return EnvironmentValues.getValue<A>(for:)(a1, a2, *(_QWORD *)(a3 + 8));
}

uint64_t EnvironmentValues.subscript.setter(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;

  EnvironmentValues.setValue<A>(_:for:)();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

void EnvironmentValues.init()(_QWORD *a1@<X8>)
{
  void (*v2)(_QWORD *);
  void *v3;

  *a1 = 0;
  a1[1] = 0;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v2 = *(void (**)(_QWORD *))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue2.shared) + 0x68);
  v3 = static CoreGlue2.shared;
  v2(a1);

}

uint64_t EnvironmentValues.plist.getter()
{
  return swift_retain();
}

uint64_t EnvironmentValues.plist.setter(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = result;
  v3 = *v1;
  if (*v1)
  {
    v4 = *(_QWORD *)(v3 + 64);
    if (!result)
    {
      if (!v4)
        return result;
      goto LABEL_9;
    }
  }
  else
  {
    if (!result)
      return result;
    v4 = 0;
  }
  if (v4 == *(_QWORD *)(result + 64))
    return swift_release();
LABEL_9:
  if (v1[1])
  {
    swift_retain();
    PropertyList.Tracker.invalidateAllValues(from:to:)(v3, v2);
    swift_release();
  }
  result = swift_release();
  *v1 = v2;
  return result;
}

uint64_t EnvironmentValues.init(_:tracker:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  if (a1)
    v6 = *(_QWORD *)(a1 + 64);
  else
    v6 = 0;
  v7 = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 16));
  *(_QWORD *)(v7 + 24) = v6;
  os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 16));
  swift_release();
  swift_release();
  result = swift_release();
  *a3 = a1;
  a3[1] = a2;
  return result;
}

uint64_t EnvironmentValues.init(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  a2[1] = 0;
  return result;
}

uint64_t EnvironmentValues.removingTracker()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = 0;
  return swift_retain();
}

uint64_t *(*EnvironmentValues.plist.modify(_QWORD *a1))(uint64_t *result, char a2)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  swift_retain();
  return EnvironmentValues.plist.modify;
}

uint64_t *EnvironmentValues.plist.modify(uint64_t *result, char a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *result;
  v3 = (uint64_t *)result[1];
  if ((a2 & 1) != 0)
  {
    v4 = swift_retain();
    EnvironmentValues.plist.setter(v4);
    return (uint64_t *)swift_release();
  }
  v5 = *v3;
  if (*v3)
  {
    v6 = *(_QWORD *)(v5 + 64);
    if (!v2)
    {
      if (!v6)
        return result;
      goto LABEL_11;
    }
  }
  else
  {
    if (!v2)
      return result;
    v6 = 0;
  }
  if (v6 == *(_QWORD *)(v2 + 64))
    return (uint64_t *)swift_release();
LABEL_11:
  if (v3[1])
  {
    swift_retain();
    PropertyList.Tracker.invalidateAllValues(from:to:)(v5, v2);
    swift_release();
  }
  result = (uint64_t *)swift_release();
  *v3 = v2;
  return result;
}

uint64_t EnvironmentValues.addDependencies(from:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  os_unfair_lock_s *v8;
  _QWORD v9[4];
  char v10;

  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(result + 16);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
    v4 = *(_QWORD *)(v3 + 32);
    v5 = *(_QWORD *)(v3 + 40);
    v6 = *(_QWORD *)(v3 + 48);
    v7 = *(_BYTE *)(v3 + 56);
    v9[0] = *(_QWORD *)(v3 + 24);
    v9[1] = v4;
    v9[2] = v5;
    v9[3] = v6;
    v8 = *(os_unfair_lock_s **)(v2 + 16);
    v10 = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    os_unfair_lock_lock(v8 + 4);
    TrackerData.formUnion(_:)((uint64_t)v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(v8 + 4);
    swift_release();
    os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
    return swift_release();
  }
  return result;
}

uint64_t EnvironmentValues.valueWithSecondaryLookup<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t v9;

  v9 = *v4;
  if (v4[1])
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.valueWithSecondaryLookup<A>(_:secondaryLookupHandler:)(v9, a1, a2, a3, a4);
    swift_release();
  }
  else
  {
    swift_retain();
    PropertyList.valueWithSecondaryLookup<A>(_:)(a1, v9, a2, a3);
  }
  return swift_release();
}

uint64_t EnvironmentValues.getValue<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return EnvironmentValues.subscript.getter(a1, a2, a3, (uint64_t (*)(_QWORD))type metadata accessor for EnvironmentPropertyKey, (uint64_t)&protocol conformance descriptor for EnvironmentPropertyKey<A>, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t a5, void (*a6)(uint64_t, uint64_t, uint64_t, uint64_t), void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v7;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v9 = *v7;
  if (v7[1])
  {
    v11 = a4(0);
    swift_retain();
    swift_retain();
    v12 = MEMORY[0x23B7C9C04](a5, v11);
    a6(v9, v11, v11, v12);
    swift_release();
  }
  else
  {
    v14 = a4(0);
    swift_retain();
    v15 = MEMORY[0x23B7C9C04](a5, v14);
    a7(v14, v9, v14, v15);
  }
  return swift_release();
}

uint64_t EnvironmentValues._set<A>(_:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;

  v6 = *v4;
  v7 = type metadata accessor for EnvironmentPropertyKey(0, a3, a4, a4);
  swift_retain();
  v8 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for EnvironmentPropertyKey<A>, v7);
  specialized PropertyList.subscript.setter(a1, v7, v7, v8);
  if (v4[1])
  {
    v9 = *v4;
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v7, v6, v9, v7);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void (*EnvironmentValues.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  size_t v12;
  void *v13;

  v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[2] = a4;
  v9[3] = v4;
  *v9 = a2;
  v9[1] = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[4] = AssociatedTypeWitness;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9[5] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v9[6] = malloc(v12);
  v13 = malloc(v12);
  v9[7] = v13;
  EnvironmentValues.getValue<A>(for:)((uint64_t)v13, a3, a4);
  return EnvironmentValues.subscript.modify;
}

{
  uint64_t v4;
  _QWORD *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  size_t v12;

  v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[2] = a4;
  v9[3] = v4;
  *v9 = a2;
  v9[1] = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[4] = AssociatedTypeWitness;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9[5] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v9[6] = malloc(v12);
  v9[7] = malloc(v12);
  EnvironmentValues.subscript.getter(a2, a3, a4);
  return EnvironmentValues.subscript.modify;
}

void EnvironmentValues.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void *, uint64_t);

  v2 = *a1;
  v3 = (void *)(*a1)[6];
  v4 = (void *)(*a1)[7];
  v5 = (*a1)[4];
  v6 = (*a1)[5];
  v7 = (*a1)[2];
  v9 = **a1;
  v8 = (*a1)[1];
  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[6], v4, v5);
    EnvironmentValues._set<A>(_:for:)((uint64_t)v3, v9, v8, v7);
    v10 = *(void (**)(void *, uint64_t))(v6 + 8);
    v10(v3, v5);
  }
  else
  {
    EnvironmentValues._set<A>(_:for:)((*a1)[7], v9, v8, v7);
    v10 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v10(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void *, uint64_t);

  v2 = *a1;
  v3 = (void *)(*a1)[6];
  v4 = (void *)(*a1)[7];
  v5 = (*a1)[4];
  v6 = (*a1)[5];
  v7 = (*a1)[2];
  v9 = **a1;
  v8 = (*a1)[1];
  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[6], v4, v5);
    specialized EnvironmentValues.subscript.setter((uint64_t)v3, v9, v8, v7);
    v10 = *(void (**)(void *, uint64_t))(v6 + 8);
    v10(v3, v5);
  }
  else
  {
    specialized EnvironmentValues.subscript.setter((*a1)[7], v9, v8, v7);
    v10 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v10(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t EnvironmentValues.description.getter()
{
  _QWORD **v0;
  _QWORD *v1;
  Swift::String v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[2];

  v1 = *v0;
  v6[0] = 91;
  v6[1] = 0xE100000000000000;
  v5 = 0;
  if (v1)
  {
    v4 = 0;
    swift_retain();
    specialized PropertyList.Element.forEach(filter:_:)(&v4, v1, &v5, (uint64_t)v6);
  }
  v2._countAndFlagsBits = 93;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  swift_release();
  return v6[0];
}

uint64_t EnvironmentValues.append(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *value;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  os_unfair_lock_s *v19;
  _QWORD v21[4];
  char v22;

  v5 = v4;
  value = *(_QWORD **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *v4;
  if (*(_QWORD *)a1)
  {
    if (v8)
    {
      if (value[3])
      {
        type metadata accessor for TypedElement<EmptyKey>(0, a2, a3, a4);
        swift_allocObject();
        swift_retain();
        swift_retain();
        value = (_QWORD *)PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for EmptyKey, v8, (uint64_t)value).value;
      }
      else
      {
        v10 = value[4];
        v11 = *(uint64_t (**)(uint64_t, uint64_t))(*value + 216);
        swift_retain();
        swift_retain();
        swift_retain();
        v12 = v11(v8, v10);
        swift_release();
        swift_release();
        swift_release();
        value = (_QWORD *)v12;
      }
LABEL_8:
      v9 = *(_QWORD *)(v8 + 64);
      if (!value)
      {
        if (!v9)
          goto LABEL_19;
LABEL_15:
        if (v5[1])
        {
          swift_retain();
          swift_retain();
          PropertyList.Tracker.invalidateAllValues(from:to:)(v8, (uint64_t)value);
          swift_release();
        }
        else
        {
          swift_retain();
        }
        swift_release();
        *v5 = (uint64_t)value;
        goto LABEL_19;
      }
      goto LABEL_14;
    }
    swift_retain();
  }
  else
  {
    swift_retain();
    value = (_QWORD *)v8;
    if (v8)
      goto LABEL_8;
  }
  if (!value)
    goto LABEL_19;
  v9 = 0;
LABEL_14:
  if (v9 != value[8])
    goto LABEL_15;
LABEL_19:
  if (v7)
  {
    v13 = v5[1];
    if (v13)
    {
      v14 = *(_QWORD *)(v7 + 16);
      swift_retain();
      swift_retain();
      swift_retain();
      os_unfair_lock_lock((os_unfair_lock_t)(v14 + 16));
      v15 = *(_QWORD *)(v14 + 32);
      v16 = *(_QWORD *)(v14 + 40);
      v17 = *(_QWORD *)(v14 + 48);
      v18 = *(_BYTE *)(v14 + 56);
      v21[0] = *(_QWORD *)(v14 + 24);
      v21[1] = v15;
      v21[2] = v16;
      v21[3] = v17;
      v19 = *(os_unfair_lock_s **)(v13 + 16);
      v22 = v18;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      os_unfair_lock_lock(v19 + 4);
      TrackerData.formUnion(_:)((uint64_t)v21);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v19 + 4);
      swift_release();
      os_unfair_lock_unlock((os_unfair_lock_t)(v14 + 16));
      swift_release();
      swift_release();
      swift_release();
    }
  }
  return swift_release();
}

uint64_t static EnvironmentPropertyKey.defaultValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t static EnvironmentPropertyKey.valuesEqual(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))() & 1;
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance EnvironmentPropertyKey<A>(uint64_t a1)
{
  return static EnvironmentPropertyKey.defaultValue.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance EnvironmentPropertyKey<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static EnvironmentPropertyKey.valuesEqual(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t static DerivedEnvironmentPropertyKey.value(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v5)(_QWORD *, uint64_t, uint64_t);
  _QWORD v7[2];

  v7[0] = a1;
  v7[1] = 0;
  v5 = *(void (**)(_QWORD *, uint64_t, uint64_t))(a3 + 24);
  swift_retain();
  v5(v7, a2, a3);
  return swift_release();
}

uint64_t protocol witness for static DerivedPropertyKey.value(in:) in conformance DerivedEnvironmentPropertyKey<A>(uint64_t a1, uint64_t a2)
{
  return static DerivedEnvironmentPropertyKey.value(in:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t type metadata accessor for DerivedEnvironmentPropertyKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DerivedEnvironmentPropertyKey);
}

uint64_t type metadata accessor for EnvironmentPropertyKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EnvironmentPropertyKey);
}

uint64_t sub_234F79844@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_234F79850()
{
  uint64_t v0;

  v0 = swift_retain();
  return EnvironmentValues.plist.setter(v0);
}

_QWORD *assignWithCopy for EnvironmentValues(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for EnvironmentValues()
{
  return &type metadata for EnvironmentValues;
}

uint64_t associated type witness table accessor for DerivedPropertyKey.Value : Equatable in DerivedEnvironmentPropertyKey<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t static ScrollViewDragAutoScrollKey.defaultValue.getter()
{
  return 0;
}

uint64_t static ScrollViewDragAutoScrollKey.reduce(value:nextValue:)(_BYTE *a1, uint64_t (*a2)(void))
{
  uint64_t result;

  if ((*a1 & 1) != 0)
    result = 1;
  else
    result = a2();
  *a1 = result & 1;
  return result;
}

ValueMetadata *type metadata accessor for ScrollViewDragAutoScrollKey()
{
  return &type metadata for ScrollViewDragAutoScrollKey;
}

uint64_t specialized Collection.index(_:offsetBy:)(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (a4 < 0)
    goto LABEL_27;
  v6 = a2;
  v7 = result;
  v8 = a3 & 1;
  if (!a4)
  {
    outlined copy of [A : B].Index._Variant<A, B>(result, a2, a3 & 1);
    return v7;
  }
  v9 = *v4;
  v10 = v9 + 64;
  result = outlined copy of [A : B].Index._Variant<A, B>(result, a2, a3 & 1);
  v11 = 0;
  v12 = a4 - 1;
  v13 = v6;
  v14 = v9 + 88;
  while ((v7 & 0x8000000000000000) == 0)
  {
    v16 = 1 << *(_BYTE *)(v9 + 32);
    if ((uint64_t)v7 >= v16)
      break;
    v17 = v7 >> 6;
    v18 = *(_QWORD *)(v10 + 8 * (v7 >> 6));
    if (((v18 >> v7) & 1) == 0)
      goto LABEL_25;
    if (*(_DWORD *)(v9 + 36) != (_DWORD)v6)
      goto LABEL_26;
    v19 = v18 & (-2 << (v7 & 0x3F));
    if (v19)
    {
      v7 = __clz(__rbit64(v19)) | v7 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      v20 = v17 + 1;
      v21 = (unint64_t)(v16 + 63) >> 6;
      if (v17 + 1 >= v21)
        goto LABEL_19;
      v22 = *(_QWORD *)(v10 + 8 * v20);
      if (!v22)
      {
        v20 = v17 + 2;
        if (v17 + 2 >= v21)
        {
LABEL_19:
          v7 = 1 << *(_BYTE *)(v9 + 32);
          goto LABEL_5;
        }
        v22 = *(_QWORD *)(v10 + 8 * v20);
        if (!v22)
        {
          while (v21 - 3 != v17)
          {
            v22 = *(_QWORD *)(v14 + 8 * v17++);
            if (v22)
            {
              v23 = v6;
              v24 = v12;
              v25 = v14;
              result = outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v7, v23, v8 & 1);
              v14 = v25;
              v12 = v24;
              v20 = v17 + 2;
              goto LABEL_13;
            }
          }
          v26 = v8 & 1;
          v27 = v6;
          v28 = v12;
          v29 = v14;
          result = outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v7, v27, v26);
          v14 = v29;
          v12 = v28;
          v7 = v16;
          goto LABEL_5;
        }
      }
LABEL_13:
      v7 = __clz(__rbit64(v22)) + (v20 << 6);
    }
LABEL_5:
    v8 = 0;
    v6 = v13;
    if (v11++ == v12)
      return v7;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

int *specialized Collection.index(_:offsetBy:)@<X0>(int *result@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  uint64_t i;

  if (a2 < 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }
  v5 = *result;
  v4 = result[1];
  if (!a2)
  {
    *a3 = v5;
    a3[1] = v4;
    return result;
  }
  if (!*(_QWORD *)v3)
    goto LABEL_13;
  v6 = *(_DWORD *)(v3 + 12);
  for (i = 1; !(v5 - v6 + (_DWORD)i); ++i)
  {
    v4 = 0;
    if (i >= a2)
      goto LABEL_10;
LABEL_6:
    ;
  }
  v4 += *(_DWORD *)(*(_QWORD *)v3 + 8 + v4);
  if (i < a2)
    goto LABEL_6;
  v6 = v5 + i;
LABEL_10:
  *a3 = v6;
  a3[1] = v4;
  return result;
}

uint64_t specialized Collection.index(_:offsetBy:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((a2 & 0x8000000000000000) == 0)
  {
    v3 = result;
    if (!a2)
    {
LABEL_14:
      *a3 = v3;
      return result;
    }
    v4 = 0;
    while (1)
    {
      v5 = 0;
      while (*((unsigned __int8 *)&outlined read-only object #0 of static DynamicTypeSize.allCases.getter + v5 + 32) != v3)
      {
        if (++v5 == 12)
        {
          __break(1u);
LABEL_15:
          __break(1u);
          goto LABEL_16;
        }
      }
      v6 = v5 + 1;
      if (__OFADD__(v5, 1))
        goto LABEL_15;
      if (v6 >= 12)
        v6 = 11;
      if ((unint64_t)v6 >= 0xC)
        break;
      v3 = *((unsigned __int8 *)&outlined read-only object #0 of static DynamicTypeSize.allCases.getter + v6 + 32);
      if (v4++ == a2 - 1)
        goto LABEL_14;
    }
LABEL_16:
    __break(1u);
  }
  __break(1u);
  __break(1u);
  return result;
}

unint64_t specialized Collection.index(_:offsetBy:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t i;

  if (a2 < 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }
  v5 = HIDWORD(result);
  if (!a2)
  {
    *(_QWORD *)a5 = result;
    return result;
  }
  if (!a3)
    goto LABEL_13;
  v6 = HIDWORD(a4);
  for (i = 1; !((_DWORD)result - HIDWORD(a4) + (_DWORD)i); ++i)
  {
    LODWORD(v5) = 0;
    if (i >= a2)
      goto LABEL_10;
LABEL_6:
    ;
  }
  LODWORD(v5) = *(_DWORD *)(a3 + 8 + (int)v5) + v5;
  if (i < a2)
    goto LABEL_6;
  LODWORD(v6) = result + i;
LABEL_10:
  *(_DWORD *)a5 = v6;
  *(_DWORD *)(a5 + 4) = v5;
  return result;
}

uint64_t specialized Collection.index(_:offsetBy:limitedBy:)(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, int a6, char a7)
{
  uint64_t *v7;
  uint64_t v8;
  char v9;
  char v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;

  if (a4 < 0)
  {
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  else
  {
    if (a4)
    {
      v8 = 0;
      v9 = a7 & 1;
      v10 = (a3 | a7) & 1;
      v11 = result;
      v12 = a2;
      while (1)
      {
        if ((v10 & 1) != 0)
          goto LABEL_32;
        if (v12 != a6)
        {
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
        if (v11 == a5)
        {
          v11 = 0;
          goto LABEL_26;
        }
        if ((v11 & 0x8000000000000000) != 0)
          goto LABEL_28;
        v13 = *v7;
        v14 = 1 << *(_BYTE *)(*v7 + 32);
        if ((uint64_t)v11 >= v14)
          goto LABEL_28;
        v15 = v11 >> 6;
        v16 = v13 + 64;
        v17 = *(_QWORD *)(v13 + 64 + 8 * (v11 >> 6));
        if (((v17 >> v11) & 1) == 0)
          goto LABEL_29;
        if (*(_DWORD *)(v13 + 36) != a6)
          goto LABEL_30;
        v18 = v17 & (-2 << (v11 & 0x3F));
        if (v18)
        {
          v11 = __clz(__rbit64(v18)) | v11 & 0xFFFFFFFFFFFFFFC0;
        }
        else
        {
          v19 = v15 + 1;
          v20 = (unint64_t)(v14 + 63) >> 6;
          if (v15 + 1 >= v20)
            goto LABEL_23;
          v21 = *(_QWORD *)(v16 + 8 * v19);
          if (!v21)
          {
            v19 = v15 + 2;
            if (v15 + 2 >= v20)
              goto LABEL_23;
            v21 = *(_QWORD *)(v16 + 8 * v19);
            if (!v21)
            {
              v22 = v13 + 88;
              while (v20 - 3 != v15)
              {
                v21 = *(_QWORD *)(v22 + 8 * v15++);
                if (v21)
                {
                  v19 = v15 + 2;
                  goto LABEL_16;
                }
              }
LABEL_23:
              v11 = 1 << *(_BYTE *)(*v7 + 32);
              goto LABEL_5;
            }
          }
LABEL_16:
          v11 = __clz(__rbit64(v21)) + (v19 << 6);
        }
LABEL_5:
        ++v8;
        v12 = a6;
        v10 = v9;
        if (v8 == a4)
          goto LABEL_26;
      }
    }
    v11 = result;
LABEL_26:
    outlined copy of [A : B].Index._Variant<A, B>(result, a2, a3 & 1);
    return v11;
  }
  return result;
}

unsigned int *specialized Collection.index(_:offsetBy:limitedBy:)@<X0>(unsigned int *result@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  char v13;

  if ((a2 & 0x8000000000000000) == 0)
  {
    v6 = *result;
    v5 = result[1];
    if (a2)
    {
      v7 = a3[1];
      if (v6 != *a3 || (_DWORD)v5 != v7)
      {
        if (*(_QWORD *)v4)
        {
          v9 = *(_DWORD *)(v4 + 12);
          v10 = 1;
          while (1)
          {
            if (v6 - v9 + (_DWORD)v10)
            {
              v5 = (*(_DWORD *)(*(_QWORD *)v4 + 8 + (int)v5) + v5);
              if (v10 >= a2)
              {
                v9 = v6 + v10;
                goto LABEL_17;
              }
            }
            else
            {
              v5 = 0;
              if (v10 >= a2)
                goto LABEL_17;
            }
            v11 = v6 - *a3 + v10++;
            if (!v11 && (_DWORD)v5 == v7)
              goto LABEL_15;
          }
        }
        goto LABEL_20;
      }
LABEL_15:
      v12 = 0;
      v13 = 1;
    }
    else
    {
      v9 = *result;
LABEL_17:
      v13 = 0;
      v12 = v9 | (unint64_t)(v5 << 32);
    }
    *(_QWORD *)a4 = v12;
    *(_BYTE *)(a4 + 8) = v13;
    return result;
  }
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

uint64_t specialized Collection.index(_:offsetBy:limitedBy:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, _BYTE *a4@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 < 0)
  {
LABEL_18:
    __break(1u);
  }
  else
  {
    v4 = result;
    if (!a2)
    {
LABEL_14:
      *a4 = v4;
      return result;
    }
    v5 = 0;
    while (2)
    {
      if (v4 != a3)
      {
        v6 = 0;
        ++v5;
        while (v4 != *((unsigned __int8 *)&outlined read-only object #0 of static DynamicTypeSize.allCases.getter
                      + v6
                      + 32))
        {
          if (++v6 == 12)
          {
            __break(1u);
            __break(1u);
            goto LABEL_16;
          }
        }
        v7 = v6 + 1;
        if (__OFADD__(v6, 1))
        {
LABEL_16:
          __break(1u);
        }
        else
        {
          if (v7 >= 12)
            v7 = 11;
          if ((v7 & 0x8000000000000000) == 0)
          {
            v4 = *((unsigned __int8 *)&outlined read-only object #0 of static DynamicTypeSize.allCases.getter + v7 + 32);
            if (v5 != a2)
              continue;
            goto LABEL_14;
          }
        }
        __break(1u);
        goto LABEL_18;
      }
      break;
    }
    *a4 = 12;
  }
  return result;
}

unint64_t specialized Collection.index(_:offsetBy:limitedBy:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  char v10;

  if (a2 < 0)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    return result;
  }
  v6 = HIDWORD(result);
  if (!a2)
    goto LABEL_14;
  if (result == a3)
  {
LABEL_12:
    v9 = 0;
    v10 = 1;
    goto LABEL_15;
  }
  if (!a4)
    goto LABEL_17;
  v7 = 1;
  while ((_DWORD)result - HIDWORD(a5) + (_DWORD)v7)
  {
    v6 = (*(_DWORD *)(a4 + 8 + (int)v6) + v6);
    if (v7 >= a2)
    {
      result = (result + v7);
      goto LABEL_14;
    }
LABEL_10:
    v8 = result - a3 + v7++;
    if (!v8 && (_DWORD)v6 == HIDWORD(a3))
      goto LABEL_12;
  }
  v6 = 0;
  if (v7 < a2)
    goto LABEL_10;
  result = HIDWORD(a5);
LABEL_14:
  v10 = 0;
  v9 = result | (v6 << 32);
LABEL_15:
  *(_QWORD *)a6 = v9;
  *(_BYTE *)(a6 + 8) = v10;
  return result;
}

unint64_t specialized Collection.distance(from:to:)(unint64_t result, uint64_t a2, char a3, int64_t a4, unsigned int a5, char a6)
{
  uint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if ((a6 & 1) != 0 || (a3 & 1) != 0)
    goto LABEL_36;
  if (a4 < (uint64_t)result)
    goto LABEL_34;
  v9 = a2;
  if (a5 != (_DWORD)a2)
  {
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    return result;
  }
  if (result != a4)
  {
    v11 = *v6;
    v12 = v11 + 64;
    v13 = v11 + 88;
    v10 = 1;
    while (1)
    {
      if ((result & 0x8000000000000000) != 0 || (v14 = 1 << *(_BYTE *)(v11 + 32), (uint64_t)result >= v14))
      {
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
      v15 = result >> 6;
      v16 = *(_QWORD *)(v12 + 8 * (result >> 6));
      if (((v16 >> result) & 1) == 0)
        goto LABEL_31;
      if (*(_DWORD *)(v11 + 36) != (_DWORD)v9)
        goto LABEL_32;
      v17 = v16 & (-2 << (result & 0x3F));
      if (v17)
      {
        result = __clz(__rbit64(v17)) | result & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        v18 = v15 + 1;
        v19 = (unint64_t)(v14 + 63) >> 6;
        if (v15 + 1 >= v19)
          goto LABEL_24;
        v20 = *(_QWORD *)(v12 + 8 * v18);
        if (!v20)
        {
          v18 = v15 + 2;
          if (v15 + 2 >= v19)
            goto LABEL_24;
          v20 = *(_QWORD *)(v12 + 8 * v18);
          if (!v20)
          {
            while (v19 - 3 != v15)
            {
              v20 = *(_QWORD *)(v13 + 8 * v15++);
              if (v20)
              {
                v21 = v13;
                outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(result, v9, 0);
                v13 = v21;
                v18 = v15 + 2;
                goto LABEL_17;
              }
            }
            v22 = v13;
            outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(result, v9, 0);
            v13 = v22;
LABEL_24:
            result = v14;
            goto LABEL_25;
          }
        }
LABEL_17:
        result = __clz(__rbit64(v20)) + (v18 << 6);
      }
LABEL_25:
      if ((_DWORD)v9 != a5)
        goto LABEL_33;
      if (result == a4)
        return v10;
      v9 = a5;
      if (__OFADD__(v10++, 1))
      {
        __break(1u);
        goto LABEL_30;
      }
    }
  }
  return 0;
}

uint64_t specialized Collection.distance(from:to:)(uint64_t result, int *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v9;
  BOOL v11;
  int v12;

  v3 = *a2;
  v4 = *(_DWORD *)result;
  if (*a2 < *(_DWORD *)result)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v5 = *(_DWORD *)(result + 4);
  v6 = a2[1];
  v7 = v3 - v4;
  if (v3 == v4 && v5 == v6)
    return 0;
  if (*(_QWORD *)v2)
  {
    v9 = *(_DWORD *)(v2 + 12);
    v11 = v9 == v3 && v6 == 0;
    v12 = v9 - v4;
    result = 1;
    do
    {
      if (v12 == (_DWORD)result)
      {
        if (v11)
          return result;
        v5 = 0;
      }
      else
      {
        v5 += *(_DWORD *)(*(_QWORD *)v2 + 8 + v5);
        if (v7 == (_DWORD)result && v5 == v6)
          return result;
      }
    }
    while (!__OFADD__(result++, 1));
    __break(1u);
    goto LABEL_23;
  }
LABEL_24:
  __break(1u);
  return result;
}

unint64_t specialized Collection.distance(from:to:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  int v5;
  BOOL v6;
  char v7;
  int v8;

  if ((int)a2 < (int)result)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v4 = HIDWORD(result);
  v5 = a2 - result;
  if (result == a2)
    return 0;
  if (a3)
  {
    if (HIDWORD(a2))
      v6 = 0;
    else
      v6 = HIDWORD(a4) == (_DWORD)a2;
    v7 = v6;
    v8 = HIDWORD(a4) - result;
    result = 1;
    do
    {
      if (v8 == (_DWORD)result)
      {
        if ((v7 & 1) != 0)
          return result;
        LODWORD(v4) = 0;
      }
      else
      {
        LODWORD(v4) = *(_DWORD *)(a3 + 8 + (int)v4) + v4;
        if (v5 == (_DWORD)result && (_DWORD)v4 == HIDWORD(a2))
          return result;
      }
    }
    while (!__OFADD__(result++, 1));
    __break(1u);
    goto LABEL_20;
  }
LABEL_21:
  __break(1u);
  return result;
}

void static DynamicTypeSize.systemDefault.getter()
{
  void (*v0)(void);
  void *v1;

  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v0 = *(void (**)(void))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)static CoreGlue2.shared) + 0x78);
  v1 = static CoreGlue2.shared;
  v0();

}

BOOL DynamicTypeSize.isAccessibilitySize.getter()
{
  unsigned __int8 *v0;

  return *v0 - 7 < 5;
}

BOOL static DynamicTypeSize.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void DynamicTypeSize.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static DynamicTypeSize.< infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

void *static DynamicTypeSize.allCases.getter()
{
  return &outlined read-only object #0 of static DynamicTypeSize.allCases.getter;
}

Swift::Int DynamicTypeSize.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for static CaseIterable.allCases.getter in conformance DynamicTypeSize(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static DynamicTypeSize.allCases.getter;
}

uint64_t EnvironmentValues.dynamicTypeSize.getter@<X0>(char *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

uint64_t key path getter for EnvironmentValues.dynamicTypeSize : EnvironmentValues@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v6;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v6);
    swift_release_n();
  }
  else
  {
    v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, &v6);
  }
  result = swift_release_n();
  *a2 = v6;
  return result;
}

uint64_t key path setter for EnvironmentValues.dynamicTypeSize : EnvironmentValues(unsigned __int8 *a1)
{
  unsigned __int8 v2;

  v2 = *a1;
  return EnvironmentValues.dynamicTypeSize.setter(&v2);
}

uint64_t EnvironmentValues.dynamicTypeSize.setter(unsigned __int8 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;

  v2 = *v1;
  v3 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v3);
  swift_release();
  if (v1[1])
  {
    v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v2, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t (*EnvironmentValues.dynamicTypeSize.modify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1)
{
  uint64_t *v4;
  char *v5;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;

  v5 = (char *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  v6 = *v4;
  if (v4[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v6, v5);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DynamicTypeSizeKey>(0, a2, a3, a4);
    BloomFilter.init(hashValue:)(v7);
    v8 = swift_retain_n();
    v9 = specialized find1<A>(_:key:filter:)(v8, v12);
    if (v9)
      v10 = *(_BYTE *)(v9 + 72);
    else
      v10 = 3;
    *v5 = v10;
  }
  swift_release_n();
  return EnvironmentValues.dynamicTypeSize.modify;
}

uint64_t EnvironmentValues.dynamicTypeSize.modify(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_BYTE *)(a1 + 24);
  v3 = *(uint64_t **)(a1 + 16);
  v4 = *v3;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v3, v2);
  swift_release();
  if (v3[1])
  {
    v5 = **(_QWORD **)(a1 + 16);
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.dynamicTypeSize(_:)(char *a1, uint64_t a2, uint64_t a3)
{
  char v5;
  uint64_t *KeyPath;
  char v8;

  v5 = *a1;
  KeyPath = (uint64_t *)swift_getKeyPath();
  v8 = v5;
  View.environment<A>(_:_:)(KeyPath, (uint64_t)&v8, a2, a3);
  return swift_release();
}

uint64_t View.dynamicTypeSize<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t *KeyPath;
  unint64_t v14;
  char *v15;
  uint64_t v17;

  v17 = a6;
  v11 = *(_QWORD *)(a3 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x24BDAC7A8](a1);
  KeyPath = (uint64_t *)swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a3);
  v14 = (*(unsigned __int8 *)(v11 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v15 = (char *)swift_allocObject();
  *((_QWORD *)v15 + 2) = a2;
  *((_QWORD *)v15 + 3) = a3;
  *((_QWORD *)v15 + 4) = a4;
  *((_QWORD *)v15 + 5) = a5;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v15[v14], (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a3);
  View.transformEnvironment<A>(_:transform:)(KeyPath, (uint64_t)partial apply for closure #1 in View.dynamicTypeSize<A>(_:), (uint64_t)v15, a2, a4);
  swift_release();
  return swift_release();
}

uint64_t DynamicTypeSize.clamped<A>(to:)@<X0>(_BYTE *a1@<X8>)
{
  unsigned __int8 *v1;
  unsigned int v3;
  unsigned int v4;
  uint64_t result;
  char v6;
  unint64_t v7;
  unsigned int v8;
  unsigned __int8 v9;
  unsigned __int8 v10;

  v3 = *v1;
  lazy protocol witness table accessor for type DynamicTypeSizeCollection and conformance DynamicTypeSizeCollection();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  v4 = v10;
  result = dispatch thunk of RangeExpression.contains(_:)();
  if ((result & 1) == 0)
  {
    result = specialized Collection<>.firstIndex(of:)(v10, (uint64_t)&outlined read-only object #0 of static DynamicTypeSize.allCases.getter);
    if ((v6 & 1) == 0)
    {
      if (__OFSUB__(result, 1))
      {
        __break(1u);
      }
      else
      {
        v7 = (result - 1) & ~((result - 1) >> 63);
        if (v7 < 0xC)
        {
          v4 = *((unsigned __int8 *)&outlined read-only object #0 of static DynamicTypeSize.allCases.getter + v7 + 32);
          goto LABEL_6;
        }
      }
      __break(1u);
    }
    __break(1u);
    return result;
  }
LABEL_6:
  if (v3 <= v9)
    v8 = v9;
  else
    v8 = v3;
  if (v4 < v8)
    LOBYTE(v8) = v4;
  *a1 = v8;
  return result;
}

uint64_t DynamicTypeSizeCollection.index(after:)@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v4;
  uint64_t v5;

  result = specialized Collection<>.firstIndex(of:)(*a1, (uint64_t)&outlined read-only object #0 of static DynamicTypeSize.allCases.getter);
  if ((v4 & 1) == 0)
  {
    v5 = result + 1;
    if (__OFADD__(result, 1))
    {
      __break(1u);
    }
    else
    {
      if (v5 >= 12)
        v5 = 11;
      if ((v5 & 0x8000000000000000) == 0)
      {
        *a2 = *((_BYTE *)&outlined read-only object #0 of static DynamicTypeSize.allCases.getter + v5 + 32);
        return result;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance DynamicTypeSizeCollection(_BYTE *a1, _BYTE *a2))(_QWORD, _QWORD)
{
  *a1 = *a2;
  return _ViewInputs.base.modify;
}

_BYTE *protocol witness for Collection.subscript.getter in conformance DynamicTypeSizeCollection@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  unsigned int v2;

  v2 = result[1];
  if (v2 > 0xB)
  {
    __break(1u);
  }
  else
  {
    *a2 = *result;
    a2[1] = v2;
  }
  return result;
}

void protocol witness for Collection.indices.getter in conformance DynamicTypeSizeCollection(_WORD *a1@<X8>)
{
  *a1 = 2816;
}

uint64_t protocol witness for Collection.count.getter in conformance DynamicTypeSizeCollection()
{
  return specialized Collection.distance(from:to:)(0, 0xBu);
}

void protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance DynamicTypeSizeCollection(_BYTE *a1@<X8>)
{
  *a1 = 13;
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance DynamicTypeSizeCollection@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  return specialized Collection.index(_:offsetBy:)(*a1, a2, a3);
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance DynamicTypeSizeCollection@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, _BYTE *a4@<X8>)
{
  return specialized Collection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3, a4);
}

uint64_t protocol witness for Collection.distance(from:to:) in conformance DynamicTypeSizeCollection(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized Collection.distance(from:to:)(*a1, *a2);
}

unsigned __int8 *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance DynamicTypeSizeCollection(unsigned __int8 *result, unsigned __int8 *a2)
{
  unsigned int v2;

  v2 = *result;
  if (v2 < *a2 || v2 >= a2[1])
    __break(1u);
  return result;
}

{
  unsigned int v2;

  v2 = *result;
  if (v2 < *a2 || a2[1] < v2)
    __break(1u);
  return result;
}

{
  if (*result < *a2 || a2[1] < result[1])
    __break(1u);
  return result;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance DynamicTypeSizeCollection(unsigned __int8 *a1)
{
  uint64_t result;
  unsigned __int8 v3;

  result = DynamicTypeSizeCollection.index(after:)(a1, &v3);
  *a1 = v3;
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<DynamicTypeSizeKey>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<DynamicTypeSizeKey>)
  {
    v4 = type metadata accessor for EnvironmentPropertyKey(0, (uint64_t)&type metadata for DynamicTypeSizeKey, (uint64_t)&protocol witness table for DynamicTypeSizeKey, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DynamicTypeSizeKey>);
  }
}

uint64_t sub_234F7AC88(unsigned __int8 *a1)
{
  unsigned __int8 v2;

  v2 = *a1;
  return EnvironmentValues.dynamicTypeSize.setter(&v2);
}

uint64_t sub_234F7ACBC()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.dynamicTypeSize<A>(_:)(_BYTE *a1)
{
  uint64_t result;
  char v3;

  result = DynamicTypeSize.clamped<A>(to:)(&v3);
  *a1 = v3;
  return result;
}

unint64_t lazy protocol witness table accessor for type DynamicTypeSizeCollection and conformance DynamicTypeSizeCollection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DynamicTypeSizeCollection and conformance DynamicTypeSizeCollection;
  if (!lazy protocol witness table cache variable for type DynamicTypeSizeCollection and conformance DynamicTypeSizeCollection)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DynamicTypeSizeCollection, &unk_25063B178);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DynamicTypeSizeCollection and conformance DynamicTypeSizeCollection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DynamicTypeSizeCollection and conformance DynamicTypeSizeCollection;
  if (!lazy protocol witness table cache variable for type DynamicTypeSizeCollection and conformance DynamicTypeSizeCollection)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DynamicTypeSizeCollection, &unk_25063B178);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DynamicTypeSizeCollection and conformance DynamicTypeSizeCollection);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DynamicTypeSize and conformance DynamicTypeSize()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DynamicTypeSize and conformance DynamicTypeSize;
  if (!lazy protocol witness table cache variable for type DynamicTypeSize and conformance DynamicTypeSize)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DynamicTypeSize, &type metadata for DynamicTypeSize);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DynamicTypeSize and conformance DynamicTypeSize);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DynamicTypeSize and conformance DynamicTypeSize;
  if (!lazy protocol witness table cache variable for type DynamicTypeSize and conformance DynamicTypeSize)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DynamicTypeSize, &type metadata for DynamicTypeSize);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DynamicTypeSize and conformance DynamicTypeSize);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [DynamicTypeSize] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [DynamicTypeSize] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DynamicTypeSize] and conformance [A])
  {
    type metadata accessor for [DynamicTypeSize](255, &lazy cache variable for type metadata for [DynamicTypeSize], (uint64_t (*)(_QWORD, ValueMetadata *))MEMORY[0x24BEE1250]);
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DynamicTypeSize] and conformance [A]);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for DynamicTypeSize(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_234F7AEA4 + 4 * byte_2352B69B5[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_234F7AED8 + 4 * asc_2352B69B0[v4]))();
}

uint64_t sub_234F7AED8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F7AEE0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234F7AEE8);
  return result;
}

uint64_t sub_234F7AEF4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234F7AEFCLL);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_234F7AF00(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F7AF08(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DynamicTypeSize()
{
  return &type metadata for DynamicTypeSize;
}

uint64_t sub_234F7AF24(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v1 = *a1;
  v2 = a1[1];
  type metadata accessor for [DynamicTypeSize](255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<DynamicTypeSize>, (uint64_t (*)(_QWORD, ValueMetadata *))type metadata accessor for _EnvironmentKeyWritingModifier);
  v5 = type metadata accessor for ModifiedContent(255, v1, v3, v4);
  v7[0] = v2;
  v7[1] = &protocol witness table for _EnvironmentKeyWritingModifier<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v7);
}

uint64_t sub_234F7AF90(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v1 = *a1;
  v2 = a1[2];
  type metadata accessor for [DynamicTypeSize](255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<DynamicTypeSize>, (uint64_t (*)(_QWORD, ValueMetadata *))type metadata accessor for _EnvironmentKeyTransformModifier);
  v5 = type metadata accessor for ModifiedContent(255, v1, v3, v4);
  v7[0] = v2;
  v7[1] = &protocol witness table for _EnvironmentKeyTransformModifier<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v5, v7);
}

void type metadata accessor for [DynamicTypeSize](uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, ValueMetadata *))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, &type metadata for DynamicTypeSize);
    if (!v5)
      atomic_store(v4, a2);
  }
}

void *type metadata accessor for DynamicTypeSizeCollection()
{
  return &unk_25063B178;
}

ValueMetadata *type metadata accessor for DynamicTypeSizeKey()
{
  return &type metadata for DynamicTypeSizeKey;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in DynamicTypeSizeCollection()
{
  return lazy protocol witness table accessor for type IndexingIterator<DynamicTypeSizeCollection> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type IndexingIterator<DynamicTypeSizeCollection> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<DynamicTypeSizeCollection>, (uint64_t (*)(uint64_t, void *, unint64_t))MEMORY[0x24BEE2C00], MEMORY[0x24BEE2C18]);
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in DynamicTypeSizeCollection()
{
  return lazy protocol witness table accessor for type IndexingIterator<DynamicTypeSizeCollection> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type DefaultIndices<DynamicTypeSizeCollection> and conformance DefaultIndices<A>, &lazy cache variable for type metadata for DefaultIndices<DynamicTypeSizeCollection>, (uint64_t (*)(uint64_t, void *, unint64_t))MEMORY[0x24BEE0650], MEMORY[0x24BEE0670]);
}

uint64_t lazy protocol witness table accessor for type IndexingIterator<DynamicTypeSizeCollection> and conformance IndexingIterator<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *, unint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for IndexingIterator<DynamicTypeSizeCollection>(255, a2, a3);
    result = MEMORY[0x23B7C9C04](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in DynamicTypeSizeCollection()
{
  return lazy protocol witness table accessor for type IndexingIterator<DynamicTypeSizeCollection> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type Slice<DynamicTypeSizeCollection> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<DynamicTypeSizeCollection>, (uint64_t (*)(uint64_t, void *, unint64_t))MEMORY[0x24BEE41D8], MEMORY[0x24BEE4238]);
}

void type metadata accessor for IndexingIterator<DynamicTypeSizeCollection>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = lazy protocol witness table accessor for type DynamicTypeSizeCollection and conformance DynamicTypeSizeCollection();
    v7 = a3(a1, &unk_25063B178, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t specialized Collection.distance(from:to:)(uint64_t result, unsigned __int8 a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;

  v2 = result;
  if (a2 >= result)
  {
    if (result == a2)
      return 0;
    result = 0;
    while (!__OFADD__(result++, 1))
    {
      v4 = 0;
      while (*((unsigned __int8 *)&outlined read-only object #0 of static DynamicTypeSize.allCases.getter + v4 + 32) != v2)
      {
        if (++v4 == 12)
        {
          __break(1u);
          goto LABEL_16;
        }
      }
      v5 = v4 + 1;
      if (__OFADD__(v4, 1))
        goto LABEL_17;
      if (v5 >= 12)
        v5 = 11;
      if ((unint64_t)v5 >= 0xC)
        goto LABEL_18;
      v2 = *((unsigned __int8 *)&outlined read-only object #0 of static DynamicTypeSize.allCases.getter + v5 + 32);
      if (v2 == a2)
        return result;
    }
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }
  __break(1u);
  __break(1u);
  return result;
}

uint64_t DelayAnimation.animate<A, B>(base:value:time:context:)(__n128 a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  a1.n128_f64[0] = a1.n128_f64[0] - a2;
  if (a1.n128_f64[0] <= 0.0)
    a1.n128_f64[0] = 0.0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(a9 + 16))(a4, a5, a6, a8, a7, a9, a1);
}

uint64_t DelayAnimation.shouldMerge<A, B>(base:previous:previousBase:value:time:context:)(uint64_t a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  char v27;
  uint64_t v29;

  v20 = MEMORY[0x24BDAC7A8](a1);
  v22 = (char *)&v29 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v23 == v20)
  {
    (*(void (**)(char *))(v19 + 16))(v22);
    v25 = Animation.init<A>(_:)((uint64_t)v22, a9, a11, v24);
    v26.n128_f64[0] = a3 - a4;
    if (a3 - a4 <= 0.0)
      v26.n128_f64[0] = 0.0;
    v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(a11 + 32))(v25, a6, a7, a8, a10, a9, a11, v26);
    swift_release();
  }
  else
  {
    v27 = 0;
  }
  return v27 & 1;
}

uint64_t protocol witness for CustomAnimationModifier.animate<A, B>(base:value:time:context:) in conformance DelayAnimation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __n128 a8)
{
  double *v8;

  return DelayAnimation.animate<A, B>(base:value:time:context:)(a8, *v8, a1, a2, a3, a4, a5, a6, a7);
}

uint64_t protocol witness for CustomAnimationModifier.shouldMerge<A, B>(base:previous:previousBase:value:time:context:) in conformance DelayAnimation(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10)
{
  double *v10;

  return DelayAnimation.shouldMerge<A, B>(base:previous:previousBase:value:time:context:)(a1, *a2, a9, *v10, a3, a4, a5, a6, a7, a8, a10);
}

uint64_t protocol witness for CustomAnimationModifier.function(base:) in conformance DelayAnimation@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  v4 = *v2;
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_BYTE *)(a1 + 40);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v4;
  *(_QWORD *)(v11 + 24) = v5;
  *(_QWORD *)(v11 + 32) = v6;
  *(_QWORD *)(v11 + 40) = v7;
  *(_QWORD *)(v11 + 48) = v8;
  *(_QWORD *)(v11 + 56) = v9;
  *(_BYTE *)(v11 + 64) = v10;
  *(_QWORD *)a2 = v11;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_BYTE *)(a2 + 40) = 7;
  return outlined copy of Animation.Function(v5, v6, v7, v8, v9, v10);
}

uint64_t Animation.delay(_:)(uint64_t a1, double a2)
{
  uint64_t (*v2)(double *, ValueMetadata *, unint64_t);
  unint64_t v3;
  double v5;

  v5 = a2;
  v2 = *(uint64_t (**)(double *, ValueMetadata *, unint64_t))(*(_QWORD *)a1 + 144);
  v3 = lazy protocol witness table accessor for type DelayAnimation and conformance DelayAnimation();
  return v2(&v5, &type metadata for DelayAnimation, v3);
}

unint64_t lazy protocol witness table accessor for type DelayAnimation and conformance DelayAnimation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DelayAnimation and conformance DelayAnimation;
  if (!lazy protocol witness table cache variable for type DelayAnimation and conformance DelayAnimation)
  {
    result = MEMORY[0x23B7C9C04]("}M;\x1B\\B\n", &type metadata for DelayAnimation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DelayAnimation and conformance DelayAnimation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DelayAnimation and conformance DelayAnimation;
  if (!lazy protocol witness table cache variable for type DelayAnimation and conformance DelayAnimation)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DelayAnimation, &type metadata for DelayAnimation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DelayAnimation and conformance DelayAnimation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DelayAnimation and conformance DelayAnimation;
  if (!lazy protocol witness table cache variable for type DelayAnimation and conformance DelayAnimation)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for DelayAnimation, &type metadata for DelayAnimation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DelayAnimation and conformance DelayAnimation);
  }
  return result;
}

ValueMetadata *type metadata accessor for DelayAnimation()
{
  return &type metadata for DelayAnimation;
}

_QWORD *protocol witness for ProtobufEncodableMessage.encode(to:) in conformance DelayAnimation(_QWORD *result)
{
  double *v1;
  double v2;
  _QWORD *v3;
  uint64_t v4;
  int64_t v5;

  v2 = *v1;
  if (*v1 != 0.0)
  {
    v3 = result;
    ProtobufEncoder.encodeVarint(_:)(0x21uLL);
    v4 = v3[1];
    v5 = v4 + 8;
    if (__OFADD__(v4, 8))
    {
      __break(1u);
    }
    else if (v3[2] >= v5)
    {
      v3[1] = v5;
      result = (_QWORD *)(*v3 + v4);
LABEL_5:
      *(double *)result = v2;
      return result;
    }
    result = (_QWORD *)ProtobufEncoder.growBufferSlow(to:)(v5);
    goto LABEL_5;
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for DelayAnimation(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type DelayAnimation and conformance DelayAnimation();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_234F7B6E4()
{
  uint64_t v0;

  outlined consume of Animation.Function(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 64));
  return swift_deallocObject();
}

uint64_t _ScrollClipEffect.shape.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _ScrollClipEffect.shape.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_ScrollClipEffect.shape.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ScrollClipEffect.init(shape:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t (*_ScrollClipEffect.animatableData.modify(_QWORD *a1, uint64_t a2))()
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  size_t v11;

  v5 = malloc(0x30uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v7 = a2 + 16;
  v6 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[2] = AssociatedTypeWitness;
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[3] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v5[4] = malloc(v11);
  v5[5] = malloc(v11);
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v6, v8);
  return _ScrollClipEffect.animatableData.modify;
}

uint64_t static _ScrollClipEffect._makeView(modifier:inputs:body:)(uint64_t a1, int32x2_t *a2, void (*a3)(uint64_t, int32x2_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  int32x2_t v9;
  int32x2_t v10;
  int32x2_t v11;
  int32x2_t v12;
  __int32 v13;
  uint64_t v14;
  int32x2_t v15;
  int32x2_t v16;
  int32x2_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int32 v22;
  __int32 v23;
  __int32 v24;
  __int32 v25;
  __int32 v26;
  int OffsetAttribute2;
  int32x2_t v29;
  __int32 v30;
  char v31[16];
  uint64_t v32;
  uint64_t v33;
  int32x2_t v34;
  __int32 v35;
  int32x2_t v36;
  int32x2_t v37;
  int v38;
  __int32 v39;
  int32x2_t v40;
  int32x2_t v41;
  __int32 v42;
  int32x2_t v43;
  int32x2_t v44;
  __int32 v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v9 = *a2;
  v10 = a2[2];
  v22 = a2[4].i32[0];
  v23 = a2[1].i32[0];
  v11 = a2[5];
  v12 = a2[6];
  v13 = a2[7].i32[1];
  v24 = a2[7].i32[0];
  v25 = a2[4].i32[1];
  v26 = a2[10].i32[0];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v30 = v13;
  v32 = type metadata accessor for _ScrollClipEffect.ChildTransform(0, a5, a6, v14);
  v33 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _ScrollClipEffect<A>.ChildTransform, v32);
  type metadata accessor for Attribute<ViewTransform>();
  v15 = a2[3];
  v16 = a2[8];
  v17 = a2[9];
  v29 = vzip1_s32(v16, v17);
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&OffsetAttribute2, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_3, (uint64_t)v31, v32, MEMORY[0x24BEE4078], v18, MEMORY[0x24BEE40A8], v19);
  v34 = v9;
  v35 = v23;
  v36 = v10;
  v37 = v15;
  v38 = v22 | 4;
  v39 = v25;
  v40 = v11;
  v41 = v12;
  v42 = v24;
  v43 = v16;
  v44 = v17;
  v45 = v26;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v20 = swift_bridgeObjectRetain();
  a3(v20, &v34);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t _ScrollClipEffect.ChildTransform.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t Value;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  _BYTE v36[40];

  v7 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  Value = AGGraphGetValue();
  v11 = *(_QWORD *)Value;
  v12 = *(double *)(Value + 8);
  v13 = *(double *)(Value + 16);
  v14 = *(double *)(Value + 24);
  v15 = *(double *)(Value + 32);
  swift_retain();
  v16 = AGGraphGetValue();
  v17 = *(double *)v16;
  v18 = *(double *)(v16 + 8);
  v19 = v14 - (*(double *)v16 - v12);
  *(double *)(a4 + 24) = v19;
  *(_QWORD *)a4 = v11;
  v20 = v15 - (v18 - v13);
  *(double *)(a4 + 32) = v20;
  *(double *)(a4 + 8) = v17;
  *(double *)(a4 + 16) = v18;
  v21 = AGGraphGetValue();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v9, v21, a2);
  v22 = (unint64_t *)AGGraphGetValue();
  Shape.effectivePath(in:)(a2, a3, (uint64_t)v36, *v22);
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, a2);
  Path.boundingRect.getter();
  v24 = v23;
  v26 = v25;
  v28 = v27;
  v30 = v29;
  outlined release of Path((uint64_t)v36);
  type metadata accessor for Element<ViewTransform.ScrollGeometryItem>(0);
  result = swift_allocObject();
  *(double *)(result + 32) = v19;
  *(double *)(result + 40) = v20;
  *(_QWORD *)(result + 48) = v24;
  *(_QWORD *)(result + 56) = v26;
  *(int64x2_t *)(result + 64) = vdupq_n_s64(0x7FF0000000000000uLL);
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_QWORD *)(result + 112) = v28;
  *(_QWORD *)(result + 120) = v30;
  *(_QWORD *)(result + 128) = v24;
  *(_QWORD *)(result + 136) = v26;
  *(_QWORD *)(result + 144) = v28;
  *(_QWORD *)(result + 152) = v30;
  v32 = 1;
  *(_BYTE *)(result + 160) = 1;
  *(_QWORD *)(result + 16) = v11;
  if (v11 && (v33 = *(_QWORD *)(v11 + 24), v34 = __OFADD__(v33, 1), v32 = v33 + 1, v34))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(result + 24) = v32;
    *(_QWORD *)a4 = result;
    *(_QWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 32) = 0;
  }
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance _ScrollClipEffect<A>.ChildTransform@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return _ScrollClipEffect.ChildTransform.value.getter(*v2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ScrollClipEffect<A>(uint64_t a1, int32x2_t *a2, void (*a3)(uint64_t, int32x2_t *), uint64_t a4, uint64_t a5)
{
  return static _ScrollClipEffect._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24));
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance _ScrollClipEffect<A>(_QWORD *a1, uint64_t a2))()
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  size_t v8;

  v5 = malloc(0x30uLL);
  *a1 = v5;
  *v5 = v2;
  v5[1] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[2] = AssociatedTypeWitness;
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[4] = malloc(v8);
  v5[5] = malloc(v8);
  _ScrollClipEffect.animatableData.getter(a2);
  return protocol witness for Animatable.animatableData.modify in conformance GeometryVisualEffect<A>;
}

uint64_t (*_EnabledScrollClipEffect.shape.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _EnabledScrollClipEffect.isEnabled.getter(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 36));
}

uint64_t _EnabledScrollClipEffect.isEnabled.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + *(int *)(a2 + 36)) = result;
  return result;
}

uint64_t (*_EnabledScrollClipEffect.isEnabled.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_EnabledScrollClipEffect.animatableData.modify(_QWORD *a1, uint64_t a2))()
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  size_t v11;

  v5 = malloc(0x30uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v7 = a2 + 16;
  v6 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[2] = AssociatedTypeWitness;
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[3] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v5[4] = malloc(v11);
  v5[5] = malloc(v11);
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v6, v8);
  return _ScrollClipEffect.animatableData.modify;
}

void _ScrollClipEffect.animatableData.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, uint64_t);

  v2 = *a1;
  v3 = (void *)(*a1)[4];
  v4 = (void *)(*a1)[5];
  v5 = (*a1)[2];
  v6 = (*a1)[3];
  v7 = **a1;
  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[4], v4, v5);
    specialized RendererVisualEffect.animatableData.setter((uint64_t)v3, v7);
    v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
  }
  else
  {
    specialized RendererVisualEffect.animatableData.setter((*a1)[5], v7);
    v8 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v8(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t static _EnabledScrollClipEffect._makeView(modifier:inputs:body:)@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t, unint64_t *)@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int32x2_t v15;
  int32x2_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int OffsetAttribute2;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  __int32 v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, unint64_t *);
  int v37;
  unint64_t v38;
  int32x2_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  int32x2_t v48;
  int32x2_t v49;
  int v50;
  uint64_t v51;

  v35 = a3;
  v36 = a2;
  v34 = a6;
  v51 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)a1;
  v33 = *(_DWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_DWORD *)(a1 + 32);
  v32 = *(_DWORD *)(a1 + 36);
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_DWORD *)(a1 + 60);
  v31 = *(_DWORD *)(a1 + 56);
  v15 = *(int32x2_t *)(a1 + 64);
  v16 = *(int32x2_t *)(a1 + 72);
  v30 = *(_DWORD *)(a1 + 80);
  v17 = *(_QWORD *)(*(_QWORD *)(a4 - 8) + 64);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v17)
    closure #1 in static _EnabledScrollClipEffect._makeView(modifier:inputs:body:)(1, a4, a5, v18);
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  closure #2 in static _EnabledScrollClipEffect._makeView(modifier:inputs:body:)(1, a4, a5, v20);
  v21 = AGGraphCreateOffsetAttribute2();
  v38 = __PAIR64__(v21, OffsetAttribute2);
  v39 = vzip1_s32(v15, v16);
  LODWORD(v40) = v14;
  MEMORY[0x24BDAC7A8](v21);
  v28 = type metadata accessor for _EnabledScrollClipEffect.ChildTransform(0, a4, a5, v22);
  v29 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for _EnabledScrollClipEffect<A>.ChildTransform, v28);
  type metadata accessor for Attribute<ViewTransform>();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v38, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v27, v28, MEMORY[0x24BEE4078], v23, MEMORY[0x24BEE40A8], v24);
  v38 = v8;
  v39.i32[0] = v33;
  v40 = v9;
  v41 = v10;
  v42 = v11 | 4;
  v43 = v32;
  v44 = v12;
  v45 = v13;
  v46 = v31;
  v47 = v37;
  v48 = v15;
  v49 = v16;
  v50 = v30;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v25 = swift_bridgeObjectRetain();
  v36(v25, &v38);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t closure #1 in static _EnabledScrollClipEffect._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = type metadata accessor for _EnabledScrollClipEffect(0, a2, a3, a4);
  v9[3] = a2;
  v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v9, a2, MEMORY[0x24BEE4078], v6, MEMORY[0x24BEE40A8], v7);
  return v9[5];
}

uint64_t closure #2 in static _EnabledScrollClipEffect._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[6];

  v5 = type metadata accessor for _EnabledScrollClipEffect(0, a2, a3, a4);
  v6 = a1 + *(int *)(v5 + 36);
  v11[2] = v5;
  v7 = MEMORY[0x24BEE1328];
  v8 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v6, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_3, (uint64_t)v11, v7, MEMORY[0x24BEE4078], v8, MEMORY[0x24BEE40A8], v9);
  return v11[5];
}

uint64_t _EnabledScrollClipEffect.ChildTransform.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t Value;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t result;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  double v35;
  _BYTE v36[40];

  v7 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  Value = AGGraphGetValue();
  v11 = *(_QWORD *)Value;
  v12 = *(double *)(Value + 8);
  v13 = *(double *)(Value + 16);
  v14 = *(double *)(Value + 24);
  v15 = *(double *)(Value + 32);
  swift_retain();
  v16 = AGGraphGetValue();
  v17 = *(double *)v16;
  v18 = *(double *)(v16 + 8);
  v19 = v14 - (*(double *)v16 - v12);
  v20 = v15 - (v18 - v13);
  result = AGGraphGetValue();
  if (*(_BYTE *)result != 1)
    goto LABEL_5;
  v22 = AGGraphGetValue();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v9, v22, a2);
  v23 = *(_QWORD *)AGGraphGetValue();
  v35 = v19;
  v19 = 0.0;
  Shape.effectivePath(in:)(a2, a3, (uint64_t)v36, v23);
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, a2);
  Path.boundingRect.getter();
  v25 = v24;
  v27 = v26;
  v29 = v28;
  v31 = v30;
  outlined release of Path((uint64_t)v36);
  type metadata accessor for Element<ViewTransform.ScrollGeometryItem>(0);
  result = swift_allocObject();
  *(double *)(result + 32) = v35;
  *(double *)(result + 40) = v20;
  *(_QWORD *)(result + 48) = v25;
  *(_QWORD *)(result + 56) = v27;
  *(int64x2_t *)(result + 64) = vdupq_n_s64(0x7FF0000000000000uLL);
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_QWORD *)(result + 112) = v29;
  *(_QWORD *)(result + 120) = v31;
  *(_QWORD *)(result + 128) = v25;
  *(_QWORD *)(result + 136) = v27;
  *(_QWORD *)(result + 144) = v29;
  *(_QWORD *)(result + 152) = v31;
  v32 = 1;
  *(_BYTE *)(result + 160) = 1;
  *(_QWORD *)(result + 16) = v11;
  if (!v11 || (v33 = *(_QWORD *)(v11 + 24), v34 = __OFADD__(v33, 1), v32 = v33 + 1, !v34))
  {
    *(_QWORD *)(result + 24) = v32;
    v11 = result;
    v20 = 0.0;
LABEL_5:
    *(_QWORD *)a4 = v11;
    *(double *)(a4 + 8) = v17;
    *(double *)(a4 + 16) = v18;
    *(double *)(a4 + 24) = v19;
    *(double *)(a4 + 32) = v20;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance _EnabledScrollClipEffect<A>.ChildTransform@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return _EnabledScrollClipEffect.ChildTransform.value.getter(*v2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _EnabledScrollClipEffect<A>@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t, unint64_t *)@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return static _EnabledScrollClipEffect._makeView(modifier:inputs:body:)(a1, a2, a3, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a5);
}

uint64_t View.scrollClipShape<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for _ScrollClipEffect(0, v11, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v20 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v16);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v18, v10, a3);
  View.modifier<A>(_:)(v18, a2, v14, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
}

uint64_t type metadata accessor for _ScrollClipEffect.ChildTransform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ScrollClipEffect.ChildTransform);
}

void type metadata accessor for Attribute<ViewTransform>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Attribute<ViewTransform>)
  {
    v0 = type metadata accessor for Attribute();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<ViewTransform>);
  }
}

uint64_t type metadata accessor for _EnabledScrollClipEffect.ChildTransform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _EnabledScrollClipEffect.ChildTransform);
}

uint64_t type metadata accessor for _ScrollClipEffect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ScrollClipEffect);
}

uint64_t sub_234F7C608(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_getTm_0(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for _ScrollClipEffect, _ScrollClipEffect.animatableData.getter);
}

uint64_t sub_234F7C61C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm_0(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for _ScrollClipEffect);
}

uint64_t sub_234F7C628()
{
  return 16;
}

__n128 sub_234F7C634(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_234F7C640(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_getTm_0(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for _EnabledScrollClipEffect, (uint64_t (*)(uint64_t))_EnabledScrollClipEffect.animatableData.getter);
}

uint64_t keypath_getTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, _QWORD, _QWORD), uint64_t (*a5)(uint64_t))
{
  uint64_t v6;

  v6 = a4(0, *(_QWORD *)(a3 + a2 - 16), *(_QWORD *)(a3 + a2 - 8));
  return a5(v6);
}

uint64_t sub_234F7C698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm_0(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for _EnabledScrollClipEffect);
}

uint64_t keypath_setTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v6;

  v6 = a5(0, *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8));
  return specialized RendererVisualEffect.animatableData.setter(a1, v6);
}

uint64_t sub_234F7C6E0()
{
  return 16;
}

__n128 sub_234F7C6EC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t getEnumTagSinglePayload for _ScrollClipEffect(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234F7C7A8 + 4 * byte_2352B6D50[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for _ScrollClipEffect(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata completion function for _EnabledScrollClipEffect()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for _EnabledScrollClipEffect(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_21;
  v9 = v7 + 1;
  v10 = 8 * (v7 + 1);
  if ((v7 + 1) > 3)
    goto LABEL_7;
  v12 = ((v8 + ~(-1 << v10)) >> v10) + 1;
  if (HIWORD(v12))
  {
    v11 = *(_DWORD *)(a1 + v9);
    if (v11)
      goto LABEL_14;
  }
  else
  {
    if (v12 <= 0xFF)
    {
      if (v12 < 2)
        goto LABEL_21;
LABEL_7:
      v11 = *(unsigned __int8 *)(a1 + v9);
      if (!*(_BYTE *)(a1 + v9))
        goto LABEL_21;
LABEL_14:
      v13 = (v11 - 1) << v10;
      if (v9 > 3)
        v13 = 0;
      if ((_DWORD)v7 == -1)
        return v6 + v13 + 1;
      if (v9 > 3)
        LODWORD(v9) = 4;
      return ((uint64_t (*)(void))((char *)&loc_234F7CADC + 4 * byte_2352B6D5E[(v9 - 1)]))();
    }
    v11 = *(unsigned __int16 *)(a1 + v9);
    if (*(_WORD *)(a1 + v9))
      goto LABEL_14;
  }
LABEL_21:
  if (v5 >= 0xFE)
    return (*(uint64_t (**)(void))(v4 + 48))();
  v15 = *(unsigned __int8 *)(v7 + a1);
  if (v15 < 2)
    return 0;
  return ((v15 + 2147483646) & 0x7FFFFFFF) + 1;
}

void storeEnumTagSinglePayload for _EnabledScrollClipEffect(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  size_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = v7 + 1;
  if (a3 > v6)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v6 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v6 < a2)
  {
    v10 = ~v6 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v7 != -1)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v7 + 1);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

uint64_t type metadata accessor for _EnabledScrollClipEffect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _EnabledScrollClipEffect);
}

uint64_t sub_234F7CD34(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v4 = *a1;
  v5 = a1[2];
  v6 = type metadata accessor for _ScrollClipEffect(255, a1[1], a1[3], a4);
  v8 = type metadata accessor for ModifiedContent(255, v4, v6, v7);
  v10[0] = v5;
  v10[1] = &protocol witness table for _ScrollClipEffect<A>;
  return MEMORY[0x23B7C9C04]("I{:\x1B̧\t", v8, v10);
}

void base witness table accessor for _AttributeBody in _EnabledScrollClipEffect<A>.ChildTransform()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for _AttributeBody in _ScrollClipEffect<A>.ChildTransform()
{
  JUMPOUT(0x23B7C9C04);
}

void type metadata accessor for Element<ViewTransform.ScrollGeometryItem>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for Element<ViewTransform.ScrollGeometryItem>)
  {
    v2 = lazy protocol witness table accessor for type ViewTransform.ScrollGeometryItem and conformance ViewTransform.ScrollGeometryItem();
    v4 = type metadata accessor for Element(a1, (uint64_t)&type metadata for ViewTransform.ScrollGeometryItem, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for Element<ViewTransform.ScrollGeometryItem>);
  }
}

unint64_t lazy protocol witness table accessor for type ViewTransform.ScrollGeometryItem and conformance ViewTransform.ScrollGeometryItem()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ViewTransform.ScrollGeometryItem and conformance ViewTransform.ScrollGeometryItem;
  if (!lazy protocol witness table cache variable for type ViewTransform.ScrollGeometryItem and conformance ViewTransform.ScrollGeometryItem)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewTransform.ScrollGeometryItem, &type metadata for ViewTransform.ScrollGeometryItem);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewTransform.ScrollGeometryItem and conformance ViewTransform.ScrollGeometryItem);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ViewTransform.ScrollGeometryItem and conformance ViewTransform.ScrollGeometryItem;
  if (!lazy protocol witness table cache variable for type ViewTransform.ScrollGeometryItem and conformance ViewTransform.ScrollGeometryItem)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewTransform.ScrollGeometryItem, &type metadata for ViewTransform.ScrollGeometryItem);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewTransform.ScrollGeometryItem and conformance ViewTransform.ScrollGeometryItem);
  }
  return result;
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_3@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t WatchColorGradientProvider.color.getter()
{
  return swift_retain();
}

uint64_t WatchColorGradientProvider.color.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*WatchColorGradientProvider.color.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t WatchColorGradientProvider.fallback.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 36));
}

uint64_t WatchColorGradientProvider.fallback.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 36), a1);
}

uint64_t (*WatchColorGradientProvider.fallback.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t WatchColorGradientProvider.init(color:fallback:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  char *v7;

  *a5 = a1;
  v7 = (char *)a5 + *(int *)(type metadata accessor for WatchColorGradientProvider(0, a3, a4, a4) + 36);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(v7, a2, a3);
}

uint64_t type metadata accessor for WatchColorGradientProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WatchColorGradientProvider);
}

uint64_t WatchColorGradientProvider.resolve(in:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t result;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  int v21;
  int v22;
  double v23;
  double v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  Swift::Int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  float v36;
  double v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  int v75;
  float v76;
  int v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  float v124;
  float v125;
  int v126;
  int v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  char v134;
  uint64_t v135;
  uint64_t v136;

  v4 = v3;
  v7 = *a1;
  v8 = a1[1];
  if (one-time initialization token for v5 != -1)
    swift_once();
  v9 = static Semantics.v5;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25426FAB4 == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0)
      goto LABEL_11;
  }
  else if (static Semantics.forced < v9)
  {
LABEL_11:
    v135 = v7;
    v136 = v8;
    return (*(uint64_t (**)(uint64_t *, _QWORD))(*(_QWORD *)(a2 + 24) + 16))(&v135, *(_QWORD *)(a2 + 16));
  }
  if (v8)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v7, (char *)&v135);
    swift_release_n();
    swift_release_n();
    if (v135 == 6)
      goto LABEL_11;
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKind.Key>, (uint64_t)&type metadata for ContainerBackgroundKind.Key, (uint64_t)&protocol witness table for ContainerBackgroundKind.Key);
    BloomFilter.init(hashValue:)(v11);
    v12 = swift_retain_n();
    v13 = specialized find1<A>(_:key:filter:)(v12, v135);
    if (v13)
      v14 = *(unsigned __int8 *)(v13 + 72);
    else
      v14 = 6;
    swift_release_n();
    if (v14 == 6)
      goto LABEL_11;
  }
  v15 = *v4;
  v135 = v7;
  v136 = v8;
  v16 = (*(float (**)(uint64_t *))(*(_QWORD *)v15 + 104))(&v135);
  v18 = v17;
  v20 = v19;
  v22 = v21;
  if (!v8)
  {
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeKey>, (uint64_t)&type metadata for ColorSchemeKey, (uint64_t)&protocol witness table for ColorSchemeKey);
    BloomFilter.init(hashValue:)(v31);
    v32 = v135;
    v33 = swift_retain_n();
    v34 = specialized find1<A>(_:key:filter:)(v33, v32);
    if (v34)
      v35 = *(unsigned __int8 *)(v34 + 72);
    else
      v35 = 0;
    v134 = v35;
    swift_release_n();
    if (!v35)
      goto LABEL_18;
LABEL_120:
    if (v20 <= 0.0)
      v78 = -v20;
    else
      v78 = v20;
    if (v78 > 0.0031308)
    {
      LODWORD(v23) = 1.0;
      if (v78 != 1.0)
        *(float *)&v23 = (float)(powf(v78, 0.41667) * 1.055) + -0.055;
    }
    else
    {
      *(float *)&v23 = v78 * 12.92;
    }
    if (v20 <= 0.0)
      *(float *)&v23 = -*(float *)&v23;
    v79 = *(float *)&v23 * 0.5;
    v80 = -(float)(*(float *)&v23 * 0.5);
    if (v79 <= 0.0)
      v81 = v80;
    else
      v81 = v79;
    if (v81 <= 0.04045)
    {
      *(float *)&v23 = v81 * 0.077399;
    }
    else
    {
      LODWORD(v23) = 1.0;
      if (v81 != 1.0)
        *(float *)&v23 = powf((float)(v81 * 0.94787) + 0.052133, 2.4);
    }
    if (v79 <= 0.0)
      v82 = -*(float *)&v23;
    else
      v82 = *(float *)&v23;
    if (v16 <= 0.0)
      v83 = -v16;
    else
      v83 = v16;
    if (v83 > 0.0031308)
    {
      LODWORD(v23) = 1.0;
      if (v83 != 1.0)
        *(float *)&v23 = (float)(powf(v83, 0.41667) * 1.055) + -0.055;
    }
    else
    {
      *(float *)&v23 = v83 * 12.92;
    }
    if (v16 <= 0.0)
      *(float *)&v23 = -*(float *)&v23;
    v84 = *(float *)&v23 * 0.5;
    v85 = -(float)(*(float *)&v23 * 0.5);
    if (v84 <= 0.0)
      v86 = v85;
    else
      v86 = v84;
    v125 = v82;
    if (v86 <= 0.04045)
    {
      *(float *)&v23 = v86 * 0.077399;
    }
    else
    {
      LODWORD(v23) = 1.0;
      if (v86 != 1.0)
        *(float *)&v23 = powf((float)(v86 * 0.94787) + 0.052133, 2.4);
    }
    if (v84 <= 0.0)
      *(float *)&v23 = -*(float *)&v23;
    v127 = LODWORD(v23);
    if (v18 <= 0.0)
      v87 = -v18;
    else
      v87 = v18;
    if (v87 > 0.0031308)
    {
      LODWORD(v23) = 1.0;
      if (v87 != 1.0)
        *(float *)&v23 = (float)(powf(v87, 0.41667) * 1.055) + -0.055;
    }
    else
    {
      *(float *)&v23 = v87 * 12.92;
    }
    if (v18 <= 0.0)
      *(float *)&v23 = -*(float *)&v23;
    v88 = *(float *)&v23 * 0.5;
    v89 = -(float)(*(float *)&v23 * 0.5);
    if (v88 <= 0.0)
      v90 = v89;
    else
      v90 = v88;
    if (v90 <= 0.04045)
    {
      *(float *)&v23 = v90 * 0.077399;
    }
    else
    {
      LODWORD(v23) = 1.0;
      if (v90 != 1.0)
        *(float *)&v23 = powf((float)(v90 * 0.94787) + 0.052133, 2.4);
    }
    if (v88 <= 0.0)
      *(float *)&v23 = -*(float *)&v23;
    v133 = *(float *)&v23;
    if (v78 > 0.0031308)
    {
      LODWORD(v23) = 1.0;
      if (v78 != 1.0)
        *(float *)&v23 = (float)(powf(v78, 0.41667) * 1.055) + -0.055;
    }
    else
    {
      *(float *)&v23 = v78 * 12.92;
    }
    if (v20 <= 0.0)
      *(float *)&v23 = -*(float *)&v23;
    v91 = *(float *)&v23 * 0.177;
    v92 = -(float)(*(float *)&v23 * 0.177);
    if (v91 <= 0.0)
      v93 = v92;
    else
      v93 = v91;
    if (v93 <= 0.04045)
    {
      *(float *)&v23 = v93 * 0.077399;
    }
    else
    {
      LODWORD(v23) = 1.0;
      if (v93 != 1.0)
        *(float *)&v23 = powf((float)(v93 * 0.94787) + 0.052133, 2.4);
    }
    if (v91 <= 0.0)
      *(float *)&v23 = -*(float *)&v23;
    v132 = *(float *)&v23;
    if (v83 > 0.0031308)
    {
      LODWORD(v23) = 1.0;
      if (v83 != 1.0)
        *(float *)&v23 = (float)(powf(v83, 0.41667) * 1.055) + -0.055;
    }
    else
    {
      *(float *)&v23 = v83 * 12.92;
    }
    if (v16 <= 0.0)
      *(float *)&v23 = -*(float *)&v23;
    v94 = *(float *)&v23 * 0.177;
    v95 = -(float)(*(float *)&v23 * 0.177);
    if (v94 <= 0.0)
      v96 = v95;
    else
      v96 = v94;
    if (v96 <= 0.04045)
    {
      *(float *)&v23 = v96 * 0.077399;
    }
    else
    {
      LODWORD(v23) = 1.0;
      if (v96 != 1.0)
        *(float *)&v23 = powf((float)(v96 * 0.94787) + 0.052133, 2.4);
    }
    if (v94 <= 0.0)
      *(float *)&v23 = -*(float *)&v23;
    v131 = *(float *)&v23;
    if (v87 > 0.0031308)
    {
      LODWORD(v23) = 1.0;
      if (v87 != 1.0)
        *(float *)&v23 = (float)(powf(v87, 0.41667) * 1.055) + -0.055;
    }
    else
    {
      *(float *)&v23 = v87 * 12.92;
    }
    if (v18 <= 0.0)
      *(float *)&v23 = -*(float *)&v23;
    v97 = *(float *)&v23 * 0.177;
    v98 = -(float)(*(float *)&v23 * 0.177);
    if (v97 <= 0.0)
      v99 = v98;
    else
      v99 = v97;
    if (v99 <= 0.04045)
    {
      *(float *)&v23 = v99 * 0.077399;
    }
    else
    {
      LODWORD(v23) = 1.0;
      if (v99 != 1.0)
        *(float *)&v23 = powf((float)(v99 * 0.94787) + 0.052133, 2.4);
    }
    if (v97 <= 0.0)
      *(float *)&v23 = -*(float *)&v23;
    v130 = *(float *)&v23;
    if (v78 > 0.0031308)
    {
      LODWORD(v23) = 1.0;
      if (v78 != 1.0)
        *(float *)&v23 = (float)(powf(v78, 0.41667) * 1.055) + -0.055;
    }
    else
    {
      *(float *)&v23 = v78 * 12.92;
    }
    if (v20 <= 0.0)
      *(float *)&v23 = -*(float *)&v23;
    v100 = *(float *)&v23 * 0.15;
    v101 = -(float)(*(float *)&v23 * 0.15);
    if (v100 <= 0.0)
      v102 = v101;
    else
      v102 = v100;
    if (v102 <= 0.04045)
    {
      *(float *)&v23 = v102 * 0.077399;
    }
    else
    {
      LODWORD(v23) = 1.0;
      if (v102 != 1.0)
        *(float *)&v23 = powf((float)(v102 * 0.94787) + 0.052133, 2.4);
    }
    if (v100 <= 0.0)
      *(float *)&v23 = -*(float *)&v23;
    v129 = *(float *)&v23;
    if (v83 > 0.0031308)
    {
      LODWORD(v23) = 1.0;
      if (v83 != 1.0)
        *(float *)&v23 = (float)(powf(v83, 0.41667) * 1.055) + -0.055;
    }
    else
    {
      *(float *)&v23 = v83 * 12.92;
    }
    if (v16 <= 0.0)
      *(float *)&v23 = -*(float *)&v23;
    v103 = *(float *)&v23 * 0.15;
    v104 = -(float)(*(float *)&v23 * 0.15);
    if (v103 <= 0.0)
      v105 = v104;
    else
      v105 = v103;
    if (v105 <= 0.04045)
    {
      *(float *)&v23 = v105 * 0.077399;
    }
    else
    {
      LODWORD(v23) = 1.0;
      if (v105 != 1.0)
        *(float *)&v23 = powf((float)(v105 * 0.94787) + 0.052133, 2.4);
    }
    if (v103 <= 0.0)
      *(float *)&v23 = -*(float *)&v23;
    v128 = *(float *)&v23;
    if (v87 > 0.0031308)
    {
      LODWORD(v23) = 1.0;
      if (v87 != 1.0)
        *(float *)&v23 = (float)(powf(v87, 0.41667) * 1.055) + -0.055;
    }
    else
    {
      *(float *)&v23 = v87 * 12.92;
    }
    if (v18 <= 0.0)
      *(float *)&v23 = -*(float *)&v23;
    v106 = *(float *)&v23 * 0.15;
    v107 = -(float)(*(float *)&v23 * 0.15);
    if (v106 <= 0.0)
      v108 = v107;
    else
      v108 = v106;
    if (v108 <= 0.04045)
    {
      *(float *)&v23 = v108 * 0.077399;
      v69 = v125;
    }
    else
    {
      LODWORD(v23) = 1.0;
      v69 = v125;
      if (v108 != 1.0)
        *(float *)&v23 = powf((float)(v108 * 0.94787) + 0.052133, 2.4);
    }
    if (v106 <= 0.0)
      v65 = -*(float *)&v23;
    else
      v65 = *(float *)&v23;
    if (v78 > 0.0031308)
    {
      LODWORD(v23) = 1.0;
      if (v78 != 1.0)
        *(float *)&v23 = (float)(powf(v78, 0.41667) * 1.055) + -0.055;
    }
    else
    {
      *(float *)&v23 = v78 * 12.92;
    }
    if (v20 <= 0.0)
      *(float *)&v23 = -*(float *)&v23;
    v109 = *(float *)&v23 * 0.148;
    v110 = -(float)(*(float *)&v23 * 0.148);
    if (v109 <= 0.0)
      v111 = v110;
    else
      v111 = v109;
    if (v111 <= 0.04045)
    {
      *(float *)&v23 = v111 * 0.077399;
    }
    else
    {
      LODWORD(v23) = 1.0;
      if (v111 != 1.0)
        *(float *)&v23 = powf((float)(v111 * 0.94787) + 0.052133, 2.4);
    }
    if (v109 <= 0.0)
      v76 = -*(float *)&v23;
    else
      v76 = *(float *)&v23;
    if (v83 > 0.0031308)
    {
      LODWORD(v23) = 1.0;
      if (v83 != 1.0)
        *(float *)&v23 = (float)(powf(v83, 0.41667) * 1.055) + -0.055;
    }
    else
    {
      *(float *)&v23 = v83 * 12.92;
    }
    if (v16 <= 0.0)
      *(float *)&v23 = -*(float *)&v23;
    v112 = *(float *)&v23 * 0.148;
    v113 = -(float)(*(float *)&v23 * 0.148);
    if (v112 <= 0.0)
      v114 = v113;
    else
      v114 = v112;
    if (v114 <= 0.04045)
    {
      *(float *)&v23 = v114 * 0.077399;
    }
    else
    {
      LODWORD(v23) = 1.0;
      if (v114 != 1.0)
        *(float *)&v23 = powf((float)(v114 * 0.94787) + 0.052133, 2.4);
    }
    if (v112 <= 0.0)
      v74 = -*(float *)&v23;
    else
      v74 = *(float *)&v23;
    *(float *)&v23 = v16;
    Color.Resolved.green.getter(v23, v18);
    v116 = v115 * 0.148;
    v117 = -(float)(v115 * 0.148);
    if (v116 <= 0.0)
      v118 = v117;
    else
      v118 = v116;
    if (v118 <= 0.04045)
    {
      v119 = v118 * 0.077399;
      v77 = v127;
    }
    else
    {
      v119 = 1.0;
      v77 = v127;
      if (v118 != 1.0)
        v119 = powf((float)(v118 * 0.94787) + 0.052133, 2.4);
    }
    if (v116 <= 0.0)
      v73 = -v119;
    else
      v73 = v119;
    v75 = v22;
    goto LABEL_309;
  }
  swift_retain_n();
  swift_retain_n();
  specialized PropertyList.Tracker.value<A>(_:for:)(v7, &v134);
  swift_release_n();
  swift_release_n();
  if ((v134 & 1) != 0)
    goto LABEL_120;
LABEL_18:
  *(float *)&v23 = v16;
  *(float *)&v24 = v18;
  Color.Resolved.blue.getter(v23, v24, v20);
  v26 = v25;
  v27 = 1.0;
  v28 = 1.0 - v26;
  v29 = v26 + (float)((float)(1.0 - v26) * 0.5);
  v30 = -v29;
  if (v29 > 0.0)
    v30 = v26 + (float)((float)(1.0 - v26) * 0.5);
  if (v30 <= 0.04045)
  {
    v27 = v30 * 0.077399;
  }
  else if (v30 != 1.0)
  {
    v27 = powf((float)(v30 * 0.94787) + 0.052133, 2.4);
  }
  if (v29 <= 0.0)
    v27 = -v27;
  v123 = v22;
  v124 = v27;
  Color.Resolved.red.getter(v16);
  v36 = *(float *)&v37;
  LODWORD(v37) = 1.0;
  v38 = 1.0 - v36;
  v39 = v36 + (float)((float)(1.0 - v36) * 0.5);
  v40 = -v39;
  if (v39 > 0.0)
    v40 = v36 + (float)((float)(1.0 - v36) * 0.5);
  if (v40 <= 0.04045)
  {
    *(float *)&v37 = v40 * 0.077399;
  }
  else if (v40 != 1.0)
  {
    *(float *)&v37 = powf((float)(v40 * 0.94787) + 0.052133, 2.4);
  }
  if (v39 <= 0.0)
    *(float *)&v37 = -*(float *)&v37;
  v126 = LODWORD(v37);
  *(float *)&v37 = v16;
  Color.Resolved.green.getter(v37, v18);
  v42 = v41;
  v43 = 1.0;
  v44 = 1.0 - v42;
  v45 = v42 + (float)((float)(1.0 - v42) * 0.5);
  v46 = -v45;
  if (v45 > 0.0)
    v46 = v42 + (float)((float)(1.0 - v42) * 0.5);
  if (v46 <= 0.04045)
  {
    v43 = v46 * 0.077399;
  }
  else if (v46 != 1.0)
  {
    v43 = powf((float)(v46 * 0.94787) + 0.052133, 2.4);
  }
  if (v45 <= 0.0)
    v43 = -v43;
  v133 = v43;
  v47 = v26 + (float)(v28 * 0.177);
  if (v47 <= 0.0)
    v48 = -v47;
  else
    v48 = v26 + (float)(v28 * 0.177);
  if (v48 <= 0.04045)
  {
    v49 = v48 * 0.077399;
  }
  else
  {
    v49 = 1.0;
    if (v48 != 1.0)
      v49 = powf((float)(v48 * 0.94787) + 0.052133, 2.4);
  }
  if (v47 <= 0.0)
    v49 = -v49;
  v132 = v49;
  v50 = v36 + (float)(v38 * 0.177);
  if (v50 <= 0.0)
    v51 = -v50;
  else
    v51 = v36 + (float)(v38 * 0.177);
  if (v51 <= 0.04045)
  {
    v52 = v51 * 0.077399;
  }
  else
  {
    v52 = 1.0;
    if (v51 != 1.0)
      v52 = powf((float)(v51 * 0.94787) + 0.052133, 2.4);
  }
  if (v50 <= 0.0)
    v52 = -v52;
  v131 = v52;
  v53 = v42 + (float)(v44 * 0.177);
  if (v53 <= 0.0)
    v54 = -v53;
  else
    v54 = v42 + (float)(v44 * 0.177);
  if (v54 <= 0.04045)
  {
    v55 = v54 * 0.077399;
  }
  else
  {
    v55 = 1.0;
    if (v54 != 1.0)
      v55 = powf((float)(v54 * 0.94787) + 0.052133, 2.4);
  }
  if (v53 <= 0.0)
    v55 = -v55;
  v130 = v55;
  v56 = v26 + (float)(v28 * 0.15);
  if (v56 <= 0.0)
    v57 = -v56;
  else
    v57 = v26 + (float)(v28 * 0.15);
  if (v57 <= 0.04045)
  {
    v58 = v57 * 0.077399;
  }
  else
  {
    v58 = 1.0;
    if (v57 != 1.0)
      v58 = powf((float)(v57 * 0.94787) + 0.052133, 2.4);
  }
  if (v56 <= 0.0)
    v58 = -v58;
  v129 = v58;
  v59 = v36 + (float)(v38 * 0.15);
  if (v59 <= 0.0)
    v60 = -v59;
  else
    v60 = v36 + (float)(v38 * 0.15);
  if (v60 <= 0.04045)
  {
    v61 = v60 * 0.077399;
  }
  else
  {
    v61 = 1.0;
    if (v60 != 1.0)
      v61 = powf((float)(v60 * 0.94787) + 0.052133, 2.4);
  }
  if (v59 <= 0.0)
    v61 = -v61;
  v128 = v61;
  v62 = v42 + (float)(v44 * 0.15);
  if (v62 <= 0.0)
    v63 = -v62;
  else
    v63 = v42 + (float)(v44 * 0.15);
  if (v63 <= 0.04045)
  {
    v64 = v63 * 0.077399;
  }
  else
  {
    v64 = 1.0;
    if (v63 != 1.0)
      v64 = powf((float)(v63 * 0.94787) + 0.052133, 2.4);
  }
  if (v62 <= 0.0)
    v65 = -v64;
  else
    v65 = v64;
  *((float *)&v135 + 1) = v18;
  HIDWORD(v136) = v123;
  v66 = v26 + (float)(v28 * 0.148);
  if (v66 <= 0.0)
    v67 = -v66;
  else
    v67 = v26 + (float)(v28 * 0.148);
  if (v67 <= 0.04045)
  {
    v68 = v67 * 0.077399;
    v69 = v124;
  }
  else
  {
    v68 = 1.0;
    v69 = v124;
    if (v67 != 1.0)
      v68 = powf((float)(v67 * 0.94787) + 0.052133, 2.4);
  }
  if (v66 <= 0.0)
    v68 = -v68;
  *(float *)&v136 = v68;
  v70 = v36 + (float)(v38 * 0.148);
  if (v70 <= 0.0)
    v71 = -v70;
  else
    v71 = v36 + (float)(v38 * 0.148);
  if (v71 <= 0.04045)
  {
    v72 = v71 * 0.077399;
    v22 = v123;
  }
  else
  {
    v72 = 1.0;
    v22 = v123;
    if (v71 != 1.0)
      v72 = powf((float)(v71 * 0.94787) + 0.052133, 2.4);
  }
  if (v70 <= 0.0)
    v72 = -v72;
  *(float *)&v135 = v72;
  Color.Resolved.green.setter(v42 + (float)(v44 * 0.148));
  v73 = *((float *)&v135 + 1);
  v74 = *(float *)&v135;
  v75 = HIDWORD(v136);
  v76 = *(float *)&v136;
  v77 = v126;
LABEL_309:
  type metadata accessor for _ContiguousArrayStorage<ResolvedGradient.Stop>();
  v120 = swift_allocObject();
  v121 = specialized static Array._adoptStorage(_:count:)(v120, 4);
  *(_DWORD *)v122 = v77;
  *(float *)(v122 + 4) = v133;
  *(float *)(v122 + 8) = v69;
  *(_DWORD *)(v122 + 12) = v22;
  *(_QWORD *)(v122 + 24) = 0;
  *(_QWORD *)(v122 + 32) = 0;
  *(_QWORD *)(v122 + 16) = 0;
  *(_BYTE *)(v122 + 40) = 1;
  *(float *)(v122 + 48) = v131;
  *(float *)(v122 + 52) = v130;
  *(float *)(v122 + 56) = v132;
  *(_DWORD *)(v122 + 60) = v22;
  *(_QWORD *)(v122 + 72) = 0;
  *(_QWORD *)(v122 + 80) = 0;
  *(_QWORD *)(v122 + 64) = 0x3FE3333333333333;
  *(_BYTE *)(v122 + 88) = 1;
  *(float *)(v122 + 96) = v128;
  *(float *)(v122 + 100) = v65;
  *(float *)(v122 + 104) = v129;
  *(_DWORD *)(v122 + 108) = v22;
  *(_QWORD *)(v122 + 120) = 0;
  *(_QWORD *)(v122 + 128) = 0;
  *(_QWORD *)(v122 + 112) = 0x3FE51EB851EB851FLL;
  *(_BYTE *)(v122 + 136) = 1;
  *(float *)(v122 + 144) = v74;
  *(float *)(v122 + 148) = v73;
  *(float *)(v122 + 152) = v76;
  *(_DWORD *)(v122 + 156) = v75;
  *(_QWORD *)(v122 + 168) = 0;
  *(_QWORD *)(v122 + 176) = 0;
  *(_QWORD *)(v122 + 160) = 0x3FE6E147AE147AE1;
  *(_BYTE *)(v122 + 184) = 1;
  result = _ViewInputs.base.modify(v121, v122);
  *(_QWORD *)a3 = result;
  *(_BYTE *)(a3 + 8) = 0;
  return result;
}

uint64_t WatchColorGradientProvider.fallbackColor(in:)(__int128 *a1, uint64_t a2)
{
  __int128 v3;

  v3 = *a1;
  return (*(uint64_t (**)(__int128 *, _QWORD))(*(_QWORD *)(a2 + 24) + 24))(&v3, *(_QWORD *)(a2 + 16));
}

uint64_t WatchColorGradientProvider.containerBackgroundMaterial(in:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t result;
  int v8;
  uint64_t v9[2];
  int v10;

  v3 = *a1;
  v4 = a1[1];
  if (one-time initialization token for thick != -1)
    swift_once();
  v5 = static Material.thick;
  v6 = dword_2561ABF88;
  v9[0] = v3;
  v9[1] = v4;
  outlined copy of Material.ID(static Material.thick);
  swift_retain();
  swift_retain();
  result = Material.ResolvedMaterial.Flags.init(environment:)(v9, &v10);
  v8 = v10 | v6;
  *(_QWORD *)a2 = v5;
  *(_DWORD *)(a2 + 8) = v8;
  return result;
}

uint64_t WatchColorGradientProvider.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(**(_QWORD **)v1 + 136);
  swift_retain();
  v3(a1);
  swift_release();
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t static WatchColorGradientProvider.== infix(_:_:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  if (*(_QWORD *)a1 != *a2 && ((*(uint64_t (**)(void))(**(_QWORD **)a1 + 88))() & 1) == 0)
    return 0;
  type metadata accessor for WatchColorGradientProvider(0, a3, a4, a4);
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

Swift::Int WatchColorGradientProvider.hashValue.getter()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  WatchColorGradientProvider.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance WatchColorGradientProvider<A>()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  WatchColorGradientProvider.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance WatchColorGradientProvider<A>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return static WatchColorGradientProvider.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t instantiation function for generic protocol witness table for WatchColorGradientProvider<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for WatchColorGradientProvider<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for Equatable in WatchColorGradientProvider<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t getEnumTagSinglePayload for WatchColorGradientProvider(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  uint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 8) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(_WORD *)((char *)a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v7 + 8) & ~v7);
      v15 = *a1;
      if (*a1 >= 0xFFFFFFFFuLL)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((_BYTE *)a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234F7E958 + 4 * byte_2352B7010[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for WatchColorGradientProvider(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t (*_ShapeIntersection.lhs.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ShapeIntersection.rhs.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ShapeIntersection.eoFill.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ShapeIntersection.path(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v6;
  char v13;
  uint64_t v14;
  uint64_t result;
  _BYTE v16[2];
  _QWORD v17[5];
  _QWORD v18[5];
  _BYTE v19[40];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(_QWORD *__return_ptr, _QWORD))(*(_QWORD *)(a1 + 32) + 24))(v17, *(_QWORD *)(a1 + 16));
  (*(void (**)(_QWORD *__return_ptr, _QWORD, double, double, double, double))(*(_QWORD *)(a1 + 40) + 24))(v18, *(_QWORD *)(a1 + 24), a3, a4, a5, a6);
  v13 = *(_BYTE *)(v6 + *(int *)(a1 + 56));
  type metadata accessor for Path.PathBox();
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_BYTE *)(v14 + 16) = 2;
  RBPathStorageInit();
  v16[0] = 1;
  v16[1] = v13;
  MEMORY[0x23B7C9088](v14 + 24, 20, 0, v16);
  Path.append(to:)();
  outlined init with take of Path.Storage((uint64_t)v18, (uint64_t)v19);
  outlined retain of Path.Storage((uint64_t)v19, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
  MEMORY[0x23B7C9088](v14 + 24, 21, 0, 0);
  Path.append(to:)();
  outlined retain of Path.Storage((uint64_t)v18, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  MEMORY[0x23B7C9088](v14 + 24, 16, 0, 0);
  outlined retain of Path.Storage((uint64_t)v18, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  result = outlined retain of Path.Storage((uint64_t)v17, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  *(_QWORD *)a2 = v14;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 5;
  return result;
}

void _ShapeIntersection.animatableData.modify(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;

  v5 = malloc(0x50uLL);
  *a1 = v5;
  v5[4] = a2;
  v5[5] = v2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = swift_getAssociatedConformanceWitness();
  *v5 = AssociatedTypeWitness;
  v5[1] = v7;
  v5[2] = AssociatedConformanceWitness;
  v5[3] = v9;
  type metadata accessor for AnimatablePair();
}

void sub_234F7EEC8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  size_t v4;

  v2[6] = a1;
  v3 = *(_QWORD *)(a1 - 8);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 + 64);
  v2[8] = malloc(v4);
  v2[9] = malloc(v4);
  _ShapeUnion.animatableData.getter(v1);
}

uint64_t (*sub_234F7EF04())()
{
  return _ShapeIntersection.animatableData.modify;
}

double protocol witness for Shape.path(in:) in conformance _ShapeIntersection<A, B>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  double result;
  __int128 v8;
  _OWORD v9[2];
  char v10;

  _ShapeIntersection.path(in:)(a1, (uint64_t)v9, a3, a4, a5, a6);
  result = *(double *)v9;
  v8 = v9[1];
  *(_OWORD *)a2 = v9[0];
  *(_OWORD *)(a2 + 16) = v8;
  *(_BYTE *)(a2 + 32) = v10;
  return result;
}

uint64_t protocol witness for Shape.sizeThatFits(_:) in conformance _ShapeIntersection<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for Shape.sizeThatFits(_:) in conformance _ShapeIntersection<A, B>(a1, a2, a3, a4, a5, a6, _ShapeIntersection.sizeThatFits(_:));
}

void protocol witness for Animatable.animatableData.modify in conformance _ShapeIntersection<A, B>(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;

  v5 = malloc(0x50uLL);
  *a1 = v5;
  v5[4] = v2;
  v5[5] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = swift_getAssociatedConformanceWitness();
  *v5 = AssociatedTypeWitness;
  v5[1] = v7;
  v5[2] = AssociatedConformanceWitness;
  v5[3] = v9;
  type metadata accessor for AnimatablePair();
}

void sub_234F7F078(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  size_t v4;

  v2[6] = a1;
  v3 = *(_QWORD *)(a1 - 8);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 + 64);
  v2[8] = malloc(v4);
  v2[9] = malloc(v4);
  _ShapeUnion.animatableData.getter(v1);
}

uint64_t (*sub_234F7F0B4())()
{
  return protocol witness for Animatable.animatableData.modify in conformance _ShapeIntersection<A, B>;
}

uint64_t _ShapeUnion.lhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _ShapeUnion.lhs.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_ShapeUnion.lhs.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ShapeUnion.rhs.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ShapeUnion.eoFill.getter(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 56));
}

uint64_t _ShapeUnion.eoFill.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + *(int *)(a2 + 56)) = result;
  return result;
}

uint64_t (*_ShapeUnion.eoFill.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ShapeUnion.path(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v6;
  char v13;
  uint64_t v14;
  uint64_t result;
  _BYTE v16[2];
  _QWORD v17[5];
  _QWORD v18[5];
  _BYTE v19[40];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(_QWORD *__return_ptr, _QWORD))(*(_QWORD *)(a1 + 32) + 24))(v17, *(_QWORD *)(a1 + 16));
  (*(void (**)(_QWORD *__return_ptr, _QWORD, double, double, double, double))(*(_QWORD *)(a1 + 40) + 24))(v18, *(_QWORD *)(a1 + 24), a3, a4, a5, a6);
  v13 = *(_BYTE *)(v6 + *(int *)(a1 + 56));
  type metadata accessor for Path.PathBox();
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_BYTE *)(v14 + 16) = 2;
  RBPathStorageInit();
  v16[0] = 2;
  v16[1] = v13;
  MEMORY[0x23B7C9088](v14 + 24, 20, 0, v16);
  Path.append(to:)();
  outlined init with take of Path.Storage((uint64_t)v18, (uint64_t)v19);
  outlined retain of Path.Storage((uint64_t)v19, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
  MEMORY[0x23B7C9088](v14 + 24, 21, 0, 0);
  Path.append(to:)();
  outlined retain of Path.Storage((uint64_t)v18, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  MEMORY[0x23B7C9088](v14 + 24, 16, 0, 0);
  outlined retain of Path.Storage((uint64_t)v18, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  result = outlined retain of Path.Storage((uint64_t)v17, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  *(_QWORD *)a2 = v14;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 5;
  return result;
}

uint64_t key path getter for _ShapeIntersection.animatableData : <A, B>_ShapeIntersection<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, _OWORD *), uint64_t (*a5)(uint64_t))
{
  __int128 v6;
  uint64_t v7;
  _OWORD v9[2];

  v6 = *(_OWORD *)(a3 + a2 - 16);
  v9[0] = *(_OWORD *)(a3 + a2 - 32);
  v9[1] = v6;
  v7 = a4(0, v9);
  return a5(v7);
}

void key path setter for _ShapeIntersection.animatableData : <A, B>_ShapeIntersection<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD, _OWORD *))
{
  __int128 v5;
  _OWORD v6[2];

  v5 = *(_OWORD *)(a4 + a3 - 16);
  v6[0] = *(_OWORD *)(a4 + a3 - 32);
  v6[1] = v5;
  a5(0, v6);
  specialized _ShapeSymmetricDifference.animatableData.setter();
}

void _ShapeIntersection.animatableData.setter()
{
  specialized _ShapeSymmetricDifference.animatableData.setter();
}

void sub_234F7F41C()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for AnimatablePair();
}

uint64_t sub_234F7F4CC(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

void _ShapeUnion.animatableData.modify(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;

  v5 = malloc(0x50uLL);
  *a1 = v5;
  v5[4] = a2;
  v5[5] = v2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = swift_getAssociatedConformanceWitness();
  *v5 = AssociatedTypeWitness;
  v5[1] = v7;
  v5[2] = AssociatedConformanceWitness;
  v5[3] = v9;
  type metadata accessor for AnimatablePair();
}

void sub_234F7F5F0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  size_t v4;

  v2[6] = a1;
  v3 = *(_QWORD *)(a1 - 8);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 + 64);
  v2[8] = malloc(v4);
  v2[9] = malloc(v4);
  _ShapeUnion.animatableData.getter(v1);
}

uint64_t (*sub_234F7F62C())()
{
  return _ShapeIntersection.animatableData.modify;
}

void _ShapeIntersection.animatableData.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 56) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 64), *(_QWORD *)(*(_QWORD *)a1 + 72), *(_QWORD *)(*(_QWORD *)a1 + 48));
    specialized _ShapeSymmetricDifference.animatableData.setter();
  }
  specialized _ShapeSymmetricDifference.animatableData.setter();
}

double protocol witness for Shape.path(in:) in conformance _ShapeUnion<A, B>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  double result;
  __int128 v8;
  _OWORD v9[2];
  char v10;

  _ShapeUnion.path(in:)(a1, (uint64_t)v9, a3, a4, a5, a6);
  result = *(double *)v9;
  v8 = v9[1];
  *(_OWORD *)a2 = v9[0];
  *(_OWORD *)(a2 + 16) = v8;
  *(_BYTE *)(a2 + 32) = v10;
  return result;
}

uint64_t protocol witness for Shape.sizeThatFits(_:) in conformance _ShapeUnion<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for Shape.sizeThatFits(_:) in conformance _ShapeIntersection<A, B>(a1, a2, a3, a4, a5, a6, _ShapeUnion.sizeThatFits(_:));
}

uint64_t protocol witness for Shape.sizeThatFits(_:) in conformance _ShapeIntersection<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void))
{
  return a7();
}

void protocol witness for Animatable.animatableData.modify in conformance _ShapeIntersection<A, B>(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 56) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 64), *(_QWORD *)(*(_QWORD *)a1 + 72), *(_QWORD *)(*(_QWORD *)a1 + 48));
    specialized _ShapeSymmetricDifference.animatableData.setter();
  }
  specialized _ShapeSymmetricDifference.animatableData.setter();
}

uint64_t (*_ShapeSubtraction.lhs.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ShapeSubtraction.rhs.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ShapeSubtraction.eoFill.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ShapeSubtraction.path(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v6;
  char v13;
  uint64_t v14;
  uint64_t result;
  _BYTE v16[2];
  _QWORD v17[5];
  _QWORD v18[5];
  _BYTE v19[40];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(_QWORD *__return_ptr, _QWORD))(*(_QWORD *)(a1 + 32) + 24))(v17, *(_QWORD *)(a1 + 16));
  (*(void (**)(_QWORD *__return_ptr, _QWORD, double, double, double, double))(*(_QWORD *)(a1 + 40) + 24))(v18, *(_QWORD *)(a1 + 24), a3, a4, a5, a6);
  v13 = *(_BYTE *)(v6 + *(int *)(a1 + 56));
  type metadata accessor for Path.PathBox();
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_BYTE *)(v14 + 16) = 2;
  RBPathStorageInit();
  v16[0] = 3;
  v16[1] = v13;
  MEMORY[0x23B7C9088](v14 + 24, 20, 0, v16);
  Path.append(to:)();
  outlined init with take of Path.Storage((uint64_t)v18, (uint64_t)v19);
  outlined retain of Path.Storage((uint64_t)v19, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
  MEMORY[0x23B7C9088](v14 + 24, 21, 0, 0);
  Path.append(to:)();
  outlined retain of Path.Storage((uint64_t)v18, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  MEMORY[0x23B7C9088](v14 + 24, 16, 0, 0);
  outlined retain of Path.Storage((uint64_t)v18, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  result = outlined retain of Path.Storage((uint64_t)v17, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  *(_QWORD *)a2 = v14;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 5;
  return result;
}

void _ShapeSubtraction.animatableData.modify(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;

  v5 = malloc(0x50uLL);
  *a1 = v5;
  v5[4] = a2;
  v5[5] = v2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = swift_getAssociatedConformanceWitness();
  *v5 = AssociatedTypeWitness;
  v5[1] = v7;
  v5[2] = AssociatedConformanceWitness;
  v5[3] = v9;
  type metadata accessor for AnimatablePair();
}

void sub_234F7FB18(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  size_t v4;

  v2[6] = a1;
  v3 = *(_QWORD *)(a1 - 8);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 + 64);
  v2[8] = malloc(v4);
  v2[9] = malloc(v4);
  _ShapeUnion.animatableData.getter(v1);
}

uint64_t (*sub_234F7FB54())()
{
  return _ShapeIntersection.animatableData.modify;
}

double protocol witness for Shape.path(in:) in conformance _ShapeSubtraction<A, B>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  double result;
  __int128 v8;
  _OWORD v9[2];
  char v10;

  _ShapeSubtraction.path(in:)(a1, (uint64_t)v9, a3, a4, a5, a6);
  result = *(double *)v9;
  v8 = v9[1];
  *(_OWORD *)a2 = v9[0];
  *(_OWORD *)(a2 + 16) = v8;
  *(_BYTE *)(a2 + 32) = v10;
  return result;
}

uint64_t protocol witness for Shape.sizeThatFits(_:) in conformance _ShapeSubtraction<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for Shape.sizeThatFits(_:) in conformance _ShapeIntersection<A, B>(a1, a2, a3, a4, a5, a6, _ShapeSubtraction.sizeThatFits(_:));
}

uint64_t (*_ShapeSymmetricDifference.lhs.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ShapeSymmetricDifference.rhs.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ShapeSymmetricDifference.eoFill.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ShapeSymmetricDifference.path(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v6;
  char v13;
  uint64_t v14;
  uint64_t result;
  _BYTE v16[2];
  _QWORD v17[5];
  _QWORD v18[5];
  _BYTE v19[40];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(_QWORD *__return_ptr, _QWORD))(*(_QWORD *)(a1 + 32) + 24))(v17, *(_QWORD *)(a1 + 16));
  (*(void (**)(_QWORD *__return_ptr, _QWORD, double, double, double, double))(*(_QWORD *)(a1 + 40) + 24))(v18, *(_QWORD *)(a1 + 24), a3, a4, a5, a6);
  v13 = *(_BYTE *)(v6 + *(int *)(a1 + 56));
  type metadata accessor for Path.PathBox();
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_BYTE *)(v14 + 16) = 2;
  RBPathStorageInit();
  v16[0] = 4;
  v16[1] = v13;
  MEMORY[0x23B7C9088](v14 + 24, 20, 0, v16);
  Path.append(to:)();
  outlined init with take of Path.Storage((uint64_t)v18, (uint64_t)v19);
  outlined retain of Path.Storage((uint64_t)v19, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
  MEMORY[0x23B7C9088](v14 + 24, 21, 0, 0);
  Path.append(to:)();
  outlined retain of Path.Storage((uint64_t)v18, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  MEMORY[0x23B7C9088](v14 + 24, 16, 0, 0);
  outlined retain of Path.Storage((uint64_t)v18, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  result = outlined retain of Path.Storage((uint64_t)v17, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  *(_QWORD *)a2 = v14;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 5;
  return result;
}

void _ShapeUnion.sizeThatFits(_:)(uint64_t a1, char a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v8;
  unsigned __int8 v9;

  v8 = a2 & 1;
  v9 = a4 & 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(a5[4] + 48))(a1, v8, a3, a4 & 1, a5[2]);
  (*(double (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(a5[5] + 48))(a1, v8, a3, v9, a5[3]);
}

void _ShapeSymmetricDifference.animatableData.modify(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;

  v5 = malloc(0x50uLL);
  *a1 = v5;
  v5[4] = a2;
  v5[5] = v2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = swift_getAssociatedConformanceWitness();
  *v5 = AssociatedTypeWitness;
  v5[1] = v7;
  v5[2] = AssociatedConformanceWitness;
  v5[3] = v9;
  type metadata accessor for AnimatablePair();
}

void sub_234F7FF8C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  size_t v4;

  v2[6] = a1;
  v3 = *(_QWORD *)(a1 - 8);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 + 64);
  v2[8] = malloc(v4);
  v2[9] = malloc(v4);
  _ShapeUnion.animatableData.getter(v1);
}

uint64_t (*sub_234F7FFC8())()
{
  return _ShapeIntersection.animatableData.modify;
}

double protocol witness for Shape.path(in:) in conformance _ShapeSymmetricDifference<A, B>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  double result;
  __int128 v8;
  _OWORD v9[2];
  char v10;

  _ShapeSymmetricDifference.path(in:)(a1, (uint64_t)v9, a3, a4, a5, a6);
  result = *(double *)v9;
  v8 = v9[1];
  *(_OWORD *)a2 = v9[0];
  *(_OWORD *)(a2 + 16) = v8;
  *(_BYTE *)(a2 + 32) = v10;
  return result;
}

uint64_t protocol witness for Shape.sizeThatFits(_:) in conformance _ShapeSymmetricDifference<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for Shape.sizeThatFits(_:) in conformance _ShapeIntersection<A, B>(a1, a2, a3, a4, a5, a6, _ShapeSymmetricDifference.sizeThatFits(_:));
}

uint64_t (*_ShapeLineIntersection.lhs.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ShapeLineIntersection.rhs.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ShapeLineIntersection.eoFill.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ShapeLineIntersection.path(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v6;
  char v13;
  uint64_t v14;
  uint64_t result;
  _BYTE v16[2];
  _QWORD v17[5];
  _QWORD v18[5];
  _BYTE v19[40];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(_QWORD *__return_ptr, _QWORD))(*(_QWORD *)(a1 + 32) + 24))(v17, *(_QWORD *)(a1 + 16));
  (*(void (**)(_QWORD *__return_ptr, _QWORD, double, double, double, double))(*(_QWORD *)(a1 + 40) + 24))(v18, *(_QWORD *)(a1 + 24), a3, a4, a5, a6);
  v13 = *(_BYTE *)(v6 + *(int *)(a1 + 56));
  type metadata accessor for Path.PathBox();
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_BYTE *)(v14 + 16) = 2;
  RBPathStorageInit();
  v16[0] = 5;
  v16[1] = v13;
  MEMORY[0x23B7C9088](v14 + 24, 20, 0, v16);
  Path.append(to:)();
  outlined init with take of Path.Storage((uint64_t)v18, (uint64_t)v19);
  outlined retain of Path.Storage((uint64_t)v19, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
  MEMORY[0x23B7C9088](v14 + 24, 21, 0, 0);
  Path.append(to:)();
  outlined retain of Path.Storage((uint64_t)v18, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  MEMORY[0x23B7C9088](v14 + 24, 16, 0, 0);
  outlined retain of Path.Storage((uint64_t)v18, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  result = outlined retain of Path.Storage((uint64_t)v17, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  *(_QWORD *)a2 = v14;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 5;
  return result;
}

void _ShapeIntersection.sizeThatFits(_:)(uint64_t a1, char a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v8;
  unsigned __int8 v9;

  v8 = a2 & 1;
  v9 = a4 & 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(a5[4] + 48))(a1, v8, a3, a4 & 1, a5[2]);
  (*(double (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(a5[5] + 48))(a1, v8, a3, v9, a5[3]);
}

void _ShapeLineIntersection.animatableData.modify(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;

  v5 = malloc(0x50uLL);
  *a1 = v5;
  v5[4] = a2;
  v5[5] = v2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = swift_getAssociatedConformanceWitness();
  *v5 = AssociatedTypeWitness;
  v5[1] = v7;
  v5[2] = AssociatedConformanceWitness;
  v5[3] = v9;
  type metadata accessor for AnimatablePair();
}

void sub_234F80404(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  size_t v4;

  v2[6] = a1;
  v3 = *(_QWORD *)(a1 - 8);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 + 64);
  v2[8] = malloc(v4);
  v2[9] = malloc(v4);
  _ShapeUnion.animatableData.getter(v1);
}

uint64_t (*sub_234F80440())()
{
  return _ShapeIntersection.animatableData.modify;
}

double protocol witness for Shape.path(in:) in conformance _ShapeLineIntersection<A, B>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  double result;
  __int128 v8;
  _OWORD v9[2];
  char v10;

  _ShapeLineIntersection.path(in:)(a1, (uint64_t)v9, a3, a4, a5, a6);
  result = *(double *)v9;
  v8 = v9[1];
  *(_OWORD *)a2 = v9[0];
  *(_OWORD *)(a2 + 16) = v8;
  *(_BYTE *)(a2 + 32) = v10;
  return result;
}

uint64_t protocol witness for Shape.sizeThatFits(_:) in conformance _ShapeLineIntersection<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for Shape.sizeThatFits(_:) in conformance _ShapeIntersection<A, B>(a1, a2, a3, a4, a5, a6, _ShapeLineIntersection.sizeThatFits(_:));
}

uint64_t (*_ShapeLineSubtraction.lhs.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ShapeIntersection.rhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t _ShapeIntersection.rhs.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 40))(v2 + *(int *)(a2 + 52), a1);
}

uint64_t (*_ShapeLineSubtraction.rhs.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ShapeLineSubtraction.eoFill.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t _ShapeLineSubtraction.path(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v6;
  char v13;
  uint64_t v14;
  uint64_t result;
  _BYTE v16[2];
  _QWORD v17[5];
  _QWORD v18[5];
  _BYTE v19[40];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(_QWORD *__return_ptr, _QWORD))(*(_QWORD *)(a1 + 32) + 24))(v17, *(_QWORD *)(a1 + 16));
  (*(void (**)(_QWORD *__return_ptr, _QWORD, double, double, double, double))(*(_QWORD *)(a1 + 40) + 24))(v18, *(_QWORD *)(a1 + 24), a3, a4, a5, a6);
  v13 = *(_BYTE *)(v6 + *(int *)(a1 + 56));
  type metadata accessor for Path.PathBox();
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_BYTE *)(v14 + 16) = 2;
  RBPathStorageInit();
  v16[0] = 6;
  v16[1] = v13;
  MEMORY[0x23B7C9088](v14 + 24, 20, 0, v16);
  Path.append(to:)();
  outlined init with take of Path.Storage((uint64_t)v18, (uint64_t)v19);
  outlined retain of Path.Storage((uint64_t)v19, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
  MEMORY[0x23B7C9088](v14 + 24, 21, 0, 0);
  Path.append(to:)();
  outlined retain of Path.Storage((uint64_t)v18, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  MEMORY[0x23B7C9088](v14 + 24, 16, 0, 0);
  outlined retain of Path.Storage((uint64_t)v18, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  result = outlined retain of Path.Storage((uint64_t)v17, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  *(_QWORD *)a2 = v14;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 5;
  return result;
}

uint64_t _ShapeSubtraction.sizeThatFits(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a5 + 32) + 48))();
}

void _ShapeLineSubtraction.animatableData.modify(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;

  v5 = malloc(0x50uLL);
  *a1 = v5;
  v5[4] = a2;
  v5[5] = v2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = swift_getAssociatedConformanceWitness();
  *v5 = AssociatedTypeWitness;
  v5[1] = v7;
  v5[2] = AssociatedConformanceWitness;
  v5[3] = v9;
  type metadata accessor for AnimatablePair();
}

void sub_234F80824(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  size_t v4;

  v2[6] = a1;
  v3 = *(_QWORD *)(a1 - 8);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 + 64);
  v2[8] = malloc(v4);
  v2[9] = malloc(v4);
  _ShapeUnion.animatableData.getter(v1);
}

uint64_t (*sub_234F80860())()
{
  return _ShapeIntersection.animatableData.modify;
}

double protocol witness for Shape.path(in:) in conformance _ShapeLineSubtraction<A, B>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  double result;
  __int128 v8;
  _OWORD v9[2];
  char v10;

  _ShapeLineSubtraction.path(in:)(a1, (uint64_t)v9, a3, a4, a5, a6);
  result = *(double *)v9;
  v8 = v9[1];
  *(_OWORD *)a2 = v9[0];
  *(_OWORD *)(a2 + 16) = v8;
  *(_BYTE *)(a2 + 32) = v10;
  return result;
}

uint64_t protocol witness for Shape.sizeThatFits(_:) in conformance _ShapeLineSubtraction<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for Shape.sizeThatFits(_:) in conformance _ShapeIntersection<A, B>(a1, a2, a3, a4, a5, a6, _ShapeLineSubtraction.sizeThatFits(_:));
}

void specialized _ShapeSymmetricDifference.animatableData.setter()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v1 = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](v1);
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for AnimatablePair();
}

uint64_t sub_234F80A04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  AnimatablePair.subscript.getter(v2, v3, a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v2, v5, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v3, v6, v1);
}

uint64_t instantiation function for generic protocol witness table for _ShapeIntersection<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for RawRepresentableProxy<A>(a1, a2, a3, (uint64_t)"MK;\x1Bh@\n",
           (uint64_t)"9K;\x1BL@\n");
}

uint64_t instantiation function for generic protocol witness table for _ShapeUnion<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for RawRepresentableProxy<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for _ShapeUnion<A, B>, (uint64_t)&protocol conformance descriptor for _ShapeUnion<A, B>);
}

uint64_t instantiation function for generic protocol witness table for _ShapeSubtraction<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for RawRepresentableProxy<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for _ShapeSubtraction<A, B>, (uint64_t)&protocol conformance descriptor for _ShapeSubtraction<A, B>);
}

uint64_t instantiation function for generic protocol witness table for _ShapeSymmetricDifference<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for RawRepresentableProxy<A>(a1, a2, a3, (uint64_t)"QJ;\x1BD@\n",
           (uint64_t)"=J;\x1B(@\n");
}

uint64_t instantiation function for generic protocol witness table for _ShapeLineIntersection<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for RawRepresentableProxy<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for _ShapeLineIntersection<A, B>, (uint64_t)&protocol conformance descriptor for _ShapeLineIntersection<A, B>);
}

uint64_t instantiation function for generic protocol witness table for _ShapeLineSubtraction<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for RawRepresentableProxy<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for _ShapeLineSubtraction<A, B>, (uint64_t)&protocol conformance descriptor for _ShapeLineSubtraction<A, B>);
}

uint64_t sub_234F80AE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for _ShapeIntersection.animatableData : <A, B>_ShapeIntersection<A, B>(a1, a2, a3, (uint64_t (*)(_QWORD, _OWORD *))type metadata accessor for _ShapeIntersection, (uint64_t (*)(uint64_t))_ShapeIntersection.animatableData.getter);
}

void sub_234F80B08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for _ShapeIntersection.animatableData : <A, B>_ShapeIntersection<A, B>(a1, a2, a3, a4, (void (*)(_QWORD, _OWORD *))type metadata accessor for _ShapeIntersection);
}

uint64_t sub_234F80B24()
{
  return 32;
}

__n128 sub_234F80B30(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_234F80B3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for _ShapeIntersection.animatableData : <A, B>_ShapeIntersection<A, B>(a1, a2, a3, (uint64_t (*)(_QWORD, _OWORD *))type metadata accessor for _ShapeUnion, (uint64_t (*)(uint64_t))_ShapeUnion.animatableData.getter);
}

void sub_234F80B60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for _ShapeIntersection.animatableData : <A, B>_ShapeIntersection<A, B>(a1, a2, a3, a4, (void (*)(_QWORD, _OWORD *))type metadata accessor for _ShapeUnion);
}

uint64_t sub_234F80B7C()
{
  return 32;
}

__n128 sub_234F80B88(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_234F80B94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for _ShapeIntersection.animatableData : <A, B>_ShapeIntersection<A, B>(a1, a2, a3, (uint64_t (*)(_QWORD, _OWORD *))type metadata accessor for _ShapeSubtraction, (uint64_t (*)(uint64_t))_ShapeSubtraction.animatableData.getter);
}

void sub_234F80BB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for _ShapeIntersection.animatableData : <A, B>_ShapeIntersection<A, B>(a1, a2, a3, a4, (void (*)(_QWORD, _OWORD *))type metadata accessor for _ShapeSubtraction);
}

uint64_t sub_234F80BD4()
{
  return 32;
}

__n128 sub_234F80BE0(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_234F80BEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for _ShapeIntersection.animatableData : <A, B>_ShapeIntersection<A, B>(a1, a2, a3, (uint64_t (*)(_QWORD, _OWORD *))type metadata accessor for _ShapeSymmetricDifference, (uint64_t (*)(uint64_t))_ShapeSymmetricDifference.animatableData.getter);
}

void sub_234F80C10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for _ShapeIntersection.animatableData : <A, B>_ShapeIntersection<A, B>(a1, a2, a3, a4, (void (*)(_QWORD, _OWORD *))type metadata accessor for _ShapeSymmetricDifference);
}

uint64_t sub_234F80C2C()
{
  return 32;
}

__n128 sub_234F80C38(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_234F80C44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for _ShapeIntersection.animatableData : <A, B>_ShapeIntersection<A, B>(a1, a2, a3, (uint64_t (*)(_QWORD, _OWORD *))type metadata accessor for _ShapeLineIntersection, (uint64_t (*)(uint64_t))_ShapeLineIntersection.animatableData.getter);
}

void sub_234F80C68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for _ShapeIntersection.animatableData : <A, B>_ShapeIntersection<A, B>(a1, a2, a3, a4, (void (*)(_QWORD, _OWORD *))type metadata accessor for _ShapeLineIntersection);
}

uint64_t sub_234F80C84()
{
  return 32;
}

__n128 sub_234F80C90(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_234F80C9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for _ShapeIntersection.animatableData : <A, B>_ShapeIntersection<A, B>(a1, a2, a3, (uint64_t (*)(_QWORD, _OWORD *))type metadata accessor for _ShapeLineSubtraction, (uint64_t (*)(uint64_t))_ShapeLineSubtraction.animatableData.getter);
}

void sub_234F80CC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for _ShapeIntersection.animatableData : <A, B>_ShapeIntersection<A, B>(a1, a2, a3, a4, (void (*)(_QWORD, _OWORD *))type metadata accessor for _ShapeLineSubtraction);
}

uint64_t sub_234F80CDC()
{
  return 32;
}

__n128 sub_234F80CE8(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

void type metadata accessor for _ShapeIntersection()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void type metadata accessor for _ShapeUnion()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void type metadata accessor for _ShapeSubtraction()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void type metadata accessor for _ShapeSymmetricDifference()
{
  JUMPOUT(0x23B7C9B5CLL);
}

void type metadata accessor for _ShapeLineIntersection()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t type metadata completion function for _ShapeIntersection()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _ShapeIntersection(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = (*(_BYTE *)(v6 + 80) | *(_BYTE *)(v7 + 80));
  if (v11 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || v10 + (v9 & (unint64_t)~v8) + 1 > 0x18)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + ((v11 + 16) & ~v11));
    swift_retain();
  }
  else
  {
    v15 = ~v8;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    v16 = ((unint64_t)a2 + v9) & v15;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(((unint64_t)v4 + v9) & v15, v16, v5);
    *(_BYTE *)((((unint64_t)v4 + v9) & v15) + v10) = *(_BYTE *)(v16 + v10);
  }
  return v4;
}

uint64_t initializeWithCopy for _ShapeIntersection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v11, v12);
  *(_BYTE *)(v11 + *(_QWORD *)(v8 + 64)) = *(_BYTE *)(v12 + *(_QWORD *)(v8 + 64));
  return a1;
}

uint64_t assignWithCopy for _ShapeIntersection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v11, v12);
  *(_BYTE *)(v11 + *(_QWORD *)(v8 + 64)) = *(_BYTE *)(v12 + *(_QWORD *)(v8 + 64));
  return a1;
}

uint64_t initializeWithTake for _ShapeIntersection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v11, v12);
  *(_BYTE *)(v11 + *(_QWORD *)(v8 + 64)) = *(_BYTE *)(v12 + *(_QWORD *)(v8 + 64));
  return a1;
}

uint64_t assignWithTake for _ShapeIntersection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v11, v12);
  *(_BYTE *)(v11 + *(_QWORD *)(v8 + 64)) = *(_BYTE *)(v12 + *(_QWORD *)(v8 + 64));
  return a1;
}

uint64_t getEnumTagSinglePayload for _ShapeIntersection(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v20;
  unsigned int v21;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (v8 <= 0xFE)
    v8 = 254;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = *(_QWORD *)(v6 + 64);
  v12 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_25;
  v13 = v11 + (v10 & ~v9) + 1;
  v14 = 8 * v13;
  if (v13 > 3)
    goto LABEL_9;
  v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
  if (HIWORD(v16))
  {
    v15 = *(_DWORD *)(a1 + v13);
    if (v15)
      goto LABEL_16;
  }
  else
  {
    if (v16 <= 0xFF)
    {
      if (v16 < 2)
        goto LABEL_25;
LABEL_9:
      v15 = *(unsigned __int8 *)(a1 + v13);
      if (!*(_BYTE *)(a1 + v13))
        goto LABEL_25;
LABEL_16:
      v17 = (v15 - 1) << v14;
      if (v13 > 3)
        v17 = 0;
      if ((_DWORD)v11 + (v10 & ~(_DWORD)v9) == -1)
        return v8 + v17 + 1;
      if (v13 <= 3)
        v18 = v11 + (v10 & ~(_DWORD)v9) + 1;
      else
        v18 = 4;
      return ((uint64_t (*)(void))((char *)&loc_234F811B4 + 4 * byte_2352B70F0[v18 - 1]))();
    }
    v15 = *(unsigned __int16 *)(a1 + v13);
    if (*(_WORD *)(a1 + v13))
      goto LABEL_16;
  }
LABEL_25:
  if (v5 == v8)
    return (*(uint64_t (**)(void))(v4 + 48))();
  v20 = (v10 + a1) & ~v9;
  if (v7 == v8)
    return (*(uint64_t (**)(uint64_t))(v6 + 48))(v20);
  v21 = *(unsigned __int8 *)(v20 + v11);
  if (v21 < 2)
    return 0;
  return ((v21 + 2147483646) & 0x7FFFFFFF) + 1;
}

void storeEnumTagSinglePayload for _ShapeIntersection(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  size_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE)
    v8 = 254;
  else
    v8 = v7;
  v9 = *(_QWORD *)(v6 + 64)
     + ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + 1;
  if (a3 > v8)
  {
    if (v9 <= 3)
    {
      v12 = ((a3 - v8 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v12))
      {
        v10 = 4u;
      }
      else if (v12 >= 0x100)
      {
        v10 = 2;
      }
      else
      {
        v10 = v12 > 1;
      }
    }
    else
    {
      v10 = 1u;
    }
  }
  else
  {
    v10 = 0;
  }
  if (v8 < a2)
  {
    v11 = ~v8 + a2;
    if (v9 < 4)
    {
      if (*(_DWORD *)(v6 + 64)
         + ((*(_DWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~*(unsigned __int8 *)(v6 + 80)) != -1)
      {
        v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v13;
          *((_BYTE *)a1 + 2) = BYTE2(v13);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v13;
        }
        else
        {
          *(_BYTE *)a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X0 }
}

void type metadata accessor for _ShapeLineSubtraction()
{
  JUMPOUT(0x23B7C9B5CLL);
}

uint64_t ScaledMetric.dynamicTypeSize.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)v1;
  v4 = *(_BYTE *)(v1 + 8);
  outlined copy of Environment<DynamicTypeSize>.Content(v3, v4);
  specialized Environment.wrappedValue.getter(v3, v4, a1);
  return outlined consume of Environment<CGFloat>.Content(v3, v4);
}

double ScaledMetric.pixelLength.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  double v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 24);
  outlined copy of Environment<DynamicTypeSize>.Content(v1, v2);
  v3 = specialized Environment.wrappedValue.getter(v1, v2);
  outlined consume of Environment<CGFloat>.Content(v1, v2);
  return v3;
}

uint64_t ScaledMetric.init(wrappedValue:relativeTo:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v9 = *a2;
  *(_QWORD *)a5 = swift_getKeyPath();
  *(_BYTE *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = swift_getKeyPath();
  *(_BYTE *)(a5 + 24) = 0;
  v11 = type metadata accessor for ScaledMetric(0, a3, a4, v10);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a5 + *(int *)(v11 + 40), a1, a3);
  *(_BYTE *)(a5 + *(int *)(v11 + 44)) = v9;
  return result;
}

uint64_t type metadata accessor for ScaledMetric(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ScaledMetric);
}

uint64_t ScaledMetric.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  *(_QWORD *)a4 = swift_getKeyPath();
  *(_BYTE *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = swift_getKeyPath();
  *(_BYTE *)(a4 + 24) = 0;
  v9 = type metadata accessor for ScaledMetric(0, a2, a3, v8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a4 + *(int *)(v9 + 40), a1, a2);
  *(_BYTE *)(a4 + *(int *)(v9 + 44)) = 6;
  return result;
}

double specialized ScaledMetric.wrappedValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char v6;
  double v7;
  uint64_t v8;
  char v9;
  double v10;
  double v11;
  double v13;
  unsigned __int8 v14;
  unsigned __int8 v15;

  v1 = type metadata accessor for FloatingPointRoundingRule();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_BYTE *)(v0 + 40);
  v5 = *(_QWORD *)v0;
  v6 = *(_BYTE *)(v0 + 8);
  outlined copy of Environment<DynamicTypeSize>.Content(*(_QWORD *)v0, v6);
  specialized Environment.wrappedValue.getter(v5, v6, &v14);
  outlined consume of Environment<CGFloat>.Content(v5, v6);
  v7 = specialized static Font.scaleFactor(textStyle:in:)(&v15, &v14) * *(double *)(v0 + 32);
  v8 = *(_QWORD *)(v0 + 16);
  v9 = *(_BYTE *)(v0 + 24);
  outlined copy of Environment<DynamicTypeSize>.Content(v8, v9);
  v10 = specialized Environment.wrappedValue.getter(v8, v9);
  outlined consume of Environment<CGFloat>.Content(v8, v9);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE38D0], v1);
  v13 = v7;
  specialized FloatingPoint.round(_:toMultipleOf:)(v4, v10);
  v11 = v13;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v11;
}

uint64_t ScaledMetric.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(_QWORD, _QWORD);
  uint64_t v14;
  uint64_t v15;
  double v16;
  unsigned __int8 v17;

  v15 = a2;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v14 - v8;
  v11 = *(int *)(v10 + 44);
  v14 = v2 + *(int *)(v10 + 40);
  LOBYTE(v16) = *(_BYTE *)(v2 + v11);
  ScaledMetric.dynamicTypeSize.getter(&v17);
  v16 = specialized static Font.scaleFactor(textStyle:in:)((unsigned __int8 *)&v16, &v17);
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  dispatch thunk of BinaryFloatingPoint.init<A>(_:)();
  dispatch thunk of static Numeric.* infix(_:_:)();
  v12 = *(void (**)(_QWORD, _QWORD))(v4 + 8);
  v12(v6, v3);
  v16 = ScaledMetric.pixelLength.getter();
  dispatch thunk of BinaryFloatingPoint.init<A>(_:)();
  FloatingPoint.rounded(toMultipleOf:)((uint64_t)v6, v3, v15);
  v12(v6, v3);
  return ((uint64_t (*)(char *, uint64_t))v12)(v9, v3);
}

uint64_t property wrapper backing initializer of _ScaledValue.value@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t KeyPath;
  uint64_t result;

  KeyPath = swift_getKeyPath();
  result = swift_getKeyPath();
  *(_QWORD *)a1 = KeyPath;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = result;
  *(_BYTE *)(a1 + 24) = 0;
  *(double *)(a1 + 32) = a2;
  *(_BYTE *)(a1 + 40) = 6;
  return result;
}

uint64_t _ScaledValue.init(wrappedValue:textStyle:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  char v5;
  uint64_t KeyPath;
  uint64_t result;

  v5 = *a1;
  KeyPath = swift_getKeyPath();
  result = swift_getKeyPath();
  *(_QWORD *)a2 = KeyPath;
  *(_BYTE *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = result;
  *(_BYTE *)(a2 + 24) = 0;
  *(double *)(a2 + 32) = a3;
  *(_BYTE *)(a2 + 40) = v5;
  return result;
}

double _ScaledValue.wrappedValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  double v4;
  char v6;

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_BYTE *)(v0 + 24);
  v6 = *(_BYTE *)(v0 + 8);
  outlined copy of Environment<DynamicTypeSize>.Content(*(_QWORD *)v0, v6);
  outlined copy of Environment<DynamicTypeSize>.Content(v2, v3);
  v4 = specialized ScaledMetric.wrappedValue.getter();
  outlined consume of Environment<CGFloat>.Content(v1, v6);
  outlined consume of Environment<CGFloat>.Content(v2, v3);
  return v4;
}

uint64_t type metadata completion function for ScaledMetric()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ScaledMetric(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  if (v7 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || v8 + ((v7 + 25) & (unint64_t)~v7) + 1 > 0x18)
  {
    v11 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v11 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16));
    swift_retain();
  }
  else
  {
    v12 = ~v7;
    v13 = *(_QWORD *)a2;
    v14 = *(_BYTE *)(a2 + 8);
    outlined copy of Environment<DynamicTypeSize>.Content(*(_QWORD *)a2, v14);
    *(_QWORD *)a1 = v13;
    *(_BYTE *)(a1 + 8) = v14;
    v15 = a1 & 0xFFFFFFFFFFFFFFF8;
    v16 = a2 & 0xFFFFFFFFFFFFFFF8;
    v17 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
    LOBYTE(v13) = *(_BYTE *)(v16 + 24);
    outlined copy of Environment<DynamicTypeSize>.Content(v17, v13);
    *(_QWORD *)(v15 + 16) = v17;
    *(_BYTE *)(v15 + 24) = v13;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(((a1 & 0xFFFFFFFFFFFFFFF8) + v7 + 25) & v12, (v16 + v7 + 25) & v12, v5);
    *(_BYTE *)(((v15 + v7 + 25) & v12) + v8) = *(_BYTE *)(((v16 + v7 + 25) & v12) + v8);
  }
  return a1;
}

uint64_t destroy for ScaledMetric(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a1;
  outlined consume of Environment<CGFloat>.Content(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  v3 &= 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<CGFloat>.Content(*(_QWORD *)(v3 + 16), *(_BYTE *)(v3 + 24));
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((v3 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 25) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t initializeWithCopy for ScaledMetric(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<DynamicTypeSize>.Content(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = a1 & 0xFFFFFFFFFFFFFFF8;
  v9 = a2 & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  LOBYTE(v6) = *(_BYTE *)(v9 + 24);
  outlined copy of Environment<DynamicTypeSize>.Content(v10, v6);
  *(_QWORD *)(v8 + 16) = v10;
  *(_BYTE *)(v8 + 24) = v6;
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (v12 + 25 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v12;
  v14 = (v12 + 25 + v9) & ~v12;
  (*(void (**)(unint64_t, uint64_t))(v11 + 16))(v13, v14);
  *(_BYTE *)(v13 + *(_QWORD *)(v11 + 64)) = *(_BYTE *)(v14 + *(_QWORD *)(v11 + 64));
  return a1;
}

uint64_t assignWithCopy for ScaledMetric(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<DynamicTypeSize>.Content(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  outlined consume of Environment<CGFloat>.Content(v8, v9);
  v10 = a1 & 0xFFFFFFFFFFFFFFF8;
  v11 = a2 & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  LOBYTE(v6) = *(_BYTE *)(v11 + 24);
  outlined copy of Environment<DynamicTypeSize>.Content(v12, v6);
  v13 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16);
  v14 = *(_BYTE *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(_QWORD *)(v10 + 16) = v12;
  *(_BYTE *)(v10 + 24) = v6;
  outlined consume of Environment<CGFloat>.Content(v13, v14);
  v15 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = (v16 + 25 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v16;
  v18 = (v16 + 25 + v11) & ~v16;
  (*(void (**)(unint64_t, uint64_t))(v15 + 24))(v17, v18);
  *(_BYTE *)(v17 + *(_QWORD *)(v15 + 64)) = *(_BYTE *)(v18 + *(_QWORD *)(v15 + 64));
  return a1;
}

uint64_t initializeWithTake for ScaledMetric(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(_BYTE *)(v4 + 24) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(_QWORD *)(v4 + 16) = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 25 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v7;
  v9 = (v7 + 25 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~v7;
  (*(void (**)(unint64_t, unint64_t))(v6 + 32))(v8, v9);
  *(_BYTE *)(v8 + *(_QWORD *)(v6 + 64)) = *(_BYTE *)(v9 + *(_QWORD *)(v6 + 64));
  return a1;
}

uint64_t assignWithTake for ScaledMetric(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v4 = a2;
  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  outlined consume of Environment<CGFloat>.Content(v8, v9);
  v10 = a1 & 0xFFFFFFFFFFFFFFF8;
  v4 = (uint64_t *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
  v11 = *((_BYTE *)v4 + 24);
  v12 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16);
  v13 = *(_BYTE *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(_QWORD *)(v10 + 16) = v4[2];
  *(_BYTE *)(v10 + 24) = v11;
  outlined consume of Environment<CGFloat>.Content(v12, v13);
  v14 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = (v15 + 25 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v15;
  v17 = ((unint64_t)v4 + v15 + 25) & ~v15;
  (*(void (**)(unint64_t, uint64_t))(v14 + 40))(v16, v17);
  *(_BYTE *)(v16 + *(_QWORD *)(v14 + 64)) = *(_BYTE *)(v17 + *(_QWORD *)(v14 + 64));
  return a1;
}

uint64_t getEnumTagSinglePayload for ScaledMetric(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = *(_QWORD *)(v4 + 64) + ((v7 + 25) & ~v7) + 1;
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if (v5 > 0xFE)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((a1 & 0xFFFFFFFFFFFFFFF8) + v7 + 25) & ~v7);
      v15 = *(unsigned __int8 *)(a1 + 8);
      if (v15 > 1)
        return (v15 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234F82070 + 4 * byte_2352B74A8[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for ScaledMetric(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64)
     + ((*(unsigned __int8 *)(v5 + 80) + 25) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + 1;
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if (*(_DWORD *)(v5 + 64) + ((*(unsigned __int8 *)(v5 + 80) + 25) & ~*(unsigned __int8 *)(v5 + 80)) != -1)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t destroy for _ScaledValue(uint64_t a1)
{
  outlined consume of Environment<CGFloat>.Content(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  return outlined consume of Environment<CGFloat>.Content(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t initializeWithCopy for _ScaledValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<DynamicTypeSize>.Content(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  outlined copy of Environment<DynamicTypeSize>.Content(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t assignWithCopy for _ScaledValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<DynamicTypeSize>.Content(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of Environment<CGFloat>.Content(v6, v7);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_BYTE *)(a2 + 24);
  outlined copy of Environment<DynamicTypeSize>.Content(v8, v9);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 24) = v9;
  outlined consume of Environment<CGFloat>.Content(v10, v11);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for _ScaledValue(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of Environment<CGFloat>.Content(v6, v7);
  v8 = *((_BYTE *)a2 + 24);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_BYTE *)(a1 + 24) = v8;
  outlined consume of Environment<CGFloat>.Content(v9, v10);
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ScaledValue(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _ScaledValue(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for _ScaledValue()
{
  return &type metadata for _ScaledValue;
}

SwiftUI::DynamicTypeSize __swiftcall DynamicTypeSize.init(_:)(SwiftUI::DynamicTypeSize result)
{
  _BYTE *v1;

  *v1 = *(_BYTE *)result;
  return result;
}

BOOL static ContentSizeCategory.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t EnvironmentValues.sizeCategory.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t result;
  char v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v6 = *v4;
  if (v4[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v6, &v13);
    swift_release_n();
    result = swift_release_n();
    v8 = v13;
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DynamicTypeSizeKey>(0, a1, a2, a3);
    BloomFilter.init(hashValue:)(v9);
    v10 = swift_retain_n();
    v11 = specialized find1<A>(_:key:filter:)(v10, v12);
    if (v11)
      v8 = *(_BYTE *)(v11 + 72);
    else
      v8 = 3;
    result = swift_release_n();
  }
  *a4 = v8;
  return result;
}

BOOL ContentSizeCategory.isAccessibilityCategory.getter()
{
  unsigned __int8 *v0;

  return *v0 - 7 < 5;
}

void ContentSizeCategory.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

void *static ContentSizeCategory.allCases.getter()
{
  return &outlined read-only object #0 of static ContentSizeCategory.allCases.getter;
}

Swift::Int ContentSizeCategory.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for static CaseIterable.allCases.getter in conformance ContentSizeCategory(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static ContentSizeCategory.allCases.getter;
}

uint64_t EnvironmentValues.sizeCategory.setter(unsigned __int8 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;

  v2 = *v1;
  v3 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v3);
  swift_release();
  if (v1[1])
  {
    v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v2, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t (*EnvironmentValues.sizeCategory.modify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1, char a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = v4;
  EnvironmentValues.sizeCategory.getter(a2, a3, a4, (char *)(a1 + 8));
  return EnvironmentValues.sizeCategory.modify;
}

uint64_t EnvironmentValues.sizeCategory.modify(uint64_t a1, char a2)
{
  unsigned __int8 *v2;
  char v4;
  char v5;

  if ((a2 & 1) != 0)
  {
    v4 = *(_BYTE *)(a1 + 8);
    v2 = (unsigned __int8 *)&v4;
  }
  else
  {
    v5 = *(_BYTE *)(a1 + 8);
    v2 = (unsigned __int8 *)&v5;
  }
  return EnvironmentValues.sizeCategory.setter(v2);
}

unint64_t lazy protocol witness table accessor for type ContentSizeCategory and conformance ContentSizeCategory()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContentSizeCategory and conformance ContentSizeCategory;
  if (!lazy protocol witness table cache variable for type ContentSizeCategory and conformance ContentSizeCategory)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ContentSizeCategory, &type metadata for ContentSizeCategory);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentSizeCategory and conformance ContentSizeCategory);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [ContentSizeCategory] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [ContentSizeCategory] and conformance [A];
  if (!lazy protocol witness table cache variable for type [ContentSizeCategory] and conformance [A])
  {
    type metadata accessor for [ContentSizeCategory]();
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [ContentSizeCategory] and conformance [A]);
  }
  return result;
}

void type metadata accessor for [ContentSizeCategory]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [ContentSizeCategory])
  {
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [ContentSizeCategory]);
  }
}

uint64_t sub_234F828C0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _BYTE *a4@<X8>)
{
  uint64_t result;
  char v6;

  result = EnvironmentValues.sizeCategory.getter(a1, a2, a3, &v6);
  *a4 = v6;
  return result;
}

uint64_t sub_234F82900(unsigned __int8 *a1)
{
  unsigned __int8 v2;

  v2 = *a1;
  return EnvironmentValues.sizeCategory.setter(&v2);
}

uint64_t storeEnumTagSinglePayload for ContentSizeCategory(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_234F82980 + 4 * byte_2352B7595[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_234F829B4 + 4 * asc_2352B7590[v4]))();
}

uint64_t sub_234F829B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F829BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234F829C4);
  return result;
}

uint64_t sub_234F829D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234F829D8);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_234F829DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F829E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContentSizeCategory()
{
  return &type metadata for ContentSizeCategory;
}

id Font.TextStyle.ctTextStyle.getter()
{
  return (id)specialized Font.TextStyle.ctTextStyle.getter();
}

id DynamicTypeSize.ctTextSize.getter()
{
  return (id)specialized DynamicTypeSize.ctTextSize.getter();
}

uint64_t one-time initialization function for largeTitle()
{
  uint64_t result;

  type metadata accessor for FontBox<Font.TextStyleProvider>(0, &lazy cache variable for type metadata for FontBox<Font.TextStyleProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.TextStyleProvider and conformance Font.TextStyleProvider, (uint64_t)&unk_250644910);
  result = swift_allocObject();
  *(_WORD *)(result + 16) = 1024;
  *(_QWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 32) = 1;
  static Font.largeTitle = result;
  return result;
}

uint64_t static Font.system(_:design:weight:)(char *a1, char *a2, uint64_t a3, char a4)
{
  char v6;
  char v7;
  uint64_t result;

  v6 = *a1;
  v7 = *a2;
  type metadata accessor for FontBox<Font.TextStyleProvider>(0, &lazy cache variable for type metadata for FontBox<Font.TextStyleProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.TextStyleProvider and conformance Font.TextStyleProvider, (uint64_t)&unk_250644910);
  result = swift_allocObject();
  *(_BYTE *)(result + 16) = v6;
  *(_BYTE *)(result + 17) = v7;
  *(_QWORD *)(result + 24) = a3;
  *(_BYTE *)(result + 32) = a4 & 1;
  return result;
}

uint64_t static Font.largeTitle.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for largeTitle);
}

uint64_t one-time initialization function for title()
{
  uint64_t result;

  type metadata accessor for FontBox<Font.TextStyleProvider>(0, &lazy cache variable for type metadata for FontBox<Font.TextStyleProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.TextStyleProvider and conformance Font.TextStyleProvider, (uint64_t)&unk_250644910);
  result = swift_allocObject();
  *(_WORD *)(result + 16) = 1025;
  *(_QWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 32) = 1;
  static Font.title = result;
  return result;
}

uint64_t static Font.title.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for title);
}

uint64_t one-time initialization function for title2()
{
  uint64_t result;

  type metadata accessor for FontBox<Font.TextStyleProvider>(0, &lazy cache variable for type metadata for FontBox<Font.TextStyleProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.TextStyleProvider and conformance Font.TextStyleProvider, (uint64_t)&unk_250644910);
  result = swift_allocObject();
  *(_WORD *)(result + 16) = 1026;
  *(_QWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 32) = 1;
  static Font.title2 = result;
  return result;
}

uint64_t static Font.title2.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for title2);
}

uint64_t one-time initialization function for title3()
{
  uint64_t result;

  type metadata accessor for FontBox<Font.TextStyleProvider>(0, &lazy cache variable for type metadata for FontBox<Font.TextStyleProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.TextStyleProvider and conformance Font.TextStyleProvider, (uint64_t)&unk_250644910);
  result = swift_allocObject();
  *(_WORD *)(result + 16) = 1027;
  *(_QWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 32) = 1;
  static Font.title3 = result;
  return result;
}

uint64_t static Font.title3.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for title3);
}

uint64_t one-time initialization function for headline()
{
  uint64_t result;

  type metadata accessor for FontBox<Font.TextStyleProvider>(0, &lazy cache variable for type metadata for FontBox<Font.TextStyleProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.TextStyleProvider and conformance Font.TextStyleProvider, (uint64_t)&unk_250644910);
  result = swift_allocObject();
  *(_WORD *)(result + 16) = 1028;
  *(_QWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 32) = 1;
  static Font.headline = result;
  return result;
}

uint64_t static Font.headline.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for headline);
}

uint64_t one-time initialization function for subheadline()
{
  uint64_t result;

  type metadata accessor for FontBox<Font.TextStyleProvider>(0, &lazy cache variable for type metadata for FontBox<Font.TextStyleProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.TextStyleProvider and conformance Font.TextStyleProvider, (uint64_t)&unk_250644910);
  result = swift_allocObject();
  *(_WORD *)(result + 16) = 1029;
  *(_QWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 32) = 1;
  static Font.subheadline = result;
  return result;
}

uint64_t static Font.subheadline.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for subheadline);
}

uint64_t one-time initialization function for body()
{
  uint64_t result;

  type metadata accessor for FontBox<Font.TextStyleProvider>(0, &lazy cache variable for type metadata for FontBox<Font.TextStyleProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.TextStyleProvider and conformance Font.TextStyleProvider, (uint64_t)&unk_250644910);
  result = swift_allocObject();
  *(_WORD *)(result + 16) = 1030;
  *(_QWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 32) = 1;
  static Font.body = result;
  return result;
}

uint64_t static Font.body.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for body);
}

uint64_t one-time initialization function for callout()
{
  uint64_t result;

  type metadata accessor for FontBox<Font.TextStyleProvider>(0, &lazy cache variable for type metadata for FontBox<Font.TextStyleProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.TextStyleProvider and conformance Font.TextStyleProvider, (uint64_t)&unk_250644910);
  result = swift_allocObject();
  *(_WORD *)(result + 16) = 1031;
  *(_QWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 32) = 1;
  static Font.callout = result;
  return result;
}

uint64_t static Font.callout.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for callout);
}

uint64_t one-time initialization function for footnote()
{
  uint64_t result;

  type metadata accessor for FontBox<Font.TextStyleProvider>(0, &lazy cache variable for type metadata for FontBox<Font.TextStyleProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.TextStyleProvider and conformance Font.TextStyleProvider, (uint64_t)&unk_250644910);
  result = swift_allocObject();
  *(_WORD *)(result + 16) = 1032;
  *(_QWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 32) = 1;
  static Font.footnote = result;
  return result;
}

uint64_t static Font.footnote.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for footnote);
}

id one-time initialization function for footnote2()
{
  uint64_t v0;
  void *v2;

  if (one-time initialization token for footnote2 != -1)
    swift_once();
  v2 = (void *)static Font.PrivateTextStyle.footnote2;
  type metadata accessor for FontBox<Font.TextStyleProvider>(0, &lazy cache variable for type metadata for FontBox<Font.PrivateTextStyleProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.PrivateTextStyleProvider and conformance Font.PrivateTextStyleProvider, (uint64_t)&unk_250644CA8);
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 16) = v2;
  *(_BYTE *)(v0 + 40) = 1;
  static Font.footnote2 = v0;
  return v2;
}

{
  static Font.PrivateTextStyle.footnote2 = *MEMORY[0x24BDC4F88];
  return (id)static Font.PrivateTextStyle.footnote2;
}

void static Font.system(_:design:weight:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

uint64_t sub_234F82F84()
{
  char v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  id v6;

  v3 = (void *)*MEMORY[0x24BDC4E00];
  if (!*MEMORY[0x24BDC4E00])
  {
    __break(1u);
    JUMPOUT(0x234F82F98);
  }
  v4 = v3;
  type metadata accessor for FontBox<Font.TextStyleProvider>(0, &lazy cache variable for type metadata for FontBox<Font.PrivateTextStyleProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.PrivateTextStyleProvider and conformance Font.PrivateTextStyleProvider, (uint64_t)&unk_250644CA8);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v2;
  *(_QWORD *)(v5 + 24) = v3;
  *(_QWORD *)(v5 + 32) = v1;
  *(_BYTE *)(v5 + 40) = v0 & 1;
  v6 = v2;
  return v5;
}

uint64_t static Font.footnote2.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for footnote2);
}

uint64_t one-time initialization function for caption()
{
  uint64_t result;

  type metadata accessor for FontBox<Font.TextStyleProvider>(0, &lazy cache variable for type metadata for FontBox<Font.TextStyleProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.TextStyleProvider and conformance Font.TextStyleProvider, (uint64_t)&unk_250644910);
  result = swift_allocObject();
  *(_WORD *)(result + 16) = 1033;
  *(_QWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 32) = 1;
  static Font.caption = result;
  return result;
}

uint64_t static Font.caption.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for caption);
}

uint64_t one-time initialization function for caption2()
{
  uint64_t result;

  type metadata accessor for FontBox<Font.TextStyleProvider>(0, &lazy cache variable for type metadata for FontBox<Font.TextStyleProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.TextStyleProvider and conformance Font.TextStyleProvider, (uint64_t)&unk_250644910);
  result = swift_allocObject();
  *(_WORD *)(result + 16) = 1034;
  *(_QWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 32) = 1;
  static Font.caption2 = result;
  return result;
}

uint64_t static Font.caption2.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for caption2);
}

void static Font.extraLargeTitle.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t static Font.system(_:design:)(char *a1, char *a2)
{
  char v2;
  char v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  type metadata accessor for FontBox<Font.TextStyleProvider>(0, &lazy cache variable for type metadata for FontBox<Font.TextStyleProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.TextStyleProvider and conformance Font.TextStyleProvider, (uint64_t)&unk_250644910);
  result = swift_allocObject();
  *(_BYTE *)(result + 16) = v2;
  *(_BYTE *)(result + 17) = v3;
  *(_QWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 32) = 1;
  return result;
}

uint64_t static Font.system(_:design:weight:)(char *a1, char *a2, double a3)
{
  char v4;
  char v5;
  uint64_t result;

  v4 = *a1;
  v5 = *a2;
  type metadata accessor for FontBox<Font.TextStyleProvider>(0, &lazy cache variable for type metadata for FontBox<Font.TextStyleProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.TextStyleProvider and conformance Font.TextStyleProvider, (uint64_t)&unk_250644910);
  result = swift_allocObject();
  *(_BYTE *)(result + 16) = v4;
  *(_BYTE *)(result + 17) = v5;
  *(double *)(result + 24) = a3;
  *(_BYTE *)(result + 32) = 0;
  return result;
}

uint64_t sub_234F83260()
{
  char v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  id v6;

  v3 = (void *)*MEMORY[0x24BDC4E00];
  if (!*MEMORY[0x24BDC4E00])
  {
    __break(1u);
    JUMPOUT(0x234F83274);
  }
  v4 = v3;
  type metadata accessor for FontBox<Font.TextStyleProvider>(0, &lazy cache variable for type metadata for FontBox<Font.PrivateTextStyleProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.PrivateTextStyleProvider and conformance Font.PrivateTextStyleProvider, (uint64_t)&unk_250644CA8);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v2;
  *(_QWORD *)(v5 + 24) = v3;
  *(_QWORD *)(v5 + 32) = v1;
  *(_BYTE *)(v5 + 40) = v0 & 1;
  v6 = v2;
  return v5;
}

uint64_t static Font.system(_:design:weight:)(char *a1, void **a2, uint64_t a3, char a4)
{
  unint64_t v4;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t result;

  v4 = *a1;
  if (v4 >= 0xB)
  {
    result = _diagnoseUnexpectedEnumCase<A>(type:)();
    __break(1u);
  }
  else
  {
    v7 = *a2;
    v8 = (void *)**((_QWORD **)&unk_25066BCF0 + v4);
    type metadata accessor for FontBox<Font.TextStyleProvider>(0, &lazy cache variable for type metadata for FontBox<Font.PrivateTextStyleProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.PrivateTextStyleProvider and conformance Font.PrivateTextStyleProvider, (uint64_t)&unk_250644CA8);
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = v8;
    *(_QWORD *)(v9 + 24) = v7;
    *(_QWORD *)(v9 + 32) = a3;
    *(_BYTE *)(v9 + 40) = a4 & 1;
    v10 = v8;
    v11 = v7;
    return v9;
  }
  return result;
}

void one-time initialization function for allCases()
{
  static Font.TextStyle.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

uint64_t static Font.TextStyle.allCases.getter()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

void Font.TextStyle.hash(into:)()
{
  __asm { BR              X10 }
}

void sub_234F83454()
{
  Hasher._combine(_:)(1uLL);
}

void sub_234F834B4()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void Font.TextStyle.hashValue.getter()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_234F834F4()
{
  Hasher._combine(_:)(1uLL);
  return Hasher._finalize()();
}

void sub_234F83564()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void protocol witness for Hashable.hash(into:) in conformance Font.TextStyle()
{
  __asm { BR              X10 }
}

void sub_234F835A0()
{
  Hasher._combine(_:)(1uLL);
}

void sub_234F83600()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Font.TextStyle()
{
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_234F8363C()
{
  Hasher._combine(_:)(1uLL);
  return Hasher._finalize()();
}

void sub_234F836A8()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance Font.TextStyle@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  *a1 = static Font.TextStyle.allCases;
  return swift_bridgeObjectRetain();
}

id static Font.PrivateTextStyle.footnote2.getter@<X0>(void **a1@<X8>)
{
  return static Font.PrivateTextStyle.footnote2.getter(&one-time initialization token for footnote2, (void **)&static Font.PrivateTextStyle.footnote2, a1);
}

uint64_t one-time initialization function for emphasizedBody()
{
  uint64_t result;

  result = MEMORY[0x23B7C5DAC](0xD00000000000001FLL, 0x80000002352E5700);
  static Font.PrivateTextStyle.emphasizedBody = result;
  return result;
}

id static Font.PrivateTextStyle.emphasizedBody.getter@<X0>(void **a1@<X8>)
{
  return static Font.PrivateTextStyle.footnote2.getter(&one-time initialization token for emphasizedBody, (void **)&static Font.PrivateTextStyle.emphasizedBody, a1);
}

id one-time initialization function for shortCaption1()
{
  static Font.PrivateTextStyle.shortCaption1 = *MEMORY[0x24BDC4FA8];
  return (id)static Font.PrivateTextStyle.shortCaption1;
}

id static Font.PrivateTextStyle.shortCaption1.getter@<X0>(void **a1@<X8>)
{
  return static Font.PrivateTextStyle.footnote2.getter(&one-time initialization token for shortCaption1, (void **)&static Font.PrivateTextStyle.shortCaption1, a1);
}

uint64_t one-time initialization function for shortCaption2()
{
  uint64_t result;

  result = MEMORY[0x23B7C5DAC](0xD00000000000001ELL, 0x80000002352E56E0);
  static Font.PrivateTextStyle.shortCaption2 = result;
  return result;
}

id static Font.PrivateTextStyle.shortCaption2.getter@<X0>(void **a1@<X8>)
{
  return static Font.PrivateTextStyle.footnote2.getter(&one-time initialization token for shortCaption2, (void **)&static Font.PrivateTextStyle.shortCaption2, a1);
}

id static Font.PrivateTextStyle.footnote2.getter@<X0>(_QWORD *a1@<X0>, void **a2@<X1>, void **a3@<X8>)
{
  void *v5;

  if (*a1 != -1)
    swift_once();
  v5 = *a2;
  *a3 = *a2;
  return v5;
}

void Font.PrivateTextStyle.hash(into:)()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
  v2 = v1;
  _CFObject.hash(into:)();

}

uint64_t static Font.PrivateTextStyle.== infix(_:_:)()
{
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
  return static _CFObject.== infix(_:_:)() & 1;
}

Swift::Int Font.PrivateTextStyle.hashValue.getter()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
  v2 = v1;
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Font.PrivateTextStyle()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
  v2 = v1;
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Font.PrivateTextStyle()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
  v2 = v1;
  _CFObject.hash(into:)();

}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Font.PrivateTextStyle()
{
  void **v0;
  void *v1;
  id v2;

  Hasher.init(_seed:)();
  v1 = *v0;
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
  v2 = v1;
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Font.PrivateTextStyle()
{
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
  return static _CFObject.== infix(_:_:)() & 1;
}

void Font.TextStyleProvider.hashValue.getter()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_234F83C0C()
{
  Swift::UInt v0;
  Swift::UInt64 v1;
  int v2;
  Swift::UInt64 v3;

  Hasher._combine(_:)(1uLL);
  if ((_DWORD)v0 != 4)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v0);
    if (!v2)
      goto LABEL_3;
LABEL_8:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(0);
  if (v2)
    goto LABEL_8;
LABEL_3:
  Hasher._combine(_:)(1u);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = v1;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_234F83CE0()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t protocol witness for FontProvider.resolve(in:) in conformance Font.TextStyleProvider(__int16 *a1)
{
  char *v1;
  __int16 v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  char v17;

  v2 = *a1;
  v3 = *((_QWORD *)a1 + 1);
  v4 = *((_QWORD *)a1 + 2);
  v5 = *((_BYTE *)a1 + 24);
  v6 = *((_BYTE *)a1 + 25);
  v7 = v1[1];
  v8 = *((_QWORD *)v1 + 1);
  v9 = v1[16];
  v17 = *v1;
  v16 = v7;
  v11 = v2;
  v12 = v3;
  v13 = v4;
  v14 = v5;
  v15 = v6;
  return (*(uint64_t (**)(char *, char *, uint64_t, uint64_t, __int16 *))(v4 + 8))(&v17, &v16, v8, v9, &v11);
}

uint64_t protocol witness for FontProvider.resolveTraits(in:) in conformance Font.TextStyleProvider(__int16 *a1)
{
  char *v1;
  __int16 v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  char v17;

  v2 = *a1;
  v3 = *((_QWORD *)a1 + 1);
  v4 = *((_QWORD *)a1 + 2);
  v5 = *((_BYTE *)a1 + 24);
  v6 = *((_BYTE *)a1 + 25);
  v7 = v1[1];
  v8 = *((_QWORD *)v1 + 1);
  v9 = v1[16];
  v17 = *v1;
  v16 = v7;
  v11 = v2;
  v12 = v3;
  v13 = v4;
  v14 = v5;
  v15 = v6;
  return (*(uint64_t (**)(char *, char *, uint64_t, uint64_t, __int16 *))(v4 + 16))(&v17, &v16, v8, v9, &v11);
}

void protocol witness for Hashable.hash(into:) in conformance Font.TextStyleProvider()
{
  __asm { BR              X9 }
}

void sub_234F83E0C()
{
  Swift::UInt v0;
  Swift::UInt64 v1;
  int v2;
  Swift::UInt64 v3;

  Hasher._combine(_:)(1uLL);
  if ((_DWORD)v0 != 4)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v0);
    if (!v2)
      goto LABEL_3;
LABEL_8:
    Hasher._combine(_:)(0);
    return;
  }
  Hasher._combine(_:)(0);
  if (v2)
    goto LABEL_8;
LABEL_3:
  Hasher._combine(_:)(1u);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = v1;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
}

void sub_234F83EB4()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Font.TextStyleProvider()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_234F83F04()
{
  Swift::UInt v0;
  Swift::UInt64 v1;
  int v2;
  Swift::UInt64 v3;

  Hasher._combine(_:)(1uLL);
  if ((_DWORD)v0 != 4)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v0);
    if (!v2)
      goto LABEL_3;
LABEL_8:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(0);
  if (v2)
    goto LABEL_8;
LABEL_3:
  Hasher._combine(_:)(1u);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = v1;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_234F83FD8()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

Swift::Int Font.PrivateTextStyleProvider.hashValue.getter(uint64_t a1, void *a2, Swift::UInt64 a3, char a4)
{
  id v7;
  Swift::UInt64 v8;

  Hasher.init(_seed:)();
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
  _CFObject.hash(into:)();
  if (!a2)
  {
    Hasher._combine(_:)(0);
    if ((a4 & 1) == 0)
      goto LABEL_3;
LABEL_8:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(1u);
  v7 = a2;
  _CFObject.hash(into:)();

  if ((a4 & 1) != 0)
    goto LABEL_8;
LABEL_3:
  Hasher._combine(_:)(1u);
  if ((a3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v8 = a3;
  else
    v8 = 0;
  Hasher._combine(_:)(v8);
  return Hasher._finalize()();
}

uint64_t protocol witness for FontProvider.resolve(in:) in conformance Font.PrivateTextStyleProvider(__int16 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;

  v3 = *v1;
  v2 = v1[1];
  v4 = v1[2];
  v5 = *((unsigned __int8 *)v1 + 24);
  v6 = *((_QWORD *)a1 + 1);
  v7 = *((_QWORD *)a1 + 2);
  v8 = *((_BYTE *)a1 + 24);
  v9 = *((_BYTE *)a1 + 25);
  v11 = *a1;
  v12 = v6;
  v13 = v7;
  v14 = v8;
  v15 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))(v7 + 40))(v3, v2, v4, v5, &v11);
}

uint64_t protocol witness for FontProvider.resolveTraits(in:) in conformance Font.PrivateTextStyleProvider(__int16 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;

  v3 = *v1;
  v2 = v1[1];
  v4 = v1[2];
  v5 = *((unsigned __int8 *)v1 + 24);
  v6 = *((_QWORD *)a1 + 1);
  v7 = *((_QWORD *)a1 + 2);
  v8 = *((_BYTE *)a1 + 24);
  v9 = *((_BYTE *)a1 + 25);
  v11 = *a1;
  v12 = v6;
  v13 = v7;
  v14 = v8;
  v15 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))(v7 + 48))(v3, v2, v4, v5, &v11);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Font.PrivateTextStyleProvider()
{
  uint64_t v0;

  return Font.PrivateTextStyleProvider.hashValue.getter(*(_QWORD *)v0, *(void **)(v0 + 8), *(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

void protocol witness for Hashable.hash(into:) in conformance Font.PrivateTextStyleProvider()
{
  uint64_t v0;
  void *v1;
  Swift::UInt64 v2;
  int v3;
  id v4;
  Swift::UInt64 v5;

  v1 = *(void **)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(unsigned __int8 *)(v0 + 24);
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
  _CFObject.hash(into:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    v4 = v1;
    _CFObject.hash(into:)();

    if (v3)
    {
LABEL_3:
      Hasher._combine(_:)(0);
      return;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v3)
      goto LABEL_3;
  }
  Hasher._combine(_:)(1u);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = v2;
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Font.PrivateTextStyleProvider()
{
  uint64_t v0;
  void *v1;
  Swift::UInt64 v2;
  int v3;
  id v4;
  Swift::UInt64 v5;

  v1 = *(void **)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(unsigned __int8 *)(v0 + 24);
  Hasher.init(_seed:)();
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
  _CFObject.hash(into:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    v4 = v1;
    _CFObject.hash(into:)();

    if (v3)
    {
LABEL_3:
      Hasher._combine(_:)(0);
      return Hasher._finalize()();
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v3)
      goto LABEL_3;
  }
  Hasher._combine(_:)(1u);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = v2;
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Font.PrivateTextStyleProvider(uint64_t a1, uint64_t a2)
{
  return specialized static Font.PrivateTextStyleProvider.== infix(_:_:)(*(_QWORD *)a1, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24), *(_QWORD *)a2, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16), *(_BYTE *)(a2 + 24));
}

SwiftUI::DynamicTypeSize_optional __swiftcall DynamicTypeSize.init(_:)(CFStringRef a1)
{
  char *v1;
  char *v3;
  __CFString *v4;
  char v5;
  SwiftUI::DynamicTypeSize_optional result;
  char v7;
  __CFString *v8;
  char v9;
  __CFString *v10;
  char v11;
  __CFString *v12;
  char v13;
  __CFString *v14;
  char v15;
  __CFString *v16;
  char v17;
  __CFString *v18;
  char v19;
  __CFString *v20;
  char v21;
  __CFString *v22;
  char v23;
  __CFString *v24;
  char v25;
  id v26;
  char v27;
  id v28;
  char v29;

  v3 = v1;
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
  v4 = (id)a1;
  v5 = static _CFObject.== infix(_:_:)();

  if ((v5 & 1) != 0)
  {

    v7 = 0;
  }
  else
  {
    v8 = v4;
    v9 = static _CFObject.== infix(_:_:)();

    if ((v9 & 1) != 0)
    {

      v7 = 1;
    }
    else
    {
      v10 = v8;
      v11 = static _CFObject.== infix(_:_:)();

      if ((v11 & 1) != 0)
      {

        v7 = 2;
      }
      else
      {
        v12 = v10;
        v13 = static _CFObject.== infix(_:_:)();

        if ((v13 & 1) != 0)
        {

          v7 = 3;
        }
        else
        {
          v14 = v12;
          v15 = static _CFObject.== infix(_:_:)();

          if ((v15 & 1) != 0)
          {

            v7 = 4;
          }
          else
          {
            v16 = v14;
            v17 = static _CFObject.== infix(_:_:)();

            if ((v17 & 1) != 0)
            {

              v7 = 5;
            }
            else
            {
              v18 = v16;
              v19 = static _CFObject.== infix(_:_:)();

              if ((v19 & 1) != 0)
              {

                v7 = 6;
              }
              else
              {
                v20 = v18;
                v21 = static _CFObject.== infix(_:_:)();

                if ((v21 & 1) != 0)
                {

                  v7 = 7;
                }
                else
                {
                  v22 = v20;
                  v23 = static _CFObject.== infix(_:_:)();

                  if ((v23 & 1) != 0)
                  {

                    v7 = 8;
                  }
                  else
                  {
                    v24 = v22;
                    v25 = static _CFObject.== infix(_:_:)();

                    if ((v25 & 1) != 0)
                    {

                      v7 = 9;
                    }
                    else
                    {
                      v26 = v24;
                      v27 = static _CFObject.== infix(_:_:)();

                      if ((v27 & 1) != 0)
                      {

                        v7 = 10;
                      }
                      else
                      {
                        v28 = v26;
                        v29 = static _CFObject.== infix(_:_:)();

                        if ((v29 & 1) != 0)
                          v7 = 11;
                        else
                          v7 = 12;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  *v3 = v7;
  return result;
}

void specialized static Font.TextStyle.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_234F84740()
{
  uint64_t v0;

  return ((uint64_t (*)(void))((char *)sub_234F847A4 + 4 * byte_2352B7700[v0]))();
}

BOOL sub_234F847A4@<W0>(uint64_t a1@<X8>)
{
  return a1 == 1;
}

void sub_234F84800()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

BOOL specialized static Font.TextStyleProvider.== infix(_:_:)(double *a1, uint64_t a2)
{
  int v2;
  double v3;
  char v4;
  int v5;
  double v6;
  char v7;
  char v8;
  char v11;
  char v12;

  v2 = *((unsigned __int8 *)a1 + 1);
  v3 = a1[1];
  v4 = *((_BYTE *)a1 + 16);
  v5 = *(unsigned __int8 *)(a2 + 1);
  v6 = *(double *)(a2 + 8);
  v7 = *(_BYTE *)(a2 + 16);
  v12 = *(_BYTE *)a1;
  specialized static Font.TextStyle.== infix(_:_:)((uint64_t)&v12);
  if ((v8 & 1) == 0)
    return 0;
  if (v2 == 4)
  {
    if (v5 != 4)
      return 0;
  }
  else if (v5 == 4 || v2 != v5)
  {
    return 0;
  }
  if ((v4 & 1) == 0)
  {
    if (v3 == v6)
      v11 = v7;
    else
      v11 = 1;
    return (v11 & 1) == 0;
  }
  return (v7 & 1) != 0;
}

uint64_t specialized static Font.PrivateTextStyleProvider.== infix(_:_:)(uint64_t a1, void *a2, uint64_t a3, char a4, uint64_t a5, void *a6, uint64_t a7, char a8)
{
  id v14;
  id v15;
  char v16;

  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
  if ((static _CFObject.== infix(_:_:)() & 1) == 0)
    return 0;
  if (a2)
  {
    if (!a6)
      return 0;
    v14 = a6;
    v15 = a2;
    v16 = static _CFObject.== infix(_:_:)();

    if ((v16 & 1) == 0)
      return 0;
  }
  else if (a6)
  {
    return 0;
  }
  if ((a4 & 1) != 0)
  {
    if ((a8 & 1) != 0)
      return 1;
  }
  else if ((a8 & 1) == 0 && *(double *)&a3 == *(double *)&a7)
  {
    return 1;
  }
  return 0;
}

uint64_t specialized Font.TextStyle.ctTextStyle.getter()
{
  char *v0;
  unint64_t v1;
  uint64_t result;

  v1 = *v0;
  if (v1 < 0xB)
    return **((_QWORD **)&unk_25066BCF0 + v1);
  result = _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

uint64_t specialized DynamicTypeSize.ctTextSize.getter()
{
  char *v0;

  return **((_QWORD **)&unk_25066BD48 + *v0);
}

unint64_t lazy protocol witness table accessor for type Font.TextStyleProvider and conformance Font.TextStyleProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.TextStyleProvider and conformance Font.TextStyleProvider;
  if (!lazy protocol witness table cache variable for type Font.TextStyleProvider and conformance Font.TextStyleProvider)
  {
    result = MEMORY[0x23B7C9C04]("YD;\x1B\\:\n", &unk_250644910);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.TextStyleProvider and conformance Font.TextStyleProvider);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.TextStyleProvider and conformance Font.TextStyleProvider;
  if (!lazy protocol witness table cache variable for type Font.TextStyleProvider and conformance Font.TextStyleProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.TextStyleProvider, &unk_250644910);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.TextStyleProvider and conformance Font.TextStyleProvider);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.TextStyleProvider and conformance Font.TextStyleProvider;
  if (!lazy protocol witness table cache variable for type Font.TextStyleProvider and conformance Font.TextStyleProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.TextStyleProvider, &unk_250644910);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.TextStyleProvider and conformance Font.TextStyleProvider);
  }
  return result;
}

void type metadata accessor for FontBox<Font.TextStyleProvider>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v7 = a3();
    v9 = type metadata accessor for FontBox(a1, a4, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t lazy protocol witness table accessor for type Font.PrivateTextStyleProvider and conformance Font.PrivateTextStyleProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.PrivateTextStyleProvider and conformance Font.PrivateTextStyleProvider;
  if (!lazy protocol witness table cache variable for type Font.PrivateTextStyleProvider and conformance Font.PrivateTextStyleProvider)
  {
    result = MEMORY[0x23B7C9C04]("uD;\x1BT:\n", &unk_250644CA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.PrivateTextStyleProvider and conformance Font.PrivateTextStyleProvider);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.PrivateTextStyleProvider and conformance Font.PrivateTextStyleProvider;
  if (!lazy protocol witness table cache variable for type Font.PrivateTextStyleProvider and conformance Font.PrivateTextStyleProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.PrivateTextStyleProvider, &unk_250644CA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.PrivateTextStyleProvider and conformance Font.PrivateTextStyleProvider);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.PrivateTextStyleProvider and conformance Font.PrivateTextStyleProvider;
  if (!lazy protocol witness table cache variable for type Font.PrivateTextStyleProvider and conformance Font.PrivateTextStyleProvider)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.PrivateTextStyleProvider, &unk_250644CA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.PrivateTextStyleProvider and conformance Font.PrivateTextStyleProvider);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Font.TextStyle and conformance Font.TextStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.TextStyle and conformance Font.TextStyle;
  if (!lazy protocol witness table cache variable for type Font.TextStyle and conformance Font.TextStyle)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.TextStyle, &type metadata for Font.TextStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.TextStyle and conformance Font.TextStyle);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in Font.TextStyle()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type [Font.TextStyle] and conformance [A], (uint64_t (*)(uint64_t))type metadata accessor for [Font.TextStyle], MEMORY[0x24BEE12E0]);
}

void type metadata accessor for [Font.TextStyle]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [Font.TextStyle])
  {
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [Font.TextStyle]);
  }
}

unint64_t lazy protocol witness table accessor for type Font.PrivateTextStyle and conformance Font.PrivateTextStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.PrivateTextStyle and conformance Font.PrivateTextStyle;
  if (!lazy protocol witness table cache variable for type Font.PrivateTextStyle and conformance Font.PrivateTextStyle)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.PrivateTextStyle, &type metadata for Font.PrivateTextStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.PrivateTextStyle and conformance Font.PrivateTextStyle);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Font.TextStyle(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF3)
    goto LABEL_17;
  if (a2 + 13 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 13) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 13;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 13;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 13;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xE;
  v8 = v6 - 14;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Font.TextStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 13 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 13) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF3)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF2)
    return ((uint64_t (*)(void))((char *)&loc_234F84CD8 + 4 * byte_2352B7713[v4]))();
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_234F84D0C + 4 * byte_2352B770E[v4]))();
}

uint64_t sub_234F84D0C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F84D14(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234F84D1CLL);
  return result;
}

uint64_t sub_234F84D28(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234F84D30);
  *(_BYTE *)result = a2 + 13;
  return result;
}

uint64_t sub_234F84D34(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F84D3C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Font.TextStyle()
{
  return &type metadata for Font.TextStyle;
}

ValueMetadata *type metadata accessor for Font.PrivateTextStyle()
{
  return &type metadata for Font.PrivateTextStyle;
}

void destroy for Font.PrivateTextStyleProvider(id *a1)
{

}

uint64_t initializeWithCopy for Font.PrivateTextStyleProvider(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v5 = v3;
  v6 = v4;
  return a1;
}

uint64_t assignWithCopy for Font.PrivateTextStyleProvider(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a1 + 8);
  v8 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  v9 = v8;

  v10 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v10;
  return a1;
}

uint64_t assignWithTake for Font.PrivateTextStyleProvider(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

void *type metadata accessor for Font.PrivateTextStyleProvider()
{
  return &unk_250644CA8;
}

uint64_t getEnumTagSinglePayload for Font.TextStyleProvider(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 252);
  if (*(unsigned __int8 *)(a1 + 1) <= 4u)
    v3 = 4;
  else
    v3 = *(unsigned __int8 *)(a1 + 1);
  v4 = v3 - 5;
  if (*(unsigned __int8 *)(a1 + 1) < 4u)
    v5 = -1;
  else
    v5 = v4;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Font.TextStyleProvider(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 252;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 1) = a2 + 4;
  }
  return result;
}

void *type metadata accessor for Font.TextStyleProvider()
{
  return &unk_250644910;
}

unint64_t instantiation function for generic protocol witness table for Font.PrivateTextStyleProvider(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Font.PrivateTextStyleProvider and conformance Font.PrivateTextStyleProvider();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Font.TextStyleProvider(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Font.TextStyleProvider and conformance Font.TextStyleProvider();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void static Font.caption3.getter()
{
  static Font.extraLargeTitle.getter();
}

void static Font.extraLargeTitle2.getter()
{
  static Font.extraLargeTitle.getter();
}

uint64_t EnvironmentValues.fontModifiers.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2;
  }
  else
  {
    v4 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
    swift_bridgeObjectRetain();
    swift_release_n();
    return v5;
  }
}

uint64_t AnyFontModifier.isboldFontWeightModifier.getter()
{
  uint64_t result;

  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for AnyDynamicFontModifier<Font.WeightModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.WeightModifier and conformance Font.WeightModifier, (uint64_t)&type metadata for Font.WeightModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnyDynamicFontModifier);
  result = swift_dynamicCastClass();
  if (result)
    return *(double *)(result + 16) >= 0.3;
  return result;
}

uint64_t static AnyFontModifier.dynamic<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AnyDynamicFontModifier(0, v7, v8, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, a2);
  v10 = swift_allocObject();
  (*(void (**)(uint64_t, char *))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v10 + 136) - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)v10 + 152), v6);
  return v10;
}

BOOL static Font.Weight.== infix(_:_:)(double a1, double a2)
{
  return a1 == a2;
}

uint64_t Font.italic()(uint64_t a1)
{
  return Font.italic()(a1, type metadata accessor for FontBox<Font.StaticModifierProvider<Font.ItalicModifier>>);
}

uint64_t Font.modifier<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v9 = a2;
  v4 = type metadata accessor for Font.StaticModifierProvider(0, a3, a4, a4);
  v5 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.StaticModifierProvider<A>, v4);
  v7 = Font.init<A>(_:)((uint64_t)&v9, v4, v5, v6);
  swift_retain();
  return v7;
}

uint64_t Font.smallCaps()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for FontBox<Font.ModifierProvider<Font.FeatureSettingModifier>>(0);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = a1;
  *(_OWORD *)(v2 + 24) = xmmword_2352B79D0;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v2;
  *(_OWORD *)(v3 + 24) = xmmword_2352B79E0;
  swift_retain();
  return v3;
}

uint64_t Font.lowercaseSmallCaps()(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for FontBox<Font.ModifierProvider<Font.FeatureSettingModifier>>(0);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = a1;
  *(_OWORD *)(v2 + 24) = xmmword_2352B79D0;
  swift_retain();
  return v2;
}

uint64_t Font.uppercaseSmallCaps()(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for FontBox<Font.ModifierProvider<Font.FeatureSettingModifier>>(0);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = a1;
  *(_OWORD *)(v2 + 24) = xmmword_2352B79E0;
  swift_retain();
  return v2;
}

_QWORD *Font.feature(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  type metadata accessor for FontBox<Font.ModifierProvider<Font.FeatureSettingModifier>>(0);
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = a3;
  v6[3] = a1;
  v6[4] = a2;
  swift_retain();
  return v6;
}

uint64_t Font.monospacedDigit()(uint64_t a1)
{
  return Font.italic()(a1, type metadata accessor for FontBox<Font.StaticModifierProvider<Font.MonospacedDigitModifier>>);
}

uint64_t Font.italic()(uint64_t a1, void (*a2)(_QWORD))
{
  uint64_t v3;

  a2(0);
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = a1;
  swift_retain();
  return v3;
}

uint64_t Font.weight(_:)(uint64_t a1, double a2)
{
  uint64_t v4;

  type metadata accessor for FontBox<Font.ModifierProvider<Font.WeightModifier>>(0);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(double *)(v4 + 24) = a2;
  swift_retain();
  return v4;
}

uint64_t Font.modifier<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v6 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Font.ModifierProvider(0, v9, v10, v10);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v19 - v13;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v8, a1, a3, v12);
  *(_QWORD *)v14 = a2;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v14[*(int *)(v11 + 36)], v8, a3);
  v15 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.ModifierProvider<A>, v11);
  v17 = Font.init<A>(_:)((uint64_t)v14, v11, v15, v16);
  swift_retain();
  return v17;
}

uint64_t Font.width(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  type metadata accessor for FontBox<Font.ModifierProvider<Font.WidthModifier>>(0);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a2;
  *(_QWORD *)(v4 + 24) = v3;
  swift_retain();
  return v4;
}

uint64_t Font.bold()(uint64_t a1)
{
  return Font.italic()(a1, type metadata accessor for FontBox<Font.StaticModifierProvider<Font.BoldModifier>>);
}

uint64_t Font.monospaced()(uint64_t a1)
{
  return Font.italic()(a1, type metadata accessor for FontBox<Font.StaticModifierProvider<Font.MonospacedModifier>>);
}

uint64_t Font.leading(_:)(char *a1, uint64_t a2)
{
  return Font.leading(_:)(a1, a2, type metadata accessor for FontBox<Font.ModifierProvider<Font.LeadingModifier>>);
}

uint64_t Font._leading(_:)(_BYTE *a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;

  v3 = 0x201u >> (8 * *a1);
  type metadata accessor for FontBox<Font.ModifierProvider<Font.LeadingModifier>>(0);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a2;
  *(_BYTE *)(v4 + 24) = v3;
  swift_retain();
  return v4;
}

uint64_t Font.feature(_:)(uint64_t a1, uint64_t a2)
{
  return Font.feature(_:)(a1, a2, type metadata accessor for FontBox<Font.ModifierProvider<Font.OpenTypeFeatureSettingModifier>>);
}

uint64_t Font.features(_:)(uint64_t a1, uint64_t a2)
{
  return Font.feature(_:)(a1, a2, type metadata accessor for FontBox<Font.ModifierProvider<Font.FeatureDictionariesSettingModifier>>);
}

uint64_t Font.feature(_:)(uint64_t a1, uint64_t a2, void (*a3)(_QWORD))
{
  uint64_t v5;

  a3(0);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a2;
  *(_QWORD *)(v5 + 24) = a1;
  swift_bridgeObjectRetain();
  swift_retain();
  return v5;
}

uint64_t Font._stylisticAlternative(_:)(char *a1, uint64_t a2)
{
  return Font.leading(_:)(a1, a2, type metadata accessor for FontBox<Font.ModifierProvider<Font.StylisticAlternativeModifier>>);
}

uint64_t Font.leading(_:)(char *a1, uint64_t a2, void (*a3)(_QWORD))
{
  char v4;
  uint64_t v5;

  v4 = *a1;
  a3(0);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a2;
  *(_BYTE *)(v5 + 24) = v4;
  swift_retain();
  return v5;
}

uint64_t Font.variation(_:_:)(char *a1, uint64_t a2, double a3)
{
  char v5;
  uint64_t v6;

  v5 = *a1;
  type metadata accessor for FontBox<Font.ModifierProvider<Font.VariationModifier>>(0);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a2;
  *(_BYTE *)(v6 + 24) = v5;
  *(double *)(v6 + 32) = a3;
  swift_retain();
  return v6;
}

uint64_t Font.VariationAxisIdentifier.init(rawValue:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  if (result <= 1936486003)
  {
    if (result == 1769234796)
    {
      *a2 = 4;
      return result;
    }
    if (result == 1869640570)
    {
      *a2 = 3;
      return result;
    }
  }
  else
  {
    switch(result)
    {
      case 2003265652:
        *a2 = 0;
        return result;
      case 2003072104:
        *a2 = 1;
        return result;
      case 1936486004:
        *a2 = 2;
        return result;
    }
  }
  *a2 = 5;
  return result;
}

uint64_t Font.VariationAxisIdentifier.rawValue.getter()
{
  char *v0;

  return *(_QWORD *)&aThgw[8 * *v0];
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Font.VariationAxisIdentifier(char *a1, char *a2)
{
  return *(_QWORD *)&aThgw[8 * *a1] == *(_QWORD *)&aThgw[8 * *a2];
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Font.VariationAxisIdentifier@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return Font.VariationAxisIdentifier.init(rawValue:)(*a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Font.VariationAxisIdentifier(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = *(_QWORD *)&aThgw[8 * *v1];
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Font.VariationAxisIdentifier()
{
  char *v0;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(_QWORD *)&aThgw[8 * *v0]);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Font.VariationAxisIdentifier()
{
  char *v0;

  Hasher._combine(_:)(*(_QWORD *)&aThgw[8 * *v0]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Font.VariationAxisIdentifier()
{
  char *v0;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(_QWORD *)&aThgw[8 * *v0]);
  return Hasher._finalize()();
}

uint64_t Font.grade(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for FontBox<Font.ModifierProvider<Font.GradeModifier>>(0);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a2;
  *(_QWORD *)(v4 + 24) = a1;
  swift_retain();
  return v4;
}

void Font.Weight.value.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*Font.Weight.value.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double static Font.Weight.ultraLight.getter()
{
  return -0.8;
}

double static Font.Weight.thin.getter()
{
  return -0.6;
}

double static Font.Weight.light.getter()
{
  return -0.4;
}

double static Font.Weight.regular.getter()
{
  return 0.0;
}

double static Font.Weight.medium.getter()
{
  return 0.23;
}

double static Font.Weight.semibold.getter()
{
  return 0.3;
}

double static Font.Weight.bold.getter()
{
  return 0.4;
}

double static Font.Weight.heavy.getter()
{
  return 0.56;
}

double static Font.Weight.black.getter()
{
  return 0.62;
}

void Font.Weight.hash(into:)(double a1)
{
  Swift::UInt64 v1;

  if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v1 = *(_QWORD *)&a1;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
}

Swift::Int Font.Weight.hashValue.getter(double a1)
{
  Swift::UInt64 v2;

  Hasher.init(_seed:)();
  if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = *(_QWORD *)&a1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

double Font.Width.value.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

uint64_t (*Font.Width.value.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double one-time initialization function for compressed()
{
  double result;

  result = *MEMORY[0x24BDC4E88];
  static Font.Width.compressed = *MEMORY[0x24BDC4E88];
  return result;
}

void Font.Width.init(_:)(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
}

double static Font.Width.compressed.getter@<D0>(_QWORD *a1@<X8>)
{
  return static Calendar.Component.Magnitude.max.getter(&one-time initialization token for compressed, (double *)&static Font.Width.compressed, a1);
}

double one-time initialization function for condensed()
{
  double result;

  result = *MEMORY[0x24BDC4E90];
  static Font.Width.condensed = *MEMORY[0x24BDC4E90];
  return result;
}

double static Font.Width.condensed.getter@<D0>(_QWORD *a1@<X8>)
{
  return static Calendar.Component.Magnitude.max.getter(one-time initialization token for condensed, (double *)&static Font.Width.condensed, a1);
}

double one-time initialization function for standard()
{
  double result;

  result = *MEMORY[0x24BDC4EC8];
  static Font.Width.standard = *MEMORY[0x24BDC4EC8];
  return result;
}

double static Font.Width.standard.getter@<D0>(_QWORD *a1@<X8>)
{
  return static Calendar.Component.Magnitude.max.getter(&one-time initialization token for standard, (double *)&static Font.Width.standard, a1);
}

double one-time initialization function for expanded()
{
  double result;

  result = *MEMORY[0x24BDC4E98];
  static Font.Width.expanded = *MEMORY[0x24BDC4E98];
  return result;
}

double static Font.Width.expanded.getter@<D0>(_QWORD *a1@<X8>)
{
  return static Calendar.Component.Magnitude.max.getter(one-time initialization token for expanded, (double *)&static Font.Width.expanded, a1);
}

uint64_t Font._StylisticAlternative.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0 + 1;
}

uint64_t Font._StylisticAlternative.init(rawValue:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  v2 = 0;
  v3 = 2;
  switch(result)
  {
    case 1:
      goto LABEL_3;
    case 2:
      v2 = 1;
LABEL_3:
      v3 = v2;
      goto LABEL_4;
    case 3:
LABEL_4:
      *a2 = v3;
      break;
    case 4:
      *a2 = 3;
      break;
    case 5:
      *a2 = 4;
      break;
    case 6:
      *a2 = 5;
      break;
    case 7:
      *a2 = 6;
      break;
    case 8:
      *a2 = 7;
      break;
    case 9:
      *a2 = 8;
      break;
    case 10:
      *a2 = 9;
      break;
    case 11:
      *a2 = 10;
      break;
    case 12:
      *a2 = 11;
      break;
    case 13:
      *a2 = 12;
      break;
    case 14:
      *a2 = 13;
      break;
    case 15:
      *a2 = 14;
      break;
    case 16:
      *a2 = 15;
      break;
    case 17:
      *a2 = 16;
      break;
    case 18:
      *a2 = 17;
      break;
    case 19:
      *a2 = 18;
      break;
    case 20:
      *a2 = 19;
      break;
    default:
      *a2 = 20;
      break;
  }
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Font._StylisticAlternative@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  return Font._StylisticAlternative.init(rawValue:)(*a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Font._StylisticAlternative(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1 + 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Font._StylisticAlternative()
{
  unsigned __int8 *v0;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0 + 1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Font._StylisticAlternative()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0 + 1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Font._StylisticAlternative()
{
  unsigned __int8 *v0;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0 + 1);
  return Hasher._finalize()();
}

BOOL static Font.Leading.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void Font.Leading.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

void static Font.BoldModifier.modify(descriptor:in:)(CTFontDescriptorRef *a1, int a2)
{
  static Font.BoldModifier.modify(descriptor:in:)(a1, a2, 2u);
}

uint64_t static Font.BoldModifier.modify(traits:)(uint64_t result)
{
  *(_QWORD *)(result + 8) = 0x3FD999999999999ALL;
  return result;
}

void protocol witness for static StaticFontModifier.modify(descriptor:in:) in conformance Font.BoldModifier(CTFontDescriptorRef *a1)
{
  CTFontDescriptorRef v2;
  CTFontDescriptorRef CopyWithSymbolicTraits;
  const __CTFontDescriptor *v4;

  v2 = *a1;
  CopyWithSymbolicTraits = CTFontDescriptorCreateCopyWithSymbolicTraits(*a1, 2u, 2u);
  if (CopyWithSymbolicTraits)
  {
    v4 = CopyWithSymbolicTraits;

    v2 = v4;
  }
  *a1 = v2;
}

uint64_t protocol witness for static StaticFontModifier.modify(traits:) in conformance Font.BoldModifier(uint64_t result)
{
  *(_QWORD *)(result + 8) = 0x3FD999999999999ALL;
  return result;
}

void static Font.ItalicModifier.modify(descriptor:in:)(CTFontDescriptorRef *a1, int a2)
{
  static Font.BoldModifier.modify(descriptor:in:)(a1, a2, 1u);
}

void static Font.BoldModifier.modify(descriptor:in:)(CTFontDescriptorRef *a1, int a2, CTFontSymbolicTraits symTraitValue)
{
  CTFontDescriptorRef v4;
  CTFontDescriptorRef CopyWithSymbolicTraits;
  const __CTFontDescriptor *v6;

  v4 = *a1;
  CopyWithSymbolicTraits = CTFontDescriptorCreateCopyWithSymbolicTraits(*a1, symTraitValue, symTraitValue);
  if (CopyWithSymbolicTraits)
  {
    v6 = CopyWithSymbolicTraits;

    v4 = v6;
  }
  *a1 = v4;
}

void protocol witness for static StaticFontModifier.modify(descriptor:in:) in conformance Font.ItalicModifier(CTFontDescriptorRef *a1)
{
  CTFontDescriptorRef v2;
  CTFontDescriptorRef CopyWithSymbolicTraits;
  const __CTFontDescriptor *v4;

  v2 = *a1;
  CopyWithSymbolicTraits = CTFontDescriptorCreateCopyWithSymbolicTraits(*a1, 1u, 1u);
  if (CopyWithSymbolicTraits)
  {
    v4 = CopyWithSymbolicTraits;

    v2 = v4;
  }
  *a1 = v2;
}

void Font.DesignModifier.modify(descriptor:in:)(CTFontDescriptorRef *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;

  v2 = *v1;
  if (!CTFontDescriptorCopyAttribute(*a1, (CFStringRef)*MEMORY[0x24BDC4DE0])
    || (_sSDySSypGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for [String : Any]),
        !swift_dynamicCast()))
  {
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  }
  __asm { BR              X9 }
}

void sub_234F86048()
{
  const __CTFontDescriptor **v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  const __CTFontDescriptor *v11;
  uint64_t inited;
  id v13;
  const __CFDictionary *isa;
  CTFontDescriptorRef CopyWithAttributes;
  _OWORD v16[2];
  __int128 v17;
  uint64_t v18;

  v3 = (void *)*MEMORY[0x24BDC4E00];
  if (!*MEMORY[0x24BDC4E00])
  {
    __break(1u);
    JUMPOUT(0x234F8605CLL);
  }
  if (!*MEMORY[0x24BDC4E28])
  {
    __break(1u);
    JUMPOUT(0x234F861ECLL);
  }
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;
  type metadata accessor for CFStringRef(0);
  v18 = v7;
  *(_QWORD *)&v17 = v3;
  outlined init with take of Any(&v17, v16);
  v8 = v3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v16, v4, v6, isUniquelyReferenced_nonNull_native);
  v10 = v1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = *v0;
  type metadata accessor for _ContiguousArrayStorage<(CFStringRef, [String : Any])>();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23527E860;
  *(_QWORD *)(inited + 32) = v2;
  *(_QWORD *)(inited + 40) = v10;
  v13 = v2;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  _sSDySSypGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for [String : Any]);
  lazy protocol witness table accessor for type AnyTextSizingModifier and conformance AnyTextSizingModifier((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, 255, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  CopyWithAttributes = CTFontDescriptorCreateCopyWithAttributes(v11, isa);

  *v0 = CopyWithAttributes;
}

void Font.WeightModifier.modify(descriptor:in:)(CTFontDescriptorRef *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  const __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const __CTFontDescriptor *v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t inited;
  uint64_t v15;
  const __CFDictionary *isa;
  CTFontDescriptorRef CopyWithAttributes;
  CFTypeRef v18;
  CFTypeRef v19;
  CFDictionaryRef v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  CFTypeRef v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  const __CFDictionary *v34;
  CTFontDescriptorRef v35;
  _OWORD v36[2];
  __int128 v37;
  uint64_t ObjectType;
  unint64_t v39;

  if ((*(_BYTE *)(a2 + 25) & 1) == 0)
  {
    v4 = *v2;
    v5 = (const __CFString *)*MEMORY[0x24BDC4DE0];
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v11 = v10;
    v12 = *a1;
    if (CTFontDescriptorIsSystemUIFont())
    {
      v13 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598];
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(String, [String : CGFloat])>, (uint64_t (*)(uint64_t))type metadata accessor for (String, [String : CGFloat]), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_23527E860;
      *(_QWORD *)(inited + 32) = v6;
      *(_QWORD *)(inited + 40) = v8;
      type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(String, CGFloat)>, (uint64_t (*)(uint64_t))type metadata accessor for (String, CGFloat), v13);
      v15 = swift_initStackObject();
      *(_OWORD *)(v15 + 16) = xmmword_23527E860;
      *(_QWORD *)(v15 + 32) = v9;
      *(_QWORD *)(v15 + 40) = v11;
      *(_QWORD *)(v15 + 48) = v4;
      *(_QWORD *)(inited + 48) = specialized Dictionary.init(dictionaryLiteral:)(v15);
      specialized Dictionary.init(dictionaryLiteral:)(inited);
      _sSDySSypGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for [String : CGFloat]);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      CopyWithAttributes = CTFontDescriptorCreateCopyWithAttributes(v12, isa);

      *a1 = CopyWithAttributes;
    }
    else
    {
      v18 = CTFontDescriptorCopyAttribute(v12, (CFStringRef)*MEMORY[0x24BDC4D08]);
      if (v18)
      {
        v19 = v18;
        v20 = CTFontDescriptorCopyAttributes(v12);
        *(_QWORD *)&v37 = 0;
        static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();

        v39 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        specialized Dictionary._Variant.removeValue(forKey:)(v21, v22, &v37);
        swift_bridgeObjectRelease();
        outlined destroy of Any?((uint64_t)&v37);
        v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v25 = v24;
        ObjectType = swift_getObjectType();
        *(_QWORD *)&v37 = v19;
        outlined init with take of Any(&v37, v36);
        swift_unknownObjectRetain();
        v26 = v39;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v39 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v36, v23, v25, isUniquelyReferenced_nonNull_native);
        v39 = v26;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v28 = CTFontDescriptorCopyAttribute(*a1, v5);
        if (v28
          && (*(_QWORD *)&v37 = v28,
              _sSDySSypGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for [String : Any]),
              swift_dynamicCast()))
        {
          v29 = *(_QWORD *)&v36[0];
        }
        else
        {
          v29 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        }

        ObjectType = MEMORY[0x24BEE50B0];
        *(_QWORD *)&v37 = v4;
        outlined init with take of Any(&v37, v36);
        v30 = swift_isUniquelyReferenced_nonNull_native();
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v36, v9, v11, v30);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        _sSDySSypGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for [String : Any]);
        ObjectType = v31;
        *(_QWORD *)&v37 = v29;
        outlined init with take of Any(&v37, v36);
        v32 = v39;
        v33 = swift_isUniquelyReferenced_nonNull_native();
        v39 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v36, v6, v8, v33);
        v39 = v32;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v34 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        v35 = CTFontDescriptorCreateWithAttributes(v34);

        swift_unknownObjectRelease();
        *a1 = v35;
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
  }
}

void static Font.MonospacedDigitModifier.modify(descriptor:in:)(const __CTFontDescriptor **a1, uint64_t a2)
{
  const __CTFontDescriptor *v3;
  const __CFNumber *isa;
  const __CFNumber *v5;
  CTFontDescriptorRef CopyWithFeature;

  if ((*(_BYTE *)(a2 + 25) & 1) == 0)
  {
    v3 = *a1;
    isa = Int._bridgeToObjectiveC()().super.super.isa;
    v5 = Int._bridgeToObjectiveC()().super.super.isa;
    CopyWithFeature = CTFontDescriptorCreateCopyWithFeature(v3, isa, v5);

    *a1 = CopyWithFeature;
  }
}

void protocol witness for static StaticFontModifier.modify(descriptor:in:) in conformance Font.MonospacedDigitModifier(const __CTFontDescriptor **a1, uint64_t a2)
{
  const __CTFontDescriptor *v3;
  const __CFNumber *isa;
  const __CFNumber *v5;
  CTFontDescriptorRef CopyWithFeature;

  if ((*(_BYTE *)(a2 + 25) & 1) == 0)
  {
    v3 = *a1;
    isa = Int._bridgeToObjectiveC()().super.super.isa;
    v5 = Int._bridgeToObjectiveC()().super.super.isa;
    CopyWithFeature = CTFontDescriptorCreateCopyWithFeature(v3, isa, v5);

    *a1 = CopyWithFeature;
  }
}

void Font.DesignModifier.design.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

void Font.DesignModifier.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static Font.DesignModifier.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

_BYTE *Font.LeadingModifier.leading.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*Font.LeadingModifier.leading.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void Font.LeadingModifier.modify(descriptor:in:)(CTFontDescriptorRef *a1)
{
  char *v1;
  uint64_t v3;
  CTFontDescriptorRef v4;
  CTFontDescriptorRef CopyWithSymbolicTraits;
  const __CTFontDescriptor *v6;

  v3 = *v1;
  v4 = *a1;
  CopyWithSymbolicTraits = CTFontDescriptorCreateCopyWithSymbolicTraits(*a1, v3 << 15, dword_2352B88B8[v3]);
  if (CopyWithSymbolicTraits)
  {
    v6 = CopyWithSymbolicTraits;

    v4 = v6;
  }
  *a1 = v4;
}

uint64_t Font.FeatureSettingModifier.type.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t Font.FeatureSettingModifier.type.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*Font.FeatureSettingModifier.type.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t Font.FeatureSettingModifier.selector.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t Font.FeatureSettingModifier.selector.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*Font.FeatureSettingModifier.selector.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void Font.FeatureSettingModifier.modify(descriptor:in:)(const __CTFontDescriptor **a1, uint64_t a2)
{
  const __CTFontDescriptor *v3;
  const __CFNumber *isa;
  const __CFNumber *v5;
  CTFontDescriptorRef CopyWithFeature;

  if ((*(_BYTE *)(a2 + 25) & 1) == 0)
  {
    v3 = *a1;
    isa = Int._bridgeToObjectiveC()().super.super.isa;
    v5 = Int._bridgeToObjectiveC()().super.super.isa;
    CopyWithFeature = CTFontDescriptorCreateCopyWithFeature(v3, isa, v5);

    *a1 = CopyWithFeature;
  }
}

void Font.FeatureSettingModifier.hash(into:)()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

BOOL static Font.FeatureSettingModifier.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

Swift::Int Font.FeatureSettingModifier.hashValue.getter()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  Swift::UInt v2;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for FontModifier.modify(descriptor:in:) in conformance Font.FeatureSettingModifier(const __CTFontDescriptor **a1, uint64_t a2)
{
  const __CTFontDescriptor *v3;
  const __CFNumber *isa;
  const __CFNumber *v5;
  CTFontDescriptorRef CopyWithFeature;

  if ((*(_BYTE *)(a2 + 25) & 1) == 0)
  {
    v3 = *a1;
    isa = Int._bridgeToObjectiveC()().super.super.isa;
    v5 = Int._bridgeToObjectiveC()().super.super.isa;
    CopyWithFeature = CTFontDescriptorCreateCopyWithFeature(v3, isa, v5);

    *a1 = CopyWithFeature;
  }
}

uint64_t Font.OpenTypeFeatureSettingModifier.settings.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Font.OpenTypeFeatureSettingModifier.settings.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*Font.OpenTypeFeatureSettingModifier.settings.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void Font.OpenTypeFeatureSettingModifier.modify(descriptor:in:)(const __CTFontDescriptor **a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t inited;
  void *v6;
  id v7;
  const __CTFontDescriptor *v8;
  const __CFDictionary *isa;
  CTFontDescriptorRef CopyWithAttributes;

  if ((*(_BYTE *)(a2 + 25) & 1) == 0)
  {
    v4 = *v2;
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, [String])>, (uint64_t (*)(uint64_t))type metadata accessor for (CFStringRef, [String]), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_23527E860;
    v6 = (void *)*MEMORY[0x24BDC4D20];
    *(_QWORD *)(inited + 32) = *MEMORY[0x24BDC4D20];
    *(_QWORD *)(inited + 40) = v4;
    v7 = v6;
    swift_bridgeObjectRetain();
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    v8 = *a1;
    type metadata accessor for CFStringRef(0);
    type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    lazy protocol witness table accessor for type AnyTextSizingModifier and conformance AnyTextSizingModifier((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, 255, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    CopyWithAttributes = CTFontDescriptorCreateCopyWithAttributes(v8, isa);

    *a1 = CopyWithAttributes;
  }
}

void Font.OpenTypeFeatureSettingModifier.hash(into:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  Hasher._combine(_:)(*(_QWORD *)(*v0 + 16));
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    v3 = v1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v3 += 16;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
}

uint64_t static Font.OpenTypeFeatureSettingModifier.== infix(_:_:)(_QWORD **a1, _QWORD **a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

Swift::Int Font.OpenTypeFeatureSettingModifier.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(_QWORD *)(v1 + 16));
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    v3 = v1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v3 += 16;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Font.OpenTypeFeatureSettingModifier()
{
  Hasher.init(_seed:)();
  Font.OpenTypeFeatureSettingModifier.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Font.OpenTypeFeatureSettingModifier(_QWORD **a1, _QWORD **a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t (*Font.FeatureDictionariesSettingModifier.features.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void Font.FeatureDictionariesSettingModifier.modify(descriptor:in:)(const __CTFontDescriptor **a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t inited;
  void *v6;
  id v7;
  const __CTFontDescriptor *v8;
  const __CFDictionary *isa;
  CTFontDescriptorRef CopyWithAttributes;

  if ((*(_BYTE *)(a2 + 25) & 1) == 0)
  {
    v4 = *v2;
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, [CFDictionaryRef])>, (uint64_t (*)(uint64_t))type metadata accessor for (CFStringRef, [CFDictionaryRef]), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_23527E860;
    v6 = (void *)*MEMORY[0x24BDC4D20];
    *(_QWORD *)(inited + 32) = *MEMORY[0x24BDC4D20];
    *(_QWORD *)(inited + 40) = v4;
    v7 = v6;
    swift_bridgeObjectRetain();
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    v8 = *a1;
    type metadata accessor for CFStringRef(0);
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for [CFDictionaryRef], (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    lazy protocol witness table accessor for type AnyTextSizingModifier and conformance AnyTextSizingModifier((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, 255, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    CopyWithAttributes = CTFontDescriptorCreateCopyWithAttributes(v8, isa);

    *a1 = CopyWithAttributes;
  }
}

uint64_t Font.FeatureDictionariesSettingModifier.hash(into:)(uint64_t a1)
{
  unint64_t *v1;
  unint64_t v3;

  v3 = *v1;
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t static Font.FeatureDictionariesSettingModifier.== infix(_:_:)(uint64_t *a1, unint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

Swift::Int Font.FeatureDictionariesSettingModifier.hashValue.getter()
{
  unint64_t *v0;
  unint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Font.FeatureDictionariesSettingModifier()
{
  unint64_t *v0;
  unint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Font.FeatureDictionariesSettingModifier(uint64_t a1)
{
  unint64_t *v1;
  unint64_t v3;

  v3 = *v1;
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v3);
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Font.FeatureDictionariesSettingModifier()
{
  unint64_t *v0;
  unint64_t v1;
  _BYTE v3[72];

  Hasher.init(_seed:)();
  v1 = *v0;
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Font.FeatureDictionariesSettingModifier(uint64_t *a1, unint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

double Font.WeightModifier.weight.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

uint64_t (*Font.WeightModifier.weight.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double Font.WeightModifier.modify(traits:)(uint64_t a1)
{
  double *v1;
  double result;

  result = *v1;
  *(double *)(a1 + 8) = *v1;
  return result;
}

void Font.WeightModifier.hash(into:)()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;

  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v1 = *v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
}

Swift::Int Font.WeightModifier.hashValue.getter()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = v1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

double protocol witness for FontModifier.modify(traits:) in conformance Font.WeightModifier(uint64_t a1)
{
  double *v1;
  double result;

  result = *v1;
  *(double *)(a1 + 8) = *v1;
  return result;
}

double Font.WidthModifier.width.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

uint64_t (*Font.WidthModifier.width.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void Font.WidthModifier.modify(descriptor:in:)(CTFontDescriptorRef *a1)
{
  uint64_t *v1;
  uint64_t v3;
  const __CTFontDescriptor *v4;
  uint64_t inited;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  const __CFDictionary *isa;
  CTFontDescriptorRef CopyWithAttributes;
  void *v13;
  CFTypeRef v14;
  CFTypeRef v15;
  CFDictionaryRef v16;
  id v17;
  id v18;
  unint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  void *v21;
  CFTypeRef v22;
  unint64_t v23;
  void *v24;
  id v25;
  char v26;
  uint64_t v27;
  id v28;
  unint64_t v29;
  char v30;
  const __CFDictionary *v31;
  CTFontDescriptorRef v32;
  _OWORD v33[2];
  __int128 v34;
  uint64_t ObjectType;
  unint64_t v36;

  v3 = *v1;
  v4 = *a1;
  if (CTFontDescriptorIsSystemUIFont())
  {
    type metadata accessor for _ContiguousArrayStorage<(CFStringRef, [CFStringRef : CGFloat])>();
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_23527E860;
    v6 = (void *)*MEMORY[0x24BDC4DE0];
    *(_QWORD *)(inited + 32) = *MEMORY[0x24BDC4DE0];
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, CGFloat)>, (uint64_t (*)(uint64_t))type metadata accessor for (CFStringRef, CGFloat), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v7 = swift_initStackObject();
    *(_OWORD *)(v7 + 16) = xmmword_23527E860;
    v8 = (void *)*MEMORY[0x24BDC4ED0];
    *(_QWORD *)(v7 + 32) = *MEMORY[0x24BDC4ED0];
    *(_QWORD *)(v7 + 40) = v3;
    v9 = v6;
    v10 = v8;
    *(_QWORD *)(inited + 40) = specialized Dictionary.init(dictionaryLiteral:)(v7);
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    type metadata accessor for CFStringRef(0);
    type metadata accessor for [CFStringRef : Any](0, (unint64_t *)&lazy cache variable for type metadata for [CFStringRef : CGFloat]);
    lazy protocol witness table accessor for type AnyTextSizingModifier and conformance AnyTextSizingModifier((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, 255, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    CopyWithAttributes = CTFontDescriptorCreateCopyWithAttributes(v4, isa);

    *a1 = CopyWithAttributes;
  }
  else
  {
    v13 = (void *)*MEMORY[0x24BDC4D08];
    v14 = CTFontDescriptorCopyAttribute(v4, (CFStringRef)*MEMORY[0x24BDC4D08]);
    if (v14)
    {
      v15 = v14;
      v16 = CTFontDescriptorCopyAttributes(v4);
      *(_QWORD *)&v34 = 0;
      type metadata accessor for CFStringRef(0);
      lazy protocol witness table accessor for type AnyTextSizingModifier and conformance AnyTextSizingModifier((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, 255, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
      static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();

      v36 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
      v17 = (id)*MEMORY[0x24BDC4D70];
      specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v17, &v34);

      outlined destroy of Any?((uint64_t)&v34);
      ObjectType = swift_getObjectType();
      *(_QWORD *)&v34 = v15;
      outlined init with take of Any(&v34, v33);
      v18 = v13;
      swift_unknownObjectRetain();
      v19 = v36;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v33, v18, isUniquelyReferenced_nonNull_native);
      v36 = v19;

      swift_bridgeObjectRelease();
      v21 = (void *)*MEMORY[0x24BDC4DE0];
      v22 = CTFontDescriptorCopyAttribute(*a1, (CFStringRef)*MEMORY[0x24BDC4DE0]);
      if (v22
        && (*(_QWORD *)&v34 = v22,
            type metadata accessor for [CFStringRef : Any](0, (unint64_t *)&lazy cache variable for type metadata for [CFStringRef : Any]), swift_dynamicCast()))
      {
        v23 = *(_QWORD *)&v33[0];
      }
      else
      {
        v23 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
      }

      v24 = (void *)*MEMORY[0x24BDC4ED0];
      ObjectType = MEMORY[0x24BEE50B0];
      *(_QWORD *)&v34 = v3;
      outlined init with take of Any(&v34, v33);
      v25 = v24;
      v26 = swift_isUniquelyReferenced_nonNull_native();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v33, v25, v26);

      swift_bridgeObjectRelease();
      type metadata accessor for [CFStringRef : Any](0, (unint64_t *)&lazy cache variable for type metadata for [CFStringRef : Any]);
      ObjectType = v27;
      *(_QWORD *)&v34 = v23;
      outlined init with take of Any(&v34, v33);
      v28 = v21;
      v29 = v36;
      v30 = swift_isUniquelyReferenced_nonNull_native();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v33, v28, v30);
      v36 = v29;

      swift_bridgeObjectRelease();
      v31 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v32 = CTFontDescriptorCreateWithAttributes(v31);

      swift_unknownObjectRelease();
      *a1 = v32;
    }
  }
}

uint64_t Font.WidthModifier.modify(traits:)(uint64_t result)
{
  _QWORD *v1;

  *(_QWORD *)(result + 16) = *v1;
  *(_BYTE *)(result + 24) = 0;
  return result;
}

void Font.WidthModifier.hash(into:)()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;

  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v1 = *v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
}

BOOL static Font.WidthModifier.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for FontModifier.modify(traits:) in conformance Font.WidthModifier(uint64_t result)
{
  _QWORD *v1;

  *(_QWORD *)(result + 16) = *v1;
  *(_BYTE *)(result + 24) = 0;
  return result;
}

uint64_t (*Font.StylisticAlternativeModifier.alternative.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void Font.StylisticAlternativeModifier.modify(descriptor:in:)(const __CTFontDescriptor **a1, uint64_t a2)
{
  const __CTFontDescriptor *v3;
  const __CFNumber *isa;
  const __CFNumber *v5;
  CTFontDescriptorRef CopyWithFeature;

  if ((*(_BYTE *)(a2 + 25) & 1) == 0)
  {
    v3 = *a1;
    isa = Int._bridgeToObjectiveC()().super.super.isa;
    v5 = Int._bridgeToObjectiveC()().super.super.isa;
    CopyWithFeature = CTFontDescriptorCreateCopyWithFeature(v3, isa, v5);

    *a1 = CopyWithFeature;
  }
}

void Font.StylisticAlternativeModifier.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0 + 1);
}

BOOL static Font.StylisticAlternativeModifier.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int Font.StylisticAlternativeModifier.hashValue.getter()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

void protocol witness for FontModifier.modify(descriptor:in:) in conformance Font.StylisticAlternativeModifier(const __CTFontDescriptor **a1, uint64_t a2)
{
  const __CTFontDescriptor *v3;
  const __CFNumber *isa;
  const __CFNumber *v5;
  CTFontDescriptorRef CopyWithFeature;

  if ((*(_BYTE *)(a2 + 25) & 1) == 0)
  {
    v3 = *a1;
    isa = Int._bridgeToObjectiveC()().super.super.isa;
    v5 = Int._bridgeToObjectiveC()().super.super.isa;
    CopyWithFeature = CTFontDescriptorCreateCopyWithFeature(v3, isa, v5);

    *a1 = CopyWithFeature;
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Font.StylisticAlternativeModifier()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

void Font.VariationModifier.identifier.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *Font.VariationModifier.identifier.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*Font.VariationModifier.identifier.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double Font.VariationModifier.value.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void Font.VariationModifier.value.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

uint64_t (*Font.VariationModifier.value.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void Font.VariationModifier.modify(descriptor:in:)(const __CTFontDescriptor **a1, uint64_t a2)
{
  uint64_t v2;
  CGFloat v4;
  const __CTFontDescriptor *v5;
  const __CFNumber *isa;
  CTFontDescriptorRef CopyWithVariation;

  if ((*(_BYTE *)(a2 + 25) & 1) == 0)
  {
    v4 = *(double *)(v2 + 8);
    v5 = *a1;
    isa = Int._bridgeToObjectiveC()().super.super.isa;
    CopyWithVariation = CTFontDescriptorCreateCopyWithVariation(v5, isa, v4);

    *a1 = CopyWithVariation;
  }
}

void Font.VariationModifier.hash(into:)()
{
  char *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;

  v1 = *((_QWORD *)v0 + 1);
  Hasher._combine(_:)(*(_QWORD *)&aThgw[8 * *v0]);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = v1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
}

BOOL static Font.VariationModifier.== infix(_:_:)(double *a1, double *a2)
{
  return a1[1] == a2[1] && *(_QWORD *)&aThgw[8 * *(char *)a1] == *(_QWORD *)&aThgw[8 * *(char *)a2];
}

Swift::Int Font.VariationModifier.hashValue.getter()
{
  char *v0;
  uint64_t v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;

  v1 = *v0;
  v2 = *((_QWORD *)v0 + 1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(_QWORD *)&aThgw[8 * v1]);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = v2;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void protocol witness for FontModifier.modify(descriptor:in:) in conformance Font.VariationModifier(const __CTFontDescriptor **a1, uint64_t a2)
{
  uint64_t v2;
  CGFloat v4;
  const __CTFontDescriptor *v5;
  const __CFNumber *isa;
  CTFontDescriptorRef CopyWithVariation;

  if ((*(_BYTE *)(a2 + 25) & 1) == 0)
  {
    v4 = *(double *)(v2 + 8);
    v5 = *a1;
    isa = Int._bridgeToObjectiveC()().super.super.isa;
    CopyWithVariation = CTFontDescriptorCreateCopyWithVariation(v5, isa, v4);

    *a1 = CopyWithVariation;
  }
}

void protocol witness for Hashable.hash(into:) in conformance Font.VariationModifier()
{
  char *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;

  v1 = *((_QWORD *)v0 + 1);
  Hasher._combine(_:)(*(_QWORD *)&aThgw[8 * *v0]);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = v1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Font.VariationModifier()
{
  char *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;

  Hasher.init(_seed:)();
  v1 = *((_QWORD *)v0 + 1);
  Hasher._combine(_:)(*(_QWORD *)&aThgw[8 * *v0]);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = v1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Font.VariationModifier(double *a1, double *a2)
{
  return a1[1] == a2[1] && *(_QWORD *)&aThgw[8 * *(char *)a1] == *(_QWORD *)&aThgw[8 * *(char *)a2];
}

uint64_t Font.GradeModifier.grade.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t Font.GradeModifier.grade.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*Font.GradeModifier.grade.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void Font.GradeModifier.modify(descriptor:in:)(const __CTFontDescriptor **a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  const __CTFontDescriptor *v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t inited;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  const __CFDictionary *isa;
  CTFontDescriptorRef CopyWithAttributes;

  if ((*(_BYTE *)(a2 + 25) & 1) == 0)
  {
    v4 = *v2;
    v5 = *a1;
    v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598];
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, [CFStringRef? : Int])>, (uint64_t (*)(uint64_t))type metadata accessor for (CFStringRef, [CFStringRef? : Int]), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_23527E860;
    v8 = (void *)*MEMORY[0x24BDC4DE0];
    *(_QWORD *)(inited + 32) = *MEMORY[0x24BDC4DE0];
    type metadata accessor for [(_:)](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef?, Int)>, (uint64_t (*)(uint64_t))type metadata accessor for (CFStringRef?, Int), v6);
    v9 = swift_initStackObject();
    *(_OWORD *)(v9 + 16) = xmmword_23527E860;
    v10 = (void *)*MEMORY[0x24BDC4D40];
    *(_QWORD *)(v9 + 32) = *MEMORY[0x24BDC4D40];
    *(_QWORD *)(v9 + 40) = v4;
    v11 = v10;
    v12 = v8;
    *(_QWORD *)(inited + 40) = specialized Dictionary.init(dictionaryLiteral:)(v9);
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    type metadata accessor for CFStringRef(0);
    type metadata accessor for [CFStringRef? : Int](0);
    lazy protocol witness table accessor for type AnyTextSizingModifier and conformance AnyTextSizingModifier((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, 255, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    CopyWithAttributes = CTFontDescriptorCreateCopyWithAttributes(v5, isa);

    *a1 = CopyWithAttributes;
  }
}

void Font.GradeModifier.hash(into:)()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static Font.GradeModifier.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

Swift::Int Font.GradeModifier.hashValue.getter()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t Font.ModifierProvider.resolve(in:)(char *a1, uint64_t a2)
{
  uint64_t *v2;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;

  v5 = a1[1];
  v6 = *((_QWORD *)a1 + 1);
  v7 = *((_QWORD *)a1 + 2);
  v8 = a1[24];
  v9 = a1[25];
  v10 = *v2;
  v12 = *a1;
  v4 = v12;
  v13 = v5;
  v14 = v6;
  v15 = v7;
  v16 = v8;
  v17 = v9;
  v18 = (*(uint64_t (**)(char *))(*(_QWORD *)v10 + 80))(&v12);
  v12 = v4;
  v13 = v5;
  v14 = v6;
  v15 = v7;
  v16 = v8;
  v17 = v9;
  (*(void (**)(uint64_t *, char *, _QWORD))(*(_QWORD *)(a2 + 24) + 16))(&v18, &v12, *(_QWORD *)(a2 + 16));
  return v18;
}

uint64_t Font.ModifierProvider.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(**(_QWORD **)v1 + 104);
  swift_retain();
  v3(a1);
  swift_release();
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t static Font.ModifierProvider.== infix(_:_:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 96))(*a2) & 1) == 0)
    return 0;
  type metadata accessor for Font.ModifierProvider(0, a3, a4, v6);
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

Swift::Int Font.ModifierProvider.hashValue.getter()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  Font.ModifierProvider.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Font.ModifierProvider<A>()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  Font.ModifierProvider.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Font.ModifierProvider<A>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return static Font.ModifierProvider.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t Font.StaticModifierProvider.resolve(in:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;

  v7 = a1[1];
  v8 = *((_QWORD *)a1 + 1);
  v9 = *((_QWORD *)a1 + 2);
  v10 = a1[24];
  v11 = a1[25];
  v13 = *a1;
  v6 = v13;
  v14 = v7;
  v15 = v8;
  v16 = v9;
  v17 = v10;
  v18 = v11;
  v19 = (*(uint64_t (**)(char *))(*(_QWORD *)a2 + 80))(&v13);
  v13 = v6;
  v14 = v7;
  v15 = v8;
  v16 = v9;
  v17 = v10;
  v18 = v11;
  (*(void (**)(uint64_t *, char *, uint64_t, uint64_t))(a4 + 8))(&v19, &v13, a3, a4);
  return v19;
}

uint64_t Font.StaticModifierProvider.hash(into:)(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(*(_QWORD *)a2 + 104);
  swift_retain();
  v3(a1);
  return swift_release();
}

uint64_t static Font.StaticModifierProvider.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a2) & 1;
}

Swift::Int Font.StaticModifierProvider.hashValue.getter(uint64_t a1)
{
  void (*v2)(_BYTE *);
  _BYTE v4[72];

  Hasher.init(_seed:)();
  v2 = *(void (**)(_BYTE *))(*(_QWORD *)a1 + 104);
  swift_retain();
  v2(v4);
  swift_release();
  return Hasher._finalize()();
}

uint64_t protocol witness for FontProvider.resolve(in:) in conformance Font.StaticModifierProvider<A>(char *a1, uint64_t a2)
{
  uint64_t *v2;

  return Font.StaticModifierProvider.resolve(in:)(a1, *v2, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Font.StaticModifierProvider<A>()
{
  uint64_t *v0;

  return Font.StaticModifierProvider.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Font.StaticModifierProvider<A>(uint64_t a1)
{
  uint64_t *v1;

  return Font.StaticModifierProvider.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Font.StaticModifierProvider<A>()
{
  uint64_t *v0;
  _BYTE v2[72];

  Hasher.init(_seed:)();
  Font.StaticModifierProvider.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Font.StaticModifierProvider<A>(uint64_t *a1, uint64_t *a2)
{
  return static Font.StaticModifierProvider.== infix(_:_:)(*a1, *a2);
}

uint64_t AnyFontModifier.isEqual(to:)()
{
  return 0;
}

uint64_t static AnyFontModifier.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a2) & 1;
}

uint64_t AnyDynamicFontModifier.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 136) - 8) + 32))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 152), a1);
  return v2;
}

void one-time initialization function for staticModifiers()
{
  static AnyFontModifier.staticModifiers = (_UNKNOWN *)MEMORY[0x24BEE4B00];
}

uint64_t static AnyFontModifier.static<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  void *v13;

  if (one-time initialization token for staticModifiers != -1)
    swift_once();
  swift_beginAccess();
  v6 = static AnyFontModifier.staticModifiers;
  if (*((_QWORD *)static AnyFontModifier.staticModifiers + 2)
    && (v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v8 & 1) != 0))
  {
    v9 = *(_QWORD *)(v6[7] + 8 * v7);
    swift_endAccess();
    swift_retain();
  }
  else
  {
    swift_endAccess();
    type metadata accessor for AnyStaticFontModifier(0, a2, a3, v10);
    v9 = swift_allocObject();
    swift_beginAccess();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v13 = static AnyFontModifier.staticModifiers;
    static AnyFontModifier.staticModifiers = (_UNKNOWN *)0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v9, a1, isUniquelyReferenced_nonNull_native);
    static AnyFontModifier.staticModifiers = v13;
    swift_bridgeObjectRelease();
    swift_endAccess();
  }
  return v9;
}

uint64_t AnyStaticFontModifier.__allocating_init()()
{
  return swift_allocObject();
}

void AnyFontModifier.typeID.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t AnyFontModifier.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t AnyFontModifier.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

Swift::Int AnyFontModifier.hashValue.getter()
{
  uint64_t v0;
  _BYTE v2[72];

  Hasher.init(_seed:)();
  (*(void (**)(_BYTE *))(*(_QWORD *)v0 + 104))(v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnyFontModifier()
{
  uint64_t v0;
  _BYTE v2[72];

  Hasher.init(_seed:)();
  (*(void (**)(_BYTE *))(**(_QWORD **)v0 + 104))(v2);
  return Hasher._finalize()();
}

uint64_t AnyDynamicFontModifier.modifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 136) - 8) + 16))(a1, v1 + *(_QWORD *)(*(_QWORD *)v1 + 152));
}

uint64_t AnyDynamicFontModifier.init(_:)(uint64_t a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 136) - 8) + 32))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 152), a1);
  return v1;
}

uint64_t AnyDynamicFontModifier.modify(descriptor:in:)(uint64_t a1, __int16 *a2)
{
  uint64_t *v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  __int16 v8;
  __int128 v9;
  char v10;
  char v11;

  v3 = *v2;
  v4 = *((_BYTE *)a2 + 24);
  v5 = *((_BYTE *)a2 + 25);
  v6 = *(_QWORD *)(*v2 + 144);
  v8 = *a2;
  v9 = *(_OWORD *)(a2 + 4);
  v10 = v4;
  v11 = v5;
  return (*(uint64_t (**)(uint64_t, __int16 *, _QWORD))(v6 + 16))(a1, &v8, *(_QWORD *)(v3 + 136));
}

uint64_t AnyDynamicFontModifier.modify(traits:)(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)v1 + 144) + 24))(a1, *(_QWORD *)(*(_QWORD *)v1 + 136));
}

uint64_t AnyDynamicFontModifier.isEqual(to:)()
{
  uint64_t result;
  char v1;

  result = swift_dynamicCastClass();
  if (result)
  {
    swift_retain();
    v1 = dispatch thunk of static Equatable.== infix(_:_:)();
    swift_release();
    return v1 & 1;
  }
  return result;
}

uint64_t AnyDynamicFontModifier.hash(into:)()
{
  uint64_t v0;

  Hasher._combine(_:)(*(_QWORD *)(*(_QWORD *)v0 + 136));
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t AnyDynamicFontModifier.deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 136) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 152));
  return v0;
}

uint64_t AnyDynamicFontModifier.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 136) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 152));
  return swift_deallocClassInstance();
}

uint64_t AnyStaticFontModifier.modify(descriptor:in:)(uint64_t a1, __int16 *a2)
{
  uint64_t *v2;
  uint64_t v3;
  char v4;
  char v5;
  __int16 v7;
  __int128 v8;
  char v9;
  char v10;

  v3 = *v2;
  v4 = *((_BYTE *)a2 + 24);
  v5 = *((_BYTE *)a2 + 25);
  v7 = *a2;
  v8 = *(_OWORD *)(a2 + 4);
  v9 = v4;
  v10 = v5;
  return (*(uint64_t (**)(uint64_t, __int16 *))(*(_QWORD *)(v3 + 144) + 8))(a1, &v7);
}

uint64_t AnyStaticFontModifier.modify(traits:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)v0 + 144) + 16))();
}

BOOL AnyStaticFontModifier.isEqual(to:)()
{
  return swift_dynamicCastClass() != 0;
}

void AnyStaticFontModifier.hash(into:)()
{
  uint64_t v0;

  Hasher._combine(_:)(*(_QWORD *)(*(_QWORD *)v0 + 136));
}

uint64_t AnyStaticFontModifier.typeID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 136);
}

uint64_t AnyStaticFontModifier.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t EnvironmentValues.fontModifiers.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  swift_retain_n();
  swift_bridgeObjectRetain();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  swift_bridgeObjectRelease();
  swift_release();
  if (v1[1])
  {
    v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return swift_release();
}

void (*EnvironmentValues.fontModifiers.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    v6 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
    swift_bridgeObjectRetain();
  }
  swift_release_n();
  v3[5] = 0;
  *v3 = v5;
  return EnvironmentValues.fontModifiers.modify;
}

void EnvironmentValues.fontModifiers.modify(uint64_t **a1, char a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = (uint64_t *)(*a1)[4];
  v5 = **a1;
  v6 = *v4;
  swift_retain_n();
  swift_bridgeObjectRetain();
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    specialized closure #1 in PropertyList.subscript.setter(v4, v5);
    swift_release();
    swift_bridgeObjectRelease();
    if (v4[1])
    {
      v7 = *(_QWORD *)v3[4];
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v6, v7);
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized closure #1 in PropertyList.subscript.setter(v4, v5);
    swift_release();
    swift_bridgeObjectRelease();
    if (v4[1])
    {
      v8 = *(_QWORD *)v3[4];
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v6, v8);
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    swift_release();
  }
  free(v3);
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance FontModifiersKey@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  *a1 = static FontModifiersKey.defaultValue;
  return swift_bridgeObjectRetain();
}

void Font.Weight.codingProxy.getter(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
}

void CodableFontWeight.init(_:)(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
}

double CodableFontWeight.base.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void CodableFontWeight.base.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*CodableFontWeight.base.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t CodableFontWeight.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _BYTE v4[24];
  uint64_t v5;
  uint64_t v6;

  v2 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  v6 = v2;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v4, v5);
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
}

uint64_t CodableFontWeight.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD v7[7];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v7, v7[3]);
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    v5 = v7[6];
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    *a2 = v5;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableFontWeight@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return CodableFontWeight.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableFontWeight(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _BYTE v4[24];
  uint64_t v5;
  uint64_t v6;

  v2 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  v6 = v2;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v4, v5);
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
}

uint64_t AttributeContainer.addFontModifier<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  _QWORD v16[2];
  uint64_t v17;
  uint64_t v18;

  v4 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AnyDynamicFontModifier(0, v7, v8, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, a2);
  v10 = swift_allocObject();
  (*(void (**)(uint64_t, char *))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v10 + 136) - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)v10 + 152), v6);
  v16[0] = swift_getKeyPath();
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.FontModifiersAttribute and conformance AttributeScopes.SwiftUIAttributes.FontModifiersAttribute();
  AttributeContainer.subscript.getter();
  swift_release();
  v11 = v17;
  if (!v17)
    v11 = MEMORY[0x24BEE4AF8];
  v18 = v11;
  v12 = swift_retain();
  MEMORY[0x23B7C61A8](v12);
  if (*(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  KeyPath = swift_getKeyPath();
  MEMORY[0x24BDAC7A8](KeyPath);
  v16[-2] = v14;
  swift_getKeyPath();
  v17 = v18;
  AttributeContainer.subscript.setter();
  return swift_release();
}

uint64_t key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.FontModifiersAttribute>)()
{
  type metadata accessor for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.FontModifiersAttribute>();
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t key path index hash operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.FontModifiersAttribute>)()
{
  type metadata accessor for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.FontModifiersAttribute>();
  return dispatch thunk of Hashable.hashValue.getter();
}

void key path getter for AttributeDynamicLookup.subscript<A>(dynamicMember:) : AttributeDynamicLookupAttributeScopes.SwiftUIAttributes.FontModifiersAttribute()
{
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.FontModifiersAttribute and conformance AttributeScopes.SwiftUIAttributes.FontModifiersAttribute();
  AttributeDynamicLookup.subscript.getter();
  __break(1u);
}

uint64_t AttributeContainer.addFontModifier<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for AnyStaticFontModifier(0, a2, a3, a4);
  swift_allocObject();
  swift_getKeyPath();
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.FontModifiersAttribute and conformance AttributeScopes.SwiftUIAttributes.FontModifiersAttribute();
  AttributeContainer.subscript.getter();
  swift_release();
  v4 = v8;
  if (!v8)
    v4 = MEMORY[0x24BEE4AF8];
  v9 = v4;
  v5 = swift_retain();
  MEMORY[0x23B7C61A8](v5);
  if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  KeyPath = swift_getKeyPath();
  MEMORY[0x24BDAC7A8](KeyPath);
  swift_getKeyPath();
  AttributeContainer.subscript.setter();
  return swift_release();
}

void specialized static Font.MonospacedModifier.modify(descriptor:in:)(CTFontDescriptorRef *a1, char *a2)
{
  char v3;
  char v4;
  char v5;
  char v6;
  CTFontDescriptorRef v7;
  CTFontDescriptorRef CopyWithSymbolicTraits;
  const __CTFontDescriptor *v9;
  CFTypeRef v10;
  CTFontDescriptorRef v11;
  double v12;
  double v13;
  __int128 v14;
  CFTypeRef v15;
  __int128 v16;
  char v17;
  char v18;
  double v19;

  v3 = *a2;
  v4 = a2[1];
  v14 = *(_OWORD *)(a2 + 8);
  v5 = a2[24];
  v6 = a2[25];
  v7 = *a1;
  CopyWithSymbolicTraits = CTFontDescriptorCreateCopyWithSymbolicTraits(*a1, 0x400u, 0x400u);
  if (CopyWithSymbolicTraits)
  {
    v9 = CopyWithSymbolicTraits;
    if ((CTFontDescriptorGetSymbolicTraits() & 0x400) != 0)
    {

      *a1 = v9;
      return;
    }

  }
  if (CTFontDescriptorIsSystemUIFont())
  {
    LOBYTE(v15) = 3;
    Font.DesignModifier.modify(descriptor:in:)(a1);
  }
  else
  {
    v10 = CTFontDescriptorCopyAttribute(v7, (CFStringRef)*MEMORY[0x24BDC4DA8]);
    if (v10)
    {
      v15 = v10;
      swift_dynamicCast();
    }
    v11 = *a1;
    CTFontDescriptorGetWeight();
    v13 = v12;

    *a1 = (CTFontDescriptorRef)CTFontDescriptorCreateForUIType();
    if (v13 != 0.0)
    {
      v19 = v13;
      LOBYTE(v15) = v3;
      BYTE1(v15) = v4;
      v16 = v14;
      v17 = v5;
      v18 = v6;
      Font.WeightModifier.modify(descriptor:in:)(a1, (uint64_t)&v15);
    }
  }
}

uint64_t type metadata accessor for AnyDynamicFontModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyDynamicFontModifier);
}

void type metadata accessor for FontBox<Font.StaticModifierProvider<Font.ItalicModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for FontBox<Font.StaticModifierProvider<Font.ItalicModifier>>)
  {
    type metadata accessor for Font.StaticModifierProvider<Font.ItalicModifier>(255, &lazy cache variable for type metadata for Font.StaticModifierProvider<Font.ItalicModifier>, (uint64_t)&type metadata for Font.ItalicModifier, (uint64_t)&protocol witness table for Font.ItalicModifier);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type Font.StaticModifierProvider<Font.ItalicModifier> and conformance Font.StaticModifierProvider<A>(&lazy protocol witness table cache variable for type Font.StaticModifierProvider<Font.ItalicModifier> and conformance Font.StaticModifierProvider<A>, &lazy cache variable for type metadata for Font.StaticModifierProvider<Font.ItalicModifier>, (uint64_t)&type metadata for Font.ItalicModifier, (uint64_t)&protocol witness table for Font.ItalicModifier);
    v6 = type metadata accessor for FontBox(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for FontBox<Font.StaticModifierProvider<Font.ItalicModifier>>);
  }
}

uint64_t type metadata accessor for Font.StaticModifierProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Font.StaticModifierProvider);
}

void type metadata accessor for FontBox<Font.ModifierProvider<Font.FeatureSettingModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for FontBox<Font.ModifierProvider<Font.FeatureSettingModifier>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Font.ModifierProvider<Font.FeatureSettingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.FeatureSettingModifier and conformance Font.FeatureSettingModifier, (uint64_t)&type metadata for Font.FeatureSettingModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Font.ModifierProvider);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type Font.ModifierProvider<Font.GradeModifier> and conformance Font.ModifierProvider<A>(&lazy protocol witness table cache variable for type Font.ModifierProvider<Font.FeatureSettingModifier> and conformance Font.ModifierProvider<A>, &lazy cache variable for type metadata for Font.ModifierProvider<Font.FeatureSettingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.FeatureSettingModifier and conformance Font.FeatureSettingModifier, (uint64_t)&type metadata for Font.FeatureSettingModifier);
    v6 = type metadata accessor for FontBox(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for FontBox<Font.ModifierProvider<Font.FeatureSettingModifier>>);
  }
}

unint64_t lazy protocol witness table accessor for type Font.FeatureSettingModifier and conformance Font.FeatureSettingModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.FeatureSettingModifier and conformance Font.FeatureSettingModifier;
  if (!lazy protocol witness table cache variable for type Font.FeatureSettingModifier and conformance Font.FeatureSettingModifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.FeatureSettingModifier, &type metadata for Font.FeatureSettingModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.FeatureSettingModifier and conformance Font.FeatureSettingModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.FeatureSettingModifier and conformance Font.FeatureSettingModifier;
  if (!lazy protocol witness table cache variable for type Font.FeatureSettingModifier and conformance Font.FeatureSettingModifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.FeatureSettingModifier, &type metadata for Font.FeatureSettingModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.FeatureSettingModifier and conformance Font.FeatureSettingModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.FeatureSettingModifier and conformance Font.FeatureSettingModifier;
  if (!lazy protocol witness table cache variable for type Font.FeatureSettingModifier and conformance Font.FeatureSettingModifier)
  {
    result = MEMORY[0x23B7C9C04]("}?;\x1Bd6\n", &type metadata for Font.FeatureSettingModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.FeatureSettingModifier and conformance Font.FeatureSettingModifier);
  }
  return result;
}

uint64_t type metadata accessor for Font.ModifierProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Font.ModifierProvider);
}

uint64_t lazy protocol witness table accessor for type Font.ModifierProvider<Font.GradeModifier> and conformance Font.ModifierProvider<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Font.ModifierProvider);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.ModifierProvider<A>, v6);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for FontBox<Font.StaticModifierProvider<Font.MonospacedDigitModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for FontBox<Font.StaticModifierProvider<Font.MonospacedDigitModifier>>)
  {
    type metadata accessor for Font.StaticModifierProvider<Font.ItalicModifier>(255, &lazy cache variable for type metadata for Font.StaticModifierProvider<Font.MonospacedDigitModifier>, (uint64_t)&type metadata for Font.MonospacedDigitModifier, (uint64_t)&protocol witness table for Font.MonospacedDigitModifier);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type Font.StaticModifierProvider<Font.ItalicModifier> and conformance Font.StaticModifierProvider<A>(&lazy protocol witness table cache variable for type Font.StaticModifierProvider<Font.MonospacedDigitModifier> and conformance Font.StaticModifierProvider<A>, &lazy cache variable for type metadata for Font.StaticModifierProvider<Font.MonospacedDigitModifier>, (uint64_t)&type metadata for Font.MonospacedDigitModifier, (uint64_t)&protocol witness table for Font.MonospacedDigitModifier);
    v6 = type metadata accessor for FontBox(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for FontBox<Font.StaticModifierProvider<Font.MonospacedDigitModifier>>);
  }
}

uint64_t lazy protocol witness table accessor for type Font.StaticModifierProvider<Font.ItalicModifier> and conformance Font.StaticModifierProvider<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    type metadata accessor for Font.StaticModifierProvider<Font.ItalicModifier>(255, a2, a3, a4);
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.StaticModifierProvider<A>, v6);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for FontBox<Font.ModifierProvider<Font.WeightModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for FontBox<Font.ModifierProvider<Font.WeightModifier>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Font.ModifierProvider<Font.WeightModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.WeightModifier and conformance Font.WeightModifier, (uint64_t)&type metadata for Font.WeightModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Font.ModifierProvider);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type Font.ModifierProvider<Font.GradeModifier> and conformance Font.ModifierProvider<A>(&lazy protocol witness table cache variable for type Font.ModifierProvider<Font.WeightModifier> and conformance Font.ModifierProvider<A>, &lazy cache variable for type metadata for Font.ModifierProvider<Font.WeightModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.WeightModifier and conformance Font.WeightModifier, (uint64_t)&type metadata for Font.WeightModifier);
    v6 = type metadata accessor for FontBox(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for FontBox<Font.ModifierProvider<Font.WeightModifier>>);
  }
}

void type metadata accessor for FontBox<Font.ModifierProvider<Font.WidthModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for FontBox<Font.ModifierProvider<Font.WidthModifier>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Font.ModifierProvider<Font.WidthModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.WidthModifier and conformance Font.WidthModifier, (uint64_t)&type metadata for Font.WidthModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Font.ModifierProvider);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type Font.ModifierProvider<Font.GradeModifier> and conformance Font.ModifierProvider<A>(&lazy protocol witness table cache variable for type Font.ModifierProvider<Font.WidthModifier> and conformance Font.ModifierProvider<A>, &lazy cache variable for type metadata for Font.ModifierProvider<Font.WidthModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.WidthModifier and conformance Font.WidthModifier, (uint64_t)&type metadata for Font.WidthModifier);
    v6 = type metadata accessor for FontBox(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for FontBox<Font.ModifierProvider<Font.WidthModifier>>);
  }
}

unint64_t lazy protocol witness table accessor for type Font.WidthModifier and conformance Font.WidthModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.WidthModifier and conformance Font.WidthModifier;
  if (!lazy protocol witness table cache variable for type Font.WidthModifier and conformance Font.WidthModifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.WidthModifier, &type metadata for Font.WidthModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.WidthModifier and conformance Font.WidthModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.WidthModifier and conformance Font.WidthModifier;
  if (!lazy protocol witness table cache variable for type Font.WidthModifier and conformance Font.WidthModifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.WidthModifier, &type metadata for Font.WidthModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.WidthModifier and conformance Font.WidthModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.WidthModifier and conformance Font.WidthModifier;
  if (!lazy protocol witness table cache variable for type Font.WidthModifier and conformance Font.WidthModifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.WidthModifier, &type metadata for Font.WidthModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.WidthModifier and conformance Font.WidthModifier);
  }
  return result;
}

void type metadata accessor for FontBox<Font.StaticModifierProvider<Font.BoldModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for FontBox<Font.StaticModifierProvider<Font.BoldModifier>>)
  {
    type metadata accessor for Font.StaticModifierProvider<Font.ItalicModifier>(255, &lazy cache variable for type metadata for Font.StaticModifierProvider<Font.BoldModifier>, (uint64_t)&type metadata for Font.BoldModifier, (uint64_t)&protocol witness table for Font.BoldModifier);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type Font.StaticModifierProvider<Font.ItalicModifier> and conformance Font.StaticModifierProvider<A>(&lazy protocol witness table cache variable for type Font.StaticModifierProvider<Font.BoldModifier> and conformance Font.StaticModifierProvider<A>, &lazy cache variable for type metadata for Font.StaticModifierProvider<Font.BoldModifier>, (uint64_t)&type metadata for Font.BoldModifier, (uint64_t)&protocol witness table for Font.BoldModifier);
    v6 = type metadata accessor for FontBox(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for FontBox<Font.StaticModifierProvider<Font.BoldModifier>>);
  }
}

void type metadata accessor for FontBox<Font.StaticModifierProvider<Font.MonospacedModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for FontBox<Font.StaticModifierProvider<Font.MonospacedModifier>>)
  {
    type metadata accessor for Font.StaticModifierProvider<Font.ItalicModifier>(255, &lazy cache variable for type metadata for Font.StaticModifierProvider<Font.MonospacedModifier>, (uint64_t)&type metadata for Font.MonospacedModifier, (uint64_t)&protocol witness table for Font.MonospacedModifier);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type Font.StaticModifierProvider<Font.ItalicModifier> and conformance Font.StaticModifierProvider<A>(&lazy protocol witness table cache variable for type Font.StaticModifierProvider<Font.MonospacedModifier> and conformance Font.StaticModifierProvider<A>, &lazy cache variable for type metadata for Font.StaticModifierProvider<Font.MonospacedModifier>, (uint64_t)&type metadata for Font.MonospacedModifier, (uint64_t)&protocol witness table for Font.MonospacedModifier);
    v6 = type metadata accessor for FontBox(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for FontBox<Font.StaticModifierProvider<Font.MonospacedModifier>>);
  }
}

void type metadata accessor for Font.StaticModifierProvider<Font.ItalicModifier>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = type metadata accessor for Font.StaticModifierProvider(0, a3, a4, a4);
    if (!v6)
      atomic_store(v5, a2);
  }
}

void type metadata accessor for FontBox<Font.ModifierProvider<Font.LeadingModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for FontBox<Font.ModifierProvider<Font.LeadingModifier>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Font.ModifierProvider<Font.LeadingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.LeadingModifier and conformance Font.LeadingModifier, (uint64_t)&type metadata for Font.LeadingModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Font.ModifierProvider);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type Font.ModifierProvider<Font.GradeModifier> and conformance Font.ModifierProvider<A>(&lazy protocol witness table cache variable for type Font.ModifierProvider<Font.LeadingModifier> and conformance Font.ModifierProvider<A>, &lazy cache variable for type metadata for Font.ModifierProvider<Font.LeadingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.LeadingModifier and conformance Font.LeadingModifier, (uint64_t)&type metadata for Font.LeadingModifier);
    v6 = type metadata accessor for FontBox(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for FontBox<Font.ModifierProvider<Font.LeadingModifier>>);
  }
}

unint64_t lazy protocol witness table accessor for type Font.LeadingModifier and conformance Font.LeadingModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.LeadingModifier and conformance Font.LeadingModifier;
  if (!lazy protocol witness table cache variable for type Font.LeadingModifier and conformance Font.LeadingModifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.LeadingModifier, &type metadata for Font.LeadingModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.LeadingModifier and conformance Font.LeadingModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.LeadingModifier and conformance Font.LeadingModifier;
  if (!lazy protocol witness table cache variable for type Font.LeadingModifier and conformance Font.LeadingModifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.LeadingModifier, &type metadata for Font.LeadingModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.LeadingModifier and conformance Font.LeadingModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.LeadingModifier and conformance Font.LeadingModifier;
  if (!lazy protocol witness table cache variable for type Font.LeadingModifier and conformance Font.LeadingModifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.LeadingModifier, &type metadata for Font.LeadingModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.LeadingModifier and conformance Font.LeadingModifier);
  }
  return result;
}

void type metadata accessor for FontBox<Font.ModifierProvider<Font.OpenTypeFeatureSettingModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for FontBox<Font.ModifierProvider<Font.OpenTypeFeatureSettingModifier>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Font.ModifierProvider<Font.OpenTypeFeatureSettingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.OpenTypeFeatureSettingModifier and conformance Font.OpenTypeFeatureSettingModifier, (uint64_t)&type metadata for Font.OpenTypeFeatureSettingModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Font.ModifierProvider);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type Font.ModifierProvider<Font.GradeModifier> and conformance Font.ModifierProvider<A>(&lazy protocol witness table cache variable for type Font.ModifierProvider<Font.OpenTypeFeatureSettingModifier> and conformance Font.ModifierProvider<A>, &lazy cache variable for type metadata for Font.ModifierProvider<Font.OpenTypeFeatureSettingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.OpenTypeFeatureSettingModifier and conformance Font.OpenTypeFeatureSettingModifier, (uint64_t)&type metadata for Font.OpenTypeFeatureSettingModifier);
    v6 = type metadata accessor for FontBox(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for FontBox<Font.ModifierProvider<Font.OpenTypeFeatureSettingModifier>>);
  }
}

unint64_t lazy protocol witness table accessor for type Font.OpenTypeFeatureSettingModifier and conformance Font.OpenTypeFeatureSettingModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.OpenTypeFeatureSettingModifier and conformance Font.OpenTypeFeatureSettingModifier;
  if (!lazy protocol witness table cache variable for type Font.OpenTypeFeatureSettingModifier and conformance Font.OpenTypeFeatureSettingModifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.OpenTypeFeatureSettingModifier, &type metadata for Font.OpenTypeFeatureSettingModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.OpenTypeFeatureSettingModifier and conformance Font.OpenTypeFeatureSettingModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.OpenTypeFeatureSettingModifier and conformance Font.OpenTypeFeatureSettingModifier;
  if (!lazy protocol witness table cache variable for type Font.OpenTypeFeatureSettingModifier and conformance Font.OpenTypeFeatureSettingModifier)
  {
    result = MEMORY[0x23B7C9C04]("i?;\x1B<6\n", &type metadata for Font.OpenTypeFeatureSettingModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.OpenTypeFeatureSettingModifier and conformance Font.OpenTypeFeatureSettingModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.OpenTypeFeatureSettingModifier and conformance Font.OpenTypeFeatureSettingModifier;
  if (!lazy protocol witness table cache variable for type Font.OpenTypeFeatureSettingModifier and conformance Font.OpenTypeFeatureSettingModifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.OpenTypeFeatureSettingModifier, &type metadata for Font.OpenTypeFeatureSettingModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.OpenTypeFeatureSettingModifier and conformance Font.OpenTypeFeatureSettingModifier);
  }
  return result;
}

void type metadata accessor for FontBox<Font.ModifierProvider<Font.FeatureDictionariesSettingModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for FontBox<Font.ModifierProvider<Font.FeatureDictionariesSettingModifier>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Font.ModifierProvider<Font.FeatureDictionariesSettingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.FeatureDictionariesSettingModifier and conformance Font.FeatureDictionariesSettingModifier, (uint64_t)&type metadata for Font.FeatureDictionariesSettingModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Font.ModifierProvider);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type Font.ModifierProvider<Font.GradeModifier> and conformance Font.ModifierProvider<A>(&lazy protocol witness table cache variable for type Font.ModifierProvider<Font.FeatureDictionariesSettingModifier> and conformance Font.ModifierProvider<A>, &lazy cache variable for type metadata for Font.ModifierProvider<Font.FeatureDictionariesSettingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.FeatureDictionariesSettingModifier and conformance Font.FeatureDictionariesSettingModifier, (uint64_t)&type metadata for Font.FeatureDictionariesSettingModifier);
    v6 = type metadata accessor for FontBox(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for FontBox<Font.ModifierProvider<Font.FeatureDictionariesSettingModifier>>);
  }
}

unint64_t lazy protocol witness table accessor for type Font.FeatureDictionariesSettingModifier and conformance Font.FeatureDictionariesSettingModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.FeatureDictionariesSettingModifier and conformance Font.FeatureDictionariesSettingModifier;
  if (!lazy protocol witness table cache variable for type Font.FeatureDictionariesSettingModifier and conformance Font.FeatureDictionariesSettingModifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.FeatureDictionariesSettingModifier, &type metadata for Font.FeatureDictionariesSettingModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.FeatureDictionariesSettingModifier and conformance Font.FeatureDictionariesSettingModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.FeatureDictionariesSettingModifier and conformance Font.FeatureDictionariesSettingModifier;
  if (!lazy protocol witness table cache variable for type Font.FeatureDictionariesSettingModifier and conformance Font.FeatureDictionariesSettingModifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.FeatureDictionariesSettingModifier, &type metadata for Font.FeatureDictionariesSettingModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.FeatureDictionariesSettingModifier and conformance Font.FeatureDictionariesSettingModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.FeatureDictionariesSettingModifier and conformance Font.FeatureDictionariesSettingModifier;
  if (!lazy protocol witness table cache variable for type Font.FeatureDictionariesSettingModifier and conformance Font.FeatureDictionariesSettingModifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.FeatureDictionariesSettingModifier, &type metadata for Font.FeatureDictionariesSettingModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.FeatureDictionariesSettingModifier and conformance Font.FeatureDictionariesSettingModifier);
  }
  return result;
}

void type metadata accessor for FontBox<Font.ModifierProvider<Font.StylisticAlternativeModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for FontBox<Font.ModifierProvider<Font.StylisticAlternativeModifier>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Font.ModifierProvider<Font.StylisticAlternativeModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.StylisticAlternativeModifier and conformance Font.StylisticAlternativeModifier, (uint64_t)&type metadata for Font.StylisticAlternativeModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Font.ModifierProvider);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type Font.ModifierProvider<Font.GradeModifier> and conformance Font.ModifierProvider<A>(&lazy protocol witness table cache variable for type Font.ModifierProvider<Font.StylisticAlternativeModifier> and conformance Font.ModifierProvider<A>, &lazy cache variable for type metadata for Font.ModifierProvider<Font.StylisticAlternativeModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.StylisticAlternativeModifier and conformance Font.StylisticAlternativeModifier, (uint64_t)&type metadata for Font.StylisticAlternativeModifier);
    v6 = type metadata accessor for FontBox(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for FontBox<Font.ModifierProvider<Font.StylisticAlternativeModifier>>);
  }
}

unint64_t lazy protocol witness table accessor for type Font.StylisticAlternativeModifier and conformance Font.StylisticAlternativeModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.StylisticAlternativeModifier and conformance Font.StylisticAlternativeModifier;
  if (!lazy protocol witness table cache variable for type Font.StylisticAlternativeModifier and conformance Font.StylisticAlternativeModifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.StylisticAlternativeModifier, &type metadata for Font.StylisticAlternativeModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.StylisticAlternativeModifier and conformance Font.StylisticAlternativeModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.StylisticAlternativeModifier and conformance Font.StylisticAlternativeModifier;
  if (!lazy protocol witness table cache variable for type Font.StylisticAlternativeModifier and conformance Font.StylisticAlternativeModifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.StylisticAlternativeModifier, &type metadata for Font.StylisticAlternativeModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.StylisticAlternativeModifier and conformance Font.StylisticAlternativeModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.StylisticAlternativeModifier and conformance Font.StylisticAlternativeModifier;
  if (!lazy protocol witness table cache variable for type Font.StylisticAlternativeModifier and conformance Font.StylisticAlternativeModifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.StylisticAlternativeModifier, &type metadata for Font.StylisticAlternativeModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.StylisticAlternativeModifier and conformance Font.StylisticAlternativeModifier);
  }
  return result;
}

void type metadata accessor for FontBox<Font.ModifierProvider<Font.VariationModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for FontBox<Font.ModifierProvider<Font.VariationModifier>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Font.ModifierProvider<Font.VariationModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.VariationModifier and conformance Font.VariationModifier, (uint64_t)&type metadata for Font.VariationModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Font.ModifierProvider);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type Font.ModifierProvider<Font.GradeModifier> and conformance Font.ModifierProvider<A>(&lazy protocol witness table cache variable for type Font.ModifierProvider<Font.VariationModifier> and conformance Font.ModifierProvider<A>, &lazy cache variable for type metadata for Font.ModifierProvider<Font.VariationModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.VariationModifier and conformance Font.VariationModifier, (uint64_t)&type metadata for Font.VariationModifier);
    v6 = type metadata accessor for FontBox(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for FontBox<Font.ModifierProvider<Font.VariationModifier>>);
  }
}

unint64_t lazy protocol witness table accessor for type Font.VariationModifier and conformance Font.VariationModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.VariationModifier and conformance Font.VariationModifier;
  if (!lazy protocol witness table cache variable for type Font.VariationModifier and conformance Font.VariationModifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.VariationModifier, &type metadata for Font.VariationModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.VariationModifier and conformance Font.VariationModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.VariationModifier and conformance Font.VariationModifier;
  if (!lazy protocol witness table cache variable for type Font.VariationModifier and conformance Font.VariationModifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.VariationModifier, &type metadata for Font.VariationModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.VariationModifier and conformance Font.VariationModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.VariationModifier and conformance Font.VariationModifier;
  if (!lazy protocol witness table cache variable for type Font.VariationModifier and conformance Font.VariationModifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.VariationModifier, &type metadata for Font.VariationModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.VariationModifier and conformance Font.VariationModifier);
  }
  return result;
}

void type metadata accessor for FontBox<Font.ModifierProvider<Font.GradeModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for FontBox<Font.ModifierProvider<Font.GradeModifier>>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for Font.ModifierProvider<Font.GradeModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.GradeModifier and conformance Font.GradeModifier, (uint64_t)&type metadata for Font.GradeModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Font.ModifierProvider);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type Font.ModifierProvider<Font.GradeModifier> and conformance Font.ModifierProvider<A>(&lazy protocol witness table cache variable for type Font.ModifierProvider<Font.GradeModifier> and conformance Font.ModifierProvider<A>, &lazy cache variable for type metadata for Font.ModifierProvider<Font.GradeModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.GradeModifier and conformance Font.GradeModifier, (uint64_t)&type metadata for Font.GradeModifier);
    v6 = type metadata accessor for FontBox(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for FontBox<Font.ModifierProvider<Font.GradeModifier>>);
  }
}

unint64_t lazy protocol witness table accessor for type Font.GradeModifier and conformance Font.GradeModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.GradeModifier and conformance Font.GradeModifier;
  if (!lazy protocol witness table cache variable for type Font.GradeModifier and conformance Font.GradeModifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.GradeModifier, &type metadata for Font.GradeModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.GradeModifier and conformance Font.GradeModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.GradeModifier and conformance Font.GradeModifier;
  if (!lazy protocol witness table cache variable for type Font.GradeModifier and conformance Font.GradeModifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.GradeModifier, &type metadata for Font.GradeModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.GradeModifier and conformance Font.GradeModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.GradeModifier and conformance Font.GradeModifier;
  if (!lazy protocol witness table cache variable for type Font.GradeModifier and conformance Font.GradeModifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.GradeModifier, &type metadata for Font.GradeModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.GradeModifier and conformance Font.GradeModifier);
  }
  return result;
}

void _sSDySSypGMaTm_0(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = type metadata accessor for Dictionary();
    if (!v4)
      atomic_store(v3, a2);
  }
}

void type metadata accessor for (CFStringRef, [String])(uint64_t a1)
{
  type metadata accessor for (CFStringRef, [String])(a1, &lazy cache variable for type metadata for (CFStringRef, [String]), (uint64_t)&lazy cache variable for type metadata for [String], MEMORY[0x24BEE0D00], (void (*)(uint64_t, uint64_t, uint64_t, uint64_t (*)(void)))type metadata accessor for MutableBox<CachedEnvironment>);
}

void type metadata accessor for (CFStringRef, [CFDictionaryRef])(uint64_t a1)
{
  type metadata accessor for (CFStringRef, [String])(a1, &lazy cache variable for type metadata for (CFStringRef, [CFDictionaryRef]), (uint64_t)&lazy cache variable for type metadata for [CFDictionaryRef], (uint64_t)type metadata accessor for CFDictionaryRef, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t (*)(void)))type metadata accessor for [(_:)]);
}

void type metadata accessor for (CFStringRef, [String])(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t (*)(void)))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v10;

  if (!*a2)
  {
    type metadata accessor for CFStringRef(255);
    a5(255, a3, a4, MEMORY[0x24BEE1250]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v10)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

void type metadata accessor for (CFStringRef, CGFloat)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (CFStringRef, CGFloat))
  {
    type metadata accessor for CFStringRef(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (CFStringRef, CGFloat));
  }
}

void type metadata accessor for (CFStringRef?, Int)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (CFStringRef?, Int))
  {
    type metadata accessor for [(_:)](255, &lazy cache variable for type metadata for CFStringRef?, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (CFStringRef?, Int));
  }
}

uint64_t type metadata accessor for AnyStaticFontModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyStaticFontModifier);
}

void sub_234F8A19C()
{
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.FontModifiersAttribute and conformance AttributeScopes.SwiftUIAttributes.FontModifiersAttribute();
  AttributeDynamicLookup.subscript.getter();
  __break(1u);
}

uint64_t sub_234F8A1C0()
{
  return 8;
}

uint64_t sub_234F8A1CC()
{
  return swift_release();
}

uint64_t sub_234F8A1D4(_QWORD *a1, _QWORD *a2)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_234F8A1E4()
{
  type metadata accessor for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.FontModifiersAttribute>();
  return dispatch thunk of Hashable.hashValue.getter();
}

_QWORD *sub_234F8A224(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.FontModifiersAttribute and conformance AttributeScopes.SwiftUIAttributes.FontModifiersAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.FontModifiersAttribute and conformance AttributeScopes.SwiftUIAttributes.FontModifiersAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.FontModifiersAttribute and conformance AttributeScopes.SwiftUIAttributes.FontModifiersAttribute)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes.FontModifiersAttribute, &type metadata for AttributeScopes.SwiftUIAttributes.FontModifiersAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.FontModifiersAttribute and conformance AttributeScopes.SwiftUIAttributes.FontModifiersAttribute);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Font.VariationAxisIdentifier and conformance Font.VariationAxisIdentifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.VariationAxisIdentifier and conformance Font.VariationAxisIdentifier;
  if (!lazy protocol witness table cache variable for type Font.VariationAxisIdentifier and conformance Font.VariationAxisIdentifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.VariationAxisIdentifier, &type metadata for Font.VariationAxisIdentifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.VariationAxisIdentifier and conformance Font.VariationAxisIdentifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Font.Weight and conformance Font.Weight()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.Weight and conformance Font.Weight;
  if (!lazy protocol witness table cache variable for type Font.Weight and conformance Font.Weight)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.Weight, &type metadata for Font.Weight);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.Weight and conformance Font.Weight);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Font.Width and conformance Font.Width()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.Width and conformance Font.Width;
  if (!lazy protocol witness table cache variable for type Font.Width and conformance Font.Width)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.Width, &type metadata for Font.Width);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.Width and conformance Font.Width);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Font._StylisticAlternative and conformance Font._StylisticAlternative()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font._StylisticAlternative and conformance Font._StylisticAlternative;
  if (!lazy protocol witness table cache variable for type Font._StylisticAlternative and conformance Font._StylisticAlternative)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font._StylisticAlternative, &type metadata for Font._StylisticAlternative);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font._StylisticAlternative and conformance Font._StylisticAlternative);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Font.Leading and conformance Font.Leading()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.Leading and conformance Font.Leading;
  if (!lazy protocol witness table cache variable for type Font.Leading and conformance Font.Leading)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.Leading, &type metadata for Font.Leading);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.Leading and conformance Font.Leading);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Font._Leading and conformance Font._Leading()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font._Leading and conformance Font._Leading;
  if (!lazy protocol witness table cache variable for type Font._Leading and conformance Font._Leading)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font._Leading, &type metadata for Font._Leading);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font._Leading and conformance Font._Leading);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Font.DesignModifier(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Font.DesignModifier and conformance Font.DesignModifier();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Font.DesignModifier and conformance Font.DesignModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.DesignModifier and conformance Font.DesignModifier;
  if (!lazy protocol witness table cache variable for type Font.DesignModifier and conformance Font.DesignModifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.DesignModifier, &type metadata for Font.DesignModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.DesignModifier and conformance Font.DesignModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.DesignModifier and conformance Font.DesignModifier;
  if (!lazy protocol witness table cache variable for type Font.DesignModifier and conformance Font.DesignModifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.DesignModifier, &type metadata for Font.DesignModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.DesignModifier and conformance Font.DesignModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.DesignModifier and conformance Font.DesignModifier;
  if (!lazy protocol witness table cache variable for type Font.DesignModifier and conformance Font.DesignModifier)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.DesignModifier, &type metadata for Font.DesignModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.DesignModifier and conformance Font.DesignModifier);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Font.LeadingModifier(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Font.LeadingModifier and conformance Font.LeadingModifier();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Font.FeatureSettingModifier(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Font.FeatureSettingModifier and conformance Font.FeatureSettingModifier();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Font.OpenTypeFeatureSettingModifier(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Font.OpenTypeFeatureSettingModifier and conformance Font.OpenTypeFeatureSettingModifier();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Font.FeatureDictionariesSettingModifier(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Font.FeatureDictionariesSettingModifier and conformance Font.FeatureDictionariesSettingModifier();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Font.WeightModifier(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Font.WeightModifier and conformance Font.WeightModifier();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Font.WidthModifier(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Font.WidthModifier and conformance Font.WidthModifier();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Font.StylisticAlternativeModifier(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Font.StylisticAlternativeModifier and conformance Font.StylisticAlternativeModifier();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Font.VariationModifier(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Font.VariationModifier and conformance Font.VariationModifier();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Font.GradeModifier(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Font.GradeModifier and conformance Font.GradeModifier();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for AnyFontModifier(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type AnyTextSizingModifier and conformance AnyTextSizingModifier(&lazy protocol witness table cache variable for type AnyFontModifier and conformance AnyFontModifier, a2, (uint64_t (*)(uint64_t))type metadata accessor for AnyFontModifier, (uint64_t)&protocol conformance descriptor for AnyFontModifier);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for AnyFontModifier()
{
  return objc_opt_self();
}

uint64_t base witness table accessor for Equatable in AnyFontModifier(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type AnyTextSizingModifier and conformance AnyTextSizingModifier(&lazy protocol witness table cache variable for type AnyFontModifier and conformance AnyFontModifier, a2, (uint64_t (*)(uint64_t))type metadata accessor for AnyFontModifier, (uint64_t)&protocol conformance descriptor for AnyFontModifier);
}

unint64_t lazy protocol witness table accessor for type CodableFontWeight and conformance CodableFontWeight()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableFontWeight and conformance CodableFontWeight;
  if (!lazy protocol witness table cache variable for type CodableFontWeight and conformance CodableFontWeight)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableFontWeight, &type metadata for CodableFontWeight);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableFontWeight and conformance CodableFontWeight);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableFontWeight and conformance CodableFontWeight;
  if (!lazy protocol witness table cache variable for type CodableFontWeight and conformance CodableFontWeight)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for CodableFontWeight, &type metadata for CodableFontWeight);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableFontWeight and conformance CodableFontWeight);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for CodableFontWeight(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type CodableFontWeight and conformance CodableFontWeight();
  result = lazy protocol witness table accessor for type CodableFontWeight and conformance CodableFontWeight();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t storeEnumTagSinglePayload for Font.VariationAxisIdentifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_234F8AC9C + 4 * byte_2352B7A09[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_234F8ACD0 + 4 * byte_2352B7A04[v4]))();
}

uint64_t sub_234F8ACD0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F8ACD8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234F8ACE0);
  return result;
}

uint64_t sub_234F8ACEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234F8ACF4);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_234F8ACF8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F8AD00(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Font.VariationAxisIdentifier()
{
  return &type metadata for Font.VariationAxisIdentifier;
}

ValueMetadata *type metadata accessor for Font.Weight()
{
  return &type metadata for Font.Weight;
}

ValueMetadata *type metadata accessor for Font.Width()
{
  return &type metadata for Font.Width;
}

ValueMetadata *type metadata accessor for Font._StylisticAlternative()
{
  return &type metadata for Font._StylisticAlternative;
}

ValueMetadata *type metadata accessor for Font.Leading()
{
  return &type metadata for Font.Leading;
}

ValueMetadata *type metadata accessor for Font._Leading()
{
  return &type metadata for Font._Leading;
}

ValueMetadata *type metadata accessor for Font.BoldModifier()
{
  return &type metadata for Font.BoldModifier;
}

ValueMetadata *type metadata accessor for Font.ItalicModifier()
{
  return &type metadata for Font.ItalicModifier;
}

ValueMetadata *type metadata accessor for Font.MonospacedModifier()
{
  return &type metadata for Font.MonospacedModifier;
}

ValueMetadata *type metadata accessor for Font.MonospacedDigitModifier()
{
  return &type metadata for Font.MonospacedDigitModifier;
}

uint64_t storeEnumTagSinglePayload for Font.DesignModifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_234F8AE04 + 4 * byte_2352B7A13[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_234F8AE38 + 4 * byte_2352B7A0E[v4]))();
}

uint64_t sub_234F8AE38(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F8AE40(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234F8AE48);
  return result;
}

uint64_t sub_234F8AE54(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234F8AE5CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_234F8AE60(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F8AE68(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Font.DesignModifier()
{
  return &type metadata for Font.DesignModifier;
}

uint64_t storeEnumTagSinglePayload for Font.Leading(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_234F8AED0 + 4 * byte_2352B7A1D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_234F8AF04 + 4 * byte_2352B7A18[v4]))();
}

uint64_t sub_234F8AF04(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F8AF0C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234F8AF14);
  return result;
}

uint64_t sub_234F8AF20(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234F8AF28);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_234F8AF2C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F8AF34(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Font.LeadingModifier()
{
  return &type metadata for Font.LeadingModifier;
}

ValueMetadata *type metadata accessor for Font.FeatureSettingModifier()
{
  return &type metadata for Font.FeatureSettingModifier;
}

ValueMetadata *type metadata accessor for Font.OpenTypeFeatureSettingModifier()
{
  return &type metadata for Font.OpenTypeFeatureSettingModifier;
}

ValueMetadata *type metadata accessor for Font.FeatureDictionariesSettingModifier()
{
  return &type metadata for Font.FeatureDictionariesSettingModifier;
}

ValueMetadata *type metadata accessor for Font.WeightModifier()
{
  return &type metadata for Font.WeightModifier;
}

ValueMetadata *type metadata accessor for Font.WidthModifier()
{
  return &type metadata for Font.WidthModifier;
}

uint64_t getEnumTagSinglePayload for Font._StylisticAlternative(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xED)
    goto LABEL_17;
  if (a2 + 19 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 19) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 19;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 19;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 19;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x14;
  v8 = v6 - 20;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Font._StylisticAlternative(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 19 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 19) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xED)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEC)
    return ((uint64_t (*)(void))((char *)&loc_234F8B07C + 4 * byte_2352B7A27[v4]))();
  *a1 = a2 + 19;
  return ((uint64_t (*)(void))((char *)sub_234F8B0B0 + 4 * byte_2352B7A22[v4]))();
}

uint64_t sub_234F8B0B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F8B0B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234F8B0C0);
  return result;
}

uint64_t sub_234F8B0CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234F8B0D4);
  *(_BYTE *)result = a2 + 19;
  return result;
}

uint64_t sub_234F8B0D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F8B0E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Font.StylisticAlternativeModifier()
{
  return &type metadata for Font.StylisticAlternativeModifier;
}

uint64_t getEnumTagSinglePayload for Font.VariationModifier(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && a1[16])
    return (*(_DWORD *)a1 + 252);
  v3 = *a1;
  v4 = v3 >= 5;
  v5 = v3 - 5;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Font.VariationModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_QWORD *)result = a2 - 252;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 4;
  }
  return result;
}

ValueMetadata *type metadata accessor for Font.VariationModifier()
{
  return &type metadata for Font.VariationModifier;
}

ValueMetadata *type metadata accessor for Font.GradeModifier()
{
  return &type metadata for Font.GradeModifier;
}

uint64_t dispatch thunk of FontModifier.modify(descriptor:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of FontModifier.modify(traits:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of static StaticFontModifier.modify(descriptor:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of static StaticFontModifier.modify(traits:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t method lookup function for AnyFontModifier()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AnyFontModifier.modify(descriptor:in:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 80))();
}

uint64_t dispatch thunk of AnyFontModifier.modify(traits:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of AnyFontModifier.isEqual(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of AnyFontModifier.hash(into:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of AnyFontModifier.typeID.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of AnyFontModifier.hashValue.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t method lookup function for AnyDynamicFontModifier()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AnyDynamicFontModifier.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

ValueMetadata *type metadata accessor for CodableFontWeight()
{
  return &type metadata for CodableFontWeight;
}

uint64_t getEnumTagSinglePayload for Font.ModifierProvider(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  uint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 8) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(_WORD *)((char *)a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v7 + 8) & ~v7);
      v15 = *a1;
      if (*a1 >= 0xFFFFFFFFuLL)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((_BYTE *)a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234F8B30C + 4 * byte_2352B7A2C[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for Font.ModifierProvider(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

void base witness table accessor for Equatable in Font.StaticModifierProvider<A>()
{
  JUMPOUT(0x23B7C9C04);
}

void base witness table accessor for Equatable in Font.ModifierProvider<A>()
{
  JUMPOUT(0x23B7C9C04);
}

uint64_t instantiation function for generic protocol witness table for Font.ModifierProvider<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.ModifierProvider<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for Font.StaticModifierProvider<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Font.StaticModifierProvider<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void type metadata accessor for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.FontModifiersAttribute>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.FontModifiersAttribute>)
  {
    type metadata accessor for AttributeScopes.SwiftUIAttributes(255);
    v0 = type metadata accessor for KeyPath();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.FontModifiersAttribute>);
  }
}

ValueMetadata *type metadata accessor for FontModifiersKey()
{
  return &type metadata for FontModifiersKey;
}

ValueMetadata *type metadata accessor for GradientBlurTextEffect()
{
  return &type metadata for GradientBlurTextEffect;
}

uint64_t closure #1 in GradientBlurTextEffect.apply(to:fragment:timing:state:context:in:)(uint64_t *a1, double a2, double a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t inited;
  uint64_t v31;
  uint64_t v32;
  CGFloat MinX;
  CGFloat MinY;
  CGFloat MaxX;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  char v42;
  unint64_t v43[9];
  char v44;
  _QWORD v45[4];
  unsigned __int8 v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;

  v13 = a2;
  if (*(float *)(*a1 + 32) == v13)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v37 = RBDrawingStateInit();
    type metadata accessor for GraphicsContext.Storage();
    swift_allocObject();
    v38 = swift_retain();
    *a1 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v38, v37, 1, 0);
    swift_release();
  }
  *(float *)(*a1 + 32) = v13;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
LABEL_3:
    v14 = RBDrawingStateInit();
    type metadata accessor for GraphicsContext.Storage();
    swift_allocObject();
    v15 = swift_retain();
    *a1 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v15, v14, 1, 0);
    swift_release();
  }
LABEL_4:
  v16 = RBDrawingStateBeginLayer();
  type metadata accessor for GraphicsContext.Storage();
  swift_allocObject();
  v17 = swift_retain();
  GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v17, v16, 0, 1);
  swift_retain();
  if (a3 > 0.0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v18 = RBDrawingStateInit();
      swift_allocObject();
      v19 = swift_retain();
      GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v19, v18, 1, 0);
      swift_release();
    }
    RBDrawingStateAddBlurFilter();
  }
  RBDrawingStateDrawDisplayList2();
  swift_release();
  RBDrawingStateClipLayer();
  swift_release();
  v47.origin.x = CGRect.outset(by:)(a3, a3, a3, a3, a4, a5, a6, a7);
  x = v47.origin.x;
  y = v47.origin.y;
  width = v47.size.width;
  height = v47.size.height;
  v24 = *a1;
  if (CGRectIsNull(v47))
  {
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 6;
  }
  else
  {
    v29 = 0;
    v25 = *(_QWORD *)&x;
    v26 = *(_QWORD *)&y;
    v27 = *(_QWORD *)&width;
    v28 = *(_QWORD *)&height;
  }
  v45[0] = v25;
  v45[1] = v26;
  v45[2] = v27;
  v45[3] = v28;
  v46 = v29;
  type metadata accessor for _ContiguousArrayStorage<Color>();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2352828C0;
  if (one-time initialization token for red != -1)
    swift_once();
  *(_QWORD *)(inited + 32) = static Color.red;
  v31 = one-time initialization token for green;
  swift_retain();
  if (v31 != -1)
    swift_once();
  *(_QWORD *)(inited + 40) = static Color.green;
  specialized Array._endMutation()();
  swift_retain();
  v32 = specialized Gradient.init(colors:)(inited);
  v48.origin.x = a4;
  v48.origin.y = a5;
  v48.size.width = a6;
  v48.size.height = a7;
  MinX = CGRectGetMinX(v48);
  v49.origin.x = a4;
  v49.origin.y = a5;
  v49.size.width = a6;
  v49.size.height = a7;
  MinY = CGRectGetMinY(v49);
  v50.origin.x = a4;
  v50.origin.y = a5;
  v50.size.width = a6;
  v50.size.height = a7;
  MaxX = CGRectGetMaxX(v50);
  v51.origin.x = a4;
  v51.origin.y = a5;
  v51.size.width = a6;
  v51.size.height = a7;
  v43[0] = v32;
  v43[1] = 0;
  *(CGFloat *)&v43[2] = MinX;
  *(CGFloat *)&v43[3] = MinY;
  *(CGFloat *)&v43[4] = MaxX;
  v43[5] = CGRectGetMaxY(v51);
  memset(&v43[6], 0, 24);
  v44 = 5;
  v39 = 256;
  v40 = 0u;
  v41 = 0u;
  v42 = 0;
  GraphicsContext.draw(_:with:style:)((uint64_t)v45, v43, &v39, v24);
  outlined consume of Path.Storage(v25, v26, v27, v28, v29);
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Text.Effect.Filter.apply(to:fragment:timing:state:context:in:) in conformance GradientBlurTextEffect(uint64_t *a1, uint64_t a2, uint64_t a3, double *a4, uint64_t a5, uint64_t a6)
{
  double *v6;

  return specialized GradientBlurTextEffect.apply(to:fragment:timing:state:context:in:)(a1, a4, a6, *v6);
}

double protocol witness for Text.Effect.Filter.drawingOutsets.getter in conformance GradientBlurTextEffect()
{
  uint64_t v0;

  return *(double *)v0;
}

unint64_t instantiation function for generic protocol witness table for GradientBlurTextEffect(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type GradientBlurTextEffect and conformance GradientBlurTextEffect();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t specialized GradientBlurTextEffect.apply(to:fragment:timing:state:context:in:)(uint64_t *a1, double *a2, uint64_t a3, double a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  double v33;
  double v34;
  CGFloat x;
  CGFloat y;
  CGFloat height;
  CGFloat width;
  uint64_t v39;
  uint64_t v40;
  uint64_t j;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  CGFloat v52;
  CGFloat v53;
  CGFloat v54;
  CGFloat v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  _QWORD v82[7];
  CGRect v83;
  CGRect v84;
  CGRect v85;

  v6 = *a1;
  v7 = a1[1];
  v8 = a1[4];
  v60 = a1[3];
  v61 = a1[2];
  v9 = a1[6];
  v59 = a1[5];
  v10 = a1[7];
  v11 = a2[2];
  v12 = a2[3];
  v13 = a2[6];
  v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EEF8]), sel_init);
  v15 = *(_QWORD *)(*(_QWORD *)a3 + 16);
  objc_msgSend(*(id *)(v15 + 16), sel_deviceScale);
  objc_msgSend(v14, sel_setDeviceScale_);
  v17 = *(_QWORD *)(v15 + 48);
  v16 = *(_QWORD *)(v15 + 56);
  type metadata accessor for GraphicsContext.Storage();
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 32) = 1065353216;
  *(_QWORD *)(v18 + 40) = 0x7FF8000000000000;
  *(_QWORD *)&v72 = v17;
  *((_QWORD *)&v72 + 1) = v16;
  type metadata accessor for GraphicsContext.Storage.Shared();
  swift_allocObject();
  swift_retain();
  v19 = v14;
  swift_retain();
  *(_QWORD *)(v18 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v19, (uint64_t *)&v72);
  *(_QWORD *)(v18 + 24) = RBDisplayListGetState();
  *(_BYTE *)(v18 + 48) = 0;
  v81 = v18;
  v82[0] = v61;
  v82[1] = v60;
  v82[2] = v8;
  v82[3] = v59;
  v82[4] = v9;
  v82[5] = v10;
  v20 = *(_QWORD *)(v7 + 16);
  if (v20)
  {
    swift_bridgeObjectRetain();
    v21 = v20 - 1;
    for (i = 32; ; i += 144)
    {
      v72 = *(_OWORD *)(v7 + i);
      v23 = *(_OWORD *)(v7 + i + 16);
      v24 = *(_OWORD *)(v7 + i + 32);
      v25 = *(_OWORD *)(v7 + i + 64);
      v75 = *(_OWORD *)(v7 + i + 48);
      v76 = v25;
      v73 = v23;
      v74 = v24;
      v26 = *(_OWORD *)(v7 + i + 80);
      v27 = *(_OWORD *)(v7 + i + 96);
      v28 = *(_OWORD *)(v7 + i + 128);
      v79 = *(_OWORD *)(v7 + i + 112);
      v80 = v28;
      v77 = v26;
      v78 = v27;
      v29 = *(_OWORD *)(v7 + i + 112);
      v69 = *(_OWORD *)(v7 + i + 96);
      v70 = v29;
      v71 = *(_OWORD *)(v7 + i + 128);
      v30 = *(_OWORD *)(v7 + i + 48);
      v65 = *(_OWORD *)(v7 + i + 32);
      v66 = v30;
      v31 = *(_OWORD *)(v7 + i + 80);
      v67 = *(_OWORD *)(v7 + i + 64);
      v68 = v31;
      v32 = *(_OWORD *)(v7 + i + 16);
      v63 = *(_OWORD *)(v7 + i);
      v64 = v32;
      v62 = v6;
      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v72, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
      Text.Effect.ResolvedDrawing.Operation.draw(at:context:options:in:)((uint64_t)&v62, (uint64_t)v82, 0, 0, 1, (uint64_t)&v81);
      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v72, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
      if (!v21)
        break;
      --v21;
    }
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v19, sel_moveContents, v59);
  if (v12 - v11 >= 0.0)
  {
    v34 = (v12 - v11) / v13;
    v33 = 0.0;
    if (v34 < 0.0)
      goto LABEL_13;
  }
  else
  {
    v33 = 0.0;
    v34 = 0.0 / v13;
    if (0.0 / v13 < 0.0)
      goto LABEL_13;
  }
  if (v34 <= 1.0)
    v33 = v34;
  else
    v33 = 1.0;
LABEL_13:
  x = *MEMORY[0x24BDBF070];
  y = *(double *)(MEMORY[0x24BDBF070] + 8);
  width = *(double *)(MEMORY[0x24BDBF070] + 16);
  height = *(double *)(MEMORY[0x24BDBF070] + 24);
  v39 = *(_QWORD *)(v7 + 16);
  if (v39)
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v40 = v39 - 1;
    for (j = 32; ; j += 144)
    {
      v72 = *(_OWORD *)(v7 + j);
      v42 = *(_OWORD *)(v7 + j + 16);
      v43 = *(_OWORD *)(v7 + j + 32);
      v44 = *(_OWORD *)(v7 + j + 64);
      v75 = *(_OWORD *)(v7 + j + 48);
      v76 = v44;
      v73 = v42;
      v74 = v43;
      v45 = *(_OWORD *)(v7 + j + 80);
      v46 = *(_OWORD *)(v7 + j + 96);
      v47 = *(_OWORD *)(v7 + j + 128);
      v79 = *(_OWORD *)(v7 + j + 112);
      v80 = v47;
      v77 = v45;
      v78 = v46;
      v48 = *(_OWORD *)(v7 + j + 112);
      v69 = *(_OWORD *)(v7 + j + 96);
      v70 = v48;
      v71 = *(_OWORD *)(v7 + j + 128);
      v49 = *(_OWORD *)(v7 + j + 48);
      v65 = *(_OWORD *)(v7 + j + 32);
      v66 = v49;
      v50 = *(_OWORD *)(v7 + j + 80);
      v67 = *(_OWORD *)(v7 + j + 64);
      v68 = v50;
      v51 = *(_OWORD *)(v7 + j + 16);
      v63 = *(_OWORD *)(v7 + j);
      v64 = v51;
      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v72, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
      Text.Effect.ResolvedDrawing.Operation.drawingBounds(context:)();
      v85.origin.x = v52;
      v85.origin.y = v53;
      v85.size.width = v54;
      v85.size.height = v55;
      v83.origin.x = x;
      v83.origin.y = y;
      v83.size.width = width;
      v83.size.height = height;
      v84 = CGRectUnion(v83, v85);
      x = v84.origin.x;
      y = v84.origin.y;
      width = v84.size.width;
      height = v84.size.height;
      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v72, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
      if (!v40)
        break;
      --v40;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
  }
  v56 = RBDrawingStateBeginLayer();
  swift_allocObject();
  v57 = swift_retain();
  *(_QWORD *)&v72 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v57, v56, 0, 1);
  swift_retain();
  closure #1 in GradientBlurTextEffect.apply(to:fragment:timing:state:context:in:)((uint64_t *)&v72, 1.0 - (v33 + v33 + -1.0) * (v33 + v33 + -1.0), a4, x, y, width, height);
  swift_release();
  RBDrawingStateDrawLayer();
  swift_release();
  RBDrawingStateDrawDisplayList2();

  swift_unknownObjectRelease();
  return swift_release();
}

void PreferencesOutputs.init()(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = MEMORY[0x24BEE4AF8];
  *(_DWORD *)(a1 + 8) = 0;
}

unint64_t PreferencesOutputs.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[6];
  int v17;
  char v18;
  unsigned int v19;
  unsigned __int8 v20;

  v7 = *v4;
  v8 = type metadata accessor for _AnyPreferenceKey(0, a2, a3, a4);
  v9 = *(_QWORD *)(v7 + 16);
  if (v9)
  {
    v10 = (_DWORD *)(v7 + 48);
    while (*((_QWORD *)v10 - 2) != v8)
    {
      v10 += 6;
      if (!--v9)
        goto LABEL_5;
    }
    v12 = 0;
    v11 = *v10;
  }
  else
  {
LABEL_5:
    v11 = 0;
    v12 = 1;
  }
  v17 = v11;
  v18 = v12;
  MEMORY[0x24BDAC7A8](v8);
  v16[2] = a2;
  v16[3] = a3;
  type metadata accessor for AGAttribute?();
  swift_getAssociatedTypeWitness();
  v13 = type metadata accessor for Attribute();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))protocol witness for OptionSet.init(rawValue:) in conformance CTRunStatus, (uint64_t)v16, MEMORY[0x24BEE4078], v13, v14, (uint64_t)&v19);
  return v19 | ((unint64_t)v20 << 32);
}

void PreferencesOutputs.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[6];
  int v12;
  char v13;
  unsigned int v14;
  unsigned __int8 v15;

  v7 = type metadata accessor for _AnyPreferenceKey(0, a3, a4, a4);
  v12 = a1;
  v13 = BYTE4(a1) & 1;
  v11[2] = a3;
  v11[3] = a4;
  swift_getAssociatedTypeWitness();
  type metadata accessor for Attribute();
  type metadata accessor for Optional();
  type metadata accessor for AGAttribute(0);
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))protocol witness for OptionSet.init(rawValue:) in conformance CTRunStatus, (uint64_t)v11, MEMORY[0x24BEE4078], v8, v9, (uint64_t)&v14);
  LOBYTE(v12) = v15;
  PreferencesOutputs.subscript.setter(v14 | ((unint64_t)v15 << 32), v7, (uint64_t)&protocol witness table for _AnyPreferenceKey<A>, v10);
}

{
  uint64_t *v4;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;

  type metadata accessor for _AnyPreferenceKey<DisplayList.Key>(0, a2, a3, a4);
  if (v8 == a2)
  {
    v9 = *((_DWORD *)v4 + 2);
    if ((v9 & 0x100) == 0)
      *((_DWORD *)v4 + 2) = v9 | 0x100;
  }
  v10 = (_QWORD *)*v4;
  v11 = *(_QWORD *)(*v4 + 16);
  if (v11)
  {
    v12 = 0;
    v13 = 0;
    while (v10[v12 + 4] != a2)
    {
      ++v13;
      v12 += 3;
      if (v11 == v13)
        goto LABEL_8;
    }
    if ((a1 & 0x100000000) != 0)
    {
      specialized Array.remove(at:)(v13);
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
      if (v13 >= v10[2])
      {
        __break(1u);
      }
      else
      {
        LODWORD(v10[v12 + 6]) = a1;
        *v4 = (uint64_t)v10;
      }
    }
  }
  else
  {
LABEL_8:
    if ((a1 & 0x100000000) == 0)
    {
      v14 = a1;
      closure #1 in PreferencesOutputs.subscript.setter(&v14, v4, a2, a3);
    }
  }
}

uint64_t PreferencesOutputs.setIndirectDependency(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  if (v1)
  {
    swift_bridgeObjectRetain();
    v2 = 48;
    do
    {
      AGGraphSetIndirectDependency();
      v2 += 24;
      --v1;
    }
    while (v1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t PreferencesOutputs.attachIndirectOutputs(to:)(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 16);
  if (v3)
  {
    v4 = *(_QWORD *)(*(_QWORD *)result + 16);
    v5 = *(_QWORD *)result + 48;
    swift_bridgeObjectRetain();
    for (i = 0; i != v3; ++i)
    {
      if (v4)
      {
        v7 = v5;
        v8 = v4;
        while (*(_QWORD *)(v7 - 16) != *(_QWORD *)(v2 + 32 + 24 * i))
        {
          v7 += 24;
          if (!--v8)
            goto LABEL_4;
        }
        AGGraphSetIndirectAttribute();
      }
LABEL_4:
      ;
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall PreferencesOutputs.detachIndirectOutputs()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  int v5;
  int v6;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    v3 = (_DWORD *)(v1 + 48);
    do
    {
      v4 = *((_QWORD *)v3 - 1);
      v5 = *v3;
      v3 += 6;
      v6 = v5;
      (*(void (**)(int *, ValueMetadata *, _UNKNOWN **))(v4 + 16))(&v6, &type metadata for ResetPreference #1 in PreferencesOutputs.detachIndirectOutputs(), &protocol witness table for ResetPreference #1 in PreferencesOutputs.detachIndirectOutputs());
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
}

unint64_t PreferencesOutputs.subscript.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned __int8 v4;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  if (v2)
  {
    v3 = (unsigned int *)(*(_QWORD *)v1 + 48);
    while (*((_QWORD *)v3 - 2) != a1)
    {
      v3 += 6;
      if (!--v2)
        goto LABEL_5;
    }
    v4 = 0;
    v2 = *v3;
  }
  else
  {
LABEL_5:
    v4 = 1;
  }
  return v2 | ((unint64_t)v4 << 32);
}

uint64_t PreferencesOutputs.appendPreference<A>(key:value:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  _QWORD **v4;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  _QWORD *v13;

  v8 = *v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
  v11 = v8[2];
  v10 = v8[3];
  if (v11 >= v10 >> 1)
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
  result = type metadata accessor for _AnyPreferenceKey(0, a3, a4, v9);
  v8[2] = v11 + 1;
  v13 = &v8[3 * v11];
  v13[4] = result;
  v13[5] = &protocol witness table for _AnyPreferenceKey<A>;
  *((_DWORD *)v13 + 12) = a2;
  *v4 = v8;
  return result;
}

uint64_t PreferencesOutputs.forEachPreference(_:)(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, _QWORD);
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 16);
  if (v3)
  {
    v4 = (void (*)(uint64_t, uint64_t, _QWORD))result;
    swift_bridgeObjectRetain();
    v5 = (_DWORD *)(v2 + 48);
    do
    {
      v6 = *((_QWORD *)v5 - 2);
      v7 = *((_QWORD *)v5 - 1);
      v8 = *v5;
      v5 += 6;
      v4(v6, v7, v8);
      --v3;
    }
    while (v3);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void PreferencesOutputs.debugProperties.getter(_DWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_DWORD *)(v1 + 8);
}

_DWORD *PreferencesOutputs.debugProperties.setter(_DWORD *result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 8) = *result;
  return result;
}

uint64_t (*PreferencesOutputs.debugProperties.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t closure #1 in PreferencesOutputs.subscript.setter(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v7;
  _QWORD *v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;

  v7 = *a1;
  v8 = (_QWORD *)*a2;
  result = swift_isUniquelyReferenced_nonNull_native();
  *a2 = (uint64_t)v8;
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    v8 = (_QWORD *)result;
    *a2 = result;
  }
  v11 = v8[2];
  v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
    v8 = (_QWORD *)result;
  }
  v8[2] = v11 + 1;
  v12 = &v8[3 * v11];
  v12[4] = a3;
  v12[5] = a4;
  *((_DWORD *)v12 + 12) = v7;
  *a2 = (uint64_t)v8;
  return result;
}

void (*PreferencesOutputs.subscript.modify(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  char v6;

  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)a1 = a2;
  v4 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  if (v4)
  {
    v5 = (_DWORD *)(*(_QWORD *)v3 + 48);
    while (*((_QWORD *)v5 - 2) != a2)
    {
      v5 += 6;
      if (!--v4)
        goto LABEL_5;
    }
    v6 = 0;
    LODWORD(v4) = *v5;
  }
  else
  {
LABEL_5:
    v6 = 1;
  }
  *(_DWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 28) = v6;
  return _ViewOutputs.subscript.modify;
}

void (*PreferencesOutputs.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;

  v9 = malloc(0x28uLL);
  *a1 = v9;
  v9[2] = a4;
  v9[3] = v4;
  *v9 = a2;
  v9[1] = a3;
  v11 = PreferencesOutputs.subscript.getter((uint64_t)v9, a3, a4, v10);
  *((_DWORD *)v9 + 8) = v11;
  *((_BYTE *)v9 + 36) = BYTE4(v11) & 1;
  return PreferencesOutputs.subscript.modify;
}

void PreferencesOutputs.subscript.modify(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  PreferencesOutputs.subscript.setter(*(unsigned int *)(*(_QWORD *)a1 + 32) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)a1 + 36) << 32), a2, *(_QWORD *)(*(_QWORD *)a1 + 8), *(_QWORD *)(*(_QWORD *)a1 + 16));
  free(v2);
}

uint64_t visit<A>(key:) in ResetPreference #1 in PreferencesOutputs.detachIndirectOutputs()()
{
  return AGGraphSetIndirectAttribute();
}

void type metadata accessor for AGAttribute?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AGAttribute?)
  {
    type metadata accessor for AGAttribute(255);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AGAttribute?);
  }
}

ValueMetadata *type metadata accessor for PreferencesOutputs()
{
  return &type metadata for PreferencesOutputs;
}

ValueMetadata *type metadata accessor for PreferencesOutputs.KeyValue()
{
  return &type metadata for PreferencesOutputs.KeyValue;
}

ValueMetadata *type metadata accessor for ResetPreference #1 in PreferencesOutputs.detachIndirectOutputs()()
{
  return &type metadata for ResetPreference #1 in PreferencesOutputs.detachIndirectOutputs();
}

uint64_t one-time initialization function for shared(uint64_t a1)
{
  return one-time initialization function for shared(a1, (uint64_t (*)(void))_initializeCoreGlue, (void (*)(void))type metadata accessor for CoreGlue, (uint64_t *)&static CoreGlue.shared);
}

{
  return one-time initialization function for shared(a1, (uint64_t (*)(void))_initializeCoreGlue2, (void (*)(void))type metadata accessor for CoreGlue2, (uint64_t *)&static CoreGlue2.shared);
}

id static CoreGlue.shared.getter()
{
  return static CoreGlue.shared.getter(&one-time initialization token for shared, (id *)&static CoreGlue.shared);
}

void static CoreGlue.shared.setter(void *a1)
{
  static CoreGlue.shared.setter(a1, &one-time initialization token for shared, (void **)&static CoreGlue.shared);
}

uint64_t (*static CoreGlue.shared.modify())()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

void CoreGlue.maxVelocity(_:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall CoreGlue.nextUpdate(nextTime:interval:reason:)(SwiftUI::Time nextTime, Swift::Double interval, Swift::UInt32_optional reason)
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Bool __swiftcall CoreGlue.hasTestHost()()
{
  Swift::Bool result;

  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void CoreGlue.isInstantiated(graph:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void CoreGlue.defaultImplicitRootType.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void CoreGlue.defaultSpacing.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void CoreGlue.makeDefaultLayoutComputer()()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void CoreGlue.makeDefaultLayoutComputer(graph:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void CoreGlue.startChildGeometries(_:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t CoreGlue.StartChildGeometriesParameters.init(recorder:parentSize:origin:attributeID:)@<X0>(uint64_t result@<X0>, _OWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  __int128 v6;

  *(_QWORD *)a4 = result;
  v6 = a2[1];
  *(_OWORD *)(a4 + 8) = *a2;
  *(_OWORD *)(a4 + 24) = v6;
  *(double *)(a4 + 40) = a5;
  *(double *)(a4 + 48) = a6;
  *(_DWORD *)(a4 + 56) = a3;
  return result;
}

void CoreGlue.endChildGeometries(_:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t CoreGlue.EndChildGeometriesParameters.init(recorder:geometries:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

void CoreGlue.makeLayoutView<A>(root:inputs:body:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void CoreGlue.addDisplayListTreeValue(outputs:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void CoreGlue.updateData(_:value:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void CoreGlue.makeForEachView<A, B, C>(view:inputs:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void CoreGlue.makeForEachViewList<A, B, C>(view:inputs:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void CoreGlue.defaultOpenURLAction(env:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void CoreGlue.defaultOpenSensitiveURLAction()()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id CoreGlue.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id CoreGlue.init()()
{
  return CoreGlue.init()(type metadata accessor for CoreGlue);
}

uint64_t type metadata accessor for CoreGlue()
{
  return objc_opt_self();
}

id CoreGlue.__deallocating_deinit()
{
  return CoreGlue.__deallocating_deinit(type metadata accessor for CoreGlue);
}

uint64_t CoreGlue.DefaultImplicitRootTypeResult.value.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t CoreGlue.DefaultImplicitRootTypeResult.value.setter(uint64_t result, uint64_t a2)
{
  _QWORD *v2;

  *v2 = result;
  v2[1] = a2;
  return result;
}

uint64_t (*CoreGlue.DefaultImplicitRootTypeResult.value.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t CoreGlue.DefaultImplicitRootTypeResult.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t CoreGlue.MakeDefaultLayoutComputerResult.value.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t CoreGlue.MakeDefaultLayoutComputerResult.value.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*CoreGlue.MakeDefaultLayoutComputerResult.value.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t CoreGlue.MakeDefaultLayoutComputerResult.init(_:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t CoreGlue.StartChildGeometriesParameters.recorder.getter()
{
  return swift_retain();
}

uint64_t CoreGlue.StartChildGeometriesParameters.recorder.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*CoreGlue.StartChildGeometriesParameters.recorder.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

__n128 CoreGlue.StartChildGeometriesParameters.parentSize.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 8);
  v3 = *(_OWORD *)(v1 + 24);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 CoreGlue.StartChildGeometriesParameters.parentSize.setter(uint64_t a1)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 8) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 24) = v3;
  return result;
}

uint64_t (*CoreGlue.StartChildGeometriesParameters.parentSize.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double CoreGlue.StartChildGeometriesParameters.origin.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 40);
}

void CoreGlue.StartChildGeometriesParameters.origin.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 40) = a1;
  *(double *)(v2 + 48) = a2;
}

uint64_t (*CoreGlue.StartChildGeometriesParameters.origin.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t CoreGlue.StartChildGeometriesParameters.attributeID.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 56);
}

uint64_t CoreGlue.StartChildGeometriesParameters.attributeID.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 56) = result;
  return result;
}

uint64_t (*CoreGlue.StartChildGeometriesParameters.attributeID.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t CoreGlue.EndChildGeometriesParameters.recorder.getter()
{
  return swift_retain();
}

uint64_t CoreGlue.EndChildGeometriesParameters.recorder.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*CoreGlue.EndChildGeometriesParameters.recorder.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t CoreGlue.EndChildGeometriesParameters.geometries.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CoreGlue.EndChildGeometriesParameters.geometries.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*CoreGlue.EndChildGeometriesParameters.geometries.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t one-time initialization function for shared(uint64_t a1, uint64_t (*a2)(void), void (*a3)(void), uint64_t *a4)
{
  id v6;
  uint64_t result;

  v6 = (id)a2();
  a3();
  result = swift_dynamicCastClassUnconditional();
  *a4 = result;
  return result;
}

id static CoreGlue2.shared.getter()
{
  return static CoreGlue.shared.getter(&one-time initialization token for shared, (id *)&static CoreGlue2.shared);
}

id static CoreGlue.shared.getter(_QWORD *a1, id *a2)
{
  if (*a1 != -1)
    swift_once();
  swift_beginAccess();
  return *a2;
}

void static CoreGlue2.shared.setter(void *a1)
{
  static CoreGlue.shared.setter(a1, &one-time initialization token for shared, (void **)&static CoreGlue2.shared);
}

void static CoreGlue.shared.setter(void *a1, _QWORD *a2, void **a3)
{
  void *v5;

  if (*a2 != -1)
    swift_once();
  swift_beginAccess();
  v5 = *a3;
  *a3 = a1;

}

uint64_t (*static CoreGlue2.shared.modify())()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

Swift::Void __swiftcall CoreGlue2.initializeTestApp()()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Bool_optional __swiftcall CoreGlue2.isStatusBarHidden()()
{
  Swift::Bool_optional result;

  result.value = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void CoreGlue2.configureDefaultEnvironment(_:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void CoreGlue2.configureEmptyEnvironment(_:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void CoreGlue2.makeRootView(base:rootFocusScope:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void CoreGlue2.systemDefaultDynamicTypeSize.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void CoreGlue2.codableAttachmentCellType.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void CoreGlue2.linkURL(_:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t CoreGlue2.linkURL(at:in:stringDrawing:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  _QWORD *v5;
  void (*v6)(_QWORD *);
  _QWORD v8[5];

  *(double *)v8 = a2;
  *(double *)&v8[1] = a3;
  *(double *)&v8[2] = a4;
  *(double *)&v8[3] = a5;
  v8[4] = a1;
  v6 = *(void (**)(_QWORD *))((*MEMORY[0x24BEE4EA0] & *v5) + 0x88);
  swift_retain();
  v6(v8);
  return swift_release();
}

uint64_t CoreGlue2.LinkURLParameters.init(point:size:stringDrawing:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  *(double *)a2 = a3;
  *(double *)(a2 + 8) = a4;
  *(double *)(a2 + 16) = a5;
  *(double *)(a2 + 24) = a6;
  *(_QWORD *)(a2 + 32) = result;
  return result;
}

void CoreGlue2.transformingEquivalentAttributes(_:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void CoreGlue2.makeSummarySymbolHost(isOn:font:foregroundColor:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id CoreGlue2.init()()
{
  return CoreGlue.init()(type metadata accessor for CoreGlue2);
}

id CoreGlue.init()(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t type metadata accessor for CoreGlue2()
{
  return objc_opt_self();
}

id @objc CoreGlue.init()(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  objc_super v4;

  v4.receiver = a1;
  v4.super_class = (Class)a3();
  return objc_msgSendSuper2(&v4, sel_init);
}

id CoreGlue2.__deallocating_deinit()
{
  return CoreGlue.__deallocating_deinit(type metadata accessor for CoreGlue2);
}

id CoreGlue.__deallocating_deinit(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t CoreGlue2.CodableAttachmentCellTypeResult.value.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t CoreGlue2.CodableAttachmentCellTypeResult.value.setter(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  *v3 = result;
  v3[1] = a2;
  v3[2] = a3;
  return result;
}

uint64_t (*CoreGlue2.CodableAttachmentCellTypeResult.value.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t CoreGlue2.CodableAttachmentCellTypeResult.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

double CoreGlue2.LinkURLParameters.point.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void CoreGlue2.LinkURLParameters.point.setter(double a1, double a2)
{
  double *v2;

  *v2 = a1;
  v2[1] = a2;
}

uint64_t (*CoreGlue2.LinkURLParameters.point.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

double CoreGlue2.LinkURLParameters.size.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void CoreGlue2.LinkURLParameters.size.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 16) = a1;
  *(double *)(v2 + 24) = a2;
}

uint64_t (*CoreGlue2.LinkURLParameters.size.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t CoreGlue2.LinkURLParameters.stringDrawing.getter()
{
  return swift_retain();
}

uint64_t CoreGlue2.LinkURLParameters.stringDrawing.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v1 + 32) = a1;
  return result;
}

uint64_t (*CoreGlue2.LinkURLParameters.stringDrawing.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t method lookup function for CoreGlue()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CoreGlue.maxVelocity(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x50))();
}

uint64_t dispatch thunk of CoreGlue.nextUpdate(nextTime:interval:reason:)(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;

  return (*(uint64_t (**)(uint64_t, unint64_t))((*MEMORY[0x24BEE4EA0] & *v2) + 0x58))(a1, a2 | ((HIDWORD(a2) & 1) << 32));
}

uint64_t dispatch thunk of CoreGlue.hasTestHost()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x60))();
}

uint64_t dispatch thunk of CoreGlue.isInstantiated(graph:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x68))();
}

uint64_t dispatch thunk of CoreGlue.defaultImplicitRootType.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x70))();
}

uint64_t dispatch thunk of CoreGlue.defaultSpacing.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of CoreGlue.makeDefaultLayoutComputer()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x80))();
}

uint64_t dispatch thunk of CoreGlue.makeDefaultLayoutComputer(graph:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x88))();
}

uint64_t dispatch thunk of CoreGlue.startChildGeometries(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x90))();
}

uint64_t dispatch thunk of CoreGlue.endChildGeometries(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of CoreGlue.makeLayoutView<A>(root:inputs:body:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of CoreGlue.addDisplayListTreeValue(outputs:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CoreGlue.updateData(_:value:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CoreGlue.makeForEachView<A, B, C>(view:inputs:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CoreGlue.makeForEachViewList<A, B, C>(view:inputs:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CoreGlue.defaultOpenURLAction(env:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CoreGlue.defaultOpenSensitiveURLAction()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
}

ValueMetadata *type metadata accessor for CoreGlue.DefaultImplicitRootTypeResult()
{
  return &type metadata for CoreGlue.DefaultImplicitRootTypeResult;
}

ValueMetadata *type metadata accessor for CoreGlue.MakeDefaultLayoutComputerResult()
{
  return &type metadata for CoreGlue.MakeDefaultLayoutComputerResult;
}

uint64_t initializeWithCopy for CoreGlue.StartChildGeometriesParameters(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CoreGlue.StartChildGeometriesParameters(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return a1;
}

__n128 __swift_memcpy60_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 44) = *(_OWORD *)(a2 + 44);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for CoreGlue.StartChildGeometriesParameters(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for CoreGlue.StartChildGeometriesParameters(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 60))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CoreGlue.StartChildGeometriesParameters(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 60) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 60) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CoreGlue.StartChildGeometriesParameters()
{
  return &type metadata for CoreGlue.StartChildGeometriesParameters;
}

_QWORD *initializeBufferWithCopyOfBuffer for CoreGlue.EndChildGeometriesParameters(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for CoreGlue.EndChildGeometriesParameters(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for CoreGlue.EndChildGeometriesParameters(_OWORD *a1, _OWORD *a2)
{
  swift_release();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for CoreGlue.EndChildGeometriesParameters()
{
  return &type metadata for CoreGlue.EndChildGeometriesParameters;
}

uint64_t method lookup function for CoreGlue2()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CoreGlue2.initializeTestApp()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x50))();
}

uint64_t dispatch thunk of CoreGlue2.isStatusBarHidden()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x58))();
}

uint64_t dispatch thunk of CoreGlue2.configureDefaultEnvironment(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x60))();
}

uint64_t dispatch thunk of CoreGlue2.configureEmptyEnvironment(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x68))();
}

uint64_t dispatch thunk of CoreGlue2.makeRootView(base:rootFocusScope:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x70))();
}

uint64_t dispatch thunk of CoreGlue2.systemDefaultDynamicTypeSize.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of CoreGlue2.codableAttachmentCellType.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x80))();
}

uint64_t dispatch thunk of CoreGlue2.linkURL(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x88))();
}

uint64_t dispatch thunk of CoreGlue2.linkURL(at:in:stringDrawing:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x90))();
}

uint64_t dispatch thunk of CoreGlue2.transformingEquivalentAttributes(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x98))();
}

uint64_t dispatch thunk of CoreGlue2.makeSummarySymbolHost(isOn:font:foregroundColor:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA0))();
}

uint64_t getEnumTagSinglePayload for CoreGlue2.CodableAttachmentCellTypeResult(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CoreGlue2.CodableAttachmentCellTypeResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CoreGlue2.CodableAttachmentCellTypeResult()
{
  return &type metadata for CoreGlue2.CodableAttachmentCellTypeResult;
}

ValueMetadata *type metadata accessor for CoreGlue2.LinkURLParameters()
{
  return &type metadata for CoreGlue2.LinkURLParameters;
}

void *static DefaultDescriptionAttribute.allCases.getter()
{
  return &outlined read-only object #0 of static DefaultDescriptionAttribute.allCases.getter;
}

uint64_t static DefaultDescriptionAttribute.geometry.getter()
{
  return specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of static DefaultDescriptionAttribute.geometry.getter);
}

uint64_t static DefaultDescriptionAttribute.relatedToCornerRadius.getter()
{
  return specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of static DefaultDescriptionAttribute.relatedToCornerRadius.getter);
}

SwiftUI::DefaultDescriptionAttribute_optional __swiftcall DefaultDescriptionAttribute.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  SwiftUI::DefaultDescriptionAttribute_optional result;
  char v5;
  char v6;

  v2 = v1;
  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  result.value = swift_bridgeObjectRelease();
  v5 = 0;
  v6 = 11;
  switch(v3)
  {
    case 0:
      goto LABEL_13;
    case 1:
      v5 = 1;
      goto LABEL_13;
    case 2:
      v5 = 2;
      goto LABEL_13;
    case 3:
      v5 = 3;
      goto LABEL_13;
    case 4:
      v5 = 4;
      goto LABEL_13;
    case 5:
      v5 = 5;
      goto LABEL_13;
    case 6:
      v5 = 6;
      goto LABEL_13;
    case 7:
      v5 = 7;
      goto LABEL_13;
    case 8:
      v5 = 8;
      goto LABEL_13;
    case 9:
      v5 = 9;
      goto LABEL_13;
    case 10:
      v5 = 10;
LABEL_13:
      v6 = v5;
      break;
    case 11:
      break;
    case 12:
      v6 = 12;
      break;
    case 13:
      v6 = 13;
      break;
    case 14:
      v6 = 14;
      break;
    case 15:
      v6 = 15;
      break;
    case 16:
      v6 = 16;
      break;
    case 17:
      v6 = 17;
      break;
    case 18:
      v6 = 18;
      break;
    case 19:
      v6 = 19;
      break;
    case 20:
      v6 = 20;
      break;
    case 21:
      v6 = 21;
      break;
    case 22:
      v6 = 22;
      break;
    case 23:
      v6 = 23;
      break;
    case 24:
      v6 = 24;
      break;
    case 25:
      v6 = 25;
      break;
    case 26:
      v6 = 26;
      break;
    case 27:
      v6 = 27;
      break;
    case 28:
      v6 = 28;
      break;
    default:
      v6 = 29;
      break;
  }
  *v2 = v6;
  return result;
}

uint64_t DefaultDescriptionAttribute.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_234F8E254 + 4 * byte_2352B8AED[*v0]))(1952671090, 0xE400000000000000);
}

uint64_t sub_234F8E254()
{
  return 0x6E696769726FLL;
}

uint64_t sub_234F8E268()
{
  return 0x696F507472617473;
}

uint64_t sub_234F8E288()
{
  return 0x746E696F50646E65;
}

uint64_t sub_234F8E2A0()
{
  return 0x726F66736E617274;
}

uint64_t sub_234F8E2BC()
{
  return 0x7370696C63;
}

uint64_t sub_234F8E2D0()
{
  return 0x615272656E726F63;
}

uint64_t sub_234F8E3EC()
{
  return 0x664F776F64616873;
}

uint64_t sub_234F8E40C()
{
  return 0x6150776F64616873;
}

unint64_t sub_234F8E428()
{
  return 0xD000000000000012;
}

uint64_t sub_234F8E440()
{
  return 0x73746E65746E6F63;
}

unint64_t sub_234F8E478()
{
  return 0xD000000000000015;
}

uint64_t sub_234F8E490()
{
  return 0x686353726F6C6F63;
}

uint64_t sub_234F8E4B0()
{
  return 0x737265746C6966;
}

uint64_t sub_234F8E4C8()
{
  return 0x746E656964617267;
}

void sub_234F8E518()
{
  JUMPOUT(0x234F8E52CLL);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance DefaultDescriptionAttribute()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v0 = DefaultDescriptionAttribute.rawValue.getter();
  v2 = v1;
  if (v0 == DefaultDescriptionAttribute.rawValue.getter() && v2 == v3)
    v4 = 1;
  else
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance DefaultDescriptionAttribute()
{
  Hasher.init(_seed:)();
  DefaultDescriptionAttribute.rawValue.getter();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DefaultDescriptionAttribute()
{
  DefaultDescriptionAttribute.rawValue.getter();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DefaultDescriptionAttribute()
{
  Hasher.init(_seed:)();
  DefaultDescriptionAttribute.rawValue.getter();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

SwiftUI::DefaultDescriptionAttribute_optional protocol witness for RawRepresentable.init(rawValue:) in conformance DefaultDescriptionAttribute(Swift::String *a1)
{
  return DefaultDescriptionAttribute.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance DefaultDescriptionAttribute@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = DefaultDescriptionAttribute.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance DefaultDescriptionAttribute(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static DefaultDescriptionAttribute.allCases.getter;
}

uint64_t specialized static DefaultDescriptionAttribute.all.getter()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;

  v5 = specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #0 of static DefaultDescriptionAttribute.allCases.getter);
  v0 = *(_QWORD *)&static _TestApp.testIntents;
  if ((static _TestApp.testIntents & 1) != 0)
  {
    v2 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of static DefaultDescriptionAttribute.all.getter);
    specialized Set._subtract<A>(_:)(v2);
    swift_bridgeObjectRelease();
    v0 = *(_QWORD *)&static _TestApp.testIntents;
    if ((static _TestApp.testIntents & 8) == 0)
    {
LABEL_3:
      if ((v0 & 0x40000000000000) != 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((static _TestApp.testIntents & 8) == 0)
  {
    goto LABEL_3;
  }
  v3 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #1 of static DefaultDescriptionAttribute.all.getter);
  specialized Set._subtract<A>(_:)(v3);
  swift_bridgeObjectRelease();
  v0 = *(_QWORD *)&static _TestApp.testIntents;
  if ((*(_QWORD *)&static _TestApp.testIntents & 0x40000000000000) != 0)
  {
LABEL_4:
    if ((v0 & 0x2000) != 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  specialized Set._Variant.remove(_:)(&v4);
  v0 = *(_QWORD *)&static _TestApp.testIntents;
  if ((static _TestApp.testIntents & 0x2000) != 0)
  {
LABEL_5:
    if ((v0 & 0x40000) != 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  specialized Set._Variant.remove(_:)(&v4);
  v0 = *(_QWORD *)&static _TestApp.testIntents;
  if ((static _TestApp.testIntents & 0x40000) != 0)
  {
LABEL_6:
    if ((v0 & 0x100000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  specialized Set._Variant.remove(_:)(&v4);
  specialized Set._Variant.remove(_:)(&v4);
  specialized Set._Variant.remove(_:)(&v4);
  specialized Set._Variant.remove(_:)(&v4);
  v0 = *(_QWORD *)&static _TestApp.testIntents;
  if ((static _TestApp.testIntents & 0x100000) == 0)
  {
LABEL_7:
    result = v5;
    if ((v0 & 0x8000000000000) == 0)
      return result;
    goto LABEL_15;
  }
LABEL_14:
  specialized Set._Variant.remove(_:)(&v4);
  result = v5;
  if ((*(_QWORD *)&static _TestApp.testIntents & 0x8000000000000) == 0)
    return result;
LABEL_15:
  if (*(_QWORD *)(result + 16))
  {
    specialized Set._Variant.remove(_:)(&v4);
    specialized Set._Variant.remove(_:)(&v4);
    return v5;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [DefaultDescriptionAttribute] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [DefaultDescriptionAttribute] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DefaultDescriptionAttribute] and conformance [A])
  {
    type metadata accessor for [DefaultDescriptionAttribute]();
    result = MEMORY[0x23B7C9C04](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DefaultDescriptionAttribute] and conformance [A]);
  }
  return result;
}

void type metadata accessor for [DefaultDescriptionAttribute]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [DefaultDescriptionAttribute])
  {
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [DefaultDescriptionAttribute]);
  }
}

uint64_t getEnumTagSinglePayload for DefaultDescriptionAttribute(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE4)
    goto LABEL_17;
  if (a2 + 28 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 28) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 28;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 28;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 28;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x1D;
  v8 = v6 - 29;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DefaultDescriptionAttribute(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 28 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 28) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE3)
    return ((uint64_t (*)(void))((char *)&loc_234F8EA2C + 4 * byte_2352B8B0F[v4]))();
  *a1 = a2 + 28;
  return ((uint64_t (*)(void))((char *)sub_234F8EA60 + 4 * byte_2352B8B0A[v4]))();
}

uint64_t sub_234F8EA60(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F8EA68(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234F8EA70);
  return result;
}

uint64_t sub_234F8EA7C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234F8EA84);
  *(_BYTE *)result = a2 + 28;
  return result;
}

uint64_t sub_234F8EA88(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F8EA90(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DefaultDescriptionAttribute()
{
  return &type metadata for DefaultDescriptionAttribute;
}

uint64_t specialized static EnvironmentKey<>._valuesEqual(_:_:)(char a1, char a2)
{
  char v2;

  v2 = a1 == 2;
  if (a2 != 2)
    v2 = 0;
  if (a1 != 2 && a2 != 2)
    v2 = ((a2 & 1) == 0) ^ a1;
  return v2 & 1;
}

BOOL specialized static EnvironmentKey<>._valuesEqual(_:_:)(char a1, char a2)
{
  _BOOL4 v3;

  v3 = a2 != 3 && a2 == a1;
  if (a1 == 3)
    return a2 == 3;
  else
    return v3;
}

uint64_t specialized static EnvironmentKey<>._valuesEqual(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t);
  int v17;
  uint64_t (*v18)(_QWORD);
  char v19;
  void (*v20)(char *, uint64_t);
  uint64_t v22;

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Date?(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (Date?, Date?)();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (uint64_t)&v13[*(int *)(v14 + 48)];
  outlined init with copy of Date?(a1, (uint64_t)v13);
  outlined init with copy of Date?(a2, v15);
  v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v16((uint64_t)v13, 1, v4) == 1)
  {
    v17 = v16(v15, 1, v4);
    if (v17 == 1)
      v18 = (uint64_t (*)(_QWORD))type metadata accessor for Date?;
    else
      v18 = (uint64_t (*)(_QWORD))type metadata accessor for (Date?, Date?);
    if (v17 == 1)
      v19 = -1;
    else
      v19 = 0;
  }
  else
  {
    outlined init with copy of Date?((uint64_t)v13, (uint64_t)v10);
    if (v16(v15, 1, v4) == 1)
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
      v19 = 0;
      v18 = (uint64_t (*)(_QWORD))type metadata accessor for (Date?, Date?);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v15, v4);
      lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE958]);
      v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      v20 = *(void (**)(char *, uint64_t))(v5 + 8);
      v20(v7, v4);
      v20(v10, v4);
      v18 = (uint64_t (*)(_QWORD))type metadata accessor for Date?;
    }
  }
  outlined destroy of TypesettingConfiguration((uint64_t)v13, v18);
  return v19 & 1;
}

BOOL specialized static EnvironmentKey<>._valuesEqual(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v9)(uint64_t);

  if (a2 == 1)
  {
    if (a4 == 1)
      return 1;
    goto LABEL_6;
  }
  if (a4 == 1)
  {
    swift_retain();
LABEL_6:
    outlined copy of Text.LineStyle?(a3, a4);
    outlined consume of Text.LineStyle?(a1, a2);
    outlined consume of Text.LineStyle?(a3, a4);
    return 0;
  }
  if (a1 != a3)
    goto LABEL_13;
  if (!a2)
  {
    outlined copy of Text.LineStyle?(a1, 0);
    return !a4;
  }
  if (!a4)
  {
LABEL_13:
    outlined copy of Text.LineStyle?(a1, a2);
    swift_release();
    return 0;
  }
  if (a2 != a4)
  {
    v9 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 88);
    outlined copy of Text.LineStyle?(a1, a2);
    outlined copy of Text.LineStyle?(a1, a2);
    outlined copy of Text.LineStyle?(a1, a4);
    swift_retain();
    LOBYTE(v9) = v9(a4);
    outlined consume of Text.LineStyle?(a1, a4);
    swift_release_n();
    outlined consume of Text.LineStyle?(a1, a2);
    return (v9 & 1) != 0;
  }
  outlined copy of Text.LineStyle?(a1, a2);
  swift_release();
  return 1;
}

uint64_t static EnvironmentKey<>._valuesEqual(_:_:)()
{
  swift_getAssociatedTypeWitness();
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.AccessibilityTextAttributeResolverKey()
{
  type metadata accessor for AccessibilityTextAttributeResolver?(0);
  return AGCompareValues();
}

uint64_t static EnvironmentKey._valuesEqual(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  int v9;
  unsigned __int8 v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = a2;
  v9 = 3;
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)_s14AttributeGraph13compareValues__7optionsSbx_xSo19AGComparisonOptionsVtlFSbSPyxGXEfU_TA_0, (uint64_t)&v6, AssociatedTypeWitness, MEMORY[0x24BEE4078], MEMORY[0x24BEE1328], MEMORY[0x24BEE40A8], v4);
  return v10;
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentObjectKey<A>(uint64_t a1, uint64_t a2)
{
  return static EnvironmentKey._valuesEqual(_:_:)(a1, a2) & 1;
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance HoverEffectContextKey(uint64_t a1, uint64_t a2)
{
  return specialized static EnvironmentPropertyKey.valuesEqual(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(unsigned __int16 *)(a1 + 24) | (*(unsigned __int8 *)(a1 + 26) << 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(unsigned __int16 *)(a2 + 24) | (*(unsigned __int8 *)(a2 + 26) << 16));
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.DefaultAccentColorProviderKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.DefaultAccentColorProviderKey(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for DefaultAccentColorProvider.Type?, &lazy cache variable for type metadata for DefaultAccentColorProvider.Type, &lazy cache variable for type metadata for DefaultAccentColorProvider);
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.SystemAccentValueProviderKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.DefaultAccentColorProviderKey(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for SystemAccentValueProvider.Type?, &lazy cache variable for type metadata for SystemAccentValueProvider.Type, &lazy cache variable for type metadata for SystemAccentValueProvider);
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.DefaultAccentColorProviderKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, unint64_t *a6, unint64_t *a7)
{
  type metadata accessor for VibrantColorStyle.Type?(0, a5, a6, a7);
  return AGCompareValues();
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance AccentColorKey(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;
  BOOL v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  char v8;

  v2 = *a1;
  v3 = *a2;
  result = (*a1 | *a2) == 0;
  if (v2)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    if (v2 == v3)
    {
      return 1;
    }
    else
    {
      v6 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 88);
      v7 = swift_retain();
      v8 = v6(v7);
      swift_release();
      return v8 & 1;
    }
  }
  return result;
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance SystemAccentValueKey(char *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  int v3;
  _BOOL8 result;

  v2 = *a1;
  v3 = *a2;
  result = v3 == 10 && v2 == 10;
  if (v2 != 10 && v3 != 10)
    return qword_2352B8D38[v2] == qword_2352B8D38[(char)v3];
  return result;
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.CoreUINamedColorProviderKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.DefaultAccentColorProviderKey(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for CoreUINamedColorProvider.Type?, &lazy cache variable for type metadata for CoreUINamedColorProvider.Type, &lazy cache variable for type metadata for CoreUINamedColorProvider);
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance OpenURLActionKey()
{
  return protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance OpenURLActionKey();
}

{
  type metadata accessor for GraphicsContext.ResolvedShading?(0, &lazy cache variable for type metadata for OpenURLAction?);
  return AGCompareValues();
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.ContentShapesKey()
{
  return AGCompareValues();
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance ContainerBackgroundKind.Key(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  _BOOL8 result;
  _BOOL4 v6;
  _BOOL4 v8;

  v2 = *a1;
  v3 = *a2;
  result = v3 == 6 && v2 == 6;
  if (v2 != 6 && v3 != 6)
  {
    v6 = v3 == 5;
    v8 = v3 != 5 && v2 == v3;
    if (v2 == 5)
      return v6;
    else
      return v8;
  }
  return result;
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.SymbolEffectsKey(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance UnderlineStyleKey(uint64_t *a1, uint64_t *a2)
{
  return specialized static EnvironmentKey<>._valuesEqual(_:_:)(*a1, a1[1], *a2, a2[1]);
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance BackgroundMaterialKey()
{
  type metadata accessor for GraphicsContext.ResolvedShading?(0, &lazy cache variable for type metadata for Material?);
  return AGCompareValues();
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance SymbolRenderingModeKey()
{
  type metadata accessor for GraphicsContext.ResolvedShading?(0, (unint64_t *)&lazy cache variable for type metadata for SymbolRenderingMode?);
  return AGCompareValues();
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.DefaultSeparatorShapeStyleKey()
{
  return AGCompareValues();
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance TextAlignmentKey(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  _BOOL4 v4;
  _BOOL4 v6;

  v2 = *a1;
  v3 = *a2;
  v4 = v3 == 3;
  v6 = v3 != 3 && v2 == v3;
  if (v2 == 3)
    return v4;
  else
    return v6;
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.LineLimitKey(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t result;

  v3 = *(_BYTE *)(a1 + 8);
  result = *(unsigned __int8 *)(a2 + 8);
  if ((v3 & 1) == 0)
    return (*(_QWORD *)a1 == *(_QWORD *)a2) & ~(_DWORD)result;
  return result;
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance TypesettingConfigurationKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double v5;
  int v6;
  uint64_t v7;
  double v8;
  int v9;

  if (!specialized static TypesettingLanguage.Storage.== infix(_:_:)(a1, a2))
    return 0;
  v4 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
  v5 = *(double *)(a1 + v4);
  v6 = *(unsigned __int8 *)(a1 + v4 + 8);
  v7 = a2 + v4;
  v8 = *(double *)v7;
  v9 = *(unsigned __int8 *)(v7 + 8);
  if (v6 != 1)
  {
    if (v5 != v8)
      LOBYTE(v9) = 1;
    return (v9 & 1) == 0;
  }
  if (v5 == 0.0)
  {
    if (v8 != 0.0)
      LOBYTE(v9) = 0;
    return (v9 & 1) != 0;
  }
  if (*(_QWORD *)&v5 != 1)
  {
    if (*(_QWORD *)&v8 <= 1uLL)
      v9 = 0;
    return v9 == 1;
  }
  if (*(_QWORD *)&v8 != 1)
    LOBYTE(v9) = 0;
  return (v9 & 1) != 0;
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance BackgroundStyleKey()
{
  return protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance BackgroundStyleKey();
}

{
  type metadata accessor for GraphicsContext.ResolvedShading?(0, &lazy cache variable for type metadata for AnyShapeStyle?);
  return AGCompareValues();
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance FontModifiersKey(_QWORD *a1, _QWORD *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t EnvironmentValues.bridgedEnvironmentResolver.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2;
  }
  else
  {
    v4 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v4, (uint64_t)&v6);
    swift_release_n();
    return v5;
  }
}

uint64_t key path getter for EnvironmentValues.bridgedEnvironmentResolver : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    v6 = v5;
    swift_release_n();
  }
  else
  {
    v7 = swift_retain_n();
    v4 = specialized closure #1 in PropertyList.subscript.getter(v7, (uint64_t)&v10);
    v6 = v8;
  }
  result = swift_release_n();
  *a2 = v4;
  a2[1] = v6;
  return result;
}

uint64_t EnvironmentValues.bridgedEnvironmentResolver.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;

  v5 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  swift_release();
  if (v2[1])
  {
    v6 = *v2;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v5, v6);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void (*EnvironmentValues.bridgedEnvironmentResolver.modify(_QWORD *a1))(uint64_t **a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[5] = v1;
  v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    v7 = v6;
    swift_release_n();
  }
  else
  {
    v8 = swift_retain_n();
    v5 = specialized closure #1 in PropertyList.subscript.getter(v8, (uint64_t)(v3 + 2));
    v7 = v9;
  }
  swift_release_n();
  v3[6] = 0;
  *v3 = v5;
  v3[1] = v7;
  return EnvironmentValues.bridgedEnvironmentResolver.modify;
}

void EnvironmentValues.bridgedEnvironmentResolver.modify(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *a1;
  v2 = (uint64_t *)(*a1)[5];
  v4 = **a1;
  v3 = (*a1)[1];
  v5 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v4, v3);
  swift_release();
  if (v2[1])
  {
    v6 = *(_QWORD *)v1[5];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v5, v6);
    swift_release();
    swift_release();
  }
  swift_release();
  free(v1);
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.BridgedEnvironmentResolverKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.DefaultAccentColorProviderKey(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for BridgedEnvironmentResolver.Type?, &lazy cache variable for type metadata for BridgedEnvironmentResolver.Type, &lazy cache variable for type metadata for BridgedEnvironmentResolver);
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance TextSuffixKey(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[3];
  uint64_t v8;
  _OWORD v9[3];
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a2 + 48);
  v4 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v4;
  v9[2] = *(_OWORD *)(a1 + 32);
  v10 = v2;
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  v7[2] = *(_OWORD *)(a2 + 32);
  v8 = v3;
  return static ResolvedTextSuffix.== infix(_:_:)(v9, v7) & 1;
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance TextScaleKey(char *a1, char *a2)
{
  return specialized static EnvironmentKey<>._valuesEqual(_:_:)(*a1, *a2);
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.ResolvableStringReferenceDateKey(uint64_t a1, uint64_t a2)
{
  return specialized static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2) & 1;
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.ResolvedTextProviderKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.DefaultAccentColorProviderKey(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for ResolvedTextProvider.Type?, &lazy cache variable for type metadata for ResolvedTextProvider.Type, &lazy cache variable for type metadata for ResolvedTextProvider);
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance ContainerShapeKey()
{
  return AGCompareValues();
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.Key()
{
  type metadata accessor for EnvironmentValues.Key.Value();
  return AGCompareValues();
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.AllowedDynamicRangeKey(char *a1, char *a2)
{
  return specialized static EnvironmentKey<>._valuesEqual(_:_:)(*a1, *a2);
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance SymbolVariantsKey(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;

  if (*a1 == *a2)
  {
    v2 = a1[1];
    v3 = a2[1];
    if (v2 == 3)
    {
      if (v3 == 3)
        return 1;
    }
    else if (v3 != 3 && v2 == v3)
    {
      return 1;
    }
  }
  return 0;
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance ContentTransition.State(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int16 v3;
  int v4;
  char v5;
  char v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  int v11;
  char v12;
  char v13;
  uint64_t v14;
  int v15;
  uint64_t v17;
  int v18;
  __int16 v19;
  char v20;
  char v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  __int16 v26;
  char v27;
  char v28;
  uint64_t v29;
  int v30;

  v2 = *(_QWORD *)a1;
  v3 = *(_WORD *)(a1 + 12);
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_BYTE *)(a1 + 14);
  v6 = *(_BYTE *)(a1 + 15);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_DWORD *)(a1 + 24);
  v9 = *(_QWORD *)a2;
  v10 = *(_WORD *)(a2 + 12);
  v11 = *(_DWORD *)(a2 + 8);
  v12 = *(_BYTE *)(a2 + 14);
  v13 = *(_BYTE *)(a2 + 15);
  v14 = *(_QWORD *)(a2 + 16);
  v15 = *(_DWORD *)(a2 + 24);
  v24 = v2;
  v25 = v4;
  v26 = v3;
  v27 = v5;
  v28 = v6;
  v29 = v7;
  v30 = v8;
  v17 = v9;
  v18 = v11;
  v19 = v10;
  v20 = v12;
  v21 = v13;
  v22 = v14;
  v23 = v15;
  return specialized static ContentTransition.State.== infix(_:_:)(&v24, &v17);
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.CUIAssetMatchTypesKey(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance FallbackFontProviderKey()
{
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for FallbackFontProvider);
  return AGCompareValues();
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance FontKey(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  _BOOL8 result;
  BOOL v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  char v7;

  v2 = *a1;
  result = (*a1 | *a2) == 0;
  if (v2)
    v4 = *a2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 96);
    v6 = swift_retain();
    v7 = v5(v6);
    swift_release();
    return v7 & 1;
  }
  return result;
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance LocaleKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance LocaleKey(a1, a2, a3, a4, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], &lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x24BDCEEE0]);
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance CalendarKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance LocaleKey(a1, a2, a3, a4, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], &lazy protocol witness table cache variable for type Calendar and conformance Calendar, MEMORY[0x24BDCF308]);
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance LocaleKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), unint64_t *a6, uint64_t a7)
{
  a5(0);
  lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(a6, a5, a7);
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance TimeZoneKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance LocaleKey(a1, a2, a3, a4, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], &lazy protocol witness table cache variable for type TimeZone and conformance TimeZone, MEMORY[0x24BDCF538]);
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance VibrantColorStyleKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.DefaultAccentColorProviderKey(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for VibrantColorStyle.Type?, &lazy cache variable for type metadata for VibrantColorStyle.Type, &lazy cache variable for type metadata for VibrantColorStyle);
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance AllowsVibrantBlendingKey(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  char v3;
  int v4;

  v2 = *a1;
  v3 = v2 == 2;
  v4 = *a2;
  if (v4 != 2)
    v3 = 0;
  if (v2 != 2 && v4 != 2)
    v3 = ((v4 & 1) == 0) ^ v2;
  return v3 & 1;
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance PlacementTintKey()
{
  type metadata accessor for [TintPlacement : AnyShapeStyle]();
  return AGCompareValues();
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.PreferenceBridgeKey()
{
  return AGCompareValues();
}

uint64_t closure #1 in compareValues<A>(_:_:options:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD v9[4];
  int v10;

  v9[2] = a4;
  v9[3] = a1;
  v10 = a3;
  return _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a2, (uint64_t)partial apply for closure #1 in closure #1 in compareValues<A>(_:_:options:), (uint64_t)v9, a4, MEMORY[0x24BEE4078], MEMORY[0x24BEE1328], MEMORY[0x24BEE40A8], a8);
}

uint64_t _s14AttributeGraph13compareValues__7optionsSbx_xSo19AGComparisonOptionsVtlFSbSPyxGXEfU_TA_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v9 = *(_QWORD *)(v8 + 24);
  v10 = *(_DWORD *)(v8 + 32);
  v13 = *(_QWORD *)(v8 + 16);
  v14 = a1;
  v15 = v10;
  return _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v9, (uint64_t)partial apply for closure #1 in closure #1 in compareValues<A>(_:_:options:), (uint64_t)&v12, v13, MEMORY[0x24BEE4078], MEMORY[0x24BEE1328], MEMORY[0x24BEE40A8], a8);
}

uint64_t sub_234F90570(uint64_t *a1)
{
  return EnvironmentValues.bridgedEnvironmentResolver.setter(*a1, a1[1]);
}

uint64_t dispatch thunk of static EnvironmentKey.defaultValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static EnvironmentKey._valuesEqual(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of static DerivedEnvironmentKey.value(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of static BridgedEnvironmentResolver.read<A>(for:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t dispatch thunk of static BridgedEnvironmentResolver.write<A>(for:to:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 16))();
}

void type metadata accessor for VibrantColorStyle.Type?(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    type metadata accessor for ImageStyleProtocol.Type(255, a3, a4);
    v5 = type metadata accessor for Optional();
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t partial apply for closure #1 in closure #1 in compareValues<A>(_:_:options:)@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = AGCompareValues();
  *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentValues.BridgedEnvironmentResolverKey()
{
  return &type metadata for EnvironmentValues.BridgedEnvironmentResolverKey;
}

uint64_t Bindable.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Bindable.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*Bindable.wrappedValue.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t Bindable.projectedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2);
}

void Bindable.init(wrappedValue:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t Bindable<A>.subscript.getter@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;

  v5 = *v2;
  swift_unknownObjectRetain();
  swift_retain();
  return Binding.init<A>(_:keyPath:isolation:)(v5, a1, 0, 0, a2);
}

void Bindable<A>.init(wrappedValue:)()
{
  swift_unknownObjectRelease();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t Bindable<A>.init(wrappedValue:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

_QWORD *Bindable<A>.init(projectedValue:)@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t Bindable<A>.id.getter()
{
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t protocol witness for Identifiable.id.getter in conformance <A> Bindable<A>()
{
  return Bindable<A>.id.getter();
}

uint64_t getEnumTagSinglePayload for Bindable(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_234F90814 + 4 * byte_2352B8D88[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for Bindable(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for Bindable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Bindable);
}

void Bindable.init(projectedValue:)()
{
  Bindable.init(wrappedValue:)();
}

uint64_t OptionSet.setValue(_:for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  char v4;
  uint64_t v6;

  v3 = MEMORY[0x24BDAC7A8](a1);
  if ((v4 & 1) == 0)
    return dispatch thunk of SetAlgebra.subtract(_:)();
  (*(void (**)(char *, double))(v2 + 16))((char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  return dispatch thunk of SetAlgebra.formUnion(_:)();
}

uint64_t isLinkedOnOrAfter(_:)(unsigned int *a1)
{
  unsigned int v1;

  v1 = *a1;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FAB4 & 1) != 0)
    return dyld_program_sdk_at_least();
  else
    return static Semantics.forced >= v1;
}

uint64_t static SemanticFeature.isEnabled.getter(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v6;
  uint64_t v7;

  (*(void (**)(char *__return_ptr))(a2 + 16))((char *)&v7 + 1);
  v4 = *(_DWORD *)((char *)&v7 + 1);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 24))(&v7, a1, a2);
  if ((v7 & 1) != 0)
  {
    if (one-time initialization token for forced != -1)
      swift_once();
    swift_beginAccess();
    if ((byte_25426FABC & 1) != 0)
      return dyld_program_minos_at_least();
    v6 = dword_25426FAB8;
  }
  else
  {
    if (one-time initialization token for forced != -1)
      swift_once();
    swift_beginAccess();
    if ((byte_25426FAB4 & 1) != 0)
      return dyld_program_sdk_at_least();
    v6 = static Semantics.forced;
  }
  return v6 >= v4;
}

uint64_t isDeployedOnOrAfter(_:)(unsigned int *a1)
{
  unsigned int v1;

  v1 = *a1;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FABC & 1) != 0)
    return dyld_program_minos_at_least();
  else
    return dword_25426FAB8 >= v1;
}

void Semantics.prior.getter(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  if (*v1)
    *a1 = *v1 - 1;
  else
    __break(1u);
}

uint64_t protocol witness for static Feature.isEnabled.getter in conformance _SemanticFeature_v2(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Feature.isEnabled.getter in conformance _SemanticFeature_v2(a1, a2, &one-time initialization token for introduced, (unsigned int *)&static _SemanticFeature_v2.introduced);
}

uint64_t protocol witness for static Feature.isEnabled.getter in conformance _SemanticFeature_v2_1(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Feature.isEnabled.getter in conformance _SemanticFeature_v2(a1, a2, &one-time initialization token for introduced, (unsigned int *)&static _SemanticFeature_v2_1.introduced);
}

uint64_t protocol witness for static Feature.isEnabled.getter in conformance _SemanticFeature_v2_3(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Feature.isEnabled.getter in conformance _SemanticFeature_v2(a1, a2, &one-time initialization token for introduced, (unsigned int *)&static _SemanticFeature_v2_3.introduced);
}

uint64_t protocol witness for static Feature.isEnabled.getter in conformance _SemanticFeature_v3(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Feature.isEnabled.getter in conformance _SemanticFeature_v2(a1, a2, &one-time initialization token for introduced, (unsigned int *)&static _SemanticFeature_v3.introduced);
}

uint64_t protocol witness for static Feature.isEnabled.getter in conformance _SemanticFeature_v4(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Feature.isEnabled.getter in conformance _SemanticFeature_v2(a1, a2, &one-time initialization token for introduced, (unsigned int *)&static _SemanticFeature_v4.introduced);
}

uint64_t protocol witness for static Feature.isEnabled.getter in conformance _SemanticFeature_v4_4(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Feature.isEnabled.getter in conformance _SemanticFeature_v2(a1, a2, &one-time initialization token for introduced, &static _SemanticFeature_v4_4.introduced);
}

uint64_t protocol witness for static Feature.isEnabled.getter in conformance _SemanticFeature_v5(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Feature.isEnabled.getter in conformance _SemanticFeature_v2(a1, a2, &one-time initialization token for introduced, (unsigned int *)&static _SemanticFeature_v5.introduced);
}

uint64_t protocol witness for static Feature.isEnabled.getter in conformance _SemanticFeature_v5_2(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Feature.isEnabled.getter in conformance _SemanticFeature_v2(a1, a2, &one-time initialization token for introduced, (unsigned int *)&static _SemanticFeature_v5_2.introduced);
}

uint64_t protocol witness for static Feature.isEnabled.getter in conformance _SemanticFeature_v6(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Feature.isEnabled.getter in conformance _SemanticFeature_v2(a1, a2, &one-time initialization token for introduced, (unsigned int *)&static _SemanticFeature_v6.introduced);
}

uint64_t protocol witness for static Feature.isEnabled.getter in conformance Semantics.DismissPopsInNavigationSplitViewRoots()
{
  unsigned int v0;

  if (one-time initialization token for introduced != -1)
    swift_once();
  v0 = static Semantics.DismissPopsInNavigationSplitViewRoots.introduced;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FABC & 1) != 0)
    return dyld_program_minos_at_least();
  else
    return dword_25426FAB8 >= v0;
}

uint64_t protocol witness for static Feature.isEnabled.getter in conformance EnabledFeature(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Feature.isEnabled.getter in conformance _SemanticFeature_v2(a1, a2, &one-time initialization token for introduced, static EnabledFeature.introduced);
}

uint64_t protocol witness for static Feature.isEnabled.getter in conformance _SemanticFeature_v2(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned int *a4)
{
  unsigned int v5;

  if (*a3 != -1)
    swift_once();
  v5 = *a4;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_25426FAB4 & 1) != 0)
    return dyld_program_sdk_at_least();
  else
    return static Semantics.forced >= v5;
}

BOOL static Semantics.< infix(_:_:)(_DWORD *a1, _DWORD *a2)
{
  return *a1 < *a2;
}

uint64_t Semantics.description.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t v5;

  v5 = dispatch thunk of CustomStringConvertible.description.getter();
  v0._countAndFlagsBits = 45;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v1._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 45;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  return v5;
}

void Semantics.hash(into:)()
{
  Swift::UInt32 *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static Semantics.== infix(_:_:)(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

Swift::Int Semantics.hashValue.getter()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance Semantics(_DWORD *a1, _DWORD *a2)
{
  return *a1 < *a2;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance Semantics(_DWORD *a1, _DWORD *a2)
{
  return *a2 >= *a1;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance Semantics(_DWORD *a1, _DWORD *a2)
{
  return *a1 >= *a2;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance Semantics(_DWORD *a1, _DWORD *a2)
{
  return *a2 < *a1;
}

BOOL static SemanticRequirement.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void SemanticRequirement.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int SemanticRequirement.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t one-time initialization function for forced()
{
  uint64_t result;
  int v1;

  if (one-time initialization token for firstRelease != -1)
    swift_once();
  result = dyld_program_sdk_at_least();
  if ((_DWORD)result)
    v1 = 0;
  else
    v1 = -2;
  static Semantics.forced = v1;
  byte_25426FAB4 = result;
  dword_25426FAB8 = v1;
  byte_25426FABC = result;
  return result;
}

uint64_t Semantics.Forced.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  int v3;

  if (one-time initialization token for firstRelease != -1)
    swift_once();
  result = dyld_program_sdk_at_least();
  if ((_DWORD)result)
    v3 = 0;
  else
    v3 = -2;
  *(_DWORD *)a1 = v3;
  *(_BYTE *)(a1 + 4) = result;
  *(_DWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 12) = result;
  return result;
}

uint64_t static Semantics.forced.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;
  int v4;
  char v5;

  if (one-time initialization token for forced != -1)
    swift_once();
  result = swift_beginAccess();
  v3 = byte_25426FAB4;
  v4 = dword_25426FAB8;
  v5 = byte_25426FABC;
  *(_DWORD *)a1 = static Semantics.forced;
  *(_BYTE *)(a1 + 4) = v3;
  *(_DWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 12) = v5;
  return result;
}

uint64_t static Semantics.forced.setter(uint64_t a1)
{
  int v1;
  char v2;
  int v3;
  char v4;
  uint64_t result;

  v1 = *(_DWORD *)a1;
  v2 = *(_BYTE *)(a1 + 4);
  v3 = *(_DWORD *)(a1 + 8);
  v4 = *(_BYTE *)(a1 + 12);
  if (one-time initialization token for forced != -1)
    swift_once();
  result = swift_beginAccess();
  static Semantics.forced = v1;
  byte_25426FAB4 = v2;
  dword_25426FAB8 = v3;
  byte_25426FABC = v4;
  return result;
}

uint64_t (*static Semantics.forced.modify())()
{
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

uint64_t Semantics.test<A>(as:_:)(uint64_t a1, void (*a2)(uint64_t))
{
  int *v2;
  int v4;
  void (*v5)(_BYTE *, _QWORD);
  int *v6;
  int v7;
  char v8;
  uint64_t v9;
  _BYTE v11[32];
  int v12;
  char v13;

  v4 = *v2;
  if (one-time initialization token for forced != -1)
    swift_once();
  swift_beginAccess();
  v5 = (void (*)(_BYTE *, _QWORD))swift_readAtKeyPath();
  v7 = *v6;
  v8 = *((_BYTE *)v6 + 4);
  v5(v11, 0);
  swift_endAccess();
  swift_beginAccess();
  v12 = v4;
  v13 = 0;
  swift_setAtWritableKeyPath();
  v9 = swift_endAccess();
  a2(v9);
  swift_beginAccess();
  v12 = v7;
  v13 = v8;
  swift_setAtWritableKeyPath();
  return swift_endAccess();
}

void Semantics.Forced.sdk.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 4);
  *(_DWORD *)a1 = *(_DWORD *)v1;
  *(_BYTE *)(a1 + 4) = v2;
}

uint64_t Semantics.Forced.sdk.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(result + 4);
  *(_DWORD *)v1 = *(_DWORD *)result;
  *(_BYTE *)(v1 + 4) = v2;
  return result;
}

uint64_t (*Semantics.Forced.sdk.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

void Semantics.Forced.deploymentTarget.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 12);
  *(_DWORD *)a1 = *(_DWORD *)(v1 + 8);
  *(_BYTE *)(a1 + 4) = v2;
}

uint64_t Semantics.Forced.deploymentTarget.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(result + 4);
  *(_DWORD *)(v1 + 8) = *(_DWORD *)result;
  *(_BYTE *)(v1 + 12) = v2;
  return result;
}

uint64_t (*Semantics.Forced.deploymentTarget.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t one-time initialization function for firstRelease()
{
  uint64_t result;

  if (one-time initialization token for v1 != -1)
    result = swift_once();
  static Semantics.firstRelease = static Semantics.v1;
  return result;
}

_QWORD *static Semantics.firstRelease.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for firstRelease, &static Semantics.firstRelease, a1);
}

void static Semantics.latest.getter(_DWORD *a1@<X8>)
{
  *a1 = -2;
}

void static Semantics.maximal.getter(_DWORD *a1@<X8>)
{
  *a1 = -1;
}

uint64_t one-time initialization function for v1()
{
  uint64_t result;

  result = swiftUI_v1_os_versions();
  static Semantics.v1 = HIDWORD(result);
  return result;
}

_QWORD *static Semantics.v1.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for v1, &static Semantics.v1, a1);
}

uint64_t one-time initialization function for v1_3_1()
{
  uint64_t result;

  result = swiftUI_v1_3_1_os_versions();
  static Semantics.v1_3_1 = HIDWORD(result);
  return result;
}

_QWORD *static Semantics.v1_3_1.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for v1_3_1, &static Semantics.v1_3_1, a1);
}

uint64_t one-time initialization function for v1_4()
{
  uint64_t result;

  result = swiftUI_v1_4_os_versions();
  static Semantics.v1_4 = HIDWORD(result);
  return result;
}

_QWORD *static Semantics.v1_4.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(one-time initialization token for v1_4, &static Semantics.v1_4, a1);
}

uint64_t one-time initialization function for v2()
{
  uint64_t result;

  result = swiftUI_v2_os_versions();
  static Semantics.v2 = HIDWORD(result);
  return result;
}

_QWORD *static Semantics.v2.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for v2, &static Semantics.v2, a1);
}

uint64_t one-time initialization function for v2_1()
{
  uint64_t result;

  result = swiftUI_v2_1_os_versions();
  static Semantics.v2_1 = HIDWORD(result);
  return result;
}

_QWORD *static Semantics.v2_1.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for v2_1, &static Semantics.v2_1, a1);
}

uint64_t one-time initialization function for v2_3()
{
  uint64_t result;

  result = swiftUI_v2_3_os_versions();
  static Semantics.v2_3 = HIDWORD(result);
  return result;
}

_QWORD *static Semantics.v2_3.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for v2_3, &static Semantics.v2_3, a1);
}

uint64_t one-time initialization function for v3()
{
  uint64_t result;

  result = swiftUI_v3_0_os_versions();
  static Semantics.v3 = HIDWORD(result);
  return result;
}

_QWORD *static Semantics.v3.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for v3, &static Semantics.v3, a1);
}

uint64_t one-time initialization function for v3_2()
{
  uint64_t result;

  result = swiftUI_v3_2_os_versions();
  static Semantics.v3_2 = HIDWORD(result);
  return result;
}

_QWORD *static Semantics.v3_2.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for v3_2, &static Semantics.v3_2, a1);
}

uint64_t one-time initialization function for v3_4()
{
  uint64_t result;

  result = swiftUI_v3_4_os_versions();
  static Semantics.v3_4 = HIDWORD(result);
  return result;
}

_QWORD *static Semantics.v3_4.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(one-time initialization token for v3_4, &static Semantics.v3_4, a1);
}

uint64_t one-time initialization function for v4()
{
  uint64_t result;

  result = swiftUI_v4_0_os_versions();
  static Semantics.v4 = HIDWORD(result);
  return result;
}

_QWORD *static Semantics.v4.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for v4, &static Semantics.v4, a1);
}

uint64_t one-time initialization function for v4_4()
{
  uint64_t result;

  result = swiftUI_v4_4_os_versions();
  static Semantics.v4_4 = HIDWORD(result);
  return result;
}

_QWORD *static Semantics.v4_4.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for v4_4, &static Semantics.v4_4, a1);
}

uint64_t one-time initialization function for v5()
{
  uint64_t result;

  result = swiftUI_v5_0_os_versions();
  static Semantics.v5 = HIDWORD(result);
  return result;
}

_QWORD *static Semantics.v5.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for v5, &static Semantics.v5, a1);
}

uint64_t one-time initialization function for v5_2()
{
  uint64_t result;

  result = swiftUI_v5_2_os_versions();
  static Semantics.v5_2 = HIDWORD(result);
  return result;
}

_QWORD *static Semantics.v5_2.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(one-time initialization token for v5_2, &static Semantics.v5_2, a1);
}

uint64_t one-time initialization function for v6()
{
  uint64_t result;

  result = swiftUI_v6_0_os_versions();
  static Semantics.v6 = HIDWORD(result);
  return result;
}

_QWORD *static Semantics.v6.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for v6, &static Semantics.v6, a1);
}

uint64_t one-time initialization function for v6_1()
{
  uint64_t result;

  result = swiftUI_v6_1_os_versions();
  static Semantics.v6_1 = HIDWORD(result);
  return result;
}

_QWORD *static Semantics.v6_1.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for v6_1, &static Semantics.v6_1, a1);
}

uint64_t one-time initialization function for v6_2()
{
  uint64_t result;

  result = swiftUI_v6_2_os_versions();
  static Semantics.v6_2 = HIDWORD(result);
  return result;
}

_QWORD *static Semantics.v6_2.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for v6_2, &static Semantics.v6_2, a1);
}

uint64_t one-time initialization function for v6_4()
{
  uint64_t result;

  result = swiftUI_v6_4_os_versions();
  static Semantics.v6_4 = HIDWORD(result);
  return result;
}

_QWORD *static Semantics.v6_4.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for v6_4, &static Semantics.v6_4, a1);
}

uint64_t one-time initialization function for v7()
{
  uint64_t result;

  result = swiftUI_v7_0_os_versions();
  static Semantics.v7 = HIDWORD(result);
  return result;
}

_QWORD *static Semantics.v7.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for v7, &static Semantics.v7, a1);
}

unint64_t lazy protocol witness table accessor for type Semantics and conformance Semantics()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Semantics and conformance Semantics;
  if (!lazy protocol witness table cache variable for type Semantics and conformance Semantics)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for Semantics, &type metadata for Semantics);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Semantics and conformance Semantics);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SemanticRequirement and conformance SemanticRequirement()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SemanticRequirement and conformance SemanticRequirement;
  if (!lazy protocol witness table cache variable for type SemanticRequirement and conformance SemanticRequirement)
  {
    result = MEMORY[0x23B7C9C04]("u1;\x1B@.\n", &type metadata for SemanticRequirement);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SemanticRequirement and conformance SemanticRequirement);
  }
  return result;
}

ValueMetadata *type metadata accessor for Semantics()
{
  return &type metadata for Semantics;
}

uint64_t storeEnumTagSinglePayload for SemanticRequirement(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_234F91C20 + 4 * byte_2352B8E15[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_234F91C54 + 4 * byte_2352B8E10[v4]))();
}

uint64_t sub_234F91C54(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F91C5C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234F91C64);
  return result;
}

uint64_t sub_234F91C70(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234F91C78);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_234F91C7C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F91C84(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SemanticRequirement()
{
  return &type metadata for SemanticRequirement;
}

uint64_t getEnumTagSinglePayload for Semantics.Forced(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 13))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Semantics.Forced(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 13) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Semantics.Forced()
{
  return &type metadata for Semantics.Forced;
}

double ConditionalGraphValue<>.makeView(inputs:)@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, double *a5@<X8>)
{
  int *v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  char v15;
  int ShouldRecordTree;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t *__return_ptr, int *, uint64_t *, uint64_t, uint64_t);
  double result;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  char v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v7 = *a1;
  v8 = *((_DWORD *)a1 + 2);
  v9 = a1[2];
  v11 = *((_DWORD *)a1 + 6);
  v10 = *((_DWORD *)a1 + 7);
  v12 = *((_DWORD *)a1 + 9);
  v30 = *((_DWORD *)a1 + 8);
  v31 = a1[6];
  v32 = a1[5];
  v13 = *((_DWORD *)a1 + 14);
  v23 = *((_DWORD *)a1 + 15);
  v24 = *((_DWORD *)a1 + 16);
  v25 = *((_DWORD *)a1 + 17);
  v26 = *((_DWORD *)a1 + 18);
  v27 = *((_DWORD *)a1 + 19);
  v28 = *((_DWORD *)a1 + 20);
  v14 = *v5;
  v15 = *((_BYTE *)v5 + 4);
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  v29 = ShouldRecordTree;
  if ((v15 & 1) != 0)
  {
    v17 = *(_QWORD *)(a2 + 24);
    if (ShouldRecordTree)
      AGSubgraphBeginTreeElement();
    v53 = v7;
    v54 = v8;
    v55 = v9;
    v56 = v11;
    v57 = v10;
    v60 = v32;
    v61 = v31;
    v59 = v12;
    v62 = v13;
    v63 = v23;
    v64 = v24;
    v65 = v25;
    v66 = v26;
    v67 = v27;
    v68 = v28;
    v34 = v14;
    v37 = v7;
    v38 = v8;
    v39 = v9;
    v40 = v11;
    v41 = v10;
    v42 = 0;
    v43 = v12;
    v44 = v32;
    v45 = v31;
    v46 = v13;
    v47 = v23;
    v48 = v24;
    v49 = v25;
    v50 = v26;
    v51 = v27;
    v52 = v28;
    v18 = a4;
  }
  else
  {
    v17 = *(_QWORD *)(a2 + 16);
    if (ShouldRecordTree)
      AGSubgraphBeginTreeElement();
    v53 = v7;
    v54 = v8;
    v55 = v9;
    v56 = v11;
    v57 = v10;
    v60 = v32;
    v61 = v31;
    v59 = v12;
    v62 = v13;
    v63 = v23;
    v64 = v24;
    v65 = v25;
    v66 = v26;
    v67 = v27;
    v68 = v28;
    v34 = v14;
    v37 = v7;
    v38 = v8;
    v39 = v9;
    v40 = v11;
    v41 = v10;
    v42 = 0;
    v43 = v12;
    v44 = v32;
    v45 = v31;
    v46 = v13;
    v47 = v23;
    v48 = v24;
    v49 = v25;
    v50 = v26;
    v51 = v27;
    v52 = v28;
    v18 = a3;
  }
  v19 = *(void (**)(uint64_t *__return_ptr, int *, uint64_t *, uint64_t, uint64_t))(v18 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19(&v35, &v34, &v37, v17, v18);
  v58 = v30;
  if ((v29 & 1) != 0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)&v35, (uint64_t)&v53);
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_QWORD *)a5 = v35;
  result = v36;
  a5[1] = v36;
  return result;
}

uint64_t ConditionalGraphValue<>.makeViewList(inputs:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v4;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  char v14;
  int ShouldRecordTree;
  uint64_t v16;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  char v39;
  _DWORD v40[3];

  v8 = *a1;
  v9 = *((_DWORD *)a1 + 2);
  v10 = a1[2];
  v11 = *((_DWORD *)a1 + 6);
  v12 = *((_DWORD *)a1 + 7);
  v19 = *((_DWORD *)a1 + 8);
  v20 = *((_DWORD *)a1 + 9);
  v21 = a1[5];
  v22 = a1[6];
  v23 = a1[7];
  v24 = *((_DWORD *)a1 + 16);
  v25 = a1[9];
  v26 = *((_BYTE *)a1 + 80);
  v13 = *v4;
  v14 = *((_BYTE *)v4 + 4);
  ShouldRecordTree = AGSubgraphShouldRecordTree();
  if ((v14 & 1) != 0)
  {
    v16 = *(_QWORD *)(a2 + 24);
    if (ShouldRecordTree)
      AGSubgraphBeginTreeElement();
    v40[0] = v13;
    v27 = v8;
    v28 = v9;
    v29 = v10;
    v30 = v11;
    v31 = v12;
    v32 = v19;
    v33 = v20;
    v34 = v21;
    v35 = v22;
    v36 = v23;
    v37 = v24;
    v38 = v25;
    v39 = v26;
    (*(void (**)(_DWORD *, uint64_t *, uint64_t, uint64_t))(a4 + 32))(v40, &v27, v16, a4);
    return $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(v13, v16, a4);
  }
  else
  {
    v18 = *(_QWORD *)(a2 + 16);
    if (ShouldRecordTree)
      AGSubgraphBeginTreeElement();
    v40[0] = v13;
    v27 = v8;
    v28 = v9;
    v29 = v10;
    v30 = v11;
    v31 = v12;
    v32 = v19;
    v33 = v20;
    v34 = v21;
    v35 = v22;
    v36 = v23;
    v37 = v24;
    v38 = v25;
    v39 = v26;
    (*(void (**)(_DWORD *, uint64_t *, uint64_t, uint64_t))(a3 + 32))(v40, &v27, v18, a3);
    return $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(v13, v18, a3);
  }
}

uint64_t static UsingGraphicsRenderer.defaultValue.getter()
{
  return 0;
}

uint64_t static ConditionalGraphicsView._makeView(view:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  uint64_t AssociatedTypeWitness;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  int v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v7 = *a1;
  v8 = *(_QWORD *)a2;
  v9 = *(_DWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  v12 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  v13 = *(_DWORD *)(a2 + 80);
  static DynamicPropertyCache.fields(of:)(a3, (uint64_t)&v50);
  v14 = v50;
  v15 = v51;
  v16 = v52;
  v17 = HIDWORD(v52);
  v50 = v8;
  v52 = v10;
  v53 = *(_OWORD *)(a2 + 24);
  v54 = v12;
  v55 = v11;
  v56 = *(_OWORD *)(a2 + 56);
  v57 = *(_QWORD *)(a2 + 72);
  LODWORD(v51) = v9;
  v58 = v13;
  v29 = v17;
  v36 = v7;
  v32 = v14;
  v38 = v14;
  v39 = v15;
  v34 = v15;
  v33 = v16;
  LOBYTE(v40) = v16;
  HIDWORD(v40) = v17;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static ConditionalGraphicsView.makeBody(view:inputs:fields:)((uint64_t)&v37, (uint64_t)&v47, &v36, (uint64_t)&v50, &v38, a3, a4);
  v27 = v47;
  v28 = v48;
  v31 = v49;
  v38 = v50;
  LODWORD(v39) = v51;
  v40 = v52;
  v41 = v53;
  v42 = v54;
  v43 = v55;
  v44 = v56;
  v45 = v57;
  v46 = v58;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v19 = swift_getAssociatedTypeWitness();
  v21 = type metadata accessor for ConditionalGraphValue(0, AssociatedTypeWitness, v19, v20);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v23 = swift_getAssociatedConformanceWitness();
  ConditionalGraphValue<>.makeView(inputs:)(&v38, v21, AssociatedConformanceWitness, v23, (double *)&v47);
  v24 = v47;
  v25 = v48;
  if ((v31 & 1) == 0)
  {
    v47 = v27;
    v48 = v28;
    v37 = v7;
    v38 = v32;
    v39 = v34;
    LOBYTE(v40) = v33;
    HIDWORD(v40) = v29;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)((unint64_t)&v37, &v38, a3);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *a5 = v24;
  a5[1] = v25;
  return result;
}

uint64_t static ConditionalGraphicsView.makeBody(view:inputs:fields:)(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  int v23;
  __int128 v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  int v39;
  int v40;
  __int128 v41;
  char v42;
  int v43;

  v11 = *a3;
  v13 = *a5;
  v12 = a5[1];
  v14 = *((_BYTE *)a5 + 16);
  v15 = *((_DWORD *)a5 + 5);
  if (AGTypeGetKind() - 2 < 4)
  {
    v35 = a2;
    v16 = swift_retain();
    v17 = specialized find<A>(_:key:)(v16);
    if (v17)
    {
      v18 = *(_BYTE *)(v17 + 72);
      swift_release();
      if ((v18 & 1) != 0)
      {
        v40 = v11;
        v36 = v13;
        v37 = v12;
        v38 = v14;
        v39 = v15;
        v20 = type metadata accessor for GraphicsViewBodyAccessor(0, a6, a7, v19);
        v21 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GraphicsViewBodyAccessor<A>, v20);
        result = BodyAccessor.makeBody(container:inputs:fields:)(&v43, (uint64_t)&v41, (uint64_t)&v40, a4, (uint64_t)&v36, v20, v21);
        v23 = v43;
        v24 = v41;
        v25 = 1;
LABEL_7:
        v30 = v42;
        *(_DWORD *)a1 = v23;
        *(_BYTE *)(a1 + 4) = v25;
        *(_OWORD *)v35 = v24;
        *(_BYTE *)(v35 + 16) = v30;
        return result;
      }
    }
    else
    {
      swift_release();
    }
    v26 = *(_QWORD *)(a7 + 8);
    ViewBodyAccessor.init()(a6, v26);
    v40 = v11;
    v36 = v13;
    v37 = v12;
    v38 = v14;
    v39 = v15;
    v28 = type metadata accessor for ViewBodyAccessor(0, a6, v26, v27);
    v29 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for ViewBodyAccessor<A>, v28);
    result = BodyAccessor.makeBody(container:inputs:fields:)(&v43, (uint64_t)&v41, (uint64_t)&v40, a4, (uint64_t)&v36, v28, v29);
    v25 = 0;
    v23 = v43;
    v24 = v41;
    goto LABEL_7;
  }
  _StringGuts.grow(_:)(70);
  v31._object = (void *)0x80000002352E0FD0;
  v31._countAndFlagsBits = 0xD000000000000038;
  String.append(_:)(v31);
  v32._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  v33._countAndFlagsBits = 0x6C63206120736920;
  v33._object = (void *)0xEC0000002E737361;
  String.append(_:)(v33);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t static ConditionalGraphicsView._makeViewList(view:inputs:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t AssociatedConformanceWitness;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  int v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  int v56;
  uint64_t v57;
  char v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  v7 = *(_QWORD *)a2;
  v33 = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v31 = *(_QWORD *)(a2 + 56);
  v11 = *(_DWORD *)(a2 + 64);
  v12 = *(_QWORD *)(a2 + 72);
  v29 = *(_BYTE *)(a2 + 80);
  static DynamicPropertyCache.fields(of:)(a3, (uint64_t)&v50);
  v13 = v50;
  v14 = v51;
  v15 = v52;
  v16 = HIDWORD(v52);
  v50 = v7;
  v52 = v8;
  v53 = *(_OWORD *)(a2 + 24);
  v54 = v10;
  *(_QWORD *)&v55 = v9;
  *((_QWORD *)&v55 + 1) = v31;
  LODWORD(v51) = v33;
  v56 = v11;
  v57 = v12;
  v58 = v29;
  v26 = v16;
  v35 = v6;
  v32 = v13;
  v34 = v14;
  v38 = v13;
  v39 = v14;
  v30 = v15;
  LOBYTE(v40) = v15;
  HIDWORD(v40) = v16;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static ConditionalGraphicsView.makeBody(view:inputs:fields:)((uint64_t)&v36, (uint64_t)&v47, &v35, (uint64_t)&v50, &v38, a3, a4);
  v24 = v47;
  v25 = v48;
  v28 = v49;
  LODWORD(v47) = v36;
  BYTE4(v47) = v37;
  v38 = v50;
  LODWORD(v39) = v51;
  v40 = v52;
  v41 = v53;
  v42 = v54;
  v43 = v55;
  v44 = v56;
  v45 = v57;
  v46 = v58;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v18 = swift_getAssociatedTypeWitness();
  v20 = type metadata accessor for ConditionalGraphValue(0, AssociatedTypeWitness, v18, v19);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v22 = swift_getAssociatedConformanceWitness();
  ConditionalGraphValue<>.makeViewList(inputs:)(&v38, v20, AssociatedConformanceWitness, v22);
  if ((v28 & 1) == 0)
  {
    v47 = v24;
    v48 = v25;
    v36 = v6;
    v38 = v32;
    v39 = v34;
    LOBYTE(v40) = v30;
    HIDWORD(v40) = v26;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)((unint64_t)&v36, &v38, a3);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

uint64_t static ConditionalGraphicsView._viewListCount(inputs:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  _QWORD v8[2];
  int v9;
  uint64_t v10;

  v1 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  swift_retain_n();
  swift_bridgeObjectRetain();
  specialized find<A>(_:key:)(v1);
  swift_bridgeObjectRelease();
  swift_release_n();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8[0] = v1;
  v8[1] = v2;
  v9 = v3;
  v10 = v4;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(v8, AssociatedTypeWitness, AssociatedConformanceWitness);
}

void protocol witness for BodyAccessor.updateBody(of:changed:) in conformance GraphicsViewBodyAccessor<A>(uint64_t a1, char a2, uint64_t a3)
{
  specialized GraphicsViewBodyAccessor.updateBody(of:changed:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t type metadata accessor for ConditionalGraphValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ConditionalGraphValue);
}

ValueMetadata *type metadata accessor for UsingGraphicsRenderer()
{
  return &type metadata for UsingGraphicsRenderer;
}

uint64_t dispatch thunk of ConditionalGraphicsView.graphicsBody.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t type metadata accessor for GraphicsViewBodyAccessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GraphicsViewBodyAccessor);
}

void specialized GraphicsViewBodyAccessor.updateBody(of:changed:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t inited;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  __int128 v47;
  _BYTE v48[24];
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v8 = type metadata accessor for OSSignpostID();
  v45 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v46 = (char *)&v37 - v12;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v16 = (char *)&v37 - v15;
  if ((a2 & 1) != 0)
  {
    v44 = a1;
    v17 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      (*(void (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
      AGGraphSetUpdate();
      v33 = $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      MEMORY[0x24BDAC7A8](v33);
      v35 = type metadata accessor for GraphicsViewBodyAccessor(0, a3, a4, v34);
      *(&v37 - 2) = v35;
      *(&v37 - 1) = MEMORY[0x23B7C9C04](&protocol conformance descriptor for GraphicsViewBodyAccessor<A>, v35);
      _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v16, (uint64_t)partial apply for closure #2 in BodyAccessor.setBody(_:), (uint64_t)(&v37 - 4), AssociatedTypeWitness, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v36);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
      return;
    }
    v39 = v17;
    v40 = v16;
    v41 = v14;
    v42 = AssociatedTypeWitness;
    static OSSignpostID.exclusive.getter();
    type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2352828C0;
    v19 = AGTypeID.description.getter();
    v21 = v20;
    *(_QWORD *)(inited + 56) = MEMORY[0x24BEE0D00];
    v22 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(inited + 32) = v19;
    v23 = (_QWORD *)(inited + 32);
    *(_QWORD *)(inited + 64) = v22;
    *(_QWORD *)(inited + 40) = v21;
    v43 = a3;
    *(_QWORD *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    v24 = inited + 72;
    *(_QWORD *)(inited + 96) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 104) = v22;
    *(_QWORD *)(inited + 80) = v25;
    if (one-time initialization token for _signpostLog != -1)
      swift_once();
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v10, v46, v8);
    type metadata accessor for [(_:)](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg?>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v26 = swift_initStackObject();
    v47 = xmmword_235283260;
    *(_OWORD *)(v26 + 16) = xmmword_235283260;
    if (*(_QWORD *)(inited + 16))
    {
      v27 = v26;
      outlined init with copy of AnyTrackedValue(inited + 32, v26 + 32);
      if (*(_QWORD *)(inited + 16) >= 2uLL)
      {
        v37 = inited;
        v38 = a4;
        LODWORD(inited) = v39 | 0x14110014;
        outlined init with copy of AnyTrackedValue(v24, v27 + 72);
        *(_OWORD *)(v27 + 128) = 0u;
        *(_QWORD *)(v27 + 144) = 0;
        *(_OWORD *)(v27 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(inited, v27, inited, (uint64_t)v10);
        outlined init with copy of CVarArg?(v27 + 112, (uint64_t)v48);
        swift_bridgeObjectRelease();
        if (!v49)
        {
LABEL_14:
          outlined destroy of CVarArg?((uint64_t)v48);
          swift_bridgeObjectRelease();
          v32 = *(void (**)(char *, uint64_t))(v45 + 8);
          v32(v46, v8);
          v32(v10, v8);
          a4 = v38;
          AssociatedTypeWitness = v42;
          a3 = v43;
          v16 = v40;
          v14 = v41;
          goto LABEL_15;
        }
        outlined destroy of CVarArg?((uint64_t)v48);
        v23 = &unk_2561AC000;
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          v28 = __swift_project_value_buffer(v8, (uint64_t)static OSSignpostID.continuation);
          v29 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 24);
          while (1)
          {
            v29(v10, v28, v8);
            v30 = swift_initStackObject();
            *(_OWORD *)(v30 + 16) = v47;
            *(_OWORD *)(v30 + 32) = 0u;
            *(_OWORD *)(v30 + 48) = 0u;
            *(_OWORD *)(v30 + 64) = 0u;
            *(_OWORD *)(v30 + 80) = 0u;
            *(_OWORD *)(v30 + 96) = 0u;
            *(_OWORD *)(v30 + 128) = 0u;
            *(_QWORD *)(v30 + 144) = 0;
            *(_OWORD *)(v30 + 112) = 0u;
            v31 = v30 + 112;
            specialized withKDebugValues(_:_:closure:)(inited, v30, inited, (uint64_t)v10);
            outlined init with copy of CVarArg?(v31, (uint64_t)v48);
            swift_bridgeObjectRelease();
            if (!v49)
              break;
            outlined destroy of CVarArg?((uint64_t)v48);
            if (v23[291] != -1)
              swift_once();
            v28 = __swift_project_value_buffer(v8, (uint64_t)static OSSignpostID.continuation);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

SwiftUI::UniqueID __swiftcall UniqueID.init()()
{
  SwiftUI::UniqueID *v0;
  SwiftUI::UniqueID *v1;
  SwiftUI::UniqueID result;

  v1 = v0;
  result.value = AGMakeUniqueID();
  v1->value = result.value;
  return result;
}

void static UniqueID.invalid.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void UniqueID.hash(into:)()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static UniqueID.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

Swift::Int UniqueID.hashValue.getter()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

ValueMetadata *type metadata accessor for UniqueID()
{
  return &type metadata for UniqueID;
}

BOOL static AccessibilityChildBehaviorKind.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void AccessibilityChildBehaviorKind.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AccessibilityChildBehaviorKind.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x6E6961746E6F63;
  else
    return 0x656E69626D6F63;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AccessibilityChildBehaviorKind.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized AccessibilityChildBehaviorKind.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AccessibilityChildBehaviorKind.CodingKeys()
{
  lazy protocol witness table accessor for type AccessibilityChildBehaviorKind.CodingKeys and conformance AccessibilityChildBehaviorKind.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AccessibilityChildBehaviorKind.CodingKeys()
{
  lazy protocol witness table accessor for type AccessibilityChildBehaviorKind.CodingKeys and conformance AccessibilityChildBehaviorKind.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AccessibilityChildBehaviorKind.CombineCodingKeys()
{
  lazy protocol witness table accessor for type AccessibilityChildBehaviorKind.CombineCodingKeys and conformance AccessibilityChildBehaviorKind.CombineCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AccessibilityChildBehaviorKind.CombineCodingKeys()
{
  lazy protocol witness table accessor for type AccessibilityChildBehaviorKind.CombineCodingKeys and conformance AccessibilityChildBehaviorKind.CombineCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AccessibilityChildBehaviorKind.ContainCodingKeys()
{
  lazy protocol witness table accessor for type AccessibilityChildBehaviorKind.ContainCodingKeys and conformance AccessibilityChildBehaviorKind.ContainCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AccessibilityChildBehaviorKind.ContainCodingKeys()
{
  lazy protocol witness table accessor for type AccessibilityChildBehaviorKind.ContainCodingKeys and conformance AccessibilityChildBehaviorKind.ContainCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t AccessibilityChildBehaviorKind.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  char *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;

  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520];
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<AccessibilityChildBehaviorKind.ContainCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehaviorKind.ContainCodingKeys and conformance AccessibilityChildBehaviorKind.ContainCodingKeys, (uint64_t)&unk_250640488, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v20 = *(_QWORD *)(v4 - 8);
  v21 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v19 = (char *)&v16 - v5;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<AccessibilityChildBehaviorKind.CombineCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehaviorKind.CombineCodingKeys and conformance AccessibilityChildBehaviorKind.CombineCodingKeys, (uint64_t)&unk_250640468, v3);
  v17 = *(_QWORD *)(v6 - 8);
  v18 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v16 - v7;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<AccessibilityChildBehaviorKind.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehaviorKind.CodingKeys and conformance AccessibilityChildBehaviorKind.CodingKeys, (uint64_t)&unk_2506403D8, v3);
  v10 = v9;
  v22 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v16 - v11;
  v13 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AccessibilityChildBehaviorKind.CodingKeys and conformance AccessibilityChildBehaviorKind.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((v13 & 1) != 0)
  {
    v24 = 1;
    lazy protocol witness table accessor for type AccessibilityChildBehaviorKind.ContainCodingKeys and conformance AccessibilityChildBehaviorKind.ContainCodingKeys();
    v14 = v19;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v14, v21);
  }
  else
  {
    v23 = 0;
    lazy protocol witness table accessor for type AccessibilityChildBehaviorKind.CombineCodingKeys and conformance AccessibilityChildBehaviorKind.CombineCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v8, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v12, v10);
}

unint64_t lazy protocol witness table accessor for type AccessibilityChildBehaviorKind.ContainCodingKeys and conformance AccessibilityChildBehaviorKind.ContainCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.ContainCodingKeys and conformance AccessibilityChildBehaviorKind.ContainCodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.ContainCodingKeys and conformance AccessibilityChildBehaviorKind.ContainCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityChildBehaviorKind.ContainCodingKeys, &unk_250640488);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.ContainCodingKeys and conformance AccessibilityChildBehaviorKind.ContainCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.ContainCodingKeys and conformance AccessibilityChildBehaviorKind.ContainCodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.ContainCodingKeys and conformance AccessibilityChildBehaviorKind.ContainCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityChildBehaviorKind.ContainCodingKeys, &unk_250640488);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.ContainCodingKeys and conformance AccessibilityChildBehaviorKind.ContainCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.ContainCodingKeys and conformance AccessibilityChildBehaviorKind.ContainCodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.ContainCodingKeys and conformance AccessibilityChildBehaviorKind.ContainCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityChildBehaviorKind.ContainCodingKeys, &unk_250640488);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.ContainCodingKeys and conformance AccessibilityChildBehaviorKind.ContainCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityChildBehaviorKind.CombineCodingKeys and conformance AccessibilityChildBehaviorKind.CombineCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.CombineCodingKeys and conformance AccessibilityChildBehaviorKind.CombineCodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.CombineCodingKeys and conformance AccessibilityChildBehaviorKind.CombineCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityChildBehaviorKind.CombineCodingKeys, &unk_250640468);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.CombineCodingKeys and conformance AccessibilityChildBehaviorKind.CombineCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.CombineCodingKeys and conformance AccessibilityChildBehaviorKind.CombineCodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.CombineCodingKeys and conformance AccessibilityChildBehaviorKind.CombineCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityChildBehaviorKind.CombineCodingKeys, &unk_250640468);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.CombineCodingKeys and conformance AccessibilityChildBehaviorKind.CombineCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.CombineCodingKeys and conformance AccessibilityChildBehaviorKind.CombineCodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.CombineCodingKeys and conformance AccessibilityChildBehaviorKind.CombineCodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityChildBehaviorKind.CombineCodingKeys, &unk_250640468);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.CombineCodingKeys and conformance AccessibilityChildBehaviorKind.CombineCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityChildBehaviorKind.CodingKeys and conformance AccessibilityChildBehaviorKind.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.CodingKeys and conformance AccessibilityChildBehaviorKind.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.CodingKeys and conformance AccessibilityChildBehaviorKind.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityChildBehaviorKind.CodingKeys, &unk_2506403D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.CodingKeys and conformance AccessibilityChildBehaviorKind.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.CodingKeys and conformance AccessibilityChildBehaviorKind.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.CodingKeys and conformance AccessibilityChildBehaviorKind.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityChildBehaviorKind.CodingKeys, &unk_2506403D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.CodingKeys and conformance AccessibilityChildBehaviorKind.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.CodingKeys and conformance AccessibilityChildBehaviorKind.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.CodingKeys and conformance AccessibilityChildBehaviorKind.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityChildBehaviorKind.CodingKeys, &unk_2506403D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.CodingKeys and conformance AccessibilityChildBehaviorKind.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.CodingKeys and conformance AccessibilityChildBehaviorKind.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.CodingKeys and conformance AccessibilityChildBehaviorKind.CodingKeys)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityChildBehaviorKind.CodingKeys, &unk_2506403D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind.CodingKeys and conformance AccessibilityChildBehaviorKind.CodingKeys);
  }
  return result;
}

Swift::Int AccessibilityChildBehaviorKind.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t AccessibilityChildBehaviorKind.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  _BYTE *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _BYTE *v34;
  uint64_t v35;
  char v36;
  char v37;

  v34 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0];
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<AccessibilityChildBehaviorKind.ContainCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehaviorKind.ContainCodingKeys and conformance AccessibilityChildBehaviorKind.ContainCodingKeys, (uint64_t)&unk_250640488, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v32 = v4;
  v29 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v33 = (char *)&v28 - v5;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<AccessibilityChildBehaviorKind.CombineCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehaviorKind.CombineCodingKeys and conformance AccessibilityChildBehaviorKind.CombineCodingKeys, (uint64_t)&unk_250640468, v3);
  v30 = *(_QWORD *)(v6 - 8);
  v31 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v28 - v7;
  type metadata accessor for FontBox<Font.SystemProvider>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<AccessibilityChildBehaviorKind.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehaviorKind.CodingKeys and conformance AccessibilityChildBehaviorKind.CodingKeys, (uint64_t)&unk_2506403D8, v3);
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v28 - v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AccessibilityChildBehaviorKind.CodingKeys and conformance AccessibilityChildBehaviorKind.CodingKeys();
  v14 = v35;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14)
    goto LABEL_6;
  v35 = v11;
  v15 = v33;
  v16 = v34;
  v28 = a1;
  v17 = v13;
  v18 = KeyedDecodingContainer.allKeys.getter();
  v19 = v10;
  if (*(_QWORD *)(v18 + 16) != 1)
  {
    v22 = type metadata accessor for DecodingError();
    swift_allocError();
    v24 = v23;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v24 = &type metadata for AccessibilityChildBehaviorKind;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v24, *MEMORY[0x24BEE26D0], v22);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v13, v10);
    a1 = v28;
LABEL_6:
    v25 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v25);
  }
  v20 = *(_BYTE *)(v18 + 32);
  if ((v20 & 1) != 0)
  {
    v37 = 1;
    lazy protocol witness table accessor for type AccessibilityChildBehaviorKind.ContainCodingKeys and conformance AccessibilityChildBehaviorKind.ContainCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v21 = v35;
    (*(void (**)(char *, uint64_t))(v29 + 8))(v15, v32);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v17, v19);
  }
  else
  {
    v36 = 0;
    lazy protocol witness table accessor for type AccessibilityChildBehaviorKind.CombineCodingKeys and conformance AccessibilityChildBehaviorKind.CombineCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v27 = v35;
    (*(void (**)(char *, uint64_t))(v30 + 8))(v8, v31);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v19);
  }
  *v16 = v20;
  v25 = (uint64_t)v28;
  return __swift_destroy_boxed_opaque_existential_1(v25);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AccessibilityChildBehaviorKind@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return AccessibilityChildBehaviorKind.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AccessibilityChildBehaviorKind(_QWORD *a1)
{
  return AccessibilityChildBehaviorKind.encode(to:)(a1);
}

uint64_t AccessibilityChildBehaviorKind.protobufValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

SwiftUI::AccessibilityChildBehaviorKind_optional __swiftcall AccessibilityChildBehaviorKind.init(protobufValue:)(Swift::UInt protobufValue)
{
  char *v1;
  char v2;

  if (protobufValue == 1)
    v2 = 1;
  else
    v2 = 2;
  if (!protobufValue)
    v2 = 0;
  *v1 = v2;
  return (SwiftUI::AccessibilityChildBehaviorKind_optional)protobufValue;
}

unint64_t lazy protocol witness table accessor for type AccessibilityChildBehaviorKind and conformance AccessibilityChildBehaviorKind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind and conformance AccessibilityChildBehaviorKind;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind and conformance AccessibilityChildBehaviorKind)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityChildBehaviorKind, &type metadata for AccessibilityChildBehaviorKind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind and conformance AccessibilityChildBehaviorKind);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind and conformance AccessibilityChildBehaviorKind;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind and conformance AccessibilityChildBehaviorKind)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityChildBehaviorKind, &type metadata for AccessibilityChildBehaviorKind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind and conformance AccessibilityChildBehaviorKind);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind and conformance AccessibilityChildBehaviorKind;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind and conformance AccessibilityChildBehaviorKind)
  {
    result = MEMORY[0x23B7C9C04](&protocol conformance descriptor for AccessibilityChildBehaviorKind, &type metadata for AccessibilityChildBehaviorKind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind and conformance AccessibilityChildBehaviorKind);
  }
  return result;
}

uint64_t protocol witness for ProtobufEnum.init(protobufValue:) in conformance AccessibilityChildBehaviorKind@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  if (result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (!result)
    v2 = 0;
  *a2 = v2;
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityChildBehaviorKind()
{
  return &type metadata for AccessibilityChildBehaviorKind;
}

uint64_t storeEnumTagSinglePayload for AccessibilityChildBehaviorKind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_234F93B34 + 4 * byte_2352B9135[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_234F93B68 + 4 * asc_2352B9130[v4]))();
}

uint64_t sub_234F93B68(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F93B70(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x234F93B78);
  return result;
}

uint64_t sub_234F93B84(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x234F93B8CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_234F93B90(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_234F93B98(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for AccessibilityChildBehaviorKind.CodingKeys()
{
  return &unk_2506403D8;
}

void *type metadata accessor for AccessibilityChildBehaviorKind.CombineCodingKeys()
{
  return &unk_250640468;
}

void *type metadata accessor for AccessibilityChildBehaviorKind.ContainCodingKeys()
{
  return &unk_250640488;
}

uint64_t specialized AccessibilityChildBehaviorKind.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656E69626D6F63 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6961746E6F63 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t VelocitySampler.lastTime.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)(v2 + *(int *)(result + 44));
  v4 = *v3;
  LOBYTE(v3) = *((_BYTE *)v3 + 8);
  *(_QWORD *)a2 = v4;
  *(_BYTE *)(a2 + 8) = (_BYTE)v3;
  return result;
}

uint64_t VelocitySampler.init()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t TupleTypeMetadata2;
  void (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  int *v9;
  uint64_t result;
  uint64_t v11;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56);
  v7(a3, 1, 1, TupleTypeMetadata2);
  v9 = (int *)type metadata accessor for VelocitySampler(0, a1, a2, v8);
  v7(a3 + v9[9], 1, 1, TupleTypeMetadata2);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v7)(a3 + v9[10], 1, 1, TupleTypeMetadata2);
  v11 = a3 + v9[11];
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  *(_QWORD *)(a3 + v9[12]) = 0x3FE8000000000000;
  return result;
}

uint64_t type metadata accessor for VelocitySampler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for VelocitySampler);
}

uint64_t VelocitySampler.addSample(_:time:)(void (*a1)(char *, uint64_t, uint64_t, __n128), double *a2, uint64_t a3)
{
  char *v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  __n128 v23;
  uint64_t v24;
  char *v25;
  double v26;
  uint64_t v27;
  char *v28;
  double v29;
  char v30;
  double v31;
  Swift::String v32;
  Swift::String v33;
  unint64_t v34;
  uint64_t v35;
  Swift::String v36;
  Swift::String v37;
  uint64_t v38;
  void *v39;
  Swift::String v40;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, void (*)(char *, uint64_t, uint64_t, __n128), __n128);
  __n128 v45;
  char v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t (*v51)(char *, uint64_t, uint64_t);
  int v52;
  char *v53;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  char *v56;
  void (*v57)(uint64_t, uint64_t, uint64_t);
  char *v58;
  uint64_t v59;
  int v60;
  char *v61;
  char *v62;
  char *v63;
  int v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t (*v71)(char *, uint64_t, uint64_t);
  int v72;
  void (*v73)(char *, uint64_t);
  char *v74;
  char *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  void (*v79)(uint64_t, uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  void (*v97)(char *, uint64_t, uint64_t, __n128);
  uint64_t v98;
  double v99;
  uint64_t v100;
  void *v101;

  v97 = a1;
  v98 = *(_QWORD *)(a3 + 16);
  swift_getTupleTypeMetadata2();
  v94 = type metadata accessor for Optional();
  v6 = *(_QWORD **)(v94 - 8);
  MEMORY[0x24BDAC7A8](v94);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v90 - v8;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v90 - v11;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v90 - v14;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v90 - v17;
  v23.n128_f64[0] = MEMORY[0x24BDAC7A8](v19);
  v25 = (char *)&v90 - v24;
  v26 = *a2;
  v27 = *(int *)(a3 + 44);
  v95 = v3;
  v28 = &v3[v27];
  v29 = *(double *)&v3[v27];
  v30 = v3[v27 + 8];
  v31 = v29;
  if ((v30 & 1) == 0 && v26 < v29)
  {
    v100 = 0;
    v101 = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(18);
    v32._countAndFlagsBits = 0x2064696C61766E49;
    v32._object = (void *)0xEF20656C706D6173;
    String.append(_:)(v32);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v33._countAndFlagsBits = 32;
    v33._object = (void *)0xE100000000000000;
    String.append(_:)(v33);
    v35 = v100;
    v34 = (unint64_t)v101;
    v100 = 0;
    v101 = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(27);
    v36._countAndFlagsBits = 0x6D69742068746977;
    v36._object = (void *)0xEA00000000002065;
    String.append(_:)(v36);
    v99 = v26;
    _print_unlocked<A, B>(_:_:)();
    v37._countAndFlagsBits = 0x207473616C203E20;
    v37._object = (void *)0xED000020656D6974;
    String.append(_:)(v37);
    v99 = v29;
    _print_unlocked<A, B>(_:_:)();
    v38 = v100;
    v39 = v101;
    v100 = v35;
    v101 = (void *)v34;
    swift_bridgeObjectRetain();
    v40._countAndFlagsBits = v38;
    v40._object = v39;
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    specialized static Log.externalWarning(_:)(v100, (unint64_t)v101);
    return swift_bridgeObjectRelease();
  }
  v90 = v22;
  v92 = v21;
  v93 = v20;
  v42 = *(int *)(v20 + 48);
  v43 = *(_QWORD *)(v98 - 8);
  v44 = *(void (**)(char *, void (*)(char *, uint64_t, uint64_t, __n128), __n128))(v43 + 16);
  v96 = v25;
  v44(v25, v97, v23);
  *(double *)&v96[v42] = v26;
  v45.n128_f64[0] = v26 - v31;
  if (v26 - v31 >= 2.22044605e-16)
    v46 = 1;
  else
    v46 = v30;
  v91 = v43;
  if ((v46 & 1) != 0)
  {
    *(double *)v28 = v26;
    v28[8] = 0;
    v47 = v94;
    v48 = v95;
    v49 = &v95[*(int *)(a3 + 40)];
    v97 = (void (*)(char *, uint64_t, uint64_t, __n128))v6[2];
    v97(v12, (uint64_t)v49, v94, v45);
    v50 = v92;
    v51 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v92 + 48);
    v52 = v51(v12, 1, v93);
    v53 = v12;
    v54 = (void (*)(char *, uint64_t))v6[1];
    v54(v53, v47);
    v55 = *(int *)(a3 + 36);
    v56 = &v48[v55];
    if (v52 != 1)
    {
      v79 = (void (*)(uint64_t, uint64_t, uint64_t))v6[3];
      v79((uint64_t)v48, (uint64_t)&v48[v55], v47);
      v79((uint64_t)v56, (uint64_t)v49, v47);
      v54(v49, v47);
      v80 = v93;
      v81 = *(int *)(v93 + 48);
      (*(void (**)(char *, char *, uint64_t))(v91 + 32))(v49, v96, v98);
      *(double *)&v49[v81] = v26;
      return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v49, 0, 1, v80);
    }
    v57 = (void (*)(uint64_t, uint64_t, uint64_t))v97;
    ((void (*)(char *, char *, uint64_t))v97)(v9, &v48[v55], v47);
    v58 = v56;
    v59 = v93;
    v60 = v51(v9, 1, v93);
    v54(v9, v47);
    if (v60 == 1)
    {
      v61 = v58;
      v62 = v90;
      v63 = v95;
      v57((uint64_t)v90, (uint64_t)v95, v47);
      v64 = v51(v62, 1, v59);
      v54(v62, v47);
      v65 = v64 == 1;
      v66 = v91;
      if (v65)
      {
        v54(v63, v47);
        v67 = *(int *)(v59 + 48);
        (*(void (**)(char *, char *, uint64_t))(v66 + 32))(v63, v96, v98);
        *(double *)&v63[v67] = v26;
        v88 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v92 + 56);
        v89 = v63;
      }
      else
      {
        v54(v61, v47);
        v87 = *(int *)(v59 + 48);
        (*(void (**)(char *, char *, uint64_t))(v66 + 32))(v61, v96, v98);
        *(double *)&v61[v87] = v26;
        v88 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v92 + 56);
        v89 = v61;
      }
    }
    else
    {
      v54(v49, v47);
      v84 = *(int *)(v59 + 48);
      (*(void (**)(char *, char *, uint64_t))(v91 + 32))(v49, v96, v98);
      *(double *)&v49[v84] = v26;
      v88 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v92 + 56);
      v89 = v49;
    }
    v86 = v59;
  }
  else
  {
    v68 = v94;
    v69 = &v95[*(int *)(a3 + 40)];
    v97 = (void (*)(char *, uint64_t, uint64_t, __n128))v6[2];
    v97(v18, (uint64_t)v69, v94, v45);
    v70 = v92;
    v71 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v92 + 48);
    v72 = v71(v18, 1, v93);
    v73 = (void (*)(char *, uint64_t))v6[1];
    v73(v18, v68);
    if (v72 != 1)
    {
      v73(v69, v68);
      v82 = v93;
      v83 = *(int *)(v93 + 48);
      (*(void (**)(char *, char *, uint64_t))(v91 + 32))(v69, v96, v98);
      *(double *)&v69[v83] = v26;
      return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v69, 0, 1, v82);
    }
    v74 = v95;
    v75 = &v95[*(int *)(a3 + 36)];
    ((void (*)(char *, char *, uint64_t))v97)(v15, v75, v68);
    v76 = v93;
    v77 = v71(v15, 1, v93);
    v73(v15, v68);
    if (v77 == 1)
    {
      v73(v74, v68);
      v78 = *(int *)(v76 + 48);
      (*(void (**)(char *, char *, uint64_t))(v91 + 32))(v74, v96, v98);
      *(double *)&v74[v78] = v26;
      v88 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v92 + 56);
      v89 = v74;
    }
    else
    {
      v73(v75, v68);
      v85 = *(int *)(v76 + 48);
      (*(void (**)(char *, char *, uint64_t))(v91 + 32))(v75, v96, v98);
      *(double *)&v75[v85] = v26;
      v88 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v92 + 56);
      v89 = v75;
    }
    v86 = v76;
  }
  return v88((uint64_t)v89, 0, 1, v86);
}

Swift::Void __swiftcall VelocitySampler.reset()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = v0;
  (*(void (**)())(*(_QWORD *)(v0 - 8) + 8))();
  VelocitySampler.init()(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), v1);
}

BOOL VelocitySampler.isEmpty.getter(uint64_t a1)
{
  uint64_t v1;

  return (*(_BYTE *)(v1 + *(int *)(a1 + 44) + 8) & 1) == 0;
}

uint64_t VelocitySampler.velocity.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t TupleTypeMetadata2;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t, double);
  unsigned int (*v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  char *v41;
  double v42;
  uint64_t v44;
  char *v45;
  double v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  char *v53;
  double v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t);
  void (*v63)(uint64_t, uint64_t);
  void (*v64)(char *, uint64_t);
  void (*v65)(uint64_t, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, char *, uint64_t);
  void (*v69)(uint64_t, uint64_t, double);
  void (*v70)(char *, char *, uint64_t);
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  int *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;

  v4 = v3;
  v7 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v86 = (int *)a1;
  v78 = v6;
  v89 = *(_QWORD *)(v6 + 8);
  v77 = *(_QWORD *)(v89 + 8);
  v8 = type metadata accessor for _Velocity(0, v7, v77, a2);
  v80 = *(_QWORD *)(v8 - 8);
  v81 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v79 = (uint64_t)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v74 = (uint64_t)&v67 - v11;
  MEMORY[0x24BDAC7A8](v12);
  v85 = (uint64_t)&v67 - v13;
  v88 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v73 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v76 = (char *)&v67 - v17;
  MEMORY[0x24BDAC7A8](v18);
  v84 = (char *)&v67 - v19;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v21 = type metadata accessor for Optional();
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v75 = (char *)&v67 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v67 - v25;
  MEMORY[0x24BDAC7A8](v27);
  v29 = (char *)&v67 - v28;
  v30 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v72 = (char *)&v67 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v33);
  v83 = (char *)&v67 - v34;
  v36 = MEMORY[0x24BDAC7A8](v35);
  v90 = (char *)&v67 - v37;
  v38 = *(void (**)(char *, uint64_t, uint64_t, double))(v22 + 16);
  v87 = v4;
  v38(v29, v4, v21, v36);
  v82 = v30;
  v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48);
  if (v39(v29, 1, TupleTypeMetadata2) == 1)
  {
    v26 = v29;
LABEL_5:
    (*(void (**)(char *, uint64_t))(v22 + 8))(v26, v21);
    return static _Velocity<>.zero.getter(v7, a3);
  }
  v71 = a3;
  v40 = *(int *)(TupleTypeMetadata2 + 48);
  v41 = v90;
  v70 = *(void (**)(char *, char *, uint64_t))(v88 + 32);
  v70(v90, v29, v7);
  v42 = *(double *)&v29[v40];
  *(double *)&v41[v40] = v42;
  ((void (*)(char *, uint64_t, uint64_t))v38)(v26, v87 + v86[9], v21);
  if (v39(v26, 1, TupleTypeMetadata2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v82 + 8))(v90, TupleTypeMetadata2);
    a3 = v71;
    goto LABEL_5;
  }
  v44 = *(int *)(TupleTypeMetadata2 + 48);
  v45 = v83;
  v70(v83, v26, v7);
  v46 = *(double *)&v26[v44];
  *(double *)&v45[v44] = v46;
  v47 = v84;
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  v48 = v78;
  v69 = *(void (**)(uint64_t, uint64_t, double))(v78 + 16);
  v69(v7, v78, 1.0 / (v46 - v42));
  v49 = (uint64_t)v76;
  v68 = *(void (**)(char *, char *, uint64_t))(v88 + 16);
  v68(v76, v47, v7);
  _Velocity.init(valuePerSecond:)(v49, v7, v85);
  v50 = v75;
  ((void (*)(char *, uint64_t, uint64_t))v38)(v75, v87 + v86[10], v21);
  if (v39(v50, 1, TupleTypeMetadata2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v88 + 8))(v84, v7);
    v51 = *(void (**)(char *, uint64_t))(v82 + 8);
    v51(v83, TupleTypeMetadata2);
    v51(v90, TupleTypeMetadata2);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v50, v21);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v80 + 32))(v71, v85, v81);
  }
  else
  {
    v52 = *(int *)(TupleTypeMetadata2 + 48);
    v53 = v72;
    v70(v72, v50, v7);
    v54 = *(double *)&v50[v52];
    *(double *)&v53[v52] = v54;
    v55 = v83;
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
    v69(v7, v48, 1.0 / (v54 - v46));
    v56 = (uint64_t)v73;
    v68(v73, (char *)v49, v7);
    v57 = v74;
    _Velocity.init(valuePerSecond:)(v56, v7, v74);
    v58 = *(double *)(v87 + v86[12]);
    v91 = v48;
    v59 = v81;
    v60 = MEMORY[0x23B7C9C04](&protocol conformance descriptor for <> _Velocity<A>, v81, &v91);
    mix<A>(_:_:by:)(v59, v60, v79, v58);
    v61 = v80;
    v62 = *(void (**)(uint64_t, uint64_t))(v80 + 8);
    v62(v57, v59);
    v63 = *(void (**)(uint64_t, uint64_t))(v88 + 8);
    v63(v49, v7);
    v64 = *(void (**)(char *, uint64_t))(v82 + 8);
    v64(v53, TupleTypeMetadata2);
    v62(v85, v59);
    v63((uint64_t)v84, v7);
    v64(v55, TupleTypeMetadata2);
    v64(v90, TupleTypeMetadata2);
    v65 = *(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 32);
    v66 = v85;
    v65(v85, v79, v59);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v65)(v71, v66, v59);
  }
}

uint64_t AnimatableVelocitySampler.base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v5;
  uint64_t v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v6 = type metadata accessor for VelocitySampler(0, AssociatedTypeWitness, AssociatedConformanceWitness, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, v1, v6);
}

uint64_t AnimatableVelocitySampler.base.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v5;
  uint64_t v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v6 = type metadata accessor for VelocitySampler(0, AssociatedTypeWitness, AssociatedConformanceWitness, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(v1, a1, v6);
}

uint64_t (*AnimatableVelocitySampler.base.modify())(_QWORD, _QWORD)
{
  return _ViewInputs.base.modify;
}

uint64_t AnimatableVelocitySampler.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return VelocitySampler.init()(AssociatedTypeWitness, AssociatedConformanceWitness, a1);
}

uint64_t AnimatableVelocitySampler.init(base:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  uint64_t v7;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  VelocitySampler.init()(AssociatedTypeWitness, AssociatedConformanceWitness, a2);
  v7 = type metadata accessor for VelocitySampler(0, AssociatedTypeWitness, AssociatedConformanceWitness, v6);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(a2, a1, v7);
}

uint64_t AnimatableVelocitySampler.addSample(_:time:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  double v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t, __n128);
  uint64_t v11;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(a3 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (void (*)(char *, uint64_t, uint64_t, __n128))((char *)&v16 - v9);
  v11 = *a2;
  (*(void (**)(uint64_t, uint64_t, double))(v4 + 24))(v5, v4, v8);
  v17 = v11;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v14 = type metadata accessor for VelocitySampler(0, AssociatedTypeWitness, AssociatedConformanceWitness, v13);
  VelocitySampler.addSample(_:time:)(v10, (double *)&v17, v14);
  return (*(uint64_t (**)(void (*)(char *, uint64_t, uint64_t, __n128), uint64_t))(v7 + 8))(v10, AssociatedTypeWitness);
}

uint64_t AnimatableVelocitySampler.velocity(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (char *)&v21 - v9;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v13 = type metadata accessor for _Velocity(0, AssociatedTypeWitness, *(_QWORD *)(*(_QWORD *)(AssociatedConformanceWitness + 8) + 8), v12);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v21 - v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)(v6 - 8) + 16))(a3, a1, v6, v14);
  v18 = type metadata accessor for VelocitySampler(0, AssociatedTypeWitness, AssociatedConformanceWitness, v17);
  VelocitySampler.velocity.getter(v18, v19, (uint64_t)v16);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v16, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 32))(v10, v6, v5);
}

uint64_t type metadata completion function for VelocitySampler()
{
  uint64_t result;
  unint64_t v1;

  swift_getTupleTypeMetadata2();
  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for VelocitySampler(_QWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  int v19;
  void *v20;
  int *v21;
  uint64_t v22;
  int v23;
  char *v24;
  char *v25;
  int v26;
  int v27;
  _BYTE *v28;
  _DWORD *v29;
  int v30;
  int v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;

  v38 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v38 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = v7 + 8;
  v9 = v7 + 9;
  v10 = *(_DWORD *)(v5 + 80);
  v11 = *(unsigned int *)(v5 + 84);
  if ((_DWORD)v11)
    v12 = v7 + 8;
  else
    v12 = v7 + 9;
  v13 = v10 & 0xF8 | 7;
  v14 = ~v13;
  if ((v10 & 0x1000F8) == 0
    && ((v12 + ((v12 + v13 + ((v12 + v13) & ~v13)) & ~v13) + 23) & 0xFFFFFFFFFFFFFFF8) + 8 <= 0x18)
  {
    v37 = v6 + 7;
    if ((_DWORD)v11)
    {
      if (!(*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v5 + 48))(a2, v11, v38))
        goto LABEL_21;
    }
    else if (!*((_BYTE *)a2 + v8)
           || ((v18 = *((unsigned __int8 *)a2 + v8) - 1, (_DWORD)v7 == -8) ? (v19 = 0) : (v18 = 0, v19 = *a2),
               (v19 | v18) == 0xFFFFFFFF))
    {
LABEL_21:
      (*(void (**)(_QWORD *, _DWORD *, uint64_t))(v5 + 16))(a1, a2, v38);
      v24 = (char *)a1 + 7;
      v25 = (char *)a2 + 7;
      *(_QWORD *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
      if ((_DWORD)v11)
      {
        v20 = (void *)((unint64_t)&v24[v8] & v14);
        v21 = (int *)((unint64_t)&v25[v8] & v14);
        v17 = a1;
        v22 = v37;
LABEL_23:
        if (!(*(unsigned int (**)(int *, uint64_t, uint64_t))(v5 + 48))(v21, v11, v38))
          goto LABEL_33;
LABEL_30:
        memcpy(v20, v21, v12);
        v28 = (_BYTE *)(((unint64_t)v20 + v12 + 7) & v14);
        v29 = (_DWORD *)(((unint64_t)v21 + v12 + 7) & v14);
        if ((_DWORD)v11)
          goto LABEL_35;
        v30 = *((unsigned __int8 *)v29 + v8);
        if (!*((_BYTE *)v29 + v8))
          goto LABEL_43;
        goto LABEL_38;
      }
      *((_BYTE *)a1 + v8) = 0;
      v20 = (void *)((unint64_t)&v24[v9] & v14);
      v21 = (int *)((unint64_t)&v25[v9] & v14);
      v17 = a1;
      v22 = v37;
      v23 = *((unsigned __int8 *)v21 + v8);
      if (*((_BYTE *)v21 + v8))
      {
LABEL_26:
        v26 = v23 - 1;
        if ((_DWORD)v7 == -8)
        {
          v27 = 0;
        }
        else
        {
          v26 = 0;
          v27 = *v21;
        }
        if ((v27 | v26) == 0xFFFFFFFF)
          goto LABEL_33;
        goto LABEL_30;
      }
LABEL_33:
      (*(void (**)(void *, int *, uint64_t))(v5 + 16))(v20, v21, v38);
      *(_QWORD *)(((unint64_t)v20 + v22) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v21 + v22) & 0xFFFFFFFFFFFFF8);
      if ((_DWORD)v11)
      {
        v28 = (_BYTE *)(((unint64_t)v20 + v7 + 15) & v14);
        v29 = (_DWORD *)(((unint64_t)v21 + v7 + 15) & v14);
LABEL_35:
        if (!(*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v5 + 48))(v29, v11, v38))
        {
LABEL_43:
          (*(void (**)(_BYTE *, _DWORD *, uint64_t))(v5 + 16))(v28, v29, v38);
          *(_QWORD *)((unint64_t)&v28[v22] & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v29 + v22) & 0xFFFFFFFFFFFFF8);
          if (!(_DWORD)v11)
            v28[v8] = 0;
          goto LABEL_45;
        }
LABEL_42:
        memcpy(v28, v29, v12);
LABEL_45:
        v33 = (unint64_t)&v28[v12 + 7] & 0xFFFFFFFFFFFFFFF8;
        v34 = ((unint64_t)v29 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
        v35 = *(_QWORD *)v34;
        *(_BYTE *)(v33 + 8) = *(_BYTE *)(v34 + 8);
        *(_QWORD *)v33 = v35;
        *(_QWORD *)((unint64_t)&v28[v12 + 23] & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v29
                                                                                        + v12
                                                                                        + 23) & 0xFFFFFFFFFFFFF8);
        return v17;
      }
      *((_BYTE *)v20 + v8) = 0;
      v28 = (_BYTE *)(((unint64_t)v20 + v7 + 16) & v14);
      v29 = (_DWORD *)(((unint64_t)v21 + v7 + 16) & v14);
      v30 = *((unsigned __int8 *)v29 + v8);
      if (!*((_BYTE *)v29 + v8))
        goto LABEL_43;
LABEL_38:
      v31 = v30 - 1;
      if ((_DWORD)v7 == -8)
      {
        v32 = 0;
      }
      else
      {
        v31 = 0;
        v32 = *v29;
      }
      if ((v32 | v31) == 0xFFFFFFFF)
        goto LABEL_43;
      goto LABEL_42;
    }
    v17 = a1;
    memcpy(a1, a2, v12);
    v20 = (void *)(((unint64_t)a1 + v12 + 7) & v14);
    v21 = (int *)(((unint64_t)a2 + v12 + 7) & v14);
    v22 = v37;
    if ((_DWORD)v11)
      goto LABEL_23;
    v23 = *((unsigned __int8 *)v21 + v8);
    if (*((_BYTE *)v21 + v8))
      goto LABEL_26;
    goto LABEL_33;
  }
  v16 = *(_QWORD *)a2;
  *a1 = *(_QWORD *)a2;
  v17 = (_QWORD *)(v16 + ((v13 + 16) & v14));
  swift_retain();
  return v17;
}

uint64_t destroy for VelocitySampler(_DWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  int v16;
  _DWORD *v17;
  uint64_t result;
  int v19;
  int v20;
  int v21;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned int *)(v4 + 84);
  v6 = (*(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v6 + 8;
  if ((_DWORD)v5)
  {
    if ((*(unsigned int (**)(_DWORD *, _QWORD, uint64_t))(v4 + 48))(a1, *(unsigned int *)(v4 + 84), v3))
      goto LABEL_10;
    goto LABEL_9;
  }
  if (!*((_BYTE *)a1 + v7)
    || ((v8 = *((unsigned __int8 *)a1 + v7) - 1, (_DWORD)v6 == -8) ? (v9 = 0) : (v8 = 0, v9 = *a1),
        (v9 | v8) == 0xFFFFFFFF))
  {
LABEL_9:
    (*(void (**)(_DWORD *, uint64_t))(v4 + 8))(a1, v3);
  }
LABEL_10:
  v10 = v6 + 9;
  if ((_DWORD)v5)
    v10 = v6 + 8;
  v11 = *(_DWORD *)(v4 + 80) & 0xF8 | 7;
  v12 = v10 + v11;
  v13 = ~v11;
  v14 = (_DWORD *)(((unint64_t)a1 + v10 + v11) & ~v11);
  if ((_DWORD)v5)
  {
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v4 + 48))(v14, v5, v3))
      goto LABEL_21;
    goto LABEL_20;
  }
  if (!*((_BYTE *)v14 + v7)
    || ((v15 = *((unsigned __int8 *)v14 + v7) - 1, !(_DWORD)v7) ? (v16 = 0) : (v15 = 0, v16 = *v14),
        (v16 | v15) == 0xFFFFFFFF))
  {
LABEL_20:
    (*(void (**)(_DWORD *, uint64_t))(v4 + 8))(v14, v3);
  }
LABEL_21:
  v17 = (_DWORD *)(((unint64_t)v14 + v12) & v13);
  if ((_DWORD)v5)
  {
    result = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v4 + 48))(v17, v5, v3);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(_DWORD *, uint64_t))(v4 + 8))(v17, v3);
  }
  else
  {
    if (!*((_BYTE *)v17 + v7))
      return (*(uint64_t (**)(_DWORD *, uint64_t))(v4 + 8))(v17, v3);
    v19 = *((unsigned __int8 *)v17 + v7) - 1;
    if ((_DWORD)v7)
    {
      v19 = 0;
      v20 = *v17;
    }
    else
    {
      v20 = 0;
    }
    v21 = v20 | v19;
    result = (v21 + 1);
    if (v21 == -1)
      return (*(uint64_t (**)(_DWORD *, uint64_t))(v4 + 8))(v17, v3);
  }
  return result;
}

char *initializeWithCopy for VelocitySampler(char *a1, int *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  size_t v13;
  unint64_t v14;
  size_t v15;
  uint64_t v16;
  size_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int *v23;
  unint64_t v24;
  int v25;
  int v26;
  int v27;
  const void *v28;
  size_t v29;
  void *v30;
  _DWORD *v31;
  char *v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v41;
  uint64_t v42;
  size_t __n;
  char *v44;
  uint64_t v45;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v42 = v8 + 7;
  v9 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = v9 + 8;
  v45 = v5;
  if ((_DWORD)v7)
  {
    if (!(*(unsigned int (**)(int *, uint64_t, uint64_t))(v6 + 48))(a2, v7, v5))
      goto LABEL_13;
LABEL_9:
    if ((_DWORD)v7)
      v13 = v9 + 8;
    else
      v13 = v9 + 9;
    memcpy(a1, a2, v13);
    goto LABEL_15;
  }
  if (*((_BYTE *)a2 + v10))
  {
    v11 = *((unsigned __int8 *)a2 + v10) - 1;
    if ((_DWORD)v9 == -8)
    {
      v12 = 0;
    }
    else
    {
      v11 = 0;
      v12 = *a2;
    }
    if ((v12 | v11) != 0xFFFFFFFF)
      goto LABEL_9;
  }
LABEL_13:
  (*(void (**)(char *, int *, uint64_t))(v6 + 16))(a1, a2, v5);
  *(_QWORD *)((unint64_t)&a1[v8 + 7] & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v8 + 7) & 0xFFFFFFFFFFFFF8);
  if (!(_DWORD)v7)
    a1[v10] = 0;
LABEL_15:
  v14 = v9 + 9;
  if ((_DWORD)v7)
    v15 = v9 + 8;
  else
    v15 = v9 + 9;
  v16 = *(_DWORD *)(v6 + 80) & 0xF8 | 7;
  __n = v15;
  v44 = a1;
  v17 = v15 + v16;
  v18 = (unint64_t)&a1[v15 + v16];
  v19 = ~v16;
  v20 = v18 & ~v16;
  v21 = (unint64_t)a2 + v15 + v16;
  v22 = v10;
  v23 = (int *)(v21 & ~v16);
  v41 = v14;
  if ((_DWORD)v7)
  {
    v24 = v22;
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v21 & ~v16, v7, v45))
      goto LABEL_28;
LABEL_25:
    v28 = (const void *)(v21 & ~v16);
    v29 = __n;
    memcpy((void *)(v18 & ~v16), v28, __n);
    v30 = (void *)((v17 + v20) & v19);
    v31 = (_DWORD *)(((unint64_t)v23 + v17) & v19);
    v32 = v44;
    v33 = v45;
    if ((_DWORD)v7)
      goto LABEL_30;
    v34 = *((unsigned __int8 *)v31 + v24);
    if (!*((_BYTE *)v31 + v24))
      goto LABEL_38;
LABEL_33:
    v35 = v34 - 1;
    if ((_DWORD)v24)
    {
      v35 = 0;
      v36 = *v31;
    }
    else
    {
      v36 = 0;
    }
    if ((v36 | v35) == 0xFFFFFFFF)
      goto LABEL_38;
LABEL_37:
    memcpy(v30, v31, v29);
    goto LABEL_40;
  }
  v24 = v22;
  v25 = *((unsigned __int8 *)v23 + v22);
  if (v25)
  {
    v26 = v25 - 1;
    v27 = v24;
    if ((_DWORD)v24)
    {
      v26 = 0;
      v27 = *v23;
    }
    if ((v27 | v26) != 0xFFFFFFFF)
      goto LABEL_25;
  }
LABEL_28:
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(v18 & ~v16, v21 & ~v16, v45);
  *(_QWORD *)((v42 + v20) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v23 + v42) & 0xFFFFFFFFFFFFF8);
  if (!(_DWORD)v7)
  {
    *(_BYTE *)(v20 + v24) = 0;
    v30 = (void *)(((v18 | v16) + v41) & v19);
    v31 = (_DWORD *)(((v21 | v16) + v41) & v19);
    v32 = v44;
    v33 = v45;
    v29 = __n;
    v34 = *((unsigned __int8 *)v31 + v24);
    if (!*((_BYTE *)v31 + v24))
      goto LABEL_38;
    goto LABEL_33;
  }
  v30 = (void *)(((v18 | v16) + v24) & v19);
  v31 = (_DWORD *)(((v21 | v16) + v24) & v19);
  v32 = v44;
  v33 = v45;
  v29 = __n;
LABEL_30:
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v6 + 48))(v31, v7, v33))
    goto LABEL_37;
LABEL_38:
  (*(void (**)(void *, _DWORD *, uint64_t))(v6 + 16))(v30, v31, v33);
  *(_QWORD *)(((unint64_t)v30 + v42) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v31 + v42) & 0xFFFFFFFFFFFFF8);
  if (!(_DWORD)v7)
    *((_BYTE *)v30 + v24) = 0;
LABEL_40:
  v37 = ((unint64_t)v30 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  v38 = ((unint64_t)v31 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  v39 = *(_QWORD *)v38;
  *(_BYTE *)(v37 + 8) = *(_BYTE *)(v38 + 8);
  *(_QWORD *)v37 = v39;
  *(_QWORD *)(((unint64_t)v30 + v29 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v31 + v29 + 23) & 0xFFFFFFFFFFFFF8);
  return v32;
}

